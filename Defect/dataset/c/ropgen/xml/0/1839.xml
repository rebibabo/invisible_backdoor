<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1839.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">pci_qdev_realize</name><parameter_list pos:start="1:29" pos:end="1:61">(<parameter pos:start="1:30" pos:end="1:46"><decl pos:start="1:30" pos:end="1:46"><type pos:start="1:30" pos:end="1:46"><name pos:start="1:30" pos:end="1:40">DeviceState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">qdev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:53">Error</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:5">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:22">pci_dev</name> <init pos:start="5:24" pos:end="5:42">= <expr pos:start="5:26" pos:end="5:42"><operator pos:start="5:26" pos:end="5:26">(</operator><name pos:start="5:27" pos:end="5:35">PCIDevice</name> <operator pos:start="5:37" pos:end="5:37">*</operator><operator pos:start="5:38" pos:end="5:38">)</operator><name pos:start="5:39" pos:end="5:42">qdev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">PCIDeviceClass</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">pc</name> <init pos:start="7:24" pos:end="7:54">= <expr pos:start="7:26" pos:end="7:54"><call pos:start="7:26" pos:end="7:54"><name pos:start="7:26" pos:end="7:45">PCI_DEVICE_GET_CLASS</name><argument_list pos:start="7:46" pos:end="7:54">(<argument pos:start="7:47" pos:end="7:53"><expr pos:start="7:47" pos:end="7:53"><name pos:start="7:47" pos:end="7:53">pci_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">PCIBus</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:15">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:23">is_default_rom</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:75">/* initialize cap_present for pci_is_express() and pci_config_size() */</comment>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:23">(<expr pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:10">pc</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:22">is_express</name></name></expr>)</condition> <block pos:start="19:25" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:53">

        <expr_stmt pos:start="21:9" pos:end="21:53"><expr pos:start="21:9" pos:end="21:52"><name pos:start="21:9" pos:end="21:28"><name pos:start="21:9" pos:end="21:15">pci_dev</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:28">cap_present</name></name> <operator pos:start="21:30" pos:end="21:31">|=</operator> <name pos:start="21:33" pos:end="21:52">QEMU_PCI_CAP_EXPRESS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:45"><expr pos:start="27:5" pos:end="27:44"><name pos:start="27:5" pos:end="27:7">bus</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:44"><name pos:start="27:11" pos:end="27:17">PCI_BUS</name><argument_list pos:start="27:18" pos:end="27:44">(<argument pos:start="27:19" pos:end="27:43"><expr pos:start="27:19" pos:end="27:43"><call pos:start="27:19" pos:end="27:43"><name pos:start="27:19" pos:end="27:37">qdev_get_parent_bus</name><argument_list pos:start="27:38" pos:end="27:43">(<argument pos:start="27:39" pos:end="27:42"><expr pos:start="27:39" pos:end="27:42"><name pos:start="27:39" pos:end="27:42">qdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="33:59"><expr pos:start="29:5" pos:end="33:58"><name pos:start="29:5" pos:end="29:11">pci_dev</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="33:58"><name pos:start="29:15" pos:end="29:36">do_pci_register_device</name><argument_list pos:start="29:37" pos:end="33:58">(<argument pos:start="29:38" pos:end="29:44"><expr pos:start="29:38" pos:end="29:44"><name pos:start="29:38" pos:end="29:44">pci_dev</name></expr></argument>, <argument pos:start="29:47" pos:end="29:49"><expr pos:start="29:47" pos:end="29:49"><name pos:start="29:47" pos:end="29:49">bus</name></expr></argument>,

                                     <argument pos:start="31:38" pos:end="31:70"><expr pos:start="31:38" pos:end="31:70"><call pos:start="31:38" pos:end="31:70"><name pos:start="31:38" pos:end="31:56">object_get_typename</name><argument_list pos:start="31:57" pos:end="31:70">(<argument pos:start="31:58" pos:end="31:69"><expr pos:start="31:58" pos:end="31:69"><call pos:start="31:58" pos:end="31:69"><name pos:start="31:58" pos:end="31:63">OBJECT</name><argument_list pos:start="31:64" pos:end="31:69">(<argument pos:start="31:65" pos:end="31:68"><expr pos:start="31:65" pos:end="31:68"><name pos:start="31:65" pos:end="31:68">qdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                                     <argument pos:start="33:38" pos:end="33:51"><expr pos:start="33:38" pos:end="33:51"><name pos:start="33:38" pos:end="33:51"><name pos:start="33:38" pos:end="33:44">pci_dev</name><operator pos:start="33:45" pos:end="33:46">-&gt;</operator><name pos:start="33:47" pos:end="33:51">devfn</name></name></expr></argument>, <argument pos:start="33:54" pos:end="33:57"><expr pos:start="33:54" pos:end="33:57"><name pos:start="33:54" pos:end="33:57">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:15"><if pos:start="35:5" pos:end="37:15">if <condition pos:start="35:8" pos:end="35:24">(<expr pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:15">pci_dev</name> <operator pos:start="35:17" pos:end="35:18">==</operator> <name pos:start="35:20" pos:end="35:23">NULL</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:15"><block_content pos:start="37:9" pos:end="37:15">

        <return pos:start="37:9" pos:end="37:15">return;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="55:5"><if pos:start="41:5" pos:end="55:5">if <condition pos:start="41:8" pos:end="41:20">(<expr pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:10">pc</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:19">realize</name></name></expr>)</condition> <block pos:start="41:22" pos:end="55:5">{<block_content pos:start="43:9" pos:end="53:9">

        <expr_stmt pos:start="43:9" pos:end="43:41"><expr pos:start="43:9" pos:end="43:40"><call pos:start="43:9" pos:end="43:40"><name pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:10">pc</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:19">realize</name></name><argument_list pos:start="43:20" pos:end="43:40">(<argument pos:start="43:21" pos:end="43:27"><expr pos:start="43:21" pos:end="43:27"><name pos:start="43:21" pos:end="43:27">pci_dev</name></expr></argument>, <argument pos:start="43:30" pos:end="43:39"><expr pos:start="43:30" pos:end="43:39"><operator pos:start="43:30" pos:end="43:30">&amp;</operator><name pos:start="43:31" pos:end="43:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:22">(<expr pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:21">local_err</name></expr>)</condition> <block pos:start="45:24" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:19">

            <expr_stmt pos:start="47:13" pos:end="47:45"><expr pos:start="47:13" pos:end="47:44"><call pos:start="47:13" pos:end="47:44"><name pos:start="47:13" pos:end="47:27">error_propagate</name><argument_list pos:start="47:28" pos:end="47:44">(<argument pos:start="47:29" pos:end="47:32"><expr pos:start="47:29" pos:end="47:32"><name pos:start="47:29" pos:end="47:32">errp</name></expr></argument>, <argument pos:start="47:35" pos:end="47:43"><expr pos:start="47:35" pos:end="47:43"><name pos:start="47:35" pos:end="47:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:46"><expr pos:start="49:13" pos:end="49:45"><call pos:start="49:13" pos:end="49:45"><name pos:start="49:13" pos:end="49:36">do_pci_unregister_device</name><argument_list pos:start="49:37" pos:end="49:45">(<argument pos:start="49:38" pos:end="49:44"><expr pos:start="49:38" pos:end="49:44"><name pos:start="49:38" pos:end="49:44">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:21">/* rom loading */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:27"><expr pos:start="61:5" pos:end="61:26"><name pos:start="61:5" pos:end="61:18">is_default_rom</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <name pos:start="61:22" pos:end="61:26">false</name></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:56">(<expr pos:start="63:9" pos:end="63:55"><name pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:15">pci_dev</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:24">romfile</name></name> <operator pos:start="63:26" pos:end="63:27">==</operator> <name pos:start="63:29" pos:end="63:32">NULL</name> <operator pos:start="63:34" pos:end="63:35">&amp;&amp;</operator> <name pos:start="63:37" pos:end="63:47"><name pos:start="63:37" pos:end="63:38">pc</name><operator pos:start="63:39" pos:end="63:40">-&gt;</operator><name pos:start="63:41" pos:end="63:47">romfile</name></name> <operator pos:start="63:49" pos:end="63:50">!=</operator> <name pos:start="63:52" pos:end="63:55">NULL</name></expr>)</condition> <block pos:start="63:58" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:30">

        <expr_stmt pos:start="65:9" pos:end="65:49"><expr pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:15">pci_dev</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:24">romfile</name></name> <operator pos:start="65:26" pos:end="65:26">=</operator> <call pos:start="65:28" pos:end="65:48"><name pos:start="65:28" pos:end="65:35">g_strdup</name><argument_list pos:start="65:36" pos:end="65:48">(<argument pos:start="65:37" pos:end="65:47"><expr pos:start="65:37" pos:end="65:47"><name pos:start="65:37" pos:end="65:47"><name pos:start="65:37" pos:end="65:38">pc</name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:47">romfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:30"><expr pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:22">is_default_rom</name> <operator pos:start="67:24" pos:end="67:24">=</operator> <name pos:start="67:26" pos:end="67:29">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:60"><expr pos:start="73:5" pos:end="73:59"><call pos:start="73:5" pos:end="73:59"><name pos:start="73:5" pos:end="73:22">pci_add_option_rom</name><argument_list pos:start="73:23" pos:end="73:59">(<argument pos:start="73:24" pos:end="73:30"><expr pos:start="73:24" pos:end="73:30"><name pos:start="73:24" pos:end="73:30">pci_dev</name></expr></argument>, <argument pos:start="73:33" pos:end="73:46"><expr pos:start="73:33" pos:end="73:46"><name pos:start="73:33" pos:end="73:46">is_default_rom</name></expr></argument>, <argument pos:start="73:49" pos:end="73:58"><expr pos:start="73:49" pos:end="73:58"><operator pos:start="73:49" pos:end="73:49">&amp;</operator><name pos:start="73:50" pos:end="73:58">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:18">(<expr pos:start="75:9" pos:end="75:17"><name pos:start="75:9" pos:end="75:17">local_err</name></expr>)</condition> <block pos:start="75:20" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:15">

        <expr_stmt pos:start="77:9" pos:end="77:41"><expr pos:start="77:9" pos:end="77:40"><call pos:start="77:9" pos:end="77:40"><name pos:start="77:9" pos:end="77:23">error_propagate</name><argument_list pos:start="77:24" pos:end="77:40">(<argument pos:start="77:25" pos:end="77:28"><expr pos:start="77:25" pos:end="77:28"><name pos:start="77:25" pos:end="77:28">errp</name></expr></argument>, <argument pos:start="77:31" pos:end="77:39"><expr pos:start="77:31" pos:end="77:39"><name pos:start="77:31" pos:end="77:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:50"><expr pos:start="79:9" pos:end="79:49"><call pos:start="79:9" pos:end="79:49"><name pos:start="79:9" pos:end="79:26">pci_qdev_unrealize</name><argument_list pos:start="79:27" pos:end="79:49">(<argument pos:start="79:28" pos:end="79:42"><expr pos:start="79:28" pos:end="79:42"><call pos:start="79:28" pos:end="79:42"><name pos:start="79:28" pos:end="79:33">DEVICE</name><argument_list pos:start="79:34" pos:end="79:42">(<argument pos:start="79:35" pos:end="79:41"><expr pos:start="79:35" pos:end="79:41"><name pos:start="79:35" pos:end="79:41">pci_dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="79:45" pos:end="79:48"><expr pos:start="79:45" pos:end="79:48"><name pos:start="79:45" pos:end="79:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:15">return;</return>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
