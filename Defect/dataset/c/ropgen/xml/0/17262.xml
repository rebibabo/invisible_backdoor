<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17262.c" pos:tabs="8"><function pos:start="1:1" pos:end="403:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:49">gen_intermediate_code_internal</name><parameter_list pos:start="1:50" pos:end="5:65">(<parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:56">X86CPU</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">cpu</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:70"><decl pos:start="3:51" pos:end="3:70"><type pos:start="3:51" pos:end="3:70"><name pos:start="3:51" pos:end="3:66">TranslationBlock</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:70">tb</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:64"><decl pos:start="5:51" pos:end="5:64"><type pos:start="5:51" pos:end="5:64"><name pos:start="5:51" pos:end="5:54">bool</name></type> <name pos:start="5:56" pos:end="5:64">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="403:1">{<block_content pos:start="9:5" pos:end="401:5">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">cs</name> <init pos:start="9:18" pos:end="9:27">= <expr pos:start="9:20" pos:end="9:27"><call pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:22">CPU</name><argument_list pos:start="9:23" pos:end="9:27">(<argument pos:start="9:24" pos:end="9:26"><expr pos:start="9:24" pos:end="9:26"><name pos:start="9:24" pos:end="9:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUX86State</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">env</name> <init pos:start="11:22" pos:end="11:32">= <expr pos:start="11:24" pos:end="11:32"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:32"><name pos:start="11:25" pos:end="11:27">cpu</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">DisasContext</name></type> <name pos:start="13:18" pos:end="13:20">dc1</name></decl>, <decl pos:start="13:23" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:25">dc</name> <init pos:start="13:27" pos:end="13:32">= <expr pos:start="13:29" pos:end="13:32"><operator pos:start="13:29" pos:end="13:29">&amp;</operator><name pos:start="13:30" pos:end="13:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:23">pc_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">uint16_t</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:17">CPUBreakpoint</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">j</name></decl>, <decl pos:start="21:12" pos:end="21:13"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:13">lj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint64_t</name></type> <name pos:start="23:14" pos:end="23:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">target_ulong</name></type> <name pos:start="25:18" pos:end="25:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:16">target_ulong</name></type> <name pos:start="27:18" pos:end="27:24">cs_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:18"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:18"><decl pos:start="31:5" pos:end="31:17"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:17">max_insns</name></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:36">/* generate intermediate code */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:12">pc_start</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <name pos:start="37:16" pos:end="37:21"><name pos:start="37:16" pos:end="37:17">tb</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:26"><expr pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:11">cs_base</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:25"><name pos:start="39:15" pos:end="39:16">tb</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:25">cs_base</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:9">flags</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <name pos:start="41:13" pos:end="41:21"><name pos:start="41:13" pos:end="41:14">tb</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:21">flags</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:40"><expr pos:start="45:5" pos:end="45:39"><name pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:6">dc</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:10">pe</name></name> <operator pos:start="45:12" pos:end="45:12">=</operator> <operator pos:start="45:14" pos:end="45:14">(</operator><name pos:start="45:15" pos:end="45:19">flags</name> <operator pos:start="45:21" pos:end="45:22">&gt;&gt;</operator> <name pos:start="45:24" pos:end="45:34">HF_PE_SHIFT</name><operator pos:start="45:35" pos:end="45:35">)</operator> <operator pos:start="45:37" pos:end="45:37">&amp;</operator> <literal type="number" pos:start="45:39" pos:end="45:39">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:46"><expr pos:start="47:5" pos:end="47:45"><name pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:6">dc</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:14">code32</name></name> <operator pos:start="47:16" pos:end="47:16">=</operator> <operator pos:start="47:18" pos:end="47:18">(</operator><name pos:start="47:19" pos:end="47:23">flags</name> <operator pos:start="47:25" pos:end="47:26">&gt;&gt;</operator> <name pos:start="47:28" pos:end="47:40">HF_CS32_SHIFT</name><operator pos:start="47:41" pos:end="47:41">)</operator> <operator pos:start="47:43" pos:end="47:43">&amp;</operator> <literal type="number" pos:start="47:45" pos:end="47:45">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:44"><expr pos:start="49:5" pos:end="49:43"><name pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:6">dc</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:12">ss32</name></name> <operator pos:start="49:14" pos:end="49:14">=</operator> <operator pos:start="49:16" pos:end="49:16">(</operator><name pos:start="49:17" pos:end="49:21">flags</name> <operator pos:start="49:23" pos:end="49:24">&gt;&gt;</operator> <name pos:start="49:26" pos:end="49:38">HF_SS32_SHIFT</name><operator pos:start="49:39" pos:end="49:39">)</operator> <operator pos:start="49:41" pos:end="49:41">&amp;</operator> <literal type="number" pos:start="49:43" pos:end="49:43">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:48"><expr pos:start="51:5" pos:end="51:47"><name pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:6">dc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:14">addseg</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <operator pos:start="51:18" pos:end="51:18">(</operator><name pos:start="51:19" pos:end="51:23">flags</name> <operator pos:start="51:25" pos:end="51:26">&gt;&gt;</operator> <name pos:start="51:28" pos:end="51:42">HF_ADDSEG_SHIFT</name><operator pos:start="51:43" pos:end="51:43">)</operator> <operator pos:start="51:45" pos:end="51:45">&amp;</operator> <literal type="number" pos:start="51:47" pos:end="51:47">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:17"><expr pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:12">f_st</name></name> <operator pos:start="53:14" pos:end="53:14">=</operator> <literal type="number" pos:start="53:16" pos:end="53:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:39"><expr pos:start="55:5" pos:end="55:38"><name pos:start="55:5" pos:end="55:12"><name pos:start="55:5" pos:end="55:6">dc</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:12">vm86</name></name> <operator pos:start="55:14" pos:end="55:14">=</operator> <operator pos:start="55:16" pos:end="55:16">(</operator><name pos:start="55:17" pos:end="55:21">flags</name> <operator pos:start="55:23" pos:end="55:24">&gt;&gt;</operator> <name pos:start="55:26" pos:end="55:33">VM_SHIFT</name><operator pos:start="55:34" pos:end="55:34">)</operator> <operator pos:start="55:36" pos:end="55:36">&amp;</operator> <literal type="number" pos:start="55:38" pos:end="55:38">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:42"><expr pos:start="57:5" pos:end="57:41"><name pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:11">cpl</name></name> <operator pos:start="57:13" pos:end="57:13">=</operator> <operator pos:start="57:15" pos:end="57:15">(</operator><name pos:start="57:16" pos:end="57:20">flags</name> <operator pos:start="57:22" pos:end="57:23">&gt;&gt;</operator> <name pos:start="57:25" pos:end="57:36">HF_CPL_SHIFT</name><operator pos:start="57:37" pos:end="57:37">)</operator> <operator pos:start="57:39" pos:end="57:39">&amp;</operator> <literal type="number" pos:start="57:41" pos:end="57:41">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:41"><expr pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:12"><name pos:start="59:5" pos:end="59:6">dc</name><operator pos:start="59:7" pos:end="59:8">-&gt;</operator><name pos:start="59:9" pos:end="59:12">iopl</name></name> <operator pos:start="59:14" pos:end="59:14">=</operator> <operator pos:start="59:16" pos:end="59:16">(</operator><name pos:start="59:17" pos:end="59:21">flags</name> <operator pos:start="59:23" pos:end="59:24">&gt;&gt;</operator> <name pos:start="59:26" pos:end="59:35">IOPL_SHIFT</name><operator pos:start="59:36" pos:end="59:36">)</operator> <operator pos:start="59:38" pos:end="59:38">&amp;</operator> <literal type="number" pos:start="59:40" pos:end="59:40">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:37"><expr pos:start="61:5" pos:end="61:36"><name pos:start="61:5" pos:end="61:10"><name pos:start="61:5" pos:end="61:6">dc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:10">tf</name></name> <operator pos:start="61:12" pos:end="61:12">=</operator> <operator pos:start="61:14" pos:end="61:14">(</operator><name pos:start="61:15" pos:end="61:19">flags</name> <operator pos:start="61:21" pos:end="61:22">&gt;&gt;</operator> <name pos:start="61:24" pos:end="61:31">TF_SHIFT</name><operator pos:start="61:32" pos:end="61:32">)</operator> <operator pos:start="61:34" pos:end="61:34">&amp;</operator> <literal type="number" pos:start="61:36" pos:end="61:36">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:52"><expr pos:start="63:5" pos:end="63:51"><name pos:start="63:5" pos:end="63:26"><name pos:start="63:5" pos:end="63:6">dc</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:26">singlestep_enabled</name></name> <operator pos:start="63:28" pos:end="63:28">=</operator> <name pos:start="63:30" pos:end="63:51"><name pos:start="63:30" pos:end="63:31">cs</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:51">singlestep_enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:30"><expr pos:start="65:5" pos:end="65:29"><name pos:start="65:5" pos:end="65:13"><name pos:start="65:5" pos:end="65:6">dc</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:13">cc_op</name></name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:29">CC_OP_DYNAMIC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:28"><expr pos:start="67:5" pos:end="67:27"><name pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:6">dc</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:19">cc_op_dirty</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:27">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:26"><expr pos:start="69:5" pos:end="69:25"><name pos:start="69:5" pos:end="69:15"><name pos:start="69:5" pos:end="69:6">dc</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:15">cs_base</name></name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:25">cs_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:16"><expr pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:10"><name pos:start="71:5" pos:end="71:6">dc</name><operator pos:start="71:7" pos:end="71:8">-&gt;</operator><name pos:start="71:9" pos:end="71:10">tb</name></name> <operator pos:start="71:12" pos:end="71:12">=</operator> <name pos:start="71:14" pos:end="71:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:26"><expr pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:21"><name pos:start="73:5" pos:end="73:6">dc</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:21">popl_esp_hack</name></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <literal type="number" pos:start="73:25" pos:end="73:25">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="75:5" pos:end="75:40">/* select memory access functions */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:22"><expr pos:start="77:5" pos:end="77:21"><name pos:start="77:5" pos:end="77:17"><name pos:start="77:5" pos:end="77:6">dc</name><operator pos:start="77:7" pos:end="77:8">-&gt;</operator><name pos:start="77:9" pos:end="77:17">mem_index</name></name> <operator pos:start="77:19" pos:end="77:19">=</operator> <literal type="number" pos:start="77:21" pos:end="77:21">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:32">(<expr pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:13">flags</name> <operator pos:start="79:15" pos:end="79:15">&amp;</operator> <name pos:start="79:17" pos:end="79:31">HF_SOFTMMU_MASK</name></expr>)</condition> <block pos:start="79:34" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:43">

        <expr_stmt pos:start="81:9" pos:end="81:43"><expr pos:start="81:9" pos:end="81:42"><name pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:10">dc</name><operator pos:start="81:11" pos:end="81:12">-&gt;</operator><name pos:start="81:13" pos:end="81:21">mem_index</name></name> <operator pos:start="81:23" pos:end="81:23">=</operator> <call pos:start="81:25" pos:end="81:42"><name pos:start="81:25" pos:end="81:37">cpu_mmu_index</name><argument_list pos:start="81:38" pos:end="81:42">(<argument pos:start="81:39" pos:end="81:41"><expr pos:start="81:39" pos:end="81:41"><name pos:start="81:39" pos:end="81:41">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:51"><expr pos:start="85:5" pos:end="85:50"><name pos:start="85:5" pos:end="85:22"><name pos:start="85:5" pos:end="85:6">dc</name><operator pos:start="85:7" pos:end="85:8">-&gt;</operator><name pos:start="85:9" pos:end="85:22">cpuid_features</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:50"><name pos:start="85:26" pos:end="85:28">env</name><operator pos:start="85:29" pos:end="85:30">-&gt;</operator><name pos:start="85:31" pos:end="85:38">features</name><index pos:start="85:39" pos:end="85:50">[<expr pos:start="85:40" pos:end="85:49"><name pos:start="85:40" pos:end="85:49">FEAT_1_EDX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:55"><expr pos:start="87:5" pos:end="87:54"><name pos:start="87:5" pos:end="87:26"><name pos:start="87:5" pos:end="87:6">dc</name><operator pos:start="87:7" pos:end="87:8">-&gt;</operator><name pos:start="87:9" pos:end="87:26">cpuid_ext_features</name></name> <operator pos:start="87:28" pos:end="87:28">=</operator> <name pos:start="87:30" pos:end="87:54"><name pos:start="87:30" pos:end="87:32">env</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:42">features</name><index pos:start="87:43" pos:end="87:54">[<expr pos:start="87:44" pos:end="87:53"><name pos:start="87:44" pos:end="87:53">FEAT_1_ECX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:64"><expr pos:start="89:5" pos:end="89:63"><name pos:start="89:5" pos:end="89:27"><name pos:start="89:5" pos:end="89:6">dc</name><operator pos:start="89:7" pos:end="89:8">-&gt;</operator><name pos:start="89:9" pos:end="89:27">cpuid_ext2_features</name></name> <operator pos:start="89:29" pos:end="89:29">=</operator> <name pos:start="89:31" pos:end="89:63"><name pos:start="89:31" pos:end="89:33">env</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:43">features</name><index pos:start="89:44" pos:end="89:63">[<expr pos:start="89:45" pos:end="89:62"><name pos:start="89:45" pos:end="89:62">FEAT_8000_0001_EDX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:64"><expr pos:start="91:5" pos:end="91:63"><name pos:start="91:5" pos:end="91:27"><name pos:start="91:5" pos:end="91:6">dc</name><operator pos:start="91:7" pos:end="91:8">-&gt;</operator><name pos:start="91:9" pos:end="91:27">cpuid_ext3_features</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <name pos:start="91:31" pos:end="91:63"><name pos:start="91:31" pos:end="91:33">env</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:43">features</name><index pos:start="91:44" pos:end="91:63">[<expr pos:start="91:45" pos:end="91:62"><name pos:start="91:45" pos:end="91:62">FEAT_8000_0001_ECX</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="96:0"><expr pos:start="93:5" pos:end="93:60"><name pos:start="93:5" pos:end="93:30"><name pos:start="93:5" pos:end="93:6">dc</name><operator pos:start="93:7" pos:end="93:8">-&gt;</operator><name pos:start="93:9" pos:end="93:30">cpuid_7_0_ebx_features</name></name> <operator pos:start="93:32" pos:end="93:32">=</operator> <name pos:start="93:34" pos:end="93:60"><name pos:start="93:34" pos:end="93:36">env</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:46">features</name><index pos:start="93:47" pos:end="93:60">[<expr pos:start="93:48" pos:end="93:59"><name pos:start="93:48" pos:end="93:59">FEAT_7_0_EBX</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:ifdef pos:start="95:1" pos:end="95:20">#<cpp:directive pos:start="95:2" pos:end="95:6">ifdef</cpp:directive> <name pos:start="95:8" pos:end="95:20">TARGET_X86_64</name></cpp:ifdef>

    <expr_stmt pos:start="97:5" pos:end="97:42"><expr pos:start="97:5" pos:end="97:41"><name pos:start="97:5" pos:end="97:11"><name pos:start="97:5" pos:end="97:6">dc</name><operator pos:start="97:7" pos:end="97:8">-&gt;</operator><name pos:start="97:9" pos:end="97:11">lma</name></name> <operator pos:start="97:13" pos:end="97:13">=</operator> <operator pos:start="97:15" pos:end="97:15">(</operator><name pos:start="97:16" pos:end="97:20">flags</name> <operator pos:start="97:22" pos:end="97:23">&gt;&gt;</operator> <name pos:start="97:25" pos:end="97:36">HF_LMA_SHIFT</name><operator pos:start="97:37" pos:end="97:37">)</operator> <operator pos:start="97:39" pos:end="97:39">&amp;</operator> <literal type="number" pos:start="97:41" pos:end="97:41">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="102:0"><expr pos:start="99:5" pos:end="99:45"><name pos:start="99:5" pos:end="99:14"><name pos:start="99:5" pos:end="99:6">dc</name><operator pos:start="99:7" pos:end="99:8">-&gt;</operator><name pos:start="99:9" pos:end="99:14">code64</name></name> <operator pos:start="99:16" pos:end="99:16">=</operator> <operator pos:start="99:18" pos:end="99:18">(</operator><name pos:start="99:19" pos:end="99:23">flags</name> <operator pos:start="99:25" pos:end="99:26">&gt;&gt;</operator> <name pos:start="99:28" pos:end="99:40">HF_CS64_SHIFT</name><operator pos:start="99:41" pos:end="99:41">)</operator> <operator pos:start="99:43" pos:end="99:43">&amp;</operator> <literal type="number" pos:start="99:45" pos:end="99:45">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="103:5" pos:end="103:22"><expr pos:start="103:5" pos:end="103:21"><name pos:start="103:5" pos:end="103:13"><name pos:start="103:5" pos:end="103:6">dc</name><operator pos:start="103:7" pos:end="103:8">-&gt;</operator><name pos:start="103:9" pos:end="103:13">flags</name></name> <operator pos:start="103:15" pos:end="103:15">=</operator> <name pos:start="103:17" pos:end="103:21">flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="115:22"><expr pos:start="105:5" pos:end="115:21"><name pos:start="105:5" pos:end="105:15"><name pos:start="105:5" pos:end="105:6">dc</name><operator pos:start="105:7" pos:end="105:8">-&gt;</operator><name pos:start="105:9" pos:end="105:15">jmp_opt</name></name> <operator pos:start="105:17" pos:end="105:17">=</operator> <operator pos:start="105:19" pos:end="105:19">!</operator><operator pos:start="105:20" pos:end="105:20">(</operator><name pos:start="105:21" pos:end="105:26"><name pos:start="105:21" pos:end="105:22">dc</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:26">tf</name></name> <operator pos:start="105:28" pos:end="105:29">||</operator> <name pos:start="105:31" pos:end="105:52"><name pos:start="105:31" pos:end="105:32">cs</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:52">singlestep_enabled</name></name> <operator pos:start="105:54" pos:end="105:55">||</operator>

                    <operator pos:start="107:21" pos:end="107:21">(</operator><name pos:start="107:22" pos:end="107:26">flags</name> <operator pos:start="107:28" pos:end="107:28">&amp;</operator> <name pos:start="107:30" pos:end="107:48">HF_INHIBIT_IRQ_MASK</name><operator pos:start="107:49" pos:end="110:0">)</operator>

<cpp:ifndef pos:start="109:1" pos:end="109:22">#<cpp:directive pos:start="109:2" pos:end="109:7">ifndef</cpp:directive> <name pos:start="109:9" pos:end="109:22">CONFIG_SOFTMMU</name></cpp:ifndef>

                    <operator pos:start="111:21" pos:end="111:22">||</operator> <operator pos:start="111:24" pos:end="111:24">(</operator><name pos:start="111:25" pos:end="111:29">flags</name> <operator pos:start="111:31" pos:end="111:31">&amp;</operator> <name pos:start="111:33" pos:end="111:47">HF_SOFTMMU_MASK</name><operator pos:start="111:48" pos:end="114:0">)</operator>

<cpp:endif pos:start="113:1" pos:end="113:6">#<cpp:directive pos:start="113:2" pos:end="113:6">endif</cpp:directive></cpp:endif>

                    <operator pos:start="115:21" pos:end="115:21">)</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="117:5" pos:end="135:7">/* Do not optimize repz jumps at all in icount mode, because

       rep movsS instructions are execured with different paths

       in !repz_opt and repz_opt modes. The first one was used

       always except single step mode. And this setting

       disables jumps optimization and control paths become

       equivalent in run and single step modes.

       Now there will be no jump optimization for repz in

       record/replay modes and there will always be an

       additional step for ecx=0 when icount is enabled.

     */</comment>

    <expr_stmt pos:start="137:5" pos:end="148:0"><expr pos:start="137:5" pos:end="137:64"><name pos:start="137:5" pos:end="137:16"><name pos:start="137:5" pos:end="137:6">dc</name><operator pos:start="137:7" pos:end="137:8">-&gt;</operator><name pos:start="137:9" pos:end="137:16">repz_opt</name></name> <operator pos:start="137:18" pos:end="137:18">=</operator> <operator pos:start="137:20" pos:end="137:20">!</operator><name pos:start="137:21" pos:end="137:31"><name pos:start="137:21" pos:end="137:22">dc</name><operator pos:start="137:23" pos:end="137:24">-&gt;</operator><name pos:start="137:25" pos:end="137:31">jmp_opt</name></name> <operator pos:start="137:33" pos:end="137:34">&amp;&amp;</operator> <operator pos:start="137:36" pos:end="137:36">!</operator><operator pos:start="137:37" pos:end="137:37">(</operator><name pos:start="137:38" pos:end="137:47"><name pos:start="137:38" pos:end="137:39">tb</name><operator pos:start="137:40" pos:end="137:41">-&gt;</operator><name pos:start="137:42" pos:end="137:47">cflags</name></name> <operator pos:start="137:49" pos:end="137:49">&amp;</operator> <name pos:start="137:51" pos:end="137:63">CF_USE_ICOUNT</name><operator pos:start="137:64" pos:end="137:64">)</operator></expr>;</expr_stmt>

<cpp:if pos:start="139:1" pos:end="139:5">#<cpp:directive pos:start="139:2" pos:end="139:3">if</cpp:directive> <expr pos:start="139:5" pos:end="139:5"><literal type="number" pos:start="139:5" pos:end="139:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="141:5" pos:end="141:28">/* check addseg logic */</comment>

    if (!dc-&gt;addseg &amp;&amp; (dc-&gt;vm86 || !dc-&gt;pe || !dc-&gt;code32))

        printf("ERROR addseg\n");

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="151:5" pos:end="151:30"><expr pos:start="151:5" pos:end="151:29"><name pos:start="151:5" pos:end="151:12"><name pos:start="151:5" pos:end="151:9">cpu_T</name><index pos:start="151:10" pos:end="151:12">[<expr pos:start="151:11" pos:end="151:11"><literal type="number" pos:start="151:11" pos:end="151:11">0</literal></expr>]</index></name> <operator pos:start="151:14" pos:end="151:14">=</operator> <call pos:start="151:16" pos:end="151:29"><name pos:start="151:16" pos:end="151:27">tcg_temp_new</name><argument_list pos:start="151:28" pos:end="151:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:30"><expr pos:start="153:5" pos:end="153:29"><name pos:start="153:5" pos:end="153:12"><name pos:start="153:5" pos:end="153:9">cpu_T</name><index pos:start="153:10" pos:end="153:12">[<expr pos:start="153:11" pos:end="153:11"><literal type="number" pos:start="153:11" pos:end="153:11">1</literal></expr>]</index></name> <operator pos:start="153:14" pos:end="153:14">=</operator> <call pos:start="153:16" pos:end="153:29"><name pos:start="153:16" pos:end="153:27">tcg_temp_new</name><argument_list pos:start="153:28" pos:end="153:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:28"><expr pos:start="155:5" pos:end="155:27"><name pos:start="155:5" pos:end="155:10">cpu_A0</name> <operator pos:start="155:12" pos:end="155:12">=</operator> <call pos:start="155:14" pos:end="155:27"><name pos:start="155:14" pos:end="155:25">tcg_temp_new</name><argument_list pos:start="155:26" pos:end="155:27">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:30"><expr pos:start="159:5" pos:end="159:29"><name pos:start="159:5" pos:end="159:12">cpu_tmp0</name> <operator pos:start="159:14" pos:end="159:14">=</operator> <call pos:start="159:16" pos:end="159:29"><name pos:start="159:16" pos:end="159:27">tcg_temp_new</name><argument_list pos:start="159:28" pos:end="159:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:38"><expr pos:start="161:5" pos:end="161:37"><name pos:start="161:5" pos:end="161:16">cpu_tmp1_i64</name> <operator pos:start="161:18" pos:end="161:18">=</operator> <call pos:start="161:20" pos:end="161:37"><name pos:start="161:20" pos:end="161:35">tcg_temp_new_i64</name><argument_list pos:start="161:36" pos:end="161:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:38"><expr pos:start="163:5" pos:end="163:37"><name pos:start="163:5" pos:end="163:16">cpu_tmp2_i32</name> <operator pos:start="163:18" pos:end="163:18">=</operator> <call pos:start="163:20" pos:end="163:37"><name pos:start="163:20" pos:end="163:35">tcg_temp_new_i32</name><argument_list pos:start="163:36" pos:end="163:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:38"><expr pos:start="165:5" pos:end="165:37"><name pos:start="165:5" pos:end="165:16">cpu_tmp3_i32</name> <operator pos:start="165:18" pos:end="165:18">=</operator> <call pos:start="165:20" pos:end="165:37"><name pos:start="165:20" pos:end="165:35">tcg_temp_new_i32</name><argument_list pos:start="165:36" pos:end="165:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:30"><expr pos:start="167:5" pos:end="167:29"><name pos:start="167:5" pos:end="167:12">cpu_tmp4</name> <operator pos:start="167:14" pos:end="167:14">=</operator> <call pos:start="167:16" pos:end="167:29"><name pos:start="167:16" pos:end="167:27">tcg_temp_new</name><argument_list pos:start="167:28" pos:end="167:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:34"><expr pos:start="169:5" pos:end="169:33"><name pos:start="169:5" pos:end="169:12">cpu_ptr0</name> <operator pos:start="169:14" pos:end="169:14">=</operator> <call pos:start="169:16" pos:end="169:33"><name pos:start="169:16" pos:end="169:31">tcg_temp_new_ptr</name><argument_list pos:start="169:32" pos:end="169:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:34"><expr pos:start="171:5" pos:end="171:33"><name pos:start="171:5" pos:end="171:12">cpu_ptr1</name> <operator pos:start="171:14" pos:end="171:14">=</operator> <call pos:start="171:16" pos:end="171:33"><name pos:start="171:16" pos:end="171:31">tcg_temp_new_ptr</name><argument_list pos:start="171:32" pos:end="171:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:39"><expr pos:start="173:5" pos:end="173:38"><name pos:start="173:5" pos:end="173:15">cpu_cc_srcT</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <call pos:start="173:19" pos:end="173:38"><name pos:start="173:19" pos:end="173:36">tcg_temp_local_new</name><argument_list pos:start="173:37" pos:end="173:38">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:53"><expr pos:start="177:5" pos:end="177:52"><name pos:start="177:5" pos:end="177:15">gen_opc_end</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <name pos:start="177:19" pos:end="177:37"><name pos:start="177:19" pos:end="177:25">tcg_ctx</name><operator pos:start="177:26" pos:end="177:26">.</operator><name pos:start="177:27" pos:end="177:37">gen_opc_buf</name></name> <operator pos:start="177:39" pos:end="177:39">+</operator> <name pos:start="177:41" pos:end="177:52">OPC_MAX_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:28"><expr pos:start="181:5" pos:end="181:27"><name pos:start="181:5" pos:end="181:14"><name pos:start="181:5" pos:end="181:6">dc</name><operator pos:start="181:7" pos:end="181:8">-&gt;</operator><name pos:start="181:9" pos:end="181:14">is_jmp</name></name> <operator pos:start="181:16" pos:end="181:16">=</operator> <name pos:start="181:18" pos:end="181:27">DISAS_NEXT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:22"><expr pos:start="183:5" pos:end="183:21"><name pos:start="183:5" pos:end="183:10">pc_ptr</name> <operator pos:start="183:12" pos:end="183:12">=</operator> <name pos:start="183:14" pos:end="183:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:12"><expr pos:start="185:5" pos:end="185:11"><name pos:start="185:5" pos:end="185:6">lj</name> <operator pos:start="185:8" pos:end="185:8">=</operator> <operator pos:start="185:10" pos:end="185:10">-</operator><literal type="number" pos:start="185:11" pos:end="185:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:18"><expr pos:start="187:5" pos:end="187:17"><name pos:start="187:5" pos:end="187:13">num_insns</name> <operator pos:start="187:15" pos:end="187:15">=</operator> <literal type="number" pos:start="187:17" pos:end="187:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:43"><expr pos:start="189:5" pos:end="189:42"><name pos:start="189:5" pos:end="189:13">max_insns</name> <operator pos:start="189:15" pos:end="189:15">=</operator> <name pos:start="189:17" pos:end="189:26"><name pos:start="189:17" pos:end="189:18">tb</name><operator pos:start="189:19" pos:end="189:20">-&gt;</operator><name pos:start="189:21" pos:end="189:26">cflags</name></name> <operator pos:start="189:28" pos:end="189:28">&amp;</operator> <name pos:start="189:30" pos:end="189:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="191:5" pos:end="193:34"><if pos:start="191:5" pos:end="193:34">if <condition pos:start="191:8" pos:end="191:23">(<expr pos:start="191:9" pos:end="191:22"><name pos:start="191:9" pos:end="191:17">max_insns</name> <operator pos:start="191:19" pos:end="191:20">==</operator> <literal type="number" pos:start="191:22" pos:end="191:22">0</literal></expr>)</condition><block type="pseudo" pos:start="193:9" pos:end="193:34"><block_content pos:start="193:9" pos:end="193:34">

        <expr_stmt pos:start="193:9" pos:end="193:34"><expr pos:start="193:9" pos:end="193:33"><name pos:start="193:9" pos:end="193:17">max_insns</name> <operator pos:start="193:19" pos:end="193:19">=</operator> <name pos:start="193:21" pos:end="193:33">CF_COUNT_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:19"><expr pos:start="197:5" pos:end="197:18"><call pos:start="197:5" pos:end="197:18"><name pos:start="197:5" pos:end="197:16">gen_tb_start</name><argument_list pos:start="197:17" pos:end="197:18">()</argument_list></call></expr>;</expr_stmt>

    <for pos:start="199:5" pos:end="335:5">for<control pos:start="199:8" pos:end="199:11">(<init pos:start="199:9" pos:end="199:9">;</init><condition pos:start="199:10" pos:end="199:10">;</condition><incr/>)</control> <block pos:start="199:13" pos:end="335:5">{<block_content pos:start="201:9" pos:end="333:9">

        <if_stmt pos:start="201:9" pos:end="217:9"><if pos:start="201:9" pos:end="217:9">if <condition pos:start="201:12" pos:end="201:54">(<expr pos:start="201:13" pos:end="201:53"><call pos:start="201:13" pos:end="201:53"><name pos:start="201:13" pos:end="201:20">unlikely</name><argument_list pos:start="201:21" pos:end="201:53">(<argument pos:start="201:22" pos:end="201:52"><expr pos:start="201:22" pos:end="201:52"><operator pos:start="201:22" pos:end="201:22">!</operator><call pos:start="201:23" pos:end="201:52"><name pos:start="201:23" pos:end="201:34">QTAILQ_EMPTY</name><argument_list pos:start="201:35" pos:end="201:52">(<argument pos:start="201:36" pos:end="201:51"><expr pos:start="201:36" pos:end="201:51"><operator pos:start="201:36" pos:end="201:36">&amp;</operator><name pos:start="201:37" pos:end="201:51"><name pos:start="201:37" pos:end="201:38">cs</name><operator pos:start="201:39" pos:end="201:40">-&gt;</operator><name pos:start="201:41" pos:end="201:51">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="201:56" pos:end="217:9">{<block_content pos:start="203:13" pos:end="215:13">

            <macro pos:start="203:13" pos:end="203:55"><name pos:start="203:13" pos:end="203:26">QTAILQ_FOREACH</name><argument_list pos:start="203:27" pos:end="203:55">(<argument pos:start="203:28" pos:end="203:29">bp</argument>, <argument pos:start="203:32" pos:end="203:47">&amp;cs-&gt;breakpoints</argument>, <argument pos:start="203:50" pos:end="203:54">entry</argument>)</argument_list></macro> <block pos:start="203:57" pos:end="215:13">{<block_content pos:start="205:17" pos:end="213:17">

                <if_stmt pos:start="205:17" pos:end="213:17"><if pos:start="205:17" pos:end="213:17">if <condition pos:start="205:20" pos:end="207:72">(<expr pos:start="205:21" pos:end="207:71"><name pos:start="205:21" pos:end="205:26"><name pos:start="205:21" pos:end="205:22">bp</name><operator pos:start="205:23" pos:end="205:24">-&gt;</operator><name pos:start="205:25" pos:end="205:26">pc</name></name> <operator pos:start="205:28" pos:end="205:29">==</operator> <name pos:start="205:31" pos:end="205:36">pc_ptr</name> <operator pos:start="205:38" pos:end="205:39">&amp;&amp;</operator>

                    <operator pos:start="207:21" pos:end="207:21">!</operator><operator pos:start="207:22" pos:end="207:22">(</operator><operator pos:start="207:23" pos:end="207:23">(</operator><name pos:start="207:24" pos:end="207:32"><name pos:start="207:24" pos:end="207:25">bp</name><operator pos:start="207:26" pos:end="207:27">-&gt;</operator><name pos:start="207:28" pos:end="207:32">flags</name></name> <operator pos:start="207:34" pos:end="207:34">&amp;</operator> <name pos:start="207:36" pos:end="207:41">BP_CPU</name><operator pos:start="207:42" pos:end="207:42">)</operator> <operator pos:start="207:44" pos:end="207:45">&amp;&amp;</operator> <operator pos:start="207:47" pos:end="207:47">(</operator><name pos:start="207:48" pos:end="207:56"><name pos:start="207:48" pos:end="207:49">tb</name><operator pos:start="207:50" pos:end="207:51">-&gt;</operator><name pos:start="207:52" pos:end="207:56">flags</name></name> <operator pos:start="207:58" pos:end="207:58">&amp;</operator> <name pos:start="207:60" pos:end="207:69">HF_RF_MASK</name><operator pos:start="207:70" pos:end="207:70">)</operator><operator pos:start="207:71" pos:end="207:71">)</operator></expr>)</condition> <block pos:start="207:74" pos:end="213:17">{<block_content pos:start="209:21" pos:end="211:41">

                    <expr_stmt pos:start="209:21" pos:end="209:56"><expr pos:start="209:21" pos:end="209:55"><call pos:start="209:21" pos:end="209:55"><name pos:start="209:21" pos:end="209:29">gen_debug</name><argument_list pos:start="209:30" pos:end="209:55">(<argument pos:start="209:31" pos:end="209:32"><expr pos:start="209:31" pos:end="209:32"><name pos:start="209:31" pos:end="209:32">dc</name></expr></argument>, <argument pos:start="209:35" pos:end="209:54"><expr pos:start="209:35" pos:end="209:54"><name pos:start="209:35" pos:end="209:40">pc_ptr</name> <operator pos:start="209:42" pos:end="209:42">-</operator> <name pos:start="209:44" pos:end="209:54"><name pos:start="209:44" pos:end="209:45">dc</name><operator pos:start="209:46" pos:end="209:47">-&gt;</operator><name pos:start="209:48" pos:end="209:54">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="211:21" pos:end="211:41">goto <name pos:start="211:26" pos:end="211:40">done_generating</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="219:9" pos:end="241:9"><if pos:start="219:9" pos:end="241:9">if <condition pos:start="219:12" pos:end="219:22">(<expr pos:start="219:13" pos:end="219:21"><name pos:start="219:13" pos:end="219:21">search_pc</name></expr>)</condition> <block pos:start="219:24" pos:end="241:9">{<block_content pos:start="221:13" pos:end="239:51">

            <expr_stmt pos:start="221:13" pos:end="221:58"><expr pos:start="221:13" pos:end="221:57"><name pos:start="221:13" pos:end="221:13">j</name> <operator pos:start="221:15" pos:end="221:15">=</operator> <name pos:start="221:17" pos:end="221:35"><name pos:start="221:17" pos:end="221:23">tcg_ctx</name><operator pos:start="221:24" pos:end="221:24">.</operator><name pos:start="221:25" pos:end="221:35">gen_opc_ptr</name></name> <operator pos:start="221:37" pos:end="221:37">-</operator> <name pos:start="221:39" pos:end="221:57"><name pos:start="221:39" pos:end="221:45">tcg_ctx</name><operator pos:start="221:46" pos:end="221:46">.</operator><name pos:start="221:47" pos:end="221:57">gen_opc_buf</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="223:13" pos:end="231:13"><if pos:start="223:13" pos:end="231:13">if <condition pos:start="223:16" pos:end="223:23">(<expr pos:start="223:17" pos:end="223:22"><name pos:start="223:17" pos:end="223:18">lj</name> <operator pos:start="223:20" pos:end="223:20">&lt;</operator> <name pos:start="223:22" pos:end="223:22">j</name></expr>)</condition> <block pos:start="223:25" pos:end="231:13">{<block_content pos:start="225:17" pos:end="229:58">

                <expr_stmt pos:start="225:17" pos:end="225:21"><expr pos:start="225:17" pos:end="225:20"><name pos:start="225:17" pos:end="225:18">lj</name><operator pos:start="225:19" pos:end="225:20">++</operator></expr>;</expr_stmt>

                <while pos:start="227:17" pos:end="229:58">while <condition pos:start="227:23" pos:end="227:30">(<expr pos:start="227:24" pos:end="227:29"><name pos:start="227:24" pos:end="227:25">lj</name> <operator pos:start="227:27" pos:end="227:27">&lt;</operator> <name pos:start="227:29" pos:end="227:29">j</name></expr>)</condition><block type="pseudo" pos:start="229:21" pos:end="229:58"><block_content pos:start="229:21" pos:end="229:58">

                    <expr_stmt pos:start="229:21" pos:end="229:58"><expr pos:start="229:21" pos:end="229:57"><name pos:start="229:21" pos:end="229:53"><name pos:start="229:21" pos:end="229:27">tcg_ctx</name><operator pos:start="229:28" pos:end="229:28">.</operator><name pos:start="229:29" pos:end="229:47">gen_opc_instr_start</name><index pos:start="229:48" pos:end="229:53">[<expr pos:start="229:49" pos:end="229:52"><name pos:start="229:49" pos:end="229:50">lj</name><operator pos:start="229:51" pos:end="229:52">++</operator></expr>]</index></name> <operator pos:start="229:55" pos:end="229:55">=</operator> <literal type="number" pos:start="229:57" pos:end="229:57">0</literal></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:44"><expr pos:start="233:13" pos:end="233:43"><name pos:start="233:13" pos:end="233:34"><name pos:start="233:13" pos:end="233:19">tcg_ctx</name><operator pos:start="233:20" pos:end="233:20">.</operator><name pos:start="233:21" pos:end="233:30">gen_opc_pc</name><index pos:start="233:31" pos:end="233:34">[<expr pos:start="233:32" pos:end="233:33"><name pos:start="233:32" pos:end="233:33">lj</name></expr>]</index></name> <operator pos:start="233:36" pos:end="233:36">=</operator> <name pos:start="233:38" pos:end="233:43">pc_ptr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:42"><expr pos:start="235:13" pos:end="235:41"><name pos:start="235:13" pos:end="235:29"><name pos:start="235:13" pos:end="235:25">gen_opc_cc_op</name><index pos:start="235:26" pos:end="235:29">[<expr pos:start="235:27" pos:end="235:28"><name pos:start="235:27" pos:end="235:28">lj</name></expr>]</index></name> <operator pos:start="235:31" pos:end="235:31">=</operator> <name pos:start="235:33" pos:end="235:41"><name pos:start="235:33" pos:end="235:34">dc</name><operator pos:start="235:35" pos:end="235:36">-&gt;</operator><name pos:start="235:37" pos:end="235:41">cc_op</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:48"><expr pos:start="237:13" pos:end="237:47"><name pos:start="237:13" pos:end="237:43"><name pos:start="237:13" pos:end="237:19">tcg_ctx</name><operator pos:start="237:20" pos:end="237:20">.</operator><name pos:start="237:21" pos:end="237:39">gen_opc_instr_start</name><index pos:start="237:40" pos:end="237:43">[<expr pos:start="237:41" pos:end="237:42"><name pos:start="237:41" pos:end="237:42">lj</name></expr>]</index></name> <operator pos:start="237:45" pos:end="237:45">=</operator> <literal type="number" pos:start="237:47" pos:end="237:47">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:51"><expr pos:start="239:13" pos:end="239:50"><name pos:start="239:13" pos:end="239:38"><name pos:start="239:13" pos:end="239:19">tcg_ctx</name><operator pos:start="239:20" pos:end="239:20">.</operator><name pos:start="239:21" pos:end="239:34">gen_opc_icount</name><index pos:start="239:35" pos:end="239:38">[<expr pos:start="239:36" pos:end="239:37"><name pos:start="239:36" pos:end="239:37">lj</name></expr>]</index></name> <operator pos:start="239:40" pos:end="239:40">=</operator> <name pos:start="239:42" pos:end="239:50">num_insns</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="243:9" pos:end="245:27"><if pos:start="243:9" pos:end="245:27">if <condition pos:start="243:12" pos:end="243:68">(<expr pos:start="243:13" pos:end="243:67"><name pos:start="243:13" pos:end="243:21">num_insns</name> <operator pos:start="243:23" pos:end="243:23">+</operator> <literal type="number" pos:start="243:25" pos:end="243:25">1</literal> <operator pos:start="243:27" pos:end="243:28">==</operator> <name pos:start="243:30" pos:end="243:38">max_insns</name> <operator pos:start="243:40" pos:end="243:41">&amp;&amp;</operator> <operator pos:start="243:43" pos:end="243:43">(</operator><name pos:start="243:44" pos:end="243:53"><name pos:start="243:44" pos:end="243:45">tb</name><operator pos:start="243:46" pos:end="243:47">-&gt;</operator><name pos:start="243:48" pos:end="243:53">cflags</name></name> <operator pos:start="243:55" pos:end="243:55">&amp;</operator> <name pos:start="243:57" pos:end="243:66">CF_LAST_IO</name><operator pos:start="243:67" pos:end="243:67">)</operator></expr>)</condition><block type="pseudo" pos:start="245:13" pos:end="245:27"><block_content pos:start="245:13" pos:end="245:27">

            <expr_stmt pos:start="245:13" pos:end="245:27"><expr pos:start="245:13" pos:end="245:26"><call pos:start="245:13" pos:end="245:26"><name pos:start="245:13" pos:end="245:24">gen_io_start</name><argument_list pos:start="245:25" pos:end="245:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="249:9" pos:end="249:45"><expr pos:start="249:9" pos:end="249:44"><name pos:start="249:9" pos:end="249:14">pc_ptr</name> <operator pos:start="249:16" pos:end="249:16">=</operator> <call pos:start="249:18" pos:end="249:44"><name pos:start="249:18" pos:end="249:27">disas_insn</name><argument_list pos:start="249:28" pos:end="249:44">(<argument pos:start="249:29" pos:end="249:31"><expr pos:start="249:29" pos:end="249:31"><name pos:start="249:29" pos:end="249:31">env</name></expr></argument>, <argument pos:start="249:34" pos:end="249:35"><expr pos:start="249:34" pos:end="249:35"><name pos:start="249:34" pos:end="249:35">dc</name></expr></argument>, <argument pos:start="249:38" pos:end="249:43"><expr pos:start="249:38" pos:end="249:43"><name pos:start="249:38" pos:end="249:43">pc_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:20"><expr pos:start="251:9" pos:end="251:19"><name pos:start="251:9" pos:end="251:17">num_insns</name><operator pos:start="251:18" pos:end="251:19">++</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="253:9" pos:end="253:43">/* stop translation if indicated */</comment>

        <if_stmt pos:start="255:9" pos:end="257:18"><if pos:start="255:9" pos:end="257:18">if <condition pos:start="255:12" pos:end="255:23">(<expr pos:start="255:13" pos:end="255:22"><name pos:start="255:13" pos:end="255:22"><name pos:start="255:13" pos:end="255:14">dc</name><operator pos:start="255:15" pos:end="255:16">-&gt;</operator><name pos:start="255:17" pos:end="255:22">is_jmp</name></name></expr>)</condition><block type="pseudo" pos:start="257:13" pos:end="257:18"><block_content pos:start="257:13" pos:end="257:18">

            <break pos:start="257:13" pos:end="257:18">break;</break></block_content></block></if></if_stmt>

        <comment type="block" pos:start="259:9" pos:end="261:35">/* if single step mode, we generate only one instruction and

           generate an exception */</comment>

        <comment type="block" pos:start="263:9" pos:end="267:33">/* if irq were inhibited with HF_INHIBIT_IRQ_MASK, we clear

           the flag and abort the translation to give the irqs a

           change to be happen */</comment>

        <if_stmt pos:start="269:9" pos:end="279:9"><if pos:start="269:9" pos:end="279:9">if <condition pos:start="269:12" pos:end="271:42">(<expr pos:start="269:13" pos:end="271:41"><name pos:start="269:13" pos:end="269:18"><name pos:start="269:13" pos:end="269:14">dc</name><operator pos:start="269:15" pos:end="269:16">-&gt;</operator><name pos:start="269:17" pos:end="269:18">tf</name></name> <operator pos:start="269:20" pos:end="269:21">||</operator> <name pos:start="269:23" pos:end="269:44"><name pos:start="269:23" pos:end="269:24">dc</name><operator pos:start="269:25" pos:end="269:26">-&gt;</operator><name pos:start="269:27" pos:end="269:44">singlestep_enabled</name></name> <operator pos:start="269:46" pos:end="269:47">||</operator>

            <operator pos:start="271:13" pos:end="271:13">(</operator><name pos:start="271:14" pos:end="271:18">flags</name> <operator pos:start="271:20" pos:end="271:20">&amp;</operator> <name pos:start="271:22" pos:end="271:40">HF_INHIBIT_IRQ_MASK</name><operator pos:start="271:41" pos:end="271:41">)</operator></expr>)</condition> <block pos:start="271:44" pos:end="279:9">{<block_content pos:start="273:13" pos:end="277:18">

            <expr_stmt pos:start="273:13" pos:end="273:45"><expr pos:start="273:13" pos:end="273:44"><call pos:start="273:13" pos:end="273:44"><name pos:start="273:13" pos:end="273:22">gen_jmp_im</name><argument_list pos:start="273:23" pos:end="273:44">(<argument pos:start="273:24" pos:end="273:43"><expr pos:start="273:24" pos:end="273:43"><name pos:start="273:24" pos:end="273:29">pc_ptr</name> <operator pos:start="273:31" pos:end="273:31">-</operator> <name pos:start="273:33" pos:end="273:43"><name pos:start="273:33" pos:end="273:34">dc</name><operator pos:start="273:35" pos:end="273:36">-&gt;</operator><name pos:start="273:37" pos:end="273:43">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:24"><expr pos:start="275:13" pos:end="275:23"><call pos:start="275:13" pos:end="275:23"><name pos:start="275:13" pos:end="275:19">gen_eob</name><argument_list pos:start="275:20" pos:end="275:23">(<argument pos:start="275:21" pos:end="275:22"><expr pos:start="275:21" pos:end="275:22"><name pos:start="275:21" pos:end="275:22">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="277:13" pos:end="277:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="281:9" pos:end="291:11">/* Do not cross the boundary of the pages in icount mode,

           it can cause an exception. Do it only when boundary is

           crossed by the first instruction in the block.

           If current instruction already crossed the bound - it's ok,

           because an exception hasn't stopped this code.

         */</comment>

        <if_stmt pos:start="293:9" pos:end="307:9"><if pos:start="293:9" pos:end="307:9">if <condition pos:start="293:12" pos:end="299:54">(<expr pos:start="293:13" pos:end="299:53"><operator pos:start="293:13" pos:end="293:13">(</operator><name pos:start="293:14" pos:end="293:23"><name pos:start="293:14" pos:end="293:15">tb</name><operator pos:start="293:16" pos:end="293:17">-&gt;</operator><name pos:start="293:18" pos:end="293:23">cflags</name></name> <operator pos:start="293:25" pos:end="293:25">&amp;</operator> <name pos:start="293:27" pos:end="293:39">CF_USE_ICOUNT</name><operator pos:start="293:40" pos:end="293:40">)</operator>

            <operator pos:start="295:13" pos:end="295:14">&amp;&amp;</operator> <operator pos:start="295:16" pos:end="295:16">(</operator><operator pos:start="295:17" pos:end="295:17">(</operator><name pos:start="295:18" pos:end="295:23">pc_ptr</name> <operator pos:start="295:25" pos:end="295:25">&amp;</operator> <name pos:start="295:27" pos:end="295:42">TARGET_PAGE_MASK</name><operator pos:start="295:43" pos:end="295:43">)</operator>

                <operator pos:start="297:17" pos:end="297:18">!=</operator> <operator pos:start="297:20" pos:end="297:20">(</operator><operator pos:start="297:21" pos:end="297:21">(</operator><name pos:start="297:22" pos:end="297:27">pc_ptr</name> <operator pos:start="297:29" pos:end="297:29">+</operator> <name pos:start="297:31" pos:end="297:50">TARGET_MAX_INSN_SIZE</name> <operator pos:start="297:52" pos:end="297:52">-</operator> <literal type="number" pos:start="297:54" pos:end="297:54">1</literal><operator pos:start="297:55" pos:end="297:55">)</operator> <operator pos:start="297:57" pos:end="297:57">&amp;</operator> <name pos:start="297:59" pos:end="297:74">TARGET_PAGE_MASK</name><operator pos:start="297:75" pos:end="297:75">)</operator>

                <operator pos:start="299:17" pos:end="299:18">||</operator> <operator pos:start="299:20" pos:end="299:20">(</operator><name pos:start="299:21" pos:end="299:26">pc_ptr</name> <operator pos:start="299:28" pos:end="299:28">&amp;</operator> <operator pos:start="299:30" pos:end="299:30">~</operator><name pos:start="299:31" pos:end="299:46">TARGET_PAGE_MASK</name><operator pos:start="299:47" pos:end="299:47">)</operator> <operator pos:start="299:49" pos:end="299:50">==</operator> <literal type="number" pos:start="299:52" pos:end="299:52">0</literal><operator pos:start="299:53" pos:end="299:53">)</operator></expr>)</condition> <block pos:start="299:56" pos:end="307:9">{<block_content pos:start="301:13" pos:end="305:18">

            <expr_stmt pos:start="301:13" pos:end="301:45"><expr pos:start="301:13" pos:end="301:44"><call pos:start="301:13" pos:end="301:44"><name pos:start="301:13" pos:end="301:22">gen_jmp_im</name><argument_list pos:start="301:23" pos:end="301:44">(<argument pos:start="301:24" pos:end="301:43"><expr pos:start="301:24" pos:end="301:43"><name pos:start="301:24" pos:end="301:29">pc_ptr</name> <operator pos:start="301:31" pos:end="301:31">-</operator> <name pos:start="301:33" pos:end="301:43"><name pos:start="301:33" pos:end="301:34">dc</name><operator pos:start="301:35" pos:end="301:36">-&gt;</operator><name pos:start="301:37" pos:end="301:43">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:24"><expr pos:start="303:13" pos:end="303:23"><call pos:start="303:13" pos:end="303:23"><name pos:start="303:13" pos:end="303:19">gen_eob</name><argument_list pos:start="303:20" pos:end="303:23">(<argument pos:start="303:21" pos:end="303:22"><expr pos:start="303:21" pos:end="303:22"><name pos:start="303:21" pos:end="303:22">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="305:13" pos:end="305:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="309:9" pos:end="309:58">/* if too long translation, stop generation too */</comment>

        <if_stmt pos:start="311:9" pos:end="323:9"><if pos:start="311:9" pos:end="323:9">if <condition pos:start="311:12" pos:end="315:35">(<expr pos:start="311:13" pos:end="315:34"><name pos:start="311:13" pos:end="311:31"><name pos:start="311:13" pos:end="311:19">tcg_ctx</name><operator pos:start="311:20" pos:end="311:20">.</operator><name pos:start="311:21" pos:end="311:31">gen_opc_ptr</name></name> <operator pos:start="311:33" pos:end="311:34">&gt;=</operator> <name pos:start="311:36" pos:end="311:46">gen_opc_end</name> <operator pos:start="311:48" pos:end="311:49">||</operator>

            <operator pos:start="313:13" pos:end="313:13">(</operator><name pos:start="313:14" pos:end="313:19">pc_ptr</name> <operator pos:start="313:21" pos:end="313:21">-</operator> <name pos:start="313:23" pos:end="313:30">pc_start</name><operator pos:start="313:31" pos:end="313:31">)</operator> <operator pos:start="313:33" pos:end="313:34">&gt;=</operator> <operator pos:start="313:36" pos:end="313:36">(</operator><name pos:start="313:37" pos:end="313:52">TARGET_PAGE_SIZE</name> <operator pos:start="313:54" pos:end="313:54">-</operator> <literal type="number" pos:start="313:56" pos:end="313:57">32</literal><operator pos:start="313:58" pos:end="313:58">)</operator> <operator pos:start="313:60" pos:end="313:61">||</operator>

            <name pos:start="315:13" pos:end="315:21">num_insns</name> <operator pos:start="315:23" pos:end="315:24">&gt;=</operator> <name pos:start="315:26" pos:end="315:34">max_insns</name></expr>)</condition> <block pos:start="315:37" pos:end="323:9">{<block_content pos:start="317:13" pos:end="321:18">

            <expr_stmt pos:start="317:13" pos:end="317:45"><expr pos:start="317:13" pos:end="317:44"><call pos:start="317:13" pos:end="317:44"><name pos:start="317:13" pos:end="317:22">gen_jmp_im</name><argument_list pos:start="317:23" pos:end="317:44">(<argument pos:start="317:24" pos:end="317:43"><expr pos:start="317:24" pos:end="317:43"><name pos:start="317:24" pos:end="317:29">pc_ptr</name> <operator pos:start="317:31" pos:end="317:31">-</operator> <name pos:start="317:33" pos:end="317:43"><name pos:start="317:33" pos:end="317:34">dc</name><operator pos:start="317:35" pos:end="317:36">-&gt;</operator><name pos:start="317:37" pos:end="317:43">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:24"><expr pos:start="319:13" pos:end="319:23"><call pos:start="319:13" pos:end="319:23"><name pos:start="319:13" pos:end="319:19">gen_eob</name><argument_list pos:start="319:20" pos:end="319:23">(<argument pos:start="319:21" pos:end="319:22"><expr pos:start="319:21" pos:end="319:22"><name pos:start="319:21" pos:end="319:22">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="321:13" pos:end="321:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="325:9" pos:end="333:9"><if pos:start="325:9" pos:end="333:9">if <condition pos:start="325:12" pos:end="325:23">(<expr pos:start="325:13" pos:end="325:22"><name pos:start="325:13" pos:end="325:22">singlestep</name></expr>)</condition> <block pos:start="325:25" pos:end="333:9">{<block_content pos:start="327:13" pos:end="331:18">

            <expr_stmt pos:start="327:13" pos:end="327:45"><expr pos:start="327:13" pos:end="327:44"><call pos:start="327:13" pos:end="327:44"><name pos:start="327:13" pos:end="327:22">gen_jmp_im</name><argument_list pos:start="327:23" pos:end="327:44">(<argument pos:start="327:24" pos:end="327:43"><expr pos:start="327:24" pos:end="327:43"><name pos:start="327:24" pos:end="327:29">pc_ptr</name> <operator pos:start="327:31" pos:end="327:31">-</operator> <name pos:start="327:33" pos:end="327:43"><name pos:start="327:33" pos:end="327:34">dc</name><operator pos:start="327:35" pos:end="327:36">-&gt;</operator><name pos:start="327:37" pos:end="327:43">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:24"><expr pos:start="329:13" pos:end="329:23"><call pos:start="329:13" pos:end="329:23"><name pos:start="329:13" pos:end="329:19">gen_eob</name><argument_list pos:start="329:20" pos:end="329:23">(<argument pos:start="329:21" pos:end="329:22"><expr pos:start="329:21" pos:end="329:22"><name pos:start="329:21" pos:end="329:22">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="331:13" pos:end="331:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="337:5" pos:end="339:21"><if pos:start="337:5" pos:end="339:21">if <condition pos:start="337:8" pos:end="337:32">(<expr pos:start="337:9" pos:end="337:31"><name pos:start="337:9" pos:end="337:18"><name pos:start="337:9" pos:end="337:10">tb</name><operator pos:start="337:11" pos:end="337:12">-&gt;</operator><name pos:start="337:13" pos:end="337:18">cflags</name></name> <operator pos:start="337:20" pos:end="337:20">&amp;</operator> <name pos:start="337:22" pos:end="337:31">CF_LAST_IO</name></expr>)</condition><block type="pseudo" pos:start="339:9" pos:end="339:21"><block_content pos:start="339:9" pos:end="339:21">

        <expr_stmt pos:start="339:9" pos:end="339:21"><expr pos:start="339:9" pos:end="339:20"><call pos:start="339:9" pos:end="339:20"><name pos:start="339:9" pos:end="339:18">gen_io_end</name><argument_list pos:start="339:19" pos:end="339:20">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label pos:start="341:1" pos:end="341:16"><name pos:start="341:1" pos:end="341:15">done_generating</name>:</label>

    <expr_stmt pos:start="343:5" pos:end="343:30"><expr pos:start="343:5" pos:end="343:29"><call pos:start="343:5" pos:end="343:29"><name pos:start="343:5" pos:end="343:14">gen_tb_end</name><argument_list pos:start="343:15" pos:end="343:29">(<argument pos:start="343:16" pos:end="343:17"><expr pos:start="343:16" pos:end="343:17"><name pos:start="343:16" pos:end="343:17">tb</name></expr></argument>, <argument pos:start="343:20" pos:end="343:28"><expr pos:start="343:20" pos:end="343:28"><name pos:start="343:20" pos:end="343:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:40"><expr pos:start="345:5" pos:end="345:39"><operator pos:start="345:5" pos:end="345:5">*</operator><name pos:start="345:6" pos:end="345:24"><name pos:start="345:6" pos:end="345:12">tcg_ctx</name><operator pos:start="345:13" pos:end="345:13">.</operator><name pos:start="345:14" pos:end="345:24">gen_opc_ptr</name></name> <operator pos:start="345:26" pos:end="345:26">=</operator> <name pos:start="345:28" pos:end="345:39">INDEX_op_end</name></expr>;</expr_stmt>

    <comment type="block" pos:start="347:5" pos:end="347:49">/* we don't forget to fill the last values */</comment>

    <if_stmt pos:start="349:5" pos:end="364:0"><if pos:start="349:5" pos:end="364:0">if <condition pos:start="349:8" pos:end="349:18">(<expr pos:start="349:9" pos:end="349:17"><name pos:start="349:9" pos:end="349:17">search_pc</name></expr>)</condition> <block pos:start="349:20" pos:end="364:0">{<block_content pos:start="351:9" pos:end="357:50">

        <expr_stmt pos:start="351:9" pos:end="351:54"><expr pos:start="351:9" pos:end="351:53"><name pos:start="351:9" pos:end="351:9">j</name> <operator pos:start="351:11" pos:end="351:11">=</operator> <name pos:start="351:13" pos:end="351:31"><name pos:start="351:13" pos:end="351:19">tcg_ctx</name><operator pos:start="351:20" pos:end="351:20">.</operator><name pos:start="351:21" pos:end="351:31">gen_opc_ptr</name></name> <operator pos:start="351:33" pos:end="351:33">-</operator> <name pos:start="351:35" pos:end="351:53"><name pos:start="351:35" pos:end="351:41">tcg_ctx</name><operator pos:start="351:42" pos:end="351:42">.</operator><name pos:start="351:43" pos:end="351:53">gen_opc_buf</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="353:9" pos:end="353:13"><expr pos:start="353:9" pos:end="353:12"><name pos:start="353:9" pos:end="353:10">lj</name><operator pos:start="353:11" pos:end="353:12">++</operator></expr>;</expr_stmt>

        <while pos:start="355:9" pos:end="357:50">while <condition pos:start="355:15" pos:end="355:23">(<expr pos:start="355:16" pos:end="355:22"><name pos:start="355:16" pos:end="355:17">lj</name> <operator pos:start="355:19" pos:end="355:20">&lt;=</operator> <name pos:start="355:22" pos:end="355:22">j</name></expr>)</condition><block type="pseudo" pos:start="357:13" pos:end="357:50"><block_content pos:start="357:13" pos:end="357:50">

            <expr_stmt pos:start="357:13" pos:end="357:50"><expr pos:start="357:13" pos:end="357:49"><name pos:start="357:13" pos:end="357:45"><name pos:start="357:13" pos:end="357:19">tcg_ctx</name><operator pos:start="357:20" pos:end="357:20">.</operator><name pos:start="357:21" pos:end="357:39">gen_opc_instr_start</name><index pos:start="357:40" pos:end="357:45">[<expr pos:start="357:41" pos:end="357:44"><name pos:start="357:41" pos:end="357:42">lj</name><operator pos:start="357:43" pos:end="357:44">++</operator></expr>]</index></name> <operator pos:start="357:47" pos:end="357:47">=</operator> <literal type="number" pos:start="357:49" pos:end="357:49">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="363:1" pos:end="363:18">#<cpp:directive pos:start="363:2" pos:end="363:6">ifdef</cpp:directive> <name pos:start="363:8" pos:end="363:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="365:5" pos:end="392:0"><if pos:start="365:5" pos:end="392:0">if <condition pos:start="365:8" pos:end="365:46">(<expr pos:start="365:9" pos:end="365:45"><call pos:start="365:9" pos:end="365:45"><name pos:start="365:9" pos:end="365:26">qemu_loglevel_mask</name><argument_list pos:start="365:27" pos:end="365:45">(<argument pos:start="365:28" pos:end="365:44"><expr pos:start="365:28" pos:end="365:44"><name pos:start="365:28" pos:end="365:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="365:48" pos:end="392:0">{<block_content pos:start="367:9" pos:end="387:23">

        <decl_stmt pos:start="367:9" pos:end="367:24"><decl pos:start="367:9" pos:end="367:23"><type pos:start="367:9" pos:end="367:11"><name pos:start="367:9" pos:end="367:11">int</name></type> <name pos:start="367:13" pos:end="367:23">disas_flags</name></decl>;</decl_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:39"><expr pos:start="369:9" pos:end="369:38"><call pos:start="369:9" pos:end="369:38"><name pos:start="369:9" pos:end="369:16">qemu_log</name><argument_list pos:start="369:17" pos:end="369:38">(<argument pos:start="369:18" pos:end="369:37"><expr pos:start="369:18" pos:end="369:37"><literal type="string" pos:start="369:18" pos:end="369:37">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="374:0"><expr pos:start="371:9" pos:end="371:53"><call pos:start="371:9" pos:end="371:53"><name pos:start="371:9" pos:end="371:16">qemu_log</name><argument_list pos:start="371:17" pos:end="371:53">(<argument pos:start="371:18" pos:end="371:27"><expr pos:start="371:18" pos:end="371:27"><literal type="string" pos:start="371:18" pos:end="371:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="371:30" pos:end="371:52"><expr pos:start="371:30" pos:end="371:52"><call pos:start="371:30" pos:end="371:52"><name pos:start="371:30" pos:end="371:42">lookup_symbol</name><argument_list pos:start="371:43" pos:end="371:52">(<argument pos:start="371:44" pos:end="371:51"><expr pos:start="371:44" pos:end="371:51"><name pos:start="371:44" pos:end="371:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="373:1" pos:end="373:20">#<cpp:directive pos:start="373:2" pos:end="373:6">ifdef</cpp:directive> <name pos:start="373:8" pos:end="373:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="375:9" pos:end="383:38"><if pos:start="375:9" pos:end="377:28">if <condition pos:start="375:12" pos:end="375:23">(<expr pos:start="375:13" pos:end="375:22"><name pos:start="375:13" pos:end="375:22"><name pos:start="375:13" pos:end="375:14">dc</name><operator pos:start="375:15" pos:end="375:16">-&gt;</operator><name pos:start="375:17" pos:end="375:22">code64</name></name></expr>)</condition><block type="pseudo" pos:start="377:13" pos:end="377:28"><block_content pos:start="377:13" pos:end="377:28">

            <expr_stmt pos:start="377:13" pos:end="377:28"><expr pos:start="377:13" pos:end="377:27"><name pos:start="377:13" pos:end="377:23">disas_flags</name> <operator pos:start="377:25" pos:end="377:25">=</operator> <literal type="number" pos:start="377:27" pos:end="377:27">2</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="379:9" pos:end="383:38">else<block type="pseudo" pos:start="383:13" pos:end="383:38"><block_content pos:start="383:13" pos:end="383:38">

<cpp:endif pos:start="381:1" pos:end="381:6">#<cpp:directive pos:start="381:2" pos:end="381:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="383:13" pos:end="383:38"><expr pos:start="383:13" pos:end="383:37"><name pos:start="383:13" pos:end="383:23">disas_flags</name> <operator pos:start="383:25" pos:end="383:25">=</operator> <operator pos:start="383:27" pos:end="383:27">!</operator><name pos:start="383:28" pos:end="383:37"><name pos:start="383:28" pos:end="383:29">dc</name><operator pos:start="383:30" pos:end="383:31">-&gt;</operator><name pos:start="383:32" pos:end="383:37">code32</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:72"><expr pos:start="385:9" pos:end="385:71"><call pos:start="385:9" pos:end="385:71"><name pos:start="385:9" pos:end="385:24">log_target_disas</name><argument_list pos:start="385:25" pos:end="385:71">(<argument pos:start="385:26" pos:end="385:28"><expr pos:start="385:26" pos:end="385:28"><name pos:start="385:26" pos:end="385:28">env</name></expr></argument>, <argument pos:start="385:31" pos:end="385:38"><expr pos:start="385:31" pos:end="385:38"><name pos:start="385:31" pos:end="385:38">pc_start</name></expr></argument>, <argument pos:start="385:41" pos:end="385:57"><expr pos:start="385:41" pos:end="385:57"><name pos:start="385:41" pos:end="385:46">pc_ptr</name> <operator pos:start="385:48" pos:end="385:48">-</operator> <name pos:start="385:50" pos:end="385:57">pc_start</name></expr></argument>, <argument pos:start="385:60" pos:end="385:70"><expr pos:start="385:60" pos:end="385:70"><name pos:start="385:60" pos:end="385:70">disas_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:23"><expr pos:start="387:9" pos:end="387:22"><call pos:start="387:9" pos:end="387:22"><name pos:start="387:9" pos:end="387:16">qemu_log</name><argument_list pos:start="387:17" pos:end="387:22">(<argument pos:start="387:18" pos:end="387:21"><expr pos:start="387:18" pos:end="387:21"><literal type="string" pos:start="387:18" pos:end="387:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="391:1" pos:end="391:6">#<cpp:directive pos:start="391:2" pos:end="391:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="395:5" pos:end="401:5"><if pos:start="395:5" pos:end="401:5">if <condition pos:start="395:8" pos:end="395:19">(<expr pos:start="395:9" pos:end="395:18"><operator pos:start="395:9" pos:end="395:9">!</operator><name pos:start="395:10" pos:end="395:18">search_pc</name></expr>)</condition> <block pos:start="395:21" pos:end="401:5">{<block_content pos:start="397:9" pos:end="399:31">

        <expr_stmt pos:start="397:9" pos:end="397:37"><expr pos:start="397:9" pos:end="397:36"><name pos:start="397:9" pos:end="397:16"><name pos:start="397:9" pos:end="397:10">tb</name><operator pos:start="397:11" pos:end="397:12">-&gt;</operator><name pos:start="397:13" pos:end="397:16">size</name></name> <operator pos:start="397:18" pos:end="397:18">=</operator> <name pos:start="397:20" pos:end="397:25">pc_ptr</name> <operator pos:start="397:27" pos:end="397:27">-</operator> <name pos:start="397:29" pos:end="397:36">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:31"><expr pos:start="399:9" pos:end="399:30"><name pos:start="399:9" pos:end="399:18"><name pos:start="399:9" pos:end="399:10">tb</name><operator pos:start="399:11" pos:end="399:12">-&gt;</operator><name pos:start="399:13" pos:end="399:18">icount</name></name> <operator pos:start="399:20" pos:end="399:20">=</operator> <name pos:start="399:22" pos:end="399:30">num_insns</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
