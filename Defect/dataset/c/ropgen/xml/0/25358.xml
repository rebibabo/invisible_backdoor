<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25358.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:29">vfio_bar_read</name><parameter_list pos:start="1:30" pos:end="3:57">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">opaque</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:41"><decl pos:start="3:31" pos:end="3:41"><type pos:start="3:31" pos:end="3:41"><name pos:start="3:31" pos:end="3:36">hwaddr</name></type> <name pos:start="3:38" pos:end="3:41">addr</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:56"><decl pos:start="3:44" pos:end="3:56"><type pos:start="3:44" pos:end="3:56"><name pos:start="3:44" pos:end="3:51">unsigned</name></type> <name pos:start="3:53" pos:end="3:56">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:16">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">VFIOBAR</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">bar</name> <init pos:start="7:18" pos:end="7:25">= <expr pos:start="7:20" pos:end="7:25"><name pos:start="7:20" pos:end="7:25">opaque</name></expr></init></decl>;</decl_stmt>

    <union pos:start="9:5" pos:end="19:10">union <block pos:start="9:11" pos:end="19:5">{

        <decl_stmt pos:start="11:9" pos:end="11:21"><decl pos:start="11:9" pos:end="11:20"><type pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:15">uint8_t</name></type> <name pos:start="11:17" pos:end="11:20">byte</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:22"><decl pos:start="13:9" pos:end="13:21"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">uint16_t</name></type> <name pos:start="13:18" pos:end="13:21">word</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:23"><decl pos:start="15:9" pos:end="15:22"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">uint32_t</name></type> <name pos:start="15:18" pos:end="15:22">dword</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:23"><decl pos:start="17:9" pos:end="17:22"><type pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:16">uint64_t</name></type> <name pos:start="17:18" pos:end="17:22">qword</name></decl>;</decl_stmt>

    }</block> <decl pos:start="19:7" pos:end="19:9"><name pos:start="19:7" pos:end="19:9">buf</name></decl>;</union>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:17">data</name> <init pos:start="21:19" pos:end="21:21">= <expr pos:start="21:21" pos:end="21:21"><literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:66">(<expr pos:start="25:9" pos:end="25:65"><call pos:start="25:9" pos:end="25:57"><name pos:start="25:9" pos:end="25:13">pread</name><argument_list pos:start="25:14" pos:end="25:57">(<argument pos:start="25:15" pos:end="25:21"><expr pos:start="25:15" pos:end="25:21"><name pos:start="25:15" pos:end="25:21"><name pos:start="25:15" pos:end="25:17">bar</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:21">fd</name></name></expr></argument>, <argument pos:start="25:24" pos:end="25:27"><expr pos:start="25:24" pos:end="25:27"><operator pos:start="25:24" pos:end="25:24">&amp;</operator><name pos:start="25:25" pos:end="25:27">buf</name></expr></argument>, <argument pos:start="25:30" pos:end="25:33"><expr pos:start="25:30" pos:end="25:33"><name pos:start="25:30" pos:end="25:33">size</name></expr></argument>, <argument pos:start="25:36" pos:end="25:56"><expr pos:start="25:36" pos:end="25:56"><name pos:start="25:36" pos:end="25:49"><name pos:start="25:36" pos:end="25:38">bar</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:49">fd_offset</name></name> <operator pos:start="25:51" pos:end="25:51">+</operator> <name pos:start="25:53" pos:end="25:56">addr</name></expr></argument>)</argument_list></call> <operator pos:start="25:59" pos:end="25:60">!=</operator> <name pos:start="25:62" pos:end="25:65">size</name></expr>)</condition> <block pos:start="25:68" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:28">

        <expr_stmt pos:start="27:9" pos:end="29:43"><expr pos:start="27:9" pos:end="29:42"><call pos:start="27:9" pos:end="29:42"><name pos:start="27:9" pos:end="27:20">error_report</name><argument_list pos:start="27:21" pos:end="29:42">(<argument pos:start="27:22" pos:end="27:59"><expr pos:start="27:22" pos:end="27:59"><literal type="string" pos:start="27:22" pos:end="27:30">"%s(,0x%"</literal><name pos:start="27:31" pos:end="27:41">HWADDR_PRIx</name><literal type="string" pos:start="27:42" pos:end="27:59">", %d) failed: %m"</literal></expr></argument>,

                     <argument pos:start="29:22" pos:end="29:29"><expr pos:start="29:22" pos:end="29:29"><name pos:start="29:22" pos:end="29:29">__func__</name></expr></argument>, <argument pos:start="29:32" pos:end="29:35"><expr pos:start="29:32" pos:end="29:35"><name pos:start="29:32" pos:end="29:35">addr</name></expr></argument>, <argument pos:start="29:38" pos:end="29:41"><expr pos:start="29:38" pos:end="29:41"><name pos:start="29:38" pos:end="29:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:28">return <expr pos:start="31:16" pos:end="31:27"><operator pos:start="31:16" pos:end="31:16">(</operator><name pos:start="31:17" pos:end="31:24">uint64_t</name><operator pos:start="31:25" pos:end="31:25">)</operator><operator pos:start="31:26" pos:end="31:26">-</operator><literal type="number" pos:start="31:27" pos:end="31:27">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="37:5" pos:end="63:5">switch <condition pos:start="37:12" pos:end="37:17">(<expr pos:start="37:13" pos:end="37:16"><name pos:start="37:13" pos:end="37:16">size</name></expr>)</condition> <block pos:start="37:19" pos:end="63:5">{<block_content pos:start="39:5" pos:end="61:14">

    <case pos:start="39:5" pos:end="39:11">case <expr pos:start="39:10" pos:end="39:10"><literal type="number" pos:start="39:10" pos:end="39:10">1</literal></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:24"><expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:12">data</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <name pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:18">buf</name><operator pos:start="41:19" pos:end="41:19">.</operator><name pos:start="41:20" pos:end="41:23">byte</name></name></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:11">case <expr pos:start="45:10" pos:end="45:10"><literal type="number" pos:start="45:10" pos:end="45:10">2</literal></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:37"><expr pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:12">data</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:36"><name pos:start="47:16" pos:end="47:26">le16_to_cpu</name><argument_list pos:start="47:27" pos:end="47:36">(<argument pos:start="47:28" pos:end="47:35"><expr pos:start="47:28" pos:end="47:35"><name pos:start="47:28" pos:end="47:35"><name pos:start="47:28" pos:end="47:30">buf</name><operator pos:start="47:31" pos:end="47:31">.</operator><name pos:start="47:32" pos:end="47:35">word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:11">case <expr pos:start="51:10" pos:end="51:10"><literal type="number" pos:start="51:10" pos:end="51:10">4</literal></expr>:</case>

        <expr_stmt pos:start="53:9" pos:end="53:38"><expr pos:start="53:9" pos:end="53:37"><name pos:start="53:9" pos:end="53:12">data</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="53:37"><name pos:start="53:16" pos:end="53:26">le32_to_cpu</name><argument_list pos:start="53:27" pos:end="53:37">(<argument pos:start="53:28" pos:end="53:36"><expr pos:start="53:28" pos:end="53:36"><name pos:start="53:28" pos:end="53:36"><name pos:start="53:28" pos:end="53:30">buf</name><operator pos:start="53:31" pos:end="53:31">.</operator><name pos:start="53:32" pos:end="53:36">dword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <default pos:start="57:5" pos:end="57:12">default:</default>

        <expr_stmt pos:start="59:9" pos:end="59:66"><expr pos:start="59:9" pos:end="59:65"><call pos:start="59:9" pos:end="59:65"><name pos:start="59:9" pos:end="59:16">hw_error</name><argument_list pos:start="59:17" pos:end="59:65">(<argument pos:start="59:18" pos:end="59:58"><expr pos:start="59:18" pos:end="59:58"><literal type="string" pos:start="59:18" pos:end="59:58">"vfio: unsupported read size, %d bytes\n"</literal></expr></argument>, <argument pos:start="59:61" pos:end="59:64"><expr pos:start="59:61" pos:end="59:64"><name pos:start="59:61" pos:end="59:64">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="67:5" pos:end="69:49"><expr pos:start="67:5" pos:end="69:48"><call pos:start="67:5" pos:end="69:48"><name pos:start="67:5" pos:end="67:11">DPRINTF</name><argument_list pos:start="67:12" pos:end="69:48">(<argument pos:start="67:13" pos:end="67:60"><expr pos:start="67:13" pos:end="67:60"><literal type="string" pos:start="67:13" pos:end="67:26">"%s(BAR%d+0x%"</literal><name pos:start="67:27" pos:end="67:37">HWADDR_PRIx</name><literal type="string" pos:start="67:38" pos:end="67:50">", %d) = 0x%"</literal><name pos:start="67:51" pos:end="67:56">PRIx64</name><literal type="string" pos:start="67:57" pos:end="67:60">"\n"</literal></expr></argument>,

            <argument pos:start="69:13" pos:end="69:20"><expr pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:20">__func__</name></expr></argument>, <argument pos:start="69:23" pos:end="69:29"><expr pos:start="69:23" pos:end="69:29"><name pos:start="69:23" pos:end="69:29"><name pos:start="69:23" pos:end="69:25">bar</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:29">nr</name></name></expr></argument>, <argument pos:start="69:32" pos:end="69:35"><expr pos:start="69:32" pos:end="69:35"><name pos:start="69:32" pos:end="69:35">addr</name></expr></argument>, <argument pos:start="69:38" pos:end="69:41"><expr pos:start="69:38" pos:end="69:41"><name pos:start="69:38" pos:end="69:41">size</name></expr></argument>, <argument pos:start="69:44" pos:end="69:47"><expr pos:start="69:44" pos:end="69:47"><name pos:start="69:44" pos:end="69:47">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:29">/* Same as write above */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:59"><expr pos:start="75:5" pos:end="75:58"><call pos:start="75:5" pos:end="75:58"><name pos:start="75:5" pos:end="75:12">vfio_eoi</name><argument_list pos:start="75:13" pos:end="75:58">(<argument pos:start="75:14" pos:end="75:57"><expr pos:start="75:14" pos:end="75:57"><call pos:start="75:14" pos:end="75:57"><name pos:start="75:14" pos:end="75:25">container_of</name><argument_list pos:start="75:26" pos:end="75:57">(<argument pos:start="75:27" pos:end="75:29"><expr pos:start="75:27" pos:end="75:29"><name pos:start="75:27" pos:end="75:29">bar</name></expr></argument>, <argument pos:start="75:32" pos:end="75:41"><expr pos:start="75:32" pos:end="75:41"><name pos:start="75:32" pos:end="75:41">VFIODevice</name></expr></argument>, <argument pos:start="75:44" pos:end="75:56"><expr pos:start="75:44" pos:end="75:56"><name pos:start="75:44" pos:end="75:56"><name pos:start="75:44" pos:end="75:47">bars</name><index pos:start="75:48" pos:end="75:56">[<expr pos:start="75:49" pos:end="75:55"><name pos:start="75:49" pos:end="75:55"><name pos:start="75:49" pos:end="75:51">bar</name><operator pos:start="75:52" pos:end="75:53">-&gt;</operator><name pos:start="75:54" pos:end="75:55">nr</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="79:5" pos:end="79:16">return <expr pos:start="79:12" pos:end="79:15"><name pos:start="79:12" pos:end="79:15">data</name></expr>;</return>

</block_content>}</block></function>
</unit>
