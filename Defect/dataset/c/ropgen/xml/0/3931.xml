<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3931.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">pc_hot_add_cpu</name><parameter_list pos:start="1:20" pos:end="1:51">(<parameter pos:start="1:21" pos:end="1:36"><decl pos:start="1:21" pos:end="1:36"><type pos:start="1:21" pos:end="1:36"><specifier pos:start="1:21" pos:end="1:25">const</specifier> <name pos:start="1:27" pos:end="1:33">int64_t</name></type> <name pos:start="1:35" pos:end="1:36">id</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:43">Error</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier><modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:30">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">X86CPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">ObjectClass</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">oc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:58"><decl pos:start="9:5" pos:end="9:57"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">PCMachineState</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:24">pcms</name> <init pos:start="9:26" pos:end="9:57">= <expr pos:start="9:28" pos:end="9:57"><call pos:start="9:28" pos:end="9:57"><name pos:start="9:28" pos:end="9:37">PC_MACHINE</name><argument_list pos:start="9:38" pos:end="9:57">(<argument pos:start="9:39" pos:end="9:56"><expr pos:start="9:39" pos:end="9:56"><call pos:start="9:39" pos:end="9:56"><name pos:start="9:39" pos:end="9:54">qdev_get_machine</name><argument_list pos:start="9:55" pos:end="9:56">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:53"><decl pos:start="11:5" pos:end="11:52"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:19">apic_id</name> <init pos:start="11:21" pos:end="11:52">= <expr pos:start="11:23" pos:end="11:52"><call pos:start="11:23" pos:end="11:52"><name pos:start="11:23" pos:end="11:48">x86_cpu_apic_id_from_index</name><argument_list pos:start="11:49" pos:end="11:52">(<argument pos:start="11:50" pos:end="11:51"><expr pos:start="11:50" pos:end="11:51"><name pos:start="11:50" pos:end="11:51">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:15">(<expr pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:10">id</name> <operator pos:start="17:12" pos:end="17:12">&lt;</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>)</condition> <block pos:start="17:17" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:57"><expr pos:start="19:9" pos:end="19:56"><call pos:start="19:9" pos:end="19:56"><name pos:start="19:9" pos:end="19:18">error_setg</name><argument_list pos:start="19:19" pos:end="19:56">(<argument pos:start="19:20" pos:end="19:23"><expr pos:start="19:20" pos:end="19:23"><name pos:start="19:20" pos:end="19:23">errp</name></expr></argument>, <argument pos:start="19:26" pos:end="19:51"><expr pos:start="19:26" pos:end="19:51"><literal type="string" pos:start="19:26" pos:end="19:44">"Invalid CPU id: %"</literal> <name pos:start="19:46" pos:end="19:51">PRIi64</name></expr></argument>, <argument pos:start="19:54" pos:end="19:55"><expr pos:start="19:54" pos:end="19:55"><name pos:start="19:54" pos:end="19:55">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:28">(<expr pos:start="27:9" pos:end="27:27"><call pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:18">cpu_exists</name><argument_list pos:start="27:19" pos:end="27:27">(<argument pos:start="27:20" pos:end="27:26"><expr pos:start="27:20" pos:end="27:26"><name pos:start="27:20" pos:end="27:26">apic_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:30" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:15">

        <expr_stmt pos:start="29:9" pos:end="31:46"><expr pos:start="29:9" pos:end="31:45"><call pos:start="29:9" pos:end="31:45"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="31:45">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>, <argument pos:start="29:26" pos:end="31:40"><expr pos:start="29:26" pos:end="31:40"><literal type="string" pos:start="29:26" pos:end="29:47">"Unable to add CPU: %"</literal> <name pos:start="29:49" pos:end="29:54">PRIi64</name>

                   <literal type="string" pos:start="31:20" pos:end="31:40">", it already exists"</literal></expr></argument>, <argument pos:start="31:43" pos:end="31:44"><expr pos:start="31:43" pos:end="31:44"><name pos:start="31:43" pos:end="31:44">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:23">(<expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:10">id</name> <operator pos:start="39:12" pos:end="39:13">&gt;=</operator> <name pos:start="39:15" pos:end="39:22">max_cpus</name></expr>)</condition> <block pos:start="39:25" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:15">

        <expr_stmt pos:start="41:9" pos:end="43:58"><expr pos:start="41:9" pos:end="43:57"><call pos:start="41:9" pos:end="43:57"><name pos:start="41:9" pos:end="41:18">error_setg</name><argument_list pos:start="41:19" pos:end="43:57">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">errp</name></expr></argument>, <argument pos:start="41:26" pos:end="43:38"><expr pos:start="41:26" pos:end="43:38"><literal type="string" pos:start="41:26" pos:end="41:47">"Unable to add CPU: %"</literal> <name pos:start="41:49" pos:end="41:54">PRIi64</name>

                   <literal type="string" pos:start="43:20" pos:end="43:38">", max allowed: %d"</literal></expr></argument>, <argument pos:start="43:41" pos:end="43:42"><expr pos:start="43:41" pos:end="43:42"><name pos:start="43:41" pos:end="43:42">id</name></expr></argument>, <argument pos:start="43:45" pos:end="43:56"><expr pos:start="43:45" pos:end="43:56"><name pos:start="43:45" pos:end="43:52">max_cpus</name> <operator pos:start="43:54" pos:end="43:54">-</operator> <literal type="number" pos:start="43:56" pos:end="43:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="61:5"><if pos:start="51:5" pos:end="61:5">if <condition pos:start="51:8" pos:end="51:45">(<expr pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:15">apic_id</name> <operator pos:start="51:17" pos:end="51:18">&gt;=</operator> <name pos:start="51:20" pos:end="51:44">ACPI_CPU_HOTPLUG_ID_LIMIT</name></expr>)</condition> <block pos:start="51:47" pos:end="61:5">{<block_content pos:start="53:9" pos:end="59:15">

        <expr_stmt pos:start="53:9" pos:end="57:32"><expr pos:start="53:9" pos:end="57:31"><call pos:start="53:9" pos:end="57:31"><name pos:start="53:9" pos:end="53:18">error_setg</name><argument_list pos:start="53:19" pos:end="57:31">(<argument pos:start="53:20" pos:end="53:23"><expr pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:23">errp</name></expr></argument>, <argument pos:start="53:26" pos:end="55:67"><expr pos:start="53:26" pos:end="55:67"><literal type="string" pos:start="53:26" pos:end="53:47">"Unable to add CPU: %"</literal> <name pos:start="53:49" pos:end="53:54">PRIi64</name>

                   <literal type="string" pos:start="55:20" pos:end="55:43">", resulting APIC ID (%"</literal> <name pos:start="55:45" pos:end="55:50">PRIi64</name> <literal type="string" pos:start="55:52" pos:end="55:67">") is too large"</literal></expr></argument>,

                   <argument pos:start="57:20" pos:end="57:21"><expr pos:start="57:20" pos:end="57:21"><name pos:start="57:20" pos:end="57:21">id</name></expr></argument>, <argument pos:start="57:24" pos:end="57:30"><expr pos:start="57:24" pos:end="57:30"><name pos:start="57:24" pos:end="57:30">apic_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:45"><expr pos:start="65:5" pos:end="65:44"><call pos:start="65:5" pos:end="65:44"><name pos:start="65:5" pos:end="65:10">assert</name><argument_list pos:start="65:11" pos:end="65:44">(<argument pos:start="65:12" pos:end="65:43"><expr pos:start="65:12" pos:end="65:43"><name pos:start="65:12" pos:end="65:39"><name pos:start="65:12" pos:end="65:15">pcms</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:30">possible_cpus</name><operator pos:start="65:31" pos:end="65:32">-&gt;</operator><name pos:start="65:33" pos:end="65:36">cpus</name><index pos:start="65:37" pos:end="65:39">[<expr pos:start="65:38" pos:end="65:38"><literal type="number" pos:start="65:38" pos:end="65:38">0</literal></expr>]</index></name><operator pos:start="65:40" pos:end="65:40">.</operator><name pos:start="65:41" pos:end="65:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="65:47" pos:end="65:73">/* BSP is always present */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:71"><expr pos:start="67:5" pos:end="67:70"><name pos:start="67:5" pos:end="67:6">oc</name> <operator pos:start="67:8" pos:end="67:8">=</operator> <call pos:start="67:10" pos:end="67:70"><name pos:start="67:10" pos:end="67:21">OBJECT_CLASS</name><argument_list pos:start="67:22" pos:end="67:70">(<argument pos:start="67:23" pos:end="67:69"><expr pos:start="67:23" pos:end="67:69"><call pos:start="67:23" pos:end="67:69"><name pos:start="67:23" pos:end="67:35">CPU_GET_CLASS</name><argument_list pos:start="67:36" pos:end="67:69">(<argument pos:start="67:37" pos:end="67:68"><expr pos:start="67:37" pos:end="67:68"><name pos:start="67:37" pos:end="67:64"><name pos:start="67:37" pos:end="67:40">pcms</name><operator pos:start="67:41" pos:end="67:42">-&gt;</operator><name pos:start="67:43" pos:end="67:55">possible_cpus</name><operator pos:start="67:56" pos:end="67:57">-&gt;</operator><name pos:start="67:58" pos:end="67:61">cpus</name><index pos:start="67:62" pos:end="67:64">[<expr pos:start="67:63" pos:end="67:63"><literal type="number" pos:start="67:63" pos:end="67:63">0</literal></expr>]</index></name><operator pos:start="67:65" pos:end="67:65">.</operator><name pos:start="67:66" pos:end="67:68">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:69"><expr pos:start="69:5" pos:end="69:68"><name pos:start="69:5" pos:end="69:7">cpu</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:68"><name pos:start="69:11" pos:end="69:20">pc_new_cpu</name><argument_list pos:start="69:21" pos:end="69:68">(<argument pos:start="69:22" pos:end="69:46"><expr pos:start="69:22" pos:end="69:46"><call pos:start="69:22" pos:end="69:46"><name pos:start="69:22" pos:end="69:42">object_class_get_name</name><argument_list pos:start="69:43" pos:end="69:46">(<argument pos:start="69:44" pos:end="69:45"><expr pos:start="69:44" pos:end="69:45"><name pos:start="69:44" pos:end="69:45">oc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:49" pos:end="69:55"><expr pos:start="69:49" pos:end="69:55"><name pos:start="69:49" pos:end="69:55">apic_id</name></expr></argument>, <argument pos:start="69:58" pos:end="69:67"><expr pos:start="69:58" pos:end="69:67"><operator pos:start="69:58" pos:end="69:58">&amp;</operator><name pos:start="69:59" pos:end="69:67">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:18">(<expr pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:17">local_err</name></expr>)</condition> <block pos:start="71:20" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:15">

        <expr_stmt pos:start="73:9" pos:end="73:41"><expr pos:start="73:9" pos:end="73:40"><call pos:start="73:9" pos:end="73:40"><name pos:start="73:9" pos:end="73:23">error_propagate</name><argument_list pos:start="73:24" pos:end="73:40">(<argument pos:start="73:25" pos:end="73:28"><expr pos:start="73:25" pos:end="73:28"><name pos:start="73:25" pos:end="73:28">errp</name></expr></argument>, <argument pos:start="73:31" pos:end="73:39"><expr pos:start="73:31" pos:end="73:39"><name pos:start="73:31" pos:end="73:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:30"><expr pos:start="79:5" pos:end="79:29"><call pos:start="79:5" pos:end="79:29"><name pos:start="79:5" pos:end="79:16">object_unref</name><argument_list pos:start="79:17" pos:end="79:29">(<argument pos:start="79:18" pos:end="79:28"><expr pos:start="79:18" pos:end="79:28"><call pos:start="79:18" pos:end="79:28"><name pos:start="79:18" pos:end="79:23">OBJECT</name><argument_list pos:start="79:24" pos:end="79:28">(<argument pos:start="79:25" pos:end="79:27"><expr pos:start="79:25" pos:end="79:27"><name pos:start="79:25" pos:end="79:27">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
