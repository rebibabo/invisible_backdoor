<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16911.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:28">qesd_thread_out</name> <parameter_list pos:start="1:30" pos:end="1:40">(<parameter pos:start="1:31" pos:end="1:39"><decl pos:start="1:31" pos:end="1:39"><type pos:start="1:31" pos:end="1:36"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:16">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">ESDVoiceOut</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">esd</name> <init pos:start="5:22" pos:end="5:26">= <expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">HWVoiceOut</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">hw</name> <init pos:start="7:20" pos:end="7:29">= <expr pos:start="7:22" pos:end="7:29"><operator pos:start="7:22" pos:end="7:22">&amp;</operator><name pos:start="7:23" pos:end="7:29"><name pos:start="7:23" pos:end="7:25">esd</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:29">hw</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">threshold</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:62"><expr pos:start="13:5" pos:end="13:61"><name pos:start="13:5" pos:end="13:13">threshold</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <ternary pos:start="13:17" pos:end="13:61"><condition pos:start="13:17" pos:end="13:30"><expr pos:start="13:17" pos:end="13:28"><name pos:start="13:17" pos:end="13:28"><name pos:start="13:17" pos:end="13:20">conf</name><operator pos:start="13:21" pos:end="13:21">.</operator><name pos:start="13:22" pos:end="13:28">divisor</name></name></expr> ?</condition><then pos:start="13:32" pos:end="13:57"> <expr pos:start="13:32" pos:end="13:57"><name pos:start="13:32" pos:end="13:42"><name pos:start="13:32" pos:end="13:33">hw</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:42">samples</name></name> <operator pos:start="13:44" pos:end="13:44">/</operator> <name pos:start="13:46" pos:end="13:57"><name pos:start="13:46" pos:end="13:49">conf</name><operator pos:start="13:50" pos:end="13:50">.</operator><name pos:start="13:51" pos:end="13:57">divisor</name></name></expr> </then><else pos:start="13:59" pos:end="13:61">: <expr pos:start="13:61" pos:end="13:61"><literal type="number" pos:start="13:61" pos:end="13:61">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:45">(<expr pos:start="17:9" pos:end="17:44"><call pos:start="17:9" pos:end="17:44"><name pos:start="17:9" pos:end="17:21">audio_pt_lock</name> <argument_list pos:start="17:23" pos:end="17:44">(<argument pos:start="17:24" pos:end="17:31"><expr pos:start="17:24" pos:end="17:31"><operator pos:start="17:24" pos:end="17:24">&amp;</operator><name pos:start="17:25" pos:end="17:31"><name pos:start="17:25" pos:end="17:27">esd</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:31">pt</name></name></expr></argument>, <argument pos:start="17:34" pos:end="17:43"><expr pos:start="17:34" pos:end="17:43"><name pos:start="17:34" pos:end="17:43">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:47" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:20">

        <return pos:start="19:9" pos:end="19:20">return <expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="25:5" pos:end="155:5">for <control pos:start="25:9" pos:end="25:12">(<init pos:start="25:10" pos:end="25:10">;</init><condition pos:start="25:11" pos:end="25:11">;</condition><incr/>)</control> <block pos:start="25:14" pos:end="155:5">{<block_content pos:start="27:9" pos:end="153:26">

        <decl_stmt pos:start="27:9" pos:end="27:31"><decl pos:start="27:9" pos:end="27:16"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:16">decr</name></decl>, <decl pos:start="27:19" pos:end="27:24"><type ref="prev" pos:start="27:9" pos:end="27:11"/><name pos:start="27:19" pos:end="27:24">to_mix</name></decl>, <decl pos:start="27:27" pos:end="27:30"><type ref="prev" pos:start="27:9" pos:end="27:11"/><name pos:start="27:27" pos:end="27:30">rpos</name></decl>;</decl_stmt>



        <for pos:start="31:9" pos:end="55:9">for <control pos:start="31:13" pos:end="31:16">(<init pos:start="31:14" pos:end="31:14">;</init><condition pos:start="31:15" pos:end="31:15">;</condition><incr/>)</control> <block pos:start="31:18" pos:end="55:9">{<block_content pos:start="33:13" pos:end="53:13">

            <if_stmt pos:start="33:13" pos:end="37:13"><if pos:start="33:13" pos:end="37:13">if <condition pos:start="33:16" pos:end="33:26">(<expr pos:start="33:17" pos:end="33:25"><name pos:start="33:17" pos:end="33:25"><name pos:start="33:17" pos:end="33:19">esd</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:25">done</name></name></expr>)</condition> <block pos:start="33:28" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:26">

                <goto pos:start="35:17" pos:end="35:26">goto <name pos:start="35:22" pos:end="35:25">exit</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="41:13" pos:end="45:13"><if pos:start="41:13" pos:end="45:13">if <condition pos:start="41:16" pos:end="41:38">(<expr pos:start="41:17" pos:end="41:37"><name pos:start="41:17" pos:end="41:25"><name pos:start="41:17" pos:end="41:19">esd</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:25">live</name></name> <operator pos:start="41:27" pos:end="41:27">&gt;</operator> <name pos:start="41:29" pos:end="41:37">threshold</name></expr>)</condition> <block pos:start="41:40" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:22">

                <break pos:start="43:17" pos:end="43:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="49:13" pos:end="53:13"><if pos:start="49:13" pos:end="53:13">if <condition pos:start="49:16" pos:end="49:53">(<expr pos:start="49:17" pos:end="49:52"><call pos:start="49:17" pos:end="49:52"><name pos:start="49:17" pos:end="49:29">audio_pt_wait</name> <argument_list pos:start="49:31" pos:end="49:52">(<argument pos:start="49:32" pos:end="49:39"><expr pos:start="49:32" pos:end="49:39"><operator pos:start="49:32" pos:end="49:32">&amp;</operator><name pos:start="49:33" pos:end="49:39"><name pos:start="49:33" pos:end="49:35">esd</name><operator pos:start="49:36" pos:end="49:37">-&gt;</operator><name pos:start="49:38" pos:end="49:39">pt</name></name></expr></argument>, <argument pos:start="49:42" pos:end="49:51"><expr pos:start="49:42" pos:end="49:51"><name pos:start="49:42" pos:end="49:51">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:55" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:26">

                <goto pos:start="51:17" pos:end="51:26">goto <name pos:start="51:22" pos:end="51:25">exit</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:12">decr</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:21">to_mix</name> <operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:33"><name pos:start="59:25" pos:end="59:27">esd</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:33">live</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:24"><expr pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:12">rpos</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <name pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:17">hw</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:23">rpos</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:51">(<expr pos:start="65:13" pos:end="65:50"><call pos:start="65:13" pos:end="65:50"><name pos:start="65:13" pos:end="65:27">audio_pt_unlock</name> <argument_list pos:start="65:29" pos:end="65:50">(<argument pos:start="65:30" pos:end="65:37"><expr pos:start="65:30" pos:end="65:37"><operator pos:start="65:30" pos:end="65:30">&amp;</operator><name pos:start="65:31" pos:end="65:37"><name pos:start="65:31" pos:end="65:33">esd</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:37">pt</name></name></expr></argument>, <argument pos:start="65:40" pos:end="65:49"><expr pos:start="65:40" pos:end="65:49"><name pos:start="65:40" pos:end="65:49">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:53" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:24">

            <return pos:start="67:13" pos:end="67:24">return <expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <while pos:start="73:9" pos:end="137:9">while <condition pos:start="73:15" pos:end="73:22">(<expr pos:start="73:16" pos:end="73:21"><name pos:start="73:16" pos:end="73:21">to_mix</name></expr>)</condition> <block pos:start="73:24" pos:end="137:9">{<block_content pos:start="75:13" pos:end="135:28">

            <decl_stmt pos:start="75:13" pos:end="75:28"><decl pos:start="75:13" pos:end="75:27"><type pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:19">ssize_t</name></type> <name pos:start="75:21" pos:end="75:27">written</name></decl>;</decl_stmt>

            <decl_stmt pos:start="77:13" pos:end="77:63"><decl pos:start="77:13" pos:end="77:62"><type pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:15">int</name></type> <name pos:start="77:17" pos:end="77:21">chunk</name> <init pos:start="77:23" pos:end="77:62">= <expr pos:start="77:25" pos:end="77:62"><call pos:start="77:25" pos:end="77:62"><name pos:start="77:25" pos:end="77:33">audio_MIN</name> <argument_list pos:start="77:35" pos:end="77:62">(<argument pos:start="77:36" pos:end="77:41"><expr pos:start="77:36" pos:end="77:41"><name pos:start="77:36" pos:end="77:41">to_mix</name></expr></argument>, <argument pos:start="77:44" pos:end="77:61"><expr pos:start="77:44" pos:end="77:61"><name pos:start="77:44" pos:end="77:54"><name pos:start="77:44" pos:end="77:45">hw</name><operator pos:start="77:46" pos:end="77:47">-&gt;</operator><name pos:start="77:48" pos:end="77:54">samples</name></name> <operator pos:start="77:56" pos:end="77:56">-</operator> <name pos:start="77:58" pos:end="77:61">rpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="79:13" pos:end="79:50"><decl pos:start="79:13" pos:end="79:49"><type pos:start="79:13" pos:end="79:25"><name pos:start="79:13" pos:end="79:23">st_sample_t</name> <modifier pos:start="79:25" pos:end="79:25">*</modifier></type><name pos:start="79:26" pos:end="79:28">src</name> <init pos:start="79:30" pos:end="79:49">= <expr pos:start="79:32" pos:end="79:49"><name pos:start="79:32" pos:end="79:42"><name pos:start="79:32" pos:end="79:33">hw</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:42">mix_buf</name></name> <operator pos:start="79:44" pos:end="79:44">+</operator> <name pos:start="79:46" pos:end="79:49">rpos</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="83:13" pos:end="83:48"><expr pos:start="83:13" pos:end="83:47"><call pos:start="83:13" pos:end="83:47"><name pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:14">hw</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:20">clip</name></name> <argument_list pos:start="83:22" pos:end="83:47">(<argument pos:start="83:23" pos:end="83:34"><expr pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:25">esd</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:34">pcm_buf</name></name></expr></argument>, <argument pos:start="83:37" pos:end="83:39"><expr pos:start="83:37" pos:end="83:39"><name pos:start="83:37" pos:end="83:39">src</name></expr></argument>, <argument pos:start="83:42" pos:end="83:46"><expr pos:start="83:42" pos:end="83:46"><name pos:start="83:42" pos:end="83:46">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <label pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:13">again</name>:</label>

            <expr_stmt pos:start="89:13" pos:end="89:77"><expr pos:start="89:13" pos:end="89:76"><name pos:start="89:13" pos:end="89:19">written</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="89:76"><name pos:start="89:23" pos:end="89:27">write</name> <argument_list pos:start="89:29" pos:end="89:76">(<argument pos:start="89:30" pos:end="89:36"><expr pos:start="89:30" pos:end="89:36"><name pos:start="89:30" pos:end="89:36"><name pos:start="89:30" pos:end="89:32">esd</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:36">fd</name></name></expr></argument>, <argument pos:start="89:39" pos:end="89:50"><expr pos:start="89:39" pos:end="89:50"><name pos:start="89:39" pos:end="89:50"><name pos:start="89:39" pos:end="89:41">esd</name><operator pos:start="89:42" pos:end="89:43">-&gt;</operator><name pos:start="89:44" pos:end="89:50">pcm_buf</name></name></expr></argument>, <argument pos:start="89:53" pos:end="89:75"><expr pos:start="89:53" pos:end="89:75"><name pos:start="89:53" pos:end="89:57">chunk</name> <operator pos:start="89:59" pos:end="89:60">&lt;&lt;</operator> <name pos:start="89:62" pos:end="89:75"><name pos:start="89:62" pos:end="89:63">hw</name><operator pos:start="89:64" pos:end="89:65">-&gt;</operator><name pos:start="89:66" pos:end="89:69">info</name><operator pos:start="89:70" pos:end="89:70">.</operator><name pos:start="89:71" pos:end="89:75">shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="103:13"><if pos:start="91:13" pos:end="103:13">if <condition pos:start="91:16" pos:end="91:30">(<expr pos:start="91:17" pos:end="91:29"><name pos:start="91:17" pos:end="91:23">written</name> <operator pos:start="91:25" pos:end="91:26">==</operator> <operator pos:start="91:28" pos:end="91:28">-</operator><literal type="number" pos:start="91:29" pos:end="91:29">1</literal></expr>)</condition> <block pos:start="91:32" pos:end="103:13">{<block_content pos:start="93:17" pos:end="101:28">

                <if_stmt pos:start="93:17" pos:end="97:17"><if pos:start="93:17" pos:end="97:17">if <condition pos:start="93:20" pos:end="93:54">(<expr pos:start="93:21" pos:end="93:53"><name pos:start="93:21" pos:end="93:25">errno</name> <operator pos:start="93:27" pos:end="93:28">==</operator> <name pos:start="93:30" pos:end="93:34">EINTR</name> <operator pos:start="93:36" pos:end="93:37">||</operator> <name pos:start="93:39" pos:end="93:43">errno</name> <operator pos:start="93:45" pos:end="93:46">==</operator> <name pos:start="93:48" pos:end="93:53">EAGAIN</name></expr>)</condition> <block pos:start="93:56" pos:end="97:17">{<block_content pos:start="95:21" pos:end="95:31">

                    <goto pos:start="95:21" pos:end="95:31">goto <name pos:start="95:26" pos:end="95:30">again</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:54"><expr pos:start="99:17" pos:end="99:53"><call pos:start="99:17" pos:end="99:53"><name pos:start="99:17" pos:end="99:27">qesd_logerr</name> <argument_list pos:start="99:29" pos:end="99:53">(<argument pos:start="99:30" pos:end="99:34"><expr pos:start="99:30" pos:end="99:34"><name pos:start="99:30" pos:end="99:34">errno</name></expr></argument>, <argument pos:start="99:37" pos:end="99:52"><expr pos:start="99:37" pos:end="99:52"><literal type="string" pos:start="99:37" pos:end="99:52">"write failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="101:17" pos:end="101:28">return <expr pos:start="101:24" pos:end="101:27"><name pos:start="101:24" pos:end="101:27">NULL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="107:13" pos:end="129:13"><if pos:start="107:13" pos:end="129:13">if <condition pos:start="107:16" pos:end="107:51">(<expr pos:start="107:17" pos:end="107:50"><name pos:start="107:17" pos:end="107:23">written</name> <operator pos:start="107:25" pos:end="107:26">!=</operator> <name pos:start="107:28" pos:end="107:32">chunk</name> <operator pos:start="107:34" pos:end="107:35">&lt;&lt;</operator> <name pos:start="107:37" pos:end="107:50"><name pos:start="107:37" pos:end="107:38">hw</name><operator pos:start="107:39" pos:end="107:40">-&gt;</operator><name pos:start="107:41" pos:end="107:44">info</name><operator pos:start="107:45" pos:end="107:45">.</operator><name pos:start="107:46" pos:end="107:50">shift</name></name></expr>)</condition> <block pos:start="107:53" pos:end="129:13">{<block_content pos:start="109:17" pos:end="127:22">

                <decl_stmt pos:start="109:17" pos:end="109:57"><decl pos:start="109:17" pos:end="109:56"><type pos:start="109:17" pos:end="109:19"><name pos:start="109:17" pos:end="109:19">int</name></type> <name pos:start="109:21" pos:end="109:28">wsamples</name> <init pos:start="109:30" pos:end="109:56">= <expr pos:start="109:32" pos:end="109:56"><name pos:start="109:32" pos:end="109:38">written</name> <operator pos:start="109:40" pos:end="109:41">&gt;&gt;</operator> <name pos:start="109:43" pos:end="109:56"><name pos:start="109:43" pos:end="109:44">hw</name><operator pos:start="109:45" pos:end="109:46">-&gt;</operator><name pos:start="109:47" pos:end="109:50">info</name><operator pos:start="109:51" pos:end="109:51">.</operator><name pos:start="109:52" pos:end="109:56">shift</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="111:17" pos:end="111:56"><decl pos:start="111:17" pos:end="111:55"><type pos:start="111:17" pos:end="111:19"><name pos:start="111:17" pos:end="111:19">int</name></type> <name pos:start="111:21" pos:end="111:26">wbytes</name> <init pos:start="111:28" pos:end="111:55">= <expr pos:start="111:30" pos:end="111:55"><name pos:start="111:30" pos:end="111:37">wsamples</name> <operator pos:start="111:39" pos:end="111:40">&lt;&lt;</operator> <name pos:start="111:42" pos:end="111:55"><name pos:start="111:42" pos:end="111:43">hw</name><operator pos:start="111:44" pos:end="111:45">-&gt;</operator><name pos:start="111:46" pos:end="111:49">info</name><operator pos:start="111:50" pos:end="111:50">.</operator><name pos:start="111:51" pos:end="111:55">shift</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="113:17" pos:end="121:17"><if pos:start="113:17" pos:end="121:17">if <condition pos:start="113:20" pos:end="113:38">(<expr pos:start="113:21" pos:end="113:37"><name pos:start="113:21" pos:end="113:26">wbytes</name> <operator pos:start="113:28" pos:end="113:29">!=</operator> <name pos:start="113:31" pos:end="113:37">written</name></expr>)</condition> <block pos:start="113:40" pos:end="121:17">{<block_content pos:start="115:21" pos:end="119:64">

                    <expr_stmt pos:start="115:21" pos:end="119:64"><expr pos:start="115:21" pos:end="119:63"><call pos:start="115:21" pos:end="119:63"><name pos:start="115:21" pos:end="115:25">dolog</name> <argument_list pos:start="115:27" pos:end="119:63">(<argument pos:start="115:28" pos:end="117:43"><expr pos:start="115:28" pos:end="117:43"><literal type="string" pos:start="115:28" pos:end="115:74">"warning: Misaligned write %d (requested %d), "</literal>

                           <literal type="string" pos:start="117:28" pos:end="117:43">"alignment %d\n"</literal></expr></argument>,

                           <argument pos:start="119:28" pos:end="119:33"><expr pos:start="119:28" pos:end="119:33"><name pos:start="119:28" pos:end="119:33">wbytes</name></expr></argument>, <argument pos:start="119:36" pos:end="119:42"><expr pos:start="119:36" pos:end="119:42"><name pos:start="119:36" pos:end="119:42">written</name></expr></argument>, <argument pos:start="119:45" pos:end="119:62"><expr pos:start="119:45" pos:end="119:62"><name pos:start="119:45" pos:end="119:58"><name pos:start="119:45" pos:end="119:46">hw</name><operator pos:start="119:47" pos:end="119:48">-&gt;</operator><name pos:start="119:49" pos:end="119:52">info</name><operator pos:start="119:53" pos:end="119:53">.</operator><name pos:start="119:54" pos:end="119:58">align</name></name> <operator pos:start="119:60" pos:end="119:60">+</operator> <literal type="number" pos:start="119:62" pos:end="119:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:35"><expr pos:start="123:17" pos:end="123:34"><name pos:start="123:17" pos:end="123:22">to_mix</name> <operator pos:start="123:24" pos:end="123:25">-=</operator> <name pos:start="123:27" pos:end="123:34">wsamples</name></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:55"><expr pos:start="125:17" pos:end="125:54"><name pos:start="125:17" pos:end="125:20">rpos</name> <operator pos:start="125:22" pos:end="125:22">=</operator> <operator pos:start="125:24" pos:end="125:24">(</operator><name pos:start="125:25" pos:end="125:28">rpos</name> <operator pos:start="125:30" pos:end="125:30">+</operator> <name pos:start="125:32" pos:end="125:39">wsamples</name><operator pos:start="125:40" pos:end="125:40">)</operator> <operator pos:start="125:42" pos:end="125:42">%</operator> <name pos:start="125:44" pos:end="125:54"><name pos:start="125:44" pos:end="125:45">hw</name><operator pos:start="125:46" pos:end="125:47">-&gt;</operator><name pos:start="125:48" pos:end="125:54">samples</name></name></expr>;</expr_stmt>

                <break pos:start="127:17" pos:end="127:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="133:13" pos:end="133:48"><expr pos:start="133:13" pos:end="133:47"><name pos:start="133:13" pos:end="133:16">rpos</name> <operator pos:start="133:18" pos:end="133:18">=</operator> <operator pos:start="133:20" pos:end="133:20">(</operator><name pos:start="133:21" pos:end="133:24">rpos</name> <operator pos:start="133:26" pos:end="133:26">+</operator> <name pos:start="133:28" pos:end="133:32">chunk</name><operator pos:start="133:33" pos:end="133:33">)</operator> <operator pos:start="133:35" pos:end="133:35">%</operator> <name pos:start="133:37" pos:end="133:47"><name pos:start="133:37" pos:end="133:38">hw</name><operator pos:start="133:39" pos:end="133:40">-&gt;</operator><name pos:start="133:41" pos:end="133:47">samples</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:28"><expr pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:18">to_mix</name> <operator pos:start="135:20" pos:end="135:21">-=</operator> <name pos:start="135:23" pos:end="135:27">chunk</name></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="141:9" pos:end="145:9"><if pos:start="141:9" pos:end="145:9">if <condition pos:start="141:12" pos:end="141:49">(<expr pos:start="141:13" pos:end="141:48"><call pos:start="141:13" pos:end="141:48"><name pos:start="141:13" pos:end="141:25">audio_pt_lock</name> <argument_list pos:start="141:27" pos:end="141:48">(<argument pos:start="141:28" pos:end="141:35"><expr pos:start="141:28" pos:end="141:35"><operator pos:start="141:28" pos:end="141:28">&amp;</operator><name pos:start="141:29" pos:end="141:35"><name pos:start="141:29" pos:end="141:31">esd</name><operator pos:start="141:32" pos:end="141:33">-&gt;</operator><name pos:start="141:34" pos:end="141:35">pt</name></name></expr></argument>, <argument pos:start="141:38" pos:end="141:47"><expr pos:start="141:38" pos:end="141:47"><name pos:start="141:38" pos:end="141:47">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:51" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:24">

            <return pos:start="143:13" pos:end="143:24">return <expr pos:start="143:20" pos:end="143:23"><name pos:start="143:20" pos:end="143:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:25"><expr pos:start="149:9" pos:end="149:24"><name pos:start="149:9" pos:end="149:17"><name pos:start="149:9" pos:end="149:11">esd</name><operator pos:start="149:12" pos:end="149:13">-&gt;</operator><name pos:start="149:14" pos:end="149:17">rpos</name></name> <operator pos:start="149:19" pos:end="149:19">=</operator> <name pos:start="149:21" pos:end="149:24">rpos</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:26"><expr pos:start="151:9" pos:end="151:25"><name pos:start="151:9" pos:end="151:17"><name pos:start="151:9" pos:end="151:11">esd</name><operator pos:start="151:12" pos:end="151:13">-&gt;</operator><name pos:start="151:14" pos:end="151:17">live</name></name> <operator pos:start="151:19" pos:end="151:20">-=</operator> <name pos:start="151:22" pos:end="151:25">decr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:26"><expr pos:start="153:9" pos:end="153:25"><name pos:start="153:9" pos:end="153:17"><name pos:start="153:9" pos:end="153:11">esd</name><operator pos:start="153:12" pos:end="153:13">-&gt;</operator><name pos:start="153:14" pos:end="153:17">decr</name></name> <operator pos:start="153:19" pos:end="153:20">+=</operator> <name pos:start="153:22" pos:end="153:25">decr</name></expr>;</expr_stmt>

    </block_content>}</block></for>



 <label pos:start="159:2" pos:end="159:6"><name pos:start="159:2" pos:end="159:5">exit</name>:</label>

    <expr_stmt pos:start="161:5" pos:end="161:43"><expr pos:start="161:5" pos:end="161:42"><call pos:start="161:5" pos:end="161:42"><name pos:start="161:5" pos:end="161:19">audio_pt_unlock</name> <argument_list pos:start="161:21" pos:end="161:42">(<argument pos:start="161:22" pos:end="161:29"><expr pos:start="161:22" pos:end="161:29"><operator pos:start="161:22" pos:end="161:22">&amp;</operator><name pos:start="161:23" pos:end="161:29"><name pos:start="161:23" pos:end="161:25">esd</name><operator pos:start="161:26" pos:end="161:27">-&gt;</operator><name pos:start="161:28" pos:end="161:29">pt</name></name></expr></argument>, <argument pos:start="161:32" pos:end="161:41"><expr pos:start="161:32" pos:end="161:41"><name pos:start="161:32" pos:end="161:41">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="163:5" pos:end="163:16">return <expr pos:start="163:12" pos:end="163:15"><name pos:start="163:12" pos:end="163:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
