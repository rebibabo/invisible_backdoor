<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5580.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">xics_kvm_cpu_setup</name><parameter_list pos:start="1:31" pos:end="1:64">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:40">XICSState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">xics</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:63"><decl pos:start="1:49" pos:end="1:63"><type pos:start="1:49" pos:end="1:63"><name pos:start="1:49" pos:end="1:58">PowerPCCPU</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">ICPState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">ss</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">KVMXICSState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:25">xicskvm</name> <init pos:start="9:27" pos:end="9:48">= <expr pos:start="9:29" pos:end="9:48"><call pos:start="9:29" pos:end="9:48"><name pos:start="9:29" pos:end="9:42">XICS_SPAPR_KVM</name><argument_list pos:start="9:43" pos:end="9:48">(<argument pos:start="9:44" pos:end="9:47"><expr pos:start="9:44" pos:end="9:47"><name pos:start="9:44" pos:end="9:47">xics</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:18"><expr pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:6">cs</name> <operator pos:start="13:8" pos:end="13:8">=</operator> <call pos:start="13:10" pos:end="13:17"><name pos:start="13:10" pos:end="13:12">CPU</name><argument_list pos:start="13:13" pos:end="13:17">(<argument pos:start="13:14" pos:end="13:16"><expr pos:start="13:14" pos:end="13:16"><name pos:start="13:14" pos:end="13:16">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:6">ss</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <operator pos:start="15:10" pos:end="15:10">&amp;</operator><name pos:start="15:11" pos:end="15:33"><name pos:start="15:11" pos:end="15:14">xics</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:18">ss</name><index pos:start="15:19" pos:end="15:33">[<expr pos:start="15:20" pos:end="15:32"><name pos:start="15:20" pos:end="15:32"><name pos:start="15:20" pos:end="15:21">cs</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:32">cpu_index</name></name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:45"><expr pos:start="19:5" pos:end="19:44"><call pos:start="19:5" pos:end="19:44"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:44">(<argument pos:start="19:12" pos:end="19:43"><expr pos:start="19:12" pos:end="19:43"><name pos:start="19:12" pos:end="19:24"><name pos:start="19:12" pos:end="19:13">cs</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:24">cpu_index</name></name> <operator pos:start="19:26" pos:end="19:26">&lt;</operator> <name pos:start="19:28" pos:end="19:43"><name pos:start="19:28" pos:end="19:31">xics</name><operator pos:start="19:32" pos:end="19:33">-&gt;</operator><name pos:start="19:34" pos:end="19:43">nr_servers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:38">(<expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:15">xicskvm</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:31">kernel_xics_fd</name></name> <operator pos:start="21:33" pos:end="21:34">==</operator> <operator pos:start="21:36" pos:end="21:36">-</operator><literal type="number" pos:start="21:37" pos:end="21:37">1</literal></expr>)</condition> <block pos:start="21:40" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:16">

        <expr_stmt pos:start="23:9" pos:end="23:16"><expr pos:start="23:9" pos:end="23:15"><call pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:13">abort</name><argument_list pos:start="23:14" pos:end="23:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="37:7">/*

     * If we are reusing a parked vCPU fd corresponding to the CPU

     * which was hot-removed earlier we don't have to renable

     * KVM_CAP_IRQ_XICS capability again.

     */</comment>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:33">(<expr pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:10">ss</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:32">cap_irq_xics_enabled</name></name></expr>)</condition> <block pos:start="39:35" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:15">

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="71:5"><if pos:start="47:5" pos:end="71:5">if <condition pos:start="47:8" pos:end="47:38">(<expr pos:start="47:9" pos:end="47:37"><name pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:15">xicskvm</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:31">kernel_xics_fd</name></name> <operator pos:start="47:33" pos:end="47:34">!=</operator> <operator pos:start="47:36" pos:end="47:36">-</operator><literal type="number" pos:start="47:37" pos:end="47:37">1</literal></expr>)</condition> <block pos:start="47:40" pos:end="71:5">{<block_content pos:start="49:9" pos:end="69:40">

        <decl_stmt pos:start="49:9" pos:end="49:16"><decl pos:start="49:9" pos:end="49:15"><type pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">int</name></type> <name pos:start="49:13" pos:end="49:15">ret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="53:9" pos:end="57:56"><expr pos:start="53:9" pos:end="57:55"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="57:55"><name pos:start="53:15" pos:end="53:33">kvm_vcpu_enable_cap</name><argument_list pos:start="53:34" pos:end="57:55">(<argument pos:start="53:35" pos:end="53:36"><expr pos:start="53:35" pos:end="53:36"><name pos:start="53:35" pos:end="53:36">cs</name></expr></argument>, <argument pos:start="53:39" pos:end="53:54"><expr pos:start="53:39" pos:end="53:54"><name pos:start="53:39" pos:end="53:54">KVM_CAP_IRQ_XICS</name></expr></argument>, <argument pos:start="53:57" pos:end="53:57"><expr pos:start="53:57" pos:end="53:57"><literal type="number" pos:start="53:57" pos:end="53:57">0</literal></expr></argument>,

                                  <argument pos:start="55:35" pos:end="55:57"><expr pos:start="55:35" pos:end="55:57"><name pos:start="55:35" pos:end="55:57"><name pos:start="55:35" pos:end="55:41">xicskvm</name><operator pos:start="55:42" pos:end="55:43">-&gt;</operator><name pos:start="55:44" pos:end="55:57">kernel_xics_fd</name></name></expr></argument>,

                                  <argument pos:start="57:35" pos:end="57:54"><expr pos:start="57:35" pos:end="57:54"><call pos:start="57:35" pos:end="57:54"><name pos:start="57:35" pos:end="57:50">kvm_arch_vcpu_id</name><argument_list pos:start="57:51" pos:end="57:54">(<argument pos:start="57:52" pos:end="57:53"><expr pos:start="57:52" pos:end="57:53"><name pos:start="57:52" pos:end="57:53">cs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:20">(<expr pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:17">&lt;</operator> <literal type="number" pos:start="59:19" pos:end="59:19">0</literal></expr>)</condition> <block pos:start="59:22" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:20">

            <expr_stmt pos:start="61:13" pos:end="63:59"><expr pos:start="61:13" pos:end="63:58"><call pos:start="61:13" pos:end="63:58"><name pos:start="61:13" pos:end="61:24">error_report</name><argument_list pos:start="61:25" pos:end="63:58">(<argument pos:start="61:26" pos:end="61:70"><expr pos:start="61:26" pos:end="61:70"><literal type="string" pos:start="61:26" pos:end="61:70">"Unable to connect CPU%ld to kernel XICS: %s"</literal></expr></argument>,

                    <argument pos:start="63:21" pos:end="63:40"><expr pos:start="63:21" pos:end="63:40"><call pos:start="63:21" pos:end="63:40"><name pos:start="63:21" pos:end="63:36">kvm_arch_vcpu_id</name><argument_list pos:start="63:37" pos:end="63:40">(<argument pos:start="63:38" pos:end="63:39"><expr pos:start="63:38" pos:end="63:39"><name pos:start="63:38" pos:end="63:39">cs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="63:43" pos:end="63:57"><expr pos:start="63:43" pos:end="63:57"><call pos:start="63:43" pos:end="63:57"><name pos:start="63:43" pos:end="63:50">strerror</name><argument_list pos:start="63:51" pos:end="63:57">(<argument pos:start="63:52" pos:end="63:56"><expr pos:start="63:52" pos:end="63:56"><name pos:start="63:52" pos:end="63:56">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:20"><expr pos:start="65:13" pos:end="65:19"><call pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:16">exit</name><argument_list pos:start="65:17" pos:end="65:19">(<argument pos:start="65:18" pos:end="65:18"><expr pos:start="65:18" pos:end="65:18"><literal type="number" pos:start="65:18" pos:end="65:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:40"><expr pos:start="69:9" pos:end="69:39"><name pos:start="69:9" pos:end="69:32"><name pos:start="69:9" pos:end="69:10">ss</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:32">cap_irq_xics_enabled</name></name> <operator pos:start="69:34" pos:end="69:34">=</operator> <name pos:start="69:36" pos:end="69:39">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
