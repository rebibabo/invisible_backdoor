<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25539.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">nbd_co_send_request</name><parameter_list pos:start="1:31" pos:end="5:35">(<parameter pos:start="1:32" pos:end="1:50"><decl pos:start="1:32" pos:end="1:50"><type pos:start="1:32" pos:end="1:50"><name pos:start="1:32" pos:end="1:47">NbdClientSession</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:31"><decl pos:start="3:5" pos:end="3:31"><type pos:start="3:5" pos:end="3:31"><name pos:start="3:5" pos:end="3:22"><name pos:start="3:5" pos:end="3:10">struct</name> <name pos:start="3:12" pos:end="3:22">nbd_request</name></name> <modifier pos:start="3:24" pos:end="3:24">*</modifier></type><name pos:start="3:25" pos:end="3:31">request</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:16">QEMUIOVector</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:22">qiov</name></decl></parameter>, <parameter pos:start="5:25" pos:end="5:34"><decl pos:start="5:25" pos:end="5:34"><type pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:27">int</name></type> <name pos:start="5:29" pos:end="5:34">offset</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="69:1">{<block_content pos:start="9:5" pos:end="67:14">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">AioContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">rc</name></decl>, <decl pos:start="11:13" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:39"><expr pos:start="15:5" pos:end="15:38"><call pos:start="15:5" pos:end="15:38"><name pos:start="15:5" pos:end="15:22">qemu_co_mutex_lock</name><argument_list pos:start="15:23" pos:end="15:38">(<argument pos:start="15:24" pos:end="15:37"><expr pos:start="15:24" pos:end="15:37"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:37"><name pos:start="15:25" pos:end="15:25">s</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:37">send_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:46"><expr pos:start="17:5" pos:end="17:45"><name pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:21">send_coroutine</name></name> <operator pos:start="17:23" pos:end="17:23">=</operator> <call pos:start="17:25" pos:end="17:45"><name pos:start="17:25" pos:end="17:43">qemu_coroutine_self</name><argument_list pos:start="17:44" pos:end="17:45">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:46"><expr pos:start="19:5" pos:end="19:45"><name pos:start="19:5" pos:end="19:15">aio_context</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <call pos:start="19:19" pos:end="19:45"><name pos:start="19:19" pos:end="19:38">bdrv_get_aio_context</name><argument_list pos:start="19:39" pos:end="19:45">(<argument pos:start="19:40" pos:end="19:44"><expr pos:start="19:40" pos:end="19:44"><name pos:start="19:40" pos:end="19:44"><name pos:start="19:40" pos:end="19:40">s</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:44">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="23:62"><expr pos:start="21:5" pos:end="23:61"><call pos:start="21:5" pos:end="23:61"><name pos:start="21:5" pos:end="21:22">aio_set_fd_handler</name><argument_list pos:start="21:23" pos:end="23:61">(<argument pos:start="21:24" pos:end="21:34"><expr pos:start="21:24" pos:end="21:34"><name pos:start="21:24" pos:end="21:34">aio_context</name></expr></argument>, <argument pos:start="21:37" pos:end="21:43"><expr pos:start="21:37" pos:end="21:43"><name pos:start="21:37" pos:end="21:43"><name pos:start="21:37" pos:end="21:37">s</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:43">sock</name></name></expr></argument>,

                       <argument pos:start="23:24" pos:end="23:38"><expr pos:start="23:24" pos:end="23:38"><name pos:start="23:24" pos:end="23:38">nbd_reply_ready</name></expr></argument>, <argument pos:start="23:41" pos:end="23:57"><expr pos:start="23:41" pos:end="23:57"><name pos:start="23:41" pos:end="23:57">nbd_restart_write</name></expr></argument>, <argument pos:start="23:60" pos:end="23:60"><expr pos:start="23:60" pos:end="23:60"><name pos:start="23:60" pos:end="23:60">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="59:5"><if pos:start="25:5" pos:end="55:5">if <condition pos:start="25:8" pos:end="25:13">(<expr pos:start="25:9" pos:end="25:12"><name pos:start="25:9" pos:end="25:12">qiov</name></expr>)</condition> <block pos:start="25:15" pos:end="55:5">{<block_content pos:start="27:9" pos:end="53:9">

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:24">(<expr pos:start="27:13" pos:end="27:23"><operator pos:start="27:13" pos:end="27:13">!</operator><name pos:start="27:14" pos:end="27:23"><name pos:start="27:14" pos:end="27:14">s</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:23">is_unix</name></name></expr>)</condition> <block pos:start="27:26" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:40">

            <expr_stmt pos:start="29:13" pos:end="29:40"><expr pos:start="29:13" pos:end="29:39"><call pos:start="29:13" pos:end="29:39"><name pos:start="29:13" pos:end="29:27">socket_set_cork</name><argument_list pos:start="29:28" pos:end="29:39">(<argument pos:start="29:29" pos:end="29:35"><expr pos:start="29:29" pos:end="29:35"><name pos:start="29:29" pos:end="29:35"><name pos:start="29:29" pos:end="29:29">s</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:35">sock</name></name></expr></argument>, <argument pos:start="29:38" pos:end="29:38"><expr pos:start="29:38" pos:end="29:38"><literal type="number" pos:start="29:38" pos:end="29:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:48"><expr pos:start="33:9" pos:end="33:47"><name pos:start="33:9" pos:end="33:10">rc</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="33:47"><name pos:start="33:14" pos:end="33:29">nbd_send_request</name><argument_list pos:start="33:30" pos:end="33:47">(<argument pos:start="33:31" pos:end="33:37"><expr pos:start="33:31" pos:end="33:37"><name pos:start="33:31" pos:end="33:37"><name pos:start="33:31" pos:end="33:31">s</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:37">sock</name></name></expr></argument>, <argument pos:start="33:40" pos:end="33:46"><expr pos:start="33:40" pos:end="33:46"><name pos:start="33:40" pos:end="33:46">request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="47:9"><if pos:start="35:9" pos:end="47:9">if <condition pos:start="35:12" pos:end="35:20">(<expr pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:14">rc</name> <operator pos:start="35:16" pos:end="35:17">&gt;=</operator> <literal type="number" pos:start="35:19" pos:end="35:19">0</literal></expr>)</condition> <block pos:start="35:22" pos:end="47:9">{<block_content pos:start="37:13" pos:end="45:13">

            <expr_stmt pos:start="37:13" pos:end="39:54"><expr pos:start="37:13" pos:end="39:53"><name pos:start="37:13" pos:end="37:15">ret</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="39:53"><name pos:start="37:19" pos:end="37:31">qemu_co_sendv</name><argument_list pos:start="37:32" pos:end="39:53">(<argument pos:start="37:33" pos:end="37:39"><expr pos:start="37:33" pos:end="37:39"><name pos:start="37:33" pos:end="37:39"><name pos:start="37:33" pos:end="37:33">s</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:39">sock</name></name></expr></argument>, <argument pos:start="37:42" pos:end="37:50"><expr pos:start="37:42" pos:end="37:50"><name pos:start="37:42" pos:end="37:50"><name pos:start="37:42" pos:end="37:45">qiov</name><operator pos:start="37:46" pos:end="37:47">-&gt;</operator><name pos:start="37:48" pos:end="37:50">iov</name></name></expr></argument>, <argument pos:start="37:53" pos:end="37:62"><expr pos:start="37:53" pos:end="37:62"><name pos:start="37:53" pos:end="37:62"><name pos:start="37:53" pos:end="37:56">qiov</name><operator pos:start="37:57" pos:end="37:58">-&gt;</operator><name pos:start="37:59" pos:end="37:62">niov</name></name></expr></argument>,

                                <argument pos:start="39:33" pos:end="39:38"><expr pos:start="39:33" pos:end="39:38"><name pos:start="39:33" pos:end="39:38">offset</name></expr></argument>, <argument pos:start="39:41" pos:end="39:52"><expr pos:start="39:41" pos:end="39:52"><name pos:start="39:41" pos:end="39:52"><name pos:start="39:41" pos:end="39:47">request</name><operator pos:start="39:48" pos:end="39:49">-&gt;</operator><name pos:start="39:50" pos:end="39:52">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="45:13"><if pos:start="41:13" pos:end="45:13">if <condition pos:start="41:16" pos:end="41:36">(<expr pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:19">ret</name> <operator pos:start="41:21" pos:end="41:22">!=</operator> <name pos:start="41:24" pos:end="41:35"><name pos:start="41:24" pos:end="41:30">request</name><operator pos:start="41:31" pos:end="41:32">-&gt;</operator><name pos:start="41:33" pos:end="41:35">len</name></name></expr>)</condition> <block pos:start="41:38" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:26">

                <expr_stmt pos:start="43:17" pos:end="43:26"><expr pos:start="43:17" pos:end="43:25"><name pos:start="43:17" pos:end="43:18">rc</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <operator pos:start="43:22" pos:end="43:22">-</operator><name pos:start="43:23" pos:end="43:25">EIO</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:24">(<expr pos:start="49:13" pos:end="49:23"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:23"><name pos:start="49:14" pos:end="49:14">s</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:23">is_unix</name></name></expr>)</condition> <block pos:start="49:26" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:40">

            <expr_stmt pos:start="51:13" pos:end="51:40"><expr pos:start="51:13" pos:end="51:39"><call pos:start="51:13" pos:end="51:39"><name pos:start="51:13" pos:end="51:27">socket_set_cork</name><argument_list pos:start="51:28" pos:end="51:39">(<argument pos:start="51:29" pos:end="51:35"><expr pos:start="51:29" pos:end="51:35"><name pos:start="51:29" pos:end="51:35"><name pos:start="51:29" pos:end="51:29">s</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:35">sock</name></name></expr></argument>, <argument pos:start="51:38" pos:end="51:38"><expr pos:start="51:38" pos:end="51:38"><literal type="number" pos:start="51:38" pos:end="51:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="59:5">else <block pos:start="55:12" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:48">

        <expr_stmt pos:start="57:9" pos:end="57:48"><expr pos:start="57:9" pos:end="57:47"><name pos:start="57:9" pos:end="57:10">rc</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <call pos:start="57:14" pos:end="57:47"><name pos:start="57:14" pos:end="57:29">nbd_send_request</name><argument_list pos:start="57:30" pos:end="57:47">(<argument pos:start="57:31" pos:end="57:37"><expr pos:start="57:31" pos:end="57:37"><name pos:start="57:31" pos:end="57:37"><name pos:start="57:31" pos:end="57:31">s</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:37">sock</name></name></expr></argument>, <argument pos:start="57:40" pos:end="57:46"><expr pos:start="57:40" pos:end="57:46"><name pos:start="57:40" pos:end="57:46">request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:71"><expr pos:start="61:5" pos:end="61:70"><call pos:start="61:5" pos:end="61:70"><name pos:start="61:5" pos:end="61:22">aio_set_fd_handler</name><argument_list pos:start="61:23" pos:end="61:70">(<argument pos:start="61:24" pos:end="61:34"><expr pos:start="61:24" pos:end="61:34"><name pos:start="61:24" pos:end="61:34">aio_context</name></expr></argument>, <argument pos:start="61:37" pos:end="61:43"><expr pos:start="61:37" pos:end="61:43"><name pos:start="61:37" pos:end="61:43"><name pos:start="61:37" pos:end="61:37">s</name><operator pos:start="61:38" pos:end="61:39">-&gt;</operator><name pos:start="61:40" pos:end="61:43">sock</name></name></expr></argument>, <argument pos:start="61:46" pos:end="61:60"><expr pos:start="61:46" pos:end="61:60"><name pos:start="61:46" pos:end="61:60">nbd_reply_ready</name></expr></argument>, <argument pos:start="61:63" pos:end="61:66"><expr pos:start="61:63" pos:end="61:66"><name pos:start="61:63" pos:end="61:66">NULL</name></expr></argument>, <argument pos:start="61:69" pos:end="61:69"><expr pos:start="61:69" pos:end="61:69"><name pos:start="61:69" pos:end="61:69">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:29"><expr pos:start="63:5" pos:end="63:28"><name pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:21">send_coroutine</name></name> <operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:28">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:41"><expr pos:start="65:5" pos:end="65:40"><call pos:start="65:5" pos:end="65:40"><name pos:start="65:5" pos:end="65:24">qemu_co_mutex_unlock</name><argument_list pos:start="65:25" pos:end="65:40">(<argument pos:start="65:26" pos:end="65:39"><expr pos:start="65:26" pos:end="65:39"><operator pos:start="65:26" pos:end="65:26">&amp;</operator><name pos:start="65:27" pos:end="65:39"><name pos:start="65:27" pos:end="65:27">s</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:39">send_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="67:5" pos:end="67:14">return <expr pos:start="67:12" pos:end="67:13"><name pos:start="67:12" pos:end="67:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
