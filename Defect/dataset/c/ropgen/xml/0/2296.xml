<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2296.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">microblaze_load_dtb</name><parameter_list pos:start="1:31" pos:end="7:63">(<parameter pos:start="1:32" pos:end="1:54"><decl pos:start="1:32" pos:end="1:54"><type pos:start="1:32" pos:end="1:54"><name pos:start="1:32" pos:end="1:49">target_phys_addr_t</name></type> <name pos:start="1:51" pos:end="1:54">addr</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:54"><decl pos:start="3:39" pos:end="3:54"><type pos:start="3:39" pos:end="3:54"><name pos:start="3:39" pos:end="3:46">uint32_t</name></type> <name pos:start="3:48" pos:end="3:54">ramsize</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:64"><decl pos:start="5:39" pos:end="5:64"><type pos:start="5:39" pos:end="5:64"><specifier pos:start="5:39" pos:end="5:43">const</specifier> <name pos:start="5:45" pos:end="5:48">char</name> <modifier pos:start="5:50" pos:end="5:50">*</modifier></type><name pos:start="5:51" pos:end="5:64">kernel_cmdline</name></decl></parameter>,

                                      <parameter pos:start="7:39" pos:end="7:62"><decl pos:start="7:39" pos:end="7:62"><type pos:start="7:39" pos:end="7:62"><specifier pos:start="7:39" pos:end="7:43">const</specifier> <name pos:start="7:45" pos:end="7:48">char</name> <modifier pos:start="7:50" pos:end="7:50">*</modifier></type><name pos:start="7:51" pos:end="7:62">dtb_filename</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="77:1">{<block_content pos:start="11:5" pos:end="75:20">

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">fdt_size</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="13:1" pos:end="13:17">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:17">CONFIG_FDT</name></cpp:ifdef>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">fdt</name> <init pos:start="15:15" pos:end="15:20">= <expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">r</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:21">(<expr pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:20">dtb_filename</name></expr>)</condition> <block pos:start="21:23" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:56">

        <expr_stmt pos:start="23:9" pos:end="23:56"><expr pos:start="23:9" pos:end="23:55"><name pos:start="23:9" pos:end="23:11">fdt</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:55"><name pos:start="23:15" pos:end="23:30">load_device_tree</name><argument_list pos:start="23:31" pos:end="23:55">(<argument pos:start="23:32" pos:end="23:43"><expr pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:43">dtb_filename</name></expr></argument>, <argument pos:start="23:46" pos:end="23:54"><expr pos:start="23:46" pos:end="23:54"><operator pos:start="23:46" pos:end="23:46">&amp;</operator><name pos:start="23:47" pos:end="23:54">fdt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:13">(<expr pos:start="27:9" pos:end="27:12"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:12">fdt</name></expr>)</condition> <block pos:start="27:15" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:17">

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="47:5"><if pos:start="35:5" pos:end="47:5">if <condition pos:start="35:8" pos:end="35:23">(<expr pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:22">kernel_cmdline</name></expr>)</condition> <block pos:start="35:25" pos:end="47:5">{<block_content pos:start="37:9" pos:end="45:9">

        <expr_stmt pos:start="37:9" pos:end="39:72"><expr pos:start="37:9" pos:end="39:71"><name pos:start="37:9" pos:end="37:9">r</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="39:71"><name pos:start="37:13" pos:end="37:39">qemu_devtree_setprop_string</name><argument_list pos:start="37:40" pos:end="39:71">(<argument pos:start="37:41" pos:end="37:43"><expr pos:start="37:41" pos:end="37:43"><name pos:start="37:41" pos:end="37:43">fdt</name></expr></argument>, <argument pos:start="37:46" pos:end="37:54"><expr pos:start="37:46" pos:end="37:54"><literal type="string" pos:start="37:46" pos:end="37:54">"/chosen"</literal></expr></argument>, <argument pos:start="37:57" pos:end="37:66"><expr pos:start="37:57" pos:end="37:66"><literal type="string" pos:start="37:57" pos:end="37:66">"bootargs"</literal></expr></argument>,

                                                        <argument pos:start="39:57" pos:end="39:70"><expr pos:start="39:57" pos:end="39:70"><name pos:start="39:57" pos:end="39:70">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="45:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:18">(<expr pos:start="41:13" pos:end="41:17"><name pos:start="41:13" pos:end="41:13">r</name> <operator pos:start="41:15" pos:end="41:15">&lt;</operator> <literal type="number" pos:start="41:17" pos:end="41:17">0</literal></expr>)</condition> <block pos:start="41:20" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:63">

            <expr_stmt pos:start="43:13" pos:end="43:63"><expr pos:start="43:13" pos:end="43:62"><call pos:start="43:13" pos:end="43:62"><name pos:start="43:13" pos:end="43:19">fprintf</name><argument_list pos:start="43:20" pos:end="43:62">(<argument pos:start="43:21" pos:end="43:26"><expr pos:start="43:21" pos:end="43:26"><name pos:start="43:21" pos:end="43:26">stderr</name></expr></argument>, <argument pos:start="43:29" pos:end="43:61"><expr pos:start="43:29" pos:end="43:61"><literal type="string" pos:start="43:29" pos:end="43:61">"couldn't set /chosen/bootargs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:58"><call pos:start="51:5" pos:end="51:58"><name pos:start="51:5" pos:end="51:29">cpu_physical_memory_write</name><argument_list pos:start="51:30" pos:end="51:58">(<argument pos:start="51:31" pos:end="51:34"><expr pos:start="51:31" pos:end="51:34"><name pos:start="51:31" pos:end="51:34">addr</name></expr></argument>, <argument pos:start="51:37" pos:end="51:47"><expr pos:start="51:37" pos:end="51:47"><operator pos:start="51:37" pos:end="51:37">(</operator><name pos:start="51:38" pos:end="51:41">void</name> <operator pos:start="51:43" pos:end="51:43">*</operator><operator pos:start="51:44" pos:end="51:44">)</operator><name pos:start="51:45" pos:end="51:47">fdt</name></expr></argument>, <argument pos:start="51:50" pos:end="51:57"><expr pos:start="51:50" pos:end="51:57"><name pos:start="51:50" pos:end="51:57">fdt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="53:1" pos:end="53:5">#<cpp:directive pos:start="53:2" pos:end="53:5">else</cpp:directive></cpp:else>

    <comment type="block" pos:start="55:5" pos:end="57:25">/* We lack libfdt so we cannot manipulate the fdt. Just pass on the blob

       to the kernel.  */</comment>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:21">(<expr pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:20">dtb_filename</name></expr>)</condition> <block pos:start="59:23" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:68">

        <expr_stmt pos:start="61:9" pos:end="61:68"><expr pos:start="61:9" pos:end="61:67"><name pos:start="61:9" pos:end="61:16">fdt_size</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <call pos:start="61:20" pos:end="61:67"><name pos:start="61:20" pos:end="61:38">load_image_targphys</name><argument_list pos:start="61:39" pos:end="61:67">(<argument pos:start="61:40" pos:end="61:51"><expr pos:start="61:40" pos:end="61:51"><name pos:start="61:40" pos:end="61:51">dtb_filename</name></expr></argument>, <argument pos:start="61:54" pos:end="61:57"><expr pos:start="61:54" pos:end="61:57"><name pos:start="61:54" pos:end="61:57">addr</name></expr></argument>, <argument pos:start="61:60" pos:end="61:66"><expr pos:start="61:60" pos:end="61:66"><literal type="number" pos:start="61:60" pos:end="61:66">0x10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="74:0"><if pos:start="65:5" pos:end="74:0">if <condition pos:start="65:8" pos:end="65:23">(<expr pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:22">kernel_cmdline</name></expr>)</condition> <block pos:start="65:25" pos:end="74:0">{<block_content pos:start="67:9" pos:end="69:77">

        <expr_stmt pos:start="67:9" pos:end="69:77"><expr pos:start="67:9" pos:end="69:76"><call pos:start="67:9" pos:end="69:76"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="69:76">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>,

                <argument pos:start="69:17" pos:end="69:75"><expr pos:start="69:17" pos:end="69:75"><literal type="string" pos:start="69:17" pos:end="69:75">"Warning: missing libfdt, cannot pass cmdline to kernel!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

    <return pos:start="75:5" pos:end="75:20">return <expr pos:start="75:12" pos:end="75:19"><name pos:start="75:12" pos:end="75:19">fdt_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
