<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10284.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:10">disas</name><parameter_list pos:start="1:11" pos:end="1:53">(<parameter pos:start="1:12" pos:end="1:20"><decl pos:start="1:12" pos:end="1:20"><type pos:start="1:12" pos:end="1:20"><name pos:start="1:12" pos:end="1:15">FILE</name> <modifier pos:start="1:17" pos:end="1:17">*</modifier></type><name pos:start="1:18" pos:end="1:20">out</name></decl></parameter>, <parameter pos:start="1:23" pos:end="1:32"><decl pos:start="1:23" pos:end="1:32"><type pos:start="1:23" pos:end="1:32"><name pos:start="1:23" pos:end="1:26">void</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:32">code</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:42">unsigned</name> <name pos:start="1:44" pos:end="1:47">long</name></type> <name pos:start="1:49" pos:end="1:52">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="129:1">{<block_content pos:start="5:5" pos:end="127:5">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:17">long</name></type> <name pos:start="5:19" pos:end="5:20">pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:27">disassemble_info</name></name></type> <name pos:start="9:29" pos:end="9:39">disasm_info</name></decl>;</decl_stmt>

    <function_decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> (<modifier pos:start="11:10" pos:end="11:10">*</modifier><name pos:start="11:11" pos:end="11:20">print_insn</name>)<parameter_list pos:start="11:22" pos:end="11:57">(<parameter pos:start="11:23" pos:end="11:32"><decl pos:start="11:23" pos:end="11:32"><type pos:start="11:23" pos:end="11:32"><name pos:start="11:23" pos:end="11:29">bfd_vma</name></type> <name pos:start="11:31" pos:end="11:32">pc</name></decl></parameter>, <parameter pos:start="11:35" pos:end="11:56"><decl pos:start="11:35" pos:end="11:56"><type pos:start="11:35" pos:end="11:56"><name pos:start="11:35" pos:end="11:50">disassemble_info</name> <modifier pos:start="11:52" pos:end="11:52">*</modifier></type><name pos:start="11:53" pos:end="11:56">info</name></decl></parameter>)</parameter_list>;</function_decl>



    <expr_stmt pos:start="15:5" pos:end="15:53"><expr pos:start="15:5" pos:end="15:52"><call pos:start="15:5" pos:end="15:52"><name pos:start="15:5" pos:end="15:25">INIT_DISASSEMBLE_INFO</name><argument_list pos:start="15:26" pos:end="15:52">(<argument pos:start="15:27" pos:end="15:37"><expr pos:start="15:27" pos:end="15:37"><name pos:start="15:27" pos:end="15:37">disasm_info</name></expr></argument>, <argument pos:start="15:40" pos:end="15:42"><expr pos:start="15:40" pos:end="15:42"><name pos:start="15:40" pos:end="15:42">out</name></expr></argument>, <argument pos:start="15:45" pos:end="15:51"><expr pos:start="15:45" pos:end="15:51"><name pos:start="15:45" pos:end="15:51">fprintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:15">disasm_info</name><operator pos:start="19:16" pos:end="19:16">.</operator><name pos:start="19:17" pos:end="19:22">buffer</name></name> <operator pos:start="19:24" pos:end="19:24">=</operator> <name pos:start="19:26" pos:end="19:29">code</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:49"><expr pos:start="21:5" pos:end="21:48"><name pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:15">disasm_info</name><operator pos:start="21:16" pos:end="21:16">.</operator><name pos:start="21:17" pos:end="21:26">buffer_vma</name></name> <operator pos:start="21:28" pos:end="21:28">=</operator> <operator pos:start="21:30" pos:end="21:30">(</operator><name pos:start="21:31" pos:end="21:38">unsigned</name> <name pos:start="21:40" pos:end="21:43">long</name><operator pos:start="21:44" pos:end="21:44">)</operator><name pos:start="21:45" pos:end="21:48">code</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="28:0"><expr pos:start="23:5" pos:end="23:36"><name pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:15">disasm_info</name><operator pos:start="23:16" pos:end="23:16">.</operator><name pos:start="23:17" pos:end="23:29">buffer_length</name></name> <operator pos:start="23:31" pos:end="23:31">=</operator> <name pos:start="23:33" pos:end="23:36">size</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="27:1" pos:end="27:27">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:27">HOST_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:39"><name pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:15">disasm_info</name><operator pos:start="29:16" pos:end="29:16">.</operator><name pos:start="29:17" pos:end="29:22">endian</name></name> <operator pos:start="29:24" pos:end="29:24">=</operator> <name pos:start="29:26" pos:end="29:39">BFD_ENDIAN_BIG</name></expr>;</expr_stmt>

<cpp:else pos:start="31:1" pos:end="31:5">#<cpp:directive pos:start="31:2" pos:end="31:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="33:5" pos:end="38:0"><expr pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:15">disasm_info</name><operator pos:start="33:16" pos:end="33:16">.</operator><name pos:start="33:17" pos:end="33:22">endian</name></name> <operator pos:start="33:24" pos:end="33:24">=</operator> <name pos:start="33:26" pos:end="33:42">BFD_ENDIAN_LITTLE</name></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="37:1" pos:end="37:21">#<cpp:directive pos:start="37:2" pos:end="37:3">if</cpp:directive> <expr pos:start="37:5" pos:end="37:21"><call pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:11">defined</name><argument_list pos:start="37:12" pos:end="37:21">(<argument pos:start="37:13" pos:end="37:20"><expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:20">__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="39:5" pos:end="39:42"><expr pos:start="39:5" pos:end="39:41"><name pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:15">disasm_info</name><operator pos:start="39:16" pos:end="39:16">.</operator><name pos:start="39:17" pos:end="39:20">mach</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <name pos:start="39:24" pos:end="39:41">bfd_mach_i386_i386</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="44:0"><expr pos:start="41:5" pos:end="41:32"><name pos:start="41:5" pos:end="41:14">print_insn</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:32">print_insn_i386</name></expr>;</expr_stmt>

<cpp:elif pos:start="43:1" pos:end="43:25">#<cpp:directive pos:start="43:2" pos:end="43:5">elif</cpp:directive> <expr pos:start="43:7" pos:end="43:25"><call pos:start="43:7" pos:end="43:25"><name pos:start="43:7" pos:end="43:13">defined</name><argument_list pos:start="43:14" pos:end="43:25">(<argument pos:start="43:15" pos:end="43:24"><expr pos:start="43:15" pos:end="43:24"><name pos:start="43:15" pos:end="43:24">__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="45:5" pos:end="45:39"><expr pos:start="45:5" pos:end="45:38"><name pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:15">disasm_info</name><operator pos:start="45:16" pos:end="45:16">.</operator><name pos:start="45:17" pos:end="45:20">mach</name></name> <operator pos:start="45:22" pos:end="45:22">=</operator> <name pos:start="45:24" pos:end="45:38">bfd_mach_x86_64</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:32"><name pos:start="47:5" pos:end="47:14">print_insn</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:32">print_insn_i386</name></expr>;</expr_stmt>

<cpp:elif pos:start="49:1" pos:end="49:24">#<cpp:directive pos:start="49:2" pos:end="49:5">elif</cpp:directive> <expr pos:start="49:7" pos:end="49:24"><call pos:start="49:7" pos:end="49:24"><name pos:start="49:7" pos:end="49:13">defined</name><argument_list pos:start="49:14" pos:end="49:24">(<argument pos:start="49:15" pos:end="49:23"><expr pos:start="49:15" pos:end="49:23"><name pos:start="49:15" pos:end="49:23">_ARCH_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:31"><name pos:start="51:5" pos:end="51:14">print_insn</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <name pos:start="51:18" pos:end="51:31">print_insn_ppc</name></expr>;</expr_stmt>

<cpp:elif pos:start="53:1" pos:end="53:24">#<cpp:directive pos:start="53:2" pos:end="53:5">elif</cpp:directive> <expr pos:start="53:7" pos:end="53:24"><call pos:start="53:7" pos:end="53:24"><name pos:start="53:7" pos:end="53:13">defined</name><argument_list pos:start="53:14" pos:end="53:24">(<argument pos:start="53:15" pos:end="53:23"><expr pos:start="53:15" pos:end="53:23"><name pos:start="53:15" pos:end="53:23">__alpha__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="55:5" pos:end="58:0"><expr pos:start="55:5" pos:end="55:33"><name pos:start="55:5" pos:end="55:14">print_insn</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:33">print_insn_alpha</name></expr>;</expr_stmt>

<cpp:elif pos:start="57:1" pos:end="57:24">#<cpp:directive pos:start="57:2" pos:end="57:5">elif</cpp:directive> <expr pos:start="57:7" pos:end="57:24"><call pos:start="57:7" pos:end="57:24"><name pos:start="57:7" pos:end="57:13">defined</name><argument_list pos:start="57:14" pos:end="57:24">(<argument pos:start="57:15" pos:end="57:23"><expr pos:start="57:15" pos:end="57:23"><name pos:start="57:15" pos:end="57:23">__sparc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="59:5" pos:end="62:0"><expr pos:start="59:5" pos:end="59:33"><name pos:start="59:5" pos:end="59:14">print_insn</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <name pos:start="59:18" pos:end="59:33">print_insn_sparc</name></expr>;</expr_stmt>

<cpp:if pos:start="61:1" pos:end="61:84">#<cpp:directive pos:start="61:2" pos:end="61:3">if</cpp:directive> <expr pos:start="61:5" pos:end="61:84"><call pos:start="61:5" pos:end="61:29"><name pos:start="61:5" pos:end="61:11">defined</name><argument_list pos:start="61:12" pos:end="61:29">(<argument pos:start="61:13" pos:end="61:28"><expr pos:start="61:13" pos:end="61:28"><name pos:start="61:13" pos:end="61:28">__sparc_v8plus__</name></expr></argument>)</argument_list></call> <operator pos:start="61:31" pos:end="61:32">||</operator> <call pos:start="61:34" pos:end="61:59"><name pos:start="61:34" pos:end="61:40">defined</name><argument_list pos:start="61:41" pos:end="61:59">(<argument pos:start="61:42" pos:end="61:58"><expr pos:start="61:42" pos:end="61:58"><name pos:start="61:42" pos:end="61:58">__sparc_v8plusa__</name></expr></argument>)</argument_list></call> <operator pos:start="61:61" pos:end="61:62">||</operator> <call pos:start="61:64" pos:end="61:84"><name pos:start="61:64" pos:end="61:70">defined</name><argument_list pos:start="61:71" pos:end="61:84">(<argument pos:start="61:72" pos:end="61:83"><expr pos:start="61:72" pos:end="61:83"><name pos:start="61:72" pos:end="61:83">__sparc_v9__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="63:5" pos:end="68:0"><expr pos:start="63:5" pos:end="63:41"><name pos:start="63:5" pos:end="63:20"><name pos:start="63:5" pos:end="63:15">disasm_info</name><operator pos:start="63:16" pos:end="63:16">.</operator><name pos:start="63:17" pos:end="63:20">mach</name></name> <operator pos:start="63:22" pos:end="63:22">=</operator> <name pos:start="63:24" pos:end="63:41">bfd_mach_sparc_v9b</name></expr>;</expr_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

<cpp:elif pos:start="67:1" pos:end="67:22">#<cpp:directive pos:start="67:2" pos:end="67:5">elif</cpp:directive> <expr pos:start="67:7" pos:end="67:22"><call pos:start="67:7" pos:end="67:22"><name pos:start="67:7" pos:end="67:13">defined</name><argument_list pos:start="67:14" pos:end="67:22">(<argument pos:start="67:15" pos:end="67:21"><expr pos:start="67:15" pos:end="67:21"><name pos:start="67:15" pos:end="67:21">__arm__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="69:5" pos:end="72:0"><expr pos:start="69:5" pos:end="69:31"><name pos:start="69:5" pos:end="69:14">print_insn</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <name pos:start="69:18" pos:end="69:31">print_insn_arm</name></expr>;</expr_stmt>

<cpp:elif pos:start="71:1" pos:end="71:25">#<cpp:directive pos:start="71:2" pos:end="71:5">elif</cpp:directive> <expr pos:start="71:7" pos:end="71:25"><call pos:start="71:7" pos:end="71:25"><name pos:start="71:7" pos:end="71:13">defined</name><argument_list pos:start="71:14" pos:end="71:25">(<argument pos:start="71:15" pos:end="71:24"><expr pos:start="71:15" pos:end="71:24"><name pos:start="71:15" pos:end="71:24">__MIPSEB__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="73:5" pos:end="76:0"><expr pos:start="73:5" pos:end="73:36"><name pos:start="73:5" pos:end="73:14">print_insn</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <name pos:start="73:18" pos:end="73:36">print_insn_big_mips</name></expr>;</expr_stmt>

<cpp:elif pos:start="75:1" pos:end="75:25">#<cpp:directive pos:start="75:2" pos:end="75:5">elif</cpp:directive> <expr pos:start="75:7" pos:end="75:25"><call pos:start="75:7" pos:end="75:25"><name pos:start="75:7" pos:end="75:13">defined</name><argument_list pos:start="75:14" pos:end="75:25">(<argument pos:start="75:15" pos:end="75:24"><expr pos:start="75:15" pos:end="75:24"><name pos:start="75:15" pos:end="75:24">__MIPSEL__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="77:5" pos:end="80:0"><expr pos:start="77:5" pos:end="77:39"><name pos:start="77:5" pos:end="77:14">print_insn</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <name pos:start="77:18" pos:end="77:39">print_insn_little_mips</name></expr>;</expr_stmt>

<cpp:elif pos:start="79:1" pos:end="79:23">#<cpp:directive pos:start="79:2" pos:end="79:5">elif</cpp:directive> <expr pos:start="79:7" pos:end="79:23"><call pos:start="79:7" pos:end="79:23"><name pos:start="79:7" pos:end="79:13">defined</name><argument_list pos:start="79:14" pos:end="79:23">(<argument pos:start="79:15" pos:end="79:22"><expr pos:start="79:15" pos:end="79:22"><name pos:start="79:15" pos:end="79:22">__m68k__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="81:5" pos:end="84:0"><expr pos:start="81:5" pos:end="81:32"><name pos:start="81:5" pos:end="81:14">print_insn</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <name pos:start="81:18" pos:end="81:32">print_insn_m68k</name></expr>;</expr_stmt>

<cpp:elif pos:start="83:1" pos:end="83:23">#<cpp:directive pos:start="83:2" pos:end="83:5">elif</cpp:directive> <expr pos:start="83:7" pos:end="83:23"><call pos:start="83:7" pos:end="83:23"><name pos:start="83:7" pos:end="83:13">defined</name><argument_list pos:start="83:14" pos:end="83:23">(<argument pos:start="83:15" pos:end="83:22"><expr pos:start="83:15" pos:end="83:22"><name pos:start="83:15" pos:end="83:22">__s390__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="85:5" pos:end="88:0"><expr pos:start="85:5" pos:end="85:32"><name pos:start="85:5" pos:end="85:14">print_insn</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <name pos:start="85:18" pos:end="85:32">print_insn_s390</name></expr>;</expr_stmt>

<cpp:elif pos:start="87:1" pos:end="87:23">#<cpp:directive pos:start="87:2" pos:end="87:5">elif</cpp:directive> <expr pos:start="87:7" pos:end="87:23"><call pos:start="87:7" pos:end="87:23"><name pos:start="87:7" pos:end="87:13">defined</name><argument_list pos:start="87:14" pos:end="87:23">(<argument pos:start="87:15" pos:end="87:22"><expr pos:start="87:15" pos:end="87:22"><name pos:start="87:15" pos:end="87:22">__hppa__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="89:5" pos:end="92:0"><expr pos:start="89:5" pos:end="89:32"><name pos:start="89:5" pos:end="89:14">print_insn</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <name pos:start="89:18" pos:end="89:32">print_insn_hppa</name></expr>;</expr_stmt>

<cpp:elif pos:start="91:1" pos:end="91:23">#<cpp:directive pos:start="91:2" pos:end="91:5">elif</cpp:directive> <expr pos:start="91:7" pos:end="91:23"><call pos:start="91:7" pos:end="91:23"><name pos:start="91:7" pos:end="91:13">defined</name><argument_list pos:start="91:14" pos:end="91:23">(<argument pos:start="91:15" pos:end="91:22"><expr pos:start="91:15" pos:end="91:22"><name pos:start="91:15" pos:end="91:22">__ia64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="93:5" pos:end="96:0"><expr pos:start="93:5" pos:end="93:32"><name pos:start="93:5" pos:end="93:14">print_insn</name> <operator pos:start="93:16" pos:end="93:16">=</operator> <name pos:start="93:18" pos:end="93:32">print_insn_ia64</name></expr>;</expr_stmt>

<cpp:else pos:start="95:1" pos:end="95:5">#<cpp:directive pos:start="95:2" pos:end="95:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="97:5" pos:end="99:25"><expr pos:start="97:5" pos:end="99:24"><call pos:start="97:5" pos:end="99:24"><name pos:start="97:5" pos:end="97:11">fprintf</name><argument_list pos:start="97:12" pos:end="99:24">(<argument pos:start="97:13" pos:end="97:15"><expr pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:15">out</name></expr></argument>, <argument pos:start="97:18" pos:end="97:65"><expr pos:start="97:18" pos:end="97:65"><literal type="string" pos:start="97:18" pos:end="97:65">"0x%lx: Asm output not supported on this arch\n"</literal></expr></argument>,

	    <argument pos:start="99:13" pos:end="99:23"><expr pos:start="99:13" pos:end="99:23"><operator pos:start="99:13" pos:end="99:13">(</operator><name pos:start="99:14" pos:end="99:17">long</name><operator pos:start="99:18" pos:end="99:18">)</operator> <name pos:start="99:20" pos:end="99:23">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="101:5" pos:end="104:0">return;</return>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>

    <for pos:start="105:5" pos:end="127:5">for <control pos:start="105:9" pos:end="105:72">(<init pos:start="105:10" pos:end="105:34"><expr pos:start="105:10" pos:end="105:33"><name pos:start="105:10" pos:end="105:11">pc</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <operator pos:start="105:15" pos:end="105:15">(</operator><name pos:start="105:16" pos:end="105:23">unsigned</name> <name pos:start="105:25" pos:end="105:28">long</name><operator pos:start="105:29" pos:end="105:29">)</operator><name pos:start="105:30" pos:end="105:33">code</name></expr>;</init> <condition pos:start="105:36" pos:end="105:44"><expr pos:start="105:36" pos:end="105:43"><name pos:start="105:36" pos:end="105:39">size</name> <operator pos:start="105:41" pos:end="105:41">&gt;</operator> <literal type="number" pos:start="105:43" pos:end="105:43">0</literal></expr>;</condition> <incr pos:start="105:46" pos:end="105:71"><expr pos:start="105:46" pos:end="105:56"><name pos:start="105:46" pos:end="105:47">pc</name> <operator pos:start="105:49" pos:end="105:50">+=</operator> <name pos:start="105:52" pos:end="105:56">count</name></expr><operator pos:start="105:57" pos:end="105:57">,</operator> <expr pos:start="105:59" pos:end="105:71"><name pos:start="105:59" pos:end="105:62">size</name> <operator pos:start="105:64" pos:end="105:65">-=</operator> <name pos:start="105:67" pos:end="105:71">count</name></expr></incr>)</control> <block pos:start="105:74" pos:end="127:5">{<block_content pos:start="107:9" pos:end="125:18">

	<expr_stmt pos:start="107:9" pos:end="110:0"><expr pos:start="107:9" pos:end="107:38"><call pos:start="107:9" pos:end="107:38"><name pos:start="107:9" pos:end="107:15">fprintf</name><argument_list pos:start="107:16" pos:end="107:38">(<argument pos:start="107:17" pos:end="107:19"><expr pos:start="107:17" pos:end="107:19"><name pos:start="107:17" pos:end="107:19">out</name></expr></argument>, <argument pos:start="107:22" pos:end="107:33"><expr pos:start="107:22" pos:end="107:33"><literal type="string" pos:start="107:22" pos:end="107:33">"0x%08lx:  "</literal></expr></argument>, <argument pos:start="107:36" pos:end="107:37"><expr pos:start="107:36" pos:end="107:37"><name pos:start="107:36" pos:end="107:37">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="109:1" pos:end="109:14">#<cpp:directive pos:start="109:2" pos:end="109:6">ifdef</cpp:directive> <name pos:start="109:8" pos:end="109:14">__arm__</name></cpp:ifdef>

        <comment type="block" pos:start="111:9" pos:end="113:35">/* since data is included in the code, it is better to

           display code data too */</comment>

        <expr_stmt pos:start="115:9" pos:end="118:0"><expr pos:start="115:9" pos:end="115:69"><call pos:start="115:9" pos:end="115:69"><name pos:start="115:9" pos:end="115:15">fprintf</name><argument_list pos:start="115:16" pos:end="115:69">(<argument pos:start="115:17" pos:end="115:19"><expr pos:start="115:17" pos:end="115:19"><name pos:start="115:17" pos:end="115:19">out</name></expr></argument>, <argument pos:start="115:22" pos:end="115:29"><expr pos:start="115:22" pos:end="115:29"><literal type="string" pos:start="115:22" pos:end="115:29">"%08x  "</literal></expr></argument>, <argument pos:start="115:32" pos:end="115:68"><expr pos:start="115:32" pos:end="115:68"><operator pos:start="115:32" pos:end="115:32">(</operator><name pos:start="115:33" pos:end="115:35">int</name><operator pos:start="115:36" pos:end="115:36">)</operator><call pos:start="115:37" pos:end="115:68"><name pos:start="115:37" pos:end="115:46">bfd_getl32</name><argument_list pos:start="115:47" pos:end="115:68">(<argument pos:start="115:48" pos:end="115:67"><expr pos:start="115:48" pos:end="115:67"><operator pos:start="115:48" pos:end="115:48">(</operator><specifier pos:start="115:49" pos:end="115:53">const</specifier> <name pos:start="115:55" pos:end="115:62">bfd_byte</name> <operator pos:start="115:64" pos:end="115:64">*</operator><operator pos:start="115:65" pos:end="115:65">)</operator><name pos:start="115:66" pos:end="115:67">pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

	<expr_stmt pos:start="119:9" pos:end="119:45"><expr pos:start="119:9" pos:end="119:44"><name pos:start="119:9" pos:end="119:13">count</name> <operator pos:start="119:15" pos:end="119:15">=</operator> <call pos:start="119:17" pos:end="119:44"><name pos:start="119:17" pos:end="119:26">print_insn</name><argument_list pos:start="119:27" pos:end="119:44">(<argument pos:start="119:28" pos:end="119:29"><expr pos:start="119:28" pos:end="119:29"><name pos:start="119:28" pos:end="119:29">pc</name></expr></argument>, <argument pos:start="119:32" pos:end="119:43"><expr pos:start="119:32" pos:end="119:43"><operator pos:start="119:32" pos:end="119:32">&amp;</operator><name pos:start="119:33" pos:end="119:43">disasm_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="121:9" pos:end="121:27"><expr pos:start="121:9" pos:end="121:26"><call pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:15">fprintf</name><argument_list pos:start="121:16" pos:end="121:26">(<argument pos:start="121:17" pos:end="121:19"><expr pos:start="121:17" pos:end="121:19"><name pos:start="121:17" pos:end="121:19">out</name></expr></argument>, <argument pos:start="121:22" pos:end="121:25"><expr pos:start="121:22" pos:end="121:25"><literal type="string" pos:start="121:22" pos:end="121:25">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="123:9" pos:end="125:18"><if pos:start="123:9" pos:end="125:18">if <condition pos:start="123:12" pos:end="123:22">(<expr pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:17">count</name> <operator pos:start="123:19" pos:end="123:19">&lt;</operator> <literal type="number" pos:start="123:21" pos:end="123:21">0</literal></expr>)</condition><block type="pseudo" pos:start="125:13" pos:end="125:18"><block_content pos:start="125:13" pos:end="125:18">

	    <break pos:start="125:13" pos:end="125:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
