<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24453.c" pos:tabs="8"><function pos:start="1:1" pos:end="309:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">mpegaudio_parse</name><parameter_list pos:start="1:27" pos:end="7:60">(<parameter pos:start="1:28" pos:end="1:51"><decl pos:start="1:28" pos:end="1:51"><type pos:start="1:28" pos:end="1:51"><name pos:start="1:28" pos:end="1:47">AVCodecParserContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">s1</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:48"><decl pos:start="3:28" pos:end="3:48"><type pos:start="3:28" pos:end="3:48"><name pos:start="3:28" pos:end="3:41">AVCodecContext</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:48">avctx</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:50"><decl pos:start="5:28" pos:end="5:50"><type pos:start="5:28" pos:end="5:50"><specifier pos:start="5:28" pos:end="5:32">const</specifier> <name pos:start="5:34" pos:end="5:40">uint8_t</name> <modifier pos:start="5:42" pos:end="5:42">*</modifier><modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:50">poutbuf</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:69"><decl pos:start="5:53" pos:end="5:69"><type pos:start="5:53" pos:end="5:69"><name pos:start="5:53" pos:end="5:55">int</name> <modifier pos:start="5:57" pos:end="5:57">*</modifier></type><name pos:start="5:58" pos:end="5:69">poutbuf_size</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:45"><decl pos:start="7:28" pos:end="7:45"><type pos:start="7:28" pos:end="7:45"><specifier pos:start="7:28" pos:end="7:32">const</specifier> <name pos:start="7:34" pos:end="7:40">uint8_t</name> <modifier pos:start="7:42" pos:end="7:42">*</modifier></type><name pos:start="7:43" pos:end="7:45">buf</name></decl></parameter>, <parameter pos:start="7:48" pos:end="7:59"><decl pos:start="7:48" pos:end="7:59"><type pos:start="7:48" pos:end="7:59"><name pos:start="7:48" pos:end="7:50">int</name></type> <name pos:start="7:52" pos:end="7:59">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="309:1">{<block_content pos:start="11:5" pos:end="307:25">

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:25">MpegAudioParseContext</name> <modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:28">s</name> <init pos:start="11:30" pos:end="11:44">= <expr pos:start="11:32" pos:end="11:44"><name pos:start="11:32" pos:end="11:44"><name pos:start="11:32" pos:end="11:33">s1</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">len</name></decl>, <decl pos:start="13:14" pos:end="13:16"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:16">ret</name></decl>, <decl pos:start="13:19" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:19" pos:end="13:20">sr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:19">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">uint8_t</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:26">buf_ptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:20"><expr pos:start="21:5" pos:end="21:19"><operator pos:start="21:5" pos:end="21:5">*</operator><name pos:start="21:6" pos:end="21:12">poutbuf</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:19">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:22"><expr pos:start="23:5" pos:end="23:21"><operator pos:start="23:5" pos:end="23:5">*</operator><name pos:start="23:6" pos:end="23:17">poutbuf_size</name> <operator pos:start="23:19" pos:end="23:19">=</operator> <literal type="number" pos:start="23:21" pos:end="23:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:18"><expr pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:11">buf_ptr</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:17">buf</name></expr>;</expr_stmt>

    <while pos:start="27:5" pos:end="305:5">while <condition pos:start="27:11" pos:end="27:24">(<expr pos:start="27:12" pos:end="27:23"><name pos:start="27:12" pos:end="27:19">buf_size</name> <operator pos:start="27:21" pos:end="27:21">&gt;</operator> <literal type="number" pos:start="27:23" pos:end="27:23">0</literal></expr>)</condition> <block pos:start="27:26" pos:end="305:5">{<block_content pos:start="29:9" pos:end="303:9">

        <expr_stmt pos:start="29:9" pos:end="29:38"><expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:11">len</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:26"><name pos:start="29:15" pos:end="29:15">s</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:26">inbuf_ptr</name></name> <operator pos:start="29:28" pos:end="29:28">-</operator> <name pos:start="29:30" pos:end="29:37"><name pos:start="29:30" pos:end="29:30">s</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:37">inbuf</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="255:9"><if pos:start="31:9" pos:end="129:9">if <condition pos:start="31:12" pos:end="31:31">(<expr pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:25">frame_size</name></name> <operator pos:start="31:27" pos:end="31:28">==</operator> <literal type="number" pos:start="31:30" pos:end="31:30">0</literal></expr>)</condition> <block pos:start="31:33" pos:end="129:9">{<block_content pos:start="37:13" pos:end="127:13">

            <comment type="block" pos:start="33:13" pos:end="35:58">/* special case for next header for first frame in free

               format case (XXX: find a simpler method) */</comment>

            <if_stmt pos:start="37:13" pos:end="47:13"><if pos:start="37:13" pos:end="47:13">if <condition pos:start="37:16" pos:end="37:48">(<expr pos:start="37:17" pos:end="37:47"><name pos:start="37:17" pos:end="37:42"><name pos:start="37:17" pos:end="37:17">s</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:42">free_format_next_header</name></name> <operator pos:start="37:44" pos:end="37:45">!=</operator> <literal type="number" pos:start="37:47" pos:end="37:47">0</literal></expr>)</condition> <block pos:start="37:50" pos:end="47:13">{<block_content pos:start="39:17" pos:end="45:32">

                <expr_stmt pos:start="39:17" pos:end="39:62"><expr pos:start="39:17" pos:end="39:61"><call pos:start="39:17" pos:end="39:61"><name pos:start="39:17" pos:end="39:23">AV_WB32</name><argument_list pos:start="39:24" pos:end="39:61">(<argument pos:start="39:25" pos:end="39:32"><expr pos:start="39:25" pos:end="39:32"><name pos:start="39:25" pos:end="39:32"><name pos:start="39:25" pos:end="39:25">s</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:32">inbuf</name></name></expr></argument>, <argument pos:start="39:35" pos:end="39:60"><expr pos:start="39:35" pos:end="39:60"><name pos:start="39:35" pos:end="39:60"><name pos:start="39:35" pos:end="39:35">s</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:60">free_format_next_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:44"><expr pos:start="41:17" pos:end="41:43"><name pos:start="41:17" pos:end="41:28"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:28">inbuf_ptr</name></name> <operator pos:start="41:30" pos:end="41:30">=</operator> <name pos:start="41:32" pos:end="41:39"><name pos:start="41:32" pos:end="41:32">s</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:39">inbuf</name></name> <operator pos:start="41:41" pos:end="41:41">+</operator> <literal type="number" pos:start="41:43" pos:end="41:43">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:47"><expr pos:start="43:17" pos:end="43:46"><name pos:start="43:17" pos:end="43:42"><name pos:start="43:17" pos:end="43:17">s</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:42">free_format_next_header</name></name> <operator pos:start="43:44" pos:end="43:44">=</operator> <literal type="number" pos:start="43:46" pos:end="43:46">0</literal></expr>;</expr_stmt>

                <goto pos:start="45:17" pos:end="45:32">goto <name pos:start="45:22" pos:end="45:31">got_header</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="49:13" pos:end="51:35">/* no header seen : find one. We need at least MPA_HEADER_SIZE

               bytes to parse it */</comment>

            <expr_stmt pos:start="53:13" pos:end="53:57"><expr pos:start="53:13" pos:end="53:56"><name pos:start="53:13" pos:end="53:15">len</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="53:56"><name pos:start="53:19" pos:end="53:23">FFMIN</name><argument_list pos:start="53:24" pos:end="53:56">(<argument pos:start="53:25" pos:end="53:45"><expr pos:start="53:25" pos:end="53:45"><name pos:start="53:25" pos:end="53:39">MPA_HEADER_SIZE</name> <operator pos:start="53:41" pos:end="53:41">-</operator> <name pos:start="53:43" pos:end="53:45">len</name></expr></argument>, <argument pos:start="53:48" pos:end="53:55"><expr pos:start="53:48" pos:end="53:55"><name pos:start="53:48" pos:end="53:55">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="65:13"><if pos:start="55:13" pos:end="65:13">if <condition pos:start="55:16" pos:end="55:24">(<expr pos:start="55:17" pos:end="55:23"><name pos:start="55:17" pos:end="55:19">len</name> <operator pos:start="55:21" pos:end="55:21">&gt;</operator> <literal type="number" pos:start="55:23" pos:end="55:23">0</literal></expr>)</condition> <block pos:start="55:26" pos:end="65:13">{<block_content pos:start="57:17" pos:end="63:36">

                <expr_stmt pos:start="57:17" pos:end="57:51"><expr pos:start="57:17" pos:end="57:50"><call pos:start="57:17" pos:end="57:50"><name pos:start="57:17" pos:end="57:22">memcpy</name><argument_list pos:start="57:23" pos:end="57:50">(<argument pos:start="57:24" pos:end="57:35"><expr pos:start="57:24" pos:end="57:35"><name pos:start="57:24" pos:end="57:35"><name pos:start="57:24" pos:end="57:24">s</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:35">inbuf_ptr</name></name></expr></argument>, <argument pos:start="57:38" pos:end="57:44"><expr pos:start="57:38" pos:end="57:44"><name pos:start="57:38" pos:end="57:44">buf_ptr</name></expr></argument>, <argument pos:start="57:47" pos:end="57:49"><expr pos:start="57:47" pos:end="57:49"><name pos:start="57:47" pos:end="57:49">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:31"><expr pos:start="59:17" pos:end="59:30"><name pos:start="59:17" pos:end="59:23">buf_ptr</name> <operator pos:start="59:25" pos:end="59:26">+=</operator> <name pos:start="59:28" pos:end="59:30">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:32"><expr pos:start="61:17" pos:end="61:31"><name pos:start="61:17" pos:end="61:24">buf_size</name> <operator pos:start="61:26" pos:end="61:27">-=</operator> <name pos:start="61:29" pos:end="61:31">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:36"><expr pos:start="63:17" pos:end="63:35"><name pos:start="63:17" pos:end="63:28"><name pos:start="63:17" pos:end="63:17">s</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:28">inbuf_ptr</name></name> <operator pos:start="63:30" pos:end="63:31">+=</operator> <name pos:start="63:33" pos:end="63:35">len</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="67:13" pos:end="127:13"><if pos:start="67:13" pos:end="127:13">if <condition pos:start="67:16" pos:end="67:61">(<expr pos:start="67:17" pos:end="67:60"><operator pos:start="67:17" pos:end="67:17">(</operator><name pos:start="67:18" pos:end="67:29"><name pos:start="67:18" pos:end="67:18">s</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:29">inbuf_ptr</name></name> <operator pos:start="67:31" pos:end="67:31">-</operator> <name pos:start="67:33" pos:end="67:40"><name pos:start="67:33" pos:end="67:33">s</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:40">inbuf</name></name><operator pos:start="67:41" pos:end="67:41">)</operator> <operator pos:start="67:43" pos:end="67:44">&gt;=</operator> <name pos:start="67:46" pos:end="67:60">MPA_HEADER_SIZE</name></expr>)</condition> <block pos:start="67:63" pos:end="127:13">{<block_content pos:start="69:13" pos:end="125:17">

            <label pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:22">got_header</name>:</label>

                <expr_stmt pos:start="71:17" pos:end="71:43"><expr pos:start="71:17" pos:end="71:42"><name pos:start="71:17" pos:end="71:22">header</name> <operator pos:start="71:24" pos:end="71:24">=</operator> <call pos:start="71:26" pos:end="71:42"><name pos:start="71:26" pos:end="71:32">AV_RB32</name><argument_list pos:start="71:33" pos:end="71:42">(<argument pos:start="71:34" pos:end="71:41"><expr pos:start="71:34" pos:end="71:41"><name pos:start="71:34" pos:end="71:41"><name pos:start="71:34" pos:end="71:34">s</name><operator pos:start="71:35" pos:end="71:36">-&gt;</operator><name pos:start="71:37" pos:end="71:41">inbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="75:17" pos:end="75:63"><expr pos:start="75:17" pos:end="75:62"><name pos:start="75:17" pos:end="75:19">ret</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="75:62"><name pos:start="75:23" pos:end="75:42">ff_mpa_decode_header</name><argument_list pos:start="75:43" pos:end="75:62">(<argument pos:start="75:44" pos:end="75:48"><expr pos:start="75:44" pos:end="75:48"><name pos:start="75:44" pos:end="75:48">avctx</name></expr></argument>, <argument pos:start="75:51" pos:end="75:56"><expr pos:start="75:51" pos:end="75:56"><name pos:start="75:51" pos:end="75:56">header</name></expr></argument>, <argument pos:start="75:59" pos:end="75:61"><expr pos:start="75:59" pos:end="75:61"><operator pos:start="75:59" pos:end="75:59">&amp;</operator><name pos:start="75:60" pos:end="75:61">sr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="77:17" pos:end="125:17"><if pos:start="77:17" pos:end="95:17">if <condition pos:start="77:20" pos:end="77:28">(<expr pos:start="77:21" pos:end="77:27"><name pos:start="77:21" pos:end="77:23">ret</name> <operator pos:start="77:25" pos:end="77:25">&lt;</operator> <literal type="number" pos:start="77:27" pos:end="77:27">0</literal></expr>)</condition> <block pos:start="77:30" pos:end="95:17">{<block_content pos:start="79:21" pos:end="93:50">

                    <expr_stmt pos:start="79:21" pos:end="79:40"><expr pos:start="79:21" pos:end="79:39"><name pos:start="79:21" pos:end="79:35"><name pos:start="79:21" pos:end="79:21">s</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:35">header_count</name></name><operator pos:start="79:36" pos:end="79:36">=</operator> <operator pos:start="79:38" pos:end="79:38">-</operator><literal type="number" pos:start="79:39" pos:end="79:39">2</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="81:21" pos:end="81:85">/* no sync found : move by one byte (inefficient, but simple!) */</comment>

                    <expr_stmt pos:start="83:21" pos:end="83:81"><expr pos:start="83:21" pos:end="83:80"><call pos:start="83:21" pos:end="83:80"><name pos:start="83:21" pos:end="83:27">memmove</name><argument_list pos:start="83:28" pos:end="83:80">(<argument pos:start="83:29" pos:end="83:36"><expr pos:start="83:29" pos:end="83:36"><name pos:start="83:29" pos:end="83:36"><name pos:start="83:29" pos:end="83:29">s</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:36">inbuf</name></name></expr></argument>, <argument pos:start="83:39" pos:end="83:50"><expr pos:start="83:39" pos:end="83:50"><name pos:start="83:39" pos:end="83:46"><name pos:start="83:39" pos:end="83:39">s</name><operator pos:start="83:40" pos:end="83:41">-&gt;</operator><name pos:start="83:42" pos:end="83:46">inbuf</name></name> <operator pos:start="83:48" pos:end="83:48">+</operator> <literal type="number" pos:start="83:50" pos:end="83:50">1</literal></expr></argument>, <argument pos:start="83:53" pos:end="83:79"><expr pos:start="83:53" pos:end="83:79"><name pos:start="83:53" pos:end="83:64"><name pos:start="83:53" pos:end="83:53">s</name><operator pos:start="83:54" pos:end="83:55">-&gt;</operator><name pos:start="83:56" pos:end="83:64">inbuf_ptr</name></name> <operator pos:start="83:66" pos:end="83:66">-</operator> <name pos:start="83:68" pos:end="83:75"><name pos:start="83:68" pos:end="83:68">s</name><operator pos:start="83:69" pos:end="83:70">-&gt;</operator><name pos:start="83:71" pos:end="83:75">inbuf</name></name> <operator pos:start="83:77" pos:end="83:77">-</operator> <literal type="number" pos:start="83:79" pos:end="83:79">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="85:21" pos:end="85:35"><expr pos:start="85:21" pos:end="85:34"><name pos:start="85:21" pos:end="85:32"><name pos:start="85:21" pos:end="85:21">s</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:32">inbuf_ptr</name></name><operator pos:start="85:33" pos:end="85:34">--</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="87:21" pos:end="87:56"><expr pos:start="87:21" pos:end="87:55"><call pos:start="87:21" pos:end="87:55"><name pos:start="87:21" pos:end="87:27">dprintf</name><argument_list pos:start="87:28" pos:end="87:55">(<argument pos:start="87:29" pos:end="87:33"><expr pos:start="87:29" pos:end="87:33"><name pos:start="87:29" pos:end="87:33">avctx</name></expr></argument>, <argument pos:start="87:36" pos:end="87:46"><expr pos:start="87:36" pos:end="87:46"><literal type="string" pos:start="87:36" pos:end="87:46">"skip %x\n"</literal></expr></argument>, <argument pos:start="87:49" pos:end="87:54"><expr pos:start="87:49" pos:end="87:54"><name pos:start="87:49" pos:end="87:54">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="89:21" pos:end="91:46">/* reset free format frame size to give a chance

                       to get a new bitrate */</comment>

                    <expr_stmt pos:start="93:21" pos:end="93:50"><expr pos:start="93:21" pos:end="93:49"><name pos:start="93:21" pos:end="93:45"><name pos:start="93:21" pos:end="93:21">s</name><operator pos:start="93:22" pos:end="93:23">-&gt;</operator><name pos:start="93:24" pos:end="93:45">free_format_frame_size</name></name> <operator pos:start="93:47" pos:end="93:47">=</operator> <literal type="number" pos:start="93:49" pos:end="93:49">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="95:19" pos:end="125:17">else <block pos:start="95:24" pos:end="125:17">{<block_content pos:start="97:21" pos:end="123:47">

                    <if_stmt pos:start="97:21" pos:end="99:44"><if pos:start="97:21" pos:end="99:44">if<condition pos:start="97:23" pos:end="97:94">(<expr pos:start="97:24" pos:end="97:93"><operator pos:start="97:24" pos:end="97:24">(</operator><name pos:start="97:25" pos:end="97:30">header</name><operator pos:start="97:31" pos:end="97:31">&amp;</operator><name pos:start="97:32" pos:end="97:47">SAME_HEADER_MASK</name><operator pos:start="97:48" pos:end="97:48">)</operator> <operator pos:start="97:50" pos:end="97:51">!=</operator> <operator pos:start="97:53" pos:end="97:53">(</operator><name pos:start="97:54" pos:end="97:62"><name pos:start="97:54" pos:end="97:54">s</name><operator pos:start="97:55" pos:end="97:56">-&gt;</operator><name pos:start="97:57" pos:end="97:62">header</name></name><operator pos:start="97:63" pos:end="97:63">&amp;</operator><name pos:start="97:64" pos:end="97:79">SAME_HEADER_MASK</name><operator pos:start="97:80" pos:end="97:80">)</operator> <operator pos:start="97:82" pos:end="97:83">&amp;&amp;</operator> <name pos:start="97:85" pos:end="97:93"><name pos:start="97:85" pos:end="97:85">s</name><operator pos:start="97:86" pos:end="97:87">-&gt;</operator><name pos:start="97:88" pos:end="97:93">header</name></name></expr>)</condition><block type="pseudo" pos:start="99:25" pos:end="99:44"><block_content pos:start="99:25" pos:end="99:44">

                        <expr_stmt pos:start="99:25" pos:end="99:44"><expr pos:start="99:25" pos:end="99:43"><name pos:start="99:25" pos:end="99:39"><name pos:start="99:25" pos:end="99:25">s</name><operator pos:start="99:26" pos:end="99:27">-&gt;</operator><name pos:start="99:28" pos:end="99:39">header_count</name></name><operator pos:start="99:40" pos:end="99:40">=</operator> <operator pos:start="99:42" pos:end="99:42">-</operator><literal type="number" pos:start="99:43" pos:end="99:43">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:38"><expr pos:start="101:21" pos:end="101:37"><name pos:start="101:21" pos:end="101:29"><name pos:start="101:21" pos:end="101:21">s</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:29">header</name></name><operator pos:start="101:30" pos:end="101:30">=</operator> <name pos:start="101:32" pos:end="101:37">header</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:38"><expr pos:start="103:21" pos:end="103:37"><name pos:start="103:21" pos:end="103:35"><name pos:start="103:21" pos:end="103:21">s</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:35">header_count</name></name><operator pos:start="103:36" pos:end="103:37">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="120:0"><expr pos:start="105:21" pos:end="105:39"><name pos:start="105:21" pos:end="105:33"><name pos:start="105:21" pos:end="105:21">s</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:33">frame_size</name></name> <operator pos:start="105:35" pos:end="105:35">=</operator> <name pos:start="105:37" pos:end="105:39">ret</name></expr>;</expr_stmt>



<cpp:if pos:start="109:1" pos:end="109:5">#<cpp:directive pos:start="109:2" pos:end="109:3">if</cpp:directive> <expr pos:start="109:5" pos:end="109:5"><literal type="number" pos:start="109:5" pos:end="109:5">0</literal></expr></cpp:if>

                    <comment type="block" pos:start="111:21" pos:end="111:68">/* free format: prepare to compute frame size */</comment>

                    if (ff_mpegaudio_decode_header(s, header) == 1) {

                        s-&gt;frame_size = -1;

                    }

<cpp:endif pos:start="119:1" pos:end="119:6">#<cpp:directive pos:start="119:2" pos:end="119:6">endif</cpp:directive></cpp:endif>

                    <if_stmt pos:start="121:21" pos:end="123:47"><if pos:start="121:21" pos:end="123:47">if<condition pos:start="121:23" pos:end="121:43">(<expr pos:start="121:24" pos:end="121:42"><name pos:start="121:24" pos:end="121:38"><name pos:start="121:24" pos:end="121:24">s</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:38">header_count</name></name> <operator pos:start="121:40" pos:end="121:40">&gt;</operator> <literal type="number" pos:start="121:42" pos:end="121:42">1</literal></expr>)</condition><block type="pseudo" pos:start="123:25" pos:end="123:47"><block_content pos:start="123:25" pos:end="123:47">

                        <expr_stmt pos:start="123:25" pos:end="123:47"><expr pos:start="123:25" pos:end="123:46"><name pos:start="123:25" pos:end="123:42"><name pos:start="123:25" pos:end="123:29">avctx</name><operator pos:start="123:30" pos:end="123:31">-&gt;</operator><name pos:start="123:32" pos:end="123:42">sample_rate</name></name><operator pos:start="123:43" pos:end="123:43">=</operator> <name pos:start="123:45" pos:end="123:46">sr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="129:11" pos:end="255:9">else

<cpp:if pos:start="131:1" pos:end="131:5">#<cpp:directive pos:start="131:2" pos:end="131:3">if</cpp:directive> <expr pos:start="131:5" pos:end="131:5"><literal type="number" pos:start="131:5" pos:end="131:5">0</literal></expr></cpp:if>

        if (s-&gt;frame_size == -1) {

            <comment type="block" pos:start="135:13" pos:end="135:68">/* free format : find next sync to compute frame size */</comment>

            len = MPA_MAX_CODED_FRAME_SIZE - len;

            if (len &gt; buf_size)

                len = buf_size;

            if (len == 0) {

                <comment type="block" pos:start="145:17" pos:end="145:44">/* frame too long: resync */</comment>

                s-&gt;frame_size = 0;

                memmove(s-&gt;inbuf, s-&gt;inbuf + 1, s-&gt;inbuf_ptr - s-&gt;inbuf - 1);

                s-&gt;inbuf_ptr--;

            } else {

                uint8_t *p, *pend;

                uint32_t header1;

                int padding;



                memcpy(s-&gt;inbuf_ptr, buf_ptr, len);

                <comment type="block" pos:start="165:17" pos:end="165:38">/* check for header */</comment>

                p = s-&gt;inbuf_ptr - 3;

                pend = s-&gt;inbuf_ptr + len - 4;

                while (p &lt;= pend) {

                    header = AV_RB32(p);

                    header1 = AV_RB32(s-&gt;inbuf);

                    <comment type="block" pos:start="177:21" pos:end="179:38">/* check with high probability that we have a

                       valid header */</comment>

                    if ((header &amp; SAME_HEADER_MASK) ==

                        (header1 &amp; SAME_HEADER_MASK)) {

                        <comment type="block" pos:start="185:25" pos:end="185:59">/* header found: update pointers */</comment>

                        len = (p + 4) - s-&gt;inbuf_ptr;

                        buf_ptr += len;

                        buf_size -= len;

                        s-&gt;inbuf_ptr = p;

                        <comment type="block" pos:start="195:25" pos:end="195:48">/* compute frame size */</comment>

                        s-&gt;free_format_next_header = header;

                        s-&gt;free_format_frame_size = s-&gt;inbuf_ptr - s-&gt;inbuf;

                        padding = (header1 &gt;&gt; 9) &amp; 1;

                        if (s-&gt;layer == 1)

                            s-&gt;free_format_frame_size -= padding * 4;

                        else

                            s-&gt;free_format_frame_size -= padding;

                        dprintf(avctx, "free frame size=%d padding=%d\n",

                                s-&gt;free_format_frame_size, padding);

                        ff_mpegaudio_decode_header(s, header1);

                        goto next_data;

                    }

                    p++;

                }

                <comment type="block" pos:start="225:17" pos:end="225:57">/* not found: simply increase pointers */</comment>

                buf_ptr += len;

                s-&gt;inbuf_ptr += len;

                buf_size -= len;

            }

        } else

<cpp:endif pos:start="237:1" pos:end="237:6">#<cpp:directive pos:start="237:2" pos:end="237:6">endif</cpp:directive></cpp:endif>

        if <condition pos:start="239:12" pos:end="239:32">(<expr pos:start="239:13" pos:end="239:31"><name pos:start="239:13" pos:end="239:15">len</name> <operator pos:start="239:17" pos:end="239:17">&lt;</operator> <name pos:start="239:19" pos:end="239:31"><name pos:start="239:19" pos:end="239:19">s</name><operator pos:start="239:20" pos:end="239:21">-&gt;</operator><name pos:start="239:22" pos:end="239:31">frame_size</name></name></expr>)</condition> <block pos:start="239:34" pos:end="255:9">{<block_content pos:start="241:13" pos:end="253:28">

            <if_stmt pos:start="241:13" pos:end="243:57"><if pos:start="241:13" pos:end="243:57">if <condition pos:start="241:16" pos:end="241:57">(<expr pos:start="241:17" pos:end="241:56"><name pos:start="241:17" pos:end="241:29"><name pos:start="241:17" pos:end="241:17">s</name><operator pos:start="241:18" pos:end="241:19">-&gt;</operator><name pos:start="241:20" pos:end="241:29">frame_size</name></name> <operator pos:start="241:31" pos:end="241:31">&gt;</operator> <name pos:start="241:33" pos:end="241:56">MPA_MAX_CODED_FRAME_SIZE</name></expr>)</condition><block type="pseudo" pos:start="243:17" pos:end="243:57"><block_content pos:start="243:17" pos:end="243:57">

                <expr_stmt pos:start="243:17" pos:end="243:57"><expr pos:start="243:17" pos:end="243:56"><name pos:start="243:17" pos:end="243:29"><name pos:start="243:17" pos:end="243:17">s</name><operator pos:start="243:18" pos:end="243:19">-&gt;</operator><name pos:start="243:20" pos:end="243:29">frame_size</name></name> <operator pos:start="243:31" pos:end="243:31">=</operator> <name pos:start="243:33" pos:end="243:56">MPA_MAX_CODED_FRAME_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:55"><expr pos:start="245:13" pos:end="245:54"><name pos:start="245:13" pos:end="245:15">len</name> <operator pos:start="245:17" pos:end="245:17">=</operator> <call pos:start="245:19" pos:end="245:54"><name pos:start="245:19" pos:end="245:23">FFMIN</name><argument_list pos:start="245:24" pos:end="245:54">(<argument pos:start="245:25" pos:end="245:43"><expr pos:start="245:25" pos:end="245:43"><name pos:start="245:25" pos:end="245:37"><name pos:start="245:25" pos:end="245:25">s</name><operator pos:start="245:26" pos:end="245:27">-&gt;</operator><name pos:start="245:28" pos:end="245:37">frame_size</name></name> <operator pos:start="245:39" pos:end="245:39">-</operator> <name pos:start="245:41" pos:end="245:43">len</name></expr></argument>, <argument pos:start="245:46" pos:end="245:53"><expr pos:start="245:46" pos:end="245:53"><name pos:start="245:46" pos:end="245:53">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:47"><expr pos:start="247:13" pos:end="247:46"><call pos:start="247:13" pos:end="247:46"><name pos:start="247:13" pos:end="247:18">memcpy</name><argument_list pos:start="247:19" pos:end="247:46">(<argument pos:start="247:20" pos:end="247:31"><expr pos:start="247:20" pos:end="247:31"><name pos:start="247:20" pos:end="247:31"><name pos:start="247:20" pos:end="247:20">s</name><operator pos:start="247:21" pos:end="247:22">-&gt;</operator><name pos:start="247:23" pos:end="247:31">inbuf_ptr</name></name></expr></argument>, <argument pos:start="247:34" pos:end="247:40"><expr pos:start="247:34" pos:end="247:40"><name pos:start="247:34" pos:end="247:40">buf_ptr</name></expr></argument>, <argument pos:start="247:43" pos:end="247:45"><expr pos:start="247:43" pos:end="247:45"><name pos:start="247:43" pos:end="247:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:27"><expr pos:start="249:13" pos:end="249:26"><name pos:start="249:13" pos:end="249:19">buf_ptr</name> <operator pos:start="249:21" pos:end="249:22">+=</operator> <name pos:start="249:24" pos:end="249:26">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:32"><expr pos:start="251:13" pos:end="251:31"><name pos:start="251:13" pos:end="251:24"><name pos:start="251:13" pos:end="251:13">s</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:24">inbuf_ptr</name></name> <operator pos:start="251:26" pos:end="251:27">+=</operator> <name pos:start="251:29" pos:end="251:31">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:28"><expr pos:start="253:13" pos:end="253:27"><name pos:start="253:13" pos:end="253:20">buf_size</name> <operator pos:start="253:22" pos:end="253:23">-=</operator> <name pos:start="253:25" pos:end="253:27">len</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="259:9" pos:end="279:9"><if pos:start="259:9" pos:end="279:9">if<condition pos:start="259:11" pos:end="261:56">(<expr pos:start="259:12" pos:end="261:55"><name pos:start="259:12" pos:end="259:24"><name pos:start="259:12" pos:end="259:12">s</name><operator pos:start="259:13" pos:end="259:14">-&gt;</operator><name pos:start="259:15" pos:end="259:24">frame_size</name></name> <operator pos:start="259:26" pos:end="259:26">&gt;</operator> <literal type="number" pos:start="259:28" pos:end="259:28">0</literal> <operator pos:start="259:30" pos:end="259:31">&amp;&amp;</operator> <name pos:start="259:33" pos:end="259:39">buf_ptr</name> <operator pos:start="259:41" pos:end="259:41">-</operator> <name pos:start="259:43" pos:end="259:45">buf</name> <operator pos:start="259:47" pos:end="259:48">==</operator> <name pos:start="259:50" pos:end="259:61"><name pos:start="259:50" pos:end="259:50">s</name><operator pos:start="259:51" pos:end="259:52">-&gt;</operator><name pos:start="259:53" pos:end="259:61">inbuf_ptr</name></name> <operator pos:start="259:63" pos:end="259:63">-</operator> <name pos:start="259:65" pos:end="259:72"><name pos:start="259:65" pos:end="259:65">s</name><operator pos:start="259:66" pos:end="259:67">-&gt;</operator><name pos:start="259:68" pos:end="259:72">inbuf</name></name>

           <operator pos:start="261:12" pos:end="261:13">&amp;&amp;</operator> <name pos:start="261:15" pos:end="261:22">buf_size</name> <operator pos:start="261:24" pos:end="261:24">+</operator> <name pos:start="261:26" pos:end="261:32">buf_ptr</name> <operator pos:start="261:34" pos:end="261:34">-</operator> <name pos:start="261:36" pos:end="261:38">buf</name> <operator pos:start="261:40" pos:end="261:41">&gt;=</operator> <name pos:start="261:43" pos:end="261:55"><name pos:start="261:43" pos:end="261:43">s</name><operator pos:start="261:44" pos:end="261:45">-&gt;</operator><name pos:start="261:46" pos:end="261:55">frame_size</name></name></expr>)</condition><block pos:start="261:57" pos:end="279:9">{<block_content pos:start="263:13" pos:end="277:18">

            <if_stmt pos:start="263:13" pos:end="269:13"><if pos:start="263:13" pos:end="269:13">if<condition pos:start="263:15" pos:end="263:35">(<expr pos:start="263:16" pos:end="263:34"><name pos:start="263:16" pos:end="263:30"><name pos:start="263:16" pos:end="263:16">s</name><operator pos:start="263:17" pos:end="263:18">-&gt;</operator><name pos:start="263:19" pos:end="263:30">header_count</name></name> <operator pos:start="263:32" pos:end="263:32">&gt;</operator> <literal type="number" pos:start="263:34" pos:end="263:34">0</literal></expr>)</condition><block pos:start="263:36" pos:end="269:13">{<block_content pos:start="265:17" pos:end="267:46">

                <expr_stmt pos:start="265:17" pos:end="265:31"><expr pos:start="265:17" pos:end="265:30"><operator pos:start="265:17" pos:end="265:17">*</operator><name pos:start="265:18" pos:end="265:24">poutbuf</name> <operator pos:start="265:26" pos:end="265:26">=</operator> <name pos:start="265:28" pos:end="265:30">buf</name></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:46"><expr pos:start="267:17" pos:end="267:45"><operator pos:start="267:17" pos:end="267:17">*</operator><name pos:start="267:18" pos:end="267:29">poutbuf_size</name> <operator pos:start="267:31" pos:end="267:31">=</operator> <name pos:start="267:33" pos:end="267:45"><name pos:start="267:33" pos:end="267:33">s</name><operator pos:start="267:34" pos:end="267:35">-&gt;</operator><name pos:start="267:36" pos:end="267:45">frame_size</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:42"><expr pos:start="271:13" pos:end="271:41"><name pos:start="271:13" pos:end="271:19">buf_ptr</name> <operator pos:start="271:21" pos:end="271:21">=</operator> <name pos:start="271:23" pos:end="271:25">buf</name> <operator pos:start="271:27" pos:end="271:27">+</operator> <name pos:start="271:29" pos:end="271:41"><name pos:start="271:29" pos:end="271:29">s</name><operator pos:start="271:30" pos:end="271:31">-&gt;</operator><name pos:start="271:32" pos:end="271:41">frame_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:36"><expr pos:start="273:13" pos:end="273:35"><name pos:start="273:13" pos:end="273:24"><name pos:start="273:13" pos:end="273:13">s</name><operator pos:start="273:14" pos:end="273:15">-&gt;</operator><name pos:start="273:16" pos:end="273:24">inbuf_ptr</name></name> <operator pos:start="273:26" pos:end="273:26">=</operator> <name pos:start="273:28" pos:end="273:35"><name pos:start="273:28" pos:end="273:28">s</name><operator pos:start="273:29" pos:end="273:30">-&gt;</operator><name pos:start="273:31" pos:end="273:35">inbuf</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:30"><expr pos:start="275:13" pos:end="275:29"><name pos:start="275:13" pos:end="275:25"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:25">frame_size</name></name> <operator pos:start="275:27" pos:end="275:27">=</operator> <literal type="number" pos:start="275:29" pos:end="275:29">0</literal></expr>;</expr_stmt>

            <break pos:start="277:13" pos:end="277:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="283:9" pos:end="283:24">//    next_data:</comment>

        <if_stmt pos:start="285:9" pos:end="303:9"><if pos:start="285:9" pos:end="303:9">if <condition pos:start="285:12" pos:end="287:55">(<expr pos:start="285:13" pos:end="287:54"><name pos:start="285:13" pos:end="285:25"><name pos:start="285:13" pos:end="285:13">s</name><operator pos:start="285:14" pos:end="285:15">-&gt;</operator><name pos:start="285:16" pos:end="285:25">frame_size</name></name> <operator pos:start="285:27" pos:end="285:27">&gt;</operator> <literal type="number" pos:start="285:29" pos:end="285:29">0</literal> <operator pos:start="285:31" pos:end="285:32">&amp;&amp;</operator>

            <operator pos:start="287:13" pos:end="287:13">(</operator><name pos:start="287:14" pos:end="287:25"><name pos:start="287:14" pos:end="287:14">s</name><operator pos:start="287:15" pos:end="287:16">-&gt;</operator><name pos:start="287:17" pos:end="287:25">inbuf_ptr</name></name> <operator pos:start="287:27" pos:end="287:27">-</operator> <name pos:start="287:29" pos:end="287:36"><name pos:start="287:29" pos:end="287:29">s</name><operator pos:start="287:30" pos:end="287:31">-&gt;</operator><name pos:start="287:32" pos:end="287:36">inbuf</name></name><operator pos:start="287:37" pos:end="287:37">)</operator> <operator pos:start="287:39" pos:end="287:40">&gt;=</operator> <name pos:start="287:42" pos:end="287:54"><name pos:start="287:42" pos:end="287:42">s</name><operator pos:start="287:43" pos:end="287:44">-&gt;</operator><name pos:start="287:45" pos:end="287:54">frame_size</name></name></expr>)</condition> <block pos:start="287:57" pos:end="303:9">{<block_content pos:start="289:13" pos:end="301:18">

            <if_stmt pos:start="289:13" pos:end="295:13"><if pos:start="289:13" pos:end="295:13">if<condition pos:start="289:15" pos:end="289:35">(<expr pos:start="289:16" pos:end="289:34"><name pos:start="289:16" pos:end="289:30"><name pos:start="289:16" pos:end="289:16">s</name><operator pos:start="289:17" pos:end="289:18">-&gt;</operator><name pos:start="289:19" pos:end="289:30">header_count</name></name> <operator pos:start="289:32" pos:end="289:32">&gt;</operator> <literal type="number" pos:start="289:34" pos:end="289:34">0</literal></expr>)</condition><block pos:start="289:36" pos:end="295:13">{<block_content pos:start="291:17" pos:end="293:56">

                <expr_stmt pos:start="291:17" pos:end="291:36"><expr pos:start="291:17" pos:end="291:35"><operator pos:start="291:17" pos:end="291:17">*</operator><name pos:start="291:18" pos:end="291:24">poutbuf</name> <operator pos:start="291:26" pos:end="291:26">=</operator> <name pos:start="291:28" pos:end="291:35"><name pos:start="291:28" pos:end="291:28">s</name><operator pos:start="291:29" pos:end="291:30">-&gt;</operator><name pos:start="291:31" pos:end="291:35">inbuf</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="293:17" pos:end="293:56"><expr pos:start="293:17" pos:end="293:55"><operator pos:start="293:17" pos:end="293:17">*</operator><name pos:start="293:18" pos:end="293:29">poutbuf_size</name> <operator pos:start="293:31" pos:end="293:31">=</operator> <name pos:start="293:33" pos:end="293:44"><name pos:start="293:33" pos:end="293:33">s</name><operator pos:start="293:34" pos:end="293:35">-&gt;</operator><name pos:start="293:36" pos:end="293:44">inbuf_ptr</name></name> <operator pos:start="293:46" pos:end="293:46">-</operator> <name pos:start="293:48" pos:end="293:55"><name pos:start="293:48" pos:end="293:48">s</name><operator pos:start="293:49" pos:end="293:50">-&gt;</operator><name pos:start="293:51" pos:end="293:55">inbuf</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:36"><expr pos:start="297:13" pos:end="297:35"><name pos:start="297:13" pos:end="297:24"><name pos:start="297:13" pos:end="297:13">s</name><operator pos:start="297:14" pos:end="297:15">-&gt;</operator><name pos:start="297:16" pos:end="297:24">inbuf_ptr</name></name> <operator pos:start="297:26" pos:end="297:26">=</operator> <name pos:start="297:28" pos:end="297:35"><name pos:start="297:28" pos:end="297:28">s</name><operator pos:start="297:29" pos:end="297:30">-&gt;</operator><name pos:start="297:31" pos:end="297:35">inbuf</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:30"><expr pos:start="299:13" pos:end="299:29"><name pos:start="299:13" pos:end="299:25"><name pos:start="299:13" pos:end="299:13">s</name><operator pos:start="299:14" pos:end="299:15">-&gt;</operator><name pos:start="299:16" pos:end="299:25">frame_size</name></name> <operator pos:start="299:27" pos:end="299:27">=</operator> <literal type="number" pos:start="299:29" pos:end="299:29">0</literal></expr>;</expr_stmt>

            <break pos:start="301:13" pos:end="301:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <return pos:start="307:5" pos:end="307:25">return <expr pos:start="307:12" pos:end="307:24"><name pos:start="307:12" pos:end="307:18">buf_ptr</name> <operator pos:start="307:20" pos:end="307:20">-</operator> <name pos:start="307:22" pos:end="307:24">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
