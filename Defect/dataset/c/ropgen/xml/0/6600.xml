<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6600.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">vfio_msix_vector_do_use</name><parameter_list pos:start="1:35" pos:end="3:71">(<parameter pos:start="1:36" pos:end="1:50"><decl pos:start="1:36" pos:end="1:50"><type pos:start="1:36" pos:end="1:50"><name pos:start="1:36" pos:end="1:44">PCIDevice</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">pdev</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:67"><decl pos:start="1:53" pos:end="1:67"><type pos:start="1:53" pos:end="1:67"><name pos:start="1:53" pos:end="1:60">unsigned</name> <name pos:start="1:62" pos:end="1:64">int</name></type> <name pos:start="1:66" pos:end="1:67">nr</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:50"><decl pos:start="3:36" pos:end="3:50"><type pos:start="3:36" pos:end="3:50"><name pos:start="3:36" pos:end="3:45">MSIMessage</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:50">msg</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:70"><decl pos:start="3:53" pos:end="3:70"><type pos:start="3:53" pos:end="3:70"><name pos:start="3:53" pos:end="3:61">IOHandler</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:70">handler</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="161:1">{<block_content pos:start="7:5" pos:end="159:13">

    <decl_stmt pos:start="7:5" pos:end="7:63"><decl pos:start="7:5" pos:end="7:62"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">VFIOPCIDevice</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:23">vdev</name> <init pos:start="7:25" pos:end="7:62">= <expr pos:start="7:27" pos:end="7:62"><call pos:start="7:27" pos:end="7:62"><name pos:start="7:27" pos:end="7:35">DO_UPCAST</name><argument_list pos:start="7:36" pos:end="7:62">(<argument pos:start="7:37" pos:end="7:49"><expr pos:start="7:37" pos:end="7:49"><name pos:start="7:37" pos:end="7:49">VFIOPCIDevice</name></expr></argument>, <argument pos:start="7:52" pos:end="7:55"><expr pos:start="7:52" pos:end="7:55"><name pos:start="7:52" pos:end="7:55">pdev</name></expr></argument>, <argument pos:start="7:58" pos:end="7:61"><expr pos:start="7:58" pos:end="7:61"><name pos:start="7:58" pos:end="7:61">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">VFIOMSIVector</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:25">vector</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:59"><expr pos:start="15:5" pos:end="15:58"><call pos:start="15:5" pos:end="15:58"><name pos:start="15:5" pos:end="15:33">trace_vfio_msix_vector_do_use</name><argument_list pos:start="15:34" pos:end="15:58">(<argument pos:start="15:35" pos:end="15:53"><expr pos:start="15:35" pos:end="15:53"><name pos:start="15:35" pos:end="15:53"><name pos:start="15:35" pos:end="15:38">vdev</name><operator pos:start="15:39" pos:end="15:40">-&gt;</operator><name pos:start="15:41" pos:end="15:48">vbasedev</name><operator pos:start="15:49" pos:end="15:49">.</operator><name pos:start="15:50" pos:end="15:53">name</name></name></expr></argument>, <argument pos:start="15:56" pos:end="15:57"><expr pos:start="15:56" pos:end="15:57"><name pos:start="15:56" pos:end="15:57">nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:36"><expr pos:start="19:5" pos:end="19:35"><name pos:start="19:5" pos:end="19:10">vector</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <operator pos:start="19:14" pos:end="19:14">&amp;</operator><name pos:start="19:15" pos:end="19:35"><name pos:start="19:15" pos:end="19:18">vdev</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:31">msi_vectors</name><index pos:start="19:32" pos:end="19:35">[<expr pos:start="19:33" pos:end="19:34"><name pos:start="19:33" pos:end="19:34">nr</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="39:5"><if pos:start="23:5" pos:end="39:5">if <condition pos:start="23:8" pos:end="23:21">(<expr pos:start="23:9" pos:end="23:20"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:20"><name pos:start="23:10" pos:end="23:15">vector</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:20">use</name></name></expr>)</condition> <block pos:start="23:23" pos:end="39:5">{<block_content pos:start="25:9" pos:end="37:34">

        <expr_stmt pos:start="25:9" pos:end="25:28"><expr pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:14">vector</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:20">vdev</name></name> <operator pos:start="25:22" pos:end="25:22">=</operator> <name pos:start="25:24" pos:end="25:27">vdev</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:26"><expr pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:14">vector</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:20">virq</name></name> <operator pos:start="27:22" pos:end="27:22">=</operator> <operator pos:start="27:24" pos:end="27:24">-</operator><literal type="number" pos:start="27:25" pos:end="27:25">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:55">(<expr pos:start="29:13" pos:end="29:54"><call pos:start="29:13" pos:end="29:54"><name pos:start="29:13" pos:end="29:31">event_notifier_init</name><argument_list pos:start="29:32" pos:end="29:54">(<argument pos:start="29:33" pos:end="29:50"><expr pos:start="29:33" pos:end="29:50"><operator pos:start="29:33" pos:end="29:33">&amp;</operator><name pos:start="29:34" pos:end="29:50"><name pos:start="29:34" pos:end="29:39">vector</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:50">interrupt</name></name></expr></argument>, <argument pos:start="29:53" pos:end="29:53"><expr pos:start="29:53" pos:end="29:53"><literal type="number" pos:start="29:53" pos:end="29:53">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:57" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:68">

            <expr_stmt pos:start="31:13" pos:end="31:68"><expr pos:start="31:13" pos:end="31:67"><call pos:start="31:13" pos:end="31:67"><name pos:start="31:13" pos:end="31:24">error_report</name><argument_list pos:start="31:25" pos:end="31:67">(<argument pos:start="31:26" pos:end="31:66"><expr pos:start="31:26" pos:end="31:66"><literal type="string" pos:start="31:26" pos:end="31:66">"vfio: Error: event_notifier_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:27"><expr pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:14">vector</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:19">use</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:26">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:34"><expr pos:start="37:9" pos:end="37:33"><call pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:23">msix_vector_use</name><argument_list pos:start="37:24" pos:end="37:33">(<argument pos:start="37:25" pos:end="37:28"><expr pos:start="37:25" pos:end="37:28"><name pos:start="37:25" pos:end="37:28">pdev</name></expr></argument>, <argument pos:start="37:31" pos:end="37:32"><expr pos:start="37:31" pos:end="37:32"><name pos:start="37:31" pos:end="37:32">nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="45:47"><expr pos:start="43:5" pos:end="45:46"><call pos:start="43:5" pos:end="45:46"><name pos:start="43:5" pos:end="43:23">qemu_set_fd_handler</name><argument_list pos:start="43:24" pos:end="45:46">(<argument pos:start="43:25" pos:end="43:65"><expr pos:start="43:25" pos:end="43:65"><call pos:start="43:25" pos:end="43:65"><name pos:start="43:25" pos:end="43:45">event_notifier_get_fd</name><argument_list pos:start="43:46" pos:end="43:65">(<argument pos:start="43:47" pos:end="43:64"><expr pos:start="43:47" pos:end="43:64"><operator pos:start="43:47" pos:end="43:47">&amp;</operator><name pos:start="43:48" pos:end="43:64"><name pos:start="43:48" pos:end="43:53">vector</name><operator pos:start="43:54" pos:end="43:55">-&gt;</operator><name pos:start="43:56" pos:end="43:64">interrupt</name></name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="45:25" pos:end="45:31"><expr pos:start="45:25" pos:end="45:31"><name pos:start="45:25" pos:end="45:31">handler</name></expr></argument>, <argument pos:start="45:34" pos:end="45:37"><expr pos:start="45:34" pos:end="45:37"><name pos:start="45:34" pos:end="45:37">NULL</name></expr></argument>, <argument pos:start="45:40" pos:end="45:45"><expr pos:start="45:40" pos:end="45:45"><name pos:start="45:40" pos:end="45:45">vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="55:7">/*

     * Attempt to enable route through KVM irqchip,

     * default to userspace handling if unavailable.

     */</comment>

    <if_stmt pos:start="57:5" pos:end="73:5"><if pos:start="57:5" pos:end="69:5">if <condition pos:start="57:8" pos:end="57:26">(<expr pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:14">vector</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:20">virq</name></name> <operator pos:start="57:22" pos:end="57:23">&gt;=</operator> <literal type="number" pos:start="57:25" pos:end="57:25">0</literal></expr>)</condition> <block pos:start="57:28" pos:end="69:5">{<block_content pos:start="59:9" pos:end="67:9">

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:17">(<expr pos:start="59:13" pos:end="59:16"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:16">msg</name></expr>)</condition> <block pos:start="59:19" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:45">

            <expr_stmt pos:start="61:13" pos:end="61:45"><expr pos:start="61:13" pos:end="61:44"><call pos:start="61:13" pos:end="61:44"><name pos:start="61:13" pos:end="61:36">vfio_remove_kvm_msi_virq</name><argument_list pos:start="61:37" pos:end="61:44">(<argument pos:start="61:38" pos:end="61:43"><expr pos:start="61:38" pos:end="61:43"><name pos:start="61:38" pos:end="61:43">vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="67:9">else <block pos:start="63:16" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:51">

            <expr_stmt pos:start="65:13" pos:end="65:51"><expr pos:start="65:13" pos:end="65:50"><call pos:start="65:13" pos:end="65:50"><name pos:start="65:13" pos:end="65:36">vfio_update_kvm_msi_virq</name><argument_list pos:start="65:37" pos:end="65:50">(<argument pos:start="65:38" pos:end="65:43"><expr pos:start="65:38" pos:end="65:43"><name pos:start="65:38" pos:end="65:43">vector</name></expr></argument>, <argument pos:start="65:46" pos:end="65:49"><expr pos:start="65:46" pos:end="65:49"><operator pos:start="65:46" pos:end="65:46">*</operator><name pos:start="65:47" pos:end="65:49">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="73:5">else <block pos:start="69:12" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:49">

        <expr_stmt pos:start="71:9" pos:end="71:49"><expr pos:start="71:9" pos:end="71:48"><call pos:start="71:9" pos:end="71:48"><name pos:start="71:9" pos:end="71:29">vfio_add_kvm_msi_virq</name><argument_list pos:start="71:30" pos:end="71:48">(<argument pos:start="71:31" pos:end="71:36"><expr pos:start="71:31" pos:end="71:36"><name pos:start="71:31" pos:end="71:36">vector</name></expr></argument>, <argument pos:start="71:39" pos:end="71:41"><expr pos:start="71:39" pos:end="71:41"><name pos:start="71:39" pos:end="71:41">msg</name></expr></argument>, <argument pos:start="71:44" pos:end="71:47"><expr pos:start="71:44" pos:end="71:47"><name pos:start="71:44" pos:end="71:47">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="85:7">/*

     * We don't want to have the host allocate all possible MSI vectors

     * for a device if they're not in use, so we shutdown and incrementally

     * increase them as needed.

     */</comment>

    <if_stmt pos:start="87:5" pos:end="155:5"><if pos:start="87:5" pos:end="101:5">if <condition pos:start="87:8" pos:end="87:34">(<expr pos:start="87:9" pos:end="87:33"><name pos:start="87:9" pos:end="87:24"><name pos:start="87:9" pos:end="87:12">vdev</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:24">nr_vectors</name></name> <operator pos:start="87:26" pos:end="87:26">&lt;</operator> <name pos:start="87:28" pos:end="87:29">nr</name> <operator pos:start="87:31" pos:end="87:31">+</operator> <literal type="number" pos:start="87:33" pos:end="87:33">1</literal></expr>)</condition> <block pos:start="87:36" pos:end="101:5">{<block_content pos:start="89:9" pos:end="99:9">

        <expr_stmt pos:start="89:9" pos:end="89:72"><expr pos:start="89:9" pos:end="89:71"><call pos:start="89:9" pos:end="89:71"><name pos:start="89:9" pos:end="89:29">vfio_disable_irqindex</name><argument_list pos:start="89:30" pos:end="89:71">(<argument pos:start="89:31" pos:end="89:45"><expr pos:start="89:31" pos:end="89:45"><operator pos:start="89:31" pos:end="89:31">&amp;</operator><name pos:start="89:32" pos:end="89:45"><name pos:start="89:32" pos:end="89:35">vdev</name><operator pos:start="89:36" pos:end="89:37">-&gt;</operator><name pos:start="89:38" pos:end="89:45">vbasedev</name></name></expr></argument>, <argument pos:start="89:48" pos:end="89:70"><expr pos:start="89:48" pos:end="89:70"><name pos:start="89:48" pos:end="89:70">VFIO_PCI_MSIX_IRQ_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:34"><expr pos:start="91:9" pos:end="91:33"><name pos:start="91:9" pos:end="91:24"><name pos:start="91:9" pos:end="91:12">vdev</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:24">nr_vectors</name></name> <operator pos:start="91:26" pos:end="91:26">=</operator> <name pos:start="91:28" pos:end="91:29">nr</name> <operator pos:start="91:31" pos:end="91:31">+</operator> <literal type="number" pos:start="91:33" pos:end="91:33">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:46"><expr pos:start="93:9" pos:end="93:45"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:45"><name pos:start="93:15" pos:end="93:33">vfio_enable_vectors</name><argument_list pos:start="93:34" pos:end="93:45">(<argument pos:start="93:35" pos:end="93:38"><expr pos:start="93:35" pos:end="93:38"><name pos:start="93:35" pos:end="93:38">vdev</name></expr></argument>, <argument pos:start="93:41" pos:end="93:44"><expr pos:start="93:41" pos:end="93:44"><name pos:start="93:41" pos:end="93:44">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:16">(<expr pos:start="95:13" pos:end="95:15"><name pos:start="95:13" pos:end="95:15">ret</name></expr>)</condition> <block pos:start="95:18" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:68">

            <expr_stmt pos:start="97:13" pos:end="97:68"><expr pos:start="97:13" pos:end="97:67"><call pos:start="97:13" pos:end="97:67"><name pos:start="97:13" pos:end="97:24">error_report</name><argument_list pos:start="97:25" pos:end="97:67">(<argument pos:start="97:26" pos:end="97:61"><expr pos:start="97:26" pos:end="97:61"><literal type="string" pos:start="97:26" pos:end="97:61">"vfio: failed to enable vectors, %d"</literal></expr></argument>, <argument pos:start="97:64" pos:end="97:66"><expr pos:start="97:64" pos:end="97:66"><name pos:start="97:64" pos:end="97:66">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="101:7" pos:end="155:5">else <block pos:start="101:12" pos:end="155:5">{<block_content pos:start="103:9" pos:end="153:9">

        <decl_stmt pos:start="103:9" pos:end="103:18"><decl pos:start="103:9" pos:end="103:17"><type pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">int</name></type> <name pos:start="103:13" pos:end="103:17">argsz</name></decl>;</decl_stmt>

        <decl_stmt pos:start="105:9" pos:end="105:37"><decl pos:start="105:9" pos:end="105:36"><type pos:start="105:9" pos:end="105:29"><name pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:14">struct</name> <name pos:start="105:16" pos:end="105:27">vfio_irq_set</name></name> <modifier pos:start="105:29" pos:end="105:29">*</modifier></type><name pos:start="105:30" pos:end="105:36">irq_set</name></decl>;</decl_stmt>

        <decl_stmt pos:start="107:9" pos:end="107:21"><decl pos:start="107:9" pos:end="107:20"><type pos:start="107:9" pos:end="107:17"><name pos:start="107:9" pos:end="107:15">int32_t</name> <modifier pos:start="107:17" pos:end="107:17">*</modifier></type><name pos:start="107:18" pos:end="107:20">pfd</name></decl>;</decl_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:48"><expr pos:start="111:9" pos:end="111:47"><name pos:start="111:9" pos:end="111:13">argsz</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <sizeof pos:start="111:17" pos:end="111:32">sizeof<argument_list pos:start="111:23" pos:end="111:32">(<argument pos:start="111:24" pos:end="111:31"><expr pos:start="111:24" pos:end="111:31"><operator pos:start="111:24" pos:end="111:24">*</operator><name pos:start="111:25" pos:end="111:31">irq_set</name></expr></argument>)</argument_list></sizeof> <operator pos:start="111:34" pos:end="111:34">+</operator> <sizeof pos:start="111:36" pos:end="111:47">sizeof<argument_list pos:start="111:42" pos:end="111:47">(<argument pos:start="111:43" pos:end="111:46"><expr pos:start="111:43" pos:end="111:46"><operator pos:start="111:43" pos:end="111:43">*</operator><name pos:start="111:44" pos:end="111:46">pfd</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:35"><expr pos:start="115:9" pos:end="115:34"><name pos:start="115:9" pos:end="115:15">irq_set</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <call pos:start="115:19" pos:end="115:34"><name pos:start="115:19" pos:end="115:27">g_malloc0</name><argument_list pos:start="115:28" pos:end="115:34">(<argument pos:start="115:29" pos:end="115:33"><expr pos:start="115:29" pos:end="115:33"><name pos:start="115:29" pos:end="115:33">argsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:31"><expr pos:start="117:9" pos:end="117:30"><name pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:15">irq_set</name><operator pos:start="117:16" pos:end="117:17">-&gt;</operator><name pos:start="117:18" pos:end="117:22">argsz</name></name> <operator pos:start="117:24" pos:end="117:24">=</operator> <name pos:start="117:26" pos:end="117:30">argsz</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="121:53"><expr pos:start="119:9" pos:end="121:52"><name pos:start="119:9" pos:end="119:22"><name pos:start="119:9" pos:end="119:15">irq_set</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:22">flags</name></name> <operator pos:start="119:24" pos:end="119:24">=</operator> <name pos:start="119:26" pos:end="119:50">VFIO_IRQ_SET_DATA_EVENTFD</name> <operator pos:start="119:52" pos:end="119:52">|</operator>

                         <name pos:start="121:26" pos:end="121:52">VFIO_IRQ_SET_ACTION_TRIGGER</name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:49"><expr pos:start="123:9" pos:end="123:48"><name pos:start="123:9" pos:end="123:22"><name pos:start="123:9" pos:end="123:15">irq_set</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:22">index</name></name> <operator pos:start="123:24" pos:end="123:24">=</operator> <name pos:start="123:26" pos:end="123:48">VFIO_PCI_MSIX_IRQ_INDEX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:28"><expr pos:start="125:9" pos:end="125:27"><name pos:start="125:9" pos:end="125:22"><name pos:start="125:9" pos:end="125:15">irq_set</name><operator pos:start="125:16" pos:end="125:17">-&gt;</operator><name pos:start="125:18" pos:end="125:22">start</name></name> <operator pos:start="125:24" pos:end="125:24">=</operator> <name pos:start="125:26" pos:end="125:27">nr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:27"><expr pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:22"><name pos:start="127:9" pos:end="127:15">irq_set</name><operator pos:start="127:16" pos:end="127:17">-&gt;</operator><name pos:start="127:18" pos:end="127:22">count</name></name> <operator pos:start="127:24" pos:end="127:24">=</operator> <literal type="number" pos:start="127:26" pos:end="127:26">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:40"><expr pos:start="129:9" pos:end="129:39"><name pos:start="129:9" pos:end="129:11">pfd</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <operator pos:start="129:15" pos:end="129:15">(</operator><name pos:start="129:16" pos:end="129:22">int32_t</name> <operator pos:start="129:24" pos:end="129:24">*</operator><operator pos:start="129:25" pos:end="129:25">)</operator><operator pos:start="129:26" pos:end="129:26">&amp;</operator><name pos:start="129:27" pos:end="129:39"><name pos:start="129:27" pos:end="129:33">irq_set</name><operator pos:start="129:34" pos:end="129:35">-&gt;</operator><name pos:start="129:36" pos:end="129:39">data</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="133:9" pos:end="141:9"><if pos:start="133:9" pos:end="137:9">if <condition pos:start="133:12" pos:end="133:30">(<expr pos:start="133:13" pos:end="133:29"><name pos:start="133:13" pos:end="133:24"><name pos:start="133:13" pos:end="133:18">vector</name><operator pos:start="133:19" pos:end="133:20">-&gt;</operator><name pos:start="133:21" pos:end="133:24">virq</name></name> <operator pos:start="133:26" pos:end="133:27">&gt;=</operator> <literal type="number" pos:start="133:29" pos:end="133:29">0</literal></expr>)</condition> <block pos:start="133:32" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:65">

            <expr_stmt pos:start="135:13" pos:end="135:65"><expr pos:start="135:13" pos:end="135:64"><operator pos:start="135:13" pos:end="135:13">*</operator><name pos:start="135:14" pos:end="135:16">pfd</name> <operator pos:start="135:18" pos:end="135:18">=</operator> <call pos:start="135:20" pos:end="135:64"><name pos:start="135:20" pos:end="135:40">event_notifier_get_fd</name><argument_list pos:start="135:41" pos:end="135:64">(<argument pos:start="135:42" pos:end="135:63"><expr pos:start="135:42" pos:end="135:63"><operator pos:start="135:42" pos:end="135:42">&amp;</operator><name pos:start="135:43" pos:end="135:63"><name pos:start="135:43" pos:end="135:48">vector</name><operator pos:start="135:49" pos:end="135:50">-&gt;</operator><name pos:start="135:51" pos:end="135:63">kvm_interrupt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="137:11" pos:end="141:9">else <block pos:start="137:16" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:61">

            <expr_stmt pos:start="139:13" pos:end="139:61"><expr pos:start="139:13" pos:end="139:60"><operator pos:start="139:13" pos:end="139:13">*</operator><name pos:start="139:14" pos:end="139:16">pfd</name> <operator pos:start="139:18" pos:end="139:18">=</operator> <call pos:start="139:20" pos:end="139:60"><name pos:start="139:20" pos:end="139:40">event_notifier_get_fd</name><argument_list pos:start="139:41" pos:end="139:60">(<argument pos:start="139:42" pos:end="139:59"><expr pos:start="139:42" pos:end="139:59"><operator pos:start="139:42" pos:end="139:42">&amp;</operator><name pos:start="139:43" pos:end="139:59"><name pos:start="139:43" pos:end="139:48">vector</name><operator pos:start="139:49" pos:end="139:50">-&gt;</operator><name pos:start="139:51" pos:end="139:59">interrupt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:70"><expr pos:start="145:9" pos:end="145:69"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <call pos:start="145:15" pos:end="145:69"><name pos:start="145:15" pos:end="145:19">ioctl</name><argument_list pos:start="145:20" pos:end="145:69">(<argument pos:start="145:21" pos:end="145:37"><expr pos:start="145:21" pos:end="145:37"><name pos:start="145:21" pos:end="145:37"><name pos:start="145:21" pos:end="145:24">vdev</name><operator pos:start="145:25" pos:end="145:26">-&gt;</operator><name pos:start="145:27" pos:end="145:34">vbasedev</name><operator pos:start="145:35" pos:end="145:35">.</operator><name pos:start="145:36" pos:end="145:37">fd</name></name></expr></argument>, <argument pos:start="145:40" pos:end="145:59"><expr pos:start="145:40" pos:end="145:59"><name pos:start="145:40" pos:end="145:59">VFIO_DEVICE_SET_IRQS</name></expr></argument>, <argument pos:start="145:62" pos:end="145:68"><expr pos:start="145:62" pos:end="145:68"><name pos:start="145:62" pos:end="145:68">irq_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:24"><expr pos:start="147:9" pos:end="147:23"><call pos:start="147:9" pos:end="147:23"><name pos:start="147:9" pos:end="147:14">g_free</name><argument_list pos:start="147:15" pos:end="147:23">(<argument pos:start="147:16" pos:end="147:22"><expr pos:start="147:16" pos:end="147:22"><name pos:start="147:16" pos:end="147:22">irq_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="153:9"><if pos:start="149:9" pos:end="153:9">if <condition pos:start="149:12" pos:end="149:16">(<expr pos:start="149:13" pos:end="149:15"><name pos:start="149:13" pos:end="149:15">ret</name></expr>)</condition> <block pos:start="149:18" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:67">

            <expr_stmt pos:start="151:13" pos:end="151:67"><expr pos:start="151:13" pos:end="151:66"><call pos:start="151:13" pos:end="151:66"><name pos:start="151:13" pos:end="151:24">error_report</name><argument_list pos:start="151:25" pos:end="151:66">(<argument pos:start="151:26" pos:end="151:60"><expr pos:start="151:26" pos:end="151:60"><literal type="string" pos:start="151:26" pos:end="151:60">"vfio: failed to modify vector, %d"</literal></expr></argument>, <argument pos:start="151:63" pos:end="151:65"><expr pos:start="151:63" pos:end="151:65"><name pos:start="151:63" pos:end="151:65">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="159:5" pos:end="159:13">return <expr pos:start="159:12" pos:end="159:12"><literal type="number" pos:start="159:12" pos:end="159:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
