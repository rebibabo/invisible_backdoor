<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11607.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:22">PageDesc</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:39">page_find_alloc</name><parameter_list pos:start="1:40" pos:end="1:59">(<parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:52">target_ulong</name></type> <name pos:start="1:54" pos:end="1:58">index</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:39">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:12">PageDesc</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier><modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:17">lp</name></decl>, <decl pos:start="5:20" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:15"><modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">p</name></decl>;</decl_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:28"><expr pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:6">lp</name> <operator pos:start="7:8" pos:end="7:8">=</operator> <call pos:start="7:10" pos:end="7:27"><name pos:start="7:10" pos:end="7:20">page_l1_map</name><argument_list pos:start="7:21" pos:end="7:27">(<argument pos:start="7:22" pos:end="7:26"><expr pos:start="7:22" pos:end="7:26"><name pos:start="7:22" pos:end="7:26">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="9:5" pos:end="11:20"><if pos:start="9:5" pos:end="11:20">if <condition pos:start="9:8" pos:end="9:12">(<expr pos:start="9:9" pos:end="9:11"><operator pos:start="9:9" pos:end="9:9">!</operator><name pos:start="9:10" pos:end="9:11">lp</name></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:20"><block_content pos:start="11:9" pos:end="11:20">

        <return pos:start="11:9" pos:end="11:20">return <expr pos:start="11:16" pos:end="11:19"><name pos:start="11:16" pos:end="11:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:12"><expr pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:5">p</name> <operator pos:start="15:7" pos:end="15:7">=</operator> <operator pos:start="15:9" pos:end="15:9">*</operator><name pos:start="15:10" pos:end="15:11">lp</name></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="55:5"><if pos:start="17:5" pos:end="55:5">if <condition pos:start="17:8" pos:end="17:11">(<expr pos:start="17:9" pos:end="17:10"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:10">p</name></expr>)</condition> <block pos:start="17:13" pos:end="55:5">{<block_content pos:start="23:9" pos:end="54:0">

        <comment type="block" pos:start="19:9" pos:end="19:35">/* allocate if not found */</comment>

<cpp:if pos:start="21:1" pos:end="21:29">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:29"><call pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:11">defined</name><argument_list pos:start="21:12" pos:end="21:29">(<argument pos:start="21:13" pos:end="21:28"><expr pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <decl_stmt pos:start="23:9" pos:end="23:27"><decl pos:start="23:9" pos:end="23:26"><type pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:16">unsigned</name> <name pos:start="23:18" pos:end="23:21">long</name></type> <name pos:start="23:23" pos:end="23:26">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:48"><decl pos:start="25:9" pos:end="25:47"><type pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:14">size_t</name></type> <name pos:start="25:16" pos:end="25:18">len</name> <init pos:start="25:20" pos:end="25:47">= <expr pos:start="25:22" pos:end="25:47"><sizeof pos:start="25:22" pos:end="25:37">sizeof<argument_list pos:start="25:28" pos:end="25:37">(<argument pos:start="25:29" pos:end="25:36"><expr pos:start="25:29" pos:end="25:36"><name pos:start="25:29" pos:end="25:36">PageDesc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="25:39" pos:end="25:39">*</operator> <name pos:start="25:41" pos:end="25:47">L2_SIZE</name></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="27:9" pos:end="27:60">/* Don't use qemu_malloc because it may recurse.  */</comment>

        <expr_stmt pos:start="29:9" pos:end="31:53"><expr pos:start="29:9" pos:end="31:52"><name pos:start="29:9" pos:end="29:9">p</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="31:52"><name pos:start="29:13" pos:end="29:16">mmap</name><argument_list pos:start="29:17" pos:end="31:52">(<argument pos:start="29:18" pos:end="29:18"><expr pos:start="29:18" pos:end="29:18"><literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr></argument>, <argument pos:start="29:21" pos:end="29:23"><expr pos:start="29:21" pos:end="29:23"><name pos:start="29:21" pos:end="29:23">len</name></expr></argument>, <argument pos:start="29:26" pos:end="29:47"><expr pos:start="29:26" pos:end="29:47"><name pos:start="29:26" pos:end="29:34">PROT_READ</name> <operator pos:start="29:36" pos:end="29:36">|</operator> <name pos:start="29:38" pos:end="29:47">PROT_WRITE</name></expr></argument>,

                 <argument pos:start="31:18" pos:end="31:44"><expr pos:start="31:18" pos:end="31:44"><name pos:start="31:18" pos:end="31:28">MAP_PRIVATE</name> <operator pos:start="31:30" pos:end="31:30">|</operator> <name pos:start="31:32" pos:end="31:44">MAP_ANONYMOUS</name></expr></argument>, <argument pos:start="31:47" pos:end="31:48"><expr pos:start="31:47" pos:end="31:48"><operator pos:start="31:47" pos:end="31:47">-</operator><literal type="number" pos:start="31:48" pos:end="31:48">1</literal></expr></argument>, <argument pos:start="31:51" pos:end="31:51"><expr pos:start="31:51" pos:end="31:51"><literal type="number" pos:start="31:51" pos:end="31:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:16"><expr pos:start="33:9" pos:end="33:15"><operator pos:start="33:9" pos:end="33:9">*</operator><name pos:start="33:10" pos:end="33:11">lp</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:15">p</name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:22"><expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:12">addr</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:21"><name pos:start="35:16" pos:end="35:18">h2g</name><argument_list pos:start="35:19" pos:end="35:21">(<argument pos:start="35:20" pos:end="35:20"><expr pos:start="35:20" pos:end="35:20"><name pos:start="35:20" pos:end="35:20">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="48:0"><if pos:start="37:9" pos:end="48:0">if <condition pos:start="37:12" pos:end="37:39">(<expr pos:start="37:13" pos:end="37:38"><name pos:start="37:13" pos:end="37:16">addr</name> <operator pos:start="37:18" pos:end="37:19">==</operator> <operator pos:start="37:21" pos:end="37:21">(</operator><name pos:start="37:22" pos:end="37:33">target_ulong</name><operator pos:start="37:34" pos:end="37:34">)</operator><name pos:start="37:35" pos:end="37:38">addr</name></expr>)</condition> <block pos:start="37:41" pos:end="48:0">{<block_content pos:start="39:13" pos:end="43:42">

            <expr_stmt pos:start="39:13" pos:end="43:42"><expr pos:start="39:13" pos:end="43:41"><call pos:start="39:13" pos:end="43:41"><name pos:start="39:13" pos:end="39:26">page_set_flags</name><argument_list pos:start="39:27" pos:end="43:41">(<argument pos:start="39:28" pos:end="39:50"><expr pos:start="39:28" pos:end="39:50"><name pos:start="39:28" pos:end="39:31">addr</name> <operator pos:start="39:33" pos:end="39:33">&amp;</operator> <name pos:start="39:35" pos:end="39:50">TARGET_PAGE_MASK</name></expr></argument>,

                           <argument pos:start="41:28" pos:end="41:56"><expr pos:start="41:28" pos:end="41:56"><call pos:start="41:28" pos:end="41:56"><name pos:start="41:28" pos:end="41:44">TARGET_PAGE_ALIGN</name><argument_list pos:start="41:45" pos:end="41:56">(<argument pos:start="41:46" pos:end="41:55"><expr pos:start="41:46" pos:end="41:55"><name pos:start="41:46" pos:end="41:49">addr</name> <operator pos:start="41:51" pos:end="41:51">+</operator> <name pos:start="41:53" pos:end="41:55">len</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="43:28" pos:end="43:40"><expr pos:start="43:28" pos:end="43:40"><name pos:start="43:28" pos:end="43:40">PAGE_RESERVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

        </block_content>}</block></if></if_stmt>

<cpp:else pos:start="47:1" pos:end="47:5">#<cpp:directive pos:start="47:2" pos:end="47:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="49:9" pos:end="49:53"><expr pos:start="49:9" pos:end="49:52"><name pos:start="49:9" pos:end="49:9">p</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="49:52"><name pos:start="49:13" pos:end="49:24">qemu_mallocz</name><argument_list pos:start="49:25" pos:end="49:52">(<argument pos:start="49:26" pos:end="49:51"><expr pos:start="49:26" pos:end="49:51"><sizeof pos:start="49:26" pos:end="49:41">sizeof<argument_list pos:start="49:32" pos:end="49:41">(<argument pos:start="49:33" pos:end="49:40"><expr pos:start="49:33" pos:end="49:40"><name pos:start="49:33" pos:end="49:40">PageDesc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="49:43" pos:end="49:43">*</operator> <name pos:start="49:45" pos:end="49:51">L2_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="54:0"><expr pos:start="51:9" pos:end="51:15"><operator pos:start="51:9" pos:end="51:9">*</operator><name pos:start="51:10" pos:end="51:11">lp</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <name pos:start="51:15" pos:end="51:15">p</name></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <return pos:start="57:5" pos:end="57:39">return <expr pos:start="57:12" pos:end="57:38"><name pos:start="57:12" pos:end="57:12">p</name> <operator pos:start="57:14" pos:end="57:14">+</operator> <operator pos:start="57:16" pos:end="57:16">(</operator><name pos:start="57:17" pos:end="57:21">index</name> <operator pos:start="57:23" pos:end="57:23">&amp;</operator> <operator pos:start="57:25" pos:end="57:25">(</operator><name pos:start="57:26" pos:end="57:32">L2_SIZE</name> <operator pos:start="57:34" pos:end="57:34">-</operator> <literal type="number" pos:start="57:36" pos:end="57:36">1</literal><operator pos:start="57:37" pos:end="57:37">)</operator><operator pos:start="57:38" pos:end="57:38">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
