<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26062.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">CharDriverState</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:43">qemu_chr_open_pp_fd</name><parameter_list pos:start="1:44" pos:end="1:65">(<parameter pos:start="1:45" pos:end="1:50"><decl pos:start="1:45" pos:end="1:50"><type pos:start="1:45" pos:end="1:50"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:50">fd</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:57">Error</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier><modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:15">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">CharDriverState</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">ParallelCharDriver</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">drv</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:31">(<expr pos:start="11:9" pos:end="11:30"><call pos:start="11:9" pos:end="11:26"><name pos:start="11:9" pos:end="11:13">ioctl</name><argument_list pos:start="11:14" pos:end="11:26">(<argument pos:start="11:15" pos:end="11:16"><expr pos:start="11:15" pos:end="11:16"><name pos:start="11:15" pos:end="11:16">fd</name></expr></argument>, <argument pos:start="11:19" pos:end="11:25"><expr pos:start="11:19" pos:end="11:25"><name pos:start="11:19" pos:end="11:25">PPCLAIM</name></expr></argument>)</argument_list></call> <operator pos:start="11:28" pos:end="11:28">&lt;</operator> <literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr>)</condition> <block pos:start="11:33" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:20">

        <expr_stmt pos:start="13:9" pos:end="13:61"><expr pos:start="13:9" pos:end="13:60"><call pos:start="13:9" pos:end="13:60"><name pos:start="13:9" pos:end="13:24">error_setg_errno</name><argument_list pos:start="13:25" pos:end="13:60">(<argument pos:start="13:26" pos:end="13:29"><expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">errp</name></expr></argument>, <argument pos:start="13:32" pos:end="13:36"><expr pos:start="13:32" pos:end="13:36"><name pos:start="13:32" pos:end="13:36">errno</name></expr></argument>, <argument pos:start="13:39" pos:end="13:59"><expr pos:start="13:39" pos:end="13:59"><literal type="string" pos:start="13:39" pos:end="13:59">"not a parallel port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:18"><expr pos:start="15:9" pos:end="15:17"><call pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:13">close</name><argument_list pos:start="15:14" pos:end="15:17">(<argument pos:start="15:15" pos:end="15:16"><expr pos:start="15:15" pos:end="15:16"><name pos:start="15:15" pos:end="15:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:40"><expr pos:start="23:5" pos:end="23:39"><name pos:start="23:5" pos:end="23:7">drv</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:39"><name pos:start="23:11" pos:end="23:16">g_new0</name><argument_list pos:start="23:17" pos:end="23:39">(<argument pos:start="23:18" pos:end="23:35"><expr pos:start="23:18" pos:end="23:35"><name pos:start="23:18" pos:end="23:35">ParallelCharDriver</name></expr></argument>, <argument pos:start="23:38" pos:end="23:38"><expr pos:start="23:38" pos:end="23:38"><literal type="number" pos:start="23:38" pos:end="23:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:7">drv</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:11">fd</name></name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:16">fd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:37"><expr pos:start="27:5" pos:end="27:36"><name pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:7">drv</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:13">mode</name></name> <operator pos:start="27:15" pos:end="27:15">=</operator> <name pos:start="27:17" pos:end="27:36">IEEE1284_MODE_COMPAT</name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:27"><expr pos:start="31:5" pos:end="31:26"><name pos:start="31:5" pos:end="31:7">chr</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:26"><name pos:start="31:11" pos:end="31:24">qemu_chr_alloc</name><argument_list pos:start="31:25" pos:end="31:26">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:36"><expr pos:start="33:5" pos:end="33:35"><name pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:7">chr</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:18">chr_write</name></name> <operator pos:start="33:20" pos:end="33:20">=</operator> <name pos:start="33:22" pos:end="33:35">null_chr_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:7">chr</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:18">chr_ioctl</name></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:29">pp_ioctl</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:7">chr</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:18">chr_close</name></name> <operator pos:start="37:20" pos:end="37:20">=</operator> <name pos:start="37:22" pos:end="37:29">pp_close</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:22"><expr pos:start="39:5" pos:end="39:21"><name pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:7">chr</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:15">opaque</name></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:21">drv</name></expr>;</expr_stmt>



    <return pos:start="43:5" pos:end="43:15">return <expr pos:start="43:12" pos:end="43:14"><name pos:start="43:12" pos:end="43:14">chr</name></expr>;</return>

</block_content>}</block></function>
</unit>
