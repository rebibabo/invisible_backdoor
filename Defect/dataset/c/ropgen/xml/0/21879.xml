<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21879.c" pos:tabs="8"><function pos:start="1:1" pos:end="21:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">qemu_paio_submit</name><parameter_list pos:start="1:29" pos:end="1:55">(<parameter pos:start="1:30" pos:end="1:54"><decl pos:start="1:30" pos:end="1:54"><type pos:start="1:30" pos:end="1:54"><name pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:35">struct</name> <name pos:start="1:37" pos:end="1:47">qemu_paiocb</name></name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">aiocb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="21:1">{<block_content pos:start="5:5" pos:end="19:23">

    <expr_stmt pos:start="5:5" pos:end="5:30"><expr pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:9">aiocb</name><operator pos:start="5:10" pos:end="5:11">-&gt;</operator><name pos:start="5:12" pos:end="5:14">ret</name></name> <operator pos:start="5:16" pos:end="5:16">=</operator> <operator pos:start="5:18" pos:end="5:18">-</operator><name pos:start="5:19" pos:end="5:29">EINPROGRESS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:22"><expr pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:9">aiocb</name><operator pos:start="7:10" pos:end="7:11">-&gt;</operator><name pos:start="7:12" pos:end="7:17">active</name></name> <operator pos:start="7:19" pos:end="7:19">=</operator> <literal type="number" pos:start="7:21" pos:end="7:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:22"><expr pos:start="9:5" pos:end="9:21"><call pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:14">mutex_lock</name><argument_list pos:start="9:15" pos:end="9:21">(<argument pos:start="9:16" pos:end="9:20"><expr pos:start="9:16" pos:end="9:20"><operator pos:start="9:16" pos:end="9:16">&amp;</operator><name pos:start="9:17" pos:end="9:20">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="13:23"><if pos:start="11:5" pos:end="13:23">if <condition pos:start="11:8" pos:end="11:55">(<expr pos:start="11:9" pos:end="11:54"><name pos:start="11:9" pos:end="11:20">idle_threads</name> <operator pos:start="11:22" pos:end="11:23">==</operator> <literal type="number" pos:start="11:25" pos:end="11:25">0</literal> <operator pos:start="11:27" pos:end="11:28">&amp;&amp;</operator> <name pos:start="11:30" pos:end="11:40">cur_threads</name> <operator pos:start="11:42" pos:end="11:42">&lt;</operator> <name pos:start="11:44" pos:end="11:54">max_threads</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:23"><block_content pos:start="13:9" pos:end="13:23">

        <expr_stmt pos:start="13:9" pos:end="13:23"><expr pos:start="13:9" pos:end="13:22"><call pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:20">spawn_thread</name><argument_list pos:start="13:21" pos:end="13:22">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:50"><expr pos:start="15:5" pos:end="15:49"><call pos:start="15:5" pos:end="15:49"><name pos:start="15:5" pos:end="15:21">TAILQ_INSERT_TAIL</name><argument_list pos:start="15:22" pos:end="15:49">(<argument pos:start="15:23" pos:end="15:35"><expr pos:start="15:23" pos:end="15:35"><operator pos:start="15:23" pos:end="15:23">&amp;</operator><name pos:start="15:24" pos:end="15:35">request_list</name></expr></argument>, <argument pos:start="15:38" pos:end="15:42"><expr pos:start="15:38" pos:end="15:42"><name pos:start="15:38" pos:end="15:42">aiocb</name></expr></argument>, <argument pos:start="15:45" pos:end="15:48"><expr pos:start="15:45" pos:end="15:48"><name pos:start="15:45" pos:end="15:48">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:24"><expr pos:start="17:5" pos:end="17:23"><call pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:16">mutex_unlock</name><argument_list pos:start="17:17" pos:end="17:23">(<argument pos:start="17:18" pos:end="17:22"><expr pos:start="17:18" pos:end="17:22"><operator pos:start="17:18" pos:end="17:18">&amp;</operator><name pos:start="17:19" pos:end="17:22">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><call pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:15">cond_signal</name><argument_list pos:start="19:16" pos:end="19:22">(<argument pos:start="19:17" pos:end="19:21"><expr pos:start="19:17" pos:end="19:21"><operator pos:start="19:17" pos:end="19:17">&amp;</operator><name pos:start="19:18" pos:end="19:21">cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
