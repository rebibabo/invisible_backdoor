<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17872.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">amr_nb_decode_frame</name><parameter_list pos:start="1:31" pos:end="5:40">(<parameter pos:start="1:32" pos:end="1:53"><decl pos:start="1:32" pos:end="1:53"><type pos:start="1:32" pos:end="1:53"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type> <name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>,

            <parameter pos:start="3:13" pos:end="3:22"><decl pos:start="3:13" pos:end="3:22"><type pos:start="3:13" pos:end="3:22"><name pos:start="3:13" pos:end="3:16">void</name> <modifier pos:start="3:18" pos:end="3:18">*</modifier></type><name pos:start="3:19" pos:end="3:22">data</name></decl></parameter>, <parameter pos:start="3:25" pos:end="3:38"><decl pos:start="3:25" pos:end="3:38"><type pos:start="3:25" pos:end="3:38"><name pos:start="3:25" pos:end="3:27">int</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:38">data_size</name></decl></parameter>,

            <parameter pos:start="5:13" pos:end="5:25"><decl pos:start="5:13" pos:end="5:25"><type pos:start="5:13" pos:end="5:25"><name pos:start="5:13" pos:end="5:19">uint8_t</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type> <name pos:start="5:23" pos:end="5:25">buf</name></decl></parameter>, <parameter pos:start="5:28" pos:end="5:39"><decl pos:start="5:28" pos:end="5:39"><type pos:start="5:28" pos:end="5:39"><name pos:start="5:28" pos:end="5:30">int</name></type> <name pos:start="5:32" pos:end="5:39">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="173:1">{<block_content pos:start="9:5" pos:end="171:18">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">AMRContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">s</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:25">avctx</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:11">uint8_t</name><modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:19">amrData</name><init pos:start="11:20" pos:end="11:23">=<expr pos:start="11:21" pos:end="11:23"><name pos:start="11:21" pos:end="11:23">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">offset</name><init pos:start="13:15" pos:end="13:16">=<expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">UWord8</name></type> <name pos:start="15:12" pos:end="15:14">toc</name></decl>, <decl pos:start="15:17" pos:end="15:17"><type ref="prev" pos:start="15:5" pos:end="15:10"/><name pos:start="15:17" pos:end="15:17">q</name></decl>, <decl pos:start="15:20" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:10"/><name pos:start="15:20" pos:end="15:21">ft</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">Word16</name></type> <name pos:start="17:12" pos:end="17:35"><name pos:start="17:12" pos:end="17:17">serial</name><index pos:start="17:18" pos:end="17:35">[<expr pos:start="17:19" pos:end="17:34"><name pos:start="17:19" pos:end="17:34">SERIAL_FRAMESIZE</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="block" pos:start="17:40" pos:end="17:55">/* coded bits */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">Word16</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:17">synth</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:10">UWord8</name> <modifier pos:start="21:12" pos:end="21:12">*</modifier></type><name pos:start="21:13" pos:end="21:23">packed_bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:93"><decl pos:start="23:5" pos:end="23:92"><type pos:start="23:5" pos:end="23:17"><specifier pos:start="23:5" pos:end="23:10">static</specifier> <name pos:start="23:12" pos:end="23:17">Word16</name></type> <name pos:start="23:19" pos:end="23:33"><name pos:start="23:19" pos:end="23:29">packed_size</name><index pos:start="23:30" pos:end="23:33">[<expr pos:start="23:31" pos:end="23:32"><literal type="number" pos:start="23:31" pos:end="23:32">16</literal></expr>]</index></name> <init pos:start="23:35" pos:end="23:92">= <expr pos:start="23:37" pos:end="23:92"><block pos:start="23:37" pos:end="23:92">{<expr pos:start="23:38" pos:end="23:39"><literal type="number" pos:start="23:38" pos:end="23:39">12</literal></expr>, <expr pos:start="23:42" pos:end="23:43"><literal type="number" pos:start="23:42" pos:end="23:43">13</literal></expr>, <expr pos:start="23:46" pos:end="23:47"><literal type="number" pos:start="23:46" pos:end="23:47">15</literal></expr>, <expr pos:start="23:50" pos:end="23:51"><literal type="number" pos:start="23:50" pos:end="23:51">17</literal></expr>, <expr pos:start="23:54" pos:end="23:55"><literal type="number" pos:start="23:54" pos:end="23:55">19</literal></expr>, <expr pos:start="23:58" pos:end="23:59"><literal type="number" pos:start="23:58" pos:end="23:59">20</literal></expr>, <expr pos:start="23:62" pos:end="23:63"><literal type="number" pos:start="23:62" pos:end="23:63">26</literal></expr>, <expr pos:start="23:66" pos:end="23:67"><literal type="number" pos:start="23:66" pos:end="23:67">31</literal></expr>, <expr pos:start="23:70" pos:end="23:70"><literal type="number" pos:start="23:70" pos:end="23:70">5</literal></expr>, <expr pos:start="23:73" pos:end="23:73"><literal type="number" pos:start="23:73" pos:end="23:73">0</literal></expr>, <expr pos:start="23:76" pos:end="23:76"><literal type="number" pos:start="23:76" pos:end="23:76">0</literal></expr>, <expr pos:start="23:79" pos:end="23:79"><literal type="number" pos:start="23:79" pos:end="23:79">0</literal></expr>, <expr pos:start="23:82" pos:end="23:82"><literal type="number" pos:start="23:82" pos:end="23:82">0</literal></expr>, <expr pos:start="23:85" pos:end="23:85"><literal type="number" pos:start="23:85" pos:end="23:85">0</literal></expr>, <expr pos:start="23:88" pos:end="23:88"><literal type="number" pos:start="23:88" pos:end="23:88">0</literal></expr>, <expr pos:start="23:91" pos:end="23:91"><literal type="number" pos:start="23:91" pos:end="23:91">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>



    <comment type="line" pos:start="29:5" pos:end="29:123">//printf("amr_decode_frame data_size=%i buf=0x%X buf_size=%d frameCount=%d!!\n",*data_size,buf,buf_size,s-&gt;frameCount);</comment>



    <expr_stmt pos:start="33:5" pos:end="33:15"><expr pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:9">synth</name><operator pos:start="33:10" pos:end="33:10">=</operator><name pos:start="33:11" pos:end="33:14">data</name></expr>;</expr_stmt>



<comment type="line" pos:start="37:1" pos:end="37:28">//    while(offset&lt;buf_size)</comment>

    <block pos:start="39:5" pos:end="169:5">{<block_content pos:start="41:9" pos:end="165:42">

        <expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:11">toc</name><operator pos:start="41:12" pos:end="41:12">=</operator><name pos:start="41:13" pos:end="41:27"><name pos:start="41:13" pos:end="41:19">amrData</name><index pos:start="41:20" pos:end="41:27">[<expr pos:start="41:21" pos:end="41:26"><name pos:start="41:21" pos:end="41:26">offset</name></expr>]</index></name></expr>;</expr_stmt>

        <comment type="block" pos:start="43:9" pos:end="43:54">/* read rest of the frame based on ToC byte */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:31"><expr pos:start="45:9" pos:end="45:30"><name pos:start="45:9" pos:end="45:9">q</name>  <operator pos:start="45:12" pos:end="45:12">=</operator> <operator pos:start="45:14" pos:end="45:14">(</operator><name pos:start="45:15" pos:end="45:17">toc</name> <operator pos:start="45:19" pos:end="45:20">&gt;&gt;</operator> <literal type="number" pos:start="45:22" pos:end="45:22">2</literal><operator pos:start="45:23" pos:end="45:23">)</operator> <operator pos:start="45:25" pos:end="45:25">&amp;</operator> <literal type="number" pos:start="45:27" pos:end="45:30">0x01</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:31"><expr pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:10">ft</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <operator pos:start="47:14" pos:end="47:14">(</operator><name pos:start="47:15" pos:end="47:17">toc</name> <operator pos:start="47:19" pos:end="47:20">&gt;&gt;</operator> <literal type="number" pos:start="47:22" pos:end="47:22">3</literal><operator pos:start="47:23" pos:end="47:23">)</operator> <operator pos:start="47:25" pos:end="47:25">&amp;</operator> <literal type="number" pos:start="47:27" pos:end="47:30">0x0F</literal></expr>;</expr_stmt>



        <comment type="line" pos:start="51:9" pos:end="51:164">//printf("offset=%d, packet_size=%d amrData= 0x%X %X %X %X\n",offset,packed_size[ft],amrData[offset],amrData[offset+1],amrData[offset+2],amrData[offset+3]);</comment>



        <expr_stmt pos:start="55:9" pos:end="55:17"><expr pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:14">offset</name><operator pos:start="55:15" pos:end="55:16">++</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:35"><expr pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:19">packed_bits</name><operator pos:start="59:20" pos:end="59:20">=</operator><name pos:start="59:21" pos:end="59:27">amrData</name><operator pos:start="59:28" pos:end="59:28">+</operator><name pos:start="59:29" pos:end="59:34">offset</name></expr>;</expr_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:14">offset</name><operator pos:start="63:15" pos:end="63:16">+=</operator><name pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:27">packed_size</name><index pos:start="63:28" pos:end="63:31">[<expr pos:start="63:29" pos:end="63:30"><name pos:start="63:29" pos:end="63:30">ft</name></expr>]</index></name></expr>;</expr_stmt>



        <comment type="line" pos:start="67:9" pos:end="67:32">//Unsort and unpack bits</comment>

        <expr_stmt pos:start="69:9" pos:end="69:74"><expr pos:start="69:9" pos:end="69:73"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:18">rx_type</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <call pos:start="69:22" pos:end="69:73"><name pos:start="69:22" pos:end="69:31">UnpackBits</name><argument_list pos:start="69:32" pos:end="69:73">(<argument pos:start="69:33" pos:end="69:33"><expr pos:start="69:33" pos:end="69:33"><name pos:start="69:33" pos:end="69:33">q</name></expr></argument>, <argument pos:start="69:36" pos:end="69:37"><expr pos:start="69:36" pos:end="69:37"><name pos:start="69:36" pos:end="69:37">ft</name></expr></argument>, <argument pos:start="69:40" pos:end="69:50"><expr pos:start="69:40" pos:end="69:50"><name pos:start="69:40" pos:end="69:50">packed_bits</name></expr></argument>, <argument pos:start="69:53" pos:end="69:60"><expr pos:start="69:53" pos:end="69:60"><operator pos:start="69:53" pos:end="69:53">&amp;</operator><name pos:start="69:54" pos:end="69:60"><name pos:start="69:54" pos:end="69:54">s</name><operator pos:start="69:55" pos:end="69:56">-&gt;</operator><name pos:start="69:57" pos:end="69:60">mode</name></name></expr></argument>, <argument pos:start="69:63" pos:end="69:72"><expr pos:start="69:63" pos:end="69:72"><operator pos:start="69:63" pos:end="69:63">&amp;</operator><name pos:start="69:64" pos:end="69:72"><name pos:start="69:64" pos:end="69:69">serial</name><index pos:start="69:70" pos:end="69:72">[<expr pos:start="69:71" pos:end="69:71"><literal type="number" pos:start="69:71" pos:end="69:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="73:9" pos:end="73:29">//We have a new frame</comment>

        <expr_stmt pos:start="75:9" pos:end="75:24"><expr pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:21">frameCount</name></name><operator pos:start="75:22" pos:end="75:23">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="79:9" pos:end="91:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:37">(<expr pos:start="79:13" pos:end="79:36"><name pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:22">rx_type</name></name> <operator pos:start="79:24" pos:end="79:25">==</operator> <name pos:start="79:27" pos:end="79:36">RX_NO_DATA</name></expr>)</condition>

        <block pos:start="81:9" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:57">

            <expr_stmt pos:start="83:13" pos:end="83:57"><expr pos:start="83:13" pos:end="83:56"><name pos:start="83:13" pos:end="83:19"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:19">mode</name></name> <operator pos:start="83:21" pos:end="83:21">=</operator> <name pos:start="83:23" pos:end="83:56"><name pos:start="83:23" pos:end="83:23">s</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:45">speech_decoder_state</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:56">prev_mode</name></name></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="87:9" pos:end="91:9">else <block pos:start="87:14" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:57">

            <expr_stmt pos:start="89:13" pos:end="89:57"><expr pos:start="89:13" pos:end="89:56"><name pos:start="89:13" pos:end="89:46"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:35">speech_decoder_state</name><operator pos:start="89:36" pos:end="89:37">-&gt;</operator><name pos:start="89:38" pos:end="89:46">prev_mode</name></name> <operator pos:start="89:48" pos:end="89:48">=</operator> <name pos:start="89:50" pos:end="89:56"><name pos:start="89:50" pos:end="89:50">s</name><operator pos:start="89:51" pos:end="89:52">-&gt;</operator><name pos:start="89:53" pos:end="89:56">mode</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="95:9" pos:end="95:67">/* if homed: check if this frame is another homing frame */</comment>

        <if_stmt pos:start="97:9" pos:end="105:9"><if pos:start="97:9" pos:end="105:9">if <condition pos:start="97:12" pos:end="97:35">(<expr pos:start="97:13" pos:end="97:34"><name pos:start="97:13" pos:end="97:29"><name pos:start="97:13" pos:end="97:13">s</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:29">reset_flag_old</name></name> <operator pos:start="97:31" pos:end="97:32">==</operator> <literal type="number" pos:start="97:34" pos:end="97:34">1</literal></expr>)</condition>

        <block pos:start="99:9" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:81">

            <comment type="block" pos:start="101:13" pos:end="101:56">/* only check until end of first subframe */</comment>

            <expr_stmt pos:start="103:13" pos:end="103:81"><expr pos:start="103:13" pos:end="103:80"><name pos:start="103:13" pos:end="103:25"><name pos:start="103:13" pos:end="103:13">s</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:25">reset_flag</name></name> <operator pos:start="103:27" pos:end="103:27">=</operator> <call pos:start="103:29" pos:end="103:80"><name pos:start="103:29" pos:end="103:59">decoder_homing_frame_test_first</name><argument_list pos:start="103:60" pos:end="103:80">(<argument pos:start="103:61" pos:end="103:70"><expr pos:start="103:61" pos:end="103:70"><operator pos:start="103:61" pos:end="103:61">&amp;</operator><name pos:start="103:62" pos:end="103:70"><name pos:start="103:62" pos:end="103:67">serial</name><index pos:start="103:68" pos:end="103:70">[<expr pos:start="103:69" pos:end="103:69"><literal type="number" pos:start="103:69" pos:end="103:69">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="103:73" pos:end="103:79"><expr pos:start="103:73" pos:end="103:79"><name pos:start="103:73" pos:end="103:79"><name pos:start="103:73" pos:end="103:73">s</name><operator pos:start="103:74" pos:end="103:75">-&gt;</operator><name pos:start="103:76" pos:end="103:79">mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="107:9" pos:end="107:80">/* produce encoder homing frame if homed &amp; input=decoder homing frame */</comment>

        <if_stmt pos:start="109:9" pos:end="131:9"><if pos:start="109:9" pos:end="121:9">if <condition pos:start="109:12" pos:end="109:61">(<expr pos:start="109:13" pos:end="109:60"><operator pos:start="109:13" pos:end="109:13">(</operator><name pos:start="109:14" pos:end="109:26"><name pos:start="109:14" pos:end="109:14">s</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:26">reset_flag</name></name> <operator pos:start="109:28" pos:end="109:29">!=</operator> <literal type="number" pos:start="109:31" pos:end="109:31">0</literal><operator pos:start="109:32" pos:end="109:32">)</operator> <operator pos:start="109:34" pos:end="109:35">&amp;&amp;</operator> <operator pos:start="109:37" pos:end="109:37">(</operator><name pos:start="109:38" pos:end="109:54"><name pos:start="109:38" pos:end="109:38">s</name><operator pos:start="109:39" pos:end="109:40">-&gt;</operator><name pos:start="109:41" pos:end="109:54">reset_flag_old</name></name> <operator pos:start="109:56" pos:end="109:57">!=</operator> <literal type="number" pos:start="109:59" pos:end="109:59">0</literal><operator pos:start="109:60" pos:end="109:60">)</operator></expr>)</condition>

        <block pos:start="111:9" pos:end="121:9">{<block_content pos:start="113:13" pos:end="119:13">

            <for pos:start="113:13" pos:end="119:13">for <control pos:start="113:17" pos:end="113:41">(<init pos:start="113:18" pos:end="113:23"><expr pos:start="113:18" pos:end="113:22"><name pos:start="113:18" pos:end="113:18">i</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <literal type="number" pos:start="113:22" pos:end="113:22">0</literal></expr>;</init> <condition pos:start="113:25" pos:end="113:36"><expr pos:start="113:25" pos:end="113:35"><name pos:start="113:25" pos:end="113:25">i</name> <operator pos:start="113:27" pos:end="113:27">&lt;</operator> <name pos:start="113:29" pos:end="113:35">L_FRAME</name></expr>;</condition> <incr pos:start="113:38" pos:end="113:40"><expr pos:start="113:38" pos:end="113:40"><name pos:start="113:38" pos:end="113:38">i</name><operator pos:start="113:39" pos:end="113:40">++</operator></expr></incr>)</control>

            <block pos:start="115:13" pos:end="119:13">{<block_content pos:start="117:17" pos:end="117:36">

                <expr_stmt pos:start="117:17" pos:end="117:36"><expr pos:start="117:17" pos:end="117:35"><name pos:start="117:17" pos:end="117:24"><name pos:start="117:17" pos:end="117:21">synth</name><index pos:start="117:22" pos:end="117:24">[<expr pos:start="117:23" pos:end="117:23"><name pos:start="117:23" pos:end="117:23">i</name></expr>]</index></name> <operator pos:start="117:26" pos:end="117:26">=</operator> <name pos:start="117:28" pos:end="117:35">EHF_MASK</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if>

        <else pos:start="123:9" pos:end="131:9">else

        <block pos:start="125:9" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:97">

            <comment type="block" pos:start="127:13" pos:end="127:30">/* decode frame */</comment>

            <expr_stmt pos:start="129:13" pos:end="129:97"><expr pos:start="129:13" pos:end="129:96"><call pos:start="129:13" pos:end="129:96"><name pos:start="129:13" pos:end="129:31">Speech_Decode_Frame</name><argument_list pos:start="129:32" pos:end="129:96">(<argument pos:start="129:33" pos:end="129:55"><expr pos:start="129:33" pos:end="129:55"><name pos:start="129:33" pos:end="129:55"><name pos:start="129:33" pos:end="129:33">s</name><operator pos:start="129:34" pos:end="129:35">-&gt;</operator><name pos:start="129:36" pos:end="129:55">speech_decoder_state</name></name></expr></argument>, <argument pos:start="129:58" pos:end="129:64"><expr pos:start="129:58" pos:end="129:64"><name pos:start="129:58" pos:end="129:64"><name pos:start="129:58" pos:end="129:58">s</name><operator pos:start="129:59" pos:end="129:60">-&gt;</operator><name pos:start="129:61" pos:end="129:64">mode</name></name></expr></argument>, <argument pos:start="129:67" pos:end="129:76"><expr pos:start="129:67" pos:end="129:76"><operator pos:start="129:67" pos:end="129:67">&amp;</operator><name pos:start="129:68" pos:end="129:76"><name pos:start="129:68" pos:end="129:73">serial</name><index pos:start="129:74" pos:end="129:76">[<expr pos:start="129:75" pos:end="129:75"><literal type="number" pos:start="129:75" pos:end="129:75">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="129:79" pos:end="129:88"><expr pos:start="129:79" pos:end="129:88"><name pos:start="129:79" pos:end="129:88"><name pos:start="129:79" pos:end="129:79">s</name><operator pos:start="129:80" pos:end="129:81">-&gt;</operator><name pos:start="129:82" pos:end="129:88">rx_type</name></name></expr></argument>, <argument pos:start="129:91" pos:end="129:95"><expr pos:start="129:91" pos:end="129:95"><name pos:start="129:91" pos:end="129:95">synth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="line" pos:start="135:9" pos:end="135:54">//Each AMR-frame results in 160 16-bit samples</comment>

        <expr_stmt pos:start="137:9" pos:end="137:26"><expr pos:start="137:9" pos:end="137:25"><operator pos:start="137:9" pos:end="137:9">*</operator><name pos:start="137:10" pos:end="137:18">data_size</name><operator pos:start="137:19" pos:end="137:20">+=</operator><literal type="number" pos:start="137:21" pos:end="137:23">160</literal><operator pos:start="137:24" pos:end="137:24">*</operator><literal type="number" pos:start="137:25" pos:end="137:25">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:19"><expr pos:start="139:9" pos:end="139:18"><name pos:start="139:9" pos:end="139:13">synth</name><operator pos:start="139:14" pos:end="139:15">+=</operator><literal type="number" pos:start="139:16" pos:end="139:18">160</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="143:9" pos:end="143:73">/* if not homed: check whether current frame is a homing frame */</comment>

        <if_stmt pos:start="145:9" pos:end="153:9"><if pos:start="145:9" pos:end="153:9">if <condition pos:start="145:12" pos:end="145:35">(<expr pos:start="145:13" pos:end="145:34"><name pos:start="145:13" pos:end="145:29"><name pos:start="145:13" pos:end="145:13">s</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:29">reset_flag_old</name></name> <operator pos:start="145:31" pos:end="145:32">==</operator> <literal type="number" pos:start="145:34" pos:end="145:34">0</literal></expr>)</condition>

        <block pos:start="147:9" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:75">

            <comment type="block" pos:start="149:13" pos:end="149:35">/* check whole frame */</comment>

            <expr_stmt pos:start="151:13" pos:end="151:75"><expr pos:start="151:13" pos:end="151:74"><name pos:start="151:13" pos:end="151:25"><name pos:start="151:13" pos:end="151:13">s</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:25">reset_flag</name></name> <operator pos:start="151:27" pos:end="151:27">=</operator> <call pos:start="151:29" pos:end="151:74"><name pos:start="151:29" pos:end="151:53">decoder_homing_frame_test</name><argument_list pos:start="151:54" pos:end="151:74">(<argument pos:start="151:55" pos:end="151:64"><expr pos:start="151:55" pos:end="151:64"><operator pos:start="151:55" pos:end="151:55">&amp;</operator><name pos:start="151:56" pos:end="151:64"><name pos:start="151:56" pos:end="151:61">serial</name><index pos:start="151:62" pos:end="151:64">[<expr pos:start="151:63" pos:end="151:63"><literal type="number" pos:start="151:63" pos:end="151:63">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="151:67" pos:end="151:73"><expr pos:start="151:67" pos:end="151:73"><name pos:start="151:67" pos:end="151:73"><name pos:start="151:67" pos:end="151:67">s</name><operator pos:start="151:68" pos:end="151:69">-&gt;</operator><name pos:start="151:70" pos:end="151:73">mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="155:9" pos:end="155:62">/* reset decoder if current frame is a homing frame */</comment>

        <if_stmt pos:start="157:9" pos:end="163:9"><if pos:start="157:9" pos:end="163:9">if <condition pos:start="157:12" pos:end="157:31">(<expr pos:start="157:13" pos:end="157:30"><name pos:start="157:13" pos:end="157:25"><name pos:start="157:13" pos:end="157:13">s</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:25">reset_flag</name></name> <operator pos:start="157:27" pos:end="157:28">!=</operator> <literal type="number" pos:start="157:30" pos:end="157:30">0</literal></expr>)</condition>

        <block pos:start="159:9" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:63">

            <expr_stmt pos:start="161:13" pos:end="161:63"><expr pos:start="161:13" pos:end="161:62"><call pos:start="161:13" pos:end="161:62"><name pos:start="161:13" pos:end="161:37">Speech_Decode_Frame_reset</name><argument_list pos:start="161:38" pos:end="161:62">(<argument pos:start="161:39" pos:end="161:61"><expr pos:start="161:39" pos:end="161:61"><name pos:start="161:39" pos:end="161:61"><name pos:start="161:39" pos:end="161:39">s</name><operator pos:start="161:40" pos:end="161:41">-&gt;</operator><name pos:start="161:42" pos:end="161:61">speech_decoder_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:42"><expr pos:start="165:9" pos:end="165:41"><name pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:25">reset_flag_old</name></name> <operator pos:start="165:27" pos:end="165:27">=</operator> <name pos:start="165:29" pos:end="165:41"><name pos:start="165:29" pos:end="165:29">s</name><operator pos:start="165:30" pos:end="165:31">-&gt;</operator><name pos:start="165:32" pos:end="165:41">reset_flag</name></name></expr>;</expr_stmt>



    </block_content>}</block>

    <return pos:start="171:5" pos:end="171:18">return <expr pos:start="171:12" pos:end="171:17"><name pos:start="171:12" pos:end="171:17">offset</name></expr>;</return>

</block_content>}</block></function>
</unit>
