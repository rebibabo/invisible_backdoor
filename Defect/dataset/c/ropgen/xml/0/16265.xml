<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16265.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:69"><name pos:start="1:1" pos:end="1:11">sdhci_write</name><argument_list pos:start="1:12" pos:end="1:69">(<argument pos:start="1:13" pos:end="1:24">void *opaque</argument>, <argument pos:start="1:27" pos:end="1:39">hwaddr offset</argument>, <argument pos:start="1:42" pos:end="1:53">uint64_t val</argument>, <argument pos:start="1:56" pos:end="1:68">unsigned size</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="297:1">{<block_content pos:start="5:5" pos:end="295:65">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">SDHCIState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:40">= <expr pos:start="5:21" pos:end="5:40"><operator pos:start="5:21" pos:end="5:21">(</operator><name pos:start="5:22" pos:end="5:31">SDHCIState</name> <operator pos:start="5:33" pos:end="5:33">*</operator><operator pos:start="5:34" pos:end="5:34">)</operator><name pos:start="5:35" pos:end="5:40">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type> <name pos:start="7:14" pos:end="7:18">shift</name> <init pos:start="7:20" pos:end="7:40">=  <expr pos:start="7:23" pos:end="7:40"><literal type="number" pos:start="7:23" pos:end="7:23">8</literal> <operator pos:start="7:25" pos:end="7:25">*</operator> <operator pos:start="7:27" pos:end="7:27">(</operator><name pos:start="7:28" pos:end="7:33">offset</name> <operator pos:start="7:35" pos:end="7:35">&amp;</operator> <literal type="number" pos:start="7:37" pos:end="7:39">0x3</literal><operator pos:start="7:40" pos:end="7:40">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">mask</name> <init pos:start="9:19" pos:end="9:58">= <expr pos:start="9:21" pos:end="9:58"><operator pos:start="9:21" pos:end="9:21">~</operator><operator pos:start="9:22" pos:end="9:22">(</operator><operator pos:start="9:23" pos:end="9:23">(</operator><operator pos:start="9:24" pos:end="9:24">(</operator><literal type="number" pos:start="9:25" pos:end="9:28">1ULL</literal> <operator pos:start="9:30" pos:end="9:31">&lt;&lt;</operator> <operator pos:start="9:33" pos:end="9:33">(</operator><name pos:start="9:34" pos:end="9:37">size</name> <operator pos:start="9:39" pos:end="9:39">*</operator> <literal type="number" pos:start="9:41" pos:end="9:41">8</literal><operator pos:start="9:42" pos:end="9:42">)</operator><operator pos:start="9:43" pos:end="9:43">)</operator> <operator pos:start="9:45" pos:end="9:45">-</operator> <literal type="number" pos:start="9:47" pos:end="9:47">1</literal><operator pos:start="9:48" pos:end="9:48">)</operator> <operator pos:start="9:50" pos:end="9:51">&lt;&lt;</operator> <name pos:start="9:53" pos:end="9:57">shift</name><operator pos:start="9:58" pos:end="9:58">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">value</name> <init pos:start="11:20" pos:end="11:24">= <expr pos:start="11:22" pos:end="11:24"><name pos:start="11:22" pos:end="11:24">val</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:20"><expr pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:9">value</name> <operator pos:start="13:11" pos:end="13:13">&lt;&lt;=</operator> <name pos:start="13:15" pos:end="13:19">shift</name></expr>;</expr_stmt>



    <switch pos:start="17:5" pos:end="291:5">switch <condition pos:start="17:12" pos:end="17:26">(<expr pos:start="17:13" pos:end="17:25"><name pos:start="17:13" pos:end="17:18">offset</name> <operator pos:start="17:20" pos:end="17:20">&amp;</operator> <operator pos:start="17:22" pos:end="17:22">~</operator><literal type="number" pos:start="17:23" pos:end="17:25">0x3</literal></expr>)</condition> <block pos:start="17:28" pos:end="291:5">{<block_content pos:start="19:5" pos:end="289:14">

    <case pos:start="19:5" pos:end="19:20">case <expr pos:start="19:10" pos:end="19:19"><name pos:start="19:10" pos:end="19:19">SDHC_SYSAD</name></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="21:53"><expr pos:start="21:9" pos:end="21:52"><name pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:20">sdmasysad</name></name> <operator pos:start="21:22" pos:end="21:22">=</operator> <operator pos:start="21:24" pos:end="21:24">(</operator><name pos:start="21:25" pos:end="21:36"><name pos:start="21:25" pos:end="21:25">s</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:36">sdmasysad</name></name> <operator pos:start="21:38" pos:end="21:38">&amp;</operator> <name pos:start="21:40" pos:end="21:43">mask</name><operator pos:start="21:44" pos:end="21:44">)</operator> <operator pos:start="21:46" pos:end="21:46">|</operator> <name pos:start="21:48" pos:end="21:52">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:48"><expr pos:start="23:9" pos:end="23:47"><call pos:start="23:9" pos:end="23:47"><name pos:start="23:9" pos:end="23:20">MASKED_WRITE</name><argument_list pos:start="23:21" pos:end="23:47">(<argument pos:start="23:22" pos:end="23:33"><expr pos:start="23:22" pos:end="23:33"><name pos:start="23:22" pos:end="23:33"><name pos:start="23:22" pos:end="23:22">s</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:33">sdmasysad</name></name></expr></argument>, <argument pos:start="23:36" pos:end="23:39"><expr pos:start="23:36" pos:end="23:39"><name pos:start="23:36" pos:end="23:39">mask</name></expr></argument>, <argument pos:start="23:42" pos:end="23:46"><expr pos:start="23:42" pos:end="23:46"><name pos:start="23:42" pos:end="23:46">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="25:9" pos:end="25:70">/* Writing to last byte of sdmasysad might trigger transfer */</comment>

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="29:74">(<expr pos:start="27:13" pos:end="29:73"><operator pos:start="27:13" pos:end="27:13">!</operator><operator pos:start="27:14" pos:end="27:14">(</operator><name pos:start="27:15" pos:end="27:18">mask</name> <operator pos:start="27:20" pos:end="27:20">&amp;</operator> <literal type="number" pos:start="27:22" pos:end="27:31">0xFF000000</literal><operator pos:start="27:32" pos:end="27:32">)</operator> <operator pos:start="27:34" pos:end="27:35">&amp;&amp;</operator> <call pos:start="27:37" pos:end="27:64"><name pos:start="27:37" pos:end="27:53">TRANSFERRING_DATA</name><argument_list pos:start="27:54" pos:end="27:64">(<argument pos:start="27:55" pos:end="27:63"><expr pos:start="27:55" pos:end="27:63"><name pos:start="27:55" pos:end="27:63"><name pos:start="27:55" pos:end="27:55">s</name><operator pos:start="27:56" pos:end="27:57">-&gt;</operator><name pos:start="27:58" pos:end="27:63">prnsts</name></name></expr></argument>)</argument_list></call> <operator pos:start="27:66" pos:end="27:67">&amp;&amp;</operator> <name pos:start="27:69" pos:end="27:77"><name pos:start="27:69" pos:end="27:69">s</name><operator pos:start="27:70" pos:end="27:71">-&gt;</operator><name pos:start="27:72" pos:end="27:77">blkcnt</name></name> <operator pos:start="27:79" pos:end="27:80">&amp;&amp;</operator>

                <name pos:start="29:17" pos:end="29:26"><name pos:start="29:17" pos:end="29:17">s</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:26">blksize</name></name> <operator pos:start="29:28" pos:end="29:29">&amp;&amp;</operator> <call pos:start="29:31" pos:end="29:55"><name pos:start="29:31" pos:end="29:43">SDHC_DMA_TYPE</name><argument_list pos:start="29:44" pos:end="29:55">(<argument pos:start="29:45" pos:end="29:54"><expr pos:start="29:45" pos:end="29:54"><name pos:start="29:45" pos:end="29:54"><name pos:start="29:45" pos:end="29:45">s</name><operator pos:start="29:46" pos:end="29:47">-&gt;</operator><name pos:start="29:48" pos:end="29:54">hostctl</name></name></expr></argument>)</argument_list></call> <operator pos:start="29:57" pos:end="29:58">==</operator> <name pos:start="29:60" pos:end="29:73">SDHC_CTRL_SDMA</name></expr>)</condition> <block pos:start="29:76" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:48">

            <expr_stmt pos:start="31:13" pos:end="31:48"><expr pos:start="31:13" pos:end="31:47"><call pos:start="31:13" pos:end="31:47"><name pos:start="31:13" pos:end="31:44">sdhci_sdma_transfer_multi_blocks</name><argument_list pos:start="31:45" pos:end="31:47">(<argument pos:start="31:46" pos:end="31:46"><expr pos:start="31:46" pos:end="31:46"><name pos:start="31:46" pos:end="31:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:22">case <expr pos:start="37:10" pos:end="37:21"><name pos:start="37:10" pos:end="37:21">SDHC_BLKSIZE</name></expr>:</case>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:42">(<expr pos:start="39:13" pos:end="39:41"><operator pos:start="39:13" pos:end="39:13">!</operator><call pos:start="39:14" pos:end="39:41"><name pos:start="39:14" pos:end="39:30">TRANSFERRING_DATA</name><argument_list pos:start="39:31" pos:end="39:41">(<argument pos:start="39:32" pos:end="39:40"><expr pos:start="39:32" pos:end="39:40"><name pos:start="39:32" pos:end="39:40"><name pos:start="39:32" pos:end="39:32">s</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:40">prnsts</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:44" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:61">

            <expr_stmt pos:start="41:13" pos:end="41:50"><expr pos:start="41:13" pos:end="41:49"><call pos:start="41:13" pos:end="41:49"><name pos:start="41:13" pos:end="41:24">MASKED_WRITE</name><argument_list pos:start="41:25" pos:end="41:49">(<argument pos:start="41:26" pos:end="41:35"><expr pos:start="41:26" pos:end="41:35"><name pos:start="41:26" pos:end="41:35"><name pos:start="41:26" pos:end="41:26">s</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:35">blksize</name></name></expr></argument>, <argument pos:start="41:38" pos:end="41:41"><expr pos:start="41:38" pos:end="41:41"><name pos:start="41:38" pos:end="41:41">mask</name></expr></argument>, <argument pos:start="41:44" pos:end="41:48"><expr pos:start="41:44" pos:end="41:48"><name pos:start="41:44" pos:end="41:48">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:61"><expr pos:start="43:13" pos:end="43:60"><call pos:start="43:13" pos:end="43:60"><name pos:start="43:13" pos:end="43:24">MASKED_WRITE</name><argument_list pos:start="43:25" pos:end="43:60">(<argument pos:start="43:26" pos:end="43:34"><expr pos:start="43:26" pos:end="43:34"><name pos:start="43:26" pos:end="43:34"><name pos:start="43:26" pos:end="43:26">s</name><operator pos:start="43:27" pos:end="43:28">-&gt;</operator><name pos:start="43:29" pos:end="43:34">blkcnt</name></name></expr></argument>, <argument pos:start="43:37" pos:end="43:46"><expr pos:start="43:37" pos:end="43:46"><name pos:start="43:37" pos:end="43:40">mask</name> <operator pos:start="43:42" pos:end="43:43">&gt;&gt;</operator> <literal type="number" pos:start="43:45" pos:end="43:46">16</literal></expr></argument>, <argument pos:start="43:49" pos:end="43:59"><expr pos:start="43:49" pos:end="43:59"><name pos:start="43:49" pos:end="43:53">value</name> <operator pos:start="43:55" pos:end="43:56">&gt;&gt;</operator> <literal type="number" pos:start="43:58" pos:end="43:59">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="49:9" pos:end="49:57">/* Limit block size to the maximum buffer size */</comment>

        <if_stmt pos:start="51:9" pos:end="63:9"><if pos:start="51:9" pos:end="63:9">if <condition pos:start="51:12" pos:end="51:56">(<expr pos:start="51:13" pos:end="51:55"><call pos:start="51:13" pos:end="51:40"><name pos:start="51:13" pos:end="51:21">extract32</name><argument_list pos:start="51:22" pos:end="51:40">(<argument pos:start="51:23" pos:end="51:32"><expr pos:start="51:23" pos:end="51:32"><name pos:start="51:23" pos:end="51:32"><name pos:start="51:23" pos:end="51:23">s</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:32">blksize</name></name></expr></argument>, <argument pos:start="51:35" pos:end="51:35"><expr pos:start="51:35" pos:end="51:35"><literal type="number" pos:start="51:35" pos:end="51:35">0</literal></expr></argument>, <argument pos:start="51:38" pos:end="51:39"><expr pos:start="51:38" pos:end="51:39"><literal type="number" pos:start="51:38" pos:end="51:39">12</literal></expr></argument>)</argument_list></call> <operator pos:start="51:42" pos:end="51:42">&gt;</operator> <name pos:start="51:44" pos:end="51:55"><name pos:start="51:44" pos:end="51:44">s</name><operator pos:start="51:45" pos:end="51:46">-&gt;</operator><name pos:start="51:47" pos:end="51:55">buf_maxsz</name></name></expr>)</condition> <block pos:start="51:58" pos:end="63:9">{<block_content pos:start="53:13" pos:end="61:68">

            <expr_stmt pos:start="53:13" pos:end="57:40"><expr pos:start="53:13" pos:end="57:39"><call pos:start="53:13" pos:end="57:39"><name pos:start="53:13" pos:end="53:25">qemu_log_mask</name><argument_list pos:start="53:26" pos:end="57:39">(<argument pos:start="53:27" pos:end="53:41"><expr pos:start="53:27" pos:end="53:41"><name pos:start="53:27" pos:end="53:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="53:44" pos:end="55:51"><expr pos:start="53:44" pos:end="55:51"><literal type="string" pos:start="53:44" pos:end="53:74">"%s: Size 0x%x is larger than "</literal> \

                          <literal type="string" pos:start="55:27" pos:end="55:51">"the maximum buffer 0x%x"</literal></expr></argument>, <argument pos:start="55:54" pos:end="55:61"><expr pos:start="55:54" pos:end="55:61"><name pos:start="55:54" pos:end="55:61">__func__</name></expr></argument>, <argument pos:start="55:64" pos:end="55:73"><expr pos:start="55:64" pos:end="55:73"><name pos:start="55:64" pos:end="55:73"><name pos:start="55:64" pos:end="55:64">s</name><operator pos:start="55:65" pos:end="55:66">-&gt;</operator><name pos:start="55:67" pos:end="55:73">blksize</name></name></expr></argument>,

                          <argument pos:start="57:27" pos:end="57:38"><expr pos:start="57:27" pos:end="57:38"><name pos:start="57:27" pos:end="57:38"><name pos:start="57:27" pos:end="57:27">s</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:38">buf_maxsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="61:13" pos:end="61:68"><expr pos:start="61:13" pos:end="61:67"><name pos:start="61:13" pos:end="61:22"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:22">blksize</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <call pos:start="61:26" pos:end="61:67"><name pos:start="61:26" pos:end="61:34">deposit32</name><argument_list pos:start="61:35" pos:end="61:67">(<argument pos:start="61:36" pos:end="61:45"><expr pos:start="61:36" pos:end="61:45"><name pos:start="61:36" pos:end="61:45"><name pos:start="61:36" pos:end="61:36">s</name><operator pos:start="61:37" pos:end="61:38">-&gt;</operator><name pos:start="61:39" pos:end="61:45">blksize</name></name></expr></argument>, <argument pos:start="61:48" pos:end="61:48"><expr pos:start="61:48" pos:end="61:48"><literal type="number" pos:start="61:48" pos:end="61:48">0</literal></expr></argument>, <argument pos:start="61:51" pos:end="61:52"><expr pos:start="61:51" pos:end="61:52"><literal type="number" pos:start="61:51" pos:end="61:52">12</literal></expr></argument>, <argument pos:start="61:55" pos:end="61:66"><expr pos:start="61:55" pos:end="61:66"><name pos:start="61:55" pos:end="61:66"><name pos:start="61:55" pos:end="61:55">s</name><operator pos:start="61:56" pos:end="61:57">-&gt;</operator><name pos:start="61:58" pos:end="61:66">buf_maxsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <break pos:start="67:9" pos:end="67:14">break;</break>

    <case pos:start="69:5" pos:end="69:23">case <expr pos:start="69:10" pos:end="69:22"><name pos:start="69:10" pos:end="69:22">SDHC_ARGUMENT</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:47"><expr pos:start="71:9" pos:end="71:46"><call pos:start="71:9" pos:end="71:46"><name pos:start="71:9" pos:end="71:20">MASKED_WRITE</name><argument_list pos:start="71:21" pos:end="71:46">(<argument pos:start="71:22" pos:end="71:32"><expr pos:start="71:22" pos:end="71:32"><name pos:start="71:22" pos:end="71:32"><name pos:start="71:22" pos:end="71:22">s</name><operator pos:start="71:23" pos:end="71:24">-&gt;</operator><name pos:start="71:25" pos:end="71:32">argument</name></name></expr></argument>, <argument pos:start="71:35" pos:end="71:38"><expr pos:start="71:35" pos:end="71:38"><name pos:start="71:35" pos:end="71:38">mask</name></expr></argument>, <argument pos:start="71:41" pos:end="71:45"><expr pos:start="71:41" pos:end="71:45"><name pos:start="71:41" pos:end="71:45">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:21">case <expr pos:start="75:10" pos:end="75:20"><name pos:start="75:10" pos:end="75:20">SDHC_TRNMOD</name></expr>:</case>

        <comment type="block" pos:start="77:9" pos:end="79:35">/* DMA can be enabled only if it is supported as indicated by

         * capabilities register */</comment>

        <if_stmt pos:start="81:9" pos:end="85:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:44">(<expr pos:start="81:13" pos:end="81:43"><operator pos:start="81:13" pos:end="81:13">!</operator><operator pos:start="81:14" pos:end="81:14">(</operator><name pos:start="81:15" pos:end="81:24"><name pos:start="81:15" pos:end="81:15">s</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:24">capareg</name></name> <operator pos:start="81:26" pos:end="81:26">&amp;</operator> <name pos:start="81:28" pos:end="81:42">SDHC_CAN_DO_DMA</name><operator pos:start="81:43" pos:end="81:43">)</operator></expr>)</condition> <block pos:start="81:46" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:36">

            <expr_stmt pos:start="83:13" pos:end="83:36"><expr pos:start="83:13" pos:end="83:35"><name pos:start="83:13" pos:end="83:17">value</name> <operator pos:start="83:19" pos:end="83:20">&amp;=</operator> <operator pos:start="83:22" pos:end="83:22">~</operator><name pos:start="83:23" pos:end="83:35">SDHC_TRNS_DMA</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:45"><expr pos:start="87:9" pos:end="87:44"><call pos:start="87:9" pos:end="87:44"><name pos:start="87:9" pos:end="87:20">MASKED_WRITE</name><argument_list pos:start="87:21" pos:end="87:44">(<argument pos:start="87:22" pos:end="87:30"><expr pos:start="87:22" pos:end="87:30"><name pos:start="87:22" pos:end="87:30"><name pos:start="87:22" pos:end="87:22">s</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:30">trnmod</name></name></expr></argument>, <argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">mask</name></expr></argument>, <argument pos:start="87:39" pos:end="87:43"><expr pos:start="87:39" pos:end="87:43"><name pos:start="87:39" pos:end="87:43">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:57"><expr pos:start="89:9" pos:end="89:56"><call pos:start="89:9" pos:end="89:56"><name pos:start="89:9" pos:end="89:20">MASKED_WRITE</name><argument_list pos:start="89:21" pos:end="89:56">(<argument pos:start="89:22" pos:end="89:30"><expr pos:start="89:22" pos:end="89:30"><name pos:start="89:22" pos:end="89:30"><name pos:start="89:22" pos:end="89:22">s</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:30">cmdreg</name></name></expr></argument>, <argument pos:start="89:33" pos:end="89:42"><expr pos:start="89:33" pos:end="89:42"><name pos:start="89:33" pos:end="89:36">mask</name> <operator pos:start="89:38" pos:end="89:39">&gt;&gt;</operator> <literal type="number" pos:start="89:41" pos:end="89:42">16</literal></expr></argument>, <argument pos:start="89:45" pos:end="89:55"><expr pos:start="89:45" pos:end="89:55"><name pos:start="89:45" pos:end="89:49">value</name> <operator pos:start="89:51" pos:end="89:52">&gt;&gt;</operator> <literal type="number" pos:start="89:54" pos:end="89:55">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="93:9" pos:end="93:80">/* Writing to the upper byte of CMDREG triggers SD command generation */</comment>

        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:63">(<expr pos:start="95:13" pos:end="95:62"><operator pos:start="95:13" pos:end="95:13">(</operator><name pos:start="95:14" pos:end="95:17">mask</name> <operator pos:start="95:19" pos:end="95:19">&amp;</operator> <literal type="number" pos:start="95:21" pos:end="95:30">0xFF000000</literal><operator pos:start="95:31" pos:end="95:31">)</operator> <operator pos:start="95:33" pos:end="95:34">||</operator> <operator pos:start="95:36" pos:end="95:36">!</operator><call pos:start="95:37" pos:end="95:62"><name pos:start="95:37" pos:end="95:59">sdhci_can_issue_command</name><argument_list pos:start="95:60" pos:end="95:62">(<argument pos:start="95:61" pos:end="95:61"><expr pos:start="95:61" pos:end="95:61"><name pos:start="95:61" pos:end="95:61">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:65" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:18">

            <break pos:start="97:13" pos:end="97:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:30"><expr pos:start="103:9" pos:end="103:29"><call pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:26">sdhci_send_command</name><argument_list pos:start="103:27" pos:end="103:29">(<argument pos:start="103:28" pos:end="103:28"><expr pos:start="103:28" pos:end="103:28"><name pos:start="103:28" pos:end="103:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:21">case  <expr pos:start="107:11" pos:end="107:20"><name pos:start="107:11" pos:end="107:20">SDHC_BDATA</name></expr>:</case>

        <if_stmt pos:start="109:9" pos:end="113:9"><if pos:start="109:9" pos:end="113:9">if <condition pos:start="109:12" pos:end="109:68">(<expr pos:start="109:13" pos:end="109:67"><call pos:start="109:13" pos:end="109:67"><name pos:start="109:13" pos:end="109:43">sdhci_buff_access_is_sequential</name><argument_list pos:start="109:44" pos:end="109:67">(<argument pos:start="109:45" pos:end="109:45"><expr pos:start="109:45" pos:end="109:45"><name pos:start="109:45" pos:end="109:45">s</name></expr></argument>, <argument pos:start="109:48" pos:end="109:66"><expr pos:start="109:48" pos:end="109:66"><name pos:start="109:48" pos:end="109:53">offset</name> <operator pos:start="109:55" pos:end="109:55">-</operator> <name pos:start="109:57" pos:end="109:66">SDHC_BDATA</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:70" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:58">

            <expr_stmt pos:start="111:13" pos:end="111:58"><expr pos:start="111:13" pos:end="111:57"><call pos:start="111:13" pos:end="111:57"><name pos:start="111:13" pos:end="111:32">sdhci_write_dataport</name><argument_list pos:start="111:33" pos:end="111:57">(<argument pos:start="111:34" pos:end="111:34"><expr pos:start="111:34" pos:end="111:34"><name pos:start="111:34" pos:end="111:34">s</name></expr></argument>, <argument pos:start="111:37" pos:end="111:50"><expr pos:start="111:37" pos:end="111:50"><name pos:start="111:37" pos:end="111:41">value</name> <operator pos:start="111:43" pos:end="111:44">&gt;&gt;</operator> <name pos:start="111:46" pos:end="111:50">shift</name></expr></argument>, <argument pos:start="111:53" pos:end="111:56"><expr pos:start="111:53" pos:end="111:56"><name pos:start="111:53" pos:end="111:56">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:22">case <expr pos:start="117:10" pos:end="117:21"><name pos:start="117:10" pos:end="117:21">SDHC_HOSTCTL</name></expr>:</case>

        <if_stmt pos:start="119:9" pos:end="123:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:31">(<expr pos:start="119:13" pos:end="119:30"><operator pos:start="119:13" pos:end="119:13">!</operator><operator pos:start="119:14" pos:end="119:14">(</operator><name pos:start="119:15" pos:end="119:18">mask</name> <operator pos:start="119:20" pos:end="119:20">&amp;</operator> <literal type="number" pos:start="119:22" pos:end="119:29">0xFF0000</literal><operator pos:start="119:30" pos:end="119:30">)</operator></expr>)</condition> <block pos:start="119:33" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:47">

            <expr_stmt pos:start="121:13" pos:end="121:47"><expr pos:start="121:13" pos:end="121:46"><call pos:start="121:13" pos:end="121:46"><name pos:start="121:13" pos:end="121:30">sdhci_blkgap_write</name><argument_list pos:start="121:31" pos:end="121:46">(<argument pos:start="121:32" pos:end="121:32"><expr pos:start="121:32" pos:end="121:32"><name pos:start="121:32" pos:end="121:32">s</name></expr></argument>, <argument pos:start="121:35" pos:end="121:45"><expr pos:start="121:35" pos:end="121:45"><name pos:start="121:35" pos:end="121:39">value</name> <operator pos:start="121:41" pos:end="121:42">&gt;&gt;</operator> <literal type="number" pos:start="121:44" pos:end="121:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:46"><expr pos:start="125:9" pos:end="125:45"><call pos:start="125:9" pos:end="125:45"><name pos:start="125:9" pos:end="125:20">MASKED_WRITE</name><argument_list pos:start="125:21" pos:end="125:45">(<argument pos:start="125:22" pos:end="125:31"><expr pos:start="125:22" pos:end="125:31"><name pos:start="125:22" pos:end="125:31"><name pos:start="125:22" pos:end="125:22">s</name><operator pos:start="125:23" pos:end="125:24">-&gt;</operator><name pos:start="125:25" pos:end="125:31">hostctl</name></name></expr></argument>, <argument pos:start="125:34" pos:end="125:37"><expr pos:start="125:34" pos:end="125:37"><name pos:start="125:34" pos:end="125:37">mask</name></expr></argument>, <argument pos:start="125:40" pos:end="125:44"><expr pos:start="125:40" pos:end="125:44"><name pos:start="125:40" pos:end="125:44">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:55"><expr pos:start="127:9" pos:end="127:54"><call pos:start="127:9" pos:end="127:54"><name pos:start="127:9" pos:end="127:20">MASKED_WRITE</name><argument_list pos:start="127:21" pos:end="127:54">(<argument pos:start="127:22" pos:end="127:30"><expr pos:start="127:22" pos:end="127:30"><name pos:start="127:22" pos:end="127:30"><name pos:start="127:22" pos:end="127:22">s</name><operator pos:start="127:23" pos:end="127:24">-&gt;</operator><name pos:start="127:25" pos:end="127:30">pwrcon</name></name></expr></argument>, <argument pos:start="127:33" pos:end="127:41"><expr pos:start="127:33" pos:end="127:41"><name pos:start="127:33" pos:end="127:36">mask</name> <operator pos:start="127:38" pos:end="127:39">&gt;&gt;</operator> <literal type="number" pos:start="127:41" pos:end="127:41">8</literal></expr></argument>, <argument pos:start="127:44" pos:end="127:53"><expr pos:start="127:44" pos:end="127:53"><name pos:start="127:44" pos:end="127:48">value</name> <operator pos:start="127:50" pos:end="127:51">&gt;&gt;</operator> <literal type="number" pos:start="127:53" pos:end="127:53">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:57"><expr pos:start="129:9" pos:end="129:56"><call pos:start="129:9" pos:end="129:56"><name pos:start="129:9" pos:end="129:20">MASKED_WRITE</name><argument_list pos:start="129:21" pos:end="129:56">(<argument pos:start="129:22" pos:end="129:30"><expr pos:start="129:22" pos:end="129:30"><name pos:start="129:22" pos:end="129:30"><name pos:start="129:22" pos:end="129:22">s</name><operator pos:start="129:23" pos:end="129:24">-&gt;</operator><name pos:start="129:25" pos:end="129:30">wakcon</name></name></expr></argument>, <argument pos:start="129:33" pos:end="129:42"><expr pos:start="129:33" pos:end="129:42"><name pos:start="129:33" pos:end="129:36">mask</name> <operator pos:start="129:38" pos:end="129:39">&gt;&gt;</operator> <literal type="number" pos:start="129:41" pos:end="129:42">24</literal></expr></argument>, <argument pos:start="129:45" pos:end="129:55"><expr pos:start="129:45" pos:end="129:55"><name pos:start="129:45" pos:end="129:49">value</name> <operator pos:start="129:51" pos:end="129:52">&gt;&gt;</operator> <literal type="number" pos:start="129:54" pos:end="129:55">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="133:71">(<expr pos:start="131:13" pos:end="133:70"><operator pos:start="131:13" pos:end="131:13">!</operator><operator pos:start="131:14" pos:end="131:14">(</operator><name pos:start="131:15" pos:end="131:23"><name pos:start="131:15" pos:end="131:15">s</name><operator pos:start="131:16" pos:end="131:17">-&gt;</operator><name pos:start="131:18" pos:end="131:23">prnsts</name></name> <operator pos:start="131:25" pos:end="131:25">&amp;</operator> <name pos:start="131:27" pos:end="131:43">SDHC_CARD_PRESENT</name><operator pos:start="131:44" pos:end="131:44">)</operator> <operator pos:start="131:46" pos:end="131:47">||</operator> <operator pos:start="131:49" pos:end="131:49">(</operator><operator pos:start="131:50" pos:end="131:50">(</operator><name pos:start="131:51" pos:end="131:59"><name pos:start="131:51" pos:end="131:51">s</name><operator pos:start="131:52" pos:end="131:53">-&gt;</operator><name pos:start="131:54" pos:end="131:59">pwrcon</name></name> <operator pos:start="131:61" pos:end="131:62">&gt;&gt;</operator> <literal type="number" pos:start="131:64" pos:end="131:64">1</literal><operator pos:start="131:65" pos:end="131:65">)</operator> <operator pos:start="131:67" pos:end="131:67">&amp;</operator> <literal type="number" pos:start="131:69" pos:end="131:71">0x7</literal><operator pos:start="131:72" pos:end="131:72">)</operator> <operator pos:start="131:74" pos:end="131:74">&lt;</operator> <literal type="number" pos:start="131:76" pos:end="131:76">5</literal> <operator pos:start="131:78" pos:end="131:79">||</operator>

                <operator pos:start="133:17" pos:end="133:17">!</operator><operator pos:start="133:18" pos:end="133:18">(</operator><name pos:start="133:19" pos:end="133:28"><name pos:start="133:19" pos:end="133:19">s</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:28">capareg</name></name> <operator pos:start="133:30" pos:end="133:30">&amp;</operator> <operator pos:start="133:32" pos:end="133:32">(</operator><literal type="number" pos:start="133:33" pos:end="133:33">1</literal> <operator pos:start="133:35" pos:end="133:36">&lt;&lt;</operator> <operator pos:start="133:38" pos:end="133:38">(</operator><literal type="number" pos:start="133:39" pos:end="133:42">31</literal> <operator pos:start="133:42" pos:end="133:42">-</operator> <operator pos:start="133:44" pos:end="133:44">(</operator><operator pos:start="133:45" pos:end="133:45">(</operator><name pos:start="133:46" pos:end="133:54"><name pos:start="133:46" pos:end="133:46">s</name><operator pos:start="133:47" pos:end="133:48">-&gt;</operator><name pos:start="133:49" pos:end="133:54">pwrcon</name></name> <operator pos:start="133:56" pos:end="133:57">&gt;&gt;</operator> <literal type="number" pos:start="133:59" pos:end="133:59">1</literal><operator pos:start="133:60" pos:end="133:60">)</operator> <operator pos:start="133:62" pos:end="133:62">&amp;</operator> <literal type="number" pos:start="133:64" pos:end="133:66">0x7</literal><operator pos:start="133:67" pos:end="133:67">)</operator><operator pos:start="133:68" pos:end="133:68">)</operator><operator pos:start="133:69" pos:end="133:69">)</operator><operator pos:start="133:70" pos:end="133:70">)</operator></expr>)</condition> <block pos:start="133:73" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:40">

            <expr_stmt pos:start="135:13" pos:end="135:40"><expr pos:start="135:13" pos:end="135:39"><name pos:start="135:13" pos:end="135:21"><name pos:start="135:13" pos:end="135:13">s</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:21">pwrcon</name></name> <operator pos:start="135:23" pos:end="135:24">&amp;=</operator> <operator pos:start="135:26" pos:end="135:26">~</operator><name pos:start="135:27" pos:end="135:39">SDHC_POWER_ON</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="139:9" pos:end="139:14">break;</break>

    <case pos:start="141:5" pos:end="141:21">case <expr pos:start="141:10" pos:end="141:20"><name pos:start="141:10" pos:end="141:20">SDHC_CLKCON</name></expr>:</case>

        <if_stmt pos:start="143:9" pos:end="147:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:33">(<expr pos:start="143:13" pos:end="143:32"><operator pos:start="143:13" pos:end="143:13">!</operator><operator pos:start="143:14" pos:end="143:14">(</operator><name pos:start="143:15" pos:end="143:18">mask</name> <operator pos:start="143:20" pos:end="143:20">&amp;</operator> <literal type="number" pos:start="143:22" pos:end="143:31">0xFF000000</literal><operator pos:start="143:32" pos:end="143:32">)</operator></expr>)</condition> <block pos:start="143:35" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:46">

            <expr_stmt pos:start="145:13" pos:end="145:46"><expr pos:start="145:13" pos:end="145:45"><call pos:start="145:13" pos:end="145:45"><name pos:start="145:13" pos:end="145:29">sdhci_reset_write</name><argument_list pos:start="145:30" pos:end="145:45">(<argument pos:start="145:31" pos:end="145:31"><expr pos:start="145:31" pos:end="145:31"><name pos:start="145:31" pos:end="145:31">s</name></expr></argument>, <argument pos:start="145:34" pos:end="145:44"><expr pos:start="145:34" pos:end="145:44"><name pos:start="145:34" pos:end="145:38">value</name> <operator pos:start="145:40" pos:end="145:41">&gt;&gt;</operator> <literal type="number" pos:start="145:43" pos:end="145:44">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:45"><expr pos:start="149:9" pos:end="149:44"><call pos:start="149:9" pos:end="149:44"><name pos:start="149:9" pos:end="149:20">MASKED_WRITE</name><argument_list pos:start="149:21" pos:end="149:44">(<argument pos:start="149:22" pos:end="149:30"><expr pos:start="149:22" pos:end="149:30"><name pos:start="149:22" pos:end="149:30"><name pos:start="149:22" pos:end="149:22">s</name><operator pos:start="149:23" pos:end="149:24">-&gt;</operator><name pos:start="149:25" pos:end="149:30">clkcon</name></name></expr></argument>, <argument pos:start="149:33" pos:end="149:36"><expr pos:start="149:33" pos:end="149:36"><name pos:start="149:33" pos:end="149:36">mask</name></expr></argument>, <argument pos:start="149:39" pos:end="149:43"><expr pos:start="149:39" pos:end="149:43"><name pos:start="149:39" pos:end="149:43">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:61"><expr pos:start="151:9" pos:end="151:60"><call pos:start="151:9" pos:end="151:60"><name pos:start="151:9" pos:end="151:20">MASKED_WRITE</name><argument_list pos:start="151:21" pos:end="151:60">(<argument pos:start="151:22" pos:end="151:34"><expr pos:start="151:22" pos:end="151:34"><name pos:start="151:22" pos:end="151:34"><name pos:start="151:22" pos:end="151:22">s</name><operator pos:start="151:23" pos:end="151:24">-&gt;</operator><name pos:start="151:25" pos:end="151:34">timeoutcon</name></name></expr></argument>, <argument pos:start="151:37" pos:end="151:46"><expr pos:start="151:37" pos:end="151:46"><name pos:start="151:37" pos:end="151:40">mask</name> <operator pos:start="151:42" pos:end="151:43">&gt;&gt;</operator> <literal type="number" pos:start="151:45" pos:end="151:46">16</literal></expr></argument>, <argument pos:start="151:49" pos:end="151:59"><expr pos:start="151:49" pos:end="151:59"><name pos:start="151:49" pos:end="151:53">value</name> <operator pos:start="151:55" pos:end="151:56">&gt;&gt;</operator> <literal type="number" pos:start="151:58" pos:end="151:59">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="153:9" pos:end="161:9"><if pos:start="153:9" pos:end="157:9">if <condition pos:start="153:12" pos:end="153:42">(<expr pos:start="153:13" pos:end="153:41"><name pos:start="153:13" pos:end="153:21"><name pos:start="153:13" pos:end="153:13">s</name><operator pos:start="153:14" pos:end="153:15">-&gt;</operator><name pos:start="153:16" pos:end="153:21">clkcon</name></name> <operator pos:start="153:23" pos:end="153:23">&amp;</operator> <name pos:start="153:25" pos:end="153:41">SDHC_CLOCK_INT_EN</name></expr>)</condition> <block pos:start="153:44" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:47">

            <expr_stmt pos:start="155:13" pos:end="155:47"><expr pos:start="155:13" pos:end="155:46"><name pos:start="155:13" pos:end="155:21"><name pos:start="155:13" pos:end="155:13">s</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:21">clkcon</name></name> <operator pos:start="155:23" pos:end="155:24">|=</operator> <name pos:start="155:26" pos:end="155:46">SDHC_CLOCK_INT_STABLE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="161:9">else <block pos:start="157:16" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:48">

            <expr_stmt pos:start="159:13" pos:end="159:48"><expr pos:start="159:13" pos:end="159:47"><name pos:start="159:13" pos:end="159:21"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:21">clkcon</name></name> <operator pos:start="159:23" pos:end="159:24">&amp;=</operator> <operator pos:start="159:26" pos:end="159:26">~</operator><name pos:start="159:27" pos:end="159:47">SDHC_CLOCK_INT_STABLE</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="163:9" pos:end="163:14">break;</break>

    <case pos:start="165:5" pos:end="165:24">case <expr pos:start="165:10" pos:end="165:23"><name pos:start="165:10" pos:end="165:23">SDHC_NORINTSTS</name></expr>:</case>

        <if_stmt pos:start="167:9" pos:end="171:9"><if pos:start="167:9" pos:end="171:9">if <condition pos:start="167:12" pos:end="167:48">(<expr pos:start="167:13" pos:end="167:47"><name pos:start="167:13" pos:end="167:26"><name pos:start="167:13" pos:end="167:13">s</name><operator pos:start="167:14" pos:end="167:15">-&gt;</operator><name pos:start="167:16" pos:end="167:26">norintstsen</name></name> <operator pos:start="167:28" pos:end="167:28">&amp;</operator> <name pos:start="167:30" pos:end="167:47">SDHC_NISEN_CARDINT</name></expr>)</condition> <block pos:start="167:50" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:39">

            <expr_stmt pos:start="169:13" pos:end="169:39"><expr pos:start="169:13" pos:end="169:38"><name pos:start="169:13" pos:end="169:17">value</name> <operator pos:start="169:19" pos:end="169:20">&amp;=</operator> <operator pos:start="169:22" pos:end="169:22">~</operator><name pos:start="169:23" pos:end="169:38">SDHC_NIS_CARDINT</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:38"><expr pos:start="173:9" pos:end="173:37"><name pos:start="173:9" pos:end="173:20"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:20">norintsts</name></name> <operator pos:start="173:22" pos:end="173:23">&amp;=</operator> <name pos:start="173:25" pos:end="173:28">mask</name> <operator pos:start="173:30" pos:end="173:30">|</operator> <operator pos:start="173:32" pos:end="173:32">~</operator><name pos:start="173:33" pos:end="173:37">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:54"><expr pos:start="175:9" pos:end="175:53"><name pos:start="175:9" pos:end="175:20"><name pos:start="175:9" pos:end="175:9">s</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:20">errintsts</name></name> <operator pos:start="175:22" pos:end="175:23">&amp;=</operator> <operator pos:start="175:25" pos:end="175:25">(</operator><name pos:start="175:26" pos:end="175:29">mask</name> <operator pos:start="175:31" pos:end="175:32">&gt;&gt;</operator> <literal type="number" pos:start="175:34" pos:end="175:35">16</literal><operator pos:start="175:36" pos:end="175:36">)</operator> <operator pos:start="175:38" pos:end="175:38">|</operator> <operator pos:start="175:40" pos:end="175:40">~</operator><operator pos:start="175:41" pos:end="175:41">(</operator><name pos:start="175:42" pos:end="175:46">value</name> <operator pos:start="175:48" pos:end="175:49">&gt;&gt;</operator> <literal type="number" pos:start="175:51" pos:end="175:52">16</literal><operator pos:start="175:53" pos:end="175:53">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="185:9"><if pos:start="177:9" pos:end="181:9">if <condition pos:start="177:12" pos:end="177:25">(<expr pos:start="177:13" pos:end="177:24"><name pos:start="177:13" pos:end="177:24"><name pos:start="177:13" pos:end="177:13">s</name><operator pos:start="177:14" pos:end="177:15">-&gt;</operator><name pos:start="177:16" pos:end="177:24">errintsts</name></name></expr>)</condition> <block pos:start="177:27" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:41">

            <expr_stmt pos:start="179:13" pos:end="179:41"><expr pos:start="179:13" pos:end="179:40"><name pos:start="179:13" pos:end="179:24"><name pos:start="179:13" pos:end="179:13">s</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:24">norintsts</name></name> <operator pos:start="179:26" pos:end="179:27">|=</operator> <name pos:start="179:29" pos:end="179:40">SDHC_NIS_ERR</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="181:11" pos:end="185:9">else <block pos:start="181:16" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:42">

            <expr_stmt pos:start="183:13" pos:end="183:42"><expr pos:start="183:13" pos:end="183:41"><name pos:start="183:13" pos:end="183:24"><name pos:start="183:13" pos:end="183:13">s</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:24">norintsts</name></name> <operator pos:start="183:26" pos:end="183:27">&amp;=</operator> <operator pos:start="183:29" pos:end="183:29">~</operator><name pos:start="183:30" pos:end="183:41">SDHC_NIS_ERR</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:28"><expr pos:start="187:9" pos:end="187:27"><call pos:start="187:9" pos:end="187:27"><name pos:start="187:9" pos:end="187:24">sdhci_update_irq</name><argument_list pos:start="187:25" pos:end="187:27">(<argument pos:start="187:26" pos:end="187:26"><expr pos:start="187:26" pos:end="187:26"><name pos:start="187:26" pos:end="187:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="189:9" pos:end="189:14">break;</break>

    <case pos:start="191:5" pos:end="191:26">case <expr pos:start="191:10" pos:end="191:25"><name pos:start="191:10" pos:end="191:25">SDHC_NORINTSTSEN</name></expr>:</case>

        <expr_stmt pos:start="193:9" pos:end="193:50"><expr pos:start="193:9" pos:end="193:49"><call pos:start="193:9" pos:end="193:49"><name pos:start="193:9" pos:end="193:20">MASKED_WRITE</name><argument_list pos:start="193:21" pos:end="193:49">(<argument pos:start="193:22" pos:end="193:35"><expr pos:start="193:22" pos:end="193:35"><name pos:start="193:22" pos:end="193:35"><name pos:start="193:22" pos:end="193:22">s</name><operator pos:start="193:23" pos:end="193:24">-&gt;</operator><name pos:start="193:25" pos:end="193:35">norintstsen</name></name></expr></argument>, <argument pos:start="193:38" pos:end="193:41"><expr pos:start="193:38" pos:end="193:41"><name pos:start="193:38" pos:end="193:41">mask</name></expr></argument>, <argument pos:start="193:44" pos:end="193:48"><expr pos:start="193:44" pos:end="193:48"><name pos:start="193:44" pos:end="193:48">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:62"><expr pos:start="195:9" pos:end="195:61"><call pos:start="195:9" pos:end="195:61"><name pos:start="195:9" pos:end="195:20">MASKED_WRITE</name><argument_list pos:start="195:21" pos:end="195:61">(<argument pos:start="195:22" pos:end="195:35"><expr pos:start="195:22" pos:end="195:35"><name pos:start="195:22" pos:end="195:35"><name pos:start="195:22" pos:end="195:22">s</name><operator pos:start="195:23" pos:end="195:24">-&gt;</operator><name pos:start="195:25" pos:end="195:35">errintstsen</name></name></expr></argument>, <argument pos:start="195:38" pos:end="195:47"><expr pos:start="195:38" pos:end="195:47"><name pos:start="195:38" pos:end="195:41">mask</name> <operator pos:start="195:43" pos:end="195:44">&gt;&gt;</operator> <literal type="number" pos:start="195:46" pos:end="195:47">16</literal></expr></argument>, <argument pos:start="195:50" pos:end="195:60"><expr pos:start="195:50" pos:end="195:60"><name pos:start="195:50" pos:end="195:54">value</name> <operator pos:start="195:56" pos:end="195:57">&gt;&gt;</operator> <literal type="number" pos:start="195:59" pos:end="195:60">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:39"><expr pos:start="197:9" pos:end="197:38"><name pos:start="197:9" pos:end="197:20"><name pos:start="197:9" pos:end="197:9">s</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:20">norintsts</name></name> <operator pos:start="197:22" pos:end="197:23">&amp;=</operator> <name pos:start="197:25" pos:end="197:38"><name pos:start="197:25" pos:end="197:25">s</name><operator pos:start="197:26" pos:end="197:27">-&gt;</operator><name pos:start="197:28" pos:end="197:38">norintstsen</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:39"><expr pos:start="199:9" pos:end="199:38"><name pos:start="199:9" pos:end="199:20"><name pos:start="199:9" pos:end="199:9">s</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:20">errintsts</name></name> <operator pos:start="199:22" pos:end="199:23">&amp;=</operator> <name pos:start="199:25" pos:end="199:38"><name pos:start="199:25" pos:end="199:25">s</name><operator pos:start="199:26" pos:end="199:27">-&gt;</operator><name pos:start="199:28" pos:end="199:38">errintstsen</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="201:9" pos:end="209:9"><if pos:start="201:9" pos:end="205:9">if <condition pos:start="201:12" pos:end="201:25">(<expr pos:start="201:13" pos:end="201:24"><name pos:start="201:13" pos:end="201:24"><name pos:start="201:13" pos:end="201:13">s</name><operator pos:start="201:14" pos:end="201:15">-&gt;</operator><name pos:start="201:16" pos:end="201:24">errintsts</name></name></expr>)</condition> <block pos:start="201:27" pos:end="205:9">{<block_content pos:start="203:13" pos:end="203:41">

            <expr_stmt pos:start="203:13" pos:end="203:41"><expr pos:start="203:13" pos:end="203:40"><name pos:start="203:13" pos:end="203:24"><name pos:start="203:13" pos:end="203:13">s</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:24">norintsts</name></name> <operator pos:start="203:26" pos:end="203:27">|=</operator> <name pos:start="203:29" pos:end="203:40">SDHC_NIS_ERR</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="205:11" pos:end="209:9">else <block pos:start="205:16" pos:end="209:9">{<block_content pos:start="207:13" pos:end="207:42">

            <expr_stmt pos:start="207:13" pos:end="207:42"><expr pos:start="207:13" pos:end="207:41"><name pos:start="207:13" pos:end="207:24"><name pos:start="207:13" pos:end="207:13">s</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:24">norintsts</name></name> <operator pos:start="207:26" pos:end="207:27">&amp;=</operator> <operator pos:start="207:29" pos:end="207:29">~</operator><name pos:start="207:30" pos:end="207:41">SDHC_NIS_ERR</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="211:9" pos:end="213:55">/* Quirk for Raspberry Pi: pending card insert interrupt

         * appears when first enabled after power on */</comment>

        <if_stmt pos:start="215:9" pos:end="223:9"><if pos:start="215:9" pos:end="223:9">if <condition pos:start="215:12" pos:end="215:76">(<expr pos:start="215:13" pos:end="215:75"><operator pos:start="215:13" pos:end="215:13">(</operator><name pos:start="215:14" pos:end="215:27"><name pos:start="215:14" pos:end="215:14">s</name><operator pos:start="215:15" pos:end="215:16">-&gt;</operator><name pos:start="215:17" pos:end="215:27">norintstsen</name></name> <operator pos:start="215:29" pos:end="215:29">&amp;</operator> <name pos:start="215:31" pos:end="215:47">SDHC_NISEN_INSERT</name><operator pos:start="215:48" pos:end="215:48">)</operator> <operator pos:start="215:50" pos:end="215:51">&amp;&amp;</operator> <name pos:start="215:53" pos:end="215:75"><name pos:start="215:53" pos:end="215:53">s</name><operator pos:start="215:54" pos:end="215:55">-&gt;</operator><name pos:start="215:56" pos:end="215:75">pending_insert_state</name></name></expr>)</condition> <block pos:start="215:78" pos:end="223:9">{<block_content pos:start="217:13" pos:end="221:44">

            <expr_stmt pos:start="217:13" pos:end="217:44"><expr pos:start="217:13" pos:end="217:43"><call pos:start="217:13" pos:end="217:43"><name pos:start="217:13" pos:end="217:18">assert</name><argument_list pos:start="217:19" pos:end="217:43">(<argument pos:start="217:20" pos:end="217:42"><expr pos:start="217:20" pos:end="217:42"><name pos:start="217:20" pos:end="217:42"><name pos:start="217:20" pos:end="217:20">s</name><operator pos:start="217:21" pos:end="217:22">-&gt;</operator><name pos:start="217:23" pos:end="217:42">pending_insert_quirk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:44"><expr pos:start="219:13" pos:end="219:43"><name pos:start="219:13" pos:end="219:24"><name pos:start="219:13" pos:end="219:13">s</name><operator pos:start="219:14" pos:end="219:15">-&gt;</operator><name pos:start="219:16" pos:end="219:24">norintsts</name></name> <operator pos:start="219:26" pos:end="219:27">|=</operator> <name pos:start="219:29" pos:end="219:43">SDHC_NIS_INSERT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:44"><expr pos:start="221:13" pos:end="221:43"><name pos:start="221:13" pos:end="221:35"><name pos:start="221:13" pos:end="221:13">s</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:35">pending_insert_state</name></name> <operator pos:start="221:37" pos:end="221:37">=</operator> <name pos:start="221:39" pos:end="221:43">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:28"><expr pos:start="225:9" pos:end="225:27"><call pos:start="225:9" pos:end="225:27"><name pos:start="225:9" pos:end="225:24">sdhci_update_irq</name><argument_list pos:start="225:25" pos:end="225:27">(<argument pos:start="225:26" pos:end="225:26"><expr pos:start="225:26" pos:end="225:26"><name pos:start="225:26" pos:end="225:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="227:9" pos:end="227:14">break;</break>

    <case pos:start="229:5" pos:end="229:26">case <expr pos:start="229:10" pos:end="229:25"><name pos:start="229:10" pos:end="229:25">SDHC_NORINTSIGEN</name></expr>:</case>

        <expr_stmt pos:start="231:9" pos:end="231:50"><expr pos:start="231:9" pos:end="231:49"><call pos:start="231:9" pos:end="231:49"><name pos:start="231:9" pos:end="231:20">MASKED_WRITE</name><argument_list pos:start="231:21" pos:end="231:49">(<argument pos:start="231:22" pos:end="231:35"><expr pos:start="231:22" pos:end="231:35"><name pos:start="231:22" pos:end="231:35"><name pos:start="231:22" pos:end="231:22">s</name><operator pos:start="231:23" pos:end="231:24">-&gt;</operator><name pos:start="231:25" pos:end="231:35">norintsigen</name></name></expr></argument>, <argument pos:start="231:38" pos:end="231:41"><expr pos:start="231:38" pos:end="231:41"><name pos:start="231:38" pos:end="231:41">mask</name></expr></argument>, <argument pos:start="231:44" pos:end="231:48"><expr pos:start="231:44" pos:end="231:48"><name pos:start="231:44" pos:end="231:48">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:62"><expr pos:start="233:9" pos:end="233:61"><call pos:start="233:9" pos:end="233:61"><name pos:start="233:9" pos:end="233:20">MASKED_WRITE</name><argument_list pos:start="233:21" pos:end="233:61">(<argument pos:start="233:22" pos:end="233:35"><expr pos:start="233:22" pos:end="233:35"><name pos:start="233:22" pos:end="233:35"><name pos:start="233:22" pos:end="233:22">s</name><operator pos:start="233:23" pos:end="233:24">-&gt;</operator><name pos:start="233:25" pos:end="233:35">errintsigen</name></name></expr></argument>, <argument pos:start="233:38" pos:end="233:47"><expr pos:start="233:38" pos:end="233:47"><name pos:start="233:38" pos:end="233:41">mask</name> <operator pos:start="233:43" pos:end="233:44">&gt;&gt;</operator> <literal type="number" pos:start="233:46" pos:end="233:47">16</literal></expr></argument>, <argument pos:start="233:50" pos:end="233:60"><expr pos:start="233:50" pos:end="233:60"><name pos:start="233:50" pos:end="233:54">value</name> <operator pos:start="233:56" pos:end="233:57">&gt;&gt;</operator> <literal type="number" pos:start="233:59" pos:end="233:60">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:28"><expr pos:start="235:9" pos:end="235:27"><call pos:start="235:9" pos:end="235:27"><name pos:start="235:9" pos:end="235:24">sdhci_update_irq</name><argument_list pos:start="235:25" pos:end="235:27">(<argument pos:start="235:26" pos:end="235:26"><expr pos:start="235:26" pos:end="235:26"><name pos:start="235:26" pos:end="235:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="237:9" pos:end="237:14">break;</break>

    <case pos:start="239:5" pos:end="239:22">case <expr pos:start="239:10" pos:end="239:21"><name pos:start="239:10" pos:end="239:21">SDHC_ADMAERR</name></expr>:</case>

        <expr_stmt pos:start="241:9" pos:end="241:46"><expr pos:start="241:9" pos:end="241:45"><call pos:start="241:9" pos:end="241:45"><name pos:start="241:9" pos:end="241:20">MASKED_WRITE</name><argument_list pos:start="241:21" pos:end="241:45">(<argument pos:start="241:22" pos:end="241:31"><expr pos:start="241:22" pos:end="241:31"><name pos:start="241:22" pos:end="241:31"><name pos:start="241:22" pos:end="241:22">s</name><operator pos:start="241:23" pos:end="241:24">-&gt;</operator><name pos:start="241:25" pos:end="241:31">admaerr</name></name></expr></argument>, <argument pos:start="241:34" pos:end="241:37"><expr pos:start="241:34" pos:end="241:37"><name pos:start="241:34" pos:end="241:37">mask</name></expr></argument>, <argument pos:start="241:40" pos:end="241:44"><expr pos:start="241:40" pos:end="241:44"><name pos:start="241:40" pos:end="241:44">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="243:9" pos:end="243:14">break;</break>

    <case pos:start="245:5" pos:end="245:26">case <expr pos:start="245:10" pos:end="245:25"><name pos:start="245:10" pos:end="245:25">SDHC_ADMASYSADDR</name></expr>:</case>

        <expr_stmt pos:start="247:9" pos:end="249:51"><expr pos:start="247:9" pos:end="249:50"><name pos:start="247:9" pos:end="247:22"><name pos:start="247:9" pos:end="247:9">s</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:22">admasysaddr</name></name> <operator pos:start="247:24" pos:end="247:24">=</operator> <operator pos:start="247:26" pos:end="247:26">(</operator><name pos:start="247:27" pos:end="247:40"><name pos:start="247:27" pos:end="247:27">s</name><operator pos:start="247:28" pos:end="247:29">-&gt;</operator><name pos:start="247:30" pos:end="247:40">admasysaddr</name></name> <operator pos:start="247:42" pos:end="247:42">&amp;</operator> <operator pos:start="247:44" pos:end="247:44">(</operator><literal type="number" pos:start="247:45" pos:end="247:65">0xFFFFFFFF00000000ULL</literal> <operator pos:start="247:67" pos:end="247:67">|</operator>

                <operator pos:start="249:17" pos:end="249:17">(</operator><name pos:start="249:18" pos:end="249:25">uint64_t</name><operator pos:start="249:26" pos:end="249:26">)</operator><name pos:start="249:27" pos:end="249:30">mask</name><operator pos:start="249:31" pos:end="249:31">)</operator><operator pos:start="249:32" pos:end="249:32">)</operator> <operator pos:start="249:34" pos:end="249:34">|</operator> <operator pos:start="249:36" pos:end="249:36">(</operator><name pos:start="249:37" pos:end="249:44">uint64_t</name><operator pos:start="249:45" pos:end="249:45">)</operator><name pos:start="249:46" pos:end="249:50">value</name></expr>;</expr_stmt>

        <break pos:start="251:9" pos:end="251:14">break;</break>

    <case pos:start="253:5" pos:end="253:30">case <expr pos:start="253:10" pos:end="253:29"><name pos:start="253:10" pos:end="253:25">SDHC_ADMASYSADDR</name> <operator pos:start="253:27" pos:end="253:27">+</operator> <literal type="number" pos:start="253:29" pos:end="253:29">4</literal></expr>:</case>

        <expr_stmt pos:start="255:9" pos:end="257:67"><expr pos:start="255:9" pos:end="257:66"><name pos:start="255:9" pos:end="255:22"><name pos:start="255:9" pos:end="255:9">s</name><operator pos:start="255:10" pos:end="255:11">-&gt;</operator><name pos:start="255:12" pos:end="255:22">admasysaddr</name></name> <operator pos:start="255:24" pos:end="255:24">=</operator> <operator pos:start="255:26" pos:end="255:26">(</operator><name pos:start="255:27" pos:end="255:40"><name pos:start="255:27" pos:end="255:27">s</name><operator pos:start="255:28" pos:end="255:29">-&gt;</operator><name pos:start="255:30" pos:end="255:40">admasysaddr</name></name> <operator pos:start="255:42" pos:end="255:42">&amp;</operator> <operator pos:start="255:44" pos:end="255:44">(</operator><literal type="number" pos:start="255:45" pos:end="255:65">0x00000000FFFFFFFFULL</literal> <operator pos:start="255:67" pos:end="255:67">|</operator>

                <operator pos:start="257:17" pos:end="257:17">(</operator><operator pos:start="257:18" pos:end="257:18">(</operator><name pos:start="257:19" pos:end="257:26">uint64_t</name><operator pos:start="257:27" pos:end="257:27">)</operator><name pos:start="257:28" pos:end="257:31">mask</name> <operator pos:start="257:33" pos:end="257:34">&lt;&lt;</operator> <literal type="number" pos:start="257:36" pos:end="257:37">32</literal><operator pos:start="257:38" pos:end="257:38">)</operator><operator pos:start="257:39" pos:end="257:39">)</operator><operator pos:start="257:40" pos:end="257:40">)</operator> <operator pos:start="257:42" pos:end="257:42">|</operator> <operator pos:start="257:44" pos:end="257:44">(</operator><operator pos:start="257:45" pos:end="257:45">(</operator><name pos:start="257:46" pos:end="257:53">uint64_t</name><operator pos:start="257:54" pos:end="257:54">)</operator><name pos:start="257:55" pos:end="257:59">value</name> <operator pos:start="257:61" pos:end="257:62">&lt;&lt;</operator> <literal type="number" pos:start="257:64" pos:end="257:65">32</literal><operator pos:start="257:66" pos:end="257:66">)</operator></expr>;</expr_stmt>

        <break pos:start="259:9" pos:end="259:14">break;</break>

    <case pos:start="261:5" pos:end="261:20">case <expr pos:start="261:10" pos:end="261:19"><name pos:start="261:10" pos:end="261:19">SDHC_FEAER</name></expr>:</case>

        <expr_stmt pos:start="263:9" pos:end="263:33"><expr pos:start="263:9" pos:end="263:32"><name pos:start="263:9" pos:end="263:23"><name pos:start="263:9" pos:end="263:9">s</name><operator pos:start="263:10" pos:end="263:11">-&gt;</operator><name pos:start="263:12" pos:end="263:23">acmd12errsts</name></name> <operator pos:start="263:25" pos:end="263:26">|=</operator> <name pos:start="263:28" pos:end="263:32">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:55"><expr pos:start="265:9" pos:end="265:54"><name pos:start="265:9" pos:end="265:20"><name pos:start="265:9" pos:end="265:9">s</name><operator pos:start="265:10" pos:end="265:11">-&gt;</operator><name pos:start="265:12" pos:end="265:20">errintsts</name></name> <operator pos:start="265:22" pos:end="265:23">|=</operator> <operator pos:start="265:25" pos:end="265:25">(</operator><name pos:start="265:26" pos:end="265:30">value</name> <operator pos:start="265:32" pos:end="265:33">&gt;&gt;</operator> <literal type="number" pos:start="265:35" pos:end="265:36">16</literal><operator pos:start="265:37" pos:end="265:37">)</operator> <operator pos:start="265:39" pos:end="265:39">&amp;</operator> <name pos:start="265:41" pos:end="265:54"><name pos:start="265:41" pos:end="265:41">s</name><operator pos:start="265:42" pos:end="265:43">-&gt;</operator><name pos:start="265:44" pos:end="265:54">errintstsen</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="267:9" pos:end="271:9"><if pos:start="267:9" pos:end="271:9">if <condition pos:start="267:12" pos:end="267:28">(<expr pos:start="267:13" pos:end="267:27"><name pos:start="267:13" pos:end="267:27"><name pos:start="267:13" pos:end="267:13">s</name><operator pos:start="267:14" pos:end="267:15">-&gt;</operator><name pos:start="267:16" pos:end="267:27">acmd12errsts</name></name></expr>)</condition> <block pos:start="267:30" pos:end="271:9">{<block_content pos:start="269:13" pos:end="269:46">

            <expr_stmt pos:start="269:13" pos:end="269:46"><expr pos:start="269:13" pos:end="269:45"><name pos:start="269:13" pos:end="269:24"><name pos:start="269:13" pos:end="269:13">s</name><operator pos:start="269:14" pos:end="269:15">-&gt;</operator><name pos:start="269:16" pos:end="269:24">errintsts</name></name> <operator pos:start="269:26" pos:end="269:27">|=</operator> <name pos:start="269:29" pos:end="269:45">SDHC_EIS_CMD12ERR</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="273:9" pos:end="277:9"><if pos:start="273:9" pos:end="277:9">if <condition pos:start="273:12" pos:end="273:25">(<expr pos:start="273:13" pos:end="273:24"><name pos:start="273:13" pos:end="273:24"><name pos:start="273:13" pos:end="273:13">s</name><operator pos:start="273:14" pos:end="273:15">-&gt;</operator><name pos:start="273:16" pos:end="273:24">errintsts</name></name></expr>)</condition> <block pos:start="273:27" pos:end="277:9">{<block_content pos:start="275:13" pos:end="275:41">

            <expr_stmt pos:start="275:13" pos:end="275:41"><expr pos:start="275:13" pos:end="275:40"><name pos:start="275:13" pos:end="275:24"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:24">norintsts</name></name> <operator pos:start="275:26" pos:end="275:27">|=</operator> <name pos:start="275:29" pos:end="275:40">SDHC_NIS_ERR</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:28"><expr pos:start="279:9" pos:end="279:27"><call pos:start="279:9" pos:end="279:27"><name pos:start="279:9" pos:end="279:24">sdhci_update_irq</name><argument_list pos:start="279:25" pos:end="279:27">(<argument pos:start="279:26" pos:end="279:26"><expr pos:start="279:26" pos:end="279:26"><name pos:start="279:26" pos:end="279:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="281:9" pos:end="281:14">break;</break>

    <default pos:start="283:5" pos:end="283:12">default:</default>

        <expr_stmt pos:start="285:9" pos:end="287:68"><expr pos:start="285:9" pos:end="287:67"><call pos:start="285:9" pos:end="287:67"><name pos:start="285:9" pos:end="285:16">ERRPRINT</name><argument_list pos:start="285:17" pos:end="287:67">(<argument pos:start="285:18" pos:end="285:67"><expr pos:start="285:18" pos:end="285:67"><literal type="string" pos:start="285:18" pos:end="285:67">"bad %ub write offset: addr[0x%04x] &lt;- %u(0x%x)\n"</literal></expr></argument>,

                 <argument pos:start="287:18" pos:end="287:21"><expr pos:start="287:18" pos:end="287:21"><name pos:start="287:18" pos:end="287:21">size</name></expr></argument>, <argument pos:start="287:24" pos:end="287:34"><expr pos:start="287:24" pos:end="287:34"><operator pos:start="287:24" pos:end="287:24">(</operator><name pos:start="287:25" pos:end="287:27">int</name><operator pos:start="287:28" pos:end="287:28">)</operator><name pos:start="287:29" pos:end="287:34">offset</name></expr></argument>, <argument pos:start="287:37" pos:end="287:50"><expr pos:start="287:37" pos:end="287:50"><name pos:start="287:37" pos:end="287:41">value</name> <operator pos:start="287:43" pos:end="287:44">&gt;&gt;</operator> <name pos:start="287:46" pos:end="287:50">shift</name></expr></argument>, <argument pos:start="287:53" pos:end="287:66"><expr pos:start="287:53" pos:end="287:66"><name pos:start="287:53" pos:end="287:57">value</name> <operator pos:start="287:59" pos:end="287:60">&gt;&gt;</operator> <name pos:start="287:62" pos:end="287:66">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="289:9" pos:end="289:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="293:5" pos:end="295:65"><expr pos:start="293:5" pos:end="295:64"><call pos:start="293:5" pos:end="295:64"><name pos:start="293:5" pos:end="293:13">DPRINT_L2</name><argument_list pos:start="293:14" pos:end="295:64">(<argument pos:start="293:15" pos:end="293:53"><expr pos:start="293:15" pos:end="293:53"><literal type="string" pos:start="293:15" pos:end="293:53">"write %ub: addr[0x%04x] &lt;- %u(0x%x)\n"</literal></expr></argument>,

              <argument pos:start="295:15" pos:end="295:18"><expr pos:start="295:15" pos:end="295:18"><name pos:start="295:15" pos:end="295:18">size</name></expr></argument>, <argument pos:start="295:21" pos:end="295:31"><expr pos:start="295:21" pos:end="295:31"><operator pos:start="295:21" pos:end="295:21">(</operator><name pos:start="295:22" pos:end="295:24">int</name><operator pos:start="295:25" pos:end="295:25">)</operator><name pos:start="295:26" pos:end="295:31">offset</name></expr></argument>, <argument pos:start="295:34" pos:end="295:47"><expr pos:start="295:34" pos:end="295:47"><name pos:start="295:34" pos:end="295:38">value</name> <operator pos:start="295:40" pos:end="295:41">&gt;&gt;</operator> <name pos:start="295:43" pos:end="295:47">shift</name></expr></argument>, <argument pos:start="295:50" pos:end="295:63"><expr pos:start="295:50" pos:end="295:63"><name pos:start="295:50" pos:end="295:54">value</name> <operator pos:start="295:56" pos:end="295:57">&gt;&gt;</operator> <name pos:start="295:59" pos:end="295:63">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
