<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2546.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">do_alloc_cluster_offset</name><parameter_list pos:start="1:35" pos:end="3:53">(<parameter pos:start="1:36" pos:end="1:55"><decl pos:start="1:36" pos:end="1:55"><type pos:start="1:36" pos:end="1:55"><name pos:start="1:36" pos:end="1:51">BlockDriverState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">bs</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:78"><decl pos:start="1:58" pos:end="1:78"><type pos:start="1:58" pos:end="1:78"><name pos:start="1:58" pos:end="1:65">uint64_t</name></type> <name pos:start="1:67" pos:end="1:78">guest_offset</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:25"><decl pos:start="3:5" pos:end="3:25"><type pos:start="3:5" pos:end="3:25"><name pos:start="3:5" pos:end="3:12">uint64_t</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:25">host_offset</name></decl></parameter>, <parameter pos:start="3:28" pos:end="3:52"><decl pos:start="3:28" pos:end="3:52"><type pos:start="3:28" pos:end="3:52"><name pos:start="3:28" pos:end="3:35">unsigned</name> <name pos:start="3:37" pos:end="3:39">int</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:52">nb_clusters</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="65:1">{<block_content pos:start="7:5" pos:end="63:5">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="15:69"><expr pos:start="13:5" pos:end="15:68"><call pos:start="13:5" pos:end="15:68"><name pos:start="13:5" pos:end="13:40">trace_qcow2_do_alloc_clusters_offset</name><argument_list pos:start="13:41" pos:end="15:68">(<argument pos:start="13:42" pos:end="13:62"><expr pos:start="13:42" pos:end="13:62"><call pos:start="13:42" pos:end="13:62"><name pos:start="13:42" pos:end="13:60">qemu_coroutine_self</name><argument_list pos:start="13:61" pos:end="13:62">()</argument_list></call></expr></argument>, <argument pos:start="13:65" pos:end="13:76"><expr pos:start="13:65" pos:end="13:76"><name pos:start="13:65" pos:end="13:76">guest_offset</name></expr></argument>,

                                         <argument pos:start="15:42" pos:end="15:53"><expr pos:start="15:42" pos:end="15:53"><operator pos:start="15:42" pos:end="15:42">*</operator><name pos:start="15:43" pos:end="15:53">host_offset</name></expr></argument>, <argument pos:start="15:56" pos:end="15:67"><expr pos:start="15:56" pos:end="15:67"><operator pos:start="15:56" pos:end="15:56">*</operator><name pos:start="15:57" pos:end="15:67">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:61"><expr pos:start="19:5" pos:end="19:60"><name pos:start="19:5" pos:end="19:7">ret</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:60"><name pos:start="19:11" pos:end="19:29">handle_dependencies</name><argument_list pos:start="19:30" pos:end="19:60">(<argument pos:start="19:31" pos:end="19:32"><expr pos:start="19:31" pos:end="19:32"><name pos:start="19:31" pos:end="19:32">bs</name></expr></argument>, <argument pos:start="19:35" pos:end="19:46"><expr pos:start="19:35" pos:end="19:46"><name pos:start="19:35" pos:end="19:46">guest_offset</name></expr></argument>, <argument pos:start="19:49" pos:end="19:59"><expr pos:start="19:49" pos:end="19:59"><name pos:start="19:49" pos:end="19:59">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">&lt;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>)</condition> <block pos:start="21:18" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:19">

        <return pos:start="23:9" pos:end="23:19">return <expr pos:start="23:16" pos:end="23:18"><name pos:start="23:16" pos:end="23:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:31">/* Allocate new clusters */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:58"><expr pos:start="31:5" pos:end="31:57"><call pos:start="31:5" pos:end="31:57"><name pos:start="31:5" pos:end="31:34">trace_qcow2_cluster_alloc_phys</name><argument_list pos:start="31:35" pos:end="31:57">(<argument pos:start="31:36" pos:end="31:56"><expr pos:start="31:36" pos:end="31:56"><call pos:start="31:36" pos:end="31:56"><name pos:start="31:36" pos:end="31:54">qemu_coroutine_self</name><argument_list pos:start="31:55" pos:end="31:56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="63:5"><if pos:start="33:5" pos:end="49:5">if <condition pos:start="33:8" pos:end="33:26">(<expr pos:start="33:9" pos:end="33:25"><operator pos:start="33:9" pos:end="33:9">*</operator><name pos:start="33:10" pos:end="33:20">host_offset</name> <operator pos:start="33:22" pos:end="33:23">==</operator> <literal type="number" pos:start="33:25" pos:end="33:25">0</literal></expr>)</condition> <block pos:start="33:28" pos:end="49:5">{<block_content pos:start="35:9" pos:end="47:17">

        <decl_stmt pos:start="35:9" pos:end="37:69"><decl pos:start="35:9" pos:end="37:68"><type pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:15">int64_t</name></type> <name pos:start="35:17" pos:end="35:30">cluster_offset</name> <init pos:start="35:32" pos:end="37:68">=

            <expr pos:start="37:13" pos:end="37:68"><call pos:start="37:13" pos:end="37:68"><name pos:start="37:13" pos:end="37:32">qcow2_alloc_clusters</name><argument_list pos:start="37:33" pos:end="37:68">(<argument pos:start="37:34" pos:end="37:35"><expr pos:start="37:34" pos:end="37:35"><name pos:start="37:34" pos:end="37:35">bs</name></expr></argument>, <argument pos:start="37:38" pos:end="37:67"><expr pos:start="37:38" pos:end="37:67"><operator pos:start="37:38" pos:end="37:38">*</operator><name pos:start="37:39" pos:end="37:49">nb_clusters</name> <operator pos:start="37:51" pos:end="37:51">*</operator> <name pos:start="37:53" pos:end="37:67"><name pos:start="37:53" pos:end="37:53">s</name><operator pos:start="37:54" pos:end="37:55">-&gt;</operator><name pos:start="37:56" pos:end="37:67">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:31">(<expr pos:start="39:13" pos:end="39:30"><name pos:start="39:13" pos:end="39:26">cluster_offset</name> <operator pos:start="39:28" pos:end="39:28">&lt;</operator> <literal type="number" pos:start="39:30" pos:end="39:30">0</literal></expr>)</condition> <block pos:start="39:33" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:34">

            <return pos:start="41:13" pos:end="41:34">return <expr pos:start="41:20" pos:end="41:33"><name pos:start="41:20" pos:end="41:33">cluster_offset</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:38"><expr pos:start="45:9" pos:end="45:37"><operator pos:start="45:9" pos:end="45:9">*</operator><name pos:start="45:10" pos:end="45:20">host_offset</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <name pos:start="45:24" pos:end="45:37">cluster_offset</name></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:17">return <expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="63:5">else <block pos:start="49:12" pos:end="63:5">{<block_content pos:start="51:9" pos:end="61:17">

        <expr_stmt pos:start="51:9" pos:end="51:70"><expr pos:start="51:9" pos:end="51:69"><name pos:start="51:9" pos:end="51:11">ret</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="51:69"><name pos:start="51:15" pos:end="51:37">qcow2_alloc_clusters_at</name><argument_list pos:start="51:38" pos:end="51:69">(<argument pos:start="51:39" pos:end="51:40"><expr pos:start="51:39" pos:end="51:40"><name pos:start="51:39" pos:end="51:40">bs</name></expr></argument>, <argument pos:start="51:43" pos:end="51:54"><expr pos:start="51:43" pos:end="51:54"><operator pos:start="51:43" pos:end="51:43">*</operator><name pos:start="51:44" pos:end="51:54">host_offset</name></expr></argument>, <argument pos:start="51:57" pos:end="51:68"><expr pos:start="51:57" pos:end="51:68"><operator pos:start="51:57" pos:end="51:57">*</operator><name pos:start="51:58" pos:end="51:68">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:20">(<expr pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">&lt;</operator> <literal type="number" pos:start="53:19" pos:end="53:19">0</literal></expr>)</condition> <block pos:start="53:22" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:23">

            <return pos:start="55:13" pos:end="55:23">return <expr pos:start="55:20" pos:end="55:22"><name pos:start="55:20" pos:end="55:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:27"><expr pos:start="59:9" pos:end="59:26"><operator pos:start="59:9" pos:end="59:9">*</operator><name pos:start="59:10" pos:end="59:20">nb_clusters</name> <operator pos:start="59:22" pos:end="59:22">=</operator> <name pos:start="59:24" pos:end="59:26">ret</name></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:17">return <expr pos:start="61:16" pos:end="61:16"><literal type="number" pos:start="61:16" pos:end="61:16">0</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
