<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6857.c" pos:tabs="8"><function pos:start="1:1" pos:end="2543:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">disas_thumb2_insn</name><parameter_list pos:start="1:29" pos:end="1:82">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:40">CPUARMState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">env</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:62"><decl pos:start="1:48" pos:end="1:62"><type pos:start="1:48" pos:end="1:62"><name pos:start="1:48" pos:end="1:59">DisasContext</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">s</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:81"><decl pos:start="1:65" pos:end="1:81"><type pos:start="1:65" pos:end="1:81"><name pos:start="1:65" pos:end="1:72">uint16_t</name></type> <name pos:start="1:74" pos:end="1:81">insn_hw1</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="2543:1">{<block_content pos:start="5:5" pos:end="2541:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:17">insn</name></decl>, <decl pos:start="5:20" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:20" pos:end="5:22">imm</name></decl>, <decl pos:start="5:25" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:25" pos:end="5:29">shift</name></decl>, <decl pos:start="5:32" pos:end="5:37"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:32" pos:end="5:37">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:15">rd</name></decl>, <decl pos:start="7:18" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:18" pos:end="7:19">rn</name></decl>, <decl pos:start="7:22" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:22" pos:end="7:23">rm</name></decl>, <decl pos:start="7:26" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:26" pos:end="7:27">rs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">TCGv_i32</name></type> <name pos:start="9:14" pos:end="9:16">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">TCGv_i32</name></type> <name pos:start="11:14" pos:end="11:17">tmp2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">TCGv_i32</name></type> <name pos:start="13:14" pos:end="13:17">tmp3</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">TCGv_i32</name></type> <name pos:start="15:14" pos:end="15:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">TCGv_i64</name></type> <name pos:start="17:14" pos:end="17:18">tmp64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:11"><decl pos:start="19:5" pos:end="19:10"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:10">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">shiftop</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:14"><decl pos:start="23:5" pos:end="23:13"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:13">conds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">logic_cc</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="109:5"><if pos:start="29:5" pos:end="109:5">if <condition pos:start="29:8" pos:end="31:47">(<expr pos:start="29:9" pos:end="31:46"><operator pos:start="29:9" pos:end="29:9">!</operator><operator pos:start="29:10" pos:end="29:10">(</operator><call pos:start="29:11" pos:end="29:47"><name pos:start="29:11" pos:end="29:24">arm_dc_feature</name><argument_list pos:start="29:25" pos:end="29:47">(<argument pos:start="29:26" pos:end="29:26"><expr pos:start="29:26" pos:end="29:26"><name pos:start="29:26" pos:end="29:26">s</name></expr></argument>, <argument pos:start="29:29" pos:end="29:46"><expr pos:start="29:29" pos:end="29:46"><name pos:start="29:29" pos:end="29:46">ARM_FEATURE_THUMB2</name></expr></argument>)</argument_list></call>

          <operator pos:start="31:11" pos:end="31:12">||</operator> <call pos:start="31:14" pos:end="31:45"><name pos:start="31:14" pos:end="31:27">arm_dc_feature</name><argument_list pos:start="31:28" pos:end="31:45">(<argument pos:start="31:29" pos:end="31:29"><expr pos:start="31:29" pos:end="31:29"><name pos:start="31:29" pos:end="31:29">s</name></expr></argument>, <argument pos:start="31:32" pos:end="31:44"><expr pos:start="31:32" pos:end="31:44"><name pos:start="31:32" pos:end="31:44">ARM_FEATURE_M</name></expr></argument>)</argument_list></call><operator pos:start="31:46" pos:end="31:46">)</operator></expr>)</condition> <block pos:start="31:49" pos:end="109:5">{<block_content pos:start="37:9" pos:end="105:9">

        <comment type="block" pos:start="33:9" pos:end="35:74">/* Thumb-1 cores may need to treat bl and blx as a pair of

           16-bit instructions to get correct prefetch abort behavior.  */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:24"><expr pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:12">insn</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <name pos:start="37:16" pos:end="37:23">insn_hw1</name></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="65:9"><if pos:start="39:9" pos:end="65:9">if <condition pos:start="39:12" pos:end="39:36">(<expr pos:start="39:13" pos:end="39:35"><operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:17">insn</name> <operator pos:start="39:19" pos:end="39:19">&amp;</operator> <operator pos:start="39:21" pos:end="39:21">(</operator><literal type="number" pos:start="39:22" pos:end="39:22">1</literal> <operator pos:start="39:24" pos:end="39:25">&lt;&lt;</operator> <literal type="number" pos:start="39:27" pos:end="39:28">12</literal><operator pos:start="39:29" pos:end="39:29">)</operator><operator pos:start="39:30" pos:end="39:30">)</operator> <operator pos:start="39:32" pos:end="39:33">==</operator> <literal type="number" pos:start="39:35" pos:end="39:35">0</literal></expr>)</condition> <block pos:start="39:38" pos:end="65:9">{<block_content pos:start="41:13" pos:end="63:21">

            <expr_stmt pos:start="41:13" pos:end="41:20"><expr pos:start="41:13" pos:end="41:19"><call pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:16">ARCH</name><argument_list pos:start="41:17" pos:end="41:19">(<argument pos:start="41:18" pos:end="41:18"><expr pos:start="41:18" pos:end="41:18"><literal type="number" pos:start="41:18" pos:end="41:18">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="43:13" pos:end="43:38">/* Second half of blx.  */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:43"><expr pos:start="45:13" pos:end="45:42"><name pos:start="45:13" pos:end="45:18">offset</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <operator pos:start="45:22" pos:end="45:22">(</operator><operator pos:start="45:23" pos:end="45:23">(</operator><name pos:start="45:24" pos:end="45:27">insn</name> <operator pos:start="45:29" pos:end="45:29">&amp;</operator> <literal type="number" pos:start="45:31" pos:end="45:35">0x7ff</literal><operator pos:start="45:36" pos:end="45:36">)</operator> <operator pos:start="45:38" pos:end="45:39">&lt;&lt;</operator> <literal type="number" pos:start="45:41" pos:end="45:41">1</literal><operator pos:start="45:42" pos:end="45:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:34"><expr pos:start="47:13" pos:end="47:33"><name pos:start="47:13" pos:end="47:15">tmp</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:33"><name pos:start="47:19" pos:end="47:26">load_reg</name><argument_list pos:start="47:27" pos:end="47:33">(<argument pos:start="47:28" pos:end="47:28"><expr pos:start="47:28" pos:end="47:28"><name pos:start="47:28" pos:end="47:28">s</name></expr></argument>, <argument pos:start="47:31" pos:end="47:32"><expr pos:start="47:31" pos:end="47:32"><literal type="number" pos:start="47:31" pos:end="47:32">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:47"><expr pos:start="49:13" pos:end="49:46"><call pos:start="49:13" pos:end="49:46"><name pos:start="49:13" pos:end="49:28">tcg_gen_addi_i32</name><argument_list pos:start="49:29" pos:end="49:46">(<argument pos:start="49:30" pos:end="49:32"><expr pos:start="49:30" pos:end="49:32"><name pos:start="49:30" pos:end="49:32">tmp</name></expr></argument>, <argument pos:start="49:35" pos:end="49:37"><expr pos:start="49:35" pos:end="49:37"><name pos:start="49:35" pos:end="49:37">tmp</name></expr></argument>, <argument pos:start="49:40" pos:end="49:45"><expr pos:start="49:40" pos:end="49:45"><name pos:start="49:40" pos:end="49:45">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:51"><expr pos:start="51:13" pos:end="51:50"><call pos:start="51:13" pos:end="51:50"><name pos:start="51:13" pos:end="51:28">tcg_gen_andi_i32</name><argument_list pos:start="51:29" pos:end="51:50">(<argument pos:start="51:30" pos:end="51:32"><expr pos:start="51:30" pos:end="51:32"><name pos:start="51:30" pos:end="51:32">tmp</name></expr></argument>, <argument pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><name pos:start="51:35" pos:end="51:37">tmp</name></expr></argument>, <argument pos:start="51:40" pos:end="51:49"><expr pos:start="51:40" pos:end="51:49"><literal type="number" pos:start="51:40" pos:end="51:49">0xfffffffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="55:13" pos:end="55:38"><expr pos:start="55:13" pos:end="55:37"><name pos:start="55:13" pos:end="55:16">tmp2</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <call pos:start="55:20" pos:end="55:37"><name pos:start="55:20" pos:end="55:35">tcg_temp_new_i32</name><argument_list pos:start="55:36" pos:end="55:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:46"><expr pos:start="57:13" pos:end="57:45"><call pos:start="57:13" pos:end="57:45"><name pos:start="57:13" pos:end="57:28">tcg_gen_movi_i32</name><argument_list pos:start="57:29" pos:end="57:45">(<argument pos:start="57:30" pos:end="57:33"><expr pos:start="57:30" pos:end="57:33"><name pos:start="57:30" pos:end="57:33">tmp2</name></expr></argument>, <argument pos:start="57:36" pos:end="57:44"><expr pos:start="57:36" pos:end="57:44"><name pos:start="57:36" pos:end="57:40"><name pos:start="57:36" pos:end="57:36">s</name><operator pos:start="57:37" pos:end="57:38">-&gt;</operator><name pos:start="57:39" pos:end="57:40">pc</name></name> <operator pos:start="57:42" pos:end="57:42">|</operator> <literal type="number" pos:start="57:44" pos:end="57:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:35"><expr pos:start="59:13" pos:end="59:34"><call pos:start="59:13" pos:end="59:34"><name pos:start="59:13" pos:end="59:21">store_reg</name><argument_list pos:start="59:22" pos:end="59:34">(<argument pos:start="59:23" pos:end="59:23"><expr pos:start="59:23" pos:end="59:23"><name pos:start="59:23" pos:end="59:23">s</name></expr></argument>, <argument pos:start="59:26" pos:end="59:27"><expr pos:start="59:26" pos:end="59:27"><literal type="number" pos:start="59:26" pos:end="59:27">14</literal></expr></argument>, <argument pos:start="59:30" pos:end="59:33"><expr pos:start="59:30" pos:end="59:33"><name pos:start="59:30" pos:end="59:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:27"><expr pos:start="61:13" pos:end="61:26"><call pos:start="61:13" pos:end="61:26"><name pos:start="61:13" pos:end="61:18">gen_bx</name><argument_list pos:start="61:19" pos:end="61:26">(<argument pos:start="61:20" pos:end="61:20"><expr pos:start="61:20" pos:end="61:20"><name pos:start="61:20" pos:end="61:20">s</name></expr></argument>, <argument pos:start="61:23" pos:end="61:25"><expr pos:start="61:23" pos:end="61:25"><name pos:start="61:23" pos:end="61:25">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="63:13" pos:end="63:21">return <expr pos:start="63:20" pos:end="63:20"><literal type="number" pos:start="63:20" pos:end="63:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="89:9"><if pos:start="67:9" pos:end="89:9">if <condition pos:start="67:12" pos:end="67:29">(<expr pos:start="67:13" pos:end="67:28"><name pos:start="67:13" pos:end="67:16">insn</name> <operator pos:start="67:18" pos:end="67:18">&amp;</operator> <operator pos:start="67:20" pos:end="67:20">(</operator><literal type="number" pos:start="67:21" pos:end="67:21">1</literal> <operator pos:start="67:23" pos:end="67:24">&lt;&lt;</operator> <literal type="number" pos:start="67:26" pos:end="67:27">11</literal><operator pos:start="67:28" pos:end="67:28">)</operator></expr>)</condition> <block pos:start="67:31" pos:end="89:9">{<block_content pos:start="71:13" pos:end="87:21">

            <comment type="block" pos:start="69:13" pos:end="69:37">/* Second half of bl.  */</comment>

            <expr_stmt pos:start="71:13" pos:end="71:47"><expr pos:start="71:13" pos:end="71:46"><name pos:start="71:13" pos:end="71:18">offset</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <operator pos:start="71:22" pos:end="71:22">(</operator><operator pos:start="71:23" pos:end="71:23">(</operator><name pos:start="71:24" pos:end="71:27">insn</name> <operator pos:start="71:29" pos:end="71:29">&amp;</operator> <literal type="number" pos:start="71:31" pos:end="71:35">0x7ff</literal><operator pos:start="71:36" pos:end="71:36">)</operator> <operator pos:start="71:38" pos:end="71:39">&lt;&lt;</operator> <literal type="number" pos:start="71:41" pos:end="71:41">1</literal><operator pos:start="71:42" pos:end="71:42">)</operator> <operator pos:start="71:44" pos:end="71:44">|</operator> <literal type="number" pos:start="71:46" pos:end="71:46">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:34"><expr pos:start="73:13" pos:end="73:33"><name pos:start="73:13" pos:end="73:15">tmp</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:33"><name pos:start="73:19" pos:end="73:26">load_reg</name><argument_list pos:start="73:27" pos:end="73:33">(<argument pos:start="73:28" pos:end="73:28"><expr pos:start="73:28" pos:end="73:28"><name pos:start="73:28" pos:end="73:28">s</name></expr></argument>, <argument pos:start="73:31" pos:end="73:32"><expr pos:start="73:31" pos:end="73:32"><literal type="number" pos:start="73:31" pos:end="73:32">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:47"><expr pos:start="75:13" pos:end="75:46"><call pos:start="75:13" pos:end="75:46"><name pos:start="75:13" pos:end="75:28">tcg_gen_addi_i32</name><argument_list pos:start="75:29" pos:end="75:46">(<argument pos:start="75:30" pos:end="75:32"><expr pos:start="75:30" pos:end="75:32"><name pos:start="75:30" pos:end="75:32">tmp</name></expr></argument>, <argument pos:start="75:35" pos:end="75:37"><expr pos:start="75:35" pos:end="75:37"><name pos:start="75:35" pos:end="75:37">tmp</name></expr></argument>, <argument pos:start="75:40" pos:end="75:45"><expr pos:start="75:40" pos:end="75:45"><name pos:start="75:40" pos:end="75:45">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="79:13" pos:end="79:38"><expr pos:start="79:13" pos:end="79:37"><name pos:start="79:13" pos:end="79:16">tmp2</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <call pos:start="79:20" pos:end="79:37"><name pos:start="79:20" pos:end="79:35">tcg_temp_new_i32</name><argument_list pos:start="79:36" pos:end="79:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:46"><expr pos:start="81:13" pos:end="81:45"><call pos:start="81:13" pos:end="81:45"><name pos:start="81:13" pos:end="81:28">tcg_gen_movi_i32</name><argument_list pos:start="81:29" pos:end="81:45">(<argument pos:start="81:30" pos:end="81:33"><expr pos:start="81:30" pos:end="81:33"><name pos:start="81:30" pos:end="81:33">tmp2</name></expr></argument>, <argument pos:start="81:36" pos:end="81:44"><expr pos:start="81:36" pos:end="81:44"><name pos:start="81:36" pos:end="81:40"><name pos:start="81:36" pos:end="81:36">s</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:40">pc</name></name> <operator pos:start="81:42" pos:end="81:42">|</operator> <literal type="number" pos:start="81:44" pos:end="81:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:35"><expr pos:start="83:13" pos:end="83:34"><call pos:start="83:13" pos:end="83:34"><name pos:start="83:13" pos:end="83:21">store_reg</name><argument_list pos:start="83:22" pos:end="83:34">(<argument pos:start="83:23" pos:end="83:23"><expr pos:start="83:23" pos:end="83:23"><name pos:start="83:23" pos:end="83:23">s</name></expr></argument>, <argument pos:start="83:26" pos:end="83:27"><expr pos:start="83:26" pos:end="83:27"><literal type="number" pos:start="83:26" pos:end="83:27">14</literal></expr></argument>, <argument pos:start="83:30" pos:end="83:33"><expr pos:start="83:30" pos:end="83:33"><name pos:start="83:30" pos:end="83:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:27"><expr pos:start="85:13" pos:end="85:26"><call pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:18">gen_bx</name><argument_list pos:start="85:19" pos:end="85:26">(<argument pos:start="85:20" pos:end="85:20"><expr pos:start="85:20" pos:end="85:20"><name pos:start="85:20" pos:end="85:20">s</name></expr></argument>, <argument pos:start="85:23" pos:end="85:25"><expr pos:start="85:23" pos:end="85:25"><name pos:start="85:23" pos:end="85:25">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:21">return <expr pos:start="87:20" pos:end="87:20"><literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="105:9"><if pos:start="91:9" pos:end="105:9">if <condition pos:start="91:12" pos:end="91:45">(<expr pos:start="91:13" pos:end="91:44"><operator pos:start="91:13" pos:end="91:13">(</operator><name pos:start="91:14" pos:end="91:18"><name pos:start="91:14" pos:end="91:14">s</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:18">pc</name></name> <operator pos:start="91:20" pos:end="91:20">&amp;</operator> <operator pos:start="91:22" pos:end="91:22">~</operator><name pos:start="91:23" pos:end="91:38">TARGET_PAGE_MASK</name><operator pos:start="91:39" pos:end="91:39">)</operator> <operator pos:start="91:41" pos:end="91:42">==</operator> <literal type="number" pos:start="91:44" pos:end="91:44">0</literal></expr>)</condition> <block pos:start="91:47" pos:end="105:9">{<block_content pos:start="99:13" pos:end="103:21">

            <comment type="block" pos:start="93:13" pos:end="97:34">/* Instruction spans a page boundary.  Implement it as two

               16-bit instructions in case the second half causes an

               prefetch abort.  */</comment>

            <expr_stmt pos:start="99:13" pos:end="99:48"><expr pos:start="99:13" pos:end="99:47"><name pos:start="99:13" pos:end="99:18">offset</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <operator pos:start="99:22" pos:end="99:22">(</operator><operator pos:start="99:23" pos:end="99:23">(</operator><name pos:start="99:24" pos:end="99:30">int32_t</name><operator pos:start="99:31" pos:end="99:31">)</operator><name pos:start="99:32" pos:end="99:35">insn</name> <operator pos:start="99:37" pos:end="99:38">&lt;&lt;</operator> <literal type="number" pos:start="99:40" pos:end="99:41">21</literal><operator pos:start="99:42" pos:end="99:42">)</operator> <operator pos:start="99:44" pos:end="99:45">&gt;&gt;</operator> <literal type="number" pos:start="99:47" pos:end="99:47">9</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:60"><expr pos:start="101:13" pos:end="101:59"><call pos:start="101:13" pos:end="101:59"><name pos:start="101:13" pos:end="101:28">tcg_gen_movi_i32</name><argument_list pos:start="101:29" pos:end="101:59">(<argument pos:start="101:30" pos:end="101:38"><expr pos:start="101:30" pos:end="101:38"><name pos:start="101:30" pos:end="101:38"><name pos:start="101:30" pos:end="101:34">cpu_R</name><index pos:start="101:35" pos:end="101:38">[<expr pos:start="101:36" pos:end="101:37"><literal type="number" pos:start="101:36" pos:end="101:37">14</literal></expr>]</index></name></expr></argument>, <argument pos:start="101:41" pos:end="101:58"><expr pos:start="101:41" pos:end="101:58"><name pos:start="101:41" pos:end="101:45"><name pos:start="101:41" pos:end="101:41">s</name><operator pos:start="101:42" pos:end="101:43">-&gt;</operator><name pos:start="101:44" pos:end="101:45">pc</name></name> <operator pos:start="101:47" pos:end="101:47">+</operator> <literal type="number" pos:start="101:49" pos:end="101:51">2</literal> <operator pos:start="101:51" pos:end="101:51">+</operator> <name pos:start="101:53" pos:end="101:58">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:21">return <expr pos:start="103:20" pos:end="103:20"><literal type="number" pos:start="103:20" pos:end="103:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="107:9" pos:end="107:45">/* Fall through to 32-bit decode.  */</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:52"><expr pos:start="113:5" pos:end="113:51"><name pos:start="113:5" pos:end="113:8">insn</name> <operator pos:start="113:10" pos:end="113:10">=</operator> <call pos:start="113:12" pos:end="113:51"><name pos:start="113:12" pos:end="113:24">arm_lduw_code</name><argument_list pos:start="113:25" pos:end="113:51">(<argument pos:start="113:26" pos:end="113:28"><expr pos:start="113:26" pos:end="113:28"><name pos:start="113:26" pos:end="113:28">env</name></expr></argument>, <argument pos:start="113:31" pos:end="113:35"><expr pos:start="113:31" pos:end="113:35"><name pos:start="113:31" pos:end="113:35"><name pos:start="113:31" pos:end="113:31">s</name><operator pos:start="113:32" pos:end="113:33">-&gt;</operator><name pos:start="113:34" pos:end="113:35">pc</name></name></expr></argument>, <argument pos:start="113:38" pos:end="113:50"><expr pos:start="113:38" pos:end="113:50"><name pos:start="113:38" pos:end="113:50"><name pos:start="113:38" pos:end="113:38">s</name><operator pos:start="113:39" pos:end="113:40">-&gt;</operator><name pos:start="113:41" pos:end="113:50">bswap_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:15"><expr pos:start="115:5" pos:end="115:14"><name pos:start="115:5" pos:end="115:9"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:9">pc</name></name> <operator pos:start="115:11" pos:end="115:12">+=</operator> <literal type="number" pos:start="115:14" pos:end="115:14">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:37"><expr pos:start="117:5" pos:end="117:36"><name pos:start="117:5" pos:end="117:8">insn</name> <operator pos:start="117:10" pos:end="117:11">|=</operator> <operator pos:start="117:13" pos:end="117:13">(</operator><name pos:start="117:14" pos:end="117:21">uint32_t</name><operator pos:start="117:22" pos:end="117:22">)</operator><name pos:start="117:23" pos:end="117:30">insn_hw1</name> <operator pos:start="117:32" pos:end="117:33">&lt;&lt;</operator> <literal type="number" pos:start="117:35" pos:end="117:36">16</literal></expr>;</expr_stmt>



    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:42">(<expr pos:start="121:9" pos:end="121:41"><operator pos:start="121:9" pos:end="121:9">(</operator><name pos:start="121:10" pos:end="121:13">insn</name> <operator pos:start="121:15" pos:end="121:15">&amp;</operator> <literal type="number" pos:start="121:17" pos:end="121:26">0xf800e800</literal><operator pos:start="121:27" pos:end="121:27">)</operator> <operator pos:start="121:29" pos:end="121:30">!=</operator> <literal type="number" pos:start="121:32" pos:end="121:41">0xf000e800</literal></expr>)</condition> <block pos:start="121:44" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:18">

        <expr_stmt pos:start="123:9" pos:end="123:18"><expr pos:start="123:9" pos:end="123:17"><call pos:start="123:9" pos:end="123:17"><name pos:start="123:9" pos:end="123:12">ARCH</name><argument_list pos:start="123:13" pos:end="123:17">(<argument pos:start="123:14" pos:end="123:16"><expr pos:start="123:14" pos:end="123:16"><literal type="number" pos:start="123:14" pos:end="123:16">6T2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:28"><expr pos:start="129:5" pos:end="129:27"><name pos:start="129:5" pos:end="129:6">rn</name> <operator pos:start="129:8" pos:end="129:8">=</operator> <operator pos:start="129:10" pos:end="129:10">(</operator><name pos:start="129:11" pos:end="129:14">insn</name> <operator pos:start="129:16" pos:end="129:17">&gt;&gt;</operator> <literal type="number" pos:start="129:19" pos:end="129:20">16</literal><operator pos:start="129:21" pos:end="129:21">)</operator> <operator pos:start="129:23" pos:end="129:23">&amp;</operator> <literal type="number" pos:start="129:25" pos:end="129:27">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:28"><expr pos:start="131:5" pos:end="131:27"><name pos:start="131:5" pos:end="131:6">rs</name> <operator pos:start="131:8" pos:end="131:8">=</operator> <operator pos:start="131:10" pos:end="131:10">(</operator><name pos:start="131:11" pos:end="131:14">insn</name> <operator pos:start="131:16" pos:end="131:17">&gt;&gt;</operator> <literal type="number" pos:start="131:19" pos:end="131:20">12</literal><operator pos:start="131:21" pos:end="131:21">)</operator> <operator pos:start="131:23" pos:end="131:23">&amp;</operator> <literal type="number" pos:start="131:25" pos:end="131:27">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:27"><expr pos:start="133:5" pos:end="133:26"><name pos:start="133:5" pos:end="133:6">rd</name> <operator pos:start="133:8" pos:end="133:8">=</operator> <operator pos:start="133:10" pos:end="133:10">(</operator><name pos:start="133:11" pos:end="133:14">insn</name> <operator pos:start="133:16" pos:end="133:17">&gt;&gt;</operator> <literal type="number" pos:start="133:19" pos:end="133:19">8</literal><operator pos:start="133:20" pos:end="133:20">)</operator> <operator pos:start="133:22" pos:end="133:22">&amp;</operator> <literal type="number" pos:start="133:24" pos:end="133:26">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:20"><expr pos:start="135:5" pos:end="135:19"><name pos:start="135:5" pos:end="135:6">rm</name> <operator pos:start="135:8" pos:end="135:8">=</operator> <name pos:start="135:10" pos:end="135:13">insn</name> <operator pos:start="135:15" pos:end="135:15">&amp;</operator> <literal type="number" pos:start="135:17" pos:end="135:19">0xf</literal></expr>;</expr_stmt>

    <switch pos:start="137:5" pos:end="2535:5">switch <condition pos:start="137:12" pos:end="137:31">(<expr pos:start="137:13" pos:end="137:30"><operator pos:start="137:13" pos:end="137:13">(</operator><name pos:start="137:14" pos:end="137:17">insn</name> <operator pos:start="137:19" pos:end="137:20">&gt;&gt;</operator> <literal type="number" pos:start="137:22" pos:end="137:23">25</literal><operator pos:start="137:24" pos:end="137:24">)</operator> <operator pos:start="137:26" pos:end="137:26">&amp;</operator> <literal type="number" pos:start="137:28" pos:end="137:30">0xf</literal></expr>)</condition> <block pos:start="137:33" pos:end="2535:5">{<block_content pos:start="139:5" pos:end="2533:24">

    <case pos:start="139:5" pos:end="139:11">case <expr pos:start="139:10" pos:end="139:10"><literal type="number" pos:start="139:10" pos:end="139:10">0</literal></expr>:</case> <case pos:start="139:13" pos:end="139:19">case <expr pos:start="139:18" pos:end="139:18"><literal type="number" pos:start="139:18" pos:end="139:18">1</literal></expr>:</case> <case pos:start="139:21" pos:end="139:27">case <expr pos:start="139:26" pos:end="139:26"><literal type="number" pos:start="139:26" pos:end="139:26">2</literal></expr>:</case> <case pos:start="139:29" pos:end="139:35">case <expr pos:start="139:34" pos:end="139:34"><literal type="number" pos:start="139:34" pos:end="139:34">3</literal></expr>:</case>

        <comment type="block" pos:start="141:9" pos:end="141:57">/* 16-bit instructions.  Should never happen.  */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:16"><expr pos:start="143:9" pos:end="143:15"><call pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:13">abort</name><argument_list pos:start="143:14" pos:end="143:15">()</argument_list></call></expr>;</expr_stmt>

    <case pos:start="145:5" pos:end="145:11">case <expr pos:start="145:10" pos:end="145:10"><literal type="number" pos:start="145:10" pos:end="145:10">4</literal></expr>:</case>

        <if_stmt pos:start="147:9" pos:end="621:9"><if pos:start="147:9" pos:end="443:9">if <condition pos:start="147:12" pos:end="147:29">(<expr pos:start="147:13" pos:end="147:28"><name pos:start="147:13" pos:end="147:16">insn</name> <operator pos:start="147:18" pos:end="147:18">&amp;</operator> <operator pos:start="147:20" pos:end="147:20">(</operator><literal type="number" pos:start="147:21" pos:end="147:21">1</literal> <operator pos:start="147:23" pos:end="147:24">&lt;&lt;</operator> <literal type="number" pos:start="147:26" pos:end="147:27">22</literal><operator pos:start="147:28" pos:end="147:28">)</operator></expr>)</condition> <block pos:start="147:31" pos:end="443:9">{<block_content pos:start="151:13" pos:end="441:13">

            <comment type="block" pos:start="149:13" pos:end="149:50">/* Other load/store, table branch.  */</comment>

            <if_stmt pos:start="151:13" pos:end="441:13"><if pos:start="151:13" pos:end="237:13">if <condition pos:start="151:16" pos:end="151:34">(<expr pos:start="151:17" pos:end="151:33"><name pos:start="151:17" pos:end="151:20">insn</name> <operator pos:start="151:22" pos:end="151:22">&amp;</operator> <literal type="number" pos:start="151:24" pos:end="151:33">0x01200000</literal></expr>)</condition> <block pos:start="151:36" pos:end="237:13">{<block_content pos:start="155:17" pos:end="235:17">

                <comment type="block" pos:start="153:17" pos:end="153:45">/* Load/store doubleword.  */</comment>

                <if_stmt pos:start="155:17" pos:end="165:17"><if pos:start="155:17" pos:end="161:17">if <condition pos:start="155:20" pos:end="155:29">(<expr pos:start="155:21" pos:end="155:28"><name pos:start="155:21" pos:end="155:22">rn</name> <operator pos:start="155:24" pos:end="155:25">==</operator> <literal type="number" pos:start="155:27" pos:end="155:28">15</literal></expr>)</condition> <block pos:start="155:31" pos:end="161:17">{<block_content pos:start="157:21" pos:end="159:55">

                    <expr_stmt pos:start="157:21" pos:end="157:46"><expr pos:start="157:21" pos:end="157:45"><name pos:start="157:21" pos:end="157:24">addr</name> <operator pos:start="157:26" pos:end="157:26">=</operator> <call pos:start="157:28" pos:end="157:45"><name pos:start="157:28" pos:end="157:43">tcg_temp_new_i32</name><argument_list pos:start="157:44" pos:end="157:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="159:21" pos:end="159:55"><expr pos:start="159:21" pos:end="159:54"><call pos:start="159:21" pos:end="159:54"><name pos:start="159:21" pos:end="159:36">tcg_gen_movi_i32</name><argument_list pos:start="159:37" pos:end="159:54">(<argument pos:start="159:38" pos:end="159:41"><expr pos:start="159:38" pos:end="159:41"><name pos:start="159:38" pos:end="159:41">addr</name></expr></argument>, <argument pos:start="159:44" pos:end="159:53"><expr pos:start="159:44" pos:end="159:53"><name pos:start="159:44" pos:end="159:48"><name pos:start="159:44" pos:end="159:44">s</name><operator pos:start="159:45" pos:end="159:46">-&gt;</operator><name pos:start="159:47" pos:end="159:48">pc</name></name> <operator pos:start="159:50" pos:end="159:50">&amp;</operator> <operator pos:start="159:52" pos:end="159:52">~</operator><literal type="number" pos:start="159:53" pos:end="159:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="161:19" pos:end="165:17">else <block pos:start="161:24" pos:end="165:17">{<block_content pos:start="163:21" pos:end="163:43">

                    <expr_stmt pos:start="163:21" pos:end="163:43"><expr pos:start="163:21" pos:end="163:42"><name pos:start="163:21" pos:end="163:24">addr</name> <operator pos:start="163:26" pos:end="163:26">=</operator> <call pos:start="163:28" pos:end="163:42"><name pos:start="163:28" pos:end="163:35">load_reg</name><argument_list pos:start="163:36" pos:end="163:42">(<argument pos:start="163:37" pos:end="163:37"><expr pos:start="163:37" pos:end="163:37"><name pos:start="163:37" pos:end="163:37">s</name></expr></argument>, <argument pos:start="163:40" pos:end="163:41"><expr pos:start="163:40" pos:end="163:41"><name pos:start="163:40" pos:end="163:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:43"><expr pos:start="167:17" pos:end="167:42"><name pos:start="167:17" pos:end="167:22">offset</name> <operator pos:start="167:24" pos:end="167:24">=</operator> <operator pos:start="167:26" pos:end="167:26">(</operator><name pos:start="167:27" pos:end="167:30">insn</name> <operator pos:start="167:32" pos:end="167:32">&amp;</operator> <literal type="number" pos:start="167:34" pos:end="167:37">0xff</literal><operator pos:start="167:38" pos:end="167:38">)</operator> <operator pos:start="167:40" pos:end="167:40">*</operator> <literal type="number" pos:start="167:42" pos:end="167:42">4</literal></expr>;</expr_stmt>

                <if_stmt pos:start="169:17" pos:end="171:37"><if pos:start="169:17" pos:end="171:37">if <condition pos:start="169:20" pos:end="169:44">(<expr pos:start="169:21" pos:end="169:43"><operator pos:start="169:21" pos:end="169:21">(</operator><name pos:start="169:22" pos:end="169:25">insn</name> <operator pos:start="169:27" pos:end="169:27">&amp;</operator> <operator pos:start="169:29" pos:end="169:29">(</operator><literal type="number" pos:start="169:30" pos:end="169:30">1</literal> <operator pos:start="169:32" pos:end="169:33">&lt;&lt;</operator> <literal type="number" pos:start="169:35" pos:end="169:36">23</literal><operator pos:start="169:37" pos:end="169:37">)</operator><operator pos:start="169:38" pos:end="169:38">)</operator> <operator pos:start="169:40" pos:end="169:41">==</operator> <literal type="number" pos:start="169:43" pos:end="169:43">0</literal></expr>)</condition><block type="pseudo" pos:start="171:21" pos:end="171:37"><block_content pos:start="171:21" pos:end="171:37">

                    <expr_stmt pos:start="171:21" pos:end="171:37"><expr pos:start="171:21" pos:end="171:36"><name pos:start="171:21" pos:end="171:26">offset</name> <operator pos:start="171:28" pos:end="171:28">=</operator> <operator pos:start="171:30" pos:end="171:30">-</operator><name pos:start="171:31" pos:end="171:36">offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="173:17" pos:end="179:17"><if pos:start="173:17" pos:end="179:17">if <condition pos:start="173:20" pos:end="173:37">(<expr pos:start="173:21" pos:end="173:36"><name pos:start="173:21" pos:end="173:24">insn</name> <operator pos:start="173:26" pos:end="173:26">&amp;</operator> <operator pos:start="173:28" pos:end="173:28">(</operator><literal type="number" pos:start="173:29" pos:end="173:29">1</literal> <operator pos:start="173:31" pos:end="173:32">&lt;&lt;</operator> <literal type="number" pos:start="173:34" pos:end="173:35">24</literal><operator pos:start="173:36" pos:end="173:36">)</operator></expr>)</condition> <block pos:start="173:39" pos:end="179:17">{<block_content pos:start="175:21" pos:end="177:31">

                    <expr_stmt pos:start="175:21" pos:end="175:57"><expr pos:start="175:21" pos:end="175:56"><call pos:start="175:21" pos:end="175:56"><name pos:start="175:21" pos:end="175:36">tcg_gen_addi_i32</name><argument_list pos:start="175:37" pos:end="175:56">(<argument pos:start="175:38" pos:end="175:41"><expr pos:start="175:38" pos:end="175:41"><name pos:start="175:38" pos:end="175:41">addr</name></expr></argument>, <argument pos:start="175:44" pos:end="175:47"><expr pos:start="175:44" pos:end="175:47"><name pos:start="175:44" pos:end="175:47">addr</name></expr></argument>, <argument pos:start="175:50" pos:end="175:55"><expr pos:start="175:50" pos:end="175:55"><name pos:start="175:50" pos:end="175:55">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="177:21" pos:end="177:31"><expr pos:start="177:21" pos:end="177:30"><name pos:start="177:21" pos:end="177:26">offset</name> <operator pos:start="177:28" pos:end="177:28">=</operator> <literal type="number" pos:start="177:30" pos:end="177:30">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="181:17" pos:end="217:17"><if pos:start="181:17" pos:end="199:17">if <condition pos:start="181:20" pos:end="181:37">(<expr pos:start="181:21" pos:end="181:36"><name pos:start="181:21" pos:end="181:24">insn</name> <operator pos:start="181:26" pos:end="181:26">&amp;</operator> <operator pos:start="181:28" pos:end="181:28">(</operator><literal type="number" pos:start="181:29" pos:end="181:29">1</literal> <operator pos:start="181:31" pos:end="181:32">&lt;&lt;</operator> <literal type="number" pos:start="181:34" pos:end="181:35">20</literal><operator pos:start="181:36" pos:end="181:36">)</operator></expr>)</condition> <block pos:start="181:39" pos:end="199:17">{<block_content pos:start="185:21" pos:end="197:42">

                    <comment type="block" pos:start="183:21" pos:end="183:30">/* ldrd */</comment>

                    <expr_stmt pos:start="185:21" pos:end="185:45"><expr pos:start="185:21" pos:end="185:44"><name pos:start="185:21" pos:end="185:23">tmp</name> <operator pos:start="185:25" pos:end="185:25">=</operator> <call pos:start="185:27" pos:end="185:44"><name pos:start="185:27" pos:end="185:42">tcg_temp_new_i32</name><argument_list pos:start="185:43" pos:end="185:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="187:21" pos:end="187:64"><expr pos:start="187:21" pos:end="187:63"><call pos:start="187:21" pos:end="187:63"><name pos:start="187:21" pos:end="187:34">gen_aa32_ld32u</name><argument_list pos:start="187:35" pos:end="187:63">(<argument pos:start="187:36" pos:end="187:38"><expr pos:start="187:36" pos:end="187:38"><name pos:start="187:36" pos:end="187:38">tmp</name></expr></argument>, <argument pos:start="187:41" pos:end="187:44"><expr pos:start="187:41" pos:end="187:44"><name pos:start="187:41" pos:end="187:44">addr</name></expr></argument>, <argument pos:start="187:47" pos:end="187:62"><expr pos:start="187:47" pos:end="187:62"><call pos:start="187:47" pos:end="187:62"><name pos:start="187:47" pos:end="187:59">get_mem_index</name><argument_list pos:start="187:60" pos:end="187:62">(<argument pos:start="187:61" pos:end="187:61"><expr pos:start="187:61" pos:end="187:61"><name pos:start="187:61" pos:end="187:61">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="189:21" pos:end="189:42"><expr pos:start="189:21" pos:end="189:41"><call pos:start="189:21" pos:end="189:41"><name pos:start="189:21" pos:end="189:29">store_reg</name><argument_list pos:start="189:30" pos:end="189:41">(<argument pos:start="189:31" pos:end="189:31"><expr pos:start="189:31" pos:end="189:31"><name pos:start="189:31" pos:end="189:31">s</name></expr></argument>, <argument pos:start="189:34" pos:end="189:35"><expr pos:start="189:34" pos:end="189:35"><name pos:start="189:34" pos:end="189:35">rs</name></expr></argument>, <argument pos:start="189:38" pos:end="189:40"><expr pos:start="189:38" pos:end="189:40"><name pos:start="189:38" pos:end="189:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="191:21" pos:end="191:52"><expr pos:start="191:21" pos:end="191:51"><call pos:start="191:21" pos:end="191:51"><name pos:start="191:21" pos:end="191:36">tcg_gen_addi_i32</name><argument_list pos:start="191:37" pos:end="191:51">(<argument pos:start="191:38" pos:end="191:41"><expr pos:start="191:38" pos:end="191:41"><name pos:start="191:38" pos:end="191:41">addr</name></expr></argument>, <argument pos:start="191:44" pos:end="191:47"><expr pos:start="191:44" pos:end="191:47"><name pos:start="191:44" pos:end="191:47">addr</name></expr></argument>, <argument pos:start="191:50" pos:end="191:50"><expr pos:start="191:50" pos:end="191:50"><literal type="number" pos:start="191:50" pos:end="191:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="193:21" pos:end="193:45"><expr pos:start="193:21" pos:end="193:44"><name pos:start="193:21" pos:end="193:23">tmp</name> <operator pos:start="193:25" pos:end="193:25">=</operator> <call pos:start="193:27" pos:end="193:44"><name pos:start="193:27" pos:end="193:42">tcg_temp_new_i32</name><argument_list pos:start="193:43" pos:end="193:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="195:21" pos:end="195:64"><expr pos:start="195:21" pos:end="195:63"><call pos:start="195:21" pos:end="195:63"><name pos:start="195:21" pos:end="195:34">gen_aa32_ld32u</name><argument_list pos:start="195:35" pos:end="195:63">(<argument pos:start="195:36" pos:end="195:38"><expr pos:start="195:36" pos:end="195:38"><name pos:start="195:36" pos:end="195:38">tmp</name></expr></argument>, <argument pos:start="195:41" pos:end="195:44"><expr pos:start="195:41" pos:end="195:44"><name pos:start="195:41" pos:end="195:44">addr</name></expr></argument>, <argument pos:start="195:47" pos:end="195:62"><expr pos:start="195:47" pos:end="195:62"><call pos:start="195:47" pos:end="195:62"><name pos:start="195:47" pos:end="195:59">get_mem_index</name><argument_list pos:start="195:60" pos:end="195:62">(<argument pos:start="195:61" pos:end="195:61"><expr pos:start="195:61" pos:end="195:61"><name pos:start="195:61" pos:end="195:61">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:42"><expr pos:start="197:21" pos:end="197:41"><call pos:start="197:21" pos:end="197:41"><name pos:start="197:21" pos:end="197:29">store_reg</name><argument_list pos:start="197:30" pos:end="197:41">(<argument pos:start="197:31" pos:end="197:31"><expr pos:start="197:31" pos:end="197:31"><name pos:start="197:31" pos:end="197:31">s</name></expr></argument>, <argument pos:start="197:34" pos:end="197:35"><expr pos:start="197:34" pos:end="197:35"><name pos:start="197:34" pos:end="197:35">rd</name></expr></argument>, <argument pos:start="197:38" pos:end="197:40"><expr pos:start="197:38" pos:end="197:40"><name pos:start="197:38" pos:end="197:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="199:19" pos:end="217:17">else <block pos:start="199:24" pos:end="217:17">{<block_content pos:start="203:21" pos:end="215:43">

                    <comment type="block" pos:start="201:21" pos:end="201:30">/* strd */</comment>

                    <expr_stmt pos:start="203:21" pos:end="203:42"><expr pos:start="203:21" pos:end="203:41"><name pos:start="203:21" pos:end="203:23">tmp</name> <operator pos:start="203:25" pos:end="203:25">=</operator> <call pos:start="203:27" pos:end="203:41"><name pos:start="203:27" pos:end="203:34">load_reg</name><argument_list pos:start="203:35" pos:end="203:41">(<argument pos:start="203:36" pos:end="203:36"><expr pos:start="203:36" pos:end="203:36"><name pos:start="203:36" pos:end="203:36">s</name></expr></argument>, <argument pos:start="203:39" pos:end="203:40"><expr pos:start="203:39" pos:end="203:40"><name pos:start="203:39" pos:end="203:40">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="205:21" pos:end="205:63"><expr pos:start="205:21" pos:end="205:62"><call pos:start="205:21" pos:end="205:62"><name pos:start="205:21" pos:end="205:33">gen_aa32_st32</name><argument_list pos:start="205:34" pos:end="205:62">(<argument pos:start="205:35" pos:end="205:37"><expr pos:start="205:35" pos:end="205:37"><name pos:start="205:35" pos:end="205:37">tmp</name></expr></argument>, <argument pos:start="205:40" pos:end="205:43"><expr pos:start="205:40" pos:end="205:43"><name pos:start="205:40" pos:end="205:43">addr</name></expr></argument>, <argument pos:start="205:46" pos:end="205:61"><expr pos:start="205:46" pos:end="205:61"><call pos:start="205:46" pos:end="205:61"><name pos:start="205:46" pos:end="205:58">get_mem_index</name><argument_list pos:start="205:59" pos:end="205:61">(<argument pos:start="205:60" pos:end="205:60"><expr pos:start="205:60" pos:end="205:60"><name pos:start="205:60" pos:end="205:60">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="207:21" pos:end="207:43"><expr pos:start="207:21" pos:end="207:42"><call pos:start="207:21" pos:end="207:42"><name pos:start="207:21" pos:end="207:37">tcg_temp_free_i32</name><argument_list pos:start="207:38" pos:end="207:42">(<argument pos:start="207:39" pos:end="207:41"><expr pos:start="207:39" pos:end="207:41"><name pos:start="207:39" pos:end="207:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="209:21" pos:end="209:52"><expr pos:start="209:21" pos:end="209:51"><call pos:start="209:21" pos:end="209:51"><name pos:start="209:21" pos:end="209:36">tcg_gen_addi_i32</name><argument_list pos:start="209:37" pos:end="209:51">(<argument pos:start="209:38" pos:end="209:41"><expr pos:start="209:38" pos:end="209:41"><name pos:start="209:38" pos:end="209:41">addr</name></expr></argument>, <argument pos:start="209:44" pos:end="209:47"><expr pos:start="209:44" pos:end="209:47"><name pos:start="209:44" pos:end="209:47">addr</name></expr></argument>, <argument pos:start="209:50" pos:end="209:50"><expr pos:start="209:50" pos:end="209:50"><literal type="number" pos:start="209:50" pos:end="209:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="211:21" pos:end="211:42"><expr pos:start="211:21" pos:end="211:41"><name pos:start="211:21" pos:end="211:23">tmp</name> <operator pos:start="211:25" pos:end="211:25">=</operator> <call pos:start="211:27" pos:end="211:41"><name pos:start="211:27" pos:end="211:34">load_reg</name><argument_list pos:start="211:35" pos:end="211:41">(<argument pos:start="211:36" pos:end="211:36"><expr pos:start="211:36" pos:end="211:36"><name pos:start="211:36" pos:end="211:36">s</name></expr></argument>, <argument pos:start="211:39" pos:end="211:40"><expr pos:start="211:39" pos:end="211:40"><name pos:start="211:39" pos:end="211:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="213:21" pos:end="213:63"><expr pos:start="213:21" pos:end="213:62"><call pos:start="213:21" pos:end="213:62"><name pos:start="213:21" pos:end="213:33">gen_aa32_st32</name><argument_list pos:start="213:34" pos:end="213:62">(<argument pos:start="213:35" pos:end="213:37"><expr pos:start="213:35" pos:end="213:37"><name pos:start="213:35" pos:end="213:37">tmp</name></expr></argument>, <argument pos:start="213:40" pos:end="213:43"><expr pos:start="213:40" pos:end="213:43"><name pos:start="213:40" pos:end="213:43">addr</name></expr></argument>, <argument pos:start="213:46" pos:end="213:61"><expr pos:start="213:46" pos:end="213:61"><call pos:start="213:46" pos:end="213:61"><name pos:start="213:46" pos:end="213:58">get_mem_index</name><argument_list pos:start="213:59" pos:end="213:61">(<argument pos:start="213:60" pos:end="213:60"><expr pos:start="213:60" pos:end="213:60"><name pos:start="213:60" pos:end="213:60">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="215:21" pos:end="215:43"><expr pos:start="215:21" pos:end="215:42"><call pos:start="215:21" pos:end="215:42"><name pos:start="215:21" pos:end="215:37">tcg_temp_free_i32</name><argument_list pos:start="215:38" pos:end="215:42">(<argument pos:start="215:39" pos:end="215:41"><expr pos:start="215:39" pos:end="215:41"><name pos:start="215:39" pos:end="215:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="219:17" pos:end="235:17"><if pos:start="219:17" pos:end="231:17">if <condition pos:start="219:20" pos:end="219:37">(<expr pos:start="219:21" pos:end="219:36"><name pos:start="219:21" pos:end="219:24">insn</name> <operator pos:start="219:26" pos:end="219:26">&amp;</operator> <operator pos:start="219:28" pos:end="219:28">(</operator><literal type="number" pos:start="219:29" pos:end="219:29">1</literal> <operator pos:start="219:31" pos:end="219:32">&lt;&lt;</operator> <literal type="number" pos:start="219:34" pos:end="219:35">21</literal><operator pos:start="219:36" pos:end="219:36">)</operator></expr>)</condition> <block pos:start="219:39" pos:end="231:17">{<block_content pos:start="223:21" pos:end="229:43">

                    <comment type="block" pos:start="221:21" pos:end="221:42">/* Base writeback.  */</comment>

                    <if_stmt pos:start="223:21" pos:end="225:40"><if pos:start="223:21" pos:end="225:40">if <condition pos:start="223:24" pos:end="223:33">(<expr pos:start="223:25" pos:end="223:32"><name pos:start="223:25" pos:end="223:26">rn</name> <operator pos:start="223:28" pos:end="223:29">==</operator> <literal type="number" pos:start="223:31" pos:end="223:32">15</literal></expr>)</condition><block type="pseudo" pos:start="225:25" pos:end="225:40"><block_content pos:start="225:25" pos:end="225:40">

                        <goto pos:start="225:25" pos:end="225:40">goto <name pos:start="225:30" pos:end="225:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="227:21" pos:end="227:61"><expr pos:start="227:21" pos:end="227:60"><call pos:start="227:21" pos:end="227:60"><name pos:start="227:21" pos:end="227:36">tcg_gen_addi_i32</name><argument_list pos:start="227:37" pos:end="227:60">(<argument pos:start="227:38" pos:end="227:41"><expr pos:start="227:38" pos:end="227:41"><name pos:start="227:38" pos:end="227:41">addr</name></expr></argument>, <argument pos:start="227:44" pos:end="227:47"><expr pos:start="227:44" pos:end="227:47"><name pos:start="227:44" pos:end="227:47">addr</name></expr></argument>, <argument pos:start="227:50" pos:end="227:59"><expr pos:start="227:50" pos:end="227:59"><name pos:start="227:50" pos:end="227:55">offset</name> <operator pos:start="227:57" pos:end="227:57">-</operator> <literal type="number" pos:start="227:59" pos:end="227:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="229:21" pos:end="229:43"><expr pos:start="229:21" pos:end="229:42"><call pos:start="229:21" pos:end="229:42"><name pos:start="229:21" pos:end="229:29">store_reg</name><argument_list pos:start="229:30" pos:end="229:42">(<argument pos:start="229:31" pos:end="229:31"><expr pos:start="229:31" pos:end="229:31"><name pos:start="229:31" pos:end="229:31">s</name></expr></argument>, <argument pos:start="229:34" pos:end="229:35"><expr pos:start="229:34" pos:end="229:35"><name pos:start="229:34" pos:end="229:35">rn</name></expr></argument>, <argument pos:start="229:38" pos:end="229:41"><expr pos:start="229:38" pos:end="229:41"><name pos:start="229:38" pos:end="229:41">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="231:19" pos:end="235:17">else <block pos:start="231:24" pos:end="235:17">{<block_content pos:start="233:21" pos:end="233:44">

                    <expr_stmt pos:start="233:21" pos:end="233:44"><expr pos:start="233:21" pos:end="233:43"><call pos:start="233:21" pos:end="233:43"><name pos:start="233:21" pos:end="233:37">tcg_temp_free_i32</name><argument_list pos:start="233:38" pos:end="233:43">(<argument pos:start="233:39" pos:end="233:42"><expr pos:start="233:39" pos:end="233:42"><name pos:start="233:39" pos:end="233:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="237:15" pos:end="259:13">else if <condition pos:start="237:23" pos:end="237:47">(<expr pos:start="237:24" pos:end="237:46"><operator pos:start="237:24" pos:end="237:24">(</operator><name pos:start="237:25" pos:end="237:28">insn</name> <operator pos:start="237:30" pos:end="237:30">&amp;</operator> <operator pos:start="237:32" pos:end="237:32">(</operator><literal type="number" pos:start="237:33" pos:end="237:33">1</literal> <operator pos:start="237:35" pos:end="237:36">&lt;&lt;</operator> <literal type="number" pos:start="237:38" pos:end="237:39">23</literal><operator pos:start="237:40" pos:end="237:40">)</operator><operator pos:start="237:41" pos:end="237:41">)</operator> <operator pos:start="237:43" pos:end="237:44">==</operator> <literal type="number" pos:start="237:46" pos:end="237:46">0</literal></expr>)</condition> <block pos:start="237:49" pos:end="259:13">{<block_content pos:start="241:17" pos:end="257:40">

                <comment type="block" pos:start="239:17" pos:end="239:49">/* Load/store exclusive word.  */</comment>

                <expr_stmt pos:start="241:17" pos:end="241:48"><expr pos:start="241:17" pos:end="241:47"><name pos:start="241:17" pos:end="241:20">addr</name> <operator pos:start="241:22" pos:end="241:22">=</operator> <call pos:start="241:24" pos:end="241:47"><name pos:start="241:24" pos:end="241:45">tcg_temp_local_new_i32</name><argument_list pos:start="241:46" pos:end="241:47">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:42"><expr pos:start="243:17" pos:end="243:41"><call pos:start="243:17" pos:end="243:41"><name pos:start="243:17" pos:end="243:28">load_reg_var</name><argument_list pos:start="243:29" pos:end="243:41">(<argument pos:start="243:30" pos:end="243:30"><expr pos:start="243:30" pos:end="243:30"><name pos:start="243:30" pos:end="243:30">s</name></expr></argument>, <argument pos:start="243:33" pos:end="243:36"><expr pos:start="243:33" pos:end="243:36"><name pos:start="243:33" pos:end="243:36">addr</name></expr></argument>, <argument pos:start="243:39" pos:end="243:40"><expr pos:start="243:39" pos:end="243:40"><name pos:start="243:39" pos:end="243:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:65"><expr pos:start="245:17" pos:end="245:64"><call pos:start="245:17" pos:end="245:64"><name pos:start="245:17" pos:end="245:32">tcg_gen_addi_i32</name><argument_list pos:start="245:33" pos:end="245:64">(<argument pos:start="245:34" pos:end="245:37"><expr pos:start="245:34" pos:end="245:37"><name pos:start="245:34" pos:end="245:37">addr</name></expr></argument>, <argument pos:start="245:40" pos:end="245:43"><expr pos:start="245:40" pos:end="245:43"><name pos:start="245:40" pos:end="245:43">addr</name></expr></argument>, <argument pos:start="245:46" pos:end="245:63"><expr pos:start="245:46" pos:end="245:63"><operator pos:start="245:46" pos:end="245:46">(</operator><name pos:start="245:47" pos:end="245:50">insn</name> <operator pos:start="245:52" pos:end="245:52">&amp;</operator> <literal type="number" pos:start="245:54" pos:end="245:57">0xff</literal><operator pos:start="245:58" pos:end="245:58">)</operator> <operator pos:start="245:60" pos:end="245:61">&lt;&lt;</operator> <literal type="number" pos:start="245:63" pos:end="245:63">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="247:17" pos:end="255:17"><if pos:start="247:17" pos:end="251:17">if <condition pos:start="247:20" pos:end="247:37">(<expr pos:start="247:21" pos:end="247:36"><name pos:start="247:21" pos:end="247:24">insn</name> <operator pos:start="247:26" pos:end="247:26">&amp;</operator> <operator pos:start="247:28" pos:end="247:28">(</operator><literal type="number" pos:start="247:29" pos:end="247:29">1</literal> <operator pos:start="247:31" pos:end="247:32">&lt;&lt;</operator> <literal type="number" pos:start="247:34" pos:end="247:35">20</literal><operator pos:start="247:36" pos:end="247:36">)</operator></expr>)</condition> <block pos:start="247:39" pos:end="251:17">{<block_content pos:start="249:21" pos:end="249:59">

                    <expr_stmt pos:start="249:21" pos:end="249:59"><expr pos:start="249:21" pos:end="249:58"><call pos:start="249:21" pos:end="249:58"><name pos:start="249:21" pos:end="249:38">gen_load_exclusive</name><argument_list pos:start="249:39" pos:end="249:58">(<argument pos:start="249:40" pos:end="249:40"><expr pos:start="249:40" pos:end="249:40"><name pos:start="249:40" pos:end="249:40">s</name></expr></argument>, <argument pos:start="249:43" pos:end="249:44"><expr pos:start="249:43" pos:end="249:44"><name pos:start="249:43" pos:end="249:44">rs</name></expr></argument>, <argument pos:start="249:47" pos:end="249:48"><expr pos:start="249:47" pos:end="249:48"><literal type="number" pos:start="249:47" pos:end="249:48">15</literal></expr></argument>, <argument pos:start="249:51" pos:end="249:54"><expr pos:start="249:51" pos:end="249:54"><name pos:start="249:51" pos:end="249:54">addr</name></expr></argument>, <argument pos:start="249:57" pos:end="249:57"><expr pos:start="249:57" pos:end="249:57"><literal type="number" pos:start="249:57" pos:end="249:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="251:19" pos:end="255:17">else <block pos:start="251:24" pos:end="255:17">{<block_content pos:start="253:21" pos:end="253:64">

                    <expr_stmt pos:start="253:21" pos:end="253:64"><expr pos:start="253:21" pos:end="253:63"><call pos:start="253:21" pos:end="253:63"><name pos:start="253:21" pos:end="253:39">gen_store_exclusive</name><argument_list pos:start="253:40" pos:end="253:63">(<argument pos:start="253:41" pos:end="253:41"><expr pos:start="253:41" pos:end="253:41"><name pos:start="253:41" pos:end="253:41">s</name></expr></argument>, <argument pos:start="253:44" pos:end="253:45"><expr pos:start="253:44" pos:end="253:45"><name pos:start="253:44" pos:end="253:45">rd</name></expr></argument>, <argument pos:start="253:48" pos:end="253:49"><expr pos:start="253:48" pos:end="253:49"><name pos:start="253:48" pos:end="253:49">rs</name></expr></argument>, <argument pos:start="253:52" pos:end="253:53"><expr pos:start="253:52" pos:end="253:53"><literal type="number" pos:start="253:52" pos:end="253:53">15</literal></expr></argument>, <argument pos:start="253:56" pos:end="253:59"><expr pos:start="253:56" pos:end="253:59"><name pos:start="253:56" pos:end="253:59">addr</name></expr></argument>, <argument pos:start="253:62" pos:end="253:62"><expr pos:start="253:62" pos:end="253:62"><literal type="number" pos:start="253:62" pos:end="253:62">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:40"><expr pos:start="257:17" pos:end="257:39"><call pos:start="257:17" pos:end="257:39"><name pos:start="257:17" pos:end="257:33">tcg_temp_free_i32</name><argument_list pos:start="257:34" pos:end="257:39">(<argument pos:start="257:35" pos:end="257:38"><expr pos:start="257:35" pos:end="257:38"><name pos:start="257:35" pos:end="257:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="259:15" pos:end="309:13">else if <condition pos:start="259:23" pos:end="259:46">(<expr pos:start="259:24" pos:end="259:45"><operator pos:start="259:24" pos:end="259:24">(</operator><name pos:start="259:25" pos:end="259:28">insn</name> <operator pos:start="259:30" pos:end="259:30">&amp;</operator> <operator pos:start="259:32" pos:end="259:32">(</operator><literal type="number" pos:start="259:33" pos:end="259:33">7</literal> <operator pos:start="259:35" pos:end="259:36">&lt;&lt;</operator> <literal type="number" pos:start="259:38" pos:end="259:38">5</literal><operator pos:start="259:39" pos:end="259:39">)</operator><operator pos:start="259:40" pos:end="259:40">)</operator> <operator pos:start="259:42" pos:end="259:43">==</operator> <literal type="number" pos:start="259:45" pos:end="259:45">0</literal></expr>)</condition> <block pos:start="259:48" pos:end="309:13">{<block_content pos:start="263:17" pos:end="307:38">

                <comment type="block" pos:start="261:17" pos:end="261:36">/* Table Branch.  */</comment>

                <if_stmt pos:start="263:17" pos:end="273:17"><if pos:start="263:17" pos:end="269:17">if <condition pos:start="263:20" pos:end="263:29">(<expr pos:start="263:21" pos:end="263:28"><name pos:start="263:21" pos:end="263:22">rn</name> <operator pos:start="263:24" pos:end="263:25">==</operator> <literal type="number" pos:start="263:27" pos:end="263:28">15</literal></expr>)</condition> <block pos:start="263:31" pos:end="269:17">{<block_content pos:start="265:21" pos:end="267:50">

                    <expr_stmt pos:start="265:21" pos:end="265:46"><expr pos:start="265:21" pos:end="265:45"><name pos:start="265:21" pos:end="265:24">addr</name> <operator pos:start="265:26" pos:end="265:26">=</operator> <call pos:start="265:28" pos:end="265:45"><name pos:start="265:28" pos:end="265:43">tcg_temp_new_i32</name><argument_list pos:start="265:44" pos:end="265:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="267:21" pos:end="267:50"><expr pos:start="267:21" pos:end="267:49"><call pos:start="267:21" pos:end="267:49"><name pos:start="267:21" pos:end="267:36">tcg_gen_movi_i32</name><argument_list pos:start="267:37" pos:end="267:49">(<argument pos:start="267:38" pos:end="267:41"><expr pos:start="267:38" pos:end="267:41"><name pos:start="267:38" pos:end="267:41">addr</name></expr></argument>, <argument pos:start="267:44" pos:end="267:48"><expr pos:start="267:44" pos:end="267:48"><name pos:start="267:44" pos:end="267:48"><name pos:start="267:44" pos:end="267:44">s</name><operator pos:start="267:45" pos:end="267:46">-&gt;</operator><name pos:start="267:47" pos:end="267:48">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="269:19" pos:end="273:17">else <block pos:start="269:24" pos:end="273:17">{<block_content pos:start="271:21" pos:end="271:43">

                    <expr_stmt pos:start="271:21" pos:end="271:43"><expr pos:start="271:21" pos:end="271:42"><name pos:start="271:21" pos:end="271:24">addr</name> <operator pos:start="271:26" pos:end="271:26">=</operator> <call pos:start="271:28" pos:end="271:42"><name pos:start="271:28" pos:end="271:35">load_reg</name><argument_list pos:start="271:36" pos:end="271:42">(<argument pos:start="271:37" pos:end="271:37"><expr pos:start="271:37" pos:end="271:37"><name pos:start="271:37" pos:end="271:37">s</name></expr></argument>, <argument pos:start="271:40" pos:end="271:41"><expr pos:start="271:40" pos:end="271:41"><name pos:start="271:40" pos:end="271:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="275:17" pos:end="275:38"><expr pos:start="275:17" pos:end="275:37"><name pos:start="275:17" pos:end="275:19">tmp</name> <operator pos:start="275:21" pos:end="275:21">=</operator> <call pos:start="275:23" pos:end="275:37"><name pos:start="275:23" pos:end="275:30">load_reg</name><argument_list pos:start="275:31" pos:end="275:37">(<argument pos:start="275:32" pos:end="275:32"><expr pos:start="275:32" pos:end="275:32"><name pos:start="275:32" pos:end="275:32">s</name></expr></argument>, <argument pos:start="275:35" pos:end="275:36"><expr pos:start="275:35" pos:end="275:36"><name pos:start="275:35" pos:end="275:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="277:17" pos:end="277:49"><expr pos:start="277:17" pos:end="277:48"><call pos:start="277:17" pos:end="277:48"><name pos:start="277:17" pos:end="277:31">tcg_gen_add_i32</name><argument_list pos:start="277:32" pos:end="277:48">(<argument pos:start="277:33" pos:end="277:36"><expr pos:start="277:33" pos:end="277:36"><name pos:start="277:33" pos:end="277:36">addr</name></expr></argument>, <argument pos:start="277:39" pos:end="277:42"><expr pos:start="277:39" pos:end="277:42"><name pos:start="277:39" pos:end="277:42">addr</name></expr></argument>, <argument pos:start="277:45" pos:end="277:47"><expr pos:start="277:45" pos:end="277:47"><name pos:start="277:45" pos:end="277:47">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="279:17" pos:end="299:17"><if pos:start="279:17" pos:end="291:17">if <condition pos:start="279:20" pos:end="279:36">(<expr pos:start="279:21" pos:end="279:35"><name pos:start="279:21" pos:end="279:24">insn</name> <operator pos:start="279:26" pos:end="279:26">&amp;</operator> <operator pos:start="279:28" pos:end="279:28">(</operator><literal type="number" pos:start="279:29" pos:end="279:29">1</literal> <operator pos:start="279:31" pos:end="279:32">&lt;&lt;</operator> <literal type="number" pos:start="279:34" pos:end="279:34">4</literal><operator pos:start="279:35" pos:end="279:35">)</operator></expr>)</condition> <block pos:start="279:38" pos:end="291:17">{<block_content pos:start="283:21" pos:end="289:64">

                    <comment type="block" pos:start="281:21" pos:end="281:29">/* tbh */</comment>

                    <expr_stmt pos:start="283:21" pos:end="283:53"><expr pos:start="283:21" pos:end="283:52"><call pos:start="283:21" pos:end="283:52"><name pos:start="283:21" pos:end="283:35">tcg_gen_add_i32</name><argument_list pos:start="283:36" pos:end="283:52">(<argument pos:start="283:37" pos:end="283:40"><expr pos:start="283:37" pos:end="283:40"><name pos:start="283:37" pos:end="283:40">addr</name></expr></argument>, <argument pos:start="283:43" pos:end="283:46"><expr pos:start="283:43" pos:end="283:46"><name pos:start="283:43" pos:end="283:46">addr</name></expr></argument>, <argument pos:start="283:49" pos:end="283:51"><expr pos:start="283:49" pos:end="283:51"><name pos:start="283:49" pos:end="283:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="285:21" pos:end="285:43"><expr pos:start="285:21" pos:end="285:42"><call pos:start="285:21" pos:end="285:42"><name pos:start="285:21" pos:end="285:37">tcg_temp_free_i32</name><argument_list pos:start="285:38" pos:end="285:42">(<argument pos:start="285:39" pos:end="285:41"><expr pos:start="285:39" pos:end="285:41"><name pos:start="285:39" pos:end="285:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="287:21" pos:end="287:45"><expr pos:start="287:21" pos:end="287:44"><name pos:start="287:21" pos:end="287:23">tmp</name> <operator pos:start="287:25" pos:end="287:25">=</operator> <call pos:start="287:27" pos:end="287:44"><name pos:start="287:27" pos:end="287:42">tcg_temp_new_i32</name><argument_list pos:start="287:43" pos:end="287:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="289:21" pos:end="289:64"><expr pos:start="289:21" pos:end="289:63"><call pos:start="289:21" pos:end="289:63"><name pos:start="289:21" pos:end="289:34">gen_aa32_ld16u</name><argument_list pos:start="289:35" pos:end="289:63">(<argument pos:start="289:36" pos:end="289:38"><expr pos:start="289:36" pos:end="289:38"><name pos:start="289:36" pos:end="289:38">tmp</name></expr></argument>, <argument pos:start="289:41" pos:end="289:44"><expr pos:start="289:41" pos:end="289:44"><name pos:start="289:41" pos:end="289:44">addr</name></expr></argument>, <argument pos:start="289:47" pos:end="289:62"><expr pos:start="289:47" pos:end="289:62"><call pos:start="289:47" pos:end="289:62"><name pos:start="289:47" pos:end="289:59">get_mem_index</name><argument_list pos:start="289:60" pos:end="289:62">(<argument pos:start="289:61" pos:end="289:61"><expr pos:start="289:61" pos:end="289:61"><name pos:start="289:61" pos:end="289:61">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="291:19" pos:end="299:17">else <block pos:start="291:24" pos:end="299:17">{<block_content pos:start="293:21" pos:end="297:63"> <comment type="block" pos:start="291:26" pos:end="291:34">/* tbb */</comment>

                    <expr_stmt pos:start="293:21" pos:end="293:43"><expr pos:start="293:21" pos:end="293:42"><call pos:start="293:21" pos:end="293:42"><name pos:start="293:21" pos:end="293:37">tcg_temp_free_i32</name><argument_list pos:start="293:38" pos:end="293:42">(<argument pos:start="293:39" pos:end="293:41"><expr pos:start="293:39" pos:end="293:41"><name pos:start="293:39" pos:end="293:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="295:21" pos:end="295:45"><expr pos:start="295:21" pos:end="295:44"><name pos:start="295:21" pos:end="295:23">tmp</name> <operator pos:start="295:25" pos:end="295:25">=</operator> <call pos:start="295:27" pos:end="295:44"><name pos:start="295:27" pos:end="295:42">tcg_temp_new_i32</name><argument_list pos:start="295:43" pos:end="295:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="297:21" pos:end="297:63"><expr pos:start="297:21" pos:end="297:62"><call pos:start="297:21" pos:end="297:62"><name pos:start="297:21" pos:end="297:33">gen_aa32_ld8u</name><argument_list pos:start="297:34" pos:end="297:62">(<argument pos:start="297:35" pos:end="297:37"><expr pos:start="297:35" pos:end="297:37"><name pos:start="297:35" pos:end="297:37">tmp</name></expr></argument>, <argument pos:start="297:40" pos:end="297:43"><expr pos:start="297:40" pos:end="297:43"><name pos:start="297:40" pos:end="297:43">addr</name></expr></argument>, <argument pos:start="297:46" pos:end="297:61"><expr pos:start="297:46" pos:end="297:61"><call pos:start="297:46" pos:end="297:61"><name pos:start="297:46" pos:end="297:58">get_mem_index</name><argument_list pos:start="297:59" pos:end="297:61">(<argument pos:start="297:60" pos:end="297:60"><expr pos:start="297:60" pos:end="297:60"><name pos:start="297:60" pos:end="297:60">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="301:17" pos:end="301:40"><expr pos:start="301:17" pos:end="301:39"><call pos:start="301:17" pos:end="301:39"><name pos:start="301:17" pos:end="301:33">tcg_temp_free_i32</name><argument_list pos:start="301:34" pos:end="301:39">(<argument pos:start="301:35" pos:end="301:38"><expr pos:start="301:35" pos:end="301:38"><name pos:start="301:35" pos:end="301:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="303:17" pos:end="303:46"><expr pos:start="303:17" pos:end="303:45"><call pos:start="303:17" pos:end="303:45"><name pos:start="303:17" pos:end="303:32">tcg_gen_shli_i32</name><argument_list pos:start="303:33" pos:end="303:45">(<argument pos:start="303:34" pos:end="303:36"><expr pos:start="303:34" pos:end="303:36"><name pos:start="303:34" pos:end="303:36">tmp</name></expr></argument>, <argument pos:start="303:39" pos:end="303:41"><expr pos:start="303:39" pos:end="303:41"><name pos:start="303:39" pos:end="303:41">tmp</name></expr></argument>, <argument pos:start="303:44" pos:end="303:44"><expr pos:start="303:44" pos:end="303:44"><literal type="number" pos:start="303:44" pos:end="303:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="305:17" pos:end="305:50"><expr pos:start="305:17" pos:end="305:49"><call pos:start="305:17" pos:end="305:49"><name pos:start="305:17" pos:end="305:32">tcg_gen_addi_i32</name><argument_list pos:start="305:33" pos:end="305:49">(<argument pos:start="305:34" pos:end="305:36"><expr pos:start="305:34" pos:end="305:36"><name pos:start="305:34" pos:end="305:36">tmp</name></expr></argument>, <argument pos:start="305:39" pos:end="305:41"><expr pos:start="305:39" pos:end="305:41"><name pos:start="305:39" pos:end="305:41">tmp</name></expr></argument>, <argument pos:start="305:44" pos:end="305:48"><expr pos:start="305:44" pos:end="305:48"><name pos:start="305:44" pos:end="305:48"><name pos:start="305:44" pos:end="305:44">s</name><operator pos:start="305:45" pos:end="305:46">-&gt;</operator><name pos:start="305:47" pos:end="305:48">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="307:17" pos:end="307:38"><expr pos:start="307:17" pos:end="307:37"><call pos:start="307:17" pos:end="307:37"><name pos:start="307:17" pos:end="307:25">store_reg</name><argument_list pos:start="307:26" pos:end="307:37">(<argument pos:start="307:27" pos:end="307:27"><expr pos:start="307:27" pos:end="307:27"><name pos:start="307:27" pos:end="307:27">s</name></expr></argument>, <argument pos:start="307:30" pos:end="307:31"><expr pos:start="307:30" pos:end="307:31"><literal type="number" pos:start="307:30" pos:end="307:31">15</literal></expr></argument>, <argument pos:start="307:34" pos:end="307:36"><expr pos:start="307:34" pos:end="307:36"><name pos:start="307:34" pos:end="307:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="309:15" pos:end="441:13">else <block pos:start="309:20" pos:end="441:13">{<block_content pos:start="311:17" pos:end="439:40">

                <decl_stmt pos:start="311:17" pos:end="311:44"><decl pos:start="311:17" pos:end="311:43"><type pos:start="311:17" pos:end="311:19"><name pos:start="311:17" pos:end="311:19">int</name></type> <name pos:start="311:21" pos:end="311:23">op2</name> <init pos:start="311:25" pos:end="311:43">= <expr pos:start="311:27" pos:end="311:43"><operator pos:start="311:27" pos:end="311:27">(</operator><name pos:start="311:28" pos:end="311:31">insn</name> <operator pos:start="311:33" pos:end="311:34">&gt;&gt;</operator> <literal type="number" pos:start="311:36" pos:end="311:36">6</literal><operator pos:start="311:37" pos:end="311:37">)</operator> <operator pos:start="311:39" pos:end="311:39">&amp;</operator> <literal type="number" pos:start="311:41" pos:end="311:43">0x3</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="313:17" pos:end="313:39"><expr pos:start="313:17" pos:end="313:38"><name pos:start="313:17" pos:end="313:18">op</name> <operator pos:start="313:20" pos:end="313:20">=</operator> <operator pos:start="313:22" pos:end="313:22">(</operator><name pos:start="313:23" pos:end="313:26">insn</name> <operator pos:start="313:28" pos:end="313:29">&gt;&gt;</operator> <literal type="number" pos:start="313:31" pos:end="313:31">4</literal><operator pos:start="313:32" pos:end="313:32">)</operator> <operator pos:start="313:34" pos:end="313:34">&amp;</operator> <literal type="number" pos:start="313:36" pos:end="313:38">0x3</literal></expr>;</expr_stmt>

                <switch pos:start="315:17" pos:end="355:17">switch <condition pos:start="315:24" pos:end="315:28">(<expr pos:start="315:25" pos:end="315:27"><name pos:start="315:25" pos:end="315:27">op2</name></expr>)</condition> <block pos:start="315:30" pos:end="355:17">{<block_content pos:start="317:17" pos:end="353:26">

                <case pos:start="317:17" pos:end="317:23">case <expr pos:start="317:22" pos:end="317:22"><literal type="number" pos:start="317:22" pos:end="317:22">0</literal></expr>:</case>

                    <goto pos:start="319:21" pos:end="319:36">goto <name pos:start="319:26" pos:end="319:35">illegal_op</name>;</goto>

                <case pos:start="321:17" pos:end="321:23">case <expr pos:start="321:22" pos:end="321:22"><literal type="number" pos:start="321:22" pos:end="321:22">1</literal></expr>:</case>

                    <comment type="block" pos:start="323:21" pos:end="323:71">/* Load/store exclusive byte/halfword/doubleword */</comment>

                    <if_stmt pos:start="325:21" pos:end="329:21"><if pos:start="325:21" pos:end="329:21">if <condition pos:start="325:24" pos:end="325:32">(<expr pos:start="325:25" pos:end="325:31"><name pos:start="325:25" pos:end="325:26">op</name> <operator pos:start="325:28" pos:end="325:29">==</operator> <literal type="number" pos:start="325:31" pos:end="325:31">2</literal></expr>)</condition> <block pos:start="325:34" pos:end="329:21">{<block_content pos:start="327:25" pos:end="327:40">

                        <goto pos:start="327:25" pos:end="327:40">goto <name pos:start="327:30" pos:end="327:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="331:21" pos:end="331:28"><expr pos:start="331:21" pos:end="331:27"><call pos:start="331:21" pos:end="331:27"><name pos:start="331:21" pos:end="331:24">ARCH</name><argument_list pos:start="331:25" pos:end="331:27">(<argument pos:start="331:26" pos:end="331:26"><expr pos:start="331:26" pos:end="331:26"><literal type="number" pos:start="331:26" pos:end="331:26">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="333:21" pos:end="333:26">break;</break>

                <case pos:start="335:17" pos:end="335:23">case <expr pos:start="335:22" pos:end="335:22"><literal type="number" pos:start="335:22" pos:end="335:22">2</literal></expr>:</case>

                    <comment type="block" pos:start="337:21" pos:end="337:52">/* Load-acquire/store-release */</comment>

                    <if_stmt pos:start="339:21" pos:end="343:21"><if pos:start="339:21" pos:end="343:21">if <condition pos:start="339:24" pos:end="339:32">(<expr pos:start="339:25" pos:end="339:31"><name pos:start="339:25" pos:end="339:26">op</name> <operator pos:start="339:28" pos:end="339:29">==</operator> <literal type="number" pos:start="339:31" pos:end="339:31">3</literal></expr>)</condition> <block pos:start="339:34" pos:end="343:21">{<block_content pos:start="341:25" pos:end="341:40">

                        <goto pos:start="341:25" pos:end="341:40">goto <name pos:start="341:30" pos:end="341:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="345:21" pos:end="345:38">/* Fall through */</comment>

                <case pos:start="347:17" pos:end="347:23">case <expr pos:start="347:22" pos:end="347:22"><literal type="number" pos:start="347:22" pos:end="347:22">3</literal></expr>:</case>

                    <comment type="block" pos:start="349:21" pos:end="349:62">/* Load-acquire/store-release exclusive */</comment>

                    <expr_stmt pos:start="351:21" pos:end="351:28"><expr pos:start="351:21" pos:end="351:27"><call pos:start="351:21" pos:end="351:27"><name pos:start="351:21" pos:end="351:24">ARCH</name><argument_list pos:start="351:25" pos:end="351:27">(<argument pos:start="351:26" pos:end="351:26"><expr pos:start="351:26" pos:end="351:26"><literal type="number" pos:start="351:26" pos:end="351:26">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="353:21" pos:end="353:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="357:17" pos:end="357:48"><expr pos:start="357:17" pos:end="357:47"><name pos:start="357:17" pos:end="357:20">addr</name> <operator pos:start="357:22" pos:end="357:22">=</operator> <call pos:start="357:24" pos:end="357:47"><name pos:start="357:24" pos:end="357:45">tcg_temp_local_new_i32</name><argument_list pos:start="357:46" pos:end="357:47">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:42"><expr pos:start="359:17" pos:end="359:41"><call pos:start="359:17" pos:end="359:41"><name pos:start="359:17" pos:end="359:28">load_reg_var</name><argument_list pos:start="359:29" pos:end="359:41">(<argument pos:start="359:30" pos:end="359:30"><expr pos:start="359:30" pos:end="359:30"><name pos:start="359:30" pos:end="359:30">s</name></expr></argument>, <argument pos:start="359:33" pos:end="359:36"><expr pos:start="359:33" pos:end="359:36"><name pos:start="359:33" pos:end="359:36">addr</name></expr></argument>, <argument pos:start="359:39" pos:end="359:40"><expr pos:start="359:39" pos:end="359:40"><name pos:start="359:39" pos:end="359:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="361:17" pos:end="437:17"><if pos:start="361:17" pos:end="429:17">if <condition pos:start="361:20" pos:end="361:31">(<expr pos:start="361:21" pos:end="361:30"><operator pos:start="361:21" pos:end="361:21">!</operator><operator pos:start="361:22" pos:end="361:22">(</operator><name pos:start="361:23" pos:end="361:25">op2</name> <operator pos:start="361:27" pos:end="361:27">&amp;</operator> <literal type="number" pos:start="361:29" pos:end="361:29">1</literal><operator pos:start="361:30" pos:end="361:30">)</operator></expr>)</condition> <block pos:start="361:33" pos:end="429:17">{<block_content pos:start="363:21" pos:end="427:21">

                    <if_stmt pos:start="363:21" pos:end="427:21"><if pos:start="363:21" pos:end="395:21">if <condition pos:start="363:24" pos:end="363:41">(<expr pos:start="363:25" pos:end="363:40"><name pos:start="363:25" pos:end="363:28">insn</name> <operator pos:start="363:30" pos:end="363:30">&amp;</operator> <operator pos:start="363:32" pos:end="363:32">(</operator><literal type="number" pos:start="363:33" pos:end="363:33">1</literal> <operator pos:start="363:35" pos:end="363:36">&lt;&lt;</operator> <literal type="number" pos:start="363:38" pos:end="363:39">20</literal><operator pos:start="363:40" pos:end="363:40">)</operator></expr>)</condition> <block pos:start="363:43" pos:end="395:21">{<block_content pos:start="365:25" pos:end="393:46">

                        <expr_stmt pos:start="365:25" pos:end="365:49"><expr pos:start="365:25" pos:end="365:48"><name pos:start="365:25" pos:end="365:27">tmp</name> <operator pos:start="365:29" pos:end="365:29">=</operator> <call pos:start="365:31" pos:end="365:48"><name pos:start="365:31" pos:end="365:46">tcg_temp_new_i32</name><argument_list pos:start="365:47" pos:end="365:48">()</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="367:25" pos:end="391:25">switch <condition pos:start="367:32" pos:end="367:35">(<expr pos:start="367:33" pos:end="367:34"><name pos:start="367:33" pos:end="367:34">op</name></expr>)</condition> <block pos:start="367:37" pos:end="391:25">{<block_content pos:start="369:25" pos:end="389:36">

                        <case pos:start="369:25" pos:end="369:31">case <expr pos:start="369:30" pos:end="369:30"><literal type="number" pos:start="369:30" pos:end="369:30">0</literal></expr>:</case> <comment type="block" pos:start="369:33" pos:end="369:42">/* ldab */</comment>

                            <expr_stmt pos:start="371:29" pos:end="371:71"><expr pos:start="371:29" pos:end="371:70"><call pos:start="371:29" pos:end="371:70"><name pos:start="371:29" pos:end="371:41">gen_aa32_ld8u</name><argument_list pos:start="371:42" pos:end="371:70">(<argument pos:start="371:43" pos:end="371:45"><expr pos:start="371:43" pos:end="371:45"><name pos:start="371:43" pos:end="371:45">tmp</name></expr></argument>, <argument pos:start="371:48" pos:end="371:51"><expr pos:start="371:48" pos:end="371:51"><name pos:start="371:48" pos:end="371:51">addr</name></expr></argument>, <argument pos:start="371:54" pos:end="371:69"><expr pos:start="371:54" pos:end="371:69"><call pos:start="371:54" pos:end="371:69"><name pos:start="371:54" pos:end="371:66">get_mem_index</name><argument_list pos:start="371:67" pos:end="371:69">(<argument pos:start="371:68" pos:end="371:68"><expr pos:start="371:68" pos:end="371:68"><name pos:start="371:68" pos:end="371:68">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="373:29" pos:end="373:34">break;</break>

                        <case pos:start="375:25" pos:end="375:31">case <expr pos:start="375:30" pos:end="375:30"><literal type="number" pos:start="375:30" pos:end="375:30">1</literal></expr>:</case> <comment type="block" pos:start="375:33" pos:end="375:42">/* ldah */</comment>

                            <expr_stmt pos:start="377:29" pos:end="377:72"><expr pos:start="377:29" pos:end="377:71"><call pos:start="377:29" pos:end="377:71"><name pos:start="377:29" pos:end="377:42">gen_aa32_ld16u</name><argument_list pos:start="377:43" pos:end="377:71">(<argument pos:start="377:44" pos:end="377:46"><expr pos:start="377:44" pos:end="377:46"><name pos:start="377:44" pos:end="377:46">tmp</name></expr></argument>, <argument pos:start="377:49" pos:end="377:52"><expr pos:start="377:49" pos:end="377:52"><name pos:start="377:49" pos:end="377:52">addr</name></expr></argument>, <argument pos:start="377:55" pos:end="377:70"><expr pos:start="377:55" pos:end="377:70"><call pos:start="377:55" pos:end="377:70"><name pos:start="377:55" pos:end="377:67">get_mem_index</name><argument_list pos:start="377:68" pos:end="377:70">(<argument pos:start="377:69" pos:end="377:69"><expr pos:start="377:69" pos:end="377:69"><name pos:start="377:69" pos:end="377:69">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="379:29" pos:end="379:34">break;</break>

                        <case pos:start="381:25" pos:end="381:31">case <expr pos:start="381:30" pos:end="381:30"><literal type="number" pos:start="381:30" pos:end="381:30">2</literal></expr>:</case> <comment type="block" pos:start="381:33" pos:end="381:41">/* lda */</comment>

                            <expr_stmt pos:start="383:29" pos:end="383:72"><expr pos:start="383:29" pos:end="383:71"><call pos:start="383:29" pos:end="383:71"><name pos:start="383:29" pos:end="383:42">gen_aa32_ld32u</name><argument_list pos:start="383:43" pos:end="383:71">(<argument pos:start="383:44" pos:end="383:46"><expr pos:start="383:44" pos:end="383:46"><name pos:start="383:44" pos:end="383:46">tmp</name></expr></argument>, <argument pos:start="383:49" pos:end="383:52"><expr pos:start="383:49" pos:end="383:52"><name pos:start="383:49" pos:end="383:52">addr</name></expr></argument>, <argument pos:start="383:55" pos:end="383:70"><expr pos:start="383:55" pos:end="383:70"><call pos:start="383:55" pos:end="383:70"><name pos:start="383:55" pos:end="383:67">get_mem_index</name><argument_list pos:start="383:68" pos:end="383:70">(<argument pos:start="383:69" pos:end="383:69"><expr pos:start="383:69" pos:end="383:69"><name pos:start="383:69" pos:end="383:69">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="385:29" pos:end="385:34">break;</break>

                        <default pos:start="387:25" pos:end="387:32">default:</default>

                            <expr_stmt pos:start="389:29" pos:end="389:36"><expr pos:start="389:29" pos:end="389:35"><call pos:start="389:29" pos:end="389:35"><name pos:start="389:29" pos:end="389:33">abort</name><argument_list pos:start="389:34" pos:end="389:35">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="393:25" pos:end="393:46"><expr pos:start="393:25" pos:end="393:45"><call pos:start="393:25" pos:end="393:45"><name pos:start="393:25" pos:end="393:33">store_reg</name><argument_list pos:start="393:34" pos:end="393:45">(<argument pos:start="393:35" pos:end="393:35"><expr pos:start="393:35" pos:end="393:35"><name pos:start="393:35" pos:end="393:35">s</name></expr></argument>, <argument pos:start="393:38" pos:end="393:39"><expr pos:start="393:38" pos:end="393:39"><name pos:start="393:38" pos:end="393:39">rs</name></expr></argument>, <argument pos:start="393:42" pos:end="393:44"><expr pos:start="393:42" pos:end="393:44"><name pos:start="393:42" pos:end="393:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="395:23" pos:end="427:21">else <block pos:start="395:28" pos:end="427:21">{<block_content pos:start="397:25" pos:end="425:47">

                        <expr_stmt pos:start="397:25" pos:end="397:46"><expr pos:start="397:25" pos:end="397:45"><name pos:start="397:25" pos:end="397:27">tmp</name> <operator pos:start="397:29" pos:end="397:29">=</operator> <call pos:start="397:31" pos:end="397:45"><name pos:start="397:31" pos:end="397:38">load_reg</name><argument_list pos:start="397:39" pos:end="397:45">(<argument pos:start="397:40" pos:end="397:40"><expr pos:start="397:40" pos:end="397:40"><name pos:start="397:40" pos:end="397:40">s</name></expr></argument>, <argument pos:start="397:43" pos:end="397:44"><expr pos:start="397:43" pos:end="397:44"><name pos:start="397:43" pos:end="397:44">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="399:25" pos:end="423:25">switch <condition pos:start="399:32" pos:end="399:35">(<expr pos:start="399:33" pos:end="399:34"><name pos:start="399:33" pos:end="399:34">op</name></expr>)</condition> <block pos:start="399:37" pos:end="423:25">{<block_content pos:start="401:25" pos:end="421:36">

                        <case pos:start="401:25" pos:end="401:31">case <expr pos:start="401:30" pos:end="401:30"><literal type="number" pos:start="401:30" pos:end="401:30">0</literal></expr>:</case> <comment type="block" pos:start="401:33" pos:end="401:42">/* stlb */</comment>

                            <expr_stmt pos:start="403:29" pos:end="403:70"><expr pos:start="403:29" pos:end="403:69"><call pos:start="403:29" pos:end="403:69"><name pos:start="403:29" pos:end="403:40">gen_aa32_st8</name><argument_list pos:start="403:41" pos:end="403:69">(<argument pos:start="403:42" pos:end="403:44"><expr pos:start="403:42" pos:end="403:44"><name pos:start="403:42" pos:end="403:44">tmp</name></expr></argument>, <argument pos:start="403:47" pos:end="403:50"><expr pos:start="403:47" pos:end="403:50"><name pos:start="403:47" pos:end="403:50">addr</name></expr></argument>, <argument pos:start="403:53" pos:end="403:68"><expr pos:start="403:53" pos:end="403:68"><call pos:start="403:53" pos:end="403:68"><name pos:start="403:53" pos:end="403:65">get_mem_index</name><argument_list pos:start="403:66" pos:end="403:68">(<argument pos:start="403:67" pos:end="403:67"><expr pos:start="403:67" pos:end="403:67"><name pos:start="403:67" pos:end="403:67">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="405:29" pos:end="405:34">break;</break>

                        <case pos:start="407:25" pos:end="407:31">case <expr pos:start="407:30" pos:end="407:30"><literal type="number" pos:start="407:30" pos:end="407:30">1</literal></expr>:</case> <comment type="block" pos:start="407:33" pos:end="407:42">/* stlh */</comment>

                            <expr_stmt pos:start="409:29" pos:end="409:71"><expr pos:start="409:29" pos:end="409:70"><call pos:start="409:29" pos:end="409:70"><name pos:start="409:29" pos:end="409:41">gen_aa32_st16</name><argument_list pos:start="409:42" pos:end="409:70">(<argument pos:start="409:43" pos:end="409:45"><expr pos:start="409:43" pos:end="409:45"><name pos:start="409:43" pos:end="409:45">tmp</name></expr></argument>, <argument pos:start="409:48" pos:end="409:51"><expr pos:start="409:48" pos:end="409:51"><name pos:start="409:48" pos:end="409:51">addr</name></expr></argument>, <argument pos:start="409:54" pos:end="409:69"><expr pos:start="409:54" pos:end="409:69"><call pos:start="409:54" pos:end="409:69"><name pos:start="409:54" pos:end="409:66">get_mem_index</name><argument_list pos:start="409:67" pos:end="409:69">(<argument pos:start="409:68" pos:end="409:68"><expr pos:start="409:68" pos:end="409:68"><name pos:start="409:68" pos:end="409:68">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="411:29" pos:end="411:34">break;</break>

                        <case pos:start="413:25" pos:end="413:31">case <expr pos:start="413:30" pos:end="413:30"><literal type="number" pos:start="413:30" pos:end="413:30">2</literal></expr>:</case> <comment type="block" pos:start="413:33" pos:end="413:41">/* stl */</comment>

                            <expr_stmt pos:start="415:29" pos:end="415:71"><expr pos:start="415:29" pos:end="415:70"><call pos:start="415:29" pos:end="415:70"><name pos:start="415:29" pos:end="415:41">gen_aa32_st32</name><argument_list pos:start="415:42" pos:end="415:70">(<argument pos:start="415:43" pos:end="415:45"><expr pos:start="415:43" pos:end="415:45"><name pos:start="415:43" pos:end="415:45">tmp</name></expr></argument>, <argument pos:start="415:48" pos:end="415:51"><expr pos:start="415:48" pos:end="415:51"><name pos:start="415:48" pos:end="415:51">addr</name></expr></argument>, <argument pos:start="415:54" pos:end="415:69"><expr pos:start="415:54" pos:end="415:69"><call pos:start="415:54" pos:end="415:69"><name pos:start="415:54" pos:end="415:66">get_mem_index</name><argument_list pos:start="415:67" pos:end="415:69">(<argument pos:start="415:68" pos:end="415:68"><expr pos:start="415:68" pos:end="415:68"><name pos:start="415:68" pos:end="415:68">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="417:29" pos:end="417:34">break;</break>

                        <default pos:start="419:25" pos:end="419:32">default:</default>

                            <expr_stmt pos:start="421:29" pos:end="421:36"><expr pos:start="421:29" pos:end="421:35"><call pos:start="421:29" pos:end="421:35"><name pos:start="421:29" pos:end="421:33">abort</name><argument_list pos:start="421:34" pos:end="421:35">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="425:25" pos:end="425:47"><expr pos:start="425:25" pos:end="425:46"><call pos:start="425:25" pos:end="425:46"><name pos:start="425:25" pos:end="425:41">tcg_temp_free_i32</name><argument_list pos:start="425:42" pos:end="425:46">(<argument pos:start="425:43" pos:end="425:45"><expr pos:start="425:43" pos:end="425:45"><name pos:start="425:43" pos:end="425:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="429:19" pos:end="433:17">else if <condition pos:start="429:27" pos:end="429:44">(<expr pos:start="429:28" pos:end="429:43"><name pos:start="429:28" pos:end="429:31">insn</name> <operator pos:start="429:33" pos:end="429:33">&amp;</operator> <operator pos:start="429:35" pos:end="429:35">(</operator><literal type="number" pos:start="429:36" pos:end="429:36">1</literal> <operator pos:start="429:38" pos:end="429:39">&lt;&lt;</operator> <literal type="number" pos:start="429:41" pos:end="429:42">20</literal><operator pos:start="429:43" pos:end="429:43">)</operator></expr>)</condition> <block pos:start="429:46" pos:end="433:17">{<block_content pos:start="431:21" pos:end="431:60">

                    <expr_stmt pos:start="431:21" pos:end="431:60"><expr pos:start="431:21" pos:end="431:59"><call pos:start="431:21" pos:end="431:59"><name pos:start="431:21" pos:end="431:38">gen_load_exclusive</name><argument_list pos:start="431:39" pos:end="431:59">(<argument pos:start="431:40" pos:end="431:40"><expr pos:start="431:40" pos:end="431:40"><name pos:start="431:40" pos:end="431:40">s</name></expr></argument>, <argument pos:start="431:43" pos:end="431:44"><expr pos:start="431:43" pos:end="431:44"><name pos:start="431:43" pos:end="431:44">rs</name></expr></argument>, <argument pos:start="431:47" pos:end="431:48"><expr pos:start="431:47" pos:end="431:48"><name pos:start="431:47" pos:end="431:48">rd</name></expr></argument>, <argument pos:start="431:51" pos:end="431:54"><expr pos:start="431:51" pos:end="431:54"><name pos:start="431:51" pos:end="431:54">addr</name></expr></argument>, <argument pos:start="431:57" pos:end="431:58"><expr pos:start="431:57" pos:end="431:58"><name pos:start="431:57" pos:end="431:58">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="433:19" pos:end="437:17">else <block pos:start="433:24" pos:end="437:17">{<block_content pos:start="435:21" pos:end="435:65">

                    <expr_stmt pos:start="435:21" pos:end="435:65"><expr pos:start="435:21" pos:end="435:64"><call pos:start="435:21" pos:end="435:64"><name pos:start="435:21" pos:end="435:39">gen_store_exclusive</name><argument_list pos:start="435:40" pos:end="435:64">(<argument pos:start="435:41" pos:end="435:41"><expr pos:start="435:41" pos:end="435:41"><name pos:start="435:41" pos:end="435:41">s</name></expr></argument>, <argument pos:start="435:44" pos:end="435:45"><expr pos:start="435:44" pos:end="435:45"><name pos:start="435:44" pos:end="435:45">rm</name></expr></argument>, <argument pos:start="435:48" pos:end="435:49"><expr pos:start="435:48" pos:end="435:49"><name pos:start="435:48" pos:end="435:49">rs</name></expr></argument>, <argument pos:start="435:52" pos:end="435:53"><expr pos:start="435:52" pos:end="435:53"><name pos:start="435:52" pos:end="435:53">rd</name></expr></argument>, <argument pos:start="435:56" pos:end="435:59"><expr pos:start="435:56" pos:end="435:59"><name pos:start="435:56" pos:end="435:59">addr</name></expr></argument>, <argument pos:start="435:62" pos:end="435:63"><expr pos:start="435:62" pos:end="435:63"><name pos:start="435:62" pos:end="435:63">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="439:17" pos:end="439:40"><expr pos:start="439:17" pos:end="439:39"><call pos:start="439:17" pos:end="439:39"><name pos:start="439:17" pos:end="439:33">tcg_temp_free_i32</name><argument_list pos:start="439:34" pos:end="439:39">(<argument pos:start="439:35" pos:end="439:38"><expr pos:start="439:35" pos:end="439:38"><name pos:start="439:35" pos:end="439:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="443:11" pos:end="621:9">else <block pos:start="443:16" pos:end="621:9">{<block_content pos:start="447:13" pos:end="619:13">

            <comment type="block" pos:start="445:13" pos:end="445:49">/* Load/store multiple, RFE, SRS.  */</comment>

            <if_stmt pos:start="447:13" pos:end="619:13"><if pos:start="447:13" pos:end="513:13">if <condition pos:start="447:16" pos:end="447:57">(<expr pos:start="447:17" pos:end="447:56"><operator pos:start="447:17" pos:end="447:17">(</operator><operator pos:start="447:18" pos:end="447:18">(</operator><name pos:start="447:19" pos:end="447:22">insn</name> <operator pos:start="447:24" pos:end="447:25">&gt;&gt;</operator> <literal type="number" pos:start="447:27" pos:end="447:28">23</literal><operator pos:start="447:29" pos:end="447:29">)</operator> <operator pos:start="447:31" pos:end="447:31">&amp;</operator> <literal type="number" pos:start="447:33" pos:end="447:33">1</literal><operator pos:start="447:34" pos:end="447:34">)</operator> <operator pos:start="447:36" pos:end="447:37">==</operator> <operator pos:start="447:39" pos:end="447:39">(</operator><operator pos:start="447:40" pos:end="447:40">(</operator><name pos:start="447:41" pos:end="447:44">insn</name> <operator pos:start="447:46" pos:end="447:47">&gt;&gt;</operator> <literal type="number" pos:start="447:49" pos:end="447:50">24</literal><operator pos:start="447:51" pos:end="447:51">)</operator> <operator pos:start="447:53" pos:end="447:53">&amp;</operator> <literal type="number" pos:start="447:55" pos:end="447:55">1</literal><operator pos:start="447:56" pos:end="447:56">)</operator></expr>)</condition> <block pos:start="447:59" pos:end="513:13">{<block_content pos:start="451:17" pos:end="511:17">

                <comment type="block" pos:start="449:17" pos:end="449:74">/* RFE, SRS: not available in user mode or on M profile */</comment>

                <if_stmt pos:start="451:17" pos:end="455:17"><if pos:start="451:17" pos:end="455:17">if <condition pos:start="451:20" pos:end="451:67">(<expr pos:start="451:21" pos:end="451:66"><call pos:start="451:21" pos:end="451:30"><name pos:start="451:21" pos:end="451:27">IS_USER</name><argument_list pos:start="451:28" pos:end="451:30">(<argument pos:start="451:29" pos:end="451:29"><expr pos:start="451:29" pos:end="451:29"><name pos:start="451:29" pos:end="451:29">s</name></expr></argument>)</argument_list></call> <operator pos:start="451:32" pos:end="451:33">||</operator> <call pos:start="451:35" pos:end="451:66"><name pos:start="451:35" pos:end="451:48">arm_dc_feature</name><argument_list pos:start="451:49" pos:end="451:66">(<argument pos:start="451:50" pos:end="451:50"><expr pos:start="451:50" pos:end="451:50"><name pos:start="451:50" pos:end="451:50">s</name></expr></argument>, <argument pos:start="451:53" pos:end="451:65"><expr pos:start="451:53" pos:end="451:65"><name pos:start="451:53" pos:end="451:65">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="451:69" pos:end="455:17">{<block_content pos:start="453:21" pos:end="453:36">

                    <goto pos:start="453:21" pos:end="453:36">goto <name pos:start="453:26" pos:end="453:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="457:17" pos:end="511:17"><if pos:start="457:17" pos:end="503:17">if <condition pos:start="457:20" pos:end="457:37">(<expr pos:start="457:21" pos:end="457:36"><name pos:start="457:21" pos:end="457:24">insn</name> <operator pos:start="457:26" pos:end="457:26">&amp;</operator> <operator pos:start="457:28" pos:end="457:28">(</operator><literal type="number" pos:start="457:29" pos:end="457:29">1</literal> <operator pos:start="457:31" pos:end="457:32">&lt;&lt;</operator> <literal type="number" pos:start="457:34" pos:end="457:35">20</literal><operator pos:start="457:36" pos:end="457:36">)</operator></expr>)</condition> <block pos:start="457:39" pos:end="503:17">{<block_content pos:start="461:21" pos:end="501:42">

                    <comment type="block" pos:start="459:21" pos:end="459:29">/* rfe */</comment>

                    <expr_stmt pos:start="461:21" pos:end="461:43"><expr pos:start="461:21" pos:end="461:42"><name pos:start="461:21" pos:end="461:24">addr</name> <operator pos:start="461:26" pos:end="461:26">=</operator> <call pos:start="461:28" pos:end="461:42"><name pos:start="461:28" pos:end="461:35">load_reg</name><argument_list pos:start="461:36" pos:end="461:42">(<argument pos:start="461:37" pos:end="461:37"><expr pos:start="461:37" pos:end="461:37"><name pos:start="461:37" pos:end="461:37">s</name></expr></argument>, <argument pos:start="461:40" pos:end="461:41"><expr pos:start="461:40" pos:end="461:41"><name pos:start="461:40" pos:end="461:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="463:21" pos:end="465:57"><if pos:start="463:21" pos:end="465:57">if <condition pos:start="463:24" pos:end="463:48">(<expr pos:start="463:25" pos:end="463:47"><operator pos:start="463:25" pos:end="463:25">(</operator><name pos:start="463:26" pos:end="463:29">insn</name> <operator pos:start="463:31" pos:end="463:31">&amp;</operator> <operator pos:start="463:33" pos:end="463:33">(</operator><literal type="number" pos:start="463:34" pos:end="463:34">1</literal> <operator pos:start="463:36" pos:end="463:37">&lt;&lt;</operator> <literal type="number" pos:start="463:39" pos:end="463:40">24</literal><operator pos:start="463:41" pos:end="463:41">)</operator><operator pos:start="463:42" pos:end="463:42">)</operator> <operator pos:start="463:44" pos:end="463:45">==</operator> <literal type="number" pos:start="463:47" pos:end="463:47">0</literal></expr>)</condition><block type="pseudo" pos:start="465:25" pos:end="465:57"><block_content pos:start="465:25" pos:end="465:57">

                        <expr_stmt pos:start="465:25" pos:end="465:57"><expr pos:start="465:25" pos:end="465:56"><call pos:start="465:25" pos:end="465:56"><name pos:start="465:25" pos:end="465:40">tcg_gen_addi_i32</name><argument_list pos:start="465:41" pos:end="465:56">(<argument pos:start="465:42" pos:end="465:45"><expr pos:start="465:42" pos:end="465:45"><name pos:start="465:42" pos:end="465:45">addr</name></expr></argument>, <argument pos:start="465:48" pos:end="465:51"><expr pos:start="465:48" pos:end="465:51"><name pos:start="465:48" pos:end="465:51">addr</name></expr></argument>, <argument pos:start="465:54" pos:end="465:55"><expr pos:start="465:54" pos:end="465:55"><operator pos:start="465:54" pos:end="465:54">-</operator><literal type="number" pos:start="465:55" pos:end="465:55">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="block" pos:start="467:21" pos:end="467:63">/* Load PC into tmp and CPSR into tmp2.  */</comment>

                    <expr_stmt pos:start="469:21" pos:end="469:45"><expr pos:start="469:21" pos:end="469:44"><name pos:start="469:21" pos:end="469:23">tmp</name> <operator pos:start="469:25" pos:end="469:25">=</operator> <call pos:start="469:27" pos:end="469:44"><name pos:start="469:27" pos:end="469:42">tcg_temp_new_i32</name><argument_list pos:start="469:43" pos:end="469:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="471:21" pos:end="471:64"><expr pos:start="471:21" pos:end="471:63"><call pos:start="471:21" pos:end="471:63"><name pos:start="471:21" pos:end="471:34">gen_aa32_ld32u</name><argument_list pos:start="471:35" pos:end="471:63">(<argument pos:start="471:36" pos:end="471:38"><expr pos:start="471:36" pos:end="471:38"><name pos:start="471:36" pos:end="471:38">tmp</name></expr></argument>, <argument pos:start="471:41" pos:end="471:44"><expr pos:start="471:41" pos:end="471:44"><name pos:start="471:41" pos:end="471:44">addr</name></expr></argument>, <argument pos:start="471:47" pos:end="471:62"><expr pos:start="471:47" pos:end="471:62"><call pos:start="471:47" pos:end="471:62"><name pos:start="471:47" pos:end="471:59">get_mem_index</name><argument_list pos:start="471:60" pos:end="471:62">(<argument pos:start="471:61" pos:end="471:61"><expr pos:start="471:61" pos:end="471:61"><name pos:start="471:61" pos:end="471:61">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="473:21" pos:end="473:52"><expr pos:start="473:21" pos:end="473:51"><call pos:start="473:21" pos:end="473:51"><name pos:start="473:21" pos:end="473:36">tcg_gen_addi_i32</name><argument_list pos:start="473:37" pos:end="473:51">(<argument pos:start="473:38" pos:end="473:41"><expr pos:start="473:38" pos:end="473:41"><name pos:start="473:38" pos:end="473:41">addr</name></expr></argument>, <argument pos:start="473:44" pos:end="473:47"><expr pos:start="473:44" pos:end="473:47"><name pos:start="473:44" pos:end="473:47">addr</name></expr></argument>, <argument pos:start="473:50" pos:end="473:50"><expr pos:start="473:50" pos:end="473:50"><literal type="number" pos:start="473:50" pos:end="473:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="475:21" pos:end="475:46"><expr pos:start="475:21" pos:end="475:45"><name pos:start="475:21" pos:end="475:24">tmp2</name> <operator pos:start="475:26" pos:end="475:26">=</operator> <call pos:start="475:28" pos:end="475:45"><name pos:start="475:28" pos:end="475:43">tcg_temp_new_i32</name><argument_list pos:start="475:44" pos:end="475:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="477:21" pos:end="477:65"><expr pos:start="477:21" pos:end="477:64"><call pos:start="477:21" pos:end="477:64"><name pos:start="477:21" pos:end="477:34">gen_aa32_ld32u</name><argument_list pos:start="477:35" pos:end="477:64">(<argument pos:start="477:36" pos:end="477:39"><expr pos:start="477:36" pos:end="477:39"><name pos:start="477:36" pos:end="477:39">tmp2</name></expr></argument>, <argument pos:start="477:42" pos:end="477:45"><expr pos:start="477:42" pos:end="477:45"><name pos:start="477:42" pos:end="477:45">addr</name></expr></argument>, <argument pos:start="477:48" pos:end="477:63"><expr pos:start="477:48" pos:end="477:63"><call pos:start="477:48" pos:end="477:63"><name pos:start="477:48" pos:end="477:60">get_mem_index</name><argument_list pos:start="477:61" pos:end="477:63">(<argument pos:start="477:62" pos:end="477:62"><expr pos:start="477:62" pos:end="477:62"><name pos:start="477:62" pos:end="477:62">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="479:21" pos:end="499:21"><if pos:start="479:21" pos:end="495:21">if <condition pos:start="479:24" pos:end="479:41">(<expr pos:start="479:25" pos:end="479:40"><name pos:start="479:25" pos:end="479:28">insn</name> <operator pos:start="479:30" pos:end="479:30">&amp;</operator> <operator pos:start="479:32" pos:end="479:32">(</operator><literal type="number" pos:start="479:33" pos:end="479:33">1</literal> <operator pos:start="479:35" pos:end="479:36">&lt;&lt;</operator> <literal type="number" pos:start="479:38" pos:end="479:39">21</literal><operator pos:start="479:40" pos:end="479:40">)</operator></expr>)</condition> <block pos:start="479:43" pos:end="495:21">{<block_content pos:start="483:25" pos:end="493:47">

                        <comment type="block" pos:start="481:25" pos:end="481:46">/* Base writeback.  */</comment>

                        <if_stmt pos:start="483:25" pos:end="491:25"><if pos:start="483:25" pos:end="487:25">if <condition pos:start="483:28" pos:end="483:45">(<expr pos:start="483:29" pos:end="483:44"><name pos:start="483:29" pos:end="483:32">insn</name> <operator pos:start="483:34" pos:end="483:34">&amp;</operator> <operator pos:start="483:36" pos:end="483:36">(</operator><literal type="number" pos:start="483:37" pos:end="483:37">1</literal> <operator pos:start="483:39" pos:end="483:40">&lt;&lt;</operator> <literal type="number" pos:start="483:42" pos:end="483:43">24</literal><operator pos:start="483:44" pos:end="483:44">)</operator></expr>)</condition> <block pos:start="483:47" pos:end="487:25">{<block_content pos:start="485:29" pos:end="485:60">

                            <expr_stmt pos:start="485:29" pos:end="485:60"><expr pos:start="485:29" pos:end="485:59"><call pos:start="485:29" pos:end="485:59"><name pos:start="485:29" pos:end="485:44">tcg_gen_addi_i32</name><argument_list pos:start="485:45" pos:end="485:59">(<argument pos:start="485:46" pos:end="485:49"><expr pos:start="485:46" pos:end="485:49"><name pos:start="485:46" pos:end="485:49">addr</name></expr></argument>, <argument pos:start="485:52" pos:end="485:55"><expr pos:start="485:52" pos:end="485:55"><name pos:start="485:52" pos:end="485:55">addr</name></expr></argument>, <argument pos:start="485:58" pos:end="485:58"><expr pos:start="485:58" pos:end="485:58"><literal type="number" pos:start="485:58" pos:end="485:58">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="487:27" pos:end="491:25">else <block pos:start="487:32" pos:end="491:25">{<block_content pos:start="489:29" pos:end="489:61">

                            <expr_stmt pos:start="489:29" pos:end="489:61"><expr pos:start="489:29" pos:end="489:60"><call pos:start="489:29" pos:end="489:60"><name pos:start="489:29" pos:end="489:44">tcg_gen_addi_i32</name><argument_list pos:start="489:45" pos:end="489:60">(<argument pos:start="489:46" pos:end="489:49"><expr pos:start="489:46" pos:end="489:49"><name pos:start="489:46" pos:end="489:49">addr</name></expr></argument>, <argument pos:start="489:52" pos:end="489:55"><expr pos:start="489:52" pos:end="489:55"><name pos:start="489:52" pos:end="489:55">addr</name></expr></argument>, <argument pos:start="489:58" pos:end="489:59"><expr pos:start="489:58" pos:end="489:59"><operator pos:start="489:58" pos:end="489:58">-</operator><literal type="number" pos:start="489:59" pos:end="489:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="493:25" pos:end="493:47"><expr pos:start="493:25" pos:end="493:46"><call pos:start="493:25" pos:end="493:46"><name pos:start="493:25" pos:end="493:33">store_reg</name><argument_list pos:start="493:34" pos:end="493:46">(<argument pos:start="493:35" pos:end="493:35"><expr pos:start="493:35" pos:end="493:35"><name pos:start="493:35" pos:end="493:35">s</name></expr></argument>, <argument pos:start="493:38" pos:end="493:39"><expr pos:start="493:38" pos:end="493:39"><name pos:start="493:38" pos:end="493:39">rn</name></expr></argument>, <argument pos:start="493:42" pos:end="493:45"><expr pos:start="493:42" pos:end="493:45"><name pos:start="493:42" pos:end="493:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="495:23" pos:end="499:21">else <block pos:start="495:28" pos:end="499:21">{<block_content pos:start="497:25" pos:end="497:48">

                        <expr_stmt pos:start="497:25" pos:end="497:48"><expr pos:start="497:25" pos:end="497:47"><call pos:start="497:25" pos:end="497:47"><name pos:start="497:25" pos:end="497:41">tcg_temp_free_i32</name><argument_list pos:start="497:42" pos:end="497:47">(<argument pos:start="497:43" pos:end="497:46"><expr pos:start="497:43" pos:end="497:46"><name pos:start="497:43" pos:end="497:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="501:21" pos:end="501:42"><expr pos:start="501:21" pos:end="501:41"><call pos:start="501:21" pos:end="501:41"><name pos:start="501:21" pos:end="501:27">gen_rfe</name><argument_list pos:start="501:28" pos:end="501:41">(<argument pos:start="501:29" pos:end="501:29"><expr pos:start="501:29" pos:end="501:29"><name pos:start="501:29" pos:end="501:29">s</name></expr></argument>, <argument pos:start="501:32" pos:end="501:34"><expr pos:start="501:32" pos:end="501:34"><name pos:start="501:32" pos:end="501:34">tmp</name></expr></argument>, <argument pos:start="501:37" pos:end="501:40"><expr pos:start="501:37" pos:end="501:40"><name pos:start="501:37" pos:end="501:40">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="503:19" pos:end="511:17">else <block pos:start="503:24" pos:end="511:17">{<block_content pos:start="507:21" pos:end="509:46">

                    <comment type="block" pos:start="505:21" pos:end="505:29">/* srs */</comment>

                    <expr_stmt pos:start="507:21" pos:end="509:46"><expr pos:start="507:21" pos:end="509:45"><call pos:start="507:21" pos:end="509:45"><name pos:start="507:21" pos:end="507:27">gen_srs</name><argument_list pos:start="507:28" pos:end="509:45">(<argument pos:start="507:29" pos:end="507:29"><expr pos:start="507:29" pos:end="507:29"><name pos:start="507:29" pos:end="507:29">s</name></expr></argument>, <argument pos:start="507:32" pos:end="507:44"><expr pos:start="507:32" pos:end="507:44"><operator pos:start="507:32" pos:end="507:32">(</operator><name pos:start="507:33" pos:end="507:36">insn</name> <operator pos:start="507:38" pos:end="507:38">&amp;</operator> <literal type="number" pos:start="507:40" pos:end="507:43">0x1f</literal><operator pos:start="507:44" pos:end="507:44">)</operator></expr></argument>, <argument pos:start="507:47" pos:end="507:72"><expr pos:start="507:47" pos:end="507:72"><ternary pos:start="507:47" pos:end="507:72"><condition pos:start="507:47" pos:end="507:66"><expr pos:start="507:47" pos:end="507:64"><operator pos:start="507:47" pos:end="507:47">(</operator><name pos:start="507:48" pos:end="507:51">insn</name> <operator pos:start="507:53" pos:end="507:53">&amp;</operator> <operator pos:start="507:55" pos:end="507:55">(</operator><literal type="number" pos:start="507:56" pos:end="507:56">1</literal> <operator pos:start="507:58" pos:end="507:59">&lt;&lt;</operator> <literal type="number" pos:start="507:61" pos:end="507:62">24</literal><operator pos:start="507:63" pos:end="507:63">)</operator><operator pos:start="507:64" pos:end="507:64">)</operator></expr> ?</condition><then pos:start="507:68" pos:end="507:68"> <expr pos:start="507:68" pos:end="507:68"><literal type="number" pos:start="507:68" pos:end="507:68">1</literal></expr> </then><else pos:start="507:70" pos:end="507:72">: <expr pos:start="507:72" pos:end="507:72"><literal type="number" pos:start="507:72" pos:end="507:72">2</literal></expr></else></ternary></expr></argument>,

                            <argument pos:start="509:29" pos:end="509:44"><expr pos:start="509:29" pos:end="509:44"><name pos:start="509:29" pos:end="509:32">insn</name> <operator pos:start="509:34" pos:end="509:34">&amp;</operator> <operator pos:start="509:36" pos:end="509:36">(</operator><literal type="number" pos:start="509:37" pos:end="509:37">1</literal> <operator pos:start="509:39" pos:end="509:40">&lt;&lt;</operator> <literal type="number" pos:start="509:42" pos:end="509:43">21</literal><operator pos:start="509:44" pos:end="509:44">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="513:15" pos:end="619:13">else <block pos:start="513:20" pos:end="619:13">{<block_content pos:start="515:17" pos:end="617:17">

                <decl_stmt pos:start="515:17" pos:end="515:39"><decl pos:start="515:17" pos:end="515:21"><type pos:start="515:17" pos:end="515:19"><name pos:start="515:17" pos:end="515:19">int</name></type> <name pos:start="515:21" pos:end="515:21">i</name></decl>, <decl pos:start="515:24" pos:end="515:38"><type ref="prev" pos:start="515:17" pos:end="515:19"/><name pos:start="515:24" pos:end="515:34">loaded_base</name> <init pos:start="515:36" pos:end="515:38">= <expr pos:start="515:38" pos:end="515:38"><literal type="number" pos:start="515:38" pos:end="515:38">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="517:17" pos:end="517:36"><decl pos:start="517:17" pos:end="517:35"><type pos:start="517:17" pos:end="517:24"><name pos:start="517:17" pos:end="517:24">TCGv_i32</name></type> <name pos:start="517:26" pos:end="517:35">loaded_var</name></decl>;</decl_stmt>

                <comment type="block" pos:start="519:17" pos:end="519:43">/* Load/store multiple.  */</comment>

                <expr_stmt pos:start="521:17" pos:end="521:39"><expr pos:start="521:17" pos:end="521:38"><name pos:start="521:17" pos:end="521:20">addr</name> <operator pos:start="521:22" pos:end="521:22">=</operator> <call pos:start="521:24" pos:end="521:38"><name pos:start="521:24" pos:end="521:31">load_reg</name><argument_list pos:start="521:32" pos:end="521:38">(<argument pos:start="521:33" pos:end="521:33"><expr pos:start="521:33" pos:end="521:33"><name pos:start="521:33" pos:end="521:33">s</name></expr></argument>, <argument pos:start="521:36" pos:end="521:37"><expr pos:start="521:36" pos:end="521:37"><name pos:start="521:36" pos:end="521:37">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="523:17" pos:end="523:27"><expr pos:start="523:17" pos:end="523:26"><name pos:start="523:17" pos:end="523:22">offset</name> <operator pos:start="523:24" pos:end="523:24">=</operator> <literal type="number" pos:start="523:26" pos:end="523:26">0</literal></expr>;</expr_stmt>

                <for pos:start="525:17" pos:end="531:17">for <control pos:start="525:21" pos:end="525:40">(<init pos:start="525:22" pos:end="525:27"><expr pos:start="525:22" pos:end="525:26"><name pos:start="525:22" pos:end="525:22">i</name> <operator pos:start="525:24" pos:end="525:24">=</operator> <literal type="number" pos:start="525:26" pos:end="525:26">0</literal></expr>;</init> <condition pos:start="525:29" pos:end="525:35"><expr pos:start="525:29" pos:end="525:34"><name pos:start="525:29" pos:end="525:29">i</name> <operator pos:start="525:31" pos:end="525:31">&lt;</operator> <literal type="number" pos:start="525:33" pos:end="525:34">16</literal></expr>;</condition> <incr pos:start="525:37" pos:end="525:39"><expr pos:start="525:37" pos:end="525:39"><name pos:start="525:37" pos:end="525:37">i</name><operator pos:start="525:38" pos:end="525:39">++</operator></expr></incr>)</control> <block pos:start="525:42" pos:end="531:17">{<block_content pos:start="527:21" pos:end="529:36">

                    <if_stmt pos:start="527:21" pos:end="529:36"><if pos:start="527:21" pos:end="529:36">if <condition pos:start="527:24" pos:end="527:40">(<expr pos:start="527:25" pos:end="527:39"><name pos:start="527:25" pos:end="527:28">insn</name> <operator pos:start="527:30" pos:end="527:30">&amp;</operator> <operator pos:start="527:32" pos:end="527:32">(</operator><literal type="number" pos:start="527:33" pos:end="527:33">1</literal> <operator pos:start="527:35" pos:end="527:36">&lt;&lt;</operator> <name pos:start="527:38" pos:end="527:38">i</name><operator pos:start="527:39" pos:end="527:39">)</operator></expr>)</condition><block type="pseudo" pos:start="529:25" pos:end="529:36"><block_content pos:start="529:25" pos:end="529:36">

                        <expr_stmt pos:start="529:25" pos:end="529:36"><expr pos:start="529:25" pos:end="529:35"><name pos:start="529:25" pos:end="529:30">offset</name> <operator pos:start="529:32" pos:end="529:33">+=</operator> <literal type="number" pos:start="529:35" pos:end="529:35">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="533:17" pos:end="537:17"><if pos:start="533:17" pos:end="537:17">if <condition pos:start="533:20" pos:end="533:37">(<expr pos:start="533:21" pos:end="533:36"><name pos:start="533:21" pos:end="533:24">insn</name> <operator pos:start="533:26" pos:end="533:26">&amp;</operator> <operator pos:start="533:28" pos:end="533:28">(</operator><literal type="number" pos:start="533:29" pos:end="533:29">1</literal> <operator pos:start="533:31" pos:end="533:32">&lt;&lt;</operator> <literal type="number" pos:start="533:34" pos:end="533:35">24</literal><operator pos:start="533:36" pos:end="533:36">)</operator></expr>)</condition> <block pos:start="533:39" pos:end="537:17">{<block_content pos:start="535:21" pos:end="535:58">

                    <expr_stmt pos:start="535:21" pos:end="535:58"><expr pos:start="535:21" pos:end="535:57"><call pos:start="535:21" pos:end="535:57"><name pos:start="535:21" pos:end="535:36">tcg_gen_addi_i32</name><argument_list pos:start="535:37" pos:end="535:57">(<argument pos:start="535:38" pos:end="535:41"><expr pos:start="535:38" pos:end="535:41"><name pos:start="535:38" pos:end="535:41">addr</name></expr></argument>, <argument pos:start="535:44" pos:end="535:47"><expr pos:start="535:44" pos:end="535:47"><name pos:start="535:44" pos:end="535:47">addr</name></expr></argument>, <argument pos:start="535:50" pos:end="535:56"><expr pos:start="535:50" pos:end="535:56"><operator pos:start="535:50" pos:end="535:50">-</operator><name pos:start="535:51" pos:end="535:56">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="541:17" pos:end="541:44"><expr pos:start="541:17" pos:end="541:43"><call pos:start="541:17" pos:end="541:43"><name pos:start="541:17" pos:end="541:31">TCGV_UNUSED_I32</name><argument_list pos:start="541:32" pos:end="541:43">(<argument pos:start="541:33" pos:end="541:42"><expr pos:start="541:33" pos:end="541:42"><name pos:start="541:33" pos:end="541:42">loaded_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="543:17" pos:end="587:17">for <control pos:start="543:21" pos:end="543:40">(<init pos:start="543:22" pos:end="543:27"><expr pos:start="543:22" pos:end="543:26"><name pos:start="543:22" pos:end="543:22">i</name> <operator pos:start="543:24" pos:end="543:24">=</operator> <literal type="number" pos:start="543:26" pos:end="543:26">0</literal></expr>;</init> <condition pos:start="543:29" pos:end="543:35"><expr pos:start="543:29" pos:end="543:34"><name pos:start="543:29" pos:end="543:29">i</name> <operator pos:start="543:31" pos:end="543:31">&lt;</operator> <literal type="number" pos:start="543:33" pos:end="543:34">16</literal></expr>;</condition> <incr pos:start="543:37" pos:end="543:39"><expr pos:start="543:37" pos:end="543:39"><name pos:start="543:37" pos:end="543:37">i</name><operator pos:start="543:38" pos:end="543:39">++</operator></expr></incr>)</control> <block pos:start="543:42" pos:end="587:17">{<block_content pos:start="545:21" pos:end="585:52">

                    <if_stmt pos:start="545:21" pos:end="547:33"><if pos:start="545:21" pos:end="547:33">if <condition pos:start="545:24" pos:end="545:47">(<expr pos:start="545:25" pos:end="545:46"><operator pos:start="545:25" pos:end="545:25">(</operator><name pos:start="545:26" pos:end="545:29">insn</name> <operator pos:start="545:31" pos:end="545:31">&amp;</operator> <operator pos:start="545:33" pos:end="545:33">(</operator><literal type="number" pos:start="545:34" pos:end="545:34">1</literal> <operator pos:start="545:36" pos:end="545:37">&lt;&lt;</operator> <name pos:start="545:39" pos:end="545:39">i</name><operator pos:start="545:40" pos:end="545:40">)</operator><operator pos:start="545:41" pos:end="545:41">)</operator> <operator pos:start="545:43" pos:end="545:44">==</operator> <literal type="number" pos:start="545:46" pos:end="545:46">0</literal></expr>)</condition><block type="pseudo" pos:start="547:25" pos:end="547:33"><block_content pos:start="547:25" pos:end="547:33">

                        <continue pos:start="547:25" pos:end="547:33">continue;</continue></block_content></block></if></if_stmt>

                    <if_stmt pos:start="549:21" pos:end="583:21"><if pos:start="549:21" pos:end="573:21">if <condition pos:start="549:24" pos:end="549:41">(<expr pos:start="549:25" pos:end="549:40"><name pos:start="549:25" pos:end="549:28">insn</name> <operator pos:start="549:30" pos:end="549:30">&amp;</operator> <operator pos:start="549:32" pos:end="549:32">(</operator><literal type="number" pos:start="549:33" pos:end="549:33">1</literal> <operator pos:start="549:35" pos:end="549:36">&lt;&lt;</operator> <literal type="number" pos:start="549:38" pos:end="549:39">20</literal><operator pos:start="549:40" pos:end="549:40">)</operator></expr>)</condition> <block pos:start="549:43" pos:end="573:21">{<block_content pos:start="553:25" pos:end="571:25">

                        <comment type="block" pos:start="551:25" pos:end="551:36">/* Load.  */</comment>

                        <expr_stmt pos:start="553:25" pos:end="553:49"><expr pos:start="553:25" pos:end="553:48"><name pos:start="553:25" pos:end="553:27">tmp</name> <operator pos:start="553:29" pos:end="553:29">=</operator> <call pos:start="553:31" pos:end="553:48"><name pos:start="553:31" pos:end="553:46">tcg_temp_new_i32</name><argument_list pos:start="553:47" pos:end="553:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="555:25" pos:end="555:68"><expr pos:start="555:25" pos:end="555:67"><call pos:start="555:25" pos:end="555:67"><name pos:start="555:25" pos:end="555:38">gen_aa32_ld32u</name><argument_list pos:start="555:39" pos:end="555:67">(<argument pos:start="555:40" pos:end="555:42"><expr pos:start="555:40" pos:end="555:42"><name pos:start="555:40" pos:end="555:42">tmp</name></expr></argument>, <argument pos:start="555:45" pos:end="555:48"><expr pos:start="555:45" pos:end="555:48"><name pos:start="555:45" pos:end="555:48">addr</name></expr></argument>, <argument pos:start="555:51" pos:end="555:66"><expr pos:start="555:51" pos:end="555:66"><call pos:start="555:51" pos:end="555:66"><name pos:start="555:51" pos:end="555:63">get_mem_index</name><argument_list pos:start="555:64" pos:end="555:66">(<argument pos:start="555:65" pos:end="555:65"><expr pos:start="555:65" pos:end="555:65"><name pos:start="555:65" pos:end="555:65">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="557:25" pos:end="571:25"><if pos:start="557:25" pos:end="561:25">if <condition pos:start="557:28" pos:end="557:36">(<expr pos:start="557:29" pos:end="557:35"><name pos:start="557:29" pos:end="557:29">i</name> <operator pos:start="557:31" pos:end="557:32">==</operator> <literal type="number" pos:start="557:34" pos:end="557:35">15</literal></expr>)</condition> <block pos:start="557:38" pos:end="561:25">{<block_content pos:start="559:29" pos:end="559:43">

                            <expr_stmt pos:start="559:29" pos:end="559:43"><expr pos:start="559:29" pos:end="559:42"><call pos:start="559:29" pos:end="559:42"><name pos:start="559:29" pos:end="559:34">gen_bx</name><argument_list pos:start="559:35" pos:end="559:42">(<argument pos:start="559:36" pos:end="559:36"><expr pos:start="559:36" pos:end="559:36"><name pos:start="559:36" pos:end="559:36">s</name></expr></argument>, <argument pos:start="559:39" pos:end="559:41"><expr pos:start="559:39" pos:end="559:41"><name pos:start="559:39" pos:end="559:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="561:27" pos:end="567:25">else if <condition pos:start="561:35" pos:end="561:43">(<expr pos:start="561:36" pos:end="561:42"><name pos:start="561:36" pos:end="561:36">i</name> <operator pos:start="561:38" pos:end="561:39">==</operator> <name pos:start="561:41" pos:end="561:42">rn</name></expr>)</condition> <block pos:start="561:45" pos:end="567:25">{<block_content pos:start="563:29" pos:end="565:44">

                            <expr_stmt pos:start="563:29" pos:end="563:45"><expr pos:start="563:29" pos:end="563:44"><name pos:start="563:29" pos:end="563:38">loaded_var</name> <operator pos:start="563:40" pos:end="563:40">=</operator> <name pos:start="563:42" pos:end="563:44">tmp</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="565:29" pos:end="565:44"><expr pos:start="565:29" pos:end="565:43"><name pos:start="565:29" pos:end="565:39">loaded_base</name> <operator pos:start="565:41" pos:end="565:41">=</operator> <literal type="number" pos:start="565:43" pos:end="565:43">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="567:27" pos:end="571:25">else <block pos:start="567:32" pos:end="571:25">{<block_content pos:start="569:29" pos:end="569:49">

                            <expr_stmt pos:start="569:29" pos:end="569:49"><expr pos:start="569:29" pos:end="569:48"><call pos:start="569:29" pos:end="569:48"><name pos:start="569:29" pos:end="569:37">store_reg</name><argument_list pos:start="569:38" pos:end="569:48">(<argument pos:start="569:39" pos:end="569:39"><expr pos:start="569:39" pos:end="569:39"><name pos:start="569:39" pos:end="569:39">s</name></expr></argument>, <argument pos:start="569:42" pos:end="569:42"><expr pos:start="569:42" pos:end="569:42"><name pos:start="569:42" pos:end="569:42">i</name></expr></argument>, <argument pos:start="569:45" pos:end="569:47"><expr pos:start="569:45" pos:end="569:47"><name pos:start="569:45" pos:end="569:47">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="573:23" pos:end="583:21">else <block pos:start="573:28" pos:end="583:21">{<block_content pos:start="577:25" pos:end="581:47">

                        <comment type="block" pos:start="575:25" pos:end="575:37">/* Store.  */</comment>

                        <expr_stmt pos:start="577:25" pos:end="577:45"><expr pos:start="577:25" pos:end="577:44"><name pos:start="577:25" pos:end="577:27">tmp</name> <operator pos:start="577:29" pos:end="577:29">=</operator> <call pos:start="577:31" pos:end="577:44"><name pos:start="577:31" pos:end="577:38">load_reg</name><argument_list pos:start="577:39" pos:end="577:44">(<argument pos:start="577:40" pos:end="577:40"><expr pos:start="577:40" pos:end="577:40"><name pos:start="577:40" pos:end="577:40">s</name></expr></argument>, <argument pos:start="577:43" pos:end="577:43"><expr pos:start="577:43" pos:end="577:43"><name pos:start="577:43" pos:end="577:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="579:25" pos:end="579:67"><expr pos:start="579:25" pos:end="579:66"><call pos:start="579:25" pos:end="579:66"><name pos:start="579:25" pos:end="579:37">gen_aa32_st32</name><argument_list pos:start="579:38" pos:end="579:66">(<argument pos:start="579:39" pos:end="579:41"><expr pos:start="579:39" pos:end="579:41"><name pos:start="579:39" pos:end="579:41">tmp</name></expr></argument>, <argument pos:start="579:44" pos:end="579:47"><expr pos:start="579:44" pos:end="579:47"><name pos:start="579:44" pos:end="579:47">addr</name></expr></argument>, <argument pos:start="579:50" pos:end="579:65"><expr pos:start="579:50" pos:end="579:65"><call pos:start="579:50" pos:end="579:65"><name pos:start="579:50" pos:end="579:62">get_mem_index</name><argument_list pos:start="579:63" pos:end="579:65">(<argument pos:start="579:64" pos:end="579:64"><expr pos:start="579:64" pos:end="579:64"><name pos:start="579:64" pos:end="579:64">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="581:25" pos:end="581:47"><expr pos:start="581:25" pos:end="581:46"><call pos:start="581:25" pos:end="581:46"><name pos:start="581:25" pos:end="581:41">tcg_temp_free_i32</name><argument_list pos:start="581:42" pos:end="581:46">(<argument pos:start="581:43" pos:end="581:45"><expr pos:start="581:43" pos:end="581:45"><name pos:start="581:43" pos:end="581:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="585:21" pos:end="585:52"><expr pos:start="585:21" pos:end="585:51"><call pos:start="585:21" pos:end="585:51"><name pos:start="585:21" pos:end="585:36">tcg_gen_addi_i32</name><argument_list pos:start="585:37" pos:end="585:51">(<argument pos:start="585:38" pos:end="585:41"><expr pos:start="585:38" pos:end="585:41"><name pos:start="585:38" pos:end="585:41">addr</name></expr></argument>, <argument pos:start="585:44" pos:end="585:47"><expr pos:start="585:44" pos:end="585:47"><name pos:start="585:44" pos:end="585:47">addr</name></expr></argument>, <argument pos:start="585:50" pos:end="585:50"><expr pos:start="585:50" pos:end="585:50"><literal type="number" pos:start="585:50" pos:end="585:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="589:17" pos:end="593:17"><if pos:start="589:17" pos:end="593:17">if <condition pos:start="589:20" pos:end="589:32">(<expr pos:start="589:21" pos:end="589:31"><name pos:start="589:21" pos:end="589:31">loaded_base</name></expr>)</condition> <block pos:start="589:34" pos:end="593:17">{<block_content pos:start="591:21" pos:end="591:49">

                    <expr_stmt pos:start="591:21" pos:end="591:49"><expr pos:start="591:21" pos:end="591:48"><call pos:start="591:21" pos:end="591:48"><name pos:start="591:21" pos:end="591:29">store_reg</name><argument_list pos:start="591:30" pos:end="591:48">(<argument pos:start="591:31" pos:end="591:31"><expr pos:start="591:31" pos:end="591:31"><name pos:start="591:31" pos:end="591:31">s</name></expr></argument>, <argument pos:start="591:34" pos:end="591:35"><expr pos:start="591:34" pos:end="591:35"><name pos:start="591:34" pos:end="591:35">rn</name></expr></argument>, <argument pos:start="591:38" pos:end="591:47"><expr pos:start="591:38" pos:end="591:47"><name pos:start="591:38" pos:end="591:47">loaded_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="595:17" pos:end="617:17"><if pos:start="595:17" pos:end="613:17">if <condition pos:start="595:20" pos:end="595:37">(<expr pos:start="595:21" pos:end="595:36"><name pos:start="595:21" pos:end="595:24">insn</name> <operator pos:start="595:26" pos:end="595:26">&amp;</operator> <operator pos:start="595:28" pos:end="595:28">(</operator><literal type="number" pos:start="595:29" pos:end="595:29">1</literal> <operator pos:start="595:31" pos:end="595:32">&lt;&lt;</operator> <literal type="number" pos:start="595:34" pos:end="595:35">21</literal><operator pos:start="595:36" pos:end="595:36">)</operator></expr>)</condition> <block pos:start="595:39" pos:end="613:17">{<block_content pos:start="599:21" pos:end="611:43">

                    <comment type="block" pos:start="597:21" pos:end="597:51">/* Base register writeback.  */</comment>

                    <if_stmt pos:start="599:21" pos:end="603:21"><if pos:start="599:21" pos:end="603:21">if <condition pos:start="599:24" pos:end="599:41">(<expr pos:start="599:25" pos:end="599:40"><name pos:start="599:25" pos:end="599:28">insn</name> <operator pos:start="599:30" pos:end="599:30">&amp;</operator> <operator pos:start="599:32" pos:end="599:32">(</operator><literal type="number" pos:start="599:33" pos:end="599:33">1</literal> <operator pos:start="599:35" pos:end="599:36">&lt;&lt;</operator> <literal type="number" pos:start="599:38" pos:end="599:39">24</literal><operator pos:start="599:40" pos:end="599:40">)</operator></expr>)</condition> <block pos:start="599:43" pos:end="603:21">{<block_content pos:start="601:25" pos:end="601:62">

                        <expr_stmt pos:start="601:25" pos:end="601:62"><expr pos:start="601:25" pos:end="601:61"><call pos:start="601:25" pos:end="601:61"><name pos:start="601:25" pos:end="601:40">tcg_gen_addi_i32</name><argument_list pos:start="601:41" pos:end="601:61">(<argument pos:start="601:42" pos:end="601:45"><expr pos:start="601:42" pos:end="601:45"><name pos:start="601:42" pos:end="601:45">addr</name></expr></argument>, <argument pos:start="601:48" pos:end="601:51"><expr pos:start="601:48" pos:end="601:51"><name pos:start="601:48" pos:end="601:51">addr</name></expr></argument>, <argument pos:start="601:54" pos:end="601:60"><expr pos:start="601:54" pos:end="601:60"><operator pos:start="601:54" pos:end="601:54">-</operator><name pos:start="601:55" pos:end="601:60">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="605:21" pos:end="605:75">/* Fault if writeback register is in register list.  */</comment>

                    <if_stmt pos:start="607:21" pos:end="609:40"><if pos:start="607:21" pos:end="609:40">if <condition pos:start="607:24" pos:end="607:41">(<expr pos:start="607:25" pos:end="607:40"><name pos:start="607:25" pos:end="607:28">insn</name> <operator pos:start="607:30" pos:end="607:30">&amp;</operator> <operator pos:start="607:32" pos:end="607:32">(</operator><literal type="number" pos:start="607:33" pos:end="607:33">1</literal> <operator pos:start="607:35" pos:end="607:36">&lt;&lt;</operator> <name pos:start="607:38" pos:end="607:39">rn</name><operator pos:start="607:40" pos:end="607:40">)</operator></expr>)</condition><block type="pseudo" pos:start="609:25" pos:end="609:40"><block_content pos:start="609:25" pos:end="609:40">

                        <goto pos:start="609:25" pos:end="609:40">goto <name pos:start="609:30" pos:end="609:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="611:21" pos:end="611:43"><expr pos:start="611:21" pos:end="611:42"><call pos:start="611:21" pos:end="611:42"><name pos:start="611:21" pos:end="611:29">store_reg</name><argument_list pos:start="611:30" pos:end="611:42">(<argument pos:start="611:31" pos:end="611:31"><expr pos:start="611:31" pos:end="611:31"><name pos:start="611:31" pos:end="611:31">s</name></expr></argument>, <argument pos:start="611:34" pos:end="611:35"><expr pos:start="611:34" pos:end="611:35"><name pos:start="611:34" pos:end="611:35">rn</name></expr></argument>, <argument pos:start="611:38" pos:end="611:41"><expr pos:start="611:38" pos:end="611:41"><name pos:start="611:38" pos:end="611:41">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="613:19" pos:end="617:17">else <block pos:start="613:24" pos:end="617:17">{<block_content pos:start="615:21" pos:end="615:44">

                    <expr_stmt pos:start="615:21" pos:end="615:44"><expr pos:start="615:21" pos:end="615:43"><call pos:start="615:21" pos:end="615:43"><name pos:start="615:21" pos:end="615:37">tcg_temp_free_i32</name><argument_list pos:start="615:38" pos:end="615:43">(<argument pos:start="615:39" pos:end="615:42"><expr pos:start="615:39" pos:end="615:42"><name pos:start="615:39" pos:end="615:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="623:9" pos:end="623:14">break;</break>

    <case pos:start="625:5" pos:end="625:11">case <expr pos:start="625:10" pos:end="625:10"><literal type="number" pos:start="625:10" pos:end="625:10">5</literal></expr>:</case>



        <expr_stmt pos:start="629:9" pos:end="629:32"><expr pos:start="629:9" pos:end="629:31"><name pos:start="629:9" pos:end="629:10">op</name> <operator pos:start="629:12" pos:end="629:12">=</operator> <operator pos:start="629:14" pos:end="629:14">(</operator><name pos:start="629:15" pos:end="629:18">insn</name> <operator pos:start="629:20" pos:end="629:21">&gt;&gt;</operator> <literal type="number" pos:start="629:23" pos:end="629:24">21</literal><operator pos:start="629:25" pos:end="629:25">)</operator> <operator pos:start="629:27" pos:end="629:27">&amp;</operator> <literal type="number" pos:start="629:29" pos:end="629:31">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="631:9" pos:end="727:9"><if pos:start="631:9" pos:end="681:9">if <condition pos:start="631:12" pos:end="631:20">(<expr pos:start="631:13" pos:end="631:19"><name pos:start="631:13" pos:end="631:14">op</name> <operator pos:start="631:16" pos:end="631:17">==</operator> <literal type="number" pos:start="631:19" pos:end="631:19">6</literal></expr>)</condition> <block pos:start="631:22" pos:end="681:9">{<block_content pos:start="633:13" pos:end="679:34">

            <if_stmt pos:start="633:13" pos:end="637:13"><if pos:start="633:13" pos:end="637:13">if <condition pos:start="633:16" pos:end="633:58">(<expr pos:start="633:17" pos:end="633:57"><operator pos:start="633:17" pos:end="633:17">!</operator><call pos:start="633:18" pos:end="633:57"><name pos:start="633:18" pos:end="633:31">arm_dc_feature</name><argument_list pos:start="633:32" pos:end="633:57">(<argument pos:start="633:33" pos:end="633:33"><expr pos:start="633:33" pos:end="633:33"><name pos:start="633:33" pos:end="633:33">s</name></expr></argument>, <argument pos:start="633:36" pos:end="633:56"><expr pos:start="633:36" pos:end="633:56"><name pos:start="633:36" pos:end="633:56">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="633:60" pos:end="637:13">{<block_content pos:start="635:17" pos:end="635:32">

                <goto pos:start="635:17" pos:end="635:32">goto <name pos:start="635:22" pos:end="635:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="639:13" pos:end="639:33">/* Halfword pack.  */</comment>

            <expr_stmt pos:start="641:13" pos:end="641:34"><expr pos:start="641:13" pos:end="641:33"><name pos:start="641:13" pos:end="641:15">tmp</name> <operator pos:start="641:17" pos:end="641:17">=</operator> <call pos:start="641:19" pos:end="641:33"><name pos:start="641:19" pos:end="641:26">load_reg</name><argument_list pos:start="641:27" pos:end="641:33">(<argument pos:start="641:28" pos:end="641:28"><expr pos:start="641:28" pos:end="641:28"><name pos:start="641:28" pos:end="641:28">s</name></expr></argument>, <argument pos:start="641:31" pos:end="641:32"><expr pos:start="641:31" pos:end="641:32"><name pos:start="641:31" pos:end="641:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="643:13" pos:end="643:35"><expr pos:start="643:13" pos:end="643:34"><name pos:start="643:13" pos:end="643:16">tmp2</name> <operator pos:start="643:18" pos:end="643:18">=</operator> <call pos:start="643:20" pos:end="643:34"><name pos:start="643:20" pos:end="643:27">load_reg</name><argument_list pos:start="643:28" pos:end="643:34">(<argument pos:start="643:29" pos:end="643:29"><expr pos:start="643:29" pos:end="643:29"><name pos:start="643:29" pos:end="643:29">s</name></expr></argument>, <argument pos:start="643:32" pos:end="643:33"><expr pos:start="643:32" pos:end="643:33"><name pos:start="643:32" pos:end="643:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="645:13" pos:end="645:64"><expr pos:start="645:13" pos:end="645:63"><name pos:start="645:13" pos:end="645:17">shift</name> <operator pos:start="645:19" pos:end="645:19">=</operator> <operator pos:start="645:21" pos:end="645:21">(</operator><operator pos:start="645:22" pos:end="645:22">(</operator><name pos:start="645:23" pos:end="645:26">insn</name> <operator pos:start="645:28" pos:end="645:29">&gt;&gt;</operator> <literal type="number" pos:start="645:31" pos:end="645:32">10</literal><operator pos:start="645:33" pos:end="645:33">)</operator> <operator pos:start="645:35" pos:end="645:35">&amp;</operator> <literal type="number" pos:start="645:37" pos:end="645:40">0x1c</literal><operator pos:start="645:41" pos:end="645:41">)</operator> <operator pos:start="645:43" pos:end="645:43">|</operator> <operator pos:start="645:45" pos:end="645:45">(</operator><operator pos:start="645:46" pos:end="645:46">(</operator><name pos:start="645:47" pos:end="645:50">insn</name> <operator pos:start="645:52" pos:end="645:53">&gt;&gt;</operator> <literal type="number" pos:start="645:55" pos:end="645:55">6</literal><operator pos:start="645:56" pos:end="645:56">)</operator> <operator pos:start="645:58" pos:end="645:58">&amp;</operator> <literal type="number" pos:start="645:60" pos:end="645:62">0x3</literal><operator pos:start="645:63" pos:end="645:63">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="647:13" pos:end="673:13"><if pos:start="647:13" pos:end="661:13">if <condition pos:start="647:16" pos:end="647:32">(<expr pos:start="647:17" pos:end="647:31"><name pos:start="647:17" pos:end="647:20">insn</name> <operator pos:start="647:22" pos:end="647:22">&amp;</operator> <operator pos:start="647:24" pos:end="647:24">(</operator><literal type="number" pos:start="647:25" pos:end="647:25">1</literal> <operator pos:start="647:27" pos:end="647:28">&lt;&lt;</operator> <literal type="number" pos:start="647:30" pos:end="647:30">5</literal><operator pos:start="647:31" pos:end="647:31">)</operator></expr>)</condition> <block pos:start="647:34" pos:end="661:13">{<block_content pos:start="651:17" pos:end="659:47">

                <comment type="block" pos:start="649:17" pos:end="649:27">/* pkhtb */</comment>

                <if_stmt pos:start="651:17" pos:end="653:31"><if pos:start="651:17" pos:end="653:31">if <condition pos:start="651:20" pos:end="651:31">(<expr pos:start="651:21" pos:end="651:30"><name pos:start="651:21" pos:end="651:25">shift</name> <operator pos:start="651:27" pos:end="651:28">==</operator> <literal type="number" pos:start="651:30" pos:end="651:30">0</literal></expr>)</condition><block type="pseudo" pos:start="653:21" pos:end="653:31"><block_content pos:start="653:21" pos:end="653:31">

                    <expr_stmt pos:start="653:21" pos:end="653:31"><expr pos:start="653:21" pos:end="653:30"><name pos:start="653:21" pos:end="653:25">shift</name> <operator pos:start="653:27" pos:end="653:27">=</operator> <literal type="number" pos:start="653:29" pos:end="653:30">31</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="655:17" pos:end="655:52"><expr pos:start="655:17" pos:end="655:51"><call pos:start="655:17" pos:end="655:51"><name pos:start="655:17" pos:end="655:32">tcg_gen_sari_i32</name><argument_list pos:start="655:33" pos:end="655:51">(<argument pos:start="655:34" pos:end="655:37"><expr pos:start="655:34" pos:end="655:37"><name pos:start="655:34" pos:end="655:37">tmp2</name></expr></argument>, <argument pos:start="655:40" pos:end="655:43"><expr pos:start="655:40" pos:end="655:43"><name pos:start="655:40" pos:end="655:43">tmp2</name></expr></argument>, <argument pos:start="655:46" pos:end="655:50"><expr pos:start="655:46" pos:end="655:50"><name pos:start="655:46" pos:end="655:50">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="657:17" pos:end="657:55"><expr pos:start="657:17" pos:end="657:54"><call pos:start="657:17" pos:end="657:54"><name pos:start="657:17" pos:end="657:32">tcg_gen_andi_i32</name><argument_list pos:start="657:33" pos:end="657:54">(<argument pos:start="657:34" pos:end="657:36"><expr pos:start="657:34" pos:end="657:36"><name pos:start="657:34" pos:end="657:36">tmp</name></expr></argument>, <argument pos:start="657:39" pos:end="657:41"><expr pos:start="657:39" pos:end="657:41"><name pos:start="657:39" pos:end="657:41">tmp</name></expr></argument>, <argument pos:start="657:44" pos:end="657:53"><expr pos:start="657:44" pos:end="657:53"><literal type="number" pos:start="657:44" pos:end="657:53">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="659:17" pos:end="659:47"><expr pos:start="659:17" pos:end="659:46"><call pos:start="659:17" pos:end="659:46"><name pos:start="659:17" pos:end="659:34">tcg_gen_ext16u_i32</name><argument_list pos:start="659:35" pos:end="659:46">(<argument pos:start="659:36" pos:end="659:39"><expr pos:start="659:36" pos:end="659:39"><name pos:start="659:36" pos:end="659:39">tmp2</name></expr></argument>, <argument pos:start="659:42" pos:end="659:45"><expr pos:start="659:42" pos:end="659:45"><name pos:start="659:42" pos:end="659:45">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="661:15" pos:end="673:13">else <block pos:start="661:20" pos:end="673:13">{<block_content pos:start="665:17" pos:end="671:57">

                <comment type="block" pos:start="663:17" pos:end="663:27">/* pkhbt */</comment>

                <if_stmt pos:start="665:17" pos:end="667:56"><if pos:start="665:17" pos:end="667:56">if <condition pos:start="665:20" pos:end="665:26">(<expr pos:start="665:21" pos:end="665:25"><name pos:start="665:21" pos:end="665:25">shift</name></expr>)</condition><block type="pseudo" pos:start="667:21" pos:end="667:56"><block_content pos:start="667:21" pos:end="667:56">

                    <expr_stmt pos:start="667:21" pos:end="667:56"><expr pos:start="667:21" pos:end="667:55"><call pos:start="667:21" pos:end="667:55"><name pos:start="667:21" pos:end="667:36">tcg_gen_shli_i32</name><argument_list pos:start="667:37" pos:end="667:55">(<argument pos:start="667:38" pos:end="667:41"><expr pos:start="667:38" pos:end="667:41"><name pos:start="667:38" pos:end="667:41">tmp2</name></expr></argument>, <argument pos:start="667:44" pos:end="667:47"><expr pos:start="667:44" pos:end="667:47"><name pos:start="667:44" pos:end="667:47">tmp2</name></expr></argument>, <argument pos:start="667:50" pos:end="667:54"><expr pos:start="667:50" pos:end="667:54"><name pos:start="667:50" pos:end="667:54">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="669:17" pos:end="669:45"><expr pos:start="669:17" pos:end="669:44"><call pos:start="669:17" pos:end="669:44"><name pos:start="669:17" pos:end="669:34">tcg_gen_ext16u_i32</name><argument_list pos:start="669:35" pos:end="669:44">(<argument pos:start="669:36" pos:end="669:38"><expr pos:start="669:36" pos:end="669:38"><name pos:start="669:36" pos:end="669:38">tmp</name></expr></argument>, <argument pos:start="669:41" pos:end="669:43"><expr pos:start="669:41" pos:end="669:43"><name pos:start="669:41" pos:end="669:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="671:17" pos:end="671:57"><expr pos:start="671:17" pos:end="671:56"><call pos:start="671:17" pos:end="671:56"><name pos:start="671:17" pos:end="671:32">tcg_gen_andi_i32</name><argument_list pos:start="671:33" pos:end="671:56">(<argument pos:start="671:34" pos:end="671:37"><expr pos:start="671:34" pos:end="671:37"><name pos:start="671:34" pos:end="671:37">tmp2</name></expr></argument>, <argument pos:start="671:40" pos:end="671:43"><expr pos:start="671:40" pos:end="671:43"><name pos:start="671:40" pos:end="671:43">tmp2</name></expr></argument>, <argument pos:start="671:46" pos:end="671:55"><expr pos:start="671:46" pos:end="671:55"><literal type="number" pos:start="671:46" pos:end="671:55">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="675:13" pos:end="675:43"><expr pos:start="675:13" pos:end="675:42"><call pos:start="675:13" pos:end="675:42"><name pos:start="675:13" pos:end="675:26">tcg_gen_or_i32</name><argument_list pos:start="675:27" pos:end="675:42">(<argument pos:start="675:28" pos:end="675:30"><expr pos:start="675:28" pos:end="675:30"><name pos:start="675:28" pos:end="675:30">tmp</name></expr></argument>, <argument pos:start="675:33" pos:end="675:35"><expr pos:start="675:33" pos:end="675:35"><name pos:start="675:33" pos:end="675:35">tmp</name></expr></argument>, <argument pos:start="675:38" pos:end="675:41"><expr pos:start="675:38" pos:end="675:41"><name pos:start="675:38" pos:end="675:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="677:13" pos:end="677:36"><expr pos:start="677:13" pos:end="677:35"><call pos:start="677:13" pos:end="677:35"><name pos:start="677:13" pos:end="677:29">tcg_temp_free_i32</name><argument_list pos:start="677:30" pos:end="677:35">(<argument pos:start="677:31" pos:end="677:34"><expr pos:start="677:31" pos:end="677:34"><name pos:start="677:31" pos:end="677:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="679:13" pos:end="679:34"><expr pos:start="679:13" pos:end="679:33"><call pos:start="679:13" pos:end="679:33"><name pos:start="679:13" pos:end="679:21">store_reg</name><argument_list pos:start="679:22" pos:end="679:33">(<argument pos:start="679:23" pos:end="679:23"><expr pos:start="679:23" pos:end="679:23"><name pos:start="679:23" pos:end="679:23">s</name></expr></argument>, <argument pos:start="679:26" pos:end="679:27"><expr pos:start="679:26" pos:end="679:27"><name pos:start="679:26" pos:end="679:27">rd</name></expr></argument>, <argument pos:start="679:30" pos:end="679:32"><expr pos:start="679:30" pos:end="679:32"><name pos:start="679:30" pos:end="679:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="681:11" pos:end="727:9">else <block pos:start="681:16" pos:end="727:9">{<block_content pos:start="685:13" pos:end="725:13">

            <comment type="block" pos:start="683:13" pos:end="683:59">/* Data processing register constant shift.  */</comment>

            <if_stmt pos:start="685:13" pos:end="695:13"><if pos:start="685:13" pos:end="691:13">if <condition pos:start="685:16" pos:end="685:25">(<expr pos:start="685:17" pos:end="685:24"><name pos:start="685:17" pos:end="685:18">rn</name> <operator pos:start="685:20" pos:end="685:21">==</operator> <literal type="number" pos:start="685:23" pos:end="685:24">15</literal></expr>)</condition> <block pos:start="685:27" pos:end="691:13">{<block_content pos:start="687:17" pos:end="689:41">

                <expr_stmt pos:start="687:17" pos:end="687:41"><expr pos:start="687:17" pos:end="687:40"><name pos:start="687:17" pos:end="687:19">tmp</name> <operator pos:start="687:21" pos:end="687:21">=</operator> <call pos:start="687:23" pos:end="687:40"><name pos:start="687:23" pos:end="687:38">tcg_temp_new_i32</name><argument_list pos:start="687:39" pos:end="687:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="689:17" pos:end="689:41"><expr pos:start="689:17" pos:end="689:40"><call pos:start="689:17" pos:end="689:40"><name pos:start="689:17" pos:end="689:32">tcg_gen_movi_i32</name><argument_list pos:start="689:33" pos:end="689:40">(<argument pos:start="689:34" pos:end="689:36"><expr pos:start="689:34" pos:end="689:36"><name pos:start="689:34" pos:end="689:36">tmp</name></expr></argument>, <argument pos:start="689:39" pos:end="689:39"><expr pos:start="689:39" pos:end="689:39"><literal type="number" pos:start="689:39" pos:end="689:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="691:15" pos:end="695:13">else <block pos:start="691:20" pos:end="695:13">{<block_content pos:start="693:17" pos:end="693:38">

                <expr_stmt pos:start="693:17" pos:end="693:38"><expr pos:start="693:17" pos:end="693:37"><name pos:start="693:17" pos:end="693:19">tmp</name> <operator pos:start="693:21" pos:end="693:21">=</operator> <call pos:start="693:23" pos:end="693:37"><name pos:start="693:23" pos:end="693:30">load_reg</name><argument_list pos:start="693:31" pos:end="693:37">(<argument pos:start="693:32" pos:end="693:32"><expr pos:start="693:32" pos:end="693:32"><name pos:start="693:32" pos:end="693:32">s</name></expr></argument>, <argument pos:start="693:35" pos:end="693:36"><expr pos:start="693:35" pos:end="693:36"><name pos:start="693:35" pos:end="693:36">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="697:13" pos:end="697:35"><expr pos:start="697:13" pos:end="697:34"><name pos:start="697:13" pos:end="697:16">tmp2</name> <operator pos:start="697:18" pos:end="697:18">=</operator> <call pos:start="697:20" pos:end="697:34"><name pos:start="697:20" pos:end="697:27">load_reg</name><argument_list pos:start="697:28" pos:end="697:34">(<argument pos:start="697:29" pos:end="697:29"><expr pos:start="697:29" pos:end="697:29"><name pos:start="697:29" pos:end="697:29">s</name></expr></argument>, <argument pos:start="697:32" pos:end="697:33"><expr pos:start="697:32" pos:end="697:33"><name pos:start="697:32" pos:end="697:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="701:13" pos:end="701:38"><expr pos:start="701:13" pos:end="701:37"><name pos:start="701:13" pos:end="701:19">shiftop</name> <operator pos:start="701:21" pos:end="701:21">=</operator> <operator pos:start="701:23" pos:end="701:23">(</operator><name pos:start="701:24" pos:end="701:27">insn</name> <operator pos:start="701:29" pos:end="701:30">&gt;&gt;</operator> <literal type="number" pos:start="701:32" pos:end="701:32">4</literal><operator pos:start="701:33" pos:end="701:33">)</operator> <operator pos:start="701:35" pos:end="701:35">&amp;</operator> <literal type="number" pos:start="701:37" pos:end="701:37">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="703:13" pos:end="703:62"><expr pos:start="703:13" pos:end="703:61"><name pos:start="703:13" pos:end="703:17">shift</name> <operator pos:start="703:19" pos:end="703:19">=</operator> <operator pos:start="703:21" pos:end="703:21">(</operator><operator pos:start="703:22" pos:end="703:22">(</operator><name pos:start="703:23" pos:end="703:26">insn</name> <operator pos:start="703:28" pos:end="703:29">&gt;&gt;</operator> <literal type="number" pos:start="703:31" pos:end="703:31">6</literal><operator pos:start="703:32" pos:end="703:32">)</operator> <operator pos:start="703:34" pos:end="703:34">&amp;</operator> <literal type="number" pos:start="703:36" pos:end="703:36">3</literal><operator pos:start="703:37" pos:end="703:37">)</operator> <operator pos:start="703:39" pos:end="703:39">|</operator> <operator pos:start="703:41" pos:end="703:41">(</operator><operator pos:start="703:42" pos:end="703:42">(</operator><name pos:start="703:43" pos:end="703:46">insn</name> <operator pos:start="703:48" pos:end="703:49">&gt;&gt;</operator> <literal type="number" pos:start="703:51" pos:end="703:52">10</literal><operator pos:start="703:53" pos:end="703:53">)</operator> <operator pos:start="703:55" pos:end="703:55">&amp;</operator> <literal type="number" pos:start="703:57" pos:end="703:60">0x1c</literal><operator pos:start="703:61" pos:end="703:61">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="705:13" pos:end="705:44"><expr pos:start="705:13" pos:end="705:43"><name pos:start="705:13" pos:end="705:17">conds</name> <operator pos:start="705:19" pos:end="705:19">=</operator> <operator pos:start="705:21" pos:end="705:21">(</operator><name pos:start="705:22" pos:end="705:25">insn</name> <operator pos:start="705:27" pos:end="705:27">&amp;</operator> <operator pos:start="705:29" pos:end="705:29">(</operator><literal type="number" pos:start="705:30" pos:end="705:30">1</literal> <operator pos:start="705:32" pos:end="705:33">&lt;&lt;</operator> <literal type="number" pos:start="705:35" pos:end="705:36">20</literal><operator pos:start="705:37" pos:end="705:37">)</operator><operator pos:start="705:38" pos:end="705:38">)</operator> <operator pos:start="705:40" pos:end="705:41">!=</operator> <literal type="number" pos:start="705:43" pos:end="705:43">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="707:13" pos:end="707:54"><expr pos:start="707:13" pos:end="707:53"><name pos:start="707:13" pos:end="707:20">logic_cc</name> <operator pos:start="707:22" pos:end="707:22">=</operator> <operator pos:start="707:24" pos:end="707:24">(</operator><name pos:start="707:25" pos:end="707:29">conds</name> <operator pos:start="707:31" pos:end="707:32">&amp;&amp;</operator> <call pos:start="707:34" pos:end="707:52"><name pos:start="707:34" pos:end="707:48">thumb2_logic_op</name><argument_list pos:start="707:49" pos:end="707:52">(<argument pos:start="707:50" pos:end="707:51"><expr pos:start="707:50" pos:end="707:51"><name pos:start="707:50" pos:end="707:51">op</name></expr></argument>)</argument_list></call><operator pos:start="707:53" pos:end="707:53">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="709:13" pos:end="709:61"><expr pos:start="709:13" pos:end="709:60"><call pos:start="709:13" pos:end="709:60"><name pos:start="709:13" pos:end="709:28">gen_arm_shift_im</name><argument_list pos:start="709:29" pos:end="709:60">(<argument pos:start="709:30" pos:end="709:33"><expr pos:start="709:30" pos:end="709:33"><name pos:start="709:30" pos:end="709:33">tmp2</name></expr></argument>, <argument pos:start="709:36" pos:end="709:42"><expr pos:start="709:36" pos:end="709:42"><name pos:start="709:36" pos:end="709:42">shiftop</name></expr></argument>, <argument pos:start="709:45" pos:end="709:49"><expr pos:start="709:45" pos:end="709:49"><name pos:start="709:45" pos:end="709:49">shift</name></expr></argument>, <argument pos:start="709:52" pos:end="709:59"><expr pos:start="709:52" pos:end="709:59"><name pos:start="709:52" pos:end="709:59">logic_cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="711:13" pos:end="713:32"><if pos:start="711:13" pos:end="713:32">if <condition pos:start="711:16" pos:end="711:63">(<expr pos:start="711:17" pos:end="711:62"><call pos:start="711:17" pos:end="711:62"><name pos:start="711:17" pos:end="711:34">gen_thumb2_data_op</name><argument_list pos:start="711:35" pos:end="711:62">(<argument pos:start="711:36" pos:end="711:36"><expr pos:start="711:36" pos:end="711:36"><name pos:start="711:36" pos:end="711:36">s</name></expr></argument>, <argument pos:start="711:39" pos:end="711:40"><expr pos:start="711:39" pos:end="711:40"><name pos:start="711:39" pos:end="711:40">op</name></expr></argument>, <argument pos:start="711:43" pos:end="711:47"><expr pos:start="711:43" pos:end="711:47"><name pos:start="711:43" pos:end="711:47">conds</name></expr></argument>, <argument pos:start="711:50" pos:end="711:50"><expr pos:start="711:50" pos:end="711:50"><literal type="number" pos:start="711:50" pos:end="711:50">0</literal></expr></argument>, <argument pos:start="711:53" pos:end="711:55"><expr pos:start="711:53" pos:end="711:55"><name pos:start="711:53" pos:end="711:55">tmp</name></expr></argument>, <argument pos:start="711:58" pos:end="711:61"><expr pos:start="711:58" pos:end="711:61"><name pos:start="711:58" pos:end="711:61">tmp2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="713:17" pos:end="713:32"><block_content pos:start="713:17" pos:end="713:32">

                <goto pos:start="713:17" pos:end="713:32">goto <name pos:start="713:22" pos:end="713:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="715:13" pos:end="715:36"><expr pos:start="715:13" pos:end="715:35"><call pos:start="715:13" pos:end="715:35"><name pos:start="715:13" pos:end="715:29">tcg_temp_free_i32</name><argument_list pos:start="715:30" pos:end="715:35">(<argument pos:start="715:31" pos:end="715:34"><expr pos:start="715:31" pos:end="715:34"><name pos:start="715:31" pos:end="715:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="717:13" pos:end="725:13"><if pos:start="717:13" pos:end="721:13">if <condition pos:start="717:16" pos:end="717:25">(<expr pos:start="717:17" pos:end="717:24"><name pos:start="717:17" pos:end="717:18">rd</name> <operator pos:start="717:20" pos:end="717:21">!=</operator> <literal type="number" pos:start="717:23" pos:end="717:24">15</literal></expr>)</condition> <block pos:start="717:27" pos:end="721:13">{<block_content pos:start="719:17" pos:end="719:38">

                <expr_stmt pos:start="719:17" pos:end="719:38"><expr pos:start="719:17" pos:end="719:37"><call pos:start="719:17" pos:end="719:37"><name pos:start="719:17" pos:end="719:25">store_reg</name><argument_list pos:start="719:26" pos:end="719:37">(<argument pos:start="719:27" pos:end="719:27"><expr pos:start="719:27" pos:end="719:27"><name pos:start="719:27" pos:end="719:27">s</name></expr></argument>, <argument pos:start="719:30" pos:end="719:31"><expr pos:start="719:30" pos:end="719:31"><name pos:start="719:30" pos:end="719:31">rd</name></expr></argument>, <argument pos:start="719:34" pos:end="719:36"><expr pos:start="719:34" pos:end="719:36"><name pos:start="719:34" pos:end="719:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="721:15" pos:end="725:13">else <block pos:start="721:20" pos:end="725:13">{<block_content pos:start="723:17" pos:end="723:39">

                <expr_stmt pos:start="723:17" pos:end="723:39"><expr pos:start="723:17" pos:end="723:38"><call pos:start="723:17" pos:end="723:38"><name pos:start="723:17" pos:end="723:33">tcg_temp_free_i32</name><argument_list pos:start="723:34" pos:end="723:38">(<argument pos:start="723:35" pos:end="723:37"><expr pos:start="723:35" pos:end="723:37"><name pos:start="723:35" pos:end="723:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="729:9" pos:end="729:14">break;</break>

    <case pos:start="731:5" pos:end="731:12">case <expr pos:start="731:10" pos:end="731:11"><literal type="number" pos:start="731:10" pos:end="731:11">13</literal></expr>:</case> <comment type="block" pos:start="731:14" pos:end="731:41">/* Misc data processing.  */</comment>

        <expr_stmt pos:start="733:9" pos:end="733:52"><expr pos:start="733:9" pos:end="733:51"><name pos:start="733:9" pos:end="733:10">op</name> <operator pos:start="733:12" pos:end="733:12">=</operator> <operator pos:start="733:14" pos:end="733:14">(</operator><operator pos:start="733:15" pos:end="733:15">(</operator><name pos:start="733:16" pos:end="733:19">insn</name> <operator pos:start="733:21" pos:end="733:22">&gt;&gt;</operator> <literal type="number" pos:start="733:24" pos:end="733:25">22</literal><operator pos:start="733:26" pos:end="733:26">)</operator> <operator pos:start="733:28" pos:end="733:28">&amp;</operator> <literal type="number" pos:start="733:30" pos:end="733:30">6</literal><operator pos:start="733:31" pos:end="733:31">)</operator> <operator pos:start="733:33" pos:end="733:33">|</operator> <operator pos:start="733:35" pos:end="733:35">(</operator><operator pos:start="733:36" pos:end="733:36">(</operator><name pos:start="733:37" pos:end="733:40">insn</name> <operator pos:start="733:42" pos:end="733:43">&gt;&gt;</operator> <literal type="number" pos:start="733:45" pos:end="733:45">7</literal><operator pos:start="733:46" pos:end="733:46">)</operator> <operator pos:start="733:48" pos:end="733:48">&amp;</operator> <literal type="number" pos:start="733:50" pos:end="733:50">1</literal><operator pos:start="733:51" pos:end="733:51">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="735:9" pos:end="737:28"><if pos:start="735:9" pos:end="737:28">if <condition pos:start="735:12" pos:end="735:48">(<expr pos:start="735:13" pos:end="735:47"><name pos:start="735:13" pos:end="735:14">op</name> <operator pos:start="735:16" pos:end="735:16">&lt;</operator> <literal type="number" pos:start="735:18" pos:end="735:18">4</literal> <operator pos:start="735:20" pos:end="735:21">&amp;&amp;</operator> <operator pos:start="735:23" pos:end="735:23">(</operator><name pos:start="735:24" pos:end="735:27">insn</name> <operator pos:start="735:29" pos:end="735:29">&amp;</operator> <literal type="number" pos:start="735:31" pos:end="735:36">0xf000</literal><operator pos:start="735:37" pos:end="735:37">)</operator> <operator pos:start="735:39" pos:end="735:40">!=</operator> <literal type="number" pos:start="735:42" pos:end="735:47">0xf000</literal></expr>)</condition><block type="pseudo" pos:start="737:13" pos:end="737:28"><block_content pos:start="737:13" pos:end="737:28">

            <goto pos:start="737:13" pos:end="737:28">goto <name pos:start="737:18" pos:end="737:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <switch pos:start="739:9" pos:end="1465:9">switch <condition pos:start="739:16" pos:end="739:19">(<expr pos:start="739:17" pos:end="739:18"><name pos:start="739:17" pos:end="739:18">op</name></expr>)</condition> <block pos:start="739:21" pos:end="1465:9">{<block_content pos:start="741:9" pos:end="1463:18">

        <case pos:start="741:9" pos:end="741:15">case <expr pos:start="741:14" pos:end="741:14"><literal type="number" pos:start="741:14" pos:end="741:14">0</literal></expr>:</case> <comment type="block" pos:start="741:17" pos:end="741:49">/* Register controlled shift.  */</comment>

            <expr_stmt pos:start="743:13" pos:end="743:34"><expr pos:start="743:13" pos:end="743:33"><name pos:start="743:13" pos:end="743:15">tmp</name> <operator pos:start="743:17" pos:end="743:17">=</operator> <call pos:start="743:19" pos:end="743:33"><name pos:start="743:19" pos:end="743:26">load_reg</name><argument_list pos:start="743:27" pos:end="743:33">(<argument pos:start="743:28" pos:end="743:28"><expr pos:start="743:28" pos:end="743:28"><name pos:start="743:28" pos:end="743:28">s</name></expr></argument>, <argument pos:start="743:31" pos:end="743:32"><expr pos:start="743:31" pos:end="743:32"><name pos:start="743:31" pos:end="743:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="745:13" pos:end="745:35"><expr pos:start="745:13" pos:end="745:34"><name pos:start="745:13" pos:end="745:16">tmp2</name> <operator pos:start="745:18" pos:end="745:18">=</operator> <call pos:start="745:20" pos:end="745:34"><name pos:start="745:20" pos:end="745:27">load_reg</name><argument_list pos:start="745:28" pos:end="745:34">(<argument pos:start="745:29" pos:end="745:29"><expr pos:start="745:29" pos:end="745:29"><name pos:start="745:29" pos:end="745:29">s</name></expr></argument>, <argument pos:start="745:32" pos:end="745:33"><expr pos:start="745:32" pos:end="745:33"><name pos:start="745:32" pos:end="745:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="747:13" pos:end="749:32"><if pos:start="747:13" pos:end="749:32">if <condition pos:start="747:16" pos:end="747:35">(<expr pos:start="747:17" pos:end="747:34"><operator pos:start="747:17" pos:end="747:17">(</operator><name pos:start="747:18" pos:end="747:21">insn</name> <operator pos:start="747:23" pos:end="747:23">&amp;</operator> <literal type="number" pos:start="747:25" pos:end="747:28">0x70</literal><operator pos:start="747:29" pos:end="747:29">)</operator> <operator pos:start="747:31" pos:end="747:32">!=</operator> <literal type="number" pos:start="747:34" pos:end="747:34">0</literal></expr>)</condition><block type="pseudo" pos:start="749:17" pos:end="749:32"><block_content pos:start="749:17" pos:end="749:32">

                <goto pos:start="749:17" pos:end="749:32">goto <name pos:start="749:22" pos:end="749:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="751:13" pos:end="751:34"><expr pos:start="751:13" pos:end="751:33"><name pos:start="751:13" pos:end="751:14">op</name> <operator pos:start="751:16" pos:end="751:16">=</operator> <operator pos:start="751:18" pos:end="751:18">(</operator><name pos:start="751:19" pos:end="751:22">insn</name> <operator pos:start="751:24" pos:end="751:25">&gt;&gt;</operator> <literal type="number" pos:start="751:27" pos:end="751:28">21</literal><operator pos:start="751:29" pos:end="751:29">)</operator> <operator pos:start="751:31" pos:end="751:31">&amp;</operator> <literal type="number" pos:start="751:33" pos:end="751:33">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="753:13" pos:end="753:47"><expr pos:start="753:13" pos:end="753:46"><name pos:start="753:13" pos:end="753:20">logic_cc</name> <operator pos:start="753:22" pos:end="753:22">=</operator> <operator pos:start="753:24" pos:end="753:24">(</operator><name pos:start="753:25" pos:end="753:28">insn</name> <operator pos:start="753:30" pos:end="753:30">&amp;</operator> <operator pos:start="753:32" pos:end="753:32">(</operator><literal type="number" pos:start="753:33" pos:end="753:33">1</literal> <operator pos:start="753:35" pos:end="753:36">&lt;&lt;</operator> <literal type="number" pos:start="753:38" pos:end="753:39">20</literal><operator pos:start="753:40" pos:end="753:40">)</operator><operator pos:start="753:41" pos:end="753:41">)</operator> <operator pos:start="753:43" pos:end="753:44">!=</operator> <literal type="number" pos:start="753:46" pos:end="753:46">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="755:13" pos:end="755:55"><expr pos:start="755:13" pos:end="755:54"><call pos:start="755:13" pos:end="755:54"><name pos:start="755:13" pos:end="755:29">gen_arm_shift_reg</name><argument_list pos:start="755:30" pos:end="755:54">(<argument pos:start="755:31" pos:end="755:33"><expr pos:start="755:31" pos:end="755:33"><name pos:start="755:31" pos:end="755:33">tmp</name></expr></argument>, <argument pos:start="755:36" pos:end="755:37"><expr pos:start="755:36" pos:end="755:37"><name pos:start="755:36" pos:end="755:37">op</name></expr></argument>, <argument pos:start="755:40" pos:end="755:43"><expr pos:start="755:40" pos:end="755:43"><name pos:start="755:40" pos:end="755:43">tmp2</name></expr></argument>, <argument pos:start="755:46" pos:end="755:53"><expr pos:start="755:46" pos:end="755:53"><name pos:start="755:46" pos:end="755:53">logic_cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="757:13" pos:end="759:34"><if pos:start="757:13" pos:end="759:34">if <condition pos:start="757:16" pos:end="757:25">(<expr pos:start="757:17" pos:end="757:24"><name pos:start="757:17" pos:end="757:24">logic_cc</name></expr>)</condition><block type="pseudo" pos:start="759:17" pos:end="759:34"><block_content pos:start="759:17" pos:end="759:34">

                <expr_stmt pos:start="759:17" pos:end="759:34"><expr pos:start="759:17" pos:end="759:33"><call pos:start="759:17" pos:end="759:33"><name pos:start="759:17" pos:end="759:28">gen_logic_CC</name><argument_list pos:start="759:29" pos:end="759:33">(<argument pos:start="759:30" pos:end="759:32"><expr pos:start="759:30" pos:end="759:32"><name pos:start="759:30" pos:end="759:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="761:13" pos:end="761:37"><expr pos:start="761:13" pos:end="761:36"><call pos:start="761:13" pos:end="761:36"><name pos:start="761:13" pos:end="761:24">store_reg_bx</name><argument_list pos:start="761:25" pos:end="761:36">(<argument pos:start="761:26" pos:end="761:26"><expr pos:start="761:26" pos:end="761:26"><name pos:start="761:26" pos:end="761:26">s</name></expr></argument>, <argument pos:start="761:29" pos:end="761:30"><expr pos:start="761:29" pos:end="761:30"><name pos:start="761:29" pos:end="761:30">rd</name></expr></argument>, <argument pos:start="761:33" pos:end="761:35"><expr pos:start="761:33" pos:end="761:35"><name pos:start="761:33" pos:end="761:35">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="763:13" pos:end="763:18">break;</break>

        <case pos:start="765:9" pos:end="765:15">case <expr pos:start="765:14" pos:end="765:14"><literal type="number" pos:start="765:14" pos:end="765:14">1</literal></expr>:</case> <comment type="block" pos:start="765:17" pos:end="765:40">/* Sign/zero extend.  */</comment>

            <expr_stmt pos:start="767:13" pos:end="767:34"><expr pos:start="767:13" pos:end="767:33"><name pos:start="767:13" pos:end="767:14">op</name> <operator pos:start="767:16" pos:end="767:16">=</operator> <operator pos:start="767:18" pos:end="767:18">(</operator><name pos:start="767:19" pos:end="767:22">insn</name> <operator pos:start="767:24" pos:end="767:25">&gt;&gt;</operator> <literal type="number" pos:start="767:27" pos:end="767:28">20</literal><operator pos:start="767:29" pos:end="767:29">)</operator> <operator pos:start="767:31" pos:end="767:31">&amp;</operator> <literal type="number" pos:start="767:33" pos:end="767:33">7</literal></expr>;</expr_stmt>

            <switch pos:start="769:13" pos:end="797:13">switch <condition pos:start="769:20" pos:end="769:23">(<expr pos:start="769:21" pos:end="769:22"><name pos:start="769:21" pos:end="769:22">op</name></expr>)</condition> <block pos:start="769:25" pos:end="797:13">{<block_content pos:start="771:13" pos:end="795:32">

            <case pos:start="771:13" pos:end="771:19">case <expr pos:start="771:18" pos:end="771:18"><literal type="number" pos:start="771:18" pos:end="771:18">0</literal></expr>:</case> <comment type="block" pos:start="771:21" pos:end="771:37">/* SXTAH, SXTH */</comment>

            <case pos:start="773:13" pos:end="773:19">case <expr pos:start="773:18" pos:end="773:18"><literal type="number" pos:start="773:18" pos:end="773:18">1</literal></expr>:</case> <comment type="block" pos:start="773:21" pos:end="773:37">/* UXTAH, UXTH */</comment>

            <case pos:start="775:13" pos:end="775:19">case <expr pos:start="775:18" pos:end="775:18"><literal type="number" pos:start="775:18" pos:end="775:18">4</literal></expr>:</case> <comment type="block" pos:start="775:21" pos:end="775:37">/* SXTAB, SXTB */</comment>

            <case pos:start="777:13" pos:end="777:19">case <expr pos:start="777:18" pos:end="777:18"><literal type="number" pos:start="777:18" pos:end="777:18">5</literal></expr>:</case> <comment type="block" pos:start="777:21" pos:end="777:37">/* UXTAB, UXTB */</comment>

                <break pos:start="779:17" pos:end="779:22">break;</break>

            <case pos:start="781:13" pos:end="781:19">case <expr pos:start="781:18" pos:end="781:18"><literal type="number" pos:start="781:18" pos:end="781:18">2</literal></expr>:</case> <comment type="block" pos:start="781:21" pos:end="781:41">/* SXTAB16, SXTB16 */</comment>

            <case pos:start="783:13" pos:end="783:19">case <expr pos:start="783:18" pos:end="783:18"><literal type="number" pos:start="783:18" pos:end="783:18">3</literal></expr>:</case> <comment type="block" pos:start="783:21" pos:end="783:41">/* UXTAB16, UXTB16 */</comment>

                <if_stmt pos:start="785:17" pos:end="789:17"><if pos:start="785:17" pos:end="789:17">if <condition pos:start="785:20" pos:end="785:62">(<expr pos:start="785:21" pos:end="785:61"><operator pos:start="785:21" pos:end="785:21">!</operator><call pos:start="785:22" pos:end="785:61"><name pos:start="785:22" pos:end="785:35">arm_dc_feature</name><argument_list pos:start="785:36" pos:end="785:61">(<argument pos:start="785:37" pos:end="785:37"><expr pos:start="785:37" pos:end="785:37"><name pos:start="785:37" pos:end="785:37">s</name></expr></argument>, <argument pos:start="785:40" pos:end="785:60"><expr pos:start="785:40" pos:end="785:60"><name pos:start="785:40" pos:end="785:60">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="785:64" pos:end="789:17">{<block_content pos:start="787:21" pos:end="787:36">

                    <goto pos:start="787:21" pos:end="787:36">goto <name pos:start="787:26" pos:end="787:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <break pos:start="791:17" pos:end="791:22">break;</break>

            <default pos:start="793:13" pos:end="793:20">default:</default>

                <goto pos:start="795:17" pos:end="795:32">goto <name pos:start="795:22" pos:end="795:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <if_stmt pos:start="799:13" pos:end="807:13"><if pos:start="799:13" pos:end="807:13">if <condition pos:start="799:16" pos:end="799:25">(<expr pos:start="799:17" pos:end="799:24"><name pos:start="799:17" pos:end="799:18">rn</name> <operator pos:start="799:20" pos:end="799:21">!=</operator> <literal type="number" pos:start="799:23" pos:end="799:24">15</literal></expr>)</condition> <block pos:start="799:27" pos:end="807:13">{<block_content pos:start="801:17" pos:end="805:17">

                <if_stmt pos:start="801:17" pos:end="805:17"><if pos:start="801:17" pos:end="805:17">if <condition pos:start="801:20" pos:end="801:62">(<expr pos:start="801:21" pos:end="801:61"><operator pos:start="801:21" pos:end="801:21">!</operator><call pos:start="801:22" pos:end="801:61"><name pos:start="801:22" pos:end="801:35">arm_dc_feature</name><argument_list pos:start="801:36" pos:end="801:61">(<argument pos:start="801:37" pos:end="801:37"><expr pos:start="801:37" pos:end="801:37"><name pos:start="801:37" pos:end="801:37">s</name></expr></argument>, <argument pos:start="801:40" pos:end="801:60"><expr pos:start="801:40" pos:end="801:60"><name pos:start="801:40" pos:end="801:60">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="801:64" pos:end="805:17">{<block_content pos:start="803:21" pos:end="803:36">

                    <goto pos:start="803:21" pos:end="803:36">goto <name pos:start="803:26" pos:end="803:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="809:13" pos:end="809:34"><expr pos:start="809:13" pos:end="809:33"><name pos:start="809:13" pos:end="809:15">tmp</name> <operator pos:start="809:17" pos:end="809:17">=</operator> <call pos:start="809:19" pos:end="809:33"><name pos:start="809:19" pos:end="809:26">load_reg</name><argument_list pos:start="809:27" pos:end="809:33">(<argument pos:start="809:28" pos:end="809:28"><expr pos:start="809:28" pos:end="809:28"><name pos:start="809:28" pos:end="809:28">s</name></expr></argument>, <argument pos:start="809:31" pos:end="809:32"><expr pos:start="809:31" pos:end="809:32"><name pos:start="809:31" pos:end="809:32">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="811:13" pos:end="811:36"><expr pos:start="811:13" pos:end="811:35"><name pos:start="811:13" pos:end="811:17">shift</name> <operator pos:start="811:19" pos:end="811:19">=</operator> <operator pos:start="811:21" pos:end="811:21">(</operator><name pos:start="811:22" pos:end="811:25">insn</name> <operator pos:start="811:27" pos:end="811:28">&gt;&gt;</operator> <literal type="number" pos:start="811:30" pos:end="811:30">4</literal><operator pos:start="811:31" pos:end="811:31">)</operator> <operator pos:start="811:33" pos:end="811:33">&amp;</operator> <literal type="number" pos:start="811:35" pos:end="811:35">3</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="813:13" pos:end="815:49">/* ??? In many cases it's not necessary to do a

               rotate, a shift is sufficient.  */</comment>

            <if_stmt pos:start="817:13" pos:end="819:55"><if pos:start="817:13" pos:end="819:55">if <condition pos:start="817:16" pos:end="817:27">(<expr pos:start="817:17" pos:end="817:26"><name pos:start="817:17" pos:end="817:21">shift</name> <operator pos:start="817:23" pos:end="817:24">!=</operator> <literal type="number" pos:start="817:26" pos:end="817:26">0</literal></expr>)</condition><block type="pseudo" pos:start="819:17" pos:end="819:55"><block_content pos:start="819:17" pos:end="819:55">

                <expr_stmt pos:start="819:17" pos:end="819:55"><expr pos:start="819:17" pos:end="819:54"><call pos:start="819:17" pos:end="819:54"><name pos:start="819:17" pos:end="819:33">tcg_gen_rotri_i32</name><argument_list pos:start="819:34" pos:end="819:54">(<argument pos:start="819:35" pos:end="819:37"><expr pos:start="819:35" pos:end="819:37"><name pos:start="819:35" pos:end="819:37">tmp</name></expr></argument>, <argument pos:start="819:40" pos:end="819:42"><expr pos:start="819:40" pos:end="819:42"><name pos:start="819:40" pos:end="819:42">tmp</name></expr></argument>, <argument pos:start="819:45" pos:end="819:53"><expr pos:start="819:45" pos:end="819:53"><name pos:start="819:45" pos:end="819:49">shift</name> <operator pos:start="819:51" pos:end="819:51">*</operator> <literal type="number" pos:start="819:53" pos:end="819:53">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="821:13" pos:end="821:34"><expr pos:start="821:13" pos:end="821:33"><name pos:start="821:13" pos:end="821:14">op</name> <operator pos:start="821:16" pos:end="821:16">=</operator> <operator pos:start="821:18" pos:end="821:18">(</operator><name pos:start="821:19" pos:end="821:22">insn</name> <operator pos:start="821:24" pos:end="821:25">&gt;&gt;</operator> <literal type="number" pos:start="821:27" pos:end="821:28">20</literal><operator pos:start="821:29" pos:end="821:29">)</operator> <operator pos:start="821:31" pos:end="821:31">&amp;</operator> <literal type="number" pos:start="821:33" pos:end="821:33">7</literal></expr>;</expr_stmt>

            <switch pos:start="823:13" pos:end="841:13">switch <condition pos:start="823:20" pos:end="823:23">(<expr pos:start="823:21" pos:end="823:22"><name pos:start="823:21" pos:end="823:22">op</name></expr>)</condition> <block pos:start="823:25" pos:end="841:13">{<block_content pos:start="825:13" pos:end="839:39">

            <case pos:start="825:13" pos:end="825:19">case <expr pos:start="825:18" pos:end="825:18"><literal type="number" pos:start="825:18" pos:end="825:18">0</literal></expr>:</case> <expr_stmt pos:start="825:21" pos:end="825:34"><expr pos:start="825:21" pos:end="825:33"><call pos:start="825:21" pos:end="825:33"><name pos:start="825:21" pos:end="825:28">gen_sxth</name><argument_list pos:start="825:29" pos:end="825:33">(<argument pos:start="825:30" pos:end="825:32"><expr pos:start="825:30" pos:end="825:32"><name pos:start="825:30" pos:end="825:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break pos:start="825:38" pos:end="825:43">break;</break>

            <case pos:start="827:13" pos:end="827:19">case <expr pos:start="827:18" pos:end="827:18"><literal type="number" pos:start="827:18" pos:end="827:18">1</literal></expr>:</case> <expr_stmt pos:start="827:21" pos:end="827:34"><expr pos:start="827:21" pos:end="827:33"><call pos:start="827:21" pos:end="827:33"><name pos:start="827:21" pos:end="827:28">gen_uxth</name><argument_list pos:start="827:29" pos:end="827:33">(<argument pos:start="827:30" pos:end="827:32"><expr pos:start="827:30" pos:end="827:32"><name pos:start="827:30" pos:end="827:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break pos:start="827:38" pos:end="827:43">break;</break>

            <case pos:start="829:13" pos:end="829:19">case <expr pos:start="829:18" pos:end="829:18"><literal type="number" pos:start="829:18" pos:end="829:18">2</literal></expr>:</case> <expr_stmt pos:start="829:21" pos:end="829:36"><expr pos:start="829:21" pos:end="829:35"><call pos:start="829:21" pos:end="829:35"><name pos:start="829:21" pos:end="829:30">gen_sxtb16</name><argument_list pos:start="829:31" pos:end="829:35">(<argument pos:start="829:32" pos:end="829:34"><expr pos:start="829:32" pos:end="829:34"><name pos:start="829:32" pos:end="829:34">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="829:38" pos:end="829:43">break;</break>

            <case pos:start="831:13" pos:end="831:19">case <expr pos:start="831:18" pos:end="831:18"><literal type="number" pos:start="831:18" pos:end="831:18">3</literal></expr>:</case> <expr_stmt pos:start="831:21" pos:end="831:36"><expr pos:start="831:21" pos:end="831:35"><call pos:start="831:21" pos:end="831:35"><name pos:start="831:21" pos:end="831:30">gen_uxtb16</name><argument_list pos:start="831:31" pos:end="831:35">(<argument pos:start="831:32" pos:end="831:34"><expr pos:start="831:32" pos:end="831:34"><name pos:start="831:32" pos:end="831:34">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="831:38" pos:end="831:43">break;</break>

            <case pos:start="833:13" pos:end="833:19">case <expr pos:start="833:18" pos:end="833:18"><literal type="number" pos:start="833:18" pos:end="833:18">4</literal></expr>:</case> <expr_stmt pos:start="833:21" pos:end="833:34"><expr pos:start="833:21" pos:end="833:33"><call pos:start="833:21" pos:end="833:33"><name pos:start="833:21" pos:end="833:28">gen_sxtb</name><argument_list pos:start="833:29" pos:end="833:33">(<argument pos:start="833:30" pos:end="833:32"><expr pos:start="833:30" pos:end="833:32"><name pos:start="833:30" pos:end="833:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break pos:start="833:38" pos:end="833:43">break;</break>

            <case pos:start="835:13" pos:end="835:19">case <expr pos:start="835:18" pos:end="835:18"><literal type="number" pos:start="835:18" pos:end="835:18">5</literal></expr>:</case> <expr_stmt pos:start="835:21" pos:end="835:34"><expr pos:start="835:21" pos:end="835:33"><call pos:start="835:21" pos:end="835:33"><name pos:start="835:21" pos:end="835:28">gen_uxtb</name><argument_list pos:start="835:29" pos:end="835:33">(<argument pos:start="835:30" pos:end="835:32"><expr pos:start="835:30" pos:end="835:32"><name pos:start="835:30" pos:end="835:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break pos:start="835:38" pos:end="835:43">break;</break>

            <default pos:start="837:13" pos:end="837:20">default:</default>

                <expr_stmt pos:start="839:17" pos:end="839:39"><expr pos:start="839:17" pos:end="839:38"><call pos:start="839:17" pos:end="839:38"><name pos:start="839:17" pos:end="839:36">g_assert_not_reached</name><argument_list pos:start="839:37" pos:end="839:38">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <if_stmt pos:start="843:13" pos:end="859:13"><if pos:start="843:13" pos:end="859:13">if <condition pos:start="843:16" pos:end="843:25">(<expr pos:start="843:17" pos:end="843:24"><name pos:start="843:17" pos:end="843:18">rn</name> <operator pos:start="843:20" pos:end="843:21">!=</operator> <literal type="number" pos:start="843:23" pos:end="843:24">15</literal></expr>)</condition> <block pos:start="843:27" pos:end="859:13">{<block_content pos:start="845:17" pos:end="857:17">

                <expr_stmt pos:start="845:17" pos:end="845:39"><expr pos:start="845:17" pos:end="845:38"><name pos:start="845:17" pos:end="845:20">tmp2</name> <operator pos:start="845:22" pos:end="845:22">=</operator> <call pos:start="845:24" pos:end="845:38"><name pos:start="845:24" pos:end="845:31">load_reg</name><argument_list pos:start="845:32" pos:end="845:38">(<argument pos:start="845:33" pos:end="845:33"><expr pos:start="845:33" pos:end="845:33"><name pos:start="845:33" pos:end="845:33">s</name></expr></argument>, <argument pos:start="845:36" pos:end="845:37"><expr pos:start="845:36" pos:end="845:37"><name pos:start="845:36" pos:end="845:37">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="847:17" pos:end="857:17"><if pos:start="847:17" pos:end="851:17">if <condition pos:start="847:20" pos:end="847:35">(<expr pos:start="847:21" pos:end="847:34"><operator pos:start="847:21" pos:end="847:21">(</operator><name pos:start="847:22" pos:end="847:23">op</name> <operator pos:start="847:25" pos:end="847:26">&gt;&gt;</operator> <literal type="number" pos:start="847:28" pos:end="847:28">1</literal><operator pos:start="847:29" pos:end="847:29">)</operator> <operator pos:start="847:31" pos:end="847:32">==</operator> <literal type="number" pos:start="847:34" pos:end="847:34">1</literal></expr>)</condition> <block pos:start="847:37" pos:end="851:17">{<block_content pos:start="849:21" pos:end="849:41">

                    <expr_stmt pos:start="849:21" pos:end="849:41"><expr pos:start="849:21" pos:end="849:40"><call pos:start="849:21" pos:end="849:40"><name pos:start="849:21" pos:end="849:29">gen_add16</name><argument_list pos:start="849:30" pos:end="849:40">(<argument pos:start="849:31" pos:end="849:33"><expr pos:start="849:31" pos:end="849:33"><name pos:start="849:31" pos:end="849:33">tmp</name></expr></argument>, <argument pos:start="849:36" pos:end="849:39"><expr pos:start="849:36" pos:end="849:39"><name pos:start="849:36" pos:end="849:39">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="851:19" pos:end="857:17">else <block pos:start="851:24" pos:end="857:17">{<block_content pos:start="853:21" pos:end="855:44">

                    <expr_stmt pos:start="853:21" pos:end="853:52"><expr pos:start="853:21" pos:end="853:51"><call pos:start="853:21" pos:end="853:51"><name pos:start="853:21" pos:end="853:35">tcg_gen_add_i32</name><argument_list pos:start="853:36" pos:end="853:51">(<argument pos:start="853:37" pos:end="853:39"><expr pos:start="853:37" pos:end="853:39"><name pos:start="853:37" pos:end="853:39">tmp</name></expr></argument>, <argument pos:start="853:42" pos:end="853:44"><expr pos:start="853:42" pos:end="853:44"><name pos:start="853:42" pos:end="853:44">tmp</name></expr></argument>, <argument pos:start="853:47" pos:end="853:50"><expr pos:start="853:47" pos:end="853:50"><name pos:start="853:47" pos:end="853:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="855:21" pos:end="855:44"><expr pos:start="855:21" pos:end="855:43"><call pos:start="855:21" pos:end="855:43"><name pos:start="855:21" pos:end="855:37">tcg_temp_free_i32</name><argument_list pos:start="855:38" pos:end="855:43">(<argument pos:start="855:39" pos:end="855:42"><expr pos:start="855:39" pos:end="855:42"><name pos:start="855:39" pos:end="855:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="861:13" pos:end="861:34"><expr pos:start="861:13" pos:end="861:33"><call pos:start="861:13" pos:end="861:33"><name pos:start="861:13" pos:end="861:21">store_reg</name><argument_list pos:start="861:22" pos:end="861:33">(<argument pos:start="861:23" pos:end="861:23"><expr pos:start="861:23" pos:end="861:23"><name pos:start="861:23" pos:end="861:23">s</name></expr></argument>, <argument pos:start="861:26" pos:end="861:27"><expr pos:start="861:26" pos:end="861:27"><name pos:start="861:26" pos:end="861:27">rd</name></expr></argument>, <argument pos:start="861:30" pos:end="861:32"><expr pos:start="861:30" pos:end="861:32"><name pos:start="861:30" pos:end="861:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="863:13" pos:end="863:18">break;</break>

        <case pos:start="865:9" pos:end="865:15">case <expr pos:start="865:14" pos:end="865:14"><literal type="number" pos:start="865:14" pos:end="865:14">2</literal></expr>:</case> <comment type="block" pos:start="865:17" pos:end="865:41">/* SIMD add/subtract.  */</comment>

            <if_stmt pos:start="867:13" pos:end="871:13"><if pos:start="867:13" pos:end="871:13">if <condition pos:start="867:16" pos:end="867:58">(<expr pos:start="867:17" pos:end="867:57"><operator pos:start="867:17" pos:end="867:17">!</operator><call pos:start="867:18" pos:end="867:57"><name pos:start="867:18" pos:end="867:31">arm_dc_feature</name><argument_list pos:start="867:32" pos:end="867:57">(<argument pos:start="867:33" pos:end="867:33"><expr pos:start="867:33" pos:end="867:33"><name pos:start="867:33" pos:end="867:33">s</name></expr></argument>, <argument pos:start="867:36" pos:end="867:56"><expr pos:start="867:36" pos:end="867:56"><name pos:start="867:36" pos:end="867:56">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="867:60" pos:end="871:13">{<block_content pos:start="869:17" pos:end="869:32">

                <goto pos:start="869:17" pos:end="869:32">goto <name pos:start="869:22" pos:end="869:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="873:13" pos:end="873:34"><expr pos:start="873:13" pos:end="873:33"><name pos:start="873:13" pos:end="873:14">op</name> <operator pos:start="873:16" pos:end="873:16">=</operator> <operator pos:start="873:18" pos:end="873:18">(</operator><name pos:start="873:19" pos:end="873:22">insn</name> <operator pos:start="873:24" pos:end="873:25">&gt;&gt;</operator> <literal type="number" pos:start="873:27" pos:end="873:28">20</literal><operator pos:start="873:29" pos:end="873:29">)</operator> <operator pos:start="873:31" pos:end="873:31">&amp;</operator> <literal type="number" pos:start="873:33" pos:end="873:33">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="875:13" pos:end="875:36"><expr pos:start="875:13" pos:end="875:35"><name pos:start="875:13" pos:end="875:17">shift</name> <operator pos:start="875:19" pos:end="875:19">=</operator> <operator pos:start="875:21" pos:end="875:21">(</operator><name pos:start="875:22" pos:end="875:25">insn</name> <operator pos:start="875:27" pos:end="875:28">&gt;&gt;</operator> <literal type="number" pos:start="875:30" pos:end="875:30">4</literal><operator pos:start="875:31" pos:end="875:31">)</operator> <operator pos:start="875:33" pos:end="875:33">&amp;</operator> <literal type="number" pos:start="875:35" pos:end="875:35">7</literal></expr>;</expr_stmt>

            <if_stmt pos:start="877:13" pos:end="879:32"><if pos:start="877:13" pos:end="879:32">if <condition pos:start="877:16" pos:end="877:50">(<expr pos:start="877:17" pos:end="877:49"><operator pos:start="877:17" pos:end="877:17">(</operator><name pos:start="877:18" pos:end="877:19">op</name> <operator pos:start="877:21" pos:end="877:21">&amp;</operator> <literal type="number" pos:start="877:23" pos:end="877:23">3</literal><operator pos:start="877:24" pos:end="877:24">)</operator> <operator pos:start="877:26" pos:end="877:27">==</operator> <literal type="number" pos:start="877:29" pos:end="877:29">3</literal> <operator pos:start="877:31" pos:end="877:32">||</operator> <operator pos:start="877:34" pos:end="877:34">(</operator><name pos:start="877:35" pos:end="877:39">shift</name> <operator pos:start="877:41" pos:end="877:41">&amp;</operator> <literal type="number" pos:start="877:43" pos:end="877:43">3</literal><operator pos:start="877:44" pos:end="877:44">)</operator> <operator pos:start="877:46" pos:end="877:47">==</operator> <literal type="number" pos:start="877:49" pos:end="877:49">3</literal></expr>)</condition><block type="pseudo" pos:start="879:17" pos:end="879:32"><block_content pos:start="879:17" pos:end="879:32">

                <goto pos:start="879:17" pos:end="879:32">goto <name pos:start="879:22" pos:end="879:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="881:13" pos:end="881:34"><expr pos:start="881:13" pos:end="881:33"><name pos:start="881:13" pos:end="881:15">tmp</name> <operator pos:start="881:17" pos:end="881:17">=</operator> <call pos:start="881:19" pos:end="881:33"><name pos:start="881:19" pos:end="881:26">load_reg</name><argument_list pos:start="881:27" pos:end="881:33">(<argument pos:start="881:28" pos:end="881:28"><expr pos:start="881:28" pos:end="881:28"><name pos:start="881:28" pos:end="881:28">s</name></expr></argument>, <argument pos:start="881:31" pos:end="881:32"><expr pos:start="881:31" pos:end="881:32"><name pos:start="881:31" pos:end="881:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="883:13" pos:end="883:35"><expr pos:start="883:13" pos:end="883:34"><name pos:start="883:13" pos:end="883:16">tmp2</name> <operator pos:start="883:18" pos:end="883:18">=</operator> <call pos:start="883:20" pos:end="883:34"><name pos:start="883:20" pos:end="883:27">load_reg</name><argument_list pos:start="883:28" pos:end="883:34">(<argument pos:start="883:29" pos:end="883:29"><expr pos:start="883:29" pos:end="883:29"><name pos:start="883:29" pos:end="883:29">s</name></expr></argument>, <argument pos:start="883:32" pos:end="883:33"><expr pos:start="883:32" pos:end="883:33"><name pos:start="883:32" pos:end="883:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="885:13" pos:end="885:61"><expr pos:start="885:13" pos:end="885:60"><call pos:start="885:13" pos:end="885:60"><name pos:start="885:13" pos:end="885:38">gen_thumb2_parallel_addsub</name><argument_list pos:start="885:39" pos:end="885:60">(<argument pos:start="885:40" pos:end="885:41"><expr pos:start="885:40" pos:end="885:41"><name pos:start="885:40" pos:end="885:41">op</name></expr></argument>, <argument pos:start="885:44" pos:end="885:48"><expr pos:start="885:44" pos:end="885:48"><name pos:start="885:44" pos:end="885:48">shift</name></expr></argument>, <argument pos:start="885:51" pos:end="885:53"><expr pos:start="885:51" pos:end="885:53"><name pos:start="885:51" pos:end="885:53">tmp</name></expr></argument>, <argument pos:start="885:56" pos:end="885:59"><expr pos:start="885:56" pos:end="885:59"><name pos:start="885:56" pos:end="885:59">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="887:13" pos:end="887:36"><expr pos:start="887:13" pos:end="887:35"><call pos:start="887:13" pos:end="887:35"><name pos:start="887:13" pos:end="887:29">tcg_temp_free_i32</name><argument_list pos:start="887:30" pos:end="887:35">(<argument pos:start="887:31" pos:end="887:34"><expr pos:start="887:31" pos:end="887:34"><name pos:start="887:31" pos:end="887:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="889:13" pos:end="889:34"><expr pos:start="889:13" pos:end="889:33"><call pos:start="889:13" pos:end="889:33"><name pos:start="889:13" pos:end="889:21">store_reg</name><argument_list pos:start="889:22" pos:end="889:33">(<argument pos:start="889:23" pos:end="889:23"><expr pos:start="889:23" pos:end="889:23"><name pos:start="889:23" pos:end="889:23">s</name></expr></argument>, <argument pos:start="889:26" pos:end="889:27"><expr pos:start="889:26" pos:end="889:27"><name pos:start="889:26" pos:end="889:27">rd</name></expr></argument>, <argument pos:start="889:30" pos:end="889:32"><expr pos:start="889:30" pos:end="889:32"><name pos:start="889:30" pos:end="889:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="891:13" pos:end="891:18">break;</break>

        <case pos:start="893:9" pos:end="893:15">case <expr pos:start="893:14" pos:end="893:14"><literal type="number" pos:start="893:14" pos:end="893:14">3</literal></expr>:</case> <comment type="block" pos:start="893:17" pos:end="893:45">/* Other data processing.  */</comment>

            <expr_stmt pos:start="895:13" pos:end="895:59"><expr pos:start="895:13" pos:end="895:58"><name pos:start="895:13" pos:end="895:14">op</name> <operator pos:start="895:16" pos:end="895:16">=</operator> <operator pos:start="895:18" pos:end="895:18">(</operator><operator pos:start="895:19" pos:end="895:19">(</operator><name pos:start="895:20" pos:end="895:23">insn</name> <operator pos:start="895:25" pos:end="895:26">&gt;&gt;</operator> <literal type="number" pos:start="895:28" pos:end="895:29">17</literal><operator pos:start="895:30" pos:end="895:30">)</operator> <operator pos:start="895:32" pos:end="895:32">&amp;</operator> <literal type="number" pos:start="895:34" pos:end="895:37">0x38</literal><operator pos:start="895:38" pos:end="895:38">)</operator> <operator pos:start="895:40" pos:end="895:40">|</operator> <operator pos:start="895:42" pos:end="895:42">(</operator><operator pos:start="895:43" pos:end="895:43">(</operator><name pos:start="895:44" pos:end="895:47">insn</name> <operator pos:start="895:49" pos:end="895:50">&gt;&gt;</operator> <literal type="number" pos:start="895:52" pos:end="895:52">4</literal><operator pos:start="895:53" pos:end="895:53">)</operator> <operator pos:start="895:55" pos:end="895:55">&amp;</operator> <literal type="number" pos:start="895:57" pos:end="895:57">7</literal><operator pos:start="895:58" pos:end="895:58">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="897:13" pos:end="1087:13"><if pos:start="897:13" pos:end="925:13">if <condition pos:start="897:16" pos:end="897:23">(<expr pos:start="897:17" pos:end="897:22"><name pos:start="897:17" pos:end="897:18">op</name> <operator pos:start="897:20" pos:end="897:20">&lt;</operator> <literal type="number" pos:start="897:22" pos:end="897:22">4</literal></expr>)</condition> <block pos:start="897:25" pos:end="925:13">{<block_content pos:start="901:17" pos:end="923:40">

                <comment type="block" pos:start="899:17" pos:end="899:47">/* Saturating add/subtract.  */</comment>

                <if_stmt pos:start="901:17" pos:end="905:17"><if pos:start="901:17" pos:end="905:17">if <condition pos:start="901:20" pos:end="901:62">(<expr pos:start="901:21" pos:end="901:61"><operator pos:start="901:21" pos:end="901:21">!</operator><call pos:start="901:22" pos:end="901:61"><name pos:start="901:22" pos:end="901:35">arm_dc_feature</name><argument_list pos:start="901:36" pos:end="901:61">(<argument pos:start="901:37" pos:end="901:37"><expr pos:start="901:37" pos:end="901:37"><name pos:start="901:37" pos:end="901:37">s</name></expr></argument>, <argument pos:start="901:40" pos:end="901:60"><expr pos:start="901:40" pos:end="901:60"><name pos:start="901:40" pos:end="901:60">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="901:64" pos:end="905:17">{<block_content pos:start="903:21" pos:end="903:36">

                    <goto pos:start="903:21" pos:end="903:36">goto <name pos:start="903:26" pos:end="903:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="907:17" pos:end="907:38"><expr pos:start="907:17" pos:end="907:37"><name pos:start="907:17" pos:end="907:19">tmp</name> <operator pos:start="907:21" pos:end="907:21">=</operator> <call pos:start="907:23" pos:end="907:37"><name pos:start="907:23" pos:end="907:30">load_reg</name><argument_list pos:start="907:31" pos:end="907:37">(<argument pos:start="907:32" pos:end="907:32"><expr pos:start="907:32" pos:end="907:32"><name pos:start="907:32" pos:end="907:32">s</name></expr></argument>, <argument pos:start="907:35" pos:end="907:36"><expr pos:start="907:35" pos:end="907:36"><name pos:start="907:35" pos:end="907:36">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="909:17" pos:end="909:39"><expr pos:start="909:17" pos:end="909:38"><name pos:start="909:17" pos:end="909:20">tmp2</name> <operator pos:start="909:22" pos:end="909:22">=</operator> <call pos:start="909:24" pos:end="909:38"><name pos:start="909:24" pos:end="909:31">load_reg</name><argument_list pos:start="909:32" pos:end="909:38">(<argument pos:start="909:33" pos:end="909:33"><expr pos:start="909:33" pos:end="909:33"><name pos:start="909:33" pos:end="909:33">s</name></expr></argument>, <argument pos:start="909:36" pos:end="909:37"><expr pos:start="909:36" pos:end="909:37"><name pos:start="909:36" pos:end="909:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="911:17" pos:end="913:66"><if pos:start="911:17" pos:end="913:66">if <condition pos:start="911:20" pos:end="911:27">(<expr pos:start="911:21" pos:end="911:26"><name pos:start="911:21" pos:end="911:22">op</name> <operator pos:start="911:24" pos:end="911:24">&amp;</operator> <literal type="number" pos:start="911:26" pos:end="911:26">1</literal></expr>)</condition><block type="pseudo" pos:start="913:21" pos:end="913:66"><block_content pos:start="913:21" pos:end="913:66">

                    <expr_stmt pos:start="913:21" pos:end="913:66"><expr pos:start="913:21" pos:end="913:65"><call pos:start="913:21" pos:end="913:65"><name pos:start="913:21" pos:end="913:46">gen_helper_double_saturate</name><argument_list pos:start="913:47" pos:end="913:65">(<argument pos:start="913:48" pos:end="913:50"><expr pos:start="913:48" pos:end="913:50"><name pos:start="913:48" pos:end="913:50">tmp</name></expr></argument>, <argument pos:start="913:53" pos:end="913:59"><expr pos:start="913:53" pos:end="913:59"><name pos:start="913:53" pos:end="913:59">cpu_env</name></expr></argument>, <argument pos:start="913:62" pos:end="913:64"><expr pos:start="913:62" pos:end="913:64"><name pos:start="913:62" pos:end="913:64">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="915:17" pos:end="921:69"><if pos:start="915:17" pos:end="917:69">if <condition pos:start="915:20" pos:end="915:27">(<expr pos:start="915:21" pos:end="915:26"><name pos:start="915:21" pos:end="915:22">op</name> <operator pos:start="915:24" pos:end="915:24">&amp;</operator> <literal type="number" pos:start="915:26" pos:end="915:26">2</literal></expr>)</condition><block type="pseudo" pos:start="917:21" pos:end="917:69"><block_content pos:start="917:21" pos:end="917:69">

                    <expr_stmt pos:start="917:21" pos:end="917:69"><expr pos:start="917:21" pos:end="917:68"><call pos:start="917:21" pos:end="917:68"><name pos:start="917:21" pos:end="917:43">gen_helper_sub_saturate</name><argument_list pos:start="917:44" pos:end="917:68">(<argument pos:start="917:45" pos:end="917:47"><expr pos:start="917:45" pos:end="917:47"><name pos:start="917:45" pos:end="917:47">tmp</name></expr></argument>, <argument pos:start="917:50" pos:end="917:56"><expr pos:start="917:50" pos:end="917:56"><name pos:start="917:50" pos:end="917:56">cpu_env</name></expr></argument>, <argument pos:start="917:59" pos:end="917:62"><expr pos:start="917:59" pos:end="917:62"><name pos:start="917:59" pos:end="917:62">tmp2</name></expr></argument>, <argument pos:start="917:65" pos:end="917:67"><expr pos:start="917:65" pos:end="917:67"><name pos:start="917:65" pos:end="917:67">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="919:17" pos:end="921:69">else<block type="pseudo" pos:start="921:21" pos:end="921:69"><block_content pos:start="921:21" pos:end="921:69">

                    <expr_stmt pos:start="921:21" pos:end="921:69"><expr pos:start="921:21" pos:end="921:68"><call pos:start="921:21" pos:end="921:68"><name pos:start="921:21" pos:end="921:43">gen_helper_add_saturate</name><argument_list pos:start="921:44" pos:end="921:68">(<argument pos:start="921:45" pos:end="921:47"><expr pos:start="921:45" pos:end="921:47"><name pos:start="921:45" pos:end="921:47">tmp</name></expr></argument>, <argument pos:start="921:50" pos:end="921:56"><expr pos:start="921:50" pos:end="921:56"><name pos:start="921:50" pos:end="921:56">cpu_env</name></expr></argument>, <argument pos:start="921:59" pos:end="921:61"><expr pos:start="921:59" pos:end="921:61"><name pos:start="921:59" pos:end="921:61">tmp</name></expr></argument>, <argument pos:start="921:64" pos:end="921:67"><expr pos:start="921:64" pos:end="921:67"><name pos:start="921:64" pos:end="921:67">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="923:17" pos:end="923:40"><expr pos:start="923:17" pos:end="923:39"><call pos:start="923:17" pos:end="923:39"><name pos:start="923:17" pos:end="923:33">tcg_temp_free_i32</name><argument_list pos:start="923:34" pos:end="923:39">(<argument pos:start="923:35" pos:end="923:38"><expr pos:start="923:35" pos:end="923:38"><name pos:start="923:35" pos:end="923:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="925:15" pos:end="1087:13">else <block pos:start="925:20" pos:end="1087:13">{<block_content pos:start="927:17" pos:end="1085:17">

                <switch pos:start="927:17" pos:end="975:17">switch <condition pos:start="927:24" pos:end="927:27">(<expr pos:start="927:25" pos:end="927:26"><name pos:start="927:25" pos:end="927:26">op</name></expr>)</condition> <block pos:start="927:29" pos:end="975:17">{<block_content pos:start="929:17" pos:end="973:36">

                <case pos:start="929:17" pos:end="929:26">case <expr pos:start="929:22" pos:end="929:25"><literal type="number" pos:start="929:22" pos:end="929:25">0x0a</literal></expr>:</case> <comment type="block" pos:start="929:28" pos:end="929:37">/* rbit */</comment>

                <case pos:start="931:17" pos:end="931:26">case <expr pos:start="931:22" pos:end="931:25"><literal type="number" pos:start="931:22" pos:end="931:25">0x08</literal></expr>:</case> <comment type="block" pos:start="931:28" pos:end="931:36">/* rev */</comment>

                <case pos:start="933:17" pos:end="933:26">case <expr pos:start="933:22" pos:end="933:25"><literal type="number" pos:start="933:22" pos:end="933:25">0x09</literal></expr>:</case> <comment type="block" pos:start="933:28" pos:end="933:38">/* rev16 */</comment>

                <case pos:start="935:17" pos:end="935:26">case <expr pos:start="935:22" pos:end="935:25"><literal type="number" pos:start="935:22" pos:end="935:25">0x0b</literal></expr>:</case> <comment type="block" pos:start="935:28" pos:end="935:38">/* revsh */</comment>

                <case pos:start="937:17" pos:end="937:26">case <expr pos:start="937:22" pos:end="937:25"><literal type="number" pos:start="937:22" pos:end="937:25">0x18</literal></expr>:</case> <comment type="block" pos:start="937:28" pos:end="937:36">/* clz */</comment>

                    <break pos:start="939:21" pos:end="939:26">break;</break>

                <case pos:start="941:17" pos:end="941:26">case <expr pos:start="941:22" pos:end="941:25"><literal type="number" pos:start="941:22" pos:end="941:25">0x10</literal></expr>:</case> <comment type="block" pos:start="941:28" pos:end="941:36">/* sel */</comment>

                    <if_stmt pos:start="943:21" pos:end="947:21"><if pos:start="943:21" pos:end="947:21">if <condition pos:start="943:24" pos:end="943:66">(<expr pos:start="943:25" pos:end="943:65"><operator pos:start="943:25" pos:end="943:25">!</operator><call pos:start="943:26" pos:end="943:65"><name pos:start="943:26" pos:end="943:39">arm_dc_feature</name><argument_list pos:start="943:40" pos:end="943:65">(<argument pos:start="943:41" pos:end="943:41"><expr pos:start="943:41" pos:end="943:41"><name pos:start="943:41" pos:end="943:41">s</name></expr></argument>, <argument pos:start="943:44" pos:end="943:64"><expr pos:start="943:44" pos:end="943:64"><name pos:start="943:44" pos:end="943:64">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="943:68" pos:end="947:21">{<block_content pos:start="945:25" pos:end="945:40">

                        <goto pos:start="945:25" pos:end="945:40">goto <name pos:start="945:30" pos:end="945:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="949:21" pos:end="949:26">break;</break>

                <case pos:start="951:17" pos:end="951:26">case <expr pos:start="951:22" pos:end="951:25"><literal type="number" pos:start="951:22" pos:end="951:25">0x20</literal></expr>:</case> <comment type="block" pos:start="951:28" pos:end="951:45">/* crc32/crc32c */</comment>

                <case pos:start="953:17" pos:end="953:26">case <expr pos:start="953:22" pos:end="953:25"><literal type="number" pos:start="953:22" pos:end="953:25">0x21</literal></expr>:</case>

                <case pos:start="955:17" pos:end="955:26">case <expr pos:start="955:22" pos:end="955:25"><literal type="number" pos:start="955:22" pos:end="955:25">0x22</literal></expr>:</case>

                <case pos:start="957:17" pos:end="957:26">case <expr pos:start="957:22" pos:end="957:25"><literal type="number" pos:start="957:22" pos:end="957:25">0x28</literal></expr>:</case>

                <case pos:start="959:17" pos:end="959:26">case <expr pos:start="959:22" pos:end="959:25"><literal type="number" pos:start="959:22" pos:end="959:25">0x29</literal></expr>:</case>

                <case pos:start="961:17" pos:end="961:26">case <expr pos:start="961:22" pos:end="961:25"><literal type="number" pos:start="961:22" pos:end="961:25">0x2a</literal></expr>:</case>

                    <if_stmt pos:start="963:21" pos:end="967:21"><if pos:start="963:21" pos:end="967:21">if <condition pos:start="963:24" pos:end="963:60">(<expr pos:start="963:25" pos:end="963:59"><operator pos:start="963:25" pos:end="963:25">!</operator><call pos:start="963:26" pos:end="963:59"><name pos:start="963:26" pos:end="963:39">arm_dc_feature</name><argument_list pos:start="963:40" pos:end="963:59">(<argument pos:start="963:41" pos:end="963:41"><expr pos:start="963:41" pos:end="963:41"><name pos:start="963:41" pos:end="963:41">s</name></expr></argument>, <argument pos:start="963:44" pos:end="963:58"><expr pos:start="963:44" pos:end="963:58"><name pos:start="963:44" pos:end="963:58">ARM_FEATURE_CRC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="963:62" pos:end="967:21">{<block_content pos:start="965:25" pos:end="965:40">

                        <goto pos:start="965:25" pos:end="965:40">goto <name pos:start="965:30" pos:end="965:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="969:21" pos:end="969:26">break;</break>

                <default pos:start="971:17" pos:end="971:24">default:</default>

                    <goto pos:start="973:21" pos:end="973:36">goto <name pos:start="973:26" pos:end="973:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <expr_stmt pos:start="977:17" pos:end="977:38"><expr pos:start="977:17" pos:end="977:37"><name pos:start="977:17" pos:end="977:19">tmp</name> <operator pos:start="977:21" pos:end="977:21">=</operator> <call pos:start="977:23" pos:end="977:37"><name pos:start="977:23" pos:end="977:30">load_reg</name><argument_list pos:start="977:31" pos:end="977:37">(<argument pos:start="977:32" pos:end="977:32"><expr pos:start="977:32" pos:end="977:32"><name pos:start="977:32" pos:end="977:32">s</name></expr></argument>, <argument pos:start="977:35" pos:end="977:36"><expr pos:start="977:35" pos:end="977:36"><name pos:start="977:35" pos:end="977:36">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="979:17" pos:end="1085:17">switch <condition pos:start="979:24" pos:end="979:27">(<expr pos:start="979:25" pos:end="979:26"><name pos:start="979:25" pos:end="979:26">op</name></expr>)</condition> <block pos:start="979:29" pos:end="1085:17">{<block_content pos:start="981:17" pos:end="1083:43">

                <case pos:start="981:17" pos:end="981:26">case <expr pos:start="981:22" pos:end="981:25"><literal type="number" pos:start="981:22" pos:end="981:25">0x0a</literal></expr>:</case> <comment type="block" pos:start="981:28" pos:end="981:37">/* rbit */</comment>

                    <expr_stmt pos:start="983:21" pos:end="983:46"><expr pos:start="983:21" pos:end="983:45"><call pos:start="983:21" pos:end="983:45"><name pos:start="983:21" pos:end="983:35">gen_helper_rbit</name><argument_list pos:start="983:36" pos:end="983:45">(<argument pos:start="983:37" pos:end="983:39"><expr pos:start="983:37" pos:end="983:39"><name pos:start="983:37" pos:end="983:39">tmp</name></expr></argument>, <argument pos:start="983:42" pos:end="983:44"><expr pos:start="983:42" pos:end="983:44"><name pos:start="983:42" pos:end="983:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="985:21" pos:end="985:26">break;</break>

                <case pos:start="987:17" pos:end="987:26">case <expr pos:start="987:22" pos:end="987:25"><literal type="number" pos:start="987:22" pos:end="987:25">0x08</literal></expr>:</case> <comment type="block" pos:start="987:28" pos:end="987:36">/* rev */</comment>

                    <expr_stmt pos:start="989:21" pos:end="989:50"><expr pos:start="989:21" pos:end="989:49"><call pos:start="989:21" pos:end="989:49"><name pos:start="989:21" pos:end="989:39">tcg_gen_bswap32_i32</name><argument_list pos:start="989:40" pos:end="989:49">(<argument pos:start="989:41" pos:end="989:43"><expr pos:start="989:41" pos:end="989:43"><name pos:start="989:41" pos:end="989:43">tmp</name></expr></argument>, <argument pos:start="989:46" pos:end="989:48"><expr pos:start="989:46" pos:end="989:48"><name pos:start="989:46" pos:end="989:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="991:21" pos:end="991:26">break;</break>

                <case pos:start="993:17" pos:end="993:26">case <expr pos:start="993:22" pos:end="993:25"><literal type="number" pos:start="993:22" pos:end="993:25">0x09</literal></expr>:</case> <comment type="block" pos:start="993:28" pos:end="993:38">/* rev16 */</comment>

                    <expr_stmt pos:start="995:21" pos:end="995:35"><expr pos:start="995:21" pos:end="995:34"><call pos:start="995:21" pos:end="995:34"><name pos:start="995:21" pos:end="995:29">gen_rev16</name><argument_list pos:start="995:30" pos:end="995:34">(<argument pos:start="995:31" pos:end="995:33"><expr pos:start="995:31" pos:end="995:33"><name pos:start="995:31" pos:end="995:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="997:21" pos:end="997:26">break;</break>

                <case pos:start="999:17" pos:end="999:26">case <expr pos:start="999:22" pos:end="999:25"><literal type="number" pos:start="999:22" pos:end="999:25">0x0b</literal></expr>:</case> <comment type="block" pos:start="999:28" pos:end="999:38">/* revsh */</comment>

                    <expr_stmt pos:start="1001:21" pos:end="1001:35"><expr pos:start="1001:21" pos:end="1001:34"><call pos:start="1001:21" pos:end="1001:34"><name pos:start="1001:21" pos:end="1001:29">gen_revsh</name><argument_list pos:start="1001:30" pos:end="1001:34">(<argument pos:start="1001:31" pos:end="1001:33"><expr pos:start="1001:31" pos:end="1001:33"><name pos:start="1001:31" pos:end="1001:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1003:21" pos:end="1003:26">break;</break>

                <case pos:start="1005:17" pos:end="1005:26">case <expr pos:start="1005:22" pos:end="1005:25"><literal type="number" pos:start="1005:22" pos:end="1005:25">0x10</literal></expr>:</case> <comment type="block" pos:start="1005:28" pos:end="1005:36">/* sel */</comment>

                    <expr_stmt pos:start="1007:21" pos:end="1007:43"><expr pos:start="1007:21" pos:end="1007:42"><name pos:start="1007:21" pos:end="1007:24">tmp2</name> <operator pos:start="1007:26" pos:end="1007:26">=</operator> <call pos:start="1007:28" pos:end="1007:42"><name pos:start="1007:28" pos:end="1007:35">load_reg</name><argument_list pos:start="1007:36" pos:end="1007:42">(<argument pos:start="1007:37" pos:end="1007:37"><expr pos:start="1007:37" pos:end="1007:37"><name pos:start="1007:37" pos:end="1007:37">s</name></expr></argument>, <argument pos:start="1007:40" pos:end="1007:41"><expr pos:start="1007:40" pos:end="1007:41"><name pos:start="1007:40" pos:end="1007:41">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1009:21" pos:end="1009:46"><expr pos:start="1009:21" pos:end="1009:45"><name pos:start="1009:21" pos:end="1009:24">tmp3</name> <operator pos:start="1009:26" pos:end="1009:26">=</operator> <call pos:start="1009:28" pos:end="1009:45"><name pos:start="1009:28" pos:end="1009:43">tcg_temp_new_i32</name><argument_list pos:start="1009:44" pos:end="1009:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1011:21" pos:end="1011:77"><expr pos:start="1011:21" pos:end="1011:76"><call pos:start="1011:21" pos:end="1011:76"><name pos:start="1011:21" pos:end="1011:34">tcg_gen_ld_i32</name><argument_list pos:start="1011:35" pos:end="1011:76">(<argument pos:start="1011:36" pos:end="1011:39"><expr pos:start="1011:36" pos:end="1011:39"><name pos:start="1011:36" pos:end="1011:39">tmp3</name></expr></argument>, <argument pos:start="1011:42" pos:end="1011:48"><expr pos:start="1011:42" pos:end="1011:48"><name pos:start="1011:42" pos:end="1011:48">cpu_env</name></expr></argument>, <argument pos:start="1011:51" pos:end="1011:75"><expr pos:start="1011:51" pos:end="1011:75"><call pos:start="1011:51" pos:end="1011:75"><name pos:start="1011:51" pos:end="1011:58">offsetof</name><argument_list pos:start="1011:59" pos:end="1011:75">(<argument pos:start="1011:60" pos:end="1011:70"><expr pos:start="1011:60" pos:end="1011:70"><name pos:start="1011:60" pos:end="1011:70">CPUARMState</name></expr></argument>, <argument pos:start="1011:73" pos:end="1011:74"><expr pos:start="1011:73" pos:end="1011:74"><name pos:start="1011:73" pos:end="1011:74">GE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1013:21" pos:end="1013:63"><expr pos:start="1013:21" pos:end="1013:62"><call pos:start="1013:21" pos:end="1013:62"><name pos:start="1013:21" pos:end="1013:40">gen_helper_sel_flags</name><argument_list pos:start="1013:41" pos:end="1013:62">(<argument pos:start="1013:42" pos:end="1013:44"><expr pos:start="1013:42" pos:end="1013:44"><name pos:start="1013:42" pos:end="1013:44">tmp</name></expr></argument>, <argument pos:start="1013:47" pos:end="1013:50"><expr pos:start="1013:47" pos:end="1013:50"><name pos:start="1013:47" pos:end="1013:50">tmp3</name></expr></argument>, <argument pos:start="1013:53" pos:end="1013:55"><expr pos:start="1013:53" pos:end="1013:55"><name pos:start="1013:53" pos:end="1013:55">tmp</name></expr></argument>, <argument pos:start="1013:58" pos:end="1013:61"><expr pos:start="1013:58" pos:end="1013:61"><name pos:start="1013:58" pos:end="1013:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1015:21" pos:end="1015:44"><expr pos:start="1015:21" pos:end="1015:43"><call pos:start="1015:21" pos:end="1015:43"><name pos:start="1015:21" pos:end="1015:37">tcg_temp_free_i32</name><argument_list pos:start="1015:38" pos:end="1015:43">(<argument pos:start="1015:39" pos:end="1015:42"><expr pos:start="1015:39" pos:end="1015:42"><name pos:start="1015:39" pos:end="1015:42">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1017:21" pos:end="1017:44"><expr pos:start="1017:21" pos:end="1017:43"><call pos:start="1017:21" pos:end="1017:43"><name pos:start="1017:21" pos:end="1017:37">tcg_temp_free_i32</name><argument_list pos:start="1017:38" pos:end="1017:43">(<argument pos:start="1017:39" pos:end="1017:42"><expr pos:start="1017:39" pos:end="1017:42"><name pos:start="1017:39" pos:end="1017:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1019:21" pos:end="1019:26">break;</break>

                <case pos:start="1021:17" pos:end="1021:26">case <expr pos:start="1021:22" pos:end="1021:25"><literal type="number" pos:start="1021:22" pos:end="1021:25">0x18</literal></expr>:</case> <comment type="block" pos:start="1021:28" pos:end="1021:36">/* clz */</comment>

                    <expr_stmt pos:start="1023:21" pos:end="1023:45"><expr pos:start="1023:21" pos:end="1023:44"><call pos:start="1023:21" pos:end="1023:44"><name pos:start="1023:21" pos:end="1023:34">gen_helper_clz</name><argument_list pos:start="1023:35" pos:end="1023:44">(<argument pos:start="1023:36" pos:end="1023:38"><expr pos:start="1023:36" pos:end="1023:38"><name pos:start="1023:36" pos:end="1023:38">tmp</name></expr></argument>, <argument pos:start="1023:41" pos:end="1023:43"><expr pos:start="1023:41" pos:end="1023:43"><name pos:start="1023:41" pos:end="1023:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1025:21" pos:end="1025:26">break;</break>

                <case pos:start="1027:17" pos:end="1027:26">case <expr pos:start="1027:22" pos:end="1027:25"><literal type="number" pos:start="1027:22" pos:end="1027:25">0x20</literal></expr>:</case>

                <case pos:start="1029:17" pos:end="1029:26">case <expr pos:start="1029:22" pos:end="1029:25"><literal type="number" pos:start="1029:22" pos:end="1029:25">0x21</literal></expr>:</case>

                <case pos:start="1031:17" pos:end="1031:26">case <expr pos:start="1031:22" pos:end="1031:25"><literal type="number" pos:start="1031:22" pos:end="1031:25">0x22</literal></expr>:</case>

                <case pos:start="1033:17" pos:end="1033:26">case <expr pos:start="1033:22" pos:end="1033:25"><literal type="number" pos:start="1033:22" pos:end="1033:25">0x28</literal></expr>:</case>

                <case pos:start="1035:17" pos:end="1035:26">case <expr pos:start="1035:22" pos:end="1035:25"><literal type="number" pos:start="1035:22" pos:end="1035:25">0x29</literal></expr>:</case>

                <case pos:start="1037:17" pos:end="1037:26">case <expr pos:start="1037:22" pos:end="1037:25"><literal type="number" pos:start="1037:22" pos:end="1037:25">0x2a</literal></expr>:</case>

                <block pos:start="1039:17" pos:end="1079:17">{<block_content pos:start="1043:21" pos:end="1077:26">

                    <comment type="block" pos:start="1041:21" pos:end="1041:38">/* crc32/crc32c */</comment>

                    <decl_stmt pos:start="1043:21" pos:end="1043:43"><decl pos:start="1043:21" pos:end="1043:42"><type pos:start="1043:21" pos:end="1043:28"><name pos:start="1043:21" pos:end="1043:28">uint32_t</name></type> <name pos:start="1043:30" pos:end="1043:31">sz</name> <init pos:start="1043:33" pos:end="1043:42">= <expr pos:start="1043:35" pos:end="1043:42"><name pos:start="1043:35" pos:end="1043:36">op</name> <operator pos:start="1043:38" pos:end="1043:38">&amp;</operator> <literal type="number" pos:start="1043:40" pos:end="1043:42">0x3</literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1045:21" pos:end="1045:42"><decl pos:start="1045:21" pos:end="1045:41"><type pos:start="1045:21" pos:end="1045:28"><name pos:start="1045:21" pos:end="1045:28">uint32_t</name></type> <name pos:start="1045:30" pos:end="1045:30">c</name> <init pos:start="1045:32" pos:end="1045:41">= <expr pos:start="1045:34" pos:end="1045:41"><name pos:start="1045:34" pos:end="1045:35">op</name> <operator pos:start="1045:37" pos:end="1045:37">&amp;</operator> <literal type="number" pos:start="1045:39" pos:end="1045:41">0x8</literal></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="1049:21" pos:end="1049:43"><expr pos:start="1049:21" pos:end="1049:42"><name pos:start="1049:21" pos:end="1049:24">tmp2</name> <operator pos:start="1049:26" pos:end="1049:26">=</operator> <call pos:start="1049:28" pos:end="1049:42"><name pos:start="1049:28" pos:end="1049:35">load_reg</name><argument_list pos:start="1049:36" pos:end="1049:42">(<argument pos:start="1049:37" pos:end="1049:37"><expr pos:start="1049:37" pos:end="1049:37"><name pos:start="1049:37" pos:end="1049:37">s</name></expr></argument>, <argument pos:start="1049:40" pos:end="1049:41"><expr pos:start="1049:40" pos:end="1049:41"><name pos:start="1049:40" pos:end="1049:41">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1051:21" pos:end="1059:21"><if pos:start="1051:21" pos:end="1055:21">if <condition pos:start="1051:24" pos:end="1051:32">(<expr pos:start="1051:25" pos:end="1051:31"><name pos:start="1051:25" pos:end="1051:26">sz</name> <operator pos:start="1051:28" pos:end="1051:29">==</operator> <literal type="number" pos:start="1051:31" pos:end="1051:31">0</literal></expr>)</condition> <block pos:start="1051:34" pos:end="1055:21">{<block_content pos:start="1053:25" pos:end="1053:59">

                        <expr_stmt pos:start="1053:25" pos:end="1053:59"><expr pos:start="1053:25" pos:end="1053:58"><call pos:start="1053:25" pos:end="1053:58"><name pos:start="1053:25" pos:end="1053:40">tcg_gen_andi_i32</name><argument_list pos:start="1053:41" pos:end="1053:58">(<argument pos:start="1053:42" pos:end="1053:45"><expr pos:start="1053:42" pos:end="1053:45"><name pos:start="1053:42" pos:end="1053:45">tmp2</name></expr></argument>, <argument pos:start="1053:48" pos:end="1053:51"><expr pos:start="1053:48" pos:end="1053:51"><name pos:start="1053:48" pos:end="1053:51">tmp2</name></expr></argument>, <argument pos:start="1053:54" pos:end="1053:57"><expr pos:start="1053:54" pos:end="1053:57"><literal type="number" pos:start="1053:54" pos:end="1053:57">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="1055:23" pos:end="1059:21">else if <condition pos:start="1055:31" pos:end="1055:39">(<expr pos:start="1055:32" pos:end="1055:38"><name pos:start="1055:32" pos:end="1055:33">sz</name> <operator pos:start="1055:35" pos:end="1055:36">==</operator> <literal type="number" pos:start="1055:38" pos:end="1055:38">1</literal></expr>)</condition> <block pos:start="1055:41" pos:end="1059:21">{<block_content pos:start="1057:25" pos:end="1057:61">

                        <expr_stmt pos:start="1057:25" pos:end="1057:61"><expr pos:start="1057:25" pos:end="1057:60"><call pos:start="1057:25" pos:end="1057:60"><name pos:start="1057:25" pos:end="1057:40">tcg_gen_andi_i32</name><argument_list pos:start="1057:41" pos:end="1057:60">(<argument pos:start="1057:42" pos:end="1057:45"><expr pos:start="1057:42" pos:end="1057:45"><name pos:start="1057:42" pos:end="1057:45">tmp2</name></expr></argument>, <argument pos:start="1057:48" pos:end="1057:51"><expr pos:start="1057:48" pos:end="1057:51"><name pos:start="1057:48" pos:end="1057:51">tmp2</name></expr></argument>, <argument pos:start="1057:54" pos:end="1057:59"><expr pos:start="1057:54" pos:end="1057:59"><literal type="number" pos:start="1057:54" pos:end="1057:59">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="1061:21" pos:end="1061:50"><expr pos:start="1061:21" pos:end="1061:49"><name pos:start="1061:21" pos:end="1061:24">tmp3</name> <operator pos:start="1061:26" pos:end="1061:26">=</operator> <call pos:start="1061:28" pos:end="1061:49"><name pos:start="1061:28" pos:end="1061:40">tcg_const_i32</name><argument_list pos:start="1061:41" pos:end="1061:49">(<argument pos:start="1061:42" pos:end="1061:48"><expr pos:start="1061:42" pos:end="1061:48"><literal type="number" pos:start="1061:42" pos:end="1061:42">1</literal> <operator pos:start="1061:44" pos:end="1061:45">&lt;&lt;</operator> <name pos:start="1061:47" pos:end="1061:48">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1063:21" pos:end="1071:21"><if pos:start="1063:21" pos:end="1067:21">if <condition pos:start="1063:24" pos:end="1063:26">(<expr pos:start="1063:25" pos:end="1063:25"><name pos:start="1063:25" pos:end="1063:25">c</name></expr>)</condition> <block pos:start="1063:28" pos:end="1067:21">{<block_content pos:start="1065:25" pos:end="1065:64">

                        <expr_stmt pos:start="1065:25" pos:end="1065:64"><expr pos:start="1065:25" pos:end="1065:63"><call pos:start="1065:25" pos:end="1065:63"><name pos:start="1065:25" pos:end="1065:41">gen_helper_crc32c</name><argument_list pos:start="1065:42" pos:end="1065:63">(<argument pos:start="1065:43" pos:end="1065:45"><expr pos:start="1065:43" pos:end="1065:45"><name pos:start="1065:43" pos:end="1065:45">tmp</name></expr></argument>, <argument pos:start="1065:48" pos:end="1065:50"><expr pos:start="1065:48" pos:end="1065:50"><name pos:start="1065:48" pos:end="1065:50">tmp</name></expr></argument>, <argument pos:start="1065:53" pos:end="1065:56"><expr pos:start="1065:53" pos:end="1065:56"><name pos:start="1065:53" pos:end="1065:56">tmp2</name></expr></argument>, <argument pos:start="1065:59" pos:end="1065:62"><expr pos:start="1065:59" pos:end="1065:62"><name pos:start="1065:59" pos:end="1065:62">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1067:23" pos:end="1071:21">else <block pos:start="1067:28" pos:end="1071:21">{<block_content pos:start="1069:25" pos:end="1069:63">

                        <expr_stmt pos:start="1069:25" pos:end="1069:63"><expr pos:start="1069:25" pos:end="1069:62"><call pos:start="1069:25" pos:end="1069:62"><name pos:start="1069:25" pos:end="1069:40">gen_helper_crc32</name><argument_list pos:start="1069:41" pos:end="1069:62">(<argument pos:start="1069:42" pos:end="1069:44"><expr pos:start="1069:42" pos:end="1069:44"><name pos:start="1069:42" pos:end="1069:44">tmp</name></expr></argument>, <argument pos:start="1069:47" pos:end="1069:49"><expr pos:start="1069:47" pos:end="1069:49"><name pos:start="1069:47" pos:end="1069:49">tmp</name></expr></argument>, <argument pos:start="1069:52" pos:end="1069:55"><expr pos:start="1069:52" pos:end="1069:55"><name pos:start="1069:52" pos:end="1069:55">tmp2</name></expr></argument>, <argument pos:start="1069:58" pos:end="1069:61"><expr pos:start="1069:58" pos:end="1069:61"><name pos:start="1069:58" pos:end="1069:61">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1073:21" pos:end="1073:44"><expr pos:start="1073:21" pos:end="1073:43"><call pos:start="1073:21" pos:end="1073:43"><name pos:start="1073:21" pos:end="1073:37">tcg_temp_free_i32</name><argument_list pos:start="1073:38" pos:end="1073:43">(<argument pos:start="1073:39" pos:end="1073:42"><expr pos:start="1073:39" pos:end="1073:42"><name pos:start="1073:39" pos:end="1073:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1075:21" pos:end="1075:44"><expr pos:start="1075:21" pos:end="1075:43"><call pos:start="1075:21" pos:end="1075:43"><name pos:start="1075:21" pos:end="1075:37">tcg_temp_free_i32</name><argument_list pos:start="1075:38" pos:end="1075:43">(<argument pos:start="1075:39" pos:end="1075:42"><expr pos:start="1075:39" pos:end="1075:42"><name pos:start="1075:39" pos:end="1075:42">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1077:21" pos:end="1077:26">break;</break>

                </block_content>}</block>

                <default pos:start="1081:17" pos:end="1081:24">default:</default>

                    <expr_stmt pos:start="1083:21" pos:end="1083:43"><expr pos:start="1083:21" pos:end="1083:42"><call pos:start="1083:21" pos:end="1083:42"><name pos:start="1083:21" pos:end="1083:40">g_assert_not_reached</name><argument_list pos:start="1083:41" pos:end="1083:42">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1089:13" pos:end="1089:34"><expr pos:start="1089:13" pos:end="1089:33"><call pos:start="1089:13" pos:end="1089:33"><name pos:start="1089:13" pos:end="1089:21">store_reg</name><argument_list pos:start="1089:22" pos:end="1089:33">(<argument pos:start="1089:23" pos:end="1089:23"><expr pos:start="1089:23" pos:end="1089:23"><name pos:start="1089:23" pos:end="1089:23">s</name></expr></argument>, <argument pos:start="1089:26" pos:end="1089:27"><expr pos:start="1089:26" pos:end="1089:27"><name pos:start="1089:26" pos:end="1089:27">rd</name></expr></argument>, <argument pos:start="1089:30" pos:end="1089:32"><expr pos:start="1089:30" pos:end="1089:32"><name pos:start="1089:30" pos:end="1089:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1091:13" pos:end="1091:18">break;</break>

        <case pos:start="1093:9" pos:end="1093:15">case <expr pos:start="1093:14" pos:end="1093:14"><literal type="number" pos:start="1093:14" pos:end="1093:14">4</literal></expr>:</case> <case pos:start="1093:17" pos:end="1093:23">case <expr pos:start="1093:22" pos:end="1093:22"><literal type="number" pos:start="1093:22" pos:end="1093:22">5</literal></expr>:</case> <comment type="block" pos:start="1093:25" pos:end="1093:77">/* 32-bit multiply.  Sum of absolute differences.  */</comment>

            <switch pos:start="1095:13" pos:end="1121:13">switch <condition pos:start="1095:20" pos:end="1095:37">(<expr pos:start="1095:21" pos:end="1095:36"><operator pos:start="1095:21" pos:end="1095:21">(</operator><name pos:start="1095:22" pos:end="1095:25">insn</name> <operator pos:start="1095:27" pos:end="1095:28">&gt;&gt;</operator> <literal type="number" pos:start="1095:30" pos:end="1095:31">20</literal><operator pos:start="1095:32" pos:end="1095:32">)</operator> <operator pos:start="1095:34" pos:end="1095:34">&amp;</operator> <literal type="number" pos:start="1095:36" pos:end="1095:36">7</literal></expr>)</condition> <block pos:start="1095:39" pos:end="1121:13">{<block_content pos:start="1097:13" pos:end="1119:22">

            <case pos:start="1097:13" pos:end="1097:19">case <expr pos:start="1097:18" pos:end="1097:18"><literal type="number" pos:start="1097:18" pos:end="1097:18">0</literal></expr>:</case> <comment type="block" pos:start="1097:21" pos:end="1097:39">/* 32 x 32 -&gt; 32 */</comment>

            <case pos:start="1099:13" pos:end="1099:19">case <expr pos:start="1099:18" pos:end="1099:18"><literal type="number" pos:start="1099:18" pos:end="1099:18">7</literal></expr>:</case> <comment type="block" pos:start="1099:21" pos:end="1099:64">/* Unsigned sum of absolute differences.  */</comment>

                <break pos:start="1101:17" pos:end="1101:22">break;</break>

            <case pos:start="1103:13" pos:end="1103:19">case <expr pos:start="1103:18" pos:end="1103:18"><literal type="number" pos:start="1103:18" pos:end="1103:18">1</literal></expr>:</case> <comment type="block" pos:start="1103:21" pos:end="1103:39">/* 16 x 16 -&gt; 32 */</comment>

            <case pos:start="1105:13" pos:end="1105:19">case <expr pos:start="1105:18" pos:end="1105:18"><literal type="number" pos:start="1105:18" pos:end="1105:18">2</literal></expr>:</case> <comment type="block" pos:start="1105:21" pos:end="1105:45">/* Dual multiply add.  */</comment>

            <case pos:start="1107:13" pos:end="1107:19">case <expr pos:start="1107:18" pos:end="1107:18"><literal type="number" pos:start="1107:18" pos:end="1107:18">3</literal></expr>:</case> <comment type="block" pos:start="1107:21" pos:end="1107:42">/* 32 * 16 -&gt; 32msb */</comment>

            <case pos:start="1109:13" pos:end="1109:19">case <expr pos:start="1109:18" pos:end="1109:18"><literal type="number" pos:start="1109:18" pos:end="1109:18">4</literal></expr>:</case> <comment type="block" pos:start="1109:21" pos:end="1109:50">/* Dual multiply subtract.  */</comment>

            <case pos:start="1111:13" pos:end="1111:19">case <expr pos:start="1111:18" pos:end="1111:18"><literal type="number" pos:start="1111:18" pos:end="1111:18">5</literal></expr>:</case> <case pos:start="1111:21" pos:end="1111:27">case <expr pos:start="1111:26" pos:end="1111:26"><literal type="number" pos:start="1111:26" pos:end="1111:26">6</literal></expr>:</case> <comment type="block" pos:start="1111:29" pos:end="1111:72">/* 32 * 32 -&gt; 32msb (SMMUL, SMMLA, SMMLS) */</comment>

                <if_stmt pos:start="1113:17" pos:end="1117:17"><if pos:start="1113:17" pos:end="1117:17">if <condition pos:start="1113:20" pos:end="1113:62">(<expr pos:start="1113:21" pos:end="1113:61"><operator pos:start="1113:21" pos:end="1113:21">!</operator><call pos:start="1113:22" pos:end="1113:61"><name pos:start="1113:22" pos:end="1113:35">arm_dc_feature</name><argument_list pos:start="1113:36" pos:end="1113:61">(<argument pos:start="1113:37" pos:end="1113:37"><expr pos:start="1113:37" pos:end="1113:37"><name pos:start="1113:37" pos:end="1113:37">s</name></expr></argument>, <argument pos:start="1113:40" pos:end="1113:60"><expr pos:start="1113:40" pos:end="1113:60"><name pos:start="1113:40" pos:end="1113:60">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1113:64" pos:end="1117:17">{<block_content pos:start="1115:21" pos:end="1115:36">

                    <goto pos:start="1115:21" pos:end="1115:36">goto <name pos:start="1115:26" pos:end="1115:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1119:17" pos:end="1119:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="1123:13" pos:end="1123:35"><expr pos:start="1123:13" pos:end="1123:34"><name pos:start="1123:13" pos:end="1123:14">op</name> <operator pos:start="1123:16" pos:end="1123:16">=</operator> <operator pos:start="1123:18" pos:end="1123:18">(</operator><name pos:start="1123:19" pos:end="1123:22">insn</name> <operator pos:start="1123:24" pos:end="1123:25">&gt;&gt;</operator> <literal type="number" pos:start="1123:27" pos:end="1123:27">4</literal><operator pos:start="1123:28" pos:end="1123:28">)</operator> <operator pos:start="1123:30" pos:end="1123:30">&amp;</operator> <literal type="number" pos:start="1123:32" pos:end="1123:34">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1125:13" pos:end="1125:34"><expr pos:start="1125:13" pos:end="1125:33"><name pos:start="1125:13" pos:end="1125:15">tmp</name> <operator pos:start="1125:17" pos:end="1125:17">=</operator> <call pos:start="1125:19" pos:end="1125:33"><name pos:start="1125:19" pos:end="1125:26">load_reg</name><argument_list pos:start="1125:27" pos:end="1125:33">(<argument pos:start="1125:28" pos:end="1125:28"><expr pos:start="1125:28" pos:end="1125:28"><name pos:start="1125:28" pos:end="1125:28">s</name></expr></argument>, <argument pos:start="1125:31" pos:end="1125:32"><expr pos:start="1125:31" pos:end="1125:32"><name pos:start="1125:31" pos:end="1125:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1127:13" pos:end="1127:35"><expr pos:start="1127:13" pos:end="1127:34"><name pos:start="1127:13" pos:end="1127:16">tmp2</name> <operator pos:start="1127:18" pos:end="1127:18">=</operator> <call pos:start="1127:20" pos:end="1127:34"><name pos:start="1127:20" pos:end="1127:27">load_reg</name><argument_list pos:start="1127:28" pos:end="1127:34">(<argument pos:start="1127:29" pos:end="1127:29"><expr pos:start="1127:29" pos:end="1127:29"><name pos:start="1127:29" pos:end="1127:29">s</name></expr></argument>, <argument pos:start="1127:32" pos:end="1127:33"><expr pos:start="1127:32" pos:end="1127:33"><name pos:start="1127:32" pos:end="1127:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="1129:13" pos:end="1307:13">switch <condition pos:start="1129:20" pos:end="1129:37">(<expr pos:start="1129:21" pos:end="1129:36"><operator pos:start="1129:21" pos:end="1129:21">(</operator><name pos:start="1129:22" pos:end="1129:25">insn</name> <operator pos:start="1129:27" pos:end="1129:28">&gt;&gt;</operator> <literal type="number" pos:start="1129:30" pos:end="1129:31">20</literal><operator pos:start="1129:32" pos:end="1129:32">)</operator> <operator pos:start="1129:34" pos:end="1129:34">&amp;</operator> <literal type="number" pos:start="1129:36" pos:end="1129:36">7</literal></expr>)</condition> <block pos:start="1129:39" pos:end="1307:13">{<block_content pos:start="1131:13" pos:end="1305:22">

            <case pos:start="1131:13" pos:end="1131:19">case <expr pos:start="1131:18" pos:end="1131:18"><literal type="number" pos:start="1131:18" pos:end="1131:18">0</literal></expr>:</case> <comment type="block" pos:start="1131:21" pos:end="1131:39">/* 32 x 32 -&gt; 32 */</comment>

                <expr_stmt pos:start="1133:17" pos:end="1133:48"><expr pos:start="1133:17" pos:end="1133:47"><call pos:start="1133:17" pos:end="1133:47"><name pos:start="1133:17" pos:end="1133:31">tcg_gen_mul_i32</name><argument_list pos:start="1133:32" pos:end="1133:47">(<argument pos:start="1133:33" pos:end="1133:35"><expr pos:start="1133:33" pos:end="1133:35"><name pos:start="1133:33" pos:end="1133:35">tmp</name></expr></argument>, <argument pos:start="1133:38" pos:end="1133:40"><expr pos:start="1133:38" pos:end="1133:40"><name pos:start="1133:38" pos:end="1133:40">tmp</name></expr></argument>, <argument pos:start="1133:43" pos:end="1133:46"><expr pos:start="1133:43" pos:end="1133:46"><name pos:start="1133:43" pos:end="1133:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1135:17" pos:end="1135:40"><expr pos:start="1135:17" pos:end="1135:39"><call pos:start="1135:17" pos:end="1135:39"><name pos:start="1135:17" pos:end="1135:33">tcg_temp_free_i32</name><argument_list pos:start="1135:34" pos:end="1135:39">(<argument pos:start="1135:35" pos:end="1135:38"><expr pos:start="1135:35" pos:end="1135:38"><name pos:start="1135:35" pos:end="1135:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1137:17" pos:end="1151:17"><if pos:start="1137:17" pos:end="1151:17">if <condition pos:start="1137:20" pos:end="1137:29">(<expr pos:start="1137:21" pos:end="1137:28"><name pos:start="1137:21" pos:end="1137:22">rs</name> <operator pos:start="1137:24" pos:end="1137:25">!=</operator> <literal type="number" pos:start="1137:27" pos:end="1137:28">15</literal></expr>)</condition> <block pos:start="1137:31" pos:end="1151:17">{<block_content pos:start="1139:21" pos:end="1149:44">

                    <expr_stmt pos:start="1139:21" pos:end="1139:43"><expr pos:start="1139:21" pos:end="1139:42"><name pos:start="1139:21" pos:end="1139:24">tmp2</name> <operator pos:start="1139:26" pos:end="1139:26">=</operator> <call pos:start="1139:28" pos:end="1139:42"><name pos:start="1139:28" pos:end="1139:35">load_reg</name><argument_list pos:start="1139:36" pos:end="1139:42">(<argument pos:start="1139:37" pos:end="1139:37"><expr pos:start="1139:37" pos:end="1139:37"><name pos:start="1139:37" pos:end="1139:37">s</name></expr></argument>, <argument pos:start="1139:40" pos:end="1139:41"><expr pos:start="1139:40" pos:end="1139:41"><name pos:start="1139:40" pos:end="1139:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1141:21" pos:end="1147:56"><if pos:start="1141:21" pos:end="1143:56">if <condition pos:start="1141:24" pos:end="1141:27">(<expr pos:start="1141:25" pos:end="1141:26"><name pos:start="1141:25" pos:end="1141:26">op</name></expr>)</condition><block type="pseudo" pos:start="1143:25" pos:end="1143:56"><block_content pos:start="1143:25" pos:end="1143:56">

                        <expr_stmt pos:start="1143:25" pos:end="1143:56"><expr pos:start="1143:25" pos:end="1143:55"><call pos:start="1143:25" pos:end="1143:55"><name pos:start="1143:25" pos:end="1143:39">tcg_gen_sub_i32</name><argument_list pos:start="1143:40" pos:end="1143:55">(<argument pos:start="1143:41" pos:end="1143:43"><expr pos:start="1143:41" pos:end="1143:43"><name pos:start="1143:41" pos:end="1143:43">tmp</name></expr></argument>, <argument pos:start="1143:46" pos:end="1143:49"><expr pos:start="1143:46" pos:end="1143:49"><name pos:start="1143:46" pos:end="1143:49">tmp2</name></expr></argument>, <argument pos:start="1143:52" pos:end="1143:54"><expr pos:start="1143:52" pos:end="1143:54"><name pos:start="1143:52" pos:end="1143:54">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1145:21" pos:end="1147:56">else<block type="pseudo" pos:start="1147:25" pos:end="1147:56"><block_content pos:start="1147:25" pos:end="1147:56">

                        <expr_stmt pos:start="1147:25" pos:end="1147:56"><expr pos:start="1147:25" pos:end="1147:55"><call pos:start="1147:25" pos:end="1147:55"><name pos:start="1147:25" pos:end="1147:39">tcg_gen_add_i32</name><argument_list pos:start="1147:40" pos:end="1147:55">(<argument pos:start="1147:41" pos:end="1147:43"><expr pos:start="1147:41" pos:end="1147:43"><name pos:start="1147:41" pos:end="1147:43">tmp</name></expr></argument>, <argument pos:start="1147:46" pos:end="1147:48"><expr pos:start="1147:46" pos:end="1147:48"><name pos:start="1147:46" pos:end="1147:48">tmp</name></expr></argument>, <argument pos:start="1147:51" pos:end="1147:54"><expr pos:start="1147:51" pos:end="1147:54"><name pos:start="1147:51" pos:end="1147:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="1149:21" pos:end="1149:44"><expr pos:start="1149:21" pos:end="1149:43"><call pos:start="1149:21" pos:end="1149:43"><name pos:start="1149:21" pos:end="1149:37">tcg_temp_free_i32</name><argument_list pos:start="1149:38" pos:end="1149:43">(<argument pos:start="1149:39" pos:end="1149:42"><expr pos:start="1149:39" pos:end="1149:42"><name pos:start="1149:39" pos:end="1149:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1153:17" pos:end="1153:22">break;</break>

            <case pos:start="1155:13" pos:end="1155:19">case <expr pos:start="1155:18" pos:end="1155:18"><literal type="number" pos:start="1155:18" pos:end="1155:18">1</literal></expr>:</case> <comment type="block" pos:start="1155:21" pos:end="1155:39">/* 16 x 16 -&gt; 32 */</comment>

                <expr_stmt pos:start="1157:17" pos:end="1157:53"><expr pos:start="1157:17" pos:end="1157:52"><call pos:start="1157:17" pos:end="1157:52"><name pos:start="1157:17" pos:end="1157:25">gen_mulxy</name><argument_list pos:start="1157:26" pos:end="1157:52">(<argument pos:start="1157:27" pos:end="1157:29"><expr pos:start="1157:27" pos:end="1157:29"><name pos:start="1157:27" pos:end="1157:29">tmp</name></expr></argument>, <argument pos:start="1157:32" pos:end="1157:35"><expr pos:start="1157:32" pos:end="1157:35"><name pos:start="1157:32" pos:end="1157:35">tmp2</name></expr></argument>, <argument pos:start="1157:38" pos:end="1157:43"><expr pos:start="1157:38" pos:end="1157:43"><name pos:start="1157:38" pos:end="1157:39">op</name> <operator pos:start="1157:41" pos:end="1157:41">&amp;</operator> <literal type="number" pos:start="1157:43" pos:end="1157:43">2</literal></expr></argument>, <argument pos:start="1157:46" pos:end="1157:51"><expr pos:start="1157:46" pos:end="1157:51"><name pos:start="1157:46" pos:end="1157:47">op</name> <operator pos:start="1157:49" pos:end="1157:49">&amp;</operator> <literal type="number" pos:start="1157:51" pos:end="1157:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1159:17" pos:end="1159:40"><expr pos:start="1159:17" pos:end="1159:39"><call pos:start="1159:17" pos:end="1159:39"><name pos:start="1159:17" pos:end="1159:33">tcg_temp_free_i32</name><argument_list pos:start="1159:34" pos:end="1159:39">(<argument pos:start="1159:35" pos:end="1159:38"><expr pos:start="1159:35" pos:end="1159:38"><name pos:start="1159:35" pos:end="1159:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1161:17" pos:end="1169:17"><if pos:start="1161:17" pos:end="1169:17">if <condition pos:start="1161:20" pos:end="1161:29">(<expr pos:start="1161:21" pos:end="1161:28"><name pos:start="1161:21" pos:end="1161:22">rs</name> <operator pos:start="1161:24" pos:end="1161:25">!=</operator> <literal type="number" pos:start="1161:27" pos:end="1161:28">15</literal></expr>)</condition> <block pos:start="1161:31" pos:end="1169:17">{<block_content pos:start="1163:21" pos:end="1167:44">

                    <expr_stmt pos:start="1163:21" pos:end="1163:43"><expr pos:start="1163:21" pos:end="1163:42"><name pos:start="1163:21" pos:end="1163:24">tmp2</name> <operator pos:start="1163:26" pos:end="1163:26">=</operator> <call pos:start="1163:28" pos:end="1163:42"><name pos:start="1163:28" pos:end="1163:35">load_reg</name><argument_list pos:start="1163:36" pos:end="1163:42">(<argument pos:start="1163:37" pos:end="1163:37"><expr pos:start="1163:37" pos:end="1163:37"><name pos:start="1163:37" pos:end="1163:37">s</name></expr></argument>, <argument pos:start="1163:40" pos:end="1163:41"><expr pos:start="1163:40" pos:end="1163:41"><name pos:start="1163:40" pos:end="1163:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1165:21" pos:end="1165:65"><expr pos:start="1165:21" pos:end="1165:64"><call pos:start="1165:21" pos:end="1165:64"><name pos:start="1165:21" pos:end="1165:39">gen_helper_add_setq</name><argument_list pos:start="1165:40" pos:end="1165:64">(<argument pos:start="1165:41" pos:end="1165:43"><expr pos:start="1165:41" pos:end="1165:43"><name pos:start="1165:41" pos:end="1165:43">tmp</name></expr></argument>, <argument pos:start="1165:46" pos:end="1165:52"><expr pos:start="1165:46" pos:end="1165:52"><name pos:start="1165:46" pos:end="1165:52">cpu_env</name></expr></argument>, <argument pos:start="1165:55" pos:end="1165:57"><expr pos:start="1165:55" pos:end="1165:57"><name pos:start="1165:55" pos:end="1165:57">tmp</name></expr></argument>, <argument pos:start="1165:60" pos:end="1165:63"><expr pos:start="1165:60" pos:end="1165:63"><name pos:start="1165:60" pos:end="1165:63">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1167:21" pos:end="1167:44"><expr pos:start="1167:21" pos:end="1167:43"><call pos:start="1167:21" pos:end="1167:43"><name pos:start="1167:21" pos:end="1167:37">tcg_temp_free_i32</name><argument_list pos:start="1167:38" pos:end="1167:43">(<argument pos:start="1167:39" pos:end="1167:42"><expr pos:start="1167:39" pos:end="1167:42"><name pos:start="1167:39" pos:end="1167:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1171:17" pos:end="1171:22">break;</break>

            <case pos:start="1173:13" pos:end="1173:19">case <expr pos:start="1173:18" pos:end="1173:18"><literal type="number" pos:start="1173:18" pos:end="1173:18">2</literal></expr>:</case> <comment type="block" pos:start="1173:21" pos:end="1173:45">/* Dual multiply add.  */</comment>

            <case pos:start="1175:13" pos:end="1175:19">case <expr pos:start="1175:18" pos:end="1175:18"><literal type="number" pos:start="1175:18" pos:end="1175:18">4</literal></expr>:</case> <comment type="block" pos:start="1175:21" pos:end="1175:50">/* Dual multiply subtract.  */</comment>

                <if_stmt pos:start="1177:17" pos:end="1179:40"><if pos:start="1177:17" pos:end="1179:40">if <condition pos:start="1177:20" pos:end="1177:23">(<expr pos:start="1177:21" pos:end="1177:22"><name pos:start="1177:21" pos:end="1177:22">op</name></expr>)</condition><block type="pseudo" pos:start="1179:21" pos:end="1179:40"><block_content pos:start="1179:21" pos:end="1179:40">

                    <expr_stmt pos:start="1179:21" pos:end="1179:40"><expr pos:start="1179:21" pos:end="1179:39"><call pos:start="1179:21" pos:end="1179:39"><name pos:start="1179:21" pos:end="1179:33">gen_swap_half</name><argument_list pos:start="1179:34" pos:end="1179:39">(<argument pos:start="1179:35" pos:end="1179:38"><expr pos:start="1179:35" pos:end="1179:38"><name pos:start="1179:35" pos:end="1179:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1181:17" pos:end="1181:41"><expr pos:start="1181:17" pos:end="1181:40"><call pos:start="1181:17" pos:end="1181:40"><name pos:start="1181:17" pos:end="1181:29">gen_smul_dual</name><argument_list pos:start="1181:30" pos:end="1181:40">(<argument pos:start="1181:31" pos:end="1181:33"><expr pos:start="1181:31" pos:end="1181:33"><name pos:start="1181:31" pos:end="1181:33">tmp</name></expr></argument>, <argument pos:start="1181:36" pos:end="1181:39"><expr pos:start="1181:36" pos:end="1181:39"><name pos:start="1181:36" pos:end="1181:39">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1183:17" pos:end="1201:17"><if pos:start="1183:17" pos:end="1189:17">if <condition pos:start="1183:20" pos:end="1183:37">(<expr pos:start="1183:21" pos:end="1183:36"><name pos:start="1183:21" pos:end="1183:24">insn</name> <operator pos:start="1183:26" pos:end="1183:26">&amp;</operator> <operator pos:start="1183:28" pos:end="1183:28">(</operator><literal type="number" pos:start="1183:29" pos:end="1183:29">1</literal> <operator pos:start="1183:31" pos:end="1183:32">&lt;&lt;</operator> <literal type="number" pos:start="1183:34" pos:end="1183:35">22</literal><operator pos:start="1183:36" pos:end="1183:36">)</operator></expr>)</condition> <block pos:start="1183:39" pos:end="1189:17">{<block_content pos:start="1187:21" pos:end="1187:52">

                    <comment type="block" pos:start="1185:21" pos:end="1185:59">/* This subtraction cannot overflow. */</comment>

                    <expr_stmt pos:start="1187:21" pos:end="1187:52"><expr pos:start="1187:21" pos:end="1187:51"><call pos:start="1187:21" pos:end="1187:51"><name pos:start="1187:21" pos:end="1187:35">tcg_gen_sub_i32</name><argument_list pos:start="1187:36" pos:end="1187:51">(<argument pos:start="1187:37" pos:end="1187:39"><expr pos:start="1187:37" pos:end="1187:39"><name pos:start="1187:37" pos:end="1187:39">tmp</name></expr></argument>, <argument pos:start="1187:42" pos:end="1187:44"><expr pos:start="1187:42" pos:end="1187:44"><name pos:start="1187:42" pos:end="1187:44">tmp</name></expr></argument>, <argument pos:start="1187:47" pos:end="1187:50"><expr pos:start="1187:47" pos:end="1187:50"><name pos:start="1187:47" pos:end="1187:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1189:19" pos:end="1201:17">else <block pos:start="1189:24" pos:end="1201:17">{<block_content pos:start="1199:21" pos:end="1199:65">

                    <comment type="block" pos:start="1191:21" pos:end="1197:23">/* This addition cannot overflow 32 bits;

                     * however it may overflow considered as a signed

                     * operation, in which case we must set the Q flag.

                     */</comment>

                    <expr_stmt pos:start="1199:21" pos:end="1199:65"><expr pos:start="1199:21" pos:end="1199:64"><call pos:start="1199:21" pos:end="1199:64"><name pos:start="1199:21" pos:end="1199:39">gen_helper_add_setq</name><argument_list pos:start="1199:40" pos:end="1199:64">(<argument pos:start="1199:41" pos:end="1199:43"><expr pos:start="1199:41" pos:end="1199:43"><name pos:start="1199:41" pos:end="1199:43">tmp</name></expr></argument>, <argument pos:start="1199:46" pos:end="1199:52"><expr pos:start="1199:46" pos:end="1199:52"><name pos:start="1199:46" pos:end="1199:52">cpu_env</name></expr></argument>, <argument pos:start="1199:55" pos:end="1199:57"><expr pos:start="1199:55" pos:end="1199:57"><name pos:start="1199:55" pos:end="1199:57">tmp</name></expr></argument>, <argument pos:start="1199:60" pos:end="1199:63"><expr pos:start="1199:60" pos:end="1199:63"><name pos:start="1199:60" pos:end="1199:63">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1203:17" pos:end="1203:40"><expr pos:start="1203:17" pos:end="1203:39"><call pos:start="1203:17" pos:end="1203:39"><name pos:start="1203:17" pos:end="1203:33">tcg_temp_free_i32</name><argument_list pos:start="1203:34" pos:end="1203:39">(<argument pos:start="1203:35" pos:end="1203:38"><expr pos:start="1203:35" pos:end="1203:38"><name pos:start="1203:35" pos:end="1203:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1205:17" pos:end="1215:19"><if pos:start="1205:17" pos:end="1215:19">if <condition pos:start="1205:20" pos:end="1205:29">(<expr pos:start="1205:21" pos:end="1205:28"><name pos:start="1205:21" pos:end="1205:22">rs</name> <operator pos:start="1205:24" pos:end="1205:25">!=</operator> <literal type="number" pos:start="1205:27" pos:end="1205:28">15</literal></expr>)</condition>

                  <block pos:start="1207:19" pos:end="1215:19">{<block_content pos:start="1209:21" pos:end="1213:44">

                    <expr_stmt pos:start="1209:21" pos:end="1209:43"><expr pos:start="1209:21" pos:end="1209:42"><name pos:start="1209:21" pos:end="1209:24">tmp2</name> <operator pos:start="1209:26" pos:end="1209:26">=</operator> <call pos:start="1209:28" pos:end="1209:42"><name pos:start="1209:28" pos:end="1209:35">load_reg</name><argument_list pos:start="1209:36" pos:end="1209:42">(<argument pos:start="1209:37" pos:end="1209:37"><expr pos:start="1209:37" pos:end="1209:37"><name pos:start="1209:37" pos:end="1209:37">s</name></expr></argument>, <argument pos:start="1209:40" pos:end="1209:41"><expr pos:start="1209:40" pos:end="1209:41"><name pos:start="1209:40" pos:end="1209:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1211:21" pos:end="1211:65"><expr pos:start="1211:21" pos:end="1211:64"><call pos:start="1211:21" pos:end="1211:64"><name pos:start="1211:21" pos:end="1211:39">gen_helper_add_setq</name><argument_list pos:start="1211:40" pos:end="1211:64">(<argument pos:start="1211:41" pos:end="1211:43"><expr pos:start="1211:41" pos:end="1211:43"><name pos:start="1211:41" pos:end="1211:43">tmp</name></expr></argument>, <argument pos:start="1211:46" pos:end="1211:52"><expr pos:start="1211:46" pos:end="1211:52"><name pos:start="1211:46" pos:end="1211:52">cpu_env</name></expr></argument>, <argument pos:start="1211:55" pos:end="1211:57"><expr pos:start="1211:55" pos:end="1211:57"><name pos:start="1211:55" pos:end="1211:57">tmp</name></expr></argument>, <argument pos:start="1211:60" pos:end="1211:63"><expr pos:start="1211:60" pos:end="1211:63"><name pos:start="1211:60" pos:end="1211:63">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1213:21" pos:end="1213:44"><expr pos:start="1213:21" pos:end="1213:43"><call pos:start="1213:21" pos:end="1213:43"><name pos:start="1213:21" pos:end="1213:37">tcg_temp_free_i32</name><argument_list pos:start="1213:38" pos:end="1213:43">(<argument pos:start="1213:39" pos:end="1213:42"><expr pos:start="1213:39" pos:end="1213:42"><name pos:start="1213:39" pos:end="1213:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  </block_content>}</block></if></if_stmt>

                <break pos:start="1217:17" pos:end="1217:22">break;</break>

            <case pos:start="1219:13" pos:end="1219:19">case <expr pos:start="1219:18" pos:end="1219:18"><literal type="number" pos:start="1219:18" pos:end="1219:18">3</literal></expr>:</case> <comment type="block" pos:start="1219:21" pos:end="1219:42">/* 32 * 16 -&gt; 32msb */</comment>

                <if_stmt pos:start="1221:17" pos:end="1227:35"><if pos:start="1221:17" pos:end="1223:53">if <condition pos:start="1221:20" pos:end="1221:23">(<expr pos:start="1221:21" pos:end="1221:22"><name pos:start="1221:21" pos:end="1221:22">op</name></expr>)</condition><block type="pseudo" pos:start="1223:21" pos:end="1223:53"><block_content pos:start="1223:21" pos:end="1223:53">

                    <expr_stmt pos:start="1223:21" pos:end="1223:53"><expr pos:start="1223:21" pos:end="1223:52"><call pos:start="1223:21" pos:end="1223:52"><name pos:start="1223:21" pos:end="1223:36">tcg_gen_sari_i32</name><argument_list pos:start="1223:37" pos:end="1223:52">(<argument pos:start="1223:38" pos:end="1223:41"><expr pos:start="1223:38" pos:end="1223:41"><name pos:start="1223:38" pos:end="1223:41">tmp2</name></expr></argument>, <argument pos:start="1223:44" pos:end="1223:47"><expr pos:start="1223:44" pos:end="1223:47"><name pos:start="1223:44" pos:end="1223:47">tmp2</name></expr></argument>, <argument pos:start="1223:50" pos:end="1223:51"><expr pos:start="1223:50" pos:end="1223:51"><literal type="number" pos:start="1223:50" pos:end="1223:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1225:17" pos:end="1227:35">else<block type="pseudo" pos:start="1227:21" pos:end="1227:35"><block_content pos:start="1227:21" pos:end="1227:35">

                    <expr_stmt pos:start="1227:21" pos:end="1227:35"><expr pos:start="1227:21" pos:end="1227:34"><call pos:start="1227:21" pos:end="1227:34"><name pos:start="1227:21" pos:end="1227:28">gen_sxth</name><argument_list pos:start="1227:29" pos:end="1227:34">(<argument pos:start="1227:30" pos:end="1227:33"><expr pos:start="1227:30" pos:end="1227:33"><name pos:start="1227:30" pos:end="1227:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="1229:17" pos:end="1229:52"><expr pos:start="1229:17" pos:end="1229:51"><name pos:start="1229:17" pos:end="1229:21">tmp64</name> <operator pos:start="1229:23" pos:end="1229:23">=</operator> <call pos:start="1229:25" pos:end="1229:51"><name pos:start="1229:25" pos:end="1229:40">gen_muls_i64_i32</name><argument_list pos:start="1229:41" pos:end="1229:51">(<argument pos:start="1229:42" pos:end="1229:44"><expr pos:start="1229:42" pos:end="1229:44"><name pos:start="1229:42" pos:end="1229:44">tmp</name></expr></argument>, <argument pos:start="1229:47" pos:end="1229:50"><expr pos:start="1229:47" pos:end="1229:50"><name pos:start="1229:47" pos:end="1229:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1231:17" pos:end="1231:51"><expr pos:start="1231:17" pos:end="1231:50"><call pos:start="1231:17" pos:end="1231:50"><name pos:start="1231:17" pos:end="1231:32">tcg_gen_shri_i64</name><argument_list pos:start="1231:33" pos:end="1231:50">(<argument pos:start="1231:34" pos:end="1231:38"><expr pos:start="1231:34" pos:end="1231:38"><name pos:start="1231:34" pos:end="1231:38">tmp64</name></expr></argument>, <argument pos:start="1231:41" pos:end="1231:45"><expr pos:start="1231:41" pos:end="1231:45"><name pos:start="1231:41" pos:end="1231:45">tmp64</name></expr></argument>, <argument pos:start="1231:48" pos:end="1231:49"><expr pos:start="1231:48" pos:end="1231:49"><literal type="number" pos:start="1231:48" pos:end="1231:49">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1233:17" pos:end="1233:41"><expr pos:start="1233:17" pos:end="1233:40"><name pos:start="1233:17" pos:end="1233:19">tmp</name> <operator pos:start="1233:21" pos:end="1233:21">=</operator> <call pos:start="1233:23" pos:end="1233:40"><name pos:start="1233:23" pos:end="1233:38">tcg_temp_new_i32</name><argument_list pos:start="1233:39" pos:end="1233:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1235:17" pos:end="1235:50"><expr pos:start="1235:17" pos:end="1235:49"><call pos:start="1235:17" pos:end="1235:49"><name pos:start="1235:17" pos:end="1235:37">tcg_gen_extrl_i64_i32</name><argument_list pos:start="1235:38" pos:end="1235:49">(<argument pos:start="1235:39" pos:end="1235:41"><expr pos:start="1235:39" pos:end="1235:41"><name pos:start="1235:39" pos:end="1235:41">tmp</name></expr></argument>, <argument pos:start="1235:44" pos:end="1235:48"><expr pos:start="1235:44" pos:end="1235:48"><name pos:start="1235:44" pos:end="1235:48">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1237:17" pos:end="1237:41"><expr pos:start="1237:17" pos:end="1237:40"><call pos:start="1237:17" pos:end="1237:40"><name pos:start="1237:17" pos:end="1237:33">tcg_temp_free_i64</name><argument_list pos:start="1237:34" pos:end="1237:40">(<argument pos:start="1237:35" pos:end="1237:39"><expr pos:start="1237:35" pos:end="1237:39"><name pos:start="1237:35" pos:end="1237:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1239:17" pos:end="1249:19"><if pos:start="1239:17" pos:end="1249:19">if <condition pos:start="1239:20" pos:end="1239:29">(<expr pos:start="1239:21" pos:end="1239:28"><name pos:start="1239:21" pos:end="1239:22">rs</name> <operator pos:start="1239:24" pos:end="1239:25">!=</operator> <literal type="number" pos:start="1239:27" pos:end="1239:28">15</literal></expr>)</condition>

                  <block pos:start="1241:19" pos:end="1249:19">{<block_content pos:start="1243:21" pos:end="1247:44">

                    <expr_stmt pos:start="1243:21" pos:end="1243:43"><expr pos:start="1243:21" pos:end="1243:42"><name pos:start="1243:21" pos:end="1243:24">tmp2</name> <operator pos:start="1243:26" pos:end="1243:26">=</operator> <call pos:start="1243:28" pos:end="1243:42"><name pos:start="1243:28" pos:end="1243:35">load_reg</name><argument_list pos:start="1243:36" pos:end="1243:42">(<argument pos:start="1243:37" pos:end="1243:37"><expr pos:start="1243:37" pos:end="1243:37"><name pos:start="1243:37" pos:end="1243:37">s</name></expr></argument>, <argument pos:start="1243:40" pos:end="1243:41"><expr pos:start="1243:40" pos:end="1243:41"><name pos:start="1243:40" pos:end="1243:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1245:21" pos:end="1245:65"><expr pos:start="1245:21" pos:end="1245:64"><call pos:start="1245:21" pos:end="1245:64"><name pos:start="1245:21" pos:end="1245:39">gen_helper_add_setq</name><argument_list pos:start="1245:40" pos:end="1245:64">(<argument pos:start="1245:41" pos:end="1245:43"><expr pos:start="1245:41" pos:end="1245:43"><name pos:start="1245:41" pos:end="1245:43">tmp</name></expr></argument>, <argument pos:start="1245:46" pos:end="1245:52"><expr pos:start="1245:46" pos:end="1245:52"><name pos:start="1245:46" pos:end="1245:52">cpu_env</name></expr></argument>, <argument pos:start="1245:55" pos:end="1245:57"><expr pos:start="1245:55" pos:end="1245:57"><name pos:start="1245:55" pos:end="1245:57">tmp</name></expr></argument>, <argument pos:start="1245:60" pos:end="1245:63"><expr pos:start="1245:60" pos:end="1245:63"><name pos:start="1245:60" pos:end="1245:63">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1247:21" pos:end="1247:44"><expr pos:start="1247:21" pos:end="1247:43"><call pos:start="1247:21" pos:end="1247:43"><name pos:start="1247:21" pos:end="1247:37">tcg_temp_free_i32</name><argument_list pos:start="1247:38" pos:end="1247:43">(<argument pos:start="1247:39" pos:end="1247:42"><expr pos:start="1247:39" pos:end="1247:42"><name pos:start="1247:39" pos:end="1247:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  </block_content>}</block></if></if_stmt>

                <break pos:start="1251:17" pos:end="1251:22">break;</break>

            <case pos:start="1253:13" pos:end="1253:19">case <expr pos:start="1253:18" pos:end="1253:18"><literal type="number" pos:start="1253:18" pos:end="1253:18">5</literal></expr>:</case> <case pos:start="1253:21" pos:end="1253:27">case <expr pos:start="1253:26" pos:end="1253:26"><literal type="number" pos:start="1253:26" pos:end="1253:26">6</literal></expr>:</case> <comment type="block" pos:start="1253:29" pos:end="1253:72">/* 32 * 32 -&gt; 32msb (SMMUL, SMMLA, SMMLS) */</comment>

                <expr_stmt pos:start="1255:17" pos:end="1255:52"><expr pos:start="1255:17" pos:end="1255:51"><name pos:start="1255:17" pos:end="1255:21">tmp64</name> <operator pos:start="1255:23" pos:end="1255:23">=</operator> <call pos:start="1255:25" pos:end="1255:51"><name pos:start="1255:25" pos:end="1255:40">gen_muls_i64_i32</name><argument_list pos:start="1255:41" pos:end="1255:51">(<argument pos:start="1255:42" pos:end="1255:44"><expr pos:start="1255:42" pos:end="1255:44"><name pos:start="1255:42" pos:end="1255:44">tmp</name></expr></argument>, <argument pos:start="1255:47" pos:end="1255:50"><expr pos:start="1255:47" pos:end="1255:50"><name pos:start="1255:47" pos:end="1255:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1257:17" pos:end="1271:17"><if pos:start="1257:17" pos:end="1271:17">if <condition pos:start="1257:20" pos:end="1257:29">(<expr pos:start="1257:21" pos:end="1257:28"><name pos:start="1257:21" pos:end="1257:22">rs</name> <operator pos:start="1257:24" pos:end="1257:25">!=</operator> <literal type="number" pos:start="1257:27" pos:end="1257:28">15</literal></expr>)</condition> <block pos:start="1257:31" pos:end="1271:17">{<block_content pos:start="1259:21" pos:end="1269:21">

                    <expr_stmt pos:start="1259:21" pos:end="1259:42"><expr pos:start="1259:21" pos:end="1259:41"><name pos:start="1259:21" pos:end="1259:23">tmp</name> <operator pos:start="1259:25" pos:end="1259:25">=</operator> <call pos:start="1259:27" pos:end="1259:41"><name pos:start="1259:27" pos:end="1259:34">load_reg</name><argument_list pos:start="1259:35" pos:end="1259:41">(<argument pos:start="1259:36" pos:end="1259:36"><expr pos:start="1259:36" pos:end="1259:36"><name pos:start="1259:36" pos:end="1259:36">s</name></expr></argument>, <argument pos:start="1259:39" pos:end="1259:40"><expr pos:start="1259:39" pos:end="1259:40"><name pos:start="1259:39" pos:end="1259:40">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1261:21" pos:end="1269:21"><if pos:start="1261:21" pos:end="1265:21">if <condition pos:start="1261:24" pos:end="1261:41">(<expr pos:start="1261:25" pos:end="1261:40"><name pos:start="1261:25" pos:end="1261:28">insn</name> <operator pos:start="1261:30" pos:end="1261:30">&amp;</operator> <operator pos:start="1261:32" pos:end="1261:32">(</operator><literal type="number" pos:start="1261:33" pos:end="1261:33">1</literal> <operator pos:start="1261:35" pos:end="1261:36">&lt;&lt;</operator> <literal type="number" pos:start="1261:38" pos:end="1261:39">20</literal><operator pos:start="1261:40" pos:end="1261:40">)</operator></expr>)</condition> <block pos:start="1261:43" pos:end="1265:21">{<block_content pos:start="1263:25" pos:end="1263:57">

                        <expr_stmt pos:start="1263:25" pos:end="1263:57"><expr pos:start="1263:25" pos:end="1263:56"><name pos:start="1263:25" pos:end="1263:29">tmp64</name> <operator pos:start="1263:31" pos:end="1263:31">=</operator> <call pos:start="1263:33" pos:end="1263:56"><name pos:start="1263:33" pos:end="1263:44">gen_addq_msw</name><argument_list pos:start="1263:45" pos:end="1263:56">(<argument pos:start="1263:46" pos:end="1263:50"><expr pos:start="1263:46" pos:end="1263:50"><name pos:start="1263:46" pos:end="1263:50">tmp64</name></expr></argument>, <argument pos:start="1263:53" pos:end="1263:55"><expr pos:start="1263:53" pos:end="1263:55"><name pos:start="1263:53" pos:end="1263:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1265:23" pos:end="1269:21">else <block pos:start="1265:28" pos:end="1269:21">{<block_content pos:start="1267:25" pos:end="1267:57">

                        <expr_stmt pos:start="1267:25" pos:end="1267:57"><expr pos:start="1267:25" pos:end="1267:56"><name pos:start="1267:25" pos:end="1267:29">tmp64</name> <operator pos:start="1267:31" pos:end="1267:31">=</operator> <call pos:start="1267:33" pos:end="1267:56"><name pos:start="1267:33" pos:end="1267:44">gen_subq_msw</name><argument_list pos:start="1267:45" pos:end="1267:56">(<argument pos:start="1267:46" pos:end="1267:50"><expr pos:start="1267:46" pos:end="1267:50"><name pos:start="1267:46" pos:end="1267:50">tmp64</name></expr></argument>, <argument pos:start="1267:53" pos:end="1267:55"><expr pos:start="1267:53" pos:end="1267:55"><name pos:start="1267:53" pos:end="1267:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1273:17" pos:end="1277:17"><if pos:start="1273:17" pos:end="1277:17">if <condition pos:start="1273:20" pos:end="1273:36">(<expr pos:start="1273:21" pos:end="1273:35"><name pos:start="1273:21" pos:end="1273:24">insn</name> <operator pos:start="1273:26" pos:end="1273:26">&amp;</operator> <operator pos:start="1273:28" pos:end="1273:28">(</operator><literal type="number" pos:start="1273:29" pos:end="1273:29">1</literal> <operator pos:start="1273:31" pos:end="1273:32">&lt;&lt;</operator> <literal type="number" pos:start="1273:34" pos:end="1273:34">4</literal><operator pos:start="1273:35" pos:end="1273:35">)</operator></expr>)</condition> <block pos:start="1273:38" pos:end="1277:17">{<block_content pos:start="1275:21" pos:end="1275:64">

                    <expr_stmt pos:start="1275:21" pos:end="1275:64"><expr pos:start="1275:21" pos:end="1275:63"><call pos:start="1275:21" pos:end="1275:63"><name pos:start="1275:21" pos:end="1275:36">tcg_gen_addi_i64</name><argument_list pos:start="1275:37" pos:end="1275:63">(<argument pos:start="1275:38" pos:end="1275:42"><expr pos:start="1275:38" pos:end="1275:42"><name pos:start="1275:38" pos:end="1275:42">tmp64</name></expr></argument>, <argument pos:start="1275:45" pos:end="1275:49"><expr pos:start="1275:45" pos:end="1275:49"><name pos:start="1275:45" pos:end="1275:49">tmp64</name></expr></argument>, <argument pos:start="1275:52" pos:end="1275:62"><expr pos:start="1275:52" pos:end="1275:62"><literal type="number" pos:start="1275:52" pos:end="1275:62">0x80000000u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1279:17" pos:end="1279:51"><expr pos:start="1279:17" pos:end="1279:50"><call pos:start="1279:17" pos:end="1279:50"><name pos:start="1279:17" pos:end="1279:32">tcg_gen_shri_i64</name><argument_list pos:start="1279:33" pos:end="1279:50">(<argument pos:start="1279:34" pos:end="1279:38"><expr pos:start="1279:34" pos:end="1279:38"><name pos:start="1279:34" pos:end="1279:38">tmp64</name></expr></argument>, <argument pos:start="1279:41" pos:end="1279:45"><expr pos:start="1279:41" pos:end="1279:45"><name pos:start="1279:41" pos:end="1279:45">tmp64</name></expr></argument>, <argument pos:start="1279:48" pos:end="1279:49"><expr pos:start="1279:48" pos:end="1279:49"><literal type="number" pos:start="1279:48" pos:end="1279:49">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1281:17" pos:end="1281:41"><expr pos:start="1281:17" pos:end="1281:40"><name pos:start="1281:17" pos:end="1281:19">tmp</name> <operator pos:start="1281:21" pos:end="1281:21">=</operator> <call pos:start="1281:23" pos:end="1281:40"><name pos:start="1281:23" pos:end="1281:38">tcg_temp_new_i32</name><argument_list pos:start="1281:39" pos:end="1281:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1283:17" pos:end="1283:50"><expr pos:start="1283:17" pos:end="1283:49"><call pos:start="1283:17" pos:end="1283:49"><name pos:start="1283:17" pos:end="1283:37">tcg_gen_extrl_i64_i32</name><argument_list pos:start="1283:38" pos:end="1283:49">(<argument pos:start="1283:39" pos:end="1283:41"><expr pos:start="1283:39" pos:end="1283:41"><name pos:start="1283:39" pos:end="1283:41">tmp</name></expr></argument>, <argument pos:start="1283:44" pos:end="1283:48"><expr pos:start="1283:44" pos:end="1283:48"><name pos:start="1283:44" pos:end="1283:48">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1285:17" pos:end="1285:41"><expr pos:start="1285:17" pos:end="1285:40"><call pos:start="1285:17" pos:end="1285:40"><name pos:start="1285:17" pos:end="1285:33">tcg_temp_free_i64</name><argument_list pos:start="1285:34" pos:end="1285:40">(<argument pos:start="1285:35" pos:end="1285:39"><expr pos:start="1285:35" pos:end="1285:39"><name pos:start="1285:35" pos:end="1285:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1287:17" pos:end="1287:22">break;</break>

            <case pos:start="1289:13" pos:end="1289:19">case <expr pos:start="1289:18" pos:end="1289:18"><literal type="number" pos:start="1289:18" pos:end="1289:18">7</literal></expr>:</case> <comment type="block" pos:start="1289:21" pos:end="1289:64">/* Unsigned sum of absolute differences.  */</comment>

                <expr_stmt pos:start="1291:17" pos:end="1291:49"><expr pos:start="1291:17" pos:end="1291:48"><call pos:start="1291:17" pos:end="1291:48"><name pos:start="1291:17" pos:end="1291:32">gen_helper_usad8</name><argument_list pos:start="1291:33" pos:end="1291:48">(<argument pos:start="1291:34" pos:end="1291:36"><expr pos:start="1291:34" pos:end="1291:36"><name pos:start="1291:34" pos:end="1291:36">tmp</name></expr></argument>, <argument pos:start="1291:39" pos:end="1291:41"><expr pos:start="1291:39" pos:end="1291:41"><name pos:start="1291:39" pos:end="1291:41">tmp</name></expr></argument>, <argument pos:start="1291:44" pos:end="1291:47"><expr pos:start="1291:44" pos:end="1291:47"><name pos:start="1291:44" pos:end="1291:47">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1293:17" pos:end="1293:40"><expr pos:start="1293:17" pos:end="1293:39"><call pos:start="1293:17" pos:end="1293:39"><name pos:start="1293:17" pos:end="1293:33">tcg_temp_free_i32</name><argument_list pos:start="1293:34" pos:end="1293:39">(<argument pos:start="1293:35" pos:end="1293:38"><expr pos:start="1293:35" pos:end="1293:38"><name pos:start="1293:35" pos:end="1293:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1295:17" pos:end="1303:17"><if pos:start="1295:17" pos:end="1303:17">if <condition pos:start="1295:20" pos:end="1295:29">(<expr pos:start="1295:21" pos:end="1295:28"><name pos:start="1295:21" pos:end="1295:22">rs</name> <operator pos:start="1295:24" pos:end="1295:25">!=</operator> <literal type="number" pos:start="1295:27" pos:end="1295:28">15</literal></expr>)</condition> <block pos:start="1295:31" pos:end="1303:17">{<block_content pos:start="1297:21" pos:end="1301:44">

                    <expr_stmt pos:start="1297:21" pos:end="1297:43"><expr pos:start="1297:21" pos:end="1297:42"><name pos:start="1297:21" pos:end="1297:24">tmp2</name> <operator pos:start="1297:26" pos:end="1297:26">=</operator> <call pos:start="1297:28" pos:end="1297:42"><name pos:start="1297:28" pos:end="1297:35">load_reg</name><argument_list pos:start="1297:36" pos:end="1297:42">(<argument pos:start="1297:37" pos:end="1297:37"><expr pos:start="1297:37" pos:end="1297:37"><name pos:start="1297:37" pos:end="1297:37">s</name></expr></argument>, <argument pos:start="1297:40" pos:end="1297:41"><expr pos:start="1297:40" pos:end="1297:41"><name pos:start="1297:40" pos:end="1297:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1299:21" pos:end="1299:52"><expr pos:start="1299:21" pos:end="1299:51"><call pos:start="1299:21" pos:end="1299:51"><name pos:start="1299:21" pos:end="1299:35">tcg_gen_add_i32</name><argument_list pos:start="1299:36" pos:end="1299:51">(<argument pos:start="1299:37" pos:end="1299:39"><expr pos:start="1299:37" pos:end="1299:39"><name pos:start="1299:37" pos:end="1299:39">tmp</name></expr></argument>, <argument pos:start="1299:42" pos:end="1299:44"><expr pos:start="1299:42" pos:end="1299:44"><name pos:start="1299:42" pos:end="1299:44">tmp</name></expr></argument>, <argument pos:start="1299:47" pos:end="1299:50"><expr pos:start="1299:47" pos:end="1299:50"><name pos:start="1299:47" pos:end="1299:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1301:21" pos:end="1301:44"><expr pos:start="1301:21" pos:end="1301:43"><call pos:start="1301:21" pos:end="1301:43"><name pos:start="1301:21" pos:end="1301:37">tcg_temp_free_i32</name><argument_list pos:start="1301:38" pos:end="1301:43">(<argument pos:start="1301:39" pos:end="1301:42"><expr pos:start="1301:39" pos:end="1301:42"><name pos:start="1301:39" pos:end="1301:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1305:17" pos:end="1305:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="1309:13" pos:end="1309:34"><expr pos:start="1309:13" pos:end="1309:33"><call pos:start="1309:13" pos:end="1309:33"><name pos:start="1309:13" pos:end="1309:21">store_reg</name><argument_list pos:start="1309:22" pos:end="1309:33">(<argument pos:start="1309:23" pos:end="1309:23"><expr pos:start="1309:23" pos:end="1309:23"><name pos:start="1309:23" pos:end="1309:23">s</name></expr></argument>, <argument pos:start="1309:26" pos:end="1309:27"><expr pos:start="1309:26" pos:end="1309:27"><name pos:start="1309:26" pos:end="1309:27">rd</name></expr></argument>, <argument pos:start="1309:30" pos:end="1309:32"><expr pos:start="1309:30" pos:end="1309:32"><name pos:start="1309:30" pos:end="1309:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1311:13" pos:end="1311:18">break;</break>

        <case pos:start="1313:9" pos:end="1313:15">case <expr pos:start="1313:14" pos:end="1313:14"><literal type="number" pos:start="1313:14" pos:end="1313:14">6</literal></expr>:</case> <case pos:start="1313:17" pos:end="1313:23">case <expr pos:start="1313:22" pos:end="1313:22"><literal type="number" pos:start="1313:22" pos:end="1313:22">7</literal></expr>:</case> <comment type="block" pos:start="1313:25" pos:end="1313:55">/* 64-bit multiply, Divide.  */</comment>

            <expr_stmt pos:start="1315:13" pos:end="1315:61"><expr pos:start="1315:13" pos:end="1315:60"><name pos:start="1315:13" pos:end="1315:14">op</name> <operator pos:start="1315:16" pos:end="1315:16">=</operator> <operator pos:start="1315:18" pos:end="1315:18">(</operator><operator pos:start="1315:19" pos:end="1315:19">(</operator><name pos:start="1315:20" pos:end="1315:23">insn</name> <operator pos:start="1315:25" pos:end="1315:26">&gt;&gt;</operator> <literal type="number" pos:start="1315:28" pos:end="1315:28">4</literal><operator pos:start="1315:29" pos:end="1315:29">)</operator> <operator pos:start="1315:31" pos:end="1315:31">&amp;</operator> <literal type="number" pos:start="1315:33" pos:end="1315:35">0xf</literal><operator pos:start="1315:36" pos:end="1315:36">)</operator> <operator pos:start="1315:38" pos:end="1315:38">|</operator> <operator pos:start="1315:40" pos:end="1315:40">(</operator><operator pos:start="1315:41" pos:end="1315:41">(</operator><name pos:start="1315:42" pos:end="1315:45">insn</name> <operator pos:start="1315:47" pos:end="1315:48">&gt;&gt;</operator> <literal type="number" pos:start="1315:50" pos:end="1315:51">16</literal><operator pos:start="1315:52" pos:end="1315:52">)</operator> <operator pos:start="1315:54" pos:end="1315:54">&amp;</operator> <literal type="number" pos:start="1315:56" pos:end="1315:59">0x70</literal><operator pos:start="1315:60" pos:end="1315:60">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1317:13" pos:end="1317:34"><expr pos:start="1317:13" pos:end="1317:33"><name pos:start="1317:13" pos:end="1317:15">tmp</name> <operator pos:start="1317:17" pos:end="1317:17">=</operator> <call pos:start="1317:19" pos:end="1317:33"><name pos:start="1317:19" pos:end="1317:26">load_reg</name><argument_list pos:start="1317:27" pos:end="1317:33">(<argument pos:start="1317:28" pos:end="1317:28"><expr pos:start="1317:28" pos:end="1317:28"><name pos:start="1317:28" pos:end="1317:28">s</name></expr></argument>, <argument pos:start="1317:31" pos:end="1317:32"><expr pos:start="1317:31" pos:end="1317:32"><name pos:start="1317:31" pos:end="1317:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1319:13" pos:end="1319:35"><expr pos:start="1319:13" pos:end="1319:34"><name pos:start="1319:13" pos:end="1319:16">tmp2</name> <operator pos:start="1319:18" pos:end="1319:18">=</operator> <call pos:start="1319:20" pos:end="1319:34"><name pos:start="1319:20" pos:end="1319:27">load_reg</name><argument_list pos:start="1319:28" pos:end="1319:34">(<argument pos:start="1319:29" pos:end="1319:29"><expr pos:start="1319:29" pos:end="1319:29"><name pos:start="1319:29" pos:end="1319:29">s</name></expr></argument>, <argument pos:start="1319:32" pos:end="1319:33"><expr pos:start="1319:32" pos:end="1319:33"><name pos:start="1319:32" pos:end="1319:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1321:13" pos:end="1461:13"><if pos:start="1321:13" pos:end="1343:13">if <condition pos:start="1321:16" pos:end="1321:36">(<expr pos:start="1321:17" pos:end="1321:35"><operator pos:start="1321:17" pos:end="1321:17">(</operator><name pos:start="1321:18" pos:end="1321:19">op</name> <operator pos:start="1321:21" pos:end="1321:21">&amp;</operator> <literal type="number" pos:start="1321:23" pos:end="1321:26">0x50</literal><operator pos:start="1321:27" pos:end="1321:27">)</operator> <operator pos:start="1321:29" pos:end="1321:30">==</operator> <literal type="number" pos:start="1321:32" pos:end="1321:35">0x10</literal></expr>)</condition> <block pos:start="1321:38" pos:end="1343:13">{<block_content pos:start="1325:17" pos:end="1341:38">

                <comment type="block" pos:start="1323:17" pos:end="1323:32">/* sdiv, udiv */</comment>

                <if_stmt pos:start="1325:17" pos:end="1329:17"><if pos:start="1325:17" pos:end="1329:17">if <condition pos:start="1325:20" pos:end="1325:62">(<expr pos:start="1325:21" pos:end="1325:61"><operator pos:start="1325:21" pos:end="1325:21">!</operator><call pos:start="1325:22" pos:end="1325:61"><name pos:start="1325:22" pos:end="1325:35">arm_dc_feature</name><argument_list pos:start="1325:36" pos:end="1325:61">(<argument pos:start="1325:37" pos:end="1325:37"><expr pos:start="1325:37" pos:end="1325:37"><name pos:start="1325:37" pos:end="1325:37">s</name></expr></argument>, <argument pos:start="1325:40" pos:end="1325:60"><expr pos:start="1325:40" pos:end="1325:60"><name pos:start="1325:40" pos:end="1325:60">ARM_FEATURE_THUMB_DIV</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1325:64" pos:end="1329:17">{<block_content pos:start="1327:21" pos:end="1327:36">

                    <goto pos:start="1327:21" pos:end="1327:36">goto <name pos:start="1327:26" pos:end="1327:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1331:17" pos:end="1337:52"><if pos:start="1331:17" pos:end="1333:52">if <condition pos:start="1331:20" pos:end="1331:30">(<expr pos:start="1331:21" pos:end="1331:29"><name pos:start="1331:21" pos:end="1331:22">op</name> <operator pos:start="1331:24" pos:end="1331:24">&amp;</operator> <literal type="number" pos:start="1331:26" pos:end="1331:29">0x20</literal></expr>)</condition><block type="pseudo" pos:start="1333:21" pos:end="1333:52"><block_content pos:start="1333:21" pos:end="1333:52">

                    <expr_stmt pos:start="1333:21" pos:end="1333:52"><expr pos:start="1333:21" pos:end="1333:51"><call pos:start="1333:21" pos:end="1333:51"><name pos:start="1333:21" pos:end="1333:35">gen_helper_udiv</name><argument_list pos:start="1333:36" pos:end="1333:51">(<argument pos:start="1333:37" pos:end="1333:39"><expr pos:start="1333:37" pos:end="1333:39"><name pos:start="1333:37" pos:end="1333:39">tmp</name></expr></argument>, <argument pos:start="1333:42" pos:end="1333:44"><expr pos:start="1333:42" pos:end="1333:44"><name pos:start="1333:42" pos:end="1333:44">tmp</name></expr></argument>, <argument pos:start="1333:47" pos:end="1333:50"><expr pos:start="1333:47" pos:end="1333:50"><name pos:start="1333:47" pos:end="1333:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1335:17" pos:end="1337:52">else<block type="pseudo" pos:start="1337:21" pos:end="1337:52"><block_content pos:start="1337:21" pos:end="1337:52">

                    <expr_stmt pos:start="1337:21" pos:end="1337:52"><expr pos:start="1337:21" pos:end="1337:51"><call pos:start="1337:21" pos:end="1337:51"><name pos:start="1337:21" pos:end="1337:35">gen_helper_sdiv</name><argument_list pos:start="1337:36" pos:end="1337:51">(<argument pos:start="1337:37" pos:end="1337:39"><expr pos:start="1337:37" pos:end="1337:39"><name pos:start="1337:37" pos:end="1337:39">tmp</name></expr></argument>, <argument pos:start="1337:42" pos:end="1337:44"><expr pos:start="1337:42" pos:end="1337:44"><name pos:start="1337:42" pos:end="1337:44">tmp</name></expr></argument>, <argument pos:start="1337:47" pos:end="1337:50"><expr pos:start="1337:47" pos:end="1337:50"><name pos:start="1337:47" pos:end="1337:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="1339:17" pos:end="1339:40"><expr pos:start="1339:17" pos:end="1339:39"><call pos:start="1339:17" pos:end="1339:39"><name pos:start="1339:17" pos:end="1339:33">tcg_temp_free_i32</name><argument_list pos:start="1339:34" pos:end="1339:39">(<argument pos:start="1339:35" pos:end="1339:38"><expr pos:start="1339:35" pos:end="1339:38"><name pos:start="1339:35" pos:end="1339:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1341:17" pos:end="1341:38"><expr pos:start="1341:17" pos:end="1341:37"><call pos:start="1341:17" pos:end="1341:37"><name pos:start="1341:17" pos:end="1341:25">store_reg</name><argument_list pos:start="1341:26" pos:end="1341:37">(<argument pos:start="1341:27" pos:end="1341:27"><expr pos:start="1341:27" pos:end="1341:27"><name pos:start="1341:27" pos:end="1341:27">s</name></expr></argument>, <argument pos:start="1341:30" pos:end="1341:31"><expr pos:start="1341:30" pos:end="1341:31"><name pos:start="1341:30" pos:end="1341:31">rd</name></expr></argument>, <argument pos:start="1341:34" pos:end="1341:36"><expr pos:start="1341:34" pos:end="1341:36"><name pos:start="1341:34" pos:end="1341:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1343:15" pos:end="1389:13">else if <condition pos:start="1343:23" pos:end="1343:41">(<expr pos:start="1343:24" pos:end="1343:40"><operator pos:start="1343:24" pos:end="1343:24">(</operator><name pos:start="1343:25" pos:end="1343:26">op</name> <operator pos:start="1343:28" pos:end="1343:28">&amp;</operator> <literal type="number" pos:start="1343:30" pos:end="1343:32">0xe</literal><operator pos:start="1343:33" pos:end="1343:33">)</operator> <operator pos:start="1343:35" pos:end="1343:36">==</operator> <literal type="number" pos:start="1343:38" pos:end="1343:40">0xc</literal></expr>)</condition> <block pos:start="1343:43" pos:end="1389:13">{<block_content pos:start="1347:17" pos:end="1387:41">

                <comment type="block" pos:start="1345:17" pos:end="1345:53">/* Dual multiply accumulate long.  */</comment>

                <if_stmt pos:start="1347:17" pos:end="1355:17"><if pos:start="1347:17" pos:end="1355:17">if <condition pos:start="1347:20" pos:end="1347:62">(<expr pos:start="1347:21" pos:end="1347:61"><operator pos:start="1347:21" pos:end="1347:21">!</operator><call pos:start="1347:22" pos:end="1347:61"><name pos:start="1347:22" pos:end="1347:35">arm_dc_feature</name><argument_list pos:start="1347:36" pos:end="1347:61">(<argument pos:start="1347:37" pos:end="1347:37"><expr pos:start="1347:37" pos:end="1347:37"><name pos:start="1347:37" pos:end="1347:37">s</name></expr></argument>, <argument pos:start="1347:40" pos:end="1347:60"><expr pos:start="1347:40" pos:end="1347:60"><name pos:start="1347:40" pos:end="1347:60">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1347:64" pos:end="1355:17">{<block_content pos:start="1349:21" pos:end="1353:36">

                    <expr_stmt pos:start="1349:21" pos:end="1349:43"><expr pos:start="1349:21" pos:end="1349:42"><call pos:start="1349:21" pos:end="1349:42"><name pos:start="1349:21" pos:end="1349:37">tcg_temp_free_i32</name><argument_list pos:start="1349:38" pos:end="1349:42">(<argument pos:start="1349:39" pos:end="1349:41"><expr pos:start="1349:39" pos:end="1349:41"><name pos:start="1349:39" pos:end="1349:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1351:21" pos:end="1351:44"><expr pos:start="1351:21" pos:end="1351:43"><call pos:start="1351:21" pos:end="1351:43"><name pos:start="1351:21" pos:end="1351:37">tcg_temp_free_i32</name><argument_list pos:start="1351:38" pos:end="1351:43">(<argument pos:start="1351:39" pos:end="1351:42"><expr pos:start="1351:39" pos:end="1351:42"><name pos:start="1351:39" pos:end="1351:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="1353:21" pos:end="1353:36">goto <name pos:start="1353:26" pos:end="1353:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1357:17" pos:end="1359:40"><if pos:start="1357:17" pos:end="1359:40">if <condition pos:start="1357:20" pos:end="1357:27">(<expr pos:start="1357:21" pos:end="1357:26"><name pos:start="1357:21" pos:end="1357:22">op</name> <operator pos:start="1357:24" pos:end="1357:24">&amp;</operator> <literal type="number" pos:start="1357:26" pos:end="1357:26">1</literal></expr>)</condition><block type="pseudo" pos:start="1359:21" pos:end="1359:40"><block_content pos:start="1359:21" pos:end="1359:40">

                    <expr_stmt pos:start="1359:21" pos:end="1359:40"><expr pos:start="1359:21" pos:end="1359:39"><call pos:start="1359:21" pos:end="1359:39"><name pos:start="1359:21" pos:end="1359:33">gen_swap_half</name><argument_list pos:start="1359:34" pos:end="1359:39">(<argument pos:start="1359:35" pos:end="1359:38"><expr pos:start="1359:35" pos:end="1359:38"><name pos:start="1359:35" pos:end="1359:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1361:17" pos:end="1361:41"><expr pos:start="1361:17" pos:end="1361:40"><call pos:start="1361:17" pos:end="1361:40"><name pos:start="1361:17" pos:end="1361:29">gen_smul_dual</name><argument_list pos:start="1361:30" pos:end="1361:40">(<argument pos:start="1361:31" pos:end="1361:33"><expr pos:start="1361:31" pos:end="1361:33"><name pos:start="1361:31" pos:end="1361:33">tmp</name></expr></argument>, <argument pos:start="1361:36" pos:end="1361:39"><expr pos:start="1361:36" pos:end="1361:39"><name pos:start="1361:36" pos:end="1361:39">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1363:17" pos:end="1371:17"><if pos:start="1363:17" pos:end="1367:17">if <condition pos:start="1363:20" pos:end="1363:30">(<expr pos:start="1363:21" pos:end="1363:29"><name pos:start="1363:21" pos:end="1363:22">op</name> <operator pos:start="1363:24" pos:end="1363:24">&amp;</operator> <literal type="number" pos:start="1363:26" pos:end="1363:29">0x10</literal></expr>)</condition> <block pos:start="1363:32" pos:end="1367:17">{<block_content pos:start="1365:21" pos:end="1365:52">

                    <expr_stmt pos:start="1365:21" pos:end="1365:52"><expr pos:start="1365:21" pos:end="1365:51"><call pos:start="1365:21" pos:end="1365:51"><name pos:start="1365:21" pos:end="1365:35">tcg_gen_sub_i32</name><argument_list pos:start="1365:36" pos:end="1365:51">(<argument pos:start="1365:37" pos:end="1365:39"><expr pos:start="1365:37" pos:end="1365:39"><name pos:start="1365:37" pos:end="1365:39">tmp</name></expr></argument>, <argument pos:start="1365:42" pos:end="1365:44"><expr pos:start="1365:42" pos:end="1365:44"><name pos:start="1365:42" pos:end="1365:44">tmp</name></expr></argument>, <argument pos:start="1365:47" pos:end="1365:50"><expr pos:start="1365:47" pos:end="1365:50"><name pos:start="1365:47" pos:end="1365:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1367:19" pos:end="1371:17">else <block pos:start="1367:24" pos:end="1371:17">{<block_content pos:start="1369:21" pos:end="1369:52">

                    <expr_stmt pos:start="1369:21" pos:end="1369:52"><expr pos:start="1369:21" pos:end="1369:51"><call pos:start="1369:21" pos:end="1369:51"><name pos:start="1369:21" pos:end="1369:35">tcg_gen_add_i32</name><argument_list pos:start="1369:36" pos:end="1369:51">(<argument pos:start="1369:37" pos:end="1369:39"><expr pos:start="1369:37" pos:end="1369:39"><name pos:start="1369:37" pos:end="1369:39">tmp</name></expr></argument>, <argument pos:start="1369:42" pos:end="1369:44"><expr pos:start="1369:42" pos:end="1369:44"><name pos:start="1369:42" pos:end="1369:44">tmp</name></expr></argument>, <argument pos:start="1369:47" pos:end="1369:50"><expr pos:start="1369:47" pos:end="1369:50"><name pos:start="1369:47" pos:end="1369:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1373:17" pos:end="1373:40"><expr pos:start="1373:17" pos:end="1373:39"><call pos:start="1373:17" pos:end="1373:39"><name pos:start="1373:17" pos:end="1373:33">tcg_temp_free_i32</name><argument_list pos:start="1373:34" pos:end="1373:39">(<argument pos:start="1373:35" pos:end="1373:38"><expr pos:start="1373:35" pos:end="1373:38"><name pos:start="1373:35" pos:end="1373:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1375:17" pos:end="1375:28">/* BUGFIX */</comment>

                <expr_stmt pos:start="1377:17" pos:end="1377:43"><expr pos:start="1377:17" pos:end="1377:42"><name pos:start="1377:17" pos:end="1377:21">tmp64</name> <operator pos:start="1377:23" pos:end="1377:23">=</operator> <call pos:start="1377:25" pos:end="1377:42"><name pos:start="1377:25" pos:end="1377:40">tcg_temp_new_i64</name><argument_list pos:start="1377:41" pos:end="1377:42">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1379:17" pos:end="1379:48"><expr pos:start="1379:17" pos:end="1379:47"><call pos:start="1379:17" pos:end="1379:47"><name pos:start="1379:17" pos:end="1379:35">tcg_gen_ext_i32_i64</name><argument_list pos:start="1379:36" pos:end="1379:47">(<argument pos:start="1379:37" pos:end="1379:41"><expr pos:start="1379:37" pos:end="1379:41"><name pos:start="1379:37" pos:end="1379:41">tmp64</name></expr></argument>, <argument pos:start="1379:44" pos:end="1379:46"><expr pos:start="1379:44" pos:end="1379:46"><name pos:start="1379:44" pos:end="1379:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1381:17" pos:end="1381:39"><expr pos:start="1381:17" pos:end="1381:38"><call pos:start="1381:17" pos:end="1381:38"><name pos:start="1381:17" pos:end="1381:33">tcg_temp_free_i32</name><argument_list pos:start="1381:34" pos:end="1381:38">(<argument pos:start="1381:35" pos:end="1381:37"><expr pos:start="1381:35" pos:end="1381:37"><name pos:start="1381:35" pos:end="1381:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1383:17" pos:end="1383:43"><expr pos:start="1383:17" pos:end="1383:42"><call pos:start="1383:17" pos:end="1383:42"><name pos:start="1383:17" pos:end="1383:24">gen_addq</name><argument_list pos:start="1383:25" pos:end="1383:42">(<argument pos:start="1383:26" pos:end="1383:26"><expr pos:start="1383:26" pos:end="1383:26"><name pos:start="1383:26" pos:end="1383:26">s</name></expr></argument>, <argument pos:start="1383:29" pos:end="1383:33"><expr pos:start="1383:29" pos:end="1383:33"><name pos:start="1383:29" pos:end="1383:33">tmp64</name></expr></argument>, <argument pos:start="1383:36" pos:end="1383:37"><expr pos:start="1383:36" pos:end="1383:37"><name pos:start="1383:36" pos:end="1383:37">rs</name></expr></argument>, <argument pos:start="1383:40" pos:end="1383:41"><expr pos:start="1383:40" pos:end="1383:41"><name pos:start="1383:40" pos:end="1383:41">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1385:17" pos:end="1385:49"><expr pos:start="1385:17" pos:end="1385:48"><call pos:start="1385:17" pos:end="1385:48"><name pos:start="1385:17" pos:end="1385:30">gen_storeq_reg</name><argument_list pos:start="1385:31" pos:end="1385:48">(<argument pos:start="1385:32" pos:end="1385:32"><expr pos:start="1385:32" pos:end="1385:32"><name pos:start="1385:32" pos:end="1385:32">s</name></expr></argument>, <argument pos:start="1385:35" pos:end="1385:36"><expr pos:start="1385:35" pos:end="1385:36"><name pos:start="1385:35" pos:end="1385:36">rs</name></expr></argument>, <argument pos:start="1385:39" pos:end="1385:40"><expr pos:start="1385:39" pos:end="1385:40"><name pos:start="1385:39" pos:end="1385:40">rd</name></expr></argument>, <argument pos:start="1385:43" pos:end="1385:47"><expr pos:start="1385:43" pos:end="1385:47"><name pos:start="1385:43" pos:end="1385:47">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1387:17" pos:end="1387:41"><expr pos:start="1387:17" pos:end="1387:40"><call pos:start="1387:17" pos:end="1387:40"><name pos:start="1387:17" pos:end="1387:33">tcg_temp_free_i64</name><argument_list pos:start="1387:34" pos:end="1387:40">(<argument pos:start="1387:35" pos:end="1387:39"><expr pos:start="1387:35" pos:end="1387:39"><name pos:start="1387:35" pos:end="1387:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1389:15" pos:end="1461:13">else <block pos:start="1389:20" pos:end="1461:13">{<block_content pos:start="1391:17" pos:end="1459:41">

                <if_stmt pos:start="1391:17" pos:end="1431:17"><if pos:start="1391:17" pos:end="1397:17">if <condition pos:start="1391:20" pos:end="1391:30">(<expr pos:start="1391:21" pos:end="1391:29"><name pos:start="1391:21" pos:end="1391:22">op</name> <operator pos:start="1391:24" pos:end="1391:24">&amp;</operator> <literal type="number" pos:start="1391:26" pos:end="1391:29">0x20</literal></expr>)</condition> <block pos:start="1391:32" pos:end="1397:17">{<block_content pos:start="1395:21" pos:end="1395:56">

                    <comment type="block" pos:start="1393:21" pos:end="1393:51">/* Unsigned 64-bit multiply  */</comment>

                    <expr_stmt pos:start="1395:21" pos:end="1395:56"><expr pos:start="1395:21" pos:end="1395:55"><name pos:start="1395:21" pos:end="1395:25">tmp64</name> <operator pos:start="1395:27" pos:end="1395:27">=</operator> <call pos:start="1395:29" pos:end="1395:55"><name pos:start="1395:29" pos:end="1395:44">gen_mulu_i64_i32</name><argument_list pos:start="1395:45" pos:end="1395:55">(<argument pos:start="1395:46" pos:end="1395:48"><expr pos:start="1395:46" pos:end="1395:48"><name pos:start="1395:46" pos:end="1395:48">tmp</name></expr></argument>, <argument pos:start="1395:51" pos:end="1395:54"><expr pos:start="1395:51" pos:end="1395:54"><name pos:start="1395:51" pos:end="1395:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1397:19" pos:end="1431:17">else <block pos:start="1397:24" pos:end="1431:17">{<block_content pos:start="1399:21" pos:end="1429:21">

                    <if_stmt pos:start="1399:21" pos:end="1429:21"><if pos:start="1399:21" pos:end="1423:21">if <condition pos:start="1399:24" pos:end="1399:31">(<expr pos:start="1399:25" pos:end="1399:30"><name pos:start="1399:25" pos:end="1399:26">op</name> <operator pos:start="1399:28" pos:end="1399:28">&amp;</operator> <literal type="number" pos:start="1399:30" pos:end="1399:30">8</literal></expr>)</condition> <block pos:start="1399:33" pos:end="1423:21">{<block_content pos:start="1403:25" pos:end="1421:47">

                        <comment type="block" pos:start="1401:25" pos:end="1401:37">/* smlalxy */</comment>

                        <if_stmt pos:start="1403:25" pos:end="1411:25"><if pos:start="1403:25" pos:end="1411:25">if <condition pos:start="1403:28" pos:end="1403:70">(<expr pos:start="1403:29" pos:end="1403:69"><operator pos:start="1403:29" pos:end="1403:29">!</operator><call pos:start="1403:30" pos:end="1403:69"><name pos:start="1403:30" pos:end="1403:43">arm_dc_feature</name><argument_list pos:start="1403:44" pos:end="1403:69">(<argument pos:start="1403:45" pos:end="1403:45"><expr pos:start="1403:45" pos:end="1403:45"><name pos:start="1403:45" pos:end="1403:45">s</name></expr></argument>, <argument pos:start="1403:48" pos:end="1403:68"><expr pos:start="1403:48" pos:end="1403:68"><name pos:start="1403:48" pos:end="1403:68">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1403:72" pos:end="1411:25">{<block_content pos:start="1405:29" pos:end="1409:44">

                            <expr_stmt pos:start="1405:29" pos:end="1405:52"><expr pos:start="1405:29" pos:end="1405:51"><call pos:start="1405:29" pos:end="1405:51"><name pos:start="1405:29" pos:end="1405:45">tcg_temp_free_i32</name><argument_list pos:start="1405:46" pos:end="1405:51">(<argument pos:start="1405:47" pos:end="1405:50"><expr pos:start="1405:47" pos:end="1405:50"><name pos:start="1405:47" pos:end="1405:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1407:29" pos:end="1407:51"><expr pos:start="1407:29" pos:end="1407:50"><call pos:start="1407:29" pos:end="1407:50"><name pos:start="1407:29" pos:end="1407:45">tcg_temp_free_i32</name><argument_list pos:start="1407:46" pos:end="1407:50">(<argument pos:start="1407:47" pos:end="1407:49"><expr pos:start="1407:47" pos:end="1407:49"><name pos:start="1407:47" pos:end="1407:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <goto pos:start="1409:29" pos:end="1409:44">goto <name pos:start="1409:34" pos:end="1409:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1413:25" pos:end="1413:61"><expr pos:start="1413:25" pos:end="1413:60"><call pos:start="1413:25" pos:end="1413:60"><name pos:start="1413:25" pos:end="1413:33">gen_mulxy</name><argument_list pos:start="1413:34" pos:end="1413:60">(<argument pos:start="1413:35" pos:end="1413:37"><expr pos:start="1413:35" pos:end="1413:37"><name pos:start="1413:35" pos:end="1413:37">tmp</name></expr></argument>, <argument pos:start="1413:40" pos:end="1413:43"><expr pos:start="1413:40" pos:end="1413:43"><name pos:start="1413:40" pos:end="1413:43">tmp2</name></expr></argument>, <argument pos:start="1413:46" pos:end="1413:51"><expr pos:start="1413:46" pos:end="1413:51"><name pos:start="1413:46" pos:end="1413:47">op</name> <operator pos:start="1413:49" pos:end="1413:49">&amp;</operator> <literal type="number" pos:start="1413:51" pos:end="1413:51">2</literal></expr></argument>, <argument pos:start="1413:54" pos:end="1413:59"><expr pos:start="1413:54" pos:end="1413:59"><name pos:start="1413:54" pos:end="1413:55">op</name> <operator pos:start="1413:57" pos:end="1413:57">&amp;</operator> <literal type="number" pos:start="1413:59" pos:end="1413:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1415:25" pos:end="1415:48"><expr pos:start="1415:25" pos:end="1415:47"><call pos:start="1415:25" pos:end="1415:47"><name pos:start="1415:25" pos:end="1415:41">tcg_temp_free_i32</name><argument_list pos:start="1415:42" pos:end="1415:47">(<argument pos:start="1415:43" pos:end="1415:46"><expr pos:start="1415:43" pos:end="1415:46"><name pos:start="1415:43" pos:end="1415:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1417:25" pos:end="1417:51"><expr pos:start="1417:25" pos:end="1417:50"><name pos:start="1417:25" pos:end="1417:29">tmp64</name> <operator pos:start="1417:31" pos:end="1417:31">=</operator> <call pos:start="1417:33" pos:end="1417:50"><name pos:start="1417:33" pos:end="1417:48">tcg_temp_new_i64</name><argument_list pos:start="1417:49" pos:end="1417:50">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1419:25" pos:end="1419:56"><expr pos:start="1419:25" pos:end="1419:55"><call pos:start="1419:25" pos:end="1419:55"><name pos:start="1419:25" pos:end="1419:43">tcg_gen_ext_i32_i64</name><argument_list pos:start="1419:44" pos:end="1419:55">(<argument pos:start="1419:45" pos:end="1419:49"><expr pos:start="1419:45" pos:end="1419:49"><name pos:start="1419:45" pos:end="1419:49">tmp64</name></expr></argument>, <argument pos:start="1419:52" pos:end="1419:54"><expr pos:start="1419:52" pos:end="1419:54"><name pos:start="1419:52" pos:end="1419:54">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1421:25" pos:end="1421:47"><expr pos:start="1421:25" pos:end="1421:46"><call pos:start="1421:25" pos:end="1421:46"><name pos:start="1421:25" pos:end="1421:41">tcg_temp_free_i32</name><argument_list pos:start="1421:42" pos:end="1421:46">(<argument pos:start="1421:43" pos:end="1421:45"><expr pos:start="1421:43" pos:end="1421:45"><name pos:start="1421:43" pos:end="1421:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1423:23" pos:end="1429:21">else <block pos:start="1423:28" pos:end="1429:21">{<block_content pos:start="1427:25" pos:end="1427:60">

                        <comment type="block" pos:start="1425:25" pos:end="1425:53">/* Signed 64-bit multiply  */</comment>

                        <expr_stmt pos:start="1427:25" pos:end="1427:60"><expr pos:start="1427:25" pos:end="1427:59"><name pos:start="1427:25" pos:end="1427:29">tmp64</name> <operator pos:start="1427:31" pos:end="1427:31">=</operator> <call pos:start="1427:33" pos:end="1427:59"><name pos:start="1427:33" pos:end="1427:48">gen_muls_i64_i32</name><argument_list pos:start="1427:49" pos:end="1427:59">(<argument pos:start="1427:50" pos:end="1427:52"><expr pos:start="1427:50" pos:end="1427:52"><name pos:start="1427:50" pos:end="1427:52">tmp</name></expr></argument>, <argument pos:start="1427:55" pos:end="1427:58"><expr pos:start="1427:55" pos:end="1427:58"><name pos:start="1427:55" pos:end="1427:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="1433:17" pos:end="1455:17"><if pos:start="1433:17" pos:end="1449:17">if <condition pos:start="1433:20" pos:end="1433:27">(<expr pos:start="1433:21" pos:end="1433:26"><name pos:start="1433:21" pos:end="1433:22">op</name> <operator pos:start="1433:24" pos:end="1433:24">&amp;</operator> <literal type="number" pos:start="1433:26" pos:end="1433:26">4</literal></expr>)</condition> <block pos:start="1433:29" pos:end="1449:17">{<block_content pos:start="1437:21" pos:end="1447:46">

                    <comment type="block" pos:start="1435:21" pos:end="1435:31">/* umaal */</comment>

                    <if_stmt pos:start="1437:21" pos:end="1443:21"><if pos:start="1437:21" pos:end="1443:21">if <condition pos:start="1437:24" pos:end="1437:66">(<expr pos:start="1437:25" pos:end="1437:65"><operator pos:start="1437:25" pos:end="1437:25">!</operator><call pos:start="1437:26" pos:end="1437:65"><name pos:start="1437:26" pos:end="1437:39">arm_dc_feature</name><argument_list pos:start="1437:40" pos:end="1437:65">(<argument pos:start="1437:41" pos:end="1437:41"><expr pos:start="1437:41" pos:end="1437:41"><name pos:start="1437:41" pos:end="1437:41">s</name></expr></argument>, <argument pos:start="1437:44" pos:end="1437:64"><expr pos:start="1437:44" pos:end="1437:64"><name pos:start="1437:44" pos:end="1437:64">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1437:68" pos:end="1443:21">{<block_content pos:start="1439:25" pos:end="1441:40">

                        <expr_stmt pos:start="1439:25" pos:end="1439:49"><expr pos:start="1439:25" pos:end="1439:48"><call pos:start="1439:25" pos:end="1439:48"><name pos:start="1439:25" pos:end="1439:41">tcg_temp_free_i64</name><argument_list pos:start="1439:42" pos:end="1439:48">(<argument pos:start="1439:43" pos:end="1439:47"><expr pos:start="1439:43" pos:end="1439:47"><name pos:start="1439:43" pos:end="1439:47">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="1441:25" pos:end="1441:40">goto <name pos:start="1441:30" pos:end="1441:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="1445:21" pos:end="1445:46"><expr pos:start="1445:21" pos:end="1445:45"><call pos:start="1445:21" pos:end="1445:45"><name pos:start="1445:21" pos:end="1445:31">gen_addq_lo</name><argument_list pos:start="1445:32" pos:end="1445:45">(<argument pos:start="1445:33" pos:end="1445:33"><expr pos:start="1445:33" pos:end="1445:33"><name pos:start="1445:33" pos:end="1445:33">s</name></expr></argument>, <argument pos:start="1445:36" pos:end="1445:40"><expr pos:start="1445:36" pos:end="1445:40"><name pos:start="1445:36" pos:end="1445:40">tmp64</name></expr></argument>, <argument pos:start="1445:43" pos:end="1445:44"><expr pos:start="1445:43" pos:end="1445:44"><name pos:start="1445:43" pos:end="1445:44">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1447:21" pos:end="1447:46"><expr pos:start="1447:21" pos:end="1447:45"><call pos:start="1447:21" pos:end="1447:45"><name pos:start="1447:21" pos:end="1447:31">gen_addq_lo</name><argument_list pos:start="1447:32" pos:end="1447:45">(<argument pos:start="1447:33" pos:end="1447:33"><expr pos:start="1447:33" pos:end="1447:33"><name pos:start="1447:33" pos:end="1447:33">s</name></expr></argument>, <argument pos:start="1447:36" pos:end="1447:40"><expr pos:start="1447:36" pos:end="1447:40"><name pos:start="1447:36" pos:end="1447:40">tmp64</name></expr></argument>, <argument pos:start="1447:43" pos:end="1447:44"><expr pos:start="1447:43" pos:end="1447:44"><name pos:start="1447:43" pos:end="1447:44">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="1449:19" pos:end="1455:17">else if <condition pos:start="1449:27" pos:end="1449:37">(<expr pos:start="1449:28" pos:end="1449:36"><name pos:start="1449:28" pos:end="1449:29">op</name> <operator pos:start="1449:31" pos:end="1449:31">&amp;</operator> <literal type="number" pos:start="1449:33" pos:end="1449:36">0x40</literal></expr>)</condition> <block pos:start="1449:39" pos:end="1455:17">{<block_content pos:start="1453:21" pos:end="1453:47">

                    <comment type="block" pos:start="1451:21" pos:end="1451:45">/* 64-bit accumulate.  */</comment>

                    <expr_stmt pos:start="1453:21" pos:end="1453:47"><expr pos:start="1453:21" pos:end="1453:46"><call pos:start="1453:21" pos:end="1453:46"><name pos:start="1453:21" pos:end="1453:28">gen_addq</name><argument_list pos:start="1453:29" pos:end="1453:46">(<argument pos:start="1453:30" pos:end="1453:30"><expr pos:start="1453:30" pos:end="1453:30"><name pos:start="1453:30" pos:end="1453:30">s</name></expr></argument>, <argument pos:start="1453:33" pos:end="1453:37"><expr pos:start="1453:33" pos:end="1453:37"><name pos:start="1453:33" pos:end="1453:37">tmp64</name></expr></argument>, <argument pos:start="1453:40" pos:end="1453:41"><expr pos:start="1453:40" pos:end="1453:41"><name pos:start="1453:40" pos:end="1453:41">rs</name></expr></argument>, <argument pos:start="1453:44" pos:end="1453:45"><expr pos:start="1453:44" pos:end="1453:45"><name pos:start="1453:44" pos:end="1453:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1457:17" pos:end="1457:49"><expr pos:start="1457:17" pos:end="1457:48"><call pos:start="1457:17" pos:end="1457:48"><name pos:start="1457:17" pos:end="1457:30">gen_storeq_reg</name><argument_list pos:start="1457:31" pos:end="1457:48">(<argument pos:start="1457:32" pos:end="1457:32"><expr pos:start="1457:32" pos:end="1457:32"><name pos:start="1457:32" pos:end="1457:32">s</name></expr></argument>, <argument pos:start="1457:35" pos:end="1457:36"><expr pos:start="1457:35" pos:end="1457:36"><name pos:start="1457:35" pos:end="1457:36">rs</name></expr></argument>, <argument pos:start="1457:39" pos:end="1457:40"><expr pos:start="1457:39" pos:end="1457:40"><name pos:start="1457:39" pos:end="1457:40">rd</name></expr></argument>, <argument pos:start="1457:43" pos:end="1457:47"><expr pos:start="1457:43" pos:end="1457:47"><name pos:start="1457:43" pos:end="1457:47">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1459:17" pos:end="1459:41"><expr pos:start="1459:17" pos:end="1459:40"><call pos:start="1459:17" pos:end="1459:40"><name pos:start="1459:17" pos:end="1459:33">tcg_temp_free_i64</name><argument_list pos:start="1459:34" pos:end="1459:40">(<argument pos:start="1459:35" pos:end="1459:39"><expr pos:start="1459:35" pos:end="1459:39"><name pos:start="1459:35" pos:end="1459:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1463:13" pos:end="1463:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="1467:9" pos:end="1467:14">break;</break>

    <case pos:start="1469:5" pos:end="1469:11">case <expr pos:start="1469:10" pos:end="1469:10"><literal type="number" pos:start="1469:10" pos:end="1469:10">6</literal></expr>:</case> <case pos:start="1469:13" pos:end="1469:19">case <expr pos:start="1469:18" pos:end="1469:18"><literal type="number" pos:start="1469:18" pos:end="1469:18">7</literal></expr>:</case> <case pos:start="1469:21" pos:end="1469:28">case <expr pos:start="1469:26" pos:end="1469:27"><literal type="number" pos:start="1469:26" pos:end="1469:27">14</literal></expr>:</case> <case pos:start="1469:30" pos:end="1469:37">case <expr pos:start="1469:35" pos:end="1469:36"><literal type="number" pos:start="1469:35" pos:end="1469:36">15</literal></expr>:</case>

        <comment type="block" pos:start="1471:9" pos:end="1471:27">/* Coprocessor.  */</comment>

        <if_stmt pos:start="1473:9" pos:end="1505:9"><if pos:start="1473:9" pos:end="1485:9">if <condition pos:start="1473:12" pos:end="1473:36">(<expr pos:start="1473:13" pos:end="1473:35"><operator pos:start="1473:13" pos:end="1473:13">(</operator><operator pos:start="1473:14" pos:end="1473:14">(</operator><name pos:start="1473:15" pos:end="1473:18">insn</name> <operator pos:start="1473:20" pos:end="1473:21">&gt;&gt;</operator> <literal type="number" pos:start="1473:23" pos:end="1473:24">24</literal><operator pos:start="1473:25" pos:end="1473:25">)</operator> <operator pos:start="1473:27" pos:end="1473:27">&amp;</operator> <literal type="number" pos:start="1473:29" pos:end="1473:29">3</literal><operator pos:start="1473:30" pos:end="1473:30">)</operator> <operator pos:start="1473:32" pos:end="1473:33">==</operator> <literal type="number" pos:start="1473:35" pos:end="1473:35">3</literal></expr>)</condition> <block pos:start="1473:38" pos:end="1485:9">{<block_content pos:start="1477:13" pos:end="1483:13">

            <comment type="block" pos:start="1475:13" pos:end="1475:62">/* Translate into the equivalent ARM encoding.  */</comment>

            <expr_stmt pos:start="1477:13" pos:end="1477:79"><expr pos:start="1477:13" pos:end="1477:78"><name pos:start="1477:13" pos:end="1477:16">insn</name> <operator pos:start="1477:18" pos:end="1477:18">=</operator> <operator pos:start="1477:20" pos:end="1477:20">(</operator><name pos:start="1477:21" pos:end="1477:24">insn</name> <operator pos:start="1477:26" pos:end="1477:26">&amp;</operator> <literal type="number" pos:start="1477:28" pos:end="1477:37">0xe2ffffff</literal><operator pos:start="1477:38" pos:end="1477:38">)</operator> <operator pos:start="1477:40" pos:end="1477:40">|</operator> <operator pos:start="1477:42" pos:end="1477:42">(</operator><operator pos:start="1477:43" pos:end="1477:43">(</operator><name pos:start="1477:44" pos:end="1477:47">insn</name> <operator pos:start="1477:49" pos:end="1477:49">&amp;</operator> <operator pos:start="1477:51" pos:end="1477:51">(</operator><literal type="number" pos:start="1477:52" pos:end="1477:52">1</literal> <operator pos:start="1477:54" pos:end="1477:55">&lt;&lt;</operator> <literal type="number" pos:start="1477:57" pos:end="1477:58">28</literal><operator pos:start="1477:59" pos:end="1477:59">)</operator><operator pos:start="1477:60" pos:end="1477:60">)</operator> <operator pos:start="1477:62" pos:end="1477:63">&gt;&gt;</operator> <literal type="number" pos:start="1477:65" pos:end="1477:65">4</literal><operator pos:start="1477:66" pos:end="1477:66">)</operator> <operator pos:start="1477:68" pos:end="1477:68">|</operator> <operator pos:start="1477:70" pos:end="1477:70">(</operator><literal type="number" pos:start="1477:71" pos:end="1477:71">1</literal> <operator pos:start="1477:73" pos:end="1477:74">&lt;&lt;</operator> <literal type="number" pos:start="1477:76" pos:end="1477:77">28</literal><operator pos:start="1477:78" pos:end="1477:78">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="1479:13" pos:end="1483:13"><if pos:start="1479:13" pos:end="1483:13">if <condition pos:start="1479:16" pos:end="1479:46">(<expr pos:start="1479:17" pos:end="1479:45"><call pos:start="1479:17" pos:end="1479:45"><name pos:start="1479:17" pos:end="1479:36">disas_neon_data_insn</name><argument_list pos:start="1479:37" pos:end="1479:45">(<argument pos:start="1479:38" pos:end="1479:38"><expr pos:start="1479:38" pos:end="1479:38"><name pos:start="1479:38" pos:end="1479:38">s</name></expr></argument>, <argument pos:start="1479:41" pos:end="1479:44"><expr pos:start="1479:41" pos:end="1479:44"><name pos:start="1479:41" pos:end="1479:44">insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1479:48" pos:end="1483:13">{<block_content pos:start="1481:17" pos:end="1481:32">

                <goto pos:start="1481:17" pos:end="1481:32">goto <name pos:start="1481:22" pos:end="1481:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1485:11" pos:end="1493:9">else if <condition pos:start="1485:19" pos:end="1485:45">(<expr pos:start="1485:20" pos:end="1485:44"><operator pos:start="1485:20" pos:end="1485:20">(</operator><operator pos:start="1485:21" pos:end="1485:21">(</operator><name pos:start="1485:22" pos:end="1485:25">insn</name> <operator pos:start="1485:27" pos:end="1485:28">&gt;&gt;</operator> <literal type="number" pos:start="1485:30" pos:end="1485:30">8</literal><operator pos:start="1485:31" pos:end="1485:31">)</operator> <operator pos:start="1485:33" pos:end="1485:33">&amp;</operator> <literal type="number" pos:start="1485:35" pos:end="1485:37">0xe</literal><operator pos:start="1485:38" pos:end="1485:38">)</operator> <operator pos:start="1485:40" pos:end="1485:41">==</operator> <literal type="number" pos:start="1485:43" pos:end="1485:44">10</literal></expr>)</condition> <block pos:start="1485:47" pos:end="1493:9">{<block_content pos:start="1487:13" pos:end="1491:13">

            <if_stmt pos:start="1487:13" pos:end="1491:13"><if pos:start="1487:13" pos:end="1491:13">if <condition pos:start="1487:16" pos:end="1487:40">(<expr pos:start="1487:17" pos:end="1487:39"><call pos:start="1487:17" pos:end="1487:39"><name pos:start="1487:17" pos:end="1487:30">disas_vfp_insn</name><argument_list pos:start="1487:31" pos:end="1487:39">(<argument pos:start="1487:32" pos:end="1487:32"><expr pos:start="1487:32" pos:end="1487:32"><name pos:start="1487:32" pos:end="1487:32">s</name></expr></argument>, <argument pos:start="1487:35" pos:end="1487:38"><expr pos:start="1487:35" pos:end="1487:38"><name pos:start="1487:35" pos:end="1487:38">insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1487:42" pos:end="1491:13">{<block_content pos:start="1489:17" pos:end="1489:32">

                <goto pos:start="1489:17" pos:end="1489:32">goto <name pos:start="1489:22" pos:end="1489:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="1493:11" pos:end="1505:9">else <block pos:start="1493:16" pos:end="1505:9">{<block_content pos:start="1495:13" pos:end="1503:13">

            <if_stmt pos:start="1495:13" pos:end="1497:32"><if pos:start="1495:13" pos:end="1497:32">if <condition pos:start="1495:16" pos:end="1495:33">(<expr pos:start="1495:17" pos:end="1495:32"><name pos:start="1495:17" pos:end="1495:20">insn</name> <operator pos:start="1495:22" pos:end="1495:22">&amp;</operator> <operator pos:start="1495:24" pos:end="1495:24">(</operator><literal type="number" pos:start="1495:25" pos:end="1495:25">1</literal> <operator pos:start="1495:27" pos:end="1495:28">&lt;&lt;</operator> <literal type="number" pos:start="1495:30" pos:end="1495:31">28</literal><operator pos:start="1495:32" pos:end="1495:32">)</operator></expr>)</condition><block type="pseudo" pos:start="1497:17" pos:end="1497:32"><block_content pos:start="1497:17" pos:end="1497:32">

                <goto pos:start="1497:17" pos:end="1497:32">goto <name pos:start="1497:22" pos:end="1497:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="1499:13" pos:end="1503:13"><if pos:start="1499:13" pos:end="1503:13">if <condition pos:start="1499:16" pos:end="1499:43">(<expr pos:start="1499:17" pos:end="1499:42"><call pos:start="1499:17" pos:end="1499:42"><name pos:start="1499:17" pos:end="1499:33">disas_coproc_insn</name><argument_list pos:start="1499:34" pos:end="1499:42">(<argument pos:start="1499:35" pos:end="1499:35"><expr pos:start="1499:35" pos:end="1499:35"><name pos:start="1499:35" pos:end="1499:35">s</name></expr></argument>, <argument pos:start="1499:38" pos:end="1499:41"><expr pos:start="1499:38" pos:end="1499:41"><name pos:start="1499:38" pos:end="1499:41">insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1499:45" pos:end="1503:13">{<block_content pos:start="1501:17" pos:end="1501:32">

                <goto pos:start="1501:17" pos:end="1501:32">goto <name pos:start="1501:22" pos:end="1501:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1507:9" pos:end="1507:14">break;</break>

    <case pos:start="1509:5" pos:end="1509:11">case <expr pos:start="1509:10" pos:end="1509:10"><literal type="number" pos:start="1509:10" pos:end="1509:10">8</literal></expr>:</case> <case pos:start="1509:13" pos:end="1509:19">case <expr pos:start="1509:18" pos:end="1509:18"><literal type="number" pos:start="1509:18" pos:end="1509:18">9</literal></expr>:</case> <case pos:start="1509:21" pos:end="1509:28">case <expr pos:start="1509:26" pos:end="1509:27"><literal type="number" pos:start="1509:26" pos:end="1509:27">10</literal></expr>:</case> <case pos:start="1509:30" pos:end="1509:37">case <expr pos:start="1509:35" pos:end="1509:36"><literal type="number" pos:start="1509:35" pos:end="1509:36">11</literal></expr>:</case>

        <if_stmt pos:start="1511:9" pos:end="2195:9"><if pos:start="1511:9" pos:end="1867:9">if <condition pos:start="1511:12" pos:end="1511:29">(<expr pos:start="1511:13" pos:end="1511:28"><name pos:start="1511:13" pos:end="1511:16">insn</name> <operator pos:start="1511:18" pos:end="1511:18">&amp;</operator> <operator pos:start="1511:20" pos:end="1511:20">(</operator><literal type="number" pos:start="1511:21" pos:end="1511:21">1</literal> <operator pos:start="1511:23" pos:end="1511:24">&lt;&lt;</operator> <literal type="number" pos:start="1511:26" pos:end="1511:27">15</literal><operator pos:start="1511:28" pos:end="1511:28">)</operator></expr>)</condition> <block pos:start="1511:31" pos:end="1867:9">{<block_content pos:start="1515:13" pos:end="1865:13">

            <comment type="block" pos:start="1513:13" pos:end="1513:42">/* Branches, misc control.  */</comment>

            <if_stmt pos:start="1515:13" pos:end="1865:13"><if pos:start="1515:13" pos:end="1569:13">if <condition pos:start="1515:16" pos:end="1515:30">(<expr pos:start="1515:17" pos:end="1515:29"><name pos:start="1515:17" pos:end="1515:20">insn</name> <operator pos:start="1515:22" pos:end="1515:22">&amp;</operator> <literal type="number" pos:start="1515:24" pos:end="1515:29">0x5000</literal></expr>)</condition> <block pos:start="1515:32" pos:end="1569:13">{<block_content pos:start="1521:17" pos:end="1567:17">

                <comment type="block" pos:start="1517:17" pos:end="1517:44">/* Unconditional branch.  */</comment>

                <comment type="block" pos:start="1519:17" pos:end="1519:60">/* signextend(hw1[10:0]) -&gt; offset[:12].  */</comment>

                <expr_stmt pos:start="1521:17" pos:end="1521:69"><expr pos:start="1521:17" pos:end="1521:68"><name pos:start="1521:17" pos:end="1521:22">offset</name> <operator pos:start="1521:24" pos:end="1521:24">=</operator> <operator pos:start="1521:26" pos:end="1521:26">(</operator><operator pos:start="1521:27" pos:end="1521:27">(</operator><name pos:start="1521:28" pos:end="1521:34">int32_t</name><operator pos:start="1521:35" pos:end="1521:35">)</operator><name pos:start="1521:36" pos:end="1521:39">insn</name> <operator pos:start="1521:41" pos:end="1521:42">&lt;&lt;</operator> <literal type="number" pos:start="1521:44" pos:end="1521:44">5</literal><operator pos:start="1521:45" pos:end="1521:45">)</operator> <operator pos:start="1521:47" pos:end="1521:48">&gt;&gt;</operator> <literal type="number" pos:start="1521:50" pos:end="1521:50">9</literal> <operator pos:start="1521:52" pos:end="1521:52">&amp;</operator> <operator pos:start="1521:54" pos:end="1521:54">~</operator><operator pos:start="1521:55" pos:end="1521:55">(</operator><name pos:start="1521:56" pos:end="1521:62">int32_t</name><operator pos:start="1521:63" pos:end="1521:63">)</operator><literal type="number" pos:start="1521:64" pos:end="1521:68">0xfff</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1523:17" pos:end="1523:49">/* hw1[10:0] -&gt; offset[11:1].  */</comment>

                <expr_stmt pos:start="1525:17" pos:end="1525:46"><expr pos:start="1525:17" pos:end="1525:45"><name pos:start="1525:17" pos:end="1525:22">offset</name> <operator pos:start="1525:24" pos:end="1525:25">|=</operator> <operator pos:start="1525:27" pos:end="1525:27">(</operator><name pos:start="1525:28" pos:end="1525:31">insn</name> <operator pos:start="1525:33" pos:end="1525:33">&amp;</operator> <literal type="number" pos:start="1525:35" pos:end="1525:39">0x7ff</literal><operator pos:start="1525:40" pos:end="1525:40">)</operator> <operator pos:start="1525:42" pos:end="1525:43">&lt;&lt;</operator> <literal type="number" pos:start="1525:45" pos:end="1525:45">1</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1527:17" pos:end="1531:44">/* (~hw2[13, 11] ^ offset[24]) -&gt; offset[23,22]

                   offset[24:22] already have the same value because of the

                   sign extension above.  */</comment>

                <expr_stmt pos:start="1533:17" pos:end="1533:54"><expr pos:start="1533:17" pos:end="1533:53"><name pos:start="1533:17" pos:end="1533:22">offset</name> <operator pos:start="1533:24" pos:end="1533:25">^=</operator> <operator pos:start="1533:27" pos:end="1533:27">(</operator><operator pos:start="1533:28" pos:end="1533:28">(</operator><operator pos:start="1533:29" pos:end="1533:29">~</operator><name pos:start="1533:30" pos:end="1533:33">insn</name><operator pos:start="1533:34" pos:end="1533:34">)</operator> <operator pos:start="1533:36" pos:end="1533:36">&amp;</operator> <operator pos:start="1533:38" pos:end="1533:38">(</operator><literal type="number" pos:start="1533:39" pos:end="1533:39">1</literal> <operator pos:start="1533:41" pos:end="1533:42">&lt;&lt;</operator> <literal type="number" pos:start="1533:44" pos:end="1533:45">13</literal><operator pos:start="1533:46" pos:end="1533:46">)</operator><operator pos:start="1533:47" pos:end="1533:47">)</operator> <operator pos:start="1533:49" pos:end="1533:50">&lt;&lt;</operator> <literal type="number" pos:start="1533:52" pos:end="1533:53">10</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1535:17" pos:end="1535:54"><expr pos:start="1535:17" pos:end="1535:53"><name pos:start="1535:17" pos:end="1535:22">offset</name> <operator pos:start="1535:24" pos:end="1535:25">^=</operator> <operator pos:start="1535:27" pos:end="1535:27">(</operator><operator pos:start="1535:28" pos:end="1535:28">(</operator><operator pos:start="1535:29" pos:end="1535:29">~</operator><name pos:start="1535:30" pos:end="1535:33">insn</name><operator pos:start="1535:34" pos:end="1535:34">)</operator> <operator pos:start="1535:36" pos:end="1535:36">&amp;</operator> <operator pos:start="1535:38" pos:end="1535:38">(</operator><literal type="number" pos:start="1535:39" pos:end="1535:39">1</literal> <operator pos:start="1535:41" pos:end="1535:42">&lt;&lt;</operator> <literal type="number" pos:start="1535:44" pos:end="1535:45">11</literal><operator pos:start="1535:46" pos:end="1535:46">)</operator><operator pos:start="1535:47" pos:end="1535:47">)</operator> <operator pos:start="1535:49" pos:end="1535:50">&lt;&lt;</operator> <literal type="number" pos:start="1535:52" pos:end="1535:53">11</literal></expr>;</expr_stmt>



                <if_stmt pos:start="1539:17" pos:end="1545:17"><if pos:start="1539:17" pos:end="1545:17">if <condition pos:start="1539:20" pos:end="1539:37">(<expr pos:start="1539:21" pos:end="1539:36"><name pos:start="1539:21" pos:end="1539:24">insn</name> <operator pos:start="1539:26" pos:end="1539:26">&amp;</operator> <operator pos:start="1539:28" pos:end="1539:28">(</operator><literal type="number" pos:start="1539:29" pos:end="1539:29">1</literal> <operator pos:start="1539:31" pos:end="1539:32">&lt;&lt;</operator> <literal type="number" pos:start="1539:34" pos:end="1539:35">14</literal><operator pos:start="1539:36" pos:end="1539:36">)</operator></expr>)</condition> <block pos:start="1539:39" pos:end="1545:17">{<block_content pos:start="1543:21" pos:end="1543:59">

                    <comment type="block" pos:start="1541:21" pos:end="1541:43">/* Branch and link.  */</comment>

                    <expr_stmt pos:start="1543:21" pos:end="1543:59"><expr pos:start="1543:21" pos:end="1543:58"><call pos:start="1543:21" pos:end="1543:58"><name pos:start="1543:21" pos:end="1543:36">tcg_gen_movi_i32</name><argument_list pos:start="1543:37" pos:end="1543:58">(<argument pos:start="1543:38" pos:end="1543:46"><expr pos:start="1543:38" pos:end="1543:46"><name pos:start="1543:38" pos:end="1543:46"><name pos:start="1543:38" pos:end="1543:42">cpu_R</name><index pos:start="1543:43" pos:end="1543:46">[<expr pos:start="1543:44" pos:end="1543:45"><literal type="number" pos:start="1543:44" pos:end="1543:45">14</literal></expr>]</index></name></expr></argument>, <argument pos:start="1543:49" pos:end="1543:57"><expr pos:start="1543:49" pos:end="1543:57"><name pos:start="1543:49" pos:end="1543:53"><name pos:start="1543:49" pos:end="1543:49">s</name><operator pos:start="1543:50" pos:end="1543:51">-&gt;</operator><name pos:start="1543:52" pos:end="1543:53">pc</name></name> <operator pos:start="1543:55" pos:end="1543:55">|</operator> <literal type="number" pos:start="1543:57" pos:end="1543:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="1549:17" pos:end="1549:32"><expr pos:start="1549:17" pos:end="1549:31"><name pos:start="1549:17" pos:end="1549:22">offset</name> <operator pos:start="1549:24" pos:end="1549:25">+=</operator> <name pos:start="1549:27" pos:end="1549:31"><name pos:start="1549:27" pos:end="1549:27">s</name><operator pos:start="1549:28" pos:end="1549:29">-&gt;</operator><name pos:start="1549:30" pos:end="1549:31">pc</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="1551:17" pos:end="1567:17"><if pos:start="1551:17" pos:end="1557:17">if <condition pos:start="1551:20" pos:end="1551:37">(<expr pos:start="1551:21" pos:end="1551:36"><name pos:start="1551:21" pos:end="1551:24">insn</name> <operator pos:start="1551:26" pos:end="1551:26">&amp;</operator> <operator pos:start="1551:28" pos:end="1551:28">(</operator><literal type="number" pos:start="1551:29" pos:end="1551:29">1</literal> <operator pos:start="1551:31" pos:end="1551:32">&lt;&lt;</operator> <literal type="number" pos:start="1551:34" pos:end="1551:35">12</literal><operator pos:start="1551:36" pos:end="1551:36">)</operator></expr>)</condition> <block pos:start="1551:39" pos:end="1557:17">{<block_content pos:start="1555:21" pos:end="1555:39">

                    <comment type="block" pos:start="1553:21" pos:end="1553:30">/* b/bl */</comment>

                    <expr_stmt pos:start="1555:21" pos:end="1555:39"><expr pos:start="1555:21" pos:end="1555:38"><call pos:start="1555:21" pos:end="1555:38"><name pos:start="1555:21" pos:end="1555:27">gen_jmp</name><argument_list pos:start="1555:28" pos:end="1555:38">(<argument pos:start="1555:29" pos:end="1555:29"><expr pos:start="1555:29" pos:end="1555:29"><name pos:start="1555:29" pos:end="1555:29">s</name></expr></argument>, <argument pos:start="1555:32" pos:end="1555:37"><expr pos:start="1555:32" pos:end="1555:37"><name pos:start="1555:32" pos:end="1555:37">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1557:19" pos:end="1567:17">else <block pos:start="1557:24" pos:end="1567:17">{<block_content pos:start="1561:21" pos:end="1565:41">

                    <comment type="block" pos:start="1559:21" pos:end="1559:29">/* blx */</comment>

                    <expr_stmt pos:start="1561:21" pos:end="1561:43"><expr pos:start="1561:21" pos:end="1561:42"><name pos:start="1561:21" pos:end="1561:26">offset</name> <operator pos:start="1561:28" pos:end="1561:29">&amp;=</operator> <operator pos:start="1561:31" pos:end="1561:31">~</operator><operator pos:start="1561:32" pos:end="1561:32">(</operator><name pos:start="1561:33" pos:end="1561:40">uint32_t</name><operator pos:start="1561:41" pos:end="1561:41">)</operator><literal type="number" pos:start="1561:42" pos:end="1561:42">2</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="1563:21" pos:end="1563:53">/* thumb2 bx, no need to check */</comment>

                    <expr_stmt pos:start="1565:21" pos:end="1565:41"><expr pos:start="1565:21" pos:end="1565:40"><call pos:start="1565:21" pos:end="1565:40"><name pos:start="1565:21" pos:end="1565:29">gen_bx_im</name><argument_list pos:start="1565:30" pos:end="1565:40">(<argument pos:start="1565:31" pos:end="1565:31"><expr pos:start="1565:31" pos:end="1565:31"><name pos:start="1565:31" pos:end="1565:31">s</name></expr></argument>, <argument pos:start="1565:34" pos:end="1565:39"><expr pos:start="1565:34" pos:end="1565:39"><name pos:start="1565:34" pos:end="1565:39">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1569:15" pos:end="1823:13">else if <condition pos:start="1569:23" pos:end="1569:47">(<expr pos:start="1569:24" pos:end="1569:46"><operator pos:start="1569:24" pos:end="1569:24">(</operator><operator pos:start="1569:25" pos:end="1569:25">(</operator><name pos:start="1569:26" pos:end="1569:29">insn</name> <operator pos:start="1569:31" pos:end="1569:32">&gt;&gt;</operator> <literal type="number" pos:start="1569:34" pos:end="1569:35">23</literal><operator pos:start="1569:36" pos:end="1569:36">)</operator> <operator pos:start="1569:38" pos:end="1569:38">&amp;</operator> <literal type="number" pos:start="1569:40" pos:end="1569:40">7</literal><operator pos:start="1569:41" pos:end="1569:41">)</operator> <operator pos:start="1569:43" pos:end="1569:44">==</operator> <literal type="number" pos:start="1569:46" pos:end="1569:46">7</literal></expr>)</condition> <block pos:start="1569:49" pos:end="1823:13">{<block_content pos:start="1573:17" pos:end="1821:17">

                <comment type="block" pos:start="1571:17" pos:end="1571:34">/* Misc control */</comment>

                <if_stmt pos:start="1573:17" pos:end="1575:36"><if pos:start="1573:17" pos:end="1575:36">if <condition pos:start="1573:20" pos:end="1573:37">(<expr pos:start="1573:21" pos:end="1573:36"><name pos:start="1573:21" pos:end="1573:24">insn</name> <operator pos:start="1573:26" pos:end="1573:26">&amp;</operator> <operator pos:start="1573:28" pos:end="1573:28">(</operator><literal type="number" pos:start="1573:29" pos:end="1573:29">1</literal> <operator pos:start="1573:31" pos:end="1573:32">&lt;&lt;</operator> <literal type="number" pos:start="1573:34" pos:end="1573:35">13</literal><operator pos:start="1573:36" pos:end="1573:36">)</operator></expr>)</condition><block type="pseudo" pos:start="1575:21" pos:end="1575:36"><block_content pos:start="1575:21" pos:end="1575:36">

                    <goto pos:start="1575:21" pos:end="1575:36">goto <name pos:start="1575:26" pos:end="1575:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>



                <if_stmt pos:start="1579:17" pos:end="1821:17"><if pos:start="1579:17" pos:end="1615:17">if <condition pos:start="1579:20" pos:end="1579:37">(<expr pos:start="1579:21" pos:end="1579:36"><name pos:start="1579:21" pos:end="1579:24">insn</name> <operator pos:start="1579:26" pos:end="1579:26">&amp;</operator> <operator pos:start="1579:28" pos:end="1579:28">(</operator><literal type="number" pos:start="1579:29" pos:end="1579:29">1</literal> <operator pos:start="1579:31" pos:end="1579:32">&lt;&lt;</operator> <literal type="number" pos:start="1579:34" pos:end="1579:35">26</literal><operator pos:start="1579:36" pos:end="1579:36">)</operator></expr>)</condition> <block pos:start="1579:39" pos:end="1615:17">{<block_content pos:start="1581:21" pos:end="1613:21">

                    <if_stmt pos:start="1581:21" pos:end="1613:21"><if pos:start="1581:21" pos:end="1599:21">if <condition pos:start="1581:24" pos:end="1581:44">(<expr pos:start="1581:25" pos:end="1581:43"><operator pos:start="1581:25" pos:end="1581:25">!</operator><operator pos:start="1581:26" pos:end="1581:26">(</operator><name pos:start="1581:27" pos:end="1581:30">insn</name> <operator pos:start="1581:32" pos:end="1581:32">&amp;</operator> <operator pos:start="1581:34" pos:end="1581:34">(</operator><literal type="number" pos:start="1581:35" pos:end="1581:35">1</literal> <operator pos:start="1581:37" pos:end="1581:38">&lt;&lt;</operator> <literal type="number" pos:start="1581:40" pos:end="1581:41">20</literal><operator pos:start="1581:42" pos:end="1581:42">)</operator><operator pos:start="1581:43" pos:end="1581:43">)</operator></expr>)</condition> <block pos:start="1581:46" pos:end="1599:21">{<block_content pos:start="1585:25" pos:end="1597:42">

                        <comment type="block" pos:start="1583:25" pos:end="1583:50">/* Hypervisor call (v7) */</comment>

                        <decl_stmt pos:start="1585:25" pos:end="1587:53"><decl pos:start="1585:25" pos:end="1587:52"><type pos:start="1585:25" pos:end="1585:27"><name pos:start="1585:25" pos:end="1585:27">int</name></type> <name pos:start="1585:29" pos:end="1585:33">imm16</name> <init pos:start="1585:35" pos:end="1587:52">= <expr pos:start="1585:37" pos:end="1587:52"><call pos:start="1585:37" pos:end="1585:58"><name pos:start="1585:37" pos:end="1585:45">extract32</name><argument_list pos:start="1585:46" pos:end="1585:58">(<argument pos:start="1585:47" pos:end="1585:50"><expr pos:start="1585:47" pos:end="1585:50"><name pos:start="1585:47" pos:end="1585:50">insn</name></expr></argument>, <argument pos:start="1585:53" pos:end="1585:54"><expr pos:start="1585:53" pos:end="1585:54"><literal type="number" pos:start="1585:53" pos:end="1585:54">16</literal></expr></argument>, <argument pos:start="1585:57" pos:end="1585:57"><expr pos:start="1585:57" pos:end="1585:57"><literal type="number" pos:start="1585:57" pos:end="1585:57">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1585:60" pos:end="1585:61">&lt;&lt;</operator> <literal type="number" pos:start="1585:63" pos:end="1585:64">12</literal>

                            <operator pos:start="1587:29" pos:end="1587:29">|</operator> <call pos:start="1587:31" pos:end="1587:52"><name pos:start="1587:31" pos:end="1587:39">extract32</name><argument_list pos:start="1587:40" pos:end="1587:52">(<argument pos:start="1587:41" pos:end="1587:44"><expr pos:start="1587:41" pos:end="1587:44"><name pos:start="1587:41" pos:end="1587:44">insn</name></expr></argument>, <argument pos:start="1587:47" pos:end="1587:47"><expr pos:start="1587:47" pos:end="1587:47"><literal type="number" pos:start="1587:47" pos:end="1587:47">0</literal></expr></argument>, <argument pos:start="1587:50" pos:end="1587:51"><expr pos:start="1587:50" pos:end="1587:51"><literal type="number" pos:start="1587:50" pos:end="1587:51">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="1589:25" pos:end="1589:32"><expr pos:start="1589:25" pos:end="1589:31"><call pos:start="1589:25" pos:end="1589:31"><name pos:start="1589:25" pos:end="1589:28">ARCH</name><argument_list pos:start="1589:29" pos:end="1589:31">(<argument pos:start="1589:30" pos:end="1589:30"><expr pos:start="1589:30" pos:end="1589:30"><literal type="number" pos:start="1589:30" pos:end="1589:30">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1591:25" pos:end="1595:25"><if pos:start="1591:25" pos:end="1595:25">if <condition pos:start="1591:28" pos:end="1591:39">(<expr pos:start="1591:29" pos:end="1591:38"><call pos:start="1591:29" pos:end="1591:38"><name pos:start="1591:29" pos:end="1591:35">IS_USER</name><argument_list pos:start="1591:36" pos:end="1591:38">(<argument pos:start="1591:37" pos:end="1591:37"><expr pos:start="1591:37" pos:end="1591:37"><name pos:start="1591:37" pos:end="1591:37">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1591:41" pos:end="1595:25">{<block_content pos:start="1593:29" pos:end="1593:44">

                            <goto pos:start="1593:29" pos:end="1593:44">goto <name pos:start="1593:34" pos:end="1593:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1597:25" pos:end="1597:42"><expr pos:start="1597:25" pos:end="1597:41"><call pos:start="1597:25" pos:end="1597:41"><name pos:start="1597:25" pos:end="1597:31">gen_hvc</name><argument_list pos:start="1597:32" pos:end="1597:41">(<argument pos:start="1597:33" pos:end="1597:33"><expr pos:start="1597:33" pos:end="1597:33"><name pos:start="1597:33" pos:end="1597:33">s</name></expr></argument>, <argument pos:start="1597:36" pos:end="1597:40"><expr pos:start="1597:36" pos:end="1597:40"><name pos:start="1597:36" pos:end="1597:40">imm16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1599:23" pos:end="1613:21">else <block pos:start="1599:28" pos:end="1613:21">{<block_content pos:start="1603:25" pos:end="1611:35">

                        <comment type="block" pos:start="1601:25" pos:end="1601:55">/* Secure monitor call (v6+) */</comment>

                        <expr_stmt pos:start="1603:25" pos:end="1603:33"><expr pos:start="1603:25" pos:end="1603:32"><call pos:start="1603:25" pos:end="1603:32"><name pos:start="1603:25" pos:end="1603:28">ARCH</name><argument_list pos:start="1603:29" pos:end="1603:32">(<argument pos:start="1603:30" pos:end="1603:31"><expr pos:start="1603:30" pos:end="1603:31"><literal type="number" pos:start="1603:30" pos:end="1603:31">6K</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1605:25" pos:end="1609:25"><if pos:start="1605:25" pos:end="1609:25">if <condition pos:start="1605:28" pos:end="1605:39">(<expr pos:start="1605:29" pos:end="1605:38"><call pos:start="1605:29" pos:end="1605:38"><name pos:start="1605:29" pos:end="1605:35">IS_USER</name><argument_list pos:start="1605:36" pos:end="1605:38">(<argument pos:start="1605:37" pos:end="1605:37"><expr pos:start="1605:37" pos:end="1605:37"><name pos:start="1605:37" pos:end="1605:37">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1605:41" pos:end="1609:25">{<block_content pos:start="1607:29" pos:end="1607:44">

                            <goto pos:start="1607:29" pos:end="1607:44">goto <name pos:start="1607:34" pos:end="1607:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1611:25" pos:end="1611:35"><expr pos:start="1611:25" pos:end="1611:34"><call pos:start="1611:25" pos:end="1611:34"><name pos:start="1611:25" pos:end="1611:31">gen_smc</name><argument_list pos:start="1611:32" pos:end="1611:34">(<argument pos:start="1611:33" pos:end="1611:33"><expr pos:start="1611:33" pos:end="1611:33"><name pos:start="1611:33" pos:end="1611:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1615:19" pos:end="1821:17">else <block pos:start="1615:24" pos:end="1821:17">{<block_content pos:start="1617:21" pos:end="1819:21">

                    <expr_stmt pos:start="1617:21" pos:end="1617:42"><expr pos:start="1617:21" pos:end="1617:41"><name pos:start="1617:21" pos:end="1617:22">op</name> <operator pos:start="1617:24" pos:end="1617:24">=</operator> <operator pos:start="1617:26" pos:end="1617:26">(</operator><name pos:start="1617:27" pos:end="1617:30">insn</name> <operator pos:start="1617:32" pos:end="1617:33">&gt;&gt;</operator> <literal type="number" pos:start="1617:35" pos:end="1617:36">20</literal><operator pos:start="1617:37" pos:end="1617:37">)</operator> <operator pos:start="1617:39" pos:end="1617:39">&amp;</operator> <literal type="number" pos:start="1617:41" pos:end="1617:41">7</literal></expr>;</expr_stmt>

                    <switch pos:start="1619:21" pos:end="1819:21">switch <condition pos:start="1619:28" pos:end="1619:31">(<expr pos:start="1619:29" pos:end="1619:30"><name pos:start="1619:29" pos:end="1619:30">op</name></expr>)</condition> <block pos:start="1619:33" pos:end="1819:21">{<block_content pos:start="1621:21" pos:end="1817:30">

                    <case pos:start="1621:21" pos:end="1621:27">case <expr pos:start="1621:26" pos:end="1621:26"><literal type="number" pos:start="1621:26" pos:end="1621:26">0</literal></expr>:</case> <comment type="block" pos:start="1621:29" pos:end="1621:44">/* msr cpsr.  */</comment>

                        <if_stmt pos:start="1623:25" pos:end="1639:25"><if pos:start="1623:25" pos:end="1639:25">if <condition pos:start="1623:28" pos:end="1623:61">(<expr pos:start="1623:29" pos:end="1623:60"><call pos:start="1623:29" pos:end="1623:60"><name pos:start="1623:29" pos:end="1623:42">arm_dc_feature</name><argument_list pos:start="1623:43" pos:end="1623:60">(<argument pos:start="1623:44" pos:end="1623:44"><expr pos:start="1623:44" pos:end="1623:44"><name pos:start="1623:44" pos:end="1623:44">s</name></expr></argument>, <argument pos:start="1623:47" pos:end="1623:59"><expr pos:start="1623:47" pos:end="1623:59"><name pos:start="1623:47" pos:end="1623:59">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1623:63" pos:end="1639:25">{<block_content pos:start="1625:29" pos:end="1637:34">

                            <expr_stmt pos:start="1625:29" pos:end="1625:50"><expr pos:start="1625:29" pos:end="1625:49"><name pos:start="1625:29" pos:end="1625:31">tmp</name> <operator pos:start="1625:33" pos:end="1625:33">=</operator> <call pos:start="1625:35" pos:end="1625:49"><name pos:start="1625:35" pos:end="1625:42">load_reg</name><argument_list pos:start="1625:43" pos:end="1625:49">(<argument pos:start="1625:44" pos:end="1625:44"><expr pos:start="1625:44" pos:end="1625:44"><name pos:start="1625:44" pos:end="1625:44">s</name></expr></argument>, <argument pos:start="1625:47" pos:end="1625:48"><expr pos:start="1625:47" pos:end="1625:48"><name pos:start="1625:47" pos:end="1625:48">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1627:29" pos:end="1627:62"><expr pos:start="1627:29" pos:end="1627:61"><name pos:start="1627:29" pos:end="1627:32">addr</name> <operator pos:start="1627:34" pos:end="1627:34">=</operator> <call pos:start="1627:36" pos:end="1627:61"><name pos:start="1627:36" pos:end="1627:48">tcg_const_i32</name><argument_list pos:start="1627:49" pos:end="1627:61">(<argument pos:start="1627:50" pos:end="1627:60"><expr pos:start="1627:50" pos:end="1627:60"><name pos:start="1627:50" pos:end="1627:53">insn</name> <operator pos:start="1627:55" pos:end="1627:55">&amp;</operator> <literal type="number" pos:start="1627:57" pos:end="1627:60">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1629:29" pos:end="1629:67"><expr pos:start="1629:29" pos:end="1629:66"><call pos:start="1629:29" pos:end="1629:66"><name pos:start="1629:29" pos:end="1629:46">gen_helper_v7m_msr</name><argument_list pos:start="1629:47" pos:end="1629:66">(<argument pos:start="1629:48" pos:end="1629:54"><expr pos:start="1629:48" pos:end="1629:54"><name pos:start="1629:48" pos:end="1629:54">cpu_env</name></expr></argument>, <argument pos:start="1629:57" pos:end="1629:60"><expr pos:start="1629:57" pos:end="1629:60"><name pos:start="1629:57" pos:end="1629:60">addr</name></expr></argument>, <argument pos:start="1629:63" pos:end="1629:65"><expr pos:start="1629:63" pos:end="1629:65"><name pos:start="1629:63" pos:end="1629:65">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1631:29" pos:end="1631:52"><expr pos:start="1631:29" pos:end="1631:51"><call pos:start="1631:29" pos:end="1631:51"><name pos:start="1631:29" pos:end="1631:45">tcg_temp_free_i32</name><argument_list pos:start="1631:46" pos:end="1631:51">(<argument pos:start="1631:47" pos:end="1631:50"><expr pos:start="1631:47" pos:end="1631:50"><name pos:start="1631:47" pos:end="1631:50">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1633:29" pos:end="1633:51"><expr pos:start="1633:29" pos:end="1633:50"><call pos:start="1633:29" pos:end="1633:50"><name pos:start="1633:29" pos:end="1633:45">tcg_temp_free_i32</name><argument_list pos:start="1633:46" pos:end="1633:50">(<argument pos:start="1633:47" pos:end="1633:49"><expr pos:start="1633:47" pos:end="1633:49"><name pos:start="1633:47" pos:end="1633:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1635:29" pos:end="1635:45"><expr pos:start="1635:29" pos:end="1635:44"><call pos:start="1635:29" pos:end="1635:44"><name pos:start="1635:29" pos:end="1635:41">gen_lookup_tb</name><argument_list pos:start="1635:42" pos:end="1635:44">(<argument pos:start="1635:43" pos:end="1635:43"><expr pos:start="1635:43" pos:end="1635:43"><name pos:start="1635:43" pos:end="1635:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1637:29" pos:end="1637:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                        <comment type="block" pos:start="1641:25" pos:end="1641:42">/* fall through */</comment>

                    <case pos:start="1643:21" pos:end="1643:27">case <expr pos:start="1643:26" pos:end="1643:26"><literal type="number" pos:start="1643:26" pos:end="1643:26">1</literal></expr>:</case> <comment type="block" pos:start="1643:29" pos:end="1643:44">/* msr spsr.  */</comment>

                        <if_stmt pos:start="1645:25" pos:end="1649:25"><if pos:start="1645:25" pos:end="1649:25">if <condition pos:start="1645:28" pos:end="1645:61">(<expr pos:start="1645:29" pos:end="1645:60"><call pos:start="1645:29" pos:end="1645:60"><name pos:start="1645:29" pos:end="1645:42">arm_dc_feature</name><argument_list pos:start="1645:43" pos:end="1645:60">(<argument pos:start="1645:44" pos:end="1645:44"><expr pos:start="1645:44" pos:end="1645:44"><name pos:start="1645:44" pos:end="1645:44">s</name></expr></argument>, <argument pos:start="1645:47" pos:end="1645:59"><expr pos:start="1645:47" pos:end="1645:59"><name pos:start="1645:47" pos:end="1645:59">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1645:63" pos:end="1649:25">{<block_content pos:start="1647:29" pos:end="1647:44">

                            <goto pos:start="1647:29" pos:end="1647:44">goto <name pos:start="1647:34" pos:end="1647:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1651:25" pos:end="1651:46"><expr pos:start="1651:25" pos:end="1651:45"><name pos:start="1651:25" pos:end="1651:27">tmp</name> <operator pos:start="1651:29" pos:end="1651:29">=</operator> <call pos:start="1651:31" pos:end="1651:45"><name pos:start="1651:31" pos:end="1651:38">load_reg</name><argument_list pos:start="1651:39" pos:end="1651:45">(<argument pos:start="1651:40" pos:end="1651:40"><expr pos:start="1651:40" pos:end="1651:40"><name pos:start="1651:40" pos:end="1651:40">s</name></expr></argument>, <argument pos:start="1651:43" pos:end="1651:44"><expr pos:start="1651:43" pos:end="1651:44"><name pos:start="1651:43" pos:end="1651:44">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1653:25" pos:end="1659:44"><if pos:start="1653:25" pos:end="1659:44">if <condition pos:start="1653:28" pos:end="1657:44">(<expr pos:start="1653:29" pos:end="1657:43"><call pos:start="1653:29" pos:end="1657:43"><name pos:start="1653:29" pos:end="1653:39">gen_set_psr</name><argument_list pos:start="1653:40" pos:end="1657:43">(<argument pos:start="1653:41" pos:end="1653:41"><expr pos:start="1653:41" pos:end="1653:41"><name pos:start="1653:41" pos:end="1653:41">s</name></expr></argument>,

                              <argument pos:start="1655:31" pos:end="1655:69"><expr pos:start="1655:31" pos:end="1655:69"><call pos:start="1655:31" pos:end="1655:69"><name pos:start="1655:31" pos:end="1655:38">msr_mask</name><argument_list pos:start="1655:39" pos:end="1655:69">(<argument pos:start="1655:40" pos:end="1655:40"><expr pos:start="1655:40" pos:end="1655:40"><name pos:start="1655:40" pos:end="1655:40">s</name></expr></argument>, <argument pos:start="1655:43" pos:end="1655:59"><expr pos:start="1655:43" pos:end="1655:59"><operator pos:start="1655:43" pos:end="1655:43">(</operator><name pos:start="1655:44" pos:end="1655:47">insn</name> <operator pos:start="1655:49" pos:end="1655:50">&gt;&gt;</operator> <literal type="number" pos:start="1655:52" pos:end="1655:52">8</literal><operator pos:start="1655:53" pos:end="1655:53">)</operator> <operator pos:start="1655:55" pos:end="1655:55">&amp;</operator> <literal type="number" pos:start="1655:57" pos:end="1655:59">0xf</literal></expr></argument>, <argument pos:start="1655:62" pos:end="1655:68"><expr pos:start="1655:62" pos:end="1655:68"><name pos:start="1655:62" pos:end="1655:63">op</name> <operator pos:start="1655:65" pos:end="1655:66">==</operator> <literal type="number" pos:start="1655:68" pos:end="1655:68">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="1657:31" pos:end="1657:37"><expr pos:start="1657:31" pos:end="1657:37"><name pos:start="1657:31" pos:end="1657:32">op</name> <operator pos:start="1657:34" pos:end="1657:35">==</operator> <literal type="number" pos:start="1657:37" pos:end="1657:37">1</literal></expr></argument>, <argument pos:start="1657:40" pos:end="1657:42"><expr pos:start="1657:40" pos:end="1657:42"><name pos:start="1657:40" pos:end="1657:42">tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1659:29" pos:end="1659:44"><block_content pos:start="1659:29" pos:end="1659:44">

                            <goto pos:start="1659:29" pos:end="1659:44">goto <name pos:start="1659:34" pos:end="1659:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <break pos:start="1661:25" pos:end="1661:30">break;</break>

                    <case pos:start="1663:21" pos:end="1663:27">case <expr pos:start="1663:26" pos:end="1663:26"><literal type="number" pos:start="1663:26" pos:end="1663:26">2</literal></expr>:</case> <comment type="block" pos:start="1663:29" pos:end="1663:49">/* cps, nop-hint.  */</comment>

                        <if_stmt pos:start="1665:25" pos:end="1669:25"><if pos:start="1665:25" pos:end="1669:25">if <condition pos:start="1665:28" pos:end="1665:51">(<expr pos:start="1665:29" pos:end="1665:50"><operator pos:start="1665:29" pos:end="1665:29">(</operator><operator pos:start="1665:30" pos:end="1665:30">(</operator><name pos:start="1665:31" pos:end="1665:34">insn</name> <operator pos:start="1665:36" pos:end="1665:37">&gt;&gt;</operator> <literal type="number" pos:start="1665:39" pos:end="1665:39">8</literal><operator pos:start="1665:40" pos:end="1665:40">)</operator> <operator pos:start="1665:42" pos:end="1665:42">&amp;</operator> <literal type="number" pos:start="1665:44" pos:end="1665:44">7</literal><operator pos:start="1665:45" pos:end="1665:45">)</operator> <operator pos:start="1665:47" pos:end="1665:48">==</operator> <literal type="number" pos:start="1665:50" pos:end="1665:50">0</literal></expr>)</condition> <block pos:start="1665:53" pos:end="1669:25">{<block_content pos:start="1667:29" pos:end="1667:57">

                            <expr_stmt pos:start="1667:29" pos:end="1667:57"><expr pos:start="1667:29" pos:end="1667:56"><call pos:start="1667:29" pos:end="1667:56"><name pos:start="1667:29" pos:end="1667:40">gen_nop_hint</name><argument_list pos:start="1667:41" pos:end="1667:56">(<argument pos:start="1667:42" pos:end="1667:42"><expr pos:start="1667:42" pos:end="1667:42"><name pos:start="1667:42" pos:end="1667:42">s</name></expr></argument>, <argument pos:start="1667:45" pos:end="1667:55"><expr pos:start="1667:45" pos:end="1667:55"><name pos:start="1667:45" pos:end="1667:48">insn</name> <operator pos:start="1667:50" pos:end="1667:50">&amp;</operator> <literal type="number" pos:start="1667:52" pos:end="1667:55">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <comment type="block" pos:start="1671:25" pos:end="1671:63">/* Implemented as NOP in user mode.  */</comment>

                        <if_stmt pos:start="1673:25" pos:end="1675:34"><if pos:start="1673:25" pos:end="1675:34">if <condition pos:start="1673:28" pos:end="1673:39">(<expr pos:start="1673:29" pos:end="1673:38"><call pos:start="1673:29" pos:end="1673:38"><name pos:start="1673:29" pos:end="1673:35">IS_USER</name><argument_list pos:start="1673:36" pos:end="1673:38">(<argument pos:start="1673:37" pos:end="1673:37"><expr pos:start="1673:37" pos:end="1673:37"><name pos:start="1673:37" pos:end="1673:37">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1675:29" pos:end="1675:34"><block_content pos:start="1675:29" pos:end="1675:34">

                            <break pos:start="1675:29" pos:end="1675:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1677:25" pos:end="1677:35"><expr pos:start="1677:25" pos:end="1677:34"><name pos:start="1677:25" pos:end="1677:30">offset</name> <operator pos:start="1677:32" pos:end="1677:32">=</operator> <literal type="number" pos:start="1677:34" pos:end="1677:34">0</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="1679:25" pos:end="1679:32"><expr pos:start="1679:25" pos:end="1679:31"><name pos:start="1679:25" pos:end="1679:27">imm</name> <operator pos:start="1679:29" pos:end="1679:29">=</operator> <literal type="number" pos:start="1679:31" pos:end="1679:31">0</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="1681:25" pos:end="1699:25"><if pos:start="1681:25" pos:end="1699:25">if <condition pos:start="1681:28" pos:end="1681:45">(<expr pos:start="1681:29" pos:end="1681:44"><name pos:start="1681:29" pos:end="1681:32">insn</name> <operator pos:start="1681:34" pos:end="1681:34">&amp;</operator> <operator pos:start="1681:36" pos:end="1681:36">(</operator><literal type="number" pos:start="1681:37" pos:end="1681:37">1</literal> <operator pos:start="1681:39" pos:end="1681:40">&lt;&lt;</operator> <literal type="number" pos:start="1681:42" pos:end="1681:43">10</literal><operator pos:start="1681:44" pos:end="1681:44">)</operator></expr>)</condition> <block pos:start="1681:47" pos:end="1699:25">{<block_content pos:start="1683:29" pos:end="1697:63">

                            <if_stmt pos:start="1683:29" pos:end="1685:49"><if pos:start="1683:29" pos:end="1685:49">if <condition pos:start="1683:32" pos:end="1683:48">(<expr pos:start="1683:33" pos:end="1683:47"><name pos:start="1683:33" pos:end="1683:36">insn</name> <operator pos:start="1683:38" pos:end="1683:38">&amp;</operator> <operator pos:start="1683:40" pos:end="1683:40">(</operator><literal type="number" pos:start="1683:41" pos:end="1683:41">1</literal> <operator pos:start="1683:43" pos:end="1683:44">&lt;&lt;</operator> <literal type="number" pos:start="1683:46" pos:end="1683:46">7</literal><operator pos:start="1683:47" pos:end="1683:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1685:33" pos:end="1685:49"><block_content pos:start="1685:33" pos:end="1685:49">

                                <expr_stmt pos:start="1685:33" pos:end="1685:49"><expr pos:start="1685:33" pos:end="1685:48"><name pos:start="1685:33" pos:end="1685:38">offset</name> <operator pos:start="1685:40" pos:end="1685:41">|=</operator> <name pos:start="1685:43" pos:end="1685:48">CPSR_A</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <if_stmt pos:start="1687:29" pos:end="1689:49"><if pos:start="1687:29" pos:end="1689:49">if <condition pos:start="1687:32" pos:end="1687:48">(<expr pos:start="1687:33" pos:end="1687:47"><name pos:start="1687:33" pos:end="1687:36">insn</name> <operator pos:start="1687:38" pos:end="1687:38">&amp;</operator> <operator pos:start="1687:40" pos:end="1687:40">(</operator><literal type="number" pos:start="1687:41" pos:end="1687:41">1</literal> <operator pos:start="1687:43" pos:end="1687:44">&lt;&lt;</operator> <literal type="number" pos:start="1687:46" pos:end="1687:46">6</literal><operator pos:start="1687:47" pos:end="1687:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1689:33" pos:end="1689:49"><block_content pos:start="1689:33" pos:end="1689:49">

                                <expr_stmt pos:start="1689:33" pos:end="1689:49"><expr pos:start="1689:33" pos:end="1689:48"><name pos:start="1689:33" pos:end="1689:38">offset</name> <operator pos:start="1689:40" pos:end="1689:41">|=</operator> <name pos:start="1689:43" pos:end="1689:48">CPSR_I</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <if_stmt pos:start="1691:29" pos:end="1693:49"><if pos:start="1691:29" pos:end="1693:49">if <condition pos:start="1691:32" pos:end="1691:48">(<expr pos:start="1691:33" pos:end="1691:47"><name pos:start="1691:33" pos:end="1691:36">insn</name> <operator pos:start="1691:38" pos:end="1691:38">&amp;</operator> <operator pos:start="1691:40" pos:end="1691:40">(</operator><literal type="number" pos:start="1691:41" pos:end="1691:41">1</literal> <operator pos:start="1691:43" pos:end="1691:44">&lt;&lt;</operator> <literal type="number" pos:start="1691:46" pos:end="1691:46">5</literal><operator pos:start="1691:47" pos:end="1691:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1693:33" pos:end="1693:49"><block_content pos:start="1693:33" pos:end="1693:49">

                                <expr_stmt pos:start="1693:33" pos:end="1693:49"><expr pos:start="1693:33" pos:end="1693:48"><name pos:start="1693:33" pos:end="1693:38">offset</name> <operator pos:start="1693:40" pos:end="1693:41">|=</operator> <name pos:start="1693:43" pos:end="1693:48">CPSR_F</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <if_stmt pos:start="1695:29" pos:end="1697:63"><if pos:start="1695:29" pos:end="1697:63">if <condition pos:start="1695:32" pos:end="1695:48">(<expr pos:start="1695:33" pos:end="1695:47"><name pos:start="1695:33" pos:end="1695:36">insn</name> <operator pos:start="1695:38" pos:end="1695:38">&amp;</operator> <operator pos:start="1695:40" pos:end="1695:40">(</operator><literal type="number" pos:start="1695:41" pos:end="1695:41">1</literal> <operator pos:start="1695:43" pos:end="1695:44">&lt;&lt;</operator> <literal type="number" pos:start="1695:46" pos:end="1695:46">9</literal><operator pos:start="1695:47" pos:end="1695:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1697:33" pos:end="1697:63"><block_content pos:start="1697:33" pos:end="1697:63">

                                <expr_stmt pos:start="1697:33" pos:end="1697:63"><expr pos:start="1697:33" pos:end="1697:62"><name pos:start="1697:33" pos:end="1697:35">imm</name> <operator pos:start="1697:37" pos:end="1697:37">=</operator> <name pos:start="1697:39" pos:end="1697:44">CPSR_A</name> <operator pos:start="1697:46" pos:end="1697:46">|</operator> <name pos:start="1697:48" pos:end="1697:53">CPSR_I</name> <operator pos:start="1697:55" pos:end="1697:55">|</operator> <name pos:start="1697:57" pos:end="1697:62">CPSR_F</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="1701:25" pos:end="1707:25"><if pos:start="1701:25" pos:end="1707:25">if <condition pos:start="1701:28" pos:end="1701:44">(<expr pos:start="1701:29" pos:end="1701:43"><name pos:start="1701:29" pos:end="1701:32">insn</name> <operator pos:start="1701:34" pos:end="1701:34">&amp;</operator> <operator pos:start="1701:36" pos:end="1701:36">(</operator><literal type="number" pos:start="1701:37" pos:end="1701:37">1</literal> <operator pos:start="1701:39" pos:end="1701:40">&lt;&lt;</operator> <literal type="number" pos:start="1701:42" pos:end="1701:42">8</literal><operator pos:start="1701:43" pos:end="1701:43">)</operator></expr>)</condition> <block pos:start="1701:46" pos:end="1707:25">{<block_content pos:start="1703:29" pos:end="1705:49">

                            <expr_stmt pos:start="1703:29" pos:end="1703:43"><expr pos:start="1703:29" pos:end="1703:42"><name pos:start="1703:29" pos:end="1703:34">offset</name> <operator pos:start="1703:36" pos:end="1703:37">|=</operator> <literal type="number" pos:start="1703:39" pos:end="1703:42">0x1f</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="1705:29" pos:end="1705:49"><expr pos:start="1705:29" pos:end="1705:48"><name pos:start="1705:29" pos:end="1705:31">imm</name> <operator pos:start="1705:33" pos:end="1705:34">|=</operator> <operator pos:start="1705:36" pos:end="1705:36">(</operator><name pos:start="1705:37" pos:end="1705:40">insn</name> <operator pos:start="1705:42" pos:end="1705:42">&amp;</operator> <literal type="number" pos:start="1705:44" pos:end="1705:47">0x1f</literal><operator pos:start="1705:48" pos:end="1705:48">)</operator></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="1709:25" pos:end="1713:25"><if pos:start="1709:25" pos:end="1713:25">if <condition pos:start="1709:28" pos:end="1709:35">(<expr pos:start="1709:29" pos:end="1709:34"><name pos:start="1709:29" pos:end="1709:34">offset</name></expr>)</condition> <block pos:start="1709:37" pos:end="1713:25">{<block_content pos:start="1711:29" pos:end="1711:62">

                            <expr_stmt pos:start="1711:29" pos:end="1711:62"><expr pos:start="1711:29" pos:end="1711:61"><call pos:start="1711:29" pos:end="1711:61"><name pos:start="1711:29" pos:end="1711:42">gen_set_psr_im</name><argument_list pos:start="1711:43" pos:end="1711:61">(<argument pos:start="1711:44" pos:end="1711:44"><expr pos:start="1711:44" pos:end="1711:44"><name pos:start="1711:44" pos:end="1711:44">s</name></expr></argument>, <argument pos:start="1711:47" pos:end="1711:52"><expr pos:start="1711:47" pos:end="1711:52"><name pos:start="1711:47" pos:end="1711:52">offset</name></expr></argument>, <argument pos:start="1711:55" pos:end="1711:55"><expr pos:start="1711:55" pos:end="1711:55"><literal type="number" pos:start="1711:55" pos:end="1711:55">0</literal></expr></argument>, <argument pos:start="1711:58" pos:end="1711:60"><expr pos:start="1711:58" pos:end="1711:60"><name pos:start="1711:58" pos:end="1711:60">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1715:25" pos:end="1715:30">break;</break>

                    <case pos:start="1717:21" pos:end="1717:27">case <expr pos:start="1717:26" pos:end="1717:26"><literal type="number" pos:start="1717:26" pos:end="1717:26">3</literal></expr>:</case> <comment type="block" pos:start="1717:29" pos:end="1717:62">/* Special control operations.  */</comment>

                        <expr_stmt pos:start="1719:25" pos:end="1719:32"><expr pos:start="1719:25" pos:end="1719:31"><call pos:start="1719:25" pos:end="1719:31"><name pos:start="1719:25" pos:end="1719:28">ARCH</name><argument_list pos:start="1719:29" pos:end="1719:31">(<argument pos:start="1719:30" pos:end="1719:30"><expr pos:start="1719:30" pos:end="1719:30"><literal type="number" pos:start="1719:30" pos:end="1719:30">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1721:25" pos:end="1721:47"><expr pos:start="1721:25" pos:end="1721:46"><name pos:start="1721:25" pos:end="1721:26">op</name> <operator pos:start="1721:28" pos:end="1721:28">=</operator> <operator pos:start="1721:30" pos:end="1721:30">(</operator><name pos:start="1721:31" pos:end="1721:34">insn</name> <operator pos:start="1721:36" pos:end="1721:37">&gt;&gt;</operator> <literal type="number" pos:start="1721:39" pos:end="1721:39">4</literal><operator pos:start="1721:40" pos:end="1721:40">)</operator> <operator pos:start="1721:42" pos:end="1721:42">&amp;</operator> <literal type="number" pos:start="1721:44" pos:end="1721:46">0xf</literal></expr>;</expr_stmt>

                        <switch pos:start="1723:25" pos:end="1745:25">switch <condition pos:start="1723:32" pos:end="1723:35">(<expr pos:start="1723:33" pos:end="1723:34"><name pos:start="1723:33" pos:end="1723:34">op</name></expr>)</condition> <block pos:start="1723:37" pos:end="1745:25">{<block_content pos:start="1725:25" pos:end="1743:44">

                        <case pos:start="1725:25" pos:end="1725:31">case <expr pos:start="1725:30" pos:end="1725:30"><literal type="number" pos:start="1725:30" pos:end="1725:30">2</literal></expr>:</case> <comment type="block" pos:start="1725:33" pos:end="1725:43">/* clrex */</comment>

                            <expr_stmt pos:start="1727:29" pos:end="1727:41"><expr pos:start="1727:29" pos:end="1727:40"><call pos:start="1727:29" pos:end="1727:40"><name pos:start="1727:29" pos:end="1727:37">gen_clrex</name><argument_list pos:start="1727:38" pos:end="1727:40">(<argument pos:start="1727:39" pos:end="1727:39"><expr pos:start="1727:39" pos:end="1727:39"><name pos:start="1727:39" pos:end="1727:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1729:29" pos:end="1729:34">break;</break>

                        <case pos:start="1731:25" pos:end="1731:31">case <expr pos:start="1731:30" pos:end="1731:30"><literal type="number" pos:start="1731:30" pos:end="1731:30">4</literal></expr>:</case> <comment type="block" pos:start="1731:33" pos:end="1731:41">/* dsb */</comment>

                        <case pos:start="1733:25" pos:end="1733:31">case <expr pos:start="1733:30" pos:end="1733:30"><literal type="number" pos:start="1733:30" pos:end="1733:30">5</literal></expr>:</case> <comment type="block" pos:start="1733:33" pos:end="1733:41">/* dmb */</comment>

                        <case pos:start="1735:25" pos:end="1735:31">case <expr pos:start="1735:30" pos:end="1735:30"><literal type="number" pos:start="1735:30" pos:end="1735:30">6</literal></expr>:</case> <comment type="block" pos:start="1735:33" pos:end="1735:41">/* isb */</comment>

                            <comment type="block" pos:start="1737:29" pos:end="1737:57">/* These execute as NOPs.  */</comment>

                            <break pos:start="1739:29" pos:end="1739:34">break;</break>

                        <default pos:start="1741:25" pos:end="1741:32">default:</default>

                            <goto pos:start="1743:29" pos:end="1743:44">goto <name pos:start="1743:34" pos:end="1743:43">illegal_op</name>;</goto>

                        </block_content>}</block></switch>

                        <break pos:start="1747:25" pos:end="1747:30">break;</break>

                    <case pos:start="1749:21" pos:end="1749:27">case <expr pos:start="1749:26" pos:end="1749:26"><literal type="number" pos:start="1749:26" pos:end="1749:26">4</literal></expr>:</case> <comment type="block" pos:start="1749:29" pos:end="1749:37">/* bxj */</comment>

                        <comment type="block" pos:start="1751:25" pos:end="1751:71">/* Trivial implementation equivalent to bx.  */</comment>

                        <expr_stmt pos:start="1753:25" pos:end="1753:46"><expr pos:start="1753:25" pos:end="1753:45"><name pos:start="1753:25" pos:end="1753:27">tmp</name> <operator pos:start="1753:29" pos:end="1753:29">=</operator> <call pos:start="1753:31" pos:end="1753:45"><name pos:start="1753:31" pos:end="1753:38">load_reg</name><argument_list pos:start="1753:39" pos:end="1753:45">(<argument pos:start="1753:40" pos:end="1753:40"><expr pos:start="1753:40" pos:end="1753:40"><name pos:start="1753:40" pos:end="1753:40">s</name></expr></argument>, <argument pos:start="1753:43" pos:end="1753:44"><expr pos:start="1753:43" pos:end="1753:44"><name pos:start="1753:43" pos:end="1753:44">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1755:25" pos:end="1755:39"><expr pos:start="1755:25" pos:end="1755:38"><call pos:start="1755:25" pos:end="1755:38"><name pos:start="1755:25" pos:end="1755:30">gen_bx</name><argument_list pos:start="1755:31" pos:end="1755:38">(<argument pos:start="1755:32" pos:end="1755:32"><expr pos:start="1755:32" pos:end="1755:32"><name pos:start="1755:32" pos:end="1755:32">s</name></expr></argument>, <argument pos:start="1755:35" pos:end="1755:37"><expr pos:start="1755:35" pos:end="1755:37"><name pos:start="1755:35" pos:end="1755:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1757:25" pos:end="1757:30">break;</break>

                    <case pos:start="1759:21" pos:end="1759:27">case <expr pos:start="1759:26" pos:end="1759:26"><literal type="number" pos:start="1759:26" pos:end="1759:26">5</literal></expr>:</case> <comment type="block" pos:start="1759:29" pos:end="1759:52">/* Exception return.  */</comment>

                        <if_stmt pos:start="1761:25" pos:end="1765:25"><if pos:start="1761:25" pos:end="1765:25">if <condition pos:start="1761:28" pos:end="1761:39">(<expr pos:start="1761:29" pos:end="1761:38"><call pos:start="1761:29" pos:end="1761:38"><name pos:start="1761:29" pos:end="1761:35">IS_USER</name><argument_list pos:start="1761:36" pos:end="1761:38">(<argument pos:start="1761:37" pos:end="1761:37"><expr pos:start="1761:37" pos:end="1761:37"><name pos:start="1761:37" pos:end="1761:37">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1761:41" pos:end="1765:25">{<block_content pos:start="1763:29" pos:end="1763:44">

                            <goto pos:start="1763:29" pos:end="1763:44">goto <name pos:start="1763:34" pos:end="1763:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="1767:25" pos:end="1771:25"><if pos:start="1767:25" pos:end="1771:25">if <condition pos:start="1767:28" pos:end="1767:49">(<expr pos:start="1767:29" pos:end="1767:48"><name pos:start="1767:29" pos:end="1767:30">rn</name> <operator pos:start="1767:32" pos:end="1767:33">!=</operator> <literal type="number" pos:start="1767:35" pos:end="1767:36">14</literal> <operator pos:start="1767:38" pos:end="1767:39">||</operator> <name pos:start="1767:41" pos:end="1767:42">rd</name> <operator pos:start="1767:44" pos:end="1767:45">!=</operator> <literal type="number" pos:start="1767:47" pos:end="1767:48">15</literal></expr>)</condition> <block pos:start="1767:51" pos:end="1771:25">{<block_content pos:start="1769:29" pos:end="1769:44">

                            <goto pos:start="1769:29" pos:end="1769:44">goto <name pos:start="1769:34" pos:end="1769:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1773:25" pos:end="1773:46"><expr pos:start="1773:25" pos:end="1773:45"><name pos:start="1773:25" pos:end="1773:27">tmp</name> <operator pos:start="1773:29" pos:end="1773:29">=</operator> <call pos:start="1773:31" pos:end="1773:45"><name pos:start="1773:31" pos:end="1773:38">load_reg</name><argument_list pos:start="1773:39" pos:end="1773:45">(<argument pos:start="1773:40" pos:end="1773:40"><expr pos:start="1773:40" pos:end="1773:40"><name pos:start="1773:40" pos:end="1773:40">s</name></expr></argument>, <argument pos:start="1773:43" pos:end="1773:44"><expr pos:start="1773:43" pos:end="1773:44"><name pos:start="1773:43" pos:end="1773:44">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1775:25" pos:end="1775:64"><expr pos:start="1775:25" pos:end="1775:63"><call pos:start="1775:25" pos:end="1775:63"><name pos:start="1775:25" pos:end="1775:40">tcg_gen_subi_i32</name><argument_list pos:start="1775:41" pos:end="1775:63">(<argument pos:start="1775:42" pos:end="1775:44"><expr pos:start="1775:42" pos:end="1775:44"><name pos:start="1775:42" pos:end="1775:44">tmp</name></expr></argument>, <argument pos:start="1775:47" pos:end="1775:49"><expr pos:start="1775:47" pos:end="1775:49"><name pos:start="1775:47" pos:end="1775:49">tmp</name></expr></argument>, <argument pos:start="1775:52" pos:end="1775:62"><expr pos:start="1775:52" pos:end="1775:62"><name pos:start="1775:52" pos:end="1775:55">insn</name> <operator pos:start="1775:57" pos:end="1775:57">&amp;</operator> <literal type="number" pos:start="1775:59" pos:end="1775:62">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1777:25" pos:end="1777:53"><expr pos:start="1777:25" pos:end="1777:52"><call pos:start="1777:25" pos:end="1777:52"><name pos:start="1777:25" pos:end="1777:44">gen_exception_return</name><argument_list pos:start="1777:45" pos:end="1777:52">(<argument pos:start="1777:46" pos:end="1777:46"><expr pos:start="1777:46" pos:end="1777:46"><name pos:start="1777:46" pos:end="1777:46">s</name></expr></argument>, <argument pos:start="1777:49" pos:end="1777:51"><expr pos:start="1777:49" pos:end="1777:51"><name pos:start="1777:49" pos:end="1777:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1779:25" pos:end="1779:30">break;</break>

                    <case pos:start="1781:21" pos:end="1781:27">case <expr pos:start="1781:26" pos:end="1781:26"><literal type="number" pos:start="1781:26" pos:end="1781:26">6</literal></expr>:</case> <comment type="block" pos:start="1781:29" pos:end="1781:44">/* mrs cpsr.  */</comment>

                        <expr_stmt pos:start="1783:25" pos:end="1783:49"><expr pos:start="1783:25" pos:end="1783:48"><name pos:start="1783:25" pos:end="1783:27">tmp</name> <operator pos:start="1783:29" pos:end="1783:29">=</operator> <call pos:start="1783:31" pos:end="1783:48"><name pos:start="1783:31" pos:end="1783:46">tcg_temp_new_i32</name><argument_list pos:start="1783:47" pos:end="1783:48">()</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1785:25" pos:end="1797:25"><if pos:start="1785:25" pos:end="1793:25">if <condition pos:start="1785:28" pos:end="1785:61">(<expr pos:start="1785:29" pos:end="1785:60"><call pos:start="1785:29" pos:end="1785:60"><name pos:start="1785:29" pos:end="1785:42">arm_dc_feature</name><argument_list pos:start="1785:43" pos:end="1785:60">(<argument pos:start="1785:44" pos:end="1785:44"><expr pos:start="1785:44" pos:end="1785:44"><name pos:start="1785:44" pos:end="1785:44">s</name></expr></argument>, <argument pos:start="1785:47" pos:end="1785:59"><expr pos:start="1785:47" pos:end="1785:59"><name pos:start="1785:47" pos:end="1785:59">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1785:63" pos:end="1793:25">{<block_content pos:start="1787:29" pos:end="1791:52">

                            <expr_stmt pos:start="1787:29" pos:end="1787:62"><expr pos:start="1787:29" pos:end="1787:61"><name pos:start="1787:29" pos:end="1787:32">addr</name> <operator pos:start="1787:34" pos:end="1787:34">=</operator> <call pos:start="1787:36" pos:end="1787:61"><name pos:start="1787:36" pos:end="1787:48">tcg_const_i32</name><argument_list pos:start="1787:49" pos:end="1787:61">(<argument pos:start="1787:50" pos:end="1787:60"><expr pos:start="1787:50" pos:end="1787:60"><name pos:start="1787:50" pos:end="1787:53">insn</name> <operator pos:start="1787:55" pos:end="1787:55">&amp;</operator> <literal type="number" pos:start="1787:57" pos:end="1787:60">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1789:29" pos:end="1789:67"><expr pos:start="1789:29" pos:end="1789:66"><call pos:start="1789:29" pos:end="1789:66"><name pos:start="1789:29" pos:end="1789:46">gen_helper_v7m_mrs</name><argument_list pos:start="1789:47" pos:end="1789:66">(<argument pos:start="1789:48" pos:end="1789:50"><expr pos:start="1789:48" pos:end="1789:50"><name pos:start="1789:48" pos:end="1789:50">tmp</name></expr></argument>, <argument pos:start="1789:53" pos:end="1789:59"><expr pos:start="1789:53" pos:end="1789:59"><name pos:start="1789:53" pos:end="1789:59">cpu_env</name></expr></argument>, <argument pos:start="1789:62" pos:end="1789:65"><expr pos:start="1789:62" pos:end="1789:65"><name pos:start="1789:62" pos:end="1789:65">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1791:29" pos:end="1791:52"><expr pos:start="1791:29" pos:end="1791:51"><call pos:start="1791:29" pos:end="1791:51"><name pos:start="1791:29" pos:end="1791:45">tcg_temp_free_i32</name><argument_list pos:start="1791:46" pos:end="1791:51">(<argument pos:start="1791:47" pos:end="1791:50"><expr pos:start="1791:47" pos:end="1791:50"><name pos:start="1791:47" pos:end="1791:50">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1793:27" pos:end="1797:25">else <block pos:start="1793:32" pos:end="1797:25">{<block_content pos:start="1795:29" pos:end="1795:63">

                            <expr_stmt pos:start="1795:29" pos:end="1795:63"><expr pos:start="1795:29" pos:end="1795:62"><call pos:start="1795:29" pos:end="1795:62"><name pos:start="1795:29" pos:end="1795:48">gen_helper_cpsr_read</name><argument_list pos:start="1795:49" pos:end="1795:62">(<argument pos:start="1795:50" pos:end="1795:52"><expr pos:start="1795:50" pos:end="1795:52"><name pos:start="1795:50" pos:end="1795:52">tmp</name></expr></argument>, <argument pos:start="1795:55" pos:end="1795:61"><expr pos:start="1795:55" pos:end="1795:61"><name pos:start="1795:55" pos:end="1795:61">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="1799:25" pos:end="1799:46"><expr pos:start="1799:25" pos:end="1799:45"><call pos:start="1799:25" pos:end="1799:45"><name pos:start="1799:25" pos:end="1799:33">store_reg</name><argument_list pos:start="1799:34" pos:end="1799:45">(<argument pos:start="1799:35" pos:end="1799:35"><expr pos:start="1799:35" pos:end="1799:35"><name pos:start="1799:35" pos:end="1799:35">s</name></expr></argument>, <argument pos:start="1799:38" pos:end="1799:39"><expr pos:start="1799:38" pos:end="1799:39"><name pos:start="1799:38" pos:end="1799:39">rd</name></expr></argument>, <argument pos:start="1799:42" pos:end="1799:44"><expr pos:start="1799:42" pos:end="1799:44"><name pos:start="1799:42" pos:end="1799:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1801:25" pos:end="1801:30">break;</break>

                    <case pos:start="1803:21" pos:end="1803:27">case <expr pos:start="1803:26" pos:end="1803:26"><literal type="number" pos:start="1803:26" pos:end="1803:26">7</literal></expr>:</case> <comment type="block" pos:start="1803:29" pos:end="1803:44">/* mrs spsr.  */</comment>

                        <comment type="block" pos:start="1805:25" pos:end="1805:59">/* Not accessible in user mode.  */</comment>

                        <if_stmt pos:start="1807:25" pos:end="1811:25"><if pos:start="1807:25" pos:end="1811:25">if <condition pos:start="1807:28" pos:end="1807:75">(<expr pos:start="1807:29" pos:end="1807:74"><call pos:start="1807:29" pos:end="1807:38"><name pos:start="1807:29" pos:end="1807:35">IS_USER</name><argument_list pos:start="1807:36" pos:end="1807:38">(<argument pos:start="1807:37" pos:end="1807:37"><expr pos:start="1807:37" pos:end="1807:37"><name pos:start="1807:37" pos:end="1807:37">s</name></expr></argument>)</argument_list></call> <operator pos:start="1807:40" pos:end="1807:41">||</operator> <call pos:start="1807:43" pos:end="1807:74"><name pos:start="1807:43" pos:end="1807:56">arm_dc_feature</name><argument_list pos:start="1807:57" pos:end="1807:74">(<argument pos:start="1807:58" pos:end="1807:58"><expr pos:start="1807:58" pos:end="1807:58"><name pos:start="1807:58" pos:end="1807:58">s</name></expr></argument>, <argument pos:start="1807:61" pos:end="1807:73"><expr pos:start="1807:61" pos:end="1807:73"><name pos:start="1807:61" pos:end="1807:73">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1807:77" pos:end="1811:25">{<block_content pos:start="1809:29" pos:end="1809:44">

                            <goto pos:start="1809:29" pos:end="1809:44">goto <name pos:start="1809:34" pos:end="1809:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1813:25" pos:end="1813:51"><expr pos:start="1813:25" pos:end="1813:50"><name pos:start="1813:25" pos:end="1813:27">tmp</name> <operator pos:start="1813:29" pos:end="1813:29">=</operator> <call pos:start="1813:31" pos:end="1813:50"><name pos:start="1813:31" pos:end="1813:44">load_cpu_field</name><argument_list pos:start="1813:45" pos:end="1813:50">(<argument pos:start="1813:46" pos:end="1813:49"><expr pos:start="1813:46" pos:end="1813:49"><name pos:start="1813:46" pos:end="1813:49">spsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1815:25" pos:end="1815:46"><expr pos:start="1815:25" pos:end="1815:45"><call pos:start="1815:25" pos:end="1815:45"><name pos:start="1815:25" pos:end="1815:33">store_reg</name><argument_list pos:start="1815:34" pos:end="1815:45">(<argument pos:start="1815:35" pos:end="1815:35"><expr pos:start="1815:35" pos:end="1815:35"><name pos:start="1815:35" pos:end="1815:35">s</name></expr></argument>, <argument pos:start="1815:38" pos:end="1815:39"><expr pos:start="1815:38" pos:end="1815:39"><name pos:start="1815:38" pos:end="1815:39">rd</name></expr></argument>, <argument pos:start="1815:42" pos:end="1815:44"><expr pos:start="1815:42" pos:end="1815:44"><name pos:start="1815:42" pos:end="1815:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1817:25" pos:end="1817:30">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1823:15" pos:end="1865:13">else <block pos:start="1823:20" pos:end="1865:13">{<block_content pos:start="1827:17" pos:end="1863:43">

                <comment type="block" pos:start="1825:17" pos:end="1825:42">/* Conditional branch.  */</comment>

                <expr_stmt pos:start="1827:17" pos:end="1827:40"><expr pos:start="1827:17" pos:end="1827:39"><name pos:start="1827:17" pos:end="1827:18">op</name> <operator pos:start="1827:20" pos:end="1827:20">=</operator> <operator pos:start="1827:22" pos:end="1827:22">(</operator><name pos:start="1827:23" pos:end="1827:26">insn</name> <operator pos:start="1827:28" pos:end="1827:29">&gt;&gt;</operator> <literal type="number" pos:start="1827:31" pos:end="1827:32">22</literal><operator pos:start="1827:33" pos:end="1827:33">)</operator> <operator pos:start="1827:35" pos:end="1827:35">&amp;</operator> <literal type="number" pos:start="1827:37" pos:end="1827:39">0xf</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1829:17" pos:end="1829:71">/* Generate a conditional jump to next instruction.  */</comment>

                <expr_stmt pos:start="1831:17" pos:end="1831:47"><expr pos:start="1831:17" pos:end="1831:46"><name pos:start="1831:17" pos:end="1831:28"><name pos:start="1831:17" pos:end="1831:17">s</name><operator pos:start="1831:18" pos:end="1831:19">-&gt;</operator><name pos:start="1831:20" pos:end="1831:28">condlabel</name></name> <operator pos:start="1831:30" pos:end="1831:30">=</operator> <call pos:start="1831:32" pos:end="1831:46"><name pos:start="1831:32" pos:end="1831:44">gen_new_label</name><argument_list pos:start="1831:45" pos:end="1831:46">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1833:17" pos:end="1833:54"><expr pos:start="1833:17" pos:end="1833:53"><call pos:start="1833:17" pos:end="1833:53"><name pos:start="1833:17" pos:end="1833:31">arm_gen_test_cc</name><argument_list pos:start="1833:32" pos:end="1833:53">(<argument pos:start="1833:33" pos:end="1833:38"><expr pos:start="1833:33" pos:end="1833:38"><name pos:start="1833:33" pos:end="1833:34">op</name> <operator pos:start="1833:36" pos:end="1833:36">^</operator> <literal type="number" pos:start="1833:38" pos:end="1833:38">1</literal></expr></argument>, <argument pos:start="1833:41" pos:end="1833:52"><expr pos:start="1833:41" pos:end="1833:52"><name pos:start="1833:41" pos:end="1833:52"><name pos:start="1833:41" pos:end="1833:41">s</name><operator pos:start="1833:42" pos:end="1833:43">-&gt;</operator><name pos:start="1833:44" pos:end="1833:52">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1835:17" pos:end="1835:31"><expr pos:start="1835:17" pos:end="1835:30"><name pos:start="1835:17" pos:end="1835:26"><name pos:start="1835:17" pos:end="1835:17">s</name><operator pos:start="1835:18" pos:end="1835:19">-&gt;</operator><name pos:start="1835:20" pos:end="1835:26">condjmp</name></name> <operator pos:start="1835:28" pos:end="1835:28">=</operator> <literal type="number" pos:start="1835:30" pos:end="1835:30">1</literal></expr>;</expr_stmt>



                <comment type="block" pos:start="1839:17" pos:end="1839:47">/* offset[11:1] = insn[10:0] */</comment>

                <expr_stmt pos:start="1841:17" pos:end="1841:45"><expr pos:start="1841:17" pos:end="1841:44"><name pos:start="1841:17" pos:end="1841:22">offset</name> <operator pos:start="1841:24" pos:end="1841:24">=</operator> <operator pos:start="1841:26" pos:end="1841:26">(</operator><name pos:start="1841:27" pos:end="1841:30">insn</name> <operator pos:start="1841:32" pos:end="1841:32">&amp;</operator> <literal type="number" pos:start="1841:34" pos:end="1841:38">0x7ff</literal><operator pos:start="1841:39" pos:end="1841:39">)</operator> <operator pos:start="1841:41" pos:end="1841:42">&lt;&lt;</operator> <literal type="number" pos:start="1841:44" pos:end="1841:44">1</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1843:17" pos:end="1843:51">/* offset[17:12] = insn[21:16].  */</comment>

                <expr_stmt pos:start="1845:17" pos:end="1845:51"><expr pos:start="1845:17" pos:end="1845:50"><name pos:start="1845:17" pos:end="1845:22">offset</name> <operator pos:start="1845:24" pos:end="1845:25">|=</operator> <operator pos:start="1845:27" pos:end="1845:27">(</operator><name pos:start="1845:28" pos:end="1845:31">insn</name> <operator pos:start="1845:33" pos:end="1845:33">&amp;</operator> <literal type="number" pos:start="1845:35" pos:end="1845:44">0x003f0000</literal><operator pos:start="1845:45" pos:end="1845:45">)</operator> <operator pos:start="1845:47" pos:end="1845:48">&gt;&gt;</operator> <literal type="number" pos:start="1845:50" pos:end="1845:50">4</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1847:17" pos:end="1847:48">/* offset[31:20] = insn[26].  */</comment>

                <expr_stmt pos:start="1849:17" pos:end="1849:70"><expr pos:start="1849:17" pos:end="1849:69"><name pos:start="1849:17" pos:end="1849:22">offset</name> <operator pos:start="1849:24" pos:end="1849:25">|=</operator> <operator pos:start="1849:27" pos:end="1849:27">(</operator><operator pos:start="1849:28" pos:end="1849:28">(</operator><name pos:start="1849:29" pos:end="1849:35">int32_t</name><operator pos:start="1849:36" pos:end="1849:36">)</operator><operator pos:start="1849:37" pos:end="1849:37">(</operator><operator pos:start="1849:38" pos:end="1849:38">(</operator><name pos:start="1849:39" pos:end="1849:42">insn</name> <operator pos:start="1849:44" pos:end="1849:45">&lt;&lt;</operator> <literal type="number" pos:start="1849:47" pos:end="1849:47">5</literal><operator pos:start="1849:48" pos:end="1849:48">)</operator> <operator pos:start="1849:50" pos:end="1849:50">&amp;</operator> <literal type="number" pos:start="1849:52" pos:end="1849:61">0x80000000</literal><operator pos:start="1849:62" pos:end="1849:62">)</operator><operator pos:start="1849:63" pos:end="1849:63">)</operator> <operator pos:start="1849:65" pos:end="1849:66">&gt;&gt;</operator> <literal type="number" pos:start="1849:68" pos:end="1849:69">11</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1851:17" pos:end="1851:45">/* offset[18] = insn[13].  */</comment>

                <expr_stmt pos:start="1853:17" pos:end="1853:50"><expr pos:start="1853:17" pos:end="1853:49"><name pos:start="1853:17" pos:end="1853:22">offset</name> <operator pos:start="1853:24" pos:end="1853:25">|=</operator> <operator pos:start="1853:27" pos:end="1853:27">(</operator><name pos:start="1853:28" pos:end="1853:31">insn</name> <operator pos:start="1853:33" pos:end="1853:33">&amp;</operator> <operator pos:start="1853:35" pos:end="1853:35">(</operator><literal type="number" pos:start="1853:36" pos:end="1853:36">1</literal> <operator pos:start="1853:38" pos:end="1853:39">&lt;&lt;</operator> <literal type="number" pos:start="1853:41" pos:end="1853:42">13</literal><operator pos:start="1853:43" pos:end="1853:43">)</operator><operator pos:start="1853:44" pos:end="1853:44">)</operator> <operator pos:start="1853:46" pos:end="1853:47">&lt;&lt;</operator> <literal type="number" pos:start="1853:49" pos:end="1853:49">5</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1855:17" pos:end="1855:45">/* offset[19] = insn[11].  */</comment>

                <expr_stmt pos:start="1857:17" pos:end="1857:50"><expr pos:start="1857:17" pos:end="1857:49"><name pos:start="1857:17" pos:end="1857:22">offset</name> <operator pos:start="1857:24" pos:end="1857:25">|=</operator> <operator pos:start="1857:27" pos:end="1857:27">(</operator><name pos:start="1857:28" pos:end="1857:31">insn</name> <operator pos:start="1857:33" pos:end="1857:33">&amp;</operator> <operator pos:start="1857:35" pos:end="1857:35">(</operator><literal type="number" pos:start="1857:36" pos:end="1857:36">1</literal> <operator pos:start="1857:38" pos:end="1857:39">&lt;&lt;</operator> <literal type="number" pos:start="1857:41" pos:end="1857:42">11</literal><operator pos:start="1857:43" pos:end="1857:43">)</operator><operator pos:start="1857:44" pos:end="1857:44">)</operator> <operator pos:start="1857:46" pos:end="1857:47">&lt;&lt;</operator> <literal type="number" pos:start="1857:49" pos:end="1857:49">8</literal></expr>;</expr_stmt>



                <comment type="block" pos:start="1861:17" pos:end="1861:40">/* jump to the offset */</comment>

                <expr_stmt pos:start="1863:17" pos:end="1863:43"><expr pos:start="1863:17" pos:end="1863:42"><call pos:start="1863:17" pos:end="1863:42"><name pos:start="1863:17" pos:end="1863:23">gen_jmp</name><argument_list pos:start="1863:24" pos:end="1863:42">(<argument pos:start="1863:25" pos:end="1863:25"><expr pos:start="1863:25" pos:end="1863:25"><name pos:start="1863:25" pos:end="1863:25">s</name></expr></argument>, <argument pos:start="1863:28" pos:end="1863:41"><expr pos:start="1863:28" pos:end="1863:41"><name pos:start="1863:28" pos:end="1863:32"><name pos:start="1863:28" pos:end="1863:28">s</name><operator pos:start="1863:29" pos:end="1863:30">-&gt;</operator><name pos:start="1863:31" pos:end="1863:32">pc</name></name> <operator pos:start="1863:34" pos:end="1863:34">+</operator> <name pos:start="1863:36" pos:end="1863:41">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="1867:11" pos:end="2195:9">else <block pos:start="1867:16" pos:end="2195:9">{<block_content pos:start="1871:13" pos:end="2193:13">

            <comment type="block" pos:start="1869:13" pos:end="1869:45">/* Data processing immediate.  */</comment>

            <if_stmt pos:start="1871:13" pos:end="2193:13"><if pos:start="1871:13" pos:end="2099:13">if <condition pos:start="1871:16" pos:end="1871:33">(<expr pos:start="1871:17" pos:end="1871:32"><name pos:start="1871:17" pos:end="1871:20">insn</name> <operator pos:start="1871:22" pos:end="1871:22">&amp;</operator> <operator pos:start="1871:24" pos:end="1871:24">(</operator><literal type="number" pos:start="1871:25" pos:end="1871:25">1</literal> <operator pos:start="1871:27" pos:end="1871:28">&lt;&lt;</operator> <literal type="number" pos:start="1871:30" pos:end="1871:31">25</literal><operator pos:start="1871:32" pos:end="1871:32">)</operator></expr>)</condition> <block pos:start="1871:35" pos:end="2099:13">{<block_content pos:start="1873:17" pos:end="2097:17">

                <if_stmt pos:start="1873:17" pos:end="2097:17"><if pos:start="1873:17" pos:end="2027:17">if <condition pos:start="1873:20" pos:end="1873:37">(<expr pos:start="1873:21" pos:end="1873:36"><name pos:start="1873:21" pos:end="1873:24">insn</name> <operator pos:start="1873:26" pos:end="1873:26">&amp;</operator> <operator pos:start="1873:28" pos:end="1873:28">(</operator><literal type="number" pos:start="1873:29" pos:end="1873:29">1</literal> <operator pos:start="1873:31" pos:end="1873:32">&lt;&lt;</operator> <literal type="number" pos:start="1873:34" pos:end="1873:35">24</literal><operator pos:start="1873:36" pos:end="1873:36">)</operator></expr>)</condition> <block pos:start="1873:39" pos:end="2027:17">{<block_content pos:start="1875:21" pos:end="2025:42">

                    <if_stmt pos:start="1875:21" pos:end="1877:40"><if pos:start="1875:21" pos:end="1877:40">if <condition pos:start="1875:24" pos:end="1875:41">(<expr pos:start="1875:25" pos:end="1875:40"><name pos:start="1875:25" pos:end="1875:28">insn</name> <operator pos:start="1875:30" pos:end="1875:30">&amp;</operator> <operator pos:start="1875:32" pos:end="1875:32">(</operator><literal type="number" pos:start="1875:33" pos:end="1875:33">1</literal> <operator pos:start="1875:35" pos:end="1875:36">&lt;&lt;</operator> <literal type="number" pos:start="1875:38" pos:end="1875:39">20</literal><operator pos:start="1875:40" pos:end="1875:40">)</operator></expr>)</condition><block type="pseudo" pos:start="1877:25" pos:end="1877:40"><block_content pos:start="1877:25" pos:end="1877:40">

                        <goto pos:start="1877:25" pos:end="1877:40">goto <name pos:start="1877:30" pos:end="1877:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <comment type="block" pos:start="1879:21" pos:end="1879:45">/* Bitfield/Saturate.  */</comment>

                    <expr_stmt pos:start="1881:21" pos:end="1881:42"><expr pos:start="1881:21" pos:end="1881:41"><name pos:start="1881:21" pos:end="1881:22">op</name> <operator pos:start="1881:24" pos:end="1881:24">=</operator> <operator pos:start="1881:26" pos:end="1881:26">(</operator><name pos:start="1881:27" pos:end="1881:30">insn</name> <operator pos:start="1881:32" pos:end="1881:33">&gt;&gt;</operator> <literal type="number" pos:start="1881:35" pos:end="1881:36">21</literal><operator pos:start="1881:37" pos:end="1881:37">)</operator> <operator pos:start="1881:39" pos:end="1881:39">&amp;</operator> <literal type="number" pos:start="1881:41" pos:end="1881:41">7</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1883:21" pos:end="1883:38"><expr pos:start="1883:21" pos:end="1883:37"><name pos:start="1883:21" pos:end="1883:23">imm</name> <operator pos:start="1883:25" pos:end="1883:25">=</operator> <name pos:start="1883:27" pos:end="1883:30">insn</name> <operator pos:start="1883:32" pos:end="1883:32">&amp;</operator> <literal type="number" pos:start="1883:34" pos:end="1883:37">0x1f</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1885:21" pos:end="1885:70"><expr pos:start="1885:21" pos:end="1885:69"><name pos:start="1885:21" pos:end="1885:25">shift</name> <operator pos:start="1885:27" pos:end="1885:27">=</operator> <operator pos:start="1885:29" pos:end="1885:29">(</operator><operator pos:start="1885:30" pos:end="1885:30">(</operator><name pos:start="1885:31" pos:end="1885:34">insn</name> <operator pos:start="1885:36" pos:end="1885:37">&gt;&gt;</operator> <literal type="number" pos:start="1885:39" pos:end="1885:39">6</literal><operator pos:start="1885:40" pos:end="1885:40">)</operator> <operator pos:start="1885:42" pos:end="1885:42">&amp;</operator> <literal type="number" pos:start="1885:44" pos:end="1885:44">3</literal><operator pos:start="1885:45" pos:end="1885:45">)</operator> <operator pos:start="1885:47" pos:end="1885:47">|</operator> <operator pos:start="1885:49" pos:end="1885:49">(</operator><operator pos:start="1885:50" pos:end="1885:50">(</operator><name pos:start="1885:51" pos:end="1885:54">insn</name> <operator pos:start="1885:56" pos:end="1885:57">&gt;&gt;</operator> <literal type="number" pos:start="1885:59" pos:end="1885:60">10</literal><operator pos:start="1885:61" pos:end="1885:61">)</operator> <operator pos:start="1885:63" pos:end="1885:63">&amp;</operator> <literal type="number" pos:start="1885:65" pos:end="1885:68">0x1c</literal><operator pos:start="1885:69" pos:end="1885:69">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="1887:21" pos:end="1897:21"><if pos:start="1887:21" pos:end="1893:21">if <condition pos:start="1887:24" pos:end="1887:33">(<expr pos:start="1887:25" pos:end="1887:32"><name pos:start="1887:25" pos:end="1887:26">rn</name> <operator pos:start="1887:28" pos:end="1887:29">==</operator> <literal type="number" pos:start="1887:31" pos:end="1887:32">15</literal></expr>)</condition> <block pos:start="1887:35" pos:end="1893:21">{<block_content pos:start="1889:25" pos:end="1891:49">

                        <expr_stmt pos:start="1889:25" pos:end="1889:49"><expr pos:start="1889:25" pos:end="1889:48"><name pos:start="1889:25" pos:end="1889:27">tmp</name> <operator pos:start="1889:29" pos:end="1889:29">=</operator> <call pos:start="1889:31" pos:end="1889:48"><name pos:start="1889:31" pos:end="1889:46">tcg_temp_new_i32</name><argument_list pos:start="1889:47" pos:end="1889:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1891:25" pos:end="1891:49"><expr pos:start="1891:25" pos:end="1891:48"><call pos:start="1891:25" pos:end="1891:48"><name pos:start="1891:25" pos:end="1891:40">tcg_gen_movi_i32</name><argument_list pos:start="1891:41" pos:end="1891:48">(<argument pos:start="1891:42" pos:end="1891:44"><expr pos:start="1891:42" pos:end="1891:44"><name pos:start="1891:42" pos:end="1891:44">tmp</name></expr></argument>, <argument pos:start="1891:47" pos:end="1891:47"><expr pos:start="1891:47" pos:end="1891:47"><literal type="number" pos:start="1891:47" pos:end="1891:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1893:23" pos:end="1897:21">else <block pos:start="1893:28" pos:end="1897:21">{<block_content pos:start="1895:25" pos:end="1895:46">

                        <expr_stmt pos:start="1895:25" pos:end="1895:46"><expr pos:start="1895:25" pos:end="1895:45"><name pos:start="1895:25" pos:end="1895:27">tmp</name> <operator pos:start="1895:29" pos:end="1895:29">=</operator> <call pos:start="1895:31" pos:end="1895:45"><name pos:start="1895:31" pos:end="1895:38">load_reg</name><argument_list pos:start="1895:39" pos:end="1895:45">(<argument pos:start="1895:40" pos:end="1895:40"><expr pos:start="1895:40" pos:end="1895:40"><name pos:start="1895:40" pos:end="1895:40">s</name></expr></argument>, <argument pos:start="1895:43" pos:end="1895:44"><expr pos:start="1895:43" pos:end="1895:44"><name pos:start="1895:43" pos:end="1895:44">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <switch pos:start="1899:21" pos:end="2023:21">switch <condition pos:start="1899:28" pos:end="1899:31">(<expr pos:start="1899:29" pos:end="1899:30"><name pos:start="1899:29" pos:end="1899:30">op</name></expr>)</condition> <block pos:start="1899:33" pos:end="2023:21">{<block_content pos:start="1901:21" pos:end="2021:30">

                    <case pos:start="1901:21" pos:end="1901:27">case <expr pos:start="1901:26" pos:end="1901:26"><literal type="number" pos:start="1901:26" pos:end="1901:26">2</literal></expr>:</case> <comment type="block" pos:start="1901:29" pos:end="1901:59">/* Signed bitfield extract.  */</comment>

                        <expr_stmt pos:start="1903:25" pos:end="1903:30"><expr pos:start="1903:25" pos:end="1903:29"><name pos:start="1903:25" pos:end="1903:27">imm</name><operator pos:start="1903:28" pos:end="1903:29">++</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="1905:25" pos:end="1907:44"><if pos:start="1905:25" pos:end="1907:44">if <condition pos:start="1905:28" pos:end="1905:45">(<expr pos:start="1905:29" pos:end="1905:44"><name pos:start="1905:29" pos:end="1905:33">shift</name> <operator pos:start="1905:35" pos:end="1905:35">+</operator> <name pos:start="1905:37" pos:end="1905:39">imm</name> <operator pos:start="1905:41" pos:end="1905:41">&gt;</operator> <literal type="number" pos:start="1905:43" pos:end="1905:44">32</literal></expr>)</condition><block type="pseudo" pos:start="1907:29" pos:end="1907:44"><block_content pos:start="1907:29" pos:end="1907:44">

                            <goto pos:start="1907:29" pos:end="1907:44">goto <name pos:start="1907:34" pos:end="1907:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <if_stmt pos:start="1909:25" pos:end="1911:54"><if pos:start="1909:25" pos:end="1911:54">if <condition pos:start="1909:28" pos:end="1909:37">(<expr pos:start="1909:29" pos:end="1909:36"><name pos:start="1909:29" pos:end="1909:31">imm</name> <operator pos:start="1909:33" pos:end="1909:33">&lt;</operator> <literal type="number" pos:start="1909:35" pos:end="1909:36">32</literal></expr>)</condition><block type="pseudo" pos:start="1911:29" pos:end="1911:54"><block_content pos:start="1911:29" pos:end="1911:54">

                            <expr_stmt pos:start="1911:29" pos:end="1911:54"><expr pos:start="1911:29" pos:end="1911:53"><call pos:start="1911:29" pos:end="1911:53"><name pos:start="1911:29" pos:end="1911:36">gen_sbfx</name><argument_list pos:start="1911:37" pos:end="1911:53">(<argument pos:start="1911:38" pos:end="1911:40"><expr pos:start="1911:38" pos:end="1911:40"><name pos:start="1911:38" pos:end="1911:40">tmp</name></expr></argument>, <argument pos:start="1911:43" pos:end="1911:47"><expr pos:start="1911:43" pos:end="1911:47"><name pos:start="1911:43" pos:end="1911:47">shift</name></expr></argument>, <argument pos:start="1911:50" pos:end="1911:52"><expr pos:start="1911:50" pos:end="1911:52"><name pos:start="1911:50" pos:end="1911:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <break pos:start="1913:25" pos:end="1913:30">break;</break>

                    <case pos:start="1915:21" pos:end="1915:27">case <expr pos:start="1915:26" pos:end="1915:26"><literal type="number" pos:start="1915:26" pos:end="1915:26">6</literal></expr>:</case> <comment type="block" pos:start="1915:29" pos:end="1915:61">/* Unsigned bitfield extract.  */</comment>

                        <expr_stmt pos:start="1917:25" pos:end="1917:30"><expr pos:start="1917:25" pos:end="1917:29"><name pos:start="1917:25" pos:end="1917:27">imm</name><operator pos:start="1917:28" pos:end="1917:29">++</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="1919:25" pos:end="1921:44"><if pos:start="1919:25" pos:end="1921:44">if <condition pos:start="1919:28" pos:end="1919:45">(<expr pos:start="1919:29" pos:end="1919:44"><name pos:start="1919:29" pos:end="1919:33">shift</name> <operator pos:start="1919:35" pos:end="1919:35">+</operator> <name pos:start="1919:37" pos:end="1919:39">imm</name> <operator pos:start="1919:41" pos:end="1919:41">&gt;</operator> <literal type="number" pos:start="1919:43" pos:end="1919:44">32</literal></expr>)</condition><block type="pseudo" pos:start="1921:29" pos:end="1921:44"><block_content pos:start="1921:29" pos:end="1921:44">

                            <goto pos:start="1921:29" pos:end="1921:44">goto <name pos:start="1921:34" pos:end="1921:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <if_stmt pos:start="1923:25" pos:end="1925:66"><if pos:start="1923:25" pos:end="1925:66">if <condition pos:start="1923:28" pos:end="1923:37">(<expr pos:start="1923:29" pos:end="1923:36"><name pos:start="1923:29" pos:end="1923:31">imm</name> <operator pos:start="1923:33" pos:end="1923:33">&lt;</operator> <literal type="number" pos:start="1923:35" pos:end="1923:36">32</literal></expr>)</condition><block type="pseudo" pos:start="1925:29" pos:end="1925:66"><block_content pos:start="1925:29" pos:end="1925:66">

                            <expr_stmt pos:start="1925:29" pos:end="1925:66"><expr pos:start="1925:29" pos:end="1925:65"><call pos:start="1925:29" pos:end="1925:65"><name pos:start="1925:29" pos:end="1925:36">gen_ubfx</name><argument_list pos:start="1925:37" pos:end="1925:65">(<argument pos:start="1925:38" pos:end="1925:40"><expr pos:start="1925:38" pos:end="1925:40"><name pos:start="1925:38" pos:end="1925:40">tmp</name></expr></argument>, <argument pos:start="1925:43" pos:end="1925:47"><expr pos:start="1925:43" pos:end="1925:47"><name pos:start="1925:43" pos:end="1925:47">shift</name></expr></argument>, <argument pos:start="1925:50" pos:end="1925:64"><expr pos:start="1925:50" pos:end="1925:64"><operator pos:start="1925:50" pos:end="1925:50">(</operator><literal type="number" pos:start="1925:51" pos:end="1925:52">1u</literal> <operator pos:start="1925:54" pos:end="1925:55">&lt;&lt;</operator> <name pos:start="1925:57" pos:end="1925:59">imm</name><operator pos:start="1925:60" pos:end="1925:60">)</operator> <operator pos:start="1925:62" pos:end="1925:62">-</operator> <literal type="number" pos:start="1925:64" pos:end="1925:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <break pos:start="1927:25" pos:end="1927:30">break;</break>

                    <case pos:start="1929:21" pos:end="1929:27">case <expr pos:start="1929:26" pos:end="1929:26"><literal type="number" pos:start="1929:26" pos:end="1929:26">3</literal></expr>:</case> <comment type="block" pos:start="1929:29" pos:end="1929:57">/* Bitfield insert/clear.  */</comment>

                        <if_stmt pos:start="1931:25" pos:end="1933:44"><if pos:start="1931:25" pos:end="1933:44">if <condition pos:start="1931:28" pos:end="1931:40">(<expr pos:start="1931:29" pos:end="1931:39"><name pos:start="1931:29" pos:end="1931:31">imm</name> <operator pos:start="1931:33" pos:end="1931:33">&lt;</operator> <name pos:start="1931:35" pos:end="1931:39">shift</name></expr>)</condition><block type="pseudo" pos:start="1933:29" pos:end="1933:44"><block_content pos:start="1933:29" pos:end="1933:44">

                            <goto pos:start="1933:29" pos:end="1933:44">goto <name pos:start="1933:34" pos:end="1933:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1935:25" pos:end="1935:46"><expr pos:start="1935:25" pos:end="1935:45"><name pos:start="1935:25" pos:end="1935:27">imm</name> <operator pos:start="1935:29" pos:end="1935:29">=</operator> <name pos:start="1935:31" pos:end="1935:33">imm</name> <operator pos:start="1935:35" pos:end="1935:35">+</operator> <literal type="number" pos:start="1935:37" pos:end="1935:39">1</literal> <operator pos:start="1935:39" pos:end="1935:39">-</operator> <name pos:start="1935:41" pos:end="1935:45">shift</name></expr>;</expr_stmt>

                        <if_stmt pos:start="1937:25" pos:end="1945:25"><if pos:start="1937:25" pos:end="1945:25">if <condition pos:start="1937:28" pos:end="1937:38">(<expr pos:start="1937:29" pos:end="1937:37"><name pos:start="1937:29" pos:end="1937:31">imm</name> <operator pos:start="1937:33" pos:end="1937:34">!=</operator> <literal type="number" pos:start="1937:36" pos:end="1937:37">32</literal></expr>)</condition> <block pos:start="1937:40" pos:end="1945:25">{<block_content pos:start="1939:29" pos:end="1943:52">

                            <expr_stmt pos:start="1939:29" pos:end="1939:51"><expr pos:start="1939:29" pos:end="1939:50"><name pos:start="1939:29" pos:end="1939:32">tmp2</name> <operator pos:start="1939:34" pos:end="1939:34">=</operator> <call pos:start="1939:36" pos:end="1939:50"><name pos:start="1939:36" pos:end="1939:43">load_reg</name><argument_list pos:start="1939:44" pos:end="1939:50">(<argument pos:start="1939:45" pos:end="1939:45"><expr pos:start="1939:45" pos:end="1939:45"><name pos:start="1939:45" pos:end="1939:45">s</name></expr></argument>, <argument pos:start="1939:48" pos:end="1939:49"><expr pos:start="1939:48" pos:end="1939:49"><name pos:start="1939:48" pos:end="1939:49">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1941:29" pos:end="1941:76"><expr pos:start="1941:29" pos:end="1941:75"><call pos:start="1941:29" pos:end="1941:75"><name pos:start="1941:29" pos:end="1941:47">tcg_gen_deposit_i32</name><argument_list pos:start="1941:48" pos:end="1941:75">(<argument pos:start="1941:49" pos:end="1941:51"><expr pos:start="1941:49" pos:end="1941:51"><name pos:start="1941:49" pos:end="1941:51">tmp</name></expr></argument>, <argument pos:start="1941:54" pos:end="1941:57"><expr pos:start="1941:54" pos:end="1941:57"><name pos:start="1941:54" pos:end="1941:57">tmp2</name></expr></argument>, <argument pos:start="1941:60" pos:end="1941:62"><expr pos:start="1941:60" pos:end="1941:62"><name pos:start="1941:60" pos:end="1941:62">tmp</name></expr></argument>, <argument pos:start="1941:65" pos:end="1941:69"><expr pos:start="1941:65" pos:end="1941:69"><name pos:start="1941:65" pos:end="1941:69">shift</name></expr></argument>, <argument pos:start="1941:72" pos:end="1941:74"><expr pos:start="1941:72" pos:end="1941:74"><name pos:start="1941:72" pos:end="1941:74">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1943:29" pos:end="1943:52"><expr pos:start="1943:29" pos:end="1943:51"><call pos:start="1943:29" pos:end="1943:51"><name pos:start="1943:29" pos:end="1943:45">tcg_temp_free_i32</name><argument_list pos:start="1943:46" pos:end="1943:51">(<argument pos:start="1943:47" pos:end="1943:50"><expr pos:start="1943:47" pos:end="1943:50"><name pos:start="1943:47" pos:end="1943:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1947:25" pos:end="1947:30">break;</break>

                    <case pos:start="1949:21" pos:end="1949:27">case <expr pos:start="1949:26" pos:end="1949:26"><literal type="number" pos:start="1949:26" pos:end="1949:26">7</literal></expr>:</case>

                        <goto pos:start="1951:25" pos:end="1951:40">goto <name pos:start="1951:30" pos:end="1951:39">illegal_op</name>;</goto>

                    <default pos:start="1953:21" pos:end="1953:28">default:</default> <comment type="block" pos:start="1953:30" pos:end="1953:45">/* Saturate.  */</comment>

                        <if_stmt pos:start="1955:25" pos:end="1965:25"><if pos:start="1955:25" pos:end="1965:25">if <condition pos:start="1955:28" pos:end="1955:34">(<expr pos:start="1955:29" pos:end="1955:33"><name pos:start="1955:29" pos:end="1955:33">shift</name></expr>)</condition> <block pos:start="1955:36" pos:end="1965:25">{<block_content pos:start="1957:29" pos:end="1963:66">

                            <if_stmt pos:start="1957:29" pos:end="1963:66"><if pos:start="1957:29" pos:end="1959:66">if <condition pos:start="1957:32" pos:end="1957:39">(<expr pos:start="1957:33" pos:end="1957:38"><name pos:start="1957:33" pos:end="1957:34">op</name> <operator pos:start="1957:36" pos:end="1957:36">&amp;</operator> <literal type="number" pos:start="1957:38" pos:end="1957:38">1</literal></expr>)</condition><block type="pseudo" pos:start="1959:33" pos:end="1959:66"><block_content pos:start="1959:33" pos:end="1959:66">

                                <expr_stmt pos:start="1959:33" pos:end="1959:66"><expr pos:start="1959:33" pos:end="1959:65"><call pos:start="1959:33" pos:end="1959:65"><name pos:start="1959:33" pos:end="1959:48">tcg_gen_sari_i32</name><argument_list pos:start="1959:49" pos:end="1959:65">(<argument pos:start="1959:50" pos:end="1959:52"><expr pos:start="1959:50" pos:end="1959:52"><name pos:start="1959:50" pos:end="1959:52">tmp</name></expr></argument>, <argument pos:start="1959:55" pos:end="1959:57"><expr pos:start="1959:55" pos:end="1959:57"><name pos:start="1959:55" pos:end="1959:57">tmp</name></expr></argument>, <argument pos:start="1959:60" pos:end="1959:64"><expr pos:start="1959:60" pos:end="1959:64"><name pos:start="1959:60" pos:end="1959:64">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="1961:29" pos:end="1963:66">else<block type="pseudo" pos:start="1963:33" pos:end="1963:66"><block_content pos:start="1963:33" pos:end="1963:66">

                                <expr_stmt pos:start="1963:33" pos:end="1963:66"><expr pos:start="1963:33" pos:end="1963:65"><call pos:start="1963:33" pos:end="1963:65"><name pos:start="1963:33" pos:end="1963:48">tcg_gen_shli_i32</name><argument_list pos:start="1963:49" pos:end="1963:65">(<argument pos:start="1963:50" pos:end="1963:52"><expr pos:start="1963:50" pos:end="1963:52"><name pos:start="1963:50" pos:end="1963:52">tmp</name></expr></argument>, <argument pos:start="1963:55" pos:end="1963:57"><expr pos:start="1963:55" pos:end="1963:57"><name pos:start="1963:55" pos:end="1963:57">tmp</name></expr></argument>, <argument pos:start="1963:60" pos:end="1963:64"><expr pos:start="1963:60" pos:end="1963:64"><name pos:start="1963:60" pos:end="1963:64">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1967:25" pos:end="1967:50"><expr pos:start="1967:25" pos:end="1967:49"><name pos:start="1967:25" pos:end="1967:28">tmp2</name> <operator pos:start="1967:30" pos:end="1967:30">=</operator> <call pos:start="1967:32" pos:end="1967:49"><name pos:start="1967:32" pos:end="1967:44">tcg_const_i32</name><argument_list pos:start="1967:45" pos:end="1967:49">(<argument pos:start="1967:46" pos:end="1967:48"><expr pos:start="1967:46" pos:end="1967:48"><name pos:start="1967:46" pos:end="1967:48">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1969:25" pos:end="2017:25"><if pos:start="1969:25" pos:end="1993:25">if <condition pos:start="1969:28" pos:end="1969:35">(<expr pos:start="1969:29" pos:end="1969:34"><name pos:start="1969:29" pos:end="1969:30">op</name> <operator pos:start="1969:32" pos:end="1969:32">&amp;</operator> <literal type="number" pos:start="1969:34" pos:end="1969:34">4</literal></expr>)</condition> <block pos:start="1969:37" pos:end="1993:25">{<block_content pos:start="1973:29" pos:end="1991:29">

                            <comment type="block" pos:start="1971:29" pos:end="1971:44">/* Unsigned.  */</comment>

                            <if_stmt pos:start="1973:29" pos:end="1991:29"><if pos:start="1973:29" pos:end="1987:29">if <condition pos:start="1973:32" pos:end="1973:55">(<expr pos:start="1973:33" pos:end="1973:54"><operator pos:start="1973:33" pos:end="1973:33">(</operator><name pos:start="1973:34" pos:end="1973:35">op</name> <operator pos:start="1973:37" pos:end="1973:37">&amp;</operator> <literal type="number" pos:start="1973:39" pos:end="1973:39">1</literal><operator pos:start="1973:40" pos:end="1973:40">)</operator> <operator pos:start="1973:42" pos:end="1973:43">&amp;&amp;</operator> <name pos:start="1973:45" pos:end="1973:49">shift</name> <operator pos:start="1973:51" pos:end="1973:52">==</operator> <literal type="number" pos:start="1973:54" pos:end="1973:54">0</literal></expr>)</condition> <block pos:start="1973:57" pos:end="1987:29">{<block_content pos:start="1975:33" pos:end="1985:75">

                                <if_stmt pos:start="1975:33" pos:end="1983:33"><if pos:start="1975:33" pos:end="1983:33">if <condition pos:start="1975:36" pos:end="1975:78">(<expr pos:start="1975:37" pos:end="1975:77"><operator pos:start="1975:37" pos:end="1975:37">!</operator><call pos:start="1975:38" pos:end="1975:77"><name pos:start="1975:38" pos:end="1975:51">arm_dc_feature</name><argument_list pos:start="1975:52" pos:end="1975:77">(<argument pos:start="1975:53" pos:end="1975:53"><expr pos:start="1975:53" pos:end="1975:53"><name pos:start="1975:53" pos:end="1975:53">s</name></expr></argument>, <argument pos:start="1975:56" pos:end="1975:76"><expr pos:start="1975:56" pos:end="1975:76"><name pos:start="1975:56" pos:end="1975:76">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1975:80" pos:end="1983:33">{<block_content pos:start="1977:37" pos:end="1981:52">

                                    <expr_stmt pos:start="1977:37" pos:end="1977:59"><expr pos:start="1977:37" pos:end="1977:58"><call pos:start="1977:37" pos:end="1977:58"><name pos:start="1977:37" pos:end="1977:53">tcg_temp_free_i32</name><argument_list pos:start="1977:54" pos:end="1977:58">(<argument pos:start="1977:55" pos:end="1977:57"><expr pos:start="1977:55" pos:end="1977:57"><name pos:start="1977:55" pos:end="1977:57">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="1979:37" pos:end="1979:60"><expr pos:start="1979:37" pos:end="1979:59"><call pos:start="1979:37" pos:end="1979:59"><name pos:start="1979:37" pos:end="1979:53">tcg_temp_free_i32</name><argument_list pos:start="1979:54" pos:end="1979:59">(<argument pos:start="1979:55" pos:end="1979:58"><expr pos:start="1979:55" pos:end="1979:58"><name pos:start="1979:55" pos:end="1979:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <goto pos:start="1981:37" pos:end="1981:52">goto <name pos:start="1981:42" pos:end="1981:51">illegal_op</name>;</goto>

                                </block_content>}</block></if></if_stmt>

                                <expr_stmt pos:start="1985:33" pos:end="1985:75"><expr pos:start="1985:33" pos:end="1985:74"><call pos:start="1985:33" pos:end="1985:74"><name pos:start="1985:33" pos:end="1985:49">gen_helper_usat16</name><argument_list pos:start="1985:50" pos:end="1985:74">(<argument pos:start="1985:51" pos:end="1985:53"><expr pos:start="1985:51" pos:end="1985:53"><name pos:start="1985:51" pos:end="1985:53">tmp</name></expr></argument>, <argument pos:start="1985:56" pos:end="1985:62"><expr pos:start="1985:56" pos:end="1985:62"><name pos:start="1985:56" pos:end="1985:62">cpu_env</name></expr></argument>, <argument pos:start="1985:65" pos:end="1985:67"><expr pos:start="1985:65" pos:end="1985:67"><name pos:start="1985:65" pos:end="1985:67">tmp</name></expr></argument>, <argument pos:start="1985:70" pos:end="1985:73"><expr pos:start="1985:70" pos:end="1985:73"><name pos:start="1985:70" pos:end="1985:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1987:31" pos:end="1991:29">else <block pos:start="1987:36" pos:end="1991:29">{<block_content pos:start="1989:33" pos:end="1989:73">

                                <expr_stmt pos:start="1989:33" pos:end="1989:73"><expr pos:start="1989:33" pos:end="1989:72"><call pos:start="1989:33" pos:end="1989:72"><name pos:start="1989:33" pos:end="1989:47">gen_helper_usat</name><argument_list pos:start="1989:48" pos:end="1989:72">(<argument pos:start="1989:49" pos:end="1989:51"><expr pos:start="1989:49" pos:end="1989:51"><name pos:start="1989:49" pos:end="1989:51">tmp</name></expr></argument>, <argument pos:start="1989:54" pos:end="1989:60"><expr pos:start="1989:54" pos:end="1989:60"><name pos:start="1989:54" pos:end="1989:60">cpu_env</name></expr></argument>, <argument pos:start="1989:63" pos:end="1989:65"><expr pos:start="1989:63" pos:end="1989:65"><name pos:start="1989:63" pos:end="1989:65">tmp</name></expr></argument>, <argument pos:start="1989:68" pos:end="1989:71"><expr pos:start="1989:68" pos:end="1989:71"><name pos:start="1989:68" pos:end="1989:71">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="1993:27" pos:end="2017:25">else <block pos:start="1993:32" pos:end="2017:25">{<block_content pos:start="1997:29" pos:end="2015:29">

                            <comment type="block" pos:start="1995:29" pos:end="1995:42">/* Signed.  */</comment>

                            <if_stmt pos:start="1997:29" pos:end="2015:29"><if pos:start="1997:29" pos:end="2011:29">if <condition pos:start="1997:32" pos:end="1997:55">(<expr pos:start="1997:33" pos:end="1997:54"><operator pos:start="1997:33" pos:end="1997:33">(</operator><name pos:start="1997:34" pos:end="1997:35">op</name> <operator pos:start="1997:37" pos:end="1997:37">&amp;</operator> <literal type="number" pos:start="1997:39" pos:end="1997:39">1</literal><operator pos:start="1997:40" pos:end="1997:40">)</operator> <operator pos:start="1997:42" pos:end="1997:43">&amp;&amp;</operator> <name pos:start="1997:45" pos:end="1997:49">shift</name> <operator pos:start="1997:51" pos:end="1997:52">==</operator> <literal type="number" pos:start="1997:54" pos:end="1997:54">0</literal></expr>)</condition> <block pos:start="1997:57" pos:end="2011:29">{<block_content pos:start="1999:33" pos:end="2009:75">

                                <if_stmt pos:start="1999:33" pos:end="2007:33"><if pos:start="1999:33" pos:end="2007:33">if <condition pos:start="1999:36" pos:end="1999:78">(<expr pos:start="1999:37" pos:end="1999:77"><operator pos:start="1999:37" pos:end="1999:37">!</operator><call pos:start="1999:38" pos:end="1999:77"><name pos:start="1999:38" pos:end="1999:51">arm_dc_feature</name><argument_list pos:start="1999:52" pos:end="1999:77">(<argument pos:start="1999:53" pos:end="1999:53"><expr pos:start="1999:53" pos:end="1999:53"><name pos:start="1999:53" pos:end="1999:53">s</name></expr></argument>, <argument pos:start="1999:56" pos:end="1999:76"><expr pos:start="1999:56" pos:end="1999:76"><name pos:start="1999:56" pos:end="1999:76">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1999:80" pos:end="2007:33">{<block_content pos:start="2001:37" pos:end="2005:52">

                                    <expr_stmt pos:start="2001:37" pos:end="2001:59"><expr pos:start="2001:37" pos:end="2001:58"><call pos:start="2001:37" pos:end="2001:58"><name pos:start="2001:37" pos:end="2001:53">tcg_temp_free_i32</name><argument_list pos:start="2001:54" pos:end="2001:58">(<argument pos:start="2001:55" pos:end="2001:57"><expr pos:start="2001:55" pos:end="2001:57"><name pos:start="2001:55" pos:end="2001:57">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2003:37" pos:end="2003:60"><expr pos:start="2003:37" pos:end="2003:59"><call pos:start="2003:37" pos:end="2003:59"><name pos:start="2003:37" pos:end="2003:53">tcg_temp_free_i32</name><argument_list pos:start="2003:54" pos:end="2003:59">(<argument pos:start="2003:55" pos:end="2003:58"><expr pos:start="2003:55" pos:end="2003:58"><name pos:start="2003:55" pos:end="2003:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <goto pos:start="2005:37" pos:end="2005:52">goto <name pos:start="2005:42" pos:end="2005:51">illegal_op</name>;</goto>

                                </block_content>}</block></if></if_stmt>

                                <expr_stmt pos:start="2009:33" pos:end="2009:75"><expr pos:start="2009:33" pos:end="2009:74"><call pos:start="2009:33" pos:end="2009:74"><name pos:start="2009:33" pos:end="2009:49">gen_helper_ssat16</name><argument_list pos:start="2009:50" pos:end="2009:74">(<argument pos:start="2009:51" pos:end="2009:53"><expr pos:start="2009:51" pos:end="2009:53"><name pos:start="2009:51" pos:end="2009:53">tmp</name></expr></argument>, <argument pos:start="2009:56" pos:end="2009:62"><expr pos:start="2009:56" pos:end="2009:62"><name pos:start="2009:56" pos:end="2009:62">cpu_env</name></expr></argument>, <argument pos:start="2009:65" pos:end="2009:67"><expr pos:start="2009:65" pos:end="2009:67"><name pos:start="2009:65" pos:end="2009:67">tmp</name></expr></argument>, <argument pos:start="2009:70" pos:end="2009:73"><expr pos:start="2009:70" pos:end="2009:73"><name pos:start="2009:70" pos:end="2009:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="2011:31" pos:end="2015:29">else <block pos:start="2011:36" pos:end="2015:29">{<block_content pos:start="2013:33" pos:end="2013:73">

                                <expr_stmt pos:start="2013:33" pos:end="2013:73"><expr pos:start="2013:33" pos:end="2013:72"><call pos:start="2013:33" pos:end="2013:72"><name pos:start="2013:33" pos:end="2013:47">gen_helper_ssat</name><argument_list pos:start="2013:48" pos:end="2013:72">(<argument pos:start="2013:49" pos:end="2013:51"><expr pos:start="2013:49" pos:end="2013:51"><name pos:start="2013:49" pos:end="2013:51">tmp</name></expr></argument>, <argument pos:start="2013:54" pos:end="2013:60"><expr pos:start="2013:54" pos:end="2013:60"><name pos:start="2013:54" pos:end="2013:60">cpu_env</name></expr></argument>, <argument pos:start="2013:63" pos:end="2013:65"><expr pos:start="2013:63" pos:end="2013:65"><name pos:start="2013:63" pos:end="2013:65">tmp</name></expr></argument>, <argument pos:start="2013:68" pos:end="2013:71"><expr pos:start="2013:68" pos:end="2013:71"><name pos:start="2013:68" pos:end="2013:71">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2019:25" pos:end="2019:48"><expr pos:start="2019:25" pos:end="2019:47"><call pos:start="2019:25" pos:end="2019:47"><name pos:start="2019:25" pos:end="2019:41">tcg_temp_free_i32</name><argument_list pos:start="2019:42" pos:end="2019:47">(<argument pos:start="2019:43" pos:end="2019:46"><expr pos:start="2019:43" pos:end="2019:46"><name pos:start="2019:43" pos:end="2019:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2021:25" pos:end="2021:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="2025:21" pos:end="2025:42"><expr pos:start="2025:21" pos:end="2025:41"><call pos:start="2025:21" pos:end="2025:41"><name pos:start="2025:21" pos:end="2025:29">store_reg</name><argument_list pos:start="2025:30" pos:end="2025:41">(<argument pos:start="2025:31" pos:end="2025:31"><expr pos:start="2025:31" pos:end="2025:31"><name pos:start="2025:31" pos:end="2025:31">s</name></expr></argument>, <argument pos:start="2025:34" pos:end="2025:35"><expr pos:start="2025:34" pos:end="2025:35"><name pos:start="2025:34" pos:end="2025:35">rd</name></expr></argument>, <argument pos:start="2025:38" pos:end="2025:40"><expr pos:start="2025:38" pos:end="2025:40"><name pos:start="2025:38" pos:end="2025:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2027:19" pos:end="2097:17">else <block pos:start="2027:24" pos:end="2097:17">{<block_content pos:start="2029:21" pos:end="2095:42">

                    <expr_stmt pos:start="2029:21" pos:end="2031:67"><expr pos:start="2029:21" pos:end="2031:66"><name pos:start="2029:21" pos:end="2029:23">imm</name> <operator pos:start="2029:25" pos:end="2029:25">=</operator> <operator pos:start="2029:27" pos:end="2029:27">(</operator><operator pos:start="2029:28" pos:end="2029:28">(</operator><name pos:start="2029:29" pos:end="2029:32">insn</name> <operator pos:start="2029:34" pos:end="2029:34">&amp;</operator> <literal type="number" pos:start="2029:36" pos:end="2029:45">0x04000000</literal><operator pos:start="2029:46" pos:end="2029:46">)</operator> <operator pos:start="2029:48" pos:end="2029:49">&gt;&gt;</operator> <literal type="number" pos:start="2029:51" pos:end="2029:52">15</literal><operator pos:start="2029:53" pos:end="2029:53">)</operator>

                          <operator pos:start="2031:27" pos:end="2031:27">|</operator> <operator pos:start="2031:29" pos:end="2031:29">(</operator><operator pos:start="2031:30" pos:end="2031:30">(</operator><name pos:start="2031:31" pos:end="2031:34">insn</name> <operator pos:start="2031:36" pos:end="2031:36">&amp;</operator> <literal type="number" pos:start="2031:38" pos:end="2031:43">0x7000</literal><operator pos:start="2031:44" pos:end="2031:44">)</operator> <operator pos:start="2031:46" pos:end="2031:47">&gt;&gt;</operator> <literal type="number" pos:start="2031:49" pos:end="2031:49">4</literal><operator pos:start="2031:50" pos:end="2031:50">)</operator> <operator pos:start="2031:52" pos:end="2031:52">|</operator> <operator pos:start="2031:54" pos:end="2031:54">(</operator><name pos:start="2031:55" pos:end="2031:58">insn</name> <operator pos:start="2031:60" pos:end="2031:60">&amp;</operator> <literal type="number" pos:start="2031:62" pos:end="2031:65">0xff</literal><operator pos:start="2031:66" pos:end="2031:66">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="2033:21" pos:end="2093:21"><if pos:start="2033:21" pos:end="2059:21">if <condition pos:start="2033:24" pos:end="2033:41">(<expr pos:start="2033:25" pos:end="2033:40"><name pos:start="2033:25" pos:end="2033:28">insn</name> <operator pos:start="2033:30" pos:end="2033:30">&amp;</operator> <operator pos:start="2033:32" pos:end="2033:32">(</operator><literal type="number" pos:start="2033:33" pos:end="2033:33">1</literal> <operator pos:start="2033:35" pos:end="2033:36">&lt;&lt;</operator> <literal type="number" pos:start="2033:38" pos:end="2033:39">22</literal><operator pos:start="2033:40" pos:end="2033:40">)</operator></expr>)</condition> <block pos:start="2033:43" pos:end="2059:21">{<block_content pos:start="2037:25" pos:end="2057:25">

                        <comment type="block" pos:start="2035:25" pos:end="2035:48">/* 16-bit immediate.  */</comment>

                        <expr_stmt pos:start="2037:25" pos:end="2037:52"><expr pos:start="2037:25" pos:end="2037:51"><name pos:start="2037:25" pos:end="2037:27">imm</name> <operator pos:start="2037:29" pos:end="2037:30">|=</operator> <operator pos:start="2037:32" pos:end="2037:32">(</operator><name pos:start="2037:33" pos:end="2037:36">insn</name> <operator pos:start="2037:38" pos:end="2037:39">&gt;&gt;</operator> <literal type="number" pos:start="2037:41" pos:end="2037:41">4</literal><operator pos:start="2037:42" pos:end="2037:42">)</operator> <operator pos:start="2037:44" pos:end="2037:44">&amp;</operator> <literal type="number" pos:start="2037:46" pos:end="2037:51">0xf000</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="2039:25" pos:end="2057:25"><if pos:start="2039:25" pos:end="2049:25">if <condition pos:start="2039:28" pos:end="2039:45">(<expr pos:start="2039:29" pos:end="2039:44"><name pos:start="2039:29" pos:end="2039:32">insn</name> <operator pos:start="2039:34" pos:end="2039:34">&amp;</operator> <operator pos:start="2039:36" pos:end="2039:36">(</operator><literal type="number" pos:start="2039:37" pos:end="2039:37">1</literal> <operator pos:start="2039:39" pos:end="2039:40">&lt;&lt;</operator> <literal type="number" pos:start="2039:42" pos:end="2039:43">23</literal><operator pos:start="2039:44" pos:end="2039:44">)</operator></expr>)</condition> <block pos:start="2039:47" pos:end="2049:25">{<block_content pos:start="2043:29" pos:end="2047:65">

                            <comment type="block" pos:start="2041:29" pos:end="2041:38">/* movt */</comment>

                            <expr_stmt pos:start="2043:29" pos:end="2043:50"><expr pos:start="2043:29" pos:end="2043:49"><name pos:start="2043:29" pos:end="2043:31">tmp</name> <operator pos:start="2043:33" pos:end="2043:33">=</operator> <call pos:start="2043:35" pos:end="2043:49"><name pos:start="2043:35" pos:end="2043:42">load_reg</name><argument_list pos:start="2043:43" pos:end="2043:49">(<argument pos:start="2043:44" pos:end="2043:44"><expr pos:start="2043:44" pos:end="2043:44"><name pos:start="2043:44" pos:end="2043:44">s</name></expr></argument>, <argument pos:start="2043:47" pos:end="2043:48"><expr pos:start="2043:47" pos:end="2043:48"><name pos:start="2043:47" pos:end="2043:48">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2045:29" pos:end="2045:57"><expr pos:start="2045:29" pos:end="2045:56"><call pos:start="2045:29" pos:end="2045:56"><name pos:start="2045:29" pos:end="2045:46">tcg_gen_ext16u_i32</name><argument_list pos:start="2045:47" pos:end="2045:56">(<argument pos:start="2045:48" pos:end="2045:50"><expr pos:start="2045:48" pos:end="2045:50"><name pos:start="2045:48" pos:end="2045:50">tmp</name></expr></argument>, <argument pos:start="2045:53" pos:end="2045:55"><expr pos:start="2045:53" pos:end="2045:55"><name pos:start="2045:53" pos:end="2045:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2047:29" pos:end="2047:65"><expr pos:start="2047:29" pos:end="2047:64"><call pos:start="2047:29" pos:end="2047:64"><name pos:start="2047:29" pos:end="2047:43">tcg_gen_ori_i32</name><argument_list pos:start="2047:44" pos:end="2047:64">(<argument pos:start="2047:45" pos:end="2047:47"><expr pos:start="2047:45" pos:end="2047:47"><name pos:start="2047:45" pos:end="2047:47">tmp</name></expr></argument>, <argument pos:start="2047:50" pos:end="2047:52"><expr pos:start="2047:50" pos:end="2047:52"><name pos:start="2047:50" pos:end="2047:52">tmp</name></expr></argument>, <argument pos:start="2047:55" pos:end="2047:63"><expr pos:start="2047:55" pos:end="2047:63"><name pos:start="2047:55" pos:end="2047:57">imm</name> <operator pos:start="2047:59" pos:end="2047:60">&lt;&lt;</operator> <literal type="number" pos:start="2047:62" pos:end="2047:63">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2049:27" pos:end="2057:25">else <block pos:start="2049:32" pos:end="2057:25">{<block_content pos:start="2053:29" pos:end="2055:55">

                            <comment type="block" pos:start="2051:29" pos:end="2051:38">/* movw */</comment>

                            <expr_stmt pos:start="2053:29" pos:end="2053:53"><expr pos:start="2053:29" pos:end="2053:52"><name pos:start="2053:29" pos:end="2053:31">tmp</name> <operator pos:start="2053:33" pos:end="2053:33">=</operator> <call pos:start="2053:35" pos:end="2053:52"><name pos:start="2053:35" pos:end="2053:50">tcg_temp_new_i32</name><argument_list pos:start="2053:51" pos:end="2053:52">()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2055:29" pos:end="2055:55"><expr pos:start="2055:29" pos:end="2055:54"><call pos:start="2055:29" pos:end="2055:54"><name pos:start="2055:29" pos:end="2055:44">tcg_gen_movi_i32</name><argument_list pos:start="2055:45" pos:end="2055:54">(<argument pos:start="2055:46" pos:end="2055:48"><expr pos:start="2055:46" pos:end="2055:48"><name pos:start="2055:46" pos:end="2055:48">tmp</name></expr></argument>, <argument pos:start="2055:51" pos:end="2055:53"><expr pos:start="2055:51" pos:end="2055:53"><name pos:start="2055:51" pos:end="2055:53">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="2059:23" pos:end="2093:21">else <block pos:start="2059:28" pos:end="2093:21">{<block_content pos:start="2063:25" pos:end="2091:25">

                        <comment type="block" pos:start="2061:25" pos:end="2061:56">/* Add/sub 12-bit immediate.  */</comment>

                        <if_stmt pos:start="2063:25" pos:end="2091:25"><if pos:start="2063:25" pos:end="2079:25">if <condition pos:start="2063:28" pos:end="2063:37">(<expr pos:start="2063:29" pos:end="2063:36"><name pos:start="2063:29" pos:end="2063:30">rn</name> <operator pos:start="2063:32" pos:end="2063:33">==</operator> <literal type="number" pos:start="2063:35" pos:end="2063:36">15</literal></expr>)</condition> <block pos:start="2063:39" pos:end="2079:25">{<block_content pos:start="2065:29" pos:end="2077:58">

                            <expr_stmt pos:start="2065:29" pos:end="2065:58"><expr pos:start="2065:29" pos:end="2065:57"><name pos:start="2065:29" pos:end="2065:34">offset</name> <operator pos:start="2065:36" pos:end="2065:36">=</operator> <name pos:start="2065:38" pos:end="2065:42"><name pos:start="2065:38" pos:end="2065:38">s</name><operator pos:start="2065:39" pos:end="2065:40">-&gt;</operator><name pos:start="2065:41" pos:end="2065:42">pc</name></name> <operator pos:start="2065:44" pos:end="2065:44">&amp;</operator> <operator pos:start="2065:46" pos:end="2065:46">~</operator><operator pos:start="2065:47" pos:end="2065:47">(</operator><name pos:start="2065:48" pos:end="2065:55">uint32_t</name><operator pos:start="2065:56" pos:end="2065:56">)</operator><literal type="number" pos:start="2065:57" pos:end="2065:57">3</literal></expr>;</expr_stmt>

                            <if_stmt pos:start="2067:29" pos:end="2073:46"><if pos:start="2067:29" pos:end="2069:46">if <condition pos:start="2067:32" pos:end="2067:49">(<expr pos:start="2067:33" pos:end="2067:48"><name pos:start="2067:33" pos:end="2067:36">insn</name> <operator pos:start="2067:38" pos:end="2067:38">&amp;</operator> <operator pos:start="2067:40" pos:end="2067:40">(</operator><literal type="number" pos:start="2067:41" pos:end="2067:41">1</literal> <operator pos:start="2067:43" pos:end="2067:44">&lt;&lt;</operator> <literal type="number" pos:start="2067:46" pos:end="2067:47">23</literal><operator pos:start="2067:48" pos:end="2067:48">)</operator></expr>)</condition><block type="pseudo" pos:start="2069:33" pos:end="2069:46"><block_content pos:start="2069:33" pos:end="2069:46">

                                <expr_stmt pos:start="2069:33" pos:end="2069:46"><expr pos:start="2069:33" pos:end="2069:45"><name pos:start="2069:33" pos:end="2069:38">offset</name> <operator pos:start="2069:40" pos:end="2069:41">-=</operator> <name pos:start="2069:43" pos:end="2069:45">imm</name></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="2071:29" pos:end="2073:46">else<block type="pseudo" pos:start="2073:33" pos:end="2073:46"><block_content pos:start="2073:33" pos:end="2073:46">

                                <expr_stmt pos:start="2073:33" pos:end="2073:46"><expr pos:start="2073:33" pos:end="2073:45"><name pos:start="2073:33" pos:end="2073:38">offset</name> <operator pos:start="2073:40" pos:end="2073:41">+=</operator> <name pos:start="2073:43" pos:end="2073:45">imm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <expr_stmt pos:start="2075:29" pos:end="2075:53"><expr pos:start="2075:29" pos:end="2075:52"><name pos:start="2075:29" pos:end="2075:31">tmp</name> <operator pos:start="2075:33" pos:end="2075:33">=</operator> <call pos:start="2075:35" pos:end="2075:52"><name pos:start="2075:35" pos:end="2075:50">tcg_temp_new_i32</name><argument_list pos:start="2075:51" pos:end="2075:52">()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2077:29" pos:end="2077:58"><expr pos:start="2077:29" pos:end="2077:57"><call pos:start="2077:29" pos:end="2077:57"><name pos:start="2077:29" pos:end="2077:44">tcg_gen_movi_i32</name><argument_list pos:start="2077:45" pos:end="2077:57">(<argument pos:start="2077:46" pos:end="2077:48"><expr pos:start="2077:46" pos:end="2077:48"><name pos:start="2077:46" pos:end="2077:48">tmp</name></expr></argument>, <argument pos:start="2077:51" pos:end="2077:56"><expr pos:start="2077:51" pos:end="2077:56"><name pos:start="2077:51" pos:end="2077:56">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2079:27" pos:end="2091:25">else <block pos:start="2079:32" pos:end="2091:25">{<block_content pos:start="2081:29" pos:end="2089:64">

                            <expr_stmt pos:start="2081:29" pos:end="2081:50"><expr pos:start="2081:29" pos:end="2081:49"><name pos:start="2081:29" pos:end="2081:31">tmp</name> <operator pos:start="2081:33" pos:end="2081:33">=</operator> <call pos:start="2081:35" pos:end="2081:49"><name pos:start="2081:35" pos:end="2081:42">load_reg</name><argument_list pos:start="2081:43" pos:end="2081:49">(<argument pos:start="2081:44" pos:end="2081:44"><expr pos:start="2081:44" pos:end="2081:44"><name pos:start="2081:44" pos:end="2081:44">s</name></expr></argument>, <argument pos:start="2081:47" pos:end="2081:48"><expr pos:start="2081:47" pos:end="2081:48"><name pos:start="2081:47" pos:end="2081:48">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2083:29" pos:end="2089:64"><if pos:start="2083:29" pos:end="2085:64">if <condition pos:start="2083:32" pos:end="2083:49">(<expr pos:start="2083:33" pos:end="2083:48"><name pos:start="2083:33" pos:end="2083:36">insn</name> <operator pos:start="2083:38" pos:end="2083:38">&amp;</operator> <operator pos:start="2083:40" pos:end="2083:40">(</operator><literal type="number" pos:start="2083:41" pos:end="2083:41">1</literal> <operator pos:start="2083:43" pos:end="2083:44">&lt;&lt;</operator> <literal type="number" pos:start="2083:46" pos:end="2083:47">23</literal><operator pos:start="2083:48" pos:end="2083:48">)</operator></expr>)</condition><block type="pseudo" pos:start="2085:33" pos:end="2085:64"><block_content pos:start="2085:33" pos:end="2085:64">

                                <expr_stmt pos:start="2085:33" pos:end="2085:64"><expr pos:start="2085:33" pos:end="2085:63"><call pos:start="2085:33" pos:end="2085:63"><name pos:start="2085:33" pos:end="2085:48">tcg_gen_subi_i32</name><argument_list pos:start="2085:49" pos:end="2085:63">(<argument pos:start="2085:50" pos:end="2085:52"><expr pos:start="2085:50" pos:end="2085:52"><name pos:start="2085:50" pos:end="2085:52">tmp</name></expr></argument>, <argument pos:start="2085:55" pos:end="2085:57"><expr pos:start="2085:55" pos:end="2085:57"><name pos:start="2085:55" pos:end="2085:57">tmp</name></expr></argument>, <argument pos:start="2085:60" pos:end="2085:62"><expr pos:start="2085:60" pos:end="2085:62"><name pos:start="2085:60" pos:end="2085:62">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="2087:29" pos:end="2089:64">else<block type="pseudo" pos:start="2089:33" pos:end="2089:64"><block_content pos:start="2089:33" pos:end="2089:64">

                                <expr_stmt pos:start="2089:33" pos:end="2089:64"><expr pos:start="2089:33" pos:end="2089:63"><call pos:start="2089:33" pos:end="2089:63"><name pos:start="2089:33" pos:end="2089:48">tcg_gen_addi_i32</name><argument_list pos:start="2089:49" pos:end="2089:63">(<argument pos:start="2089:50" pos:end="2089:52"><expr pos:start="2089:50" pos:end="2089:52"><name pos:start="2089:50" pos:end="2089:52">tmp</name></expr></argument>, <argument pos:start="2089:55" pos:end="2089:57"><expr pos:start="2089:55" pos:end="2089:57"><name pos:start="2089:55" pos:end="2089:57">tmp</name></expr></argument>, <argument pos:start="2089:60" pos:end="2089:62"><expr pos:start="2089:60" pos:end="2089:62"><name pos:start="2089:60" pos:end="2089:62">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2095:21" pos:end="2095:42"><expr pos:start="2095:21" pos:end="2095:41"><call pos:start="2095:21" pos:end="2095:41"><name pos:start="2095:21" pos:end="2095:29">store_reg</name><argument_list pos:start="2095:30" pos:end="2095:41">(<argument pos:start="2095:31" pos:end="2095:31"><expr pos:start="2095:31" pos:end="2095:31"><name pos:start="2095:31" pos:end="2095:31">s</name></expr></argument>, <argument pos:start="2095:34" pos:end="2095:35"><expr pos:start="2095:34" pos:end="2095:35"><name pos:start="2095:34" pos:end="2095:35">rd</name></expr></argument>, <argument pos:start="2095:38" pos:end="2095:40"><expr pos:start="2095:38" pos:end="2095:40"><name pos:start="2095:38" pos:end="2095:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="2099:15" pos:end="2193:13">else <block pos:start="2099:20" pos:end="2193:13">{<block_content pos:start="2101:17" pos:end="2191:17">

                <decl_stmt pos:start="2101:17" pos:end="2101:36"><decl pos:start="2101:17" pos:end="2101:35"><type pos:start="2101:17" pos:end="2101:19"><name pos:start="2101:17" pos:end="2101:19">int</name></type> <name pos:start="2101:21" pos:end="2101:31">shifter_out</name> <init pos:start="2101:33" pos:end="2101:35">= <expr pos:start="2101:35" pos:end="2101:35"><literal type="number" pos:start="2101:35" pos:end="2101:35">0</literal></expr></init></decl>;</decl_stmt>

                <comment type="block" pos:start="2103:17" pos:end="2103:49">/* modified 12-bit immediate.  */</comment>

                <expr_stmt pos:start="2105:17" pos:end="2105:78"><expr pos:start="2105:17" pos:end="2105:77"><name pos:start="2105:17" pos:end="2105:21">shift</name> <operator pos:start="2105:23" pos:end="2105:23">=</operator> <operator pos:start="2105:25" pos:end="2105:25">(</operator><operator pos:start="2105:26" pos:end="2105:26">(</operator><name pos:start="2105:27" pos:end="2105:30">insn</name> <operator pos:start="2105:32" pos:end="2105:32">&amp;</operator> <literal type="number" pos:start="2105:34" pos:end="2105:43">0x04000000</literal><operator pos:start="2105:44" pos:end="2105:44">)</operator> <operator pos:start="2105:46" pos:end="2105:47">&gt;&gt;</operator> <literal type="number" pos:start="2105:49" pos:end="2105:50">23</literal><operator pos:start="2105:51" pos:end="2105:51">)</operator> <operator pos:start="2105:53" pos:end="2105:53">|</operator> <operator pos:start="2105:55" pos:end="2105:55">(</operator><operator pos:start="2105:56" pos:end="2105:56">(</operator><name pos:start="2105:57" pos:end="2105:60">insn</name> <operator pos:start="2105:62" pos:end="2105:62">&amp;</operator> <literal type="number" pos:start="2105:64" pos:end="2105:69">0x7000</literal><operator pos:start="2105:70" pos:end="2105:70">)</operator> <operator pos:start="2105:72" pos:end="2105:73">&gt;&gt;</operator> <literal type="number" pos:start="2105:75" pos:end="2105:76">12</literal><operator pos:start="2105:77" pos:end="2105:77">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="2107:17" pos:end="2107:36"><expr pos:start="2107:17" pos:end="2107:35"><name pos:start="2107:17" pos:end="2107:19">imm</name> <operator pos:start="2107:21" pos:end="2107:21">=</operator> <operator pos:start="2107:23" pos:end="2107:23">(</operator><name pos:start="2107:24" pos:end="2107:27">insn</name> <operator pos:start="2107:29" pos:end="2107:29">&amp;</operator> <literal type="number" pos:start="2107:31" pos:end="2107:34">0xff</literal><operator pos:start="2107:35" pos:end="2107:35">)</operator></expr>;</expr_stmt>

                <switch pos:start="2109:17" pos:end="2151:17">switch <condition pos:start="2109:24" pos:end="2109:30">(<expr pos:start="2109:25" pos:end="2109:29"><name pos:start="2109:25" pos:end="2109:29">shift</name></expr>)</condition> <block pos:start="2109:32" pos:end="2151:17">{<block_content pos:start="2111:17" pos:end="2149:26">

                <case pos:start="2111:17" pos:end="2111:23">case <expr pos:start="2111:22" pos:end="2111:22"><literal type="number" pos:start="2111:22" pos:end="2111:22">0</literal></expr>:</case> <comment type="block" pos:start="2111:25" pos:end="2111:32">/* XY */</comment>

                    <comment type="block" pos:start="2113:21" pos:end="2113:41">/* Nothing to do.  */</comment>

                    <break pos:start="2115:21" pos:end="2115:26">break;</break>

                <case pos:start="2117:17" pos:end="2117:23">case <expr pos:start="2117:22" pos:end="2117:22"><literal type="number" pos:start="2117:22" pos:end="2117:22">1</literal></expr>:</case> <comment type="block" pos:start="2117:25" pos:end="2117:38">/* 00XY00XY */</comment>

                    <expr_stmt pos:start="2119:21" pos:end="2119:37"><expr pos:start="2119:21" pos:end="2119:36"><name pos:start="2119:21" pos:end="2119:23">imm</name> <operator pos:start="2119:25" pos:end="2119:26">|=</operator> <name pos:start="2119:28" pos:end="2119:30">imm</name> <operator pos:start="2119:32" pos:end="2119:33">&lt;&lt;</operator> <literal type="number" pos:start="2119:35" pos:end="2119:36">16</literal></expr>;</expr_stmt>

                    <break pos:start="2121:21" pos:end="2121:26">break;</break>

                <case pos:start="2123:17" pos:end="2123:23">case <expr pos:start="2123:22" pos:end="2123:22"><literal type="number" pos:start="2123:22" pos:end="2123:22">2</literal></expr>:</case> <comment type="block" pos:start="2123:25" pos:end="2123:38">/* XY00XY00 */</comment>

                    <expr_stmt pos:start="2125:21" pos:end="2125:37"><expr pos:start="2125:21" pos:end="2125:36"><name pos:start="2125:21" pos:end="2125:23">imm</name> <operator pos:start="2125:25" pos:end="2125:26">|=</operator> <name pos:start="2125:28" pos:end="2125:30">imm</name> <operator pos:start="2125:32" pos:end="2125:33">&lt;&lt;</operator> <literal type="number" pos:start="2125:35" pos:end="2125:36">16</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="2127:21" pos:end="2127:30"><expr pos:start="2127:21" pos:end="2127:29"><name pos:start="2127:21" pos:end="2127:23">imm</name> <operator pos:start="2127:25" pos:end="2127:27">&lt;&lt;=</operator> <literal type="number" pos:start="2127:29" pos:end="2127:29">8</literal></expr>;</expr_stmt>

                    <break pos:start="2129:21" pos:end="2129:26">break;</break>

                <case pos:start="2131:17" pos:end="2131:23">case <expr pos:start="2131:22" pos:end="2131:22"><literal type="number" pos:start="2131:22" pos:end="2131:22">3</literal></expr>:</case> <comment type="block" pos:start="2131:25" pos:end="2131:38">/* XYXYXYXY */</comment>

                    <expr_stmt pos:start="2133:21" pos:end="2133:37"><expr pos:start="2133:21" pos:end="2133:36"><name pos:start="2133:21" pos:end="2133:23">imm</name> <operator pos:start="2133:25" pos:end="2133:26">|=</operator> <name pos:start="2133:28" pos:end="2133:30">imm</name> <operator pos:start="2133:32" pos:end="2133:33">&lt;&lt;</operator> <literal type="number" pos:start="2133:35" pos:end="2133:36">16</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="2135:21" pos:end="2135:36"><expr pos:start="2135:21" pos:end="2135:35"><name pos:start="2135:21" pos:end="2135:23">imm</name> <operator pos:start="2135:25" pos:end="2135:26">|=</operator> <name pos:start="2135:28" pos:end="2135:30">imm</name> <operator pos:start="2135:32" pos:end="2135:33">&lt;&lt;</operator> <literal type="number" pos:start="2135:35" pos:end="2135:35">8</literal></expr>;</expr_stmt>

                    <break pos:start="2137:21" pos:end="2137:26">break;</break>

                <default pos:start="2139:17" pos:end="2139:24">default:</default> <comment type="block" pos:start="2139:26" pos:end="2139:49">/* Rotated constant.  */</comment>

                    <expr_stmt pos:start="2141:21" pos:end="2141:54"><expr pos:start="2141:21" pos:end="2141:53"><name pos:start="2141:21" pos:end="2141:25">shift</name> <operator pos:start="2141:27" pos:end="2141:27">=</operator> <operator pos:start="2141:29" pos:end="2141:29">(</operator><name pos:start="2141:30" pos:end="2141:34">shift</name> <operator pos:start="2141:36" pos:end="2141:37">&lt;&lt;</operator> <literal type="number" pos:start="2141:39" pos:end="2141:39">1</literal><operator pos:start="2141:40" pos:end="2141:40">)</operator> <operator pos:start="2141:42" pos:end="2141:42">|</operator> <operator pos:start="2141:44" pos:end="2141:44">(</operator><name pos:start="2141:45" pos:end="2141:47">imm</name> <operator pos:start="2141:49" pos:end="2141:50">&gt;&gt;</operator> <literal type="number" pos:start="2141:52" pos:end="2141:52">7</literal><operator pos:start="2141:53" pos:end="2141:53">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="2143:21" pos:end="2143:32"><expr pos:start="2143:21" pos:end="2143:31"><name pos:start="2143:21" pos:end="2143:23">imm</name> <operator pos:start="2143:25" pos:end="2143:26">|=</operator> <literal type="number" pos:start="2143:28" pos:end="2143:31">0x80</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="2145:21" pos:end="2145:46"><expr pos:start="2145:21" pos:end="2145:45"><name pos:start="2145:21" pos:end="2145:23">imm</name> <operator pos:start="2145:25" pos:end="2145:25">=</operator> <name pos:start="2145:27" pos:end="2145:29">imm</name> <operator pos:start="2145:31" pos:end="2145:32">&lt;&lt;</operator> <operator pos:start="2145:34" pos:end="2145:34">(</operator><literal type="number" pos:start="2145:35" pos:end="2145:38">32</literal> <operator pos:start="2145:38" pos:end="2145:38">-</operator> <name pos:start="2145:40" pos:end="2145:44">shift</name><operator pos:start="2145:45" pos:end="2145:45">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="2147:21" pos:end="2147:36"><expr pos:start="2147:21" pos:end="2147:35"><name pos:start="2147:21" pos:end="2147:31">shifter_out</name> <operator pos:start="2147:33" pos:end="2147:33">=</operator> <literal type="number" pos:start="2147:35" pos:end="2147:35">1</literal></expr>;</expr_stmt>

                    <break pos:start="2149:21" pos:end="2149:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="2153:17" pos:end="2153:42"><expr pos:start="2153:17" pos:end="2153:41"><name pos:start="2153:17" pos:end="2153:20">tmp2</name> <operator pos:start="2153:22" pos:end="2153:22">=</operator> <call pos:start="2153:24" pos:end="2153:41"><name pos:start="2153:24" pos:end="2153:39">tcg_temp_new_i32</name><argument_list pos:start="2153:40" pos:end="2153:41">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2155:17" pos:end="2155:44"><expr pos:start="2155:17" pos:end="2155:43"><call pos:start="2155:17" pos:end="2155:43"><name pos:start="2155:17" pos:end="2155:32">tcg_gen_movi_i32</name><argument_list pos:start="2155:33" pos:end="2155:43">(<argument pos:start="2155:34" pos:end="2155:37"><expr pos:start="2155:34" pos:end="2155:37"><name pos:start="2155:34" pos:end="2155:37">tmp2</name></expr></argument>, <argument pos:start="2155:40" pos:end="2155:42"><expr pos:start="2155:40" pos:end="2155:42"><name pos:start="2155:40" pos:end="2155:42">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2157:17" pos:end="2157:40"><expr pos:start="2157:17" pos:end="2157:39"><name pos:start="2157:17" pos:end="2157:18">rn</name> <operator pos:start="2157:20" pos:end="2157:20">=</operator> <operator pos:start="2157:22" pos:end="2157:22">(</operator><name pos:start="2157:23" pos:end="2157:26">insn</name> <operator pos:start="2157:28" pos:end="2157:29">&gt;&gt;</operator> <literal type="number" pos:start="2157:31" pos:end="2157:32">16</literal><operator pos:start="2157:33" pos:end="2157:33">)</operator> <operator pos:start="2157:35" pos:end="2157:35">&amp;</operator> <literal type="number" pos:start="2157:37" pos:end="2157:39">0xf</literal></expr>;</expr_stmt>

                <if_stmt pos:start="2159:17" pos:end="2169:17"><if pos:start="2159:17" pos:end="2165:17">if <condition pos:start="2159:20" pos:end="2159:29">(<expr pos:start="2159:21" pos:end="2159:28"><name pos:start="2159:21" pos:end="2159:22">rn</name> <operator pos:start="2159:24" pos:end="2159:25">==</operator> <literal type="number" pos:start="2159:27" pos:end="2159:28">15</literal></expr>)</condition> <block pos:start="2159:31" pos:end="2165:17">{<block_content pos:start="2161:21" pos:end="2163:45">

                    <expr_stmt pos:start="2161:21" pos:end="2161:45"><expr pos:start="2161:21" pos:end="2161:44"><name pos:start="2161:21" pos:end="2161:23">tmp</name> <operator pos:start="2161:25" pos:end="2161:25">=</operator> <call pos:start="2161:27" pos:end="2161:44"><name pos:start="2161:27" pos:end="2161:42">tcg_temp_new_i32</name><argument_list pos:start="2161:43" pos:end="2161:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2163:21" pos:end="2163:45"><expr pos:start="2163:21" pos:end="2163:44"><call pos:start="2163:21" pos:end="2163:44"><name pos:start="2163:21" pos:end="2163:36">tcg_gen_movi_i32</name><argument_list pos:start="2163:37" pos:end="2163:44">(<argument pos:start="2163:38" pos:end="2163:40"><expr pos:start="2163:38" pos:end="2163:40"><name pos:start="2163:38" pos:end="2163:40">tmp</name></expr></argument>, <argument pos:start="2163:43" pos:end="2163:43"><expr pos:start="2163:43" pos:end="2163:43"><literal type="number" pos:start="2163:43" pos:end="2163:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2165:19" pos:end="2169:17">else <block pos:start="2165:24" pos:end="2169:17">{<block_content pos:start="2167:21" pos:end="2167:42">

                    <expr_stmt pos:start="2167:21" pos:end="2167:42"><expr pos:start="2167:21" pos:end="2167:41"><name pos:start="2167:21" pos:end="2167:23">tmp</name> <operator pos:start="2167:25" pos:end="2167:25">=</operator> <call pos:start="2167:27" pos:end="2167:41"><name pos:start="2167:27" pos:end="2167:34">load_reg</name><argument_list pos:start="2167:35" pos:end="2167:41">(<argument pos:start="2167:36" pos:end="2167:36"><expr pos:start="2167:36" pos:end="2167:36"><name pos:start="2167:36" pos:end="2167:36">s</name></expr></argument>, <argument pos:start="2167:39" pos:end="2167:40"><expr pos:start="2167:39" pos:end="2167:40"><name pos:start="2167:39" pos:end="2167:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2171:17" pos:end="2171:40"><expr pos:start="2171:17" pos:end="2171:39"><name pos:start="2171:17" pos:end="2171:18">op</name> <operator pos:start="2171:20" pos:end="2171:20">=</operator> <operator pos:start="2171:22" pos:end="2171:22">(</operator><name pos:start="2171:23" pos:end="2171:26">insn</name> <operator pos:start="2171:28" pos:end="2171:29">&gt;&gt;</operator> <literal type="number" pos:start="2171:31" pos:end="2171:32">21</literal><operator pos:start="2171:33" pos:end="2171:33">)</operator> <operator pos:start="2171:35" pos:end="2171:35">&amp;</operator> <literal type="number" pos:start="2171:37" pos:end="2171:39">0xf</literal></expr>;</expr_stmt>

                <if_stmt pos:start="2173:17" pos:end="2177:36"><if pos:start="2173:17" pos:end="2177:36">if <condition pos:start="2173:20" pos:end="2175:63">(<expr pos:start="2173:21" pos:end="2175:62"><call pos:start="2173:21" pos:end="2175:62"><name pos:start="2173:21" pos:end="2173:38">gen_thumb2_data_op</name><argument_list pos:start="2173:39" pos:end="2175:62">(<argument pos:start="2173:40" pos:end="2173:40"><expr pos:start="2173:40" pos:end="2173:40"><name pos:start="2173:40" pos:end="2173:40">s</name></expr></argument>, <argument pos:start="2173:43" pos:end="2173:44"><expr pos:start="2173:43" pos:end="2173:44"><name pos:start="2173:43" pos:end="2173:44">op</name></expr></argument>, <argument pos:start="2173:47" pos:end="2173:69"><expr pos:start="2173:47" pos:end="2173:69"><operator pos:start="2173:47" pos:end="2173:47">(</operator><name pos:start="2173:48" pos:end="2173:51">insn</name> <operator pos:start="2173:53" pos:end="2173:53">&amp;</operator> <operator pos:start="2173:55" pos:end="2173:55">(</operator><literal type="number" pos:start="2173:56" pos:end="2173:56">1</literal> <operator pos:start="2173:58" pos:end="2173:59">&lt;&lt;</operator> <literal type="number" pos:start="2173:61" pos:end="2173:62">20</literal><operator pos:start="2173:63" pos:end="2173:63">)</operator><operator pos:start="2173:64" pos:end="2173:64">)</operator> <operator pos:start="2173:66" pos:end="2173:67">!=</operator> <literal type="number" pos:start="2173:69" pos:end="2173:69">0</literal></expr></argument>,

                                       <argument pos:start="2175:40" pos:end="2175:50"><expr pos:start="2175:40" pos:end="2175:50"><name pos:start="2175:40" pos:end="2175:50">shifter_out</name></expr></argument>, <argument pos:start="2175:53" pos:end="2175:55"><expr pos:start="2175:53" pos:end="2175:55"><name pos:start="2175:53" pos:end="2175:55">tmp</name></expr></argument>, <argument pos:start="2175:58" pos:end="2175:61"><expr pos:start="2175:58" pos:end="2175:61"><name pos:start="2175:58" pos:end="2175:61">tmp2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2177:21" pos:end="2177:36"><block_content pos:start="2177:21" pos:end="2177:36">

                    <goto pos:start="2177:21" pos:end="2177:36">goto <name pos:start="2177:26" pos:end="2177:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="2179:17" pos:end="2179:40"><expr pos:start="2179:17" pos:end="2179:39"><call pos:start="2179:17" pos:end="2179:39"><name pos:start="2179:17" pos:end="2179:33">tcg_temp_free_i32</name><argument_list pos:start="2179:34" pos:end="2179:39">(<argument pos:start="2179:35" pos:end="2179:38"><expr pos:start="2179:35" pos:end="2179:38"><name pos:start="2179:35" pos:end="2179:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2181:17" pos:end="2181:39"><expr pos:start="2181:17" pos:end="2181:38"><name pos:start="2181:17" pos:end="2181:18">rd</name> <operator pos:start="2181:20" pos:end="2181:20">=</operator> <operator pos:start="2181:22" pos:end="2181:22">(</operator><name pos:start="2181:23" pos:end="2181:26">insn</name> <operator pos:start="2181:28" pos:end="2181:29">&gt;&gt;</operator> <literal type="number" pos:start="2181:31" pos:end="2181:31">8</literal><operator pos:start="2181:32" pos:end="2181:32">)</operator> <operator pos:start="2181:34" pos:end="2181:34">&amp;</operator> <literal type="number" pos:start="2181:36" pos:end="2181:38">0xf</literal></expr>;</expr_stmt>

                <if_stmt pos:start="2183:17" pos:end="2191:17"><if pos:start="2183:17" pos:end="2187:17">if <condition pos:start="2183:20" pos:end="2183:29">(<expr pos:start="2183:21" pos:end="2183:28"><name pos:start="2183:21" pos:end="2183:22">rd</name> <operator pos:start="2183:24" pos:end="2183:25">!=</operator> <literal type="number" pos:start="2183:27" pos:end="2183:28">15</literal></expr>)</condition> <block pos:start="2183:31" pos:end="2187:17">{<block_content pos:start="2185:21" pos:end="2185:42">

                    <expr_stmt pos:start="2185:21" pos:end="2185:42"><expr pos:start="2185:21" pos:end="2185:41"><call pos:start="2185:21" pos:end="2185:41"><name pos:start="2185:21" pos:end="2185:29">store_reg</name><argument_list pos:start="2185:30" pos:end="2185:41">(<argument pos:start="2185:31" pos:end="2185:31"><expr pos:start="2185:31" pos:end="2185:31"><name pos:start="2185:31" pos:end="2185:31">s</name></expr></argument>, <argument pos:start="2185:34" pos:end="2185:35"><expr pos:start="2185:34" pos:end="2185:35"><name pos:start="2185:34" pos:end="2185:35">rd</name></expr></argument>, <argument pos:start="2185:38" pos:end="2185:40"><expr pos:start="2185:38" pos:end="2185:40"><name pos:start="2185:38" pos:end="2185:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2187:19" pos:end="2191:17">else <block pos:start="2187:24" pos:end="2191:17">{<block_content pos:start="2189:21" pos:end="2189:43">

                    <expr_stmt pos:start="2189:21" pos:end="2189:43"><expr pos:start="2189:21" pos:end="2189:42"><call pos:start="2189:21" pos:end="2189:42"><name pos:start="2189:21" pos:end="2189:37">tcg_temp_free_i32</name><argument_list pos:start="2189:38" pos:end="2189:42">(<argument pos:start="2189:39" pos:end="2189:41"><expr pos:start="2189:39" pos:end="2189:41"><name pos:start="2189:39" pos:end="2189:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2197:9" pos:end="2197:14">break;</break>

    <case pos:start="2199:5" pos:end="2199:12">case <expr pos:start="2199:10" pos:end="2199:11"><literal type="number" pos:start="2199:10" pos:end="2199:11">12</literal></expr>:</case> <comment type="block" pos:start="2199:14" pos:end="2199:48">/* Load/store single data item.  */</comment>

        <block pos:start="2201:9" pos:end="2527:9">{<block_content pos:start="2203:9" pos:end="2525:9">

        <decl_stmt pos:start="2203:9" pos:end="2203:24"><decl pos:start="2203:9" pos:end="2203:23"><type pos:start="2203:9" pos:end="2203:11"><name pos:start="2203:9" pos:end="2203:11">int</name></type> <name pos:start="2203:13" pos:end="2203:19">postinc</name> <init pos:start="2203:21" pos:end="2203:23">= <expr pos:start="2203:23" pos:end="2203:23"><literal type="number" pos:start="2203:23" pos:end="2203:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="2205:9" pos:end="2205:26"><decl pos:start="2205:9" pos:end="2205:25"><type pos:start="2205:9" pos:end="2205:11"><name pos:start="2205:9" pos:end="2205:11">int</name></type> <name pos:start="2205:13" pos:end="2205:21">writeback</name> <init pos:start="2205:23" pos:end="2205:25">= <expr pos:start="2205:25" pos:end="2205:25"><literal type="number" pos:start="2205:25" pos:end="2205:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="2207:9" pos:end="2207:19"><decl pos:start="2207:9" pos:end="2207:18"><type pos:start="2207:9" pos:end="2207:11"><name pos:start="2207:9" pos:end="2207:11">int</name></type> <name pos:start="2207:13" pos:end="2207:18">memidx</name></decl>;</decl_stmt>

        <if_stmt pos:start="2209:9" pos:end="2219:9"><if pos:start="2209:9" pos:end="2219:9">if <condition pos:start="2209:12" pos:end="2209:46">(<expr pos:start="2209:13" pos:end="2209:45"><operator pos:start="2209:13" pos:end="2209:13">(</operator><name pos:start="2209:14" pos:end="2209:17">insn</name> <operator pos:start="2209:19" pos:end="2209:19">&amp;</operator> <literal type="number" pos:start="2209:21" pos:end="2209:30">0x01100000</literal><operator pos:start="2209:31" pos:end="2209:31">)</operator> <operator pos:start="2209:33" pos:end="2209:34">==</operator> <literal type="number" pos:start="2209:36" pos:end="2209:45">0x01000000</literal></expr>)</condition> <block pos:start="2209:48" pos:end="2219:9">{<block_content pos:start="2211:13" pos:end="2217:18">

            <if_stmt pos:start="2211:13" pos:end="2215:13"><if pos:start="2211:13" pos:end="2215:13">if <condition pos:start="2211:16" pos:end="2211:44">(<expr pos:start="2211:17" pos:end="2211:43"><call pos:start="2211:17" pos:end="2211:43"><name pos:start="2211:17" pos:end="2211:34">disas_neon_ls_insn</name><argument_list pos:start="2211:35" pos:end="2211:43">(<argument pos:start="2211:36" pos:end="2211:36"><expr pos:start="2211:36" pos:end="2211:36"><name pos:start="2211:36" pos:end="2211:36">s</name></expr></argument>, <argument pos:start="2211:39" pos:end="2211:42"><expr pos:start="2211:39" pos:end="2211:42"><name pos:start="2211:39" pos:end="2211:42">insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2211:46" pos:end="2215:13">{<block_content pos:start="2213:17" pos:end="2213:32">

                <goto pos:start="2213:17" pos:end="2213:32">goto <name pos:start="2213:22" pos:end="2213:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="2217:13" pos:end="2217:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2221:9" pos:end="2221:53"><expr pos:start="2221:9" pos:end="2221:52"><name pos:start="2221:9" pos:end="2221:10">op</name> <operator pos:start="2221:12" pos:end="2221:12">=</operator> <operator pos:start="2221:14" pos:end="2221:14">(</operator><operator pos:start="2221:15" pos:end="2221:15">(</operator><name pos:start="2221:16" pos:end="2221:19">insn</name> <operator pos:start="2221:21" pos:end="2221:22">&gt;&gt;</operator> <literal type="number" pos:start="2221:24" pos:end="2221:25">21</literal><operator pos:start="2221:26" pos:end="2221:26">)</operator> <operator pos:start="2221:28" pos:end="2221:28">&amp;</operator> <literal type="number" pos:start="2221:30" pos:end="2221:30">3</literal><operator pos:start="2221:31" pos:end="2221:31">)</operator> <operator pos:start="2221:33" pos:end="2221:33">|</operator> <operator pos:start="2221:35" pos:end="2221:35">(</operator><operator pos:start="2221:36" pos:end="2221:36">(</operator><name pos:start="2221:37" pos:end="2221:40">insn</name> <operator pos:start="2221:42" pos:end="2221:43">&gt;&gt;</operator> <literal type="number" pos:start="2221:45" pos:end="2221:46">22</literal><operator pos:start="2221:47" pos:end="2221:47">)</operator> <operator pos:start="2221:49" pos:end="2221:49">&amp;</operator> <literal type="number" pos:start="2221:51" pos:end="2221:51">4</literal><operator pos:start="2221:52" pos:end="2221:52">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="2223:9" pos:end="2295:9"><if pos:start="2223:9" pos:end="2295:9">if <condition pos:start="2223:12" pos:end="2223:21">(<expr pos:start="2223:13" pos:end="2223:20"><name pos:start="2223:13" pos:end="2223:14">rs</name> <operator pos:start="2223:16" pos:end="2223:17">==</operator> <literal type="number" pos:start="2223:19" pos:end="2223:20">15</literal></expr>)</condition> <block pos:start="2223:23" pos:end="2295:9">{<block_content pos:start="2225:13" pos:end="2293:13">

            <if_stmt pos:start="2225:13" pos:end="2229:13"><if pos:start="2225:13" pos:end="2229:13">if <condition pos:start="2225:16" pos:end="2225:36">(<expr pos:start="2225:17" pos:end="2225:35"><operator pos:start="2225:17" pos:end="2225:17">!</operator><operator pos:start="2225:18" pos:end="2225:18">(</operator><name pos:start="2225:19" pos:end="2225:22">insn</name> <operator pos:start="2225:24" pos:end="2225:24">&amp;</operator> <operator pos:start="2225:26" pos:end="2225:26">(</operator><literal type="number" pos:start="2225:27" pos:end="2225:27">1</literal> <operator pos:start="2225:29" pos:end="2225:30">&lt;&lt;</operator> <literal type="number" pos:start="2225:32" pos:end="2225:33">20</literal><operator pos:start="2225:34" pos:end="2225:34">)</operator><operator pos:start="2225:35" pos:end="2225:35">)</operator></expr>)</condition> <block pos:start="2225:38" pos:end="2229:13">{<block_content pos:start="2227:17" pos:end="2227:32">

                <goto pos:start="2227:17" pos:end="2227:32">goto <name pos:start="2227:22" pos:end="2227:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="2231:13" pos:end="2293:13"><if pos:start="2231:13" pos:end="2293:13">if <condition pos:start="2231:16" pos:end="2231:24">(<expr pos:start="2231:17" pos:end="2231:23"><name pos:start="2231:17" pos:end="2231:18">op</name> <operator pos:start="2231:20" pos:end="2231:21">!=</operator> <literal type="number" pos:start="2231:23" pos:end="2231:23">2</literal></expr>)</condition> <block pos:start="2231:26" pos:end="2293:13">{<block_content pos:start="2255:17" pos:end="2291:25">

                <comment type="block" pos:start="2233:17" pos:end="2253:19">/* Byte or halfword load space with dest == r15 : memory hints.

                 * Catch them early so we don't emit pointless addressing code.

                 * This space is a mix of:

                 *  PLD/PLDW/PLI,  which we implement as NOPs (note that unlike

                 *     the ARM encodings, PLDW space doesn't UNDEF for non-v7MP

                 *     cores)

                 *  unallocated hints, which must be treated as NOPs

                 *  UNPREDICTABLE space, which we NOP or UNDEF depending on

                 *     which is easiest for the decoding logic

                 *  Some space which must UNDEF

                 */</comment>

                <decl_stmt pos:start="2255:17" pos:end="2255:43"><decl pos:start="2255:17" pos:end="2255:42"><type pos:start="2255:17" pos:end="2255:19"><name pos:start="2255:17" pos:end="2255:19">int</name></type> <name pos:start="2255:21" pos:end="2255:23">op1</name> <init pos:start="2255:25" pos:end="2255:42">= <expr pos:start="2255:27" pos:end="2255:42"><operator pos:start="2255:27" pos:end="2255:27">(</operator><name pos:start="2255:28" pos:end="2255:31">insn</name> <operator pos:start="2255:33" pos:end="2255:34">&gt;&gt;</operator> <literal type="number" pos:start="2255:36" pos:end="2255:37">23</literal><operator pos:start="2255:38" pos:end="2255:38">)</operator> <operator pos:start="2255:40" pos:end="2255:40">&amp;</operator> <literal type="number" pos:start="2255:42" pos:end="2255:42">3</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="2257:17" pos:end="2257:45"><decl pos:start="2257:17" pos:end="2257:44"><type pos:start="2257:17" pos:end="2257:19"><name pos:start="2257:17" pos:end="2257:19">int</name></type> <name pos:start="2257:21" pos:end="2257:23">op2</name> <init pos:start="2257:25" pos:end="2257:44">= <expr pos:start="2257:27" pos:end="2257:44"><operator pos:start="2257:27" pos:end="2257:27">(</operator><name pos:start="2257:28" pos:end="2257:31">insn</name> <operator pos:start="2257:33" pos:end="2257:34">&gt;&gt;</operator> <literal type="number" pos:start="2257:36" pos:end="2257:36">6</literal><operator pos:start="2257:37" pos:end="2257:37">)</operator> <operator pos:start="2257:39" pos:end="2257:39">&amp;</operator> <literal type="number" pos:start="2257:41" pos:end="2257:44">0x3f</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="2259:17" pos:end="2263:17"><if pos:start="2259:17" pos:end="2263:17">if <condition pos:start="2259:20" pos:end="2259:27">(<expr pos:start="2259:21" pos:end="2259:26"><name pos:start="2259:21" pos:end="2259:22">op</name> <operator pos:start="2259:24" pos:end="2259:24">&amp;</operator> <literal type="number" pos:start="2259:26" pos:end="2259:26">2</literal></expr>)</condition> <block pos:start="2259:29" pos:end="2263:17">{<block_content pos:start="2261:21" pos:end="2261:36">

                    <goto pos:start="2261:21" pos:end="2261:36">goto <name pos:start="2261:26" pos:end="2261:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="2265:17" pos:end="2275:17"><if pos:start="2265:17" pos:end="2275:17">if <condition pos:start="2265:20" pos:end="2265:29">(<expr pos:start="2265:21" pos:end="2265:28"><name pos:start="2265:21" pos:end="2265:22">rn</name> <operator pos:start="2265:24" pos:end="2265:25">==</operator> <literal type="number" pos:start="2265:27" pos:end="2265:28">15</literal></expr>)</condition> <block pos:start="2265:31" pos:end="2275:17">{<block_content pos:start="2273:21" pos:end="2273:29">

                    <comment type="block" pos:start="2267:21" pos:end="2271:23">/* UNPREDICTABLE, unallocated hint or

                     * PLD/PLDW/PLI (literal)

                     */</comment>

                    <return pos:start="2273:21" pos:end="2273:29">return <expr pos:start="2273:28" pos:end="2273:28"><literal type="number" pos:start="2273:28" pos:end="2273:28">0</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="2277:17" pos:end="2281:17"><if pos:start="2277:17" pos:end="2281:17">if <condition pos:start="2277:20" pos:end="2277:28">(<expr pos:start="2277:21" pos:end="2277:27"><name pos:start="2277:21" pos:end="2277:23">op1</name> <operator pos:start="2277:25" pos:end="2277:25">&amp;</operator> <literal type="number" pos:start="2277:27" pos:end="2277:27">1</literal></expr>)</condition> <block pos:start="2277:30" pos:end="2281:17">{<block_content pos:start="2279:21" pos:end="2279:29">

                    <return pos:start="2279:21" pos:end="2279:29">return <expr pos:start="2279:28" pos:end="2279:28"><literal type="number" pos:start="2279:28" pos:end="2279:28">0</literal></expr>;</return> <comment type="block" pos:start="2279:31" pos:end="2279:68">/* PLD/PLDW/PLI or unallocated hint */</comment>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="2283:17" pos:end="2287:17"><if pos:start="2283:17" pos:end="2287:17">if <condition pos:start="2283:20" pos:end="2283:57">(<expr pos:start="2283:21" pos:end="2283:56"><operator pos:start="2283:21" pos:end="2283:21">(</operator><name pos:start="2283:22" pos:end="2283:24">op2</name> <operator pos:start="2283:26" pos:end="2283:27">==</operator> <literal type="number" pos:start="2283:29" pos:end="2283:29">0</literal><operator pos:start="2283:30" pos:end="2283:30">)</operator> <operator pos:start="2283:32" pos:end="2283:33">||</operator> <operator pos:start="2283:35" pos:end="2283:35">(</operator><operator pos:start="2283:36" pos:end="2283:36">(</operator><name pos:start="2283:37" pos:end="2283:39">op2</name> <operator pos:start="2283:41" pos:end="2283:41">&amp;</operator> <literal type="number" pos:start="2283:43" pos:end="2283:46">0x3c</literal><operator pos:start="2283:47" pos:end="2283:47">)</operator> <operator pos:start="2283:49" pos:end="2283:50">==</operator> <literal type="number" pos:start="2283:52" pos:end="2283:55">0x30</literal><operator pos:start="2283:56" pos:end="2283:56">)</operator></expr>)</condition> <block pos:start="2283:59" pos:end="2287:17">{<block_content pos:start="2285:21" pos:end="2285:29">

                    <return pos:start="2285:21" pos:end="2285:29">return <expr pos:start="2285:28" pos:end="2285:28"><literal type="number" pos:start="2285:28" pos:end="2285:28">0</literal></expr>;</return> <comment type="block" pos:start="2285:31" pos:end="2285:68">/* PLD/PLDW/PLI or unallocated hint */</comment>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="2289:17" pos:end="2289:54">/* UNDEF space, or an UNPREDICTABLE */</comment>

                <return pos:start="2291:17" pos:end="2291:25">return <expr pos:start="2291:24" pos:end="2291:24"><literal type="number" pos:start="2291:24" pos:end="2291:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2297:9" pos:end="2297:34"><expr pos:start="2297:9" pos:end="2297:33"><name pos:start="2297:9" pos:end="2297:14">memidx</name> <operator pos:start="2297:16" pos:end="2297:16">=</operator> <call pos:start="2297:18" pos:end="2297:33"><name pos:start="2297:18" pos:end="2297:30">get_mem_index</name><argument_list pos:start="2297:31" pos:end="2297:33">(<argument pos:start="2297:32" pos:end="2297:32"><expr pos:start="2297:32" pos:end="2297:32"><name pos:start="2297:32" pos:end="2297:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2299:9" pos:end="2413:9"><if pos:start="2299:9" pos:end="2319:9">if <condition pos:start="2299:12" pos:end="2299:21">(<expr pos:start="2299:13" pos:end="2299:20"><name pos:start="2299:13" pos:end="2299:14">rn</name> <operator pos:start="2299:16" pos:end="2299:17">==</operator> <literal type="number" pos:start="2299:19" pos:end="2299:20">15</literal></expr>)</condition> <block pos:start="2299:23" pos:end="2319:9">{<block_content pos:start="2301:13" pos:end="2317:40">

            <expr_stmt pos:start="2301:13" pos:end="2301:38"><expr pos:start="2301:13" pos:end="2301:37"><name pos:start="2301:13" pos:end="2301:16">addr</name> <operator pos:start="2301:18" pos:end="2301:18">=</operator> <call pos:start="2301:20" pos:end="2301:37"><name pos:start="2301:20" pos:end="2301:35">tcg_temp_new_i32</name><argument_list pos:start="2301:36" pos:end="2301:37">()</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="2303:13" pos:end="2303:31">/* PC relative.  */</comment>

            <comment type="block" pos:start="2305:13" pos:end="2305:59">/* s-&gt;pc has already been incremented by 4.  */</comment>

            <expr_stmt pos:start="2307:13" pos:end="2307:37"><expr pos:start="2307:13" pos:end="2307:36"><name pos:start="2307:13" pos:end="2307:15">imm</name> <operator pos:start="2307:17" pos:end="2307:17">=</operator> <name pos:start="2307:19" pos:end="2307:23"><name pos:start="2307:19" pos:end="2307:19">s</name><operator pos:start="2307:20" pos:end="2307:21">-&gt;</operator><name pos:start="2307:22" pos:end="2307:23">pc</name></name> <operator pos:start="2307:25" pos:end="2307:25">&amp;</operator> <literal type="number" pos:start="2307:27" pos:end="2307:36">0xfffffffc</literal></expr>;</expr_stmt>

            <if_stmt pos:start="2309:13" pos:end="2315:36"><if pos:start="2309:13" pos:end="2311:36">if <condition pos:start="2309:16" pos:end="2309:33">(<expr pos:start="2309:17" pos:end="2309:32"><name pos:start="2309:17" pos:end="2309:20">insn</name> <operator pos:start="2309:22" pos:end="2309:22">&amp;</operator> <operator pos:start="2309:24" pos:end="2309:24">(</operator><literal type="number" pos:start="2309:25" pos:end="2309:25">1</literal> <operator pos:start="2309:27" pos:end="2309:28">&lt;&lt;</operator> <literal type="number" pos:start="2309:30" pos:end="2309:31">23</literal><operator pos:start="2309:32" pos:end="2309:32">)</operator></expr>)</condition><block type="pseudo" pos:start="2311:17" pos:end="2311:36"><block_content pos:start="2311:17" pos:end="2311:36">

                <expr_stmt pos:start="2311:17" pos:end="2311:36"><expr pos:start="2311:17" pos:end="2311:35"><name pos:start="2311:17" pos:end="2311:19">imm</name> <operator pos:start="2311:21" pos:end="2311:22">+=</operator> <name pos:start="2311:24" pos:end="2311:27">insn</name> <operator pos:start="2311:29" pos:end="2311:29">&amp;</operator> <literal type="number" pos:start="2311:31" pos:end="2311:35">0xfff</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2313:13" pos:end="2315:36">else<block type="pseudo" pos:start="2315:17" pos:end="2315:36"><block_content pos:start="2315:17" pos:end="2315:36">

                <expr_stmt pos:start="2315:17" pos:end="2315:36"><expr pos:start="2315:17" pos:end="2315:35"><name pos:start="2315:17" pos:end="2315:19">imm</name> <operator pos:start="2315:21" pos:end="2315:22">-=</operator> <name pos:start="2315:24" pos:end="2315:27">insn</name> <operator pos:start="2315:29" pos:end="2315:29">&amp;</operator> <literal type="number" pos:start="2315:31" pos:end="2315:35">0xfff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2317:13" pos:end="2317:40"><expr pos:start="2317:13" pos:end="2317:39"><call pos:start="2317:13" pos:end="2317:39"><name pos:start="2317:13" pos:end="2317:28">tcg_gen_movi_i32</name><argument_list pos:start="2317:29" pos:end="2317:39">(<argument pos:start="2317:30" pos:end="2317:33"><expr pos:start="2317:30" pos:end="2317:33"><name pos:start="2317:30" pos:end="2317:33">addr</name></expr></argument>, <argument pos:start="2317:36" pos:end="2317:38"><expr pos:start="2317:36" pos:end="2317:38"><name pos:start="2317:36" pos:end="2317:38">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2319:11" pos:end="2413:9">else <block pos:start="2319:16" pos:end="2413:9">{<block_content pos:start="2321:13" pos:end="2411:13">

            <expr_stmt pos:start="2321:13" pos:end="2321:35"><expr pos:start="2321:13" pos:end="2321:34"><name pos:start="2321:13" pos:end="2321:16">addr</name> <operator pos:start="2321:18" pos:end="2321:18">=</operator> <call pos:start="2321:20" pos:end="2321:34"><name pos:start="2321:20" pos:end="2321:27">load_reg</name><argument_list pos:start="2321:28" pos:end="2321:34">(<argument pos:start="2321:29" pos:end="2321:29"><expr pos:start="2321:29" pos:end="2321:29"><name pos:start="2321:29" pos:end="2321:29">s</name></expr></argument>, <argument pos:start="2321:32" pos:end="2321:33"><expr pos:start="2321:32" pos:end="2321:33"><name pos:start="2321:32" pos:end="2321:33">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2323:13" pos:end="2411:13"><if pos:start="2323:13" pos:end="2331:13">if <condition pos:start="2323:16" pos:end="2323:33">(<expr pos:start="2323:17" pos:end="2323:32"><name pos:start="2323:17" pos:end="2323:20">insn</name> <operator pos:start="2323:22" pos:end="2323:22">&amp;</operator> <operator pos:start="2323:24" pos:end="2323:24">(</operator><literal type="number" pos:start="2323:25" pos:end="2323:25">1</literal> <operator pos:start="2323:27" pos:end="2323:28">&lt;&lt;</operator> <literal type="number" pos:start="2323:30" pos:end="2323:31">23</literal><operator pos:start="2323:32" pos:end="2323:32">)</operator></expr>)</condition> <block pos:start="2323:35" pos:end="2331:13">{<block_content pos:start="2327:17" pos:end="2329:50">

                <comment type="block" pos:start="2325:17" pos:end="2325:39">/* Positive offset.  */</comment>

                <expr_stmt pos:start="2327:17" pos:end="2327:35"><expr pos:start="2327:17" pos:end="2327:34"><name pos:start="2327:17" pos:end="2327:19">imm</name> <operator pos:start="2327:21" pos:end="2327:21">=</operator> <name pos:start="2327:23" pos:end="2327:26">insn</name> <operator pos:start="2327:28" pos:end="2327:28">&amp;</operator> <literal type="number" pos:start="2327:30" pos:end="2327:34">0xfff</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="2329:17" pos:end="2329:50"><expr pos:start="2329:17" pos:end="2329:49"><call pos:start="2329:17" pos:end="2329:49"><name pos:start="2329:17" pos:end="2329:32">tcg_gen_addi_i32</name><argument_list pos:start="2329:33" pos:end="2329:49">(<argument pos:start="2329:34" pos:end="2329:37"><expr pos:start="2329:34" pos:end="2329:37"><name pos:start="2329:34" pos:end="2329:37">addr</name></expr></argument>, <argument pos:start="2329:40" pos:end="2329:43"><expr pos:start="2329:40" pos:end="2329:43"><name pos:start="2329:40" pos:end="2329:43">addr</name></expr></argument>, <argument pos:start="2329:46" pos:end="2329:48"><expr pos:start="2329:46" pos:end="2329:48"><name pos:start="2329:46" pos:end="2329:48">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2331:15" pos:end="2411:13">else <block pos:start="2331:20" pos:end="2411:13">{<block_content pos:start="2333:17" pos:end="2409:17">

                <expr_stmt pos:start="2333:17" pos:end="2333:34"><expr pos:start="2333:17" pos:end="2333:33"><name pos:start="2333:17" pos:end="2333:19">imm</name> <operator pos:start="2333:21" pos:end="2333:21">=</operator> <name pos:start="2333:23" pos:end="2333:26">insn</name> <operator pos:start="2333:28" pos:end="2333:28">&amp;</operator> <literal type="number" pos:start="2333:30" pos:end="2333:33">0xff</literal></expr>;</expr_stmt>

                <switch pos:start="2335:17" pos:end="2409:17">switch <condition pos:start="2335:24" pos:end="2335:42">(<expr pos:start="2335:25" pos:end="2335:41"><operator pos:start="2335:25" pos:end="2335:25">(</operator><name pos:start="2335:26" pos:end="2335:29">insn</name> <operator pos:start="2335:31" pos:end="2335:32">&gt;&gt;</operator> <literal type="number" pos:start="2335:34" pos:end="2335:34">8</literal><operator pos:start="2335:35" pos:end="2335:35">)</operator> <operator pos:start="2335:37" pos:end="2335:37">&amp;</operator> <literal type="number" pos:start="2335:39" pos:end="2335:41">0xf</literal></expr>)</condition> <block pos:start="2335:44" pos:end="2409:17">{<block_content pos:start="2337:17" pos:end="2407:36">

                <case pos:start="2337:17" pos:end="2337:25">case <expr pos:start="2337:22" pos:end="2337:24"><literal type="number" pos:start="2337:22" pos:end="2337:24">0x0</literal></expr>:</case> <comment type="block" pos:start="2337:27" pos:end="2337:50">/* Shifted Register.  */</comment>

                    <expr_stmt pos:start="2339:21" pos:end="2339:46"><expr pos:start="2339:21" pos:end="2339:45"><name pos:start="2339:21" pos:end="2339:25">shift</name> <operator pos:start="2339:27" pos:end="2339:27">=</operator> <operator pos:start="2339:29" pos:end="2339:29">(</operator><name pos:start="2339:30" pos:end="2339:33">insn</name> <operator pos:start="2339:35" pos:end="2339:36">&gt;&gt;</operator> <literal type="number" pos:start="2339:38" pos:end="2339:38">4</literal><operator pos:start="2339:39" pos:end="2339:39">)</operator> <operator pos:start="2339:41" pos:end="2339:41">&amp;</operator> <literal type="number" pos:start="2339:43" pos:end="2339:45">0xf</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="2341:21" pos:end="2347:21"><if pos:start="2341:21" pos:end="2347:21">if <condition pos:start="2341:24" pos:end="2341:34">(<expr pos:start="2341:25" pos:end="2341:33"><name pos:start="2341:25" pos:end="2341:29">shift</name> <operator pos:start="2341:31" pos:end="2341:31">&gt;</operator> <literal type="number" pos:start="2341:33" pos:end="2341:33">3</literal></expr>)</condition> <block pos:start="2341:36" pos:end="2347:21">{<block_content pos:start="2343:25" pos:end="2345:40">

                        <expr_stmt pos:start="2343:25" pos:end="2343:48"><expr pos:start="2343:25" pos:end="2343:47"><call pos:start="2343:25" pos:end="2343:47"><name pos:start="2343:25" pos:end="2343:41">tcg_temp_free_i32</name><argument_list pos:start="2343:42" pos:end="2343:47">(<argument pos:start="2343:43" pos:end="2343:46"><expr pos:start="2343:43" pos:end="2343:46"><name pos:start="2343:43" pos:end="2343:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="2345:25" pos:end="2345:40">goto <name pos:start="2345:30" pos:end="2345:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2349:21" pos:end="2349:42"><expr pos:start="2349:21" pos:end="2349:41"><name pos:start="2349:21" pos:end="2349:23">tmp</name> <operator pos:start="2349:25" pos:end="2349:25">=</operator> <call pos:start="2349:27" pos:end="2349:41"><name pos:start="2349:27" pos:end="2349:34">load_reg</name><argument_list pos:start="2349:35" pos:end="2349:41">(<argument pos:start="2349:36" pos:end="2349:36"><expr pos:start="2349:36" pos:end="2349:36"><name pos:start="2349:36" pos:end="2349:36">s</name></expr></argument>, <argument pos:start="2349:39" pos:end="2349:40"><expr pos:start="2349:39" pos:end="2349:40"><name pos:start="2349:39" pos:end="2349:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2351:21" pos:end="2353:58"><if pos:start="2351:21" pos:end="2353:58">if <condition pos:start="2351:24" pos:end="2351:30">(<expr pos:start="2351:25" pos:end="2351:29"><name pos:start="2351:25" pos:end="2351:29">shift</name></expr>)</condition><block type="pseudo" pos:start="2353:25" pos:end="2353:58"><block_content pos:start="2353:25" pos:end="2353:58">

                        <expr_stmt pos:start="2353:25" pos:end="2353:58"><expr pos:start="2353:25" pos:end="2353:57"><call pos:start="2353:25" pos:end="2353:57"><name pos:start="2353:25" pos:end="2353:40">tcg_gen_shli_i32</name><argument_list pos:start="2353:41" pos:end="2353:57">(<argument pos:start="2353:42" pos:end="2353:44"><expr pos:start="2353:42" pos:end="2353:44"><name pos:start="2353:42" pos:end="2353:44">tmp</name></expr></argument>, <argument pos:start="2353:47" pos:end="2353:49"><expr pos:start="2353:47" pos:end="2353:49"><name pos:start="2353:47" pos:end="2353:49">tmp</name></expr></argument>, <argument pos:start="2353:52" pos:end="2353:56"><expr pos:start="2353:52" pos:end="2353:56"><name pos:start="2353:52" pos:end="2353:56">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="2355:21" pos:end="2355:53"><expr pos:start="2355:21" pos:end="2355:52"><call pos:start="2355:21" pos:end="2355:52"><name pos:start="2355:21" pos:end="2355:35">tcg_gen_add_i32</name><argument_list pos:start="2355:36" pos:end="2355:52">(<argument pos:start="2355:37" pos:end="2355:40"><expr pos:start="2355:37" pos:end="2355:40"><name pos:start="2355:37" pos:end="2355:40">addr</name></expr></argument>, <argument pos:start="2355:43" pos:end="2355:46"><expr pos:start="2355:43" pos:end="2355:46"><name pos:start="2355:43" pos:end="2355:46">addr</name></expr></argument>, <argument pos:start="2355:49" pos:end="2355:51"><expr pos:start="2355:49" pos:end="2355:51"><name pos:start="2355:49" pos:end="2355:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2357:21" pos:end="2357:43"><expr pos:start="2357:21" pos:end="2357:42"><call pos:start="2357:21" pos:end="2357:42"><name pos:start="2357:21" pos:end="2357:37">tcg_temp_free_i32</name><argument_list pos:start="2357:38" pos:end="2357:42">(<argument pos:start="2357:39" pos:end="2357:41"><expr pos:start="2357:39" pos:end="2357:41"><name pos:start="2357:39" pos:end="2357:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2359:21" pos:end="2359:26">break;</break>

                <case pos:start="2361:17" pos:end="2361:25">case <expr pos:start="2361:22" pos:end="2361:24"><literal type="number" pos:start="2361:22" pos:end="2361:24">0xc</literal></expr>:</case> <comment type="block" pos:start="2361:27" pos:end="2361:49">/* Negative offset.  */</comment>

                    <expr_stmt pos:start="2363:21" pos:end="2363:55"><expr pos:start="2363:21" pos:end="2363:54"><call pos:start="2363:21" pos:end="2363:54"><name pos:start="2363:21" pos:end="2363:36">tcg_gen_addi_i32</name><argument_list pos:start="2363:37" pos:end="2363:54">(<argument pos:start="2363:38" pos:end="2363:41"><expr pos:start="2363:38" pos:end="2363:41"><name pos:start="2363:38" pos:end="2363:41">addr</name></expr></argument>, <argument pos:start="2363:44" pos:end="2363:47"><expr pos:start="2363:44" pos:end="2363:47"><name pos:start="2363:44" pos:end="2363:47">addr</name></expr></argument>, <argument pos:start="2363:50" pos:end="2363:53"><expr pos:start="2363:50" pos:end="2363:53"><operator pos:start="2363:50" pos:end="2363:50">-</operator><name pos:start="2363:51" pos:end="2363:53">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2365:21" pos:end="2365:26">break;</break>

                <case pos:start="2367:17" pos:end="2367:25">case <expr pos:start="2367:22" pos:end="2367:24"><literal type="number" pos:start="2367:22" pos:end="2367:24">0xe</literal></expr>:</case> <comment type="block" pos:start="2367:27" pos:end="2367:48">/* User privilege.  */</comment>

                    <expr_stmt pos:start="2369:21" pos:end="2369:54"><expr pos:start="2369:21" pos:end="2369:53"><call pos:start="2369:21" pos:end="2369:53"><name pos:start="2369:21" pos:end="2369:36">tcg_gen_addi_i32</name><argument_list pos:start="2369:37" pos:end="2369:53">(<argument pos:start="2369:38" pos:end="2369:41"><expr pos:start="2369:38" pos:end="2369:41"><name pos:start="2369:38" pos:end="2369:41">addr</name></expr></argument>, <argument pos:start="2369:44" pos:end="2369:47"><expr pos:start="2369:44" pos:end="2369:47"><name pos:start="2369:44" pos:end="2369:47">addr</name></expr></argument>, <argument pos:start="2369:50" pos:end="2369:52"><expr pos:start="2369:50" pos:end="2369:52"><name pos:start="2369:50" pos:end="2369:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2371:21" pos:end="2371:55"><expr pos:start="2371:21" pos:end="2371:54"><name pos:start="2371:21" pos:end="2371:26">memidx</name> <operator pos:start="2371:28" pos:end="2371:28">=</operator> <call pos:start="2371:30" pos:end="2371:54"><name pos:start="2371:30" pos:end="2371:51">get_a32_user_mem_index</name><argument_list pos:start="2371:52" pos:end="2371:54">(<argument pos:start="2371:53" pos:end="2371:53"><expr pos:start="2371:53" pos:end="2371:53"><name pos:start="2371:53" pos:end="2371:53">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2373:21" pos:end="2373:26">break;</break>

                <case pos:start="2375:17" pos:end="2375:25">case <expr pos:start="2375:22" pos:end="2375:24"><literal type="number" pos:start="2375:22" pos:end="2375:24">0x9</literal></expr>:</case> <comment type="block" pos:start="2375:27" pos:end="2375:48">/* Post-decrement.  */</comment>

                    <expr_stmt pos:start="2377:21" pos:end="2377:31"><expr pos:start="2377:21" pos:end="2377:30"><name pos:start="2377:21" pos:end="2377:23">imm</name> <operator pos:start="2377:25" pos:end="2377:25">=</operator> <operator pos:start="2377:27" pos:end="2377:27">-</operator><name pos:start="2377:28" pos:end="2377:30">imm</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="2379:21" pos:end="2379:40">/* Fall through.  */</comment>

                <case pos:start="2381:17" pos:end="2381:25">case <expr pos:start="2381:22" pos:end="2381:24"><literal type="number" pos:start="2381:22" pos:end="2381:24">0xb</literal></expr>:</case> <comment type="block" pos:start="2381:27" pos:end="2381:48">/* Post-increment.  */</comment>

                    <expr_stmt pos:start="2383:21" pos:end="2383:32"><expr pos:start="2383:21" pos:end="2383:31"><name pos:start="2383:21" pos:end="2383:27">postinc</name> <operator pos:start="2383:29" pos:end="2383:29">=</operator> <literal type="number" pos:start="2383:31" pos:end="2383:31">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="2385:21" pos:end="2385:34"><expr pos:start="2385:21" pos:end="2385:33"><name pos:start="2385:21" pos:end="2385:29">writeback</name> <operator pos:start="2385:31" pos:end="2385:31">=</operator> <literal type="number" pos:start="2385:33" pos:end="2385:33">1</literal></expr>;</expr_stmt>

                    <break pos:start="2387:21" pos:end="2387:26">break;</break>

                <case pos:start="2389:17" pos:end="2389:25">case <expr pos:start="2389:22" pos:end="2389:24"><literal type="number" pos:start="2389:22" pos:end="2389:24">0xd</literal></expr>:</case> <comment type="block" pos:start="2389:27" pos:end="2389:47">/* Pre-decrement.  */</comment>

                    <expr_stmt pos:start="2391:21" pos:end="2391:31"><expr pos:start="2391:21" pos:end="2391:30"><name pos:start="2391:21" pos:end="2391:23">imm</name> <operator pos:start="2391:25" pos:end="2391:25">=</operator> <operator pos:start="2391:27" pos:end="2391:27">-</operator><name pos:start="2391:28" pos:end="2391:30">imm</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="2393:21" pos:end="2393:40">/* Fall through.  */</comment>

                <case pos:start="2395:17" pos:end="2395:25">case <expr pos:start="2395:22" pos:end="2395:24"><literal type="number" pos:start="2395:22" pos:end="2395:24">0xf</literal></expr>:</case> <comment type="block" pos:start="2395:27" pos:end="2395:47">/* Pre-increment.  */</comment>

                    <expr_stmt pos:start="2397:21" pos:end="2397:54"><expr pos:start="2397:21" pos:end="2397:53"><call pos:start="2397:21" pos:end="2397:53"><name pos:start="2397:21" pos:end="2397:36">tcg_gen_addi_i32</name><argument_list pos:start="2397:37" pos:end="2397:53">(<argument pos:start="2397:38" pos:end="2397:41"><expr pos:start="2397:38" pos:end="2397:41"><name pos:start="2397:38" pos:end="2397:41">addr</name></expr></argument>, <argument pos:start="2397:44" pos:end="2397:47"><expr pos:start="2397:44" pos:end="2397:47"><name pos:start="2397:44" pos:end="2397:47">addr</name></expr></argument>, <argument pos:start="2397:50" pos:end="2397:52"><expr pos:start="2397:50" pos:end="2397:52"><name pos:start="2397:50" pos:end="2397:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2399:21" pos:end="2399:34"><expr pos:start="2399:21" pos:end="2399:33"><name pos:start="2399:21" pos:end="2399:29">writeback</name> <operator pos:start="2399:31" pos:end="2399:31">=</operator> <literal type="number" pos:start="2399:33" pos:end="2399:33">1</literal></expr>;</expr_stmt>

                    <break pos:start="2401:21" pos:end="2401:26">break;</break>

                <default pos:start="2403:17" pos:end="2403:24">default:</default>

                    <expr_stmt pos:start="2405:21" pos:end="2405:44"><expr pos:start="2405:21" pos:end="2405:43"><call pos:start="2405:21" pos:end="2405:43"><name pos:start="2405:21" pos:end="2405:37">tcg_temp_free_i32</name><argument_list pos:start="2405:38" pos:end="2405:43">(<argument pos:start="2405:39" pos:end="2405:42"><expr pos:start="2405:39" pos:end="2405:42"><name pos:start="2405:39" pos:end="2405:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="2407:21" pos:end="2407:36">goto <name pos:start="2407:26" pos:end="2407:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="2415:9" pos:end="2511:9"><if pos:start="2415:9" pos:end="2473:9">if <condition pos:start="2415:12" pos:end="2415:29">(<expr pos:start="2415:13" pos:end="2415:28"><name pos:start="2415:13" pos:end="2415:16">insn</name> <operator pos:start="2415:18" pos:end="2415:18">&amp;</operator> <operator pos:start="2415:20" pos:end="2415:20">(</operator><literal type="number" pos:start="2415:21" pos:end="2415:21">1</literal> <operator pos:start="2415:23" pos:end="2415:24">&lt;&lt;</operator> <literal type="number" pos:start="2415:26" pos:end="2415:27">20</literal><operator pos:start="2415:28" pos:end="2415:28">)</operator></expr>)</condition> <block pos:start="2415:31" pos:end="2473:9">{<block_content pos:start="2419:13" pos:end="2471:13">

            <comment type="block" pos:start="2417:13" pos:end="2417:24">/* Load.  */</comment>

            <expr_stmt pos:start="2419:13" pos:end="2419:37"><expr pos:start="2419:13" pos:end="2419:36"><name pos:start="2419:13" pos:end="2419:15">tmp</name> <operator pos:start="2419:17" pos:end="2419:17">=</operator> <call pos:start="2419:19" pos:end="2419:36"><name pos:start="2419:19" pos:end="2419:34">tcg_temp_new_i32</name><argument_list pos:start="2419:35" pos:end="2419:36">()</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="2421:13" pos:end="2461:13">switch <condition pos:start="2421:20" pos:end="2421:23">(<expr pos:start="2421:21" pos:end="2421:22"><name pos:start="2421:21" pos:end="2421:22">op</name></expr>)</condition> <block pos:start="2421:25" pos:end="2461:13">{<block_content pos:start="2423:13" pos:end="2459:32">

            <case pos:start="2423:13" pos:end="2423:19">case <expr pos:start="2423:18" pos:end="2423:18"><literal type="number" pos:start="2423:18" pos:end="2423:18">0</literal></expr>:</case>

                <expr_stmt pos:start="2425:17" pos:end="2425:49"><expr pos:start="2425:17" pos:end="2425:48"><call pos:start="2425:17" pos:end="2425:48"><name pos:start="2425:17" pos:end="2425:29">gen_aa32_ld8u</name><argument_list pos:start="2425:30" pos:end="2425:48">(<argument pos:start="2425:31" pos:end="2425:33"><expr pos:start="2425:31" pos:end="2425:33"><name pos:start="2425:31" pos:end="2425:33">tmp</name></expr></argument>, <argument pos:start="2425:36" pos:end="2425:39"><expr pos:start="2425:36" pos:end="2425:39"><name pos:start="2425:36" pos:end="2425:39">addr</name></expr></argument>, <argument pos:start="2425:42" pos:end="2425:47"><expr pos:start="2425:42" pos:end="2425:47"><name pos:start="2425:42" pos:end="2425:47">memidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2427:17" pos:end="2427:22">break;</break>

            <case pos:start="2429:13" pos:end="2429:19">case <expr pos:start="2429:18" pos:end="2429:18"><literal type="number" pos:start="2429:18" pos:end="2429:18">4</literal></expr>:</case>

                <expr_stmt pos:start="2431:17" pos:end="2431:49"><expr pos:start="2431:17" pos:end="2431:48"><call pos:start="2431:17" pos:end="2431:48"><name pos:start="2431:17" pos:end="2431:29">gen_aa32_ld8s</name><argument_list pos:start="2431:30" pos:end="2431:48">(<argument pos:start="2431:31" pos:end="2431:33"><expr pos:start="2431:31" pos:end="2431:33"><name pos:start="2431:31" pos:end="2431:33">tmp</name></expr></argument>, <argument pos:start="2431:36" pos:end="2431:39"><expr pos:start="2431:36" pos:end="2431:39"><name pos:start="2431:36" pos:end="2431:39">addr</name></expr></argument>, <argument pos:start="2431:42" pos:end="2431:47"><expr pos:start="2431:42" pos:end="2431:47"><name pos:start="2431:42" pos:end="2431:47">memidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2433:17" pos:end="2433:22">break;</break>

            <case pos:start="2435:13" pos:end="2435:19">case <expr pos:start="2435:18" pos:end="2435:18"><literal type="number" pos:start="2435:18" pos:end="2435:18">1</literal></expr>:</case>

                <expr_stmt pos:start="2437:17" pos:end="2437:50"><expr pos:start="2437:17" pos:end="2437:49"><call pos:start="2437:17" pos:end="2437:49"><name pos:start="2437:17" pos:end="2437:30">gen_aa32_ld16u</name><argument_list pos:start="2437:31" pos:end="2437:49">(<argument pos:start="2437:32" pos:end="2437:34"><expr pos:start="2437:32" pos:end="2437:34"><name pos:start="2437:32" pos:end="2437:34">tmp</name></expr></argument>, <argument pos:start="2437:37" pos:end="2437:40"><expr pos:start="2437:37" pos:end="2437:40"><name pos:start="2437:37" pos:end="2437:40">addr</name></expr></argument>, <argument pos:start="2437:43" pos:end="2437:48"><expr pos:start="2437:43" pos:end="2437:48"><name pos:start="2437:43" pos:end="2437:48">memidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2439:17" pos:end="2439:22">break;</break>

            <case pos:start="2441:13" pos:end="2441:19">case <expr pos:start="2441:18" pos:end="2441:18"><literal type="number" pos:start="2441:18" pos:end="2441:18">5</literal></expr>:</case>

                <expr_stmt pos:start="2443:17" pos:end="2443:50"><expr pos:start="2443:17" pos:end="2443:49"><call pos:start="2443:17" pos:end="2443:49"><name pos:start="2443:17" pos:end="2443:30">gen_aa32_ld16s</name><argument_list pos:start="2443:31" pos:end="2443:49">(<argument pos:start="2443:32" pos:end="2443:34"><expr pos:start="2443:32" pos:end="2443:34"><name pos:start="2443:32" pos:end="2443:34">tmp</name></expr></argument>, <argument pos:start="2443:37" pos:end="2443:40"><expr pos:start="2443:37" pos:end="2443:40"><name pos:start="2443:37" pos:end="2443:40">addr</name></expr></argument>, <argument pos:start="2443:43" pos:end="2443:48"><expr pos:start="2443:43" pos:end="2443:48"><name pos:start="2443:43" pos:end="2443:48">memidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2445:17" pos:end="2445:22">break;</break>

            <case pos:start="2447:13" pos:end="2447:19">case <expr pos:start="2447:18" pos:end="2447:18"><literal type="number" pos:start="2447:18" pos:end="2447:18">2</literal></expr>:</case>

                <expr_stmt pos:start="2449:17" pos:end="2449:50"><expr pos:start="2449:17" pos:end="2449:49"><call pos:start="2449:17" pos:end="2449:49"><name pos:start="2449:17" pos:end="2449:30">gen_aa32_ld32u</name><argument_list pos:start="2449:31" pos:end="2449:49">(<argument pos:start="2449:32" pos:end="2449:34"><expr pos:start="2449:32" pos:end="2449:34"><name pos:start="2449:32" pos:end="2449:34">tmp</name></expr></argument>, <argument pos:start="2449:37" pos:end="2449:40"><expr pos:start="2449:37" pos:end="2449:40"><name pos:start="2449:37" pos:end="2449:40">addr</name></expr></argument>, <argument pos:start="2449:43" pos:end="2449:48"><expr pos:start="2449:43" pos:end="2449:48"><name pos:start="2449:43" pos:end="2449:48">memidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2451:17" pos:end="2451:22">break;</break>

            <default pos:start="2453:13" pos:end="2453:20">default:</default>

                <expr_stmt pos:start="2455:17" pos:end="2455:39"><expr pos:start="2455:17" pos:end="2455:38"><call pos:start="2455:17" pos:end="2455:38"><name pos:start="2455:17" pos:end="2455:33">tcg_temp_free_i32</name><argument_list pos:start="2455:34" pos:end="2455:38">(<argument pos:start="2455:35" pos:end="2455:37"><expr pos:start="2455:35" pos:end="2455:37"><name pos:start="2455:35" pos:end="2455:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2457:17" pos:end="2457:40"><expr pos:start="2457:17" pos:end="2457:39"><call pos:start="2457:17" pos:end="2457:39"><name pos:start="2457:17" pos:end="2457:33">tcg_temp_free_i32</name><argument_list pos:start="2457:34" pos:end="2457:39">(<argument pos:start="2457:35" pos:end="2457:38"><expr pos:start="2457:35" pos:end="2457:38"><name pos:start="2457:35" pos:end="2457:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="2459:17" pos:end="2459:32">goto <name pos:start="2459:22" pos:end="2459:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <if_stmt pos:start="2463:13" pos:end="2471:13"><if pos:start="2463:13" pos:end="2467:13">if <condition pos:start="2463:16" pos:end="2463:25">(<expr pos:start="2463:17" pos:end="2463:24"><name pos:start="2463:17" pos:end="2463:18">rs</name> <operator pos:start="2463:20" pos:end="2463:21">==</operator> <literal type="number" pos:start="2463:23" pos:end="2463:24">15</literal></expr>)</condition> <block pos:start="2463:27" pos:end="2467:13">{<block_content pos:start="2465:17" pos:end="2465:31">

                <expr_stmt pos:start="2465:17" pos:end="2465:31"><expr pos:start="2465:17" pos:end="2465:30"><call pos:start="2465:17" pos:end="2465:30"><name pos:start="2465:17" pos:end="2465:22">gen_bx</name><argument_list pos:start="2465:23" pos:end="2465:30">(<argument pos:start="2465:24" pos:end="2465:24"><expr pos:start="2465:24" pos:end="2465:24"><name pos:start="2465:24" pos:end="2465:24">s</name></expr></argument>, <argument pos:start="2465:27" pos:end="2465:29"><expr pos:start="2465:27" pos:end="2465:29"><name pos:start="2465:27" pos:end="2465:29">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2467:15" pos:end="2471:13">else <block pos:start="2467:20" pos:end="2471:13">{<block_content pos:start="2469:17" pos:end="2469:38">

                <expr_stmt pos:start="2469:17" pos:end="2469:38"><expr pos:start="2469:17" pos:end="2469:37"><call pos:start="2469:17" pos:end="2469:37"><name pos:start="2469:17" pos:end="2469:25">store_reg</name><argument_list pos:start="2469:26" pos:end="2469:37">(<argument pos:start="2469:27" pos:end="2469:27"><expr pos:start="2469:27" pos:end="2469:27"><name pos:start="2469:27" pos:end="2469:27">s</name></expr></argument>, <argument pos:start="2469:30" pos:end="2469:31"><expr pos:start="2469:30" pos:end="2469:31"><name pos:start="2469:30" pos:end="2469:31">rs</name></expr></argument>, <argument pos:start="2469:34" pos:end="2469:36"><expr pos:start="2469:34" pos:end="2469:36"><name pos:start="2469:34" pos:end="2469:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="2473:11" pos:end="2511:9">else <block pos:start="2473:16" pos:end="2511:9">{<block_content pos:start="2477:13" pos:end="2509:35">

            <comment type="block" pos:start="2475:13" pos:end="2475:25">/* Store.  */</comment>

            <expr_stmt pos:start="2477:13" pos:end="2477:34"><expr pos:start="2477:13" pos:end="2477:33"><name pos:start="2477:13" pos:end="2477:15">tmp</name> <operator pos:start="2477:17" pos:end="2477:17">=</operator> <call pos:start="2477:19" pos:end="2477:33"><name pos:start="2477:19" pos:end="2477:26">load_reg</name><argument_list pos:start="2477:27" pos:end="2477:33">(<argument pos:start="2477:28" pos:end="2477:28"><expr pos:start="2477:28" pos:end="2477:28"><name pos:start="2477:28" pos:end="2477:28">s</name></expr></argument>, <argument pos:start="2477:31" pos:end="2477:32"><expr pos:start="2477:31" pos:end="2477:32"><name pos:start="2477:31" pos:end="2477:32">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="2479:13" pos:end="2507:13">switch <condition pos:start="2479:20" pos:end="2479:23">(<expr pos:start="2479:21" pos:end="2479:22"><name pos:start="2479:21" pos:end="2479:22">op</name></expr>)</condition> <block pos:start="2479:25" pos:end="2507:13">{<block_content pos:start="2481:13" pos:end="2505:32">

            <case pos:start="2481:13" pos:end="2481:19">case <expr pos:start="2481:18" pos:end="2481:18"><literal type="number" pos:start="2481:18" pos:end="2481:18">0</literal></expr>:</case>

                <expr_stmt pos:start="2483:17" pos:end="2483:48"><expr pos:start="2483:17" pos:end="2483:47"><call pos:start="2483:17" pos:end="2483:47"><name pos:start="2483:17" pos:end="2483:28">gen_aa32_st8</name><argument_list pos:start="2483:29" pos:end="2483:47">(<argument pos:start="2483:30" pos:end="2483:32"><expr pos:start="2483:30" pos:end="2483:32"><name pos:start="2483:30" pos:end="2483:32">tmp</name></expr></argument>, <argument pos:start="2483:35" pos:end="2483:38"><expr pos:start="2483:35" pos:end="2483:38"><name pos:start="2483:35" pos:end="2483:38">addr</name></expr></argument>, <argument pos:start="2483:41" pos:end="2483:46"><expr pos:start="2483:41" pos:end="2483:46"><name pos:start="2483:41" pos:end="2483:46">memidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2485:17" pos:end="2485:22">break;</break>

            <case pos:start="2487:13" pos:end="2487:19">case <expr pos:start="2487:18" pos:end="2487:18"><literal type="number" pos:start="2487:18" pos:end="2487:18">1</literal></expr>:</case>

                <expr_stmt pos:start="2489:17" pos:end="2489:49"><expr pos:start="2489:17" pos:end="2489:48"><call pos:start="2489:17" pos:end="2489:48"><name pos:start="2489:17" pos:end="2489:29">gen_aa32_st16</name><argument_list pos:start="2489:30" pos:end="2489:48">(<argument pos:start="2489:31" pos:end="2489:33"><expr pos:start="2489:31" pos:end="2489:33"><name pos:start="2489:31" pos:end="2489:33">tmp</name></expr></argument>, <argument pos:start="2489:36" pos:end="2489:39"><expr pos:start="2489:36" pos:end="2489:39"><name pos:start="2489:36" pos:end="2489:39">addr</name></expr></argument>, <argument pos:start="2489:42" pos:end="2489:47"><expr pos:start="2489:42" pos:end="2489:47"><name pos:start="2489:42" pos:end="2489:47">memidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2491:17" pos:end="2491:22">break;</break>

            <case pos:start="2493:13" pos:end="2493:19">case <expr pos:start="2493:18" pos:end="2493:18"><literal type="number" pos:start="2493:18" pos:end="2493:18">2</literal></expr>:</case>

                <expr_stmt pos:start="2495:17" pos:end="2495:49"><expr pos:start="2495:17" pos:end="2495:48"><call pos:start="2495:17" pos:end="2495:48"><name pos:start="2495:17" pos:end="2495:29">gen_aa32_st32</name><argument_list pos:start="2495:30" pos:end="2495:48">(<argument pos:start="2495:31" pos:end="2495:33"><expr pos:start="2495:31" pos:end="2495:33"><name pos:start="2495:31" pos:end="2495:33">tmp</name></expr></argument>, <argument pos:start="2495:36" pos:end="2495:39"><expr pos:start="2495:36" pos:end="2495:39"><name pos:start="2495:36" pos:end="2495:39">addr</name></expr></argument>, <argument pos:start="2495:42" pos:end="2495:47"><expr pos:start="2495:42" pos:end="2495:47"><name pos:start="2495:42" pos:end="2495:47">memidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2497:17" pos:end="2497:22">break;</break>

            <default pos:start="2499:13" pos:end="2499:20">default:</default>

                <expr_stmt pos:start="2501:17" pos:end="2501:39"><expr pos:start="2501:17" pos:end="2501:38"><call pos:start="2501:17" pos:end="2501:38"><name pos:start="2501:17" pos:end="2501:33">tcg_temp_free_i32</name><argument_list pos:start="2501:34" pos:end="2501:38">(<argument pos:start="2501:35" pos:end="2501:37"><expr pos:start="2501:35" pos:end="2501:37"><name pos:start="2501:35" pos:end="2501:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2503:17" pos:end="2503:40"><expr pos:start="2503:17" pos:end="2503:39"><call pos:start="2503:17" pos:end="2503:39"><name pos:start="2503:17" pos:end="2503:33">tcg_temp_free_i32</name><argument_list pos:start="2503:34" pos:end="2503:39">(<argument pos:start="2503:35" pos:end="2503:38"><expr pos:start="2503:35" pos:end="2503:38"><name pos:start="2503:35" pos:end="2503:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="2505:17" pos:end="2505:32">goto <name pos:start="2505:22" pos:end="2505:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <expr_stmt pos:start="2509:13" pos:end="2509:35"><expr pos:start="2509:13" pos:end="2509:34"><call pos:start="2509:13" pos:end="2509:34"><name pos:start="2509:13" pos:end="2509:29">tcg_temp_free_i32</name><argument_list pos:start="2509:30" pos:end="2509:34">(<argument pos:start="2509:31" pos:end="2509:33"><expr pos:start="2509:31" pos:end="2509:33"><name pos:start="2509:31" pos:end="2509:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="2513:9" pos:end="2515:46"><if pos:start="2513:9" pos:end="2515:46">if <condition pos:start="2513:12" pos:end="2513:20">(<expr pos:start="2513:13" pos:end="2513:19"><name pos:start="2513:13" pos:end="2513:19">postinc</name></expr>)</condition><block type="pseudo" pos:start="2515:13" pos:end="2515:46"><block_content pos:start="2515:13" pos:end="2515:46">

            <expr_stmt pos:start="2515:13" pos:end="2515:46"><expr pos:start="2515:13" pos:end="2515:45"><call pos:start="2515:13" pos:end="2515:45"><name pos:start="2515:13" pos:end="2515:28">tcg_gen_addi_i32</name><argument_list pos:start="2515:29" pos:end="2515:45">(<argument pos:start="2515:30" pos:end="2515:33"><expr pos:start="2515:30" pos:end="2515:33"><name pos:start="2515:30" pos:end="2515:33">addr</name></expr></argument>, <argument pos:start="2515:36" pos:end="2515:39"><expr pos:start="2515:36" pos:end="2515:39"><name pos:start="2515:36" pos:end="2515:39">addr</name></expr></argument>, <argument pos:start="2515:42" pos:end="2515:44"><expr pos:start="2515:42" pos:end="2515:44"><name pos:start="2515:42" pos:end="2515:44">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="2517:9" pos:end="2525:9"><if pos:start="2517:9" pos:end="2521:9">if <condition pos:start="2517:12" pos:end="2517:22">(<expr pos:start="2517:13" pos:end="2517:21"><name pos:start="2517:13" pos:end="2517:21">writeback</name></expr>)</condition> <block pos:start="2517:24" pos:end="2521:9">{<block_content pos:start="2519:13" pos:end="2519:35">

            <expr_stmt pos:start="2519:13" pos:end="2519:35"><expr pos:start="2519:13" pos:end="2519:34"><call pos:start="2519:13" pos:end="2519:34"><name pos:start="2519:13" pos:end="2519:21">store_reg</name><argument_list pos:start="2519:22" pos:end="2519:34">(<argument pos:start="2519:23" pos:end="2519:23"><expr pos:start="2519:23" pos:end="2519:23"><name pos:start="2519:23" pos:end="2519:23">s</name></expr></argument>, <argument pos:start="2519:26" pos:end="2519:27"><expr pos:start="2519:26" pos:end="2519:27"><name pos:start="2519:26" pos:end="2519:27">rn</name></expr></argument>, <argument pos:start="2519:30" pos:end="2519:33"><expr pos:start="2519:30" pos:end="2519:33"><name pos:start="2519:30" pos:end="2519:33">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2521:11" pos:end="2525:9">else <block pos:start="2521:16" pos:end="2525:9">{<block_content pos:start="2523:13" pos:end="2523:36">

            <expr_stmt pos:start="2523:13" pos:end="2523:36"><expr pos:start="2523:13" pos:end="2523:35"><call pos:start="2523:13" pos:end="2523:35"><name pos:start="2523:13" pos:end="2523:29">tcg_temp_free_i32</name><argument_list pos:start="2523:30" pos:end="2523:35">(<argument pos:start="2523:31" pos:end="2523:34"><expr pos:start="2523:31" pos:end="2523:34"><name pos:start="2523:31" pos:end="2523:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2529:9" pos:end="2529:14">break;</break>

    <default pos:start="2531:5" pos:end="2531:12">default:</default>

        <goto pos:start="2533:9" pos:end="2533:24">goto <name pos:start="2533:14" pos:end="2533:23">illegal_op</name>;</goto>

    </block_content>}</block></switch>

    <return pos:start="2537:5" pos:end="2537:13">return <expr pos:start="2537:12" pos:end="2537:12"><literal type="number" pos:start="2537:12" pos:end="2537:12">0</literal></expr>;</return>

<label pos:start="2539:1" pos:end="2539:11"><name pos:start="2539:1" pos:end="2539:10">illegal_op</name>:</label>

    <return pos:start="2541:5" pos:end="2541:13">return <expr pos:start="2541:12" pos:end="2541:12"><literal type="number" pos:start="2541:12" pos:end="2541:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
