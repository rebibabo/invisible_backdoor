<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26272.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">helper_iret_protected</name><parameter_list pos:start="1:27" pos:end="1:51">(<parameter pos:start="1:28" pos:end="1:36"><decl pos:start="1:28" pos:end="1:36"><type pos:start="1:28" pos:end="1:36"><name pos:start="1:28" pos:end="1:30">int</name></type> <name pos:start="1:32" pos:end="1:36">shift</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:50">next_eip</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="64:0">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:20">tss_selector</name></decl>, <decl pos:start="5:23" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:23" pos:end="5:26">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:15">e1</name></decl>, <decl pos:start="7:18" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:18" pos:end="7:19">e2</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:31">/* specific case for TSS */</comment>

    <if_stmt pos:start="13:5" pos:end="47:5"><if pos:start="13:5" pos:end="43:5">if <condition pos:start="13:8" pos:end="13:30">(<expr pos:start="13:9" pos:end="13:29"><name pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:11">env</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:19">eflags</name></name> <operator pos:start="13:21" pos:end="13:21">&amp;</operator> <name pos:start="13:23" pos:end="13:29">NT_MASK</name></expr>)</condition> <block pos:start="13:32" pos:end="43:5">{<block_content pos:start="17:9" pos:end="41:68">

<cpp:ifdef pos:start="15:1" pos:end="15:20">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:20">TARGET_X86_64</name></cpp:ifdef>

        <if_stmt pos:start="17:9" pos:end="22:0"><if pos:start="17:9" pos:end="22:0">if <condition pos:start="17:12" pos:end="17:38">(<expr pos:start="17:13" pos:end="17:37"><name pos:start="17:13" pos:end="17:23"><name pos:start="17:13" pos:end="17:15">env</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:23">hflags</name></name> <operator pos:start="17:25" pos:end="17:25">&amp;</operator> <name pos:start="17:27" pos:end="17:37">HF_LMA_MASK</name></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="22:0"><block_content pos:start="19:13" pos:end="22:0">

            <expr_stmt pos:start="19:13" pos:end="22:0"><expr pos:start="19:13" pos:end="19:46"><call pos:start="19:13" pos:end="19:46"><name pos:start="19:13" pos:end="19:31">raise_exception_err</name><argument_list pos:start="19:32" pos:end="19:46">(<argument pos:start="19:33" pos:end="19:42"><expr pos:start="19:33" pos:end="19:42"><name pos:start="19:33" pos:end="19:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="19:45" pos:end="19:45"><expr pos:start="19:45" pos:end="19:45"><literal type="number" pos:start="19:45" pos:end="19:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="23:9" pos:end="23:53"><expr pos:start="23:9" pos:end="23:52"><name pos:start="23:9" pos:end="23:20">tss_selector</name> <operator pos:start="23:22" pos:end="23:22">=</operator> <call pos:start="23:24" pos:end="23:52"><name pos:start="23:24" pos:end="23:34">lduw_kernel</name><argument_list pos:start="23:35" pos:end="23:52">(<argument pos:start="23:36" pos:end="23:51"><expr pos:start="23:36" pos:end="23:51"><name pos:start="23:36" pos:end="23:47"><name pos:start="23:36" pos:end="23:38">env</name><operator pos:start="23:39" pos:end="23:40">-&gt;</operator><name pos:start="23:41" pos:end="23:42">tr</name><operator pos:start="23:43" pos:end="23:43">.</operator><name pos:start="23:44" pos:end="23:47">base</name></name> <operator pos:start="23:49" pos:end="23:49">+</operator> <literal type="number" pos:start="23:51" pos:end="23:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="27:67"><if pos:start="25:9" pos:end="27:67">if <condition pos:start="25:12" pos:end="25:29">(<expr pos:start="25:13" pos:end="25:28"><name pos:start="25:13" pos:end="25:24">tss_selector</name> <operator pos:start="25:26" pos:end="25:26">&amp;</operator> <literal type="number" pos:start="25:28" pos:end="25:28">4</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:67"><block_content pos:start="27:13" pos:end="27:67">

            <expr_stmt pos:start="27:13" pos:end="27:67"><expr pos:start="27:13" pos:end="27:66"><call pos:start="27:13" pos:end="27:66"><name pos:start="27:13" pos:end="27:31">raise_exception_err</name><argument_list pos:start="27:32" pos:end="27:66">(<argument pos:start="27:33" pos:end="27:42"><expr pos:start="27:33" pos:end="27:42"><name pos:start="27:33" pos:end="27:42">EXCP0A_TSS</name></expr></argument>, <argument pos:start="27:45" pos:end="27:65"><expr pos:start="27:45" pos:end="27:65"><name pos:start="27:45" pos:end="27:56">tss_selector</name> <operator pos:start="27:58" pos:end="27:58">&amp;</operator> <literal type="number" pos:start="27:60" pos:end="27:65">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="31:67"><if pos:start="29:9" pos:end="31:67">if <condition pos:start="29:12" pos:end="29:54">(<expr pos:start="29:13" pos:end="29:53"><call pos:start="29:13" pos:end="29:48"><name pos:start="29:13" pos:end="29:24">load_segment</name><argument_list pos:start="29:25" pos:end="29:48">(<argument pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:28"><operator pos:start="29:26" pos:end="29:26">&amp;</operator><name pos:start="29:27" pos:end="29:28">e1</name></expr></argument>, <argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><operator pos:start="29:31" pos:end="29:31">&amp;</operator><name pos:start="29:32" pos:end="29:33">e2</name></expr></argument>, <argument pos:start="29:36" pos:end="29:47"><expr pos:start="29:36" pos:end="29:47"><name pos:start="29:36" pos:end="29:47">tss_selector</name></expr></argument>)</argument_list></call> <operator pos:start="29:50" pos:end="29:51">!=</operator> <literal type="number" pos:start="29:53" pos:end="29:53">0</literal></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:67"><block_content pos:start="31:13" pos:end="31:67">

            <expr_stmt pos:start="31:13" pos:end="31:67"><expr pos:start="31:13" pos:end="31:66"><call pos:start="31:13" pos:end="31:66"><name pos:start="31:13" pos:end="31:31">raise_exception_err</name><argument_list pos:start="31:32" pos:end="31:66">(<argument pos:start="31:33" pos:end="31:42"><expr pos:start="31:33" pos:end="31:42"><name pos:start="31:33" pos:end="31:42">EXCP0A_TSS</name></expr></argument>, <argument pos:start="31:45" pos:end="31:65"><expr pos:start="31:45" pos:end="31:65"><name pos:start="31:45" pos:end="31:56">tss_selector</name> <operator pos:start="31:58" pos:end="31:58">&amp;</operator> <literal type="number" pos:start="31:60" pos:end="31:65">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:12">type</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <operator pos:start="33:16" pos:end="33:16">(</operator><name pos:start="33:17" pos:end="33:18">e2</name> <operator pos:start="33:20" pos:end="33:21">&gt;&gt;</operator> <name pos:start="33:23" pos:end="33:37">DESC_TYPE_SHIFT</name><operator pos:start="33:38" pos:end="33:38">)</operator> <operator pos:start="33:40" pos:end="33:40">&amp;</operator> <literal type="number" pos:start="33:42" pos:end="33:45">0x17</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="35:9" pos:end="35:54">/* NOTE: we check both segment and busy TSS */</comment>

        <if_stmt pos:start="37:9" pos:end="39:67"><if pos:start="37:9" pos:end="39:67">if <condition pos:start="37:12" pos:end="37:22">(<expr pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:16">type</name> <operator pos:start="37:18" pos:end="37:19">!=</operator> <literal type="number" pos:start="37:21" pos:end="37:21">3</literal></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:67"><block_content pos:start="39:13" pos:end="39:67">

            <expr_stmt pos:start="39:13" pos:end="39:67"><expr pos:start="39:13" pos:end="39:66"><call pos:start="39:13" pos:end="39:66"><name pos:start="39:13" pos:end="39:31">raise_exception_err</name><argument_list pos:start="39:32" pos:end="39:66">(<argument pos:start="39:33" pos:end="39:42"><expr pos:start="39:33" pos:end="39:42"><name pos:start="39:33" pos:end="39:42">EXCP0A_TSS</name></expr></argument>, <argument pos:start="39:45" pos:end="39:65"><expr pos:start="39:45" pos:end="39:65"><name pos:start="39:45" pos:end="39:56">tss_selector</name> <operator pos:start="39:58" pos:end="39:58">&amp;</operator> <literal type="number" pos:start="39:60" pos:end="39:65">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:68"><expr pos:start="41:9" pos:end="41:67"><call pos:start="41:9" pos:end="41:67"><name pos:start="41:9" pos:end="41:18">switch_tss</name><argument_list pos:start="41:19" pos:end="41:67">(<argument pos:start="41:20" pos:end="41:31"><expr pos:start="41:20" pos:end="41:31"><name pos:start="41:20" pos:end="41:31">tss_selector</name></expr></argument>, <argument pos:start="41:34" pos:end="41:35"><expr pos:start="41:34" pos:end="41:35"><name pos:start="41:34" pos:end="41:35">e1</name></expr></argument>, <argument pos:start="41:38" pos:end="41:39"><expr pos:start="41:38" pos:end="41:39"><name pos:start="41:38" pos:end="41:39">e2</name></expr></argument>, <argument pos:start="41:42" pos:end="41:56"><expr pos:start="41:42" pos:end="41:56"><name pos:start="41:42" pos:end="41:56">SWITCH_TSS_IRET</name></expr></argument>, <argument pos:start="41:59" pos:end="41:66"><expr pos:start="41:59" pos:end="41:66"><name pos:start="41:59" pos:end="41:66">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="47:5">else <block pos:start="43:12" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:42">

        <expr_stmt pos:start="45:9" pos:end="45:42"><expr pos:start="45:9" pos:end="45:41"><call pos:start="45:9" pos:end="45:41"><name pos:start="45:9" pos:end="45:28">helper_ret_protected</name><argument_list pos:start="45:29" pos:end="45:41">(<argument pos:start="45:30" pos:end="45:34"><expr pos:start="45:30" pos:end="45:34"><name pos:start="45:30" pos:end="45:34">shift</name></expr></argument>, <argument pos:start="45:37" pos:end="45:37"><expr pos:start="45:37" pos:end="45:37"><literal type="number" pos:start="45:37" pos:end="45:37">1</literal></expr></argument>, <argument pos:start="45:40" pos:end="45:40"><expr pos:start="45:40" pos:end="45:40"><literal type="number" pos:start="45:40" pos:end="45:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:33"><name pos:start="49:5" pos:end="49:16"><name pos:start="49:5" pos:end="49:7">env</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:16">hflags2</name></name> <operator pos:start="49:18" pos:end="49:19">&amp;=</operator> <operator pos:start="49:21" pos:end="49:21">~</operator><name pos:start="49:22" pos:end="49:33">HF2_NMI_MASK</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="51:1" pos:end="51:19">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:19">CONFIG_KQEMU</name></cpp:ifdef>

    <if_stmt pos:start="53:5" pos:end="64:0"><if pos:start="53:5" pos:end="64:0">if <condition pos:start="53:8" pos:end="53:25">(<expr pos:start="53:9" pos:end="53:24"><call pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:19">kqemu_is_ok</name><argument_list pos:start="53:20" pos:end="53:24">(<argument pos:start="53:21" pos:end="53:23"><expr pos:start="53:21" pos:end="53:23"><name pos:start="53:21" pos:end="53:23">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:27" pos:end="64:0">{<block_content pos:start="55:9" pos:end="59:24">

        <expr_stmt pos:start="55:9" pos:end="55:29"><expr pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:13">CC_OP</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <name pos:start="55:17" pos:end="55:28">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:34"><expr pos:start="57:9" pos:end="57:33"><name pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:11">env</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:28">exception_index</name></name> <operator pos:start="57:30" pos:end="57:30">=</operator> <operator pos:start="57:32" pos:end="57:32">-</operator><literal type="number" pos:start="57:33" pos:end="57:33">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:24"><expr pos:start="59:9" pos:end="59:23"><call pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:21">cpu_loop_exit</name><argument_list pos:start="59:22" pos:end="59:23">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
