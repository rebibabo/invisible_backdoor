<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3784.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">address_space_rw</name><parameter_list pos:start="1:22" pos:end="3:45">(<parameter pos:start="1:23" pos:end="1:38"><decl pos:start="1:23" pos:end="1:38"><type pos:start="1:23" pos:end="1:38"><name pos:start="1:23" pos:end="1:34">AddressSpace</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">as</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:63"><decl pos:start="1:41" pos:end="1:63"><type pos:start="1:41" pos:end="1:63"><name pos:start="1:41" pos:end="1:58">target_phys_addr_t</name></type> <name pos:start="1:60" pos:end="1:63">addr</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:77"><decl pos:start="1:66" pos:end="1:77"><type pos:start="1:66" pos:end="1:77"><name pos:start="1:66" pos:end="1:72">uint8_t</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:77">buf</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:29"><decl pos:start="3:23" pos:end="3:29"><type pos:start="3:23" pos:end="3:29"><name pos:start="3:23" pos:end="3:25">int</name></type> <name pos:start="3:27" pos:end="3:29">len</name></decl></parameter>, <parameter pos:start="3:32" pos:end="3:44"><decl pos:start="3:32" pos:end="3:44"><type pos:start="3:32" pos:end="3:44"><name pos:start="3:32" pos:end="3:35">bool</name></type> <name pos:start="3:37" pos:end="3:44">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="169:1">{<block_content pos:start="7:5" pos:end="167:5">

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:26"><name pos:start="7:5" pos:end="7:24">AddressSpaceDispatch</name> <modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:27">d</name> <init pos:start="7:29" pos:end="7:42">= <expr pos:start="7:31" pos:end="7:42"><name pos:start="7:31" pos:end="7:42"><name pos:start="7:31" pos:end="7:32">as</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:42">dispatch</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">l</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:16">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">target_phys_addr_t</name></type> <name pos:start="15:24" pos:end="15:27">page</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:23">MemoryRegionSection</name> <modifier pos:start="17:25" pos:end="17:25">*</modifier></type><name pos:start="17:26" pos:end="17:32">section</name></decl>;</decl_stmt>



    <while pos:start="21:5" pos:end="167:5">while <condition pos:start="21:11" pos:end="21:19">(<expr pos:start="21:12" pos:end="21:18"><name pos:start="21:12" pos:end="21:14">len</name> <operator pos:start="21:16" pos:end="21:16">&gt;</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>)</condition> <block pos:start="21:21" pos:end="167:5">{<block_content pos:start="23:9" pos:end="165:18">

        <expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:12">page</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:19">addr</name> <operator pos:start="23:21" pos:end="23:21">&amp;</operator> <name pos:start="23:23" pos:end="23:38">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:45"><expr pos:start="25:9" pos:end="25:44"><name pos:start="25:9" pos:end="25:9">l</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <operator pos:start="25:13" pos:end="25:13">(</operator><name pos:start="25:14" pos:end="25:17">page</name> <operator pos:start="25:19" pos:end="25:19">+</operator> <name pos:start="25:21" pos:end="25:36">TARGET_PAGE_SIZE</name><operator pos:start="25:37" pos:end="25:37">)</operator> <operator pos:start="25:39" pos:end="25:39">-</operator> <name pos:start="25:41" pos:end="25:44">addr</name></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="29:20"><if pos:start="27:9" pos:end="29:20">if <condition pos:start="27:12" pos:end="27:20">(<expr pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:13">l</name> <operator pos:start="27:15" pos:end="27:15">&gt;</operator> <name pos:start="27:17" pos:end="27:19">len</name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:20"><block_content pos:start="29:13" pos:end="29:20">

            <expr_stmt pos:start="29:13" pos:end="29:20"><expr pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:13">l</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:19">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:62"><expr pos:start="31:9" pos:end="31:61"><name pos:start="31:9" pos:end="31:15">section</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:61"><name pos:start="31:19" pos:end="31:32">phys_page_find</name><argument_list pos:start="31:33" pos:end="31:61">(<argument pos:start="31:34" pos:end="31:34"><expr pos:start="31:34" pos:end="31:34"><name pos:start="31:34" pos:end="31:34">d</name></expr></argument>, <argument pos:start="31:37" pos:end="31:60"><expr pos:start="31:37" pos:end="31:60"><name pos:start="31:37" pos:end="31:40">page</name> <operator pos:start="31:42" pos:end="31:43">&gt;&gt;</operator> <name pos:start="31:45" pos:end="31:60">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="35:9" pos:end="159:9"><if pos:start="35:9" pos:end="99:9">if <condition pos:start="35:12" pos:end="35:21">(<expr pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:20">is_write</name></expr>)</condition> <block pos:start="35:23" pos:end="99:9">{<block_content pos:start="37:13" pos:end="97:13">

            <if_stmt pos:start="37:13" pos:end="97:13"><if pos:start="37:13" pos:end="79:13">if <condition pos:start="37:16" pos:end="37:51">(<expr pos:start="37:17" pos:end="37:50"><operator pos:start="37:17" pos:end="37:17">!</operator><call pos:start="37:18" pos:end="37:50"><name pos:start="37:18" pos:end="37:37">memory_region_is_ram</name><argument_list pos:start="37:38" pos:end="37:50">(<argument pos:start="37:39" pos:end="37:49"><expr pos:start="37:39" pos:end="37:49"><name pos:start="37:39" pos:end="37:49"><name pos:start="37:39" pos:end="37:45">section</name><operator pos:start="37:46" pos:end="37:47">-&gt;</operator><name pos:start="37:48" pos:end="37:49">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:53" pos:end="79:13">{<block_content pos:start="39:17" pos:end="77:17">

                <decl_stmt pos:start="39:17" pos:end="39:41"><decl pos:start="39:17" pos:end="39:40"><type pos:start="39:17" pos:end="39:34"><name pos:start="39:17" pos:end="39:34">target_phys_addr_t</name></type> <name pos:start="39:36" pos:end="39:40">addr1</name></decl>;</decl_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:66"><expr pos:start="41:17" pos:end="41:65"><name pos:start="41:17" pos:end="41:21">addr1</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <call pos:start="41:25" pos:end="41:65"><name pos:start="41:25" pos:end="41:50">memory_region_section_addr</name><argument_list pos:start="41:51" pos:end="41:65">(<argument pos:start="41:52" pos:end="41:58"><expr pos:start="41:52" pos:end="41:58"><name pos:start="41:52" pos:end="41:58">section</name></expr></argument>, <argument pos:start="41:61" pos:end="41:64"><expr pos:start="41:61" pos:end="41:64"><name pos:start="41:61" pos:end="41:64">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="43:17" pos:end="45:36">/* XXX: could force cpu_single_env to NULL to avoid

                   potential bugs */</comment>

                <if_stmt pos:start="47:17" pos:end="77:17"><if pos:start="47:17" pos:end="57:17">if <condition pos:start="47:20" pos:end="47:49">(<expr pos:start="47:21" pos:end="47:48"><name pos:start="47:21" pos:end="47:21">l</name> <operator pos:start="47:23" pos:end="47:24">&gt;=</operator> <literal type="number" pos:start="47:26" pos:end="47:26">4</literal> <operator pos:start="47:28" pos:end="47:29">&amp;&amp;</operator> <operator pos:start="47:31" pos:end="47:31">(</operator><operator pos:start="47:32" pos:end="47:32">(</operator><name pos:start="47:33" pos:end="47:37">addr1</name> <operator pos:start="47:39" pos:end="47:39">&amp;</operator> <literal type="number" pos:start="47:41" pos:end="47:41">3</literal><operator pos:start="47:42" pos:end="47:42">)</operator> <operator pos:start="47:44" pos:end="47:45">==</operator> <literal type="number" pos:start="47:47" pos:end="47:47">0</literal><operator pos:start="47:48" pos:end="47:48">)</operator></expr>)</condition> <block pos:start="47:51" pos:end="57:17">{<block_content pos:start="51:21" pos:end="55:26">

                    <comment type="block" pos:start="49:21" pos:end="49:45">/* 32 bit write access */</comment>

                    <expr_stmt pos:start="51:21" pos:end="51:37"><expr pos:start="51:21" pos:end="51:36"><name pos:start="51:21" pos:end="51:23">val</name> <operator pos:start="51:25" pos:end="51:25">=</operator> <call pos:start="51:27" pos:end="51:36"><name pos:start="51:27" pos:end="51:31">ldl_p</name><argument_list pos:start="51:32" pos:end="51:36">(<argument pos:start="51:33" pos:end="51:35"><expr pos:start="51:33" pos:end="51:35"><name pos:start="51:33" pos:end="51:35">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="53:21" pos:end="53:61"><expr pos:start="53:21" pos:end="53:60"><call pos:start="53:21" pos:end="53:60"><name pos:start="53:21" pos:end="53:32">io_mem_write</name><argument_list pos:start="53:33" pos:end="53:60">(<argument pos:start="53:34" pos:end="53:44"><expr pos:start="53:34" pos:end="53:44"><name pos:start="53:34" pos:end="53:44"><name pos:start="53:34" pos:end="53:40">section</name><operator pos:start="53:41" pos:end="53:42">-&gt;</operator><name pos:start="53:43" pos:end="53:44">mr</name></name></expr></argument>, <argument pos:start="53:47" pos:end="53:51"><expr pos:start="53:47" pos:end="53:51"><name pos:start="53:47" pos:end="53:51">addr1</name></expr></argument>, <argument pos:start="53:54" pos:end="53:56"><expr pos:start="53:54" pos:end="53:56"><name pos:start="53:54" pos:end="53:56">val</name></expr></argument>, <argument pos:start="53:59" pos:end="53:59"><expr pos:start="53:59" pos:end="53:59"><literal type="number" pos:start="53:59" pos:end="53:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="55:21" pos:end="55:26"><expr pos:start="55:21" pos:end="55:25"><name pos:start="55:21" pos:end="55:21">l</name> <operator pos:start="55:23" pos:end="55:23">=</operator> <literal type="number" pos:start="55:25" pos:end="55:25">4</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="57:19" pos:end="67:17">else if <condition pos:start="57:27" pos:end="57:56">(<expr pos:start="57:28" pos:end="57:55"><name pos:start="57:28" pos:end="57:28">l</name> <operator pos:start="57:30" pos:end="57:31">&gt;=</operator> <literal type="number" pos:start="57:33" pos:end="57:33">2</literal> <operator pos:start="57:35" pos:end="57:36">&amp;&amp;</operator> <operator pos:start="57:38" pos:end="57:38">(</operator><operator pos:start="57:39" pos:end="57:39">(</operator><name pos:start="57:40" pos:end="57:44">addr1</name> <operator pos:start="57:46" pos:end="57:46">&amp;</operator> <literal type="number" pos:start="57:48" pos:end="57:48">1</literal><operator pos:start="57:49" pos:end="57:49">)</operator> <operator pos:start="57:51" pos:end="57:52">==</operator> <literal type="number" pos:start="57:54" pos:end="57:54">0</literal><operator pos:start="57:55" pos:end="57:55">)</operator></expr>)</condition> <block pos:start="57:58" pos:end="67:17">{<block_content pos:start="61:21" pos:end="65:26">

                    <comment type="block" pos:start="59:21" pos:end="59:45">/* 16 bit write access */</comment>

                    <expr_stmt pos:start="61:21" pos:end="61:38"><expr pos:start="61:21" pos:end="61:37"><name pos:start="61:21" pos:end="61:23">val</name> <operator pos:start="61:25" pos:end="61:25">=</operator> <call pos:start="61:27" pos:end="61:37"><name pos:start="61:27" pos:end="61:32">lduw_p</name><argument_list pos:start="61:33" pos:end="61:37">(<argument pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><name pos:start="61:34" pos:end="61:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="63:21" pos:end="63:61"><expr pos:start="63:21" pos:end="63:60"><call pos:start="63:21" pos:end="63:60"><name pos:start="63:21" pos:end="63:32">io_mem_write</name><argument_list pos:start="63:33" pos:end="63:60">(<argument pos:start="63:34" pos:end="63:44"><expr pos:start="63:34" pos:end="63:44"><name pos:start="63:34" pos:end="63:44"><name pos:start="63:34" pos:end="63:40">section</name><operator pos:start="63:41" pos:end="63:42">-&gt;</operator><name pos:start="63:43" pos:end="63:44">mr</name></name></expr></argument>, <argument pos:start="63:47" pos:end="63:51"><expr pos:start="63:47" pos:end="63:51"><name pos:start="63:47" pos:end="63:51">addr1</name></expr></argument>, <argument pos:start="63:54" pos:end="63:56"><expr pos:start="63:54" pos:end="63:56"><name pos:start="63:54" pos:end="63:56">val</name></expr></argument>, <argument pos:start="63:59" pos:end="63:59"><expr pos:start="63:59" pos:end="63:59"><literal type="number" pos:start="63:59" pos:end="63:59">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="65:21" pos:end="65:26"><expr pos:start="65:21" pos:end="65:25"><name pos:start="65:21" pos:end="65:21">l</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <literal type="number" pos:start="65:25" pos:end="65:25">2</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="67:19" pos:end="77:17">else <block pos:start="67:24" pos:end="77:17">{<block_content pos:start="71:21" pos:end="75:26">

                    <comment type="block" pos:start="69:21" pos:end="69:44">/* 8 bit write access */</comment>

                    <expr_stmt pos:start="71:21" pos:end="71:38"><expr pos:start="71:21" pos:end="71:37"><name pos:start="71:21" pos:end="71:23">val</name> <operator pos:start="71:25" pos:end="71:25">=</operator> <call pos:start="71:27" pos:end="71:37"><name pos:start="71:27" pos:end="71:32">ldub_p</name><argument_list pos:start="71:33" pos:end="71:37">(<argument pos:start="71:34" pos:end="71:36"><expr pos:start="71:34" pos:end="71:36"><name pos:start="71:34" pos:end="71:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="73:21" pos:end="73:61"><expr pos:start="73:21" pos:end="73:60"><call pos:start="73:21" pos:end="73:60"><name pos:start="73:21" pos:end="73:32">io_mem_write</name><argument_list pos:start="73:33" pos:end="73:60">(<argument pos:start="73:34" pos:end="73:44"><expr pos:start="73:34" pos:end="73:44"><name pos:start="73:34" pos:end="73:44"><name pos:start="73:34" pos:end="73:40">section</name><operator pos:start="73:41" pos:end="73:42">-&gt;</operator><name pos:start="73:43" pos:end="73:44">mr</name></name></expr></argument>, <argument pos:start="73:47" pos:end="73:51"><expr pos:start="73:47" pos:end="73:51"><name pos:start="73:47" pos:end="73:51">addr1</name></expr></argument>, <argument pos:start="73:54" pos:end="73:56"><expr pos:start="73:54" pos:end="73:56"><name pos:start="73:54" pos:end="73:56">val</name></expr></argument>, <argument pos:start="73:59" pos:end="73:59"><expr pos:start="73:59" pos:end="73:59"><literal type="number" pos:start="73:59" pos:end="73:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="75:21" pos:end="75:26"><expr pos:start="75:21" pos:end="75:25"><name pos:start="75:21" pos:end="75:21">l</name> <operator pos:start="75:23" pos:end="75:23">=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="79:15" pos:end="97:13">else if <condition pos:start="79:23" pos:end="79:42">(<expr pos:start="79:24" pos:end="79:41"><operator pos:start="79:24" pos:end="79:24">!</operator><name pos:start="79:25" pos:end="79:41"><name pos:start="79:25" pos:end="79:31">section</name><operator pos:start="79:32" pos:end="79:33">-&gt;</operator><name pos:start="79:34" pos:end="79:41">readonly</name></name></expr>)</condition> <block pos:start="79:44" pos:end="97:13">{<block_content pos:start="81:17" pos:end="95:38">

                <decl_stmt pos:start="81:17" pos:end="81:33"><decl pos:start="81:17" pos:end="81:32"><type pos:start="81:17" pos:end="81:26"><name pos:start="81:17" pos:end="81:26">ram_addr_t</name></type> <name pos:start="81:28" pos:end="81:32">addr1</name></decl>;</decl_stmt>

                <expr_stmt pos:start="83:17" pos:end="85:64"><expr pos:start="83:17" pos:end="85:63"><name pos:start="83:17" pos:end="83:21">addr1</name> <operator pos:start="83:23" pos:end="83:23">=</operator> <call pos:start="83:25" pos:end="83:63"><name pos:start="83:25" pos:end="83:50">memory_region_get_ram_addr</name><argument_list pos:start="83:51" pos:end="83:63">(<argument pos:start="83:52" pos:end="83:62"><expr pos:start="83:52" pos:end="83:62"><name pos:start="83:52" pos:end="83:62"><name pos:start="83:52" pos:end="83:58">section</name><operator pos:start="83:59" pos:end="83:60">-&gt;</operator><name pos:start="83:61" pos:end="83:62">mr</name></name></expr></argument>)</argument_list></call>

                    <operator pos:start="85:21" pos:end="85:21">+</operator> <call pos:start="85:23" pos:end="85:63"><name pos:start="85:23" pos:end="85:48">memory_region_section_addr</name><argument_list pos:start="85:49" pos:end="85:63">(<argument pos:start="85:50" pos:end="85:56"><expr pos:start="85:50" pos:end="85:56"><name pos:start="85:50" pos:end="85:56">section</name></expr></argument>, <argument pos:start="85:59" pos:end="85:62"><expr pos:start="85:59" pos:end="85:62"><name pos:start="85:59" pos:end="85:62">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="87:17" pos:end="87:30">/* RAM case */</comment>

                <expr_stmt pos:start="89:17" pos:end="89:46"><expr pos:start="89:17" pos:end="89:45"><name pos:start="89:17" pos:end="89:19">ptr</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="89:45"><name pos:start="89:23" pos:end="89:38">qemu_get_ram_ptr</name><argument_list pos:start="89:39" pos:end="89:45">(<argument pos:start="89:40" pos:end="89:44"><expr pos:start="89:40" pos:end="89:44"><name pos:start="89:40" pos:end="89:44">addr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:36"><expr pos:start="91:17" pos:end="91:35"><call pos:start="91:17" pos:end="91:35"><name pos:start="91:17" pos:end="91:22">memcpy</name><argument_list pos:start="91:23" pos:end="91:35">(<argument pos:start="91:24" pos:end="91:26"><expr pos:start="91:24" pos:end="91:26"><name pos:start="91:24" pos:end="91:26">ptr</name></expr></argument>, <argument pos:start="91:29" pos:end="91:31"><expr pos:start="91:29" pos:end="91:31"><name pos:start="91:29" pos:end="91:31">buf</name></expr></argument>, <argument pos:start="91:34" pos:end="91:34"><expr pos:start="91:34" pos:end="91:34"><name pos:start="91:34" pos:end="91:34">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:51"><expr pos:start="93:17" pos:end="93:50"><call pos:start="93:17" pos:end="93:50"><name pos:start="93:17" pos:end="93:40">invalidate_and_set_dirty</name><argument_list pos:start="93:41" pos:end="93:50">(<argument pos:start="93:42" pos:end="93:46"><expr pos:start="93:42" pos:end="93:46"><name pos:start="93:42" pos:end="93:46">addr1</name></expr></argument>, <argument pos:start="93:49" pos:end="93:49"><expr pos:start="93:49" pos:end="93:49"><name pos:start="93:49" pos:end="93:49">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:38"><expr pos:start="95:17" pos:end="95:37"><call pos:start="95:17" pos:end="95:37"><name pos:start="95:17" pos:end="95:32">qemu_put_ram_ptr</name><argument_list pos:start="95:33" pos:end="95:37">(<argument pos:start="95:34" pos:end="95:36"><expr pos:start="95:34" pos:end="95:36"><name pos:start="95:34" pos:end="95:36">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="99:11" pos:end="159:9">else <block pos:start="99:16" pos:end="159:9">{<block_content pos:start="101:13" pos:end="157:13">

            <if_stmt pos:start="101:13" pos:end="157:13"><if pos:start="101:13" pos:end="143:13">if <condition pos:start="101:16" pos:end="103:54">(<expr pos:start="101:17" pos:end="103:53"><operator pos:start="101:17" pos:end="101:17">!</operator><operator pos:start="101:18" pos:end="101:18">(</operator><call pos:start="101:19" pos:end="101:51"><name pos:start="101:19" pos:end="101:38">memory_region_is_ram</name><argument_list pos:start="101:39" pos:end="101:51">(<argument pos:start="101:40" pos:end="101:50"><expr pos:start="101:40" pos:end="101:50"><name pos:start="101:40" pos:end="101:50"><name pos:start="101:40" pos:end="101:46">section</name><operator pos:start="101:47" pos:end="101:48">-&gt;</operator><name pos:start="101:49" pos:end="101:50">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="101:53" pos:end="101:54">||</operator>

                  <call pos:start="103:19" pos:end="103:52"><name pos:start="103:19" pos:end="103:39">memory_region_is_romd</name><argument_list pos:start="103:40" pos:end="103:52">(<argument pos:start="103:41" pos:end="103:51"><expr pos:start="103:41" pos:end="103:51"><name pos:start="103:41" pos:end="103:51"><name pos:start="103:41" pos:end="103:47">section</name><operator pos:start="103:48" pos:end="103:49">-&gt;</operator><name pos:start="103:50" pos:end="103:51">mr</name></name></expr></argument>)</argument_list></call><operator pos:start="103:53" pos:end="103:53">)</operator></expr>)</condition> <block pos:start="103:56" pos:end="143:13">{<block_content pos:start="105:17" pos:end="141:17">

                <decl_stmt pos:start="105:17" pos:end="105:41"><decl pos:start="105:17" pos:end="105:40"><type pos:start="105:17" pos:end="105:34"><name pos:start="105:17" pos:end="105:34">target_phys_addr_t</name></type> <name pos:start="105:36" pos:end="105:40">addr1</name></decl>;</decl_stmt>

                <comment type="block" pos:start="107:17" pos:end="107:30">/* I/O case */</comment>

                <expr_stmt pos:start="109:17" pos:end="109:66"><expr pos:start="109:17" pos:end="109:65"><name pos:start="109:17" pos:end="109:21">addr1</name> <operator pos:start="109:23" pos:end="109:23">=</operator> <call pos:start="109:25" pos:end="109:65"><name pos:start="109:25" pos:end="109:50">memory_region_section_addr</name><argument_list pos:start="109:51" pos:end="109:65">(<argument pos:start="109:52" pos:end="109:58"><expr pos:start="109:52" pos:end="109:58"><name pos:start="109:52" pos:end="109:58">section</name></expr></argument>, <argument pos:start="109:61" pos:end="109:64"><expr pos:start="109:61" pos:end="109:64"><name pos:start="109:61" pos:end="109:64">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="111:17" pos:end="141:17"><if pos:start="111:17" pos:end="121:17">if <condition pos:start="111:20" pos:end="111:49">(<expr pos:start="111:21" pos:end="111:48"><name pos:start="111:21" pos:end="111:21">l</name> <operator pos:start="111:23" pos:end="111:24">&gt;=</operator> <literal type="number" pos:start="111:26" pos:end="111:26">4</literal> <operator pos:start="111:28" pos:end="111:29">&amp;&amp;</operator> <operator pos:start="111:31" pos:end="111:31">(</operator><operator pos:start="111:32" pos:end="111:32">(</operator><name pos:start="111:33" pos:end="111:37">addr1</name> <operator pos:start="111:39" pos:end="111:39">&amp;</operator> <literal type="number" pos:start="111:41" pos:end="111:41">3</literal><operator pos:start="111:42" pos:end="111:42">)</operator> <operator pos:start="111:44" pos:end="111:45">==</operator> <literal type="number" pos:start="111:47" pos:end="111:47">0</literal><operator pos:start="111:48" pos:end="111:48">)</operator></expr>)</condition> <block pos:start="111:51" pos:end="121:17">{<block_content pos:start="115:21" pos:end="119:26">

                    <comment type="block" pos:start="113:21" pos:end="113:44">/* 32 bit read access */</comment>

                    <expr_stmt pos:start="115:21" pos:end="115:61"><expr pos:start="115:21" pos:end="115:60"><name pos:start="115:21" pos:end="115:23">val</name> <operator pos:start="115:25" pos:end="115:25">=</operator> <call pos:start="115:27" pos:end="115:60"><name pos:start="115:27" pos:end="115:37">io_mem_read</name><argument_list pos:start="115:38" pos:end="115:60">(<argument pos:start="115:39" pos:end="115:49"><expr pos:start="115:39" pos:end="115:49"><name pos:start="115:39" pos:end="115:49"><name pos:start="115:39" pos:end="115:45">section</name><operator pos:start="115:46" pos:end="115:47">-&gt;</operator><name pos:start="115:48" pos:end="115:49">mr</name></name></expr></argument>, <argument pos:start="115:52" pos:end="115:56"><expr pos:start="115:52" pos:end="115:56"><name pos:start="115:52" pos:end="115:56">addr1</name></expr></argument>, <argument pos:start="115:59" pos:end="115:59"><expr pos:start="115:59" pos:end="115:59"><literal type="number" pos:start="115:59" pos:end="115:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="117:21" pos:end="117:36"><expr pos:start="117:21" pos:end="117:35"><call pos:start="117:21" pos:end="117:35"><name pos:start="117:21" pos:end="117:25">stl_p</name><argument_list pos:start="117:26" pos:end="117:35">(<argument pos:start="117:27" pos:end="117:29"><expr pos:start="117:27" pos:end="117:29"><name pos:start="117:27" pos:end="117:29">buf</name></expr></argument>, <argument pos:start="117:32" pos:end="117:34"><expr pos:start="117:32" pos:end="117:34"><name pos:start="117:32" pos:end="117:34">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:26"><expr pos:start="119:21" pos:end="119:25"><name pos:start="119:21" pos:end="119:21">l</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <literal type="number" pos:start="119:25" pos:end="119:25">4</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="121:19" pos:end="131:17">else if <condition pos:start="121:27" pos:end="121:56">(<expr pos:start="121:28" pos:end="121:55"><name pos:start="121:28" pos:end="121:28">l</name> <operator pos:start="121:30" pos:end="121:31">&gt;=</operator> <literal type="number" pos:start="121:33" pos:end="121:33">2</literal> <operator pos:start="121:35" pos:end="121:36">&amp;&amp;</operator> <operator pos:start="121:38" pos:end="121:38">(</operator><operator pos:start="121:39" pos:end="121:39">(</operator><name pos:start="121:40" pos:end="121:44">addr1</name> <operator pos:start="121:46" pos:end="121:46">&amp;</operator> <literal type="number" pos:start="121:48" pos:end="121:48">1</literal><operator pos:start="121:49" pos:end="121:49">)</operator> <operator pos:start="121:51" pos:end="121:52">==</operator> <literal type="number" pos:start="121:54" pos:end="121:54">0</literal><operator pos:start="121:55" pos:end="121:55">)</operator></expr>)</condition> <block pos:start="121:58" pos:end="131:17">{<block_content pos:start="125:21" pos:end="129:26">

                    <comment type="block" pos:start="123:21" pos:end="123:44">/* 16 bit read access */</comment>

                    <expr_stmt pos:start="125:21" pos:end="125:61"><expr pos:start="125:21" pos:end="125:60"><name pos:start="125:21" pos:end="125:23">val</name> <operator pos:start="125:25" pos:end="125:25">=</operator> <call pos:start="125:27" pos:end="125:60"><name pos:start="125:27" pos:end="125:37">io_mem_read</name><argument_list pos:start="125:38" pos:end="125:60">(<argument pos:start="125:39" pos:end="125:49"><expr pos:start="125:39" pos:end="125:49"><name pos:start="125:39" pos:end="125:49"><name pos:start="125:39" pos:end="125:45">section</name><operator pos:start="125:46" pos:end="125:47">-&gt;</operator><name pos:start="125:48" pos:end="125:49">mr</name></name></expr></argument>, <argument pos:start="125:52" pos:end="125:56"><expr pos:start="125:52" pos:end="125:56"><name pos:start="125:52" pos:end="125:56">addr1</name></expr></argument>, <argument pos:start="125:59" pos:end="125:59"><expr pos:start="125:59" pos:end="125:59"><literal type="number" pos:start="125:59" pos:end="125:59">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="127:21" pos:end="127:36"><expr pos:start="127:21" pos:end="127:35"><call pos:start="127:21" pos:end="127:35"><name pos:start="127:21" pos:end="127:25">stw_p</name><argument_list pos:start="127:26" pos:end="127:35">(<argument pos:start="127:27" pos:end="127:29"><expr pos:start="127:27" pos:end="127:29"><name pos:start="127:27" pos:end="127:29">buf</name></expr></argument>, <argument pos:start="127:32" pos:end="127:34"><expr pos:start="127:32" pos:end="127:34"><name pos:start="127:32" pos:end="127:34">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="129:21" pos:end="129:26"><expr pos:start="129:21" pos:end="129:25"><name pos:start="129:21" pos:end="129:21">l</name> <operator pos:start="129:23" pos:end="129:23">=</operator> <literal type="number" pos:start="129:25" pos:end="129:25">2</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="131:19" pos:end="141:17">else <block pos:start="131:24" pos:end="141:17">{<block_content pos:start="135:21" pos:end="139:26">

                    <comment type="block" pos:start="133:21" pos:end="133:43">/* 8 bit read access */</comment>

                    <expr_stmt pos:start="135:21" pos:end="135:61"><expr pos:start="135:21" pos:end="135:60"><name pos:start="135:21" pos:end="135:23">val</name> <operator pos:start="135:25" pos:end="135:25">=</operator> <call pos:start="135:27" pos:end="135:60"><name pos:start="135:27" pos:end="135:37">io_mem_read</name><argument_list pos:start="135:38" pos:end="135:60">(<argument pos:start="135:39" pos:end="135:49"><expr pos:start="135:39" pos:end="135:49"><name pos:start="135:39" pos:end="135:49"><name pos:start="135:39" pos:end="135:45">section</name><operator pos:start="135:46" pos:end="135:47">-&gt;</operator><name pos:start="135:48" pos:end="135:49">mr</name></name></expr></argument>, <argument pos:start="135:52" pos:end="135:56"><expr pos:start="135:52" pos:end="135:56"><name pos:start="135:52" pos:end="135:56">addr1</name></expr></argument>, <argument pos:start="135:59" pos:end="135:59"><expr pos:start="135:59" pos:end="135:59"><literal type="number" pos:start="135:59" pos:end="135:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="137:21" pos:end="137:36"><expr pos:start="137:21" pos:end="137:35"><call pos:start="137:21" pos:end="137:35"><name pos:start="137:21" pos:end="137:25">stb_p</name><argument_list pos:start="137:26" pos:end="137:35">(<argument pos:start="137:27" pos:end="137:29"><expr pos:start="137:27" pos:end="137:29"><name pos:start="137:27" pos:end="137:29">buf</name></expr></argument>, <argument pos:start="137:32" pos:end="137:34"><expr pos:start="137:32" pos:end="137:34"><name pos:start="137:32" pos:end="137:34">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="139:21" pos:end="139:26"><expr pos:start="139:21" pos:end="139:25"><name pos:start="139:21" pos:end="139:21">l</name> <operator pos:start="139:23" pos:end="139:23">=</operator> <literal type="number" pos:start="139:25" pos:end="139:25">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="143:15" pos:end="157:13">else <block pos:start="143:20" pos:end="157:13">{<block_content pos:start="147:17" pos:end="155:38">

                <comment type="block" pos:start="145:17" pos:end="145:30">/* RAM case */</comment>

                <expr_stmt pos:start="147:17" pos:end="151:75"><expr pos:start="147:17" pos:end="151:74"><name pos:start="147:17" pos:end="147:19">ptr</name> <operator pos:start="147:21" pos:end="147:21">=</operator> <call pos:start="147:23" pos:end="151:74"><name pos:start="147:23" pos:end="147:38">qemu_get_ram_ptr</name><argument_list pos:start="147:39" pos:end="151:74">(<argument pos:start="147:40" pos:end="151:73"><expr pos:start="147:40" pos:end="151:73"><name pos:start="147:40" pos:end="147:60"><name pos:start="147:40" pos:end="147:46">section</name><operator pos:start="147:47" pos:end="147:48">-&gt;</operator><name pos:start="147:49" pos:end="147:50">mr</name><operator pos:start="147:51" pos:end="147:52">-&gt;</operator><name pos:start="147:53" pos:end="147:60">ram_addr</name></name>

                                       <operator pos:start="149:40" pos:end="149:40">+</operator> <call pos:start="149:42" pos:end="151:73"><name pos:start="149:42" pos:end="149:67">memory_region_section_addr</name><argument_list pos:start="149:68" pos:end="151:73">(<argument pos:start="149:69" pos:end="149:75"><expr pos:start="149:69" pos:end="149:75"><name pos:start="149:69" pos:end="149:75">section</name></expr></argument>,

                                                                    <argument pos:start="151:69" pos:end="151:72"><expr pos:start="151:69" pos:end="151:72"><name pos:start="151:69" pos:end="151:72">addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:36"><expr pos:start="153:17" pos:end="153:35"><call pos:start="153:17" pos:end="153:35"><name pos:start="153:17" pos:end="153:22">memcpy</name><argument_list pos:start="153:23" pos:end="153:35">(<argument pos:start="153:24" pos:end="153:26"><expr pos:start="153:24" pos:end="153:26"><name pos:start="153:24" pos:end="153:26">buf</name></expr></argument>, <argument pos:start="153:29" pos:end="153:31"><expr pos:start="153:29" pos:end="153:31"><name pos:start="153:29" pos:end="153:31">ptr</name></expr></argument>, <argument pos:start="153:34" pos:end="153:34"><expr pos:start="153:34" pos:end="153:34"><name pos:start="153:34" pos:end="153:34">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:38"><expr pos:start="155:17" pos:end="155:37"><call pos:start="155:17" pos:end="155:37"><name pos:start="155:17" pos:end="155:32">qemu_put_ram_ptr</name><argument_list pos:start="155:33" pos:end="155:37">(<argument pos:start="155:34" pos:end="155:36"><expr pos:start="155:34" pos:end="155:36"><name pos:start="155:34" pos:end="155:36">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:17"><expr pos:start="161:9" pos:end="161:16"><name pos:start="161:9" pos:end="161:11">len</name> <operator pos:start="161:13" pos:end="161:14">-=</operator> <name pos:start="161:16" pos:end="161:16">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:17"><expr pos:start="163:9" pos:end="163:16"><name pos:start="163:9" pos:end="163:11">buf</name> <operator pos:start="163:13" pos:end="163:14">+=</operator> <name pos:start="163:16" pos:end="163:16">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:18"><expr pos:start="165:9" pos:end="165:17"><name pos:start="165:9" pos:end="165:12">addr</name> <operator pos:start="165:14" pos:end="165:15">+=</operator> <name pos:start="165:17" pos:end="165:17">l</name></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
