<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8318.c" pos:tabs="8"><function pos:start="1:1" pos:end="441:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">decode_init</name><parameter_list pos:start="1:23" pos:end="1:46">(<parameter pos:start="1:24" pos:end="1:45"><decl pos:start="1:24" pos:end="1:45"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:37">AVCodecContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type> <name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="441:1">{<block_content pos:start="5:5" pos:end="439:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">MPADecodeContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:42">= <expr pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:14"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <name pos:start="7:12" pos:end="7:14">int</name></type> <name pos:start="7:16" pos:end="7:19">init</name><init pos:start="7:20" pos:end="7:21">=<expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>, <decl pos:start="9:15" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:15">k</name></decl>;</decl_stmt>



<cpp:if pos:start="13:1" pos:end="13:64">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:64"><call pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:11">defined</name><argument_list pos:start="13:12" pos:end="13:30">(<argument pos:start="13:13" pos:end="13:29"><expr pos:start="13:13" pos:end="13:29"><name pos:start="13:13" pos:end="13:29">USE_HIGHPRECISION</name></expr></argument>)</argument_list></call> <operator pos:start="13:32" pos:end="13:33">&amp;&amp;</operator> <call pos:start="13:35" pos:end="13:64"><name pos:start="13:35" pos:end="13:41">defined</name><argument_list pos:start="13:42" pos:end="13:64">(<argument pos:start="13:43" pos:end="13:63"><expr pos:start="13:43" pos:end="13:63"><name pos:start="13:43" pos:end="13:63">CONFIG_AUDIO_NONSHORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="15:5" pos:end="18:0"><expr pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:9">avctx</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:21">sample_fmt</name></name><operator pos:start="15:22" pos:end="15:22">=</operator> <name pos:start="15:24" pos:end="15:37">SAMPLE_FMT_S32</name></expr>;</expr_stmt>

<cpp:else pos:start="17:1" pos:end="17:5">#<cpp:directive pos:start="17:2" pos:end="17:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="19:5" pos:end="22:0"><expr pos:start="19:5" pos:end="19:37"><name pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:9">avctx</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:21">sample_fmt</name></name><operator pos:start="19:22" pos:end="19:22">=</operator> <name pos:start="19:24" pos:end="19:37">SAMPLE_FMT_S16</name></expr>;</expr_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="25:5" pos:end="31:54"><if pos:start="25:5" pos:end="27:56">if<condition pos:start="25:7" pos:end="25:44">(<expr pos:start="25:8" pos:end="25:43"><name pos:start="25:8" pos:end="25:28"><name pos:start="25:8" pos:end="25:12">avctx</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:28">antialias_algo</name></name> <operator pos:start="25:30" pos:end="25:31">!=</operator> <name pos:start="25:33" pos:end="25:43">FF_AA_FLOAT</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:56"><block_content pos:start="27:9" pos:end="27:56">

        <expr_stmt pos:start="27:9" pos:end="27:56"><expr pos:start="27:9" pos:end="27:55"><name pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:28">compute_antialias</name></name><operator pos:start="27:29" pos:end="27:29">=</operator> <name pos:start="27:31" pos:end="27:55">compute_antialias_integer</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="29:5" pos:end="31:54">else<block type="pseudo" pos:start="31:9" pos:end="31:54"><block_content pos:start="31:9" pos:end="31:54">

        <expr_stmt pos:start="31:9" pos:end="31:54"><expr pos:start="31:9" pos:end="31:53"><name pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:28">compute_antialias</name></name><operator pos:start="31:29" pos:end="31:29">=</operator> <name pos:start="31:31" pos:end="31:53">compute_antialias_float</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="35:5" pos:end="419:5"><if pos:start="35:5" pos:end="419:5">if <condition pos:start="35:8" pos:end="35:36">(<expr pos:start="35:9" pos:end="35:35"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:13">init</name> <operator pos:start="35:15" pos:end="35:16">&amp;&amp;</operator> <operator pos:start="35:18" pos:end="35:18">!</operator><name pos:start="35:19" pos:end="35:35"><name pos:start="35:19" pos:end="35:23">avctx</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:35">parse_only</name></name></expr>)</condition> <block pos:start="35:38" pos:end="419:5">{<block_content pos:start="39:9" pos:end="417:17">

        <comment type="block" pos:start="37:9" pos:end="37:47">/* scale factors table for layer 1/2 */</comment>

        <for pos:start="39:9" pos:end="51:9">for<control pos:start="39:12" pos:end="39:25">(<init pos:start="39:13" pos:end="39:16"><expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:13">i</name><operator pos:start="39:14" pos:end="39:14">=</operator><literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>;</init><condition pos:start="39:17" pos:end="39:21"><expr pos:start="39:17" pos:end="39:20"><name pos:start="39:17" pos:end="39:17">i</name><operator pos:start="39:18" pos:end="39:18">&lt;</operator><literal type="number" pos:start="39:19" pos:end="39:20">64</literal></expr>;</condition><incr pos:start="39:22" pos:end="39:24"><expr pos:start="39:22" pos:end="39:24"><name pos:start="39:22" pos:end="39:22">i</name><operator pos:start="39:23" pos:end="39:24">++</operator></expr></incr>)</control> <block pos:start="39:27" pos:end="51:9">{<block_content pos:start="41:13" pos:end="49:58">

            <decl_stmt pos:start="41:13" pos:end="41:27"><decl pos:start="41:13" pos:end="41:21"><type pos:start="41:13" pos:end="41:15"><name pos:start="41:13" pos:end="41:15">int</name></type> <name pos:start="41:17" pos:end="41:21">shift</name></decl>, <decl pos:start="41:24" pos:end="41:26"><type ref="prev" pos:start="41:13" pos:end="41:15"/><name pos:start="41:24" pos:end="41:26">mod</name></decl>;</decl_stmt>

            <comment type="block" pos:start="43:13" pos:end="43:60">/* 1.0 (i = 3) is normalized to 2 ^ FRAC_BITS */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:28"><expr pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:17">shift</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <operator pos:start="45:21" pos:end="45:21">(</operator><name pos:start="45:22" pos:end="45:22">i</name> <operator pos:start="45:24" pos:end="45:24">/</operator> <literal type="number" pos:start="45:26" pos:end="45:26">3</literal><operator pos:start="45:27" pos:end="45:27">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:24"><expr pos:start="47:13" pos:end="47:23"><name pos:start="47:13" pos:end="47:15">mod</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:19">i</name> <operator pos:start="47:21" pos:end="47:21">%</operator> <literal type="number" pos:start="47:23" pos:end="47:23">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:58"><expr pos:start="49:13" pos:end="49:57"><name pos:start="49:13" pos:end="49:36"><name pos:start="49:13" pos:end="49:33">scale_factor_modshift</name><index pos:start="49:34" pos:end="49:36">[<expr pos:start="49:35" pos:end="49:35"><name pos:start="49:35" pos:end="49:35">i</name></expr>]</index></name> <operator pos:start="49:38" pos:end="49:38">=</operator> <name pos:start="49:40" pos:end="49:42">mod</name> <operator pos:start="49:44" pos:end="49:44">|</operator> <operator pos:start="49:46" pos:end="49:46">(</operator><name pos:start="49:47" pos:end="49:51">shift</name> <operator pos:start="49:53" pos:end="49:54">&lt;&lt;</operator> <literal type="number" pos:start="49:56" pos:end="49:56">2</literal><operator pos:start="49:57" pos:end="49:57">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="55:9" pos:end="55:47">/* scale factor multiply for layer 1 */</comment>

        <for pos:start="57:9" pos:end="81:9">for<control pos:start="57:12" pos:end="57:25">(<init pos:start="57:13" pos:end="57:16"><expr pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:13">i</name><operator pos:start="57:14" pos:end="57:14">=</operator><literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>;</init><condition pos:start="57:17" pos:end="57:21"><expr pos:start="57:17" pos:end="57:20"><name pos:start="57:17" pos:end="57:17">i</name><operator pos:start="57:18" pos:end="57:18">&lt;</operator><literal type="number" pos:start="57:19" pos:end="57:20">15</literal></expr>;</condition><incr pos:start="57:22" pos:end="57:24"><expr pos:start="57:22" pos:end="57:24"><name pos:start="57:22" pos:end="57:22">i</name><operator pos:start="57:23" pos:end="57:24">++</operator></expr></incr>)</control> <block pos:start="57:27" pos:end="81:9">{<block_content pos:start="59:13" pos:end="79:45">

            <decl_stmt pos:start="59:13" pos:end="59:24"><decl pos:start="59:13" pos:end="59:17"><type pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">int</name></type> <name pos:start="59:17" pos:end="59:17">n</name></decl>, <decl pos:start="59:20" pos:end="59:23"><type ref="prev" pos:start="59:13" pos:end="59:15"/><name pos:start="59:20" pos:end="59:23">norm</name></decl>;</decl_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:22"><expr pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:13">n</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <name pos:start="61:17" pos:end="61:17">i</name> <operator pos:start="61:19" pos:end="61:19">+</operator> <literal type="number" pos:start="61:21" pos:end="61:21">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:69"><expr pos:start="63:13" pos:end="63:68"><name pos:start="63:13" pos:end="63:16">norm</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <operator pos:start="63:20" pos:end="63:20">(</operator><operator pos:start="63:21" pos:end="63:21">(</operator><call pos:start="63:22" pos:end="63:33"><name pos:start="63:22" pos:end="63:30">int64_t_C</name><argument_list pos:start="63:31" pos:end="63:33">(<argument pos:start="63:32" pos:end="63:32"><expr pos:start="63:32" pos:end="63:32"><literal type="number" pos:start="63:32" pos:end="63:32">1</literal></expr></argument>)</argument_list></call> <operator pos:start="63:35" pos:end="63:36">&lt;&lt;</operator> <name pos:start="63:38" pos:end="63:38">n</name><operator pos:start="63:39" pos:end="63:39">)</operator> <operator pos:start="63:41" pos:end="63:41">*</operator> <name pos:start="63:43" pos:end="63:50">FRAC_ONE</name><operator pos:start="63:51" pos:end="63:51">)</operator> <operator pos:start="63:53" pos:end="63:53">/</operator> <operator pos:start="63:55" pos:end="63:55">(</operator><operator pos:start="63:56" pos:end="63:56">(</operator><literal type="number" pos:start="63:57" pos:end="63:57">1</literal> <operator pos:start="63:59" pos:end="63:60">&lt;&lt;</operator> <name pos:start="63:62" pos:end="63:62">n</name><operator pos:start="63:63" pos:end="63:63">)</operator> <operator pos:start="63:65" pos:end="63:65">-</operator> <literal type="number" pos:start="63:67" pos:end="63:67">1</literal><operator pos:start="63:68" pos:end="63:68">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:66"><expr pos:start="65:13" pos:end="65:65"><name pos:start="65:13" pos:end="65:35"><name pos:start="65:13" pos:end="65:29">scale_factor_mult</name><index pos:start="65:30" pos:end="65:32">[<expr pos:start="65:31" pos:end="65:31"><name pos:start="65:31" pos:end="65:31">i</name></expr>]</index><index pos:start="65:33" pos:end="65:35">[<expr pos:start="65:34" pos:end="65:34"><literal type="number" pos:start="65:34" pos:end="65:34">0</literal></expr>]</index></name> <operator pos:start="65:37" pos:end="65:37">=</operator> <call pos:start="65:39" pos:end="65:65"><name pos:start="65:39" pos:end="65:42">MULL</name><argument_list pos:start="65:43" pos:end="65:65">(<argument pos:start="65:44" pos:end="65:58"><expr pos:start="65:44" pos:end="65:58"><call pos:start="65:44" pos:end="65:58"><name pos:start="65:44" pos:end="65:47">FIXR</name><argument_list pos:start="65:48" pos:end="65:58">(<argument pos:start="65:49" pos:end="65:57"><expr pos:start="65:49" pos:end="65:57"><literal type="number" pos:start="65:49" pos:end="65:51">1.0</literal> <operator pos:start="65:53" pos:end="65:53">*</operator> <literal type="number" pos:start="65:55" pos:end="65:57">2.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="65:61" pos:end="65:64"><expr pos:start="65:61" pos:end="65:64"><name pos:start="65:61" pos:end="65:64">norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:75"><expr pos:start="67:13" pos:end="67:74"><name pos:start="67:13" pos:end="67:35"><name pos:start="67:13" pos:end="67:29">scale_factor_mult</name><index pos:start="67:30" pos:end="67:32">[<expr pos:start="67:31" pos:end="67:31"><name pos:start="67:31" pos:end="67:31">i</name></expr>]</index><index pos:start="67:33" pos:end="67:35">[<expr pos:start="67:34" pos:end="67:34"><literal type="number" pos:start="67:34" pos:end="67:34">1</literal></expr>]</index></name> <operator pos:start="67:37" pos:end="67:37">=</operator> <call pos:start="67:39" pos:end="67:74"><name pos:start="67:39" pos:end="67:42">MULL</name><argument_list pos:start="67:43" pos:end="67:74">(<argument pos:start="67:44" pos:end="67:67"><expr pos:start="67:44" pos:end="67:67"><call pos:start="67:44" pos:end="67:67"><name pos:start="67:44" pos:end="67:47">FIXR</name><argument_list pos:start="67:48" pos:end="67:67">(<argument pos:start="67:49" pos:end="67:66"><expr pos:start="67:49" pos:end="67:66"><literal type="number" pos:start="67:49" pos:end="67:60">0.7937005259</literal> <operator pos:start="67:62" pos:end="67:62">*</operator> <literal type="number" pos:start="67:64" pos:end="67:66">2.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:70" pos:end="67:73"><expr pos:start="67:70" pos:end="67:73"><name pos:start="67:70" pos:end="67:73">norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:75"><expr pos:start="69:13" pos:end="69:74"><name pos:start="69:13" pos:end="69:35"><name pos:start="69:13" pos:end="69:29">scale_factor_mult</name><index pos:start="69:30" pos:end="69:32">[<expr pos:start="69:31" pos:end="69:31"><name pos:start="69:31" pos:end="69:31">i</name></expr>]</index><index pos:start="69:33" pos:end="69:35">[<expr pos:start="69:34" pos:end="69:34"><literal type="number" pos:start="69:34" pos:end="69:34">2</literal></expr>]</index></name> <operator pos:start="69:37" pos:end="69:37">=</operator> <call pos:start="69:39" pos:end="69:74"><name pos:start="69:39" pos:end="69:42">MULL</name><argument_list pos:start="69:43" pos:end="69:74">(<argument pos:start="69:44" pos:end="69:67"><expr pos:start="69:44" pos:end="69:67"><call pos:start="69:44" pos:end="69:67"><name pos:start="69:44" pos:end="69:47">FIXR</name><argument_list pos:start="69:48" pos:end="69:67">(<argument pos:start="69:49" pos:end="69:66"><expr pos:start="69:49" pos:end="69:66"><literal type="number" pos:start="69:49" pos:end="69:60">0.6299605249</literal> <operator pos:start="69:62" pos:end="69:62">*</operator> <literal type="number" pos:start="69:64" pos:end="69:66">2.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:70" pos:end="69:73"><expr pos:start="69:70" pos:end="69:73"><name pos:start="69:70" pos:end="69:73">norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="79:45"><expr pos:start="71:13" pos:end="79:44"><call pos:start="71:13" pos:end="79:44"><name pos:start="71:13" pos:end="71:19">dprintf</name><argument_list pos:start="71:20" pos:end="79:44">(<argument pos:start="71:21" pos:end="71:46"><expr pos:start="71:21" pos:end="71:46"><literal type="string" pos:start="71:21" pos:end="71:46">"%d: norm=%x s=%x %x %x\n"</literal></expr></argument>,

                    <argument pos:start="73:21" pos:end="73:21"><expr pos:start="73:21" pos:end="73:21"><name pos:start="73:21" pos:end="73:21">i</name></expr></argument>, <argument pos:start="73:24" pos:end="73:27"><expr pos:start="73:24" pos:end="73:27"><name pos:start="73:24" pos:end="73:27">norm</name></expr></argument>,

                    <argument pos:start="75:21" pos:end="75:43"><expr pos:start="75:21" pos:end="75:43"><name pos:start="75:21" pos:end="75:43"><name pos:start="75:21" pos:end="75:37">scale_factor_mult</name><index pos:start="75:38" pos:end="75:40">[<expr pos:start="75:39" pos:end="75:39"><name pos:start="75:39" pos:end="75:39">i</name></expr>]</index><index pos:start="75:41" pos:end="75:43">[<expr pos:start="75:42" pos:end="75:42"><literal type="number" pos:start="75:42" pos:end="75:42">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="77:21" pos:end="77:43"><expr pos:start="77:21" pos:end="77:43"><name pos:start="77:21" pos:end="77:43"><name pos:start="77:21" pos:end="77:37">scale_factor_mult</name><index pos:start="77:38" pos:end="77:40">[<expr pos:start="77:39" pos:end="77:39"><name pos:start="77:39" pos:end="77:39">i</name></expr>]</index><index pos:start="77:41" pos:end="77:43">[<expr pos:start="77:42" pos:end="77:42"><literal type="number" pos:start="77:42" pos:end="77:42">1</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="79:21" pos:end="79:43"><expr pos:start="79:21" pos:end="79:43"><name pos:start="79:21" pos:end="79:43"><name pos:start="79:21" pos:end="79:37">scale_factor_mult</name><index pos:start="79:38" pos:end="79:40">[<expr pos:start="79:39" pos:end="79:39"><name pos:start="79:39" pos:end="79:39">i</name></expr>]</index><index pos:start="79:41" pos:end="79:43">[<expr pos:start="79:42" pos:end="79:42"><literal type="number" pos:start="79:42" pos:end="79:42">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="85:9" pos:end="85:34"><expr pos:start="85:9" pos:end="85:33"><call pos:start="85:9" pos:end="85:33"><name pos:start="85:9" pos:end="85:25">ff_mpa_synth_init</name><argument_list pos:start="85:26" pos:end="85:33">(<argument pos:start="85:27" pos:end="85:32"><expr pos:start="85:27" pos:end="85:32"><name pos:start="85:27" pos:end="85:32">window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="89:9" pos:end="89:35">/* huffman decode tables */</comment>

        <for pos:start="91:9" pos:end="139:9">for<control pos:start="91:12" pos:end="91:25">(<init pos:start="91:13" pos:end="91:16"><expr pos:start="91:13" pos:end="91:15"><name pos:start="91:13" pos:end="91:13">i</name><operator pos:start="91:14" pos:end="91:14">=</operator><literal type="number" pos:start="91:15" pos:end="91:15">1</literal></expr>;</init><condition pos:start="91:17" pos:end="91:21"><expr pos:start="91:17" pos:end="91:20"><name pos:start="91:17" pos:end="91:17">i</name><operator pos:start="91:18" pos:end="91:18">&lt;</operator><literal type="number" pos:start="91:19" pos:end="91:20">16</literal></expr>;</condition><incr pos:start="91:22" pos:end="91:24"><expr pos:start="91:22" pos:end="91:24"><name pos:start="91:22" pos:end="91:22">i</name><operator pos:start="91:23" pos:end="91:24">++</operator></expr></incr>)</control> <block pos:start="91:27" pos:end="139:9">{<block_content pos:start="93:13" pos:end="137:57">

            <decl_stmt pos:start="93:13" pos:end="93:53"><decl pos:start="93:13" pos:end="93:52"><type pos:start="93:13" pos:end="93:29"><specifier pos:start="93:13" pos:end="93:17">const</specifier> <name pos:start="93:19" pos:end="93:27">HuffTable</name> <modifier pos:start="93:29" pos:end="93:29">*</modifier></type><name pos:start="93:30" pos:end="93:30">h</name> <init pos:start="93:32" pos:end="93:52">= <expr pos:start="93:34" pos:end="93:52"><operator pos:start="93:34" pos:end="93:34">&amp;</operator><name pos:start="93:35" pos:end="93:52"><name pos:start="93:35" pos:end="93:49">mpa_huff_tables</name><index pos:start="93:50" pos:end="93:52">[<expr pos:start="93:51" pos:end="93:51"><name pos:start="93:51" pos:end="93:51">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="95:13" pos:end="95:28"><decl pos:start="95:13" pos:end="95:21"><type pos:start="95:13" pos:end="95:15"><name pos:start="95:13" pos:end="95:15">int</name></type> <name pos:start="95:17" pos:end="95:21">xsize</name></decl>, <decl pos:start="95:24" pos:end="95:24"><type ref="prev" pos:start="95:13" pos:end="95:15"/><name pos:start="95:24" pos:end="95:24">x</name></decl>, <decl pos:start="95:27" pos:end="95:27"><type ref="prev" pos:start="95:13" pos:end="95:15"/><name pos:start="95:27" pos:end="95:27">y</name></decl>;</decl_stmt>

            <decl_stmt pos:start="97:13" pos:end="97:27"><decl pos:start="97:13" pos:end="97:26"><type pos:start="97:13" pos:end="97:24"><name pos:start="97:13" pos:end="97:20">unsigned</name> <name pos:start="97:22" pos:end="97:24">int</name></type> <name pos:start="97:26" pos:end="97:26">n</name></decl>;</decl_stmt>

            <decl_stmt pos:start="99:13" pos:end="99:35"><decl pos:start="99:13" pos:end="99:34"><type pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:19">uint8_t</name></type> <name pos:start="99:21" pos:end="99:34"><name pos:start="99:21" pos:end="99:28">tmp_bits</name> <index pos:start="99:30" pos:end="99:34">[<expr pos:start="99:31" pos:end="99:33"><literal type="number" pos:start="99:31" pos:end="99:33">256</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="101:13" pos:end="101:36"><decl pos:start="101:13" pos:end="101:35"><type pos:start="101:13" pos:end="101:20"><name pos:start="101:13" pos:end="101:20">uint16_t</name></type> <name pos:start="101:22" pos:end="101:35"><name pos:start="101:22" pos:end="101:30">tmp_codes</name><index pos:start="101:31" pos:end="101:35">[<expr pos:start="101:32" pos:end="101:34"><literal type="number" pos:start="101:32" pos:end="101:34">256</literal></expr>]</index></name></decl>;</decl_stmt>



            <expr_stmt pos:start="105:13" pos:end="105:52"><expr pos:start="105:13" pos:end="105:51"><call pos:start="105:13" pos:end="105:51"><name pos:start="105:13" pos:end="105:18">memset</name><argument_list pos:start="105:19" pos:end="105:51">(<argument pos:start="105:20" pos:end="105:27"><expr pos:start="105:20" pos:end="105:27"><name pos:start="105:20" pos:end="105:27">tmp_bits</name></expr></argument> , <argument pos:start="105:31" pos:end="105:31"><expr pos:start="105:31" pos:end="105:31"><literal type="number" pos:start="105:31" pos:end="105:31">0</literal></expr></argument>, <argument pos:start="105:34" pos:end="105:50"><expr pos:start="105:34" pos:end="105:50"><sizeof pos:start="105:34" pos:end="105:50">sizeof<argument_list pos:start="105:40" pos:end="105:50">(<argument pos:start="105:41" pos:end="105:48"><expr pos:start="105:41" pos:end="105:48"><name pos:start="105:41" pos:end="105:48">tmp_bits</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:52"><expr pos:start="107:13" pos:end="107:51"><call pos:start="107:13" pos:end="107:51"><name pos:start="107:13" pos:end="107:18">memset</name><argument_list pos:start="107:19" pos:end="107:51">(<argument pos:start="107:20" pos:end="107:28"><expr pos:start="107:20" pos:end="107:28"><name pos:start="107:20" pos:end="107:28">tmp_codes</name></expr></argument>, <argument pos:start="107:31" pos:end="107:31"><expr pos:start="107:31" pos:end="107:31"><literal type="number" pos:start="107:31" pos:end="107:31">0</literal></expr></argument>, <argument pos:start="107:34" pos:end="107:50"><expr pos:start="107:34" pos:end="107:50"><sizeof pos:start="107:34" pos:end="107:50">sizeof<argument_list pos:start="107:40" pos:end="107:50">(<argument pos:start="107:41" pos:end="107:49"><expr pos:start="107:41" pos:end="107:49"><name pos:start="107:41" pos:end="107:49">tmp_codes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="111:13" pos:end="111:29"><expr pos:start="111:13" pos:end="111:28"><name pos:start="111:13" pos:end="111:17">xsize</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <name pos:start="111:21" pos:end="111:28"><name pos:start="111:21" pos:end="111:21">h</name><operator pos:start="111:22" pos:end="111:23">-&gt;</operator><name pos:start="111:24" pos:end="111:28">xsize</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:30"><expr pos:start="113:13" pos:end="113:29"><name pos:start="113:13" pos:end="113:13">n</name> <operator pos:start="113:15" pos:end="113:15">=</operator> <name pos:start="113:17" pos:end="113:21">xsize</name> <operator pos:start="113:23" pos:end="113:23">*</operator> <name pos:start="113:25" pos:end="113:29">xsize</name></expr>;</expr_stmt>



            <expr_stmt pos:start="117:13" pos:end="117:18"><expr pos:start="117:13" pos:end="117:17"><name pos:start="117:13" pos:end="117:13">j</name> <operator pos:start="117:15" pos:end="117:15">=</operator> <literal type="number" pos:start="117:17" pos:end="117:17">0</literal></expr>;</expr_stmt>

            <for pos:start="119:13" pos:end="129:13">for<control pos:start="119:16" pos:end="119:32">(<init pos:start="119:17" pos:end="119:20"><expr pos:start="119:17" pos:end="119:19"><name pos:start="119:17" pos:end="119:17">x</name><operator pos:start="119:18" pos:end="119:18">=</operator><literal type="number" pos:start="119:19" pos:end="119:19">0</literal></expr>;</init><condition pos:start="119:21" pos:end="119:28"><expr pos:start="119:21" pos:end="119:27"><name pos:start="119:21" pos:end="119:21">x</name><operator pos:start="119:22" pos:end="119:22">&lt;</operator><name pos:start="119:23" pos:end="119:27">xsize</name></expr>;</condition><incr pos:start="119:29" pos:end="119:31"><expr pos:start="119:29" pos:end="119:31"><name pos:start="119:29" pos:end="119:29">x</name><operator pos:start="119:30" pos:end="119:31">++</operator></expr></incr>)</control> <block pos:start="119:34" pos:end="129:13">{<block_content pos:start="121:17" pos:end="127:17">

                <for pos:start="121:17" pos:end="127:17">for<control pos:start="121:20" pos:end="121:36">(<init pos:start="121:21" pos:end="121:24"><expr pos:start="121:21" pos:end="121:23"><name pos:start="121:21" pos:end="121:21">y</name><operator pos:start="121:22" pos:end="121:22">=</operator><literal type="number" pos:start="121:23" pos:end="121:23">0</literal></expr>;</init><condition pos:start="121:25" pos:end="121:32"><expr pos:start="121:25" pos:end="121:31"><name pos:start="121:25" pos:end="121:25">y</name><operator pos:start="121:26" pos:end="121:26">&lt;</operator><name pos:start="121:27" pos:end="121:31">xsize</name></expr>;</condition><incr pos:start="121:33" pos:end="121:35"><expr pos:start="121:33" pos:end="121:35"><name pos:start="121:33" pos:end="121:33">y</name><operator pos:start="121:34" pos:end="121:35">++</operator></expr></incr>)</control><block pos:start="121:37" pos:end="127:17">{<block_content pos:start="123:21" pos:end="125:59">

                    <expr_stmt pos:start="123:21" pos:end="123:59"><expr pos:start="123:21" pos:end="123:58"><name pos:start="123:21" pos:end="123:43"><name pos:start="123:21" pos:end="123:28">tmp_bits</name> <index pos:start="123:30" pos:end="123:43">[<expr pos:start="123:31" pos:end="123:42"><operator pos:start="123:31" pos:end="123:31">(</operator><name pos:start="123:32" pos:end="123:32">x</name> <operator pos:start="123:34" pos:end="123:35">&lt;&lt;</operator> <literal type="number" pos:start="123:37" pos:end="123:37">4</literal><operator pos:start="123:38" pos:end="123:38">)</operator> <operator pos:start="123:40" pos:end="123:40">|</operator> <name pos:start="123:42" pos:end="123:42">y</name></expr>]</index></name><operator pos:start="123:44" pos:end="123:44">=</operator> <name pos:start="123:46" pos:end="123:58"><name pos:start="123:46" pos:end="123:46">h</name><operator pos:start="123:47" pos:end="123:48">-&gt;</operator><name pos:start="123:49" pos:end="123:52">bits</name> <index pos:start="123:54" pos:end="123:58">[<expr pos:start="123:55" pos:end="123:55"><name pos:start="123:55" pos:end="123:55">j</name></expr>  ]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="125:21" pos:end="125:59"><expr pos:start="125:21" pos:end="125:58"><name pos:start="125:21" pos:end="125:43"><name pos:start="125:21" pos:end="125:29">tmp_codes</name><index pos:start="125:30" pos:end="125:43">[<expr pos:start="125:31" pos:end="125:42"><operator pos:start="125:31" pos:end="125:31">(</operator><name pos:start="125:32" pos:end="125:32">x</name> <operator pos:start="125:34" pos:end="125:35">&lt;&lt;</operator> <literal type="number" pos:start="125:37" pos:end="125:37">4</literal><operator pos:start="125:38" pos:end="125:38">)</operator> <operator pos:start="125:40" pos:end="125:40">|</operator> <name pos:start="125:42" pos:end="125:42">y</name></expr>]</index></name><operator pos:start="125:44" pos:end="125:44">=</operator> <name pos:start="125:46" pos:end="125:58"><name pos:start="125:46" pos:end="125:46">h</name><operator pos:start="125:47" pos:end="125:48">-&gt;</operator><name pos:start="125:49" pos:end="125:53">codes</name><index pos:start="125:54" pos:end="125:58">[<expr pos:start="125:55" pos:end="125:57"><name pos:start="125:55" pos:end="125:55">j</name><operator pos:start="125:56" pos:end="125:57">++</operator></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>



            <comment type="block" pos:start="133:13" pos:end="133:32">/* XXX: fail test */</comment>

            <expr_stmt pos:start="135:13" pos:end="137:57"><expr pos:start="135:13" pos:end="137:56"><call pos:start="135:13" pos:end="137:56"><name pos:start="135:13" pos:end="135:20">init_vlc</name><argument_list pos:start="135:21" pos:end="137:56">(<argument pos:start="135:22" pos:end="135:33"><expr pos:start="135:22" pos:end="135:33"><operator pos:start="135:22" pos:end="135:22">&amp;</operator><name pos:start="135:23" pos:end="135:33"><name pos:start="135:23" pos:end="135:30">huff_vlc</name><index pos:start="135:31" pos:end="135:33">[<expr pos:start="135:32" pos:end="135:32"><name pos:start="135:32" pos:end="135:32">i</name></expr>]</index></name></expr></argument>, <argument pos:start="135:36" pos:end="135:36"><expr pos:start="135:36" pos:end="135:36"><literal type="number" pos:start="135:36" pos:end="135:36">7</literal></expr></argument>, <argument pos:start="135:39" pos:end="135:41"><expr pos:start="135:39" pos:end="135:41"><literal type="number" pos:start="135:39" pos:end="135:41">256</literal></expr></argument>,

                     <argument pos:start="137:22" pos:end="137:29"><expr pos:start="137:22" pos:end="137:29"><name pos:start="137:22" pos:end="137:29">tmp_bits</name></expr></argument>, <argument pos:start="137:32" pos:end="137:32"><expr pos:start="137:32" pos:end="137:32"><literal type="number" pos:start="137:32" pos:end="137:32">1</literal></expr></argument>, <argument pos:start="137:35" pos:end="137:35"><expr pos:start="137:35" pos:end="137:35"><literal type="number" pos:start="137:35" pos:end="137:35">1</literal></expr></argument>, <argument pos:start="137:38" pos:end="137:46"><expr pos:start="137:38" pos:end="137:46"><name pos:start="137:38" pos:end="137:46">tmp_codes</name></expr></argument>, <argument pos:start="137:49" pos:end="137:49"><expr pos:start="137:49" pos:end="137:49"><literal type="number" pos:start="137:49" pos:end="137:49">2</literal></expr></argument>, <argument pos:start="137:52" pos:end="137:52"><expr pos:start="137:52" pos:end="137:52"><literal type="number" pos:start="137:52" pos:end="137:52">2</literal></expr></argument>, <argument pos:start="137:55" pos:end="137:55"><expr pos:start="137:55" pos:end="137:55"><literal type="number" pos:start="137:55" pos:end="137:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="141:9" pos:end="147:9">for<control pos:start="141:12" pos:end="141:24">(<init pos:start="141:13" pos:end="141:16"><expr pos:start="141:13" pos:end="141:15"><name pos:start="141:13" pos:end="141:13">i</name><operator pos:start="141:14" pos:end="141:14">=</operator><literal type="number" pos:start="141:15" pos:end="141:15">0</literal></expr>;</init><condition pos:start="141:17" pos:end="141:20"><expr pos:start="141:17" pos:end="141:19"><name pos:start="141:17" pos:end="141:17">i</name><operator pos:start="141:18" pos:end="141:18">&lt;</operator><literal type="number" pos:start="141:19" pos:end="141:19">2</literal></expr>;</condition><incr pos:start="141:21" pos:end="141:23"><expr pos:start="141:21" pos:end="141:23"><name pos:start="141:21" pos:end="141:21">i</name><operator pos:start="141:22" pos:end="141:23">++</operator></expr></incr>)</control> <block pos:start="141:26" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:73">

            <expr_stmt pos:start="143:13" pos:end="145:73"><expr pos:start="143:13" pos:end="145:72"><call pos:start="143:13" pos:end="145:72"><name pos:start="143:13" pos:end="143:20">init_vlc</name><argument_list pos:start="143:21" pos:end="145:72">(<argument pos:start="143:22" pos:end="143:38"><expr pos:start="143:22" pos:end="143:38"><operator pos:start="143:22" pos:end="143:22">&amp;</operator><name pos:start="143:23" pos:end="143:38"><name pos:start="143:23" pos:end="143:35">huff_quad_vlc</name><index pos:start="143:36" pos:end="143:38">[<expr pos:start="143:37" pos:end="143:37"><name pos:start="143:37" pos:end="143:37">i</name></expr>]</index></name></expr></argument>, <argument pos:start="143:41" pos:end="143:54"><expr pos:start="143:41" pos:end="143:54"><ternary pos:start="143:41" pos:end="143:54"><condition pos:start="143:41" pos:end="143:48"><expr pos:start="143:41" pos:end="143:46"><name pos:start="143:41" pos:end="143:41">i</name> <operator pos:start="143:43" pos:end="143:44">==</operator> <literal type="number" pos:start="143:46" pos:end="143:46">0</literal></expr> ?</condition><then pos:start="143:50" pos:end="143:50"> <expr pos:start="143:50" pos:end="143:50"><literal type="number" pos:start="143:50" pos:end="143:50">7</literal></expr> </then><else pos:start="143:52" pos:end="143:54">: <expr pos:start="143:54" pos:end="143:54"><literal type="number" pos:start="143:54" pos:end="143:54">4</literal></expr></else></ternary></expr></argument>, <argument pos:start="143:57" pos:end="143:58"><expr pos:start="143:57" pos:end="143:58"><literal type="number" pos:start="143:57" pos:end="143:58">16</literal></expr></argument>,

                     <argument pos:start="145:22" pos:end="145:37"><expr pos:start="145:22" pos:end="145:37"><name pos:start="145:22" pos:end="145:37"><name pos:start="145:22" pos:end="145:34">mpa_quad_bits</name><index pos:start="145:35" pos:end="145:37">[<expr pos:start="145:36" pos:end="145:36"><name pos:start="145:36" pos:end="145:36">i</name></expr>]</index></name></expr></argument>, <argument pos:start="145:40" pos:end="145:40"><expr pos:start="145:40" pos:end="145:40"><literal type="number" pos:start="145:40" pos:end="145:40">1</literal></expr></argument>, <argument pos:start="145:43" pos:end="145:43"><expr pos:start="145:43" pos:end="145:43"><literal type="number" pos:start="145:43" pos:end="145:43">1</literal></expr></argument>, <argument pos:start="145:46" pos:end="145:62"><expr pos:start="145:46" pos:end="145:62"><name pos:start="145:46" pos:end="145:62"><name pos:start="145:46" pos:end="145:59">mpa_quad_codes</name><index pos:start="145:60" pos:end="145:62">[<expr pos:start="145:61" pos:end="145:61"><name pos:start="145:61" pos:end="145:61">i</name></expr>]</index></name></expr></argument>, <argument pos:start="145:65" pos:end="145:65"><expr pos:start="145:65" pos:end="145:65"><literal type="number" pos:start="145:65" pos:end="145:65">1</literal></expr></argument>, <argument pos:start="145:68" pos:end="145:68"><expr pos:start="145:68" pos:end="145:68"><literal type="number" pos:start="145:68" pos:end="145:68">1</literal></expr></argument>, <argument pos:start="145:71" pos:end="145:71"><expr pos:start="145:71" pos:end="145:71"><literal type="number" pos:start="145:71" pos:end="145:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <for pos:start="151:9" pos:end="165:9">for<control pos:start="151:12" pos:end="151:24">(<init pos:start="151:13" pos:end="151:16"><expr pos:start="151:13" pos:end="151:15"><name pos:start="151:13" pos:end="151:13">i</name><operator pos:start="151:14" pos:end="151:14">=</operator><literal type="number" pos:start="151:15" pos:end="151:15">0</literal></expr>;</init><condition pos:start="151:17" pos:end="151:20"><expr pos:start="151:17" pos:end="151:19"><name pos:start="151:17" pos:end="151:17">i</name><operator pos:start="151:18" pos:end="151:18">&lt;</operator><literal type="number" pos:start="151:19" pos:end="151:19">9</literal></expr>;</condition><incr pos:start="151:21" pos:end="151:23"><expr pos:start="151:21" pos:end="151:23"><name pos:start="151:21" pos:end="151:21">i</name><operator pos:start="151:22" pos:end="151:23">++</operator></expr></incr>)</control> <block pos:start="151:26" pos:end="165:9">{<block_content pos:start="153:13" pos:end="163:39">

            <expr_stmt pos:start="153:13" pos:end="153:18"><expr pos:start="153:13" pos:end="153:17"><name pos:start="153:13" pos:end="153:13">k</name> <operator pos:start="153:15" pos:end="153:15">=</operator> <literal type="number" pos:start="153:17" pos:end="153:17">0</literal></expr>;</expr_stmt>

            <for pos:start="155:13" pos:end="161:13">for<control pos:start="155:16" pos:end="155:29">(<init pos:start="155:17" pos:end="155:20"><expr pos:start="155:17" pos:end="155:19"><name pos:start="155:17" pos:end="155:17">j</name><operator pos:start="155:18" pos:end="155:18">=</operator><literal type="number" pos:start="155:19" pos:end="155:19">0</literal></expr>;</init><condition pos:start="155:21" pos:end="155:25"><expr pos:start="155:21" pos:end="155:24"><name pos:start="155:21" pos:end="155:21">j</name><operator pos:start="155:22" pos:end="155:22">&lt;</operator><literal type="number" pos:start="155:23" pos:end="155:24">22</literal></expr>;</condition><incr pos:start="155:26" pos:end="155:28"><expr pos:start="155:26" pos:end="155:28"><name pos:start="155:26" pos:end="155:26">j</name><operator pos:start="155:27" pos:end="155:28">++</operator></expr></incr>)</control> <block pos:start="155:31" pos:end="161:13">{<block_content pos:start="157:17" pos:end="159:42">

                <expr_stmt pos:start="157:17" pos:end="157:42"><expr pos:start="157:17" pos:end="157:41"><name pos:start="157:17" pos:end="157:37"><name pos:start="157:17" pos:end="157:31">band_index_long</name><index pos:start="157:32" pos:end="157:34">[<expr pos:start="157:33" pos:end="157:33"><name pos:start="157:33" pos:end="157:33">i</name></expr>]</index><index pos:start="157:35" pos:end="157:37">[<expr pos:start="157:36" pos:end="157:36"><name pos:start="157:36" pos:end="157:36">j</name></expr>]</index></name> <operator pos:start="157:39" pos:end="157:39">=</operator> <name pos:start="157:41" pos:end="157:41">k</name></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:42"><expr pos:start="159:17" pos:end="159:41"><name pos:start="159:17" pos:end="159:17">k</name> <operator pos:start="159:19" pos:end="159:20">+=</operator> <name pos:start="159:22" pos:end="159:41"><name pos:start="159:22" pos:end="159:35">band_size_long</name><index pos:start="159:36" pos:end="159:38">[<expr pos:start="159:37" pos:end="159:37"><name pos:start="159:37" pos:end="159:37">i</name></expr>]</index><index pos:start="159:39" pos:end="159:41">[<expr pos:start="159:40" pos:end="159:40"><name pos:start="159:40" pos:end="159:40">j</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="163:13" pos:end="163:39"><expr pos:start="163:13" pos:end="163:38"><name pos:start="163:13" pos:end="163:34"><name pos:start="163:13" pos:end="163:27">band_index_long</name><index pos:start="163:28" pos:end="163:30">[<expr pos:start="163:29" pos:end="163:29"><name pos:start="163:29" pos:end="163:29">i</name></expr>]</index><index pos:start="163:31" pos:end="163:34">[<expr pos:start="163:32" pos:end="163:33"><literal type="number" pos:start="163:32" pos:end="163:33">22</literal></expr>]</index></name> <operator pos:start="163:36" pos:end="163:36">=</operator> <name pos:start="163:38" pos:end="163:38">k</name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="169:9" pos:end="169:67">/* compute n ^ (4/3) and store it in mantissa/exp format */</comment>

        <expr_stmt pos:start="171:9" pos:end="171:84"><expr pos:start="171:9" pos:end="171:83"><name pos:start="171:9" pos:end="171:21">table_4_3_exp</name><operator pos:start="171:22" pos:end="171:22">=</operator> <call pos:start="171:24" pos:end="171:83"><name pos:start="171:24" pos:end="171:40">av_mallocz_static</name><argument_list pos:start="171:41" pos:end="171:83">(<argument pos:start="171:42" pos:end="171:82"><expr pos:start="171:42" pos:end="171:82"><name pos:start="171:42" pos:end="171:55">TABLE_4_3_SIZE</name> <operator pos:start="171:57" pos:end="171:57">*</operator> <sizeof pos:start="171:59" pos:end="171:82">sizeof<argument_list pos:start="171:65" pos:end="171:82">(<argument pos:start="171:66" pos:end="171:81"><expr pos:start="171:66" pos:end="171:81"><name pos:start="171:66" pos:end="171:81"><name pos:start="171:66" pos:end="171:78">table_4_3_exp</name><index pos:start="171:79" pos:end="171:81">[<expr pos:start="171:80" pos:end="171:80"><literal type="number" pos:start="171:80" pos:end="171:80">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="173:9" pos:end="175:22"><if pos:start="173:9" pos:end="175:22">if<condition pos:start="173:11" pos:end="173:26">(<expr pos:start="173:12" pos:end="173:25"><operator pos:start="173:12" pos:end="173:12">!</operator><name pos:start="173:13" pos:end="173:25">table_4_3_exp</name></expr>)</condition><block type="pseudo" pos:start="175:13" pos:end="175:22"><block_content pos:start="175:13" pos:end="175:22">

            <return pos:start="175:13" pos:end="175:22">return <expr pos:start="175:20" pos:end="175:21"><operator pos:start="175:20" pos:end="175:20">-</operator><literal type="number" pos:start="175:21" pos:end="175:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:88"><expr pos:start="177:9" pos:end="177:87"><name pos:start="177:9" pos:end="177:23">table_4_3_value</name><operator pos:start="177:24" pos:end="177:24">=</operator> <call pos:start="177:26" pos:end="177:87"><name pos:start="177:26" pos:end="177:42">av_mallocz_static</name><argument_list pos:start="177:43" pos:end="177:87">(<argument pos:start="177:44" pos:end="177:86"><expr pos:start="177:44" pos:end="177:86"><name pos:start="177:44" pos:end="177:57">TABLE_4_3_SIZE</name> <operator pos:start="177:59" pos:end="177:59">*</operator> <sizeof pos:start="177:61" pos:end="177:86">sizeof<argument_list pos:start="177:67" pos:end="177:86">(<argument pos:start="177:68" pos:end="177:85"><expr pos:start="177:68" pos:end="177:85"><name pos:start="177:68" pos:end="177:85"><name pos:start="177:68" pos:end="177:82">table_4_3_value</name><index pos:start="177:83" pos:end="177:85">[<expr pos:start="177:84" pos:end="177:84"><literal type="number" pos:start="177:84" pos:end="177:84">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="179:9" pos:end="181:22"><if pos:start="179:9" pos:end="181:22">if<condition pos:start="179:11" pos:end="179:28">(<expr pos:start="179:12" pos:end="179:27"><operator pos:start="179:12" pos:end="179:12">!</operator><name pos:start="179:13" pos:end="179:27">table_4_3_value</name></expr>)</condition><block type="pseudo" pos:start="181:13" pos:end="181:22"><block_content pos:start="181:13" pos:end="181:22">

            <return pos:start="181:13" pos:end="181:22">return <expr pos:start="181:20" pos:end="181:21"><operator pos:start="181:20" pos:end="181:20">-</operator><literal type="number" pos:start="181:21" pos:end="181:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="185:9" pos:end="185:23"><expr pos:start="185:9" pos:end="185:22"><call pos:start="185:9" pos:end="185:22"><name pos:start="185:9" pos:end="185:20">int_pow_init</name><argument_list pos:start="185:21" pos:end="185:22">()</argument_list></call></expr>;</expr_stmt>

        <for pos:start="187:9" pos:end="211:9">for<control pos:start="187:12" pos:end="187:37">(<init pos:start="187:13" pos:end="187:16"><expr pos:start="187:13" pos:end="187:15"><name pos:start="187:13" pos:end="187:13">i</name><operator pos:start="187:14" pos:end="187:14">=</operator><literal type="number" pos:start="187:15" pos:end="187:15">1</literal></expr>;</init><condition pos:start="187:17" pos:end="187:33"><expr pos:start="187:17" pos:end="187:32"><name pos:start="187:17" pos:end="187:17">i</name><operator pos:start="187:18" pos:end="187:18">&lt;</operator><name pos:start="187:19" pos:end="187:32">TABLE_4_3_SIZE</name></expr>;</condition><incr pos:start="187:34" pos:end="187:36"><expr pos:start="187:34" pos:end="187:36"><name pos:start="187:34" pos:end="187:34">i</name><operator pos:start="187:35" pos:end="187:36">++</operator></expr></incr>)</control> <block pos:start="187:39" pos:end="211:9">{<block_content pos:start="189:13" pos:end="209:34">

            <decl_stmt pos:start="189:13" pos:end="189:25"><decl pos:start="189:13" pos:end="189:20"><type pos:start="189:13" pos:end="189:18"><name pos:start="189:13" pos:end="189:18">double</name></type> <name pos:start="189:20" pos:end="189:20">f</name></decl>, <decl pos:start="189:23" pos:end="189:24"><type ref="prev" pos:start="189:13" pos:end="189:18"/><name pos:start="189:23" pos:end="189:24">fm</name></decl>;</decl_stmt>

            <decl_stmt pos:start="191:13" pos:end="191:21"><decl pos:start="191:13" pos:end="191:17"><type pos:start="191:13" pos:end="191:15"><name pos:start="191:13" pos:end="191:15">int</name></type> <name pos:start="191:17" pos:end="191:17">e</name></decl>, <decl pos:start="191:20" pos:end="191:20"><type ref="prev" pos:start="191:13" pos:end="191:15"/><name pos:start="191:20" pos:end="191:20">m</name></decl>;</decl_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:67"><expr pos:start="193:13" pos:end="193:66"><name pos:start="193:13" pos:end="193:13">f</name> <operator pos:start="193:15" pos:end="193:15">=</operator> <call pos:start="193:17" pos:end="193:45"><name pos:start="193:17" pos:end="193:19">pow</name><argument_list pos:start="193:20" pos:end="193:45">(<argument pos:start="193:21" pos:end="193:33"><expr pos:start="193:21" pos:end="193:33"><operator pos:start="193:21" pos:end="193:21">(</operator><name pos:start="193:22" pos:end="193:27">double</name><operator pos:start="193:28" pos:end="193:28">)</operator><operator pos:start="193:29" pos:end="193:29">(</operator><name pos:start="193:30" pos:end="193:30">i</name><operator pos:start="193:31" pos:end="193:31">/</operator><literal type="number" pos:start="193:32" pos:end="193:32">4</literal><operator pos:start="193:33" pos:end="193:33">)</operator></expr></argument>, <argument pos:start="193:36" pos:end="193:44"><expr pos:start="193:36" pos:end="193:44"><literal type="number" pos:start="193:36" pos:end="193:38">4.0</literal> <operator pos:start="193:40" pos:end="193:40">/</operator> <literal type="number" pos:start="193:42" pos:end="193:44">3.0</literal></expr></argument>)</argument_list></call> <operator pos:start="193:47" pos:end="193:47">*</operator> <call pos:start="193:49" pos:end="193:66"><name pos:start="193:49" pos:end="193:51">pow</name><argument_list pos:start="193:52" pos:end="193:66">(<argument pos:start="193:53" pos:end="193:53"><expr pos:start="193:53" pos:end="193:53"><literal type="number" pos:start="193:53" pos:end="193:53">2</literal></expr></argument>, <argument pos:start="193:56" pos:end="193:65"><expr pos:start="193:56" pos:end="193:65"><operator pos:start="193:56" pos:end="193:56">(</operator><name pos:start="193:57" pos:end="193:57">i</name><operator pos:start="193:58" pos:end="193:58">&amp;</operator><literal type="number" pos:start="193:59" pos:end="193:59">3</literal><operator pos:start="193:60" pos:end="193:60">)</operator><operator pos:start="193:61" pos:end="193:61">*</operator><literal type="number" pos:start="193:62" pos:end="193:65">0.25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:30"><expr pos:start="195:13" pos:end="195:29"><name pos:start="195:13" pos:end="195:14">fm</name> <operator pos:start="195:16" pos:end="195:16">=</operator> <call pos:start="195:18" pos:end="195:29"><name pos:start="195:18" pos:end="195:22">frexp</name><argument_list pos:start="195:23" pos:end="195:29">(<argument pos:start="195:24" pos:end="195:24"><expr pos:start="195:24" pos:end="195:24"><name pos:start="195:24" pos:end="195:24">f</name></expr></argument>, <argument pos:start="195:27" pos:end="195:28"><expr pos:start="195:27" pos:end="195:28"><operator pos:start="195:27" pos:end="195:27">&amp;</operator><name pos:start="195:28" pos:end="195:28">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:47"><expr pos:start="197:13" pos:end="197:46"><name pos:start="197:13" pos:end="197:13">m</name> <operator pos:start="197:15" pos:end="197:15">=</operator> <operator pos:start="197:17" pos:end="197:17">(</operator><name pos:start="197:18" pos:end="197:25">uint32_t</name><operator pos:start="197:26" pos:end="197:26">)</operator><operator pos:start="197:27" pos:end="197:27">(</operator><name pos:start="197:28" pos:end="197:29">fm</name><operator pos:start="197:30" pos:end="197:30">*</operator><operator pos:start="197:31" pos:end="197:31">(</operator><literal type="number" pos:start="197:32" pos:end="197:34">1LL</literal><operator pos:start="197:35" pos:end="197:36">&lt;&lt;</operator><literal type="number" pos:start="197:37" pos:end="197:38">31</literal><operator pos:start="197:39" pos:end="197:39">)</operator> <operator pos:start="197:41" pos:end="197:41">+</operator> <literal type="number" pos:start="197:43" pos:end="197:45">0.5</literal><operator pos:start="197:46" pos:end="197:46">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:35"><expr pos:start="199:13" pos:end="199:34"><name pos:start="199:13" pos:end="199:13">e</name><operator pos:start="199:14" pos:end="199:15">+=</operator> <name pos:start="199:17" pos:end="199:25">FRAC_BITS</name> <operator pos:start="199:27" pos:end="199:27">-</operator> <literal type="number" pos:start="199:29" pos:end="199:32">31</literal> <operator pos:start="199:32" pos:end="199:32">+</operator> <literal type="number" pos:start="199:34" pos:end="199:34">5</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="203:13" pos:end="203:41">/* normalized to FRAC_BITS */</comment>

            <expr_stmt pos:start="205:13" pos:end="205:35"><expr pos:start="205:13" pos:end="205:34"><name pos:start="205:13" pos:end="205:30"><name pos:start="205:13" pos:end="205:27">table_4_3_value</name><index pos:start="205:28" pos:end="205:30">[<expr pos:start="205:29" pos:end="205:29"><name pos:start="205:29" pos:end="205:29">i</name></expr>]</index></name> <operator pos:start="205:32" pos:end="205:32">=</operator> <name pos:start="205:34" pos:end="205:34">m</name></expr>;</expr_stmt>

<comment type="line" pos:start="207:1" pos:end="207:88">//            av_log(NULL, AV_LOG_DEBUG, "%d %d %f\n", i, m, pow((double)i, 4.0 / 3.0));</comment>

            <expr_stmt pos:start="209:13" pos:end="209:34"><expr pos:start="209:13" pos:end="209:33"><name pos:start="209:13" pos:end="209:28"><name pos:start="209:13" pos:end="209:25">table_4_3_exp</name><index pos:start="209:26" pos:end="209:28">[<expr pos:start="209:27" pos:end="209:27"><name pos:start="209:27" pos:end="209:27">i</name></expr>]</index></name> <operator pos:start="209:30" pos:end="209:30">=</operator> <operator pos:start="209:32" pos:end="209:32">-</operator><name pos:start="209:33" pos:end="209:33">e</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="213:9" pos:end="225:9">for<control pos:start="213:12" pos:end="213:31">(<init pos:start="213:13" pos:end="213:16"><expr pos:start="213:13" pos:end="213:15"><name pos:start="213:13" pos:end="213:13">i</name><operator pos:start="213:14" pos:end="213:14">=</operator><literal type="number" pos:start="213:15" pos:end="213:15">0</literal></expr>;</init> <condition pos:start="213:18" pos:end="213:26"><expr pos:start="213:18" pos:end="213:25"><name pos:start="213:18" pos:end="213:18">i</name><operator pos:start="213:19" pos:end="213:19">&lt;</operator><literal type="number" pos:start="213:20" pos:end="213:22">512</literal><operator pos:start="213:23" pos:end="213:23">*</operator><literal type="number" pos:start="213:24" pos:end="213:25">16</literal></expr>;</condition> <incr pos:start="213:28" pos:end="213:30"><expr pos:start="213:28" pos:end="213:30"><name pos:start="213:28" pos:end="213:28">i</name><operator pos:start="213:29" pos:end="213:30">++</operator></expr></incr>)</control><block pos:start="213:32" pos:end="225:9">{<block_content pos:start="215:13" pos:end="223:51">

            <decl_stmt pos:start="215:13" pos:end="215:37"><decl pos:start="215:13" pos:end="215:36"><type pos:start="215:13" pos:end="215:15"><name pos:start="215:13" pos:end="215:15">int</name></type> <name pos:start="215:17" pos:end="215:24">exponent</name><init pos:start="215:25" pos:end="215:36">= <expr pos:start="215:27" pos:end="215:36"><operator pos:start="215:27" pos:end="215:27">(</operator><name pos:start="215:28" pos:end="215:28">i</name><operator pos:start="215:29" pos:end="215:30">&gt;&gt;</operator><literal type="number" pos:start="215:31" pos:end="215:31">4</literal><operator pos:start="215:32" pos:end="215:32">)</operator><operator pos:start="215:33" pos:end="215:33">-</operator><literal type="number" pos:start="215:34" pos:end="215:36">400</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="217:13" pos:end="217:83"><decl pos:start="217:13" pos:end="217:82"><type pos:start="217:13" pos:end="217:18"><name pos:start="217:13" pos:end="217:18">double</name></type> <name pos:start="217:20" pos:end="217:20">f</name><init pos:start="217:21" pos:end="217:82">= <expr pos:start="217:23" pos:end="217:82"><call pos:start="217:23" pos:end="217:42"><name pos:start="217:23" pos:end="217:25">pow</name><argument_list pos:start="217:26" pos:end="217:42">(<argument pos:start="217:27" pos:end="217:30"><expr pos:start="217:27" pos:end="217:30"><name pos:start="217:27" pos:end="217:27">i</name><operator pos:start="217:28" pos:end="217:28">&amp;</operator><literal type="number" pos:start="217:29" pos:end="217:30">15</literal></expr></argument>, <argument pos:start="217:33" pos:end="217:41"><expr pos:start="217:33" pos:end="217:41"><literal type="number" pos:start="217:33" pos:end="217:35">4.0</literal> <operator pos:start="217:37" pos:end="217:37">/</operator> <literal type="number" pos:start="217:39" pos:end="217:41">3.0</literal></expr></argument>)</argument_list></call> <operator pos:start="217:44" pos:end="217:44">*</operator> <call pos:start="217:46" pos:end="217:82"><name pos:start="217:46" pos:end="217:48">pow</name><argument_list pos:start="217:49" pos:end="217:82">(<argument pos:start="217:50" pos:end="217:50"><expr pos:start="217:50" pos:end="217:50"><literal type="number" pos:start="217:50" pos:end="217:50">2</literal></expr></argument>, <argument pos:start="217:53" pos:end="217:81"><expr pos:start="217:53" pos:end="217:81"><name pos:start="217:53" pos:end="217:60">exponent</name><operator pos:start="217:61" pos:end="217:61">*</operator><literal type="number" pos:start="217:62" pos:end="217:67">0.25</literal> <operator pos:start="217:67" pos:end="217:67">+</operator> <name pos:start="217:69" pos:end="217:77">FRAC_BITS</name> <operator pos:start="217:79" pos:end="217:79">+</operator> <literal type="number" pos:start="217:81" pos:end="217:81">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:56"><expr pos:start="219:13" pos:end="219:55"><name pos:start="219:13" pos:end="219:44"><name pos:start="219:13" pos:end="219:24">expval_table</name><index pos:start="219:25" pos:end="219:38">[<expr pos:start="219:26" pos:end="219:37"><name pos:start="219:26" pos:end="219:33">exponent</name><operator pos:start="219:34" pos:end="219:34">+</operator><literal type="number" pos:start="219:35" pos:end="219:37">400</literal></expr>]</index><index pos:start="219:39" pos:end="219:44">[<expr pos:start="219:40" pos:end="219:43"><name pos:start="219:40" pos:end="219:40">i</name><operator pos:start="219:41" pos:end="219:41">&amp;</operator><literal type="number" pos:start="219:42" pos:end="219:43">15</literal></expr>]</index></name><operator pos:start="219:45" pos:end="219:45">=</operator> <call pos:start="219:47" pos:end="219:55"><name pos:start="219:47" pos:end="219:52">lrintf</name><argument_list pos:start="219:53" pos:end="219:55">(<argument pos:start="219:54" pos:end="219:54"><expr pos:start="219:54" pos:end="219:54"><name pos:start="219:54" pos:end="219:54">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="221:13" pos:end="223:51"><if pos:start="221:13" pos:end="223:51">if<condition pos:start="221:15" pos:end="221:25">(<expr pos:start="221:16" pos:end="221:24"><operator pos:start="221:16" pos:end="221:16">(</operator><name pos:start="221:17" pos:end="221:17">i</name><operator pos:start="221:18" pos:end="221:18">&amp;</operator><literal type="number" pos:start="221:19" pos:end="221:20">15</literal><operator pos:start="221:21" pos:end="221:21">)</operator><operator pos:start="221:22" pos:end="221:23">==</operator><literal type="number" pos:start="221:24" pos:end="221:24">1</literal></expr>)</condition><block type="pseudo" pos:start="223:17" pos:end="223:51"><block_content pos:start="223:17" pos:end="223:51">

                <expr_stmt pos:start="223:17" pos:end="223:51"><expr pos:start="223:17" pos:end="223:50"><name pos:start="223:17" pos:end="223:39"><name pos:start="223:17" pos:end="223:25">exp_table</name><index pos:start="223:26" pos:end="223:39">[<expr pos:start="223:27" pos:end="223:38"><name pos:start="223:27" pos:end="223:34">exponent</name><operator pos:start="223:35" pos:end="223:35">+</operator><literal type="number" pos:start="223:36" pos:end="223:38">400</literal></expr>]</index></name><operator pos:start="223:40" pos:end="223:40">=</operator> <call pos:start="223:42" pos:end="223:50"><name pos:start="223:42" pos:end="223:47">lrintf</name><argument_list pos:start="223:48" pos:end="223:50">(<argument pos:start="223:49" pos:end="223:49"><expr pos:start="223:49" pos:end="223:49"><name pos:start="223:49" pos:end="223:49">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>



        <for pos:start="229:9" pos:end="251:9">for<control pos:start="229:12" pos:end="229:24">(<init pos:start="229:13" pos:end="229:16"><expr pos:start="229:13" pos:end="229:15"><name pos:start="229:13" pos:end="229:13">i</name><operator pos:start="229:14" pos:end="229:14">=</operator><literal type="number" pos:start="229:15" pos:end="229:15">0</literal></expr>;</init><condition pos:start="229:17" pos:end="229:20"><expr pos:start="229:17" pos:end="229:19"><name pos:start="229:17" pos:end="229:17">i</name><operator pos:start="229:18" pos:end="229:18">&lt;</operator><literal type="number" pos:start="229:19" pos:end="229:19">7</literal></expr>;</condition><incr pos:start="229:21" pos:end="229:23"><expr pos:start="229:21" pos:end="229:23"><name pos:start="229:21" pos:end="229:21">i</name><operator pos:start="229:22" pos:end="229:23">++</operator></expr></incr>)</control> <block pos:start="229:26" pos:end="251:9">{<block_content pos:start="231:13" pos:end="249:35">

            <decl_stmt pos:start="231:13" pos:end="231:20"><decl pos:start="231:13" pos:end="231:19"><type pos:start="231:13" pos:end="231:17"><name pos:start="231:13" pos:end="231:17">float</name></type> <name pos:start="231:19" pos:end="231:19">f</name></decl>;</decl_stmt>

            <decl_stmt pos:start="233:13" pos:end="233:18"><decl pos:start="233:13" pos:end="233:17"><type pos:start="233:13" pos:end="233:15"><name pos:start="233:13" pos:end="233:15">int</name></type> <name pos:start="233:17" pos:end="233:17">v</name></decl>;</decl_stmt>

            <if_stmt pos:start="235:13" pos:end="245:13"><if pos:start="235:13" pos:end="241:13">if <condition pos:start="235:16" pos:end="235:23">(<expr pos:start="235:17" pos:end="235:22"><name pos:start="235:17" pos:end="235:17">i</name> <operator pos:start="235:19" pos:end="235:20">!=</operator> <literal type="number" pos:start="235:22" pos:end="235:22">6</literal></expr>)</condition> <block pos:start="235:25" pos:end="241:13">{<block_content pos:start="237:17" pos:end="239:40">

                <expr_stmt pos:start="237:17" pos:end="237:49"><expr pos:start="237:17" pos:end="237:48"><name pos:start="237:17" pos:end="237:17">f</name> <operator pos:start="237:19" pos:end="237:19">=</operator> <call pos:start="237:21" pos:end="237:48"><name pos:start="237:21" pos:end="237:23">tan</name><argument_list pos:start="237:24" pos:end="237:48">(<argument pos:start="237:25" pos:end="237:47"><expr pos:start="237:25" pos:end="237:47"><operator pos:start="237:25" pos:end="237:25">(</operator><name pos:start="237:26" pos:end="237:31">double</name><operator pos:start="237:32" pos:end="237:32">)</operator><name pos:start="237:33" pos:end="237:33">i</name> <operator pos:start="237:35" pos:end="237:35">*</operator> <name pos:start="237:37" pos:end="237:40">M_PI</name> <operator pos:start="237:42" pos:end="237:42">/</operator> <literal type="number" pos:start="237:44" pos:end="237:47">12.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="239:17" pos:end="239:40"><expr pos:start="239:17" pos:end="239:39"><name pos:start="239:17" pos:end="239:17">v</name> <operator pos:start="239:19" pos:end="239:19">=</operator> <call pos:start="239:21" pos:end="239:39"><name pos:start="239:21" pos:end="239:24">FIXR</name><argument_list pos:start="239:25" pos:end="239:39">(<argument pos:start="239:26" pos:end="239:38"><expr pos:start="239:26" pos:end="239:38"><name pos:start="239:26" pos:end="239:26">f</name> <operator pos:start="239:28" pos:end="239:28">/</operator> <operator pos:start="239:30" pos:end="239:30">(</operator><literal type="number" pos:start="239:31" pos:end="239:35">1.0</literal> <operator pos:start="239:35" pos:end="239:35">+</operator> <name pos:start="239:37" pos:end="239:37">f</name><operator pos:start="239:38" pos:end="239:38">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="241:15" pos:end="245:13">else <block pos:start="241:20" pos:end="245:13">{<block_content pos:start="243:17" pos:end="243:30">

                <expr_stmt pos:start="243:17" pos:end="243:30"><expr pos:start="243:17" pos:end="243:29"><name pos:start="243:17" pos:end="243:17">v</name> <operator pos:start="243:19" pos:end="243:19">=</operator> <call pos:start="243:21" pos:end="243:29"><name pos:start="243:21" pos:end="243:24">FIXR</name><argument_list pos:start="243:25" pos:end="243:29">(<argument pos:start="243:26" pos:end="243:28"><expr pos:start="243:26" pos:end="243:28"><literal type="number" pos:start="243:26" pos:end="243:28">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:31"><expr pos:start="247:13" pos:end="247:30"><name pos:start="247:13" pos:end="247:26"><name pos:start="247:13" pos:end="247:20">is_table</name><index pos:start="247:21" pos:end="247:23">[<expr pos:start="247:22" pos:end="247:22"><literal type="number" pos:start="247:22" pos:end="247:22">0</literal></expr>]</index><index pos:start="247:24" pos:end="247:26">[<expr pos:start="247:25" pos:end="247:25"><name pos:start="247:25" pos:end="247:25">i</name></expr>]</index></name> <operator pos:start="247:28" pos:end="247:28">=</operator> <name pos:start="247:30" pos:end="247:30">v</name></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:35"><expr pos:start="249:13" pos:end="249:34"><name pos:start="249:13" pos:end="249:30"><name pos:start="249:13" pos:end="249:20">is_table</name><index pos:start="249:21" pos:end="249:23">[<expr pos:start="249:22" pos:end="249:22"><literal type="number" pos:start="249:22" pos:end="249:22">1</literal></expr>]</index><index pos:start="249:24" pos:end="249:30">[<expr pos:start="249:25" pos:end="249:29"><literal type="number" pos:start="249:25" pos:end="249:25">6</literal> <operator pos:start="249:27" pos:end="249:27">-</operator> <name pos:start="249:29" pos:end="249:29">i</name></expr>]</index></name> <operator pos:start="249:32" pos:end="249:32">=</operator> <name pos:start="249:34" pos:end="249:34">v</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="253:9" pos:end="253:28">/* invalid values */</comment>

        <for pos:start="255:9" pos:end="257:50">for<control pos:start="255:12" pos:end="255:25">(<init pos:start="255:13" pos:end="255:16"><expr pos:start="255:13" pos:end="255:15"><name pos:start="255:13" pos:end="255:13">i</name><operator pos:start="255:14" pos:end="255:14">=</operator><literal type="number" pos:start="255:15" pos:end="255:15">7</literal></expr>;</init><condition pos:start="255:17" pos:end="255:21"><expr pos:start="255:17" pos:end="255:20"><name pos:start="255:17" pos:end="255:17">i</name><operator pos:start="255:18" pos:end="255:18">&lt;</operator><literal type="number" pos:start="255:19" pos:end="255:20">16</literal></expr>;</condition><incr pos:start="255:22" pos:end="255:24"><expr pos:start="255:22" pos:end="255:24"><name pos:start="255:22" pos:end="255:22">i</name><operator pos:start="255:23" pos:end="255:24">++</operator></expr></incr>)</control><block type="pseudo" pos:start="257:13" pos:end="257:50"><block_content pos:start="257:13" pos:end="257:50">

            <expr_stmt pos:start="257:13" pos:end="257:50"><expr pos:start="257:13" pos:end="257:49"><name pos:start="257:13" pos:end="257:26"><name pos:start="257:13" pos:end="257:20">is_table</name><index pos:start="257:21" pos:end="257:23">[<expr pos:start="257:22" pos:end="257:22"><literal type="number" pos:start="257:22" pos:end="257:22">0</literal></expr>]</index><index pos:start="257:24" pos:end="257:26">[<expr pos:start="257:25" pos:end="257:25"><name pos:start="257:25" pos:end="257:25">i</name></expr>]</index></name> <operator pos:start="257:28" pos:end="257:28">=</operator> <name pos:start="257:30" pos:end="257:43"><name pos:start="257:30" pos:end="257:37">is_table</name><index pos:start="257:38" pos:end="257:40">[<expr pos:start="257:39" pos:end="257:39"><literal type="number" pos:start="257:39" pos:end="257:39">1</literal></expr>]</index><index pos:start="257:41" pos:end="257:43">[<expr pos:start="257:42" pos:end="257:42"><name pos:start="257:42" pos:end="257:42">i</name></expr>]</index></name> <operator pos:start="257:45" pos:end="257:45">=</operator> <literal type="number" pos:start="257:47" pos:end="257:49">0.0</literal></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="261:9" pos:end="287:9">for<control pos:start="261:12" pos:end="261:25">(<init pos:start="261:13" pos:end="261:16"><expr pos:start="261:13" pos:end="261:15"><name pos:start="261:13" pos:end="261:13">i</name><operator pos:start="261:14" pos:end="261:14">=</operator><literal type="number" pos:start="261:15" pos:end="261:15">0</literal></expr>;</init><condition pos:start="261:17" pos:end="261:21"><expr pos:start="261:17" pos:end="261:20"><name pos:start="261:17" pos:end="261:17">i</name><operator pos:start="261:18" pos:end="261:18">&lt;</operator><literal type="number" pos:start="261:19" pos:end="261:20">16</literal></expr>;</condition><incr pos:start="261:22" pos:end="261:24"><expr pos:start="261:22" pos:end="261:24"><name pos:start="261:22" pos:end="261:22">i</name><operator pos:start="261:23" pos:end="261:24">++</operator></expr></incr>)</control> <block pos:start="261:27" pos:end="287:9">{<block_content pos:start="263:13" pos:end="285:13">

            <decl_stmt pos:start="263:13" pos:end="263:21"><decl pos:start="263:13" pos:end="263:20"><type pos:start="263:13" pos:end="263:18"><name pos:start="263:13" pos:end="263:18">double</name></type> <name pos:start="263:20" pos:end="263:20">f</name></decl>;</decl_stmt>

            <decl_stmt pos:start="265:13" pos:end="265:21"><decl pos:start="265:13" pos:end="265:17"><type pos:start="265:13" pos:end="265:15"><name pos:start="265:13" pos:end="265:15">int</name></type> <name pos:start="265:17" pos:end="265:17">e</name></decl>, <decl pos:start="265:20" pos:end="265:20"><type ref="prev" pos:start="265:13" pos:end="265:15"/><name pos:start="265:20" pos:end="265:20">k</name></decl>;</decl_stmt>



            <for pos:start="269:13" pos:end="285:13">for<control pos:start="269:16" pos:end="269:28">(<init pos:start="269:17" pos:end="269:20"><expr pos:start="269:17" pos:end="269:19"><name pos:start="269:17" pos:end="269:17">j</name><operator pos:start="269:18" pos:end="269:18">=</operator><literal type="number" pos:start="269:19" pos:end="269:19">0</literal></expr>;</init><condition pos:start="269:21" pos:end="269:24"><expr pos:start="269:21" pos:end="269:23"><name pos:start="269:21" pos:end="269:21">j</name><operator pos:start="269:22" pos:end="269:22">&lt;</operator><literal type="number" pos:start="269:23" pos:end="269:23">2</literal></expr>;</condition><incr pos:start="269:25" pos:end="269:27"><expr pos:start="269:25" pos:end="269:27"><name pos:start="269:25" pos:end="269:25">j</name><operator pos:start="269:26" pos:end="269:27">++</operator></expr></incr>)</control> <block pos:start="269:30" pos:end="285:13">{<block_content pos:start="271:17" pos:end="283:76">

                <expr_stmt pos:start="271:17" pos:end="271:46"><expr pos:start="271:17" pos:end="271:45"><name pos:start="271:17" pos:end="271:17">e</name> <operator pos:start="271:19" pos:end="271:19">=</operator> <operator pos:start="271:21" pos:end="271:21">-</operator><operator pos:start="271:22" pos:end="271:22">(</operator><name pos:start="271:23" pos:end="271:23">j</name> <operator pos:start="271:25" pos:end="271:25">+</operator> <literal type="number" pos:start="271:27" pos:end="271:27">1</literal><operator pos:start="271:28" pos:end="271:28">)</operator> <operator pos:start="271:30" pos:end="271:30">*</operator> <operator pos:start="271:32" pos:end="271:32">(</operator><operator pos:start="271:33" pos:end="271:33">(</operator><name pos:start="271:34" pos:end="271:34">i</name> <operator pos:start="271:36" pos:end="271:36">+</operator> <literal type="number" pos:start="271:38" pos:end="271:38">1</literal><operator pos:start="271:39" pos:end="271:39">)</operator> <operator pos:start="271:41" pos:end="271:42">&gt;&gt;</operator> <literal type="number" pos:start="271:44" pos:end="271:44">1</literal><operator pos:start="271:45" pos:end="271:45">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="273:17" pos:end="273:38"><expr pos:start="273:17" pos:end="273:37"><name pos:start="273:17" pos:end="273:17">f</name> <operator pos:start="273:19" pos:end="273:19">=</operator> <call pos:start="273:21" pos:end="273:37"><name pos:start="273:21" pos:end="273:23">pow</name><argument_list pos:start="273:24" pos:end="273:37">(<argument pos:start="273:25" pos:end="273:27"><expr pos:start="273:25" pos:end="273:27"><literal type="number" pos:start="273:25" pos:end="273:27">2.0</literal></expr></argument>, <argument pos:start="273:30" pos:end="273:36"><expr pos:start="273:30" pos:end="273:36"><name pos:start="273:30" pos:end="273:30">e</name> <operator pos:start="273:32" pos:end="273:32">/</operator> <literal type="number" pos:start="273:34" pos:end="273:36">4.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="275:17" pos:end="275:26"><expr pos:start="275:17" pos:end="275:25"><name pos:start="275:17" pos:end="275:17">k</name> <operator pos:start="275:19" pos:end="275:19">=</operator> <name pos:start="275:21" pos:end="275:21">i</name> <operator pos:start="275:23" pos:end="275:23">&amp;</operator> <literal type="number" pos:start="275:25" pos:end="275:25">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="277:17" pos:end="277:52"><expr pos:start="277:17" pos:end="277:51"><name pos:start="277:17" pos:end="277:41"><name pos:start="277:17" pos:end="277:28">is_table_lsf</name><index pos:start="277:29" pos:end="277:31">[<expr pos:start="277:30" pos:end="277:30"><name pos:start="277:30" pos:end="277:30">j</name></expr>]</index><index pos:start="277:32" pos:end="277:38">[<expr pos:start="277:33" pos:end="277:37"><name pos:start="277:33" pos:end="277:33">k</name> <operator pos:start="277:35" pos:end="277:35">^</operator> <literal type="number" pos:start="277:37" pos:end="277:37">1</literal></expr>]</index><index pos:start="277:39" pos:end="277:41">[<expr pos:start="277:40" pos:end="277:40"><name pos:start="277:40" pos:end="277:40">i</name></expr>]</index></name> <operator pos:start="277:43" pos:end="277:43">=</operator> <call pos:start="277:45" pos:end="277:51"><name pos:start="277:45" pos:end="277:48">FIXR</name><argument_list pos:start="277:49" pos:end="277:51">(<argument pos:start="277:50" pos:end="277:50"><expr pos:start="277:50" pos:end="277:50"><name pos:start="277:50" pos:end="277:50">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="279:17" pos:end="279:50"><expr pos:start="279:17" pos:end="279:49"><name pos:start="279:17" pos:end="279:37"><name pos:start="279:17" pos:end="279:28">is_table_lsf</name><index pos:start="279:29" pos:end="279:31">[<expr pos:start="279:30" pos:end="279:30"><name pos:start="279:30" pos:end="279:30">j</name></expr>]</index><index pos:start="279:32" pos:end="279:34">[<expr pos:start="279:33" pos:end="279:33"><name pos:start="279:33" pos:end="279:33">k</name></expr>]</index><index pos:start="279:35" pos:end="279:37">[<expr pos:start="279:36" pos:end="279:36"><name pos:start="279:36" pos:end="279:36">i</name></expr>]</index></name> <operator pos:start="279:39" pos:end="279:39">=</operator> <call pos:start="279:41" pos:end="279:49"><name pos:start="279:41" pos:end="279:44">FIXR</name><argument_list pos:start="279:45" pos:end="279:49">(<argument pos:start="279:46" pos:end="279:48"><expr pos:start="279:46" pos:end="279:48"><literal type="number" pos:start="279:46" pos:end="279:48">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="281:17" pos:end="283:76"><expr pos:start="281:17" pos:end="283:75"><call pos:start="281:17" pos:end="283:75"><name pos:start="281:17" pos:end="281:23">dprintf</name><argument_list pos:start="281:24" pos:end="283:75">(<argument pos:start="281:25" pos:end="281:53"><expr pos:start="281:25" pos:end="281:53"><literal type="string" pos:start="281:25" pos:end="281:53">"is_table_lsf %d %d: %x %x\n"</literal></expr></argument>,

                        <argument pos:start="283:25" pos:end="283:25"><expr pos:start="283:25" pos:end="283:25"><name pos:start="283:25" pos:end="283:25">i</name></expr></argument>, <argument pos:start="283:28" pos:end="283:28"><expr pos:start="283:28" pos:end="283:28"><name pos:start="283:28" pos:end="283:28">j</name></expr></argument>, <argument pos:start="283:31" pos:end="283:51"><expr pos:start="283:31" pos:end="283:51"><name pos:start="283:31" pos:end="283:51"><name pos:start="283:31" pos:end="283:42">is_table_lsf</name><index pos:start="283:43" pos:end="283:45">[<expr pos:start="283:44" pos:end="283:44"><name pos:start="283:44" pos:end="283:44">j</name></expr>]</index><index pos:start="283:46" pos:end="283:48">[<expr pos:start="283:47" pos:end="283:47"><literal type="number" pos:start="283:47" pos:end="283:47">0</literal></expr>]</index><index pos:start="283:49" pos:end="283:51">[<expr pos:start="283:50" pos:end="283:50"><name pos:start="283:50" pos:end="283:50">i</name></expr>]</index></name></expr></argument>, <argument pos:start="283:54" pos:end="283:74"><expr pos:start="283:54" pos:end="283:74"><name pos:start="283:54" pos:end="283:74"><name pos:start="283:54" pos:end="283:65">is_table_lsf</name><index pos:start="283:66" pos:end="283:68">[<expr pos:start="283:67" pos:end="283:67"><name pos:start="283:67" pos:end="283:67">j</name></expr>]</index><index pos:start="283:69" pos:end="283:71">[<expr pos:start="283:70" pos:end="283:70"><literal type="number" pos:start="283:70" pos:end="283:70">1</literal></expr>]</index><index pos:start="283:72" pos:end="283:74">[<expr pos:start="283:73" pos:end="283:73"><name pos:start="283:73" pos:end="283:73">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <for pos:start="291:9" pos:end="321:9">for<control pos:start="291:12" pos:end="291:24">(<init pos:start="291:13" pos:end="291:16"><expr pos:start="291:13" pos:end="291:15"><name pos:start="291:13" pos:end="291:13">i</name><operator pos:start="291:14" pos:end="291:14">=</operator><literal type="number" pos:start="291:15" pos:end="291:15">0</literal></expr>;</init><condition pos:start="291:17" pos:end="291:20"><expr pos:start="291:17" pos:end="291:19"><name pos:start="291:17" pos:end="291:17">i</name><operator pos:start="291:18" pos:end="291:18">&lt;</operator><literal type="number" pos:start="291:19" pos:end="291:19">8</literal></expr>;</condition><incr pos:start="291:21" pos:end="291:23"><expr pos:start="291:21" pos:end="291:23"><name pos:start="291:21" pos:end="291:21">i</name><operator pos:start="291:22" pos:end="291:23">++</operator></expr></incr>)</control> <block pos:start="291:26" pos:end="321:9">{<block_content pos:start="293:13" pos:end="315:44">

            <decl_stmt pos:start="293:13" pos:end="293:29"><decl pos:start="293:13" pos:end="293:20"><type pos:start="293:13" pos:end="293:17"><name pos:start="293:13" pos:end="293:17">float</name></type> <name pos:start="293:19" pos:end="293:20">ci</name></decl>, <decl pos:start="293:23" pos:end="293:24"><type ref="prev" pos:start="293:13" pos:end="293:17"/><name pos:start="293:23" pos:end="293:24">cs</name></decl>, <decl pos:start="293:27" pos:end="293:28"><type ref="prev" pos:start="293:13" pos:end="293:17"/><name pos:start="293:27" pos:end="293:28">ca</name></decl>;</decl_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:29"><expr pos:start="295:13" pos:end="295:28"><name pos:start="295:13" pos:end="295:14">ci</name> <operator pos:start="295:16" pos:end="295:16">=</operator> <name pos:start="295:18" pos:end="295:28"><name pos:start="295:18" pos:end="295:25">ci_table</name><index pos:start="295:26" pos:end="295:28">[<expr pos:start="295:27" pos:end="295:27"><name pos:start="295:27" pos:end="295:27">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:43"><expr pos:start="297:13" pos:end="297:42"><name pos:start="297:13" pos:end="297:14">cs</name> <operator pos:start="297:16" pos:end="297:16">=</operator> <literal type="number" pos:start="297:18" pos:end="297:20">1.0</literal> <operator pos:start="297:22" pos:end="297:22">/</operator> <call pos:start="297:24" pos:end="297:42"><name pos:start="297:24" pos:end="297:27">sqrt</name><argument_list pos:start="297:28" pos:end="297:42">(<argument pos:start="297:29" pos:end="297:41"><expr pos:start="297:29" pos:end="297:41"><literal type="number" pos:start="297:29" pos:end="297:33">1.0</literal> <operator pos:start="297:33" pos:end="297:33">+</operator> <name pos:start="297:35" pos:end="297:36">ci</name> <operator pos:start="297:38" pos:end="297:38">*</operator> <name pos:start="297:40" pos:end="297:41">ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:25"><expr pos:start="299:13" pos:end="299:24"><name pos:start="299:13" pos:end="299:14">ca</name> <operator pos:start="299:16" pos:end="299:16">=</operator> <name pos:start="299:18" pos:end="299:19">cs</name> <operator pos:start="299:21" pos:end="299:21">*</operator> <name pos:start="299:23" pos:end="299:24">ci</name></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:42"><expr pos:start="301:13" pos:end="301:41"><name pos:start="301:13" pos:end="301:27"><name pos:start="301:13" pos:end="301:21">csa_table</name><index pos:start="301:22" pos:end="301:24">[<expr pos:start="301:23" pos:end="301:23"><name pos:start="301:23" pos:end="301:23">i</name></expr>]</index><index pos:start="301:25" pos:end="301:27">[<expr pos:start="301:26" pos:end="301:26"><literal type="number" pos:start="301:26" pos:end="301:26">0</literal></expr>]</index></name> <operator pos:start="301:29" pos:end="301:29">=</operator> <call pos:start="301:31" pos:end="301:41"><name pos:start="301:31" pos:end="301:35">FIXHR</name><argument_list pos:start="301:36" pos:end="301:41">(<argument pos:start="301:37" pos:end="301:40"><expr pos:start="301:37" pos:end="301:40"><name pos:start="301:37" pos:end="301:38">cs</name><operator pos:start="301:39" pos:end="301:39">/</operator><literal type="number" pos:start="301:40" pos:end="301:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:42"><expr pos:start="303:13" pos:end="303:41"><name pos:start="303:13" pos:end="303:27"><name pos:start="303:13" pos:end="303:21">csa_table</name><index pos:start="303:22" pos:end="303:24">[<expr pos:start="303:23" pos:end="303:23"><name pos:start="303:23" pos:end="303:23">i</name></expr>]</index><index pos:start="303:25" pos:end="303:27">[<expr pos:start="303:26" pos:end="303:26"><literal type="number" pos:start="303:26" pos:end="303:26">1</literal></expr>]</index></name> <operator pos:start="303:29" pos:end="303:29">=</operator> <call pos:start="303:31" pos:end="303:41"><name pos:start="303:31" pos:end="303:35">FIXHR</name><argument_list pos:start="303:36" pos:end="303:41">(<argument pos:start="303:37" pos:end="303:40"><expr pos:start="303:37" pos:end="303:40"><name pos:start="303:37" pos:end="303:38">ca</name><operator pos:start="303:39" pos:end="303:39">/</operator><literal type="number" pos:start="303:40" pos:end="303:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:56"><expr pos:start="305:13" pos:end="305:55"><name pos:start="305:13" pos:end="305:27"><name pos:start="305:13" pos:end="305:21">csa_table</name><index pos:start="305:22" pos:end="305:24">[<expr pos:start="305:23" pos:end="305:23"><name pos:start="305:23" pos:end="305:23">i</name></expr>]</index><index pos:start="305:25" pos:end="305:27">[<expr pos:start="305:26" pos:end="305:26"><literal type="number" pos:start="305:26" pos:end="305:26">2</literal></expr>]</index></name> <operator pos:start="305:29" pos:end="305:29">=</operator> <call pos:start="305:31" pos:end="305:41"><name pos:start="305:31" pos:end="305:35">FIXHR</name><argument_list pos:start="305:36" pos:end="305:41">(<argument pos:start="305:37" pos:end="305:40"><expr pos:start="305:37" pos:end="305:40"><name pos:start="305:37" pos:end="305:38">ca</name><operator pos:start="305:39" pos:end="305:39">/</operator><literal type="number" pos:start="305:40" pos:end="305:40">4</literal></expr></argument>)</argument_list></call> <operator pos:start="305:43" pos:end="305:43">+</operator> <call pos:start="305:45" pos:end="305:55"><name pos:start="305:45" pos:end="305:49">FIXHR</name><argument_list pos:start="305:50" pos:end="305:55">(<argument pos:start="305:51" pos:end="305:54"><expr pos:start="305:51" pos:end="305:54"><name pos:start="305:51" pos:end="305:52">cs</name><operator pos:start="305:53" pos:end="305:53">/</operator><literal type="number" pos:start="305:54" pos:end="305:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:56"><expr pos:start="307:13" pos:end="307:55"><name pos:start="307:13" pos:end="307:27"><name pos:start="307:13" pos:end="307:21">csa_table</name><index pos:start="307:22" pos:end="307:24">[<expr pos:start="307:23" pos:end="307:23"><name pos:start="307:23" pos:end="307:23">i</name></expr>]</index><index pos:start="307:25" pos:end="307:27">[<expr pos:start="307:26" pos:end="307:26"><literal type="number" pos:start="307:26" pos:end="307:26">3</literal></expr>]</index></name> <operator pos:start="307:29" pos:end="307:29">=</operator> <call pos:start="307:31" pos:end="307:41"><name pos:start="307:31" pos:end="307:35">FIXHR</name><argument_list pos:start="307:36" pos:end="307:41">(<argument pos:start="307:37" pos:end="307:40"><expr pos:start="307:37" pos:end="307:40"><name pos:start="307:37" pos:end="307:38">ca</name><operator pos:start="307:39" pos:end="307:39">/</operator><literal type="number" pos:start="307:40" pos:end="307:40">4</literal></expr></argument>)</argument_list></call> <operator pos:start="307:43" pos:end="307:43">-</operator> <call pos:start="307:45" pos:end="307:55"><name pos:start="307:45" pos:end="307:49">FIXHR</name><argument_list pos:start="307:50" pos:end="307:55">(<argument pos:start="307:51" pos:end="307:54"><expr pos:start="307:51" pos:end="307:54"><name pos:start="307:51" pos:end="307:52">cs</name><operator pos:start="307:53" pos:end="307:53">/</operator><literal type="number" pos:start="307:54" pos:end="307:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:39"><expr pos:start="309:13" pos:end="309:38"><name pos:start="309:13" pos:end="309:33"><name pos:start="309:13" pos:end="309:27">csa_table_float</name><index pos:start="309:28" pos:end="309:30">[<expr pos:start="309:29" pos:end="309:29"><name pos:start="309:29" pos:end="309:29">i</name></expr>]</index><index pos:start="309:31" pos:end="309:33">[<expr pos:start="309:32" pos:end="309:32"><literal type="number" pos:start="309:32" pos:end="309:32">0</literal></expr>]</index></name> <operator pos:start="309:35" pos:end="309:35">=</operator> <name pos:start="309:37" pos:end="309:38">cs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:39"><expr pos:start="311:13" pos:end="311:38"><name pos:start="311:13" pos:end="311:33"><name pos:start="311:13" pos:end="311:27">csa_table_float</name><index pos:start="311:28" pos:end="311:30">[<expr pos:start="311:29" pos:end="311:29"><name pos:start="311:29" pos:end="311:29">i</name></expr>]</index><index pos:start="311:31" pos:end="311:33">[<expr pos:start="311:32" pos:end="311:32"><literal type="number" pos:start="311:32" pos:end="311:32">1</literal></expr>]</index></name> <operator pos:start="311:35" pos:end="311:35">=</operator> <name pos:start="311:37" pos:end="311:38">ca</name></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:44"><expr pos:start="313:13" pos:end="313:43"><name pos:start="313:13" pos:end="313:33"><name pos:start="313:13" pos:end="313:27">csa_table_float</name><index pos:start="313:28" pos:end="313:30">[<expr pos:start="313:29" pos:end="313:29"><name pos:start="313:29" pos:end="313:29">i</name></expr>]</index><index pos:start="313:31" pos:end="313:33">[<expr pos:start="313:32" pos:end="313:32"><literal type="number" pos:start="313:32" pos:end="313:32">2</literal></expr>]</index></name> <operator pos:start="313:35" pos:end="313:35">=</operator> <name pos:start="313:37" pos:end="313:38">ca</name> <operator pos:start="313:40" pos:end="313:40">+</operator> <name pos:start="313:42" pos:end="313:43">cs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:44"><expr pos:start="315:13" pos:end="315:43"><name pos:start="315:13" pos:end="315:33"><name pos:start="315:13" pos:end="315:27">csa_table_float</name><index pos:start="315:28" pos:end="315:30">[<expr pos:start="315:29" pos:end="315:29"><name pos:start="315:29" pos:end="315:29">i</name></expr>]</index><index pos:start="315:31" pos:end="315:33">[<expr pos:start="315:32" pos:end="315:32"><literal type="number" pos:start="315:32" pos:end="315:32">3</literal></expr>]</index></name> <operator pos:start="315:35" pos:end="315:35">=</operator> <name pos:start="315:37" pos:end="315:38">ca</name> <operator pos:start="315:40" pos:end="315:40">-</operator> <name pos:start="315:42" pos:end="315:43">cs</name></expr>;</expr_stmt>

<comment type="line" pos:start="317:1" pos:end="317:84">//            printf("%d %d %d %d\n", FIX(cs), FIX(cs-1), FIX(ca), FIX(cs)-FIX(ca));</comment>

<comment type="line" pos:start="319:1" pos:end="319:79">//            av_log(NULL, AV_LOG_DEBUG,"%f %f %f %f\n", cs, ca, ca+cs, ca-cs);</comment>

        </block_content>}</block></for>



        <comment type="block" pos:start="325:9" pos:end="325:34">/* compute mdct windows */</comment>

        <for pos:start="327:9" pos:end="379:9">for<control pos:start="327:12" pos:end="327:25">(<init pos:start="327:13" pos:end="327:16"><expr pos:start="327:13" pos:end="327:15"><name pos:start="327:13" pos:end="327:13">i</name><operator pos:start="327:14" pos:end="327:14">=</operator><literal type="number" pos:start="327:15" pos:end="327:15">0</literal></expr>;</init><condition pos:start="327:17" pos:end="327:21"><expr pos:start="327:17" pos:end="327:20"><name pos:start="327:17" pos:end="327:17">i</name><operator pos:start="327:18" pos:end="327:18">&lt;</operator><literal type="number" pos:start="327:19" pos:end="327:20">36</literal></expr>;</condition><incr pos:start="327:22" pos:end="327:24"><expr pos:start="327:22" pos:end="327:24"><name pos:start="327:22" pos:end="327:22">i</name><operator pos:start="327:23" pos:end="327:24">++</operator></expr></incr>)</control> <block pos:start="327:27" pos:end="379:9">{<block_content pos:start="329:13" pos:end="377:13">

            <for pos:start="329:13" pos:end="377:13">for<control pos:start="329:16" pos:end="329:30">(<init pos:start="329:17" pos:end="329:20"><expr pos:start="329:17" pos:end="329:19"><name pos:start="329:17" pos:end="329:17">j</name><operator pos:start="329:18" pos:end="329:18">=</operator><literal type="number" pos:start="329:19" pos:end="329:19">0</literal></expr>;</init> <condition pos:start="329:22" pos:end="329:25"><expr pos:start="329:22" pos:end="329:24"><name pos:start="329:22" pos:end="329:22">j</name><operator pos:start="329:23" pos:end="329:23">&lt;</operator><literal type="number" pos:start="329:24" pos:end="329:24">4</literal></expr>;</condition> <incr pos:start="329:27" pos:end="329:29"><expr pos:start="329:27" pos:end="329:29"><name pos:start="329:27" pos:end="329:27">j</name><operator pos:start="329:28" pos:end="329:29">++</operator></expr></incr>)</control><block pos:start="329:31" pos:end="377:13">{<block_content pos:start="331:17" pos:end="373:59">

                <decl_stmt pos:start="331:17" pos:end="331:25"><decl pos:start="331:17" pos:end="331:24"><type pos:start="331:17" pos:end="331:22"><name pos:start="331:17" pos:end="331:22">double</name></type> <name pos:start="331:24" pos:end="331:24">d</name></decl>;</decl_stmt>



                <if_stmt pos:start="335:17" pos:end="337:29"><if pos:start="335:17" pos:end="337:29">if<condition pos:start="335:19" pos:end="335:36">(<expr pos:start="335:20" pos:end="335:35"><name pos:start="335:20" pos:end="335:20">j</name><operator pos:start="335:21" pos:end="335:22">==</operator><literal type="number" pos:start="335:23" pos:end="335:23">2</literal> <operator pos:start="335:25" pos:end="335:26">&amp;&amp;</operator> <name pos:start="335:28" pos:end="335:28">i</name><operator pos:start="335:29" pos:end="335:29">%</operator><literal type="number" pos:start="335:30" pos:end="335:30">3</literal> <operator pos:start="335:32" pos:end="335:33">!=</operator> <literal type="number" pos:start="335:35" pos:end="335:35">1</literal></expr>)</condition><block type="pseudo" pos:start="337:21" pos:end="337:29"><block_content pos:start="337:21" pos:end="337:29">

                    <continue pos:start="337:21" pos:end="337:29">continue;</continue></block_content></block></if></if_stmt>



                <expr_stmt pos:start="341:17" pos:end="341:48"><expr pos:start="341:17" pos:end="341:47"><name pos:start="341:17" pos:end="341:17">d</name><operator pos:start="341:18" pos:end="341:18">=</operator> <call pos:start="341:20" pos:end="341:47"><name pos:start="341:20" pos:end="341:22">sin</name><argument_list pos:start="341:23" pos:end="341:47">(<argument pos:start="341:24" pos:end="341:46"><expr pos:start="341:24" pos:end="341:46"><name pos:start="341:24" pos:end="341:27">M_PI</name> <operator pos:start="341:29" pos:end="341:29">*</operator> <operator pos:start="341:31" pos:end="341:31">(</operator><name pos:start="341:32" pos:end="341:32">i</name> <operator pos:start="341:34" pos:end="341:34">+</operator> <literal type="number" pos:start="341:36" pos:end="341:38">0.5</literal><operator pos:start="341:39" pos:end="341:39">)</operator> <operator pos:start="341:41" pos:end="341:41">/</operator> <literal type="number" pos:start="341:43" pos:end="341:46">36.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="343:17" pos:end="359:17"><if pos:start="343:17" pos:end="351:17">if<condition pos:start="343:19" pos:end="343:24">(<expr pos:start="343:20" pos:end="343:23"><name pos:start="343:20" pos:end="343:20">j</name><operator pos:start="343:21" pos:end="343:22">==</operator><literal type="number" pos:start="343:23" pos:end="343:23">1</literal></expr>)</condition><block pos:start="343:25" pos:end="351:17">{<block_content pos:start="345:21" pos:end="349:40">

                    <if_stmt pos:start="345:21" pos:end="349:40"><if pos:start="345:21" pos:end="345:40">if     <condition pos:start="345:28" pos:end="345:34">(<expr pos:start="345:29" pos:end="345:33"><name pos:start="345:29" pos:end="345:29">i</name><operator pos:start="345:30" pos:end="345:31">&gt;=</operator><literal type="number" pos:start="345:32" pos:end="345:33">30</literal></expr>)</condition><block type="pseudo" pos:start="345:36" pos:end="345:40"><block_content pos:start="345:36" pos:end="345:40"> <expr_stmt pos:start="345:36" pos:end="345:40"><expr pos:start="345:36" pos:end="345:39"><name pos:start="345:36" pos:end="345:36">d</name><operator pos:start="345:37" pos:end="345:37">=</operator> <literal type="number" pos:start="345:39" pos:end="345:39">0</literal></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="347:21" pos:end="347:72">else if<condition pos:start="347:28" pos:end="347:34">(<expr pos:start="347:29" pos:end="347:33"><name pos:start="347:29" pos:end="347:29">i</name><operator pos:start="347:30" pos:end="347:31">&gt;=</operator><literal type="number" pos:start="347:32" pos:end="347:33">24</literal></expr>)</condition><block type="pseudo" pos:start="347:36" pos:end="347:72"><block_content pos:start="347:36" pos:end="347:72"> <expr_stmt pos:start="347:36" pos:end="347:72"><expr pos:start="347:36" pos:end="347:71"><name pos:start="347:36" pos:end="347:36">d</name><operator pos:start="347:37" pos:end="347:37">=</operator> <call pos:start="347:39" pos:end="347:71"><name pos:start="347:39" pos:end="347:41">sin</name><argument_list pos:start="347:42" pos:end="347:71">(<argument pos:start="347:43" pos:end="347:70"><expr pos:start="347:43" pos:end="347:70"><name pos:start="347:43" pos:end="347:46">M_PI</name> <operator pos:start="347:48" pos:end="347:48">*</operator> <operator pos:start="347:50" pos:end="347:50">(</operator><name pos:start="347:51" pos:end="347:51">i</name> <operator pos:start="347:53" pos:end="347:53">-</operator> <literal type="number" pos:start="347:55" pos:end="347:58">18</literal> <operator pos:start="347:58" pos:end="347:58">+</operator> <literal type="number" pos:start="347:60" pos:end="347:62">0.5</literal><operator pos:start="347:63" pos:end="347:63">)</operator> <operator pos:start="347:65" pos:end="347:65">/</operator> <literal type="number" pos:start="347:67" pos:end="347:70">12.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="349:21" pos:end="349:40">else if<condition pos:start="349:28" pos:end="349:34">(<expr pos:start="349:29" pos:end="349:33"><name pos:start="349:29" pos:end="349:29">i</name><operator pos:start="349:30" pos:end="349:31">&gt;=</operator><literal type="number" pos:start="349:32" pos:end="349:33">18</literal></expr>)</condition><block type="pseudo" pos:start="349:36" pos:end="349:40"><block_content pos:start="349:36" pos:end="349:40"> <expr_stmt pos:start="349:36" pos:end="349:40"><expr pos:start="349:36" pos:end="349:39"><name pos:start="349:36" pos:end="349:36">d</name><operator pos:start="349:37" pos:end="349:37">=</operator> <literal type="number" pos:start="349:39" pos:end="349:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if><if type="elseif" pos:start="351:18" pos:end="359:17">else if<condition pos:start="351:25" pos:end="351:30">(<expr pos:start="351:26" pos:end="351:29"><name pos:start="351:26" pos:end="351:26">j</name><operator pos:start="351:27" pos:end="351:28">==</operator><literal type="number" pos:start="351:29" pos:end="351:29">3</literal></expr>)</condition><block pos:start="351:31" pos:end="359:17">{<block_content pos:start="353:21" pos:end="357:40">

                    <if_stmt pos:start="353:21" pos:end="357:40"><if pos:start="353:21" pos:end="353:40">if     <condition pos:start="353:28" pos:end="353:34">(<expr pos:start="353:29" pos:end="353:33"><name pos:start="353:29" pos:end="353:29">i</name><operator pos:start="353:30" pos:end="353:30">&lt;</operator>  <literal type="number" pos:start="353:33" pos:end="353:33">6</literal></expr>)</condition><block type="pseudo" pos:start="353:36" pos:end="353:40"><block_content pos:start="353:36" pos:end="353:40"> <expr_stmt pos:start="353:36" pos:end="353:40"><expr pos:start="353:36" pos:end="353:39"><name pos:start="353:36" pos:end="353:36">d</name><operator pos:start="353:37" pos:end="353:37">=</operator> <literal type="number" pos:start="353:39" pos:end="353:39">0</literal></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="355:21" pos:end="355:72">else if<condition pos:start="355:28" pos:end="355:34">(<expr pos:start="355:29" pos:end="355:33"><name pos:start="355:29" pos:end="355:29">i</name><operator pos:start="355:30" pos:end="355:30">&lt;</operator> <literal type="number" pos:start="355:32" pos:end="355:33">12</literal></expr>)</condition><block type="pseudo" pos:start="355:36" pos:end="355:72"><block_content pos:start="355:36" pos:end="355:72"> <expr_stmt pos:start="355:36" pos:end="355:72"><expr pos:start="355:36" pos:end="355:71"><name pos:start="355:36" pos:end="355:36">d</name><operator pos:start="355:37" pos:end="355:37">=</operator> <call pos:start="355:39" pos:end="355:71"><name pos:start="355:39" pos:end="355:41">sin</name><argument_list pos:start="355:42" pos:end="355:71">(<argument pos:start="355:43" pos:end="355:70"><expr pos:start="355:43" pos:end="355:70"><name pos:start="355:43" pos:end="355:46">M_PI</name> <operator pos:start="355:48" pos:end="355:48">*</operator> <operator pos:start="355:50" pos:end="355:50">(</operator><name pos:start="355:51" pos:end="355:51">i</name> <operator pos:start="355:53" pos:end="355:53">-</operator>  <literal type="number" pos:start="355:56" pos:end="355:58">6</literal> <operator pos:start="355:58" pos:end="355:58">+</operator> <literal type="number" pos:start="355:60" pos:end="355:62">0.5</literal><operator pos:start="355:63" pos:end="355:63">)</operator> <operator pos:start="355:65" pos:end="355:65">/</operator> <literal type="number" pos:start="355:67" pos:end="355:70">12.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="357:21" pos:end="357:40">else if<condition pos:start="357:28" pos:end="357:34">(<expr pos:start="357:29" pos:end="357:33"><name pos:start="357:29" pos:end="357:29">i</name><operator pos:start="357:30" pos:end="357:30">&lt;</operator> <literal type="number" pos:start="357:32" pos:end="357:33">18</literal></expr>)</condition><block type="pseudo" pos:start="357:36" pos:end="357:40"><block_content pos:start="357:36" pos:end="357:40"> <expr_stmt pos:start="357:36" pos:end="357:40"><expr pos:start="357:36" pos:end="357:39"><name pos:start="357:36" pos:end="357:36">d</name><operator pos:start="357:37" pos:end="357:37">=</operator> <literal type="number" pos:start="357:39" pos:end="357:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <comment type="line" pos:start="361:17" pos:end="361:72">//merge last stage of imdct into the window coefficients</comment>

                <expr_stmt pos:start="363:17" pos:end="363:50"><expr pos:start="363:17" pos:end="363:49"><name pos:start="363:17" pos:end="363:17">d</name><operator pos:start="363:18" pos:end="363:19">*=</operator> <literal type="number" pos:start="363:21" pos:end="363:23">0.5</literal> <operator pos:start="363:25" pos:end="363:25">/</operator> <call pos:start="363:27" pos:end="363:49"><name pos:start="363:27" pos:end="363:29">cos</name><argument_list pos:start="363:30" pos:end="363:49">(<argument pos:start="363:31" pos:end="363:48"><expr pos:start="363:31" pos:end="363:48"><name pos:start="363:31" pos:end="363:34">M_PI</name><operator pos:start="363:35" pos:end="363:35">*</operator><operator pos:start="363:36" pos:end="363:36">(</operator><literal type="number" pos:start="363:37" pos:end="363:37">2</literal><operator pos:start="363:38" pos:end="363:38">*</operator><name pos:start="363:39" pos:end="363:39">i</name> <operator pos:start="363:41" pos:end="363:41">+</operator> <literal type="number" pos:start="363:43" pos:end="363:44">19</literal><operator pos:start="363:45" pos:end="363:45">)</operator><operator pos:start="363:46" pos:end="363:46">/</operator><literal type="number" pos:start="363:47" pos:end="363:48">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="367:17" pos:end="373:59"><if pos:start="367:17" pos:end="369:59">if<condition pos:start="367:19" pos:end="367:24">(<expr pos:start="367:20" pos:end="367:23"><name pos:start="367:20" pos:end="367:20">j</name><operator pos:start="367:21" pos:end="367:22">==</operator><literal type="number" pos:start="367:23" pos:end="367:23">2</literal></expr>)</condition><block type="pseudo" pos:start="369:21" pos:end="369:59"><block_content pos:start="369:21" pos:end="369:59">

                    <expr_stmt pos:start="369:21" pos:end="369:59"><expr pos:start="369:21" pos:end="369:58"><name pos:start="369:21" pos:end="369:36"><name pos:start="369:21" pos:end="369:28">mdct_win</name><index pos:start="369:29" pos:end="369:31">[<expr pos:start="369:30" pos:end="369:30"><name pos:start="369:30" pos:end="369:30">j</name></expr>]</index><index pos:start="369:32" pos:end="369:36">[<expr pos:start="369:33" pos:end="369:35"><name pos:start="369:33" pos:end="369:33">i</name><operator pos:start="369:34" pos:end="369:34">/</operator><literal type="number" pos:start="369:35" pos:end="369:35">3</literal></expr>]</index></name> <operator pos:start="369:38" pos:end="369:38">=</operator> <call pos:start="369:40" pos:end="369:58"><name pos:start="369:40" pos:end="369:44">FIXHR</name><argument_list pos:start="369:45" pos:end="369:58">(<argument pos:start="369:46" pos:end="369:57"><expr pos:start="369:46" pos:end="369:57"><operator pos:start="369:46" pos:end="369:46">(</operator><name pos:start="369:47" pos:end="369:47">d</name> <operator pos:start="369:49" pos:end="369:49">/</operator> <operator pos:start="369:51" pos:end="369:51">(</operator><literal type="number" pos:start="369:52" pos:end="369:52">1</literal><operator pos:start="369:53" pos:end="369:54">&lt;&lt;</operator><literal type="number" pos:start="369:55" pos:end="369:55">5</literal><operator pos:start="369:56" pos:end="369:56">)</operator><operator pos:start="369:57" pos:end="369:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="371:17" pos:end="373:59">else<block type="pseudo" pos:start="373:21" pos:end="373:59"><block_content pos:start="373:21" pos:end="373:59">

                    <expr_stmt pos:start="373:21" pos:end="373:59"><expr pos:start="373:21" pos:end="373:58"><name pos:start="373:21" pos:end="373:36"><name pos:start="373:21" pos:end="373:28">mdct_win</name><index pos:start="373:29" pos:end="373:31">[<expr pos:start="373:30" pos:end="373:30"><name pos:start="373:30" pos:end="373:30">j</name></expr>]</index><index pos:start="373:32" pos:end="373:36">[<expr pos:start="373:33" pos:end="373:33"><name pos:start="373:33" pos:end="373:33">i</name></expr>  ]</index></name> <operator pos:start="373:38" pos:end="373:38">=</operator> <call pos:start="373:40" pos:end="373:58"><name pos:start="373:40" pos:end="373:44">FIXHR</name><argument_list pos:start="373:45" pos:end="373:58">(<argument pos:start="373:46" pos:end="373:57"><expr pos:start="373:46" pos:end="373:57"><operator pos:start="373:46" pos:end="373:46">(</operator><name pos:start="373:47" pos:end="373:47">d</name> <operator pos:start="373:49" pos:end="373:49">/</operator> <operator pos:start="373:51" pos:end="373:51">(</operator><literal type="number" pos:start="373:52" pos:end="373:52">1</literal><operator pos:start="373:53" pos:end="373:54">&lt;&lt;</operator><literal type="number" pos:start="373:55" pos:end="373:55">5</literal><operator pos:start="373:56" pos:end="373:56">)</operator><operator pos:start="373:57" pos:end="373:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<comment type="line" pos:start="375:1" pos:end="375:76">//                av_log(NULL, AV_LOG_DEBUG, "%2d %d %f\n", i,j,d / (1&lt;&lt;5));</comment>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <comment type="block" pos:start="383:9" pos:end="385:48">/* NOTE: we do frequency inversion adter the MDCT by changing

           the sign of the right window coefs */</comment>

        <for pos:start="387:9" pos:end="402:0">for<control pos:start="387:12" pos:end="387:24">(<init pos:start="387:13" pos:end="387:16"><expr pos:start="387:13" pos:end="387:15"><name pos:start="387:13" pos:end="387:13">j</name><operator pos:start="387:14" pos:end="387:14">=</operator><literal type="number" pos:start="387:15" pos:end="387:15">0</literal></expr>;</init><condition pos:start="387:17" pos:end="387:20"><expr pos:start="387:17" pos:end="387:19"><name pos:start="387:17" pos:end="387:17">j</name><operator pos:start="387:18" pos:end="387:18">&lt;</operator><literal type="number" pos:start="387:19" pos:end="387:19">4</literal></expr>;</condition><incr pos:start="387:21" pos:end="387:23"><expr pos:start="387:21" pos:end="387:23"><name pos:start="387:21" pos:end="387:21">j</name><operator pos:start="387:22" pos:end="387:23">++</operator></expr></incr>)</control> <block pos:start="387:26" pos:end="402:0">{<block_content pos:start="389:13" pos:end="395:13">

            <for pos:start="389:13" pos:end="395:13">for<control pos:start="389:16" pos:end="389:30">(<init pos:start="389:17" pos:end="389:20"><expr pos:start="389:17" pos:end="389:19"><name pos:start="389:17" pos:end="389:17">i</name><operator pos:start="389:18" pos:end="389:18">=</operator><literal type="number" pos:start="389:19" pos:end="389:19">0</literal></expr>;</init><condition pos:start="389:21" pos:end="389:25"><expr pos:start="389:21" pos:end="389:24"><name pos:start="389:21" pos:end="389:21">i</name><operator pos:start="389:22" pos:end="389:22">&lt;</operator><literal type="number" pos:start="389:23" pos:end="389:24">36</literal></expr>;</condition><incr pos:start="389:26" pos:end="389:29"><expr pos:start="389:26" pos:end="389:29"><name pos:start="389:26" pos:end="389:26">i</name><operator pos:start="389:27" pos:end="389:28">+=</operator><literal type="number" pos:start="389:29" pos:end="389:29">2</literal></expr></incr>)</control> <block pos:start="389:32" pos:end="395:13">{<block_content pos:start="391:17" pos:end="393:61">

                <expr_stmt pos:start="391:17" pos:end="391:52"><expr pos:start="391:17" pos:end="391:51"><name pos:start="391:17" pos:end="391:34"><name pos:start="391:17" pos:end="391:24">mdct_win</name><index pos:start="391:25" pos:end="391:31">[<expr pos:start="391:26" pos:end="391:30"><name pos:start="391:26" pos:end="391:26">j</name> <operator pos:start="391:28" pos:end="391:28">+</operator> <literal type="number" pos:start="391:30" pos:end="391:30">4</literal></expr>]</index><index pos:start="391:32" pos:end="391:34">[<expr pos:start="391:33" pos:end="391:33"><name pos:start="391:33" pos:end="391:33">i</name></expr>]</index></name> <operator pos:start="391:36" pos:end="391:36">=</operator> <name pos:start="391:38" pos:end="391:51"><name pos:start="391:38" pos:end="391:45">mdct_win</name><index pos:start="391:46" pos:end="391:48">[<expr pos:start="391:47" pos:end="391:47"><name pos:start="391:47" pos:end="391:47">j</name></expr>]</index><index pos:start="391:49" pos:end="391:51">[<expr pos:start="391:50" pos:end="391:50"><name pos:start="391:50" pos:end="391:50">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="393:61"><expr pos:start="393:17" pos:end="393:60"><name pos:start="393:17" pos:end="393:38"><name pos:start="393:17" pos:end="393:24">mdct_win</name><index pos:start="393:25" pos:end="393:31">[<expr pos:start="393:26" pos:end="393:30"><name pos:start="393:26" pos:end="393:26">j</name> <operator pos:start="393:28" pos:end="393:28">+</operator> <literal type="number" pos:start="393:30" pos:end="393:30">4</literal></expr>]</index><index pos:start="393:32" pos:end="393:38">[<expr pos:start="393:33" pos:end="393:37"><name pos:start="393:33" pos:end="393:33">i</name> <operator pos:start="393:35" pos:end="393:35">+</operator> <literal type="number" pos:start="393:37" pos:end="393:37">1</literal></expr>]</index></name> <operator pos:start="393:40" pos:end="393:40">=</operator> <operator pos:start="393:42" pos:end="393:42">-</operator><name pos:start="393:43" pos:end="393:60"><name pos:start="393:43" pos:end="393:50">mdct_win</name><index pos:start="393:51" pos:end="393:53">[<expr pos:start="393:52" pos:end="393:52"><name pos:start="393:52" pos:end="393:52">j</name></expr>]</index><index pos:start="393:54" pos:end="393:60">[<expr pos:start="393:55" pos:end="393:59"><name pos:start="393:55" pos:end="393:55">i</name> <operator pos:start="393:57" pos:end="393:57">+</operator> <literal type="number" pos:start="393:59" pos:end="393:59">1</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



<cpp:if pos:start="401:1" pos:end="401:18">#<cpp:directive pos:start="401:2" pos:end="401:3">if</cpp:directive> <expr pos:start="401:5" pos:end="401:18"><call pos:start="401:5" pos:end="401:18"><name pos:start="401:5" pos:end="401:11">defined</name><argument_list pos:start="401:12" pos:end="401:18">(<argument pos:start="401:13" pos:end="401:17"><expr pos:start="401:13" pos:end="401:17"><name pos:start="401:13" pos:end="401:17">DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <for pos:start="403:9" pos:end="416:0">for<control pos:start="403:12" pos:end="403:24">(<init pos:start="403:13" pos:end="403:16"><expr pos:start="403:13" pos:end="403:15"><name pos:start="403:13" pos:end="403:13">j</name><operator pos:start="403:14" pos:end="403:14">=</operator><literal type="number" pos:start="403:15" pos:end="403:15">0</literal></expr>;</init><condition pos:start="403:17" pos:end="403:20"><expr pos:start="403:17" pos:end="403:19"><name pos:start="403:17" pos:end="403:17">j</name><operator pos:start="403:18" pos:end="403:18">&lt;</operator><literal type="number" pos:start="403:19" pos:end="403:19">8</literal></expr>;</condition><incr pos:start="403:21" pos:end="403:23"><expr pos:start="403:21" pos:end="403:23"><name pos:start="403:21" pos:end="403:21">j</name><operator pos:start="403:22" pos:end="403:23">++</operator></expr></incr>)</control> <block pos:start="403:26" pos:end="416:0">{<block_content pos:start="405:13" pos:end="411:46">

            <expr_stmt pos:start="405:13" pos:end="405:55"><expr pos:start="405:13" pos:end="405:54"><call pos:start="405:13" pos:end="405:54"><name pos:start="405:13" pos:end="405:18">av_log</name><argument_list pos:start="405:19" pos:end="405:54">(<argument pos:start="405:20" pos:end="405:24"><expr pos:start="405:20" pos:end="405:24"><name pos:start="405:20" pos:end="405:24">avctx</name></expr></argument>, <argument pos:start="405:27" pos:end="405:38"><expr pos:start="405:27" pos:end="405:38"><name pos:start="405:27" pos:end="405:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="405:41" pos:end="405:50"><expr pos:start="405:41" pos:end="405:50"><literal type="string" pos:start="405:41" pos:end="405:50">"win%d=\n"</literal></expr></argument>, <argument pos:start="405:53" pos:end="405:53"><expr pos:start="405:53" pos:end="405:53"><name pos:start="405:53" pos:end="405:53">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="407:13" pos:end="409:87">for<control pos:start="407:16" pos:end="407:29">(<init pos:start="407:17" pos:end="407:20"><expr pos:start="407:17" pos:end="407:19"><name pos:start="407:17" pos:end="407:17">i</name><operator pos:start="407:18" pos:end="407:18">=</operator><literal type="number" pos:start="407:19" pos:end="407:19">0</literal></expr>;</init><condition pos:start="407:21" pos:end="407:25"><expr pos:start="407:21" pos:end="407:24"><name pos:start="407:21" pos:end="407:21">i</name><operator pos:start="407:22" pos:end="407:22">&lt;</operator><literal type="number" pos:start="407:23" pos:end="407:24">36</literal></expr>;</condition><incr pos:start="407:26" pos:end="407:28"><expr pos:start="407:26" pos:end="407:28"><name pos:start="407:26" pos:end="407:26">i</name><operator pos:start="407:27" pos:end="407:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="409:17" pos:end="409:87"><block_content pos:start="409:17" pos:end="409:87">

                <expr_stmt pos:start="409:17" pos:end="409:87"><expr pos:start="409:17" pos:end="409:86"><call pos:start="409:17" pos:end="409:86"><name pos:start="409:17" pos:end="409:22">av_log</name><argument_list pos:start="409:23" pos:end="409:86">(<argument pos:start="409:24" pos:end="409:28"><expr pos:start="409:24" pos:end="409:28"><name pos:start="409:24" pos:end="409:28">avctx</name></expr></argument>, <argument pos:start="409:31" pos:end="409:42"><expr pos:start="409:31" pos:end="409:42"><name pos:start="409:31" pos:end="409:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="409:45" pos:end="409:50"><expr pos:start="409:45" pos:end="409:50"><literal type="string" pos:start="409:45" pos:end="409:50">"%f, "</literal></expr></argument>, <argument pos:start="409:53" pos:end="409:85"><expr pos:start="409:53" pos:end="409:85"><operator pos:start="409:53" pos:end="409:53">(</operator><name pos:start="409:54" pos:end="409:59">double</name><operator pos:start="409:60" pos:end="409:60">)</operator><name pos:start="409:61" pos:end="409:74"><name pos:start="409:61" pos:end="409:68">mdct_win</name><index pos:start="409:69" pos:end="409:71">[<expr pos:start="409:70" pos:end="409:70"><name pos:start="409:70" pos:end="409:70">j</name></expr>]</index><index pos:start="409:72" pos:end="409:74">[<expr pos:start="409:73" pos:end="409:73"><name pos:start="409:73" pos:end="409:73">i</name></expr>]</index></name> <operator pos:start="409:76" pos:end="409:76">/</operator> <name pos:start="409:78" pos:end="409:85">FRAC_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="411:13" pos:end="411:46"><expr pos:start="411:13" pos:end="411:45"><call pos:start="411:13" pos:end="411:45"><name pos:start="411:13" pos:end="411:18">av_log</name><argument_list pos:start="411:19" pos:end="411:45">(<argument pos:start="411:20" pos:end="411:24"><expr pos:start="411:20" pos:end="411:24"><name pos:start="411:20" pos:end="411:24">avctx</name></expr></argument>, <argument pos:start="411:27" pos:end="411:38"><expr pos:start="411:27" pos:end="411:38"><name pos:start="411:27" pos:end="411:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="411:41" pos:end="411:44"><expr pos:start="411:41" pos:end="411:44"><literal type="string" pos:start="411:41" pos:end="411:44">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

<cpp:endif pos:start="415:1" pos:end="415:6">#<cpp:directive pos:start="415:2" pos:end="415:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="417:9" pos:end="417:17"><expr pos:start="417:9" pos:end="417:16"><name pos:start="417:9" pos:end="417:12">init</name> <operator pos:start="417:14" pos:end="417:14">=</operator> <literal type="number" pos:start="417:16" pos:end="417:16">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="423:5" pos:end="423:23"><expr pos:start="423:5" pos:end="423:22"><name pos:start="423:5" pos:end="423:18"><name pos:start="423:5" pos:end="423:5">s</name><operator pos:start="423:6" pos:end="423:7">-&gt;</operator><name pos:start="423:8" pos:end="423:18">inbuf_index</name></name> <operator pos:start="423:20" pos:end="423:20">=</operator> <literal type="number" pos:start="423:22" pos:end="423:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:57"><expr pos:start="425:5" pos:end="425:56"><name pos:start="425:5" pos:end="425:12"><name pos:start="425:5" pos:end="425:5">s</name><operator pos:start="425:6" pos:end="425:7">-&gt;</operator><name pos:start="425:8" pos:end="425:12">inbuf</name></name> <operator pos:start="425:14" pos:end="425:14">=</operator> <operator pos:start="425:16" pos:end="425:16">&amp;</operator><name pos:start="425:17" pos:end="425:56"><name pos:start="425:17" pos:end="425:17">s</name><operator pos:start="425:18" pos:end="425:19">-&gt;</operator><name pos:start="425:20" pos:end="425:25">inbuf1</name><index pos:start="425:26" pos:end="425:41">[<expr pos:start="425:27" pos:end="425:40"><name pos:start="425:27" pos:end="425:40"><name pos:start="425:27" pos:end="425:27">s</name><operator pos:start="425:28" pos:end="425:29">-&gt;</operator><name pos:start="425:30" pos:end="425:40">inbuf_index</name></name></expr>]</index><index pos:start="425:42" pos:end="425:56">[<expr pos:start="425:43" pos:end="425:55"><name pos:start="425:43" pos:end="425:55">BACKSTEP_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="430:0"><expr pos:start="427:5" pos:end="427:27"><name pos:start="427:5" pos:end="427:16"><name pos:start="427:5" pos:end="427:5">s</name><operator pos:start="427:6" pos:end="427:7">-&gt;</operator><name pos:start="427:8" pos:end="427:16">inbuf_ptr</name></name> <operator pos:start="427:18" pos:end="427:18">=</operator> <name pos:start="427:20" pos:end="427:27"><name pos:start="427:20" pos:end="427:20">s</name><operator pos:start="427:21" pos:end="427:22">-&gt;</operator><name pos:start="427:23" pos:end="427:27">inbuf</name></name></expr>;</expr_stmt>

<cpp:ifdef pos:start="429:1" pos:end="429:12">#<cpp:directive pos:start="429:2" pos:end="429:6">ifdef</cpp:directive> <name pos:start="429:8" pos:end="429:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="431:5" pos:end="434:0"><expr pos:start="431:5" pos:end="431:22"><name pos:start="431:5" pos:end="431:18"><name pos:start="431:5" pos:end="431:5">s</name><operator pos:start="431:6" pos:end="431:7">-&gt;</operator><name pos:start="431:8" pos:end="431:18">frame_count</name></name> <operator pos:start="431:20" pos:end="431:20">=</operator> <literal type="number" pos:start="431:22" pos:end="431:22">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="433:1" pos:end="433:6">#<cpp:directive pos:start="433:2" pos:end="433:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="435:5" pos:end="437:24"><if pos:start="435:5" pos:end="437:24">if <condition pos:start="435:8" pos:end="435:43">(<expr pos:start="435:9" pos:end="435:42"><name pos:start="435:9" pos:end="435:23"><name pos:start="435:9" pos:end="435:13">avctx</name><operator pos:start="435:14" pos:end="435:15">-&gt;</operator><name pos:start="435:16" pos:end="435:23">codec_id</name></name> <operator pos:start="435:25" pos:end="435:26">==</operator> <name pos:start="435:28" pos:end="435:42">CODEC_ID_MP3ADU</name></expr>)</condition><block type="pseudo" pos:start="437:9" pos:end="437:24"><block_content pos:start="437:9" pos:end="437:24">

        <expr_stmt pos:start="437:9" pos:end="437:24"><expr pos:start="437:9" pos:end="437:23"><name pos:start="437:9" pos:end="437:19"><name pos:start="437:9" pos:end="437:9">s</name><operator pos:start="437:10" pos:end="437:11">-&gt;</operator><name pos:start="437:12" pos:end="437:19">adu_mode</name></name> <operator pos:start="437:21" pos:end="437:21">=</operator> <literal type="number" pos:start="437:23" pos:end="437:23">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="439:5" pos:end="439:13">return <expr pos:start="439:12" pos:end="439:12"><literal type="number" pos:start="439:12" pos:end="439:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
