<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3212.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:42">dxva2_get_decoder_configuration</name><parameter_list pos:start="1:43" pos:end="5:77">(<parameter pos:start="1:44" pos:end="1:60"><decl pos:start="1:44" pos:end="1:60"><type pos:start="1:44" pos:end="1:60"><name pos:start="1:44" pos:end="1:57">AVCodecContext</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">s</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:85"><decl pos:start="1:63" pos:end="1:85"><type pos:start="1:63" pos:end="1:85"><specifier pos:start="1:63" pos:end="1:67">const</specifier> <name pos:start="1:69" pos:end="1:72">GUID</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:85">device_guid</name></decl></parameter>,

                                           <parameter pos:start="3:44" pos:end="3:70"><decl pos:start="3:44" pos:end="3:70"><type pos:start="3:44" pos:end="3:70"><specifier pos:start="3:44" pos:end="3:48">const</specifier> <name pos:start="3:50" pos:end="3:64">DXVA2_VideoDesc</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:70">desc</name></decl></parameter>,

                                           <parameter pos:start="5:44" pos:end="5:76"><decl pos:start="5:44" pos:end="5:76"><type pos:start="5:44" pos:end="5:76"><name pos:start="5:44" pos:end="5:68">DXVA2_ConfigPictureDecode</name> <modifier pos:start="5:70" pos:end="5:70">*</modifier></type><name pos:start="5:71" pos:end="5:76">config</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="91:1">{<block_content pos:start="9:5" pos:end="89:13">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:15">InputStream</name>  <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">ist</name> <init pos:start="9:23" pos:end="9:33">= <expr pos:start="9:25" pos:end="9:33"><name pos:start="9:25" pos:end="9:33"><name pos:start="9:25" pos:end="9:25">s</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:85"><decl pos:start="11:5" pos:end="11:84"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">loglevel</name> <init pos:start="11:18" pos:end="11:84">= <expr pos:start="11:20" pos:end="11:84"><ternary pos:start="11:20" pos:end="11:84"><condition pos:start="11:20" pos:end="11:54"><expr pos:start="11:20" pos:end="11:52"><operator pos:start="11:20" pos:end="11:20">(</operator><name pos:start="11:21" pos:end="11:35"><name pos:start="11:21" pos:end="11:23">ist</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:35">hwaccel_id</name></name> <operator pos:start="11:37" pos:end="11:38">==</operator> <name pos:start="11:40" pos:end="11:51">HWACCEL_AUTO</name><operator pos:start="11:52" pos:end="11:52">)</operator></expr> ?</condition><then pos:start="11:56" pos:end="11:69"> <expr pos:start="11:56" pos:end="11:69"><name pos:start="11:56" pos:end="11:69">AV_LOG_VERBOSE</name></expr> </then><else pos:start="11:71" pos:end="11:84">: <expr pos:start="11:73" pos:end="11:84"><name pos:start="11:73" pos:end="11:84">AV_LOG_ERROR</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">DXVA2Context</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:21">ctx</name> <init pos:start="13:23" pos:end="13:40">= <expr pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:27">ist</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:40">hwaccel_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">unsigned</name></type> <name pos:start="15:14" pos:end="15:22">cfg_count</name> <init pos:start="15:24" pos:end="15:26">= <expr pos:start="15:26" pos:end="15:26"><literal type="number" pos:start="15:26" pos:end="15:26">0</literal></expr></init></decl>, <decl pos:start="15:29" pos:end="15:42"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:29" pos:end="15:38">best_score</name> <init pos:start="15:40" pos:end="15:42">= <expr pos:start="15:42" pos:end="15:42"><literal type="number" pos:start="15:42" pos:end="15:42">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:29">DXVA2_ConfigPictureDecode</name> <modifier pos:start="17:31" pos:end="17:31">*</modifier></type><name pos:start="17:32" pos:end="17:39">cfg_list</name> <init pos:start="17:41" pos:end="17:46">= <expr pos:start="17:43" pos:end="17:46"><name pos:start="17:43" pos:end="17:46">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:46"><type pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:29">DXVA2_ConfigPictureDecode</name></type> <name pos:start="19:31" pos:end="19:38">best_cfg</name> <init pos:start="19:40" pos:end="19:46">= <expr pos:start="19:42" pos:end="19:46"><block pos:start="19:42" pos:end="19:46">{<expr pos:start="19:43" pos:end="19:45"><block pos:start="19:43" pos:end="19:45">{<expr pos:start="19:44" pos:end="19:44"><literal type="number" pos:start="19:44" pos:end="19:44">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:15"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">HRESULT</name></type> <name pos:start="21:13" pos:end="21:14">hr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:132"><expr pos:start="27:5" pos:end="27:131"><name pos:start="27:5" pos:end="27:6">hr</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <call pos:start="27:10" pos:end="27:131"><name pos:start="27:10" pos:end="27:61">IDirectXVideoDecoderService_GetDecoderConfigurations</name><argument_list pos:start="27:62" pos:end="27:131">(<argument pos:start="27:63" pos:end="27:82"><expr pos:start="27:63" pos:end="27:82"><name pos:start="27:63" pos:end="27:82"><name pos:start="27:63" pos:end="27:65">ctx</name><operator pos:start="27:66" pos:end="27:67">-&gt;</operator><name pos:start="27:68" pos:end="27:82">decoder_service</name></name></expr></argument>, <argument pos:start="27:85" pos:end="27:95"><expr pos:start="27:85" pos:end="27:95"><name pos:start="27:85" pos:end="27:95">device_guid</name></expr></argument>, <argument pos:start="27:98" pos:end="27:101"><expr pos:start="27:98" pos:end="27:101"><name pos:start="27:98" pos:end="27:101">desc</name></expr></argument>, <argument pos:start="27:104" pos:end="27:107"><expr pos:start="27:104" pos:end="27:107"><name pos:start="27:104" pos:end="27:107">NULL</name></expr></argument>, <argument pos:start="27:110" pos:end="27:119"><expr pos:start="27:110" pos:end="27:119"><operator pos:start="27:110" pos:end="27:110">&amp;</operator><name pos:start="27:111" pos:end="27:119">cfg_count</name></expr></argument>, <argument pos:start="27:122" pos:end="27:130"><expr pos:start="27:122" pos:end="27:130"><operator pos:start="27:122" pos:end="27:122">&amp;</operator><name pos:start="27:123" pos:end="27:130">cfg_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:19">(<expr pos:start="29:9" pos:end="29:18"><call pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:14">FAILED</name><argument_list pos:start="29:15" pos:end="29:18">(<argument pos:start="29:16" pos:end="29:17"><expr pos:start="29:16" pos:end="29:17"><name pos:start="29:16" pos:end="29:17">hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:21" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:31">

        <expr_stmt pos:start="31:9" pos:end="31:78"><expr pos:start="31:9" pos:end="31:77"><call pos:start="31:9" pos:end="31:77"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:77">(<argument pos:start="31:16" pos:end="31:19"><expr pos:start="31:16" pos:end="31:19"><name pos:start="31:16" pos:end="31:19">NULL</name></expr></argument>, <argument pos:start="31:22" pos:end="31:29"><expr pos:start="31:22" pos:end="31:29"><name pos:start="31:22" pos:end="31:29">loglevel</name></expr></argument>, <argument pos:start="31:32" pos:end="31:76"><expr pos:start="31:32" pos:end="31:76"><literal type="string" pos:start="31:32" pos:end="31:76">"Unable to retrieve decoder configurations\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:31">return <expr pos:start="33:16" pos:end="33:30"><call pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:22">AVERROR</name><argument_list pos:start="33:23" pos:end="33:30">(<argument pos:start="33:24" pos:end="33:29"><expr pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="39:5" pos:end="71:5">for <control pos:start="39:9" pos:end="39:35">(<init pos:start="39:10" pos:end="39:15"><expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</init> <condition pos:start="39:17" pos:end="39:30"><expr pos:start="39:17" pos:end="39:29"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <name pos:start="39:21" pos:end="39:29">cfg_count</name></expr>;</condition> <incr pos:start="39:32" pos:end="39:34"><expr pos:start="39:32" pos:end="39:34"><name pos:start="39:32" pos:end="39:32">i</name><operator pos:start="39:33" pos:end="39:34">++</operator></expr></incr>)</control> <block pos:start="39:37" pos:end="71:5">{<block_content pos:start="41:9" pos:end="69:9">

        <decl_stmt pos:start="41:9" pos:end="41:54"><decl pos:start="41:9" pos:end="41:53"><type pos:start="41:9" pos:end="41:35"><name pos:start="41:9" pos:end="41:33">DXVA2_ConfigPictureDecode</name> <modifier pos:start="41:35" pos:end="41:35">*</modifier></type><name pos:start="41:36" pos:end="41:38">cfg</name> <init pos:start="41:40" pos:end="41:53">= <expr pos:start="41:42" pos:end="41:53"><operator pos:start="41:42" pos:end="41:42">&amp;</operator><name pos:start="41:43" pos:end="41:53"><name pos:start="41:43" pos:end="41:50">cfg_list</name><index pos:start="41:51" pos:end="41:53">[<expr pos:start="41:52" pos:end="41:52"><name pos:start="41:52" pos:end="41:52">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="45:9" pos:end="45:23"><decl pos:start="45:9" pos:end="45:22"><type pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:16">unsigned</name></type> <name pos:start="45:18" pos:end="45:22">score</name></decl>;</decl_stmt>

        <if_stmt pos:start="47:9" pos:end="57:21"><if pos:start="47:9" pos:end="49:22">if <condition pos:start="47:12" pos:end="47:41">(<expr pos:start="47:13" pos:end="47:40"><name pos:start="47:13" pos:end="47:35"><name pos:start="47:13" pos:end="47:15">cfg</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:35">ConfigBitstreamRaw</name></name> <operator pos:start="47:37" pos:end="47:38">==</operator> <literal type="number" pos:start="47:40" pos:end="47:40">1</literal></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:22"><block_content pos:start="49:13" pos:end="49:22">

            <expr_stmt pos:start="49:13" pos:end="49:22"><expr pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:17">score</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <literal type="number" pos:start="49:21" pos:end="49:21">1</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="51:9" pos:end="53:22">else if <condition pos:start="51:17" pos:end="51:81">(<expr pos:start="51:18" pos:end="51:80"><name pos:start="51:18" pos:end="51:28"><name pos:start="51:18" pos:end="51:18">s</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:28">codec_id</name></name> <operator pos:start="51:30" pos:end="51:31">==</operator> <name pos:start="51:33" pos:end="51:48">AV_CODEC_ID_H264</name> <operator pos:start="51:50" pos:end="51:51">&amp;&amp;</operator> <name pos:start="51:53" pos:end="51:75"><name pos:start="51:53" pos:end="51:55">cfg</name><operator pos:start="51:56" pos:end="51:57">-&gt;</operator><name pos:start="51:58" pos:end="51:75">ConfigBitstreamRaw</name></name> <operator pos:start="51:77" pos:end="51:78">==</operator> <literal type="number" pos:start="51:80" pos:end="51:80">2</literal></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:22"><block_content pos:start="53:13" pos:end="53:22">

            <expr_stmt pos:start="53:13" pos:end="53:22"><expr pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:17">score</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <literal type="number" pos:start="53:21" pos:end="53:21">2</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="55:9" pos:end="57:21">else<block type="pseudo" pos:start="57:13" pos:end="57:21"><block_content pos:start="57:13" pos:end="57:21">

            <continue pos:start="57:13" pos:end="57:21">continue;</continue></block_content></block></else></if_stmt>

        <if_stmt pos:start="59:9" pos:end="61:24"><if pos:start="59:9" pos:end="61:24">if <condition pos:start="59:12" pos:end="59:79">(<expr pos:start="59:13" pos:end="59:78"><call pos:start="59:13" pos:end="59:78"><name pos:start="59:13" pos:end="59:23">IsEqualGUID</name><argument_list pos:start="59:24" pos:end="59:78">(<argument pos:start="59:25" pos:end="59:59"><expr pos:start="59:25" pos:end="59:59"><operator pos:start="59:25" pos:end="59:25">&amp;</operator><name pos:start="59:26" pos:end="59:59"><name pos:start="59:26" pos:end="59:28">cfg</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:59">guidConfigBitstreamEncryption</name></name></expr></argument>, <argument pos:start="59:62" pos:end="59:77"><expr pos:start="59:62" pos:end="59:77"><operator pos:start="59:62" pos:end="59:62">&amp;</operator><name pos:start="59:63" pos:end="59:77">DXVA2_NoEncrypt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:24"><block_content pos:start="61:13" pos:end="61:24">

            <expr_stmt pos:start="61:13" pos:end="61:24"><expr pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:17">score</name> <operator pos:start="61:19" pos:end="61:20">+=</operator> <literal type="number" pos:start="61:22" pos:end="61:23">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:31">(<expr pos:start="63:13" pos:end="63:30"><name pos:start="63:13" pos:end="63:17">score</name> <operator pos:start="63:19" pos:end="63:19">&gt;</operator> <name pos:start="63:21" pos:end="63:30">best_score</name></expr>)</condition> <block pos:start="63:33" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:30">

            <expr_stmt pos:start="65:13" pos:end="65:31"><expr pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:22">best_score</name> <operator pos:start="65:24" pos:end="65:24">=</operator> <name pos:start="65:26" pos:end="65:30">score</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:30"><expr pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:20">best_cfg</name>   <operator pos:start="67:24" pos:end="67:24">=</operator> <operator pos:start="67:26" pos:end="67:26">*</operator><name pos:start="67:27" pos:end="67:29">cfg</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="73:5" pos:end="73:28"><expr pos:start="73:5" pos:end="73:27"><call pos:start="73:5" pos:end="73:27"><name pos:start="73:5" pos:end="73:17">CoTaskMemFree</name><argument_list pos:start="73:18" pos:end="73:27">(<argument pos:start="73:19" pos:end="73:26"><expr pos:start="73:19" pos:end="73:26"><name pos:start="73:19" pos:end="73:26">cfg_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:20">(<expr pos:start="77:9" pos:end="77:19"><operator pos:start="77:9" pos:end="77:9">!</operator><name pos:start="77:10" pos:end="77:19">best_score</name></expr>)</condition> <block pos:start="77:22" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:31">

        <expr_stmt pos:start="79:9" pos:end="79:77"><expr pos:start="79:9" pos:end="79:76"><call pos:start="79:9" pos:end="79:76"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:76">(<argument pos:start="79:16" pos:end="79:19"><expr pos:start="79:16" pos:end="79:19"><name pos:start="79:16" pos:end="79:19">NULL</name></expr></argument>, <argument pos:start="79:22" pos:end="79:29"><expr pos:start="79:22" pos:end="79:29"><name pos:start="79:22" pos:end="79:29">loglevel</name></expr></argument>, <argument pos:start="79:32" pos:end="79:75"><expr pos:start="79:32" pos:end="79:75"><literal type="string" pos:start="79:32" pos:end="79:75">"No valid decoder configuration available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:31">return <expr pos:start="81:16" pos:end="81:30"><call pos:start="81:16" pos:end="81:30"><name pos:start="81:16" pos:end="81:22">AVERROR</name><argument_list pos:start="81:23" pos:end="81:30">(<argument pos:start="81:24" pos:end="81:29"><expr pos:start="81:24" pos:end="81:29"><name pos:start="81:24" pos:end="81:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:23"><expr pos:start="87:5" pos:end="87:22"><operator pos:start="87:5" pos:end="87:5">*</operator><name pos:start="87:6" pos:end="87:11">config</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <name pos:start="87:15" pos:end="87:22">best_cfg</name></expr>;</expr_stmt>

    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
