<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5014.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:14">msix_load</name><parameter_list pos:start="1:15" pos:end="1:43">(<parameter pos:start="1:16" pos:end="1:29"><decl pos:start="1:16" pos:end="1:29"><type pos:start="1:16" pos:end="1:29"><name pos:start="1:16" pos:end="1:24">PCIDevice</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:29">dev</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:42"><decl pos:start="1:32" pos:end="1:42"><type pos:start="1:32" pos:end="1:42"><name pos:start="1:32" pos:end="1:39">QEMUFile</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">f</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="5:5" pos:end="33:5">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">unsigned</name></type> <name pos:start="5:14" pos:end="5:14">n</name> <init pos:start="5:16" pos:end="5:37">= <expr pos:start="5:18" pos:end="5:37"><name pos:start="5:18" pos:end="5:37"><name pos:start="5:18" pos:end="5:20">dev</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:37">msix_entries_nr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:23">vector</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:48">(<expr pos:start="11:9" pos:end="11:47"><operator pos:start="11:9" pos:end="11:9">!</operator><operator pos:start="11:10" pos:end="11:10">(</operator><name pos:start="11:11" pos:end="11:26"><name pos:start="11:11" pos:end="11:13">dev</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:26">cap_present</name></name> <operator pos:start="11:28" pos:end="11:28">&amp;</operator> <name pos:start="11:30" pos:end="11:46">QEMU_PCI_CAP_MSIX</name><operator pos:start="11:47" pos:end="11:47">)</operator></expr>)</condition> <block pos:start="11:50" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:15">

        <return pos:start="13:9" pos:end="13:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:31"><expr pos:start="19:5" pos:end="19:30"><call pos:start="19:5" pos:end="19:30"><name pos:start="19:5" pos:end="19:25">msix_free_irq_entries</name><argument_list pos:start="19:26" pos:end="19:30">(<argument pos:start="19:27" pos:end="19:29"><expr pos:start="19:27" pos:end="19:29"><name pos:start="19:27" pos:end="19:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:70"><expr pos:start="21:5" pos:end="21:69"><call pos:start="21:5" pos:end="21:69"><name pos:start="21:5" pos:end="21:19">qemu_get_buffer</name><argument_list pos:start="21:20" pos:end="21:69">(<argument pos:start="21:21" pos:end="21:21"><expr pos:start="21:21" pos:end="21:21"><name pos:start="21:21" pos:end="21:21">f</name></expr></argument>, <argument pos:start="21:24" pos:end="21:43"><expr pos:start="21:24" pos:end="21:43"><name pos:start="21:24" pos:end="21:43"><name pos:start="21:24" pos:end="21:26">dev</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:43">msix_table_page</name></name></expr></argument>, <argument pos:start="21:46" pos:end="21:68"><expr pos:start="21:46" pos:end="21:68"><name pos:start="21:46" pos:end="21:46">n</name> <operator pos:start="21:48" pos:end="21:48">*</operator> <name pos:start="21:50" pos:end="21:68">PCI_MSIX_ENTRY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:78"><expr pos:start="23:5" pos:end="23:77"><call pos:start="23:5" pos:end="23:77"><name pos:start="23:5" pos:end="23:19">qemu_get_buffer</name><argument_list pos:start="23:20" pos:end="23:77">(<argument pos:start="23:21" pos:end="23:21"><expr pos:start="23:21" pos:end="23:21"><name pos:start="23:21" pos:end="23:21">f</name></expr></argument>, <argument pos:start="23:24" pos:end="23:63"><expr pos:start="23:24" pos:end="23:63"><name pos:start="23:24" pos:end="23:43"><name pos:start="23:24" pos:end="23:26">dev</name><operator pos:start="23:27" pos:end="23:28">-&gt;</operator><name pos:start="23:29" pos:end="23:43">msix_table_page</name></name> <operator pos:start="23:45" pos:end="23:45">+</operator> <name pos:start="23:47" pos:end="23:63">MSIX_PAGE_PENDING</name></expr></argument>, <argument pos:start="23:66" pos:end="23:76"><expr pos:start="23:66" pos:end="23:76"><operator pos:start="23:66" pos:end="23:66">(</operator><name pos:start="23:67" pos:end="23:67">n</name> <operator pos:start="23:69" pos:end="23:69">+</operator> <literal type="number" pos:start="23:71" pos:end="23:71">7</literal><operator pos:start="23:72" pos:end="23:72">)</operator> <operator pos:start="23:74" pos:end="23:74">/</operator> <literal type="number" pos:start="23:76" pos:end="23:76">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><call pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:31">msix_update_function_masked</name><argument_list pos:start="25:32" pos:end="25:36">(<argument pos:start="25:33" pos:end="25:35"><expr pos:start="25:33" pos:end="25:35"><name pos:start="25:33" pos:end="25:35">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="29:5" pos:end="33:5">for <control pos:start="29:9" pos:end="29:42">(<init pos:start="29:10" pos:end="29:20"><expr pos:start="29:10" pos:end="29:19"><name pos:start="29:10" pos:end="29:15">vector</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr>;</init> <condition pos:start="29:22" pos:end="29:32"><expr pos:start="29:22" pos:end="29:31"><name pos:start="29:22" pos:end="29:27">vector</name> <operator pos:start="29:29" pos:end="29:29">&lt;</operator> <name pos:start="29:31" pos:end="29:31">n</name></expr>;</condition> <incr pos:start="29:34" pos:end="29:41"><expr pos:start="29:34" pos:end="29:41"><name pos:start="29:34" pos:end="29:39">vector</name><operator pos:start="29:40" pos:end="29:41">++</operator></expr></incr>)</control> <block pos:start="29:44" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:51">

        <expr_stmt pos:start="31:9" pos:end="31:51"><expr pos:start="31:9" pos:end="31:50"><call pos:start="31:9" pos:end="31:50"><name pos:start="31:9" pos:end="31:31">msix_handle_mask_update</name><argument_list pos:start="31:32" pos:end="31:50">(<argument pos:start="31:33" pos:end="31:35"><expr pos:start="31:33" pos:end="31:35"><name pos:start="31:33" pos:end="31:35">dev</name></expr></argument>, <argument pos:start="31:38" pos:end="31:43"><expr pos:start="31:38" pos:end="31:43"><name pos:start="31:38" pos:end="31:43">vector</name></expr></argument>, <argument pos:start="31:46" pos:end="31:49"><expr pos:start="31:46" pos:end="31:49"><name pos:start="31:46" pos:end="31:49">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
