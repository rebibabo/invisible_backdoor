<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1691.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">timer_write</name><parameter_list pos:start="1:24" pos:end="3:54">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">opaque</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:61"><decl pos:start="1:39" pos:end="1:61"><type pos:start="1:39" pos:end="1:61"><name pos:start="1:39" pos:end="1:56">target_phys_addr_t</name></type> <name pos:start="1:58" pos:end="1:61">addr</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:38"><decl pos:start="3:25" pos:end="3:38"><type pos:start="3:25" pos:end="3:38"><name pos:start="3:25" pos:end="3:32">uint64_t</name></type> <name pos:start="3:34" pos:end="3:38">value</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:53"><decl pos:start="3:41" pos:end="3:53"><type pos:start="3:41" pos:end="3:53"><name pos:start="3:41" pos:end="3:48">unsigned</name></type> <name pos:start="3:50" pos:end="3:53">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="71:1">{<block_content pos:start="7:5" pos:end="69:24">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">LM32TimerState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><name pos:start="7:25" pos:end="7:30">opaque</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:47"><expr pos:start="11:5" pos:end="11:46"><call pos:start="11:5" pos:end="11:46"><name pos:start="11:5" pos:end="11:33">trace_lm32_timer_memory_write</name><argument_list pos:start="11:34" pos:end="11:46">(<argument pos:start="11:35" pos:end="11:38"><expr pos:start="11:35" pos:end="11:38"><name pos:start="11:35" pos:end="11:38">addr</name></expr></argument>, <argument pos:start="11:41" pos:end="11:45"><expr pos:start="11:41" pos:end="11:45"><name pos:start="11:41" pos:end="11:45">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:15"><expr pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:8">addr</name> <operator pos:start="15:10" pos:end="15:12">&gt;&gt;=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">2</literal></expr>;</expr_stmt>

    <switch pos:start="17:5" pos:end="67:5">switch <condition pos:start="17:12" pos:end="17:17">(<expr pos:start="17:13" pos:end="17:16"><name pos:start="17:13" pos:end="17:16">addr</name></expr>)</condition> <block pos:start="17:19" pos:end="67:5">{<block_content pos:start="19:5" pos:end="65:14">

    <case pos:start="19:5" pos:end="19:14">case <expr pos:start="19:10" pos:end="19:13"><name pos:start="19:10" pos:end="19:13">R_SR</name></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="21:32"><expr pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:15">regs</name><index pos:start="21:16" pos:end="21:21">[<expr pos:start="21:17" pos:end="21:20"><name pos:start="21:17" pos:end="21:20">R_SR</name></expr>]</index></name> <operator pos:start="21:23" pos:end="21:24">&amp;=</operator> <operator pos:start="21:26" pos:end="21:26">~</operator><name pos:start="21:27" pos:end="21:31">SR_TO</name></expr>;</expr_stmt>

        <break pos:start="23:9" pos:end="23:14">break;</break>

    <case pos:start="25:5" pos:end="25:14">case <expr pos:start="25:10" pos:end="25:13"><name pos:start="25:10" pos:end="25:13">R_CR</name></expr>:</case>

        <expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:15">regs</name><index pos:start="27:16" pos:end="27:21">[<expr pos:start="27:17" pos:end="27:20"><name pos:start="27:17" pos:end="27:20">R_CR</name></expr>]</index></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:29">value</name></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:37">(<expr pos:start="29:13" pos:end="29:36"><name pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:19">regs</name><index pos:start="29:20" pos:end="29:25">[<expr pos:start="29:21" pos:end="29:24"><name pos:start="29:21" pos:end="29:24">R_CR</name></expr>]</index></name> <operator pos:start="29:27" pos:end="29:27">&amp;</operator> <name pos:start="29:29" pos:end="29:36">CR_START</name></expr>)</condition> <block pos:start="29:39" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:37">

            <expr_stmt pos:start="31:13" pos:end="31:37"><expr pos:start="31:13" pos:end="31:36"><call pos:start="31:13" pos:end="31:36"><name pos:start="31:13" pos:end="31:22">ptimer_run</name><argument_list pos:start="31:23" pos:end="31:36">(<argument pos:start="31:24" pos:end="31:32"><expr pos:start="31:24" pos:end="31:32"><name pos:start="31:24" pos:end="31:32"><name pos:start="31:24" pos:end="31:24">s</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:32">ptimer</name></name></expr></argument>, <argument pos:start="31:35" pos:end="31:35"><expr pos:start="31:35" pos:end="31:35"><literal type="number" pos:start="31:35" pos:end="31:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:36">(<expr pos:start="35:13" pos:end="35:35"><name pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:19">regs</name><index pos:start="35:20" pos:end="35:25">[<expr pos:start="35:21" pos:end="35:24"><name pos:start="35:21" pos:end="35:24">R_CR</name></expr>]</index></name> <operator pos:start="35:27" pos:end="35:27">&amp;</operator> <name pos:start="35:29" pos:end="35:35">CR_STOP</name></expr>)</condition> <block pos:start="35:38" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:35">

            <expr_stmt pos:start="37:13" pos:end="37:35"><expr pos:start="37:13" pos:end="37:34"><call pos:start="37:13" pos:end="37:34"><name pos:start="37:13" pos:end="37:23">ptimer_stop</name><argument_list pos:start="37:24" pos:end="37:34">(<argument pos:start="37:25" pos:end="37:33"><expr pos:start="37:25" pos:end="37:33"><name pos:start="37:25" pos:end="37:33"><name pos:start="37:25" pos:end="37:25">s</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:33">ptimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:18">case <expr pos:start="43:10" pos:end="43:17"><name pos:start="43:10" pos:end="43:17">R_PERIOD</name></expr>:</case>

        <expr_stmt pos:start="45:9" pos:end="45:34"><expr pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:15">regs</name><index pos:start="45:16" pos:end="45:25">[<expr pos:start="45:17" pos:end="45:24"><name pos:start="45:17" pos:end="45:24">R_PERIOD</name></expr>]</index></name> <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:33">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:43"><expr pos:start="47:9" pos:end="47:42"><call pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:24">ptimer_set_count</name><argument_list pos:start="47:25" pos:end="47:42">(<argument pos:start="47:26" pos:end="47:34"><expr pos:start="47:26" pos:end="47:34"><name pos:start="47:26" pos:end="47:34"><name pos:start="47:26" pos:end="47:26">s</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:34">ptimer</name></name></expr></argument>, <argument pos:start="47:37" pos:end="47:41"><expr pos:start="47:37" pos:end="47:41"><name pos:start="47:37" pos:end="47:41">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:20">case <expr pos:start="51:10" pos:end="51:19"><name pos:start="51:10" pos:end="51:19">R_SNAPSHOT</name></expr>:</case>

        <expr_stmt pos:start="53:9" pos:end="55:43"><expr pos:start="53:9" pos:end="55:42"><call pos:start="53:9" pos:end="55:42"><name pos:start="53:9" pos:end="53:20">error_report</name><argument_list pos:start="53:21" pos:end="55:42">(<argument pos:start="53:22" pos:end="55:30"><expr pos:start="53:22" pos:end="55:30"><literal type="string" pos:start="53:22" pos:end="53:72">"lm32_timer: write access to read only register 0x"</literal>

                <name pos:start="55:17" pos:end="55:30">TARGET_FMT_plx</name></expr></argument>, <argument pos:start="55:33" pos:end="55:41"><expr pos:start="55:33" pos:end="55:41"><name pos:start="55:33" pos:end="55:36">addr</name> <operator pos:start="55:38" pos:end="55:39">&lt;&lt;</operator> <literal type="number" pos:start="55:41" pos:end="55:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <default pos:start="59:5" pos:end="59:12">default:</default>

        <expr_stmt pos:start="61:9" pos:end="63:43"><expr pos:start="61:9" pos:end="63:42"><call pos:start="61:9" pos:end="63:42"><name pos:start="61:9" pos:end="61:20">error_report</name><argument_list pos:start="61:21" pos:end="63:42">(<argument pos:start="61:22" pos:end="63:30"><expr pos:start="61:22" pos:end="63:30"><literal type="string" pos:start="61:22" pos:end="61:70">"lm32_timer: write access to unknown register 0x"</literal>

                <name pos:start="63:17" pos:end="63:30">TARGET_FMT_plx</name></expr></argument>, <argument pos:start="63:33" pos:end="63:41"><expr pos:start="63:33" pos:end="63:41"><name pos:start="63:33" pos:end="63:36">addr</name> <operator pos:start="63:38" pos:end="63:39">&lt;&lt;</operator> <literal type="number" pos:start="63:41" pos:end="63:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="69:5" pos:end="69:24"><expr pos:start="69:5" pos:end="69:23"><call pos:start="69:5" pos:end="69:23"><name pos:start="69:5" pos:end="69:20">timer_update_irq</name><argument_list pos:start="69:21" pos:end="69:23">(<argument pos:start="69:22" pos:end="69:22"><expr pos:start="69:22" pos:end="69:22"><name pos:start="69:22" pos:end="69:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
