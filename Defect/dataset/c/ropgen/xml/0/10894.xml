<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10894.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">s390_cpu_do_interrupt</name><parameter_list pos:start="1:27" pos:end="1:40">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:37"><name pos:start="1:28" pos:end="1:35">CPUState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">cs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:5">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">S390CPU</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">cpu</name> <init pos:start="5:18" pos:end="5:31">= <expr pos:start="5:20" pos:end="5:31"><call pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:27">S390_CPU</name><argument_list pos:start="5:28" pos:end="5:31">(<argument pos:start="5:29" pos:end="5:30"><expr pos:start="5:29" pos:end="5:30"><name pos:start="5:29" pos:end="5:30">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">CPUS390XState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">env</name> <init pos:start="7:24" pos:end="7:34">= <expr pos:start="7:26" pos:end="7:34"><operator pos:start="7:26" pos:end="7:26">&amp;</operator><name pos:start="7:27" pos:end="7:34"><name pos:start="7:27" pos:end="7:29">cpu</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:34">env</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="13:64"><expr pos:start="11:5" pos:end="13:63"><call pos:start="11:5" pos:end="13:63"><name pos:start="11:5" pos:end="11:17">qemu_log_mask</name><argument_list pos:start="11:18" pos:end="13:63">(<argument pos:start="11:19" pos:end="11:29"><expr pos:start="11:19" pos:end="11:29"><name pos:start="11:19" pos:end="11:29">CPU_LOG_INT</name></expr></argument>, <argument pos:start="11:32" pos:end="11:59"><expr pos:start="11:32" pos:end="11:59"><literal type="string" pos:start="11:32" pos:end="11:47">"%s: %d at pc=%"</literal> <name pos:start="11:49" pos:end="11:54">PRIx64</name> <literal type="string" pos:start="11:56" pos:end="11:59">"\n"</literal></expr></argument>,

                  <argument pos:start="13:19" pos:end="13:26"><expr pos:start="13:19" pos:end="13:26"><name pos:start="13:19" pos:end="13:26">__func__</name></expr></argument>, <argument pos:start="13:29" pos:end="13:47"><expr pos:start="13:29" pos:end="13:47"><name pos:start="13:29" pos:end="13:47"><name pos:start="13:29" pos:end="13:30">cs</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:47">exception_index</name></name></expr></argument>, <argument pos:start="13:50" pos:end="13:62"><expr pos:start="13:50" pos:end="13:62"><name pos:start="13:50" pos:end="13:62"><name pos:start="13:50" pos:end="13:52">env</name><operator pos:start="13:53" pos:end="13:54">-&gt;</operator><name pos:start="13:55" pos:end="13:57">psw</name><operator pos:start="13:58" pos:end="13:58">.</operator><name pos:start="13:59" pos:end="13:62">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:49"><expr pos:start="17:5" pos:end="17:48"><call pos:start="17:5" pos:end="17:48"><name pos:start="17:5" pos:end="17:22">s390_cpu_set_state</name><argument_list pos:start="17:23" pos:end="17:48">(<argument pos:start="17:24" pos:end="17:42"><expr pos:start="17:24" pos:end="17:42"><name pos:start="17:24" pos:end="17:42">CPU_STATE_OPERATING</name></expr></argument>, <argument pos:start="17:45" pos:end="17:47"><expr pos:start="17:45" pos:end="17:47"><name pos:start="17:45" pos:end="17:47">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:31">/* handle machine checks */</comment>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="23:36">(<expr pos:start="21:9" pos:end="23:35"><operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:22"><name pos:start="21:10" pos:end="21:12">env</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:17">psw</name><operator pos:start="21:18" pos:end="21:18">.</operator><name pos:start="21:19" pos:end="21:22">mask</name></name> <operator pos:start="21:24" pos:end="21:24">&amp;</operator> <name pos:start="21:26" pos:end="21:40">PSW_MASK_MCHECK</name><operator pos:start="21:41" pos:end="21:41">)</operator> <operator pos:start="21:43" pos:end="21:44">&amp;&amp;</operator>

        <operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:28"><name pos:start="23:10" pos:end="23:11">cs</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:28">exception_index</name></name> <operator pos:start="23:30" pos:end="23:31">==</operator> <operator pos:start="23:33" pos:end="23:33">-</operator><literal type="number" pos:start="23:34" pos:end="23:34">1</literal><operator pos:start="23:35" pos:end="23:35">)</operator></expr>)</condition> <block pos:start="23:38" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:9">

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:46">(<expr pos:start="25:13" pos:end="25:45"><name pos:start="25:13" pos:end="25:28"><name pos:start="25:13" pos:end="25:15">env</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:28">pending_int</name></name> <operator pos:start="25:30" pos:end="25:30">&amp;</operator> <name pos:start="25:32" pos:end="25:45">INTERRUPT_MCHK</name></expr>)</condition> <block pos:start="25:48" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:44">

            <expr_stmt pos:start="27:13" pos:end="27:44"><expr pos:start="27:13" pos:end="27:43"><name pos:start="27:13" pos:end="27:31"><name pos:start="27:13" pos:end="27:14">cs</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:31">exception_index</name></name> <operator pos:start="27:33" pos:end="27:33">=</operator> <name pos:start="27:35" pos:end="27:43">EXCP_MCHK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="33:5" pos:end="33:36">/* handle external interrupts */</comment>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="39:43">(<expr pos:start="35:9" pos:end="39:42"><operator pos:start="35:9" pos:end="35:9">(</operator><name pos:start="35:10" pos:end="35:22"><name pos:start="35:10" pos:end="35:12">env</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:17">psw</name><operator pos:start="35:18" pos:end="35:18">.</operator><name pos:start="35:19" pos:end="35:22">mask</name></name> <operator pos:start="35:24" pos:end="35:24">&amp;</operator> <name pos:start="35:26" pos:end="35:37">PSW_MASK_EXT</name><operator pos:start="35:38" pos:end="35:38">)</operator> <operator pos:start="35:40" pos:end="35:41">&amp;&amp;</operator>

        <name pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:10">cs</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:27">exception_index</name></name> <operator pos:start="37:29" pos:end="37:30">==</operator> <operator pos:start="37:32" pos:end="37:32">-</operator><literal type="number" pos:start="37:33" pos:end="37:33">1</literal> <operator pos:start="37:35" pos:end="37:36">&amp;&amp;</operator>

        <operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:25"><name pos:start="39:10" pos:end="39:12">env</name><operator pos:start="39:13" pos:end="39:14">-&gt;</operator><name pos:start="39:15" pos:end="39:25">pending_int</name></name> <operator pos:start="39:27" pos:end="39:27">&amp;</operator> <name pos:start="39:29" pos:end="39:41">INTERRUPT_EXT</name><operator pos:start="39:42" pos:end="39:42">)</operator></expr>)</condition> <block pos:start="39:45" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:39">

        <expr_stmt pos:start="41:9" pos:end="41:39"><expr pos:start="41:9" pos:end="41:38"><name pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:10">cs</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:27">exception_index</name></name> <operator pos:start="41:29" pos:end="41:29">=</operator> <name pos:start="41:31" pos:end="41:38">EXCP_EXT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="45:5" pos:end="45:31">/* handle I/O interrupts */</comment>

    <if_stmt pos:start="47:5" pos:end="57:5"><if pos:start="47:5" pos:end="57:5">if <condition pos:start="47:8" pos:end="49:36">(<expr pos:start="47:9" pos:end="49:35"><operator pos:start="47:9" pos:end="47:9">(</operator><name pos:start="47:10" pos:end="47:22"><name pos:start="47:10" pos:end="47:12">env</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:17">psw</name><operator pos:start="47:18" pos:end="47:18">.</operator><name pos:start="47:19" pos:end="47:22">mask</name></name> <operator pos:start="47:24" pos:end="47:24">&amp;</operator> <name pos:start="47:26" pos:end="47:36">PSW_MASK_IO</name><operator pos:start="47:37" pos:end="47:37">)</operator> <operator pos:start="47:39" pos:end="47:40">&amp;&amp;</operator>

        <operator pos:start="49:9" pos:end="49:9">(</operator><name pos:start="49:10" pos:end="49:28"><name pos:start="49:10" pos:end="49:11">cs</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:28">exception_index</name></name> <operator pos:start="49:30" pos:end="49:31">==</operator> <operator pos:start="49:33" pos:end="49:33">-</operator><literal type="number" pos:start="49:34" pos:end="49:34">1</literal><operator pos:start="49:35" pos:end="49:35">)</operator></expr>)</condition> <block pos:start="49:38" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:9">

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:44">(<expr pos:start="51:13" pos:end="51:43"><name pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:15">env</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:28">pending_int</name></name> <operator pos:start="51:30" pos:end="51:30">&amp;</operator> <name pos:start="51:32" pos:end="51:43">INTERRUPT_IO</name></expr>)</condition> <block pos:start="51:46" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:42">

            <expr_stmt pos:start="53:13" pos:end="53:42"><expr pos:start="53:13" pos:end="53:41"><name pos:start="53:13" pos:end="53:31"><name pos:start="53:13" pos:end="53:14">cs</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:31">exception_index</name></name> <operator pos:start="53:33" pos:end="53:33">=</operator> <name pos:start="53:35" pos:end="53:41">EXCP_IO</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="61:5" pos:end="93:5">switch <condition pos:start="61:12" pos:end="61:32">(<expr pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:14">cs</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:31">exception_index</name></name></expr>)</condition> <block pos:start="61:34" pos:end="93:5">{<block_content pos:start="63:5" pos:end="91:14">

    <case pos:start="63:5" pos:end="63:18">case <expr pos:start="63:10" pos:end="63:17"><name pos:start="63:10" pos:end="63:17">EXCP_PGM</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:34"><expr pos:start="65:9" pos:end="65:33"><call pos:start="65:9" pos:end="65:33"><name pos:start="65:9" pos:end="65:28">do_program_interrupt</name><argument_list pos:start="65:29" pos:end="65:33">(<argument pos:start="65:30" pos:end="65:32"><expr pos:start="65:30" pos:end="65:32"><name pos:start="65:30" pos:end="65:32">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <case pos:start="69:5" pos:end="69:18">case <expr pos:start="69:10" pos:end="69:17"><name pos:start="69:10" pos:end="69:17">EXCP_SVC</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:30"><expr pos:start="71:9" pos:end="71:29"><call pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:24">do_svc_interrupt</name><argument_list pos:start="71:25" pos:end="71:29">(<argument pos:start="71:26" pos:end="71:28"><expr pos:start="71:26" pos:end="71:28"><name pos:start="71:26" pos:end="71:28">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:18">case <expr pos:start="75:10" pos:end="75:17"><name pos:start="75:10" pos:end="75:17">EXCP_EXT</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><call pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:24">do_ext_interrupt</name><argument_list pos:start="77:25" pos:end="77:29">(<argument pos:start="77:26" pos:end="77:28"><expr pos:start="77:26" pos:end="77:28"><name pos:start="77:26" pos:end="77:28">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <case pos:start="81:5" pos:end="81:17">case <expr pos:start="81:10" pos:end="81:16"><name pos:start="81:10" pos:end="81:16">EXCP_IO</name></expr>:</case>

        <expr_stmt pos:start="83:9" pos:end="83:29"><expr pos:start="83:9" pos:end="83:28"><call pos:start="83:9" pos:end="83:28"><name pos:start="83:9" pos:end="83:23">do_io_interrupt</name><argument_list pos:start="83:24" pos:end="83:28">(<argument pos:start="83:25" pos:end="83:27"><expr pos:start="83:25" pos:end="83:27"><name pos:start="83:25" pos:end="83:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:19">case <expr pos:start="87:10" pos:end="87:18"><name pos:start="87:10" pos:end="87:18">EXCP_MCHK</name></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:31"><expr pos:start="89:9" pos:end="89:30"><call pos:start="89:9" pos:end="89:30"><name pos:start="89:9" pos:end="89:25">do_mchk_interrupt</name><argument_list pos:start="89:26" pos:end="89:30">(<argument pos:start="89:27" pos:end="89:29"><expr pos:start="89:27" pos:end="89:29"><name pos:start="89:27" pos:end="89:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="95:5" pos:end="95:29"><expr pos:start="95:5" pos:end="95:28"><name pos:start="95:5" pos:end="95:23"><name pos:start="95:5" pos:end="95:6">cs</name><operator pos:start="95:7" pos:end="95:8">-&gt;</operator><name pos:start="95:9" pos:end="95:23">exception_index</name></name> <operator pos:start="95:25" pos:end="95:25">=</operator> <operator pos:start="95:27" pos:end="95:27">-</operator><literal type="number" pos:start="95:28" pos:end="95:28">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="99:5" pos:end="103:5"><if pos:start="99:5" pos:end="103:5">if <condition pos:start="99:8" pos:end="99:26">(<expr pos:start="99:9" pos:end="99:25"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:25"><name pos:start="99:10" pos:end="99:12">env</name><operator pos:start="99:13" pos:end="99:14">-&gt;</operator><name pos:start="99:15" pos:end="99:25">pending_int</name></name></expr>)</condition> <block pos:start="99:28" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:53">

        <expr_stmt pos:start="101:9" pos:end="101:53"><expr pos:start="101:9" pos:end="101:52"><name pos:start="101:9" pos:end="101:29"><name pos:start="101:9" pos:end="101:10">cs</name><operator pos:start="101:11" pos:end="101:12">-&gt;</operator><name pos:start="101:13" pos:end="101:29">interrupt_request</name></name> <operator pos:start="101:31" pos:end="101:32">&amp;=</operator> <operator pos:start="101:34" pos:end="101:34">~</operator><name pos:start="101:35" pos:end="101:52">CPU_INTERRUPT_HARD</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
