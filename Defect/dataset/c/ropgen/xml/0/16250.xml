<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16250.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">dirac_combine_frame</name><parameter_list pos:start="1:31" pos:end="3:76">(<parameter pos:start="1:32" pos:end="1:54"><decl pos:start="1:32" pos:end="1:54"><type pos:start="1:32" pos:end="1:54"><name pos:start="1:32" pos:end="1:51">AVCodecParserContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:54">s</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:77"><decl pos:start="1:57" pos:end="1:77"><type pos:start="1:57" pos:end="1:77"><name pos:start="1:57" pos:end="1:70">AVCodecContext</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:77">avctx</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:39"><decl pos:start="3:32" pos:end="3:39"><type pos:start="3:32" pos:end="3:39"><name pos:start="3:32" pos:end="3:34">int</name></type> <name pos:start="3:36" pos:end="3:39">next</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:60"><decl pos:start="3:42" pos:end="3:60"><type pos:start="3:42" pos:end="3:60"><specifier pos:start="3:42" pos:end="3:46">const</specifier> <name pos:start="3:48" pos:end="3:54">uint8_t</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier><modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:60">buf</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:75"><decl pos:start="3:63" pos:end="3:75"><type pos:start="3:63" pos:end="3:75"><name pos:start="3:63" pos:end="3:65">int</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:75">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="199:1">{<block_content pos:start="7:5" pos:end="197:16">

    <decl_stmt pos:start="7:5" pos:end="9:55"><decl pos:start="7:5" pos:end="9:54"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:25">parse_timing_info</name> <init pos:start="7:27" pos:end="9:54">= <expr pos:start="7:29" pos:end="9:54"><operator pos:start="7:29" pos:end="7:29">(</operator><name pos:start="7:30" pos:end="7:35"><name pos:start="7:30" pos:end="7:30">s</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:35">pts</name></name> <operator pos:start="7:37" pos:end="7:38">==</operator> <name pos:start="7:40" pos:end="7:53">AV_NOPTS_VALUE</name> <operator pos:start="7:55" pos:end="7:56">&amp;&amp;</operator>

                             <name pos:start="9:30" pos:end="9:35"><name pos:start="9:30" pos:end="9:30">s</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:35">dts</name></name> <operator pos:start="9:37" pos:end="9:38">==</operator> <name pos:start="9:40" pos:end="9:53">AV_NOPTS_VALUE</name><operator pos:start="9:54" pos:end="9:54">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">DiracParseContext</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:25">pc</name> <init pos:start="11:27" pos:end="11:40">= <expr pos:start="11:29" pos:end="11:40"><name pos:start="11:29" pos:end="11:40"><name pos:start="11:29" pos:end="11:29">s</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:40">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="35:5"><if pos:start="15:5" pos:end="35:5">if <condition pos:start="15:8" pos:end="15:27">(<expr pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:10">pc</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:26">overread_index</name></name></expr>)</condition> <block pos:start="15:29" pos:end="35:5">{<block_content pos:start="17:9" pos:end="33:9">

        <expr_stmt pos:start="17:9" pos:end="19:47"><expr pos:start="17:9" pos:end="19:46"><call pos:start="17:9" pos:end="19:46"><name pos:start="17:9" pos:end="17:15">memmove</name><argument_list pos:start="17:16" pos:end="19:46">(<argument pos:start="17:17" pos:end="17:26"><expr pos:start="17:17" pos:end="17:26"><name pos:start="17:17" pos:end="17:26"><name pos:start="17:17" pos:end="17:18">pc</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:26">buffer</name></name></expr></argument>, <argument pos:start="17:29" pos:end="17:59"><expr pos:start="17:29" pos:end="17:59"><name pos:start="17:29" pos:end="17:38"><name pos:start="17:29" pos:end="17:30">pc</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:38">buffer</name></name> <operator pos:start="17:40" pos:end="17:40">+</operator> <name pos:start="17:42" pos:end="17:59"><name pos:start="17:42" pos:end="17:43">pc</name><operator pos:start="17:44" pos:end="17:45">-&gt;</operator><name pos:start="17:46" pos:end="17:59">overread_index</name></name></expr></argument>,

               <argument pos:start="19:16" pos:end="19:45"><expr pos:start="19:16" pos:end="19:45"><name pos:start="19:16" pos:end="19:24"><name pos:start="19:16" pos:end="19:17">pc</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:24">index</name></name> <operator pos:start="19:26" pos:end="19:26">-</operator> <name pos:start="19:28" pos:end="19:45"><name pos:start="19:28" pos:end="19:29">pc</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:45">overread_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:48"><expr pos:start="21:9" pos:end="21:47"><name pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:10">pc</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:17">index</name></name>         <operator pos:start="21:27" pos:end="21:28">-=</operator> <name pos:start="21:30" pos:end="21:47"><name pos:start="21:30" pos:end="21:31">pc</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:47">overread_index</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:31"><expr pos:start="23:9" pos:end="23:30"><name pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:10">pc</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:26">overread_index</name></name> <operator pos:start="23:28" pos:end="23:28">=</operator> <literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="33:9"><if pos:start="25:9" pos:end="33:9">if <condition pos:start="25:12" pos:end="25:52">(<expr pos:start="25:13" pos:end="25:51"><operator pos:start="25:13" pos:end="25:13">*</operator><name pos:start="25:14" pos:end="25:21">buf_size</name> <operator pos:start="25:23" pos:end="25:24">==</operator> <literal type="number" pos:start="25:26" pos:end="25:26">0</literal> <operator pos:start="25:28" pos:end="25:29">&amp;&amp;</operator> <name pos:start="25:31" pos:end="25:43"><name pos:start="25:31" pos:end="25:32">pc</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:40">buffer</name><index pos:start="25:41" pos:end="25:43">[<expr pos:start="25:42" pos:end="25:42"><literal type="number" pos:start="25:42" pos:end="25:42">4</literal></expr>]</index></name> <operator pos:start="25:45" pos:end="25:46">==</operator> <literal type="number" pos:start="25:48" pos:end="25:51">0x10</literal></expr>)</condition> <block pos:start="25:54" pos:end="33:9">{<block_content pos:start="27:13" pos:end="31:21">

            <expr_stmt pos:start="27:13" pos:end="27:35"><expr pos:start="27:13" pos:end="27:34"><operator pos:start="27:13" pos:end="27:13">*</operator><name pos:start="27:14" pos:end="27:16">buf</name>      <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:34"><name pos:start="27:25" pos:end="27:26">pc</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:34">buffer</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:34"><expr pos:start="29:13" pos:end="29:33"><operator pos:start="29:13" pos:end="29:13">*</operator><name pos:start="29:14" pos:end="29:21">buf_size</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <name pos:start="29:25" pos:end="29:33"><name pos:start="29:25" pos:end="29:26">pc</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:33">index</name></name></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:21">return <expr pos:start="31:20" pos:end="31:20"><literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="195:5"><if pos:start="39:5" pos:end="63:5">if <condition pos:start="39:8" pos:end="39:19">(<expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:12">next</name> <operator pos:start="39:14" pos:end="39:15">==</operator> <operator pos:start="39:17" pos:end="39:17">-</operator><literal type="number" pos:start="39:18" pos:end="39:18">1</literal></expr>)</condition> <block pos:start="39:21" pos:end="63:5">{<block_content pos:start="43:9" pos:end="61:18">

        <comment type="block" pos:start="41:9" pos:end="41:62">/* Found a possible frame start but not a frame end */</comment>

        <decl_stmt pos:start="43:9" pos:end="47:71"><decl pos:start="43:9" pos:end="47:70"><type pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:12">void</name> <modifier pos:start="43:14" pos:end="43:14">*</modifier></type><name pos:start="43:15" pos:end="43:24">new_buffer</name> <init pos:start="43:26" pos:end="47:70">=

            <expr pos:start="45:13" pos:end="47:70"><call pos:start="45:13" pos:end="47:70"><name pos:start="45:13" pos:end="45:27">av_fast_realloc</name><argument_list pos:start="45:28" pos:end="47:70">(<argument pos:start="45:29" pos:end="45:38"><expr pos:start="45:29" pos:end="45:38"><name pos:start="45:29" pos:end="45:38"><name pos:start="45:29" pos:end="45:30">pc</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:38">buffer</name></name></expr></argument>, <argument pos:start="45:41" pos:end="45:56"><expr pos:start="45:41" pos:end="45:56"><operator pos:start="45:41" pos:end="45:41">&amp;</operator><name pos:start="45:42" pos:end="45:56"><name pos:start="45:42" pos:end="45:43">pc</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:56">buffer_size</name></name></expr></argument>,

                            <argument pos:start="47:29" pos:end="47:69"><expr pos:start="47:29" pos:end="47:69"><name pos:start="47:29" pos:end="47:37"><name pos:start="47:29" pos:end="47:30">pc</name><operator pos:start="47:31" pos:end="47:32">-&gt;</operator><name pos:start="47:33" pos:end="47:37">index</name></name> <operator pos:start="47:39" pos:end="47:39">+</operator> <operator pos:start="47:41" pos:end="47:41">(</operator><operator pos:start="47:42" pos:end="47:42">*</operator><name pos:start="47:43" pos:end="47:50">buf_size</name> <operator pos:start="47:52" pos:end="47:52">-</operator> <name pos:start="47:54" pos:end="47:68"><name pos:start="47:54" pos:end="47:55">pc</name><operator pos:start="47:56" pos:end="47:57">-&gt;</operator><name pos:start="47:58" pos:end="47:68">sync_offset</name></name><operator pos:start="47:69" pos:end="47:69">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="49:9" pos:end="51:35"><if pos:start="49:9" pos:end="51:35">if <condition pos:start="49:12" pos:end="49:24">(<expr pos:start="49:13" pos:end="49:23"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:23">new_buffer</name></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:35"><block_content pos:start="51:13" pos:end="51:35">

            <return pos:start="51:13" pos:end="51:35">return <expr pos:start="51:20" pos:end="51:34"><call pos:start="51:20" pos:end="51:34"><name pos:start="51:20" pos:end="51:26">AVERROR</name><argument_list pos:start="51:27" pos:end="51:34">(<argument pos:start="51:28" pos:end="51:33"><expr pos:start="51:28" pos:end="51:33"><name pos:start="51:28" pos:end="51:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:10">pc</name><operator pos:start="53:11" pos:end="53:12">-&gt;</operator><name pos:start="53:13" pos:end="53:18">buffer</name></name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:31">new_buffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="57:44"><expr pos:start="55:9" pos:end="57:43"><call pos:start="55:9" pos:end="57:43"><name pos:start="55:9" pos:end="55:14">memcpy</name><argument_list pos:start="55:15" pos:end="57:43">(<argument pos:start="55:16" pos:end="55:37"><expr pos:start="55:16" pos:end="55:37"><name pos:start="55:16" pos:end="55:25"><name pos:start="55:16" pos:end="55:17">pc</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:25">buffer</name></name> <operator pos:start="55:27" pos:end="55:27">+</operator> <name pos:start="55:29" pos:end="55:37"><name pos:start="55:29" pos:end="55:30">pc</name><operator pos:start="55:31" pos:end="55:32">-&gt;</operator><name pos:start="55:33" pos:end="55:37">index</name></name></expr></argument>, <argument pos:start="55:40" pos:end="55:63"><expr pos:start="55:40" pos:end="55:63"><operator pos:start="55:40" pos:end="55:40">(</operator><operator pos:start="55:41" pos:end="55:41">*</operator><name pos:start="55:42" pos:end="55:44">buf</name> <operator pos:start="55:46" pos:end="55:46">+</operator> <name pos:start="55:48" pos:end="55:62"><name pos:start="55:48" pos:end="55:49">pc</name><operator pos:start="55:50" pos:end="55:51">-&gt;</operator><name pos:start="55:52" pos:end="55:62">sync_offset</name></name><operator pos:start="55:63" pos:end="55:63">)</operator></expr></argument>,

               <argument pos:start="57:16" pos:end="57:42"><expr pos:start="57:16" pos:end="57:42"><operator pos:start="57:16" pos:end="57:16">*</operator><name pos:start="57:17" pos:end="57:24">buf_size</name> <operator pos:start="57:26" pos:end="57:26">-</operator> <name pos:start="57:28" pos:end="57:42"><name pos:start="57:28" pos:end="57:29">pc</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:42">sync_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:49"><expr pos:start="59:9" pos:end="59:48"><name pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:10">pc</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:17">index</name></name> <operator pos:start="59:19" pos:end="59:20">+=</operator> <operator pos:start="59:22" pos:end="59:22">*</operator><name pos:start="59:23" pos:end="59:30">buf_size</name> <operator pos:start="59:32" pos:end="59:32">-</operator> <name pos:start="59:34" pos:end="59:48"><name pos:start="59:34" pos:end="59:35">pc</name><operator pos:start="59:36" pos:end="59:37">-&gt;</operator><name pos:start="59:38" pos:end="59:48">sync_offset</name></name></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:18">return <expr pos:start="61:16" pos:end="61:17"><operator pos:start="61:16" pos:end="61:16">-</operator><literal type="number" pos:start="61:17" pos:end="61:17">1</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="195:5">else <block pos:start="63:12" pos:end="195:5">{<block_content pos:start="67:9" pos:end="193:36">

        <comment type="block" pos:start="65:9" pos:end="65:68">/* Found a possible frame start and a  possible frame end */</comment>

        <decl_stmt pos:start="67:9" pos:end="67:31"><decl pos:start="67:9" pos:end="67:26"><type pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:22">DiracParseUnit</name></type> <name pos:start="67:24" pos:end="67:26">pu1</name></decl>, <decl pos:start="67:29" pos:end="67:30"><type ref="prev" pos:start="67:9" pos:end="67:22"/><name pos:start="67:29" pos:end="67:30">pu</name></decl>;</decl_stmt>

        <decl_stmt pos:start="69:9" pos:end="71:61"><decl pos:start="69:9" pos:end="71:60"><type pos:start="69:9" pos:end="69:14"><name pos:start="69:9" pos:end="69:12">void</name> <modifier pos:start="69:14" pos:end="69:14">*</modifier></type><name pos:start="69:15" pos:end="69:24">new_buffer</name> <init pos:start="69:26" pos:end="71:60">= <expr pos:start="69:28" pos:end="71:60"><call pos:start="69:28" pos:end="71:60"><name pos:start="69:28" pos:end="69:42">av_fast_realloc</name><argument_list pos:start="69:43" pos:end="71:60">(<argument pos:start="69:44" pos:end="69:53"><expr pos:start="69:44" pos:end="69:53"><name pos:start="69:44" pos:end="69:53"><name pos:start="69:44" pos:end="69:45">pc</name><operator pos:start="69:46" pos:end="69:47">-&gt;</operator><name pos:start="69:48" pos:end="69:53">buffer</name></name></expr></argument>, <argument pos:start="69:56" pos:end="69:71"><expr pos:start="69:56" pos:end="69:71"><operator pos:start="69:56" pos:end="69:56">&amp;</operator><name pos:start="69:57" pos:end="69:71"><name pos:start="69:57" pos:end="69:58">pc</name><operator pos:start="69:59" pos:end="69:60">-&gt;</operator><name pos:start="69:61" pos:end="69:71">buffer_size</name></name></expr></argument>,

                                           <argument pos:start="71:44" pos:end="71:59"><expr pos:start="71:44" pos:end="71:59"><name pos:start="71:44" pos:end="71:52"><name pos:start="71:44" pos:end="71:45">pc</name><operator pos:start="71:46" pos:end="71:47">-&gt;</operator><name pos:start="71:48" pos:end="71:52">index</name></name> <operator pos:start="71:54" pos:end="71:54">+</operator> <name pos:start="71:56" pos:end="71:59">next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="73:9" pos:end="75:35"><if pos:start="73:9" pos:end="75:35">if <condition pos:start="73:12" pos:end="73:24">(<expr pos:start="73:13" pos:end="73:23"><operator pos:start="73:13" pos:end="73:13">!</operator><name pos:start="73:14" pos:end="73:23">new_buffer</name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:35"><block_content pos:start="75:13" pos:end="75:35">

            <return pos:start="75:13" pos:end="75:35">return <expr pos:start="75:20" pos:end="75:34"><call pos:start="75:20" pos:end="75:34"><name pos:start="75:20" pos:end="75:26">AVERROR</name><argument_list pos:start="75:27" pos:end="75:34">(<argument pos:start="75:28" pos:end="75:33"><expr pos:start="75:28" pos:end="75:33"><name pos:start="75:28" pos:end="75:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:32"><expr pos:start="77:9" pos:end="77:31"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:10">pc</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:18">buffer</name></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <name pos:start="77:22" pos:end="77:31">new_buffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:51"><expr pos:start="79:9" pos:end="79:50"><call pos:start="79:9" pos:end="79:50"><name pos:start="79:9" pos:end="79:14">memcpy</name><argument_list pos:start="79:15" pos:end="79:50">(<argument pos:start="79:16" pos:end="79:37"><expr pos:start="79:16" pos:end="79:37"><name pos:start="79:16" pos:end="79:25"><name pos:start="79:16" pos:end="79:17">pc</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:25">buffer</name></name> <operator pos:start="79:27" pos:end="79:27">+</operator> <name pos:start="79:29" pos:end="79:37"><name pos:start="79:29" pos:end="79:30">pc</name><operator pos:start="79:31" pos:end="79:32">-&gt;</operator><name pos:start="79:33" pos:end="79:37">index</name></name></expr></argument>, <argument pos:start="79:40" pos:end="79:43"><expr pos:start="79:40" pos:end="79:43"><operator pos:start="79:40" pos:end="79:40">*</operator><name pos:start="79:41" pos:end="79:43">buf</name></expr></argument>, <argument pos:start="79:46" pos:end="79:49"><expr pos:start="79:46" pos:end="79:49"><name pos:start="79:46" pos:end="79:49">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:10">pc</name><operator pos:start="81:11" pos:end="81:12">-&gt;</operator><name pos:start="81:13" pos:end="81:17">index</name></name> <operator pos:start="81:19" pos:end="81:20">+=</operator> <name pos:start="81:22" pos:end="81:25">next</name></expr>;</expr_stmt>



        <comment type="block" pos:start="85:9" pos:end="95:67">/* Need to check if we have a valid Parse Unit. We can't go by the

         * sync pattern 'BBCD' alone because arithmetic coding of the residual

         * and motion data can cause the pattern triggering a false start of

         * frame. So check if the previous parse offset of the next parse unit

         * is equal to the next parse offset of the current parse unit then

         * we can be pretty sure that we have a valid parse unit */</comment>

        <if_stmt pos:start="97:9" pos:end="115:9"><if pos:start="97:9" pos:end="115:9">if <condition pos:start="97:12" pos:end="105:9">(<expr pos:start="97:13" pos:end="103:71"><operator pos:start="97:13" pos:end="97:13">!</operator><call pos:start="97:14" pos:end="97:56"><name pos:start="97:14" pos:end="97:30">unpack_parse_unit</name><argument_list pos:start="97:31" pos:end="97:56">(<argument pos:start="97:32" pos:end="97:35"><expr pos:start="97:32" pos:end="97:35"><operator pos:start="97:32" pos:end="97:32">&amp;</operator><name pos:start="97:33" pos:end="97:35">pu1</name></expr></argument>, <argument pos:start="97:38" pos:end="97:39"><expr pos:start="97:38" pos:end="97:39"><name pos:start="97:38" pos:end="97:39">pc</name></expr></argument>, <argument pos:start="97:42" pos:end="97:55"><expr pos:start="97:42" pos:end="97:55"><name pos:start="97:42" pos:end="97:50"><name pos:start="97:42" pos:end="97:43">pc</name><operator pos:start="97:44" pos:end="97:45">-&gt;</operator><name pos:start="97:46" pos:end="97:50">index</name></name> <operator pos:start="97:52" pos:end="97:52">-</operator> <literal type="number" pos:start="97:54" pos:end="97:55">13</literal></expr></argument>)</argument_list></call>                     <operator pos:start="97:78" pos:end="97:79">||</operator>

            <operator pos:start="99:13" pos:end="99:13">!</operator><call pos:start="99:14" pos:end="99:76"><name pos:start="99:14" pos:end="99:30">unpack_parse_unit</name><argument_list pos:start="99:31" pos:end="99:76">(<argument pos:start="99:32" pos:end="99:34"><expr pos:start="99:32" pos:end="99:34"><operator pos:start="99:32" pos:end="99:32">&amp;</operator><name pos:start="99:33" pos:end="99:34">pu</name></expr></argument>, <argument pos:start="99:37" pos:end="99:38"><expr pos:start="99:37" pos:end="99:38"><name pos:start="99:37" pos:end="99:38">pc</name></expr></argument>, <argument pos:start="99:41" pos:end="99:75"><expr pos:start="99:41" pos:end="99:75"><name pos:start="99:41" pos:end="99:49"><name pos:start="99:41" pos:end="99:42">pc</name><operator pos:start="99:43" pos:end="99:44">-&gt;</operator><name pos:start="99:45" pos:end="99:49">index</name></name> <operator pos:start="99:51" pos:end="99:51">-</operator> <literal type="number" pos:start="99:53" pos:end="99:56">13</literal> <operator pos:start="99:56" pos:end="99:56">-</operator> <name pos:start="99:58" pos:end="99:75"><name pos:start="99:58" pos:end="99:60">pu1</name><operator pos:start="99:61" pos:end="99:61">.</operator><name pos:start="99:62" pos:end="99:75">prev_pu_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="99:78" pos:end="99:79">||</operator>

            <name pos:start="101:13" pos:end="101:29"><name pos:start="101:13" pos:end="101:14">pu</name><operator pos:start="101:15" pos:end="101:15">.</operator><name pos:start="101:16" pos:end="101:29">next_pu_offset</name></name> <operator pos:start="101:31" pos:end="101:32">!=</operator> <name pos:start="101:34" pos:end="101:51"><name pos:start="101:34" pos:end="101:36">pu1</name><operator pos:start="101:37" pos:end="101:37">.</operator><name pos:start="101:38" pos:end="101:51">prev_pu_offset</name></name>                          <operator pos:start="101:78" pos:end="101:79">||</operator>

            <name pos:start="103:13" pos:end="103:21"><name pos:start="103:13" pos:end="103:14">pc</name><operator pos:start="103:15" pos:end="103:16">-&gt;</operator><name pos:start="103:17" pos:end="103:21">index</name></name> <operator pos:start="103:23" pos:end="103:23">&lt;</operator> <name pos:start="103:25" pos:end="103:43"><name pos:start="103:25" pos:end="103:26">pc</name><operator pos:start="103:27" pos:end="103:28">-&gt;</operator><name pos:start="103:29" pos:end="103:43">dirac_unit_size</name></name> <operator pos:start="103:45" pos:end="103:45">+</operator> <literal type="number" pos:start="103:47" pos:end="103:52">13LL</literal> <operator pos:start="103:52" pos:end="103:52">+</operator> <name pos:start="103:54" pos:end="103:71"><name pos:start="103:54" pos:end="103:56">pu1</name><operator pos:start="103:57" pos:end="103:57">.</operator><name pos:start="103:58" pos:end="103:71">prev_pu_offset</name></name></expr>

        )</condition> <block pos:start="105:11" pos:end="115:9">{<block_content pos:start="107:13" pos:end="113:22">

            <expr_stmt pos:start="107:13" pos:end="107:40"><expr pos:start="107:13" pos:end="107:39"><name pos:start="107:13" pos:end="107:21"><name pos:start="107:13" pos:end="107:14">pc</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:21">index</name></name>              <operator pos:start="107:36" pos:end="107:37">-=</operator> <literal type="number" pos:start="107:39" pos:end="107:39">9</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:47"><expr pos:start="109:13" pos:end="109:46"><operator pos:start="109:13" pos:end="109:13">*</operator><name pos:start="109:14" pos:end="109:21">buf_size</name>               <operator pos:start="109:37" pos:end="109:37">=</operator> <name pos:start="109:39" pos:end="109:42">next</name> <operator pos:start="109:44" pos:end="109:44">-</operator> <literal type="number" pos:start="109:46" pos:end="109:46">9</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:40"><expr pos:start="111:13" pos:end="111:39"><name pos:start="111:13" pos:end="111:35"><name pos:start="111:13" pos:end="111:14">pc</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:35">header_bytes_needed</name></name> <operator pos:start="111:37" pos:end="111:37">=</operator> <literal type="number" pos:start="111:39" pos:end="111:39">9</literal></expr>;</expr_stmt>

            <return pos:start="113:13" pos:end="113:22">return <expr pos:start="113:20" pos:end="113:21"><operator pos:start="113:20" pos:end="113:20">-</operator><literal type="number" pos:start="113:21" pos:end="113:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="119:9" pos:end="123:63">/* All non-frame data must be accompanied by frame data. This is to

         * ensure that pts is set correctly. So if the current parse unit is

         * not frame data, wait for frame data to come along */</comment>



        <expr_stmt pos:start="127:9" pos:end="129:66"><expr pos:start="127:9" pos:end="129:65"><name pos:start="127:9" pos:end="127:22"><name pos:start="127:9" pos:end="127:10">pc</name><operator pos:start="127:11" pos:end="127:12">-&gt;</operator><name pos:start="127:13" pos:end="127:22">dirac_unit</name></name> <operator pos:start="127:24" pos:end="127:24">=</operator> <name pos:start="127:26" pos:end="127:35"><name pos:start="127:26" pos:end="127:27">pc</name><operator pos:start="127:28" pos:end="127:29">-&gt;</operator><name pos:start="127:30" pos:end="127:35">buffer</name></name> <operator pos:start="127:37" pos:end="127:37">+</operator> <name pos:start="127:39" pos:end="127:47"><name pos:start="127:39" pos:end="127:40">pc</name><operator pos:start="127:41" pos:end="127:42">-&gt;</operator><name pos:start="127:43" pos:end="127:47">index</name></name> <operator pos:start="127:49" pos:end="127:49">-</operator> <literal type="number" pos:start="127:51" pos:end="127:54">13</literal> <operator pos:start="127:54" pos:end="127:54">-</operator>

                         <name pos:start="129:26" pos:end="129:43"><name pos:start="129:26" pos:end="129:28">pu1</name><operator pos:start="129:29" pos:end="129:29">.</operator><name pos:start="129:30" pos:end="129:43">prev_pu_offset</name></name> <operator pos:start="129:45" pos:end="129:45">-</operator> <name pos:start="129:47" pos:end="129:65"><name pos:start="129:47" pos:end="129:48">pc</name><operator pos:start="129:49" pos:end="129:50">-&gt;</operator><name pos:start="129:51" pos:end="129:65">dirac_unit_size</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:49"><expr pos:start="133:9" pos:end="133:48"><name pos:start="133:9" pos:end="133:27"><name pos:start="133:9" pos:end="133:10">pc</name><operator pos:start="133:11" pos:end="133:12">-&gt;</operator><name pos:start="133:13" pos:end="133:27">dirac_unit_size</name></name> <operator pos:start="133:29" pos:end="133:30">+=</operator> <name pos:start="133:32" pos:end="133:48"><name pos:start="133:32" pos:end="133:33">pu</name><operator pos:start="133:34" pos:end="133:34">.</operator><name pos:start="133:35" pos:end="133:48">next_pu_offset</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="137:9" pos:end="145:9"><if pos:start="137:9" pos:end="145:9">if <condition pos:start="137:12" pos:end="137:40">(<expr pos:start="137:13" pos:end="137:39"><operator pos:start="137:13" pos:end="137:13">(</operator><name pos:start="137:14" pos:end="137:23"><name pos:start="137:14" pos:end="137:15">pu</name><operator pos:start="137:16" pos:end="137:16">.</operator><name pos:start="137:17" pos:end="137:23">pu_type</name></name> <operator pos:start="137:25" pos:end="137:25">&amp;</operator> <literal type="number" pos:start="137:27" pos:end="137:30">0x08</literal><operator pos:start="137:31" pos:end="137:31">)</operator> <operator pos:start="137:33" pos:end="137:34">!=</operator> <literal type="number" pos:start="137:36" pos:end="137:39">0x08</literal></expr>)</condition> <block pos:start="137:42" pos:end="145:9">{<block_content pos:start="139:13" pos:end="143:22">

            <expr_stmt pos:start="139:13" pos:end="139:40"><expr pos:start="139:13" pos:end="139:39"><name pos:start="139:13" pos:end="139:35"><name pos:start="139:13" pos:end="139:14">pc</name><operator pos:start="139:15" pos:end="139:16">-&gt;</operator><name pos:start="139:17" pos:end="139:35">header_bytes_needed</name></name> <operator pos:start="139:37" pos:end="139:37">=</operator> <literal type="number" pos:start="139:39" pos:end="139:39">9</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:43"><expr pos:start="141:13" pos:end="141:42"><operator pos:start="141:13" pos:end="141:13">*</operator><name pos:start="141:14" pos:end="141:21">buf_size</name>               <operator pos:start="141:37" pos:end="141:37">=</operator> <name pos:start="141:39" pos:end="141:42">next</name></expr>;</expr_stmt>

            <return pos:start="143:13" pos:end="143:22">return <expr pos:start="143:20" pos:end="143:21"><operator pos:start="143:20" pos:end="143:20">-</operator><literal type="number" pos:start="143:21" pos:end="143:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="149:9" pos:end="149:58">/* Get the picture number to set the pts and dts*/</comment>

        <if_stmt pos:start="151:9" pos:end="173:9"><if pos:start="151:9" pos:end="173:9">if <condition pos:start="151:12" pos:end="151:30">(<expr pos:start="151:13" pos:end="151:29"><name pos:start="151:13" pos:end="151:29">parse_timing_info</name></expr>)</condition> <block pos:start="151:32" pos:end="173:9">{<block_content pos:start="153:13" pos:end="171:40">

            <decl_stmt pos:start="153:13" pos:end="155:66"><decl pos:start="153:13" pos:end="155:65"><type pos:start="153:13" pos:end="153:21"><name pos:start="153:13" pos:end="153:19">uint8_t</name> <modifier pos:start="153:21" pos:end="153:21">*</modifier></type><name pos:start="153:22" pos:end="153:27">cur_pu</name> <init pos:start="153:29" pos:end="155:65">= <expr pos:start="153:31" pos:end="155:65"><name pos:start="153:31" pos:end="153:40"><name pos:start="153:31" pos:end="153:32">pc</name><operator pos:start="153:33" pos:end="153:34">-&gt;</operator><name pos:start="153:35" pos:end="153:40">buffer</name></name> <operator pos:start="153:42" pos:end="153:42">+</operator>

                              <name pos:start="155:31" pos:end="155:39"><name pos:start="155:31" pos:end="155:32">pc</name><operator pos:start="155:33" pos:end="155:34">-&gt;</operator><name pos:start="155:35" pos:end="155:39">index</name></name> <operator pos:start="155:41" pos:end="155:41">-</operator> <literal type="number" pos:start="155:43" pos:end="155:46">13</literal> <operator pos:start="155:46" pos:end="155:46">-</operator> <name pos:start="155:48" pos:end="155:65"><name pos:start="155:48" pos:end="155:50">pu1</name><operator pos:start="155:51" pos:end="155:51">.</operator><name pos:start="155:52" pos:end="155:65">prev_pu_offset</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="157:13" pos:end="157:43"><decl pos:start="157:13" pos:end="157:42"><type pos:start="157:13" pos:end="157:15"><name pos:start="157:13" pos:end="157:15">int</name></type> <name pos:start="157:17" pos:end="157:19">pts</name> <init pos:start="157:21" pos:end="157:42">= <expr pos:start="157:23" pos:end="157:42"><call pos:start="157:23" pos:end="157:42"><name pos:start="157:23" pos:end="157:29">AV_RB32</name><argument_list pos:start="157:30" pos:end="157:42">(<argument pos:start="157:31" pos:end="157:41"><expr pos:start="157:31" pos:end="157:41"><name pos:start="157:31" pos:end="157:36">cur_pu</name> <operator pos:start="157:38" pos:end="157:38">+</operator> <literal type="number" pos:start="157:40" pos:end="157:41">13</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="159:13" pos:end="165:41"><if pos:start="159:13" pos:end="161:33">if <condition pos:start="159:16" pos:end="159:53">(<expr pos:start="159:17" pos:end="159:52"><name pos:start="159:17" pos:end="159:27"><name pos:start="159:17" pos:end="159:17">s</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:27">last_pts</name></name> <operator pos:start="159:29" pos:end="159:30">==</operator> <literal type="number" pos:start="159:32" pos:end="159:32">0</literal> <operator pos:start="159:34" pos:end="159:35">&amp;&amp;</operator> <name pos:start="159:37" pos:end="159:47"><name pos:start="159:37" pos:end="159:37">s</name><operator pos:start="159:38" pos:end="159:39">-&gt;</operator><name pos:start="159:40" pos:end="159:47">last_dts</name></name> <operator pos:start="159:49" pos:end="159:50">==</operator> <literal type="number" pos:start="159:52" pos:end="159:52">0</literal></expr>)</condition><block type="pseudo" pos:start="161:17" pos:end="161:33"><block_content pos:start="161:17" pos:end="161:33">

                <expr_stmt pos:start="161:17" pos:end="161:33"><expr pos:start="161:17" pos:end="161:32"><name pos:start="161:17" pos:end="161:22"><name pos:start="161:17" pos:end="161:17">s</name><operator pos:start="161:18" pos:end="161:19">-&gt;</operator><name pos:start="161:20" pos:end="161:22">dts</name></name> <operator pos:start="161:24" pos:end="161:24">=</operator> <name pos:start="161:26" pos:end="161:28">pts</name> <operator pos:start="161:30" pos:end="161:30">-</operator> <literal type="number" pos:start="161:32" pos:end="161:32">1</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="163:13" pos:end="165:41">else<block type="pseudo" pos:start="165:17" pos:end="165:41"><block_content pos:start="165:17" pos:end="165:41">

                <expr_stmt pos:start="165:17" pos:end="165:41"><expr pos:start="165:17" pos:end="165:40"><name pos:start="165:17" pos:end="165:22"><name pos:start="165:17" pos:end="165:17">s</name><operator pos:start="165:18" pos:end="165:19">-&gt;</operator><name pos:start="165:20" pos:end="165:22">dts</name></name> <operator pos:start="165:24" pos:end="165:24">=</operator> <name pos:start="165:26" pos:end="165:36"><name pos:start="165:26" pos:end="165:26">s</name><operator pos:start="165:27" pos:end="165:28">-&gt;</operator><name pos:start="165:29" pos:end="165:36">last_dts</name></name> <operator pos:start="165:38" pos:end="165:38">+</operator> <literal type="number" pos:start="165:40" pos:end="165:40">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:25"><expr pos:start="167:13" pos:end="167:24"><name pos:start="167:13" pos:end="167:18"><name pos:start="167:13" pos:end="167:13">s</name><operator pos:start="167:14" pos:end="167:15">-&gt;</operator><name pos:start="167:16" pos:end="167:18">pts</name></name> <operator pos:start="167:20" pos:end="167:20">=</operator> <name pos:start="167:22" pos:end="167:24">pts</name></expr>;</expr_stmt>

            <if_stmt pos:start="169:13" pos:end="171:40"><if pos:start="169:13" pos:end="171:40">if <condition pos:start="169:16" pos:end="169:59">(<expr pos:start="169:17" pos:end="169:58"><operator pos:start="169:17" pos:end="169:17">!</operator><name pos:start="169:18" pos:end="169:36"><name pos:start="169:18" pos:end="169:22">avctx</name><operator pos:start="169:23" pos:end="169:24">-&gt;</operator><name pos:start="169:25" pos:end="169:36">has_b_frames</name></name> <operator pos:start="169:38" pos:end="169:39">&amp;&amp;</operator> <operator pos:start="169:41" pos:end="169:41">(</operator><name pos:start="169:42" pos:end="169:50"><name pos:start="169:42" pos:end="169:47">cur_pu</name><index pos:start="169:48" pos:end="169:50">[<expr pos:start="169:49" pos:end="169:49"><literal type="number" pos:start="169:49" pos:end="169:49">4</literal></expr>]</index></name> <operator pos:start="169:52" pos:end="169:52">&amp;</operator> <literal type="number" pos:start="169:54" pos:end="169:57">0x03</literal><operator pos:start="169:58" pos:end="169:58">)</operator></expr>)</condition><block type="pseudo" pos:start="171:17" pos:end="171:40"><block_content pos:start="171:17" pos:end="171:40">

                <expr_stmt pos:start="171:17" pos:end="171:40"><expr pos:start="171:17" pos:end="171:39"><name pos:start="171:17" pos:end="171:35"><name pos:start="171:17" pos:end="171:21">avctx</name><operator pos:start="171:22" pos:end="171:23">-&gt;</operator><name pos:start="171:24" pos:end="171:35">has_b_frames</name></name> <operator pos:start="171:37" pos:end="171:37">=</operator> <literal type="number" pos:start="171:39" pos:end="171:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="175:9" pos:end="177:45"><if pos:start="175:9" pos:end="177:45">if <condition pos:start="175:12" pos:end="175:52">(<expr pos:start="175:13" pos:end="175:51"><name pos:start="175:13" pos:end="175:31"><name pos:start="175:13" pos:end="175:17">avctx</name><operator pos:start="175:18" pos:end="175:19">-&gt;</operator><name pos:start="175:20" pos:end="175:31">has_b_frames</name></name> <operator pos:start="175:33" pos:end="175:34">&amp;&amp;</operator> <name pos:start="175:36" pos:end="175:41"><name pos:start="175:36" pos:end="175:36">s</name><operator pos:start="175:37" pos:end="175:38">-&gt;</operator><name pos:start="175:39" pos:end="175:41">pts</name></name> <operator pos:start="175:43" pos:end="175:44">==</operator> <name pos:start="175:46" pos:end="175:51"><name pos:start="175:46" pos:end="175:46">s</name><operator pos:start="175:47" pos:end="175:48">-&gt;</operator><name pos:start="175:49" pos:end="175:51">dts</name></name></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="177:45"><block_content pos:start="177:13" pos:end="177:45">

            <expr_stmt pos:start="177:13" pos:end="177:45"><expr pos:start="177:13" pos:end="177:44"><name pos:start="177:13" pos:end="177:24"><name pos:start="177:13" pos:end="177:13">s</name><operator pos:start="177:14" pos:end="177:15">-&gt;</operator><name pos:start="177:16" pos:end="177:24">pict_type</name></name> <operator pos:start="177:26" pos:end="177:26">=</operator> <name pos:start="177:28" pos:end="177:44">AV_PICTURE_TYPE_B</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="181:9" pos:end="181:53">/* Finally have a complete Dirac data unit */</comment>

        <expr_stmt pos:start="183:9" pos:end="183:35"><expr pos:start="183:9" pos:end="183:34"><operator pos:start="183:9" pos:end="183:9">*</operator><name pos:start="183:10" pos:end="183:12">buf</name>      <operator pos:start="183:19" pos:end="183:19">=</operator> <name pos:start="183:21" pos:end="183:34"><name pos:start="183:21" pos:end="183:22">pc</name><operator pos:start="183:23" pos:end="183:24">-&gt;</operator><name pos:start="183:25" pos:end="183:34">dirac_unit</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:40"><expr pos:start="185:9" pos:end="185:39"><operator pos:start="185:9" pos:end="185:9">*</operator><name pos:start="185:10" pos:end="185:17">buf_size</name> <operator pos:start="185:19" pos:end="185:19">=</operator> <name pos:start="185:21" pos:end="185:39"><name pos:start="185:21" pos:end="185:22">pc</name><operator pos:start="185:23" pos:end="185:24">-&gt;</operator><name pos:start="185:25" pos:end="185:39">dirac_unit_size</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="189:9" pos:end="189:36"><expr pos:start="189:9" pos:end="189:35"><name pos:start="189:9" pos:end="189:27"><name pos:start="189:9" pos:end="189:10">pc</name><operator pos:start="189:11" pos:end="189:12">-&gt;</operator><name pos:start="189:13" pos:end="189:27">dirac_unit_size</name></name>     <operator pos:start="189:33" pos:end="189:33">=</operator> <literal type="number" pos:start="189:35" pos:end="189:35">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:49"><expr pos:start="191:9" pos:end="191:48"><name pos:start="191:9" pos:end="191:26"><name pos:start="191:9" pos:end="191:10">pc</name><operator pos:start="191:11" pos:end="191:12">-&gt;</operator><name pos:start="191:13" pos:end="191:26">overread_index</name></name>      <operator pos:start="191:33" pos:end="191:33">=</operator> <name pos:start="191:35" pos:end="191:43"><name pos:start="191:35" pos:end="191:36">pc</name><operator pos:start="191:37" pos:end="191:38">-&gt;</operator><name pos:start="191:39" pos:end="191:43">index</name></name> <operator pos:start="191:45" pos:end="191:45">-</operator> <literal type="number" pos:start="191:47" pos:end="191:48">13</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:36"><expr pos:start="193:9" pos:end="193:35"><name pos:start="193:9" pos:end="193:31"><name pos:start="193:9" pos:end="193:10">pc</name><operator pos:start="193:11" pos:end="193:12">-&gt;</operator><name pos:start="193:13" pos:end="193:31">header_bytes_needed</name></name> <operator pos:start="193:33" pos:end="193:33">=</operator> <literal type="number" pos:start="193:35" pos:end="193:35">9</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="197:5" pos:end="197:16">return <expr pos:start="197:12" pos:end="197:15"><name pos:start="197:12" pos:end="197:15">next</name></expr>;</return>

</block_content>}</block></function>
</unit>
