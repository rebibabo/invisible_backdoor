<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21493.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">handler_audit</name><parameter_list pos:start="1:26" pos:end="1:70">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:33">Monitor</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">mon</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:60"><decl pos:start="1:41" pos:end="1:60"><type pos:start="1:41" pos:end="1:60"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:55">mon_cmd_t</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">cmd</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:69"><decl pos:start="1:63" pos:end="1:69"><type pos:start="1:63" pos:end="1:69"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:69">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="82:0">

    <if_stmt pos:start="5:5" pos:end="32:0"><if pos:start="5:5" pos:end="32:0">if <condition pos:start="5:8" pos:end="5:39">(<expr pos:start="5:9" pos:end="5:38"><name pos:start="5:9" pos:end="5:11">ret</name> <operator pos:start="5:13" pos:end="5:14">&amp;&amp;</operator> <operator pos:start="5:16" pos:end="5:16">!</operator><call pos:start="5:17" pos:end="5:38"><name pos:start="5:17" pos:end="5:33">monitor_has_error</name><argument_list pos:start="5:34" pos:end="5:38">(<argument pos:start="5:35" pos:end="5:37"><expr pos:start="5:35" pos:end="5:37"><name pos:start="5:35" pos:end="5:37">mon</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5:41" pos:end="32:0">{<block_content pos:start="17:9" pos:end="25:29">

        <comment type="block" pos:start="7:9" pos:end="15:11">/*

         * If it returns failure, it must have passed on error.

         *

         * Action: Report an internal error to the client if in QMP.

         */</comment>

        <if_stmt pos:start="17:9" pos:end="21:9"><if pos:start="17:9" pos:end="21:9">if <condition pos:start="17:12" pos:end="17:35">(<expr pos:start="17:13" pos:end="17:34"><call pos:start="17:13" pos:end="17:34"><name pos:start="17:13" pos:end="17:29">monitor_ctrl_mode</name><argument_list pos:start="17:30" pos:end="17:34">(<argument pos:start="17:31" pos:end="17:33"><expr pos:start="17:31" pos:end="17:33"><name pos:start="17:31" pos:end="17:33">mon</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:37" pos:end="21:9">{<block_content pos:start="19:13" pos:end="19:48">

            <expr_stmt pos:start="19:13" pos:end="19:48"><expr pos:start="19:13" pos:end="19:47"><call pos:start="19:13" pos:end="19:47"><name pos:start="19:13" pos:end="19:25">qerror_report</name><argument_list pos:start="19:26" pos:end="19:47">(<argument pos:start="19:27" pos:end="19:46"><expr pos:start="19:27" pos:end="19:46"><name pos:start="19:27" pos:end="19:46">QERR_UNDEFINED_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="23:9" pos:end="25:29"><expr pos:start="23:9" pos:end="25:28"><call pos:start="23:9" pos:end="25:28"><name pos:start="23:9" pos:end="23:17">MON_DEBUG</name><argument_list pos:start="23:18" pos:end="25:28">(<argument pos:start="23:19" pos:end="23:77"><expr pos:start="23:19" pos:end="23:77"><literal type="string" pos:start="23:19" pos:end="23:77">"command '%s' returned failure but did not pass an error\n"</literal></expr></argument>,

                  <argument pos:start="25:19" pos:end="25:27"><expr pos:start="25:19" pos:end="25:27"><name pos:start="25:19" pos:end="25:27"><name pos:start="25:19" pos:end="25:21">cmd</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:27">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="31:1" pos:end="31:27">#<cpp:directive pos:start="31:2" pos:end="31:6">ifdef</cpp:directive> <name pos:start="31:8" pos:end="31:27">CONFIG_DEBUG_MONITOR</name></cpp:ifdef>

    <if_stmt pos:start="33:5" pos:end="49:5"><if pos:start="33:5" pos:end="49:5">if <condition pos:start="33:8" pos:end="33:39">(<expr pos:start="33:9" pos:end="33:38"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:12">ret</name> <operator pos:start="33:14" pos:end="33:15">&amp;&amp;</operator> <call pos:start="33:17" pos:end="33:38"><name pos:start="33:17" pos:end="33:33">monitor_has_error</name><argument_list pos:start="33:34" pos:end="33:38">(<argument pos:start="33:35" pos:end="33:37"><expr pos:start="33:35" pos:end="33:37"><name pos:start="33:35" pos:end="33:37">mon</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:41" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:29">

        <comment type="block" pos:start="35:9" pos:end="43:11">/*

         * If it returns success, it must not have passed an error.

         *

         * Action: Report the passed error to the client.

         */</comment>

        <expr_stmt pos:start="45:9" pos:end="47:29"><expr pos:start="45:9" pos:end="47:28"><call pos:start="45:9" pos:end="47:28"><name pos:start="45:9" pos:end="45:17">MON_DEBUG</name><argument_list pos:start="45:18" pos:end="47:28">(<argument pos:start="45:19" pos:end="45:71"><expr pos:start="45:19" pos:end="45:71"><literal type="string" pos:start="45:19" pos:end="45:71">"command '%s' returned success but passed an error\n"</literal></expr></argument>,

                  <argument pos:start="47:19" pos:end="47:27"><expr pos:start="47:19" pos:end="47:27"><name pos:start="47:19" pos:end="47:27"><name pos:start="47:19" pos:end="47:21">cmd</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:27">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="82:0"><if pos:start="53:5" pos:end="82:0">if <condition pos:start="53:8" pos:end="53:71">(<expr pos:start="53:9" pos:end="53:70"><call pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:27">mon_print_count_get</name><argument_list pos:start="53:28" pos:end="53:32">(<argument pos:start="53:29" pos:end="53:31"><expr pos:start="53:29" pos:end="53:31"><name pos:start="53:29" pos:end="53:31">mon</name></expr></argument>)</argument_list></call> <operator pos:start="53:34" pos:end="53:34">&gt;</operator> <literal type="number" pos:start="53:36" pos:end="53:36">0</literal> <operator pos:start="53:38" pos:end="53:39">&amp;&amp;</operator> <call pos:start="53:41" pos:end="53:65"><name pos:start="53:41" pos:end="53:46">strcmp</name><argument_list pos:start="53:47" pos:end="53:65">(<argument pos:start="53:48" pos:end="53:56"><expr pos:start="53:48" pos:end="53:56"><name pos:start="53:48" pos:end="53:56"><name pos:start="53:48" pos:end="53:50">cmd</name><operator pos:start="53:51" pos:end="53:52">-&gt;</operator><name pos:start="53:53" pos:end="53:56">name</name></name></expr></argument>, <argument pos:start="53:59" pos:end="53:64"><expr pos:start="53:59" pos:end="53:64"><literal type="string" pos:start="53:59" pos:end="53:64">"info"</literal></expr></argument>)</argument_list></call> <operator pos:start="53:67" pos:end="53:68">!=</operator> <literal type="number" pos:start="53:70" pos:end="53:70">0</literal></expr>)</condition> <block pos:start="53:73" pos:end="82:0">{<block_content pos:start="75:9" pos:end="77:55">

        <comment type="block" pos:start="55:9" pos:end="73:11">/*

         * Handlers should not call Monitor print functions.

         *

         * Action: Ignore them in QMP.

         *

         * (XXX: we don't check any 'info' or 'query' command here

         * because the user print function _is_ called by do_info(), hence

         * we will trigger this check. This problem will go away when we

         * make 'query' commands real and kill do_info())

         */</comment>

        <expr_stmt pos:start="75:9" pos:end="77:55"><expr pos:start="75:9" pos:end="77:54"><call pos:start="75:9" pos:end="77:54"><name pos:start="75:9" pos:end="75:17">MON_DEBUG</name><argument_list pos:start="75:18" pos:end="77:54">(<argument pos:start="75:19" pos:end="75:68"><expr pos:start="75:19" pos:end="75:68"><literal type="string" pos:start="75:19" pos:end="75:68">"command '%s' called print functions %d time(s)\n"</literal></expr></argument>,

                  <argument pos:start="77:19" pos:end="77:27"><expr pos:start="77:19" pos:end="77:27"><name pos:start="77:19" pos:end="77:27"><name pos:start="77:19" pos:end="77:21">cmd</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:27">name</name></name></expr></argument>, <argument pos:start="77:30" pos:end="77:53"><expr pos:start="77:30" pos:end="77:53"><call pos:start="77:30" pos:end="77:53"><name pos:start="77:30" pos:end="77:48">mon_print_count_get</name><argument_list pos:start="77:49" pos:end="77:53">(<argument pos:start="77:50" pos:end="77:52"><expr pos:start="77:50" pos:end="77:52"><name pos:start="77:50" pos:end="77:52">mon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
