<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14894.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:44">sdhci_sdma_transfer_multi_blocks</name><parameter_list pos:start="1:45" pos:end="1:59">(<parameter pos:start="1:46" pos:end="1:58"><decl pos:start="1:46" pos:end="1:58"><type pos:start="1:46" pos:end="1:57"><name pos:start="1:46" pos:end="1:55">SDHCIState</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:58">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:1">{<block_content pos:start="5:5" pos:end="165:5">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">bool</name></type> <name pos:start="5:10" pos:end="5:21">page_aligned</name> <init pos:start="5:23" pos:end="5:29">= <expr pos:start="5:25" pos:end="5:29"><name pos:start="5:25" pos:end="5:29">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:18">n</name></decl>, <decl pos:start="7:21" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:21" pos:end="7:25">begin</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:52"><decl pos:start="9:5" pos:end="9:51"><type pos:start="9:5" pos:end="9:18"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:18">uint16_t</name></type> <name pos:start="9:20" pos:end="9:29">block_size</name> <init pos:start="9:31" pos:end="9:51">= <expr pos:start="9:33" pos:end="9:51"><name pos:start="9:33" pos:end="9:42"><name pos:start="9:33" pos:end="9:33">s</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:42">blksize</name></name> <operator pos:start="9:44" pos:end="9:44">&amp;</operator> <literal type="number" pos:start="9:46" pos:end="9:51">0x0fff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:70"><decl pos:start="11:5" pos:end="11:69"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:25">boundary_chk</name> <init pos:start="11:27" pos:end="11:69">= <expr pos:start="11:29" pos:end="11:69"><literal type="number" pos:start="11:29" pos:end="11:29">1</literal> <operator pos:start="11:31" pos:end="11:32">&lt;&lt;</operator> <operator pos:start="11:34" pos:end="11:34">(</operator><operator pos:start="11:35" pos:end="11:35">(</operator><operator pos:start="11:36" pos:end="11:36">(</operator><name pos:start="11:37" pos:end="11:46"><name pos:start="11:37" pos:end="11:37">s</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:46">blksize</name></name> <operator pos:start="11:48" pos:end="11:48">&amp;</operator> <literal type="number" pos:start="11:50" pos:end="11:55">0xf000</literal><operator pos:start="11:56" pos:end="11:56">)</operator> <operator pos:start="11:58" pos:end="11:59">&gt;&gt;</operator> <literal type="number" pos:start="11:61" pos:end="11:62">12</literal><operator pos:start="11:63" pos:end="11:63">)</operator> <operator pos:start="11:65" pos:end="11:65">+</operator> <literal type="number" pos:start="11:67" pos:end="11:68">12</literal><operator pos:start="11:69" pos:end="11:69">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:75"><decl pos:start="13:5" pos:end="13:74"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:27">boundary_count</name> <init pos:start="13:29" pos:end="13:74">= <expr pos:start="13:31" pos:end="13:74"><name pos:start="13:31" pos:end="13:42">boundary_chk</name> <operator pos:start="13:44" pos:end="13:44">-</operator> <operator pos:start="13:46" pos:end="13:46">(</operator><name pos:start="13:47" pos:end="13:58"><name pos:start="13:47" pos:end="13:47">s</name><operator pos:start="13:48" pos:end="13:49">-&gt;</operator><name pos:start="13:50" pos:end="13:58">sdmasysad</name></name> <operator pos:start="13:60" pos:end="13:60">%</operator> <name pos:start="13:62" pos:end="13:73">boundary_chk</name><operator pos:start="13:74" pos:end="13:74">)</operator></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="21:37">/* XXX: Some sd/mmc drivers (for example, u-boot-slp) do not account for

     * possible stop at page boundary if initial address is not page aligned,

     * allow them to work properly */</comment>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:43">(<expr pos:start="23:9" pos:end="23:42"><operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:21"><name pos:start="23:10" pos:end="23:10">s</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:21">sdmasysad</name></name> <operator pos:start="23:23" pos:end="23:23">%</operator> <name pos:start="23:25" pos:end="23:36">boundary_chk</name><operator pos:start="23:37" pos:end="23:37">)</operator> <operator pos:start="23:39" pos:end="23:40">==</operator> <literal type="number" pos:start="23:42" pos:end="23:42">0</literal></expr>)</condition> <block pos:start="23:45" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:28">

        <expr_stmt pos:start="25:9" pos:end="25:28"><expr pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:20">page_aligned</name> <operator pos:start="25:22" pos:end="25:22">=</operator> <name pos:start="25:24" pos:end="25:27">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="147:5"><if pos:start="31:5" pos:end="91:5">if <condition pos:start="31:8" pos:end="31:35">(<expr pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:17">trnmod</name></name> <operator pos:start="31:19" pos:end="31:19">&amp;</operator> <name pos:start="31:21" pos:end="31:34">SDHC_TRNS_READ</name></expr>)</condition> <block pos:start="31:37" pos:end="91:5">{<block_content pos:start="33:9" pos:end="89:9">

        <expr_stmt pos:start="33:9" pos:end="35:37"><expr pos:start="33:9" pos:end="35:36"><name pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:17">prnsts</name></name> <operator pos:start="33:19" pos:end="33:20">|=</operator> <name pos:start="33:22" pos:end="33:36">SDHC_DOING_READ</name> <operator pos:start="33:38" pos:end="33:38">|</operator> <name pos:start="33:40" pos:end="33:56">SDHC_DATA_INHIBIT</name> <operator pos:start="33:58" pos:end="33:58">|</operator>

                <name pos:start="35:17" pos:end="35:36">SDHC_DAT_LINE_ACTIVE</name></expr>;</expr_stmt>

        <while pos:start="37:9" pos:end="89:9">while <condition pos:start="37:15" pos:end="37:25">(<expr pos:start="37:16" pos:end="37:24"><name pos:start="37:16" pos:end="37:24"><name pos:start="37:16" pos:end="37:16">s</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:24">blkcnt</name></name></expr>)</condition> <block pos:start="37:27" pos:end="89:9">{<block_content pos:start="39:13" pos:end="87:13">

            <if_stmt pos:start="39:13" pos:end="47:13"><if pos:start="39:13" pos:end="47:13">if <condition pos:start="39:16" pos:end="39:35">(<expr pos:start="39:17" pos:end="39:34"><name pos:start="39:17" pos:end="39:29"><name pos:start="39:17" pos:end="39:17">s</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:29">data_count</name></name> <operator pos:start="39:31" pos:end="39:32">==</operator> <literal type="number" pos:start="39:34" pos:end="39:34">0</literal></expr>)</condition> <block pos:start="39:37" pos:end="47:13">{<block_content pos:start="41:17" pos:end="45:17">

                <for pos:start="41:17" pos:end="45:17">for <control pos:start="41:21" pos:end="41:48">(<init pos:start="41:22" pos:end="41:27"><expr pos:start="41:22" pos:end="41:26"><name pos:start="41:22" pos:end="41:22">n</name> <operator pos:start="41:24" pos:end="41:24">=</operator> <literal type="number" pos:start="41:26" pos:end="41:26">0</literal></expr>;</init> <condition pos:start="41:29" pos:end="41:43"><expr pos:start="41:29" pos:end="41:42"><name pos:start="41:29" pos:end="41:29">n</name> <operator pos:start="41:31" pos:end="41:31">&lt;</operator> <name pos:start="41:33" pos:end="41:42">block_size</name></expr>;</condition> <incr pos:start="41:45" pos:end="41:47"><expr pos:start="41:45" pos:end="41:47"><name pos:start="41:45" pos:end="41:45">n</name><operator pos:start="41:46" pos:end="41:47">++</operator></expr></incr>)</control> <block pos:start="41:50" pos:end="45:17">{<block_content pos:start="43:21" pos:end="43:67">

                    <expr_stmt pos:start="43:21" pos:end="43:67"><expr pos:start="43:21" pos:end="43:66"><name pos:start="43:21" pos:end="43:37"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:34">fifo_buffer</name><index pos:start="43:35" pos:end="43:37">[<expr pos:start="43:36" pos:end="43:36"><name pos:start="43:36" pos:end="43:36">n</name></expr>]</index></name> <operator pos:start="43:39" pos:end="43:39">=</operator> <call pos:start="43:41" pos:end="43:66"><name pos:start="43:41" pos:end="43:55">sdbus_read_data</name><argument_list pos:start="43:56" pos:end="43:66">(<argument pos:start="43:57" pos:end="43:65"><expr pos:start="43:57" pos:end="43:65"><operator pos:start="43:57" pos:end="43:57">&amp;</operator><name pos:start="43:58" pos:end="43:65"><name pos:start="43:58" pos:end="43:58">s</name><operator pos:start="43:59" pos:end="43:60">-&gt;</operator><name pos:start="43:61" pos:end="43:65">sdbus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:34"><expr pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:17">begin</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:33"><name pos:start="49:21" pos:end="49:21">s</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:33">data_count</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="69:13"><if pos:start="51:13" pos:end="57:14">if <condition pos:start="51:16" pos:end="51:72">(<expr pos:start="51:17" pos:end="51:71"><operator pos:start="51:17" pos:end="51:17">(</operator><operator pos:start="51:18" pos:end="51:18">(</operator><name pos:start="51:19" pos:end="51:32">boundary_count</name> <operator pos:start="51:34" pos:end="51:34">+</operator> <name pos:start="51:36" pos:end="51:40">begin</name><operator pos:start="51:41" pos:end="51:41">)</operator> <operator pos:start="51:43" pos:end="51:43">&lt;</operator> <name pos:start="51:45" pos:end="51:54">block_size</name><operator pos:start="51:55" pos:end="51:55">)</operator> <operator pos:start="51:57" pos:end="51:58">&amp;&amp;</operator> <name pos:start="51:60" pos:end="51:71">page_aligned</name></expr>)</condition> <block pos:start="51:74" pos:end="57:14">{<block_content pos:start="53:17" pos:end="55:35">

                <expr_stmt pos:start="53:17" pos:end="53:55"><expr pos:start="53:17" pos:end="53:54"><name pos:start="53:17" pos:end="53:29"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:29">data_count</name></name> <operator pos:start="53:31" pos:end="53:31">=</operator> <name pos:start="53:33" pos:end="53:46">boundary_count</name> <operator pos:start="53:48" pos:end="53:48">+</operator> <name pos:start="53:50" pos:end="53:54">begin</name></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:35"><expr pos:start="55:17" pos:end="55:34"><name pos:start="55:17" pos:end="55:30">boundary_count</name> <operator pos:start="55:32" pos:end="55:32">=</operator> <literal type="number" pos:start="55:34" pos:end="55:34">0</literal></expr>;</expr_stmt>

             </block_content>}</block></if> <else pos:start="57:16" pos:end="69:13">else <block pos:start="57:21" pos:end="69:13">{<block_content pos:start="59:17" pos:end="67:17">

                <expr_stmt pos:start="59:17" pos:end="59:43"><expr pos:start="59:17" pos:end="59:42"><name pos:start="59:17" pos:end="59:29"><name pos:start="59:17" pos:end="59:17">s</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:29">data_count</name></name> <operator pos:start="59:31" pos:end="59:31">=</operator> <name pos:start="59:33" pos:end="59:42">block_size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:53"><expr pos:start="61:17" pos:end="61:52"><name pos:start="61:17" pos:end="61:30">boundary_count</name> <operator pos:start="61:32" pos:end="61:33">-=</operator> <name pos:start="61:35" pos:end="61:44">block_size</name> <operator pos:start="61:46" pos:end="61:46">-</operator> <name pos:start="61:48" pos:end="61:52">begin</name></expr>;</expr_stmt>

                <if_stmt pos:start="63:17" pos:end="67:17"><if pos:start="63:17" pos:end="67:17">if <condition pos:start="63:20" pos:end="63:53">(<expr pos:start="63:21" pos:end="63:52"><name pos:start="63:21" pos:end="63:29"><name pos:start="63:21" pos:end="63:21">s</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:29">trnmod</name></name> <operator pos:start="63:31" pos:end="63:31">&amp;</operator> <name pos:start="63:33" pos:end="63:52">SDHC_TRNS_BLK_CNT_EN</name></expr>)</condition> <block pos:start="63:55" pos:end="67:17">{<block_content pos:start="65:21" pos:end="65:32">

                    <expr_stmt pos:start="65:21" pos:end="65:32"><expr pos:start="65:21" pos:end="65:31"><name pos:start="65:21" pos:end="65:29"><name pos:start="65:21" pos:end="65:21">s</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:29">blkcnt</name></name><operator pos:start="65:30" pos:end="65:31">--</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="71:13" pos:end="73:76"><expr pos:start="71:13" pos:end="73:75"><call pos:start="71:13" pos:end="73:75"><name pos:start="71:13" pos:end="71:28">dma_memory_write</name><argument_list pos:start="71:29" pos:end="73:75">(<argument pos:start="71:30" pos:end="71:50"><expr pos:start="71:30" pos:end="71:50"><operator pos:start="71:30" pos:end="71:30">&amp;</operator><name pos:start="71:31" pos:end="71:50">address_space_memory</name></expr></argument>, <argument pos:start="71:53" pos:end="71:64"><expr pos:start="71:53" pos:end="71:64"><name pos:start="71:53" pos:end="71:64"><name pos:start="71:53" pos:end="71:53">s</name><operator pos:start="71:54" pos:end="71:55">-&gt;</operator><name pos:start="71:56" pos:end="71:64">sdmasysad</name></name></expr></argument>,

                             <argument pos:start="73:30" pos:end="73:51"><expr pos:start="73:30" pos:end="73:51"><operator pos:start="73:30" pos:end="73:30">&amp;</operator><name pos:start="73:31" pos:end="73:51"><name pos:start="73:31" pos:end="73:31">s</name><operator pos:start="73:32" pos:end="73:33">-&gt;</operator><name pos:start="73:34" pos:end="73:44">fifo_buffer</name><index pos:start="73:45" pos:end="73:51">[<expr pos:start="73:46" pos:end="73:50"><name pos:start="73:46" pos:end="73:50">begin</name></expr>]</index></name></expr></argument>, <argument pos:start="73:54" pos:end="73:74"><expr pos:start="73:54" pos:end="73:74"><name pos:start="73:54" pos:end="73:66"><name pos:start="73:54" pos:end="73:54">s</name><operator pos:start="73:55" pos:end="73:56">-&gt;</operator><name pos:start="73:57" pos:end="73:66">data_count</name></name> <operator pos:start="73:68" pos:end="73:68">-</operator> <name pos:start="73:70" pos:end="73:74">begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:50"><expr pos:start="75:13" pos:end="75:49"><name pos:start="75:13" pos:end="75:24"><name pos:start="75:13" pos:end="75:13">s</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:24">sdmasysad</name></name> <operator pos:start="75:26" pos:end="75:27">+=</operator> <name pos:start="75:29" pos:end="75:41"><name pos:start="75:29" pos:end="75:29">s</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:41">data_count</name></name> <operator pos:start="75:43" pos:end="75:43">-</operator> <name pos:start="75:45" pos:end="75:49">begin</name></expr>;</expr_stmt>

            <if_stmt pos:start="77:13" pos:end="81:13"><if pos:start="77:13" pos:end="81:13">if <condition pos:start="77:16" pos:end="77:44">(<expr pos:start="77:17" pos:end="77:43"><name pos:start="77:17" pos:end="77:29"><name pos:start="77:17" pos:end="77:17">s</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:29">data_count</name></name> <operator pos:start="77:31" pos:end="77:32">==</operator> <name pos:start="77:34" pos:end="77:43">block_size</name></expr>)</condition> <block pos:start="77:46" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:34">

                <expr_stmt pos:start="79:17" pos:end="79:34"><expr pos:start="79:17" pos:end="79:33"><name pos:start="79:17" pos:end="79:29"><name pos:start="79:17" pos:end="79:17">s</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:29">data_count</name></name> <operator pos:start="79:31" pos:end="79:31">=</operator> <literal type="number" pos:start="79:33" pos:end="79:33">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="83:13" pos:end="87:13"><if pos:start="83:13" pos:end="87:13">if <condition pos:start="83:16" pos:end="83:52">(<expr pos:start="83:17" pos:end="83:51"><name pos:start="83:17" pos:end="83:28">page_aligned</name> <operator pos:start="83:30" pos:end="83:31">&amp;&amp;</operator> <name pos:start="83:33" pos:end="83:46">boundary_count</name> <operator pos:start="83:48" pos:end="83:49">==</operator> <literal type="number" pos:start="83:51" pos:end="83:51">0</literal></expr>)</condition> <block pos:start="83:54" pos:end="87:13">{<block_content pos:start="85:17" pos:end="85:22">

                <break pos:start="85:17" pos:end="85:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="147:5">else <block pos:start="91:12" pos:end="147:5">{<block_content pos:start="93:9" pos:end="145:9">

        <expr_stmt pos:start="93:9" pos:end="95:37"><expr pos:start="93:9" pos:end="95:36"><name pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:17">prnsts</name></name> <operator pos:start="93:19" pos:end="93:20">|=</operator> <name pos:start="93:22" pos:end="93:37">SDHC_DOING_WRITE</name> <operator pos:start="93:39" pos:end="93:39">|</operator> <name pos:start="93:41" pos:end="93:57">SDHC_DATA_INHIBIT</name> <operator pos:start="93:59" pos:end="93:59">|</operator>

                <name pos:start="95:17" pos:end="95:36">SDHC_DAT_LINE_ACTIVE</name></expr>;</expr_stmt>

        <while pos:start="97:9" pos:end="145:9">while <condition pos:start="97:15" pos:end="97:25">(<expr pos:start="97:16" pos:end="97:24"><name pos:start="97:16" pos:end="97:24"><name pos:start="97:16" pos:end="97:16">s</name><operator pos:start="97:17" pos:end="97:18">-&gt;</operator><name pos:start="97:19" pos:end="97:24">blkcnt</name></name></expr>)</condition> <block pos:start="97:27" pos:end="145:9">{<block_content pos:start="99:13" pos:end="143:13">

            <expr_stmt pos:start="99:13" pos:end="99:34"><expr pos:start="99:13" pos:end="99:33"><name pos:start="99:13" pos:end="99:17">begin</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <name pos:start="99:21" pos:end="99:33"><name pos:start="99:21" pos:end="99:21">s</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:33">data_count</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="101:13" pos:end="113:13"><if pos:start="101:13" pos:end="107:14">if <condition pos:start="101:16" pos:end="101:72">(<expr pos:start="101:17" pos:end="101:71"><operator pos:start="101:17" pos:end="101:17">(</operator><operator pos:start="101:18" pos:end="101:18">(</operator><name pos:start="101:19" pos:end="101:32">boundary_count</name> <operator pos:start="101:34" pos:end="101:34">+</operator> <name pos:start="101:36" pos:end="101:40">begin</name><operator pos:start="101:41" pos:end="101:41">)</operator> <operator pos:start="101:43" pos:end="101:43">&lt;</operator> <name pos:start="101:45" pos:end="101:54">block_size</name><operator pos:start="101:55" pos:end="101:55">)</operator> <operator pos:start="101:57" pos:end="101:58">&amp;&amp;</operator> <name pos:start="101:60" pos:end="101:71">page_aligned</name></expr>)</condition> <block pos:start="101:74" pos:end="107:14">{<block_content pos:start="103:17" pos:end="105:35">

                <expr_stmt pos:start="103:17" pos:end="103:55"><expr pos:start="103:17" pos:end="103:54"><name pos:start="103:17" pos:end="103:29"><name pos:start="103:17" pos:end="103:17">s</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:29">data_count</name></name> <operator pos:start="103:31" pos:end="103:31">=</operator> <name pos:start="103:33" pos:end="103:46">boundary_count</name> <operator pos:start="103:48" pos:end="103:48">+</operator> <name pos:start="103:50" pos:end="103:54">begin</name></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:35"><expr pos:start="105:17" pos:end="105:34"><name pos:start="105:17" pos:end="105:30">boundary_count</name> <operator pos:start="105:32" pos:end="105:32">=</operator> <literal type="number" pos:start="105:34" pos:end="105:34">0</literal></expr>;</expr_stmt>

             </block_content>}</block></if> <else pos:start="107:16" pos:end="113:13">else <block pos:start="107:21" pos:end="113:13">{<block_content pos:start="109:17" pos:end="111:53">

                <expr_stmt pos:start="109:17" pos:end="109:43"><expr pos:start="109:17" pos:end="109:42"><name pos:start="109:17" pos:end="109:29"><name pos:start="109:17" pos:end="109:17">s</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:29">data_count</name></name> <operator pos:start="109:31" pos:end="109:31">=</operator> <name pos:start="109:33" pos:end="109:42">block_size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:53"><expr pos:start="111:17" pos:end="111:52"><name pos:start="111:17" pos:end="111:30">boundary_count</name> <operator pos:start="111:32" pos:end="111:33">-=</operator> <name pos:start="111:35" pos:end="111:44">block_size</name> <operator pos:start="111:46" pos:end="111:46">-</operator> <name pos:start="111:48" pos:end="111:52">begin</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="115:13" pos:end="117:67"><expr pos:start="115:13" pos:end="117:66"><call pos:start="115:13" pos:end="117:66"><name pos:start="115:13" pos:end="115:27">dma_memory_read</name><argument_list pos:start="115:28" pos:end="117:66">(<argument pos:start="115:29" pos:end="115:49"><expr pos:start="115:29" pos:end="115:49"><operator pos:start="115:29" pos:end="115:29">&amp;</operator><name pos:start="115:30" pos:end="115:49">address_space_memory</name></expr></argument>, <argument pos:start="115:52" pos:end="115:63"><expr pos:start="115:52" pos:end="115:63"><name pos:start="115:52" pos:end="115:63"><name pos:start="115:52" pos:end="115:52">s</name><operator pos:start="115:53" pos:end="115:54">-&gt;</operator><name pos:start="115:55" pos:end="115:63">sdmasysad</name></name></expr></argument>,

                            <argument pos:start="117:29" pos:end="117:50"><expr pos:start="117:29" pos:end="117:50"><operator pos:start="117:29" pos:end="117:29">&amp;</operator><name pos:start="117:30" pos:end="117:50"><name pos:start="117:30" pos:end="117:30">s</name><operator pos:start="117:31" pos:end="117:32">-&gt;</operator><name pos:start="117:33" pos:end="117:43">fifo_buffer</name><index pos:start="117:44" pos:end="117:50">[<expr pos:start="117:45" pos:end="117:49"><name pos:start="117:45" pos:end="117:49">begin</name></expr>]</index></name></expr></argument>, <argument pos:start="117:53" pos:end="117:65"><expr pos:start="117:53" pos:end="117:65"><name pos:start="117:53" pos:end="117:65"><name pos:start="117:53" pos:end="117:53">s</name><operator pos:start="117:54" pos:end="117:55">-&gt;</operator><name pos:start="117:56" pos:end="117:65">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:50"><expr pos:start="119:13" pos:end="119:49"><name pos:start="119:13" pos:end="119:24"><name pos:start="119:13" pos:end="119:13">s</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:24">sdmasysad</name></name> <operator pos:start="119:26" pos:end="119:27">+=</operator> <name pos:start="119:29" pos:end="119:41"><name pos:start="119:29" pos:end="119:29">s</name><operator pos:start="119:30" pos:end="119:31">-&gt;</operator><name pos:start="119:32" pos:end="119:41">data_count</name></name> <operator pos:start="119:43" pos:end="119:43">-</operator> <name pos:start="119:45" pos:end="119:49">begin</name></expr>;</expr_stmt>

            <if_stmt pos:start="121:13" pos:end="137:13"><if pos:start="121:13" pos:end="137:13">if <condition pos:start="121:16" pos:end="121:44">(<expr pos:start="121:17" pos:end="121:43"><name pos:start="121:17" pos:end="121:29"><name pos:start="121:17" pos:end="121:17">s</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:29">data_count</name></name> <operator pos:start="121:31" pos:end="121:32">==</operator> <name pos:start="121:34" pos:end="121:43">block_size</name></expr>)</condition> <block pos:start="121:46" pos:end="137:13">{<block_content pos:start="123:17" pos:end="135:17">

                <for pos:start="123:17" pos:end="127:17">for <control pos:start="123:21" pos:end="123:48">(<init pos:start="123:22" pos:end="123:27"><expr pos:start="123:22" pos:end="123:26"><name pos:start="123:22" pos:end="123:22">n</name> <operator pos:start="123:24" pos:end="123:24">=</operator> <literal type="number" pos:start="123:26" pos:end="123:26">0</literal></expr>;</init> <condition pos:start="123:29" pos:end="123:43"><expr pos:start="123:29" pos:end="123:42"><name pos:start="123:29" pos:end="123:29">n</name> <operator pos:start="123:31" pos:end="123:31">&lt;</operator> <name pos:start="123:33" pos:end="123:42">block_size</name></expr>;</condition> <incr pos:start="123:45" pos:end="123:47"><expr pos:start="123:45" pos:end="123:47"><name pos:start="123:45" pos:end="123:45">n</name><operator pos:start="123:46" pos:end="123:47">++</operator></expr></incr>)</control> <block pos:start="123:50" pos:end="127:17">{<block_content pos:start="125:21" pos:end="125:67">

                    <expr_stmt pos:start="125:21" pos:end="125:67"><expr pos:start="125:21" pos:end="125:66"><call pos:start="125:21" pos:end="125:66"><name pos:start="125:21" pos:end="125:36">sdbus_write_data</name><argument_list pos:start="125:37" pos:end="125:66">(<argument pos:start="125:38" pos:end="125:46"><expr pos:start="125:38" pos:end="125:46"><operator pos:start="125:38" pos:end="125:38">&amp;</operator><name pos:start="125:39" pos:end="125:46"><name pos:start="125:39" pos:end="125:39">s</name><operator pos:start="125:40" pos:end="125:41">-&gt;</operator><name pos:start="125:42" pos:end="125:46">sdbus</name></name></expr></argument>, <argument pos:start="125:49" pos:end="125:65"><expr pos:start="125:49" pos:end="125:65"><name pos:start="125:49" pos:end="125:65"><name pos:start="125:49" pos:end="125:49">s</name><operator pos:start="125:50" pos:end="125:51">-&gt;</operator><name pos:start="125:52" pos:end="125:62">fifo_buffer</name><index pos:start="125:63" pos:end="125:65">[<expr pos:start="125:64" pos:end="125:64"><name pos:start="125:64" pos:end="125:64">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="129:17" pos:end="129:34"><expr pos:start="129:17" pos:end="129:33"><name pos:start="129:17" pos:end="129:29"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:29">data_count</name></name> <operator pos:start="129:31" pos:end="129:31">=</operator> <literal type="number" pos:start="129:33" pos:end="129:33">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="131:17" pos:end="135:17"><if pos:start="131:17" pos:end="135:17">if <condition pos:start="131:20" pos:end="131:53">(<expr pos:start="131:21" pos:end="131:52"><name pos:start="131:21" pos:end="131:29"><name pos:start="131:21" pos:end="131:21">s</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:29">trnmod</name></name> <operator pos:start="131:31" pos:end="131:31">&amp;</operator> <name pos:start="131:33" pos:end="131:52">SDHC_TRNS_BLK_CNT_EN</name></expr>)</condition> <block pos:start="131:55" pos:end="135:17">{<block_content pos:start="133:21" pos:end="133:32">

                    <expr_stmt pos:start="133:21" pos:end="133:32"><expr pos:start="133:21" pos:end="133:31"><name pos:start="133:21" pos:end="133:29"><name pos:start="133:21" pos:end="133:21">s</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:29">blkcnt</name></name><operator pos:start="133:30" pos:end="133:31">--</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="139:13" pos:end="143:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:52">(<expr pos:start="139:17" pos:end="139:51"><name pos:start="139:17" pos:end="139:28">page_aligned</name> <operator pos:start="139:30" pos:end="139:31">&amp;&amp;</operator> <name pos:start="139:33" pos:end="139:46">boundary_count</name> <operator pos:start="139:48" pos:end="139:49">==</operator> <literal type="number" pos:start="139:51" pos:end="139:51">0</literal></expr>)</condition> <block pos:start="139:54" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:22">

                <break pos:start="141:17" pos:end="141:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="151:5" pos:end="165:5"><if pos:start="151:5" pos:end="155:5">if <condition pos:start="151:8" pos:end="151:23">(<expr pos:start="151:9" pos:end="151:22"><name pos:start="151:9" pos:end="151:17"><name pos:start="151:9" pos:end="151:9">s</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:17">blkcnt</name></name> <operator pos:start="151:19" pos:end="151:20">==</operator> <literal type="number" pos:start="151:22" pos:end="151:22">0</literal></expr>)</condition> <block pos:start="151:25" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:30">

        <expr_stmt pos:start="153:9" pos:end="153:30"><expr pos:start="153:9" pos:end="153:29"><call pos:start="153:9" pos:end="153:29"><name pos:start="153:9" pos:end="153:26">sdhci_end_transfer</name><argument_list pos:start="153:27" pos:end="153:29">(<argument pos:start="153:28" pos:end="153:28"><expr pos:start="153:28" pos:end="153:28"><name pos:start="153:28" pos:end="153:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="155:7" pos:end="165:5">else <block pos:start="155:12" pos:end="165:5">{<block_content pos:start="157:9" pos:end="163:28">

        <if_stmt pos:start="157:9" pos:end="161:9"><if pos:start="157:9" pos:end="161:9">if <condition pos:start="157:12" pos:end="157:44">(<expr pos:start="157:13" pos:end="157:43"><name pos:start="157:13" pos:end="157:26"><name pos:start="157:13" pos:end="157:13">s</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:26">norintstsen</name></name> <operator pos:start="157:28" pos:end="157:28">&amp;</operator> <name pos:start="157:30" pos:end="157:43">SDHC_NISEN_DMA</name></expr>)</condition> <block pos:start="157:46" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:41">

            <expr_stmt pos:start="159:13" pos:end="159:41"><expr pos:start="159:13" pos:end="159:40"><name pos:start="159:13" pos:end="159:24"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:24">norintsts</name></name> <operator pos:start="159:26" pos:end="159:27">|=</operator> <name pos:start="159:29" pos:end="159:40">SDHC_NIS_DMA</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:28"><expr pos:start="163:9" pos:end="163:27"><call pos:start="163:9" pos:end="163:27"><name pos:start="163:9" pos:end="163:24">sdhci_update_irq</name><argument_list pos:start="163:25" pos:end="163:27">(<argument pos:start="163:26" pos:end="163:26"><expr pos:start="163:26" pos:end="163:26"><name pos:start="163:26" pos:end="163:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
