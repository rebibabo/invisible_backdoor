<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9946.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">tpm_passthrough_test_tpmdev</name><parameter_list pos:start="1:39" pos:end="1:46">(<parameter pos:start="1:40" pos:end="1:45"><decl pos:start="1:40" pos:end="1:45"><type pos:start="1:40" pos:end="1:42"><name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:45">fd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:13">

    <decl_stmt pos:start="5:5" pos:end="13:6"><decl pos:start="5:5" pos:end="13:5"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">tpm_req_hdr</name></name></type> <name pos:start="5:24" pos:end="5:26">req</name> <init pos:start="5:28" pos:end="13:5">= <expr pos:start="5:30" pos:end="13:5"><block pos:start="5:30" pos:end="13:5">{

        <expr pos:start="7:9" pos:end="7:47"><operator pos:start="7:9" pos:end="7:9">.</operator><name pos:start="7:10" pos:end="7:12">tag</name> <operator pos:start="7:14" pos:end="7:14">=</operator> <call pos:start="7:16" pos:end="7:47"><name pos:start="7:16" pos:end="7:26">cpu_to_be16</name><argument_list pos:start="7:27" pos:end="7:47">(<argument pos:start="7:28" pos:end="7:46"><expr pos:start="7:28" pos:end="7:46"><name pos:start="7:28" pos:end="7:46">TPM_TAG_RQU_COMMAND</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="9:9" pos:end="9:39"><operator pos:start="9:9" pos:end="9:9">.</operator><name pos:start="9:10" pos:end="9:12">len</name> <operator pos:start="9:14" pos:end="9:14">=</operator> <call pos:start="9:16" pos:end="9:39"><name pos:start="9:16" pos:end="9:26">cpu_to_be32</name><argument_list pos:start="9:27" pos:end="9:39">(<argument pos:start="9:28" pos:end="9:38"><expr pos:start="9:28" pos:end="9:38"><sizeof pos:start="9:28" pos:end="9:38">sizeof<argument_list pos:start="9:34" pos:end="9:38">(<argument pos:start="9:35" pos:end="9:37"><expr pos:start="9:35" pos:end="9:37"><name pos:start="9:35" pos:end="9:37">req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="11:9" pos:end="11:48"><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:16">ordinal</name> <operator pos:start="11:18" pos:end="11:18">=</operator> <call pos:start="11:20" pos:end="11:48"><name pos:start="11:20" pos:end="11:30">cpu_to_be32</name><argument_list pos:start="11:31" pos:end="11:48">(<argument pos:start="11:32" pos:end="11:47"><expr pos:start="11:32" pos:end="11:47"><name pos:start="11:32" pos:end="11:47">TPM_ORD_GetTicks</name></expr></argument>)</argument_list></call></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:23">tpm_resp_hdr</name></name> <modifier pos:start="15:25" pos:end="15:25">*</modifier></type><name pos:start="15:26" pos:end="15:29">resp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">fd_set</name></type> <name pos:start="17:12" pos:end="17:18">readfds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="27:6"><decl pos:start="21:5" pos:end="27:5"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:18">timeval</name></name></type> <name pos:start="21:20" pos:end="21:21">tv</name> <init pos:start="21:23" pos:end="27:5">= <expr pos:start="21:25" pos:end="27:5"><block pos:start="21:25" pos:end="27:5">{

        <expr pos:start="23:9" pos:end="23:19"><operator pos:start="23:9" pos:end="23:9">.</operator><name pos:start="23:10" pos:end="23:15">tv_sec</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <literal type="number" pos:start="23:19" pos:end="23:19">1</literal></expr>,

        <expr pos:start="25:9" pos:end="25:20"><operator pos:start="25:9" pos:end="25:9">.</operator><name pos:start="25:10" pos:end="25:16">tv_usec</name> <operator pos:start="25:18" pos:end="25:18">=</operator> <literal type="number" pos:start="25:20" pos:end="25:20">0</literal></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:12">unsigned</name> <name pos:start="29:14" pos:end="29:17">char</name></type> <name pos:start="29:19" pos:end="29:27"><name pos:start="29:19" pos:end="29:21">buf</name><index pos:start="29:22" pos:end="29:27">[<expr pos:start="29:23" pos:end="29:26"><literal type="number" pos:start="29:23" pos:end="29:26">1024</literal></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:37"><expr pos:start="33:5" pos:end="33:36"><name pos:start="33:5" pos:end="33:5">n</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <call pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:13">write</name><argument_list pos:start="33:14" pos:end="33:36">(<argument pos:start="33:15" pos:end="33:16"><expr pos:start="33:15" pos:end="33:16"><name pos:start="33:15" pos:end="33:16">fd</name></expr></argument>, <argument pos:start="33:19" pos:end="33:22"><expr pos:start="33:19" pos:end="33:22"><operator pos:start="33:19" pos:end="33:19">&amp;</operator><name pos:start="33:20" pos:end="33:22">req</name></expr></argument>, <argument pos:start="33:25" pos:end="33:35"><expr pos:start="33:25" pos:end="33:35"><sizeof pos:start="33:25" pos:end="33:35">sizeof<argument_list pos:start="33:31" pos:end="33:35">(<argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><name pos:start="33:32" pos:end="33:34">req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:14">(<expr pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:9">n</name> <operator pos:start="35:11" pos:end="35:11">&lt;</operator> <literal type="number" pos:start="35:13" pos:end="35:13">0</literal></expr>)</condition> <block pos:start="35:16" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:21">

        <return pos:start="37:9" pos:end="37:21">return <expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:25">(<expr pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:9">n</name> <operator pos:start="41:11" pos:end="41:12">!=</operator> <sizeof pos:start="41:14" pos:end="41:24">sizeof<argument_list pos:start="41:20" pos:end="41:24">(<argument pos:start="41:21" pos:end="41:23"><expr pos:start="41:21" pos:end="41:23"><name pos:start="41:21" pos:end="41:23">req</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="41:27" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:22">

        <return pos:start="43:9" pos:end="43:22">return <expr pos:start="43:16" pos:end="43:21"><name pos:start="43:16" pos:end="43:21">EFAULT</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:22"><expr pos:start="49:5" pos:end="49:21"><call pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:11">FD_ZERO</name><argument_list pos:start="49:12" pos:end="49:21">(<argument pos:start="49:13" pos:end="49:20"><expr pos:start="49:13" pos:end="49:20"><operator pos:start="49:13" pos:end="49:13">&amp;</operator><name pos:start="49:14" pos:end="49:20">readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:25"><expr pos:start="51:5" pos:end="51:24"><call pos:start="51:5" pos:end="51:24"><name pos:start="51:5" pos:end="51:10">FD_SET</name><argument_list pos:start="51:11" pos:end="51:24">(<argument pos:start="51:12" pos:end="51:13"><expr pos:start="51:12" pos:end="51:13"><name pos:start="51:12" pos:end="51:13">fd</name></expr></argument>, <argument pos:start="51:16" pos:end="51:23"><expr pos:start="51:16" pos:end="51:23"><operator pos:start="51:16" pos:end="51:16">&amp;</operator><name pos:start="51:17" pos:end="51:23">readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:27">/* wait for a second */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:50"><expr pos:start="57:5" pos:end="57:49"><name pos:start="57:5" pos:end="57:5">n</name> <operator pos:start="57:7" pos:end="57:7">=</operator> <call pos:start="57:9" pos:end="57:49"><name pos:start="57:9" pos:end="57:14">select</name><argument_list pos:start="57:15" pos:end="57:49">(<argument pos:start="57:16" pos:end="57:21"><expr pos:start="57:16" pos:end="57:21"><name pos:start="57:16" pos:end="57:17">fd</name> <operator pos:start="57:19" pos:end="57:19">+</operator> <literal type="number" pos:start="57:21" pos:end="57:21">1</literal></expr></argument>, <argument pos:start="57:24" pos:end="57:31"><expr pos:start="57:24" pos:end="57:31"><operator pos:start="57:24" pos:end="57:24">&amp;</operator><name pos:start="57:25" pos:end="57:31">readfds</name></expr></argument>, <argument pos:start="57:34" pos:end="57:37"><expr pos:start="57:34" pos:end="57:37"><name pos:start="57:34" pos:end="57:37">NULL</name></expr></argument>, <argument pos:start="57:40" pos:end="57:43"><expr pos:start="57:40" pos:end="57:43"><name pos:start="57:40" pos:end="57:43">NULL</name></expr></argument>, <argument pos:start="57:46" pos:end="57:48"><expr pos:start="57:46" pos:end="57:48"><operator pos:start="57:46" pos:end="57:46">&amp;</operator><name pos:start="57:47" pos:end="57:48">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:15">(<expr pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:9">n</name> <operator pos:start="59:11" pos:end="59:12">!=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">1</literal></expr>)</condition> <block pos:start="59:17" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:21">

        <return pos:start="61:9" pos:end="61:21">return <expr pos:start="61:16" pos:end="61:20"><name pos:start="61:16" pos:end="61:20">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:36"><expr pos:start="67:5" pos:end="67:35"><name pos:start="67:5" pos:end="67:5">n</name> <operator pos:start="67:7" pos:end="67:7">=</operator> <call pos:start="67:9" pos:end="67:35"><name pos:start="67:9" pos:end="67:12">read</name><argument_list pos:start="67:13" pos:end="67:35">(<argument pos:start="67:14" pos:end="67:15"><expr pos:start="67:14" pos:end="67:15"><name pos:start="67:14" pos:end="67:15">fd</name></expr></argument>, <argument pos:start="67:18" pos:end="67:21"><expr pos:start="67:18" pos:end="67:21"><operator pos:start="67:18" pos:end="67:18">&amp;</operator><name pos:start="67:19" pos:end="67:21">buf</name></expr></argument>, <argument pos:start="67:24" pos:end="67:34"><expr pos:start="67:24" pos:end="67:34"><sizeof pos:start="67:24" pos:end="67:34">sizeof<argument_list pos:start="67:30" pos:end="67:34">(<argument pos:start="67:31" pos:end="67:33"><expr pos:start="67:31" pos:end="67:33"><name pos:start="67:31" pos:end="67:33">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:40">(<expr pos:start="69:9" pos:end="69:39"><name pos:start="69:9" pos:end="69:9">n</name> <operator pos:start="69:11" pos:end="69:11">&lt;</operator> <sizeof pos:start="69:13" pos:end="69:39">sizeof<argument_list pos:start="69:19" pos:end="69:39">(<argument pos:start="69:20" pos:end="69:38"><expr pos:start="69:20" pos:end="69:38">struct <name pos:start="69:27" pos:end="69:38">tpm_resp_hdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="69:42" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:22">

        <return pos:start="71:9" pos:end="71:22">return <expr pos:start="71:16" pos:end="71:21"><name pos:start="71:16" pos:end="71:21">EFAULT</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:38"><expr pos:start="77:5" pos:end="77:37"><name pos:start="77:5" pos:end="77:8">resp</name> <operator pos:start="77:10" pos:end="77:10">=</operator> <operator pos:start="77:12" pos:end="77:12">(</operator>struct <name pos:start="77:20" pos:end="77:31">tpm_resp_hdr</name> <operator pos:start="77:33" pos:end="77:33">*</operator><operator pos:start="77:34" pos:end="77:34">)</operator><name pos:start="77:35" pos:end="77:37">buf</name></expr>;</expr_stmt>

    <comment type="block" pos:start="79:5" pos:end="79:26">/* check the header */</comment>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="83:36">(<expr pos:start="81:9" pos:end="83:35"><call pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:19">be16_to_cpu</name><argument_list pos:start="81:20" pos:end="81:30">(<argument pos:start="81:21" pos:end="81:29"><expr pos:start="81:21" pos:end="81:29"><name pos:start="81:21" pos:end="81:29"><name pos:start="81:21" pos:end="81:24">resp</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:29">tag</name></name></expr></argument>)</argument_list></call> <operator pos:start="81:32" pos:end="81:33">!=</operator> <name pos:start="81:35" pos:end="81:53">TPM_TAG_RSP_COMMAND</name> <operator pos:start="81:55" pos:end="81:56">||</operator>

        <call pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:19">be32_to_cpu</name><argument_list pos:start="83:20" pos:end="83:30">(<argument pos:start="83:21" pos:end="83:29"><expr pos:start="83:21" pos:end="83:29"><name pos:start="83:21" pos:end="83:29"><name pos:start="83:21" pos:end="83:24">resp</name><operator pos:start="83:25" pos:end="83:26">-&gt;</operator><name pos:start="83:27" pos:end="83:29">len</name></name></expr></argument>)</argument_list></call> <operator pos:start="83:32" pos:end="83:33">!=</operator> <name pos:start="83:35" pos:end="83:35">n</name></expr>)</condition> <block pos:start="83:38" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:23">

        <return pos:start="85:9" pos:end="85:23">return <expr pos:start="85:16" pos:end="85:22"><name pos:start="85:16" pos:end="85:22">EBADMSG</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
