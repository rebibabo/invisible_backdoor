<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1067.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:37"><name pos:start="1:1" pos:end="1:16">aio_ctx_finalize</name><argument_list pos:start="1:17" pos:end="1:37">(<argument pos:start="1:18" pos:end="1:36">GSource     *source</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:37">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">AioContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">ctx</name> <init pos:start="5:21" pos:end="5:43">= <expr pos:start="5:23" pos:end="5:43"><operator pos:start="5:23" pos:end="5:23">(</operator><name pos:start="5:24" pos:end="5:33">AioContext</name> <operator pos:start="5:35" pos:end="5:35">*</operator><operator pos:start="5:36" pos:end="5:36">)</operator> <name pos:start="5:38" pos:end="5:43">source</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="14:0"><expr pos:start="9:5" pos:end="9:38"><call pos:start="9:5" pos:end="9:38"><name pos:start="9:5" pos:end="9:20">thread_pool_free</name><argument_list pos:start="9:21" pos:end="9:38">(<argument pos:start="9:22" pos:end="9:37"><expr pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:24">ctx</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:37">thread_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="13:1" pos:end="13:23">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

    <if_stmt pos:start="15:5" pos:end="26:0"><if pos:start="15:5" pos:end="26:0">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:11">ctx</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:22">linux_aio</name></name></expr>)</condition> <block pos:start="15:25" pos:end="26:0">{<block_content pos:start="17:9" pos:end="21:30">

        <expr_stmt pos:start="17:9" pos:end="17:53"><expr pos:start="17:9" pos:end="17:52"><call pos:start="17:9" pos:end="17:52"><name pos:start="17:9" pos:end="17:31">laio_detach_aio_context</name><argument_list pos:start="17:32" pos:end="17:52">(<argument pos:start="17:33" pos:end="17:46"><expr pos:start="17:33" pos:end="17:46"><name pos:start="17:33" pos:end="17:46"><name pos:start="17:33" pos:end="17:35">ctx</name><operator pos:start="17:36" pos:end="17:37">-&gt;</operator><name pos:start="17:38" pos:end="17:46">linux_aio</name></name></expr></argument>, <argument pos:start="17:49" pos:end="17:51"><expr pos:start="17:49" pos:end="17:51"><name pos:start="17:49" pos:end="17:51">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:37"><expr pos:start="19:9" pos:end="19:36"><call pos:start="19:9" pos:end="19:36"><name pos:start="19:9" pos:end="19:20">laio_cleanup</name><argument_list pos:start="19:21" pos:end="19:36">(<argument pos:start="19:22" pos:end="19:35"><expr pos:start="19:22" pos:end="19:35"><name pos:start="19:22" pos:end="19:35"><name pos:start="19:22" pos:end="19:24">ctx</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:35">linux_aio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:30"><expr pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:11">ctx</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:22">linux_aio</name></name> <operator pos:start="21:24" pos:end="21:24">=</operator> <name pos:start="21:26" pos:end="21:29">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="29:5" pos:end="29:39"><expr pos:start="29:5" pos:end="29:38"><call pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:21">qemu_lockcnt_lock</name><argument_list pos:start="29:22" pos:end="29:38">(<argument pos:start="29:23" pos:end="29:37"><expr pos:start="29:23" pos:end="29:37"><operator pos:start="29:23" pos:end="29:23">&amp;</operator><name pos:start="29:24" pos:end="29:37"><name pos:start="29:24" pos:end="29:26">ctx</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:37">list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:49"><expr pos:start="31:5" pos:end="31:48"><call pos:start="31:5" pos:end="31:48"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:48">(<argument pos:start="31:12" pos:end="31:47"><expr pos:start="31:12" pos:end="31:47"><operator pos:start="31:12" pos:end="31:12">!</operator><call pos:start="31:13" pos:end="31:47"><name pos:start="31:13" pos:end="31:30">qemu_lockcnt_count</name><argument_list pos:start="31:31" pos:end="31:47">(<argument pos:start="31:32" pos:end="31:46"><expr pos:start="31:32" pos:end="31:46"><operator pos:start="31:32" pos:end="31:32">&amp;</operator><name pos:start="31:33" pos:end="31:46"><name pos:start="31:33" pos:end="31:35">ctx</name><operator pos:start="31:36" pos:end="31:37">-&gt;</operator><name pos:start="31:38" pos:end="31:46">list_lock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="33:5" pos:end="49:5">while <condition pos:start="33:11" pos:end="33:25">(<expr pos:start="33:12" pos:end="33:24"><name pos:start="33:12" pos:end="33:24"><name pos:start="33:12" pos:end="33:14">ctx</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:24">first_bh</name></name></expr>)</condition> <block pos:start="33:27" pos:end="49:5">{<block_content pos:start="35:9" pos:end="47:29">

        <decl_stmt pos:start="35:9" pos:end="35:43"><decl pos:start="35:9" pos:end="35:42"><type pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:14">QEMUBH</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:20">next</name> <init pos:start="35:22" pos:end="35:42">= <expr pos:start="35:24" pos:end="35:42"><name pos:start="35:24" pos:end="35:42"><name pos:start="35:24" pos:end="35:26">ctx</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:36">first_bh</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:42">next</name></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="39:9" pos:end="39:78">/* qemu_bh_delete() must have been called on BHs in this AioContext */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:39"><expr pos:start="41:9" pos:end="41:38"><call pos:start="41:9" pos:end="41:38"><name pos:start="41:9" pos:end="41:14">assert</name><argument_list pos:start="41:15" pos:end="41:38">(<argument pos:start="41:16" pos:end="41:37"><expr pos:start="41:16" pos:end="41:37"><name pos:start="41:16" pos:end="41:37"><name pos:start="41:16" pos:end="41:18">ctx</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:28">first_bh</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:37">deleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:30"><expr pos:start="45:9" pos:end="45:29"><call pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:14">g_free</name><argument_list pos:start="45:15" pos:end="45:29">(<argument pos:start="45:16" pos:end="45:28"><expr pos:start="45:16" pos:end="45:28"><name pos:start="45:16" pos:end="45:28"><name pos:start="45:16" pos:end="45:18">ctx</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:28">first_bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:11">ctx</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:21">first_bh</name></name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:28">next</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="51:5" pos:end="51:41"><expr pos:start="51:5" pos:end="51:40"><call pos:start="51:5" pos:end="51:40"><name pos:start="51:5" pos:end="51:23">qemu_lockcnt_unlock</name><argument_list pos:start="51:24" pos:end="51:40">(<argument pos:start="51:25" pos:end="51:39"><expr pos:start="51:25" pos:end="51:39"><operator pos:start="51:25" pos:end="51:25">&amp;</operator><name pos:start="51:26" pos:end="51:39"><name pos:start="51:26" pos:end="51:28">ctx</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:39">list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:67"><expr pos:start="55:5" pos:end="55:66"><call pos:start="55:5" pos:end="55:66"><name pos:start="55:5" pos:end="55:26">aio_set_event_notifier</name><argument_list pos:start="55:27" pos:end="55:66">(<argument pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:30">ctx</name></expr></argument>, <argument pos:start="55:33" pos:end="55:46"><expr pos:start="55:33" pos:end="55:46"><operator pos:start="55:33" pos:end="55:33">&amp;</operator><name pos:start="55:34" pos:end="55:46"><name pos:start="55:34" pos:end="55:36">ctx</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:46">notifier</name></name></expr></argument>, <argument pos:start="55:49" pos:end="55:53"><expr pos:start="55:49" pos:end="55:53"><name pos:start="55:49" pos:end="55:53">false</name></expr></argument>, <argument pos:start="55:56" pos:end="55:59"><expr pos:start="55:56" pos:end="55:59"><name pos:start="55:56" pos:end="55:59">NULL</name></expr></argument>, <argument pos:start="55:62" pos:end="55:65"><expr pos:start="55:62" pos:end="55:65"><name pos:start="55:62" pos:end="55:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><call pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:26">event_notifier_cleanup</name><argument_list pos:start="57:27" pos:end="57:42">(<argument pos:start="57:28" pos:end="57:41"><expr pos:start="57:28" pos:end="57:41"><operator pos:start="57:28" pos:end="57:28">&amp;</operator><name pos:start="57:29" pos:end="57:41"><name pos:start="57:29" pos:end="57:31">ctx</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:41">notifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:39"><expr pos:start="59:5" pos:end="59:38"><call pos:start="59:5" pos:end="59:38"><name pos:start="59:5" pos:end="59:26">qemu_rec_mutex_destroy</name><argument_list pos:start="59:27" pos:end="59:38">(<argument pos:start="59:28" pos:end="59:37"><expr pos:start="59:28" pos:end="59:37"><operator pos:start="59:28" pos:end="59:28">&amp;</operator><name pos:start="59:29" pos:end="59:37"><name pos:start="59:29" pos:end="59:31">ctx</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:37">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:42"><expr pos:start="61:5" pos:end="61:41"><call pos:start="61:5" pos:end="61:41"><name pos:start="61:5" pos:end="61:24">qemu_lockcnt_destroy</name><argument_list pos:start="61:25" pos:end="61:41">(<argument pos:start="61:26" pos:end="61:40"><expr pos:start="61:26" pos:end="61:40"><operator pos:start="61:26" pos:end="61:26">&amp;</operator><name pos:start="61:27" pos:end="61:40"><name pos:start="61:27" pos:end="61:29">ctx</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:40">list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:37"><expr pos:start="63:5" pos:end="63:36"><call pos:start="63:5" pos:end="63:36"><name pos:start="63:5" pos:end="63:25">timerlistgroup_deinit</name><argument_list pos:start="63:26" pos:end="63:36">(<argument pos:start="63:27" pos:end="63:35"><expr pos:start="63:27" pos:end="63:35"><operator pos:start="63:27" pos:end="63:27">&amp;</operator><name pos:start="63:28" pos:end="63:35"><name pos:start="63:28" pos:end="63:30">ctx</name><operator pos:start="63:31" pos:end="63:32">-&gt;</operator><name pos:start="63:33" pos:end="63:35">tlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
