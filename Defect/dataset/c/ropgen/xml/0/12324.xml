<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12324.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">mirror_start_job</name><parameter_list pos:start="1:29" pos:end="23:71">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:39">char</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">job_id</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:65">BlockDriverState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">bs</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:53"><decl pos:start="3:30" pos:end="3:53"><type pos:start="3:30" pos:end="3:53"><name pos:start="3:30" pos:end="3:45">BlockDriverState</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:53">target</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:75"><decl pos:start="3:56" pos:end="3:75"><type pos:start="3:56" pos:end="3:75"><specifier pos:start="3:56" pos:end="3:60">const</specifier> <name pos:start="3:62" pos:end="3:65">char</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:75">replaces</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:42"><decl pos:start="5:30" pos:end="5:42"><type pos:start="5:30" pos:end="5:42"><name pos:start="5:30" pos:end="5:36">int64_t</name></type> <name pos:start="5:38" pos:end="5:42">speed</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:64"><decl pos:start="5:45" pos:end="5:64"><type pos:start="5:45" pos:end="5:64"><name pos:start="5:45" pos:end="5:52">uint32_t</name></type> <name pos:start="5:54" pos:end="5:64">granularity</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:45"><decl pos:start="7:30" pos:end="7:45"><type pos:start="7:30" pos:end="7:45"><name pos:start="7:30" pos:end="7:36">int64_t</name></type> <name pos:start="7:38" pos:end="7:45">buf_size</name></decl></parameter>,

                             <parameter pos:start="9:30" pos:end="9:64"><decl pos:start="9:30" pos:end="9:64"><type pos:start="9:30" pos:end="9:64"><name pos:start="9:30" pos:end="9:51">BlockMirrorBackingMode</name></type> <name pos:start="9:53" pos:end="9:64">backing_mode</name></decl></parameter>,

                             <parameter pos:start="11:30" pos:end="11:60"><decl pos:start="11:30" pos:end="11:60"><type pos:start="11:30" pos:end="11:60"><name pos:start="11:30" pos:end="11:44">BlockdevOnError</name></type> <name pos:start="11:46" pos:end="11:60">on_source_error</name></decl></parameter>,

                             <parameter pos:start="13:30" pos:end="13:60"><decl pos:start="13:30" pos:end="13:60"><type pos:start="13:30" pos:end="13:60"><name pos:start="13:30" pos:end="13:44">BlockdevOnError</name></type> <name pos:start="13:46" pos:end="13:60">on_target_error</name></decl></parameter>,

                             <parameter pos:start="15:30" pos:end="15:39"><decl pos:start="15:30" pos:end="15:39"><type pos:start="15:30" pos:end="15:39"><name pos:start="15:30" pos:end="15:33">bool</name></type> <name pos:start="15:35" pos:end="15:39">unmap</name></decl></parameter>,

                             <parameter pos:start="17:30" pos:end="17:52"><decl pos:start="17:30" pos:end="17:52"><type pos:start="17:30" pos:end="17:52"><name pos:start="17:30" pos:end="17:48">BlockCompletionFunc</name> <modifier pos:start="17:50" pos:end="17:50">*</modifier></type><name pos:start="17:51" pos:end="17:52">cb</name></decl></parameter>,

                             <parameter pos:start="19:30" pos:end="19:41"><decl pos:start="19:30" pos:end="19:41"><type pos:start="19:30" pos:end="19:41"><name pos:start="19:30" pos:end="19:33">void</name> <modifier pos:start="19:35" pos:end="19:35">*</modifier></type><name pos:start="19:36" pos:end="19:41">opaque</name></decl></parameter>, <parameter pos:start="19:44" pos:end="19:55"><decl pos:start="19:44" pos:end="19:55"><type pos:start="19:44" pos:end="19:55"><name pos:start="19:44" pos:end="19:48">Error</name> <modifier pos:start="19:50" pos:end="19:50">*</modifier><modifier pos:start="19:51" pos:end="19:51">*</modifier></type><name pos:start="19:52" pos:end="19:55">errp</name></decl></parameter>,

                             <parameter pos:start="21:30" pos:end="21:57"><decl pos:start="21:30" pos:end="21:57"><type pos:start="21:30" pos:end="21:57"><specifier pos:start="21:30" pos:end="21:34">const</specifier> <name pos:start="21:36" pos:end="21:49">BlockJobDriver</name> <modifier pos:start="21:51" pos:end="21:51">*</modifier></type><name pos:start="21:52" pos:end="21:57">driver</name></decl></parameter>,

                             <parameter pos:start="23:30" pos:end="23:46"><decl pos:start="23:30" pos:end="23:46"><type pos:start="23:30" pos:end="23:46"><name pos:start="23:30" pos:end="23:33">bool</name></type> <name pos:start="23:35" pos:end="23:46">is_none_mode</name></decl></parameter>, <parameter pos:start="23:49" pos:end="23:70"><decl pos:start="23:49" pos:end="23:70"><type pos:start="23:49" pos:end="23:70"><name pos:start="23:49" pos:end="23:64">BlockDriverState</name> <modifier pos:start="23:66" pos:end="23:66">*</modifier></type><name pos:start="23:67" pos:end="23:70">base</name></decl></parameter>)</parameter_list>

<block pos:start="25:1" pos:end="123:1">{<block_content pos:start="27:5" pos:end="121:39">

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:18">MirrorBlockJob</name> <modifier pos:start="27:20" pos:end="27:20">*</modifier></type><name pos:start="27:21" pos:end="27:21">s</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:25">(<expr pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:19">granularity</name> <operator pos:start="31:21" pos:end="31:22">==</operator> <literal type="number" pos:start="31:24" pos:end="31:24">0</literal></expr>)</condition> <block pos:start="31:27" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:66">

        <expr_stmt pos:start="33:9" pos:end="33:66"><expr pos:start="33:9" pos:end="33:65"><name pos:start="33:9" pos:end="33:19">granularity</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:65"><name pos:start="33:23" pos:end="33:57">bdrv_get_default_bitmap_granularity</name><argument_list pos:start="33:58" pos:end="33:65">(<argument pos:start="33:59" pos:end="33:64"><expr pos:start="33:59" pos:end="33:64"><name pos:start="33:59" pos:end="33:64">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:52"><expr pos:start="39:5" pos:end="39:51"><call pos:start="39:5" pos:end="39:51"><name pos:start="39:5" pos:end="39:10">assert</name> <argument_list pos:start="39:12" pos:end="39:51">(<argument pos:start="39:13" pos:end="39:50"><expr pos:start="39:13" pos:end="39:50"><operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:24">granularity</name> <operator pos:start="39:26" pos:end="39:26">&amp;</operator> <operator pos:start="39:28" pos:end="39:28">(</operator><name pos:start="39:29" pos:end="39:39">granularity</name> <operator pos:start="39:41" pos:end="39:41">-</operator> <literal type="number" pos:start="39:43" pos:end="39:43">1</literal><operator pos:start="39:44" pos:end="39:44">)</operator><operator pos:start="39:45" pos:end="39:45">)</operator> <operator pos:start="39:47" pos:end="39:48">==</operator> <literal type="number" pos:start="39:50" pos:end="39:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:21">(<expr pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:16">buf_size</name> <operator pos:start="43:18" pos:end="43:18">&lt;</operator> <literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>)</condition> <block pos:start="43:23" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:15">

        <expr_stmt pos:start="45:9" pos:end="45:57"><expr pos:start="45:9" pos:end="45:56"><call pos:start="45:9" pos:end="45:56"><name pos:start="45:9" pos:end="45:18">error_setg</name><argument_list pos:start="45:19" pos:end="45:56">(<argument pos:start="45:20" pos:end="45:23"><expr pos:start="45:20" pos:end="45:23"><name pos:start="45:20" pos:end="45:23">errp</name></expr></argument>, <argument pos:start="45:26" pos:end="45:55"><expr pos:start="45:26" pos:end="45:55"><literal type="string" pos:start="45:26" pos:end="45:55">"Invalid parameter 'buf-size'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:22">(<expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:16">buf_size</name> <operator pos:start="53:18" pos:end="53:19">==</operator> <literal type="number" pos:start="53:21" pos:end="53:21">0</literal></expr>)</condition> <block pos:start="53:24" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:43">

        <expr_stmt pos:start="55:9" pos:end="55:43"><expr pos:start="55:9" pos:end="55:42"><name pos:start="55:9" pos:end="55:16">buf_size</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:42">DEFAULT_MIRROR_BUF_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:70"><expr pos:start="61:5" pos:end="61:69"><name pos:start="61:5" pos:end="61:5">s</name> <operator pos:start="61:7" pos:end="61:7">=</operator> <call pos:start="61:9" pos:end="61:69"><name pos:start="61:9" pos:end="61:24">block_job_create</name><argument_list pos:start="61:25" pos:end="61:69">(<argument pos:start="61:26" pos:end="61:31"><expr pos:start="61:26" pos:end="61:31"><name pos:start="61:26" pos:end="61:31">job_id</name></expr></argument>, <argument pos:start="61:34" pos:end="61:39"><expr pos:start="61:34" pos:end="61:39"><name pos:start="61:34" pos:end="61:39">driver</name></expr></argument>, <argument pos:start="61:42" pos:end="61:43"><expr pos:start="61:42" pos:end="61:43"><name pos:start="61:42" pos:end="61:43">bs</name></expr></argument>, <argument pos:start="61:46" pos:end="61:50"><expr pos:start="61:46" pos:end="61:50"><name pos:start="61:46" pos:end="61:50">speed</name></expr></argument>, <argument pos:start="61:53" pos:end="61:54"><expr pos:start="61:53" pos:end="61:54"><name pos:start="61:53" pos:end="61:54">cb</name></expr></argument>, <argument pos:start="61:57" pos:end="61:62"><expr pos:start="61:57" pos:end="61:62"><name pos:start="61:57" pos:end="61:62">opaque</name></expr></argument>, <argument pos:start="61:65" pos:end="61:68"><expr pos:start="61:65" pos:end="61:68"><name pos:start="61:65" pos:end="61:68">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:11">(<expr pos:start="63:9" pos:end="63:10"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:10">s</name></expr>)</condition> <block pos:start="63:13" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:15">

        <return pos:start="65:9" pos:end="65:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:26"><expr pos:start="71:5" pos:end="71:25"><name pos:start="71:5" pos:end="71:13"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:13">target</name></name> <operator pos:start="71:15" pos:end="71:15">=</operator> <call pos:start="71:17" pos:end="71:25"><name pos:start="71:17" pos:end="71:23">blk_new</name><argument_list pos:start="71:24" pos:end="71:25">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:37"><expr pos:start="73:5" pos:end="73:36"><call pos:start="73:5" pos:end="73:36"><name pos:start="73:5" pos:end="73:17">blk_insert_bs</name><argument_list pos:start="73:18" pos:end="73:36">(<argument pos:start="73:19" pos:end="73:27"><expr pos:start="73:19" pos:end="73:27"><name pos:start="73:19" pos:end="73:27"><name pos:start="73:19" pos:end="73:19">s</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:27">target</name></name></expr></argument>, <argument pos:start="73:30" pos:end="73:35"><expr pos:start="73:30" pos:end="73:35"><name pos:start="73:30" pos:end="73:35">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:37"><expr pos:start="77:5" pos:end="77:36"><name pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:15">replaces</name></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <call pos:start="77:19" pos:end="77:36"><name pos:start="77:19" pos:end="77:26">g_strdup</name><argument_list pos:start="77:27" pos:end="77:36">(<argument pos:start="77:28" pos:end="77:35"><expr pos:start="77:28" pos:end="77:35"><name pos:start="77:28" pos:end="77:35">replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:41"><expr pos:start="79:5" pos:end="79:40"><name pos:start="79:5" pos:end="79:22"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:22">on_source_error</name></name> <operator pos:start="79:24" pos:end="79:24">=</operator> <name pos:start="79:26" pos:end="79:40">on_source_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:41"><expr pos:start="81:5" pos:end="81:40"><name pos:start="81:5" pos:end="81:22"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:22">on_target_error</name></name> <operator pos:start="81:24" pos:end="81:24">=</operator> <name pos:start="81:26" pos:end="81:40">on_target_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:35"><expr pos:start="83:5" pos:end="83:34"><name pos:start="83:5" pos:end="83:19"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:19">is_none_mode</name></name> <operator pos:start="83:21" pos:end="83:21">=</operator> <name pos:start="83:23" pos:end="83:34">is_none_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:35"><expr pos:start="85:5" pos:end="85:34"><name pos:start="85:5" pos:end="85:19"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:19">backing_mode</name></name> <operator pos:start="85:21" pos:end="85:21">=</operator> <name pos:start="85:23" pos:end="85:34">backing_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:19"><expr pos:start="87:5" pos:end="87:18"><name pos:start="87:5" pos:end="87:11"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:11">base</name></name> <operator pos:start="87:13" pos:end="87:13">=</operator> <name pos:start="87:15" pos:end="87:18">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:33"><expr pos:start="89:5" pos:end="89:32"><name pos:start="89:5" pos:end="89:18"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:18">granularity</name></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <name pos:start="89:22" pos:end="89:32">granularity</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:50"><expr pos:start="91:5" pos:end="91:49"><name pos:start="91:5" pos:end="91:15"><name pos:start="91:5" pos:end="91:5">s</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:15">buf_size</name></name> <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="91:49"><name pos:start="91:19" pos:end="91:26">ROUND_UP</name><argument_list pos:start="91:27" pos:end="91:49">(<argument pos:start="91:28" pos:end="91:35"><expr pos:start="91:28" pos:end="91:35"><name pos:start="91:28" pos:end="91:35">buf_size</name></expr></argument>, <argument pos:start="91:38" pos:end="91:48"><expr pos:start="91:38" pos:end="91:48"><name pos:start="91:38" pos:end="91:48">granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:21"><expr pos:start="93:5" pos:end="93:20"><name pos:start="93:5" pos:end="93:12"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:12">unmap</name></name> <operator pos:start="93:14" pos:end="93:14">=</operator> <name pos:start="93:16" pos:end="93:20">unmap</name></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:76"><expr pos:start="97:5" pos:end="97:75"><name pos:start="97:5" pos:end="97:19"><name pos:start="97:5" pos:end="97:5">s</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:19">dirty_bitmap</name></name> <operator pos:start="97:21" pos:end="97:21">=</operator> <call pos:start="97:23" pos:end="97:75"><name pos:start="97:23" pos:end="97:46">bdrv_create_dirty_bitmap</name><argument_list pos:start="97:47" pos:end="97:75">(<argument pos:start="97:48" pos:end="97:49"><expr pos:start="97:48" pos:end="97:49"><name pos:start="97:48" pos:end="97:49">bs</name></expr></argument>, <argument pos:start="97:52" pos:end="97:62"><expr pos:start="97:52" pos:end="97:62"><name pos:start="97:52" pos:end="97:62">granularity</name></expr></argument>, <argument pos:start="97:65" pos:end="97:68"><expr pos:start="97:65" pos:end="97:68"><name pos:start="97:65" pos:end="97:68">NULL</name></expr></argument>, <argument pos:start="97:71" pos:end="97:74"><expr pos:start="97:71" pos:end="97:74"><name pos:start="97:71" pos:end="97:74">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="109:5"><if pos:start="99:5" pos:end="109:5">if <condition pos:start="99:8" pos:end="99:25">(<expr pos:start="99:9" pos:end="99:24"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:24"><name pos:start="99:10" pos:end="99:10">s</name><operator pos:start="99:11" pos:end="99:12">-&gt;</operator><name pos:start="99:13" pos:end="99:24">dirty_bitmap</name></name></expr>)</condition> <block pos:start="99:27" pos:end="109:5">{<block_content pos:start="101:9" pos:end="107:15">

        <expr_stmt pos:start="101:9" pos:end="101:28"><expr pos:start="101:9" pos:end="101:27"><call pos:start="101:9" pos:end="101:27"><name pos:start="101:9" pos:end="101:14">g_free</name><argument_list pos:start="101:15" pos:end="101:27">(<argument pos:start="101:16" pos:end="101:26"><expr pos:start="101:16" pos:end="101:26"><name pos:start="101:16" pos:end="101:26"><name pos:start="101:16" pos:end="101:16">s</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:26">replaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:29"><expr pos:start="103:9" pos:end="103:28"><call pos:start="103:9" pos:end="103:28"><name pos:start="103:9" pos:end="103:17">blk_unref</name><argument_list pos:start="103:18" pos:end="103:28">(<argument pos:start="103:19" pos:end="103:27"><expr pos:start="103:19" pos:end="103:27"><name pos:start="103:19" pos:end="103:27"><name pos:start="103:19" pos:end="103:19">s</name><operator pos:start="103:20" pos:end="103:21">-&gt;</operator><name pos:start="103:22" pos:end="103:27">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:36"><expr pos:start="105:9" pos:end="105:35"><call pos:start="105:9" pos:end="105:35"><name pos:start="105:9" pos:end="105:23">block_job_unref</name><argument_list pos:start="105:24" pos:end="105:35">(<argument pos:start="105:25" pos:end="105:34"><expr pos:start="105:25" pos:end="105:34"><operator pos:start="105:25" pos:end="105:25">&amp;</operator><name pos:start="105:26" pos:end="105:34"><name pos:start="105:26" pos:end="105:26">s</name><operator pos:start="105:27" pos:end="105:28">-&gt;</operator><name pos:start="105:29" pos:end="105:34">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="107:9" pos:end="107:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:49"><expr pos:start="113:5" pos:end="113:48"><call pos:start="113:5" pos:end="113:48"><name pos:start="113:5" pos:end="113:21">bdrv_op_block_all</name><argument_list pos:start="113:22" pos:end="113:48">(<argument pos:start="113:23" pos:end="113:28"><expr pos:start="113:23" pos:end="113:28"><name pos:start="113:23" pos:end="113:28">target</name></expr></argument>, <argument pos:start="113:31" pos:end="113:47"><expr pos:start="113:31" pos:end="113:47"><name pos:start="113:31" pos:end="113:47"><name pos:start="113:31" pos:end="113:31">s</name><operator pos:start="113:32" pos:end="113:33">-&gt;</operator><name pos:start="113:34" pos:end="113:39">common</name><operator pos:start="113:40" pos:end="113:40">.</operator><name pos:start="113:41" pos:end="113:47">blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:56"><expr pos:start="117:5" pos:end="117:55"><name pos:start="117:5" pos:end="117:16"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:13">common</name><operator pos:start="117:14" pos:end="117:14">.</operator><name pos:start="117:15" pos:end="117:16">co</name></name> <operator pos:start="117:18" pos:end="117:18">=</operator> <call pos:start="117:20" pos:end="117:55"><name pos:start="117:20" pos:end="117:40">qemu_coroutine_create</name><argument_list pos:start="117:41" pos:end="117:55">(<argument pos:start="117:42" pos:end="117:51"><expr pos:start="117:42" pos:end="117:51"><name pos:start="117:42" pos:end="117:51">mirror_run</name></expr></argument>, <argument pos:start="117:54" pos:end="117:54"><expr pos:start="117:54" pos:end="117:54"><name pos:start="117:54" pos:end="117:54">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:52"><expr pos:start="119:5" pos:end="119:51"><call pos:start="119:5" pos:end="119:51"><name pos:start="119:5" pos:end="119:22">trace_mirror_start</name><argument_list pos:start="119:23" pos:end="119:51">(<argument pos:start="119:24" pos:end="119:25"><expr pos:start="119:24" pos:end="119:25"><name pos:start="119:24" pos:end="119:25">bs</name></expr></argument>, <argument pos:start="119:28" pos:end="119:28"><expr pos:start="119:28" pos:end="119:28"><name pos:start="119:28" pos:end="119:28">s</name></expr></argument>, <argument pos:start="119:31" pos:end="119:42"><expr pos:start="119:31" pos:end="119:42"><name pos:start="119:31" pos:end="119:42"><name pos:start="119:31" pos:end="119:31">s</name><operator pos:start="119:32" pos:end="119:33">-&gt;</operator><name pos:start="119:34" pos:end="119:39">common</name><operator pos:start="119:40" pos:end="119:40">.</operator><name pos:start="119:41" pos:end="119:42">co</name></name></expr></argument>, <argument pos:start="119:45" pos:end="119:50"><expr pos:start="119:45" pos:end="119:50"><name pos:start="119:45" pos:end="119:50">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:39"><expr pos:start="121:5" pos:end="121:38"><call pos:start="121:5" pos:end="121:38"><name pos:start="121:5" pos:end="121:24">qemu_coroutine_enter</name><argument_list pos:start="121:25" pos:end="121:38">(<argument pos:start="121:26" pos:end="121:37"><expr pos:start="121:26" pos:end="121:37"><name pos:start="121:26" pos:end="121:37"><name pos:start="121:26" pos:end="121:26">s</name><operator pos:start="121:27" pos:end="121:28">-&gt;</operator><name pos:start="121:29" pos:end="121:34">common</name><operator pos:start="121:35" pos:end="121:35">.</operator><name pos:start="121:36" pos:end="121:37">co</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
