<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2283.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:32">cow_read</name><parameter_list pos:start="1:33" pos:end="3:62">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:53"><name pos:start="1:34" pos:end="1:49">BlockDriverState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">bs</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:73"><decl pos:start="1:56" pos:end="1:73"><type pos:start="1:56" pos:end="1:73"><name pos:start="1:56" pos:end="1:62">int64_t</name></type> <name pos:start="1:64" pos:end="1:73">sector_num</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:45"><decl pos:start="3:34" pos:end="3:45"><type pos:start="3:34" pos:end="3:45"><name pos:start="3:34" pos:end="3:40">uint8_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:45">buf</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:61"><decl pos:start="3:48" pos:end="3:61"><type pos:start="3:48" pos:end="3:61"><name pos:start="3:48" pos:end="3:50">int</name></type> <name pos:start="3:52" pos:end="3:61">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="67:13">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVCowState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">n</name></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="65:5">while <condition pos:start="13:11" pos:end="13:26">(<expr pos:start="13:12" pos:end="13:25"><name pos:start="13:12" pos:end="13:21">nb_sectors</name> <operator pos:start="13:23" pos:end="13:23">&gt;</operator> <literal type="number" pos:start="13:25" pos:end="13:25">0</literal></expr>)</condition> <block pos:start="13:28" pos:end="65:5">{<block_content pos:start="15:9" pos:end="63:23">

        <expr_stmt pos:start="15:9" pos:end="15:66"><expr pos:start="15:9" pos:end="15:65"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <call pos:start="15:15" pos:end="15:65"><name pos:start="15:15" pos:end="15:33">cow_co_is_allocated</name><argument_list pos:start="15:34" pos:end="15:65">(<argument pos:start="15:35" pos:end="15:36"><expr pos:start="15:35" pos:end="15:36"><name pos:start="15:35" pos:end="15:36">bs</name></expr></argument>, <argument pos:start="15:39" pos:end="15:48"><expr pos:start="15:39" pos:end="15:48"><name pos:start="15:39" pos:end="15:48">sector_num</name></expr></argument>, <argument pos:start="15:51" pos:end="15:60"><expr pos:start="15:51" pos:end="15:60"><name pos:start="15:51" pos:end="15:60">nb_sectors</name></expr></argument>, <argument pos:start="15:63" pos:end="15:64"><expr pos:start="15:63" pos:end="15:64"><operator pos:start="15:63" pos:end="15:63">&amp;</operator><name pos:start="15:64" pos:end="15:64">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="17:9" pos:end="21:9"><if pos:start="17:9" pos:end="21:9">if <condition pos:start="17:12" pos:end="17:20">(<expr pos:start="17:13" pos:end="17:19"><name pos:start="17:13" pos:end="17:15">ret</name> <operator pos:start="17:17" pos:end="17:17">&lt;</operator> <literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>)</condition> <block pos:start="17:22" pos:end="21:9">{<block_content pos:start="19:13" pos:end="19:23">

            <return pos:start="19:13" pos:end="19:23">return <expr pos:start="19:20" pos:end="19:22"><name pos:start="19:20" pos:end="19:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="23:9" pos:end="57:9"><if pos:start="23:9" pos:end="37:9">if <condition pos:start="23:12" pos:end="23:16">(<expr pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">ret</name></expr>)</condition> <block pos:start="23:18" pos:end="37:9">{<block_content pos:start="25:13" pos:end="35:13">

            <expr_stmt pos:start="25:13" pos:end="29:38"><expr pos:start="25:13" pos:end="29:37"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="29:37"><name pos:start="25:19" pos:end="25:28">bdrv_pread</name><argument_list pos:start="25:29" pos:end="29:37">(<argument pos:start="25:30" pos:end="25:37"><expr pos:start="25:30" pos:end="25:37"><name pos:start="25:30" pos:end="25:37"><name pos:start="25:30" pos:end="25:31">bs</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:37">file</name></name></expr></argument>,

                        <argument pos:start="27:25" pos:end="27:64"><expr pos:start="27:25" pos:end="27:64"><name pos:start="27:25" pos:end="27:45"><name pos:start="27:25" pos:end="27:25">s</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:45">cow_sectors_offset</name></name> <operator pos:start="27:47" pos:end="27:47">+</operator> <name pos:start="27:49" pos:end="27:58">sector_num</name> <operator pos:start="27:60" pos:end="27:60">*</operator> <literal type="number" pos:start="27:62" pos:end="27:64">512</literal></expr></argument>,

                        <argument pos:start="29:25" pos:end="29:27"><expr pos:start="29:25" pos:end="29:27"><name pos:start="29:25" pos:end="29:27">buf</name></expr></argument>, <argument pos:start="29:30" pos:end="29:36"><expr pos:start="29:30" pos:end="29:36"><name pos:start="29:30" pos:end="29:30">n</name> <operator pos:start="29:32" pos:end="29:32">*</operator> <literal type="number" pos:start="29:34" pos:end="29:36">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="31:13" pos:end="35:13"><if pos:start="31:13" pos:end="35:13">if <condition pos:start="31:16" pos:end="31:24">(<expr pos:start="31:17" pos:end="31:23"><name pos:start="31:17" pos:end="31:19">ret</name> <operator pos:start="31:21" pos:end="31:21">&lt;</operator> <literal type="number" pos:start="31:23" pos:end="31:23">0</literal></expr>)</condition> <block pos:start="31:26" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:27">

                <return pos:start="33:17" pos:end="33:27">return <expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="57:9">else <block pos:start="37:16" pos:end="57:9">{<block_content pos:start="39:13" pos:end="55:13">

            <if_stmt pos:start="39:13" pos:end="55:13"><if pos:start="39:13" pos:end="51:13">if <condition pos:start="39:16" pos:end="39:31">(<expr pos:start="39:17" pos:end="39:30"><name pos:start="39:17" pos:end="39:30"><name pos:start="39:17" pos:end="39:18">bs</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:30">backing_hd</name></name></expr>)</condition> <block pos:start="39:33" pos:end="51:13">{<block_content pos:start="43:17" pos:end="49:17">

                <comment type="block" pos:start="41:17" pos:end="41:46">/* read from the base image */</comment>

                <expr_stmt pos:start="43:17" pos:end="43:68"><expr pos:start="43:17" pos:end="43:67"><name pos:start="43:17" pos:end="43:19">ret</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:67"><name pos:start="43:23" pos:end="43:31">bdrv_read</name><argument_list pos:start="43:32" pos:end="43:67">(<argument pos:start="43:33" pos:end="43:46"><expr pos:start="43:33" pos:end="43:46"><name pos:start="43:33" pos:end="43:46"><name pos:start="43:33" pos:end="43:34">bs</name><operator pos:start="43:35" pos:end="43:36">-&gt;</operator><name pos:start="43:37" pos:end="43:46">backing_hd</name></name></expr></argument>, <argument pos:start="43:49" pos:end="43:58"><expr pos:start="43:49" pos:end="43:58"><name pos:start="43:49" pos:end="43:58">sector_num</name></expr></argument>, <argument pos:start="43:61" pos:end="43:63"><expr pos:start="43:61" pos:end="43:63"><name pos:start="43:61" pos:end="43:63">buf</name></expr></argument>, <argument pos:start="43:66" pos:end="43:66"><expr pos:start="43:66" pos:end="43:66"><name pos:start="43:66" pos:end="43:66">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="45:17" pos:end="49:17"><if pos:start="45:17" pos:end="49:17">if <condition pos:start="45:20" pos:end="45:28">(<expr pos:start="45:21" pos:end="45:27"><name pos:start="45:21" pos:end="45:23">ret</name> <operator pos:start="45:25" pos:end="45:25">&lt;</operator> <literal type="number" pos:start="45:27" pos:end="45:27">0</literal></expr>)</condition> <block pos:start="45:30" pos:end="49:17">{<block_content pos:start="47:21" pos:end="47:31">

                    <return pos:start="47:21" pos:end="47:31">return <expr pos:start="47:28" pos:end="47:30"><name pos:start="47:28" pos:end="47:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="51:15" pos:end="55:13">else <block pos:start="51:20" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:40">

                <expr_stmt pos:start="53:17" pos:end="53:40"><expr pos:start="53:17" pos:end="53:39"><call pos:start="53:17" pos:end="53:39"><name pos:start="53:17" pos:end="53:22">memset</name><argument_list pos:start="53:23" pos:end="53:39">(<argument pos:start="53:24" pos:end="53:26"><expr pos:start="53:24" pos:end="53:26"><name pos:start="53:24" pos:end="53:26">buf</name></expr></argument>, <argument pos:start="53:29" pos:end="53:29"><expr pos:start="53:29" pos:end="53:29"><literal type="number" pos:start="53:29" pos:end="53:29">0</literal></expr></argument>, <argument pos:start="53:32" pos:end="53:38"><expr pos:start="53:32" pos:end="53:38"><name pos:start="53:32" pos:end="53:32">n</name> <operator pos:start="53:34" pos:end="53:34">*</operator> <literal type="number" pos:start="53:36" pos:end="53:38">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:24"><expr pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:18">nb_sectors</name> <operator pos:start="59:20" pos:end="59:21">-=</operator> <name pos:start="59:23" pos:end="59:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:24"><expr pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:18">sector_num</name> <operator pos:start="61:20" pos:end="61:21">+=</operator> <name pos:start="61:23" pos:end="61:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:23"><expr pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:11">buf</name> <operator pos:start="63:13" pos:end="63:14">+=</operator> <name pos:start="63:16" pos:end="63:16">n</name> <operator pos:start="63:18" pos:end="63:18">*</operator> <literal type="number" pos:start="63:20" pos:end="63:22">512</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <return pos:start="67:5" pos:end="67:13">return <expr pos:start="67:12" pos:end="67:12"><literal type="number" pos:start="67:12" pos:end="67:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
