<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4487.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:31">esp_pci_io_read</name><parameter_list pos:start="1:32" pos:end="3:50">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:69"><decl pos:start="1:47" pos:end="1:69"><type pos:start="1:47" pos:end="1:69"><name pos:start="1:47" pos:end="1:64">target_phys_addr_t</name></type> <name pos:start="1:66" pos:end="1:69">addr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:49"><decl pos:start="3:33" pos:end="3:49"><type pos:start="3:33" pos:end="3:49"><name pos:start="3:33" pos:end="3:40">unsigned</name> <name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:49">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:15">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">PCIESPState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">pci</name> <init pos:start="7:22" pos:end="7:29">= <expr pos:start="7:24" pos:end="7:29"><name pos:start="7:24" pos:end="7:29">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="41:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:20">(<expr pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:12">addr</name> <operator pos:start="13:14" pos:end="13:14">&lt;</operator> <literal type="number" pos:start="13:16" pos:end="13:19">0x40</literal></expr>)</condition> <block pos:start="13:22" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:49">

        <comment type="block" pos:start="15:9" pos:end="15:27">/* SCSI core reg */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:49"><expr pos:start="17:9" pos:end="17:48"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:48"><name pos:start="17:15" pos:end="17:26">esp_reg_read</name><argument_list pos:start="17:27" pos:end="17:48">(<argument pos:start="17:28" pos:end="17:36"><expr pos:start="17:28" pos:end="17:36"><operator pos:start="17:28" pos:end="17:28">&amp;</operator><name pos:start="17:29" pos:end="17:36"><name pos:start="17:29" pos:end="17:31">pci</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:36">esp</name></name></expr></argument>, <argument pos:start="17:39" pos:end="17:47"><expr pos:start="17:39" pos:end="17:47"><name pos:start="17:39" pos:end="17:42">addr</name> <operator pos:start="17:44" pos:end="17:45">&gt;&gt;</operator> <literal type="number" pos:start="17:47" pos:end="17:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="19:7" pos:end="25:5">else if <condition pos:start="19:15" pos:end="19:27">(<expr pos:start="19:16" pos:end="19:26"><name pos:start="19:16" pos:end="19:19">addr</name> <operator pos:start="19:21" pos:end="19:21">&lt;</operator> <literal type="number" pos:start="19:23" pos:end="19:26">0x60</literal></expr>)</condition> <block pos:start="19:29" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:56">

        <comment type="block" pos:start="21:9" pos:end="21:25">/* PCI DMA CCB */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:56"><expr pos:start="23:9" pos:end="23:55"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:55"><name pos:start="23:15" pos:end="23:30">esp_pci_dma_read</name><argument_list pos:start="23:31" pos:end="23:55">(<argument pos:start="23:32" pos:end="23:34"><expr pos:start="23:32" pos:end="23:34"><name pos:start="23:32" pos:end="23:34">pci</name></expr></argument>, <argument pos:start="23:37" pos:end="23:54"><expr pos:start="23:37" pos:end="23:54"><operator pos:start="23:37" pos:end="23:37">(</operator><name pos:start="23:38" pos:end="23:41">addr</name> <operator pos:start="23:43" pos:end="23:43">-</operator> <literal type="number" pos:start="23:45" pos:end="23:48">0x40</literal><operator pos:start="23:49" pos:end="23:49">)</operator> <operator pos:start="23:51" pos:end="23:52">&gt;&gt;</operator> <literal type="number" pos:start="23:54" pos:end="23:54">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="25:7" pos:end="33:5">else if <condition pos:start="25:15" pos:end="25:28">(<expr pos:start="25:16" pos:end="25:27"><name pos:start="25:16" pos:end="25:19">addr</name> <operator pos:start="25:21" pos:end="25:22">==</operator> <literal type="number" pos:start="25:24" pos:end="25:27">0x70</literal></expr>)</condition> <block pos:start="25:30" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:24">

        <comment type="block" pos:start="27:9" pos:end="27:38">/* DMA SCSI Bus and control */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:43"><expr pos:start="29:9" pos:end="29:42"><call pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:31">trace_esp_pci_sbac_read</name><argument_list pos:start="29:32" pos:end="29:42">(<argument pos:start="29:33" pos:end="29:41"><expr pos:start="29:33" pos:end="29:41"><name pos:start="29:33" pos:end="29:41"><name pos:start="29:33" pos:end="29:35">pci</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:41">sbac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:24"><expr pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:23"><name pos:start="31:15" pos:end="31:17">pci</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:23">sbac</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="41:5">else <block pos:start="33:12" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:16">

        <comment type="block" pos:start="35:9" pos:end="35:28">/* Invalid region */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:52"><expr pos:start="37:9" pos:end="37:51"><call pos:start="37:9" pos:end="37:51"><name pos:start="37:9" pos:end="37:40">trace_esp_pci_error_invalid_read</name><argument_list pos:start="37:41" pos:end="37:51">(<argument pos:start="37:42" pos:end="37:50"><expr pos:start="37:42" pos:end="37:50"><operator pos:start="37:42" pos:end="37:42">(</operator><name pos:start="37:43" pos:end="37:45">int</name><operator pos:start="37:46" pos:end="37:46">)</operator><name pos:start="37:47" pos:end="37:50">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:16"><expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:34">/* give only requested data */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:7">ret</name> <operator pos:start="47:9" pos:end="47:11">&gt;&gt;=</operator> <operator pos:start="47:13" pos:end="47:13">(</operator><name pos:start="47:14" pos:end="47:17">addr</name> <operator pos:start="47:19" pos:end="47:19">&amp;</operator> <literal type="number" pos:start="47:21" pos:end="47:21">3</literal><operator pos:start="47:22" pos:end="47:22">)</operator> <operator pos:start="47:24" pos:end="47:24">*</operator> <literal type="number" pos:start="47:26" pos:end="47:26">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:41"><expr pos:start="49:5" pos:end="49:40"><name pos:start="49:5" pos:end="49:7">ret</name> <operator pos:start="49:9" pos:end="49:10">&amp;=</operator> <operator pos:start="49:12" pos:end="49:12">~</operator><operator pos:start="49:13" pos:end="49:13">(</operator><operator pos:start="49:14" pos:end="49:14">~</operator><operator pos:start="49:15" pos:end="49:15">(</operator><name pos:start="49:16" pos:end="49:23">uint64_t</name><operator pos:start="49:24" pos:end="49:24">)</operator><literal type="number" pos:start="49:25" pos:end="49:25">0</literal> <operator pos:start="49:27" pos:end="49:28">&lt;&lt;</operator> <operator pos:start="49:30" pos:end="49:30">(</operator><literal type="number" pos:start="49:31" pos:end="49:31">8</literal> <operator pos:start="49:33" pos:end="49:33">*</operator> <name pos:start="49:35" pos:end="49:38">size</name><operator pos:start="49:39" pos:end="49:39">)</operator><operator pos:start="49:40" pos:end="49:40">)</operator></expr>;</expr_stmt>



    <return pos:start="53:5" pos:end="53:15">return <expr pos:start="53:12" pos:end="53:14"><name pos:start="53:12" pos:end="53:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
