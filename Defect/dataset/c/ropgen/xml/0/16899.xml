<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16899.c" pos:tabs="8"><function pos:start="1:1" pos:end="1109:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">img_convert</name><parameter_list pos:start="1:23" pos:end="1:45">(<parameter pos:start="1:24" pos:end="1:31"><decl pos:start="1:24" pos:end="1:31"><type pos:start="1:24" pos:end="1:31"><name pos:start="1:24" pos:end="1:26">int</name></type> <name pos:start="1:28" pos:end="1:31">argc</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:44"><decl pos:start="1:34" pos:end="1:44"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier><modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:44">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1109:1">{<block_content pos:start="5:5" pos:end="1107:13">

    <decl_stmt pos:start="5:5" pos:end="5:69"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">c</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">n</name></decl>, <decl pos:start="5:15" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:16">n1</name></decl>, <decl pos:start="5:19" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:22">bs_n</name></decl>, <decl pos:start="5:25" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:25" pos:end="5:28">bs_i</name></decl>, <decl pos:start="5:31" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:31" pos:end="5:38">compress</name></decl>, <decl pos:start="5:41" pos:end="5:55"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:41" pos:end="5:55">cluster_sectors</name></decl>, <decl pos:start="5:58" pos:end="5:68"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:58" pos:end="5:68">skip_create</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:15">ret</name> <init pos:start="7:17" pos:end="7:19">= <expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">progress</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>, <decl pos:start="9:23" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:27">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:67"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:19">fmt</name></decl>, <decl pos:start="11:22" pos:end="11:29"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:29">out_fmt</name></decl>, <decl pos:start="11:32" pos:end="11:37"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:32" pos:end="11:32">*</modifier></type><name pos:start="11:33" pos:end="11:37">cache</name></decl>, <decl pos:start="11:40" pos:end="11:51"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:40" pos:end="11:40">*</modifier></type><name pos:start="11:41" pos:end="11:51">out_baseimg</name></decl>, <decl pos:start="11:54" pos:end="11:66"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:54" pos:end="11:54">*</modifier></type><name pos:start="11:55" pos:end="11:66">out_filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">BlockDriver</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:20">drv</name></decl>, <decl pos:start="13:23" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:17"><modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:32">proto_drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:49"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:20">BlockDriverState</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier><modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:25">bs</name> <init pos:start="15:27" pos:end="15:32">= <expr pos:start="15:29" pos:end="15:32"><name pos:start="15:29" pos:end="15:32">NULL</name></expr></init></decl>, <decl pos:start="15:35" pos:end="15:48"><type ref="prev" pos:start="15:5" pos:end="15:23"><modifier pos:start="15:35" pos:end="15:35">*</modifier></type><name pos:start="15:36" pos:end="15:41">out_bs</name> <init pos:start="15:43" pos:end="15:48">= <expr pos:start="15:45" pos:end="15:48"><name pos:start="15:45" pos:end="15:48">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:61"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:25">total_sectors</name></decl>, <decl pos:start="17:28" pos:end="17:37"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:28" pos:end="17:37">nb_sectors</name></decl>, <decl pos:start="17:40" pos:end="17:49"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:40" pos:end="17:49">sector_num</name></decl>, <decl pos:start="17:52" pos:end="17:60"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:52" pos:end="17:60">bs_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">int64_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:23">bs_sectors</name> <init pos:start="19:25" pos:end="19:30">= <expr pos:start="19:27" pos:end="19:30"><name pos:start="19:27" pos:end="19:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type> <name pos:start="21:15" pos:end="21:17">buf</name> <init pos:start="21:19" pos:end="21:24">= <expr pos:start="21:21" pos:end="21:24"><name pos:start="21:21" pos:end="21:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:55"><decl pos:start="23:5" pos:end="23:54"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:10">size_t</name></type> <name pos:start="23:12" pos:end="23:21">bufsectors</name> <init pos:start="23:23" pos:end="23:54">= <expr pos:start="23:25" pos:end="23:54"><name pos:start="23:25" pos:end="23:35">IO_BUF_SIZE</name> <operator pos:start="23:37" pos:end="23:37">/</operator> <name pos:start="23:39" pos:end="23:54">BDRV_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:19"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:17">uint8_t</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:23">buf1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:19">BlockDriverInfo</name></type> <name pos:start="27:21" pos:end="27:23">bdi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:26"><decl pos:start="29:5" pos:end="29:25"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">QemuOpts</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:18">opts</name> <init pos:start="29:20" pos:end="29:25">= <expr pos:start="29:22" pos:end="29:25"><name pos:start="29:22" pos:end="29:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:37"><decl pos:start="31:5" pos:end="31:36"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">QemuOptsList</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:29">create_opts</name> <init pos:start="31:31" pos:end="31:36">= <expr pos:start="31:33" pos:end="31:36"><name pos:start="31:33" pos:end="31:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:34"><decl pos:start="33:5" pos:end="33:33"><type pos:start="33:5" pos:end="33:16"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:14">char</name> <modifier pos:start="33:16" pos:end="33:16">*</modifier></type><name pos:start="33:17" pos:end="33:33">out_baseimg_param</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:25"><decl pos:start="35:5" pos:end="35:24"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:8">char</name> <modifier pos:start="35:10" pos:end="35:10">*</modifier></type><name pos:start="35:11" pos:end="35:17">options</name> <init pos:start="35:19" pos:end="35:24">= <expr pos:start="35:21" pos:end="35:24"><name pos:start="35:21" pos:end="35:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:37"><decl pos:start="37:5" pos:end="37:36"><type pos:start="37:5" pos:end="37:16"><specifier pos:start="37:5" pos:end="37:9">const</specifier> <name pos:start="37:11" pos:end="37:14">char</name> <modifier pos:start="37:16" pos:end="37:16">*</modifier></type><name pos:start="37:17" pos:end="37:29">snapshot_name</name> <init pos:start="37:31" pos:end="37:36">= <expr pos:start="37:33" pos:end="37:36"><name pos:start="37:33" pos:end="37:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:23"><decl pos:start="39:5" pos:end="39:22"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:18">min_sparse</name> <init pos:start="39:20" pos:end="39:22">= <expr pos:start="39:22" pos:end="39:22"><literal type="number" pos:start="39:22" pos:end="39:22">8</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="39:25" pos:end="39:76">/* Need at least 4k of zeros for sparse detection */</comment>

    <decl_stmt pos:start="41:5" pos:end="41:23"><decl pos:start="41:5" pos:end="41:22"><type pos:start="41:5" pos:end="41:8"><name pos:start="41:5" pos:end="41:8">bool</name></type> <name pos:start="41:10" pos:end="41:14">quiet</name> <init pos:start="41:16" pos:end="41:22">= <expr pos:start="41:18" pos:end="41:22"><name pos:start="41:18" pos:end="41:22">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:28"><decl pos:start="43:5" pos:end="43:27"><type pos:start="43:5" pos:end="43:11"><name pos:start="43:5" pos:end="43:9">Error</name> <modifier pos:start="43:11" pos:end="43:11">*</modifier></type><name pos:start="43:12" pos:end="43:20">local_err</name> <init pos:start="43:22" pos:end="43:27">= <expr pos:start="43:24" pos:end="43:27"><name pos:start="43:24" pos:end="43:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:29"><decl pos:start="45:5" pos:end="45:28"><type pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:12">QemuOpts</name> <modifier pos:start="45:14" pos:end="45:14">*</modifier></type><name pos:start="45:15" pos:end="45:21">sn_opts</name> <init pos:start="45:23" pos:end="45:28">= <expr pos:start="45:25" pos:end="45:28"><name pos:start="45:25" pos:end="45:28">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:15"><expr pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:7">fmt</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <name pos:start="49:11" pos:end="49:14">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:20"><expr pos:start="51:5" pos:end="51:19"><name pos:start="51:5" pos:end="51:11">out_fmt</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <literal type="string" pos:start="51:15" pos:end="51:19">"raw"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:21"><expr pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:9">cache</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <literal type="string" pos:start="53:13" pos:end="53:20">"unsafe"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:23"><expr pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:15">out_baseimg</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:22">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:17"><expr pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:12">compress</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:20"><expr pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:15">skip_create</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <literal type="number" pos:start="59:19" pos:end="59:19">0</literal></expr>;</expr_stmt>

    <for pos:start="61:5" pos:end="239:5">for<control pos:start="61:8" pos:end="61:11">(<init pos:start="61:9" pos:end="61:9">;</init><condition pos:start="61:10" pos:end="61:10">;</condition><incr/>)</control> <block pos:start="61:13" pos:end="239:5">{<block_content pos:start="63:9" pos:end="237:9">

        <expr_stmt pos:start="63:9" pos:end="63:58"><expr pos:start="63:9" pos:end="63:57"><name pos:start="63:9" pos:end="63:9">c</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:57"><name pos:start="63:13" pos:end="63:18">getopt</name><argument_list pos:start="63:19" pos:end="63:57">(<argument pos:start="63:20" pos:end="63:23"><expr pos:start="63:20" pos:end="63:23"><name pos:start="63:20" pos:end="63:23">argc</name></expr></argument>, <argument pos:start="63:26" pos:end="63:29"><expr pos:start="63:26" pos:end="63:29"><name pos:start="63:26" pos:end="63:29">argv</name></expr></argument>, <argument pos:start="63:32" pos:end="63:56"><expr pos:start="63:32" pos:end="63:56"><literal type="string" pos:start="63:32" pos:end="63:56">"f:O:B:s:hce6o:pS:t:qnl:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:20">(<expr pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:13">c</name> <operator pos:start="65:15" pos:end="65:16">==</operator> <operator pos:start="65:18" pos:end="65:18">-</operator><literal type="number" pos:start="65:19" pos:end="65:19">1</literal></expr>)</condition> <block pos:start="65:22" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:18">

            <break pos:start="67:13" pos:end="67:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="71:9" pos:end="237:9">switch<condition pos:start="71:15" pos:end="71:17">(<expr pos:start="71:16" pos:end="71:16"><name pos:start="71:16" pos:end="71:16">c</name></expr>)</condition> <block pos:start="71:19" pos:end="237:9">{<block_content pos:start="73:9" pos:end="235:18">

        <case pos:start="73:9" pos:end="73:17">case <expr pos:start="73:14" pos:end="73:16"><literal type="char" pos:start="73:14" pos:end="73:16">'?'</literal></expr>:</case>

        <case pos:start="75:9" pos:end="75:17">case <expr pos:start="75:14" pos:end="75:16"><literal type="char" pos:start="75:14" pos:end="75:16">'h'</literal></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:19"><expr pos:start="77:13" pos:end="77:18"><call pos:start="77:13" pos:end="77:18"><name pos:start="77:13" pos:end="77:16">help</name><argument_list pos:start="77:17" pos:end="77:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="79:13" pos:end="79:18">break;</break>

        <case pos:start="81:9" pos:end="81:17">case <expr pos:start="81:14" pos:end="81:16"><literal type="char" pos:start="81:14" pos:end="81:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="83:13" pos:end="83:25"><expr pos:start="83:13" pos:end="83:24"><name pos:start="83:13" pos:end="83:15">fmt</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <name pos:start="83:19" pos:end="83:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        <case pos:start="87:9" pos:end="87:17">case <expr pos:start="87:14" pos:end="87:16"><literal type="char" pos:start="87:14" pos:end="87:16">'O'</literal></expr>:</case>

            <expr_stmt pos:start="89:13" pos:end="89:29"><expr pos:start="89:13" pos:end="89:28"><name pos:start="89:13" pos:end="89:19">out_fmt</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <name pos:start="89:23" pos:end="89:28">optarg</name></expr>;</expr_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        <case pos:start="93:9" pos:end="93:17">case <expr pos:start="93:14" pos:end="93:16"><literal type="char" pos:start="93:14" pos:end="93:16">'B'</literal></expr>:</case>

            <expr_stmt pos:start="95:13" pos:end="95:33"><expr pos:start="95:13" pos:end="95:32"><name pos:start="95:13" pos:end="95:23">out_baseimg</name> <operator pos:start="95:25" pos:end="95:25">=</operator> <name pos:start="95:27" pos:end="95:32">optarg</name></expr>;</expr_stmt>

            <break pos:start="97:13" pos:end="97:18">break;</break>

        <case pos:start="99:9" pos:end="99:17">case <expr pos:start="99:14" pos:end="99:16"><literal type="char" pos:start="99:14" pos:end="99:16">'c'</literal></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:25"><expr pos:start="101:13" pos:end="101:24"><name pos:start="101:13" pos:end="101:20">compress</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <literal type="number" pos:start="101:24" pos:end="101:24">1</literal></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        <case pos:start="105:9" pos:end="105:17">case <expr pos:start="105:14" pos:end="105:16"><literal type="char" pos:start="105:14" pos:end="105:16">'e'</literal></expr>:</case>

            <expr_stmt pos:start="107:13" pos:end="109:43"><expr pos:start="107:13" pos:end="109:42"><call pos:start="107:13" pos:end="109:42"><name pos:start="107:13" pos:end="107:24">error_report</name><argument_list pos:start="107:25" pos:end="109:42">(<argument pos:start="107:26" pos:end="109:41"><expr pos:start="107:26" pos:end="109:41"><literal type="string" pos:start="107:26" pos:end="107:68">"option -e is deprecated, please use \'-o "</literal>

                  <literal type="string" pos:start="109:19" pos:end="109:41">"encryption\' instead!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:21"><expr pos:start="111:13" pos:end="111:20"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <operator pos:start="111:19" pos:end="111:19">-</operator><literal type="number" pos:start="111:20" pos:end="111:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="113:13" pos:end="113:29">goto <name pos:start="113:18" pos:end="113:28">fail_getopt</name>;</goto>

        <case pos:start="115:9" pos:end="115:17">case <expr pos:start="115:14" pos:end="115:16"><literal type="char" pos:start="115:14" pos:end="115:16">'6'</literal></expr>:</case>

            <expr_stmt pos:start="117:13" pos:end="119:40"><expr pos:start="117:13" pos:end="119:39"><call pos:start="117:13" pos:end="119:39"><name pos:start="117:13" pos:end="117:24">error_report</name><argument_list pos:start="117:25" pos:end="119:39">(<argument pos:start="117:26" pos:end="119:38"><expr pos:start="117:26" pos:end="119:38"><literal type="string" pos:start="117:26" pos:end="117:68">"option -6 is deprecated, please use \'-o "</literal>

                  <literal type="string" pos:start="119:19" pos:end="119:38">"compat6\' instead!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:21"><expr pos:start="121:13" pos:end="121:20"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <operator pos:start="121:19" pos:end="121:19">-</operator><literal type="number" pos:start="121:20" pos:end="121:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="123:13" pos:end="123:29">goto <name pos:start="123:18" pos:end="123:28">fail_getopt</name>;</goto>

        <case pos:start="125:9" pos:end="125:17">case <expr pos:start="125:14" pos:end="125:16"><literal type="char" pos:start="125:14" pos:end="125:16">'o'</literal></expr>:</case>

            <if_stmt pos:start="127:13" pos:end="135:13"><if pos:start="127:13" pos:end="135:13">if <condition pos:start="127:16" pos:end="127:46">(<expr pos:start="127:17" pos:end="127:45"><operator pos:start="127:17" pos:end="127:17">!</operator><call pos:start="127:18" pos:end="127:45"><name pos:start="127:18" pos:end="127:37">is_valid_option_list</name><argument_list pos:start="127:38" pos:end="127:45">(<argument pos:start="127:39" pos:end="127:44"><expr pos:start="127:39" pos:end="127:44"><name pos:start="127:39" pos:end="127:44">optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:48" pos:end="135:13">{<block_content pos:start="129:17" pos:end="133:33">

                <expr_stmt pos:start="129:17" pos:end="129:64"><expr pos:start="129:17" pos:end="129:63"><call pos:start="129:17" pos:end="129:63"><name pos:start="129:17" pos:end="129:28">error_report</name><argument_list pos:start="129:29" pos:end="129:63">(<argument pos:start="129:30" pos:end="129:54"><expr pos:start="129:30" pos:end="129:54"><literal type="string" pos:start="129:30" pos:end="129:54">"Invalid option list: %s"</literal></expr></argument>, <argument pos:start="129:57" pos:end="129:62"><expr pos:start="129:57" pos:end="129:62"><name pos:start="129:57" pos:end="129:62">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:25"><expr pos:start="131:17" pos:end="131:24"><name pos:start="131:17" pos:end="131:19">ret</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <operator pos:start="131:23" pos:end="131:23">-</operator><literal type="number" pos:start="131:24" pos:end="131:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="133:17" pos:end="133:33">goto <name pos:start="133:22" pos:end="133:32">fail_getopt</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="137:13" pos:end="149:13"><if pos:start="137:13" pos:end="141:13">if <condition pos:start="137:16" pos:end="137:25">(<expr pos:start="137:17" pos:end="137:24"><operator pos:start="137:17" pos:end="137:17">!</operator><name pos:start="137:18" pos:end="137:24">options</name></expr>)</condition> <block pos:start="137:27" pos:end="141:13">{<block_content pos:start="139:17" pos:end="139:43">

                <expr_stmt pos:start="139:17" pos:end="139:43"><expr pos:start="139:17" pos:end="139:42"><name pos:start="139:17" pos:end="139:23">options</name> <operator pos:start="139:25" pos:end="139:25">=</operator> <call pos:start="139:27" pos:end="139:42"><name pos:start="139:27" pos:end="139:34">g_strdup</name><argument_list pos:start="139:35" pos:end="139:42">(<argument pos:start="139:36" pos:end="139:41"><expr pos:start="139:36" pos:end="139:41"><name pos:start="139:36" pos:end="139:41">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="141:15" pos:end="149:13">else <block pos:start="141:20" pos:end="149:13">{<block_content pos:start="143:17" pos:end="147:36">

                <decl_stmt pos:start="143:17" pos:end="143:44"><decl pos:start="143:17" pos:end="143:43"><type pos:start="143:17" pos:end="143:22"><name pos:start="143:17" pos:end="143:20">char</name> <modifier pos:start="143:22" pos:end="143:22">*</modifier></type><name pos:start="143:23" pos:end="143:33">old_options</name> <init pos:start="143:35" pos:end="143:43">= <expr pos:start="143:37" pos:end="143:43"><name pos:start="143:37" pos:end="143:43">options</name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:68"><expr pos:start="145:17" pos:end="145:67"><name pos:start="145:17" pos:end="145:23">options</name> <operator pos:start="145:25" pos:end="145:25">=</operator> <call pos:start="145:27" pos:end="145:67"><name pos:start="145:27" pos:end="145:41">g_strdup_printf</name><argument_list pos:start="145:42" pos:end="145:67">(<argument pos:start="145:43" pos:end="145:49"><expr pos:start="145:43" pos:end="145:49"><literal type="string" pos:start="145:43" pos:end="145:49">"%s,%s"</literal></expr></argument>, <argument pos:start="145:52" pos:end="145:58"><expr pos:start="145:52" pos:end="145:58"><name pos:start="145:52" pos:end="145:58">options</name></expr></argument>, <argument pos:start="145:61" pos:end="145:66"><expr pos:start="145:61" pos:end="145:66"><name pos:start="145:61" pos:end="145:66">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:36"><expr pos:start="147:17" pos:end="147:35"><call pos:start="147:17" pos:end="147:35"><name pos:start="147:17" pos:end="147:22">g_free</name><argument_list pos:start="147:23" pos:end="147:35">(<argument pos:start="147:24" pos:end="147:34"><expr pos:start="147:24" pos:end="147:34"><name pos:start="147:24" pos:end="147:34">old_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="151:13" pos:end="151:18">break;</break>

        <case pos:start="153:9" pos:end="153:17">case <expr pos:start="153:14" pos:end="153:16"><literal type="char" pos:start="153:14" pos:end="153:16">'s'</literal></expr>:</case>

            <expr_stmt pos:start="155:13" pos:end="155:35"><expr pos:start="155:13" pos:end="155:34"><name pos:start="155:13" pos:end="155:25">snapshot_name</name> <operator pos:start="155:27" pos:end="155:27">=</operator> <name pos:start="155:29" pos:end="155:34">optarg</name></expr>;</expr_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>

        <case pos:start="159:9" pos:end="159:17">case <expr pos:start="159:14" pos:end="159:16"><literal type="char" pos:start="159:14" pos:end="159:16">'l'</literal></expr>:</case>

            <if_stmt pos:start="161:13" pos:end="181:13"><if pos:start="161:13" pos:end="177:13">if <condition pos:start="161:16" pos:end="161:58">(<expr pos:start="161:17" pos:end="161:57"><call pos:start="161:17" pos:end="161:57"><name pos:start="161:17" pos:end="161:24">strstart</name><argument_list pos:start="161:25" pos:end="161:57">(<argument pos:start="161:26" pos:end="161:31"><expr pos:start="161:26" pos:end="161:31"><name pos:start="161:26" pos:end="161:31">optarg</name></expr></argument>, <argument pos:start="161:34" pos:end="161:50"><expr pos:start="161:34" pos:end="161:50"><name pos:start="161:34" pos:end="161:50">SNAPSHOT_OPT_BASE</name></expr></argument>, <argument pos:start="161:53" pos:end="161:56"><expr pos:start="161:53" pos:end="161:56"><name pos:start="161:53" pos:end="161:56">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="161:60" pos:end="177:13">{<block_content pos:start="163:17" pos:end="175:17">

                <expr_stmt pos:start="163:17" pos:end="163:78"><expr pos:start="163:17" pos:end="163:77"><name pos:start="163:17" pos:end="163:23">sn_opts</name> <operator pos:start="163:25" pos:end="163:25">=</operator> <call pos:start="163:27" pos:end="163:77"><name pos:start="163:27" pos:end="163:41">qemu_opts_parse</name><argument_list pos:start="163:42" pos:end="163:77">(<argument pos:start="163:43" pos:end="163:65"><expr pos:start="163:43" pos:end="163:65"><operator pos:start="163:43" pos:end="163:43">&amp;</operator><name pos:start="163:44" pos:end="163:65">internal_snapshot_opts</name></expr></argument>, <argument pos:start="163:68" pos:end="163:73"><expr pos:start="163:68" pos:end="163:73"><name pos:start="163:68" pos:end="163:73">optarg</name></expr></argument>, <argument pos:start="163:76" pos:end="163:76"><expr pos:start="163:76" pos:end="163:76"><literal type="number" pos:start="163:76" pos:end="163:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="165:17" pos:end="175:17"><if pos:start="165:17" pos:end="175:17">if <condition pos:start="165:20" pos:end="165:29">(<expr pos:start="165:21" pos:end="165:28"><operator pos:start="165:21" pos:end="165:21">!</operator><name pos:start="165:22" pos:end="165:28">sn_opts</name></expr>)</condition> <block pos:start="165:31" pos:end="175:17">{<block_content pos:start="167:21" pos:end="173:37">

                    <expr_stmt pos:start="167:21" pos:end="169:41"><expr pos:start="167:21" pos:end="169:40"><call pos:start="167:21" pos:end="169:40"><name pos:start="167:21" pos:end="167:32">error_report</name><argument_list pos:start="167:33" pos:end="169:40">(<argument pos:start="167:34" pos:end="167:72"><expr pos:start="167:34" pos:end="167:72"><literal type="string" pos:start="167:34" pos:end="167:72">"Failed in parsing snapshot param '%s'"</literal></expr></argument>,

                                 <argument pos:start="169:34" pos:end="169:39"><expr pos:start="169:34" pos:end="169:39"><name pos:start="169:34" pos:end="169:39">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="171:21" pos:end="171:29"><expr pos:start="171:21" pos:end="171:28"><name pos:start="171:21" pos:end="171:23">ret</name> <operator pos:start="171:25" pos:end="171:25">=</operator> <operator pos:start="171:27" pos:end="171:27">-</operator><literal type="number" pos:start="171:28" pos:end="171:28">1</literal></expr>;</expr_stmt>

                    <goto pos:start="173:21" pos:end="173:37">goto <name pos:start="173:26" pos:end="173:36">fail_getopt</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="177:15" pos:end="181:13">else <block pos:start="177:20" pos:end="181:13">{<block_content pos:start="179:17" pos:end="179:39">

                <expr_stmt pos:start="179:17" pos:end="179:39"><expr pos:start="179:17" pos:end="179:38"><name pos:start="179:17" pos:end="179:29">snapshot_name</name> <operator pos:start="179:31" pos:end="179:31">=</operator> <name pos:start="179:33" pos:end="179:38">optarg</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="183:13" pos:end="183:18">break;</break>

        <case pos:start="185:9" pos:end="185:17">case <expr pos:start="185:14" pos:end="185:16"><literal type="char" pos:start="185:14" pos:end="185:16">'S'</literal></expr>:</case>

        <block pos:start="187:9" pos:end="211:9">{<block_content pos:start="189:13" pos:end="209:18">

            <decl_stmt pos:start="189:13" pos:end="189:25"><decl pos:start="189:13" pos:end="189:24"><type pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:19">int64_t</name></type> <name pos:start="189:21" pos:end="189:24">sval</name></decl>;</decl_stmt>

            <decl_stmt pos:start="191:13" pos:end="191:22"><decl pos:start="191:13" pos:end="191:21"><type pos:start="191:13" pos:end="191:18"><name pos:start="191:13" pos:end="191:16">char</name> <modifier pos:start="191:18" pos:end="191:18">*</modifier></type><name pos:start="191:19" pos:end="191:21">end</name></decl>;</decl_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:69"><expr pos:start="193:13" pos:end="193:68"><name pos:start="193:13" pos:end="193:16">sval</name> <operator pos:start="193:18" pos:end="193:18">=</operator> <call pos:start="193:20" pos:end="193:68"><name pos:start="193:20" pos:end="193:33">strtosz_suffix</name><argument_list pos:start="193:34" pos:end="193:68">(<argument pos:start="193:35" pos:end="193:40"><expr pos:start="193:35" pos:end="193:40"><name pos:start="193:35" pos:end="193:40">optarg</name></expr></argument>, <argument pos:start="193:43" pos:end="193:46"><expr pos:start="193:43" pos:end="193:46"><operator pos:start="193:43" pos:end="193:43">&amp;</operator><name pos:start="193:44" pos:end="193:46">end</name></expr></argument>, <argument pos:start="193:49" pos:end="193:67"><expr pos:start="193:49" pos:end="193:67"><name pos:start="193:49" pos:end="193:67">STRTOSZ_DEFSUFFIX_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="195:13" pos:end="203:13"><if pos:start="195:13" pos:end="203:13">if <condition pos:start="195:16" pos:end="195:33">(<expr pos:start="195:17" pos:end="195:32"><name pos:start="195:17" pos:end="195:20">sval</name> <operator pos:start="195:22" pos:end="195:22">&lt;</operator> <literal type="number" pos:start="195:24" pos:end="195:24">0</literal> <operator pos:start="195:26" pos:end="195:27">||</operator> <operator pos:start="195:29" pos:end="195:29">*</operator><name pos:start="195:30" pos:end="195:32">end</name></expr>)</condition> <block pos:start="195:35" pos:end="203:13">{<block_content pos:start="197:17" pos:end="201:33">

                <expr_stmt pos:start="197:17" pos:end="197:93"><expr pos:start="197:17" pos:end="197:92"><call pos:start="197:17" pos:end="197:92"><name pos:start="197:17" pos:end="197:28">error_report</name><argument_list pos:start="197:29" pos:end="197:92">(<argument pos:start="197:30" pos:end="197:91"><expr pos:start="197:30" pos:end="197:91"><literal type="string" pos:start="197:30" pos:end="197:91">"Invalid minimum zero buffer size for sparse output specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:25"><expr pos:start="199:17" pos:end="199:24"><name pos:start="199:17" pos:end="199:19">ret</name> <operator pos:start="199:21" pos:end="199:21">=</operator> <operator pos:start="199:23" pos:end="199:23">-</operator><literal type="number" pos:start="199:24" pos:end="199:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="201:17" pos:end="201:33">goto <name pos:start="201:22" pos:end="201:32">fail_getopt</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="207:13" pos:end="207:49"><expr pos:start="207:13" pos:end="207:48"><name pos:start="207:13" pos:end="207:22">min_sparse</name> <operator pos:start="207:24" pos:end="207:24">=</operator> <name pos:start="207:26" pos:end="207:29">sval</name> <operator pos:start="207:31" pos:end="207:31">/</operator> <name pos:start="207:33" pos:end="207:48">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

            <break pos:start="209:13" pos:end="209:18">break;</break>

        </block_content>}</block>

        <case pos:start="213:9" pos:end="213:17">case <expr pos:start="213:14" pos:end="213:16"><literal type="char" pos:start="213:14" pos:end="213:16">'p'</literal></expr>:</case>

            <expr_stmt pos:start="215:13" pos:end="215:25"><expr pos:start="215:13" pos:end="215:24"><name pos:start="215:13" pos:end="215:20">progress</name> <operator pos:start="215:22" pos:end="215:22">=</operator> <literal type="number" pos:start="215:24" pos:end="215:24">1</literal></expr>;</expr_stmt>

            <break pos:start="217:13" pos:end="217:18">break;</break>

        <case pos:start="219:9" pos:end="219:17">case <expr pos:start="219:14" pos:end="219:16"><literal type="char" pos:start="219:14" pos:end="219:16">'t'</literal></expr>:</case>

            <expr_stmt pos:start="221:13" pos:end="221:27"><expr pos:start="221:13" pos:end="221:26"><name pos:start="221:13" pos:end="221:17">cache</name> <operator pos:start="221:19" pos:end="221:19">=</operator> <name pos:start="221:21" pos:end="221:26">optarg</name></expr>;</expr_stmt>

            <break pos:start="223:13" pos:end="223:18">break;</break>

        <case pos:start="225:9" pos:end="225:17">case <expr pos:start="225:14" pos:end="225:16"><literal type="char" pos:start="225:14" pos:end="225:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="227:13" pos:end="227:25"><expr pos:start="227:13" pos:end="227:24"><name pos:start="227:13" pos:end="227:17">quiet</name> <operator pos:start="227:19" pos:end="227:19">=</operator> <name pos:start="227:21" pos:end="227:24">true</name></expr>;</expr_stmt>

            <break pos:start="229:13" pos:end="229:18">break;</break>

        <case pos:start="231:9" pos:end="231:17">case <expr pos:start="231:14" pos:end="231:16"><literal type="char" pos:start="231:14" pos:end="231:16">'n'</literal></expr>:</case>

            <expr_stmt pos:start="233:13" pos:end="233:28"><expr pos:start="233:13" pos:end="233:27"><name pos:start="233:13" pos:end="233:23">skip_create</name> <operator pos:start="233:25" pos:end="233:25">=</operator> <literal type="number" pos:start="233:27" pos:end="233:27">1</literal></expr>;</expr_stmt>

            <break pos:start="235:13" pos:end="235:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <comment type="block" pos:start="243:5" pos:end="243:36">/* Initialize before goto out */</comment>

    <if_stmt pos:start="245:5" pos:end="249:5"><if pos:start="245:5" pos:end="249:5">if <condition pos:start="245:8" pos:end="245:14">(<expr pos:start="245:9" pos:end="245:13"><name pos:start="245:9" pos:end="245:13">quiet</name></expr>)</condition> <block pos:start="245:16" pos:end="249:5">{<block_content pos:start="247:9" pos:end="247:21">

        <expr_stmt pos:start="247:9" pos:end="247:21"><expr pos:start="247:9" pos:end="247:20"><name pos:start="247:9" pos:end="247:16">progress</name> <operator pos:start="247:18" pos:end="247:18">=</operator> <literal type="number" pos:start="247:20" pos:end="247:20">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:38"><expr pos:start="251:5" pos:end="251:37"><call pos:start="251:5" pos:end="251:37"><name pos:start="251:5" pos:end="251:22">qemu_progress_init</name><argument_list pos:start="251:23" pos:end="251:37">(<argument pos:start="251:24" pos:end="251:31"><expr pos:start="251:24" pos:end="251:31"><name pos:start="251:24" pos:end="251:31">progress</name></expr></argument>, <argument pos:start="251:34" pos:end="251:36"><expr pos:start="251:34" pos:end="251:36"><literal type="number" pos:start="251:34" pos:end="251:36">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="257:5" pos:end="257:29"><expr pos:start="257:5" pos:end="257:28"><name pos:start="257:5" pos:end="257:8">bs_n</name> <operator pos:start="257:10" pos:end="257:10">=</operator> <name pos:start="257:12" pos:end="257:15">argc</name> <operator pos:start="257:17" pos:end="257:17">-</operator> <name pos:start="257:19" pos:end="257:24">optind</name> <operator pos:start="257:26" pos:end="257:26">-</operator> <literal type="number" pos:start="257:28" pos:end="257:28">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:53"><expr pos:start="259:5" pos:end="259:52"><name pos:start="259:5" pos:end="259:16">out_filename</name> <operator pos:start="259:18" pos:end="259:18">=</operator> <ternary pos:start="259:20" pos:end="259:52"><condition pos:start="259:20" pos:end="259:30"><expr pos:start="259:20" pos:end="259:28"><name pos:start="259:20" pos:end="259:23">bs_n</name> <operator pos:start="259:25" pos:end="259:26">&gt;=</operator> <literal type="number" pos:start="259:28" pos:end="259:28">1</literal></expr> ?</condition><then pos:start="259:32" pos:end="259:45"> <expr pos:start="259:32" pos:end="259:45"><name pos:start="259:32" pos:end="259:45"><name pos:start="259:32" pos:end="259:35">argv</name><index pos:start="259:36" pos:end="259:45">[<expr pos:start="259:37" pos:end="259:44"><name pos:start="259:37" pos:end="259:40">argc</name> <operator pos:start="259:42" pos:end="259:42">-</operator> <literal type="number" pos:start="259:44" pos:end="259:44">1</literal></expr>]</index></name></expr> </then><else pos:start="259:47" pos:end="259:52">: <expr pos:start="259:49" pos:end="259:52"><name pos:start="259:49" pos:end="259:52">NULL</name></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="263:5" pos:end="269:5"><if pos:start="263:5" pos:end="269:5">if <condition pos:start="263:8" pos:end="263:44">(<expr pos:start="263:9" pos:end="263:43"><name pos:start="263:9" pos:end="263:15">options</name> <operator pos:start="263:17" pos:end="263:18">&amp;&amp;</operator> <call pos:start="263:20" pos:end="263:43"><name pos:start="263:20" pos:end="263:34">has_help_option</name><argument_list pos:start="263:35" pos:end="263:43">(<argument pos:start="263:36" pos:end="263:42"><expr pos:start="263:36" pos:end="263:42"><name pos:start="263:36" pos:end="263:42">options</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="263:46" pos:end="269:5">{<block_content pos:start="265:9" pos:end="267:17">

        <expr_stmt pos:start="265:9" pos:end="265:61"><expr pos:start="265:9" pos:end="265:60"><name pos:start="265:9" pos:end="265:11">ret</name> <operator pos:start="265:13" pos:end="265:13">=</operator> <call pos:start="265:15" pos:end="265:60"><name pos:start="265:15" pos:end="265:37">print_block_option_help</name><argument_list pos:start="265:38" pos:end="265:60">(<argument pos:start="265:39" pos:end="265:50"><expr pos:start="265:39" pos:end="265:50"><name pos:start="265:39" pos:end="265:50">out_filename</name></expr></argument>, <argument pos:start="265:53" pos:end="265:59"><expr pos:start="265:53" pos:end="265:59"><name pos:start="265:53" pos:end="265:59">out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="267:9" pos:end="267:17">goto <name pos:start="267:14" pos:end="267:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="273:5" pos:end="277:5"><if pos:start="273:5" pos:end="277:5">if <condition pos:start="273:8" pos:end="273:17">(<expr pos:start="273:9" pos:end="273:16"><name pos:start="273:9" pos:end="273:12">bs_n</name> <operator pos:start="273:14" pos:end="273:14">&lt;</operator> <literal type="number" pos:start="273:16" pos:end="273:16">1</literal></expr>)</condition> <block pos:start="273:19" pos:end="277:5">{<block_content pos:start="275:9" pos:end="275:51">

        <expr_stmt pos:start="275:9" pos:end="275:51"><expr pos:start="275:9" pos:end="275:50"><call pos:start="275:9" pos:end="275:50"><name pos:start="275:9" pos:end="275:18">error_exit</name><argument_list pos:start="275:19" pos:end="275:50">(<argument pos:start="275:20" pos:end="275:49"><expr pos:start="275:20" pos:end="275:49"><literal type="string" pos:start="275:20" pos:end="275:49">"Must specify image file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>





    <if_stmt pos:start="283:5" pos:end="293:5"><if pos:start="283:5" pos:end="293:5">if <condition pos:start="283:8" pos:end="283:32">(<expr pos:start="283:9" pos:end="283:31"><name pos:start="283:9" pos:end="283:12">bs_n</name> <operator pos:start="283:14" pos:end="283:14">&gt;</operator> <literal type="number" pos:start="283:16" pos:end="283:16">1</literal> <operator pos:start="283:18" pos:end="283:19">&amp;&amp;</operator> <name pos:start="283:21" pos:end="283:31">out_baseimg</name></expr>)</condition> <block pos:start="283:34" pos:end="293:5">{<block_content pos:start="285:9" pos:end="291:17">

        <expr_stmt pos:start="285:9" pos:end="287:31"><expr pos:start="285:9" pos:end="287:30"><call pos:start="285:9" pos:end="287:30"><name pos:start="285:9" pos:end="285:20">error_report</name><argument_list pos:start="285:21" pos:end="287:30">(<argument pos:start="285:22" pos:end="287:29"><expr pos:start="285:22" pos:end="287:29"><literal type="string" pos:start="285:22" pos:end="285:75">"-B makes no sense when concatenating multiple input "</literal>

                     <literal type="string" pos:start="287:22" pos:end="287:29">"images"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:17"><expr pos:start="289:9" pos:end="289:16"><name pos:start="289:9" pos:end="289:11">ret</name> <operator pos:start="289:13" pos:end="289:13">=</operator> <operator pos:start="289:15" pos:end="289:15">-</operator><literal type="number" pos:start="289:16" pos:end="289:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="291:9" pos:end="291:17">goto <name pos:start="291:14" pos:end="291:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="297:5" pos:end="297:32"><expr pos:start="297:5" pos:end="297:31"><call pos:start="297:5" pos:end="297:31"><name pos:start="297:5" pos:end="297:23">qemu_progress_print</name><argument_list pos:start="297:24" pos:end="297:31">(<argument pos:start="297:25" pos:end="297:25"><expr pos:start="297:25" pos:end="297:25"><literal type="number" pos:start="297:25" pos:end="297:25">0</literal></expr></argument>, <argument pos:start="297:28" pos:end="297:30"><expr pos:start="297:28" pos:end="297:30"><literal type="number" pos:start="297:28" pos:end="297:30">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="301:5" pos:end="301:42"><expr pos:start="301:5" pos:end="301:41"><name pos:start="301:5" pos:end="301:6">bs</name> <operator pos:start="301:8" pos:end="301:8">=</operator> <call pos:start="301:10" pos:end="301:41"><name pos:start="301:10" pos:end="301:15">g_new0</name><argument_list pos:start="301:16" pos:end="301:41">(<argument pos:start="301:17" pos:end="301:34"><expr pos:start="301:17" pos:end="301:34"><name pos:start="301:17" pos:end="301:32">BlockDriverState</name> <operator pos:start="301:34" pos:end="301:34">*</operator></expr></argument>, <argument pos:start="301:37" pos:end="301:40"><expr pos:start="301:37" pos:end="301:40"><name pos:start="301:37" pos:end="301:40">bs_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:38"><expr pos:start="303:5" pos:end="303:37"><name pos:start="303:5" pos:end="303:14">bs_sectors</name> <operator pos:start="303:16" pos:end="303:16">=</operator> <call pos:start="303:18" pos:end="303:37"><name pos:start="303:18" pos:end="303:22">g_new</name><argument_list pos:start="303:23" pos:end="303:37">(<argument pos:start="303:24" pos:end="303:30"><expr pos:start="303:24" pos:end="303:30"><name pos:start="303:24" pos:end="303:30">int64_t</name></expr></argument>, <argument pos:start="303:33" pos:end="303:36"><expr pos:start="303:33" pos:end="303:36"><name pos:start="303:33" pos:end="303:36">bs_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="307:5" pos:end="307:22"><expr pos:start="307:5" pos:end="307:21"><name pos:start="307:5" pos:end="307:17">total_sectors</name> <operator pos:start="307:19" pos:end="307:19">=</operator> <literal type="number" pos:start="307:21" pos:end="307:21">0</literal></expr>;</expr_stmt>

    <for pos:start="309:5" pos:end="347:5">for <control pos:start="309:9" pos:end="309:39">(<init pos:start="309:10" pos:end="309:18"><expr pos:start="309:10" pos:end="309:17"><name pos:start="309:10" pos:end="309:13">bs_i</name> <operator pos:start="309:15" pos:end="309:15">=</operator> <literal type="number" pos:start="309:17" pos:end="309:17">0</literal></expr>;</init> <condition pos:start="309:20" pos:end="309:31"><expr pos:start="309:20" pos:end="309:30"><name pos:start="309:20" pos:end="309:23">bs_i</name> <operator pos:start="309:25" pos:end="309:25">&lt;</operator> <name pos:start="309:27" pos:end="309:30">bs_n</name></expr>;</condition> <incr pos:start="309:33" pos:end="309:38"><expr pos:start="309:33" pos:end="309:38"><name pos:start="309:33" pos:end="309:36">bs_i</name><operator pos:start="309:37" pos:end="309:38">++</operator></expr></incr>)</control> <block pos:start="309:41" pos:end="347:5">{<block_content pos:start="311:9" pos:end="345:42">

        <decl_stmt pos:start="311:9" pos:end="313:49"><decl pos:start="311:9" pos:end="313:48"><type pos:start="311:9" pos:end="311:14"><name pos:start="311:9" pos:end="311:12">char</name> <modifier pos:start="311:14" pos:end="311:14">*</modifier></type><name pos:start="311:15" pos:end="311:16">id</name> <init pos:start="311:18" pos:end="313:48">= <expr pos:start="311:20" pos:end="313:48"><ternary pos:start="311:20" pos:end="313:48"><condition pos:start="311:20" pos:end="311:29"><expr pos:start="311:20" pos:end="311:27"><name pos:start="311:20" pos:end="311:23">bs_n</name> <operator pos:start="311:25" pos:end="311:25">&gt;</operator> <literal type="number" pos:start="311:27" pos:end="311:27">1</literal></expr> ?</condition><then pos:start="311:31" pos:end="311:64"> <expr pos:start="311:31" pos:end="311:64"><call pos:start="311:31" pos:end="311:64"><name pos:start="311:31" pos:end="311:45">g_strdup_printf</name><argument_list pos:start="311:46" pos:end="311:64">(<argument pos:start="311:47" pos:end="311:57"><expr pos:start="311:47" pos:end="311:57"><literal type="string" pos:start="311:47" pos:end="311:57">"source %d"</literal></expr></argument>, <argument pos:start="311:60" pos:end="311:63"><expr pos:start="311:60" pos:end="311:63"><name pos:start="311:60" pos:end="311:63">bs_i</name></expr></argument>)</argument_list></call></expr>

                            </then><else pos:start="313:29" pos:end="313:48">: <expr pos:start="313:31" pos:end="313:48"><call pos:start="313:31" pos:end="313:48"><name pos:start="313:31" pos:end="313:38">g_strdup</name><argument_list pos:start="313:39" pos:end="313:48">(<argument pos:start="313:40" pos:end="313:47"><expr pos:start="313:40" pos:end="313:47"><literal type="string" pos:start="313:40" pos:end="313:47">"source"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="315:9" pos:end="317:46"><expr pos:start="315:9" pos:end="317:45"><name pos:start="315:9" pos:end="315:16"><name pos:start="315:9" pos:end="315:10">bs</name><index pos:start="315:11" pos:end="315:16">[<expr pos:start="315:12" pos:end="315:15"><name pos:start="315:12" pos:end="315:15">bs_i</name></expr>]</index></name> <operator pos:start="315:18" pos:end="315:18">=</operator> <call pos:start="315:20" pos:end="317:45"><name pos:start="315:20" pos:end="315:32">bdrv_new_open</name><argument_list pos:start="315:33" pos:end="317:45">(<argument pos:start="315:34" pos:end="315:35"><expr pos:start="315:34" pos:end="315:35"><name pos:start="315:34" pos:end="315:35">id</name></expr></argument>, <argument pos:start="315:38" pos:end="315:56"><expr pos:start="315:38" pos:end="315:56"><name pos:start="315:38" pos:end="315:56"><name pos:start="315:38" pos:end="315:41">argv</name><index pos:start="315:42" pos:end="315:56">[<expr pos:start="315:43" pos:end="315:55"><name pos:start="315:43" pos:end="315:48">optind</name> <operator pos:start="315:50" pos:end="315:50">+</operator> <name pos:start="315:52" pos:end="315:55">bs_i</name></expr>]</index></name></expr></argument>, <argument pos:start="315:59" pos:end="315:61"><expr pos:start="315:59" pos:end="315:61"><name pos:start="315:59" pos:end="315:61">fmt</name></expr></argument>, <argument pos:start="315:64" pos:end="315:75"><expr pos:start="315:64" pos:end="315:75"><name pos:start="315:64" pos:end="315:75">BDRV_O_FLAGS</name></expr></argument>,

                                 <argument pos:start="317:34" pos:end="317:37"><expr pos:start="317:34" pos:end="317:37"><name pos:start="317:34" pos:end="317:37">true</name></expr></argument>, <argument pos:start="317:40" pos:end="317:44"><expr pos:start="317:40" pos:end="317:44"><name pos:start="317:40" pos:end="317:44">quiet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:19"><expr pos:start="319:9" pos:end="319:18"><call pos:start="319:9" pos:end="319:18"><name pos:start="319:9" pos:end="319:14">g_free</name><argument_list pos:start="319:15" pos:end="319:18">(<argument pos:start="319:16" pos:end="319:17"><expr pos:start="319:16" pos:end="319:17"><name pos:start="319:16" pos:end="319:17">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="321:9" pos:end="329:9"><if pos:start="321:9" pos:end="329:9">if <condition pos:start="321:12" pos:end="321:22">(<expr pos:start="321:13" pos:end="321:21"><operator pos:start="321:13" pos:end="321:13">!</operator><name pos:start="321:14" pos:end="321:21"><name pos:start="321:14" pos:end="321:15">bs</name><index pos:start="321:16" pos:end="321:21">[<expr pos:start="321:17" pos:end="321:20"><name pos:start="321:17" pos:end="321:20">bs_i</name></expr>]</index></name></expr>)</condition> <block pos:start="321:24" pos:end="329:9">{<block_content pos:start="323:13" pos:end="327:21">

            <expr_stmt pos:start="323:13" pos:end="323:69"><expr pos:start="323:13" pos:end="323:68"><call pos:start="323:13" pos:end="323:68"><name pos:start="323:13" pos:end="323:24">error_report</name><argument_list pos:start="323:25" pos:end="323:68">(<argument pos:start="323:26" pos:end="323:46"><expr pos:start="323:26" pos:end="323:46"><literal type="string" pos:start="323:26" pos:end="323:46">"Could not open '%s'"</literal></expr></argument>, <argument pos:start="323:49" pos:end="323:67"><expr pos:start="323:49" pos:end="323:67"><name pos:start="323:49" pos:end="323:67"><name pos:start="323:49" pos:end="323:52">argv</name><index pos:start="323:53" pos:end="323:67">[<expr pos:start="323:54" pos:end="323:66"><name pos:start="323:54" pos:end="323:59">optind</name> <operator pos:start="323:61" pos:end="323:61">+</operator> <name pos:start="323:63" pos:end="323:66">bs_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="325:13" pos:end="325:21"><expr pos:start="325:13" pos:end="325:20"><name pos:start="325:13" pos:end="325:15">ret</name> <operator pos:start="325:17" pos:end="325:17">=</operator> <operator pos:start="325:19" pos:end="325:19">-</operator><literal type="number" pos:start="325:20" pos:end="325:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="327:13" pos:end="327:21">goto <name pos:start="327:18" pos:end="327:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:53"><expr pos:start="331:9" pos:end="331:52"><name pos:start="331:9" pos:end="331:24"><name pos:start="331:9" pos:end="331:18">bs_sectors</name><index pos:start="331:19" pos:end="331:24">[<expr pos:start="331:20" pos:end="331:23"><name pos:start="331:20" pos:end="331:23">bs_i</name></expr>]</index></name> <operator pos:start="331:26" pos:end="331:26">=</operator> <call pos:start="331:28" pos:end="331:52"><name pos:start="331:28" pos:end="331:42">bdrv_nb_sectors</name><argument_list pos:start="331:43" pos:end="331:52">(<argument pos:start="331:44" pos:end="331:51"><expr pos:start="331:44" pos:end="331:51"><name pos:start="331:44" pos:end="331:51"><name pos:start="331:44" pos:end="331:45">bs</name><index pos:start="331:46" pos:end="331:51">[<expr pos:start="331:47" pos:end="331:50"><name pos:start="331:47" pos:end="331:50">bs_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="333:9" pos:end="343:9"><if pos:start="333:9" pos:end="343:9">if <condition pos:start="333:12" pos:end="333:33">(<expr pos:start="333:13" pos:end="333:32"><name pos:start="333:13" pos:end="333:28"><name pos:start="333:13" pos:end="333:22">bs_sectors</name><index pos:start="333:23" pos:end="333:28">[<expr pos:start="333:24" pos:end="333:27"><name pos:start="333:24" pos:end="333:27">bs_i</name></expr>]</index></name> <operator pos:start="333:30" pos:end="333:30">&lt;</operator> <literal type="number" pos:start="333:32" pos:end="333:32">0</literal></expr>)</condition> <block pos:start="333:35" pos:end="343:9">{<block_content pos:start="335:13" pos:end="341:21">

            <expr_stmt pos:start="335:13" pos:end="337:75"><expr pos:start="335:13" pos:end="337:74"><call pos:start="335:13" pos:end="337:74"><name pos:start="335:13" pos:end="335:24">error_report</name><argument_list pos:start="335:25" pos:end="337:74">(<argument pos:start="335:26" pos:end="335:55"><expr pos:start="335:26" pos:end="335:55"><literal type="string" pos:start="335:26" pos:end="335:55">"Could not get size of %s: %s"</literal></expr></argument>,

                         <argument pos:start="337:26" pos:end="337:44"><expr pos:start="337:26" pos:end="337:44"><name pos:start="337:26" pos:end="337:44"><name pos:start="337:26" pos:end="337:29">argv</name><index pos:start="337:30" pos:end="337:44">[<expr pos:start="337:31" pos:end="337:43"><name pos:start="337:31" pos:end="337:36">optind</name> <operator pos:start="337:38" pos:end="337:38">+</operator> <name pos:start="337:40" pos:end="337:43">bs_i</name></expr>]</index></name></expr></argument>, <argument pos:start="337:47" pos:end="337:73"><expr pos:start="337:47" pos:end="337:73"><call pos:start="337:47" pos:end="337:73"><name pos:start="337:47" pos:end="337:54">strerror</name><argument_list pos:start="337:55" pos:end="337:73">(<argument pos:start="337:56" pos:end="337:72"><expr pos:start="337:56" pos:end="337:72"><operator pos:start="337:56" pos:end="337:56">-</operator><name pos:start="337:57" pos:end="337:72"><name pos:start="337:57" pos:end="337:66">bs_sectors</name><index pos:start="337:67" pos:end="337:72">[<expr pos:start="337:68" pos:end="337:71"><name pos:start="337:68" pos:end="337:71">bs_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:21"><expr pos:start="339:13" pos:end="339:20"><name pos:start="339:13" pos:end="339:15">ret</name> <operator pos:start="339:17" pos:end="339:17">=</operator> <operator pos:start="339:19" pos:end="339:19">-</operator><literal type="number" pos:start="339:20" pos:end="339:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="341:13" pos:end="341:21">goto <name pos:start="341:18" pos:end="341:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:42"><expr pos:start="345:9" pos:end="345:41"><name pos:start="345:9" pos:end="345:21">total_sectors</name> <operator pos:start="345:23" pos:end="345:24">+=</operator> <name pos:start="345:26" pos:end="345:41"><name pos:start="345:26" pos:end="345:35">bs_sectors</name><index pos:start="345:36" pos:end="345:41">[<expr pos:start="345:37" pos:end="345:40"><name pos:start="345:37" pos:end="345:40">bs_i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="351:5" pos:end="377:5"><if pos:start="351:5" pos:end="361:5">if <condition pos:start="351:8" pos:end="351:16">(<expr pos:start="351:9" pos:end="351:15"><name pos:start="351:9" pos:end="351:15">sn_opts</name></expr>)</condition> <block pos:start="351:18" pos:end="361:5">{<block_content pos:start="353:9" pos:end="359:49">

        <expr_stmt pos:start="353:9" pos:end="359:49"><expr pos:start="353:9" pos:end="359:48"><name pos:start="353:9" pos:end="353:11">ret</name> <operator pos:start="353:13" pos:end="353:13">=</operator> <call pos:start="353:15" pos:end="359:48"><name pos:start="353:15" pos:end="353:36">bdrv_snapshot_load_tmp</name><argument_list pos:start="353:37" pos:end="359:48">(<argument pos:start="353:38" pos:end="353:42"><expr pos:start="353:38" pos:end="353:42"><name pos:start="353:38" pos:end="353:42"><name pos:start="353:38" pos:end="353:39">bs</name><index pos:start="353:40" pos:end="353:42">[<expr pos:start="353:41" pos:end="353:41"><literal type="number" pos:start="353:41" pos:end="353:41">0</literal></expr>]</index></name></expr></argument>,

                                     <argument pos:start="355:38" pos:end="355:75"><expr pos:start="355:38" pos:end="355:75"><call pos:start="355:38" pos:end="355:75"><name pos:start="355:38" pos:end="355:49">qemu_opt_get</name><argument_list pos:start="355:50" pos:end="355:75">(<argument pos:start="355:51" pos:end="355:57"><expr pos:start="355:51" pos:end="355:57"><name pos:start="355:51" pos:end="355:57">sn_opts</name></expr></argument>, <argument pos:start="355:60" pos:end="355:74"><expr pos:start="355:60" pos:end="355:74"><name pos:start="355:60" pos:end="355:74">SNAPSHOT_OPT_ID</name></expr></argument>)</argument_list></call></expr></argument>,

                                     <argument pos:start="357:38" pos:end="357:77"><expr pos:start="357:38" pos:end="357:77"><call pos:start="357:38" pos:end="357:77"><name pos:start="357:38" pos:end="357:49">qemu_opt_get</name><argument_list pos:start="357:50" pos:end="357:77">(<argument pos:start="357:51" pos:end="357:57"><expr pos:start="357:51" pos:end="357:57"><name pos:start="357:51" pos:end="357:57">sn_opts</name></expr></argument>, <argument pos:start="357:60" pos:end="357:76"><expr pos:start="357:60" pos:end="357:76"><name pos:start="357:60" pos:end="357:76">SNAPSHOT_OPT_NAME</name></expr></argument>)</argument_list></call></expr></argument>,

                                     <argument pos:start="359:38" pos:end="359:47"><expr pos:start="359:38" pos:end="359:47"><operator pos:start="359:38" pos:end="359:38">&amp;</operator><name pos:start="359:39" pos:end="359:47">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="361:7" pos:end="377:5">else if <condition pos:start="361:15" pos:end="361:37">(<expr pos:start="361:16" pos:end="361:36"><name pos:start="361:16" pos:end="361:28">snapshot_name</name> <operator pos:start="361:30" pos:end="361:31">!=</operator> <name pos:start="361:33" pos:end="361:36">NULL</name></expr>)</condition> <block pos:start="361:39" pos:end="377:5">{<block_content pos:start="363:9" pos:end="375:79">

        <if_stmt pos:start="363:9" pos:end="371:9"><if pos:start="363:9" pos:end="371:9">if <condition pos:start="363:12" pos:end="363:21">(<expr pos:start="363:13" pos:end="363:20"><name pos:start="363:13" pos:end="363:16">bs_n</name> <operator pos:start="363:18" pos:end="363:18">&gt;</operator> <literal type="number" pos:start="363:20" pos:end="363:20">1</literal></expr>)</condition> <block pos:start="363:23" pos:end="371:9">{<block_content pos:start="365:13" pos:end="369:21">

            <expr_stmt pos:start="365:13" pos:end="365:75"><expr pos:start="365:13" pos:end="365:74"><call pos:start="365:13" pos:end="365:74"><name pos:start="365:13" pos:end="365:24">error_report</name><argument_list pos:start="365:25" pos:end="365:74">(<argument pos:start="365:26" pos:end="365:73"><expr pos:start="365:26" pos:end="365:73"><literal type="string" pos:start="365:26" pos:end="365:73">"No support for concatenating multiple snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:21"><expr pos:start="367:13" pos:end="367:20"><name pos:start="367:13" pos:end="367:15">ret</name> <operator pos:start="367:17" pos:end="367:17">=</operator> <operator pos:start="367:19" pos:end="367:19">-</operator><literal type="number" pos:start="367:20" pos:end="367:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="369:13" pos:end="369:21">goto <name pos:start="369:18" pos:end="369:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="375:9" pos:end="375:79"><expr pos:start="375:9" pos:end="375:78"><call pos:start="375:9" pos:end="375:78"><name pos:start="375:9" pos:end="375:44">bdrv_snapshot_load_tmp_by_id_or_name</name><argument_list pos:start="375:45" pos:end="375:78">(<argument pos:start="375:46" pos:end="375:50"><expr pos:start="375:46" pos:end="375:50"><name pos:start="375:46" pos:end="375:50"><name pos:start="375:46" pos:end="375:47">bs</name><index pos:start="375:48" pos:end="375:50">[<expr pos:start="375:49" pos:end="375:49"><literal type="number" pos:start="375:49" pos:end="375:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="375:53" pos:end="375:65"><expr pos:start="375:53" pos:end="375:65"><name pos:start="375:53" pos:end="375:65">snapshot_name</name></expr></argument>, <argument pos:start="375:68" pos:end="375:77"><expr pos:start="375:68" pos:end="375:77"><operator pos:start="375:68" pos:end="375:68">&amp;</operator><name pos:start="375:69" pos:end="375:77">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="379:5" pos:end="391:5"><if pos:start="379:5" pos:end="391:5">if <condition pos:start="379:8" pos:end="379:18">(<expr pos:start="379:9" pos:end="379:17"><name pos:start="379:9" pos:end="379:17">local_err</name></expr>)</condition> <block pos:start="379:20" pos:end="391:5">{<block_content pos:start="381:9" pos:end="389:17">

        <expr_stmt pos:start="381:9" pos:end="383:50"><expr pos:start="381:9" pos:end="383:49"><call pos:start="381:9" pos:end="383:49"><name pos:start="381:9" pos:end="381:20">error_report</name><argument_list pos:start="381:21" pos:end="383:49">(<argument pos:start="381:22" pos:end="381:50"><expr pos:start="381:22" pos:end="381:50"><literal type="string" pos:start="381:22" pos:end="381:50">"Failed to load snapshot: %s"</literal></expr></argument>,

                     <argument pos:start="383:22" pos:end="383:48"><expr pos:start="383:22" pos:end="383:48"><call pos:start="383:22" pos:end="383:48"><name pos:start="383:22" pos:end="383:37">error_get_pretty</name><argument_list pos:start="383:38" pos:end="383:48">(<argument pos:start="383:39" pos:end="383:47"><expr pos:start="383:39" pos:end="383:47"><name pos:start="383:39" pos:end="383:47">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:30"><expr pos:start="385:9" pos:end="385:29"><call pos:start="385:9" pos:end="385:29"><name pos:start="385:9" pos:end="385:18">error_free</name><argument_list pos:start="385:19" pos:end="385:29">(<argument pos:start="385:20" pos:end="385:28"><expr pos:start="385:20" pos:end="385:28"><name pos:start="385:20" pos:end="385:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:17"><expr pos:start="387:9" pos:end="387:16"><name pos:start="387:9" pos:end="387:11">ret</name> <operator pos:start="387:13" pos:end="387:13">=</operator> <operator pos:start="387:15" pos:end="387:15">-</operator><literal type="number" pos:start="387:16" pos:end="387:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="389:9" pos:end="389:17">goto <name pos:start="389:14" pos:end="389:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="395:5" pos:end="395:43">/* Find driver and parse its options */</comment>

    <expr_stmt pos:start="397:5" pos:end="397:36"><expr pos:start="397:5" pos:end="397:35"><name pos:start="397:5" pos:end="397:7">drv</name> <operator pos:start="397:9" pos:end="397:9">=</operator> <call pos:start="397:11" pos:end="397:35"><name pos:start="397:11" pos:end="397:26">bdrv_find_format</name><argument_list pos:start="397:27" pos:end="397:35">(<argument pos:start="397:28" pos:end="397:34"><expr pos:start="397:28" pos:end="397:34"><name pos:start="397:28" pos:end="397:34">out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="399:5" pos:end="407:5"><if pos:start="399:5" pos:end="407:5">if <condition pos:start="399:8" pos:end="399:13">(<expr pos:start="399:9" pos:end="399:12"><operator pos:start="399:9" pos:end="399:9">!</operator><name pos:start="399:10" pos:end="399:12">drv</name></expr>)</condition> <block pos:start="399:15" pos:end="407:5">{<block_content pos:start="401:9" pos:end="405:17">

        <expr_stmt pos:start="401:9" pos:end="401:58"><expr pos:start="401:9" pos:end="401:57"><call pos:start="401:9" pos:end="401:57"><name pos:start="401:9" pos:end="401:20">error_report</name><argument_list pos:start="401:21" pos:end="401:57">(<argument pos:start="401:22" pos:end="401:47"><expr pos:start="401:22" pos:end="401:47"><literal type="string" pos:start="401:22" pos:end="401:47">"Unknown file format '%s'"</literal></expr></argument>, <argument pos:start="401:50" pos:end="401:56"><expr pos:start="401:50" pos:end="401:56"><name pos:start="401:50" pos:end="401:56">out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="403:9" pos:end="403:17"><expr pos:start="403:9" pos:end="403:16"><name pos:start="403:9" pos:end="403:11">ret</name> <operator pos:start="403:13" pos:end="403:13">=</operator> <operator pos:start="403:15" pos:end="403:15">-</operator><literal type="number" pos:start="403:16" pos:end="403:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="405:9" pos:end="405:17">goto <name pos:start="405:14" pos:end="405:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="411:5" pos:end="411:55"><expr pos:start="411:5" pos:end="411:54"><name pos:start="411:5" pos:end="411:13">proto_drv</name> <operator pos:start="411:15" pos:end="411:15">=</operator> <call pos:start="411:17" pos:end="411:54"><name pos:start="411:17" pos:end="411:34">bdrv_find_protocol</name><argument_list pos:start="411:35" pos:end="411:54">(<argument pos:start="411:36" pos:end="411:47"><expr pos:start="411:36" pos:end="411:47"><name pos:start="411:36" pos:end="411:47">out_filename</name></expr></argument>, <argument pos:start="411:50" pos:end="411:53"><expr pos:start="411:50" pos:end="411:53"><name pos:start="411:50" pos:end="411:53">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="413:5" pos:end="421:5"><if pos:start="413:5" pos:end="421:5">if <condition pos:start="413:8" pos:end="413:19">(<expr pos:start="413:9" pos:end="413:18"><operator pos:start="413:9" pos:end="413:9">!</operator><name pos:start="413:10" pos:end="413:18">proto_drv</name></expr>)</condition> <block pos:start="413:21" pos:end="421:5">{<block_content pos:start="415:9" pos:end="419:17">

        <expr_stmt pos:start="415:9" pos:end="415:60"><expr pos:start="415:9" pos:end="415:59"><call pos:start="415:9" pos:end="415:59"><name pos:start="415:9" pos:end="415:20">error_report</name><argument_list pos:start="415:21" pos:end="415:59">(<argument pos:start="415:22" pos:end="415:44"><expr pos:start="415:22" pos:end="415:44"><literal type="string" pos:start="415:22" pos:end="415:44">"Unknown protocol '%s'"</literal></expr></argument>, <argument pos:start="415:47" pos:end="415:58"><expr pos:start="415:47" pos:end="415:58"><name pos:start="415:47" pos:end="415:58">out_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="417:9" pos:end="417:17"><expr pos:start="417:9" pos:end="417:16"><name pos:start="417:9" pos:end="417:11">ret</name> <operator pos:start="417:13" pos:end="417:13">=</operator> <operator pos:start="417:15" pos:end="417:15">-</operator><literal type="number" pos:start="417:16" pos:end="417:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="419:9" pos:end="419:17">goto <name pos:start="419:14" pos:end="419:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="425:5" pos:end="425:66"><expr pos:start="425:5" pos:end="425:65"><name pos:start="425:5" pos:end="425:15">create_opts</name> <operator pos:start="425:17" pos:end="425:17">=</operator> <call pos:start="425:19" pos:end="425:65"><name pos:start="425:19" pos:end="425:34">qemu_opts_append</name><argument_list pos:start="425:35" pos:end="425:65">(<argument pos:start="425:36" pos:end="425:46"><expr pos:start="425:36" pos:end="425:46"><name pos:start="425:36" pos:end="425:46">create_opts</name></expr></argument>, <argument pos:start="425:49" pos:end="425:64"><expr pos:start="425:49" pos:end="425:64"><name pos:start="425:49" pos:end="425:64"><name pos:start="425:49" pos:end="425:51">drv</name><operator pos:start="425:52" pos:end="425:53">-&gt;</operator><name pos:start="425:54" pos:end="425:64">create_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:72"><expr pos:start="427:5" pos:end="427:71"><name pos:start="427:5" pos:end="427:15">create_opts</name> <operator pos:start="427:17" pos:end="427:17">=</operator> <call pos:start="427:19" pos:end="427:71"><name pos:start="427:19" pos:end="427:34">qemu_opts_append</name><argument_list pos:start="427:35" pos:end="427:71">(<argument pos:start="427:36" pos:end="427:46"><expr pos:start="427:36" pos:end="427:46"><name pos:start="427:36" pos:end="427:46">create_opts</name></expr></argument>, <argument pos:start="427:49" pos:end="427:70"><expr pos:start="427:49" pos:end="427:70"><name pos:start="427:49" pos:end="427:70"><name pos:start="427:49" pos:end="427:57">proto_drv</name><operator pos:start="427:58" pos:end="427:59">-&gt;</operator><name pos:start="427:60" pos:end="427:70">create_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="431:5" pos:end="431:64"><expr pos:start="431:5" pos:end="431:63"><name pos:start="431:5" pos:end="431:8">opts</name> <operator pos:start="431:10" pos:end="431:10">=</operator> <call pos:start="431:12" pos:end="431:63"><name pos:start="431:12" pos:end="431:27">qemu_opts_create</name><argument_list pos:start="431:28" pos:end="431:63">(<argument pos:start="431:29" pos:end="431:39"><expr pos:start="431:29" pos:end="431:39"><name pos:start="431:29" pos:end="431:39">create_opts</name></expr></argument>, <argument pos:start="431:42" pos:end="431:45"><expr pos:start="431:42" pos:end="431:45"><name pos:start="431:42" pos:end="431:45">NULL</name></expr></argument>, <argument pos:start="431:48" pos:end="431:48"><expr pos:start="431:48" pos:end="431:48"><literal type="number" pos:start="431:48" pos:end="431:48">0</literal></expr></argument>, <argument pos:start="431:51" pos:end="431:62"><expr pos:start="431:51" pos:end="431:62"><operator pos:start="431:51" pos:end="431:51">&amp;</operator><name pos:start="431:52" pos:end="431:62">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="433:5" pos:end="441:5"><if pos:start="433:5" pos:end="441:5">if <condition pos:start="433:8" pos:end="433:59">(<expr pos:start="433:9" pos:end="433:58"><name pos:start="433:9" pos:end="433:15">options</name> <operator pos:start="433:17" pos:end="433:18">&amp;&amp;</operator> <call pos:start="433:20" pos:end="433:58"><name pos:start="433:20" pos:end="433:37">qemu_opts_do_parse</name><argument_list pos:start="433:38" pos:end="433:58">(<argument pos:start="433:39" pos:end="433:42"><expr pos:start="433:39" pos:end="433:42"><name pos:start="433:39" pos:end="433:42">opts</name></expr></argument>, <argument pos:start="433:45" pos:end="433:51"><expr pos:start="433:45" pos:end="433:51"><name pos:start="433:45" pos:end="433:51">options</name></expr></argument>, <argument pos:start="433:54" pos:end="433:57"><expr pos:start="433:54" pos:end="433:57"><name pos:start="433:54" pos:end="433:57">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="433:61" pos:end="441:5">{<block_content pos:start="435:9" pos:end="439:17">

        <expr_stmt pos:start="435:9" pos:end="435:70"><expr pos:start="435:9" pos:end="435:69"><call pos:start="435:9" pos:end="435:69"><name pos:start="435:9" pos:end="435:20">error_report</name><argument_list pos:start="435:21" pos:end="435:69">(<argument pos:start="435:22" pos:end="435:59"><expr pos:start="435:22" pos:end="435:59"><literal type="string" pos:start="435:22" pos:end="435:59">"Invalid options for file format '%s'"</literal></expr></argument>, <argument pos:start="435:62" pos:end="435:68"><expr pos:start="435:62" pos:end="435:68"><name pos:start="435:62" pos:end="435:68">out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="437:9" pos:end="437:17"><expr pos:start="437:9" pos:end="437:16"><name pos:start="437:9" pos:end="437:11">ret</name> <operator pos:start="437:13" pos:end="437:13">=</operator> <operator pos:start="437:15" pos:end="437:15">-</operator><literal type="number" pos:start="437:16" pos:end="437:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="439:9" pos:end="439:17">goto <name pos:start="439:14" pos:end="439:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="445:5" pos:end="445:67"><expr pos:start="445:5" pos:end="445:66"><call pos:start="445:5" pos:end="445:66"><name pos:start="445:5" pos:end="445:23">qemu_opt_set_number</name><argument_list pos:start="445:24" pos:end="445:66">(<argument pos:start="445:25" pos:end="445:28"><expr pos:start="445:25" pos:end="445:28"><name pos:start="445:25" pos:end="445:28">opts</name></expr></argument>, <argument pos:start="445:31" pos:end="445:44"><expr pos:start="445:31" pos:end="445:44"><name pos:start="445:31" pos:end="445:44">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="445:47" pos:end="445:65"><expr pos:start="445:47" pos:end="445:65"><name pos:start="445:47" pos:end="445:59">total_sectors</name> <operator pos:start="445:61" pos:end="445:61">*</operator> <literal type="number" pos:start="445:63" pos:end="445:65">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="447:5" pos:end="447:66"><expr pos:start="447:5" pos:end="447:65"><name pos:start="447:5" pos:end="447:7">ret</name> <operator pos:start="447:9" pos:end="447:9">=</operator> <call pos:start="447:11" pos:end="447:65"><name pos:start="447:11" pos:end="447:31">add_old_style_options</name><argument_list pos:start="447:32" pos:end="447:65">(<argument pos:start="447:33" pos:end="447:39"><expr pos:start="447:33" pos:end="447:39"><name pos:start="447:33" pos:end="447:39">out_fmt</name></expr></argument>, <argument pos:start="447:42" pos:end="447:45"><expr pos:start="447:42" pos:end="447:45"><name pos:start="447:42" pos:end="447:45">opts</name></expr></argument>, <argument pos:start="447:48" pos:end="447:58"><expr pos:start="447:48" pos:end="447:58"><name pos:start="447:48" pos:end="447:58">out_baseimg</name></expr></argument>, <argument pos:start="447:61" pos:end="447:64"><expr pos:start="447:61" pos:end="447:64"><name pos:start="447:61" pos:end="447:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="449:5" pos:end="453:5"><if pos:start="449:5" pos:end="453:5">if <condition pos:start="449:8" pos:end="449:16">(<expr pos:start="449:9" pos:end="449:15"><name pos:start="449:9" pos:end="449:11">ret</name> <operator pos:start="449:13" pos:end="449:13">&lt;</operator> <literal type="number" pos:start="449:15" pos:end="449:15">0</literal></expr>)</condition> <block pos:start="449:18" pos:end="453:5">{<block_content pos:start="451:9" pos:end="451:17">

        <goto pos:start="451:9" pos:end="451:17">goto <name pos:start="451:14" pos:end="451:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="457:5" pos:end="457:59">/* Get backing file name if -o backing_file was used */</comment>

    <expr_stmt pos:start="459:5" pos:end="459:67"><expr pos:start="459:5" pos:end="459:66"><name pos:start="459:5" pos:end="459:21">out_baseimg_param</name> <operator pos:start="459:23" pos:end="459:23">=</operator> <call pos:start="459:25" pos:end="459:66"><name pos:start="459:25" pos:end="459:36">qemu_opt_get</name><argument_list pos:start="459:37" pos:end="459:66">(<argument pos:start="459:38" pos:end="459:41"><expr pos:start="459:38" pos:end="459:41"><name pos:start="459:38" pos:end="459:41">opts</name></expr></argument>, <argument pos:start="459:44" pos:end="459:65"><expr pos:start="459:44" pos:end="459:65"><name pos:start="459:44" pos:end="459:65">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="461:5" pos:end="465:5"><if pos:start="461:5" pos:end="465:5">if <condition pos:start="461:8" pos:end="461:26">(<expr pos:start="461:9" pos:end="461:25"><name pos:start="461:9" pos:end="461:25">out_baseimg_param</name></expr>)</condition> <block pos:start="461:28" pos:end="465:5">{<block_content pos:start="463:9" pos:end="463:40">

        <expr_stmt pos:start="463:9" pos:end="463:40"><expr pos:start="463:9" pos:end="463:39"><name pos:start="463:9" pos:end="463:19">out_baseimg</name> <operator pos:start="463:21" pos:end="463:21">=</operator> <name pos:start="463:23" pos:end="463:39">out_baseimg_param</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="469:5" pos:end="469:43">/* Check if compression is supported */</comment>

    <if_stmt pos:start="471:5" pos:end="525:5"><if pos:start="471:5" pos:end="525:5">if <condition pos:start="471:8" pos:end="471:17">(<expr pos:start="471:9" pos:end="471:16"><name pos:start="471:9" pos:end="471:16">compress</name></expr>)</condition> <block pos:start="471:19" pos:end="525:5">{<block_content pos:start="473:9" pos:end="523:9">

        <decl_stmt pos:start="473:9" pos:end="475:62"><decl pos:start="473:9" pos:end="475:61"><type pos:start="473:9" pos:end="473:12"><name pos:start="473:9" pos:end="473:12">bool</name></type> <name pos:start="473:14" pos:end="473:23">encryption</name> <init pos:start="473:25" pos:end="475:61">=

            <expr pos:start="475:13" pos:end="475:61"><call pos:start="475:13" pos:end="475:61"><name pos:start="475:13" pos:end="475:29">qemu_opt_get_bool</name><argument_list pos:start="475:30" pos:end="475:61">(<argument pos:start="475:31" pos:end="475:34"><expr pos:start="475:31" pos:end="475:34"><name pos:start="475:31" pos:end="475:34">opts</name></expr></argument>, <argument pos:start="475:37" pos:end="475:53"><expr pos:start="475:37" pos:end="475:53"><name pos:start="475:37" pos:end="475:53">BLOCK_OPT_ENCRYPT</name></expr></argument>, <argument pos:start="475:56" pos:end="475:60"><expr pos:start="475:56" pos:end="475:60"><name pos:start="475:56" pos:end="475:60">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="477:9" pos:end="479:51"><decl pos:start="477:9" pos:end="479:50"><type pos:start="477:9" pos:end="477:20"><specifier pos:start="477:9" pos:end="477:13">const</specifier> <name pos:start="477:15" pos:end="477:18">char</name> <modifier pos:start="477:20" pos:end="477:20">*</modifier></type><name pos:start="477:21" pos:end="477:33">preallocation</name> <init pos:start="477:35" pos:end="479:50">=

            <expr pos:start="479:13" pos:end="479:50"><call pos:start="479:13" pos:end="479:50"><name pos:start="479:13" pos:end="479:24">qemu_opt_get</name><argument_list pos:start="479:25" pos:end="479:50">(<argument pos:start="479:26" pos:end="479:29"><expr pos:start="479:26" pos:end="479:29"><name pos:start="479:26" pos:end="479:29">opts</name></expr></argument>, <argument pos:start="479:32" pos:end="479:49"><expr pos:start="479:32" pos:end="479:49"><name pos:start="479:32" pos:end="479:49">BLOCK_OPT_PREALLOC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="483:9" pos:end="491:9"><if pos:start="483:9" pos:end="491:9">if <condition pos:start="483:12" pos:end="483:40">(<expr pos:start="483:13" pos:end="483:39"><operator pos:start="483:13" pos:end="483:13">!</operator><name pos:start="483:14" pos:end="483:39"><name pos:start="483:14" pos:end="483:16">drv</name><operator pos:start="483:17" pos:end="483:18">-&gt;</operator><name pos:start="483:19" pos:end="483:39">bdrv_write_compressed</name></name></expr>)</condition> <block pos:start="483:42" pos:end="491:9">{<block_content pos:start="485:13" pos:end="489:21">

            <expr_stmt pos:start="485:13" pos:end="485:75"><expr pos:start="485:13" pos:end="485:74"><call pos:start="485:13" pos:end="485:74"><name pos:start="485:13" pos:end="485:24">error_report</name><argument_list pos:start="485:25" pos:end="485:74">(<argument pos:start="485:26" pos:end="485:73"><expr pos:start="485:26" pos:end="485:73"><literal type="string" pos:start="485:26" pos:end="485:73">"Compression not supported for this file format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="487:13" pos:end="487:21"><expr pos:start="487:13" pos:end="487:20"><name pos:start="487:13" pos:end="487:15">ret</name> <operator pos:start="487:17" pos:end="487:17">=</operator> <operator pos:start="487:19" pos:end="487:19">-</operator><literal type="number" pos:start="487:20" pos:end="487:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="489:13" pos:end="489:21">goto <name pos:start="489:18" pos:end="489:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="495:9" pos:end="505:9"><if pos:start="495:9" pos:end="505:9">if <condition pos:start="495:12" pos:end="495:23">(<expr pos:start="495:13" pos:end="495:22"><name pos:start="495:13" pos:end="495:22">encryption</name></expr>)</condition> <block pos:start="495:25" pos:end="505:9">{<block_content pos:start="497:13" pos:end="503:21">

            <expr_stmt pos:start="497:13" pos:end="499:42"><expr pos:start="497:13" pos:end="499:41"><call pos:start="497:13" pos:end="499:41"><name pos:start="497:13" pos:end="497:24">error_report</name><argument_list pos:start="497:25" pos:end="499:41">(<argument pos:start="497:26" pos:end="499:40"><expr pos:start="497:26" pos:end="499:40"><literal type="string" pos:start="497:26" pos:end="497:71">"Compression and encryption not supported at "</literal>

                         <literal type="string" pos:start="499:26" pos:end="499:40">"the same time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="501:13" pos:end="501:21"><expr pos:start="501:13" pos:end="501:20"><name pos:start="501:13" pos:end="501:15">ret</name> <operator pos:start="501:17" pos:end="501:17">=</operator> <operator pos:start="501:19" pos:end="501:19">-</operator><literal type="number" pos:start="501:20" pos:end="501:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="503:13" pos:end="503:21">goto <name pos:start="503:18" pos:end="503:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="509:9" pos:end="523:9"><if pos:start="509:9" pos:end="523:9">if <condition pos:start="509:12" pos:end="511:44">(<expr pos:start="509:13" pos:end="511:43"><name pos:start="509:13" pos:end="509:25">preallocation</name>

            <operator pos:start="511:13" pos:end="511:14">&amp;&amp;</operator> <call pos:start="511:16" pos:end="511:43"><name pos:start="511:16" pos:end="511:21">strcmp</name><argument_list pos:start="511:22" pos:end="511:43">(<argument pos:start="511:23" pos:end="511:35"><expr pos:start="511:23" pos:end="511:35"><name pos:start="511:23" pos:end="511:35">preallocation</name></expr></argument>, <argument pos:start="511:38" pos:end="511:42"><expr pos:start="511:38" pos:end="511:42"><literal type="string" pos:start="511:38" pos:end="511:42">"off"</literal></expr></argument>)</argument_list></call></expr>)</condition>

        <block pos:start="513:9" pos:end="523:9">{<block_content pos:start="515:13" pos:end="521:21">

            <expr_stmt pos:start="515:13" pos:end="517:42"><expr pos:start="515:13" pos:end="517:41"><call pos:start="515:13" pos:end="517:41"><name pos:start="515:13" pos:end="515:24">error_report</name><argument_list pos:start="515:25" pos:end="517:41">(<argument pos:start="515:26" pos:end="517:40"><expr pos:start="515:26" pos:end="517:40"><literal type="string" pos:start="515:26" pos:end="515:74">"Compression and preallocation not supported at "</literal>

                         <literal type="string" pos:start="517:26" pos:end="517:40">"the same time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="519:13" pos:end="519:21"><expr pos:start="519:13" pos:end="519:20"><name pos:start="519:13" pos:end="519:15">ret</name> <operator pos:start="519:17" pos:end="519:17">=</operator> <operator pos:start="519:19" pos:end="519:19">-</operator><literal type="number" pos:start="519:20" pos:end="519:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="521:13" pos:end="521:21">goto <name pos:start="521:18" pos:end="521:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="529:5" pos:end="547:5"><if pos:start="529:5" pos:end="547:5">if <condition pos:start="529:8" pos:end="529:21">(<expr pos:start="529:9" pos:end="529:20"><operator pos:start="529:9" pos:end="529:9">!</operator><name pos:start="529:10" pos:end="529:20">skip_create</name></expr>)</condition> <block pos:start="529:23" pos:end="547:5">{<block_content pos:start="533:9" pos:end="545:9">

        <comment type="block" pos:start="531:9" pos:end="531:34">/* Create the new image */</comment>

        <expr_stmt pos:start="533:9" pos:end="533:63"><expr pos:start="533:9" pos:end="533:62"><name pos:start="533:9" pos:end="533:11">ret</name> <operator pos:start="533:13" pos:end="533:13">=</operator> <call pos:start="533:15" pos:end="533:62"><name pos:start="533:15" pos:end="533:25">bdrv_create</name><argument_list pos:start="533:26" pos:end="533:62">(<argument pos:start="533:27" pos:end="533:29"><expr pos:start="533:27" pos:end="533:29"><name pos:start="533:27" pos:end="533:29">drv</name></expr></argument>, <argument pos:start="533:32" pos:end="533:43"><expr pos:start="533:32" pos:end="533:43"><name pos:start="533:32" pos:end="533:43">out_filename</name></expr></argument>, <argument pos:start="533:46" pos:end="533:49"><expr pos:start="533:46" pos:end="533:49"><name pos:start="533:46" pos:end="533:49">opts</name></expr></argument>, <argument pos:start="533:52" pos:end="533:61"><expr pos:start="533:52" pos:end="533:61"><operator pos:start="533:52" pos:end="533:52">&amp;</operator><name pos:start="533:53" pos:end="533:61">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="535:9" pos:end="545:9"><if pos:start="535:9" pos:end="545:9">if <condition pos:start="535:12" pos:end="535:20">(<expr pos:start="535:13" pos:end="535:19"><name pos:start="535:13" pos:end="535:15">ret</name> <operator pos:start="535:17" pos:end="535:17">&lt;</operator> <literal type="number" pos:start="535:19" pos:end="535:19">0</literal></expr>)</condition> <block pos:start="535:22" pos:end="545:9">{<block_content pos:start="537:13" pos:end="543:21">

            <expr_stmt pos:start="537:13" pos:end="539:77"><expr pos:start="537:13" pos:end="539:76"><call pos:start="537:13" pos:end="539:76"><name pos:start="537:13" pos:end="537:24">error_report</name><argument_list pos:start="537:25" pos:end="539:76">(<argument pos:start="537:26" pos:end="537:60"><expr pos:start="537:26" pos:end="537:60"><literal type="string" pos:start="537:26" pos:end="537:60">"%s: error while converting %s: %s"</literal></expr></argument>,

                         <argument pos:start="539:26" pos:end="539:37"><expr pos:start="539:26" pos:end="539:37"><name pos:start="539:26" pos:end="539:37">out_filename</name></expr></argument>, <argument pos:start="539:40" pos:end="539:46"><expr pos:start="539:40" pos:end="539:46"><name pos:start="539:40" pos:end="539:46">out_fmt</name></expr></argument>, <argument pos:start="539:49" pos:end="539:75"><expr pos:start="539:49" pos:end="539:75"><call pos:start="539:49" pos:end="539:75"><name pos:start="539:49" pos:end="539:64">error_get_pretty</name><argument_list pos:start="539:65" pos:end="539:75">(<argument pos:start="539:66" pos:end="539:74"><expr pos:start="539:66" pos:end="539:74"><name pos:start="539:66" pos:end="539:74">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="541:13" pos:end="541:34"><expr pos:start="541:13" pos:end="541:33"><call pos:start="541:13" pos:end="541:33"><name pos:start="541:13" pos:end="541:22">error_free</name><argument_list pos:start="541:23" pos:end="541:33">(<argument pos:start="541:24" pos:end="541:32"><expr pos:start="541:24" pos:end="541:32"><name pos:start="541:24" pos:end="541:32">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="543:13" pos:end="543:21">goto <name pos:start="543:18" pos:end="543:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="551:5" pos:end="551:68"><expr pos:start="551:5" pos:end="551:67"><name pos:start="551:5" pos:end="551:9">flags</name> <operator pos:start="551:11" pos:end="551:11">=</operator> <ternary pos:start="551:13" pos:end="551:67"><condition pos:start="551:13" pos:end="551:24"><expr pos:start="551:13" pos:end="551:22"><name pos:start="551:13" pos:end="551:22">min_sparse</name></expr> ?</condition><then pos:start="551:26" pos:end="551:53"> <expr pos:start="551:26" pos:end="551:53"><operator pos:start="551:26" pos:end="551:26">(</operator><name pos:start="551:27" pos:end="551:37">BDRV_O_RDWR</name> <operator pos:start="551:39" pos:end="551:39">|</operator> <name pos:start="551:41" pos:end="551:52">BDRV_O_UNMAP</name><operator pos:start="551:53" pos:end="551:53">)</operator></expr> </then><else pos:start="551:55" pos:end="551:67">: <expr pos:start="551:57" pos:end="551:67"><name pos:start="551:57" pos:end="551:67">BDRV_O_RDWR</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="553:5" pos:end="553:48"><expr pos:start="553:5" pos:end="553:47"><name pos:start="553:5" pos:end="553:7">ret</name> <operator pos:start="553:9" pos:end="553:9">=</operator> <call pos:start="553:11" pos:end="553:47"><name pos:start="553:11" pos:end="553:32">bdrv_parse_cache_flags</name><argument_list pos:start="553:33" pos:end="553:47">(<argument pos:start="553:34" pos:end="553:38"><expr pos:start="553:34" pos:end="553:38"><name pos:start="553:34" pos:end="553:38">cache</name></expr></argument>, <argument pos:start="553:41" pos:end="553:46"><expr pos:start="553:41" pos:end="553:46"><operator pos:start="553:41" pos:end="553:41">&amp;</operator><name pos:start="553:42" pos:end="553:46">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="555:5" pos:end="561:5"><if pos:start="555:5" pos:end="561:5">if <condition pos:start="555:8" pos:end="555:16">(<expr pos:start="555:9" pos:end="555:15"><name pos:start="555:9" pos:end="555:11">ret</name> <operator pos:start="555:13" pos:end="555:13">&lt;</operator> <literal type="number" pos:start="555:15" pos:end="555:15">0</literal></expr>)</condition> <block pos:start="555:18" pos:end="561:5">{<block_content pos:start="557:9" pos:end="559:17">

        <expr_stmt pos:start="557:9" pos:end="557:56"><expr pos:start="557:9" pos:end="557:55"><call pos:start="557:9" pos:end="557:55"><name pos:start="557:9" pos:end="557:20">error_report</name><argument_list pos:start="557:21" pos:end="557:55">(<argument pos:start="557:22" pos:end="557:47"><expr pos:start="557:22" pos:end="557:47"><literal type="string" pos:start="557:22" pos:end="557:47">"Invalid cache option: %s"</literal></expr></argument>, <argument pos:start="557:50" pos:end="557:54"><expr pos:start="557:50" pos:end="557:54"><name pos:start="557:50" pos:end="557:54">cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="559:9" pos:end="559:17">goto <name pos:start="559:14" pos:end="559:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="565:5" pos:end="565:80"><expr pos:start="565:5" pos:end="565:79"><name pos:start="565:5" pos:end="565:10">out_bs</name> <operator pos:start="565:12" pos:end="565:12">=</operator> <call pos:start="565:14" pos:end="565:79"><name pos:start="565:14" pos:end="565:26">bdrv_new_open</name><argument_list pos:start="565:27" pos:end="565:79">(<argument pos:start="565:28" pos:end="565:35"><expr pos:start="565:28" pos:end="565:35"><literal type="string" pos:start="565:28" pos:end="565:35">"target"</literal></expr></argument>, <argument pos:start="565:38" pos:end="565:49"><expr pos:start="565:38" pos:end="565:49"><name pos:start="565:38" pos:end="565:49">out_filename</name></expr></argument>, <argument pos:start="565:52" pos:end="565:58"><expr pos:start="565:52" pos:end="565:58"><name pos:start="565:52" pos:end="565:58">out_fmt</name></expr></argument>, <argument pos:start="565:61" pos:end="565:65"><expr pos:start="565:61" pos:end="565:65"><name pos:start="565:61" pos:end="565:65">flags</name></expr></argument>, <argument pos:start="565:68" pos:end="565:71"><expr pos:start="565:68" pos:end="565:71"><name pos:start="565:68" pos:end="565:71">true</name></expr></argument>, <argument pos:start="565:74" pos:end="565:78"><expr pos:start="565:74" pos:end="565:78"><name pos:start="565:74" pos:end="565:78">quiet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="567:5" pos:end="573:5"><if pos:start="567:5" pos:end="573:5">if <condition pos:start="567:8" pos:end="567:16">(<expr pos:start="567:9" pos:end="567:15"><operator pos:start="567:9" pos:end="567:9">!</operator><name pos:start="567:10" pos:end="567:15">out_bs</name></expr>)</condition> <block pos:start="567:18" pos:end="573:5">{<block_content pos:start="569:9" pos:end="571:17">

        <expr_stmt pos:start="569:9" pos:end="569:17"><expr pos:start="569:9" pos:end="569:16"><name pos:start="569:9" pos:end="569:11">ret</name> <operator pos:start="569:13" pos:end="569:13">=</operator> <operator pos:start="569:15" pos:end="569:15">-</operator><literal type="number" pos:start="569:16" pos:end="569:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="571:9" pos:end="571:17">goto <name pos:start="571:14" pos:end="571:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="577:5" pos:end="577:13"><expr pos:start="577:5" pos:end="577:12"><name pos:start="577:5" pos:end="577:8">bs_i</name> <operator pos:start="577:10" pos:end="577:10">=</operator> <literal type="number" pos:start="577:12" pos:end="577:12">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="579:5" pos:end="579:18"><expr pos:start="579:5" pos:end="579:17"><name pos:start="579:5" pos:end="579:13">bs_offset</name> <operator pos:start="579:15" pos:end="579:15">=</operator> <literal type="number" pos:start="579:17" pos:end="579:17">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="583:5" pos:end="587:21">/* increase bufsectors from the default 4096 (2M) if opt_transfer_length

     * or discard_alignment of the out_bs is greater. Limit to 32768 (16MB)

     * as maximum. */</comment>

    <expr_stmt pos:start="589:5" pos:end="595:22"><expr pos:start="589:5" pos:end="595:21"><name pos:start="589:5" pos:end="589:14">bufsectors</name> <operator pos:start="589:16" pos:end="589:16">=</operator> <call pos:start="589:18" pos:end="595:21"><name pos:start="589:18" pos:end="589:20">MIN</name><argument_list pos:start="589:21" pos:end="595:21">(<argument pos:start="589:22" pos:end="589:26"><expr pos:start="589:22" pos:end="589:26"><literal type="number" pos:start="589:22" pos:end="589:26">32768</literal></expr></argument>,

                     <argument pos:start="591:22" pos:end="593:71"><expr pos:start="591:22" pos:end="593:71"><call pos:start="591:22" pos:end="593:71"><name pos:start="591:22" pos:end="591:24">MAX</name><argument_list pos:start="591:25" pos:end="593:71">(<argument pos:start="591:26" pos:end="591:35"><expr pos:start="591:26" pos:end="591:35"><name pos:start="591:26" pos:end="591:35">bufsectors</name></expr></argument>, <argument pos:start="591:38" pos:end="593:70"><expr pos:start="591:38" pos:end="593:70"><call pos:start="591:38" pos:end="593:70"><name pos:start="591:38" pos:end="591:40">MAX</name><argument_list pos:start="591:41" pos:end="593:70">(<argument pos:start="591:42" pos:end="591:71"><expr pos:start="591:42" pos:end="591:71"><name pos:start="591:42" pos:end="591:71"><name pos:start="591:42" pos:end="591:47">out_bs</name><operator pos:start="591:48" pos:end="591:49">-&gt;</operator><name pos:start="591:50" pos:end="591:51">bl</name><operator pos:start="591:52" pos:end="591:52">.</operator><name pos:start="591:53" pos:end="591:71">opt_transfer_length</name></name></expr></argument>,

                                         <argument pos:start="593:42" pos:end="593:69"><expr pos:start="593:42" pos:end="593:69"><name pos:start="593:42" pos:end="593:69"><name pos:start="593:42" pos:end="593:47">out_bs</name><operator pos:start="593:48" pos:end="593:49">-&gt;</operator><name pos:start="593:50" pos:end="593:51">bl</name><operator pos:start="593:52" pos:end="593:52">.</operator><name pos:start="593:53" pos:end="593:69">discard_alignment</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

                    )</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="599:5" pos:end="599:65"><expr pos:start="599:5" pos:end="599:64"><name pos:start="599:5" pos:end="599:7">buf</name> <operator pos:start="599:9" pos:end="599:9">=</operator> <call pos:start="599:11" pos:end="599:64"><name pos:start="599:11" pos:end="599:25">qemu_blockalign</name><argument_list pos:start="599:26" pos:end="599:64">(<argument pos:start="599:27" pos:end="599:32"><expr pos:start="599:27" pos:end="599:32"><name pos:start="599:27" pos:end="599:32">out_bs</name></expr></argument>, <argument pos:start="599:35" pos:end="599:63"><expr pos:start="599:35" pos:end="599:63"><name pos:start="599:35" pos:end="599:44">bufsectors</name> <operator pos:start="599:46" pos:end="599:46">*</operator> <name pos:start="599:48" pos:end="599:63">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="603:5" pos:end="627:5"><if pos:start="603:5" pos:end="627:5">if <condition pos:start="603:8" pos:end="603:20">(<expr pos:start="603:9" pos:end="603:19"><name pos:start="603:9" pos:end="603:19">skip_create</name></expr>)</condition> <block pos:start="603:22" pos:end="627:5">{<block_content pos:start="605:9" pos:end="625:9">

        <decl_stmt pos:start="605:9" pos:end="605:57"><decl pos:start="605:9" pos:end="605:56"><type pos:start="605:9" pos:end="605:15"><name pos:start="605:9" pos:end="605:15">int64_t</name></type> <name pos:start="605:17" pos:end="605:30">output_sectors</name> <init pos:start="605:32" pos:end="605:56">= <expr pos:start="605:34" pos:end="605:56"><call pos:start="605:34" pos:end="605:56"><name pos:start="605:34" pos:end="605:48">bdrv_nb_sectors</name><argument_list pos:start="605:49" pos:end="605:56">(<argument pos:start="605:50" pos:end="605:55"><expr pos:start="605:50" pos:end="605:55"><name pos:start="605:50" pos:end="605:55">out_bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="607:9" pos:end="625:9"><if pos:start="607:9" pos:end="617:9">if <condition pos:start="607:12" pos:end="607:31">(<expr pos:start="607:13" pos:end="607:30"><name pos:start="607:13" pos:end="607:26">output_sectors</name> <operator pos:start="607:28" pos:end="607:28">&lt;</operator> <literal type="number" pos:start="607:30" pos:end="607:30">0</literal></expr>)</condition> <block pos:start="607:33" pos:end="617:9">{<block_content pos:start="609:13" pos:end="615:21">

            <expr_stmt pos:start="609:13" pos:end="611:52"><expr pos:start="609:13" pos:end="611:51"><call pos:start="609:13" pos:end="611:51"><name pos:start="609:13" pos:end="609:24">error_report</name><argument_list pos:start="609:25" pos:end="611:51">(<argument pos:start="609:26" pos:end="609:66"><expr pos:start="609:26" pos:end="609:66"><literal type="string" pos:start="609:26" pos:end="609:66">"unable to get output image length: %s\n"</literal></expr></argument>,

                         <argument pos:start="611:26" pos:end="611:50"><expr pos:start="611:26" pos:end="611:50"><call pos:start="611:26" pos:end="611:50"><name pos:start="611:26" pos:end="611:33">strerror</name><argument_list pos:start="611:34" pos:end="611:50">(<argument pos:start="611:35" pos:end="611:49"><expr pos:start="611:35" pos:end="611:49"><operator pos:start="611:35" pos:end="611:35">-</operator><name pos:start="611:36" pos:end="611:49">output_sectors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="613:13" pos:end="613:21"><expr pos:start="613:13" pos:end="613:20"><name pos:start="613:13" pos:end="613:15">ret</name> <operator pos:start="613:17" pos:end="613:17">=</operator> <operator pos:start="613:19" pos:end="613:19">-</operator><literal type="number" pos:start="613:20" pos:end="613:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="615:13" pos:end="615:21">goto <name pos:start="615:18" pos:end="615:20">out</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="617:11" pos:end="625:9">else if <condition pos:start="617:19" pos:end="617:50">(<expr pos:start="617:20" pos:end="617:49"><name pos:start="617:20" pos:end="617:33">output_sectors</name> <operator pos:start="617:35" pos:end="617:35">&lt;</operator> <name pos:start="617:37" pos:end="617:49">total_sectors</name></expr>)</condition> <block pos:start="617:52" pos:end="625:9">{<block_content pos:start="619:13" pos:end="623:21">

            <expr_stmt pos:start="619:13" pos:end="619:67"><expr pos:start="619:13" pos:end="619:66"><call pos:start="619:13" pos:end="619:66"><name pos:start="619:13" pos:end="619:24">error_report</name><argument_list pos:start="619:25" pos:end="619:66">(<argument pos:start="619:26" pos:end="619:65"><expr pos:start="619:26" pos:end="619:65"><literal type="string" pos:start="619:26" pos:end="619:65">"output file is smaller than input file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="621:13" pos:end="621:21"><expr pos:start="621:13" pos:end="621:20"><name pos:start="621:13" pos:end="621:15">ret</name> <operator pos:start="621:17" pos:end="621:17">=</operator> <operator pos:start="621:19" pos:end="621:19">-</operator><literal type="number" pos:start="621:20" pos:end="621:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="623:13" pos:end="623:21">goto <name pos:start="623:18" pos:end="623:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="631:5" pos:end="631:24"><expr pos:start="631:5" pos:end="631:23"><name pos:start="631:5" pos:end="631:19">cluster_sectors</name> <operator pos:start="631:21" pos:end="631:21">=</operator> <literal type="number" pos:start="631:23" pos:end="631:23">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="633:5" pos:end="633:38"><expr pos:start="633:5" pos:end="633:37"><name pos:start="633:5" pos:end="633:7">ret</name> <operator pos:start="633:9" pos:end="633:9">=</operator> <call pos:start="633:11" pos:end="633:37"><name pos:start="633:11" pos:end="633:23">bdrv_get_info</name><argument_list pos:start="633:24" pos:end="633:37">(<argument pos:start="633:25" pos:end="633:30"><expr pos:start="633:25" pos:end="633:30"><name pos:start="633:25" pos:end="633:30">out_bs</name></expr></argument>, <argument pos:start="633:33" pos:end="633:36"><expr pos:start="633:33" pos:end="633:36"><operator pos:start="633:33" pos:end="633:33">&amp;</operator><name pos:start="633:34" pos:end="633:36">bdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="635:5" pos:end="651:5"><if pos:start="635:5" pos:end="645:5">if <condition pos:start="635:8" pos:end="635:16">(<expr pos:start="635:9" pos:end="635:15"><name pos:start="635:9" pos:end="635:11">ret</name> <operator pos:start="635:13" pos:end="635:13">&lt;</operator> <literal type="number" pos:start="635:15" pos:end="635:15">0</literal></expr>)</condition> <block pos:start="635:18" pos:end="645:5">{<block_content pos:start="637:9" pos:end="643:9">

        <if_stmt pos:start="637:9" pos:end="643:9"><if pos:start="637:9" pos:end="643:9">if <condition pos:start="637:12" pos:end="637:21">(<expr pos:start="637:13" pos:end="637:20"><name pos:start="637:13" pos:end="637:20">compress</name></expr>)</condition> <block pos:start="637:23" pos:end="643:9">{<block_content pos:start="639:13" pos:end="641:21">

            <expr_stmt pos:start="639:13" pos:end="639:60"><expr pos:start="639:13" pos:end="639:59"><call pos:start="639:13" pos:end="639:59"><name pos:start="639:13" pos:end="639:24">error_report</name><argument_list pos:start="639:25" pos:end="639:59">(<argument pos:start="639:26" pos:end="639:58"><expr pos:start="639:26" pos:end="639:58"><literal type="string" pos:start="639:26" pos:end="639:58">"could not get block driver info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="641:13" pos:end="641:21">goto <name pos:start="641:18" pos:end="641:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="645:7" pos:end="651:5">else <block pos:start="645:12" pos:end="651:5">{<block_content pos:start="647:9" pos:end="649:62">

        <expr_stmt pos:start="647:9" pos:end="647:59"><expr pos:start="647:9" pos:end="647:58"><name pos:start="647:9" pos:end="647:16">compress</name> <operator pos:start="647:18" pos:end="647:18">=</operator> <name pos:start="647:20" pos:end="647:27">compress</name> <operator pos:start="647:29" pos:end="647:30">||</operator> <name pos:start="647:32" pos:end="647:58"><name pos:start="647:32" pos:end="647:34">bdi</name><operator pos:start="647:35" pos:end="647:35">.</operator><name pos:start="647:36" pos:end="647:58">needs_compressed_writes</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="649:9" pos:end="649:62"><expr pos:start="649:9" pos:end="649:61"><name pos:start="649:9" pos:end="649:23">cluster_sectors</name> <operator pos:start="649:25" pos:end="649:25">=</operator> <name pos:start="649:27" pos:end="649:42"><name pos:start="649:27" pos:end="649:29">bdi</name><operator pos:start="649:30" pos:end="649:30">.</operator><name pos:start="649:31" pos:end="649:42">cluster_size</name></name> <operator pos:start="649:44" pos:end="649:44">/</operator> <name pos:start="649:46" pos:end="649:61">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="655:5" pos:end="1047:5"><if pos:start="655:5" pos:end="795:5">if <condition pos:start="655:8" pos:end="655:17">(<expr pos:start="655:9" pos:end="655:16"><name pos:start="655:9" pos:end="655:16">compress</name></expr>)</condition> <block pos:start="655:19" pos:end="795:5">{<block_content pos:start="657:9" pos:end="793:50">

        <if_stmt pos:start="657:9" pos:end="665:9"><if pos:start="657:9" pos:end="665:9">if <condition pos:start="657:12" pos:end="657:65">(<expr pos:start="657:13" pos:end="657:64"><name pos:start="657:13" pos:end="657:27">cluster_sectors</name> <operator pos:start="657:29" pos:end="657:30">&lt;=</operator> <literal type="number" pos:start="657:32" pos:end="657:32">0</literal> <operator pos:start="657:34" pos:end="657:35">||</operator> <name pos:start="657:37" pos:end="657:51">cluster_sectors</name> <operator pos:start="657:53" pos:end="657:53">&gt;</operator> <name pos:start="657:55" pos:end="657:64">bufsectors</name></expr>)</condition> <block pos:start="657:67" pos:end="665:9">{<block_content pos:start="659:13" pos:end="663:21">

            <expr_stmt pos:start="659:13" pos:end="659:49"><expr pos:start="659:13" pos:end="659:48"><call pos:start="659:13" pos:end="659:48"><name pos:start="659:13" pos:end="659:24">error_report</name><argument_list pos:start="659:25" pos:end="659:48">(<argument pos:start="659:26" pos:end="659:47"><expr pos:start="659:26" pos:end="659:47"><literal type="string" pos:start="659:26" pos:end="659:47">"invalid cluster size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="661:13" pos:end="661:21"><expr pos:start="661:13" pos:end="661:20"><name pos:start="661:13" pos:end="661:15">ret</name> <operator pos:start="661:17" pos:end="661:17">=</operator> <operator pos:start="661:19" pos:end="661:19">-</operator><literal type="number" pos:start="661:20" pos:end="661:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="663:13" pos:end="663:21">goto <name pos:start="663:18" pos:end="663:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="667:9" pos:end="667:23"><expr pos:start="667:9" pos:end="667:22"><name pos:start="667:9" pos:end="667:18">sector_num</name> <operator pos:start="667:20" pos:end="667:20">=</operator> <literal type="number" pos:start="667:22" pos:end="667:22">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="671:9" pos:end="671:35"><expr pos:start="671:9" pos:end="671:34"><name pos:start="671:9" pos:end="671:18">nb_sectors</name> <operator pos:start="671:20" pos:end="671:20">=</operator> <name pos:start="671:22" pos:end="671:34">total_sectors</name></expr>;</expr_stmt>



        <for pos:start="675:9" pos:end="789:9">for<control pos:start="675:12" pos:end="675:15">(<init pos:start="675:13" pos:end="675:13">;</init><condition pos:start="675:14" pos:end="675:14">;</condition><incr/>)</control> <block pos:start="675:17" pos:end="789:9">{<block_content pos:start="677:13" pos:end="787:71">

            <decl_stmt pos:start="677:13" pos:end="677:27"><decl pos:start="677:13" pos:end="677:26"><type pos:start="677:13" pos:end="677:19"><name pos:start="677:13" pos:end="677:19">int64_t</name></type> <name pos:start="677:21" pos:end="677:26">bs_num</name></decl>;</decl_stmt>

            <decl_stmt pos:start="679:13" pos:end="679:26"><decl pos:start="679:13" pos:end="679:25"><type pos:start="679:13" pos:end="679:15"><name pos:start="679:13" pos:end="679:15">int</name></type> <name pos:start="679:17" pos:end="679:25">remainder</name></decl>;</decl_stmt>

            <decl_stmt pos:start="681:13" pos:end="681:26"><decl pos:start="681:13" pos:end="681:25"><type pos:start="681:13" pos:end="681:21"><name pos:start="681:13" pos:end="681:19">uint8_t</name> <modifier pos:start="681:21" pos:end="681:21">*</modifier></type><name pos:start="681:22" pos:end="681:25">buf2</name></decl>;</decl_stmt>



            <expr_stmt pos:start="685:13" pos:end="685:52"><expr pos:start="685:13" pos:end="685:51"><name pos:start="685:13" pos:end="685:22">nb_sectors</name> <operator pos:start="685:24" pos:end="685:24">=</operator> <name pos:start="685:26" pos:end="685:38">total_sectors</name> <operator pos:start="685:40" pos:end="685:40">-</operator> <name pos:start="685:42" pos:end="685:51">sector_num</name></expr>;</expr_stmt>

            <if_stmt pos:start="687:13" pos:end="689:22"><if pos:start="687:13" pos:end="689:22">if <condition pos:start="687:16" pos:end="687:32">(<expr pos:start="687:17" pos:end="687:31"><name pos:start="687:17" pos:end="687:26">nb_sectors</name> <operator pos:start="687:28" pos:end="687:29">&lt;=</operator> <literal type="number" pos:start="687:31" pos:end="687:31">0</literal></expr>)</condition><block type="pseudo" pos:start="689:17" pos:end="689:22"><block_content pos:start="689:17" pos:end="689:22">

                <break pos:start="689:17" pos:end="689:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="691:13" pos:end="697:31"><if pos:start="691:13" pos:end="693:36">if <condition pos:start="691:16" pos:end="691:46">(<expr pos:start="691:17" pos:end="691:45"><name pos:start="691:17" pos:end="691:26">nb_sectors</name> <operator pos:start="691:28" pos:end="691:29">&gt;=</operator> <name pos:start="691:31" pos:end="691:45">cluster_sectors</name></expr>)</condition><block type="pseudo" pos:start="693:17" pos:end="693:36"><block_content pos:start="693:17" pos:end="693:36">

                <expr_stmt pos:start="693:17" pos:end="693:36"><expr pos:start="693:17" pos:end="693:35"><name pos:start="693:17" pos:end="693:17">n</name> <operator pos:start="693:19" pos:end="693:19">=</operator> <name pos:start="693:21" pos:end="693:35">cluster_sectors</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="695:13" pos:end="697:31">else<block type="pseudo" pos:start="697:17" pos:end="697:31"><block_content pos:start="697:17" pos:end="697:31">

                <expr_stmt pos:start="697:17" pos:end="697:31"><expr pos:start="697:17" pos:end="697:30"><name pos:start="697:17" pos:end="697:17">n</name> <operator pos:start="697:19" pos:end="697:19">=</operator> <name pos:start="697:21" pos:end="697:30">nb_sectors</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="701:13" pos:end="701:44"><expr pos:start="701:13" pos:end="701:43"><name pos:start="701:13" pos:end="701:18">bs_num</name> <operator pos:start="701:20" pos:end="701:20">=</operator> <name pos:start="701:22" pos:end="701:31">sector_num</name> <operator pos:start="701:33" pos:end="701:33">-</operator> <name pos:start="701:35" pos:end="701:43">bs_offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="703:13" pos:end="703:33"><expr pos:start="703:13" pos:end="703:32"><call pos:start="703:13" pos:end="703:32"><name pos:start="703:13" pos:end="703:18">assert</name> <argument_list pos:start="703:20" pos:end="703:32">(<argument pos:start="703:21" pos:end="703:31"><expr pos:start="703:21" pos:end="703:31"><name pos:start="703:21" pos:end="703:26">bs_num</name> <operator pos:start="703:28" pos:end="703:29">&gt;=</operator> <literal type="number" pos:start="703:31" pos:end="703:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="705:13" pos:end="705:26"><expr pos:start="705:13" pos:end="705:25"><name pos:start="705:13" pos:end="705:21">remainder</name> <operator pos:start="705:23" pos:end="705:23">=</operator> <name pos:start="705:25" pos:end="705:25">n</name></expr>;</expr_stmt>

            <expr_stmt pos:start="707:13" pos:end="707:23"><expr pos:start="707:13" pos:end="707:22"><name pos:start="707:13" pos:end="707:16">buf2</name> <operator pos:start="707:18" pos:end="707:18">=</operator> <name pos:start="707:20" pos:end="707:22">buf</name></expr>;</expr_stmt>

            <while pos:start="709:13" pos:end="763:13">while <condition pos:start="709:19" pos:end="709:33">(<expr pos:start="709:20" pos:end="709:32"><name pos:start="709:20" pos:end="709:28">remainder</name> <operator pos:start="709:30" pos:end="709:30">&gt;</operator> <literal type="number" pos:start="709:32" pos:end="709:32">0</literal></expr>)</condition> <block pos:start="709:35" pos:end="763:13">{<block_content pos:start="711:17" pos:end="761:34">

                <decl_stmt pos:start="711:17" pos:end="711:25"><decl pos:start="711:17" pos:end="711:24"><type pos:start="711:17" pos:end="711:19"><name pos:start="711:17" pos:end="711:19">int</name></type> <name pos:start="711:21" pos:end="711:24">nlow</name></decl>;</decl_stmt>

                <while pos:start="713:17" pos:end="729:17">while <condition pos:start="713:23" pos:end="713:50">(<expr pos:start="713:24" pos:end="713:49"><name pos:start="713:24" pos:end="713:29">bs_num</name> <operator pos:start="713:31" pos:end="713:32">==</operator> <name pos:start="713:34" pos:end="713:49"><name pos:start="713:34" pos:end="713:43">bs_sectors</name><index pos:start="713:44" pos:end="713:49">[<expr pos:start="713:45" pos:end="713:48"><name pos:start="713:45" pos:end="713:48">bs_i</name></expr>]</index></name></expr>)</condition> <block pos:start="713:52" pos:end="729:17">{<block_content pos:start="715:21" pos:end="721:31">

                    <expr_stmt pos:start="715:21" pos:end="715:50"><expr pos:start="715:21" pos:end="715:49"><name pos:start="715:21" pos:end="715:29">bs_offset</name> <operator pos:start="715:31" pos:end="715:32">+=</operator> <name pos:start="715:34" pos:end="715:49"><name pos:start="715:34" pos:end="715:43">bs_sectors</name><index pos:start="715:44" pos:end="715:49">[<expr pos:start="715:45" pos:end="715:48"><name pos:start="715:45" pos:end="715:48">bs_i</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="717:21" pos:end="717:27"><expr pos:start="717:21" pos:end="717:26"><name pos:start="717:21" pos:end="717:24">bs_i</name><operator pos:start="717:25" pos:end="717:26">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="719:21" pos:end="719:41"><expr pos:start="719:21" pos:end="719:40"><call pos:start="719:21" pos:end="719:40"><name pos:start="719:21" pos:end="719:26">assert</name> <argument_list pos:start="719:28" pos:end="719:40">(<argument pos:start="719:29" pos:end="719:39"><expr pos:start="719:29" pos:end="719:39"><name pos:start="719:29" pos:end="719:32">bs_i</name> <operator pos:start="719:34" pos:end="719:34">&lt;</operator> <name pos:start="719:36" pos:end="719:39">bs_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="721:21" pos:end="721:31"><expr pos:start="721:21" pos:end="721:30"><name pos:start="721:21" pos:end="721:26">bs_num</name> <operator pos:start="721:28" pos:end="721:28">=</operator> <literal type="number" pos:start="721:30" pos:end="721:30">0</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="723:21" pos:end="727:79">/* printf("changing part: sector_num=%" PRId64 ", "

                       "bs_i=%d, bs_offset=%" PRId64 ", bs_sectors=%" PRId64

                       "\n", sector_num, bs_i, bs_offset, bs_sectors[bs_i]); */</comment>

                </block_content>}</block></while>

                <expr_stmt pos:start="731:17" pos:end="731:51"><expr pos:start="731:17" pos:end="731:50"><call pos:start="731:17" pos:end="731:50"><name pos:start="731:17" pos:end="731:22">assert</name> <argument_list pos:start="731:24" pos:end="731:50">(<argument pos:start="731:25" pos:end="731:49"><expr pos:start="731:25" pos:end="731:49"><name pos:start="731:25" pos:end="731:30">bs_num</name> <operator pos:start="731:32" pos:end="731:32">&lt;</operator> <name pos:start="731:34" pos:end="731:49"><name pos:start="731:34" pos:end="731:43">bs_sectors</name><index pos:start="731:44" pos:end="731:49">[<expr pos:start="731:45" pos:end="731:48"><name pos:start="731:45" pos:end="731:48">bs_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="735:17" pos:end="737:60"><expr pos:start="735:17" pos:end="737:59"><name pos:start="735:17" pos:end="735:20">nlow</name> <operator pos:start="735:22" pos:end="735:22">=</operator> <ternary pos:start="735:24" pos:end="737:59"><condition pos:start="735:24" pos:end="737:21"><expr pos:start="735:24" pos:end="735:60"><name pos:start="735:24" pos:end="735:32">remainder</name> <operator pos:start="735:34" pos:end="735:34">&gt;</operator> <name pos:start="735:36" pos:end="735:51"><name pos:start="735:36" pos:end="735:45">bs_sectors</name><index pos:start="735:46" pos:end="735:51">[<expr pos:start="735:47" pos:end="735:50"><name pos:start="735:47" pos:end="735:50">bs_i</name></expr>]</index></name> <operator pos:start="735:53" pos:end="735:53">-</operator> <name pos:start="735:55" pos:end="735:60">bs_num</name></expr>

                    ?</condition><then pos:start="737:23" pos:end="737:47"> <expr pos:start="737:23" pos:end="737:47"><name pos:start="737:23" pos:end="737:38"><name pos:start="737:23" pos:end="737:32">bs_sectors</name><index pos:start="737:33" pos:end="737:38">[<expr pos:start="737:34" pos:end="737:37"><name pos:start="737:34" pos:end="737:37">bs_i</name></expr>]</index></name> <operator pos:start="737:40" pos:end="737:40">-</operator> <name pos:start="737:42" pos:end="737:47">bs_num</name></expr> </then><else pos:start="737:49" pos:end="737:59">: <expr pos:start="737:51" pos:end="737:59"><name pos:start="737:51" pos:end="737:59">remainder</name></expr></else></ternary></expr>;</expr_stmt>



                <expr_stmt pos:start="741:17" pos:end="741:62"><expr pos:start="741:17" pos:end="741:61"><name pos:start="741:17" pos:end="741:19">ret</name> <operator pos:start="741:21" pos:end="741:21">=</operator> <call pos:start="741:23" pos:end="741:61"><name pos:start="741:23" pos:end="741:31">bdrv_read</name><argument_list pos:start="741:32" pos:end="741:61">(<argument pos:start="741:33" pos:end="741:40"><expr pos:start="741:33" pos:end="741:40"><name pos:start="741:33" pos:end="741:40"><name pos:start="741:33" pos:end="741:34">bs</name><index pos:start="741:35" pos:end="741:40">[<expr pos:start="741:36" pos:end="741:39"><name pos:start="741:36" pos:end="741:39">bs_i</name></expr>]</index></name></expr></argument>, <argument pos:start="741:43" pos:end="741:48"><expr pos:start="741:43" pos:end="741:48"><name pos:start="741:43" pos:end="741:48">bs_num</name></expr></argument>, <argument pos:start="741:51" pos:end="741:54"><expr pos:start="741:51" pos:end="741:54"><name pos:start="741:51" pos:end="741:54">buf2</name></expr></argument>, <argument pos:start="741:57" pos:end="741:60"><expr pos:start="741:57" pos:end="741:60"><name pos:start="741:57" pos:end="741:60">nlow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="743:17" pos:end="751:17"><if pos:start="743:17" pos:end="751:17">if <condition pos:start="743:20" pos:end="743:28">(<expr pos:start="743:21" pos:end="743:27"><name pos:start="743:21" pos:end="743:23">ret</name> <operator pos:start="743:25" pos:end="743:25">&lt;</operator> <literal type="number" pos:start="743:27" pos:end="743:27">0</literal></expr>)</condition> <block pos:start="743:30" pos:end="751:17">{<block_content pos:start="745:21" pos:end="749:29">

                    <expr_stmt pos:start="745:21" pos:end="747:57"><expr pos:start="745:21" pos:end="747:56"><call pos:start="745:21" pos:end="747:56"><name pos:start="745:21" pos:end="745:32">error_report</name><argument_list pos:start="745:33" pos:end="747:56">(<argument pos:start="745:34" pos:end="745:77"><expr pos:start="745:34" pos:end="745:77"><literal type="string" pos:start="745:34" pos:end="745:63">"error while reading sector %"</literal> <name pos:start="745:65" pos:end="745:70">PRId64</name> <literal type="string" pos:start="745:72" pos:end="745:77">": %s"</literal></expr></argument>,

                                 <argument pos:start="747:34" pos:end="747:39"><expr pos:start="747:34" pos:end="747:39"><name pos:start="747:34" pos:end="747:39">bs_num</name></expr></argument>, <argument pos:start="747:42" pos:end="747:55"><expr pos:start="747:42" pos:end="747:55"><call pos:start="747:42" pos:end="747:55"><name pos:start="747:42" pos:end="747:49">strerror</name><argument_list pos:start="747:50" pos:end="747:55">(<argument pos:start="747:51" pos:end="747:54"><expr pos:start="747:51" pos:end="747:54"><operator pos:start="747:51" pos:end="747:51">-</operator><name pos:start="747:52" pos:end="747:54">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="749:21" pos:end="749:29">goto <name pos:start="749:26" pos:end="749:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="755:17" pos:end="755:35"><expr pos:start="755:17" pos:end="755:34"><name pos:start="755:17" pos:end="755:20">buf2</name> <operator pos:start="755:22" pos:end="755:23">+=</operator> <name pos:start="755:25" pos:end="755:28">nlow</name> <operator pos:start="755:30" pos:end="755:30">*</operator> <literal type="number" pos:start="755:32" pos:end="755:34">512</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="757:17" pos:end="757:31"><expr pos:start="757:17" pos:end="757:30"><name pos:start="757:17" pos:end="757:22">bs_num</name> <operator pos:start="757:24" pos:end="757:25">+=</operator> <name pos:start="757:27" pos:end="757:30">nlow</name></expr>;</expr_stmt>



                <expr_stmt pos:start="761:17" pos:end="761:34"><expr pos:start="761:17" pos:end="761:33"><name pos:start="761:17" pos:end="761:25">remainder</name> <operator pos:start="761:27" pos:end="761:28">-=</operator> <name pos:start="761:30" pos:end="761:33">nlow</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="765:13" pos:end="765:36"><expr pos:start="765:13" pos:end="765:35"><call pos:start="765:13" pos:end="765:35"><name pos:start="765:13" pos:end="765:18">assert</name> <argument_list pos:start="765:20" pos:end="765:35">(<argument pos:start="765:21" pos:end="765:34"><expr pos:start="765:21" pos:end="765:34"><name pos:start="765:21" pos:end="765:29">remainder</name> <operator pos:start="765:31" pos:end="765:32">==</operator> <literal type="number" pos:start="765:34" pos:end="765:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="769:13" pos:end="783:13"><if pos:start="769:13" pos:end="783:13">if <condition pos:start="769:16" pos:end="769:59">(<expr pos:start="769:17" pos:end="769:58"><operator pos:start="769:17" pos:end="769:17">!</operator><call pos:start="769:18" pos:end="769:58"><name pos:start="769:18" pos:end="769:31">buffer_is_zero</name><argument_list pos:start="769:32" pos:end="769:58">(<argument pos:start="769:33" pos:end="769:35"><expr pos:start="769:33" pos:end="769:35"><name pos:start="769:33" pos:end="769:35">buf</name></expr></argument>, <argument pos:start="769:38" pos:end="769:57"><expr pos:start="769:38" pos:end="769:57"><name pos:start="769:38" pos:end="769:38">n</name> <operator pos:start="769:40" pos:end="769:40">*</operator> <name pos:start="769:42" pos:end="769:57">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="769:61" pos:end="783:13">{<block_content pos:start="771:17" pos:end="781:17">

                <expr_stmt pos:start="771:17" pos:end="771:72"><expr pos:start="771:17" pos:end="771:71"><name pos:start="771:17" pos:end="771:19">ret</name> <operator pos:start="771:21" pos:end="771:21">=</operator> <call pos:start="771:23" pos:end="771:71"><name pos:start="771:23" pos:end="771:43">bdrv_write_compressed</name><argument_list pos:start="771:44" pos:end="771:71">(<argument pos:start="771:45" pos:end="771:50"><expr pos:start="771:45" pos:end="771:50"><name pos:start="771:45" pos:end="771:50">out_bs</name></expr></argument>, <argument pos:start="771:53" pos:end="771:62"><expr pos:start="771:53" pos:end="771:62"><name pos:start="771:53" pos:end="771:62">sector_num</name></expr></argument>, <argument pos:start="771:65" pos:end="771:67"><expr pos:start="771:65" pos:end="771:67"><name pos:start="771:65" pos:end="771:67">buf</name></expr></argument>, <argument pos:start="771:70" pos:end="771:70"><expr pos:start="771:70" pos:end="771:70"><name pos:start="771:70" pos:end="771:70">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="773:17" pos:end="781:17"><if pos:start="773:17" pos:end="781:17">if <condition pos:start="773:20" pos:end="773:29">(<expr pos:start="773:21" pos:end="773:28"><name pos:start="773:21" pos:end="773:23">ret</name> <operator pos:start="773:25" pos:end="773:26">!=</operator> <literal type="number" pos:start="773:28" pos:end="773:28">0</literal></expr>)</condition> <block pos:start="773:31" pos:end="781:17">{<block_content pos:start="775:21" pos:end="779:29">

                    <expr_stmt pos:start="775:21" pos:end="777:69"><expr pos:start="775:21" pos:end="777:68"><call pos:start="775:21" pos:end="777:68"><name pos:start="775:21" pos:end="775:32">error_report</name><argument_list pos:start="775:33" pos:end="777:68">(<argument pos:start="775:34" pos:end="777:39"><expr pos:start="775:34" pos:end="777:39"><literal type="string" pos:start="775:34" pos:end="775:67">"error while compressing sector %"</literal> <name pos:start="775:69" pos:end="775:74">PRId64</name>

                                 <literal type="string" pos:start="777:34" pos:end="777:39">": %s"</literal></expr></argument>, <argument pos:start="777:42" pos:end="777:51"><expr pos:start="777:42" pos:end="777:51"><name pos:start="777:42" pos:end="777:51">sector_num</name></expr></argument>, <argument pos:start="777:54" pos:end="777:67"><expr pos:start="777:54" pos:end="777:67"><call pos:start="777:54" pos:end="777:67"><name pos:start="777:54" pos:end="777:61">strerror</name><argument_list pos:start="777:62" pos:end="777:67">(<argument pos:start="777:63" pos:end="777:66"><expr pos:start="777:63" pos:end="777:66"><operator pos:start="777:63" pos:end="777:63">-</operator><name pos:start="777:64" pos:end="777:66">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="779:21" pos:end="779:29">goto <name pos:start="779:26" pos:end="779:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="785:13" pos:end="785:28"><expr pos:start="785:13" pos:end="785:27"><name pos:start="785:13" pos:end="785:22">sector_num</name> <operator pos:start="785:24" pos:end="785:25">+=</operator> <name pos:start="785:27" pos:end="785:27">n</name></expr>;</expr_stmt>

            <expr_stmt pos:start="787:13" pos:end="787:71"><expr pos:start="787:13" pos:end="787:70"><call pos:start="787:13" pos:end="787:70"><name pos:start="787:13" pos:end="787:31">qemu_progress_print</name><argument_list pos:start="787:32" pos:end="787:70">(<argument pos:start="787:33" pos:end="787:66"><expr pos:start="787:33" pos:end="787:66"><literal type="number" pos:start="787:33" pos:end="787:37">100.0</literal> <operator pos:start="787:39" pos:end="787:39">*</operator> <name pos:start="787:41" pos:end="787:50">sector_num</name> <operator pos:start="787:52" pos:end="787:52">/</operator> <name pos:start="787:54" pos:end="787:66">total_sectors</name></expr></argument>, <argument pos:start="787:69" pos:end="787:69"><expr pos:start="787:69" pos:end="787:69"><literal type="number" pos:start="787:69" pos:end="787:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="791:9" pos:end="791:33">/* signal EOF to align */</comment>

        <expr_stmt pos:start="793:9" pos:end="793:50"><expr pos:start="793:9" pos:end="793:49"><call pos:start="793:9" pos:end="793:49"><name pos:start="793:9" pos:end="793:29">bdrv_write_compressed</name><argument_list pos:start="793:30" pos:end="793:49">(<argument pos:start="793:31" pos:end="793:36"><expr pos:start="793:31" pos:end="793:36"><name pos:start="793:31" pos:end="793:36">out_bs</name></expr></argument>, <argument pos:start="793:39" pos:end="793:39"><expr pos:start="793:39" pos:end="793:39"><literal type="number" pos:start="793:39" pos:end="793:39">0</literal></expr></argument>, <argument pos:start="793:42" pos:end="793:45"><expr pos:start="793:42" pos:end="793:45"><name pos:start="793:42" pos:end="793:45">NULL</name></expr></argument>, <argument pos:start="793:48" pos:end="793:48"><expr pos:start="793:48" pos:end="793:48"><literal type="number" pos:start="793:48" pos:end="793:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="795:7" pos:end="1047:5">else <block pos:start="795:12" pos:end="1047:5">{<block_content pos:start="797:9" pos:end="1045:9">

        <decl_stmt pos:start="797:9" pos:end="797:70"><decl pos:start="797:9" pos:end="797:31"><type pos:start="797:9" pos:end="797:15"><name pos:start="797:9" pos:end="797:15">int64_t</name></type> <name pos:start="797:17" pos:end="797:31">sectors_to_read</name></decl>, <decl pos:start="797:34" pos:end="797:45"><type ref="prev" pos:start="797:9" pos:end="797:15"/><name pos:start="797:34" pos:end="797:45">sectors_read</name></decl>, <decl pos:start="797:48" pos:end="797:69"><type ref="prev" pos:start="797:9" pos:end="797:15"/><name pos:start="797:48" pos:end="797:69">sector_num_next_status</name></decl>;</decl_stmt>

        <decl_stmt pos:start="799:9" pos:end="799:37"><decl pos:start="799:9" pos:end="799:36"><type pos:start="799:9" pos:end="799:12"><name pos:start="799:9" pos:end="799:12">bool</name></type> <name pos:start="799:14" pos:end="799:36">count_allocated_sectors</name></decl>;</decl_stmt>

        <decl_stmt pos:start="801:9" pos:end="801:72"><decl pos:start="801:9" pos:end="801:71"><type pos:start="801:9" pos:end="801:11"><name pos:start="801:9" pos:end="801:11">int</name></type> <name pos:start="801:13" pos:end="801:25">has_zero_init</name> <init pos:start="801:27" pos:end="801:71">= <expr pos:start="801:29" pos:end="801:71"><ternary pos:start="801:29" pos:end="801:71"><condition pos:start="801:29" pos:end="801:40"><expr pos:start="801:29" pos:end="801:38"><name pos:start="801:29" pos:end="801:38">min_sparse</name></expr> ?</condition><then pos:start="801:42" pos:end="801:67"> <expr pos:start="801:42" pos:end="801:67"><call pos:start="801:42" pos:end="801:67"><name pos:start="801:42" pos:end="801:59">bdrv_has_zero_init</name><argument_list pos:start="801:60" pos:end="801:67">(<argument pos:start="801:61" pos:end="801:66"><expr pos:start="801:61" pos:end="801:66"><name pos:start="801:61" pos:end="801:66">out_bs</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="801:69" pos:end="801:71">: <expr pos:start="801:71" pos:end="801:71"><literal type="number" pos:start="801:71" pos:end="801:71">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="805:9" pos:end="817:9"><if pos:start="805:9" pos:end="817:9">if <condition pos:start="805:12" pos:end="805:71">(<expr pos:start="805:13" pos:end="805:70"><operator pos:start="805:13" pos:end="805:13">!</operator><name pos:start="805:14" pos:end="805:26">has_zero_init</name> <operator pos:start="805:28" pos:end="805:29">&amp;&amp;</operator> <call pos:start="805:31" pos:end="805:70"><name pos:start="805:31" pos:end="805:62">bdrv_can_write_zeroes_with_unmap</name><argument_list pos:start="805:63" pos:end="805:70">(<argument pos:start="805:64" pos:end="805:69"><expr pos:start="805:64" pos:end="805:69"><name pos:start="805:64" pos:end="805:69">out_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="805:73" pos:end="817:9">{<block_content pos:start="807:13" pos:end="815:30">

            <expr_stmt pos:start="807:13" pos:end="807:61"><expr pos:start="807:13" pos:end="807:60"><name pos:start="807:13" pos:end="807:15">ret</name> <operator pos:start="807:17" pos:end="807:17">=</operator> <call pos:start="807:19" pos:end="807:60"><name pos:start="807:19" pos:end="807:32">bdrv_make_zero</name><argument_list pos:start="807:33" pos:end="807:60">(<argument pos:start="807:34" pos:end="807:39"><expr pos:start="807:34" pos:end="807:39"><name pos:start="807:34" pos:end="807:39">out_bs</name></expr></argument>, <argument pos:start="807:42" pos:end="807:59"><expr pos:start="807:42" pos:end="807:59"><name pos:start="807:42" pos:end="807:59">BDRV_REQ_MAY_UNMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="809:13" pos:end="813:13"><if pos:start="809:13" pos:end="813:13">if <condition pos:start="809:16" pos:end="809:24">(<expr pos:start="809:17" pos:end="809:23"><name pos:start="809:17" pos:end="809:19">ret</name> <operator pos:start="809:21" pos:end="809:21">&lt;</operator> <literal type="number" pos:start="809:23" pos:end="809:23">0</literal></expr>)</condition> <block pos:start="809:26" pos:end="813:13">{<block_content pos:start="811:17" pos:end="811:25">

                <goto pos:start="811:17" pos:end="811:25">goto <name pos:start="811:22" pos:end="811:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="815:13" pos:end="815:30"><expr pos:start="815:13" pos:end="815:29"><name pos:start="815:13" pos:end="815:25">has_zero_init</name> <operator pos:start="815:27" pos:end="815:27">=</operator> <literal type="number" pos:start="815:29" pos:end="815:29">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="821:9" pos:end="821:40"><expr pos:start="821:9" pos:end="821:39"><name pos:start="821:9" pos:end="821:23">sectors_to_read</name> <operator pos:start="821:25" pos:end="821:25">=</operator> <name pos:start="821:27" pos:end="821:39">total_sectors</name></expr>;</expr_stmt>

        <expr_stmt pos:start="823:9" pos:end="823:77"><expr pos:start="823:9" pos:end="823:76"><name pos:start="823:9" pos:end="823:31">count_allocated_sectors</name> <operator pos:start="823:33" pos:end="823:33">=</operator> <name pos:start="823:35" pos:end="823:42">progress</name> <operator pos:start="823:44" pos:end="823:45">&amp;&amp;</operator> <operator pos:start="823:47" pos:end="823:47">(</operator><name pos:start="823:48" pos:end="823:58">out_baseimg</name> <operator pos:start="823:60" pos:end="823:61">||</operator> <name pos:start="823:63" pos:end="823:75">has_zero_init</name><operator pos:start="823:76" pos:end="823:76">)</operator></expr>;</expr_stmt>

<label pos:start="825:1" pos:end="825:8"><name pos:start="825:1" pos:end="825:7">restart</name>:</label>

        <expr_stmt pos:start="827:9" pos:end="827:23"><expr pos:start="827:9" pos:end="827:22"><name pos:start="827:9" pos:end="827:18">sector_num</name> <operator pos:start="827:20" pos:end="827:20">=</operator> <literal type="number" pos:start="827:22" pos:end="827:22">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="827:25" pos:end="827:67">// total number of sectors converted so far</comment>

        <expr_stmt pos:start="829:9" pos:end="829:25"><expr pos:start="829:9" pos:end="829:24"><name pos:start="829:9" pos:end="829:20">sectors_read</name> <operator pos:start="829:22" pos:end="829:22">=</operator> <literal type="number" pos:start="829:24" pos:end="829:24">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="831:9" pos:end="831:35"><expr pos:start="831:9" pos:end="831:34"><name pos:start="831:9" pos:end="831:30">sector_num_next_status</name> <operator pos:start="831:32" pos:end="831:32">=</operator> <literal type="number" pos:start="831:34" pos:end="831:34">0</literal></expr>;</expr_stmt>



        <for pos:start="835:9" pos:end="1045:9">for<control pos:start="835:12" pos:end="835:15">(<init pos:start="835:13" pos:end="835:13">;</init><condition pos:start="835:14" pos:end="835:14">;</condition><incr/>)</control> <block pos:start="835:17" pos:end="1045:9">{<block_content pos:start="837:13" pos:end="1043:75">

            <expr_stmt pos:start="837:13" pos:end="837:52"><expr pos:start="837:13" pos:end="837:51"><name pos:start="837:13" pos:end="837:22">nb_sectors</name> <operator pos:start="837:24" pos:end="837:24">=</operator> <name pos:start="837:26" pos:end="837:38">total_sectors</name> <operator pos:start="837:40" pos:end="837:40">-</operator> <name pos:start="837:42" pos:end="837:51">sector_num</name></expr>;</expr_stmt>

            <if_stmt pos:start="839:13" pos:end="855:13"><if pos:start="839:13" pos:end="855:13">if <condition pos:start="839:16" pos:end="839:32">(<expr pos:start="839:17" pos:end="839:31"><name pos:start="839:17" pos:end="839:26">nb_sectors</name> <operator pos:start="839:28" pos:end="839:29">&lt;=</operator> <literal type="number" pos:start="839:31" pos:end="839:31">0</literal></expr>)</condition> <block pos:start="839:34" pos:end="855:13">{<block_content pos:start="841:17" pos:end="853:22">

                <if_stmt pos:start="841:17" pos:end="849:17"><if pos:start="841:17" pos:end="849:17">if <condition pos:start="841:20" pos:end="841:44">(<expr pos:start="841:21" pos:end="841:43"><name pos:start="841:21" pos:end="841:43">count_allocated_sectors</name></expr>)</condition> <block pos:start="841:46" pos:end="849:17">{<block_content pos:start="843:21" pos:end="847:33">

                    <expr_stmt pos:start="843:21" pos:end="843:51"><expr pos:start="843:21" pos:end="843:50"><name pos:start="843:21" pos:end="843:35">sectors_to_read</name> <operator pos:start="843:37" pos:end="843:37">=</operator> <name pos:start="843:39" pos:end="843:50">sectors_read</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="845:21" pos:end="845:52"><expr pos:start="845:21" pos:end="845:51"><name pos:start="845:21" pos:end="845:43">count_allocated_sectors</name> <operator pos:start="845:45" pos:end="845:45">=</operator> <name pos:start="845:47" pos:end="845:51">false</name></expr>;</expr_stmt>

                    <goto pos:start="847:21" pos:end="847:33">goto <name pos:start="847:26" pos:end="847:32">restart</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="851:17" pos:end="851:24"><expr pos:start="851:17" pos:end="851:23"><name pos:start="851:17" pos:end="851:19">ret</name> <operator pos:start="851:21" pos:end="851:21">=</operator> <literal type="number" pos:start="851:23" pos:end="851:23">0</literal></expr>;</expr_stmt>

                <break pos:start="853:17" pos:end="853:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <while pos:start="859:13" pos:end="873:13">while <condition pos:start="859:19" pos:end="859:62">(<expr pos:start="859:20" pos:end="859:61"><name pos:start="859:20" pos:end="859:29">sector_num</name> <operator pos:start="859:31" pos:end="859:31">-</operator> <name pos:start="859:33" pos:end="859:41">bs_offset</name> <operator pos:start="859:43" pos:end="859:44">&gt;=</operator> <name pos:start="859:46" pos:end="859:61"><name pos:start="859:46" pos:end="859:55">bs_sectors</name><index pos:start="859:56" pos:end="859:61">[<expr pos:start="859:57" pos:end="859:60"><name pos:start="859:57" pos:end="859:60">bs_i</name></expr>]</index></name></expr>)</condition> <block pos:start="859:64" pos:end="873:13">{<block_content pos:start="861:17" pos:end="865:37">

                <expr_stmt pos:start="861:17" pos:end="861:46"><expr pos:start="861:17" pos:end="861:45"><name pos:start="861:17" pos:end="861:25">bs_offset</name> <operator pos:start="861:27" pos:end="861:28">+=</operator> <name pos:start="861:30" pos:end="861:45"><name pos:start="861:30" pos:end="861:39">bs_sectors</name><index pos:start="861:40" pos:end="861:45">[<expr pos:start="861:41" pos:end="861:44"><name pos:start="861:41" pos:end="861:44">bs_i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="863:17" pos:end="863:24"><expr pos:start="863:17" pos:end="863:23"><name pos:start="863:17" pos:end="863:20">bs_i</name> <operator pos:start="863:22" pos:end="863:23">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="865:17" pos:end="865:37"><expr pos:start="865:17" pos:end="865:36"><call pos:start="865:17" pos:end="865:36"><name pos:start="865:17" pos:end="865:22">assert</name> <argument_list pos:start="865:24" pos:end="865:36">(<argument pos:start="865:25" pos:end="865:35"><expr pos:start="865:25" pos:end="865:35"><name pos:start="865:25" pos:end="865:28">bs_i</name> <operator pos:start="865:30" pos:end="865:30">&lt;</operator> <name pos:start="865:32" pos:end="865:35">bs_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="867:17" pos:end="871:69">/* printf("changing part: sector_num=%" PRId64 ", bs_i=%d, "

                  "bs_offset=%" PRId64 ", bs_sectors=%" PRId64 "\n",

                   sector_num, bs_i, bs_offset, bs_sectors[bs_i]); */</comment>

            </block_content>}</block></while>



            <if_stmt pos:start="877:13" pos:end="945:13"><if pos:start="877:13" pos:end="945:13">if <condition pos:start="877:16" pos:end="879:53">(<expr pos:start="877:17" pos:end="879:52"><operator pos:start="877:17" pos:end="877:17">(</operator><name pos:start="877:18" pos:end="877:28">out_baseimg</name> <operator pos:start="877:30" pos:end="877:31">||</operator> <name pos:start="877:33" pos:end="877:45">has_zero_init</name><operator pos:start="877:46" pos:end="877:46">)</operator> <operator pos:start="877:48" pos:end="877:49">&amp;&amp;</operator>

                <name pos:start="879:17" pos:end="879:26">sector_num</name> <operator pos:start="879:28" pos:end="879:29">&gt;=</operator> <name pos:start="879:31" pos:end="879:52">sector_num_next_status</name></expr>)</condition> <block pos:start="879:55" pos:end="945:13">{<block_content pos:start="881:17" pos:end="943:57">

                <expr_stmt pos:start="881:17" pos:end="881:64"><expr pos:start="881:17" pos:end="881:63"><name pos:start="881:17" pos:end="881:17">n</name> <operator pos:start="881:19" pos:end="881:19">=</operator> <ternary pos:start="881:21" pos:end="881:63"><condition pos:start="881:21" pos:end="881:42"><expr pos:start="881:21" pos:end="881:40"><name pos:start="881:21" pos:end="881:30">nb_sectors</name> <operator pos:start="881:32" pos:end="881:32">&gt;</operator> <name pos:start="881:34" pos:end="881:40">INT_MAX</name></expr> ?</condition><then pos:start="881:44" pos:end="881:50"> <expr pos:start="881:44" pos:end="881:50"><name pos:start="881:44" pos:end="881:50">INT_MAX</name></expr> </then><else pos:start="881:52" pos:end="881:63">: <expr pos:start="881:54" pos:end="881:63"><name pos:start="881:54" pos:end="881:63">nb_sectors</name></expr></else></ternary></expr>;</expr_stmt>

                <expr_stmt pos:start="883:17" pos:end="885:52"><expr pos:start="883:17" pos:end="885:51"><name pos:start="883:17" pos:end="883:19">ret</name> <operator pos:start="883:21" pos:end="883:21">=</operator> <call pos:start="883:23" pos:end="885:51"><name pos:start="883:23" pos:end="883:43">bdrv_get_block_status</name><argument_list pos:start="883:44" pos:end="885:51">(<argument pos:start="883:45" pos:end="883:52"><expr pos:start="883:45" pos:end="883:52"><name pos:start="883:45" pos:end="883:52"><name pos:start="883:45" pos:end="883:46">bs</name><index pos:start="883:47" pos:end="883:52">[<expr pos:start="883:48" pos:end="883:51"><name pos:start="883:48" pos:end="883:51">bs_i</name></expr>]</index></name></expr></argument>, <argument pos:start="883:55" pos:end="883:76"><expr pos:start="883:55" pos:end="883:76"><name pos:start="883:55" pos:end="883:64">sector_num</name> <operator pos:start="883:66" pos:end="883:66">-</operator> <name pos:start="883:68" pos:end="883:76">bs_offset</name></expr></argument>,

                                            <argument pos:start="885:45" pos:end="885:45"><expr pos:start="885:45" pos:end="885:45"><name pos:start="885:45" pos:end="885:45">n</name></expr></argument>, <argument pos:start="885:48" pos:end="885:50"><expr pos:start="885:48" pos:end="885:50"><operator pos:start="885:48" pos:end="885:48">&amp;</operator><name pos:start="885:49" pos:end="885:50">n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="887:17" pos:end="897:17"><if pos:start="887:17" pos:end="897:17">if <condition pos:start="887:20" pos:end="887:28">(<expr pos:start="887:21" pos:end="887:27"><name pos:start="887:21" pos:end="887:23">ret</name> <operator pos:start="887:25" pos:end="887:25">&lt;</operator> <literal type="number" pos:start="887:27" pos:end="887:27">0</literal></expr>)</condition> <block pos:start="887:30" pos:end="897:17">{<block_content pos:start="889:21" pos:end="895:29">

                    <expr_stmt pos:start="889:21" pos:end="893:49"><expr pos:start="889:21" pos:end="893:48"><call pos:start="889:21" pos:end="893:48"><name pos:start="889:21" pos:end="889:32">error_report</name><argument_list pos:start="889:33" pos:end="893:48">(<argument pos:start="889:34" pos:end="891:46"><expr pos:start="889:34" pos:end="891:46"><literal type="string" pos:start="889:34" pos:end="889:79">"error while reading block status of sector %"</literal>

                                 <name pos:start="891:34" pos:end="891:39">PRId64</name> <literal type="string" pos:start="891:41" pos:end="891:46">": %s"</literal></expr></argument>, <argument pos:start="891:49" pos:end="891:70"><expr pos:start="891:49" pos:end="891:70"><name pos:start="891:49" pos:end="891:58">sector_num</name> <operator pos:start="891:60" pos:end="891:60">-</operator> <name pos:start="891:62" pos:end="891:70">bs_offset</name></expr></argument>,

                                 <argument pos:start="893:34" pos:end="893:47"><expr pos:start="893:34" pos:end="893:47"><call pos:start="893:34" pos:end="893:47"><name pos:start="893:34" pos:end="893:41">strerror</name><argument_list pos:start="893:42" pos:end="893:47">(<argument pos:start="893:43" pos:end="893:46"><expr pos:start="893:43" pos:end="893:46"><operator pos:start="893:43" pos:end="893:43">-</operator><name pos:start="893:44" pos:end="893:46">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="895:21" pos:end="895:29">goto <name pos:start="895:26" pos:end="895:28">out</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="899:17" pos:end="903:32">/* If the output image is zero initialized, we are not working

                 * on a shared base and the input is zero we can skip the next

                 * n1 sectors */</comment>

                <if_stmt pos:start="905:17" pos:end="911:17"><if pos:start="905:17" pos:end="911:17">if <condition pos:start="905:20" pos:end="905:77">(<expr pos:start="905:21" pos:end="905:76"><name pos:start="905:21" pos:end="905:33">has_zero_init</name> <operator pos:start="905:35" pos:end="905:36">&amp;&amp;</operator> <operator pos:start="905:38" pos:end="905:38">!</operator><name pos:start="905:39" pos:end="905:49">out_baseimg</name> <operator pos:start="905:51" pos:end="905:52">&amp;&amp;</operator> <operator pos:start="905:54" pos:end="905:54">(</operator><name pos:start="905:55" pos:end="905:57">ret</name> <operator pos:start="905:59" pos:end="905:59">&amp;</operator> <name pos:start="905:61" pos:end="905:75">BDRV_BLOCK_ZERO</name><operator pos:start="905:76" pos:end="905:76">)</operator></expr>)</condition> <block pos:start="905:79" pos:end="911:17">{<block_content pos:start="907:21" pos:end="909:29">

                    <expr_stmt pos:start="907:21" pos:end="907:37"><expr pos:start="907:21" pos:end="907:36"><name pos:start="907:21" pos:end="907:30">sector_num</name> <operator pos:start="907:32" pos:end="907:33">+=</operator> <name pos:start="907:35" pos:end="907:36">n1</name></expr>;</expr_stmt>

                    <continue pos:start="909:21" pos:end="909:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="913:17" pos:end="919:57">/* If the output image is being created as a copy on write

                 * image, assume that sectors which are unallocated in the

                 * input image are present in both the output's and input's

                 * base images (no need to copy them). */</comment>

                <if_stmt pos:start="921:17" pos:end="939:17"><if pos:start="921:17" pos:end="939:17">if <condition pos:start="921:20" pos:end="921:32">(<expr pos:start="921:21" pos:end="921:31"><name pos:start="921:21" pos:end="921:31">out_baseimg</name></expr>)</condition> <block pos:start="921:34" pos:end="939:17">{<block_content pos:start="923:21" pos:end="937:36">

                    <if_stmt pos:start="923:21" pos:end="929:21"><if pos:start="923:21" pos:end="929:21">if <condition pos:start="923:24" pos:end="923:49">(<expr pos:start="923:25" pos:end="923:48"><operator pos:start="923:25" pos:end="923:25">!</operator><operator pos:start="923:26" pos:end="923:26">(</operator><name pos:start="923:27" pos:end="923:29">ret</name> <operator pos:start="923:31" pos:end="923:31">&amp;</operator> <name pos:start="923:33" pos:end="923:47">BDRV_BLOCK_DATA</name><operator pos:start="923:48" pos:end="923:48">)</operator></expr>)</condition> <block pos:start="923:51" pos:end="929:21">{<block_content pos:start="925:25" pos:end="927:33">

                        <expr_stmt pos:start="925:25" pos:end="925:41"><expr pos:start="925:25" pos:end="925:40"><name pos:start="925:25" pos:end="925:34">sector_num</name> <operator pos:start="925:36" pos:end="925:37">+=</operator> <name pos:start="925:39" pos:end="925:40">n1</name></expr>;</expr_stmt>

                        <continue pos:start="927:25" pos:end="927:33">continue;</continue>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="931:21" pos:end="935:34">/* The next 'n1' sectors are allocated in the input image.

                     * Copy only those as they may be followed by unallocated

                     * sectors. */</comment>

                    <expr_stmt pos:start="937:21" pos:end="937:36"><expr pos:start="937:21" pos:end="937:35"><name pos:start="937:21" pos:end="937:30">nb_sectors</name> <operator pos:start="937:32" pos:end="937:32">=</operator> <name pos:start="937:34" pos:end="937:35">n1</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="941:17" pos:end="941:66">/* avoid redundant callouts to get_block_status */</comment>

                <expr_stmt pos:start="943:17" pos:end="943:57"><expr pos:start="943:17" pos:end="943:56"><name pos:start="943:17" pos:end="943:38">sector_num_next_status</name> <operator pos:start="943:40" pos:end="943:40">=</operator> <name pos:start="943:42" pos:end="943:51">sector_num</name> <operator pos:start="943:53" pos:end="943:53">+</operator> <name pos:start="943:55" pos:end="943:56">n1</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="949:13" pos:end="949:44"><expr pos:start="949:13" pos:end="949:43"><name pos:start="949:13" pos:end="949:13">n</name> <operator pos:start="949:15" pos:end="949:15">=</operator> <call pos:start="949:17" pos:end="949:43"><name pos:start="949:17" pos:end="949:19">MIN</name><argument_list pos:start="949:20" pos:end="949:43">(<argument pos:start="949:21" pos:end="949:30"><expr pos:start="949:21" pos:end="949:30"><name pos:start="949:21" pos:end="949:30">nb_sectors</name></expr></argument>, <argument pos:start="949:33" pos:end="949:42"><expr pos:start="949:33" pos:end="949:42"><name pos:start="949:33" pos:end="949:42">bufsectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="953:13" pos:end="959:51">/* round down request length to an aligned sector, but

             * do not bother doing this on short requests. They happen

             * when we found an all-zero area, and the next sector to

             * write will not be sector_num + n. */</comment>

            <if_stmt pos:start="961:13" pos:end="973:13"><if pos:start="961:13" pos:end="973:13">if <condition pos:start="961:16" pos:end="961:60">(<expr pos:start="961:17" pos:end="961:59"><name pos:start="961:17" pos:end="961:31">cluster_sectors</name> <operator pos:start="961:33" pos:end="961:33">&gt;</operator> <literal type="number" pos:start="961:35" pos:end="961:35">0</literal> <operator pos:start="961:37" pos:end="961:38">&amp;&amp;</operator> <name pos:start="961:40" pos:end="961:40">n</name> <operator pos:start="961:42" pos:end="961:43">&gt;=</operator> <name pos:start="961:45" pos:end="961:59">cluster_sectors</name></expr>)</condition> <block pos:start="961:62" pos:end="973:13">{<block_content pos:start="963:17" pos:end="971:17">

                <decl_stmt pos:start="963:17" pos:end="963:63"><decl pos:start="963:17" pos:end="963:62"><type pos:start="963:17" pos:end="963:23"><name pos:start="963:17" pos:end="963:23">int64_t</name></type> <name pos:start="963:25" pos:end="963:43">next_aligned_sector</name> <init pos:start="963:45" pos:end="963:62">= <expr pos:start="963:47" pos:end="963:62"><operator pos:start="963:47" pos:end="963:47">(</operator><name pos:start="963:48" pos:end="963:57">sector_num</name> <operator pos:start="963:59" pos:end="963:59">+</operator> <name pos:start="963:61" pos:end="963:61">n</name><operator pos:start="963:62" pos:end="963:62">)</operator></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="965:17" pos:end="965:77"><expr pos:start="965:17" pos:end="965:76"><name pos:start="965:17" pos:end="965:35">next_aligned_sector</name> <operator pos:start="965:37" pos:end="965:38">-=</operator> <name pos:start="965:40" pos:end="965:58">next_aligned_sector</name> <operator pos:start="965:60" pos:end="965:60">%</operator> <name pos:start="965:62" pos:end="965:76">cluster_sectors</name></expr>;</expr_stmt>

                <if_stmt pos:start="967:17" pos:end="971:17"><if pos:start="967:17" pos:end="971:17">if <condition pos:start="967:20" pos:end="967:57">(<expr pos:start="967:21" pos:end="967:56"><name pos:start="967:21" pos:end="967:30">sector_num</name> <operator pos:start="967:32" pos:end="967:32">+</operator> <name pos:start="967:34" pos:end="967:34">n</name> <operator pos:start="967:36" pos:end="967:36">&gt;</operator> <name pos:start="967:38" pos:end="967:56">next_aligned_sector</name></expr>)</condition> <block pos:start="967:59" pos:end="971:17">{<block_content pos:start="969:21" pos:end="969:57">

                    <expr_stmt pos:start="969:21" pos:end="969:57"><expr pos:start="969:21" pos:end="969:56"><name pos:start="969:21" pos:end="969:21">n</name> <operator pos:start="969:23" pos:end="969:23">=</operator> <name pos:start="969:25" pos:end="969:43">next_aligned_sector</name> <operator pos:start="969:45" pos:end="969:45">-</operator> <name pos:start="969:47" pos:end="969:56">sector_num</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="977:13" pos:end="977:68"><expr pos:start="977:13" pos:end="977:67"><name pos:start="977:13" pos:end="977:13">n</name> <operator pos:start="977:15" pos:end="977:15">=</operator> <call pos:start="977:17" pos:end="977:67"><name pos:start="977:17" pos:end="977:19">MIN</name><argument_list pos:start="977:20" pos:end="977:67">(<argument pos:start="977:21" pos:end="977:21"><expr pos:start="977:21" pos:end="977:21"><name pos:start="977:21" pos:end="977:21">n</name></expr></argument>, <argument pos:start="977:24" pos:end="977:66"><expr pos:start="977:24" pos:end="977:66"><name pos:start="977:24" pos:end="977:39"><name pos:start="977:24" pos:end="977:33">bs_sectors</name><index pos:start="977:34" pos:end="977:39">[<expr pos:start="977:35" pos:end="977:38"><name pos:start="977:35" pos:end="977:38">bs_i</name></expr>]</index></name> <operator pos:start="977:41" pos:end="977:41">-</operator> <operator pos:start="977:43" pos:end="977:43">(</operator><name pos:start="977:44" pos:end="977:53">sector_num</name> <operator pos:start="977:55" pos:end="977:55">-</operator> <name pos:start="977:57" pos:end="977:65">bs_offset</name><operator pos:start="977:66" pos:end="977:66">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="981:13" pos:end="981:30"><expr pos:start="981:13" pos:end="981:29"><name pos:start="981:13" pos:end="981:24">sectors_read</name> <operator pos:start="981:26" pos:end="981:27">+=</operator> <name pos:start="981:29" pos:end="981:29">n</name></expr>;</expr_stmt>

            <if_stmt pos:start="983:13" pos:end="989:13"><if pos:start="983:13" pos:end="989:13">if <condition pos:start="983:16" pos:end="983:40">(<expr pos:start="983:17" pos:end="983:39"><name pos:start="983:17" pos:end="983:39">count_allocated_sectors</name></expr>)</condition> <block pos:start="983:42" pos:end="989:13">{<block_content pos:start="985:17" pos:end="987:25">

                <expr_stmt pos:start="985:17" pos:end="985:32"><expr pos:start="985:17" pos:end="985:31"><name pos:start="985:17" pos:end="985:26">sector_num</name> <operator pos:start="985:28" pos:end="985:29">+=</operator> <name pos:start="985:31" pos:end="985:31">n</name></expr>;</expr_stmt>

                <continue pos:start="987:17" pos:end="987:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="993:13" pos:end="993:19"><expr pos:start="993:13" pos:end="993:18"><name pos:start="993:13" pos:end="993:14">n1</name> <operator pos:start="993:16" pos:end="993:16">=</operator> <name pos:start="993:18" pos:end="993:18">n</name></expr>;</expr_stmt>

            <expr_stmt pos:start="995:13" pos:end="995:70"><expr pos:start="995:13" pos:end="995:69"><name pos:start="995:13" pos:end="995:15">ret</name> <operator pos:start="995:17" pos:end="995:17">=</operator> <call pos:start="995:19" pos:end="995:69"><name pos:start="995:19" pos:end="995:27">bdrv_read</name><argument_list pos:start="995:28" pos:end="995:69">(<argument pos:start="995:29" pos:end="995:36"><expr pos:start="995:29" pos:end="995:36"><name pos:start="995:29" pos:end="995:36"><name pos:start="995:29" pos:end="995:30">bs</name><index pos:start="995:31" pos:end="995:36">[<expr pos:start="995:32" pos:end="995:35"><name pos:start="995:32" pos:end="995:35">bs_i</name></expr>]</index></name></expr></argument>, <argument pos:start="995:39" pos:end="995:60"><expr pos:start="995:39" pos:end="995:60"><name pos:start="995:39" pos:end="995:48">sector_num</name> <operator pos:start="995:50" pos:end="995:50">-</operator> <name pos:start="995:52" pos:end="995:60">bs_offset</name></expr></argument>, <argument pos:start="995:63" pos:end="995:65"><expr pos:start="995:63" pos:end="995:65"><name pos:start="995:63" pos:end="995:65">buf</name></expr></argument>, <argument pos:start="995:68" pos:end="995:68"><expr pos:start="995:68" pos:end="995:68"><name pos:start="995:68" pos:end="995:68">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="997:13" pos:end="1005:13"><if pos:start="997:13" pos:end="1005:13">if <condition pos:start="997:16" pos:end="997:24">(<expr pos:start="997:17" pos:end="997:23"><name pos:start="997:17" pos:end="997:19">ret</name> <operator pos:start="997:21" pos:end="997:21">&lt;</operator> <literal type="number" pos:start="997:23" pos:end="997:23">0</literal></expr>)</condition> <block pos:start="997:26" pos:end="1005:13">{<block_content pos:start="999:17" pos:end="1003:25">

                <expr_stmt pos:start="999:17" pos:end="1001:69"><expr pos:start="999:17" pos:end="1001:68"><call pos:start="999:17" pos:end="1001:68"><name pos:start="999:17" pos:end="999:28">error_report</name><argument_list pos:start="999:29" pos:end="1001:68">(<argument pos:start="999:30" pos:end="999:73"><expr pos:start="999:30" pos:end="999:73"><literal type="string" pos:start="999:30" pos:end="999:59">"error while reading sector %"</literal> <name pos:start="999:61" pos:end="999:66">PRId64</name> <literal type="string" pos:start="999:68" pos:end="999:73">": %s"</literal></expr></argument>,

                             <argument pos:start="1001:30" pos:end="1001:51"><expr pos:start="1001:30" pos:end="1001:51"><name pos:start="1001:30" pos:end="1001:39">sector_num</name> <operator pos:start="1001:41" pos:end="1001:41">-</operator> <name pos:start="1001:43" pos:end="1001:51">bs_offset</name></expr></argument>, <argument pos:start="1001:54" pos:end="1001:67"><expr pos:start="1001:54" pos:end="1001:67"><call pos:start="1001:54" pos:end="1001:67"><name pos:start="1001:54" pos:end="1001:61">strerror</name><argument_list pos:start="1001:62" pos:end="1001:67">(<argument pos:start="1001:63" pos:end="1001:66"><expr pos:start="1001:63" pos:end="1001:66"><operator pos:start="1001:63" pos:end="1001:63">-</operator><name pos:start="1001:64" pos:end="1001:66">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="1003:17" pos:end="1003:25">goto <name pos:start="1003:22" pos:end="1003:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1007:13" pos:end="1011:74">/* NOTE: at the same time we convert, we do not write zero

               sectors to have a chance to compress the image. Ideally, we

               should add a specific call to have the info to go faster */</comment>

            <expr_stmt pos:start="1013:13" pos:end="1013:23"><expr pos:start="1013:13" pos:end="1013:22"><name pos:start="1013:13" pos:end="1013:16">buf1</name> <operator pos:start="1013:18" pos:end="1013:18">=</operator> <name pos:start="1013:20" pos:end="1013:22">buf</name></expr>;</expr_stmt>

            <while pos:start="1015:13" pos:end="1041:13">while <condition pos:start="1015:19" pos:end="1015:25">(<expr pos:start="1015:20" pos:end="1015:24"><name pos:start="1015:20" pos:end="1015:20">n</name> <operator pos:start="1015:22" pos:end="1015:22">&gt;</operator> <literal type="number" pos:start="1015:24" pos:end="1015:24">0</literal></expr>)</condition> <block pos:start="1015:27" pos:end="1041:13">{<block_content pos:start="1017:17" pos:end="1039:33">

                <if_stmt pos:start="1017:17" pos:end="1033:17"><if pos:start="1017:17" pos:end="1033:17">if <condition pos:start="1017:20" pos:end="1019:71">(<expr pos:start="1017:21" pos:end="1019:70"><operator pos:start="1017:21" pos:end="1017:21">!</operator><name pos:start="1017:22" pos:end="1017:34">has_zero_init</name> <operator pos:start="1017:36" pos:end="1017:37">||</operator>

                    <call pos:start="1019:21" pos:end="1019:70"><name pos:start="1019:21" pos:end="1019:44">is_allocated_sectors_min</name><argument_list pos:start="1019:45" pos:end="1019:70">(<argument pos:start="1019:46" pos:end="1019:49"><expr pos:start="1019:46" pos:end="1019:49"><name pos:start="1019:46" pos:end="1019:49">buf1</name></expr></argument>, <argument pos:start="1019:52" pos:end="1019:52"><expr pos:start="1019:52" pos:end="1019:52"><name pos:start="1019:52" pos:end="1019:52">n</name></expr></argument>, <argument pos:start="1019:55" pos:end="1019:57"><expr pos:start="1019:55" pos:end="1019:57"><operator pos:start="1019:55" pos:end="1019:55">&amp;</operator><name pos:start="1019:56" pos:end="1019:57">n1</name></expr></argument>, <argument pos:start="1019:60" pos:end="1019:69"><expr pos:start="1019:60" pos:end="1019:69"><name pos:start="1019:60" pos:end="1019:69">min_sparse</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1019:73" pos:end="1033:17">{<block_content pos:start="1021:21" pos:end="1031:21">

                    <expr_stmt pos:start="1021:21" pos:end="1021:67"><expr pos:start="1021:21" pos:end="1021:66"><name pos:start="1021:21" pos:end="1021:23">ret</name> <operator pos:start="1021:25" pos:end="1021:25">=</operator> <call pos:start="1021:27" pos:end="1021:66"><name pos:start="1021:27" pos:end="1021:36">bdrv_write</name><argument_list pos:start="1021:37" pos:end="1021:66">(<argument pos:start="1021:38" pos:end="1021:43"><expr pos:start="1021:38" pos:end="1021:43"><name pos:start="1021:38" pos:end="1021:43">out_bs</name></expr></argument>, <argument pos:start="1021:46" pos:end="1021:55"><expr pos:start="1021:46" pos:end="1021:55"><name pos:start="1021:46" pos:end="1021:55">sector_num</name></expr></argument>, <argument pos:start="1021:58" pos:end="1021:61"><expr pos:start="1021:58" pos:end="1021:61"><name pos:start="1021:58" pos:end="1021:61">buf1</name></expr></argument>, <argument pos:start="1021:64" pos:end="1021:65"><expr pos:start="1021:64" pos:end="1021:65"><name pos:start="1021:64" pos:end="1021:65">n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1023:21" pos:end="1031:21"><if pos:start="1023:21" pos:end="1031:21">if <condition pos:start="1023:24" pos:end="1023:32">(<expr pos:start="1023:25" pos:end="1023:31"><name pos:start="1023:25" pos:end="1023:27">ret</name> <operator pos:start="1023:29" pos:end="1023:29">&lt;</operator> <literal type="number" pos:start="1023:31" pos:end="1023:31">0</literal></expr>)</condition> <block pos:start="1023:34" pos:end="1031:21">{<block_content pos:start="1025:25" pos:end="1029:33">

                        <expr_stmt pos:start="1025:25" pos:end="1027:73"><expr pos:start="1025:25" pos:end="1027:72"><call pos:start="1025:25" pos:end="1027:72"><name pos:start="1025:25" pos:end="1025:36">error_report</name><argument_list pos:start="1025:37" pos:end="1027:72">(<argument pos:start="1025:38" pos:end="1027:43"><expr pos:start="1025:38" pos:end="1027:43"><literal type="string" pos:start="1025:38" pos:end="1025:67">"error while writing sector %"</literal> <name pos:start="1025:69" pos:end="1025:74">PRId64</name>

                                     <literal type="string" pos:start="1027:38" pos:end="1027:43">": %s"</literal></expr></argument>, <argument pos:start="1027:46" pos:end="1027:55"><expr pos:start="1027:46" pos:end="1027:55"><name pos:start="1027:46" pos:end="1027:55">sector_num</name></expr></argument>, <argument pos:start="1027:58" pos:end="1027:71"><expr pos:start="1027:58" pos:end="1027:71"><call pos:start="1027:58" pos:end="1027:71"><name pos:start="1027:58" pos:end="1027:65">strerror</name><argument_list pos:start="1027:66" pos:end="1027:71">(<argument pos:start="1027:67" pos:end="1027:70"><expr pos:start="1027:67" pos:end="1027:70"><operator pos:start="1027:67" pos:end="1027:67">-</operator><name pos:start="1027:68" pos:end="1027:70">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="1029:25" pos:end="1029:33">goto <name pos:start="1029:30" pos:end="1029:32">out</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1035:17" pos:end="1035:33"><expr pos:start="1035:17" pos:end="1035:32"><name pos:start="1035:17" pos:end="1035:26">sector_num</name> <operator pos:start="1035:28" pos:end="1035:29">+=</operator> <name pos:start="1035:31" pos:end="1035:32">n1</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1037:17" pos:end="1037:24"><expr pos:start="1037:17" pos:end="1037:23"><name pos:start="1037:17" pos:end="1037:17">n</name> <operator pos:start="1037:19" pos:end="1037:20">-=</operator> <name pos:start="1037:22" pos:end="1037:23">n1</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1039:17" pos:end="1039:33"><expr pos:start="1039:17" pos:end="1039:32"><name pos:start="1039:17" pos:end="1039:20">buf1</name> <operator pos:start="1039:22" pos:end="1039:23">+=</operator> <name pos:start="1039:25" pos:end="1039:26">n1</name> <operator pos:start="1039:28" pos:end="1039:28">*</operator> <literal type="number" pos:start="1039:30" pos:end="1039:32">512</literal></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="1043:13" pos:end="1043:75"><expr pos:start="1043:13" pos:end="1043:74"><call pos:start="1043:13" pos:end="1043:74"><name pos:start="1043:13" pos:end="1043:31">qemu_progress_print</name><argument_list pos:start="1043:32" pos:end="1043:74">(<argument pos:start="1043:33" pos:end="1043:70"><expr pos:start="1043:33" pos:end="1043:70"><literal type="number" pos:start="1043:33" pos:end="1043:37">100.0</literal> <operator pos:start="1043:39" pos:end="1043:39">*</operator> <name pos:start="1043:41" pos:end="1043:52">sectors_read</name> <operator pos:start="1043:54" pos:end="1043:54">/</operator> <name pos:start="1043:56" pos:end="1043:70">sectors_to_read</name></expr></argument>, <argument pos:start="1043:73" pos:end="1043:73"><expr pos:start="1043:73" pos:end="1043:73"><literal type="number" pos:start="1043:73" pos:end="1043:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

<label pos:start="1049:1" pos:end="1049:4"><name pos:start="1049:1" pos:end="1049:3">out</name>:</label>

    <if_stmt pos:start="1051:5" pos:end="1055:5"><if pos:start="1051:5" pos:end="1055:5">if <condition pos:start="1051:8" pos:end="1051:13">(<expr pos:start="1051:9" pos:end="1051:12"><operator pos:start="1051:9" pos:end="1051:9">!</operator><name pos:start="1051:10" pos:end="1051:12">ret</name></expr>)</condition> <block pos:start="1051:15" pos:end="1055:5">{<block_content pos:start="1053:9" pos:end="1053:36">

        <expr_stmt pos:start="1053:9" pos:end="1053:36"><expr pos:start="1053:9" pos:end="1053:35"><call pos:start="1053:9" pos:end="1053:35"><name pos:start="1053:9" pos:end="1053:27">qemu_progress_print</name><argument_list pos:start="1053:28" pos:end="1053:35">(<argument pos:start="1053:29" pos:end="1053:31"><expr pos:start="1053:29" pos:end="1053:31"><literal type="number" pos:start="1053:29" pos:end="1053:31">100</literal></expr></argument>, <argument pos:start="1053:34" pos:end="1053:34"><expr pos:start="1053:34" pos:end="1053:34"><literal type="number" pos:start="1053:34" pos:end="1053:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1057:5" pos:end="1057:24"><expr pos:start="1057:5" pos:end="1057:23"><call pos:start="1057:5" pos:end="1057:23"><name pos:start="1057:5" pos:end="1057:21">qemu_progress_end</name><argument_list pos:start="1057:22" pos:end="1057:23">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1059:5" pos:end="1059:24"><expr pos:start="1059:5" pos:end="1059:23"><call pos:start="1059:5" pos:end="1059:23"><name pos:start="1059:5" pos:end="1059:17">qemu_opts_del</name><argument_list pos:start="1059:18" pos:end="1059:23">(<argument pos:start="1059:19" pos:end="1059:22"><expr pos:start="1059:19" pos:end="1059:22"><name pos:start="1059:19" pos:end="1059:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1061:5" pos:end="1061:32"><expr pos:start="1061:5" pos:end="1061:31"><call pos:start="1061:5" pos:end="1061:31"><name pos:start="1061:5" pos:end="1061:18">qemu_opts_free</name><argument_list pos:start="1061:19" pos:end="1061:31">(<argument pos:start="1061:20" pos:end="1061:30"><expr pos:start="1061:20" pos:end="1061:30"><name pos:start="1061:20" pos:end="1061:30">create_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1063:5" pos:end="1063:20"><expr pos:start="1063:5" pos:end="1063:19"><call pos:start="1063:5" pos:end="1063:19"><name pos:start="1063:5" pos:end="1063:14">qemu_vfree</name><argument_list pos:start="1063:15" pos:end="1063:19">(<argument pos:start="1063:16" pos:end="1063:18"><expr pos:start="1063:16" pos:end="1063:18"><name pos:start="1063:16" pos:end="1063:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1065:5" pos:end="1069:5"><if pos:start="1065:5" pos:end="1069:5">if <condition pos:start="1065:8" pos:end="1065:16">(<expr pos:start="1065:9" pos:end="1065:15"><name pos:start="1065:9" pos:end="1065:15">sn_opts</name></expr>)</condition> <block pos:start="1065:18" pos:end="1069:5">{<block_content pos:start="1067:9" pos:end="1067:31">

        <expr_stmt pos:start="1067:9" pos:end="1067:31"><expr pos:start="1067:9" pos:end="1067:30"><call pos:start="1067:9" pos:end="1067:30"><name pos:start="1067:9" pos:end="1067:21">qemu_opts_del</name><argument_list pos:start="1067:22" pos:end="1067:30">(<argument pos:start="1067:23" pos:end="1067:29"><expr pos:start="1067:23" pos:end="1067:29"><name pos:start="1067:23" pos:end="1067:29">sn_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1071:5" pos:end="1075:5"><if pos:start="1071:5" pos:end="1075:5">if <condition pos:start="1071:8" pos:end="1071:15">(<expr pos:start="1071:9" pos:end="1071:14"><name pos:start="1071:9" pos:end="1071:14">out_bs</name></expr>)</condition> <block pos:start="1071:17" pos:end="1075:5">{<block_content pos:start="1073:9" pos:end="1073:27">

        <expr_stmt pos:start="1073:9" pos:end="1073:27"><expr pos:start="1073:9" pos:end="1073:26"><call pos:start="1073:9" pos:end="1073:26"><name pos:start="1073:9" pos:end="1073:18">bdrv_unref</name><argument_list pos:start="1073:19" pos:end="1073:26">(<argument pos:start="1073:20" pos:end="1073:25"><expr pos:start="1073:20" pos:end="1073:25"><name pos:start="1073:20" pos:end="1073:25">out_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1077:5" pos:end="1091:5"><if pos:start="1077:5" pos:end="1091:5">if <condition pos:start="1077:8" pos:end="1077:11">(<expr pos:start="1077:9" pos:end="1077:10"><name pos:start="1077:9" pos:end="1077:10">bs</name></expr>)</condition> <block pos:start="1077:13" pos:end="1091:5">{<block_content pos:start="1079:9" pos:end="1089:19">

        <for pos:start="1079:9" pos:end="1087:9">for <control pos:start="1079:13" pos:end="1079:43">(<init pos:start="1079:14" pos:end="1079:22"><expr pos:start="1079:14" pos:end="1079:21"><name pos:start="1079:14" pos:end="1079:17">bs_i</name> <operator pos:start="1079:19" pos:end="1079:19">=</operator> <literal type="number" pos:start="1079:21" pos:end="1079:21">0</literal></expr>;</init> <condition pos:start="1079:24" pos:end="1079:35"><expr pos:start="1079:24" pos:end="1079:34"><name pos:start="1079:24" pos:end="1079:27">bs_i</name> <operator pos:start="1079:29" pos:end="1079:29">&lt;</operator> <name pos:start="1079:31" pos:end="1079:34">bs_n</name></expr>;</condition> <incr pos:start="1079:37" pos:end="1079:42"><expr pos:start="1079:37" pos:end="1079:42"><name pos:start="1079:37" pos:end="1079:40">bs_i</name><operator pos:start="1079:41" pos:end="1079:42">++</operator></expr></incr>)</control> <block pos:start="1079:45" pos:end="1087:9">{<block_content pos:start="1081:13" pos:end="1085:13">

            <if_stmt pos:start="1081:13" pos:end="1085:13"><if pos:start="1081:13" pos:end="1085:13">if <condition pos:start="1081:16" pos:end="1081:25">(<expr pos:start="1081:17" pos:end="1081:24"><name pos:start="1081:17" pos:end="1081:24"><name pos:start="1081:17" pos:end="1081:18">bs</name><index pos:start="1081:19" pos:end="1081:24">[<expr pos:start="1081:20" pos:end="1081:23"><name pos:start="1081:20" pos:end="1081:23">bs_i</name></expr>]</index></name></expr>)</condition> <block pos:start="1081:27" pos:end="1085:13">{<block_content pos:start="1083:17" pos:end="1083:37">

                <expr_stmt pos:start="1083:17" pos:end="1083:37"><expr pos:start="1083:17" pos:end="1083:36"><call pos:start="1083:17" pos:end="1083:36"><name pos:start="1083:17" pos:end="1083:26">bdrv_unref</name><argument_list pos:start="1083:27" pos:end="1083:36">(<argument pos:start="1083:28" pos:end="1083:35"><expr pos:start="1083:28" pos:end="1083:35"><name pos:start="1083:28" pos:end="1083:35"><name pos:start="1083:28" pos:end="1083:29">bs</name><index pos:start="1083:30" pos:end="1083:35">[<expr pos:start="1083:31" pos:end="1083:34"><name pos:start="1083:31" pos:end="1083:34">bs_i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="1089:9" pos:end="1089:19"><expr pos:start="1089:9" pos:end="1089:18"><call pos:start="1089:9" pos:end="1089:18"><name pos:start="1089:9" pos:end="1089:14">g_free</name><argument_list pos:start="1089:15" pos:end="1089:18">(<argument pos:start="1089:16" pos:end="1089:17"><expr pos:start="1089:16" pos:end="1089:17"><name pos:start="1089:16" pos:end="1089:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1093:5" pos:end="1093:23"><expr pos:start="1093:5" pos:end="1093:22"><call pos:start="1093:5" pos:end="1093:22"><name pos:start="1093:5" pos:end="1093:10">g_free</name><argument_list pos:start="1093:11" pos:end="1093:22">(<argument pos:start="1093:12" pos:end="1093:21"><expr pos:start="1093:12" pos:end="1093:21"><name pos:start="1093:12" pos:end="1093:21">bs_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="1095:1" pos:end="1095:12"><name pos:start="1095:1" pos:end="1095:11">fail_getopt</name>:</label>

    <expr_stmt pos:start="1097:5" pos:end="1097:20"><expr pos:start="1097:5" pos:end="1097:19"><call pos:start="1097:5" pos:end="1097:19"><name pos:start="1097:5" pos:end="1097:10">g_free</name><argument_list pos:start="1097:11" pos:end="1097:19">(<argument pos:start="1097:12" pos:end="1097:18"><expr pos:start="1097:12" pos:end="1097:18"><name pos:start="1097:12" pos:end="1097:18">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="1101:5" pos:end="1105:5"><if pos:start="1101:5" pos:end="1105:5">if <condition pos:start="1101:8" pos:end="1101:12">(<expr pos:start="1101:9" pos:end="1101:11"><name pos:start="1101:9" pos:end="1101:11">ret</name></expr>)</condition> <block pos:start="1101:14" pos:end="1105:5">{<block_content pos:start="1103:9" pos:end="1103:17">

        <return pos:start="1103:9" pos:end="1103:17">return <expr pos:start="1103:16" pos:end="1103:16"><literal type="number" pos:start="1103:16" pos:end="1103:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="1107:5" pos:end="1107:13">return <expr pos:start="1107:12" pos:end="1107:12"><literal type="number" pos:start="1107:12" pos:end="1107:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
