<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/411.c" pos:tabs="8"><function pos:start="1:1" pos:end="235:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">http_send_data</name><parameter_list pos:start="1:26" pos:end="1:41">(<parameter pos:start="1:27" pos:end="1:40"><decl pos:start="1:27" pos:end="1:40"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:37">HTTPContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">c</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="235:1">{<block_content pos:start="5:5" pos:end="233:13">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">len</name></decl>, <decl pos:start="5:14" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:16">ret</name></decl>;</decl_stmt>



    <for pos:start="9:5" pos:end="231:5">for<control pos:start="9:8" pos:end="9:11">(<init pos:start="9:9" pos:end="9:9">;</init><condition pos:start="9:10" pos:end="9:10">;</condition><incr/>)</control> <block pos:start="9:13" pos:end="231:5">{<block_content pos:start="11:9" pos:end="229:9">

        <if_stmt pos:start="11:9" pos:end="229:9"><if pos:start="11:9" pos:end="25:9">if <condition pos:start="11:12" pos:end="11:43">(<expr pos:start="11:13" pos:end="11:42"><name pos:start="11:13" pos:end="11:25"><name pos:start="11:13" pos:end="11:13">c</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:25">buffer_ptr</name></name> <operator pos:start="11:27" pos:end="11:28">&gt;=</operator> <name pos:start="11:30" pos:end="11:42"><name pos:start="11:30" pos:end="11:30">c</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:42">buffer_end</name></name></expr>)</condition> <block pos:start="11:45" pos:end="25:9">{<block_content pos:start="13:13" pos:end="23:22">

            <expr_stmt pos:start="13:13" pos:end="13:39"><expr pos:start="13:13" pos:end="13:38"><name pos:start="13:13" pos:end="13:15">ret</name> <operator pos:start="13:17" pos:end="13:17">=</operator> <call pos:start="13:19" pos:end="13:38"><name pos:start="13:19" pos:end="13:35">http_prepare_data</name><argument_list pos:start="13:36" pos:end="13:38">(<argument pos:start="13:37" pos:end="13:37"><expr pos:start="13:37" pos:end="13:37"><name pos:start="13:37" pos:end="13:37">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="15:13" pos:end="23:22"><if pos:start="15:13" pos:end="17:26">if <condition pos:start="15:16" pos:end="15:24">(<expr pos:start="15:17" pos:end="15:23"><name pos:start="15:17" pos:end="15:19">ret</name> <operator pos:start="15:21" pos:end="15:21">&lt;</operator> <literal type="number" pos:start="15:23" pos:end="15:23">0</literal></expr>)</condition><block type="pseudo" pos:start="17:17" pos:end="17:26"><block_content pos:start="17:17" pos:end="17:26">

                <return pos:start="17:17" pos:end="17:26">return <expr pos:start="17:24" pos:end="17:25"><operator pos:start="17:24" pos:end="17:24">-</operator><literal type="number" pos:start="17:25" pos:end="17:25">1</literal></expr>;</return></block_content></block></if>

            <if type="elseif" pos:start="19:13" pos:end="23:22">else if <condition pos:start="19:21" pos:end="19:30">(<expr pos:start="19:22" pos:end="19:29"><name pos:start="19:22" pos:end="19:24">ret</name> <operator pos:start="19:26" pos:end="19:27">!=</operator> <literal type="number" pos:start="19:29" pos:end="19:29">0</literal></expr>)</condition><block type="pseudo" pos:start="23:17" pos:end="23:22"><block_content pos:start="23:17" pos:end="23:22">

                <comment type="block" pos:start="21:17" pos:end="21:44">/* state change requested */</comment>

                <break pos:start="23:17" pos:end="23:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="25:11" pos:end="229:9">else <block pos:start="25:16" pos:end="229:9">{<block_content pos:start="27:13" pos:end="227:13">

            <if_stmt pos:start="27:13" pos:end="227:13"><if pos:start="27:13" pos:end="191:13">if <condition pos:start="27:16" pos:end="27:33">(<expr pos:start="27:17" pos:end="27:32"><name pos:start="27:17" pos:end="27:32"><name pos:start="27:17" pos:end="27:17">c</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:32">is_packetized</name></name></expr>)</condition> <block pos:start="27:35" pos:end="191:13">{<block_content pos:start="31:17" pos:end="189:17">

                <comment type="block" pos:start="29:17" pos:end="29:37">/* RTP data output */</comment>

                <expr_stmt pos:start="31:17" pos:end="31:52"><expr pos:start="31:17" pos:end="31:51"><name pos:start="31:17" pos:end="31:19">len</name> <operator pos:start="31:21" pos:end="31:21">=</operator> <name pos:start="31:23" pos:end="31:35"><name pos:start="31:23" pos:end="31:23">c</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:35">buffer_end</name></name> <operator pos:start="31:37" pos:end="31:37">-</operator> <name pos:start="31:39" pos:end="31:51"><name pos:start="31:39" pos:end="31:39">c</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:51">buffer_ptr</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="33:17" pos:end="43:17"><if pos:start="33:17" pos:end="43:17">if <condition pos:start="33:20" pos:end="33:28">(<expr pos:start="33:21" pos:end="33:27"><name pos:start="33:21" pos:end="33:23">len</name> <operator pos:start="33:25" pos:end="33:25">&lt;</operator> <literal type="number" pos:start="33:27" pos:end="33:27">4</literal></expr>)</condition> <block pos:start="33:30" pos:end="43:17">{<block_content pos:start="37:17" pos:end="41:29">

                    <comment type="block" pos:start="35:21" pos:end="35:57">/* fail safe - should never happen */</comment>

                <label pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:21">fail1</name>:</label>

                    <expr_stmt pos:start="39:21" pos:end="39:50"><expr pos:start="39:21" pos:end="39:49"><name pos:start="39:21" pos:end="39:33"><name pos:start="39:21" pos:end="39:21">c</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:33">buffer_ptr</name></name> <operator pos:start="39:35" pos:end="39:35">=</operator> <name pos:start="39:37" pos:end="39:49"><name pos:start="39:37" pos:end="39:37">c</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:49">buffer_end</name></name></expr>;</expr_stmt>

                    <return pos:start="41:21" pos:end="41:29">return <expr pos:start="41:28" pos:end="41:28"><literal type="number" pos:start="41:28" pos:end="41:28">0</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="45:17" pos:end="51:39"><expr pos:start="45:17" pos:end="51:38"><name pos:start="45:17" pos:end="45:19">len</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <operator pos:start="45:23" pos:end="45:23">(</operator><name pos:start="45:24" pos:end="45:39"><name pos:start="45:24" pos:end="45:24">c</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:36">buffer_ptr</name><index pos:start="45:37" pos:end="45:39">[<expr pos:start="45:38" pos:end="45:38"><literal type="number" pos:start="45:38" pos:end="45:38">0</literal></expr>]</index></name> <operator pos:start="45:41" pos:end="45:42">&lt;&lt;</operator> <literal type="number" pos:start="45:44" pos:end="45:45">24</literal><operator pos:start="45:46" pos:end="45:46">)</operator> <operator pos:start="45:48" pos:end="45:48">|</operator>

                    <operator pos:start="47:21" pos:end="47:21">(</operator><name pos:start="47:22" pos:end="47:37"><name pos:start="47:22" pos:end="47:22">c</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:34">buffer_ptr</name><index pos:start="47:35" pos:end="47:37">[<expr pos:start="47:36" pos:end="47:36"><literal type="number" pos:start="47:36" pos:end="47:36">1</literal></expr>]</index></name> <operator pos:start="47:39" pos:end="47:40">&lt;&lt;</operator> <literal type="number" pos:start="47:42" pos:end="47:43">16</literal><operator pos:start="47:44" pos:end="47:44">)</operator> <operator pos:start="47:46" pos:end="47:46">|</operator>

                    <operator pos:start="49:21" pos:end="49:21">(</operator><name pos:start="49:22" pos:end="49:37"><name pos:start="49:22" pos:end="49:22">c</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:34">buffer_ptr</name><index pos:start="49:35" pos:end="49:37">[<expr pos:start="49:36" pos:end="49:36"><literal type="number" pos:start="49:36" pos:end="49:36">2</literal></expr>]</index></name> <operator pos:start="49:39" pos:end="49:40">&lt;&lt;</operator> <literal type="number" pos:start="49:42" pos:end="49:42">8</literal><operator pos:start="49:43" pos:end="49:43">)</operator> <operator pos:start="49:45" pos:end="49:45">|</operator>

                    <operator pos:start="51:21" pos:end="51:21">(</operator><name pos:start="51:22" pos:end="51:37"><name pos:start="51:22" pos:end="51:22">c</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:34">buffer_ptr</name><index pos:start="51:35" pos:end="51:37">[<expr pos:start="51:36" pos:end="51:36"><literal type="number" pos:start="51:36" pos:end="51:36">3</literal></expr>]</index></name><operator pos:start="51:38" pos:end="51:38">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="53:17" pos:end="55:31"><if pos:start="53:17" pos:end="55:31">if <condition pos:start="53:20" pos:end="53:58">(<expr pos:start="53:21" pos:end="53:57"><name pos:start="53:21" pos:end="53:23">len</name> <operator pos:start="53:25" pos:end="53:25">&gt;</operator> <operator pos:start="53:27" pos:end="53:27">(</operator><name pos:start="53:28" pos:end="53:40"><name pos:start="53:28" pos:end="53:28">c</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:40">buffer_end</name></name> <operator pos:start="53:42" pos:end="53:42">-</operator> <name pos:start="53:44" pos:end="53:56"><name pos:start="53:44" pos:end="53:44">c</name><operator pos:start="53:45" pos:end="53:46">-&gt;</operator><name pos:start="53:47" pos:end="53:56">buffer_ptr</name></name><operator pos:start="53:57" pos:end="53:57">)</operator></expr>)</condition><block type="pseudo" pos:start="55:21" pos:end="55:31"><block_content pos:start="55:21" pos:end="55:31">

                    <goto pos:start="55:21" pos:end="55:31">goto <name pos:start="55:26" pos:end="55:30">fail1</name>;</goto></block_content></block></if></if_stmt>

                <if_stmt pos:start="57:17" pos:end="63:17"><if pos:start="57:17" pos:end="63:17">if <condition pos:start="57:20" pos:end="57:73">(<expr pos:start="57:21" pos:end="57:72"><operator pos:start="57:21" pos:end="57:21">(</operator><call pos:start="57:22" pos:end="57:45"><name pos:start="57:22" pos:end="57:42">get_packet_send_clock</name><argument_list pos:start="57:43" pos:end="57:45">(<argument pos:start="57:44" pos:end="57:44"><expr pos:start="57:44" pos:end="57:44"><name pos:start="57:44" pos:end="57:44">c</name></expr></argument>)</argument_list></call> <operator pos:start="57:47" pos:end="57:47">-</operator> <call pos:start="57:49" pos:end="57:67"><name pos:start="57:49" pos:end="57:64">get_server_clock</name><argument_list pos:start="57:65" pos:end="57:67">(<argument pos:start="57:66" pos:end="57:66"><expr pos:start="57:66" pos:end="57:66"><name pos:start="57:66" pos:end="57:66">c</name></expr></argument>)</argument_list></call><operator pos:start="57:68" pos:end="57:68">)</operator> <operator pos:start="57:70" pos:end="57:70">&gt;</operator> <literal type="number" pos:start="57:72" pos:end="57:72">0</literal></expr>)</condition> <block pos:start="57:75" pos:end="63:17">{<block_content pos:start="61:21" pos:end="61:29">

                    <comment type="block" pos:start="59:21" pos:end="59:58">/* nothing to send yet: we can wait */</comment>

                    <return pos:start="61:21" pos:end="61:29">return <expr pos:start="61:28" pos:end="61:28"><literal type="number" pos:start="61:28" pos:end="61:28">0</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="67:17" pos:end="67:37"><expr pos:start="67:17" pos:end="67:36"><name pos:start="67:17" pos:end="67:29"><name pos:start="67:17" pos:end="67:17">c</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:29">data_count</name></name> <operator pos:start="67:31" pos:end="67:32">+=</operator> <name pos:start="67:34" pos:end="67:36">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="69:61"><expr pos:start="69:17" pos:end="69:60"><call pos:start="69:17" pos:end="69:60"><name pos:start="69:17" pos:end="69:31">update_datarate</name><argument_list pos:start="69:32" pos:end="69:60">(<argument pos:start="69:33" pos:end="69:44"><expr pos:start="69:33" pos:end="69:44"><operator pos:start="69:33" pos:end="69:33">&amp;</operator><name pos:start="69:34" pos:end="69:44"><name pos:start="69:34" pos:end="69:34">c</name><operator pos:start="69:35" pos:end="69:36">-&gt;</operator><name pos:start="69:37" pos:end="69:44">datarate</name></name></expr></argument>, <argument pos:start="69:47" pos:end="69:59"><expr pos:start="69:47" pos:end="69:59"><name pos:start="69:47" pos:end="69:59"><name pos:start="69:47" pos:end="69:47">c</name><operator pos:start="69:48" pos:end="69:49">-&gt;</operator><name pos:start="69:50" pos:end="69:59">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="71:17" pos:end="73:51"><if pos:start="71:17" pos:end="73:51">if <condition pos:start="71:20" pos:end="71:30">(<expr pos:start="71:21" pos:end="71:29"><name pos:start="71:21" pos:end="71:29"><name pos:start="71:21" pos:end="71:21">c</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:29">stream</name></name></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:51"><block_content pos:start="73:21" pos:end="73:51">

                    <expr_stmt pos:start="73:21" pos:end="73:51"><expr pos:start="73:21" pos:end="73:50"><name pos:start="73:21" pos:end="73:43"><name pos:start="73:21" pos:end="73:21">c</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:29">stream</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:43">bytes_served</name></name> <operator pos:start="73:45" pos:end="73:46">+=</operator> <name pos:start="73:48" pos:end="73:50">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="77:17" pos:end="189:17"><if pos:start="77:17" pos:end="175:17">if <condition pos:start="77:20" pos:end="77:64">(<expr pos:start="77:21" pos:end="77:63"><name pos:start="77:21" pos:end="77:35"><name pos:start="77:21" pos:end="77:21">c</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:35">rtp_protocol</name></name> <operator pos:start="77:37" pos:end="77:38">==</operator> <name pos:start="77:40" pos:end="77:63">RTSP_LOWER_TRANSPORT_TCP</name></expr>)</condition> <block pos:start="77:66" pos:end="175:17">{<block_content pos:start="81:21" pos:end="173:52">

                    <comment type="block" pos:start="79:21" pos:end="79:77">/* RTP packets are sent inside the RTSP TCP connection */</comment>

                    <decl_stmt pos:start="81:21" pos:end="81:36"><decl pos:start="81:21" pos:end="81:35"><type pos:start="81:21" pos:end="81:33"><name pos:start="81:21" pos:end="81:31">AVIOContext</name> <modifier pos:start="81:33" pos:end="81:33">*</modifier></type><name pos:start="81:34" pos:end="81:35">pb</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="83:21" pos:end="83:48"><decl pos:start="83:21" pos:end="83:41"><type pos:start="83:21" pos:end="83:23"><name pos:start="83:21" pos:end="83:23">int</name></type> <name pos:start="83:25" pos:end="83:41">interleaved_index</name></decl>, <decl pos:start="83:44" pos:end="83:47"><type ref="prev" pos:start="83:21" pos:end="83:23"/><name pos:start="83:44" pos:end="83:47">size</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="85:21" pos:end="85:38"><decl pos:start="85:21" pos:end="85:37"><type pos:start="85:21" pos:end="85:27"><name pos:start="85:21" pos:end="85:27">uint8_t</name></type> <name pos:start="85:29" pos:end="85:37"><name pos:start="85:29" pos:end="85:34">header</name><index pos:start="85:35" pos:end="85:37">[<expr pos:start="85:36" pos:end="85:36"><literal type="number" pos:start="85:36" pos:end="85:36">4</literal></expr>]</index></name></decl>;</decl_stmt>

                    <decl_stmt pos:start="87:21" pos:end="87:40"><decl pos:start="87:21" pos:end="87:39"><type pos:start="87:21" pos:end="87:33"><name pos:start="87:21" pos:end="87:31">HTTPContext</name> <modifier pos:start="87:33" pos:end="87:33">*</modifier></type><name pos:start="87:34" pos:end="87:39">rtsp_c</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="91:21" pos:end="91:39"><expr pos:start="91:21" pos:end="91:38"><name pos:start="91:21" pos:end="91:26">rtsp_c</name> <operator pos:start="91:28" pos:end="91:28">=</operator> <name pos:start="91:30" pos:end="91:38"><name pos:start="91:30" pos:end="91:30">c</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:38">rtsp_c</name></name></expr>;</expr_stmt>

                    <comment type="block" pos:start="93:21" pos:end="93:59">/* if no RTSP connection left, error */</comment>

                    <if_stmt pos:start="95:21" pos:end="97:34"><if pos:start="95:21" pos:end="97:34">if <condition pos:start="95:24" pos:end="95:32">(<expr pos:start="95:25" pos:end="95:31"><operator pos:start="95:25" pos:end="95:25">!</operator><name pos:start="95:26" pos:end="95:31">rtsp_c</name></expr>)</condition><block type="pseudo" pos:start="97:25" pos:end="97:34"><block_content pos:start="97:25" pos:end="97:34">

                        <return pos:start="97:25" pos:end="97:34">return <expr pos:start="97:32" pos:end="97:33"><operator pos:start="97:32" pos:end="97:32">-</operator><literal type="number" pos:start="97:33" pos:end="97:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <comment type="block" pos:start="99:21" pos:end="99:66">/* if already sending something, then wait. */</comment>

                    <if_stmt pos:start="101:21" pos:end="103:30"><if pos:start="101:21" pos:end="103:30">if <condition pos:start="101:24" pos:end="101:64">(<expr pos:start="101:25" pos:end="101:63"><name pos:start="101:25" pos:end="101:37"><name pos:start="101:25" pos:end="101:30">rtsp_c</name><operator pos:start="101:31" pos:end="101:32">-&gt;</operator><name pos:start="101:33" pos:end="101:37">state</name></name> <operator pos:start="101:39" pos:end="101:40">!=</operator> <name pos:start="101:42" pos:end="101:63">RTSPSTATE_WAIT_REQUEST</name></expr>)</condition><block type="pseudo" pos:start="103:25" pos:end="103:30"><block_content pos:start="103:25" pos:end="103:30">

                        <break pos:start="103:25" pos:end="103:30">break;</break></block_content></block></if></if_stmt>

                    <if_stmt pos:start="105:21" pos:end="107:35"><if pos:start="105:21" pos:end="107:35">if <condition pos:start="105:24" pos:end="105:51">(<expr pos:start="105:25" pos:end="105:50"><call pos:start="105:25" pos:end="105:46"><name pos:start="105:25" pos:end="105:41">avio_open_dyn_buf</name><argument_list pos:start="105:42" pos:end="105:46">(<argument pos:start="105:43" pos:end="105:45"><expr pos:start="105:43" pos:end="105:45"><operator pos:start="105:43" pos:end="105:43">&amp;</operator><name pos:start="105:44" pos:end="105:45">pb</name></expr></argument>)</argument_list></call> <operator pos:start="105:48" pos:end="105:48">&lt;</operator> <literal type="number" pos:start="105:50" pos:end="105:50">0</literal></expr>)</condition><block type="pseudo" pos:start="107:25" pos:end="107:35"><block_content pos:start="107:25" pos:end="107:35">

                        <goto pos:start="107:25" pos:end="107:35">goto <name pos:start="107:30" pos:end="107:34">fail1</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:67"><expr pos:start="109:21" pos:end="109:66"><name pos:start="109:21" pos:end="109:37">interleaved_index</name> <operator pos:start="109:39" pos:end="109:39">=</operator> <name pos:start="109:41" pos:end="109:62"><name pos:start="109:41" pos:end="109:41">c</name><operator pos:start="109:42" pos:end="109:43">-&gt;</operator><name pos:start="109:44" pos:end="109:62">packet_stream_index</name></name> <operator pos:start="109:64" pos:end="109:64">*</operator> <literal type="number" pos:start="109:66" pos:end="109:66">2</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="111:21" pos:end="111:62">/* RTCP packets are sent at odd indexes */</comment>

                    <if_stmt pos:start="113:21" pos:end="115:44"><if pos:start="113:21" pos:end="115:44">if <condition pos:start="113:24" pos:end="113:48">(<expr pos:start="113:25" pos:end="113:47"><name pos:start="113:25" pos:end="113:40"><name pos:start="113:25" pos:end="113:25">c</name><operator pos:start="113:26" pos:end="113:27">-&gt;</operator><name pos:start="113:28" pos:end="113:37">buffer_ptr</name><index pos:start="113:38" pos:end="113:40">[<expr pos:start="113:39" pos:end="113:39"><literal type="number" pos:start="113:39" pos:end="113:39">1</literal></expr>]</index></name> <operator pos:start="113:42" pos:end="113:43">==</operator> <literal type="number" pos:start="113:45" pos:end="113:47">200</literal></expr>)</condition><block type="pseudo" pos:start="115:25" pos:end="115:44"><block_content pos:start="115:25" pos:end="115:44">

                        <expr_stmt pos:start="115:25" pos:end="115:44"><expr pos:start="115:25" pos:end="115:43"><name pos:start="115:25" pos:end="115:41">interleaved_index</name><operator pos:start="115:42" pos:end="115:43">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="block" pos:start="117:21" pos:end="117:47">/* write RTSP TCP header */</comment>

                    <expr_stmt pos:start="119:21" pos:end="119:36"><expr pos:start="119:21" pos:end="119:35"><name pos:start="119:21" pos:end="119:29"><name pos:start="119:21" pos:end="119:26">header</name><index pos:start="119:27" pos:end="119:29">[<expr pos:start="119:28" pos:end="119:28"><literal type="number" pos:start="119:28" pos:end="119:28">0</literal></expr>]</index></name> <operator pos:start="119:31" pos:end="119:31">=</operator> <literal type="char" pos:start="119:33" pos:end="119:35">'$'</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="121:21" pos:end="121:50"><expr pos:start="121:21" pos:end="121:49"><name pos:start="121:21" pos:end="121:29"><name pos:start="121:21" pos:end="121:26">header</name><index pos:start="121:27" pos:end="121:29">[<expr pos:start="121:28" pos:end="121:28"><literal type="number" pos:start="121:28" pos:end="121:28">1</literal></expr>]</index></name> <operator pos:start="121:31" pos:end="121:31">=</operator> <name pos:start="121:33" pos:end="121:49">interleaved_index</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="123:21" pos:end="123:41"><expr pos:start="123:21" pos:end="123:40"><name pos:start="123:21" pos:end="123:29"><name pos:start="123:21" pos:end="123:26">header</name><index pos:start="123:27" pos:end="123:29">[<expr pos:start="123:28" pos:end="123:28"><literal type="number" pos:start="123:28" pos:end="123:28">2</literal></expr>]</index></name> <operator pos:start="123:31" pos:end="123:31">=</operator> <name pos:start="123:33" pos:end="123:35">len</name> <operator pos:start="123:37" pos:end="123:38">&gt;&gt;</operator> <literal type="number" pos:start="123:40" pos:end="123:40">8</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="125:21" pos:end="125:36"><expr pos:start="125:21" pos:end="125:35"><name pos:start="125:21" pos:end="125:29"><name pos:start="125:21" pos:end="125:26">header</name><index pos:start="125:27" pos:end="125:29">[<expr pos:start="125:28" pos:end="125:28"><literal type="number" pos:start="125:28" pos:end="125:28">3</literal></expr>]</index></name> <operator pos:start="125:31" pos:end="125:31">=</operator> <name pos:start="125:33" pos:end="125:35">len</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="127:21" pos:end="127:46"><expr pos:start="127:21" pos:end="127:45"><call pos:start="127:21" pos:end="127:45"><name pos:start="127:21" pos:end="127:30">avio_write</name><argument_list pos:start="127:31" pos:end="127:45">(<argument pos:start="127:32" pos:end="127:33"><expr pos:start="127:32" pos:end="127:33"><name pos:start="127:32" pos:end="127:33">pb</name></expr></argument>, <argument pos:start="127:36" pos:end="127:41"><expr pos:start="127:36" pos:end="127:41"><name pos:start="127:36" pos:end="127:41">header</name></expr></argument>, <argument pos:start="127:44" pos:end="127:44"><expr pos:start="127:44" pos:end="127:44"><literal type="number" pos:start="127:44" pos:end="127:44">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="129:21" pos:end="129:47">/* write RTP packet data */</comment>

                    <expr_stmt pos:start="131:21" pos:end="131:39"><expr pos:start="131:21" pos:end="131:38"><name pos:start="131:21" pos:end="131:33"><name pos:start="131:21" pos:end="131:21">c</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:33">buffer_ptr</name></name> <operator pos:start="131:35" pos:end="131:36">+=</operator> <literal type="number" pos:start="131:38" pos:end="131:38">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="133:21" pos:end="133:55"><expr pos:start="133:21" pos:end="133:54"><call pos:start="133:21" pos:end="133:54"><name pos:start="133:21" pos:end="133:30">avio_write</name><argument_list pos:start="133:31" pos:end="133:54">(<argument pos:start="133:32" pos:end="133:33"><expr pos:start="133:32" pos:end="133:33"><name pos:start="133:32" pos:end="133:33">pb</name></expr></argument>, <argument pos:start="133:36" pos:end="133:48"><expr pos:start="133:36" pos:end="133:48"><name pos:start="133:36" pos:end="133:48"><name pos:start="133:36" pos:end="133:36">c</name><operator pos:start="133:37" pos:end="133:38">-&gt;</operator><name pos:start="133:39" pos:end="133:48">buffer_ptr</name></name></expr></argument>, <argument pos:start="133:51" pos:end="133:53"><expr pos:start="133:51" pos:end="133:53"><name pos:start="133:51" pos:end="133:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="135:21" pos:end="135:69"><expr pos:start="135:21" pos:end="135:68"><name pos:start="135:21" pos:end="135:24">size</name> <operator pos:start="135:26" pos:end="135:26">=</operator> <call pos:start="135:28" pos:end="135:68"><name pos:start="135:28" pos:end="135:45">avio_close_dyn_buf</name><argument_list pos:start="135:46" pos:end="135:68">(<argument pos:start="135:47" pos:end="135:48"><expr pos:start="135:47" pos:end="135:48"><name pos:start="135:47" pos:end="135:48">pb</name></expr></argument>, <argument pos:start="135:51" pos:end="135:67"><expr pos:start="135:51" pos:end="135:67"><operator pos:start="135:51" pos:end="135:51">&amp;</operator><name pos:start="135:52" pos:end="135:67"><name pos:start="135:52" pos:end="135:52">c</name><operator pos:start="135:53" pos:end="135:54">-&gt;</operator><name pos:start="135:55" pos:end="135:67">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="137:21" pos:end="137:58">/* prepare asynchronous TCP sending */</comment>

                    <expr_stmt pos:start="139:21" pos:end="139:65"><expr pos:start="139:21" pos:end="139:64"><name pos:start="139:21" pos:end="139:45"><name pos:start="139:21" pos:end="139:26">rtsp_c</name><operator pos:start="139:27" pos:end="139:28">-&gt;</operator><name pos:start="139:29" pos:end="139:45">packet_buffer_ptr</name></name> <operator pos:start="139:47" pos:end="139:47">=</operator> <name pos:start="139:49" pos:end="139:64"><name pos:start="139:49" pos:end="139:49">c</name><operator pos:start="139:50" pos:end="139:51">-&gt;</operator><name pos:start="139:52" pos:end="139:64">packet_buffer</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="141:21" pos:end="141:72"><expr pos:start="141:21" pos:end="141:71"><name pos:start="141:21" pos:end="141:45"><name pos:start="141:21" pos:end="141:26">rtsp_c</name><operator pos:start="141:27" pos:end="141:28">-&gt;</operator><name pos:start="141:29" pos:end="141:45">packet_buffer_end</name></name> <operator pos:start="141:47" pos:end="141:47">=</operator> <name pos:start="141:49" pos:end="141:64"><name pos:start="141:49" pos:end="141:49">c</name><operator pos:start="141:50" pos:end="141:51">-&gt;</operator><name pos:start="141:52" pos:end="141:64">packet_buffer</name></name> <operator pos:start="141:66" pos:end="141:66">+</operator> <name pos:start="141:68" pos:end="141:71">size</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="143:21" pos:end="143:41"><expr pos:start="143:21" pos:end="143:40"><name pos:start="143:21" pos:end="143:33"><name pos:start="143:21" pos:end="143:21">c</name><operator pos:start="143:22" pos:end="143:23">-&gt;</operator><name pos:start="143:24" pos:end="143:33">buffer_ptr</name></name> <operator pos:start="143:35" pos:end="143:36">+=</operator> <name pos:start="143:38" pos:end="143:40">len</name></expr>;</expr_stmt>



                    <comment type="block" pos:start="147:21" pos:end="147:52">/* send everything we can NOW */</comment>

                    <expr_stmt pos:start="149:21" pos:end="151:90"><expr pos:start="149:21" pos:end="151:89"><name pos:start="149:21" pos:end="149:23">len</name> <operator pos:start="149:25" pos:end="149:25">=</operator> <call pos:start="149:27" pos:end="151:89"><name pos:start="149:27" pos:end="149:30">send</name><argument_list pos:start="149:31" pos:end="151:89">(<argument pos:start="149:32" pos:end="149:41"><expr pos:start="149:32" pos:end="149:41"><name pos:start="149:32" pos:end="149:41"><name pos:start="149:32" pos:end="149:37">rtsp_c</name><operator pos:start="149:38" pos:end="149:39">-&gt;</operator><name pos:start="149:40" pos:end="149:41">fd</name></name></expr></argument>, <argument pos:start="149:44" pos:end="149:68"><expr pos:start="149:44" pos:end="149:68"><name pos:start="149:44" pos:end="149:68"><name pos:start="149:44" pos:end="149:49">rtsp_c</name><operator pos:start="149:50" pos:end="149:51">-&gt;</operator><name pos:start="149:52" pos:end="149:68">packet_buffer_ptr</name></name></expr></argument>,

                                <argument pos:start="151:33" pos:end="151:85"><expr pos:start="151:33" pos:end="151:85"><name pos:start="151:33" pos:end="151:57"><name pos:start="151:33" pos:end="151:38">rtsp_c</name><operator pos:start="151:39" pos:end="151:40">-&gt;</operator><name pos:start="151:41" pos:end="151:57">packet_buffer_end</name></name> <operator pos:start="151:59" pos:end="151:59">-</operator> <name pos:start="151:61" pos:end="151:85"><name pos:start="151:61" pos:end="151:66">rtsp_c</name><operator pos:start="151:67" pos:end="151:68">-&gt;</operator><name pos:start="151:69" pos:end="151:85">packet_buffer_ptr</name></name></expr></argument>, <argument pos:start="151:88" pos:end="151:88"><expr pos:start="151:88" pos:end="151:88"><literal type="number" pos:start="151:88" pos:end="151:88">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="153:21" pos:end="155:57"><if pos:start="153:21" pos:end="155:57">if <condition pos:start="153:24" pos:end="153:32">(<expr pos:start="153:25" pos:end="153:31"><name pos:start="153:25" pos:end="153:27">len</name> <operator pos:start="153:29" pos:end="153:29">&gt;</operator> <literal type="number" pos:start="153:31" pos:end="153:31">0</literal></expr>)</condition><block type="pseudo" pos:start="155:25" pos:end="155:57"><block_content pos:start="155:25" pos:end="155:57">

                        <expr_stmt pos:start="155:25" pos:end="155:57"><expr pos:start="155:25" pos:end="155:56"><name pos:start="155:25" pos:end="155:49"><name pos:start="155:25" pos:end="155:30">rtsp_c</name><operator pos:start="155:31" pos:end="155:32">-&gt;</operator><name pos:start="155:33" pos:end="155:49">packet_buffer_ptr</name></name> <operator pos:start="155:51" pos:end="155:52">+=</operator> <name pos:start="155:54" pos:end="155:56">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="157:21" pos:end="173:52"><if pos:start="157:21" pos:end="169:21">if <condition pos:start="157:24" pos:end="157:78">(<expr pos:start="157:25" pos:end="157:77"><name pos:start="157:25" pos:end="157:49"><name pos:start="157:25" pos:end="157:30">rtsp_c</name><operator pos:start="157:31" pos:end="157:32">-&gt;</operator><name pos:start="157:33" pos:end="157:49">packet_buffer_ptr</name></name> <operator pos:start="157:51" pos:end="157:51">&lt;</operator> <name pos:start="157:53" pos:end="157:77"><name pos:start="157:53" pos:end="157:58">rtsp_c</name><operator pos:start="157:59" pos:end="157:60">-&gt;</operator><name pos:start="157:61" pos:end="157:77">packet_buffer_end</name></name></expr>)</condition> <block pos:start="157:80" pos:end="169:21">{<block_content pos:start="165:25" pos:end="167:30">

                        <comment type="block" pos:start="159:25" pos:end="163:60">/* if we could not send all the data, we will

                           send it later, so a new state is needed to

                           "lock" the RTSP TCP connection */</comment>

                        <expr_stmt pos:start="165:25" pos:end="165:62"><expr pos:start="165:25" pos:end="165:61"><name pos:start="165:25" pos:end="165:37"><name pos:start="165:25" pos:end="165:30">rtsp_c</name><operator pos:start="165:31" pos:end="165:32">-&gt;</operator><name pos:start="165:33" pos:end="165:37">state</name></name> <operator pos:start="165:39" pos:end="165:39">=</operator> <name pos:start="165:41" pos:end="165:61">RTSPSTATE_SEND_PACKET</name></expr>;</expr_stmt>

                        <break pos:start="167:25" pos:end="167:30">break;</break>

                    </block_content>}</block></if> <else pos:start="169:23" pos:end="173:52">else<block type="pseudo" pos:start="173:25" pos:end="173:52"><block_content pos:start="173:25" pos:end="173:52">

                        <comment type="block" pos:start="171:25" pos:end="171:52">/* all data has been sent */</comment>

                        <expr_stmt pos:start="173:25" pos:end="173:52"><expr pos:start="173:25" pos:end="173:51"><call pos:start="173:25" pos:end="173:51"><name pos:start="173:25" pos:end="173:32">av_freep</name><argument_list pos:start="173:33" pos:end="173:51">(<argument pos:start="173:34" pos:end="173:50"><expr pos:start="173:34" pos:end="173:50"><operator pos:start="173:34" pos:end="173:34">&amp;</operator><name pos:start="173:35" pos:end="173:50"><name pos:start="173:35" pos:end="173:35">c</name><operator pos:start="173:36" pos:end="173:37">-&gt;</operator><name pos:start="173:38" pos:end="173:50">packet_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="175:19" pos:end="189:17">else <block pos:start="175:24" pos:end="189:17">{<block_content pos:start="179:21" pos:end="185:41">

                    <comment type="block" pos:start="177:21" pos:end="177:57">/* send RTP packet directly in UDP */</comment>

                    <expr_stmt pos:start="179:21" pos:end="179:39"><expr pos:start="179:21" pos:end="179:38"><name pos:start="179:21" pos:end="179:33"><name pos:start="179:21" pos:end="179:21">c</name><operator pos:start="179:22" pos:end="179:23">-&gt;</operator><name pos:start="179:24" pos:end="179:33">buffer_ptr</name></name> <operator pos:start="179:35" pos:end="179:36">+=</operator> <literal type="number" pos:start="179:38" pos:end="179:38">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="181:21" pos:end="183:52"><expr pos:start="181:21" pos:end="183:51"><call pos:start="181:21" pos:end="183:51"><name pos:start="181:21" pos:end="181:31">ffurl_write</name><argument_list pos:start="181:32" pos:end="183:51">(<argument pos:start="181:33" pos:end="181:70"><expr pos:start="181:33" pos:end="181:70"><name pos:start="181:33" pos:end="181:70"><name pos:start="181:33" pos:end="181:33">c</name><operator pos:start="181:34" pos:end="181:35">-&gt;</operator><name pos:start="181:36" pos:end="181:46">rtp_handles</name><index pos:start="181:47" pos:end="181:70">[<expr pos:start="181:48" pos:end="181:69"><name pos:start="181:48" pos:end="181:69"><name pos:start="181:48" pos:end="181:48">c</name><operator pos:start="181:49" pos:end="181:50">-&gt;</operator><name pos:start="181:51" pos:end="181:69">packet_stream_index</name></name></expr>]</index></name></expr></argument>,

                                <argument pos:start="183:33" pos:end="183:45"><expr pos:start="183:33" pos:end="183:45"><name pos:start="183:33" pos:end="183:45"><name pos:start="183:33" pos:end="183:33">c</name><operator pos:start="183:34" pos:end="183:35">-&gt;</operator><name pos:start="183:36" pos:end="183:45">buffer_ptr</name></name></expr></argument>, <argument pos:start="183:48" pos:end="183:50"><expr pos:start="183:48" pos:end="183:50"><name pos:start="183:48" pos:end="183:50">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:41"><expr pos:start="185:21" pos:end="185:40"><name pos:start="185:21" pos:end="185:33"><name pos:start="185:21" pos:end="185:21">c</name><operator pos:start="185:22" pos:end="185:23">-&gt;</operator><name pos:start="185:24" pos:end="185:33">buffer_ptr</name></name> <operator pos:start="185:35" pos:end="185:36">+=</operator> <name pos:start="185:38" pos:end="185:40">len</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="187:21" pos:end="187:88">/* here we continue as we can send several packets per 10 ms slot */</comment>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="191:15" pos:end="227:13">else <block pos:start="191:20" pos:end="227:13">{<block_content pos:start="195:17" pos:end="225:22">

                <comment type="block" pos:start="193:17" pos:end="193:37">/* TCP data output */</comment>

                <expr_stmt pos:start="195:17" pos:end="195:83"><expr pos:start="195:17" pos:end="195:82"><name pos:start="195:17" pos:end="195:19">len</name> <operator pos:start="195:21" pos:end="195:21">=</operator> <call pos:start="195:23" pos:end="195:82"><name pos:start="195:23" pos:end="195:26">send</name><argument_list pos:start="195:27" pos:end="195:82">(<argument pos:start="195:28" pos:end="195:32"><expr pos:start="195:28" pos:end="195:32"><name pos:start="195:28" pos:end="195:32"><name pos:start="195:28" pos:end="195:28">c</name><operator pos:start="195:29" pos:end="195:30">-&gt;</operator><name pos:start="195:31" pos:end="195:32">fd</name></name></expr></argument>, <argument pos:start="195:35" pos:end="195:47"><expr pos:start="195:35" pos:end="195:47"><name pos:start="195:35" pos:end="195:47"><name pos:start="195:35" pos:end="195:35">c</name><operator pos:start="195:36" pos:end="195:37">-&gt;</operator><name pos:start="195:38" pos:end="195:47">buffer_ptr</name></name></expr></argument>, <argument pos:start="195:50" pos:end="195:78"><expr pos:start="195:50" pos:end="195:78"><name pos:start="195:50" pos:end="195:62"><name pos:start="195:50" pos:end="195:50">c</name><operator pos:start="195:51" pos:end="195:52">-&gt;</operator><name pos:start="195:53" pos:end="195:62">buffer_end</name></name> <operator pos:start="195:64" pos:end="195:64">-</operator> <name pos:start="195:66" pos:end="195:78"><name pos:start="195:66" pos:end="195:66">c</name><operator pos:start="195:67" pos:end="195:68">-&gt;</operator><name pos:start="195:69" pos:end="195:78">buffer_ptr</name></name></expr></argument>, <argument pos:start="195:81" pos:end="195:81"><expr pos:start="195:81" pos:end="195:81"><literal type="number" pos:start="195:81" pos:end="195:81">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="197:17" pos:end="213:41"><if pos:start="197:17" pos:end="211:17">if <condition pos:start="197:20" pos:end="197:28">(<expr pos:start="197:21" pos:end="197:27"><name pos:start="197:21" pos:end="197:23">len</name> <operator pos:start="197:25" pos:end="197:25">&lt;</operator> <literal type="number" pos:start="197:27" pos:end="197:27">0</literal></expr>)</condition> <block pos:start="197:30" pos:end="211:17">{<block_content pos:start="199:21" pos:end="209:33">

                    <if_stmt pos:start="199:21" pos:end="209:33"><if pos:start="199:21" pos:end="205:34">if <condition pos:start="199:24" pos:end="201:56">(<expr pos:start="199:25" pos:end="201:55"><call pos:start="199:25" pos:end="199:37"><name pos:start="199:25" pos:end="199:35">ff_neterrno</name><argument_list pos:start="199:36" pos:end="199:37">()</argument_list></call> <operator pos:start="199:39" pos:end="199:40">!=</operator> <call pos:start="199:42" pos:end="199:56"><name pos:start="199:42" pos:end="199:48">AVERROR</name><argument_list pos:start="199:49" pos:end="199:56">(<argument pos:start="199:50" pos:end="199:55"><expr pos:start="199:50" pos:end="199:55"><name pos:start="199:50" pos:end="199:55">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="199:58" pos:end="199:59">&amp;&amp;</operator>

                        <call pos:start="201:25" pos:end="201:37"><name pos:start="201:25" pos:end="201:35">ff_neterrno</name><argument_list pos:start="201:36" pos:end="201:37">()</argument_list></call> <operator pos:start="201:39" pos:end="201:40">!=</operator> <call pos:start="201:42" pos:end="201:55"><name pos:start="201:42" pos:end="201:48">AVERROR</name><argument_list pos:start="201:49" pos:end="201:55">(<argument pos:start="201:50" pos:end="201:54"><expr pos:start="201:50" pos:end="201:54"><name pos:start="201:50" pos:end="201:54">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="205:25" pos:end="205:34"><block_content pos:start="205:25" pos:end="205:34">

                        <comment type="block" pos:start="203:25" pos:end="203:54">/* error : close connection */</comment>

                        <return pos:start="205:25" pos:end="205:34">return <expr pos:start="205:32" pos:end="205:33"><operator pos:start="205:32" pos:end="205:32">-</operator><literal type="number" pos:start="205:33" pos:end="205:33">1</literal></expr>;</return></block_content></block></if>

                    <else pos:start="207:21" pos:end="209:33">else<block type="pseudo" pos:start="209:25" pos:end="209:33"><block_content pos:start="209:25" pos:end="209:33">

                        <return pos:start="209:25" pos:end="209:33">return <expr pos:start="209:32" pos:end="209:32"><literal type="number" pos:start="209:32" pos:end="209:32">0</literal></expr>;</return></block_content></block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="211:19" pos:end="213:41">else<block type="pseudo" pos:start="213:21" pos:end="213:41"><block_content pos:start="213:21" pos:end="213:41">

                    <expr_stmt pos:start="213:21" pos:end="213:41"><expr pos:start="213:21" pos:end="213:40"><name pos:start="213:21" pos:end="213:33"><name pos:start="213:21" pos:end="213:21">c</name><operator pos:start="213:22" pos:end="213:23">-&gt;</operator><name pos:start="213:24" pos:end="213:33">buffer_ptr</name></name> <operator pos:start="213:35" pos:end="213:36">+=</operator> <name pos:start="213:38" pos:end="213:40">len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <expr_stmt pos:start="217:17" pos:end="217:37"><expr pos:start="217:17" pos:end="217:36"><name pos:start="217:17" pos:end="217:29"><name pos:start="217:17" pos:end="217:17">c</name><operator pos:start="217:18" pos:end="217:19">-&gt;</operator><name pos:start="217:20" pos:end="217:29">data_count</name></name> <operator pos:start="217:31" pos:end="217:32">+=</operator> <name pos:start="217:34" pos:end="217:36">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:61"><expr pos:start="219:17" pos:end="219:60"><call pos:start="219:17" pos:end="219:60"><name pos:start="219:17" pos:end="219:31">update_datarate</name><argument_list pos:start="219:32" pos:end="219:60">(<argument pos:start="219:33" pos:end="219:44"><expr pos:start="219:33" pos:end="219:44"><operator pos:start="219:33" pos:end="219:33">&amp;</operator><name pos:start="219:34" pos:end="219:44"><name pos:start="219:34" pos:end="219:34">c</name><operator pos:start="219:35" pos:end="219:36">-&gt;</operator><name pos:start="219:37" pos:end="219:44">datarate</name></name></expr></argument>, <argument pos:start="219:47" pos:end="219:59"><expr pos:start="219:47" pos:end="219:59"><name pos:start="219:47" pos:end="219:59"><name pos:start="219:47" pos:end="219:47">c</name><operator pos:start="219:48" pos:end="219:49">-&gt;</operator><name pos:start="219:50" pos:end="219:59">data_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="221:17" pos:end="223:51"><if pos:start="221:17" pos:end="223:51">if <condition pos:start="221:20" pos:end="221:30">(<expr pos:start="221:21" pos:end="221:29"><name pos:start="221:21" pos:end="221:29"><name pos:start="221:21" pos:end="221:21">c</name><operator pos:start="221:22" pos:end="221:23">-&gt;</operator><name pos:start="221:24" pos:end="221:29">stream</name></name></expr>)</condition><block type="pseudo" pos:start="223:21" pos:end="223:51"><block_content pos:start="223:21" pos:end="223:51">

                    <expr_stmt pos:start="223:21" pos:end="223:51"><expr pos:start="223:21" pos:end="223:50"><name pos:start="223:21" pos:end="223:43"><name pos:start="223:21" pos:end="223:21">c</name><operator pos:start="223:22" pos:end="223:23">-&gt;</operator><name pos:start="223:24" pos:end="223:29">stream</name><operator pos:start="223:30" pos:end="223:31">-&gt;</operator><name pos:start="223:32" pos:end="223:43">bytes_served</name></name> <operator pos:start="223:45" pos:end="223:46">+=</operator> <name pos:start="223:48" pos:end="223:50">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="225:17" pos:end="225:22">break;</break>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for> <comment type="block" pos:start="231:7" pos:end="231:19">/* for(;;) */</comment>

    <return pos:start="233:5" pos:end="233:13">return <expr pos:start="233:12" pos:end="233:12"><literal type="number" pos:start="233:12" pos:end="233:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
