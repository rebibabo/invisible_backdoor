<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9863.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">unsigned</name> <name pos:start="1:17" pos:end="1:20">long</name></type> <name pos:start="1:22" pos:end="1:33">copy_strings</name><parameter_list pos:start="1:34" pos:end="3:32">(<parameter pos:start="1:35" pos:end="1:42"><decl pos:start="1:35" pos:end="1:42"><type pos:start="1:35" pos:end="1:42"><name pos:start="1:35" pos:end="1:37">int</name></type> <name pos:start="1:39" pos:end="1:42">argc</name></decl></parameter>,<parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:47">char</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier><modifier pos:start="1:50" pos:end="1:50">*</modifier></type> <name pos:start="1:52" pos:end="1:55">argv</name></decl></parameter>,<parameter pos:start="1:57" pos:end="1:75"><decl pos:start="1:57" pos:end="1:75"><type pos:start="1:57" pos:end="1:75"><name pos:start="1:57" pos:end="1:64">unsigned</name> <name pos:start="1:66" pos:end="1:69">long</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:75">page</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:31"><decl pos:start="3:17" pos:end="3:31"><type pos:start="3:17" pos:end="3:31"><name pos:start="3:17" pos:end="3:24">unsigned</name> <name pos:start="3:26" pos:end="3:29">long</name></type> <name pos:start="3:31" pos:end="3:31">p</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="91:1">{<block_content pos:start="7:5" pos:end="89:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">tmp</name></decl>, <decl pos:start="7:16" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">tmp1</name></decl>, <decl pos:start="7:23" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:26">pag</name> <init pos:start="7:28" pos:end="7:33">= <expr pos:start="7:30" pos:end="7:33"><name pos:start="7:30" pos:end="7:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name></decl>, <decl pos:start="9:14" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:19">offset</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:11">(<expr pos:start="13:9" pos:end="13:10"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:10">p</name></expr>)</condition> <block pos:start="13:13" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:17">

	<return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return>       <comment type="block" pos:start="15:25" pos:end="15:45">/* bullet-proofing */</comment>

    </block_content>}</block></if></if_stmt>

    <while pos:start="19:5" pos:end="87:5">while <condition pos:start="19:11" pos:end="19:22">(<expr pos:start="19:12" pos:end="19:21"><name pos:start="19:12" pos:end="19:15">argc</name><operator pos:start="19:16" pos:end="19:17">--</operator> <operator pos:start="19:19" pos:end="19:19">&gt;</operator> <literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr>)</condition> <block pos:start="19:24" pos:end="87:5">{<block_content pos:start="21:9" pos:end="85:9">

	<if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:48">(<expr pos:start="21:13" pos:end="21:47"><operator pos:start="21:13" pos:end="21:13">!</operator><operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:18">tmp1</name> <operator pos:start="21:20" pos:end="21:20">=</operator> <name pos:start="21:22" pos:end="21:24">tmp</name> <operator pos:start="21:26" pos:end="21:26">=</operator> <call pos:start="21:28" pos:end="21:46"><name pos:start="21:28" pos:end="21:35">get_user</name><argument_list pos:start="21:36" pos:end="21:46">(<argument pos:start="21:37" pos:end="21:45"><expr pos:start="21:37" pos:end="21:45"><name pos:start="21:37" pos:end="21:40">argv</name><operator pos:start="21:41" pos:end="21:41">+</operator><name pos:start="21:42" pos:end="21:45">argc</name></expr></argument>)</argument_list></call><operator pos:start="21:47" pos:end="21:47">)</operator></expr>)</condition> <block pos:start="21:50" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:21">

	    <expr_stmt pos:start="23:13" pos:end="23:50"><expr pos:start="23:13" pos:end="23:49"><call pos:start="23:13" pos:end="23:49"><name pos:start="23:13" pos:end="23:19">fprintf</name><argument_list pos:start="23:20" pos:end="23:49">(<argument pos:start="23:21" pos:end="23:26"><expr pos:start="23:21" pos:end="23:26"><name pos:start="23:21" pos:end="23:26">stderr</name></expr></argument>, <argument pos:start="23:29" pos:end="23:48"><expr pos:start="23:29" pos:end="23:48"><literal type="string" pos:start="23:29" pos:end="23:48">"VFS: argc is wrong"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="25:13" pos:end="25:21"><expr pos:start="25:13" pos:end="25:20"><call pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:16">exit</name><argument_list pos:start="25:17" pos:end="25:20">(<argument pos:start="25:18" pos:end="25:19"><expr pos:start="25:18" pos:end="25:19"><operator pos:start="25:18" pos:end="25:18">-</operator><literal type="number" pos:start="25:19" pos:end="25:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<while pos:start="29:9" pos:end="29:32">while <condition pos:start="29:15" pos:end="29:31">(<expr pos:start="29:16" pos:end="29:30"><call pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:23">get_user</name><argument_list pos:start="29:24" pos:end="29:30">(<argument pos:start="29:25" pos:end="29:29"><expr pos:start="29:25" pos:end="29:29"><name pos:start="29:25" pos:end="29:27">tmp</name><operator pos:start="29:28" pos:end="29:29">++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="29:32" pos:end="29:32"><block_content pos:start="29:32" pos:end="29:32"><empty_stmt pos:start="29:32" pos:end="29:32">;</empty_stmt></block_content></block></while>

	<expr_stmt pos:start="31:9" pos:end="31:25"><expr pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:11">len</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:17">tmp</name> <operator pos:start="31:19" pos:end="31:19">-</operator> <name pos:start="31:21" pos:end="31:24">tmp1</name></expr>;</expr_stmt>

	<if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:13">p</name> <operator pos:start="33:15" pos:end="33:15">&lt;</operator> <name pos:start="33:17" pos:end="33:19">len</name></expr>)</condition> <block pos:start="33:22" pos:end="37:9">{<block_content pos:start="35:17" pos:end="35:25">  <comment type="block" pos:start="33:25" pos:end="33:59">/* this shouldn't happen - 128kB */</comment>

		<return pos:start="35:17" pos:end="35:25">return <expr pos:start="35:24" pos:end="35:24"><literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<while pos:start="39:9" pos:end="85:9">while <condition pos:start="39:15" pos:end="39:19">(<expr pos:start="39:16" pos:end="39:18"><name pos:start="39:16" pos:end="39:18">len</name></expr>)</condition> <block pos:start="39:21" pos:end="85:9">{<block_content pos:start="41:13" pos:end="83:13">

	    <expr_stmt pos:start="41:13" pos:end="41:16"><expr pos:start="41:13" pos:end="41:15"><operator pos:start="41:13" pos:end="41:14">--</operator><name pos:start="41:15" pos:end="41:15">p</name></expr>;</expr_stmt> <expr_stmt pos:start="41:18" pos:end="41:23"><expr pos:start="41:18" pos:end="41:22"><operator pos:start="41:18" pos:end="41:19">--</operator><name pos:start="41:20" pos:end="41:22">tmp</name></expr>;</expr_stmt> <expr_stmt pos:start="41:25" pos:end="41:30"><expr pos:start="41:25" pos:end="41:29"><operator pos:start="41:25" pos:end="41:26">--</operator><name pos:start="41:27" pos:end="41:29">len</name></expr>;</expr_stmt>

	    <if_stmt pos:start="43:13" pos:end="61:13"><if pos:start="43:13" pos:end="61:13">if <condition pos:start="43:16" pos:end="43:29">(<expr pos:start="43:17" pos:end="43:28"><operator pos:start="43:17" pos:end="43:18">--</operator><name pos:start="43:19" pos:end="43:24">offset</name> <operator pos:start="43:26" pos:end="43:26">&lt;</operator> <literal type="number" pos:start="43:28" pos:end="43:28">0</literal></expr>)</condition> <block pos:start="43:31" pos:end="61:13">{<block_content pos:start="45:17" pos:end="59:17">

		<expr_stmt pos:start="45:17" pos:end="45:46"><expr pos:start="45:17" pos:end="45:45"><name pos:start="45:17" pos:end="45:22">offset</name> <operator pos:start="45:24" pos:end="45:24">=</operator> <name pos:start="45:26" pos:end="45:26">p</name> <operator pos:start="45:28" pos:end="45:28">%</operator> <name pos:start="45:30" pos:end="45:45">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:56"><expr pos:start="47:17" pos:end="47:55"><name pos:start="47:17" pos:end="47:19">pag</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <operator pos:start="47:23" pos:end="47:23">(</operator><name pos:start="47:24" pos:end="47:27">char</name> <operator pos:start="47:29" pos:end="47:29">*</operator><operator pos:start="47:30" pos:end="47:30">)</operator> <name pos:start="47:32" pos:end="47:55"><name pos:start="47:32" pos:end="47:35">page</name><index pos:start="47:36" pos:end="47:55">[<expr pos:start="47:37" pos:end="47:54"><name pos:start="47:37" pos:end="47:37">p</name><operator pos:start="47:38" pos:end="47:38">/</operator><name pos:start="47:39" pos:end="47:54">TARGET_PAGE_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="49:17" pos:end="59:17"><if pos:start="49:17" pos:end="59:17">if <condition pos:start="49:20" pos:end="49:25">(<expr pos:start="49:21" pos:end="49:24"><operator pos:start="49:21" pos:end="49:21">!</operator><name pos:start="49:22" pos:end="49:24">pag</name></expr>)</condition> <block pos:start="49:27" pos:end="59:17">{<block_content pos:start="51:21" pos:end="57:33">

                    <expr_stmt pos:start="51:21" pos:end="51:50"><expr pos:start="51:21" pos:end="51:49"><name pos:start="51:21" pos:end="51:23">pag</name> <operator pos:start="51:25" pos:end="51:25">=</operator> <operator pos:start="51:27" pos:end="51:27">(</operator><name pos:start="51:28" pos:end="51:31">char</name> <operator pos:start="51:33" pos:end="51:33">*</operator><operator pos:start="51:34" pos:end="51:34">)</operator><call pos:start="51:35" pos:end="51:49"><name pos:start="51:35" pos:end="51:47">get_free_page</name><argument_list pos:start="51:48" pos:end="51:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="53:21" pos:end="53:66"><expr pos:start="53:21" pos:end="53:65"><name pos:start="53:21" pos:end="53:44"><name pos:start="53:21" pos:end="53:24">page</name><index pos:start="53:25" pos:end="53:44">[<expr pos:start="53:26" pos:end="53:43"><name pos:start="53:26" pos:end="53:26">p</name><operator pos:start="53:27" pos:end="53:27">/</operator><name pos:start="53:28" pos:end="53:43">TARGET_PAGE_SIZE</name></expr>]</index></name> <operator pos:start="53:46" pos:end="53:46">=</operator> <operator pos:start="53:48" pos:end="53:48">(</operator><name pos:start="53:49" pos:end="53:56">unsigned</name> <name pos:start="53:58" pos:end="53:61">long</name><operator pos:start="53:62" pos:end="53:62">)</operator><name pos:start="53:63" pos:end="53:65">pag</name></expr>;</expr_stmt>

                    <if_stmt pos:start="55:21" pos:end="57:33"><if pos:start="55:21" pos:end="57:33">if <condition pos:start="55:24" pos:end="55:29">(<expr pos:start="55:25" pos:end="55:28"><operator pos:start="55:25" pos:end="55:25">!</operator><name pos:start="55:26" pos:end="55:28">pag</name></expr>)</condition><block type="pseudo" pos:start="57:25" pos:end="57:33"><block_content pos:start="57:25" pos:end="57:33">

                        <return pos:start="57:25" pos:end="57:33">return <expr pos:start="57:32" pos:end="57:32"><literal type="number" pos:start="57:32" pos:end="57:32">0</literal></expr>;</return></block_content></block></if></if_stmt>

		</block_content>}</block></if></if_stmt>

	    </block_content>}</block></if></if_stmt>

	    <if_stmt pos:start="63:13" pos:end="83:13"><if pos:start="63:13" pos:end="67:13">if <condition pos:start="63:16" pos:end="63:40">(<expr pos:start="63:17" pos:end="63:39"><name pos:start="63:17" pos:end="63:19">len</name> <operator pos:start="63:21" pos:end="63:22">==</operator> <literal type="number" pos:start="63:24" pos:end="63:24">0</literal> <operator pos:start="63:26" pos:end="63:27">||</operator> <name pos:start="63:29" pos:end="63:34">offset</name> <operator pos:start="63:36" pos:end="63:37">==</operator> <literal type="number" pos:start="63:39" pos:end="63:39">0</literal></expr>)</condition> <block pos:start="63:42" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:48">

	        <expr_stmt pos:start="65:17" pos:end="65:48"><expr pos:start="65:17" pos:end="65:47"><operator pos:start="65:17" pos:end="65:17">*</operator><operator pos:start="65:18" pos:end="65:18">(</operator><name pos:start="65:19" pos:end="65:21">pag</name> <operator pos:start="65:23" pos:end="65:23">+</operator> <name pos:start="65:25" pos:end="65:30">offset</name><operator pos:start="65:31" pos:end="65:31">)</operator> <operator pos:start="65:33" pos:end="65:33">=</operator> <call pos:start="65:35" pos:end="65:47"><name pos:start="65:35" pos:end="65:42">get_user</name><argument_list pos:start="65:43" pos:end="65:47">(<argument pos:start="65:44" pos:end="65:46"><expr pos:start="65:44" pos:end="65:46"><name pos:start="65:44" pos:end="65:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></if>

	    <else pos:start="69:13" pos:end="83:13">else <block pos:start="69:18" pos:end="83:13">{<block_content pos:start="71:15" pos:end="81:66">

	      <decl_stmt pos:start="71:15" pos:end="71:64"><decl pos:start="71:15" pos:end="71:63"><type pos:start="71:15" pos:end="71:17"><name pos:start="71:15" pos:end="71:17">int</name></type> <name pos:start="71:19" pos:end="71:31">bytes_to_copy</name> <init pos:start="71:33" pos:end="71:63">= <expr pos:start="71:35" pos:end="71:63"><ternary pos:start="71:35" pos:end="71:63"><condition pos:start="71:35" pos:end="71:50"><expr pos:start="71:35" pos:end="71:48"><operator pos:start="71:35" pos:end="71:35">(</operator><name pos:start="71:36" pos:end="71:38">len</name> <operator pos:start="71:40" pos:end="71:40">&gt;</operator> <name pos:start="71:42" pos:end="71:47">offset</name><operator pos:start="71:48" pos:end="71:48">)</operator></expr> ?</condition><then pos:start="71:52" pos:end="71:57"> <expr pos:start="71:52" pos:end="71:57"><name pos:start="71:52" pos:end="71:57">offset</name></expr> </then><else pos:start="71:59" pos:end="71:63">: <expr pos:start="71:61" pos:end="71:63"><name pos:start="71:61" pos:end="71:63">len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	      <expr_stmt pos:start="73:15" pos:end="73:35"><expr pos:start="73:15" pos:end="73:34"><name pos:start="73:15" pos:end="73:17">tmp</name> <operator pos:start="73:19" pos:end="73:20">-=</operator> <name pos:start="73:22" pos:end="73:34">bytes_to_copy</name></expr>;</expr_stmt>

	      <expr_stmt pos:start="75:15" pos:end="75:33"><expr pos:start="75:15" pos:end="75:32"><name pos:start="75:15" pos:end="75:15">p</name> <operator pos:start="75:17" pos:end="75:18">-=</operator> <name pos:start="75:20" pos:end="75:32">bytes_to_copy</name></expr>;</expr_stmt>

	      <expr_stmt pos:start="77:15" pos:end="77:38"><expr pos:start="77:15" pos:end="77:37"><name pos:start="77:15" pos:end="77:20">offset</name> <operator pos:start="77:22" pos:end="77:23">-=</operator> <name pos:start="77:25" pos:end="77:37">bytes_to_copy</name></expr>;</expr_stmt>

	      <expr_stmt pos:start="79:15" pos:end="79:35"><expr pos:start="79:15" pos:end="79:34"><name pos:start="79:15" pos:end="79:17">len</name> <operator pos:start="79:19" pos:end="79:20">-=</operator> <name pos:start="79:22" pos:end="79:34">bytes_to_copy</name></expr>;</expr_stmt>

	      <expr_stmt pos:start="81:15" pos:end="81:66"><expr pos:start="81:15" pos:end="81:65"><call pos:start="81:15" pos:end="81:65"><name pos:start="81:15" pos:end="81:27">memcpy_fromfs</name><argument_list pos:start="81:28" pos:end="81:65">(<argument pos:start="81:29" pos:end="81:40"><expr pos:start="81:29" pos:end="81:40"><name pos:start="81:29" pos:end="81:31">pag</name> <operator pos:start="81:33" pos:end="81:33">+</operator> <name pos:start="81:35" pos:end="81:40">offset</name></expr></argument>, <argument pos:start="81:43" pos:end="81:45"><expr pos:start="81:43" pos:end="81:45"><name pos:start="81:43" pos:end="81:45">tmp</name></expr></argument>, <argument pos:start="81:48" pos:end="81:64"><expr pos:start="81:48" pos:end="81:64"><name pos:start="81:48" pos:end="81:60">bytes_to_copy</name> <operator pos:start="81:62" pos:end="81:62">+</operator> <literal type="number" pos:start="81:64" pos:end="81:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></else></if_stmt>

	</block_content>}</block></while>

    </block_content>}</block></while>

    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><name pos:start="89:12" pos:end="89:12">p</name></expr>;</return>

</block_content>}</block></function>
</unit>
