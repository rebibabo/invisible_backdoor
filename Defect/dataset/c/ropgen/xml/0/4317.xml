<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4317.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">thumb_tr_translate_insn</name><parameter_list pos:start="1:36" pos:end="1:76">(<parameter pos:start="1:37" pos:end="1:60"><decl pos:start="1:37" pos:end="1:60"><type pos:start="1:37" pos:end="1:60"><name pos:start="1:37" pos:end="1:52">DisasContextBase</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">dcbase</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:75"><decl pos:start="1:63" pos:end="1:75"><type pos:start="1:63" pos:end="1:75"><name pos:start="1:63" pos:end="1:70">CPUState</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:75">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="5:5" pos:end="143:5">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:63"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">DisasContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:20">dc</name> <init pos:start="5:22" pos:end="5:63">= <expr pos:start="5:24" pos:end="5:63"><call pos:start="5:24" pos:end="5:63"><name pos:start="5:24" pos:end="5:35">container_of</name><argument_list pos:start="5:36" pos:end="5:63">(<argument pos:start="5:37" pos:end="5:42"><expr pos:start="5:37" pos:end="5:42"><name pos:start="5:37" pos:end="5:42">dcbase</name></expr></argument>, <argument pos:start="5:45" pos:end="5:56"><expr pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:56">DisasContext</name></expr></argument>, <argument pos:start="5:59" pos:end="5:62"><expr pos:start="5:59" pos:end="5:62"><name pos:start="5:59" pos:end="5:62">base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUARMState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:35">= <expr pos:start="7:24" pos:end="7:35"><name pos:start="7:24" pos:end="7:35"><name pos:start="7:24" pos:end="7:26">cpu</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:35">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">insn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:17">is_16bit</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:35">(<expr pos:start="15:9" pos:end="15:34"><call pos:start="15:9" pos:end="15:34"><name pos:start="15:9" pos:end="15:30">arm_pre_translate_insn</name><argument_list pos:start="15:31" pos:end="15:34">(<argument pos:start="15:32" pos:end="15:33"><expr pos:start="15:32" pos:end="15:33"><name pos:start="15:32" pos:end="15:33">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:37" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:51"><expr pos:start="23:5" pos:end="23:50"><name pos:start="23:5" pos:end="23:8">insn</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:50"><name pos:start="23:12" pos:end="23:24">arm_lduw_code</name><argument_list pos:start="23:25" pos:end="23:50">(<argument pos:start="23:26" pos:end="23:28"><expr pos:start="23:26" pos:end="23:28"><name pos:start="23:26" pos:end="23:28">env</name></expr></argument>, <argument pos:start="23:31" pos:end="23:36"><expr pos:start="23:31" pos:end="23:36"><name pos:start="23:31" pos:end="23:36"><name pos:start="23:31" pos:end="23:32">dc</name><operator pos:start="23:33" pos:end="23:34">-&gt;</operator><name pos:start="23:35" pos:end="23:36">pc</name></name></expr></argument>, <argument pos:start="23:39" pos:end="23:49"><expr pos:start="23:39" pos:end="23:49"><name pos:start="23:39" pos:end="23:49"><name pos:start="23:39" pos:end="23:40">dc</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:49">sctlr_b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:12">is_16bit</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:44"><name pos:start="25:16" pos:end="25:34">thumb_insn_is_16bit</name><argument_list pos:start="25:35" pos:end="25:44">(<argument pos:start="25:36" pos:end="25:37"><expr pos:start="25:36" pos:end="25:37"><name pos:start="25:36" pos:end="25:37">dc</name></expr></argument>, <argument pos:start="25:40" pos:end="25:43"><expr pos:start="25:40" pos:end="25:43"><name pos:start="25:40" pos:end="25:43">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:16"><expr pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:6">dc</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:10">pc</name></name> <operator pos:start="27:12" pos:end="27:13">+=</operator> <literal type="number" pos:start="27:15" pos:end="27:15">2</literal></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if <condition pos:start="29:8" pos:end="29:18">(<expr pos:start="29:9" pos:end="29:17"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:17">is_16bit</name></expr>)</condition> <block pos:start="29:20" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:20">

        <decl_stmt pos:start="31:9" pos:end="31:65"><decl pos:start="31:9" pos:end="31:64"><type pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:16">uint32_t</name></type> <name pos:start="31:18" pos:end="31:22">insn2</name> <init pos:start="31:24" pos:end="31:64">= <expr pos:start="31:26" pos:end="31:64"><call pos:start="31:26" pos:end="31:64"><name pos:start="31:26" pos:end="31:38">arm_lduw_code</name><argument_list pos:start="31:39" pos:end="31:64">(<argument pos:start="31:40" pos:end="31:42"><expr pos:start="31:40" pos:end="31:42"><name pos:start="31:40" pos:end="31:42">env</name></expr></argument>, <argument pos:start="31:45" pos:end="31:50"><expr pos:start="31:45" pos:end="31:50"><name pos:start="31:45" pos:end="31:50"><name pos:start="31:45" pos:end="31:46">dc</name><operator pos:start="31:47" pos:end="31:48">-&gt;</operator><name pos:start="31:49" pos:end="31:50">pc</name></name></expr></argument>, <argument pos:start="31:53" pos:end="31:63"><expr pos:start="31:53" pos:end="31:63"><name pos:start="31:53" pos:end="31:63"><name pos:start="31:53" pos:end="31:54">dc</name><operator pos:start="31:55" pos:end="31:56">-&gt;</operator><name pos:start="31:57" pos:end="31:63">sctlr_b</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:12">insn</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <name pos:start="35:16" pos:end="35:19">insn</name> <operator pos:start="35:21" pos:end="35:22">&lt;&lt;</operator> <literal type="number" pos:start="35:24" pos:end="35:25">16</literal> <operator pos:start="35:27" pos:end="35:27">|</operator> <name pos:start="35:29" pos:end="35:33">insn2</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:20"><expr pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:10">dc</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:14">pc</name></name> <operator pos:start="37:16" pos:end="37:17">+=</operator> <literal type="number" pos:start="37:19" pos:end="37:19">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:20"><expr pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:6">dc</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:12">insn</name></name> <operator pos:start="41:14" pos:end="41:14">=</operator> <name pos:start="41:16" pos:end="41:19">insn</name></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="61:5"><if pos:start="45:5" pos:end="61:5">if <condition pos:start="45:8" pos:end="45:68">(<expr pos:start="45:9" pos:end="45:67"><name pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:10">dc</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:25">condexec_mask</name></name> <operator pos:start="45:27" pos:end="45:28">&amp;&amp;</operator> <operator pos:start="45:30" pos:end="45:30">!</operator><call pos:start="45:31" pos:end="45:67"><name pos:start="45:31" pos:end="45:57">thumb_insn_is_unconditional</name><argument_list pos:start="45:58" pos:end="45:67">(<argument pos:start="45:59" pos:end="45:60"><expr pos:start="45:59" pos:end="45:60"><name pos:start="45:59" pos:end="45:60">dc</name></expr></argument>, <argument pos:start="45:63" pos:end="45:66"><expr pos:start="45:63" pos:end="45:66"><name pos:start="45:63" pos:end="45:66">insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:70" pos:end="61:5">{<block_content pos:start="47:9" pos:end="59:9">

        <decl_stmt pos:start="47:9" pos:end="47:42"><decl pos:start="47:9" pos:end="47:41"><type pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:16">uint32_t</name></type> <name pos:start="47:18" pos:end="47:21">cond</name> <init pos:start="47:23" pos:end="47:41">= <expr pos:start="47:25" pos:end="47:41"><name pos:start="47:25" pos:end="47:41"><name pos:start="47:25" pos:end="47:26">dc</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:41">condexec_cond</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="51:9" pos:end="59:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:25">(<expr pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:16">cond</name> <operator pos:start="51:18" pos:end="51:19">!=</operator> <literal type="number" pos:start="51:21" pos:end="51:24">0x0e</literal></expr>)</condition> <block pos:start="51:27" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:28">     <comment type="block" pos:start="51:33" pos:end="51:76">/* Skip conditional when condition is AL. */</comment>

            <expr_stmt pos:start="53:13" pos:end="53:44"><expr pos:start="53:13" pos:end="53:43"><name pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:14">dc</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:25">condlabel</name></name> <operator pos:start="53:27" pos:end="53:27">=</operator> <call pos:start="53:29" pos:end="53:43"><name pos:start="53:29" pos:end="53:41">gen_new_label</name><argument_list pos:start="53:42" pos:end="53:43">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:53"><expr pos:start="55:13" pos:end="55:52"><call pos:start="55:13" pos:end="55:52"><name pos:start="55:13" pos:end="55:27">arm_gen_test_cc</name><argument_list pos:start="55:28" pos:end="55:52">(<argument pos:start="55:29" pos:end="55:36"><expr pos:start="55:29" pos:end="55:36"><name pos:start="55:29" pos:end="55:32">cond</name> <operator pos:start="55:34" pos:end="55:34">^</operator> <literal type="number" pos:start="55:36" pos:end="55:36">1</literal></expr></argument>, <argument pos:start="55:39" pos:end="55:51"><expr pos:start="55:39" pos:end="55:51"><name pos:start="55:39" pos:end="55:51"><name pos:start="55:39" pos:end="55:40">dc</name><operator pos:start="55:41" pos:end="55:42">-&gt;</operator><name pos:start="55:43" pos:end="55:51">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:28"><expr pos:start="57:13" pos:end="57:27"><name pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:14">dc</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:23">condjmp</name></name> <operator pos:start="57:25" pos:end="57:25">=</operator> <literal type="number" pos:start="57:27" pos:end="57:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="79:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:17">(<expr pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16">is_16bit</name></expr>)</condition> <block pos:start="65:19" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:35">

        <expr_stmt pos:start="67:9" pos:end="67:35"><expr pos:start="67:9" pos:end="67:34"><call pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:24">disas_thumb_insn</name><argument_list pos:start="67:25" pos:end="67:34">(<argument pos:start="67:26" pos:end="67:27"><expr pos:start="67:26" pos:end="67:27"><name pos:start="67:26" pos:end="67:27">dc</name></expr></argument>, <argument pos:start="67:30" pos:end="67:33"><expr pos:start="67:30" pos:end="67:33"><name pos:start="67:30" pos:end="67:33">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="79:5">else <block pos:start="69:12" pos:end="79:5">{<block_content pos:start="71:9" pos:end="77:9">

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:40">(<expr pos:start="71:13" pos:end="71:39"><call pos:start="71:13" pos:end="71:39"><name pos:start="71:13" pos:end="71:29">disas_thumb2_insn</name><argument_list pos:start="71:30" pos:end="71:39">(<argument pos:start="71:31" pos:end="71:32"><expr pos:start="71:31" pos:end="71:32"><name pos:start="71:31" pos:end="71:32">dc</name></expr></argument>, <argument pos:start="71:35" pos:end="71:38"><expr pos:start="71:35" pos:end="71:38"><name pos:start="71:35" pos:end="71:38">insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:42" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:57">

            <expr_stmt pos:start="73:13" pos:end="75:57"><expr pos:start="73:13" pos:end="75:56"><call pos:start="73:13" pos:end="75:56"><name pos:start="73:13" pos:end="73:30">gen_exception_insn</name><argument_list pos:start="73:31" pos:end="75:56">(<argument pos:start="73:32" pos:end="73:33"><expr pos:start="73:32" pos:end="73:33"><name pos:start="73:32" pos:end="73:33">dc</name></expr></argument>, <argument pos:start="73:36" pos:end="73:36"><expr pos:start="73:36" pos:end="73:36"><literal type="number" pos:start="73:36" pos:end="73:36">4</literal></expr></argument>, <argument pos:start="73:39" pos:end="73:47"><expr pos:start="73:39" pos:end="73:47"><name pos:start="73:39" pos:end="73:47">EXCP_UDEF</name></expr></argument>, <argument pos:start="73:50" pos:end="73:68"><expr pos:start="73:50" pos:end="73:68"><call pos:start="73:50" pos:end="73:68"><name pos:start="73:50" pos:end="73:66">syn_uncategorized</name><argument_list pos:start="73:67" pos:end="73:68">()</argument_list></call></expr></argument>,

                               <argument pos:start="75:32" pos:end="75:55"><expr pos:start="75:32" pos:end="75:55"><call pos:start="75:32" pos:end="75:55"><name pos:start="75:32" pos:end="75:51">default_exception_el</name><argument_list pos:start="75:52" pos:end="75:55">(<argument pos:start="75:53" pos:end="75:54"><expr pos:start="75:53" pos:end="75:54"><name pos:start="75:53" pos:end="75:54">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:48">/* Advance the Thumb condexec condition.  */</comment>

    <if_stmt pos:start="85:5" pos:end="99:5"><if pos:start="85:5" pos:end="99:5">if <condition pos:start="85:8" pos:end="85:26">(<expr pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:10">dc</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:25">condexec_mask</name></name></expr>)</condition> <block pos:start="85:28" pos:end="99:5">{<block_content pos:start="87:9" pos:end="97:9">

        <expr_stmt pos:start="87:9" pos:end="89:61"><expr pos:start="87:9" pos:end="89:60"><name pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:10">dc</name><operator pos:start="87:11" pos:end="87:12">-&gt;</operator><name pos:start="87:13" pos:end="87:25">condexec_cond</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <operator pos:start="87:29" pos:end="87:29">(</operator><operator pos:start="87:30" pos:end="87:30">(</operator><name pos:start="87:31" pos:end="87:47"><name pos:start="87:31" pos:end="87:32">dc</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:47">condexec_cond</name></name> <operator pos:start="87:49" pos:end="87:49">&amp;</operator> <literal type="number" pos:start="87:51" pos:end="87:53">0xe</literal><operator pos:start="87:54" pos:end="87:54">)</operator> <operator pos:start="87:56" pos:end="87:56">|</operator>

                             <operator pos:start="89:30" pos:end="89:30">(</operator><operator pos:start="89:31" pos:end="89:31">(</operator><name pos:start="89:32" pos:end="89:48"><name pos:start="89:32" pos:end="89:33">dc</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:48">condexec_mask</name></name> <operator pos:start="89:50" pos:end="89:51">&gt;&gt;</operator> <literal type="number" pos:start="89:53" pos:end="89:53">4</literal><operator pos:start="89:54" pos:end="89:54">)</operator> <operator pos:start="89:56" pos:end="89:56">&amp;</operator> <literal type="number" pos:start="89:58" pos:end="89:58">1</literal><operator pos:start="89:59" pos:end="89:59">)</operator><operator pos:start="89:60" pos:end="89:60">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:60"><expr pos:start="91:9" pos:end="91:59"><name pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:10">dc</name><operator pos:start="91:11" pos:end="91:12">-&gt;</operator><name pos:start="91:13" pos:end="91:25">condexec_mask</name></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <operator pos:start="91:29" pos:end="91:29">(</operator><name pos:start="91:30" pos:end="91:46"><name pos:start="91:30" pos:end="91:31">dc</name><operator pos:start="91:32" pos:end="91:33">-&gt;</operator><name pos:start="91:34" pos:end="91:46">condexec_mask</name></name> <operator pos:start="91:48" pos:end="91:49">&lt;&lt;</operator> <literal type="number" pos:start="91:51" pos:end="91:51">1</literal><operator pos:start="91:52" pos:end="91:52">)</operator> <operator pos:start="91:54" pos:end="91:54">&amp;</operator> <literal type="number" pos:start="91:56" pos:end="91:59">0x1f</literal></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="97:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:35">(<expr pos:start="93:13" pos:end="93:34"><name pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:14">dc</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:29">condexec_mask</name></name> <operator pos:start="93:31" pos:end="93:32">==</operator> <literal type="number" pos:start="93:34" pos:end="93:34">0</literal></expr>)</condition> <block pos:start="93:37" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:34">

            <expr_stmt pos:start="95:13" pos:end="95:34"><expr pos:start="95:13" pos:end="95:33"><name pos:start="95:13" pos:end="95:29"><name pos:start="95:13" pos:end="95:14">dc</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:29">condexec_cond</name></name> <operator pos:start="95:31" pos:end="95:31">=</operator> <literal type="number" pos:start="95:33" pos:end="95:33">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:32"><expr pos:start="103:5" pos:end="103:31"><call pos:start="103:5" pos:end="103:31"><name pos:start="103:5" pos:end="103:27">arm_post_translate_insn</name><argument_list pos:start="103:28" pos:end="103:31">(<argument pos:start="103:29" pos:end="103:30"><expr pos:start="103:29" pos:end="103:30"><name pos:start="103:29" pos:end="103:30">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="131:7">/* Thumb is a variable-length ISA.  Stop translation when the next insn

     * will touch a new page.  This ensures that prefetch aborts occur at

     * the right place.

     *

     * We want to stop the TB if the next insn starts in a new page,

     * or if it spans between this page and the next. This means that

     * if we're looking at the last halfword in the page we need to

     * see if it's a 16-bit Thumb insn (which will fit in this TB)

     * or a 32-bit Thumb insn (which won't).

     * This is to avoid generating a silly TB with a single 16-bit insn

     * in it at the end of this page (which would execute correctly

     * but isn't very efficient).

     */</comment>

    <if_stmt pos:start="133:5" pos:end="143:5"><if pos:start="133:5" pos:end="143:5">if <condition pos:start="133:8" pos:end="139:48">(<expr pos:start="133:9" pos:end="139:47"><name pos:start="133:9" pos:end="133:23"><name pos:start="133:9" pos:end="133:10">dc</name><operator pos:start="133:11" pos:end="133:12">-&gt;</operator><name pos:start="133:13" pos:end="133:16">base</name><operator pos:start="133:17" pos:end="133:17">.</operator><name pos:start="133:18" pos:end="133:23">is_jmp</name></name> <operator pos:start="133:25" pos:end="133:26">==</operator> <name pos:start="133:28" pos:end="133:37">DISAS_NEXT</name>

        <operator pos:start="135:9" pos:end="135:10">&amp;&amp;</operator> <operator pos:start="135:12" pos:end="135:12">(</operator><name pos:start="135:13" pos:end="135:18"><name pos:start="135:13" pos:end="135:14">dc</name><operator pos:start="135:15" pos:end="135:16">-&gt;</operator><name pos:start="135:17" pos:end="135:18">pc</name></name> <operator pos:start="135:20" pos:end="135:21">&gt;=</operator> <name pos:start="135:23" pos:end="135:41"><name pos:start="135:23" pos:end="135:24">dc</name><operator pos:start="135:25" pos:end="135:26">-&gt;</operator><name pos:start="135:27" pos:end="135:41">next_page_start</name></name>

            <operator pos:start="137:13" pos:end="137:14">||</operator> <operator pos:start="137:16" pos:end="137:16">(</operator><name pos:start="137:17" pos:end="137:22"><name pos:start="137:17" pos:end="137:18">dc</name><operator pos:start="137:19" pos:end="137:20">-&gt;</operator><name pos:start="137:21" pos:end="137:22">pc</name></name> <operator pos:start="137:24" pos:end="137:25">&gt;=</operator> <name pos:start="137:27" pos:end="137:45"><name pos:start="137:27" pos:end="137:28">dc</name><operator pos:start="137:29" pos:end="137:30">-&gt;</operator><name pos:start="137:31" pos:end="137:45">next_page_start</name></name> <operator pos:start="137:47" pos:end="137:47">-</operator> <literal type="number" pos:start="137:49" pos:end="137:49">3</literal>

                <operator pos:start="139:17" pos:end="139:18">&amp;&amp;</operator> <call pos:start="139:20" pos:end="139:45"><name pos:start="139:20" pos:end="139:36">insn_crosses_page</name><argument_list pos:start="139:37" pos:end="139:45">(<argument pos:start="139:38" pos:end="139:40"><expr pos:start="139:38" pos:end="139:40"><name pos:start="139:38" pos:end="139:40">env</name></expr></argument>, <argument pos:start="139:43" pos:end="139:44"><expr pos:start="139:43" pos:end="139:44"><name pos:start="139:43" pos:end="139:44">dc</name></expr></argument>)</argument_list></call><operator pos:start="139:46" pos:end="139:46">)</operator><operator pos:start="139:47" pos:end="139:47">)</operator></expr>)</condition> <block pos:start="139:50" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:41">

        <expr_stmt pos:start="141:9" pos:end="141:41"><expr pos:start="141:9" pos:end="141:40"><name pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:10">dc</name><operator pos:start="141:11" pos:end="141:12">-&gt;</operator><name pos:start="141:13" pos:end="141:16">base</name><operator pos:start="141:17" pos:end="141:17">.</operator><name pos:start="141:18" pos:end="141:23">is_jmp</name></name> <operator pos:start="141:25" pos:end="141:25">=</operator> <name pos:start="141:27" pos:end="141:40">DISAS_TOO_MANY</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
