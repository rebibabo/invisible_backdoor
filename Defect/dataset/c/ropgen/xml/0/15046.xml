<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15046.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">av_open_input_file</name><parameter_list pos:start="1:23" pos:end="7:46">(<parameter pos:start="1:24" pos:end="1:47"><decl pos:start="1:24" pos:end="1:47"><type pos:start="1:24" pos:end="1:47"><name pos:start="1:24" pos:end="1:38">AVFormatContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier><modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">ic_ptr</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:59">char</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:69">filename</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:41"><decl pos:start="3:24" pos:end="3:41"><type pos:start="3:24" pos:end="3:41"><name pos:start="3:24" pos:end="3:36">AVInputFormat</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:41">fmt</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:35"><decl pos:start="5:24" pos:end="5:35"><type pos:start="5:24" pos:end="5:35"><name pos:start="5:24" pos:end="5:26">int</name></type> <name pos:start="5:28" pos:end="5:35">buf_size</name></decl></parameter>,

                       <parameter pos:start="7:24" pos:end="7:45"><decl pos:start="7:24" pos:end="7:45"><type pos:start="7:24" pos:end="7:45"><name pos:start="7:24" pos:end="7:41">AVFormatParameters</name> <modifier pos:start="7:43" pos:end="7:43">*</modifier></type><name pos:start="7:44" pos:end="7:45">ap</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="125:1">{<block_content pos:start="11:5" pos:end="121:15">

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">AVProbeData</name></type> <name pos:start="13:17" pos:end="13:26">probe_data</name></decl>, <decl pos:start="13:29" pos:end="13:45"><type ref="prev" pos:start="13:5" pos:end="13:15"><modifier pos:start="13:29" pos:end="13:29">*</modifier></type><name pos:start="13:30" pos:end="13:31">pd</name> <init pos:start="13:33" pos:end="13:45">= <expr pos:start="13:35" pos:end="13:45"><operator pos:start="13:35" pos:end="13:35">&amp;</operator><name pos:start="13:36" pos:end="13:45">probe_data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">ByteIOContext</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:21">pb</name> <init pos:start="15:23" pos:end="15:28">= <expr pos:start="15:25" pos:end="15:28"><name pos:start="15:25" pos:end="15:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:64"><decl pos:start="17:5" pos:end="17:63"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:16">logctx</name><init pos:start="17:17" pos:end="17:63">= <expr pos:start="17:19" pos:end="17:63"><ternary pos:start="17:19" pos:end="17:63"><condition pos:start="17:19" pos:end="17:48"><expr pos:start="17:19" pos:end="17:46"><name pos:start="17:19" pos:end="17:20">ap</name> <operator pos:start="17:22" pos:end="17:23">&amp;&amp;</operator> <name pos:start="17:25" pos:end="17:46"><name pos:start="17:25" pos:end="17:26">ap</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:46">prealloced_context</name></name></expr> ?</condition><then pos:start="17:50" pos:end="17:56"> <expr pos:start="17:50" pos:end="17:56"><operator pos:start="17:50" pos:end="17:50">*</operator><name pos:start="17:51" pos:end="17:56">ic_ptr</name></expr> </then><else pos:start="17:58" pos:end="17:63">: <expr pos:start="17:60" pos:end="17:63"><name pos:start="17:60" pos:end="17:63">NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:6">pd</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:16">filename</name></name> <operator pos:start="21:18" pos:end="21:18">=</operator> <literal type="string" pos:start="21:20" pos:end="21:21">""</literal></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="25:32"><if pos:start="23:5" pos:end="25:32">if <condition pos:start="23:8" pos:end="23:17">(<expr pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:16">filename</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:32"><block_content pos:start="25:9" pos:end="25:32">

        <expr_stmt pos:start="25:9" pos:end="25:32"><expr pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:10">pd</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:20">filename</name></name> <operator pos:start="25:22" pos:end="25:22">=</operator> <name pos:start="25:24" pos:end="25:31">filename</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:19"><expr pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:6">pd</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:11">buf</name></name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:18">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:6">pd</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:16">buf_size</name></name> <operator pos:start="29:18" pos:end="29:18">=</operator> <literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:13">(<expr pos:start="33:9" pos:end="33:12"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:12">fmt</name></expr>)</condition> <block pos:start="33:15" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:43">

        <comment type="block" pos:start="35:9" pos:end="35:51">/* guess format if no file can be opened */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:43"><expr pos:start="37:9" pos:end="37:42"><name pos:start="37:9" pos:end="37:11">fmt</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:42"><name pos:start="37:15" pos:end="37:35">av_probe_input_format</name><argument_list pos:start="37:36" pos:end="37:42">(<argument pos:start="37:37" pos:end="37:38"><expr pos:start="37:37" pos:end="37:38"><name pos:start="37:37" pos:end="37:38">pd</name></expr></argument>, <argument pos:start="37:41" pos:end="37:41"><expr pos:start="37:41" pos:end="37:41"><literal type="number" pos:start="37:41" pos:end="37:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="45:40">/* Do not open file if the format does not need it. XXX: specific

       hack needed to handle RTSP/TCP */</comment>

    <if_stmt pos:start="47:5" pos:end="69:5"><if pos:start="47:5" pos:end="69:5">if <condition pos:start="47:8" pos:end="47:45">(<expr pos:start="47:9" pos:end="47:44"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:12">fmt</name> <operator pos:start="47:14" pos:end="47:15">||</operator> <operator pos:start="47:17" pos:end="47:17">!</operator><operator pos:start="47:18" pos:end="47:18">(</operator><name pos:start="47:19" pos:end="47:28"><name pos:start="47:19" pos:end="47:21">fmt</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:28">flags</name></name> <operator pos:start="47:30" pos:end="47:30">&amp;</operator> <name pos:start="47:32" pos:end="47:43">AVFMT_NOFILE</name><operator pos:start="47:44" pos:end="47:44">)</operator></expr>)</condition> <block pos:start="47:47" pos:end="69:5">{<block_content pos:start="51:9" pos:end="67:9">

        <comment type="block" pos:start="49:9" pos:end="49:54">/* if no file needed do not try to open one */</comment>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:59">(<expr pos:start="51:13" pos:end="51:58"><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:16">err</name><operator pos:start="51:17" pos:end="51:17">=</operator><call pos:start="51:18" pos:end="51:53"><name pos:start="51:18" pos:end="51:26">url_fopen</name><argument_list pos:start="51:27" pos:end="51:53">(<argument pos:start="51:28" pos:end="51:30"><expr pos:start="51:28" pos:end="51:30"><operator pos:start="51:28" pos:end="51:28">&amp;</operator><name pos:start="51:29" pos:end="51:30">pb</name></expr></argument>, <argument pos:start="51:33" pos:end="51:40"><expr pos:start="51:33" pos:end="51:40"><name pos:start="51:33" pos:end="51:40">filename</name></expr></argument>, <argument pos:start="51:43" pos:end="51:52"><expr pos:start="51:43" pos:end="51:52"><name pos:start="51:43" pos:end="51:52">URL_RDONLY</name></expr></argument>)</argument_list></call><operator pos:start="51:54" pos:end="51:54">)</operator> <operator pos:start="51:56" pos:end="51:56">&lt;</operator> <literal type="number" pos:start="51:58" pos:end="51:58">0</literal></expr>)</condition> <block pos:start="51:61" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:22">

            <goto pos:start="53:13" pos:end="53:22">goto <name pos:start="53:18" pos:end="53:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:25">(<expr pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:20">buf_size</name> <operator pos:start="57:22" pos:end="57:22">&gt;</operator> <literal type="number" pos:start="57:24" pos:end="57:24">0</literal></expr>)</condition> <block pos:start="57:27" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:41">

            <expr_stmt pos:start="59:13" pos:end="59:41"><expr pos:start="59:13" pos:end="59:40"><call pos:start="59:13" pos:end="59:40"><name pos:start="59:13" pos:end="59:26">url_setbufsize</name><argument_list pos:start="59:27" pos:end="59:40">(<argument pos:start="59:28" pos:end="59:29"><expr pos:start="59:28" pos:end="59:29"><name pos:start="59:28" pos:end="59:29">pb</name></expr></argument>, <argument pos:start="59:32" pos:end="59:39"><expr pos:start="59:32" pos:end="59:39"><name pos:start="59:32" pos:end="59:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:81">(<expr pos:start="63:13" pos:end="63:80"><operator pos:start="63:13" pos:end="63:13">(</operator><name pos:start="63:14" pos:end="63:16">err</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <call pos:start="63:20" pos:end="63:75"><name pos:start="63:20" pos:end="63:40">ff_probe_input_buffer</name><argument_list pos:start="63:41" pos:end="63:75">(<argument pos:start="63:42" pos:end="63:44"><expr pos:start="63:42" pos:end="63:44"><operator pos:start="63:42" pos:end="63:42">&amp;</operator><name pos:start="63:43" pos:end="63:44">pb</name></expr></argument>, <argument pos:start="63:47" pos:end="63:50"><expr pos:start="63:47" pos:end="63:50"><operator pos:start="63:47" pos:end="63:47">&amp;</operator><name pos:start="63:48" pos:end="63:50">fmt</name></expr></argument>, <argument pos:start="63:53" pos:end="63:60"><expr pos:start="63:53" pos:end="63:60"><name pos:start="63:53" pos:end="63:60">filename</name></expr></argument>, <argument pos:start="63:63" pos:end="63:68"><expr pos:start="63:63" pos:end="63:68"><name pos:start="63:63" pos:end="63:68">logctx</name></expr></argument>, <argument pos:start="63:71" pos:end="63:71"><expr pos:start="63:71" pos:end="63:71"><literal type="number" pos:start="63:71" pos:end="63:71">0</literal></expr></argument>, <argument pos:start="63:74" pos:end="63:74"><expr pos:start="63:74" pos:end="63:74"><literal type="number" pos:start="63:74" pos:end="63:74">0</literal></expr></argument>)</argument_list></call><operator pos:start="63:76" pos:end="63:76">)</operator> <operator pos:start="63:78" pos:end="63:78">&lt;</operator> <literal type="number" pos:start="63:80" pos:end="63:80">0</literal></expr>)</condition> <block pos:start="63:83" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:22">

            <goto pos:start="65:13" pos:end="65:22">goto <name pos:start="65:18" pos:end="65:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:41">/* if still no format found, error */</comment>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:13">(<expr pos:start="75:9" pos:end="75:12"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:12">fmt</name></expr>)</condition> <block pos:start="75:15" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:18">

        <expr_stmt pos:start="77:9" pos:end="77:28"><expr pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:11">err</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <name pos:start="77:15" pos:end="77:27">AVERROR_NOFMT</name></expr>;</expr_stmt>

        <goto pos:start="79:9" pos:end="79:18">goto <name pos:start="79:14" pos:end="79:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:60">/* check filename in case an image number is expected */</comment>

    <if_stmt pos:start="87:5" pos:end="97:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="87:38">(<expr pos:start="87:9" pos:end="87:37"><name pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:11">fmt</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:18">flags</name></name> <operator pos:start="87:20" pos:end="87:20">&amp;</operator> <name pos:start="87:22" pos:end="87:37">AVFMT_NEEDNUMBER</name></expr>)</condition> <block pos:start="87:40" pos:end="97:5">{<block_content pos:start="89:9" pos:end="95:9">

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:47">(<expr pos:start="89:13" pos:end="89:46"><operator pos:start="89:13" pos:end="89:13">!</operator><call pos:start="89:14" pos:end="89:46"><name pos:start="89:14" pos:end="89:36">av_filename_number_test</name><argument_list pos:start="89:37" pos:end="89:46">(<argument pos:start="89:38" pos:end="89:45"><expr pos:start="89:38" pos:end="89:45"><name pos:start="89:38" pos:end="89:45">filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:49" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:22">

            <expr_stmt pos:start="91:13" pos:end="91:38"><expr pos:start="91:13" pos:end="91:37"><name pos:start="91:13" pos:end="91:15">err</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <name pos:start="91:19" pos:end="91:37">AVERROR_NUMEXPECTED</name></expr>;</expr_stmt>

            <goto pos:start="93:13" pos:end="93:22">goto <name pos:start="93:18" pos:end="93:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:62"><expr pos:start="99:5" pos:end="99:61"><name pos:start="99:5" pos:end="99:7">err</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <call pos:start="99:11" pos:end="99:61"><name pos:start="99:11" pos:end="99:30">av_open_input_stream</name><argument_list pos:start="99:31" pos:end="99:61">(<argument pos:start="99:32" pos:end="99:37"><expr pos:start="99:32" pos:end="99:37"><name pos:start="99:32" pos:end="99:37">ic_ptr</name></expr></argument>, <argument pos:start="99:40" pos:end="99:41"><expr pos:start="99:40" pos:end="99:41"><name pos:start="99:40" pos:end="99:41">pb</name></expr></argument>, <argument pos:start="99:44" pos:end="99:51"><expr pos:start="99:44" pos:end="99:51"><name pos:start="99:44" pos:end="99:51">filename</name></expr></argument>, <argument pos:start="99:54" pos:end="99:56"><expr pos:start="99:54" pos:end="99:56"><name pos:start="99:54" pos:end="99:56">fmt</name></expr></argument>, <argument pos:start="99:59" pos:end="99:60"><expr pos:start="99:59" pos:end="99:60"><name pos:start="99:59" pos:end="99:60">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="103:18"><if pos:start="101:5" pos:end="103:18">if <condition pos:start="101:8" pos:end="101:12">(<expr pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:11">err</name></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:18"><block_content pos:start="103:9" pos:end="103:18">

        <goto pos:start="103:9" pos:end="103:18">goto <name pos:start="103:14" pos:end="103:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <return pos:start="105:5" pos:end="105:13">return <expr pos:start="105:12" pos:end="105:12"><literal type="number" pos:start="105:12" pos:end="105:12">0</literal></expr>;</return>

 <label pos:start="107:2" pos:end="107:6"><name pos:start="107:2" pos:end="107:5">fail</name>:</label>

    <expr_stmt pos:start="109:5" pos:end="109:23"><expr pos:start="109:5" pos:end="109:22"><call pos:start="109:5" pos:end="109:22"><name pos:start="109:5" pos:end="109:12">av_freep</name><argument_list pos:start="109:13" pos:end="109:22">(<argument pos:start="109:14" pos:end="109:21"><expr pos:start="109:14" pos:end="109:21"><operator pos:start="109:14" pos:end="109:14">&amp;</operator><name pos:start="109:15" pos:end="109:21"><name pos:start="109:15" pos:end="109:16">pd</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:21">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="113:23"><if pos:start="111:5" pos:end="113:23">if <condition pos:start="111:8" pos:end="111:11">(<expr pos:start="111:9" pos:end="111:10"><name pos:start="111:9" pos:end="111:10">pb</name></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:23"><block_content pos:start="113:9" pos:end="113:23">

        <expr_stmt pos:start="113:9" pos:end="113:23"><expr pos:start="113:9" pos:end="113:22"><call pos:start="113:9" pos:end="113:22"><name pos:start="113:9" pos:end="113:18">url_fclose</name><argument_list pos:start="113:19" pos:end="113:22">(<argument pos:start="113:20" pos:end="113:21"><expr pos:start="113:20" pos:end="113:21"><name pos:start="113:20" pos:end="113:21">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="115:5" pos:end="117:25"><if pos:start="115:5" pos:end="117:25">if <condition pos:start="115:8" pos:end="115:37">(<expr pos:start="115:9" pos:end="115:36"><name pos:start="115:9" pos:end="115:10">ap</name> <operator pos:start="115:12" pos:end="115:13">&amp;&amp;</operator> <name pos:start="115:15" pos:end="115:36"><name pos:start="115:15" pos:end="115:16">ap</name><operator pos:start="115:17" pos:end="115:18">-&gt;</operator><name pos:start="115:19" pos:end="115:36">prealloced_context</name></name></expr>)</condition><block type="pseudo" pos:start="117:9" pos:end="117:25"><block_content pos:start="117:9" pos:end="117:25">

        <expr_stmt pos:start="117:9" pos:end="117:25"><expr pos:start="117:9" pos:end="117:24"><call pos:start="117:9" pos:end="117:24"><name pos:start="117:9" pos:end="117:15">av_free</name><argument_list pos:start="117:16" pos:end="117:24">(<argument pos:start="117:17" pos:end="117:23"><expr pos:start="117:17" pos:end="117:23"><operator pos:start="117:17" pos:end="117:17">*</operator><name pos:start="117:18" pos:end="117:23">ic_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:19"><expr pos:start="119:5" pos:end="119:18"><operator pos:start="119:5" pos:end="119:5">*</operator><name pos:start="119:6" pos:end="119:11">ic_ptr</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <name pos:start="119:15" pos:end="119:18">NULL</name></expr>;</expr_stmt>

    <return pos:start="121:5" pos:end="121:15">return <expr pos:start="121:12" pos:end="121:14"><name pos:start="121:12" pos:end="121:14">err</name></expr>;</return>



</block_content>}</block></function>
</unit>
