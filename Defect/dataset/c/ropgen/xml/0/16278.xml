<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16278.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">x86_cpu_list</name> <parameter_list pos:start="1:19" pos:end="3:37">(<parameter pos:start="1:20" pos:end="1:26"><decl pos:start="1:20" pos:end="1:26"><type pos:start="1:20" pos:end="1:26"><name pos:start="1:20" pos:end="1:23">FILE</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:26">f</name></decl></parameter>, <parameter pos:start="1:29" pos:end="1:77"><function_decl pos:start="1:29" pos:end="1:77"><type pos:start="1:29" pos:end="1:31"><name pos:start="1:29" pos:end="1:31">int</name></type> (<modifier pos:start="1:34" pos:end="1:34">*</modifier><name pos:start="1:35" pos:end="1:45">cpu_fprintf</name>)<parameter_list pos:start="1:47" pos:end="1:77">(<parameter pos:start="1:48" pos:end="1:54"><decl pos:start="1:48" pos:end="1:54"><type pos:start="1:48" pos:end="1:54"><name pos:start="1:48" pos:end="1:51">FILE</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:54">f</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:71"><decl pos:start="1:57" pos:end="1:71"><type pos:start="1:57" pos:end="1:71"><specifier pos:start="1:57" pos:end="1:61">const</specifier> <name pos:start="1:63" pos:end="1:66">char</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">fmt</name></decl></parameter>, <parameter pos:start="1:74" pos:end="1:76"><decl pos:start="1:74" pos:end="1:76"><type pos:start="1:74" pos:end="1:76"><modifier pos:start="1:74" pos:end="1:76">...</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:36"><decl pos:start="3:19" pos:end="3:36"><type pos:start="3:19" pos:end="3:36"><specifier pos:start="3:19" pos:end="3:23">const</specifier> <name pos:start="3:25" pos:end="3:28">char</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:36">optarg</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="119:1">{<block_content pos:start="7:5" pos:end="117:5">

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:51"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name></type> <name pos:start="7:19" pos:end="7:23">model</name> <init pos:start="7:25" pos:end="7:51">= <expr pos:start="7:27" pos:end="7:51"><operator pos:start="7:27" pos:end="7:27">!</operator><call pos:start="7:28" pos:end="7:51"><name pos:start="7:28" pos:end="7:33">strcmp</name><argument_list pos:start="7:34" pos:end="7:51">(<argument pos:start="7:35" pos:end="7:42"><expr pos:start="7:35" pos:end="7:42"><literal type="string" pos:start="7:35" pos:end="7:42">"?model"</literal></expr></argument>, <argument pos:start="7:45" pos:end="7:50"><expr pos:start="7:45" pos:end="7:50"><name pos:start="7:45" pos:end="7:50">optarg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:50"><decl pos:start="9:5" pos:end="9:49"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:22">dump</name> <init pos:start="9:24" pos:end="9:49">= <expr pos:start="9:26" pos:end="9:49"><operator pos:start="9:26" pos:end="9:26">!</operator><call pos:start="9:27" pos:end="9:49"><name pos:start="9:27" pos:end="9:32">strcmp</name><argument_list pos:start="9:33" pos:end="9:49">(<argument pos:start="9:34" pos:end="9:40"><expr pos:start="9:34" pos:end="9:40"><literal type="string" pos:start="9:34" pos:end="9:40">"?dump"</literal></expr></argument>, <argument pos:start="9:43" pos:end="9:48"><expr pos:start="9:43" pos:end="9:48"><name pos:start="9:43" pos:end="9:48">optarg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name></type> <name pos:start="11:19" pos:end="11:23">cpuid</name> <init pos:start="11:25" pos:end="11:51">= <expr pos:start="11:27" pos:end="11:51"><operator pos:start="11:27" pos:end="11:27">!</operator><call pos:start="11:28" pos:end="11:51"><name pos:start="11:28" pos:end="11:33">strcmp</name><argument_list pos:start="11:34" pos:end="11:51">(<argument pos:start="11:35" pos:end="11:42"><expr pos:start="11:35" pos:end="11:42"><literal type="string" pos:start="11:35" pos:end="11:42">"?cpuid"</literal></expr></argument>, <argument pos:start="11:45" pos:end="11:50"><expr pos:start="11:45" pos:end="11:50"><name pos:start="11:45" pos:end="11:50">optarg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">x86_def_t</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:18">def</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:17"><name pos:start="15:10" pos:end="15:12">buf</name><index pos:start="15:13" pos:end="15:17">[<expr pos:start="15:14" pos:end="15:16"><literal type="number" pos:start="15:14" pos:end="15:16">256</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="41:5"><if pos:start="19:5" pos:end="41:5">if <condition pos:start="19:8" pos:end="19:14">(<expr pos:start="19:9" pos:end="19:13"><name pos:start="19:9" pos:end="19:13">cpuid</name></expr>)</condition> <block pos:start="19:16" pos:end="41:5">{<block_content pos:start="21:9" pos:end="39:15">

        <expr_stmt pos:start="21:9" pos:end="21:55"><expr pos:start="21:9" pos:end="21:54"><call pos:start="21:9" pos:end="21:54">(<modifier pos:start="21:10" pos:end="21:10">*</modifier><name pos:start="21:11" pos:end="21:21">cpu_fprintf</name>)<argument_list pos:start="21:23" pos:end="21:54">(<argument pos:start="21:24" pos:end="21:24"><expr pos:start="21:24" pos:end="21:24"><name pos:start="21:24" pos:end="21:24">f</name></expr></argument>, <argument pos:start="21:27" pos:end="21:53"><expr pos:start="21:27" pos:end="21:53"><literal type="string" pos:start="21:27" pos:end="21:53">"Recognized CPUID flags:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:68"><expr pos:start="23:9" pos:end="23:67"><call pos:start="23:9" pos:end="23:67"><name pos:start="23:9" pos:end="23:17">listflags</name><argument_list pos:start="23:18" pos:end="23:67">(<argument pos:start="23:19" pos:end="23:21"><expr pos:start="23:19" pos:end="23:21"><name pos:start="23:19" pos:end="23:21">buf</name></expr></argument>, <argument pos:start="23:24" pos:end="23:35"><expr pos:start="23:24" pos:end="23:35"><sizeof pos:start="23:24" pos:end="23:35">sizeof <argument_list pos:start="23:31" pos:end="23:35">(<argument pos:start="23:32" pos:end="23:34"><expr pos:start="23:32" pos:end="23:34"><name pos:start="23:32" pos:end="23:34">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="23:38" pos:end="23:49"><expr pos:start="23:38" pos:end="23:49"><operator pos:start="23:38" pos:end="23:38">(</operator><name pos:start="23:39" pos:end="23:46">uint32_t</name><operator pos:start="23:47" pos:end="23:47">)</operator><operator pos:start="23:48" pos:end="23:48">~</operator><literal type="number" pos:start="23:49" pos:end="23:49">0</literal></expr></argument>, <argument pos:start="23:52" pos:end="23:63"><expr pos:start="23:52" pos:end="23:63"><name pos:start="23:52" pos:end="23:63">feature_name</name></expr></argument>, <argument pos:start="23:66" pos:end="23:66"><expr pos:start="23:66" pos:end="23:66"><literal type="number" pos:start="23:66" pos:end="23:66">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:48"><expr pos:start="25:9" pos:end="25:47"><call pos:start="25:9" pos:end="25:47">(<modifier pos:start="25:10" pos:end="25:10">*</modifier><name pos:start="25:11" pos:end="25:21">cpu_fprintf</name>)<argument_list pos:start="25:23" pos:end="25:47">(<argument pos:start="25:24" pos:end="25:24"><expr pos:start="25:24" pos:end="25:24"><name pos:start="25:24" pos:end="25:24">f</name></expr></argument>, <argument pos:start="25:27" pos:end="25:41"><expr pos:start="25:27" pos:end="25:41"><literal type="string" pos:start="25:27" pos:end="25:41">"  f_edx: %s\n"</literal></expr></argument>, <argument pos:start="25:44" pos:end="25:46"><expr pos:start="25:44" pos:end="25:46"><name pos:start="25:44" pos:end="25:46">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:72"><expr pos:start="27:9" pos:end="27:71"><call pos:start="27:9" pos:end="27:71"><name pos:start="27:9" pos:end="27:17">listflags</name><argument_list pos:start="27:18" pos:end="27:71">(<argument pos:start="27:19" pos:end="27:21"><expr pos:start="27:19" pos:end="27:21"><name pos:start="27:19" pos:end="27:21">buf</name></expr></argument>, <argument pos:start="27:24" pos:end="27:35"><expr pos:start="27:24" pos:end="27:35"><sizeof pos:start="27:24" pos:end="27:35">sizeof <argument_list pos:start="27:31" pos:end="27:35">(<argument pos:start="27:32" pos:end="27:34"><expr pos:start="27:32" pos:end="27:34"><name pos:start="27:32" pos:end="27:34">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="27:38" pos:end="27:49"><expr pos:start="27:38" pos:end="27:49"><operator pos:start="27:38" pos:end="27:38">(</operator><name pos:start="27:39" pos:end="27:46">uint32_t</name><operator pos:start="27:47" pos:end="27:47">)</operator><operator pos:start="27:48" pos:end="27:48">~</operator><literal type="number" pos:start="27:49" pos:end="27:49">0</literal></expr></argument>, <argument pos:start="27:52" pos:end="27:67"><expr pos:start="27:52" pos:end="27:67"><name pos:start="27:52" pos:end="27:67">ext_feature_name</name></expr></argument>, <argument pos:start="27:70" pos:end="27:70"><expr pos:start="27:70" pos:end="27:70"><literal type="number" pos:start="27:70" pos:end="27:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:48"><expr pos:start="29:9" pos:end="29:47"><call pos:start="29:9" pos:end="29:47">(<modifier pos:start="29:10" pos:end="29:10">*</modifier><name pos:start="29:11" pos:end="29:21">cpu_fprintf</name>)<argument_list pos:start="29:23" pos:end="29:47">(<argument pos:start="29:24" pos:end="29:24"><expr pos:start="29:24" pos:end="29:24"><name pos:start="29:24" pos:end="29:24">f</name></expr></argument>, <argument pos:start="29:27" pos:end="29:41"><expr pos:start="29:27" pos:end="29:41"><literal type="string" pos:start="29:27" pos:end="29:41">"  f_ecx: %s\n"</literal></expr></argument>, <argument pos:start="29:44" pos:end="29:46"><expr pos:start="29:44" pos:end="29:46"><name pos:start="29:44" pos:end="29:46">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:73"><expr pos:start="31:9" pos:end="31:72"><call pos:start="31:9" pos:end="31:72"><name pos:start="31:9" pos:end="31:17">listflags</name><argument_list pos:start="31:18" pos:end="31:72">(<argument pos:start="31:19" pos:end="31:21"><expr pos:start="31:19" pos:end="31:21"><name pos:start="31:19" pos:end="31:21">buf</name></expr></argument>, <argument pos:start="31:24" pos:end="31:35"><expr pos:start="31:24" pos:end="31:35"><sizeof pos:start="31:24" pos:end="31:35">sizeof <argument_list pos:start="31:31" pos:end="31:35">(<argument pos:start="31:32" pos:end="31:34"><expr pos:start="31:32" pos:end="31:34"><name pos:start="31:32" pos:end="31:34">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="31:38" pos:end="31:49"><expr pos:start="31:38" pos:end="31:49"><operator pos:start="31:38" pos:end="31:38">(</operator><name pos:start="31:39" pos:end="31:46">uint32_t</name><operator pos:start="31:47" pos:end="31:47">)</operator><operator pos:start="31:48" pos:end="31:48">~</operator><literal type="number" pos:start="31:49" pos:end="31:49">0</literal></expr></argument>, <argument pos:start="31:52" pos:end="31:68"><expr pos:start="31:52" pos:end="31:68"><name pos:start="31:52" pos:end="31:68">ext2_feature_name</name></expr></argument>, <argument pos:start="31:71" pos:end="31:71"><expr pos:start="31:71" pos:end="31:71"><literal type="number" pos:start="31:71" pos:end="31:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:51"><expr pos:start="33:9" pos:end="33:50"><call pos:start="33:9" pos:end="33:50">(<modifier pos:start="33:10" pos:end="33:10">*</modifier><name pos:start="33:11" pos:end="33:21">cpu_fprintf</name>)<argument_list pos:start="33:23" pos:end="33:50">(<argument pos:start="33:24" pos:end="33:24"><expr pos:start="33:24" pos:end="33:24"><name pos:start="33:24" pos:end="33:24">f</name></expr></argument>, <argument pos:start="33:27" pos:end="33:44"><expr pos:start="33:27" pos:end="33:44"><literal type="string" pos:start="33:27" pos:end="33:44">"  extf_edx: %s\n"</literal></expr></argument>, <argument pos:start="33:47" pos:end="33:49"><expr pos:start="33:47" pos:end="33:49"><name pos:start="33:47" pos:end="33:49">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:73"><expr pos:start="35:9" pos:end="35:72"><call pos:start="35:9" pos:end="35:72"><name pos:start="35:9" pos:end="35:17">listflags</name><argument_list pos:start="35:18" pos:end="35:72">(<argument pos:start="35:19" pos:end="35:21"><expr pos:start="35:19" pos:end="35:21"><name pos:start="35:19" pos:end="35:21">buf</name></expr></argument>, <argument pos:start="35:24" pos:end="35:35"><expr pos:start="35:24" pos:end="35:35"><sizeof pos:start="35:24" pos:end="35:35">sizeof <argument_list pos:start="35:31" pos:end="35:35">(<argument pos:start="35:32" pos:end="35:34"><expr pos:start="35:32" pos:end="35:34"><name pos:start="35:32" pos:end="35:34">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="35:38" pos:end="35:49"><expr pos:start="35:38" pos:end="35:49"><operator pos:start="35:38" pos:end="35:38">(</operator><name pos:start="35:39" pos:end="35:46">uint32_t</name><operator pos:start="35:47" pos:end="35:47">)</operator><operator pos:start="35:48" pos:end="35:48">~</operator><literal type="number" pos:start="35:49" pos:end="35:49">0</literal></expr></argument>, <argument pos:start="35:52" pos:end="35:68"><expr pos:start="35:52" pos:end="35:68"><name pos:start="35:52" pos:end="35:68">ext3_feature_name</name></expr></argument>, <argument pos:start="35:71" pos:end="35:71"><expr pos:start="35:71" pos:end="35:71"><literal type="number" pos:start="35:71" pos:end="35:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:51"><expr pos:start="37:9" pos:end="37:50"><call pos:start="37:9" pos:end="37:50">(<modifier pos:start="37:10" pos:end="37:10">*</modifier><name pos:start="37:11" pos:end="37:21">cpu_fprintf</name>)<argument_list pos:start="37:23" pos:end="37:50">(<argument pos:start="37:24" pos:end="37:24"><expr pos:start="37:24" pos:end="37:24"><name pos:start="37:24" pos:end="37:24">f</name></expr></argument>, <argument pos:start="37:27" pos:end="37:44"><expr pos:start="37:27" pos:end="37:44"><literal type="string" pos:start="37:27" pos:end="37:44">"  extf_ecx: %s\n"</literal></expr></argument>, <argument pos:start="37:47" pos:end="37:49"><expr pos:start="37:47" pos:end="37:49"><name pos:start="37:47" pos:end="37:49">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <for pos:start="43:5" pos:end="111:5">for <control pos:start="43:9" pos:end="43:46">(<init pos:start="43:10" pos:end="43:24"><expr pos:start="43:10" pos:end="43:23"><name pos:start="43:10" pos:end="43:12">def</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <name pos:start="43:16" pos:end="43:23">x86_defs</name></expr>;</init> <condition pos:start="43:26" pos:end="43:29"><expr pos:start="43:26" pos:end="43:28"><name pos:start="43:26" pos:end="43:28">def</name></expr>;</condition> <incr pos:start="43:31" pos:end="43:45"><expr pos:start="43:31" pos:end="43:45"><name pos:start="43:31" pos:end="43:33">def</name> <operator pos:start="43:35" pos:end="43:35">=</operator> <name pos:start="43:37" pos:end="43:45"><name pos:start="43:37" pos:end="43:39">def</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:45">next</name></name></expr></incr>)</control> <block pos:start="43:48" pos:end="111:5">{<block_content pos:start="45:9" pos:end="109:9">

        <expr_stmt pos:start="45:9" pos:end="45:74"><expr pos:start="45:9" pos:end="45:73"><call pos:start="45:9" pos:end="45:73"><name pos:start="45:9" pos:end="45:16">snprintf</name><argument_list pos:start="45:17" pos:end="45:73">(<argument pos:start="45:18" pos:end="45:20"><expr pos:start="45:18" pos:end="45:20"><name pos:start="45:18" pos:end="45:20">buf</name></expr></argument>, <argument pos:start="45:23" pos:end="45:34"><expr pos:start="45:23" pos:end="45:34"><sizeof pos:start="45:23" pos:end="45:34">sizeof <argument_list pos:start="45:30" pos:end="45:34">(<argument pos:start="45:31" pos:end="45:33"><expr pos:start="45:31" pos:end="45:33"><name pos:start="45:31" pos:end="45:33">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="45:37" pos:end="45:61"><expr pos:start="45:37" pos:end="45:61"><ternary pos:start="45:37" pos:end="45:61"><condition pos:start="45:37" pos:end="45:48"><expr pos:start="45:37" pos:end="45:46"><name pos:start="45:37" pos:end="45:46"><name pos:start="45:37" pos:end="45:39">def</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:46">flags</name></name></expr> ?</condition><then pos:start="45:50" pos:end="45:55"> <expr pos:start="45:50" pos:end="45:55"><literal type="string" pos:start="45:50" pos:end="45:55">"[%s]"</literal></expr></then><else pos:start="45:56" pos:end="45:61">: <expr pos:start="45:58" pos:end="45:61"><literal type="string" pos:start="45:58" pos:end="45:61">"%s"</literal></expr></else></ternary></expr></argument>, <argument pos:start="45:64" pos:end="45:72"><expr pos:start="45:64" pos:end="45:72"><name pos:start="45:64" pos:end="45:72"><name pos:start="45:64" pos:end="45:66">def</name><operator pos:start="45:67" pos:end="45:68">-&gt;</operator><name pos:start="45:69" pos:end="45:72">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:26">(<expr pos:start="47:13" pos:end="47:25"><name pos:start="47:13" pos:end="47:17">model</name> <operator pos:start="47:19" pos:end="47:20">||</operator> <name pos:start="47:22" pos:end="47:25">dump</name></expr>)</condition> <block pos:start="47:28" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:71">

            <expr_stmt pos:start="49:13" pos:end="49:71"><expr pos:start="49:13" pos:end="49:70"><call pos:start="49:13" pos:end="49:70">(<modifier pos:start="49:14" pos:end="49:14">*</modifier><name pos:start="49:15" pos:end="49:25">cpu_fprintf</name>)<argument_list pos:start="49:27" pos:end="49:70">(<argument pos:start="49:28" pos:end="49:28"><expr pos:start="49:28" pos:end="49:28"><name pos:start="49:28" pos:end="49:28">f</name></expr></argument>, <argument pos:start="49:31" pos:end="49:49"><expr pos:start="49:31" pos:end="49:49"><literal type="string" pos:start="49:31" pos:end="49:49">"x86 %16s  %-48s\n"</literal></expr></argument>, <argument pos:start="49:52" pos:end="49:54"><expr pos:start="49:52" pos:end="49:54"><name pos:start="49:52" pos:end="49:54">buf</name></expr></argument>, <argument pos:start="49:57" pos:end="49:69"><expr pos:start="49:57" pos:end="49:69"><name pos:start="49:57" pos:end="49:69"><name pos:start="49:57" pos:end="49:59">def</name><operator pos:start="49:60" pos:end="49:61">-&gt;</operator><name pos:start="49:62" pos:end="49:69">model_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="51:11" pos:end="55:9">else <block pos:start="51:16" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:49">

            <expr_stmt pos:start="53:13" pos:end="53:49"><expr pos:start="53:13" pos:end="53:48"><call pos:start="53:13" pos:end="53:48">(<modifier pos:start="53:14" pos:end="53:14">*</modifier><name pos:start="53:15" pos:end="53:25">cpu_fprintf</name>)<argument_list pos:start="53:27" pos:end="53:48">(<argument pos:start="53:28" pos:end="53:28"><expr pos:start="53:28" pos:end="53:28"><name pos:start="53:28" pos:end="53:28">f</name></expr></argument>, <argument pos:start="53:31" pos:end="53:42"><expr pos:start="53:31" pos:end="53:42"><literal type="string" pos:start="53:31" pos:end="53:42">"x86 %16s\n"</literal></expr></argument>, <argument pos:start="53:45" pos:end="53:47"><expr pos:start="53:45" pos:end="53:47"><name pos:start="53:45" pos:end="53:47">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="57:9" pos:end="109:9"><if pos:start="57:9" pos:end="109:9">if <condition pos:start="57:12" pos:end="57:17">(<expr pos:start="57:13" pos:end="57:16"><name pos:start="57:13" pos:end="57:16">dump</name></expr>)</condition> <block pos:start="57:19" pos:end="109:9">{<block_content pos:start="59:13" pos:end="107:36">

            <expr_stmt pos:start="59:13" pos:end="59:62"><expr pos:start="59:13" pos:end="59:61"><call pos:start="59:13" pos:end="59:61"><name pos:start="59:13" pos:end="59:18">memcpy</name><argument_list pos:start="59:19" pos:end="59:61">(<argument pos:start="59:20" pos:end="59:22"><expr pos:start="59:20" pos:end="59:22"><name pos:start="59:20" pos:end="59:22">buf</name></expr></argument>, <argument pos:start="59:25" pos:end="59:37"><expr pos:start="59:25" pos:end="59:37"><operator pos:start="59:25" pos:end="59:25">&amp;</operator><name pos:start="59:26" pos:end="59:37"><name pos:start="59:26" pos:end="59:28">def</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:37">vendor1</name></name></expr></argument>, <argument pos:start="59:40" pos:end="59:60"><expr pos:start="59:40" pos:end="59:60"><sizeof pos:start="59:40" pos:end="59:60">sizeof <argument_list pos:start="59:47" pos:end="59:60">(<argument pos:start="59:48" pos:end="59:59"><expr pos:start="59:48" pos:end="59:59"><name pos:start="59:48" pos:end="59:59"><name pos:start="59:48" pos:end="59:50">def</name><operator pos:start="59:51" pos:end="59:52">-&gt;</operator><name pos:start="59:53" pos:end="59:59">vendor1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:66"><expr pos:start="61:13" pos:end="61:65"><call pos:start="61:13" pos:end="61:65"><name pos:start="61:13" pos:end="61:18">memcpy</name><argument_list pos:start="61:19" pos:end="61:65">(<argument pos:start="61:20" pos:end="61:26"><expr pos:start="61:20" pos:end="61:26"><name pos:start="61:20" pos:end="61:22">buf</name> <operator pos:start="61:24" pos:end="61:24">+</operator> <literal type="number" pos:start="61:26" pos:end="61:26">4</literal></expr></argument>, <argument pos:start="61:29" pos:end="61:41"><expr pos:start="61:29" pos:end="61:41"><operator pos:start="61:29" pos:end="61:29">&amp;</operator><name pos:start="61:30" pos:end="61:41"><name pos:start="61:30" pos:end="61:32">def</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:41">vendor2</name></name></expr></argument>, <argument pos:start="61:44" pos:end="61:64"><expr pos:start="61:44" pos:end="61:64"><sizeof pos:start="61:44" pos:end="61:64">sizeof <argument_list pos:start="61:51" pos:end="61:64">(<argument pos:start="61:52" pos:end="61:63"><expr pos:start="61:52" pos:end="61:63"><name pos:start="61:52" pos:end="61:63"><name pos:start="61:52" pos:end="61:54">def</name><operator pos:start="61:55" pos:end="61:56">-&gt;</operator><name pos:start="61:57" pos:end="61:63">vendor2</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:66"><expr pos:start="63:13" pos:end="63:65"><call pos:start="63:13" pos:end="63:65"><name pos:start="63:13" pos:end="63:18">memcpy</name><argument_list pos:start="63:19" pos:end="63:65">(<argument pos:start="63:20" pos:end="63:26"><expr pos:start="63:20" pos:end="63:26"><name pos:start="63:20" pos:end="63:22">buf</name> <operator pos:start="63:24" pos:end="63:24">+</operator> <literal type="number" pos:start="63:26" pos:end="63:26">8</literal></expr></argument>, <argument pos:start="63:29" pos:end="63:41"><expr pos:start="63:29" pos:end="63:41"><operator pos:start="63:29" pos:end="63:29">&amp;</operator><name pos:start="63:30" pos:end="63:41"><name pos:start="63:30" pos:end="63:32">def</name><operator pos:start="63:33" pos:end="63:34">-&gt;</operator><name pos:start="63:35" pos:end="63:41">vendor3</name></name></expr></argument>, <argument pos:start="63:44" pos:end="63:64"><expr pos:start="63:44" pos:end="63:64"><sizeof pos:start="63:44" pos:end="63:64">sizeof <argument_list pos:start="63:51" pos:end="63:64">(<argument pos:start="63:52" pos:end="63:63"><expr pos:start="63:52" pos:end="63:63"><name pos:start="63:52" pos:end="63:63"><name pos:start="63:52" pos:end="63:54">def</name><operator pos:start="63:55" pos:end="63:56">-&gt;</operator><name pos:start="63:57" pos:end="63:63">vendor3</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:27"><expr pos:start="65:13" pos:end="65:26"><name pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:15">buf</name><index pos:start="65:16" pos:end="65:19">[<expr pos:start="65:17" pos:end="65:18"><literal type="number" pos:start="65:17" pos:end="65:18">12</literal></expr>]</index></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <literal type="char" pos:start="65:23" pos:end="65:26">'\0'</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="75:34"><expr pos:start="67:13" pos:end="75:33"><call pos:start="67:13" pos:end="75:33">(<modifier pos:start="67:14" pos:end="67:14">*</modifier><name pos:start="67:15" pos:end="67:25">cpu_fprintf</name>)<argument_list pos:start="67:27" pos:end="75:33">(<argument pos:start="67:28" pos:end="67:28"><expr pos:start="67:28" pos:end="67:28"><name pos:start="67:28" pos:end="67:28">f</name></expr></argument>,

                <argument pos:start="69:17" pos:end="71:34"><expr pos:start="69:17" pos:end="71:34"><literal type="string" pos:start="69:17" pos:end="69:71">"  family %d model %d stepping %d level %d xlevel 0x%x"</literal>

                <literal type="string" pos:start="71:17" pos:end="71:34">" vendor \"%s\"\n"</literal></expr></argument>,

                <argument pos:start="73:17" pos:end="73:27"><expr pos:start="73:17" pos:end="73:27"><name pos:start="73:17" pos:end="73:27"><name pos:start="73:17" pos:end="73:19">def</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:27">family</name></name></expr></argument>, <argument pos:start="73:30" pos:end="73:39"><expr pos:start="73:30" pos:end="73:39"><name pos:start="73:30" pos:end="73:39"><name pos:start="73:30" pos:end="73:32">def</name><operator pos:start="73:33" pos:end="73:34">-&gt;</operator><name pos:start="73:35" pos:end="73:39">model</name></name></expr></argument>, <argument pos:start="73:42" pos:end="73:54"><expr pos:start="73:42" pos:end="73:54"><name pos:start="73:42" pos:end="73:54"><name pos:start="73:42" pos:end="73:44">def</name><operator pos:start="73:45" pos:end="73:46">-&gt;</operator><name pos:start="73:47" pos:end="73:54">stepping</name></name></expr></argument>, <argument pos:start="73:57" pos:end="73:66"><expr pos:start="73:57" pos:end="73:66"><name pos:start="73:57" pos:end="73:66"><name pos:start="73:57" pos:end="73:59">def</name><operator pos:start="73:60" pos:end="73:61">-&gt;</operator><name pos:start="73:62" pos:end="73:66">level</name></name></expr></argument>,

                <argument pos:start="75:17" pos:end="75:27"><expr pos:start="75:17" pos:end="75:27"><name pos:start="75:17" pos:end="75:27"><name pos:start="75:17" pos:end="75:19">def</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:27">xlevel</name></name></expr></argument>, <argument pos:start="75:30" pos:end="75:32"><expr pos:start="75:30" pos:end="75:32"><name pos:start="75:30" pos:end="75:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:73"><expr pos:start="77:13" pos:end="77:72"><call pos:start="77:13" pos:end="77:72"><name pos:start="77:13" pos:end="77:21">listflags</name><argument_list pos:start="77:22" pos:end="77:72">(<argument pos:start="77:23" pos:end="77:25"><expr pos:start="77:23" pos:end="77:25"><name pos:start="77:23" pos:end="77:25">buf</name></expr></argument>, <argument pos:start="77:28" pos:end="77:39"><expr pos:start="77:28" pos:end="77:39"><sizeof pos:start="77:28" pos:end="77:39">sizeof <argument_list pos:start="77:35" pos:end="77:39">(<argument pos:start="77:36" pos:end="77:38"><expr pos:start="77:36" pos:end="77:38"><name pos:start="77:36" pos:end="77:38">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="77:42" pos:end="77:54"><expr pos:start="77:42" pos:end="77:54"><name pos:start="77:42" pos:end="77:54"><name pos:start="77:42" pos:end="77:44">def</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:54">features</name></name></expr></argument>, <argument pos:start="77:57" pos:end="77:68"><expr pos:start="77:57" pos:end="77:68"><name pos:start="77:57" pos:end="77:68">feature_name</name></expr></argument>, <argument pos:start="77:71" pos:end="77:71"><expr pos:start="77:71" pos:end="77:71"><literal type="number" pos:start="77:71" pos:end="77:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="81:21"><expr pos:start="79:13" pos:end="81:20"><call pos:start="79:13" pos:end="81:20">(<modifier pos:start="79:14" pos:end="79:14">*</modifier><name pos:start="79:15" pos:end="79:25">cpu_fprintf</name>)<argument_list pos:start="79:27" pos:end="81:20">(<argument pos:start="79:28" pos:end="79:28"><expr pos:start="79:28" pos:end="79:28"><name pos:start="79:28" pos:end="79:28">f</name></expr></argument>, <argument pos:start="79:31" pos:end="79:57"><expr pos:start="79:31" pos:end="79:57"><literal type="string" pos:start="79:31" pos:end="79:57">"  feature_edx %08x (%s)\n"</literal></expr></argument>, <argument pos:start="79:60" pos:end="79:72"><expr pos:start="79:60" pos:end="79:72"><name pos:start="79:60" pos:end="79:72"><name pos:start="79:60" pos:end="79:62">def</name><operator pos:start="79:63" pos:end="79:64">-&gt;</operator><name pos:start="79:65" pos:end="79:72">features</name></name></expr></argument>,

                <argument pos:start="81:17" pos:end="81:19"><expr pos:start="81:17" pos:end="81:19"><name pos:start="81:17" pos:end="81:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="85:19"><expr pos:start="83:13" pos:end="85:18"><call pos:start="83:13" pos:end="85:18"><name pos:start="83:13" pos:end="83:21">listflags</name><argument_list pos:start="83:22" pos:end="85:18">(<argument pos:start="83:23" pos:end="83:25"><expr pos:start="83:23" pos:end="83:25"><name pos:start="83:23" pos:end="83:25">buf</name></expr></argument>, <argument pos:start="83:28" pos:end="83:39"><expr pos:start="83:28" pos:end="83:39"><sizeof pos:start="83:28" pos:end="83:39">sizeof <argument_list pos:start="83:35" pos:end="83:39">(<argument pos:start="83:36" pos:end="83:38"><expr pos:start="83:36" pos:end="83:38"><name pos:start="83:36" pos:end="83:38">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="83:42" pos:end="83:58"><expr pos:start="83:42" pos:end="83:58"><name pos:start="83:42" pos:end="83:58"><name pos:start="83:42" pos:end="83:44">def</name><operator pos:start="83:45" pos:end="83:46">-&gt;</operator><name pos:start="83:47" pos:end="83:58">ext_features</name></name></expr></argument>, <argument pos:start="83:61" pos:end="83:76"><expr pos:start="83:61" pos:end="83:76"><name pos:start="83:61" pos:end="83:76">ext_feature_name</name></expr></argument>,

                <argument pos:start="85:17" pos:end="85:17"><expr pos:start="85:17" pos:end="85:17"><literal type="number" pos:start="85:17" pos:end="85:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="89:21"><expr pos:start="87:13" pos:end="89:20"><call pos:start="87:13" pos:end="89:20">(<modifier pos:start="87:14" pos:end="87:14">*</modifier><name pos:start="87:15" pos:end="87:25">cpu_fprintf</name>)<argument_list pos:start="87:27" pos:end="89:20">(<argument pos:start="87:28" pos:end="87:28"><expr pos:start="87:28" pos:end="87:28"><name pos:start="87:28" pos:end="87:28">f</name></expr></argument>, <argument pos:start="87:31" pos:end="87:57"><expr pos:start="87:31" pos:end="87:57"><literal type="string" pos:start="87:31" pos:end="87:57">"  feature_ecx %08x (%s)\n"</literal></expr></argument>, <argument pos:start="87:60" pos:end="87:76"><expr pos:start="87:60" pos:end="87:76"><name pos:start="87:60" pos:end="87:76"><name pos:start="87:60" pos:end="87:62">def</name><operator pos:start="87:63" pos:end="87:64">-&gt;</operator><name pos:start="87:65" pos:end="87:76">ext_features</name></name></expr></argument>,

                <argument pos:start="89:17" pos:end="89:19"><expr pos:start="89:17" pos:end="89:19"><name pos:start="89:17" pos:end="89:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="93:19"><expr pos:start="91:13" pos:end="93:18"><call pos:start="91:13" pos:end="93:18"><name pos:start="91:13" pos:end="91:21">listflags</name><argument_list pos:start="91:22" pos:end="93:18">(<argument pos:start="91:23" pos:end="91:25"><expr pos:start="91:23" pos:end="91:25"><name pos:start="91:23" pos:end="91:25">buf</name></expr></argument>, <argument pos:start="91:28" pos:end="91:39"><expr pos:start="91:28" pos:end="91:39"><sizeof pos:start="91:28" pos:end="91:39">sizeof <argument_list pos:start="91:35" pos:end="91:39">(<argument pos:start="91:36" pos:end="91:38"><expr pos:start="91:36" pos:end="91:38"><name pos:start="91:36" pos:end="91:38">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="91:42" pos:end="91:59"><expr pos:start="91:42" pos:end="91:59"><name pos:start="91:42" pos:end="91:59"><name pos:start="91:42" pos:end="91:44">def</name><operator pos:start="91:45" pos:end="91:46">-&gt;</operator><name pos:start="91:47" pos:end="91:59">ext2_features</name></name></expr></argument>, <argument pos:start="91:62" pos:end="91:78"><expr pos:start="91:62" pos:end="91:78"><name pos:start="91:62" pos:end="91:78">ext2_feature_name</name></expr></argument>,

                <argument pos:start="93:17" pos:end="93:17"><expr pos:start="93:17" pos:end="93:17"><literal type="number" pos:start="93:17" pos:end="93:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="97:41"><expr pos:start="95:13" pos:end="97:40"><call pos:start="95:13" pos:end="97:40">(<modifier pos:start="95:14" pos:end="95:14">*</modifier><name pos:start="95:15" pos:end="95:25">cpu_fprintf</name>)<argument_list pos:start="95:27" pos:end="97:40">(<argument pos:start="95:28" pos:end="95:28"><expr pos:start="95:28" pos:end="95:28"><name pos:start="95:28" pos:end="95:28">f</name></expr></argument>, <argument pos:start="95:31" pos:end="95:60"><expr pos:start="95:31" pos:end="95:60"><literal type="string" pos:start="95:31" pos:end="95:60">"  extfeature_edx %08x (%s)\n"</literal></expr></argument>,

                <argument pos:start="97:17" pos:end="97:34"><expr pos:start="97:17" pos:end="97:34"><name pos:start="97:17" pos:end="97:34"><name pos:start="97:17" pos:end="97:19">def</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:34">ext2_features</name></name></expr></argument>, <argument pos:start="97:37" pos:end="97:39"><expr pos:start="97:37" pos:end="97:39"><name pos:start="97:37" pos:end="97:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="101:19"><expr pos:start="99:13" pos:end="101:18"><call pos:start="99:13" pos:end="101:18"><name pos:start="99:13" pos:end="99:21">listflags</name><argument_list pos:start="99:22" pos:end="101:18">(<argument pos:start="99:23" pos:end="99:25"><expr pos:start="99:23" pos:end="99:25"><name pos:start="99:23" pos:end="99:25">buf</name></expr></argument>, <argument pos:start="99:28" pos:end="99:39"><expr pos:start="99:28" pos:end="99:39"><sizeof pos:start="99:28" pos:end="99:39">sizeof <argument_list pos:start="99:35" pos:end="99:39">(<argument pos:start="99:36" pos:end="99:38"><expr pos:start="99:36" pos:end="99:38"><name pos:start="99:36" pos:end="99:38">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="99:42" pos:end="99:59"><expr pos:start="99:42" pos:end="99:59"><name pos:start="99:42" pos:end="99:59"><name pos:start="99:42" pos:end="99:44">def</name><operator pos:start="99:45" pos:end="99:46">-&gt;</operator><name pos:start="99:47" pos:end="99:59">ext3_features</name></name></expr></argument>, <argument pos:start="99:62" pos:end="99:78"><expr pos:start="99:62" pos:end="99:78"><name pos:start="99:62" pos:end="99:78">ext3_feature_name</name></expr></argument>,

                <argument pos:start="101:17" pos:end="101:17"><expr pos:start="101:17" pos:end="101:17"><literal type="number" pos:start="101:17" pos:end="101:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="105:41"><expr pos:start="103:13" pos:end="105:40"><call pos:start="103:13" pos:end="105:40">(<modifier pos:start="103:14" pos:end="103:14">*</modifier><name pos:start="103:15" pos:end="103:25">cpu_fprintf</name>)<argument_list pos:start="103:27" pos:end="105:40">(<argument pos:start="103:28" pos:end="103:28"><expr pos:start="103:28" pos:end="103:28"><name pos:start="103:28" pos:end="103:28">f</name></expr></argument>, <argument pos:start="103:31" pos:end="103:60"><expr pos:start="103:31" pos:end="103:60"><literal type="string" pos:start="103:31" pos:end="103:60">"  extfeature_ecx %08x (%s)\n"</literal></expr></argument>,

                <argument pos:start="105:17" pos:end="105:34"><expr pos:start="105:17" pos:end="105:34"><name pos:start="105:17" pos:end="105:34"><name pos:start="105:17" pos:end="105:19">def</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:34">ext3_features</name></name></expr></argument>, <argument pos:start="105:37" pos:end="105:39"><expr pos:start="105:37" pos:end="105:39"><name pos:start="105:37" pos:end="105:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:36"><expr pos:start="107:13" pos:end="107:35"><call pos:start="107:13" pos:end="107:35">(<modifier pos:start="107:14" pos:end="107:14">*</modifier><name pos:start="107:15" pos:end="107:25">cpu_fprintf</name>)<argument_list pos:start="107:27" pos:end="107:35">(<argument pos:start="107:28" pos:end="107:28"><expr pos:start="107:28" pos:end="107:28"><name pos:start="107:28" pos:end="107:28">f</name></expr></argument>, <argument pos:start="107:31" pos:end="107:34"><expr pos:start="107:31" pos:end="107:34"><literal type="string" pos:start="107:31" pos:end="107:34">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="113:5" pos:end="117:5"><if pos:start="113:5" pos:end="117:5">if <condition pos:start="113:8" pos:end="113:22">(<expr pos:start="113:9" pos:end="113:21"><call pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:19">kvm_enabled</name><argument_list pos:start="113:20" pos:end="113:21">()</argument_list></call></expr>)</condition> <block pos:start="113:24" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:50">

        <expr_stmt pos:start="115:9" pos:end="115:50"><expr pos:start="115:9" pos:end="115:49"><call pos:start="115:9" pos:end="115:49">(<modifier pos:start="115:10" pos:end="115:10">*</modifier><name pos:start="115:11" pos:end="115:21">cpu_fprintf</name>)<argument_list pos:start="115:23" pos:end="115:49">(<argument pos:start="115:24" pos:end="115:24"><expr pos:start="115:24" pos:end="115:24"><name pos:start="115:24" pos:end="115:24">f</name></expr></argument>, <argument pos:start="115:27" pos:end="115:38"><expr pos:start="115:27" pos:end="115:38"><literal type="string" pos:start="115:27" pos:end="115:38">"x86 %16s\n"</literal></expr></argument>, <argument pos:start="115:41" pos:end="115:48"><expr pos:start="115:41" pos:end="115:48"><literal type="string" pos:start="115:41" pos:end="115:48">"[host]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
