<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4728.c" pos:tabs="8"><function pos:start="1:1" pos:end="407:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">ppc_spapr_init</name><parameter_list pos:start="1:27" pos:end="11:49">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:37">ram_addr_t</name></type> <name pos:start="1:39" pos:end="1:46">ram_size</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:50"><decl pos:start="3:28" pos:end="3:50"><type pos:start="3:28" pos:end="3:50"><specifier pos:start="3:28" pos:end="3:32">const</specifier> <name pos:start="3:34" pos:end="3:37">char</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:50">boot_device</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:54"><decl pos:start="5:28" pos:end="5:54"><type pos:start="5:28" pos:end="5:54"><specifier pos:start="5:28" pos:end="5:32">const</specifier> <name pos:start="5:34" pos:end="5:37">char</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:54">kernel_filename</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:53"><decl pos:start="7:28" pos:end="7:53"><type pos:start="7:28" pos:end="7:53"><specifier pos:start="7:28" pos:end="7:32">const</specifier> <name pos:start="7:34" pos:end="7:37">char</name> <modifier pos:start="7:39" pos:end="7:39">*</modifier></type><name pos:start="7:40" pos:end="7:53">kernel_cmdline</name></decl></parameter>,

                           <parameter pos:start="9:28" pos:end="9:54"><decl pos:start="9:28" pos:end="9:54"><type pos:start="9:28" pos:end="9:54"><specifier pos:start="9:28" pos:end="9:32">const</specifier> <name pos:start="9:34" pos:end="9:37">char</name> <modifier pos:start="9:39" pos:end="9:39">*</modifier></type><name pos:start="9:40" pos:end="9:54">initrd_filename</name></decl></parameter>,

                           <parameter pos:start="11:28" pos:end="11:48"><decl pos:start="11:28" pos:end="11:48"><type pos:start="11:28" pos:end="11:48"><specifier pos:start="11:28" pos:end="11:32">const</specifier> <name pos:start="11:34" pos:end="11:37">char</name> <modifier pos:start="11:39" pos:end="11:39">*</modifier></type><name pos:start="11:40" pos:end="11:48">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="407:1">{<block_content pos:start="15:5" pos:end="405:44">

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:46"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:24">sysmem</name> <init pos:start="19:26" pos:end="19:46">= <expr pos:start="19:28" pos:end="19:46"><call pos:start="19:28" pos:end="19:46"><name pos:start="19:28" pos:end="19:44">get_system_memory</name><argument_list pos:start="19:45" pos:end="19:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:47"><decl pos:start="21:5" pos:end="21:46"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">ram</name> <init pos:start="21:23" pos:end="21:46">= <expr pos:start="21:25" pos:end="21:46"><call pos:start="21:25" pos:end="21:46"><name pos:start="21:25" pos:end="21:29">g_new</name><argument_list pos:start="21:30" pos:end="21:46">(<argument pos:start="21:31" pos:end="21:42"><expr pos:start="21:31" pos:end="21:42"><name pos:start="21:31" pos:end="21:42">MemoryRegion</name></expr></argument>, <argument pos:start="21:45" pos:end="21:45"><expr pos:start="21:45" pos:end="21:45"><literal type="number" pos:start="21:45" pos:end="21:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:48"><decl pos:start="23:5" pos:end="23:37"><type pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:22">target_phys_addr_t</name></type> <name pos:start="23:24" pos:end="23:37">rma_alloc_size</name></decl>, <decl pos:start="23:40" pos:end="23:47"><type ref="prev" pos:start="23:5" pos:end="23:22"/><name pos:start="23:40" pos:end="23:47">rma_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:24">initrd_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:43"><decl pos:start="27:5" pos:end="27:20"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">long</name></type> <name pos:start="27:10" pos:end="27:20">kernel_size</name></decl>, <decl pos:start="27:23" pos:end="27:33"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:23" pos:end="27:33">initrd_size</name></decl>, <decl pos:start="27:36" pos:end="27:42"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:36" pos:end="27:42">fw_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:25"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">long</name></type> <name pos:start="29:10" pos:end="29:19">pteg_shift</name> <init pos:start="29:21" pos:end="29:24">= <expr pos:start="29:23" pos:end="29:24"><literal type="number" pos:start="29:23" pos:end="29:24">17</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:19"><decl pos:start="31:5" pos:end="31:18"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:8">char</name> <modifier pos:start="31:10" pos:end="31:10">*</modifier></type><name pos:start="31:11" pos:end="31:18">filename</name></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:38"><expr pos:start="35:5" pos:end="35:37"><name pos:start="35:5" pos:end="35:9">spapr</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <call pos:start="35:13" pos:end="35:37"><name pos:start="35:13" pos:end="35:21">g_malloc0</name><argument_list pos:start="35:22" pos:end="35:37">(<argument pos:start="35:23" pos:end="35:36"><expr pos:start="35:23" pos:end="35:36"><sizeof pos:start="35:23" pos:end="35:36">sizeof<argument_list pos:start="35:29" pos:end="35:36">(<argument pos:start="35:30" pos:end="35:35"><expr pos:start="35:30" pos:end="35:35"><operator pos:start="35:30" pos:end="35:30">*</operator><name pos:start="35:31" pos:end="35:35">spapr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><call pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:14">QLIST_INIT</name><argument_list pos:start="37:15" pos:end="37:28">(<argument pos:start="37:16" pos:end="37:27"><expr pos:start="37:16" pos:end="37:27"><operator pos:start="37:16" pos:end="37:16">&amp;</operator><name pos:start="37:17" pos:end="37:27"><name pos:start="37:17" pos:end="37:21">spapr</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:27">phbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:48"><expr pos:start="41:5" pos:end="41:47"><name pos:start="41:5" pos:end="41:21">cpu_ppc_hypercall</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:47">emulate_spapr_hypercall</name></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:35">/* Allocate RMA if necessary */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:63"><expr pos:start="47:5" pos:end="47:62"><name pos:start="47:5" pos:end="47:18">rma_alloc_size</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <call pos:start="47:22" pos:end="47:62"><name pos:start="47:22" pos:end="47:37">kvmppc_alloc_rma</name><argument_list pos:start="47:38" pos:end="47:62">(<argument pos:start="47:39" pos:end="47:53"><expr pos:start="47:39" pos:end="47:53"><literal type="string" pos:start="47:39" pos:end="47:53">"ppc_spapr.rma"</literal></expr></argument>, <argument pos:start="47:56" pos:end="47:61"><expr pos:start="47:56" pos:end="47:61"><name pos:start="47:56" pos:end="47:61">sysmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:29">(<expr pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:22">rma_alloc_size</name> <operator pos:start="51:24" pos:end="51:25">==</operator> <operator pos:start="51:27" pos:end="51:27">-</operator><literal type="number" pos:start="51:28" pos:end="51:28">1</literal></expr>)</condition> <block pos:start="51:31" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:16">

        <expr_stmt pos:start="53:9" pos:end="53:49"><expr pos:start="53:9" pos:end="53:48"><call pos:start="53:9" pos:end="53:48"><name pos:start="53:9" pos:end="53:16">hw_error</name><argument_list pos:start="53:17" pos:end="53:48">(<argument pos:start="53:18" pos:end="53:47"><expr pos:start="53:18" pos:end="53:47"><literal type="string" pos:start="53:18" pos:end="53:47">"qemu: Unable to create RMA\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:16"><expr pos:start="55:9" pos:end="55:15"><call pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:12">exit</name><argument_list pos:start="55:13" pos:end="55:15">(<argument pos:start="55:14" pos:end="55:14"><expr pos:start="55:14" pos:end="55:14"><literal type="number" pos:start="55:14" pos:end="55:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:54">(<expr pos:start="59:9" pos:end="59:53"><name pos:start="59:9" pos:end="59:22">rma_alloc_size</name> <operator pos:start="59:24" pos:end="59:25">&amp;&amp;</operator> <operator pos:start="59:27" pos:end="59:27">(</operator><name pos:start="59:28" pos:end="59:41">rma_alloc_size</name> <operator pos:start="59:43" pos:end="59:43">&lt;</operator> <name pos:start="59:45" pos:end="59:52">ram_size</name><operator pos:start="59:53" pos:end="59:53">)</operator></expr>)</condition> <block pos:start="59:56" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:34">

        <expr_stmt pos:start="61:9" pos:end="61:34"><expr pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:16">rma_size</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:33">rma_alloc_size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="67:5">else <block pos:start="63:12" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:28">

        <expr_stmt pos:start="65:9" pos:end="65:28"><expr pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:16">rma_size</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:27">ram_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="75:59">/* We place the device tree just below either the top of the RMA,

     * or just below 2GB, whichever is lowere, so that it can be

     * processed with 32-bit real mode code if necessary */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:63"><expr pos:start="77:5" pos:end="77:62"><name pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:9">spapr</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:19">fdt_addr</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="77:47"><name pos:start="77:23" pos:end="77:25">MIN</name><argument_list pos:start="77:26" pos:end="77:47">(<argument pos:start="77:27" pos:end="77:34"><expr pos:start="77:27" pos:end="77:34"><name pos:start="77:27" pos:end="77:34">rma_size</name></expr></argument>, <argument pos:start="77:37" pos:end="77:46"><expr pos:start="77:37" pos:end="77:46"><literal type="number" pos:start="77:37" pos:end="77:46">0x80000000</literal></expr></argument>)</argument_list></call> <operator pos:start="77:49" pos:end="77:49">-</operator> <name pos:start="77:51" pos:end="77:62">FDT_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:55"><expr pos:start="79:5" pos:end="79:54"><name pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:9">spapr</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:20">rtas_addr</name></name> <operator pos:start="79:22" pos:end="79:22">=</operator> <name pos:start="79:24" pos:end="79:38"><name pos:start="79:24" pos:end="79:28">spapr</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:38">fdt_addr</name></name> <operator pos:start="79:40" pos:end="79:40">-</operator> <name pos:start="79:42" pos:end="79:54">RTAS_MAX_SIZE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:19">/* init CPUs */</comment>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:26">(<expr pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:17">cpu_model</name> <operator pos:start="85:19" pos:end="85:20">==</operator> <name pos:start="85:22" pos:end="85:25">NULL</name></expr>)</condition> <block pos:start="85:28" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:54">

        <expr_stmt pos:start="87:9" pos:end="87:54"><expr pos:start="87:9" pos:end="87:53"><name pos:start="87:9" pos:end="87:17">cpu_model</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <ternary pos:start="87:21" pos:end="87:53"><condition pos:start="87:21" pos:end="87:35"><expr pos:start="87:21" pos:end="87:33"><call pos:start="87:21" pos:end="87:33"><name pos:start="87:21" pos:end="87:31">kvm_enabled</name><argument_list pos:start="87:32" pos:end="87:33">()</argument_list></call></expr> ?</condition><then pos:start="87:37" pos:end="87:42"> <expr pos:start="87:37" pos:end="87:42"><literal type="string" pos:start="87:37" pos:end="87:42">"host"</literal></expr> </then><else pos:start="87:44" pos:end="87:53">: <expr pos:start="87:46" pos:end="87:53"><literal type="string" pos:start="87:46" pos:end="87:53">"POWER7"</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="91:5" pos:end="119:5">for <control pos:start="91:9" pos:end="91:34">(<init pos:start="91:10" pos:end="91:15"><expr pos:start="91:10" pos:end="91:14"><name pos:start="91:10" pos:end="91:10">i</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <literal type="number" pos:start="91:14" pos:end="91:14">0</literal></expr>;</init> <condition pos:start="91:17" pos:end="91:29"><expr pos:start="91:17" pos:end="91:28"><name pos:start="91:17" pos:end="91:17">i</name> <operator pos:start="91:19" pos:end="91:19">&lt;</operator> <name pos:start="91:21" pos:end="91:28">smp_cpus</name></expr>;</condition> <incr pos:start="91:31" pos:end="91:33"><expr pos:start="91:31" pos:end="91:33"><name pos:start="91:31" pos:end="91:31">i</name><operator pos:start="91:32" pos:end="91:33">++</operator></expr></incr>)</control> <block pos:start="91:36" pos:end="119:5">{<block_content pos:start="93:9" pos:end="117:37">

        <expr_stmt pos:start="93:9" pos:end="93:34"><expr pos:start="93:9" pos:end="93:33"><name pos:start="93:9" pos:end="93:11">env</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:33"><name pos:start="93:15" pos:end="93:22">cpu_init</name><argument_list pos:start="93:23" pos:end="93:33">(<argument pos:start="93:24" pos:end="93:32"><expr pos:start="93:24" pos:end="93:32"><name pos:start="93:24" pos:end="93:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:17">(<expr pos:start="97:13" pos:end="97:16"><operator pos:start="97:13" pos:end="97:13">!</operator><name pos:start="97:14" pos:end="97:16">env</name></expr>)</condition> <block pos:start="97:19" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:20">

            <expr_stmt pos:start="99:13" pos:end="99:71"><expr pos:start="99:13" pos:end="99:70"><call pos:start="99:13" pos:end="99:70"><name pos:start="99:13" pos:end="99:19">fprintf</name><argument_list pos:start="99:20" pos:end="99:70">(<argument pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:26">stderr</name></expr></argument>, <argument pos:start="99:29" pos:end="99:69"><expr pos:start="99:29" pos:end="99:69"><literal type="string" pos:start="99:29" pos:end="99:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:20"><expr pos:start="101:13" pos:end="101:19"><call pos:start="101:13" pos:end="101:19"><name pos:start="101:13" pos:end="101:16">exit</name><argument_list pos:start="101:17" pos:end="101:19">(<argument pos:start="101:18" pos:end="101:18"><expr pos:start="101:18" pos:end="101:18"><literal type="number" pos:start="101:18" pos:end="101:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="105:9" pos:end="105:48">/* Set time-base frequency to 512 MHz */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:44"><expr pos:start="107:9" pos:end="107:43"><call pos:start="107:9" pos:end="107:43"><name pos:start="107:9" pos:end="107:23">cpu_ppc_tb_init</name><argument_list pos:start="107:24" pos:end="107:43">(<argument pos:start="107:25" pos:end="107:27"><expr pos:start="107:25" pos:end="107:27"><name pos:start="107:25" pos:end="107:27">env</name></expr></argument>, <argument pos:start="107:30" pos:end="107:42"><expr pos:start="107:30" pos:end="107:42"><name pos:start="107:30" pos:end="107:42">TIMEBASE_FREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:65"><expr pos:start="109:9" pos:end="109:64"><call pos:start="109:9" pos:end="109:64"><name pos:start="109:9" pos:end="109:27">qemu_register_reset</name><argument_list pos:start="109:28" pos:end="109:64">(<argument pos:start="109:29" pos:end="109:58"><expr pos:start="109:29" pos:end="109:58"><operator pos:start="109:29" pos:end="109:29">(</operator><name pos:start="109:30" pos:end="109:45">QEMUResetHandler</name> <operator pos:start="109:47" pos:end="109:47">*</operator><operator pos:start="109:48" pos:end="109:48">)</operator><operator pos:start="109:49" pos:end="109:49">&amp;</operator><name pos:start="109:50" pos:end="109:58">cpu_reset</name></expr></argument>, <argument pos:start="109:61" pos:end="109:63"><expr pos:start="109:61" pos:end="109:63"><name pos:start="109:61" pos:end="109:63">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:34"><expr pos:start="113:9" pos:end="113:33"><name pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:11">env</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:26">hreset_vector</name></name> <operator pos:start="113:28" pos:end="113:28">=</operator> <literal type="number" pos:start="113:30" pos:end="113:33">0x60</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:36"><expr pos:start="115:9" pos:end="115:35"><name pos:start="115:9" pos:end="115:31"><name pos:start="115:9" pos:end="115:11">env</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:31">hreset_excp_prefix</name></name> <operator pos:start="115:33" pos:end="115:33">=</operator> <literal type="number" pos:start="115:35" pos:end="115:35">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:37"><expr pos:start="117:9" pos:end="117:36"><name pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:11">env</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:16">gpr</name><index pos:start="117:17" pos:end="117:19">[<expr pos:start="117:18" pos:end="117:18"><literal type="number" pos:start="117:18" pos:end="117:18">3</literal></expr>]</index></name> <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:36"><name pos:start="117:23" pos:end="117:25">env</name><operator pos:start="117:26" pos:end="117:27">-&gt;</operator><name pos:start="117:28" pos:end="117:36">cpu_index</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="123:5" pos:end="123:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:32"><expr pos:start="125:5" pos:end="125:31"><name pos:start="125:5" pos:end="125:20"><name pos:start="125:5" pos:end="125:9">spapr</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:20">ram_limit</name></name> <operator pos:start="125:22" pos:end="125:22">=</operator> <name pos:start="125:24" pos:end="125:31">ram_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="139:5"><if pos:start="127:5" pos:end="139:5">if <condition pos:start="127:8" pos:end="127:42">(<expr pos:start="127:9" pos:end="127:41"><name pos:start="127:9" pos:end="127:24"><name pos:start="127:9" pos:end="127:13">spapr</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:24">ram_limit</name></name> <operator pos:start="127:26" pos:end="127:26">&gt;</operator> <name pos:start="127:28" pos:end="127:41">rma_alloc_size</name></expr>)</condition> <block pos:start="127:44" pos:end="139:5">{<block_content pos:start="129:9" pos:end="137:62">

        <decl_stmt pos:start="129:9" pos:end="129:48"><decl pos:start="129:9" pos:end="129:47"><type pos:start="129:9" pos:end="129:18"><name pos:start="129:9" pos:end="129:18">ram_addr_t</name></type> <name pos:start="129:20" pos:end="129:30">nonrma_base</name> <init pos:start="129:32" pos:end="129:47">= <expr pos:start="129:34" pos:end="129:47"><name pos:start="129:34" pos:end="129:47">rma_alloc_size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="131:9" pos:end="131:67"><decl pos:start="131:9" pos:end="131:66"><type pos:start="131:9" pos:end="131:18"><name pos:start="131:9" pos:end="131:18">ram_addr_t</name></type> <name pos:start="131:20" pos:end="131:30">nonrma_size</name> <init pos:start="131:32" pos:end="131:66">= <expr pos:start="131:34" pos:end="131:66"><name pos:start="131:34" pos:end="131:49"><name pos:start="131:34" pos:end="131:38">spapr</name><operator pos:start="131:39" pos:end="131:40">-&gt;</operator><name pos:start="131:41" pos:end="131:49">ram_limit</name></name> <operator pos:start="131:51" pos:end="131:51">-</operator> <name pos:start="131:53" pos:end="131:66">rma_alloc_size</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:72"><expr pos:start="135:9" pos:end="135:71"><call pos:start="135:9" pos:end="135:71"><name pos:start="135:9" pos:end="135:30">memory_region_init_ram</name><argument_list pos:start="135:31" pos:end="135:71">(<argument pos:start="135:32" pos:end="135:34"><expr pos:start="135:32" pos:end="135:34"><name pos:start="135:32" pos:end="135:34">ram</name></expr></argument>, <argument pos:start="135:37" pos:end="135:40"><expr pos:start="135:37" pos:end="135:40"><name pos:start="135:37" pos:end="135:40">NULL</name></expr></argument>, <argument pos:start="135:43" pos:end="135:57"><expr pos:start="135:43" pos:end="135:57"><literal type="string" pos:start="135:43" pos:end="135:57">"ppc_spapr.ram"</literal></expr></argument>, <argument pos:start="135:60" pos:end="135:70"><expr pos:start="135:60" pos:end="135:70"><name pos:start="135:60" pos:end="135:70">nonrma_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:62"><expr pos:start="137:9" pos:end="137:61"><call pos:start="137:9" pos:end="137:61"><name pos:start="137:9" pos:end="137:35">memory_region_add_subregion</name><argument_list pos:start="137:36" pos:end="137:61">(<argument pos:start="137:37" pos:end="137:42"><expr pos:start="137:37" pos:end="137:42"><name pos:start="137:37" pos:end="137:42">sysmem</name></expr></argument>, <argument pos:start="137:45" pos:end="137:55"><expr pos:start="137:45" pos:end="137:55"><name pos:start="137:45" pos:end="137:55">nonrma_base</name></expr></argument>, <argument pos:start="137:58" pos:end="137:60"><expr pos:start="137:58" pos:end="137:60"><name pos:start="137:58" pos:end="137:60">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="143:5" pos:end="147:13">/* allocate hash page table.  For now we always make this 16mb,

     * later we should probably make it scale to the size of guest

     * RAM */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:48"><expr pos:start="149:5" pos:end="149:47"><name pos:start="149:5" pos:end="149:20"><name pos:start="149:5" pos:end="149:9">spapr</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:20">htab_size</name></name> <operator pos:start="149:22" pos:end="149:22">=</operator> <literal type="number" pos:start="149:24" pos:end="149:27">1ULL</literal> <operator pos:start="149:29" pos:end="149:30">&lt;&lt;</operator> <operator pos:start="149:32" pos:end="149:32">(</operator><name pos:start="149:33" pos:end="149:42">pteg_shift</name> <operator pos:start="149:44" pos:end="149:44">+</operator> <literal type="number" pos:start="149:46" pos:end="149:46">7</literal><operator pos:start="149:47" pos:end="149:47">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:68"><expr pos:start="151:5" pos:end="151:67"><name pos:start="151:5" pos:end="151:15"><name pos:start="151:5" pos:end="151:9">spapr</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:15">htab</name></name> <operator pos:start="151:17" pos:end="151:17">=</operator> <call pos:start="151:19" pos:end="151:67"><name pos:start="151:19" pos:end="151:31">qemu_memalign</name><argument_list pos:start="151:32" pos:end="151:67">(<argument pos:start="151:33" pos:end="151:48"><expr pos:start="151:33" pos:end="151:48"><name pos:start="151:33" pos:end="151:48"><name pos:start="151:33" pos:end="151:37">spapr</name><operator pos:start="151:38" pos:end="151:39">-&gt;</operator><name pos:start="151:40" pos:end="151:48">htab_size</name></name></expr></argument>, <argument pos:start="151:51" pos:end="151:66"><expr pos:start="151:51" pos:end="151:66"><name pos:start="151:51" pos:end="151:66"><name pos:start="151:51" pos:end="151:55">spapr</name><operator pos:start="151:56" pos:end="151:57">-&gt;</operator><name pos:start="151:58" pos:end="151:66">htab_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="155:5" pos:end="181:5">for <control pos:start="155:9" pos:end="155:59">(<init pos:start="155:10" pos:end="155:25"><expr pos:start="155:10" pos:end="155:24"><name pos:start="155:10" pos:end="155:12">env</name> <operator pos:start="155:14" pos:end="155:14">=</operator> <name pos:start="155:16" pos:end="155:24">first_cpu</name></expr>;</init> <condition pos:start="155:27" pos:end="155:38"><expr pos:start="155:27" pos:end="155:37"><name pos:start="155:27" pos:end="155:29">env</name> <operator pos:start="155:31" pos:end="155:32">!=</operator> <name pos:start="155:34" pos:end="155:37">NULL</name></expr>;</condition> <incr pos:start="155:40" pos:end="155:58"><expr pos:start="155:40" pos:end="155:58"><name pos:start="155:40" pos:end="155:42">env</name> <operator pos:start="155:44" pos:end="155:44">=</operator> <name pos:start="155:46" pos:end="155:58"><name pos:start="155:46" pos:end="155:48">env</name><operator pos:start="155:49" pos:end="155:50">-&gt;</operator><name pos:start="155:51" pos:end="155:58">next_cpu</name></name></expr></incr>)</control> <block pos:start="155:61" pos:end="181:5">{<block_content pos:start="157:9" pos:end="179:9">

        <expr_stmt pos:start="157:9" pos:end="157:41"><expr pos:start="157:9" pos:end="157:40"><name pos:start="157:9" pos:end="157:26"><name pos:start="157:9" pos:end="157:11">env</name><operator pos:start="157:12" pos:end="157:13">-&gt;</operator><name pos:start="157:14" pos:end="157:26">external_htab</name></name> <operator pos:start="157:28" pos:end="157:28">=</operator> <name pos:start="157:30" pos:end="157:40"><name pos:start="157:30" pos:end="157:34">spapr</name><operator pos:start="157:35" pos:end="157:36">-&gt;</operator><name pos:start="157:37" pos:end="157:40">htab</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:28"><expr pos:start="159:9" pos:end="159:27"><name pos:start="159:9" pos:end="159:22"><name pos:start="159:9" pos:end="159:11">env</name><operator pos:start="159:12" pos:end="159:13">-&gt;</operator><name pos:start="159:14" pos:end="159:22">htab_base</name></name> <operator pos:start="159:24" pos:end="159:24">=</operator> <operator pos:start="159:26" pos:end="159:26">-</operator><literal type="number" pos:start="159:27" pos:end="159:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:46"><expr pos:start="161:9" pos:end="161:45"><name pos:start="161:9" pos:end="161:22"><name pos:start="161:9" pos:end="161:11">env</name><operator pos:start="161:12" pos:end="161:13">-&gt;</operator><name pos:start="161:14" pos:end="161:22">htab_mask</name></name> <operator pos:start="161:24" pos:end="161:24">=</operator> <name pos:start="161:26" pos:end="161:41"><name pos:start="161:26" pos:end="161:30">spapr</name><operator pos:start="161:31" pos:end="161:32">-&gt;</operator><name pos:start="161:33" pos:end="161:41">htab_size</name></name> <operator pos:start="161:43" pos:end="161:43">-</operator> <literal type="number" pos:start="161:45" pos:end="161:45">1</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="165:9" pos:end="165:46">/* Tell KVM that we're in PAPR mode */</comment>

        <expr_stmt pos:start="167:9" pos:end="169:53"><expr pos:start="167:9" pos:end="169:52"><name pos:start="167:9" pos:end="167:26"><name pos:start="167:9" pos:end="167:11">env</name><operator pos:start="167:12" pos:end="167:13">-&gt;</operator><name pos:start="167:14" pos:end="167:16">spr</name><index pos:start="167:17" pos:end="167:26">[<expr pos:start="167:18" pos:end="167:25"><name pos:start="167:18" pos:end="167:25">SPR_SDR1</name></expr>]</index></name> <operator pos:start="167:28" pos:end="167:28">=</operator> <operator pos:start="167:30" pos:end="167:30">(</operator><name pos:start="167:31" pos:end="167:38">unsigned</name> <name pos:start="167:40" pos:end="167:43">long</name><operator pos:start="167:44" pos:end="167:44">)</operator><name pos:start="167:45" pos:end="167:55"><name pos:start="167:45" pos:end="167:49">spapr</name><operator pos:start="167:50" pos:end="167:51">-&gt;</operator><name pos:start="167:52" pos:end="167:55">htab</name></name> <operator pos:start="167:57" pos:end="167:57">|</operator>

                             <operator pos:start="169:30" pos:end="169:30">(</operator><operator pos:start="169:31" pos:end="169:31">(</operator><name pos:start="169:32" pos:end="169:41">pteg_shift</name> <operator pos:start="169:43" pos:end="169:43">+</operator> <literal type="number" pos:start="169:45" pos:end="169:45">7</literal><operator pos:start="169:46" pos:end="169:46">)</operator> <operator pos:start="169:48" pos:end="169:48">-</operator> <literal type="number" pos:start="169:50" pos:end="169:51">18</literal><operator pos:start="169:52" pos:end="169:52">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:31"><expr pos:start="171:9" pos:end="171:30"><name pos:start="171:9" pos:end="171:26"><name pos:start="171:9" pos:end="171:11">env</name><operator pos:start="171:12" pos:end="171:13">-&gt;</operator><name pos:start="171:14" pos:end="171:16">spr</name><index pos:start="171:17" pos:end="171:26">[<expr pos:start="171:18" pos:end="171:25"><name pos:start="171:18" pos:end="171:25">SPR_HIOR</name></expr>]</index></name> <operator pos:start="171:28" pos:end="171:28">=</operator> <literal type="number" pos:start="171:30" pos:end="171:30">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="175:9" pos:end="179:9"><if pos:start="175:9" pos:end="179:9">if <condition pos:start="175:12" pos:end="175:26">(<expr pos:start="175:13" pos:end="175:25"><call pos:start="175:13" pos:end="175:25"><name pos:start="175:13" pos:end="175:23">kvm_enabled</name><argument_list pos:start="175:24" pos:end="175:25">()</argument_list></call></expr>)</condition> <block pos:start="175:28" pos:end="179:9">{<block_content pos:start="177:13" pos:end="177:33">

            <expr_stmt pos:start="177:13" pos:end="177:33"><expr pos:start="177:13" pos:end="177:32"><call pos:start="177:13" pos:end="177:32"><name pos:start="177:13" pos:end="177:27">kvmppc_set_papr</name><argument_list pos:start="177:28" pos:end="177:32">(<argument pos:start="177:29" pos:end="177:31"><expr pos:start="177:29" pos:end="177:31"><name pos:start="177:29" pos:end="177:31">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="185:5" pos:end="185:69"><expr pos:start="185:5" pos:end="185:68"><name pos:start="185:5" pos:end="185:12">filename</name> <operator pos:start="185:14" pos:end="185:14">=</operator> <call pos:start="185:16" pos:end="185:68"><name pos:start="185:16" pos:end="185:29">qemu_find_file</name><argument_list pos:start="185:30" pos:end="185:68">(<argument pos:start="185:31" pos:end="185:49"><expr pos:start="185:31" pos:end="185:49"><name pos:start="185:31" pos:end="185:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="185:52" pos:end="185:67"><expr pos:start="185:52" pos:end="185:67"><literal type="string" pos:start="185:52" pos:end="185:67">"spapr-rtas.bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="189:72"><expr pos:start="187:5" pos:end="189:71"><name pos:start="187:5" pos:end="187:20"><name pos:start="187:5" pos:end="187:9">spapr</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:20">rtas_size</name></name> <operator pos:start="187:22" pos:end="187:22">=</operator> <call pos:start="187:24" pos:end="189:71"><name pos:start="187:24" pos:end="187:42">load_image_targphys</name><argument_list pos:start="187:43" pos:end="189:71">(<argument pos:start="187:44" pos:end="187:51"><expr pos:start="187:44" pos:end="187:51"><name pos:start="187:44" pos:end="187:51">filename</name></expr></argument>, <argument pos:start="187:54" pos:end="187:69"><expr pos:start="187:54" pos:end="187:69"><name pos:start="187:54" pos:end="187:69"><name pos:start="187:54" pos:end="187:58">spapr</name><operator pos:start="187:59" pos:end="187:60">-&gt;</operator><name pos:start="187:61" pos:end="187:69">rtas_addr</name></name></expr></argument>,

                                           <argument pos:start="189:44" pos:end="189:70"><expr pos:start="189:44" pos:end="189:70"><name pos:start="189:44" pos:end="189:51">ram_size</name> <operator pos:start="189:53" pos:end="189:53">-</operator> <name pos:start="189:55" pos:end="189:70"><name pos:start="189:55" pos:end="189:59">spapr</name><operator pos:start="189:60" pos:end="189:61">-&gt;</operator><name pos:start="189:62" pos:end="189:70">rtas_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="191:5" pos:end="197:5"><if pos:start="191:5" pos:end="197:5">if <condition pos:start="191:8" pos:end="191:29">(<expr pos:start="191:9" pos:end="191:28"><name pos:start="191:9" pos:end="191:24"><name pos:start="191:9" pos:end="191:13">spapr</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:24">rtas_size</name></name> <operator pos:start="191:26" pos:end="191:26">&lt;</operator> <literal type="number" pos:start="191:28" pos:end="191:28">0</literal></expr>)</condition> <block pos:start="191:31" pos:end="197:5">{<block_content pos:start="193:9" pos:end="195:16">

        <expr_stmt pos:start="193:9" pos:end="193:68"><expr pos:start="193:9" pos:end="193:67"><call pos:start="193:9" pos:end="193:67"><name pos:start="193:9" pos:end="193:16">hw_error</name><argument_list pos:start="193:17" pos:end="193:67">(<argument pos:start="193:18" pos:end="193:56"><expr pos:start="193:18" pos:end="193:56"><literal type="string" pos:start="193:18" pos:end="193:56">"qemu: could not load LPAR rtas '%s'\n"</literal></expr></argument>, <argument pos:start="193:59" pos:end="193:66"><expr pos:start="193:59" pos:end="193:66"><name pos:start="193:59" pos:end="193:66">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:16"><expr pos:start="195:9" pos:end="195:15"><call pos:start="195:9" pos:end="195:15"><name pos:start="195:9" pos:end="195:12">exit</name><argument_list pos:start="195:13" pos:end="195:15">(<argument pos:start="195:14" pos:end="195:14"><expr pos:start="195:14" pos:end="195:14"><literal type="number" pos:start="195:14" pos:end="195:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:21"><expr pos:start="199:5" pos:end="199:20"><call pos:start="199:5" pos:end="199:20"><name pos:start="199:5" pos:end="199:10">g_free</name><argument_list pos:start="199:11" pos:end="199:20">(<argument pos:start="199:12" pos:end="199:19"><expr pos:start="199:12" pos:end="199:19"><name pos:start="199:12" pos:end="199:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="203:5" pos:end="203:37">/* Set up Interrupt Controller */</comment>

    <expr_stmt pos:start="205:5" pos:end="205:45"><expr pos:start="205:5" pos:end="205:44"><name pos:start="205:5" pos:end="205:14"><name pos:start="205:5" pos:end="205:9">spapr</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:14">icp</name></name> <operator pos:start="205:16" pos:end="205:16">=</operator> <call pos:start="205:18" pos:end="205:44"><name pos:start="205:18" pos:end="205:33">xics_system_init</name><argument_list pos:start="205:34" pos:end="205:44">(<argument pos:start="205:35" pos:end="205:43"><expr pos:start="205:35" pos:end="205:43"><name pos:start="205:35" pos:end="205:43">XICS_IRQS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:25"><expr pos:start="207:5" pos:end="207:24"><name pos:start="207:5" pos:end="207:19"><name pos:start="207:5" pos:end="207:9">spapr</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:19">next_irq</name></name> <operator pos:start="207:21" pos:end="207:21">=</operator> <literal type="number" pos:start="207:23" pos:end="207:24">16</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:24">/* Set up VIO bus */</comment>

    <expr_stmt pos:start="213:5" pos:end="213:42"><expr pos:start="213:5" pos:end="213:41"><name pos:start="213:5" pos:end="213:18"><name pos:start="213:5" pos:end="213:9">spapr</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:18">vio_bus</name></name> <operator pos:start="213:20" pos:end="213:20">=</operator> <call pos:start="213:22" pos:end="213:41"><name pos:start="213:22" pos:end="213:39">spapr_vio_bus_init</name><argument_list pos:start="213:40" pos:end="213:41">()</argument_list></call></expr>;</expr_stmt>



    <for pos:start="217:5" pos:end="227:5">for <control pos:start="217:9" pos:end="217:42">(<init pos:start="217:10" pos:end="217:15"><expr pos:start="217:10" pos:end="217:14"><name pos:start="217:10" pos:end="217:10">i</name> <operator pos:start="217:12" pos:end="217:12">=</operator> <literal type="number" pos:start="217:14" pos:end="217:14">0</literal></expr>;</init> <condition pos:start="217:17" pos:end="217:37"><expr pos:start="217:17" pos:end="217:36"><name pos:start="217:17" pos:end="217:17">i</name> <operator pos:start="217:19" pos:end="217:19">&lt;</operator> <name pos:start="217:21" pos:end="217:36">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="217:39" pos:end="217:41"><expr pos:start="217:39" pos:end="217:41"><name pos:start="217:39" pos:end="217:39">i</name><operator pos:start="217:40" pos:end="217:41">++</operator></expr></incr>)</control> <block pos:start="217:44" pos:end="227:5">{<block_content pos:start="219:9" pos:end="225:9">

        <if_stmt pos:start="219:9" pos:end="225:9"><if pos:start="219:9" pos:end="225:9">if <condition pos:start="219:12" pos:end="219:26">(<expr pos:start="219:13" pos:end="219:25"><name pos:start="219:13" pos:end="219:25"><name pos:start="219:13" pos:end="219:22">serial_hds</name><index pos:start="219:23" pos:end="219:25">[<expr pos:start="219:24" pos:end="219:24"><name pos:start="219:24" pos:end="219:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="219:28" pos:end="225:9">{<block_content pos:start="221:13" pos:end="223:44">

            <expr_stmt pos:start="221:13" pos:end="223:44"><expr pos:start="221:13" pos:end="223:43"><call pos:start="221:13" pos:end="223:43"><name pos:start="221:13" pos:end="221:28">spapr_vty_create</name><argument_list pos:start="221:29" pos:end="223:43">(<argument pos:start="221:30" pos:end="221:43"><expr pos:start="221:30" pos:end="221:43"><name pos:start="221:30" pos:end="221:43"><name pos:start="221:30" pos:end="221:34">spapr</name><operator pos:start="221:35" pos:end="221:36">-&gt;</operator><name pos:start="221:37" pos:end="221:43">vio_bus</name></name></expr></argument>, <argument pos:start="221:46" pos:end="221:71"><expr pos:start="221:46" pos:end="221:71"><name pos:start="221:46" pos:end="221:67">SPAPR_VTY_BASE_ADDRESS</name> <operator pos:start="221:69" pos:end="221:69">+</operator> <name pos:start="221:71" pos:end="221:71">i</name></expr></argument>,

                             <argument pos:start="223:30" pos:end="223:42"><expr pos:start="223:30" pos:end="223:42"><name pos:start="223:30" pos:end="223:42"><name pos:start="223:30" pos:end="223:39">serial_hds</name><index pos:start="223:40" pos:end="223:42">[<expr pos:start="223:41" pos:end="223:41"><name pos:start="223:41" pos:end="223:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="231:5" pos:end="231:20">/* Set up PCI */</comment>

    <expr_stmt pos:start="233:5" pos:end="239:44"><expr pos:start="233:5" pos:end="239:43"><call pos:start="233:5" pos:end="239:43"><name pos:start="233:5" pos:end="233:20">spapr_create_phb</name><argument_list pos:start="233:21" pos:end="239:43">(<argument pos:start="233:22" pos:end="233:26"><expr pos:start="233:22" pos:end="233:26"><name pos:start="233:22" pos:end="233:26">spapr</name></expr></argument>, <argument pos:start="233:29" pos:end="233:33"><expr pos:start="233:29" pos:end="233:33"><literal type="string" pos:start="233:29" pos:end="233:33">"pci"</literal></expr></argument>, <argument pos:start="233:36" pos:end="233:49"><expr pos:start="233:36" pos:end="233:49"><name pos:start="233:36" pos:end="233:49">SPAPR_PCI_BUID</name></expr></argument>,

                     <argument pos:start="235:22" pos:end="235:43"><expr pos:start="235:22" pos:end="235:43"><name pos:start="235:22" pos:end="235:43">SPAPR_PCI_MEM_WIN_ADDR</name></expr></argument>,

                     <argument pos:start="237:22" pos:end="237:43"><expr pos:start="237:22" pos:end="237:43"><name pos:start="237:22" pos:end="237:43">SPAPR_PCI_MEM_WIN_SIZE</name></expr></argument>,

                     <argument pos:start="239:22" pos:end="239:42"><expr pos:start="239:22" pos:end="239:42"><name pos:start="239:22" pos:end="239:42">SPAPR_PCI_IO_WIN_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="243:5" pos:end="267:5">for <control pos:start="243:9" pos:end="243:33">(<init pos:start="243:10" pos:end="243:15"><expr pos:start="243:10" pos:end="243:14"><name pos:start="243:10" pos:end="243:10">i</name> <operator pos:start="243:12" pos:end="243:12">=</operator> <literal type="number" pos:start="243:14" pos:end="243:14">0</literal></expr>;</init> <condition pos:start="243:17" pos:end="243:28"><expr pos:start="243:17" pos:end="243:27"><name pos:start="243:17" pos:end="243:17">i</name> <operator pos:start="243:19" pos:end="243:19">&lt;</operator> <name pos:start="243:21" pos:end="243:27">nb_nics</name></expr>;</condition> <incr pos:start="243:30" pos:end="243:32"><expr pos:start="243:30" pos:end="243:32"><name pos:start="243:30" pos:end="243:30">i</name><operator pos:start="243:31" pos:end="243:32">++</operator></expr></incr>)</control> <block pos:start="243:35" pos:end="267:5">{<block_content pos:start="245:9" pos:end="265:9">

        <decl_stmt pos:start="245:9" pos:end="245:35"><decl pos:start="245:9" pos:end="245:34"><type pos:start="245:9" pos:end="245:17"><name pos:start="245:9" pos:end="245:15">NICInfo</name> <modifier pos:start="245:17" pos:end="245:17">*</modifier></type><name pos:start="245:18" pos:end="245:19">nd</name> <init pos:start="245:21" pos:end="245:34">= <expr pos:start="245:23" pos:end="245:34"><operator pos:start="245:23" pos:end="245:23">&amp;</operator><name pos:start="245:24" pos:end="245:34"><name pos:start="245:24" pos:end="245:31">nd_table</name><index pos:start="245:32" pos:end="245:34">[<expr pos:start="245:33" pos:end="245:33"><name pos:start="245:33" pos:end="245:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="249:9" pos:end="253:9"><if pos:start="249:9" pos:end="253:9">if <condition pos:start="249:12" pos:end="249:23">(<expr pos:start="249:13" pos:end="249:22"><operator pos:start="249:13" pos:end="249:13">!</operator><name pos:start="249:14" pos:end="249:22"><name pos:start="249:14" pos:end="249:15">nd</name><operator pos:start="249:16" pos:end="249:17">-&gt;</operator><name pos:start="249:18" pos:end="249:22">model</name></name></expr>)</condition> <block pos:start="249:25" pos:end="253:9">{<block_content pos:start="251:13" pos:end="251:44">

            <expr_stmt pos:start="251:13" pos:end="251:44"><expr pos:start="251:13" pos:end="251:43"><name pos:start="251:13" pos:end="251:21"><name pos:start="251:13" pos:end="251:14">nd</name><operator pos:start="251:15" pos:end="251:16">-&gt;</operator><name pos:start="251:17" pos:end="251:21">model</name></name> <operator pos:start="251:23" pos:end="251:23">=</operator> <call pos:start="251:25" pos:end="251:43"><name pos:start="251:25" pos:end="251:32">g_strdup</name><argument_list pos:start="251:33" pos:end="251:43">(<argument pos:start="251:34" pos:end="251:42"><expr pos:start="251:34" pos:end="251:42"><literal type="string" pos:start="251:34" pos:end="251:42">"ibmveth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="257:9" pos:end="265:9"><if pos:start="257:9" pos:end="261:9">if <condition pos:start="257:12" pos:end="257:46">(<expr pos:start="257:13" pos:end="257:45"><call pos:start="257:13" pos:end="257:40"><name pos:start="257:13" pos:end="257:18">strcmp</name><argument_list pos:start="257:19" pos:end="257:40">(<argument pos:start="257:20" pos:end="257:28"><expr pos:start="257:20" pos:end="257:28"><name pos:start="257:20" pos:end="257:28"><name pos:start="257:20" pos:end="257:21">nd</name><operator pos:start="257:22" pos:end="257:23">-&gt;</operator><name pos:start="257:24" pos:end="257:28">model</name></name></expr></argument>, <argument pos:start="257:31" pos:end="257:39"><expr pos:start="257:31" pos:end="257:39"><literal type="string" pos:start="257:31" pos:end="257:39">"ibmveth"</literal></expr></argument>)</argument_list></call> <operator pos:start="257:42" pos:end="257:43">==</operator> <literal type="number" pos:start="257:45" pos:end="257:45">0</literal></expr>)</condition> <block pos:start="257:48" pos:end="261:9">{<block_content pos:start="259:13" pos:end="259:62">

            <expr_stmt pos:start="259:13" pos:end="259:62"><expr pos:start="259:13" pos:end="259:61"><call pos:start="259:13" pos:end="259:61"><name pos:start="259:13" pos:end="259:29">spapr_vlan_create</name><argument_list pos:start="259:30" pos:end="259:61">(<argument pos:start="259:31" pos:end="259:44"><expr pos:start="259:31" pos:end="259:44"><name pos:start="259:31" pos:end="259:44"><name pos:start="259:31" pos:end="259:35">spapr</name><operator pos:start="259:36" pos:end="259:37">-&gt;</operator><name pos:start="259:38" pos:end="259:44">vio_bus</name></name></expr></argument>, <argument pos:start="259:47" pos:end="259:56"><expr pos:start="259:47" pos:end="259:56"><literal type="number" pos:start="259:47" pos:end="259:54">0x1000</literal> <operator pos:start="259:54" pos:end="259:54">+</operator> <name pos:start="259:56" pos:end="259:56">i</name></expr></argument>, <argument pos:start="259:59" pos:end="259:60"><expr pos:start="259:59" pos:end="259:60"><name pos:start="259:59" pos:end="259:60">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="261:11" pos:end="265:9">else <block pos:start="261:16" pos:end="265:9">{<block_content pos:start="263:13" pos:end="263:63">

            <expr_stmt pos:start="263:13" pos:end="263:63"><expr pos:start="263:13" pos:end="263:62"><call pos:start="263:13" pos:end="263:62"><name pos:start="263:13" pos:end="263:31">pci_nic_init_nofail</name><argument_list pos:start="263:32" pos:end="263:62">(<argument pos:start="263:33" pos:end="263:44"><expr pos:start="263:33" pos:end="263:44"><operator pos:start="263:33" pos:end="263:33">&amp;</operator><name pos:start="263:34" pos:end="263:44"><name pos:start="263:34" pos:end="263:41">nd_table</name><index pos:start="263:42" pos:end="263:44">[<expr pos:start="263:43" pos:end="263:43"><name pos:start="263:43" pos:end="263:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="263:47" pos:end="263:55"><expr pos:start="263:47" pos:end="263:55"><name pos:start="263:47" pos:end="263:55"><name pos:start="263:47" pos:end="263:48">nd</name><operator pos:start="263:49" pos:end="263:50">-&gt;</operator><name pos:start="263:51" pos:end="263:55">model</name></name></expr></argument>, <argument pos:start="263:58" pos:end="263:61"><expr pos:start="263:58" pos:end="263:61"><name pos:start="263:58" pos:end="263:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <for pos:start="271:5" pos:end="275:5">for <control pos:start="271:9" pos:end="271:53">(<init pos:start="271:10" pos:end="271:15"><expr pos:start="271:10" pos:end="271:14"><name pos:start="271:10" pos:end="271:10">i</name> <operator pos:start="271:12" pos:end="271:12">=</operator> <literal type="number" pos:start="271:14" pos:end="271:14">0</literal></expr>;</init> <condition pos:start="271:17" pos:end="271:48"><expr pos:start="271:17" pos:end="271:47"><name pos:start="271:17" pos:end="271:17">i</name> <operator pos:start="271:19" pos:end="271:20">&lt;=</operator> <call pos:start="271:22" pos:end="271:47"><name pos:start="271:22" pos:end="271:38">drive_get_max_bus</name><argument_list pos:start="271:39" pos:end="271:47">(<argument pos:start="271:40" pos:end="271:46"><expr pos:start="271:40" pos:end="271:46"><name pos:start="271:40" pos:end="271:46">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="271:50" pos:end="271:52"><expr pos:start="271:50" pos:end="271:52"><name pos:start="271:50" pos:end="271:50">i</name><operator pos:start="271:51" pos:end="271:52">++</operator></expr></incr>)</control> <block pos:start="271:55" pos:end="275:5">{<block_content pos:start="273:9" pos:end="273:55">

        <expr_stmt pos:start="273:9" pos:end="273:55"><expr pos:start="273:9" pos:end="273:54"><call pos:start="273:9" pos:end="273:54"><name pos:start="273:9" pos:end="273:26">spapr_vscsi_create</name><argument_list pos:start="273:27" pos:end="273:54">(<argument pos:start="273:28" pos:end="273:41"><expr pos:start="273:28" pos:end="273:41"><name pos:start="273:28" pos:end="273:41"><name pos:start="273:28" pos:end="273:32">spapr</name><operator pos:start="273:33" pos:end="273:34">-&gt;</operator><name pos:start="273:35" pos:end="273:41">vio_bus</name></name></expr></argument>, <argument pos:start="273:44" pos:end="273:53"><expr pos:start="273:44" pos:end="273:53"><literal type="number" pos:start="273:44" pos:end="273:51">0x2000</literal> <operator pos:start="273:51" pos:end="273:51">+</operator> <name pos:start="273:53" pos:end="273:53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="279:5" pos:end="387:5"><if pos:start="279:5" pos:end="343:5">if <condition pos:start="279:8" pos:end="279:24">(<expr pos:start="279:9" pos:end="279:23"><name pos:start="279:9" pos:end="279:23">kernel_filename</name></expr>)</condition> <block pos:start="279:26" pos:end="343:5">{<block_content pos:start="281:9" pos:end="341:46">

        <decl_stmt pos:start="281:9" pos:end="281:29"><decl pos:start="281:9" pos:end="281:28"><type pos:start="281:9" pos:end="281:16"><name pos:start="281:9" pos:end="281:16">uint64_t</name></type> <name pos:start="281:18" pos:end="281:24">lowaddr</name> <init pos:start="281:26" pos:end="281:28">= <expr pos:start="281:28" pos:end="281:28"><literal type="number" pos:start="281:28" pos:end="281:28">0</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="285:9" pos:end="287:72"><expr pos:start="285:9" pos:end="287:71"><name pos:start="285:9" pos:end="285:19">kernel_size</name> <operator pos:start="285:21" pos:end="285:21">=</operator> <call pos:start="285:23" pos:end="287:71"><name pos:start="285:23" pos:end="285:30">load_elf</name><argument_list pos:start="285:31" pos:end="287:71">(<argument pos:start="285:32" pos:end="285:46"><expr pos:start="285:32" pos:end="285:46"><name pos:start="285:32" pos:end="285:46">kernel_filename</name></expr></argument>, <argument pos:start="285:49" pos:end="285:72"><expr pos:start="285:49" pos:end="285:72"><name pos:start="285:49" pos:end="285:72">translate_kernel_address</name></expr></argument>, <argument pos:start="285:75" pos:end="285:78"><expr pos:start="285:75" pos:end="285:78"><name pos:start="285:75" pos:end="285:78">NULL</name></expr></argument>,

                               <argument pos:start="287:32" pos:end="287:35"><expr pos:start="287:32" pos:end="287:35"><name pos:start="287:32" pos:end="287:35">NULL</name></expr></argument>, <argument pos:start="287:38" pos:end="287:45"><expr pos:start="287:38" pos:end="287:45"><operator pos:start="287:38" pos:end="287:38">&amp;</operator><name pos:start="287:39" pos:end="287:45">lowaddr</name></expr></argument>, <argument pos:start="287:48" pos:end="287:51"><expr pos:start="287:48" pos:end="287:51"><name pos:start="287:48" pos:end="287:51">NULL</name></expr></argument>, <argument pos:start="287:54" pos:end="287:54"><expr pos:start="287:54" pos:end="287:54"><literal type="number" pos:start="287:54" pos:end="287:54">1</literal></expr></argument>, <argument pos:start="287:57" pos:end="287:67"><expr pos:start="287:57" pos:end="287:67"><name pos:start="287:57" pos:end="287:67">ELF_MACHINE</name></expr></argument>, <argument pos:start="287:70" pos:end="287:70"><expr pos:start="287:70" pos:end="287:70"><literal type="number" pos:start="287:70" pos:end="287:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="289:9" pos:end="297:9"><if pos:start="289:9" pos:end="297:9">if <condition pos:start="289:12" pos:end="289:28">(<expr pos:start="289:13" pos:end="289:27"><name pos:start="289:13" pos:end="289:23">kernel_size</name> <operator pos:start="289:25" pos:end="289:25">&lt;</operator> <literal type="number" pos:start="289:27" pos:end="289:27">0</literal></expr>)</condition> <block pos:start="289:30" pos:end="297:9">{<block_content pos:start="291:13" pos:end="295:75">

            <expr_stmt pos:start="291:13" pos:end="295:75"><expr pos:start="291:13" pos:end="295:74"><name pos:start="291:13" pos:end="291:23">kernel_size</name> <operator pos:start="291:25" pos:end="291:25">=</operator> <call pos:start="291:27" pos:end="295:74"><name pos:start="291:27" pos:end="291:45">load_image_targphys</name><argument_list pos:start="291:46" pos:end="295:74">(<argument pos:start="291:47" pos:end="291:61"><expr pos:start="291:47" pos:end="291:61"><name pos:start="291:47" pos:end="291:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="293:47" pos:end="293:62"><expr pos:start="293:47" pos:end="293:62"><name pos:start="293:47" pos:end="293:62">KERNEL_LOAD_ADDR</name></expr></argument>,

                                              <argument pos:start="295:47" pos:end="295:73"><expr pos:start="295:47" pos:end="295:73"><name pos:start="295:47" pos:end="295:54">ram_size</name> <operator pos:start="295:56" pos:end="295:56">-</operator> <name pos:start="295:58" pos:end="295:73">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="299:9" pos:end="307:9"><if pos:start="299:9" pos:end="307:9">if <condition pos:start="299:12" pos:end="299:28">(<expr pos:start="299:13" pos:end="299:27"><name pos:start="299:13" pos:end="299:23">kernel_size</name> <operator pos:start="299:25" pos:end="299:25">&lt;</operator> <literal type="number" pos:start="299:27" pos:end="299:27">0</literal></expr>)</condition> <block pos:start="299:30" pos:end="307:9">{<block_content pos:start="301:13" pos:end="305:20">

            <expr_stmt pos:start="301:13" pos:end="303:37"><expr pos:start="301:13" pos:end="303:36"><call pos:start="301:13" pos:end="303:36"><name pos:start="301:13" pos:end="301:19">fprintf</name><argument_list pos:start="301:20" pos:end="303:36">(<argument pos:start="301:21" pos:end="301:26"><expr pos:start="301:21" pos:end="301:26"><name pos:start="301:21" pos:end="301:26">stderr</name></expr></argument>, <argument pos:start="301:29" pos:end="301:64"><expr pos:start="301:29" pos:end="301:64"><literal type="string" pos:start="301:29" pos:end="301:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="303:21" pos:end="303:35"><expr pos:start="303:21" pos:end="303:35"><name pos:start="303:21" pos:end="303:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:20"><expr pos:start="305:13" pos:end="305:19"><call pos:start="305:13" pos:end="305:19"><name pos:start="305:13" pos:end="305:16">exit</name><argument_list pos:start="305:17" pos:end="305:19">(<argument pos:start="305:18" pos:end="305:18"><expr pos:start="305:18" pos:end="305:18"><literal type="number" pos:start="305:18" pos:end="305:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="311:9" pos:end="311:25">/* load initrd */</comment>

        <if_stmt pos:start="313:9" pos:end="337:9"><if pos:start="313:9" pos:end="331:9">if <condition pos:start="313:12" pos:end="313:28">(<expr pos:start="313:13" pos:end="313:27"><name pos:start="313:13" pos:end="313:27">initrd_filename</name></expr>)</condition> <block pos:start="313:30" pos:end="331:9">{<block_content pos:start="315:13" pos:end="329:13">

            <expr_stmt pos:start="315:13" pos:end="315:43"><expr pos:start="315:13" pos:end="315:42"><name pos:start="315:13" pos:end="315:23">initrd_base</name> <operator pos:start="315:25" pos:end="315:25">=</operator> <name pos:start="315:27" pos:end="315:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="319:70"><expr pos:start="317:13" pos:end="319:69"><name pos:start="317:13" pos:end="317:23">initrd_size</name> <operator pos:start="317:25" pos:end="317:25">=</operator> <call pos:start="317:27" pos:end="319:69"><name pos:start="317:27" pos:end="317:45">load_image_targphys</name><argument_list pos:start="317:46" pos:end="319:69">(<argument pos:start="317:47" pos:end="317:61"><expr pos:start="317:47" pos:end="317:61"><name pos:start="317:47" pos:end="317:61">initrd_filename</name></expr></argument>, <argument pos:start="317:64" pos:end="317:74"><expr pos:start="317:64" pos:end="317:74"><name pos:start="317:64" pos:end="317:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="319:47" pos:end="319:68"><expr pos:start="319:47" pos:end="319:68"><name pos:start="319:47" pos:end="319:54">ram_size</name> <operator pos:start="319:56" pos:end="319:56">-</operator> <name pos:start="319:58" pos:end="319:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="321:13" pos:end="329:13"><if pos:start="321:13" pos:end="329:13">if <condition pos:start="321:16" pos:end="321:32">(<expr pos:start="321:17" pos:end="321:31"><name pos:start="321:17" pos:end="321:27">initrd_size</name> <operator pos:start="321:29" pos:end="321:29">&lt;</operator> <literal type="number" pos:start="321:31" pos:end="321:31">0</literal></expr>)</condition> <block pos:start="321:34" pos:end="329:13">{<block_content pos:start="323:17" pos:end="327:24">

                <expr_stmt pos:start="323:17" pos:end="325:41"><expr pos:start="323:17" pos:end="325:40"><call pos:start="323:17" pos:end="325:40"><name pos:start="323:17" pos:end="323:23">fprintf</name><argument_list pos:start="323:24" pos:end="325:40">(<argument pos:start="323:25" pos:end="323:30"><expr pos:start="323:25" pos:end="323:30"><name pos:start="323:25" pos:end="323:30">stderr</name></expr></argument>, <argument pos:start="323:33" pos:end="323:78"><expr pos:start="323:33" pos:end="323:78"><literal type="string" pos:start="323:33" pos:end="323:78">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                        <argument pos:start="325:25" pos:end="325:39"><expr pos:start="325:25" pos:end="325:39"><name pos:start="325:25" pos:end="325:39">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="327:17" pos:end="327:24"><expr pos:start="327:17" pos:end="327:23"><call pos:start="327:17" pos:end="327:23"><name pos:start="327:17" pos:end="327:20">exit</name><argument_list pos:start="327:21" pos:end="327:23">(<argument pos:start="327:22" pos:end="327:22"><expr pos:start="327:22" pos:end="327:22"><literal type="number" pos:start="327:22" pos:end="327:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="331:11" pos:end="337:9">else <block pos:start="331:16" pos:end="337:9">{<block_content pos:start="333:13" pos:end="335:28">

            <expr_stmt pos:start="333:13" pos:end="333:28"><expr pos:start="333:13" pos:end="333:27"><name pos:start="333:13" pos:end="333:23">initrd_base</name> <operator pos:start="333:25" pos:end="333:25">=</operator> <literal type="number" pos:start="333:27" pos:end="333:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:28"><expr pos:start="335:13" pos:end="335:27"><name pos:start="335:13" pos:end="335:23">initrd_size</name> <operator pos:start="335:25" pos:end="335:25">=</operator> <literal type="number" pos:start="335:27" pos:end="335:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="341:9" pos:end="341:46"><expr pos:start="341:9" pos:end="341:45"><name pos:start="341:9" pos:end="341:26"><name pos:start="341:9" pos:end="341:13">spapr</name><operator pos:start="341:14" pos:end="341:15">-&gt;</operator><name pos:start="341:16" pos:end="341:26">entry_point</name></name> <operator pos:start="341:28" pos:end="341:28">=</operator> <name pos:start="341:30" pos:end="341:45">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="343:7" pos:end="387:5">else <block pos:start="343:12" pos:end="387:5">{<block_content pos:start="345:9" pos:end="385:9">

        <if_stmt pos:start="345:9" pos:end="353:9"><if pos:start="345:9" pos:end="353:9">if <condition pos:start="345:12" pos:end="345:44">(<expr pos:start="345:13" pos:end="345:43"><name pos:start="345:13" pos:end="345:20">ram_size</name> <operator pos:start="345:22" pos:end="345:22">&lt;</operator> <operator pos:start="345:24" pos:end="345:24">(</operator><name pos:start="345:25" pos:end="345:36">MIN_RAM_SLOF</name> <operator pos:start="345:38" pos:end="345:39">&lt;&lt;</operator> <literal type="number" pos:start="345:41" pos:end="345:42">20</literal><operator pos:start="345:43" pos:end="345:43">)</operator></expr>)</condition> <block pos:start="345:46" pos:end="353:9">{<block_content pos:start="347:13" pos:end="351:20">

            <expr_stmt pos:start="347:13" pos:end="349:54"><expr pos:start="347:13" pos:end="349:53"><call pos:start="347:13" pos:end="349:53"><name pos:start="347:13" pos:end="347:19">fprintf</name><argument_list pos:start="347:20" pos:end="349:53">(<argument pos:start="347:21" pos:end="347:26"><expr pos:start="347:21" pos:end="347:26"><name pos:start="347:21" pos:end="347:26">stderr</name></expr></argument>, <argument pos:start="347:29" pos:end="349:38"><expr pos:start="347:29" pos:end="349:38"><literal type="string" pos:start="347:29" pos:end="347:70">"qemu: pSeries SLOF firmware requires &gt;= "</literal>

                    <literal type="string" pos:start="349:21" pos:end="349:38">"%ldM guest RAM\n"</literal></expr></argument>, <argument pos:start="349:41" pos:end="349:52"><expr pos:start="349:41" pos:end="349:52"><name pos:start="349:41" pos:end="349:52">MIN_RAM_SLOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:20"><expr pos:start="351:13" pos:end="351:19"><call pos:start="351:13" pos:end="351:19"><name pos:start="351:13" pos:end="351:16">exit</name><argument_list pos:start="351:17" pos:end="351:19">(<argument pos:start="351:18" pos:end="351:18"><expr pos:start="351:18" pos:end="351:18"><literal type="number" pos:start="351:18" pos:end="351:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="355:9" pos:end="355:69"><expr pos:start="355:9" pos:end="355:68"><name pos:start="355:9" pos:end="355:16">filename</name> <operator pos:start="355:18" pos:end="355:18">=</operator> <call pos:start="355:20" pos:end="355:68"><name pos:start="355:20" pos:end="355:33">qemu_find_file</name><argument_list pos:start="355:34" pos:end="355:68">(<argument pos:start="355:35" pos:end="355:53"><expr pos:start="355:35" pos:end="355:53"><name pos:start="355:35" pos:end="355:53">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="355:56" pos:end="355:67"><expr pos:start="355:56" pos:end="355:67"><name pos:start="355:56" pos:end="355:67">FW_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="357:9" pos:end="357:64"><expr pos:start="357:9" pos:end="357:63"><name pos:start="357:9" pos:end="357:15">fw_size</name> <operator pos:start="357:17" pos:end="357:17">=</operator> <call pos:start="357:19" pos:end="357:63"><name pos:start="357:19" pos:end="357:37">load_image_targphys</name><argument_list pos:start="357:38" pos:end="357:63">(<argument pos:start="357:39" pos:end="357:46"><expr pos:start="357:39" pos:end="357:46"><name pos:start="357:39" pos:end="357:46">filename</name></expr></argument>, <argument pos:start="357:49" pos:end="357:49"><expr pos:start="357:49" pos:end="357:49"><literal type="number" pos:start="357:49" pos:end="357:49">0</literal></expr></argument>, <argument pos:start="357:52" pos:end="357:62"><expr pos:start="357:52" pos:end="357:62"><name pos:start="357:52" pos:end="357:62">FW_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="359:9" pos:end="365:9"><if pos:start="359:9" pos:end="365:9">if <condition pos:start="359:12" pos:end="359:24">(<expr pos:start="359:13" pos:end="359:23"><name pos:start="359:13" pos:end="359:19">fw_size</name> <operator pos:start="359:21" pos:end="359:21">&lt;</operator> <literal type="number" pos:start="359:23" pos:end="359:23">0</literal></expr>)</condition> <block pos:start="359:26" pos:end="365:9">{<block_content pos:start="361:13" pos:end="363:20">

            <expr_stmt pos:start="361:13" pos:end="361:72"><expr pos:start="361:13" pos:end="361:71"><call pos:start="361:13" pos:end="361:71"><name pos:start="361:13" pos:end="361:20">hw_error</name><argument_list pos:start="361:21" pos:end="361:71">(<argument pos:start="361:22" pos:end="361:60"><expr pos:start="361:22" pos:end="361:60"><literal type="string" pos:start="361:22" pos:end="361:60">"qemu: could not load LPAR rtas '%s'\n"</literal></expr></argument>, <argument pos:start="361:63" pos:end="361:70"><expr pos:start="361:63" pos:end="361:70"><name pos:start="361:63" pos:end="361:70">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="363:13" pos:end="363:20"><expr pos:start="363:13" pos:end="363:19"><call pos:start="363:13" pos:end="363:19"><name pos:start="363:13" pos:end="363:16">exit</name><argument_list pos:start="363:17" pos:end="363:19">(<argument pos:start="363:18" pos:end="363:18"><expr pos:start="363:18" pos:end="363:18"><literal type="number" pos:start="363:18" pos:end="363:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="367:9" pos:end="367:25"><expr pos:start="367:9" pos:end="367:24"><call pos:start="367:9" pos:end="367:24"><name pos:start="367:9" pos:end="367:14">g_free</name><argument_list pos:start="367:15" pos:end="367:24">(<argument pos:start="367:16" pos:end="367:23"><expr pos:start="367:16" pos:end="367:23"><name pos:start="367:16" pos:end="367:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:35"><expr pos:start="369:9" pos:end="369:34"><name pos:start="369:9" pos:end="369:26"><name pos:start="369:9" pos:end="369:13">spapr</name><operator pos:start="369:14" pos:end="369:15">-&gt;</operator><name pos:start="369:16" pos:end="369:26">entry_point</name></name> <operator pos:start="369:28" pos:end="369:28">=</operator> <literal type="number" pos:start="369:30" pos:end="369:34">0x100</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:24"><expr pos:start="371:9" pos:end="371:23"><name pos:start="371:9" pos:end="371:19">initrd_base</name> <operator pos:start="371:21" pos:end="371:21">=</operator> <literal type="number" pos:start="371:23" pos:end="371:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="373:9" pos:end="373:24"><expr pos:start="373:9" pos:end="373:23"><name pos:start="373:9" pos:end="373:19">initrd_size</name> <operator pos:start="373:21" pos:end="373:21">=</operator> <literal type="number" pos:start="373:23" pos:end="373:23">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="377:9" pos:end="379:57">/* SLOF will startup the secondary CPUs using RTAS,

           rather than expecting a kexec() style entry */</comment>

        <for pos:start="381:9" pos:end="385:9">for <control pos:start="381:13" pos:end="381:63">(<init pos:start="381:14" pos:end="381:29"><expr pos:start="381:14" pos:end="381:28"><name pos:start="381:14" pos:end="381:16">env</name> <operator pos:start="381:18" pos:end="381:18">=</operator> <name pos:start="381:20" pos:end="381:28">first_cpu</name></expr>;</init> <condition pos:start="381:31" pos:end="381:42"><expr pos:start="381:31" pos:end="381:41"><name pos:start="381:31" pos:end="381:33">env</name> <operator pos:start="381:35" pos:end="381:36">!=</operator> <name pos:start="381:38" pos:end="381:41">NULL</name></expr>;</condition> <incr pos:start="381:44" pos:end="381:62"><expr pos:start="381:44" pos:end="381:62"><name pos:start="381:44" pos:end="381:46">env</name> <operator pos:start="381:48" pos:end="381:48">=</operator> <name pos:start="381:50" pos:end="381:62"><name pos:start="381:50" pos:end="381:52">env</name><operator pos:start="381:53" pos:end="381:54">-&gt;</operator><name pos:start="381:55" pos:end="381:62">next_cpu</name></name></expr></incr>)</control> <block pos:start="381:65" pos:end="385:9">{<block_content pos:start="383:13" pos:end="383:28">

            <expr_stmt pos:start="383:13" pos:end="383:28"><expr pos:start="383:13" pos:end="383:27"><name pos:start="383:13" pos:end="383:23"><name pos:start="383:13" pos:end="383:15">env</name><operator pos:start="383:16" pos:end="383:17">-&gt;</operator><name pos:start="383:18" pos:end="383:23">halted</name></name> <operator pos:start="383:25" pos:end="383:25">=</operator> <literal type="number" pos:start="383:27" pos:end="383:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="391:5" pos:end="391:33">/* Prepare the device tree */</comment>

    <expr_stmt pos:start="393:5" pos:end="399:60"><expr pos:start="393:5" pos:end="399:59"><name pos:start="393:5" pos:end="393:19"><name pos:start="393:5" pos:end="393:9">spapr</name><operator pos:start="393:10" pos:end="393:11">-&gt;</operator><name pos:start="393:12" pos:end="393:19">fdt_skel</name></name> <operator pos:start="393:21" pos:end="393:21">=</operator> <call pos:start="393:23" pos:end="399:59"><name pos:start="393:23" pos:end="393:43">spapr_create_fdt_skel</name><argument_list pos:start="393:44" pos:end="399:59">(<argument pos:start="393:45" pos:end="393:53"><expr pos:start="393:45" pos:end="393:53"><name pos:start="393:45" pos:end="393:53">cpu_model</name></expr></argument>, <argument pos:start="393:56" pos:end="393:63"><expr pos:start="393:56" pos:end="393:63"><name pos:start="393:56" pos:end="393:63">rma_size</name></expr></argument>,

                                            <argument pos:start="395:45" pos:end="395:55"><expr pos:start="395:45" pos:end="395:55"><name pos:start="395:45" pos:end="395:55">initrd_base</name></expr></argument>, <argument pos:start="395:58" pos:end="395:68"><expr pos:start="395:58" pos:end="395:68"><name pos:start="395:58" pos:end="395:68">initrd_size</name></expr></argument>,

                                            <argument pos:start="397:45" pos:end="397:55"><expr pos:start="397:45" pos:end="397:55"><name pos:start="397:45" pos:end="397:55">boot_device</name></expr></argument>, <argument pos:start="397:58" pos:end="397:71"><expr pos:start="397:58" pos:end="397:71"><name pos:start="397:58" pos:end="397:71">kernel_cmdline</name></expr></argument>,

                                            <argument pos:start="399:45" pos:end="399:58"><expr pos:start="399:45" pos:end="399:58"><name pos:start="399:45" pos:end="399:54">pteg_shift</name> <operator pos:start="399:56" pos:end="399:56">+</operator> <literal type="number" pos:start="399:58" pos:end="399:58">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:36"><expr pos:start="401:5" pos:end="401:35"><call pos:start="401:5" pos:end="401:35"><name pos:start="401:5" pos:end="401:10">assert</name><argument_list pos:start="401:11" pos:end="401:35">(<argument pos:start="401:12" pos:end="401:34"><expr pos:start="401:12" pos:end="401:34"><name pos:start="401:12" pos:end="401:26"><name pos:start="401:12" pos:end="401:16">spapr</name><operator pos:start="401:17" pos:end="401:18">-&gt;</operator><name pos:start="401:19" pos:end="401:26">fdt_skel</name></name> <operator pos:start="401:28" pos:end="401:29">!=</operator> <name pos:start="401:31" pos:end="401:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="405:5" pos:end="405:44"><expr pos:start="405:5" pos:end="405:43"><call pos:start="405:5" pos:end="405:43"><name pos:start="405:5" pos:end="405:23">qemu_register_reset</name><argument_list pos:start="405:24" pos:end="405:43">(<argument pos:start="405:25" pos:end="405:35"><expr pos:start="405:25" pos:end="405:35"><name pos:start="405:25" pos:end="405:35">spapr_reset</name></expr></argument>, <argument pos:start="405:38" pos:end="405:42"><expr pos:start="405:38" pos:end="405:42"><name pos:start="405:38" pos:end="405:42">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
