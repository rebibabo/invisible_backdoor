<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26802.c" pos:tabs="8"><function pos:start="1:1" pos:end="255:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">do_interrupt64</name><parameter_list pos:start="1:27" pos:end="3:76">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:38">CPUX86State</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">env</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:54"><decl pos:start="1:46" pos:end="1:54"><type pos:start="1:46" pos:end="1:54"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:54">intno</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:66"><decl pos:start="1:57" pos:end="1:66"><type pos:start="1:57" pos:end="1:66"><name pos:start="1:57" pos:end="1:59">int</name></type> <name pos:start="1:61" pos:end="1:66">is_int</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:41"><decl pos:start="3:28" pos:end="3:41"><type pos:start="3:28" pos:end="3:41"><name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:41">error_code</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:64"><decl pos:start="3:44" pos:end="3:64"><type pos:start="3:44" pos:end="3:64"><name pos:start="3:44" pos:end="3:55">target_ulong</name></type> <name pos:start="3:57" pos:end="3:64">next_eip</name></decl></parameter>, <parameter pos:start="3:67" pos:end="3:75"><decl pos:start="3:67" pos:end="3:75"><type pos:start="3:67" pos:end="3:75"><name pos:start="3:67" pos:end="3:69">int</name></type> <name pos:start="3:71" pos:end="3:75">is_hw</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="255:1">{<block_content pos:start="7:5" pos:end="253:22">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">SegmentCache</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">dt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:20">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">type</name></decl>, <decl pos:start="11:15" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:17">dpl</name></decl>, <decl pos:start="11:20" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:27">selector</name></decl>, <decl pos:start="11:30" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:30" pos:end="11:32">cpl</name></decl>, <decl pos:start="11:35" pos:end="11:37"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:35" pos:end="11:37">ist</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:22">has_error_code</name></decl>, <decl pos:start="13:25" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:25" pos:end="13:33">new_stack</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:15">e1</name></decl>, <decl pos:start="15:18" pos:end="15:19"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:18" pos:end="15:19">e2</name></decl>, <decl pos:start="15:22" pos:end="15:23"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:22" pos:end="15:23">e3</name></decl>, <decl pos:start="15:26" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:26" pos:end="15:27">ss</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">target_ulong</name></type> <name pos:start="17:18" pos:end="17:24">old_eip</name></decl>, <decl pos:start="17:27" pos:end="17:29"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:27" pos:end="17:29">esp</name></decl>, <decl pos:start="17:32" pos:end="17:37"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:32" pos:end="17:37">offset</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:23"><expr pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:18">has_error_code</name> <operator pos:start="21:20" pos:end="21:20">=</operator> <literal type="number" pos:start="21:22" pos:end="21:22">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:26">(<expr pos:start="23:9" pos:end="23:25"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:15">is_int</name> <operator pos:start="23:17" pos:end="23:18">&amp;&amp;</operator> <operator pos:start="23:20" pos:end="23:20">!</operator><name pos:start="23:21" pos:end="23:25">is_hw</name></expr>)</condition> <block pos:start="23:28" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:57">

        <expr_stmt pos:start="25:9" pos:end="25:57"><expr pos:start="25:9" pos:end="25:56"><name pos:start="25:9" pos:end="25:22">has_error_code</name> <operator pos:start="25:24" pos:end="25:24">=</operator> <call pos:start="25:26" pos:end="25:56"><name pos:start="25:26" pos:end="25:49">exception_has_error_code</name><argument_list pos:start="25:50" pos:end="25:56">(<argument pos:start="25:51" pos:end="25:55"><expr pos:start="25:51" pos:end="25:55"><name pos:start="25:51" pos:end="25:55">intno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:15">(<expr pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:14">is_int</name></expr>)</condition> <block pos:start="29:17" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:27">

        <expr_stmt pos:start="31:9" pos:end="31:27"><expr pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:15">old_eip</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <name pos:start="31:19" pos:end="31:26">next_eip</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="37:5">else <block pos:start="33:12" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:27">

        <expr_stmt pos:start="35:9" pos:end="35:27"><expr pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:15">old_eip</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:26"><name pos:start="35:19" pos:end="35:21">env</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:26">eip</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:19"><expr pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:6">dt</name> <operator pos:start="41:8" pos:end="41:8">=</operator> <operator pos:start="41:10" pos:end="41:10">&amp;</operator><name pos:start="41:11" pos:end="41:18"><name pos:start="41:11" pos:end="41:13">env</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:18">idt</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:36">(<expr pos:start="43:9" pos:end="43:35"><name pos:start="43:9" pos:end="43:13">intno</name> <operator pos:start="43:15" pos:end="43:15">*</operator> <literal type="number" pos:start="43:17" pos:end="43:20">16</literal> <operator pos:start="43:20" pos:end="43:20">+</operator> <literal type="number" pos:start="43:22" pos:end="43:23">15</literal> <operator pos:start="43:25" pos:end="43:25">&gt;</operator> <name pos:start="43:27" pos:end="43:35"><name pos:start="43:27" pos:end="43:28">dt</name><operator pos:start="43:29" pos:end="43:30">-&gt;</operator><name pos:start="43:31" pos:end="43:35">limit</name></name></expr>)</condition> <block pos:start="43:38" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:61">

        <expr_stmt pos:start="45:9" pos:end="45:61"><expr pos:start="45:9" pos:end="45:60"><call pos:start="45:9" pos:end="45:60"><name pos:start="45:9" pos:end="45:27">raise_exception_err</name><argument_list pos:start="45:28" pos:end="45:60">(<argument pos:start="45:29" pos:end="45:31"><expr pos:start="45:29" pos:end="45:31"><name pos:start="45:29" pos:end="45:31">env</name></expr></argument>, <argument pos:start="45:34" pos:end="45:43"><expr pos:start="45:34" pos:end="45:43"><name pos:start="45:34" pos:end="45:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="45:46" pos:end="45:59"><expr pos:start="45:46" pos:end="45:59"><name pos:start="45:46" pos:end="45:50">intno</name> <operator pos:start="45:52" pos:end="45:52">*</operator> <literal type="number" pos:start="45:54" pos:end="45:57">16</literal> <operator pos:start="45:57" pos:end="45:57">+</operator> <literal type="number" pos:start="45:59" pos:end="45:59">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:32"><expr pos:start="49:5" pos:end="49:31"><name pos:start="49:5" pos:end="49:7">ptr</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <name pos:start="49:11" pos:end="49:18"><name pos:start="49:11" pos:end="49:12">dt</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:18">base</name></name> <operator pos:start="49:20" pos:end="49:20">+</operator> <name pos:start="49:22" pos:end="49:26">intno</name> <operator pos:start="49:28" pos:end="49:28">*</operator> <literal type="number" pos:start="49:30" pos:end="49:31">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:34"><expr pos:start="51:5" pos:end="51:33"><name pos:start="51:5" pos:end="51:6">e1</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <call pos:start="51:10" pos:end="51:33"><name pos:start="51:10" pos:end="51:23">cpu_ldl_kernel</name><argument_list pos:start="51:24" pos:end="51:33">(<argument pos:start="51:25" pos:end="51:27"><expr pos:start="51:25" pos:end="51:27"><name pos:start="51:25" pos:end="51:27">env</name></expr></argument>, <argument pos:start="51:30" pos:end="51:32"><expr pos:start="51:30" pos:end="51:32"><name pos:start="51:30" pos:end="51:32">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:38"><expr pos:start="53:5" pos:end="53:37"><name pos:start="53:5" pos:end="53:6">e2</name> <operator pos:start="53:8" pos:end="53:8">=</operator> <call pos:start="53:10" pos:end="53:37"><name pos:start="53:10" pos:end="53:23">cpu_ldl_kernel</name><argument_list pos:start="53:24" pos:end="53:37">(<argument pos:start="53:25" pos:end="53:27"><expr pos:start="53:25" pos:end="53:27"><name pos:start="53:25" pos:end="53:27">env</name></expr></argument>, <argument pos:start="53:30" pos:end="53:36"><expr pos:start="53:30" pos:end="53:36"><name pos:start="53:30" pos:end="53:32">ptr</name> <operator pos:start="53:34" pos:end="53:34">+</operator> <literal type="number" pos:start="53:36" pos:end="53:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:38"><expr pos:start="55:5" pos:end="55:37"><name pos:start="55:5" pos:end="55:6">e3</name> <operator pos:start="55:8" pos:end="55:8">=</operator> <call pos:start="55:10" pos:end="55:37"><name pos:start="55:10" pos:end="55:23">cpu_ldl_kernel</name><argument_list pos:start="55:24" pos:end="55:37">(<argument pos:start="55:25" pos:end="55:27"><expr pos:start="55:25" pos:end="55:27"><name pos:start="55:25" pos:end="55:27">env</name></expr></argument>, <argument pos:start="55:30" pos:end="55:36"><expr pos:start="55:30" pos:end="55:36"><name pos:start="55:30" pos:end="55:32">ptr</name> <operator pos:start="55:34" pos:end="55:34">+</operator> <literal type="number" pos:start="55:36" pos:end="55:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="57:5" pos:end="57:25">/* check gate type */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:42"><expr pos:start="59:5" pos:end="59:41"><name pos:start="59:5" pos:end="59:8">type</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <operator pos:start="59:12" pos:end="59:12">(</operator><name pos:start="59:13" pos:end="59:14">e2</name> <operator pos:start="59:16" pos:end="59:17">&gt;&gt;</operator> <name pos:start="59:19" pos:end="59:33">DESC_TYPE_SHIFT</name><operator pos:start="59:34" pos:end="59:34">)</operator> <operator pos:start="59:36" pos:end="59:36">&amp;</operator> <literal type="number" pos:start="59:38" pos:end="59:41">0x1f</literal></expr>;</expr_stmt>

    <switch pos:start="61:5" pos:end="75:5">switch <condition pos:start="61:12" pos:end="61:17">(<expr pos:start="61:13" pos:end="61:16"><name pos:start="61:13" pos:end="61:16">type</name></expr>)</condition> <block pos:start="61:19" pos:end="75:5">{<block_content pos:start="63:5" pos:end="73:14">

    <case pos:start="63:5" pos:end="63:12">case <expr pos:start="63:10" pos:end="63:11"><literal type="number" pos:start="63:10" pos:end="63:11">14</literal></expr>:</case> <comment type="block" pos:start="63:14" pos:end="63:37">/* 386 interrupt gate */</comment>

    <case pos:start="65:5" pos:end="65:12">case <expr pos:start="65:10" pos:end="65:11"><literal type="number" pos:start="65:10" pos:end="65:11">15</literal></expr>:</case> <comment type="block" pos:start="65:14" pos:end="65:32">/* 386 trap gate */</comment>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <default pos:start="69:5" pos:end="69:12">default:</default>

        <expr_stmt pos:start="71:9" pos:end="71:61"><expr pos:start="71:9" pos:end="71:60"><call pos:start="71:9" pos:end="71:60"><name pos:start="71:9" pos:end="71:27">raise_exception_err</name><argument_list pos:start="71:28" pos:end="71:60">(<argument pos:start="71:29" pos:end="71:31"><expr pos:start="71:29" pos:end="71:31"><name pos:start="71:29" pos:end="71:31">env</name></expr></argument>, <argument pos:start="71:34" pos:end="71:43"><expr pos:start="71:34" pos:end="71:43"><name pos:start="71:34" pos:end="71:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="71:46" pos:end="71:59"><expr pos:start="71:46" pos:end="71:59"><name pos:start="71:46" pos:end="71:50">intno</name> <operator pos:start="71:52" pos:end="71:52">*</operator> <literal type="number" pos:start="71:54" pos:end="71:57">16</literal> <operator pos:start="71:57" pos:end="71:57">+</operator> <literal type="number" pos:start="71:59" pos:end="71:59">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="77:5" pos:end="77:37"><expr pos:start="77:5" pos:end="77:36"><name pos:start="77:5" pos:end="77:7">dpl</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <operator pos:start="77:11" pos:end="77:11">(</operator><name pos:start="77:12" pos:end="77:13">e2</name> <operator pos:start="77:15" pos:end="77:16">&gt;&gt;</operator> <name pos:start="77:18" pos:end="77:31">DESC_DPL_SHIFT</name><operator pos:start="77:32" pos:end="77:32">)</operator> <operator pos:start="77:34" pos:end="77:34">&amp;</operator> <literal type="number" pos:start="77:36" pos:end="77:36">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:36"><expr pos:start="79:5" pos:end="79:35"><name pos:start="79:5" pos:end="79:7">cpl</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <name pos:start="79:11" pos:end="79:21"><name pos:start="79:11" pos:end="79:13">env</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:21">hflags</name></name> <operator pos:start="79:23" pos:end="79:23">&amp;</operator> <name pos:start="79:25" pos:end="79:35">HF_CPL_MASK</name></expr>;</expr_stmt>

    <comment type="block" pos:start="81:5" pos:end="81:41">/* check privilege if software int */</comment>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:28">(<expr pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:14">is_int</name> <operator pos:start="83:16" pos:end="83:17">&amp;&amp;</operator> <name pos:start="83:19" pos:end="83:21">dpl</name> <operator pos:start="83:23" pos:end="83:23">&lt;</operator> <name pos:start="83:25" pos:end="83:27">cpl</name></expr>)</condition> <block pos:start="83:30" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:61">

        <expr_stmt pos:start="85:9" pos:end="85:61"><expr pos:start="85:9" pos:end="85:60"><call pos:start="85:9" pos:end="85:60"><name pos:start="85:9" pos:end="85:27">raise_exception_err</name><argument_list pos:start="85:28" pos:end="85:60">(<argument pos:start="85:29" pos:end="85:31"><expr pos:start="85:29" pos:end="85:31"><name pos:start="85:29" pos:end="85:31">env</name></expr></argument>, <argument pos:start="85:34" pos:end="85:43"><expr pos:start="85:34" pos:end="85:43"><name pos:start="85:34" pos:end="85:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="85:46" pos:end="85:59"><expr pos:start="85:46" pos:end="85:59"><name pos:start="85:46" pos:end="85:50">intno</name> <operator pos:start="85:52" pos:end="85:52">*</operator> <literal type="number" pos:start="85:54" pos:end="85:57">16</literal> <operator pos:start="85:57" pos:end="85:57">+</operator> <literal type="number" pos:start="85:59" pos:end="85:59">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="89:5" pos:end="89:25">/* check valid bit */</comment>

    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:28">(<expr pos:start="91:9" pos:end="91:27"><operator pos:start="91:9" pos:end="91:9">!</operator><operator pos:start="91:10" pos:end="91:10">(</operator><name pos:start="91:11" pos:end="91:12">e2</name> <operator pos:start="91:14" pos:end="91:14">&amp;</operator> <name pos:start="91:16" pos:end="91:26">DESC_P_MASK</name><operator pos:start="91:27" pos:end="91:27">)</operator></expr>)</condition> <block pos:start="91:30" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:63">

        <expr_stmt pos:start="93:9" pos:end="93:63"><expr pos:start="93:9" pos:end="93:62"><call pos:start="93:9" pos:end="93:62"><name pos:start="93:9" pos:end="93:27">raise_exception_err</name><argument_list pos:start="93:28" pos:end="93:62">(<argument pos:start="93:29" pos:end="93:31"><expr pos:start="93:29" pos:end="93:31"><name pos:start="93:29" pos:end="93:31">env</name></expr></argument>, <argument pos:start="93:34" pos:end="93:45"><expr pos:start="93:34" pos:end="93:45"><name pos:start="93:34" pos:end="93:45">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="93:48" pos:end="93:61"><expr pos:start="93:48" pos:end="93:61"><name pos:start="93:48" pos:end="93:52">intno</name> <operator pos:start="93:54" pos:end="93:54">*</operator> <literal type="number" pos:start="93:56" pos:end="93:59">16</literal> <operator pos:start="93:59" pos:end="93:59">+</operator> <literal type="number" pos:start="93:61" pos:end="93:61">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:24"><expr pos:start="97:5" pos:end="97:23"><name pos:start="97:5" pos:end="97:12">selector</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <name pos:start="97:16" pos:end="97:17">e1</name> <operator pos:start="97:19" pos:end="97:20">&gt;&gt;</operator> <literal type="number" pos:start="97:22" pos:end="97:23">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:78"><expr pos:start="99:5" pos:end="99:77"><name pos:start="99:5" pos:end="99:10">offset</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <operator pos:start="99:14" pos:end="99:14">(</operator><operator pos:start="99:15" pos:end="99:15">(</operator><name pos:start="99:16" pos:end="99:27">target_ulong</name><operator pos:start="99:28" pos:end="99:28">)</operator><name pos:start="99:29" pos:end="99:30">e3</name> <operator pos:start="99:32" pos:end="99:33">&lt;&lt;</operator> <literal type="number" pos:start="99:35" pos:end="99:36">32</literal><operator pos:start="99:37" pos:end="99:37">)</operator> <operator pos:start="99:39" pos:end="99:39">|</operator> <operator pos:start="99:41" pos:end="99:41">(</operator><name pos:start="99:42" pos:end="99:43">e2</name> <operator pos:start="99:45" pos:end="99:45">&amp;</operator> <literal type="number" pos:start="99:47" pos:end="99:56">0xffff0000</literal><operator pos:start="99:57" pos:end="99:57">)</operator> <operator pos:start="99:59" pos:end="99:59">|</operator> <operator pos:start="99:61" pos:end="99:61">(</operator><name pos:start="99:62" pos:end="99:63">e1</name> <operator pos:start="99:65" pos:end="99:65">&amp;</operator> <literal type="number" pos:start="99:67" pos:end="99:76">0x0000ffff</literal><operator pos:start="99:77" pos:end="99:77">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:17"><expr pos:start="101:5" pos:end="101:16"><name pos:start="101:5" pos:end="101:7">ist</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <name pos:start="101:11" pos:end="101:12">e2</name> <operator pos:start="101:14" pos:end="101:14">&amp;</operator> <literal type="number" pos:start="101:16" pos:end="101:16">7</literal></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="107:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:33">(<expr pos:start="103:9" pos:end="103:32"><operator pos:start="103:9" pos:end="103:9">(</operator><name pos:start="103:10" pos:end="103:17">selector</name> <operator pos:start="103:19" pos:end="103:19">&amp;</operator> <literal type="number" pos:start="103:21" pos:end="103:26">0xfffc</literal><operator pos:start="103:27" pos:end="103:27">)</operator> <operator pos:start="103:29" pos:end="103:30">==</operator> <literal type="number" pos:start="103:32" pos:end="103:32">0</literal></expr>)</condition> <block pos:start="103:35" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:48">

        <expr_stmt pos:start="105:9" pos:end="105:48"><expr pos:start="105:9" pos:end="105:47"><call pos:start="105:9" pos:end="105:47"><name pos:start="105:9" pos:end="105:27">raise_exception_err</name><argument_list pos:start="105:28" pos:end="105:47">(<argument pos:start="105:29" pos:end="105:31"><expr pos:start="105:29" pos:end="105:31"><name pos:start="105:29" pos:end="105:31">env</name></expr></argument>, <argument pos:start="105:34" pos:end="105:43"><expr pos:start="105:34" pos:end="105:43"><name pos:start="105:34" pos:end="105:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="105:46" pos:end="105:46"><expr pos:start="105:46" pos:end="105:46"><literal type="number" pos:start="105:46" pos:end="105:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:51">(<expr pos:start="111:9" pos:end="111:50"><call pos:start="111:9" pos:end="111:45"><name pos:start="111:9" pos:end="111:20">load_segment</name><argument_list pos:start="111:21" pos:end="111:45">(<argument pos:start="111:22" pos:end="111:24"><expr pos:start="111:22" pos:end="111:24"><name pos:start="111:22" pos:end="111:24">env</name></expr></argument>, <argument pos:start="111:27" pos:end="111:29"><expr pos:start="111:27" pos:end="111:29"><operator pos:start="111:27" pos:end="111:27">&amp;</operator><name pos:start="111:28" pos:end="111:29">e1</name></expr></argument>, <argument pos:start="111:32" pos:end="111:34"><expr pos:start="111:32" pos:end="111:34"><operator pos:start="111:32" pos:end="111:32">&amp;</operator><name pos:start="111:33" pos:end="111:34">e2</name></expr></argument>, <argument pos:start="111:37" pos:end="111:44"><expr pos:start="111:37" pos:end="111:44"><name pos:start="111:37" pos:end="111:44">selector</name></expr></argument>)</argument_list></call> <operator pos:start="111:47" pos:end="111:48">!=</operator> <literal type="number" pos:start="111:50" pos:end="111:50">0</literal></expr>)</condition> <block pos:start="111:53" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:64">

        <expr_stmt pos:start="113:9" pos:end="113:64"><expr pos:start="113:9" pos:end="113:63"><call pos:start="113:9" pos:end="113:63"><name pos:start="113:9" pos:end="113:27">raise_exception_err</name><argument_list pos:start="113:28" pos:end="113:63">(<argument pos:start="113:29" pos:end="113:31"><expr pos:start="113:29" pos:end="113:31"><name pos:start="113:29" pos:end="113:31">env</name></expr></argument>, <argument pos:start="113:34" pos:end="113:43"><expr pos:start="113:34" pos:end="113:43"><name pos:start="113:34" pos:end="113:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="113:46" pos:end="113:62"><expr pos:start="113:46" pos:end="113:62"><name pos:start="113:46" pos:end="113:53">selector</name> <operator pos:start="113:55" pos:end="113:55">&amp;</operator> <literal type="number" pos:start="113:57" pos:end="113:62">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:54">(<expr pos:start="117:9" pos:end="117:53"><operator pos:start="117:9" pos:end="117:9">!</operator><operator pos:start="117:10" pos:end="117:10">(</operator><name pos:start="117:11" pos:end="117:12">e2</name> <operator pos:start="117:14" pos:end="117:14">&amp;</operator> <name pos:start="117:16" pos:end="117:26">DESC_S_MASK</name><operator pos:start="117:27" pos:end="117:27">)</operator> <operator pos:start="117:29" pos:end="117:30">||</operator> <operator pos:start="117:32" pos:end="117:32">!</operator><operator pos:start="117:33" pos:end="117:33">(</operator><name pos:start="117:34" pos:end="117:35">e2</name> <operator pos:start="117:37" pos:end="117:37">&amp;</operator> <operator pos:start="117:39" pos:end="117:39">(</operator><name pos:start="117:40" pos:end="117:51">DESC_CS_MASK</name><operator pos:start="117:52" pos:end="117:52">)</operator><operator pos:start="117:53" pos:end="117:53">)</operator></expr>)</condition> <block pos:start="117:56" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:64">

        <expr_stmt pos:start="119:9" pos:end="119:64"><expr pos:start="119:9" pos:end="119:63"><call pos:start="119:9" pos:end="119:63"><name pos:start="119:9" pos:end="119:27">raise_exception_err</name><argument_list pos:start="119:28" pos:end="119:63">(<argument pos:start="119:29" pos:end="119:31"><expr pos:start="119:29" pos:end="119:31"><name pos:start="119:29" pos:end="119:31">env</name></expr></argument>, <argument pos:start="119:34" pos:end="119:43"><expr pos:start="119:34" pos:end="119:43"><name pos:start="119:34" pos:end="119:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="119:46" pos:end="119:62"><expr pos:start="119:46" pos:end="119:62"><name pos:start="119:46" pos:end="119:53">selector</name> <operator pos:start="119:55" pos:end="119:55">&amp;</operator> <literal type="number" pos:start="119:57" pos:end="119:62">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:37"><expr pos:start="123:5" pos:end="123:36"><name pos:start="123:5" pos:end="123:7">dpl</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <operator pos:start="123:11" pos:end="123:11">(</operator><name pos:start="123:12" pos:end="123:13">e2</name> <operator pos:start="123:15" pos:end="123:16">&gt;&gt;</operator> <name pos:start="123:18" pos:end="123:31">DESC_DPL_SHIFT</name><operator pos:start="123:32" pos:end="123:32">)</operator> <operator pos:start="123:34" pos:end="123:34">&amp;</operator> <literal type="number" pos:start="123:36" pos:end="123:36">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:18">(<expr pos:start="125:9" pos:end="125:17"><name pos:start="125:9" pos:end="125:11">dpl</name> <operator pos:start="125:13" pos:end="125:13">&gt;</operator> <name pos:start="125:15" pos:end="125:17">cpl</name></expr>)</condition> <block pos:start="125:20" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:64">

        <expr_stmt pos:start="127:9" pos:end="127:64"><expr pos:start="127:9" pos:end="127:63"><call pos:start="127:9" pos:end="127:63"><name pos:start="127:9" pos:end="127:27">raise_exception_err</name><argument_list pos:start="127:28" pos:end="127:63">(<argument pos:start="127:29" pos:end="127:31"><expr pos:start="127:29" pos:end="127:31"><name pos:start="127:29" pos:end="127:31">env</name></expr></argument>, <argument pos:start="127:34" pos:end="127:43"><expr pos:start="127:34" pos:end="127:43"><name pos:start="127:34" pos:end="127:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="127:46" pos:end="127:62"><expr pos:start="127:46" pos:end="127:62"><name pos:start="127:46" pos:end="127:53">selector</name> <operator pos:start="127:55" pos:end="127:55">&amp;</operator> <literal type="number" pos:start="127:57" pos:end="127:62">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="131:5" pos:end="135:5"><if pos:start="131:5" pos:end="135:5">if <condition pos:start="131:8" pos:end="131:28">(<expr pos:start="131:9" pos:end="131:27"><operator pos:start="131:9" pos:end="131:9">!</operator><operator pos:start="131:10" pos:end="131:10">(</operator><name pos:start="131:11" pos:end="131:12">e2</name> <operator pos:start="131:14" pos:end="131:14">&amp;</operator> <name pos:start="131:16" pos:end="131:26">DESC_P_MASK</name><operator pos:start="131:27" pos:end="131:27">)</operator></expr>)</condition> <block pos:start="131:30" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:66">

        <expr_stmt pos:start="133:9" pos:end="133:66"><expr pos:start="133:9" pos:end="133:65"><call pos:start="133:9" pos:end="133:65"><name pos:start="133:9" pos:end="133:27">raise_exception_err</name><argument_list pos:start="133:28" pos:end="133:65">(<argument pos:start="133:29" pos:end="133:31"><expr pos:start="133:29" pos:end="133:31"><name pos:start="133:29" pos:end="133:31">env</name></expr></argument>, <argument pos:start="133:34" pos:end="133:45"><expr pos:start="133:34" pos:end="133:45"><name pos:start="133:34" pos:end="133:45">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="133:48" pos:end="133:64"><expr pos:start="133:48" pos:end="133:64"><name pos:start="133:48" pos:end="133:55">selector</name> <operator pos:start="133:57" pos:end="133:57">&amp;</operator> <literal type="number" pos:start="133:59" pos:end="133:64">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="137:5" pos:end="141:5"><if pos:start="137:5" pos:end="141:5">if <condition pos:start="137:8" pos:end="137:50">(<expr pos:start="137:9" pos:end="137:49"><operator pos:start="137:9" pos:end="137:9">!</operator><operator pos:start="137:10" pos:end="137:10">(</operator><name pos:start="137:11" pos:end="137:12">e2</name> <operator pos:start="137:14" pos:end="137:14">&amp;</operator> <name pos:start="137:16" pos:end="137:26">DESC_L_MASK</name><operator pos:start="137:27" pos:end="137:27">)</operator> <operator pos:start="137:29" pos:end="137:30">||</operator> <operator pos:start="137:32" pos:end="137:32">(</operator><name pos:start="137:33" pos:end="137:34">e2</name> <operator pos:start="137:36" pos:end="137:36">&amp;</operator> <name pos:start="137:38" pos:end="137:48">DESC_B_MASK</name><operator pos:start="137:49" pos:end="137:49">)</operator></expr>)</condition> <block pos:start="137:52" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:64">

        <expr_stmt pos:start="139:9" pos:end="139:64"><expr pos:start="139:9" pos:end="139:63"><call pos:start="139:9" pos:end="139:63"><name pos:start="139:9" pos:end="139:27">raise_exception_err</name><argument_list pos:start="139:28" pos:end="139:63">(<argument pos:start="139:29" pos:end="139:31"><expr pos:start="139:29" pos:end="139:31"><name pos:start="139:29" pos:end="139:31">env</name></expr></argument>, <argument pos:start="139:34" pos:end="139:43"><expr pos:start="139:34" pos:end="139:43"><name pos:start="139:34" pos:end="139:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="139:46" pos:end="139:62"><expr pos:start="139:46" pos:end="139:62"><name pos:start="139:46" pos:end="139:53">selector</name> <operator pos:start="139:55" pos:end="139:55">&amp;</operator> <literal type="number" pos:start="139:57" pos:end="139:62">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="143:5" pos:end="197:5"><if pos:start="143:5" pos:end="163:5">if <condition pos:start="143:8" pos:end="143:55">(<expr pos:start="143:9" pos:end="143:54"><operator pos:start="143:9" pos:end="143:9">(</operator><operator pos:start="143:10" pos:end="143:10">!</operator><operator pos:start="143:11" pos:end="143:11">(</operator><name pos:start="143:12" pos:end="143:13">e2</name> <operator pos:start="143:15" pos:end="143:15">&amp;</operator> <name pos:start="143:17" pos:end="143:27">DESC_C_MASK</name><operator pos:start="143:28" pos:end="143:28">)</operator> <operator pos:start="143:30" pos:end="143:31">&amp;&amp;</operator> <name pos:start="143:33" pos:end="143:35">dpl</name> <operator pos:start="143:37" pos:end="143:37">&lt;</operator> <name pos:start="143:39" pos:end="143:41">cpl</name><operator pos:start="143:42" pos:end="143:42">)</operator> <operator pos:start="143:44" pos:end="143:45">||</operator> <name pos:start="143:47" pos:end="143:49">ist</name> <operator pos:start="143:51" pos:end="143:52">!=</operator> <literal type="number" pos:start="143:54" pos:end="143:54">0</literal></expr>)</condition> <block pos:start="143:57" pos:end="163:5">{<block_content pos:start="147:9" pos:end="161:22">

        <comment type="block" pos:start="145:9" pos:end="145:32">/* to inner privilege */</comment>

        <if_stmt pos:start="147:9" pos:end="155:9"><if pos:start="147:9" pos:end="151:9">if <condition pos:start="147:12" pos:end="147:21">(<expr pos:start="147:13" pos:end="147:20"><name pos:start="147:13" pos:end="147:15">ist</name> <operator pos:start="147:17" pos:end="147:18">!=</operator> <literal type="number" pos:start="147:20" pos:end="147:20">0</literal></expr>)</condition> <block pos:start="147:23" pos:end="151:9">{<block_content pos:start="149:13" pos:end="149:49">

            <expr_stmt pos:start="149:13" pos:end="149:49"><expr pos:start="149:13" pos:end="149:48"><name pos:start="149:13" pos:end="149:15">esp</name> <operator pos:start="149:17" pos:end="149:17">=</operator> <call pos:start="149:19" pos:end="149:48"><name pos:start="149:19" pos:end="149:34">get_rsp_from_tss</name><argument_list pos:start="149:35" pos:end="149:48">(<argument pos:start="149:36" pos:end="149:38"><expr pos:start="149:36" pos:end="149:38"><name pos:start="149:36" pos:end="149:38">env</name></expr></argument>, <argument pos:start="149:41" pos:end="149:47"><expr pos:start="149:41" pos:end="149:47"><name pos:start="149:41" pos:end="149:43">ist</name> <operator pos:start="149:45" pos:end="149:45">+</operator> <literal type="number" pos:start="149:47" pos:end="149:47">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="151:11" pos:end="155:9">else <block pos:start="151:16" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:45">

            <expr_stmt pos:start="153:13" pos:end="153:45"><expr pos:start="153:13" pos:end="153:44"><name pos:start="153:13" pos:end="153:15">esp</name> <operator pos:start="153:17" pos:end="153:17">=</operator> <call pos:start="153:19" pos:end="153:44"><name pos:start="153:19" pos:end="153:34">get_rsp_from_tss</name><argument_list pos:start="153:35" pos:end="153:44">(<argument pos:start="153:36" pos:end="153:38"><expr pos:start="153:36" pos:end="153:38"><name pos:start="153:36" pos:end="153:38">env</name></expr></argument>, <argument pos:start="153:41" pos:end="153:43"><expr pos:start="153:41" pos:end="153:43"><name pos:start="153:41" pos:end="153:43">dpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:22"><expr pos:start="157:9" pos:end="157:21"><name pos:start="157:9" pos:end="157:11">esp</name> <operator pos:start="157:13" pos:end="157:14">&amp;=</operator> <operator pos:start="157:16" pos:end="157:16">~</operator><literal type="number" pos:start="157:17" pos:end="157:21">0xfLL</literal></expr>;</expr_stmt> <comment type="block" pos:start="157:24" pos:end="157:40">/* align stack */</comment>

        <expr_stmt pos:start="159:9" pos:end="159:15"><expr pos:start="159:9" pos:end="159:14"><name pos:start="159:9" pos:end="159:10">ss</name> <operator pos:start="159:12" pos:end="159:12">=</operator> <literal type="number" pos:start="159:14" pos:end="159:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:22"><expr pos:start="161:9" pos:end="161:21"><name pos:start="161:9" pos:end="161:17">new_stack</name> <operator pos:start="161:19" pos:end="161:19">=</operator> <literal type="number" pos:start="161:21" pos:end="161:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="163:7" pos:end="189:5">else if <condition pos:start="163:15" pos:end="163:48">(<expr pos:start="163:16" pos:end="163:47"><operator pos:start="163:16" pos:end="163:16">(</operator><name pos:start="163:17" pos:end="163:18">e2</name> <operator pos:start="163:20" pos:end="163:20">&amp;</operator> <name pos:start="163:22" pos:end="163:32">DESC_C_MASK</name><operator pos:start="163:33" pos:end="163:33">)</operator> <operator pos:start="163:35" pos:end="163:36">||</operator> <name pos:start="163:38" pos:end="163:40">dpl</name> <operator pos:start="163:42" pos:end="163:43">==</operator> <name pos:start="163:45" pos:end="163:47">cpl</name></expr>)</condition> <block pos:start="163:50" pos:end="189:5">{<block_content pos:start="167:9" pos:end="187:18">

        <comment type="block" pos:start="165:9" pos:end="165:31">/* to same privilege */</comment>

        <if_stmt pos:start="167:9" pos:end="171:9"><if pos:start="167:9" pos:end="171:9">if <condition pos:start="167:12" pos:end="167:34">(<expr pos:start="167:13" pos:end="167:33"><name pos:start="167:13" pos:end="167:23"><name pos:start="167:13" pos:end="167:15">env</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:23">eflags</name></name> <operator pos:start="167:25" pos:end="167:25">&amp;</operator> <name pos:start="167:27" pos:end="167:33">VM_MASK</name></expr>)</condition> <block pos:start="167:36" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:68">

            <expr_stmt pos:start="169:13" pos:end="169:68"><expr pos:start="169:13" pos:end="169:67"><call pos:start="169:13" pos:end="169:67"><name pos:start="169:13" pos:end="169:31">raise_exception_err</name><argument_list pos:start="169:32" pos:end="169:67">(<argument pos:start="169:33" pos:end="169:35"><expr pos:start="169:33" pos:end="169:35"><name pos:start="169:33" pos:end="169:35">env</name></expr></argument>, <argument pos:start="169:38" pos:end="169:47"><expr pos:start="169:38" pos:end="169:47"><name pos:start="169:38" pos:end="169:47">EXCP0D_GPF</name></expr></argument>, <argument pos:start="169:50" pos:end="169:66"><expr pos:start="169:50" pos:end="169:66"><name pos:start="169:50" pos:end="169:57">selector</name> <operator pos:start="169:59" pos:end="169:59">&amp;</operator> <literal type="number" pos:start="169:61" pos:end="169:66">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:22"><expr pos:start="173:9" pos:end="173:21"><name pos:start="173:9" pos:end="173:17">new_stack</name> <operator pos:start="173:19" pos:end="173:19">=</operator> <literal type="number" pos:start="173:21" pos:end="173:21">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="175:9" pos:end="183:9"><if pos:start="175:9" pos:end="179:9">if <condition pos:start="175:12" pos:end="175:21">(<expr pos:start="175:13" pos:end="175:20"><name pos:start="175:13" pos:end="175:15">ist</name> <operator pos:start="175:17" pos:end="175:18">!=</operator> <literal type="number" pos:start="175:20" pos:end="175:20">0</literal></expr>)</condition> <block pos:start="175:23" pos:end="179:9">{<block_content pos:start="177:13" pos:end="177:49">

            <expr_stmt pos:start="177:13" pos:end="177:49"><expr pos:start="177:13" pos:end="177:48"><name pos:start="177:13" pos:end="177:15">esp</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <call pos:start="177:19" pos:end="177:48"><name pos:start="177:19" pos:end="177:34">get_rsp_from_tss</name><argument_list pos:start="177:35" pos:end="177:48">(<argument pos:start="177:36" pos:end="177:38"><expr pos:start="177:36" pos:end="177:38"><name pos:start="177:36" pos:end="177:38">env</name></expr></argument>, <argument pos:start="177:41" pos:end="177:47"><expr pos:start="177:41" pos:end="177:47"><name pos:start="177:41" pos:end="177:43">ist</name> <operator pos:start="177:45" pos:end="177:45">+</operator> <literal type="number" pos:start="177:47" pos:end="177:47">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="179:11" pos:end="183:9">else <block pos:start="179:16" pos:end="183:9">{<block_content pos:start="181:13" pos:end="181:35">

            <expr_stmt pos:start="181:13" pos:end="181:35"><expr pos:start="181:13" pos:end="181:34"><name pos:start="181:13" pos:end="181:15">esp</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <name pos:start="181:19" pos:end="181:34"><name pos:start="181:19" pos:end="181:21">env</name><operator pos:start="181:22" pos:end="181:23">-&gt;</operator><name pos:start="181:24" pos:end="181:27">regs</name><index pos:start="181:28" pos:end="181:34">[<expr pos:start="181:29" pos:end="181:33"><name pos:start="181:29" pos:end="181:33">R_ESP</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:22"><expr pos:start="185:9" pos:end="185:21"><name pos:start="185:9" pos:end="185:11">esp</name> <operator pos:start="185:13" pos:end="185:14">&amp;=</operator> <operator pos:start="185:16" pos:end="185:16">~</operator><literal type="number" pos:start="185:17" pos:end="185:21">0xfLL</literal></expr>;</expr_stmt> <comment type="block" pos:start="185:24" pos:end="185:40">/* align stack */</comment>

        <expr_stmt pos:start="187:9" pos:end="187:18"><expr pos:start="187:9" pos:end="187:17"><name pos:start="187:9" pos:end="187:11">dpl</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <name pos:start="187:15" pos:end="187:17">cpl</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="189:7" pos:end="197:5">else <block pos:start="189:12" pos:end="197:5">{<block_content pos:start="191:9" pos:end="195:16">

        <expr_stmt pos:start="191:9" pos:end="191:64"><expr pos:start="191:9" pos:end="191:63"><call pos:start="191:9" pos:end="191:63"><name pos:start="191:9" pos:end="191:27">raise_exception_err</name><argument_list pos:start="191:28" pos:end="191:63">(<argument pos:start="191:29" pos:end="191:31"><expr pos:start="191:29" pos:end="191:31"><name pos:start="191:29" pos:end="191:31">env</name></expr></argument>, <argument pos:start="191:34" pos:end="191:43"><expr pos:start="191:34" pos:end="191:43"><name pos:start="191:34" pos:end="191:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="191:46" pos:end="191:62"><expr pos:start="191:46" pos:end="191:62"><name pos:start="191:46" pos:end="191:53">selector</name> <operator pos:start="191:55" pos:end="191:55">&amp;</operator> <literal type="number" pos:start="191:57" pos:end="191:62">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:22"><expr pos:start="193:9" pos:end="193:21"><name pos:start="193:9" pos:end="193:17">new_stack</name> <operator pos:start="193:19" pos:end="193:19">=</operator> <literal type="number" pos:start="193:21" pos:end="193:21">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="193:24" pos:end="193:42">/* avoid warning */</comment>

        <expr_stmt pos:start="195:9" pos:end="195:16"><expr pos:start="195:9" pos:end="195:15"><name pos:start="195:9" pos:end="195:11">esp</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <literal type="number" pos:start="195:15" pos:end="195:15">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="195:18" pos:end="195:36">/* avoid warning */</comment>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:41"><expr pos:start="201:5" pos:end="201:40"><call pos:start="201:5" pos:end="201:40"><name pos:start="201:5" pos:end="201:9">PUSHQ</name><argument_list pos:start="201:10" pos:end="201:40">(<argument pos:start="201:11" pos:end="201:13"><expr pos:start="201:11" pos:end="201:13"><name pos:start="201:11" pos:end="201:13">esp</name></expr></argument>, <argument pos:start="201:16" pos:end="201:39"><expr pos:start="201:16" pos:end="201:39"><name pos:start="201:16" pos:end="201:30"><name pos:start="201:16" pos:end="201:18">env</name><operator pos:start="201:19" pos:end="201:20">-&gt;</operator><name pos:start="201:21" pos:end="201:24">segs</name><index pos:start="201:25" pos:end="201:30">[<expr pos:start="201:26" pos:end="201:29"><name pos:start="201:26" pos:end="201:29">R_SS</name></expr>]</index></name><operator pos:start="201:31" pos:end="201:31">.</operator><name pos:start="201:32" pos:end="201:39">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:33"><expr pos:start="203:5" pos:end="203:32"><call pos:start="203:5" pos:end="203:32"><name pos:start="203:5" pos:end="203:9">PUSHQ</name><argument_list pos:start="203:10" pos:end="203:32">(<argument pos:start="203:11" pos:end="203:13"><expr pos:start="203:11" pos:end="203:13"><name pos:start="203:11" pos:end="203:13">esp</name></expr></argument>, <argument pos:start="203:16" pos:end="203:31"><expr pos:start="203:16" pos:end="203:31"><name pos:start="203:16" pos:end="203:31"><name pos:start="203:16" pos:end="203:18">env</name><operator pos:start="203:19" pos:end="203:20">-&gt;</operator><name pos:start="203:21" pos:end="203:24">regs</name><index pos:start="203:25" pos:end="203:31">[<expr pos:start="203:26" pos:end="203:30"><name pos:start="203:26" pos:end="203:30">R_ESP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:40"><expr pos:start="205:5" pos:end="205:39"><call pos:start="205:5" pos:end="205:39"><name pos:start="205:5" pos:end="205:9">PUSHQ</name><argument_list pos:start="205:10" pos:end="205:39">(<argument pos:start="205:11" pos:end="205:13"><expr pos:start="205:11" pos:end="205:13"><name pos:start="205:11" pos:end="205:13">esp</name></expr></argument>, <argument pos:start="205:16" pos:end="205:38"><expr pos:start="205:16" pos:end="205:38"><call pos:start="205:16" pos:end="205:38"><name pos:start="205:16" pos:end="205:33">cpu_compute_eflags</name><argument_list pos:start="205:34" pos:end="205:38">(<argument pos:start="205:35" pos:end="205:37"><expr pos:start="205:35" pos:end="205:37"><name pos:start="205:35" pos:end="205:37">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:41"><expr pos:start="207:5" pos:end="207:40"><call pos:start="207:5" pos:end="207:40"><name pos:start="207:5" pos:end="207:9">PUSHQ</name><argument_list pos:start="207:10" pos:end="207:40">(<argument pos:start="207:11" pos:end="207:13"><expr pos:start="207:11" pos:end="207:13"><name pos:start="207:11" pos:end="207:13">esp</name></expr></argument>, <argument pos:start="207:16" pos:end="207:39"><expr pos:start="207:16" pos:end="207:39"><name pos:start="207:16" pos:end="207:30"><name pos:start="207:16" pos:end="207:18">env</name><operator pos:start="207:19" pos:end="207:20">-&gt;</operator><name pos:start="207:21" pos:end="207:24">segs</name><index pos:start="207:25" pos:end="207:30">[<expr pos:start="207:26" pos:end="207:29"><name pos:start="207:26" pos:end="207:29">R_CS</name></expr>]</index></name><operator pos:start="207:31" pos:end="207:31">.</operator><name pos:start="207:32" pos:end="207:39">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:24"><expr pos:start="209:5" pos:end="209:23"><call pos:start="209:5" pos:end="209:23"><name pos:start="209:5" pos:end="209:9">PUSHQ</name><argument_list pos:start="209:10" pos:end="209:23">(<argument pos:start="209:11" pos:end="209:13"><expr pos:start="209:11" pos:end="209:13"><name pos:start="209:11" pos:end="209:13">esp</name></expr></argument>, <argument pos:start="209:16" pos:end="209:22"><expr pos:start="209:16" pos:end="209:22"><name pos:start="209:16" pos:end="209:22">old_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="211:5" pos:end="215:5"><if pos:start="211:5" pos:end="215:5">if <condition pos:start="211:8" pos:end="211:23">(<expr pos:start="211:9" pos:end="211:22"><name pos:start="211:9" pos:end="211:22">has_error_code</name></expr>)</condition> <block pos:start="211:25" pos:end="215:5">{<block_content pos:start="213:9" pos:end="213:31">

        <expr_stmt pos:start="213:9" pos:end="213:31"><expr pos:start="213:9" pos:end="213:30"><call pos:start="213:9" pos:end="213:30"><name pos:start="213:9" pos:end="213:13">PUSHQ</name><argument_list pos:start="213:14" pos:end="213:30">(<argument pos:start="213:15" pos:end="213:17"><expr pos:start="213:15" pos:end="213:17"><name pos:start="213:15" pos:end="213:17">esp</name></expr></argument>, <argument pos:start="213:20" pos:end="213:29"><expr pos:start="213:20" pos:end="213:29"><name pos:start="213:20" pos:end="213:29">error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="219:5" pos:end="219:38">/* interrupt gate clear IF mask */</comment>

    <if_stmt pos:start="221:5" pos:end="225:5"><if pos:start="221:5" pos:end="225:5">if <condition pos:start="221:8" pos:end="221:24">(<expr pos:start="221:9" pos:end="221:23"><operator pos:start="221:9" pos:end="221:9">(</operator><name pos:start="221:10" pos:end="221:13">type</name> <operator pos:start="221:15" pos:end="221:15">&amp;</operator> <literal type="number" pos:start="221:17" pos:end="221:17">1</literal><operator pos:start="221:18" pos:end="221:18">)</operator> <operator pos:start="221:20" pos:end="221:21">==</operator> <literal type="number" pos:start="221:23" pos:end="221:23">0</literal></expr>)</condition> <block pos:start="221:26" pos:end="225:5">{<block_content pos:start="223:9" pos:end="223:32">

        <expr_stmt pos:start="223:9" pos:end="223:32"><expr pos:start="223:9" pos:end="223:31"><name pos:start="223:9" pos:end="223:19"><name pos:start="223:9" pos:end="223:11">env</name><operator pos:start="223:12" pos:end="223:13">-&gt;</operator><name pos:start="223:14" pos:end="223:19">eflags</name></name> <operator pos:start="223:21" pos:end="223:22">&amp;=</operator> <operator pos:start="223:24" pos:end="223:24">~</operator><name pos:start="223:25" pos:end="223:31">IF_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:60"><expr pos:start="227:5" pos:end="227:59"><name pos:start="227:5" pos:end="227:15"><name pos:start="227:5" pos:end="227:7">env</name><operator pos:start="227:8" pos:end="227:9">-&gt;</operator><name pos:start="227:10" pos:end="227:15">eflags</name></name> <operator pos:start="227:17" pos:end="227:18">&amp;=</operator> <operator pos:start="227:20" pos:end="227:20">~</operator><operator pos:start="227:21" pos:end="227:21">(</operator><name pos:start="227:22" pos:end="227:28">TF_MASK</name> <operator pos:start="227:30" pos:end="227:30">|</operator> <name pos:start="227:32" pos:end="227:38">VM_MASK</name> <operator pos:start="227:40" pos:end="227:40">|</operator> <name pos:start="227:42" pos:end="227:48">RF_MASK</name> <operator pos:start="227:50" pos:end="227:50">|</operator> <name pos:start="227:52" pos:end="227:58">NT_MASK</name><operator pos:start="227:59" pos:end="227:59">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="231:5" pos:end="237:5"><if pos:start="231:5" pos:end="237:5">if <condition pos:start="231:8" pos:end="231:18">(<expr pos:start="231:9" pos:end="231:17"><name pos:start="231:9" pos:end="231:17">new_stack</name></expr>)</condition> <block pos:start="231:20" pos:end="237:5">{<block_content pos:start="233:9" pos:end="235:55">

        <expr_stmt pos:start="233:9" pos:end="233:21"><expr pos:start="233:9" pos:end="233:20"><name pos:start="233:9" pos:end="233:10">ss</name> <operator pos:start="233:12" pos:end="233:12">=</operator> <literal type="number" pos:start="233:14" pos:end="233:14">0</literal> <operator pos:start="233:16" pos:end="233:16">|</operator> <name pos:start="233:18" pos:end="233:20">dpl</name></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:55"><expr pos:start="235:9" pos:end="235:54"><call pos:start="235:9" pos:end="235:54"><name pos:start="235:9" pos:end="235:30">cpu_x86_load_seg_cache</name><argument_list pos:start="235:31" pos:end="235:54">(<argument pos:start="235:32" pos:end="235:34"><expr pos:start="235:32" pos:end="235:34"><name pos:start="235:32" pos:end="235:34">env</name></expr></argument>, <argument pos:start="235:37" pos:end="235:40"><expr pos:start="235:37" pos:end="235:40"><name pos:start="235:37" pos:end="235:40">R_SS</name></expr></argument>, <argument pos:start="235:43" pos:end="235:44"><expr pos:start="235:43" pos:end="235:44"><name pos:start="235:43" pos:end="235:44">ss</name></expr></argument>, <argument pos:start="235:47" pos:end="235:47"><expr pos:start="235:47" pos:end="235:47"><literal type="number" pos:start="235:47" pos:end="235:47">0</literal></expr></argument>, <argument pos:start="235:50" pos:end="235:50"><expr pos:start="235:50" pos:end="235:50"><literal type="number" pos:start="235:50" pos:end="235:50">0</literal></expr></argument>, <argument pos:start="235:53" pos:end="235:53"><expr pos:start="235:53" pos:end="235:53"><literal type="number" pos:start="235:53" pos:end="235:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:27"><expr pos:start="239:5" pos:end="239:26"><name pos:start="239:5" pos:end="239:20"><name pos:start="239:5" pos:end="239:7">env</name><operator pos:start="239:8" pos:end="239:9">-&gt;</operator><name pos:start="239:10" pos:end="239:13">regs</name><index pos:start="239:14" pos:end="239:20">[<expr pos:start="239:15" pos:end="239:19"><name pos:start="239:15" pos:end="239:19">R_ESP</name></expr>]</index></name> <operator pos:start="239:22" pos:end="239:22">=</operator> <name pos:start="239:24" pos:end="239:26">esp</name></expr>;</expr_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:37"><expr pos:start="243:5" pos:end="243:36"><name pos:start="243:5" pos:end="243:12">selector</name> <operator pos:start="243:14" pos:end="243:14">=</operator> <operator pos:start="243:16" pos:end="243:16">(</operator><name pos:start="243:17" pos:end="243:24">selector</name> <operator pos:start="243:26" pos:end="243:26">&amp;</operator> <operator pos:start="243:28" pos:end="243:28">~</operator><literal type="number" pos:start="243:29" pos:end="243:29">3</literal><operator pos:start="243:30" pos:end="243:30">)</operator> <operator pos:start="243:32" pos:end="243:32">|</operator> <name pos:start="243:34" pos:end="243:36">dpl</name></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="251:23"><expr pos:start="245:5" pos:end="251:22"><call pos:start="245:5" pos:end="251:22"><name pos:start="245:5" pos:end="245:26">cpu_x86_load_seg_cache</name><argument_list pos:start="245:27" pos:end="251:22">(<argument pos:start="245:28" pos:end="245:30"><expr pos:start="245:28" pos:end="245:30"><name pos:start="245:28" pos:end="245:30">env</name></expr></argument>, <argument pos:start="245:33" pos:end="245:36"><expr pos:start="245:33" pos:end="245:36"><name pos:start="245:33" pos:end="245:36">R_CS</name></expr></argument>, <argument pos:start="245:39" pos:end="245:46"><expr pos:start="245:39" pos:end="245:46"><name pos:start="245:39" pos:end="245:46">selector</name></expr></argument>,

                   <argument pos:start="247:20" pos:end="247:39"><expr pos:start="247:20" pos:end="247:39"><call pos:start="247:20" pos:end="247:39"><name pos:start="247:20" pos:end="247:31">get_seg_base</name><argument_list pos:start="247:32" pos:end="247:39">(<argument pos:start="247:33" pos:end="247:34"><expr pos:start="247:33" pos:end="247:34"><name pos:start="247:33" pos:end="247:34">e1</name></expr></argument>, <argument pos:start="247:37" pos:end="247:38"><expr pos:start="247:37" pos:end="247:38"><name pos:start="247:37" pos:end="247:38">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="249:20" pos:end="249:40"><expr pos:start="249:20" pos:end="249:40"><call pos:start="249:20" pos:end="249:40"><name pos:start="249:20" pos:end="249:32">get_seg_limit</name><argument_list pos:start="249:33" pos:end="249:40">(<argument pos:start="249:34" pos:end="249:35"><expr pos:start="249:34" pos:end="249:35"><name pos:start="249:34" pos:end="249:35">e1</name></expr></argument>, <argument pos:start="249:38" pos:end="249:39"><expr pos:start="249:38" pos:end="249:39"><name pos:start="249:38" pos:end="249:39">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="251:20" pos:end="251:21"><expr pos:start="251:20" pos:end="251:21"><name pos:start="251:20" pos:end="251:21">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:22"><expr pos:start="253:5" pos:end="253:21"><name pos:start="253:5" pos:end="253:12"><name pos:start="253:5" pos:end="253:7">env</name><operator pos:start="253:8" pos:end="253:9">-&gt;</operator><name pos:start="253:10" pos:end="253:12">eip</name></name> <operator pos:start="253:14" pos:end="253:14">=</operator> <name pos:start="253:16" pos:end="253:21">offset</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
