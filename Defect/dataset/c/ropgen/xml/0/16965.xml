<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16965.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">helper_mwait</name><parameter_list pos:start="1:18" pos:end="1:56">(<parameter pos:start="1:19" pos:end="1:34"><decl pos:start="1:19" pos:end="1:34"><type pos:start="1:19" pos:end="1:34"><name pos:start="1:19" pos:end="1:29">CPUX86State</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:34">env</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:55"><decl pos:start="1:37" pos:end="1:55"><type pos:start="1:37" pos:end="1:55"><name pos:start="1:37" pos:end="1:39">int</name></type> <name pos:start="1:41" pos:end="1:55">next_eip_addend</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">X86CPU</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">cpu</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:40">(<expr pos:start="11:9" pos:end="11:39"><operator pos:start="11:9" pos:end="11:9">(</operator><name pos:start="11:10" pos:end="11:17">uint32_t</name><operator pos:start="11:18" pos:end="11:18">)</operator><name pos:start="11:19" pos:end="11:34"><name pos:start="11:19" pos:end="11:21">env</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:27">regs</name><index pos:start="11:28" pos:end="11:34">[<expr pos:start="11:29" pos:end="11:33"><name pos:start="11:29" pos:end="11:33">R_ECX</name></expr>]</index></name> <operator pos:start="11:36" pos:end="11:37">!=</operator> <literal type="number" pos:start="11:39" pos:end="11:39">0</literal></expr>)</condition> <block pos:start="11:42" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:41">

        <expr_stmt pos:start="13:9" pos:end="13:41"><expr pos:start="13:9" pos:end="13:40"><call pos:start="13:9" pos:end="13:40"><name pos:start="13:9" pos:end="13:23">raise_exception</name><argument_list pos:start="13:24" pos:end="13:40">(<argument pos:start="13:25" pos:end="13:27"><expr pos:start="13:25" pos:end="13:27"><name pos:start="13:25" pos:end="13:27">env</name></expr></argument>, <argument pos:start="13:30" pos:end="13:39"><expr pos:start="13:30" pos:end="13:39"><name pos:start="13:30" pos:end="13:39">EXCP0D_GPF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:58"><expr pos:start="17:5" pos:end="17:57"><call pos:start="17:5" pos:end="17:57"><name pos:start="17:5" pos:end="17:33">cpu_svm_check_intercept_param</name><argument_list pos:start="17:34" pos:end="17:57">(<argument pos:start="17:35" pos:end="17:37"><expr pos:start="17:35" pos:end="17:37"><name pos:start="17:35" pos:end="17:37">env</name></expr></argument>, <argument pos:start="17:40" pos:end="17:53"><expr pos:start="17:40" pos:end="17:53"><name pos:start="17:40" pos:end="17:53">SVM_EXIT_MWAIT</name></expr></argument>, <argument pos:start="17:56" pos:end="17:56"><expr pos:start="17:56" pos:end="17:56"><literal type="number" pos:start="17:56" pos:end="17:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:7">env</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:12">eip</name></name> <operator pos:start="19:14" pos:end="19:15">+=</operator> <name pos:start="19:17" pos:end="19:31">next_eip_addend</name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:7">cpu</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:30"><name pos:start="23:11" pos:end="23:25">x86_env_get_cpu</name><argument_list pos:start="23:26" pos:end="23:30">(<argument pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:18"><expr pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:6">cs</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:17"><name pos:start="25:10" pos:end="25:12">CPU</name><argument_list pos:start="25:13" pos:end="25:17">(<argument pos:start="25:14" pos:end="25:16"><expr pos:start="25:14" pos:end="25:16"><name pos:start="25:14" pos:end="25:16">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="27:5" pos:end="27:56">/* XXX: not complete but not completely erroneous */</comment>

    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:51">(<expr pos:start="29:9" pos:end="29:50"><name pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:10">cs</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:21">cpu_index</name></name> <operator pos:start="29:23" pos:end="29:24">!=</operator> <literal type="number" pos:start="29:26" pos:end="29:26">0</literal> <operator pos:start="29:28" pos:end="29:29">||</operator> <call pos:start="29:31" pos:end="29:42"><name pos:start="29:31" pos:end="29:38">CPU_NEXT</name><argument_list pos:start="29:39" pos:end="29:42">(<argument pos:start="29:40" pos:end="29:41"><expr pos:start="29:40" pos:end="29:41"><name pos:start="29:40" pos:end="29:41">cs</name></expr></argument>)</argument_list></call> <operator pos:start="29:44" pos:end="29:45">!=</operator> <name pos:start="29:47" pos:end="29:50">NULL</name></expr>)</condition> <block pos:start="29:53" pos:end="35:5">{<block_content>

        <comment type="block" pos:start="31:9" pos:end="33:27">/* more than one CPU: do not sleep because another CPU may

           wake this one */</comment>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="39:5">else <block pos:start="35:12" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:20">

        <expr_stmt pos:start="37:9" pos:end="37:20"><expr pos:start="37:9" pos:end="37:19"><call pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:14">do_hlt</name><argument_list pos:start="37:15" pos:end="37:19">(<argument pos:start="37:16" pos:end="37:18"><expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
