<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18975.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">metasound_read_bitstream</name><parameter_list pos:start="1:36" pos:end="3:69">(<parameter pos:start="1:37" pos:end="1:57"><decl pos:start="1:37" pos:end="1:57"><type pos:start="1:37" pos:end="1:57"><name pos:start="1:37" pos:end="1:50">AVCodecContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">avctx</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:78"><decl pos:start="1:60" pos:end="1:78"><type pos:start="1:60" pos:end="1:78"><name pos:start="1:60" pos:end="1:72">TwinVQContext</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:78">tctx</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:54"><decl pos:start="3:37" pos:end="3:54"><type pos:start="3:37" pos:end="3:54"><specifier pos:start="3:37" pos:end="3:41">const</specifier> <name pos:start="3:43" pos:end="3:49">uint8_t</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:54">buf</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:68"><decl pos:start="3:57" pos:end="3:68"><type pos:start="3:57" pos:end="3:68"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:68">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="147:1">{<block_content pos:start="7:5" pos:end="145:13">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:19">TwinVQFrameData</name>     <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:29">bits</name> <init pos:start="7:31" pos:end="7:43">= <expr pos:start="7:33" pos:end="7:43"><operator pos:start="7:33" pos:end="7:33">&amp;</operator><name pos:start="7:34" pos:end="7:43"><name pos:start="7:34" pos:end="7:37">tctx</name><operator pos:start="7:38" pos:end="7:39">-&gt;</operator><name pos:start="7:40" pos:end="7:43">bits</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:25"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:23">TwinVQModeTab</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:29">mtab</name> <init pos:start="9:31" pos:end="9:42">= <expr pos:start="9:33" pos:end="9:42"><name pos:start="9:33" pos:end="9:42"><name pos:start="9:33" pos:end="9:36">tctx</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:42">mtab</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">channels</name>              <init pos:start="11:31" pos:end="11:53">= <expr pos:start="11:33" pos:end="11:53"><name pos:start="11:33" pos:end="11:53"><name pos:start="11:33" pos:end="11:36">tctx</name><operator pos:start="11:37" pos:end="11:38">-&gt;</operator><name pos:start="11:39" pos:end="11:43">avctx</name><operator pos:start="11:44" pos:end="11:45">-&gt;</operator><name pos:start="11:46" pos:end="11:53">channels</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">sub</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">GetBitContext</name></type> <name pos:start="15:19" pos:end="15:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">j</name></decl>, <decl pos:start="17:15" pos:end="17:15"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:15">k</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:73">(<expr pos:start="21:9" pos:end="21:72"><name pos:start="21:9" pos:end="21:16">buf_size</name> <operator pos:start="21:18" pos:end="21:18">*</operator> <literal type="number" pos:start="21:20" pos:end="21:20">8</literal> <operator pos:start="21:22" pos:end="21:22">&lt;</operator> <name pos:start="21:24" pos:end="21:38"><name pos:start="21:24" pos:end="21:28">avctx</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:38">bit_rate</name></name> <operator pos:start="21:40" pos:end="21:40">*</operator> <name pos:start="21:42" pos:end="21:51"><name pos:start="21:42" pos:end="21:45">mtab</name><operator pos:start="21:46" pos:end="21:47">-&gt;</operator><name pos:start="21:48" pos:end="21:51">size</name></name> <operator pos:start="21:53" pos:end="21:53">/</operator> <name pos:start="21:55" pos:end="21:72"><name pos:start="21:55" pos:end="21:59">avctx</name><operator pos:start="21:60" pos:end="21:61">-&gt;</operator><name pos:start="21:62" pos:end="21:72">sample_rate</name></name></expr>)</condition> <block pos:start="21:75" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:31">

        <expr_stmt pos:start="23:9" pos:end="25:74"><expr pos:start="23:9" pos:end="25:73"><call pos:start="23:9" pos:end="25:73"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="25:73">(<argument pos:start="23:16" pos:end="23:20"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">avctx</name></expr></argument>, <argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="25:16" pos:end="25:62"><expr pos:start="25:16" pos:end="25:62"><literal type="string" pos:start="25:16" pos:end="25:62">"Frame too small (%d bytes). Truncated file?\n"</literal></expr></argument>, <argument pos:start="25:65" pos:end="25:72"><expr pos:start="25:65" pos:end="25:72"><name pos:start="25:65" pos:end="25:72">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:31">return <expr pos:start="27:16" pos:end="27:30"><call pos:start="27:16" pos:end="27:30"><name pos:start="27:16" pos:end="27:22">AVERROR</name><argument_list pos:start="27:23" pos:end="27:30">(<argument pos:start="27:24" pos:end="27:29"><expr pos:start="27:24" pos:end="27:29"><name pos:start="27:24" pos:end="27:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:42"><expr pos:start="33:5" pos:end="33:41"><call pos:start="33:5" pos:end="33:41"><name pos:start="33:5" pos:end="33:17">init_get_bits</name><argument_list pos:start="33:18" pos:end="33:41">(<argument pos:start="33:19" pos:end="33:21"><expr pos:start="33:19" pos:end="33:21"><operator pos:start="33:19" pos:end="33:19">&amp;</operator><name pos:start="33:20" pos:end="33:21">gb</name></expr></argument>, <argument pos:start="33:24" pos:end="33:26"><expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:26">buf</name></expr></argument>, <argument pos:start="33:29" pos:end="33:40"><expr pos:start="33:29" pos:end="33:40"><name pos:start="33:29" pos:end="33:36">buf_size</name> <operator pos:start="33:38" pos:end="33:38">*</operator> <literal type="number" pos:start="33:40" pos:end="33:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:63"><expr pos:start="37:5" pos:end="37:62"><name pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:8">bits</name><operator pos:start="37:9" pos:end="37:10">-&gt;</operator><name pos:start="37:11" pos:end="37:21">window_type</name></name> <operator pos:start="37:23" pos:end="37:23">=</operator> <call pos:start="37:25" pos:end="37:62"><name pos:start="37:25" pos:end="37:32">get_bits</name><argument_list pos:start="37:33" pos:end="37:62">(<argument pos:start="37:34" pos:end="37:36"><expr pos:start="37:34" pos:end="37:36"><operator pos:start="37:34" pos:end="37:34">&amp;</operator><name pos:start="37:35" pos:end="37:36">gb</name></expr></argument>, <argument pos:start="37:39" pos:end="37:61"><expr pos:start="37:39" pos:end="37:61"><name pos:start="37:39" pos:end="37:61">TWINVQ_WINDOW_TYPE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:30">(<expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:12">bits</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:25">window_type</name></name> <operator pos:start="41:27" pos:end="41:27">&gt;</operator> <literal type="number" pos:start="41:29" pos:end="41:29">8</literal></expr>)</condition> <block pos:start="41:32" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:35">

        <expr_stmt pos:start="43:9" pos:end="43:77"><expr pos:start="43:9" pos:end="43:76"><call pos:start="43:9" pos:end="43:76"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:76">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:75"><expr pos:start="43:37" pos:end="43:75"><literal type="string" pos:start="43:37" pos:end="43:75">"Invalid window type, broken sample?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:35">return <expr pos:start="45:16" pos:end="45:34"><name pos:start="45:16" pos:end="45:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:73"><expr pos:start="51:5" pos:end="51:72"><name pos:start="51:5" pos:end="51:15"><name pos:start="51:5" pos:end="51:8">bits</name><operator pos:start="51:9" pos:end="51:10">-&gt;</operator><name pos:start="51:11" pos:end="51:15">ftype</name></name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:72"><name pos:start="51:19" pos:end="51:48">ff_twinvq_wtype_to_ftype_table</name><index pos:start="51:49" pos:end="51:72">[<expr pos:start="51:50" pos:end="51:71"><name pos:start="51:50" pos:end="51:71"><name pos:start="51:50" pos:end="51:53">tctx</name><operator pos:start="51:54" pos:end="51:55">-&gt;</operator><name pos:start="51:56" pos:end="51:59">bits</name><operator pos:start="51:60" pos:end="51:60">.</operator><name pos:start="51:61" pos:end="51:71">window_type</name></name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:39"><expr pos:start="55:5" pos:end="55:38"><name pos:start="55:5" pos:end="55:7">sub</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <name pos:start="55:11" pos:end="55:34"><name pos:start="55:11" pos:end="55:14">mtab</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:21">fmode</name><index pos:start="55:22" pos:end="55:34">[<expr pos:start="55:23" pos:end="55:33"><name pos:start="55:23" pos:end="55:33"><name pos:start="55:23" pos:end="55:26">bits</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:33">ftype</name></name></expr>]</index></name><operator pos:start="55:35" pos:end="55:35">.</operator><name pos:start="55:36" pos:end="55:38">sub</name></expr>;</expr_stmt>



    <if_stmt pos:start="59:5" pos:end="61:25"><if pos:start="59:5" pos:end="61:25">if <condition pos:start="59:8" pos:end="59:39">(<expr pos:start="59:9" pos:end="59:38"><name pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:12">bits</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:19">ftype</name></name> <operator pos:start="59:21" pos:end="59:22">!=</operator> <name pos:start="59:24" pos:end="59:38">TWINVQ_FT_SHORT</name></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:25"><block_content pos:start="61:9" pos:end="61:25">

        <expr_stmt pos:start="61:9" pos:end="61:25"><expr pos:start="61:9" pos:end="61:24"><call pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:16">get_bits</name><argument_list pos:start="61:17" pos:end="61:24">(<argument pos:start="61:18" pos:end="61:20"><expr pos:start="61:18" pos:end="61:20"><operator pos:start="61:18" pos:end="61:18">&amp;</operator><name pos:start="61:19" pos:end="61:20">gb</name></expr></argument>, <argument pos:start="61:23" pos:end="61:23"><expr pos:start="61:23" pos:end="61:23"><literal type="number" pos:start="61:23" pos:end="61:23">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:60"><expr pos:start="65:5" pos:end="65:59"><call pos:start="65:5" pos:end="65:59"><name pos:start="65:5" pos:end="65:16">read_cb_data</name><argument_list pos:start="65:17" pos:end="65:59">(<argument pos:start="65:18" pos:end="65:21"><expr pos:start="65:18" pos:end="65:21"><name pos:start="65:18" pos:end="65:21">tctx</name></expr></argument>, <argument pos:start="65:24" pos:end="65:26"><expr pos:start="65:24" pos:end="65:26"><operator pos:start="65:24" pos:end="65:24">&amp;</operator><name pos:start="65:25" pos:end="65:26">gb</name></expr></argument>, <argument pos:start="65:29" pos:end="65:45"><expr pos:start="65:29" pos:end="65:45"><name pos:start="65:29" pos:end="65:45"><name pos:start="65:29" pos:end="65:32">bits</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:45">main_coeffs</name></name></expr></argument>, <argument pos:start="65:48" pos:end="65:58"><expr pos:start="65:48" pos:end="65:58"><name pos:start="65:48" pos:end="65:58"><name pos:start="65:48" pos:end="65:51">bits</name><operator pos:start="65:52" pos:end="65:53">-&gt;</operator><name pos:start="65:54" pos:end="65:58">ftype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="69:5" pos:end="77:71">for <control pos:start="69:9" pos:end="69:34">(<init pos:start="69:10" pos:end="69:15"><expr pos:start="69:10" pos:end="69:14"><name pos:start="69:10" pos:end="69:10">i</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>;</init> <condition pos:start="69:17" pos:end="69:29"><expr pos:start="69:17" pos:end="69:28"><name pos:start="69:17" pos:end="69:17">i</name> <operator pos:start="69:19" pos:end="69:19">&lt;</operator> <name pos:start="69:21" pos:end="69:28">channels</name></expr>;</condition> <incr pos:start="69:31" pos:end="69:33"><expr pos:start="69:31" pos:end="69:33"><name pos:start="69:31" pos:end="69:31">i</name><operator pos:start="69:32" pos:end="69:33">++</operator></expr></incr>)</control><block type="pseudo" pos:start="71:9" pos:end="77:71"><block_content pos:start="71:9" pos:end="77:71">

        <for pos:start="71:9" pos:end="77:71">for <control pos:start="71:13" pos:end="71:33">(<init pos:start="71:14" pos:end="71:19"><expr pos:start="71:14" pos:end="71:18"><name pos:start="71:14" pos:end="71:14">j</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <literal type="number" pos:start="71:18" pos:end="71:18">0</literal></expr>;</init> <condition pos:start="71:21" pos:end="71:28"><expr pos:start="71:21" pos:end="71:27"><name pos:start="71:21" pos:end="71:21">j</name> <operator pos:start="71:23" pos:end="71:23">&lt;</operator> <name pos:start="71:25" pos:end="71:27">sub</name></expr>;</condition> <incr pos:start="71:30" pos:end="71:32"><expr pos:start="71:30" pos:end="71:32"><name pos:start="71:30" pos:end="71:30">j</name><operator pos:start="71:31" pos:end="71:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="73:13" pos:end="77:71"><block_content pos:start="73:13" pos:end="77:71">

            <for pos:start="73:13" pos:end="77:71">for <control pos:start="73:17" pos:end="73:70">(<init pos:start="73:18" pos:end="73:23"><expr pos:start="73:18" pos:end="73:22"><name pos:start="73:18" pos:end="73:18">k</name> <operator pos:start="73:20" pos:end="73:20">=</operator> <literal type="number" pos:start="73:22" pos:end="73:22">0</literal></expr>;</init> <condition pos:start="73:25" pos:end="73:65"><expr pos:start="73:25" pos:end="73:64"><name pos:start="73:25" pos:end="73:25">k</name> <operator pos:start="73:27" pos:end="73:27">&lt;</operator> <name pos:start="73:29" pos:end="73:52"><name pos:start="73:29" pos:end="73:32">mtab</name><operator pos:start="73:33" pos:end="73:34">-&gt;</operator><name pos:start="73:35" pos:end="73:39">fmode</name><index pos:start="73:40" pos:end="73:52">[<expr pos:start="73:41" pos:end="73:51"><name pos:start="73:41" pos:end="73:51"><name pos:start="73:41" pos:end="73:44">bits</name><operator pos:start="73:45" pos:end="73:46">-&gt;</operator><name pos:start="73:47" pos:end="73:51">ftype</name></name></expr>]</index></name><operator pos:start="73:53" pos:end="73:53">.</operator><name pos:start="73:54" pos:end="73:64">bark_n_coef</name></expr>;</condition> <incr pos:start="73:67" pos:end="73:69"><expr pos:start="73:67" pos:end="73:69"><name pos:start="73:67" pos:end="73:67">k</name><operator pos:start="73:68" pos:end="73:69">++</operator></expr></incr>)</control><block type="pseudo" pos:start="75:17" pos:end="77:71"><block_content pos:start="75:17" pos:end="77:71">

                <expr_stmt pos:start="75:17" pos:end="77:71"><expr pos:start="75:17" pos:end="77:70"><name pos:start="75:17" pos:end="75:36"><name pos:start="75:17" pos:end="75:20">bits</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:27">bark1</name><index pos:start="75:28" pos:end="75:30">[<expr pos:start="75:29" pos:end="75:29"><name pos:start="75:29" pos:end="75:29">i</name></expr>]</index><index pos:start="75:31" pos:end="75:33">[<expr pos:start="75:32" pos:end="75:32"><name pos:start="75:32" pos:end="75:32">j</name></expr>]</index><index pos:start="75:34" pos:end="75:36">[<expr pos:start="75:35" pos:end="75:35"><name pos:start="75:35" pos:end="75:35">k</name></expr>]</index></name> <operator pos:start="75:38" pos:end="75:38">=</operator>

                    <call pos:start="77:21" pos:end="77:70"><name pos:start="77:21" pos:end="77:28">get_bits</name><argument_list pos:start="77:29" pos:end="77:70">(<argument pos:start="77:30" pos:end="77:32"><expr pos:start="77:30" pos:end="77:32"><operator pos:start="77:30" pos:end="77:30">&amp;</operator><name pos:start="77:31" pos:end="77:32">gb</name></expr></argument>, <argument pos:start="77:35" pos:end="77:69"><expr pos:start="77:35" pos:end="77:69"><name pos:start="77:35" pos:end="77:58"><name pos:start="77:35" pos:end="77:38">mtab</name><operator pos:start="77:39" pos:end="77:40">-&gt;</operator><name pos:start="77:41" pos:end="77:45">fmode</name><index pos:start="77:46" pos:end="77:58">[<expr pos:start="77:47" pos:end="77:57"><name pos:start="77:47" pos:end="77:57"><name pos:start="77:47" pos:end="77:50">bits</name><operator pos:start="77:51" pos:end="77:52">-&gt;</operator><name pos:start="77:53" pos:end="77:57">ftype</name></name></expr>]</index></name><operator pos:start="77:59" pos:end="77:59">.</operator><name pos:start="77:60" pos:end="77:69">bark_n_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>



    <for pos:start="81:5" pos:end="85:55">for <control pos:start="81:9" pos:end="81:34">(<init pos:start="81:10" pos:end="81:15"><expr pos:start="81:10" pos:end="81:14"><name pos:start="81:10" pos:end="81:10">i</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <literal type="number" pos:start="81:14" pos:end="81:14">0</literal></expr>;</init> <condition pos:start="81:17" pos:end="81:29"><expr pos:start="81:17" pos:end="81:28"><name pos:start="81:17" pos:end="81:17">i</name> <operator pos:start="81:19" pos:end="81:19">&lt;</operator> <name pos:start="81:21" pos:end="81:28">channels</name></expr>;</condition> <incr pos:start="81:31" pos:end="81:33"><expr pos:start="81:31" pos:end="81:33"><name pos:start="81:31" pos:end="81:31">i</name><operator pos:start="81:32" pos:end="81:33">++</operator></expr></incr>)</control><block type="pseudo" pos:start="83:9" pos:end="85:55"><block_content pos:start="83:9" pos:end="85:55">

        <for pos:start="83:9" pos:end="85:55">for <control pos:start="83:13" pos:end="83:33">(<init pos:start="83:14" pos:end="83:19"><expr pos:start="83:14" pos:end="83:18"><name pos:start="83:14" pos:end="83:14">j</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <literal type="number" pos:start="83:18" pos:end="83:18">0</literal></expr>;</init> <condition pos:start="83:21" pos:end="83:28"><expr pos:start="83:21" pos:end="83:27"><name pos:start="83:21" pos:end="83:21">j</name> <operator pos:start="83:23" pos:end="83:23">&lt;</operator> <name pos:start="83:25" pos:end="83:27">sub</name></expr>;</condition> <incr pos:start="83:30" pos:end="83:32"><expr pos:start="83:30" pos:end="83:32"><name pos:start="83:30" pos:end="83:30">j</name><operator pos:start="83:31" pos:end="83:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="85:13" pos:end="85:55"><block_content pos:start="85:13" pos:end="85:55">

            <expr_stmt pos:start="85:13" pos:end="85:55"><expr pos:start="85:13" pos:end="85:54"><name pos:start="85:13" pos:end="85:37"><name pos:start="85:13" pos:end="85:16">bits</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:31">bark_use_hist</name><index pos:start="85:32" pos:end="85:34">[<expr pos:start="85:33" pos:end="85:33"><name pos:start="85:33" pos:end="85:33">i</name></expr>]</index><index pos:start="85:35" pos:end="85:37">[<expr pos:start="85:36" pos:end="85:36"><name pos:start="85:36" pos:end="85:36">j</name></expr>]</index></name> <operator pos:start="85:39" pos:end="85:39">=</operator> <call pos:start="85:41" pos:end="85:54"><name pos:start="85:41" pos:end="85:49">get_bits1</name><argument_list pos:start="85:50" pos:end="85:54">(<argument pos:start="85:51" pos:end="85:53"><expr pos:start="85:51" pos:end="85:53"><operator pos:start="85:51" pos:end="85:51">&amp;</operator><name pos:start="85:52" pos:end="85:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>



    <if_stmt pos:start="89:5" pos:end="109:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:38">(<expr pos:start="89:9" pos:end="89:37"><name pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:12">bits</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:19">ftype</name></name> <operator pos:start="89:21" pos:end="89:22">==</operator> <name pos:start="89:24" pos:end="89:37">TWINVQ_FT_LONG</name></expr>)</condition> <block pos:start="89:40" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:65">

        <for pos:start="91:9" pos:end="93:65">for <control pos:start="91:13" pos:end="91:38">(<init pos:start="91:14" pos:end="91:19"><expr pos:start="91:14" pos:end="91:18"><name pos:start="91:14" pos:end="91:14">i</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>;</init> <condition pos:start="91:21" pos:end="91:33"><expr pos:start="91:21" pos:end="91:32"><name pos:start="91:21" pos:end="91:21">i</name> <operator pos:start="91:23" pos:end="91:23">&lt;</operator> <name pos:start="91:25" pos:end="91:32">channels</name></expr>;</condition> <incr pos:start="91:35" pos:end="91:37"><expr pos:start="91:35" pos:end="91:37"><name pos:start="91:35" pos:end="91:35">i</name><operator pos:start="91:36" pos:end="91:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="93:13" pos:end="93:65"><block_content pos:start="93:13" pos:end="93:65">

            <expr_stmt pos:start="93:13" pos:end="93:65"><expr pos:start="93:13" pos:end="93:64"><name pos:start="93:13" pos:end="93:30"><name pos:start="93:13" pos:end="93:16">bits</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:27">gain_bits</name><index pos:start="93:28" pos:end="93:30">[<expr pos:start="93:29" pos:end="93:29"><name pos:start="93:29" pos:end="93:29">i</name></expr>]</index></name> <operator pos:start="93:32" pos:end="93:32">=</operator> <call pos:start="93:34" pos:end="93:64"><name pos:start="93:34" pos:end="93:41">get_bits</name><argument_list pos:start="93:42" pos:end="93:64">(<argument pos:start="93:43" pos:end="93:45"><expr pos:start="93:43" pos:end="93:45"><operator pos:start="93:43" pos:end="93:43">&amp;</operator><name pos:start="93:44" pos:end="93:45">gb</name></expr></argument>, <argument pos:start="93:48" pos:end="93:63"><expr pos:start="93:48" pos:end="93:63"><name pos:start="93:48" pos:end="93:63">TWINVQ_GAIN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="109:5">else <block pos:start="95:12" pos:end="109:5">{<block_content pos:start="97:9" pos:end="107:9">

        <for pos:start="97:9" pos:end="107:9">for <control pos:start="97:13" pos:end="97:38">(<init pos:start="97:14" pos:end="97:19"><expr pos:start="97:14" pos:end="97:18"><name pos:start="97:14" pos:end="97:14">i</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <literal type="number" pos:start="97:18" pos:end="97:18">0</literal></expr>;</init> <condition pos:start="97:21" pos:end="97:33"><expr pos:start="97:21" pos:end="97:32"><name pos:start="97:21" pos:end="97:21">i</name> <operator pos:start="97:23" pos:end="97:23">&lt;</operator> <name pos:start="97:25" pos:end="97:32">channels</name></expr>;</condition> <incr pos:start="97:35" pos:end="97:37"><expr pos:start="97:35" pos:end="97:37"><name pos:start="97:35" pos:end="97:35">i</name><operator pos:start="97:36" pos:end="97:37">++</operator></expr></incr>)</control> <block pos:start="97:40" pos:end="107:9">{<block_content pos:start="99:13" pos:end="105:56">

            <expr_stmt pos:start="99:13" pos:end="99:65"><expr pos:start="99:13" pos:end="99:64"><name pos:start="99:13" pos:end="99:30"><name pos:start="99:13" pos:end="99:16">bits</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:27">gain_bits</name><index pos:start="99:28" pos:end="99:30">[<expr pos:start="99:29" pos:end="99:29"><name pos:start="99:29" pos:end="99:29">i</name></expr>]</index></name> <operator pos:start="99:32" pos:end="99:32">=</operator> <call pos:start="99:34" pos:end="99:64"><name pos:start="99:34" pos:end="99:41">get_bits</name><argument_list pos:start="99:42" pos:end="99:64">(<argument pos:start="99:43" pos:end="99:45"><expr pos:start="99:43" pos:end="99:45"><operator pos:start="99:43" pos:end="99:43">&amp;</operator><name pos:start="99:44" pos:end="99:45">gb</name></expr></argument>, <argument pos:start="99:48" pos:end="99:63"><expr pos:start="99:48" pos:end="99:63"><name pos:start="99:48" pos:end="99:63">TWINVQ_GAIN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="101:13" pos:end="105:56">for <control pos:start="101:17" pos:end="101:37">(<init pos:start="101:18" pos:end="101:23"><expr pos:start="101:18" pos:end="101:22"><name pos:start="101:18" pos:end="101:18">j</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <literal type="number" pos:start="101:22" pos:end="101:22">0</literal></expr>;</init> <condition pos:start="101:25" pos:end="101:32"><expr pos:start="101:25" pos:end="101:31"><name pos:start="101:25" pos:end="101:25">j</name> <operator pos:start="101:27" pos:end="101:27">&lt;</operator> <name pos:start="101:29" pos:end="101:31">sub</name></expr>;</condition> <incr pos:start="101:34" pos:end="101:36"><expr pos:start="101:34" pos:end="101:36"><name pos:start="101:34" pos:end="101:34">j</name><operator pos:start="101:35" pos:end="101:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="103:17" pos:end="105:56"><block_content pos:start="103:17" pos:end="105:56">

                <expr_stmt pos:start="103:17" pos:end="105:56"><expr pos:start="103:17" pos:end="105:55"><name pos:start="103:17" pos:end="103:48"><name pos:start="103:17" pos:end="103:20">bits</name><operator pos:start="103:21" pos:end="103:22">-&gt;</operator><name pos:start="103:23" pos:end="103:35">sub_gain_bits</name><index pos:start="103:36" pos:end="103:48">[<expr pos:start="103:37" pos:end="103:47"><name pos:start="103:37" pos:end="103:37">i</name> <operator pos:start="103:39" pos:end="103:39">*</operator> <name pos:start="103:41" pos:end="103:43">sub</name> <operator pos:start="103:45" pos:end="103:45">+</operator> <name pos:start="103:47" pos:end="103:47">j</name></expr>]</index></name> <operator pos:start="103:50" pos:end="103:50">=</operator>

                    <call pos:start="105:21" pos:end="105:55"><name pos:start="105:21" pos:end="105:28">get_bits</name><argument_list pos:start="105:29" pos:end="105:55">(<argument pos:start="105:30" pos:end="105:32"><expr pos:start="105:30" pos:end="105:32"><operator pos:start="105:30" pos:end="105:30">&amp;</operator><name pos:start="105:31" pos:end="105:32">gb</name></expr></argument>, <argument pos:start="105:35" pos:end="105:54"><expr pos:start="105:35" pos:end="105:54"><name pos:start="105:35" pos:end="105:54">TWINVQ_SUB_GAIN_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <for pos:start="113:5" pos:end="125:5">for <control pos:start="113:9" pos:end="113:34">(<init pos:start="113:10" pos:end="113:15"><expr pos:start="113:10" pos:end="113:14"><name pos:start="113:10" pos:end="113:10">i</name> <operator pos:start="113:12" pos:end="113:12">=</operator> <literal type="number" pos:start="113:14" pos:end="113:14">0</literal></expr>;</init> <condition pos:start="113:17" pos:end="113:29"><expr pos:start="113:17" pos:end="113:28"><name pos:start="113:17" pos:end="113:17">i</name> <operator pos:start="113:19" pos:end="113:19">&lt;</operator> <name pos:start="113:21" pos:end="113:28">channels</name></expr>;</condition> <incr pos:start="113:31" pos:end="113:33"><expr pos:start="113:31" pos:end="113:33"><name pos:start="113:31" pos:end="113:31">i</name><operator pos:start="113:32" pos:end="113:33">++</operator></expr></incr>)</control> <block pos:start="113:36" pos:end="125:5">{<block_content pos:start="115:9" pos:end="123:65">

        <expr_stmt pos:start="115:9" pos:end="115:62"><expr pos:start="115:9" pos:end="115:61"><name pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:12">bits</name><operator pos:start="115:13" pos:end="115:14">-&gt;</operator><name pos:start="115:15" pos:end="115:26">lpc_hist_idx</name><index pos:start="115:27" pos:end="115:29">[<expr pos:start="115:28" pos:end="115:28"><name pos:start="115:28" pos:end="115:28">i</name></expr>]</index></name> <operator pos:start="115:31" pos:end="115:31">=</operator> <call pos:start="115:33" pos:end="115:61"><name pos:start="115:33" pos:end="115:40">get_bits</name><argument_list pos:start="115:41" pos:end="115:61">(<argument pos:start="115:42" pos:end="115:44"><expr pos:start="115:42" pos:end="115:44"><operator pos:start="115:42" pos:end="115:42">&amp;</operator><name pos:start="115:43" pos:end="115:44">gb</name></expr></argument>, <argument pos:start="115:47" pos:end="115:60"><expr pos:start="115:47" pos:end="115:60"><name pos:start="115:47" pos:end="115:60"><name pos:start="115:47" pos:end="115:50">mtab</name><operator pos:start="115:51" pos:end="115:52">-&gt;</operator><name pos:start="115:53" pos:end="115:60">lsp_bit0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:62"><expr pos:start="117:9" pos:end="117:61"><name pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:12">bits</name><operator pos:start="117:13" pos:end="117:14">-&gt;</operator><name pos:start="117:15" pos:end="117:22">lpc_idx1</name><index pos:start="117:23" pos:end="117:25">[<expr pos:start="117:24" pos:end="117:24"><name pos:start="117:24" pos:end="117:24">i</name></expr>]</index></name>     <operator pos:start="117:31" pos:end="117:31">=</operator> <call pos:start="117:33" pos:end="117:61"><name pos:start="117:33" pos:end="117:40">get_bits</name><argument_list pos:start="117:41" pos:end="117:61">(<argument pos:start="117:42" pos:end="117:44"><expr pos:start="117:42" pos:end="117:44"><operator pos:start="117:42" pos:end="117:42">&amp;</operator><name pos:start="117:43" pos:end="117:44">gb</name></expr></argument>, <argument pos:start="117:47" pos:end="117:60"><expr pos:start="117:47" pos:end="117:60"><name pos:start="117:47" pos:end="117:60"><name pos:start="117:47" pos:end="117:50">mtab</name><operator pos:start="117:51" pos:end="117:52">-&gt;</operator><name pos:start="117:53" pos:end="117:60">lsp_bit1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="121:9" pos:end="123:65">for <control pos:start="121:13" pos:end="121:45">(<init pos:start="121:14" pos:end="121:19"><expr pos:start="121:14" pos:end="121:18"><name pos:start="121:14" pos:end="121:14">j</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <literal type="number" pos:start="121:18" pos:end="121:18">0</literal></expr>;</init> <condition pos:start="121:21" pos:end="121:40"><expr pos:start="121:21" pos:end="121:39"><name pos:start="121:21" pos:end="121:21">j</name> <operator pos:start="121:23" pos:end="121:23">&lt;</operator> <name pos:start="121:25" pos:end="121:39"><name pos:start="121:25" pos:end="121:28">mtab</name><operator pos:start="121:29" pos:end="121:30">-&gt;</operator><name pos:start="121:31" pos:end="121:39">lsp_split</name></name></expr>;</condition> <incr pos:start="121:42" pos:end="121:44"><expr pos:start="121:42" pos:end="121:44"><name pos:start="121:42" pos:end="121:42">j</name><operator pos:start="121:43" pos:end="121:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="123:13" pos:end="123:65"><block_content pos:start="123:13" pos:end="123:65">

            <expr_stmt pos:start="123:13" pos:end="123:65"><expr pos:start="123:13" pos:end="123:64"><name pos:start="123:13" pos:end="123:32"><name pos:start="123:13" pos:end="123:16">bits</name><operator pos:start="123:17" pos:end="123:18">-&gt;</operator><name pos:start="123:19" pos:end="123:26">lpc_idx2</name><index pos:start="123:27" pos:end="123:29">[<expr pos:start="123:28" pos:end="123:28"><name pos:start="123:28" pos:end="123:28">i</name></expr>]</index><index pos:start="123:30" pos:end="123:32">[<expr pos:start="123:31" pos:end="123:31"><name pos:start="123:31" pos:end="123:31">j</name></expr>]</index></name> <operator pos:start="123:34" pos:end="123:34">=</operator> <call pos:start="123:36" pos:end="123:64"><name pos:start="123:36" pos:end="123:43">get_bits</name><argument_list pos:start="123:44" pos:end="123:64">(<argument pos:start="123:45" pos:end="123:47"><expr pos:start="123:45" pos:end="123:47"><operator pos:start="123:45" pos:end="123:45">&amp;</operator><name pos:start="123:46" pos:end="123:47">gb</name></expr></argument>, <argument pos:start="123:50" pos:end="123:63"><expr pos:start="123:50" pos:end="123:63"><name pos:start="123:50" pos:end="123:63"><name pos:start="123:50" pos:end="123:53">mtab</name><operator pos:start="123:54" pos:end="123:55">-&gt;</operator><name pos:start="123:56" pos:end="123:63">lsp_bit2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></for>



    <if_stmt pos:start="129:5" pos:end="141:5"><if pos:start="129:5" pos:end="141:5">if <condition pos:start="129:8" pos:end="129:38">(<expr pos:start="129:9" pos:end="129:37"><name pos:start="129:9" pos:end="129:19"><name pos:start="129:9" pos:end="129:12">bits</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:19">ftype</name></name> <operator pos:start="129:21" pos:end="129:22">==</operator> <name pos:start="129:24" pos:end="129:37">TWINVQ_FT_LONG</name></expr>)</condition> <block pos:start="129:40" pos:end="141:5">{<block_content pos:start="131:9" pos:end="139:9">

        <expr_stmt pos:start="131:9" pos:end="131:53"><expr pos:start="131:9" pos:end="131:52"><call pos:start="131:9" pos:end="131:52"><name pos:start="131:9" pos:end="131:20">read_cb_data</name><argument_list pos:start="131:21" pos:end="131:52">(<argument pos:start="131:22" pos:end="131:25"><expr pos:start="131:22" pos:end="131:25"><name pos:start="131:22" pos:end="131:25">tctx</name></expr></argument>, <argument pos:start="131:28" pos:end="131:30"><expr pos:start="131:28" pos:end="131:30"><operator pos:start="131:28" pos:end="131:28">&amp;</operator><name pos:start="131:29" pos:end="131:30">gb</name></expr></argument>, <argument pos:start="131:33" pos:end="131:48"><expr pos:start="131:33" pos:end="131:48"><name pos:start="131:33" pos:end="131:48"><name pos:start="131:33" pos:end="131:36">bits</name><operator pos:start="131:37" pos:end="131:38">-&gt;</operator><name pos:start="131:39" pos:end="131:48">ppc_coeffs</name></name></expr></argument>, <argument pos:start="131:51" pos:end="131:51"><expr pos:start="131:51" pos:end="131:51"><literal type="number" pos:start="131:51" pos:end="131:51">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="133:9" pos:end="139:9">for <control pos:start="133:13" pos:end="133:38">(<init pos:start="133:14" pos:end="133:19"><expr pos:start="133:14" pos:end="133:18"><name pos:start="133:14" pos:end="133:14">i</name> <operator pos:start="133:16" pos:end="133:16">=</operator> <literal type="number" pos:start="133:18" pos:end="133:18">0</literal></expr>;</init> <condition pos:start="133:21" pos:end="133:33"><expr pos:start="133:21" pos:end="133:32"><name pos:start="133:21" pos:end="133:21">i</name> <operator pos:start="133:23" pos:end="133:23">&lt;</operator> <name pos:start="133:25" pos:end="133:32">channels</name></expr>;</condition> <incr pos:start="133:35" pos:end="133:37"><expr pos:start="133:35" pos:end="133:37"><name pos:start="133:35" pos:end="133:35">i</name><operator pos:start="133:36" pos:end="133:37">++</operator></expr></incr>)</control> <block pos:start="133:40" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:61">

            <expr_stmt pos:start="135:13" pos:end="135:66"><expr pos:start="135:13" pos:end="135:65"><name pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:16">bits</name><operator pos:start="135:17" pos:end="135:18">-&gt;</operator><name pos:start="135:19" pos:end="135:24">p_coef</name><index pos:start="135:25" pos:end="135:27">[<expr pos:start="135:26" pos:end="135:26"><name pos:start="135:26" pos:end="135:26">i</name></expr>]</index></name> <operator pos:start="135:29" pos:end="135:29">=</operator> <call pos:start="135:31" pos:end="135:65"><name pos:start="135:31" pos:end="135:38">get_bits</name><argument_list pos:start="135:39" pos:end="135:65">(<argument pos:start="135:40" pos:end="135:42"><expr pos:start="135:40" pos:end="135:42"><operator pos:start="135:40" pos:end="135:40">&amp;</operator><name pos:start="135:41" pos:end="135:42">gb</name></expr></argument>, <argument pos:start="135:45" pos:end="135:64"><expr pos:start="135:45" pos:end="135:64"><name pos:start="135:45" pos:end="135:64"><name pos:start="135:45" pos:end="135:48">mtab</name><operator pos:start="135:49" pos:end="135:50">-&gt;</operator><name pos:start="135:51" pos:end="135:64">ppc_period_bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:61"><expr pos:start="137:13" pos:end="137:60"><name pos:start="137:13" pos:end="137:27"><name pos:start="137:13" pos:end="137:16">bits</name><operator pos:start="137:17" pos:end="137:18">-&gt;</operator><name pos:start="137:19" pos:end="137:24">g_coef</name><index pos:start="137:25" pos:end="137:27">[<expr pos:start="137:26" pos:end="137:26"><name pos:start="137:26" pos:end="137:26">i</name></expr>]</index></name> <operator pos:start="137:29" pos:end="137:29">=</operator> <call pos:start="137:31" pos:end="137:60"><name pos:start="137:31" pos:end="137:38">get_bits</name><argument_list pos:start="137:39" pos:end="137:60">(<argument pos:start="137:40" pos:end="137:42"><expr pos:start="137:40" pos:end="137:42"><operator pos:start="137:40" pos:end="137:40">&amp;</operator><name pos:start="137:41" pos:end="137:42">gb</name></expr></argument>, <argument pos:start="137:45" pos:end="137:59"><expr pos:start="137:45" pos:end="137:59"><name pos:start="137:45" pos:end="137:59"><name pos:start="137:45" pos:end="137:48">mtab</name><operator pos:start="137:49" pos:end="137:50">-&gt;</operator><name pos:start="137:51" pos:end="137:59">pgain_bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <return pos:start="145:5" pos:end="145:13">return <expr pos:start="145:12" pos:end="145:12"><literal type="number" pos:start="145:12" pos:end="145:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
