<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22566.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">ff_h2645_packet_split</name><parameter_list pos:start="1:26" pos:end="5:50">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><name pos:start="1:27" pos:end="1:37">H2645Packet</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">pkt</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">buf</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:74"><decl pos:start="1:65" pos:end="1:74"><type pos:start="1:65" pos:end="1:74"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:74">length</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:38"><decl pos:start="3:27" pos:end="3:38"><type pos:start="3:27" pos:end="3:38"><name pos:start="3:27" pos:end="3:30">void</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:38">logctx</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:52"><decl pos:start="3:41" pos:end="3:52"><type pos:start="3:41" pos:end="3:52"><name pos:start="3:41" pos:end="3:43">int</name></type> <name pos:start="3:45" pos:end="3:52">is_nalff</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:73"><decl pos:start="3:55" pos:end="3:73"><type pos:start="3:55" pos:end="3:73"><name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:73">nal_length_size</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:49"><decl pos:start="5:27" pos:end="5:49"><type pos:start="5:27" pos:end="5:49"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:30">enum</name> <name pos:start="5:32" pos:end="5:40">AVCodecID</name></name></type> <name pos:start="5:42" pos:end="5:49">codec_id</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="215:1">{<block_content pos:start="9:5" pos:end="213:13">

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">consumed</name></decl>, <decl pos:start="9:19" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:21">ret</name> <init pos:start="9:23" pos:end="9:25">= <expr pos:start="9:25" pos:end="9:25"><literal type="number" pos:start="9:25" pos:end="9:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:60"><decl pos:start="11:5" pos:end="11:59"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:27">next_avc</name> <init pos:start="11:29" pos:end="11:59">= <expr pos:start="11:31" pos:end="11:59"><name pos:start="11:31" pos:end="11:33">buf</name> <operator pos:start="11:35" pos:end="11:35">+</operator> <operator pos:start="11:37" pos:end="11:37">(</operator><ternary pos:start="11:38" pos:end="11:58"><condition pos:start="11:38" pos:end="11:47"><expr pos:start="11:38" pos:end="11:45"><name pos:start="11:38" pos:end="11:45">is_nalff</name></expr> ?</condition><then pos:start="11:49" pos:end="11:49"> <expr pos:start="11:49" pos:end="11:49"><literal type="number" pos:start="11:49" pos:end="11:49">0</literal></expr> </then><else pos:start="11:51" pos:end="11:58">: <expr pos:start="11:53" pos:end="11:58"><name pos:start="11:53" pos:end="11:58">length</name></expr></else></ternary><operator pos:start="11:59" pos:end="11:59">)</operator></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:21"><expr pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:7">pkt</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:16">nb_nals</name></name> <operator pos:start="15:18" pos:end="15:18">=</operator> <literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr>;</expr_stmt>

    <while pos:start="17:5" pos:end="209:5">while <condition pos:start="17:11" pos:end="17:23">(<expr pos:start="17:12" pos:end="17:22"><name pos:start="17:12" pos:end="17:17">length</name> <operator pos:start="17:19" pos:end="17:20">&gt;=</operator> <literal type="number" pos:start="17:22" pos:end="17:22">4</literal></expr>)</condition> <block pos:start="17:25" pos:end="209:5">{<block_content pos:start="19:9" pos:end="207:27">

        <decl_stmt pos:start="19:9" pos:end="19:22"><decl pos:start="19:9" pos:end="19:21"><type pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:16">H2645NAL</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:21">nal</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:31"><decl pos:start="21:9" pos:end="21:30"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:26">extract_length</name> <init pos:start="21:28" pos:end="21:30">= <expr pos:start="21:30" pos:end="21:30"><literal type="number" pos:start="21:30" pos:end="21:30">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:36"><decl pos:start="23:9" pos:end="23:35"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:31">skip_trailing_zeros</name> <init pos:start="23:33" pos:end="23:35">= <expr pos:start="23:35" pos:end="23:35"><literal type="number" pos:start="23:35" pos:end="23:35">1</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="27:9" pos:end="41:11">/*

         * Only parse an AVC1 length field if one is expected at the current

         * buffer position. There are unfortunately streams with multiple

         * NAL units covered by the length field. Those NAL units are delimited

         * by Annex B start code prefixes. ff_h2645_extract_rbsp() detects it

         * correctly and consumes only the first NAL unit. The additional NAL

         * units are handled here in the Annex B parsing code.

         */</comment>

        <if_stmt pos:start="43:9" pos:end="119:9"><if pos:start="43:9" pos:end="69:9">if <condition pos:start="43:12" pos:end="43:28">(<expr pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:15">buf</name> <operator pos:start="43:17" pos:end="43:18">==</operator> <name pos:start="43:20" pos:end="43:27">next_avc</name></expr>)</condition> <block pos:start="43:30" pos:end="69:9">{<block_content pos:start="45:13" pos:end="67:44">

            <decl_stmt pos:start="45:13" pos:end="45:18"><decl pos:start="45:13" pos:end="45:17"><type pos:start="45:13" pos:end="45:15"><name pos:start="45:13" pos:end="45:15">int</name></type> <name pos:start="45:17" pos:end="45:17">i</name></decl>;</decl_stmt>

            <for pos:start="47:13" pos:end="49:64">for <control pos:start="47:17" pos:end="47:49">(<init pos:start="47:18" pos:end="47:23"><expr pos:start="47:18" pos:end="47:22"><name pos:start="47:18" pos:end="47:18">i</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">0</literal></expr>;</init> <condition pos:start="47:25" pos:end="47:44"><expr pos:start="47:25" pos:end="47:43"><name pos:start="47:25" pos:end="47:25">i</name> <operator pos:start="47:27" pos:end="47:27">&lt;</operator> <name pos:start="47:29" pos:end="47:43">nal_length_size</name></expr>;</condition> <incr pos:start="47:46" pos:end="47:48"><expr pos:start="47:46" pos:end="47:48"><name pos:start="47:46" pos:end="47:46">i</name><operator pos:start="47:47" pos:end="47:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="49:17" pos:end="49:64"><block_content pos:start="49:17" pos:end="49:64">

                <expr_stmt pos:start="49:17" pos:end="49:64"><expr pos:start="49:17" pos:end="49:63"><name pos:start="49:17" pos:end="49:30">extract_length</name> <operator pos:start="49:32" pos:end="49:32">=</operator> <operator pos:start="49:34" pos:end="49:34">(</operator><name pos:start="49:35" pos:end="49:48">extract_length</name> <operator pos:start="49:50" pos:end="49:51">&lt;&lt;</operator> <literal type="number" pos:start="49:53" pos:end="49:53">8</literal><operator pos:start="49:54" pos:end="49:54">)</operator> <operator pos:start="49:56" pos:end="49:56">|</operator> <name pos:start="49:58" pos:end="49:63"><name pos:start="49:58" pos:end="49:60">buf</name><index pos:start="49:61" pos:end="49:63">[<expr pos:start="49:62" pos:end="49:62"><name pos:start="49:62" pos:end="49:62">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



            <if_stmt pos:start="53:13" pos:end="59:13"><if pos:start="53:13" pos:end="59:13">if <condition pos:start="53:16" pos:end="53:40">(<expr pos:start="53:17" pos:end="53:39"><name pos:start="53:17" pos:end="53:30">extract_length</name> <operator pos:start="53:32" pos:end="53:32">&gt;</operator> <name pos:start="53:34" pos:end="53:39">length</name></expr>)</condition> <block pos:start="53:42" pos:end="59:13">{<block_content pos:start="55:17" pos:end="57:43">

                <expr_stmt pos:start="55:17" pos:end="55:73"><expr pos:start="55:17" pos:end="55:72"><call pos:start="55:17" pos:end="55:72"><name pos:start="55:17" pos:end="55:22">av_log</name><argument_list pos:start="55:23" pos:end="55:72">(<argument pos:start="55:24" pos:end="55:29"><expr pos:start="55:24" pos:end="55:29"><name pos:start="55:24" pos:end="55:29">logctx</name></expr></argument>, <argument pos:start="55:32" pos:end="55:43"><expr pos:start="55:32" pos:end="55:43"><name pos:start="55:32" pos:end="55:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:46" pos:end="55:71"><expr pos:start="55:46" pos:end="55:71"><literal type="string" pos:start="55:46" pos:end="55:71">"Invalid NAL unit size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="57:17" pos:end="57:43">return <expr pos:start="57:24" pos:end="57:42"><name pos:start="57:24" pos:end="57:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:39"><expr pos:start="61:13" pos:end="61:38"><name pos:start="61:13" pos:end="61:15">buf</name>     <operator pos:start="61:21" pos:end="61:22">+=</operator> <name pos:start="61:24" pos:end="61:38">nal_length_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:39"><expr pos:start="63:13" pos:end="63:38"><name pos:start="63:13" pos:end="63:18">length</name>  <operator pos:start="63:21" pos:end="63:22">-=</operator> <name pos:start="63:24" pos:end="63:38">nal_length_size</name></expr>;</expr_stmt>

            <comment type="line" pos:start="65:13" pos:end="65:55">// keep track of the next AVC1 length field</comment>

            <expr_stmt pos:start="67:13" pos:end="67:44"><expr pos:start="67:13" pos:end="67:43"><name pos:start="67:13" pos:end="67:20">next_avc</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <name pos:start="67:24" pos:end="67:26">buf</name> <operator pos:start="67:28" pos:end="67:28">+</operator> <name pos:start="67:30" pos:end="67:43">extract_length</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="69:11" pos:end="119:9">else <block pos:start="69:16" pos:end="119:9">{<block_content pos:start="79:13" pos:end="117:13">

            <comment type="block" pos:start="71:13" pos:end="77:15">/*

             * expected to return immediately except for streams with mixed

             * NAL unit coding

             */</comment>

            <decl_stmt pos:start="79:13" pos:end="79:64"><decl pos:start="79:13" pos:end="79:63"><type pos:start="79:13" pos:end="79:15"><name pos:start="79:13" pos:end="79:15">int</name></type> <name pos:start="79:17" pos:end="79:25">buf_index</name> <init pos:start="79:27" pos:end="79:63">= <expr pos:start="79:29" pos:end="79:63"><call pos:start="79:29" pos:end="79:63"><name pos:start="79:29" pos:end="79:48">find_next_start_code</name><argument_list pos:start="79:49" pos:end="79:63">(<argument pos:start="79:50" pos:end="79:52"><expr pos:start="79:50" pos:end="79:52"><name pos:start="79:50" pos:end="79:52">buf</name></expr></argument>, <argument pos:start="79:55" pos:end="79:62"><expr pos:start="79:55" pos:end="79:62"><name pos:start="79:55" pos:end="79:62">next_avc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="83:13" pos:end="83:32"><expr pos:start="83:13" pos:end="83:31"><name pos:start="83:13" pos:end="83:15">buf</name>    <operator pos:start="83:20" pos:end="83:21">+=</operator> <name pos:start="83:23" pos:end="83:31">buf_index</name></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:32"><expr pos:start="85:13" pos:end="85:31"><name pos:start="85:13" pos:end="85:18">length</name> <operator pos:start="85:20" pos:end="85:21">-=</operator> <name pos:start="85:23" pos:end="85:31">buf_index</name></expr>;</expr_stmt>



            <comment type="block" pos:start="89:13" pos:end="95:15">/*

             * break if an AVC1 length field is expected at the current buffer

             * position

             */</comment>

            <if_stmt pos:start="97:13" pos:end="99:25"><if pos:start="97:13" pos:end="99:25">if <condition pos:start="97:16" pos:end="97:32">(<expr pos:start="97:17" pos:end="97:31"><name pos:start="97:17" pos:end="97:19">buf</name> <operator pos:start="97:21" pos:end="97:22">==</operator> <name pos:start="97:24" pos:end="97:31">next_avc</name></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:25"><block_content pos:start="99:17" pos:end="99:25">

                <continue pos:start="99:17" pos:end="99:25">continue;</continue></block_content></block></if></if_stmt>



            <if_stmt pos:start="103:13" pos:end="117:13"><if pos:start="103:13" pos:end="107:13">if <condition pos:start="103:16" pos:end="103:27">(<expr pos:start="103:17" pos:end="103:26"><name pos:start="103:17" pos:end="103:22">length</name> <operator pos:start="103:24" pos:end="103:24">&gt;</operator> <literal type="number" pos:start="103:26" pos:end="103:26">0</literal></expr>)</condition> <block pos:start="103:29" pos:end="107:13">{<block_content pos:start="105:17" pos:end="105:40">

                <expr_stmt pos:start="105:17" pos:end="105:40"><expr pos:start="105:17" pos:end="105:39"><name pos:start="105:17" pos:end="105:30">extract_length</name> <operator pos:start="105:32" pos:end="105:32">=</operator> <name pos:start="105:34" pos:end="105:39">length</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="107:15" pos:end="113:13">else if <condition pos:start="107:23" pos:end="107:41">(<expr pos:start="107:24" pos:end="107:40"><name pos:start="107:24" pos:end="107:35"><name pos:start="107:24" pos:end="107:26">pkt</name><operator pos:start="107:27" pos:end="107:28">-&gt;</operator><name pos:start="107:29" pos:end="107:35">nb_nals</name></name> <operator pos:start="107:37" pos:end="107:38">==</operator> <literal type="number" pos:start="107:40" pos:end="107:40">0</literal></expr>)</condition> <block pos:start="107:43" pos:end="113:13">{<block_content pos:start="109:17" pos:end="111:43">

                <expr_stmt pos:start="109:17" pos:end="109:68"><expr pos:start="109:17" pos:end="109:67"><call pos:start="109:17" pos:end="109:67"><name pos:start="109:17" pos:end="109:22">av_log</name><argument_list pos:start="109:23" pos:end="109:67">(<argument pos:start="109:24" pos:end="109:29"><expr pos:start="109:24" pos:end="109:29"><name pos:start="109:24" pos:end="109:29">logctx</name></expr></argument>, <argument pos:start="109:32" pos:end="109:43"><expr pos:start="109:32" pos:end="109:43"><name pos:start="109:32" pos:end="109:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:46" pos:end="109:66"><expr pos:start="109:46" pos:end="109:66"><literal type="string" pos:start="109:46" pos:end="109:66">"No NAL unit found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="111:17" pos:end="111:43">return <expr pos:start="111:24" pos:end="111:42"><name pos:start="111:24" pos:end="111:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if> <else pos:start="113:15" pos:end="117:13">else <block pos:start="113:20" pos:end="117:13">{<block_content pos:start="115:17" pos:end="115:22">

                <break pos:start="115:17" pos:end="115:22">break;</break>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="123:9" pos:end="143:9"><if pos:start="123:9" pos:end="143:9">if <condition pos:start="123:12" pos:end="123:51">(<expr pos:start="123:13" pos:end="123:50"><name pos:start="123:13" pos:end="123:31"><name pos:start="123:13" pos:end="123:15">pkt</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:31">nals_allocated</name></name> <operator pos:start="123:33" pos:end="123:33">&lt;</operator> <name pos:start="123:35" pos:end="123:46"><name pos:start="123:35" pos:end="123:37">pkt</name><operator pos:start="123:38" pos:end="123:39">-&gt;</operator><name pos:start="123:40" pos:end="123:46">nb_nals</name></name> <operator pos:start="123:48" pos:end="123:48">+</operator> <literal type="number" pos:start="123:50" pos:end="123:50">1</literal></expr>)</condition> <block pos:start="123:53" pos:end="143:9">{<block_content pos:start="125:13" pos:end="141:43">

            <decl_stmt pos:start="125:13" pos:end="125:51"><decl pos:start="125:13" pos:end="125:50"><type pos:start="125:13" pos:end="125:15"><name pos:start="125:13" pos:end="125:15">int</name></type> <name pos:start="125:17" pos:end="125:24">new_size</name> <init pos:start="125:26" pos:end="125:50">= <expr pos:start="125:28" pos:end="125:50"><name pos:start="125:28" pos:end="125:46"><name pos:start="125:28" pos:end="125:30">pkt</name><operator pos:start="125:31" pos:end="125:32">-&gt;</operator><name pos:start="125:33" pos:end="125:46">nals_allocated</name></name> <operator pos:start="125:48" pos:end="125:48">+</operator> <literal type="number" pos:start="125:50" pos:end="125:50">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="127:13" pos:end="127:80"><decl pos:start="127:13" pos:end="127:79"><type pos:start="127:13" pos:end="127:22"><name pos:start="127:13" pos:end="127:20">H2645NAL</name> <modifier pos:start="127:22" pos:end="127:22">*</modifier></type><name pos:start="127:23" pos:end="127:25">tmp</name> <init pos:start="127:27" pos:end="127:79">= <expr pos:start="127:29" pos:end="127:79"><call pos:start="127:29" pos:end="127:79"><name pos:start="127:29" pos:end="127:44">av_realloc_array</name><argument_list pos:start="127:45" pos:end="127:79">(<argument pos:start="127:46" pos:end="127:54"><expr pos:start="127:46" pos:end="127:54"><name pos:start="127:46" pos:end="127:54"><name pos:start="127:46" pos:end="127:48">pkt</name><operator pos:start="127:49" pos:end="127:50">-&gt;</operator><name pos:start="127:51" pos:end="127:54">nals</name></name></expr></argument>, <argument pos:start="127:57" pos:end="127:64"><expr pos:start="127:57" pos:end="127:64"><name pos:start="127:57" pos:end="127:64">new_size</name></expr></argument>, <argument pos:start="127:67" pos:end="127:78"><expr pos:start="127:67" pos:end="127:78"><sizeof pos:start="127:67" pos:end="127:78">sizeof<argument_list pos:start="127:73" pos:end="127:78">(<argument pos:start="127:74" pos:end="127:77"><expr pos:start="127:74" pos:end="127:77"><operator pos:start="127:74" pos:end="127:74">*</operator><name pos:start="127:75" pos:end="127:77">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="129:13" pos:end="131:39"><if pos:start="129:13" pos:end="131:39">if <condition pos:start="129:16" pos:end="129:21">(<expr pos:start="129:17" pos:end="129:20"><operator pos:start="129:17" pos:end="129:17">!</operator><name pos:start="129:18" pos:end="129:20">tmp</name></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="131:39"><block_content pos:start="131:17" pos:end="131:39">

                <return pos:start="131:17" pos:end="131:39">return <expr pos:start="131:24" pos:end="131:38"><call pos:start="131:24" pos:end="131:38"><name pos:start="131:24" pos:end="131:30">AVERROR</name><argument_list pos:start="131:31" pos:end="131:38">(<argument pos:start="131:32" pos:end="131:37"><expr pos:start="131:32" pos:end="131:37"><name pos:start="131:32" pos:end="131:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="135:13" pos:end="135:28"><expr pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:21"><name pos:start="135:13" pos:end="135:15">pkt</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:21">nals</name></name> <operator pos:start="135:23" pos:end="135:23">=</operator> <name pos:start="135:25" pos:end="135:27">tmp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="139:68"><expr pos:start="137:13" pos:end="139:67"><call pos:start="137:13" pos:end="139:67"><name pos:start="137:13" pos:end="137:18">memset</name><argument_list pos:start="137:19" pos:end="139:67">(<argument pos:start="137:20" pos:end="137:50"><expr pos:start="137:20" pos:end="137:50"><name pos:start="137:20" pos:end="137:28"><name pos:start="137:20" pos:end="137:22">pkt</name><operator pos:start="137:23" pos:end="137:24">-&gt;</operator><name pos:start="137:25" pos:end="137:28">nals</name></name> <operator pos:start="137:30" pos:end="137:30">+</operator> <name pos:start="137:32" pos:end="137:50"><name pos:start="137:32" pos:end="137:34">pkt</name><operator pos:start="137:35" pos:end="137:36">-&gt;</operator><name pos:start="137:37" pos:end="137:50">nals_allocated</name></name></expr></argument>, <argument pos:start="137:53" pos:end="137:53"><expr pos:start="137:53" pos:end="137:53"><literal type="number" pos:start="137:53" pos:end="137:53">0</literal></expr></argument>,

                   <argument pos:start="139:20" pos:end="139:66"><expr pos:start="139:20" pos:end="139:66"><operator pos:start="139:20" pos:end="139:20">(</operator><name pos:start="139:21" pos:end="139:28">new_size</name> <operator pos:start="139:30" pos:end="139:30">-</operator> <name pos:start="139:32" pos:end="139:50"><name pos:start="139:32" pos:end="139:34">pkt</name><operator pos:start="139:35" pos:end="139:36">-&gt;</operator><name pos:start="139:37" pos:end="139:50">nals_allocated</name></name><operator pos:start="139:51" pos:end="139:51">)</operator> <operator pos:start="139:53" pos:end="139:53">*</operator> <sizeof pos:start="139:55" pos:end="139:66">sizeof<argument_list pos:start="139:61" pos:end="139:66">(<argument pos:start="139:62" pos:end="139:65"><expr pos:start="139:62" pos:end="139:65"><operator pos:start="139:62" pos:end="139:62">*</operator><name pos:start="139:63" pos:end="139:65">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:43"><expr pos:start="141:13" pos:end="141:42"><name pos:start="141:13" pos:end="141:31"><name pos:start="141:13" pos:end="141:15">pkt</name><operator pos:start="141:16" pos:end="141:17">-&gt;</operator><name pos:start="141:18" pos:end="141:31">nals_allocated</name></name> <operator pos:start="141:33" pos:end="141:33">=</operator> <name pos:start="141:35" pos:end="141:42">new_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:41"><expr pos:start="145:9" pos:end="145:40"><name pos:start="145:9" pos:end="145:11">nal</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <operator pos:start="145:15" pos:end="145:15">&amp;</operator><name pos:start="145:16" pos:end="145:40"><name pos:start="145:16" pos:end="145:18">pkt</name><operator pos:start="145:19" pos:end="145:20">-&gt;</operator><name pos:start="145:21" pos:end="145:24">nals</name><index pos:start="145:25" pos:end="145:40">[<expr pos:start="145:26" pos:end="145:39"><name pos:start="145:26" pos:end="145:37"><name pos:start="145:26" pos:end="145:28">pkt</name><operator pos:start="145:29" pos:end="145:30">-&gt;</operator><name pos:start="145:31" pos:end="145:37">nb_nals</name></name><operator pos:start="145:38" pos:end="145:39">++</operator></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:67"><expr pos:start="149:9" pos:end="149:66"><name pos:start="149:9" pos:end="149:16">consumed</name> <operator pos:start="149:18" pos:end="149:18">=</operator> <call pos:start="149:20" pos:end="149:66"><name pos:start="149:20" pos:end="149:40">ff_h2645_extract_rbsp</name><argument_list pos:start="149:41" pos:end="149:66">(<argument pos:start="149:42" pos:end="149:44"><expr pos:start="149:42" pos:end="149:44"><name pos:start="149:42" pos:end="149:44">buf</name></expr></argument>, <argument pos:start="149:47" pos:end="149:60"><expr pos:start="149:47" pos:end="149:60"><name pos:start="149:47" pos:end="149:60">extract_length</name></expr></argument>, <argument pos:start="149:63" pos:end="149:65"><expr pos:start="149:63" pos:end="149:65"><name pos:start="149:63" pos:end="149:65">nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="153:28"><if pos:start="151:9" pos:end="153:28">if <condition pos:start="151:12" pos:end="151:25">(<expr pos:start="151:13" pos:end="151:24"><name pos:start="151:13" pos:end="151:20">consumed</name> <operator pos:start="151:22" pos:end="151:22">&lt;</operator> <literal type="number" pos:start="151:24" pos:end="151:24">0</literal></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:28"><block_content pos:start="153:13" pos:end="153:28">

            <return pos:start="153:13" pos:end="153:28">return <expr pos:start="153:20" pos:end="153:27"><name pos:start="153:20" pos:end="153:27">consumed</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="157:9" pos:end="157:34">/* see commit 3566042a0 */</comment>

        <if_stmt pos:start="159:9" pos:end="165:36"><if pos:start="159:9" pos:end="165:36">if <condition pos:start="159:12" pos:end="163:67">(<expr pos:start="159:13" pos:end="163:66"><name pos:start="159:13" pos:end="159:20">consumed</name> <operator pos:start="159:22" pos:end="159:22">&lt;</operator> <name pos:start="159:24" pos:end="159:29">length</name> <operator pos:start="159:31" pos:end="159:31">-</operator> <literal type="number" pos:start="159:33" pos:end="159:33">3</literal> <operator pos:start="159:35" pos:end="159:36">&amp;&amp;</operator>

            <name pos:start="161:13" pos:end="161:25"><name pos:start="161:13" pos:end="161:15">buf</name><index pos:start="161:16" pos:end="161:25">[<expr pos:start="161:17" pos:end="161:24"><name pos:start="161:17" pos:end="161:24">consumed</name></expr>]</index></name>     <operator pos:start="161:31" pos:end="161:32">==</operator> <literal type="number" pos:start="161:34" pos:end="161:37">0x00</literal> <operator pos:start="161:39" pos:end="161:40">&amp;&amp;</operator> <name pos:start="161:42" pos:end="161:58"><name pos:start="161:42" pos:end="161:44">buf</name><index pos:start="161:45" pos:end="161:58">[<expr pos:start="161:46" pos:end="161:57"><name pos:start="161:46" pos:end="161:53">consumed</name> <operator pos:start="161:55" pos:end="161:55">+</operator> <literal type="number" pos:start="161:57" pos:end="161:57">1</literal></expr>]</index></name> <operator pos:start="161:60" pos:end="161:61">==</operator> <literal type="number" pos:start="161:63" pos:end="161:66">0x00</literal> <operator pos:start="161:68" pos:end="161:69">&amp;&amp;</operator>

            <name pos:start="163:13" pos:end="163:29"><name pos:start="163:13" pos:end="163:15">buf</name><index pos:start="163:16" pos:end="163:29">[<expr pos:start="163:17" pos:end="163:28"><name pos:start="163:17" pos:end="163:24">consumed</name> <operator pos:start="163:26" pos:end="163:26">+</operator> <literal type="number" pos:start="163:28" pos:end="163:28">2</literal></expr>]</index></name> <operator pos:start="163:31" pos:end="163:32">==</operator> <literal type="number" pos:start="163:34" pos:end="163:37">0x01</literal> <operator pos:start="163:39" pos:end="163:40">&amp;&amp;</operator> <name pos:start="163:42" pos:end="163:58"><name pos:start="163:42" pos:end="163:44">buf</name><index pos:start="163:45" pos:end="163:58">[<expr pos:start="163:46" pos:end="163:57"><name pos:start="163:46" pos:end="163:53">consumed</name> <operator pos:start="163:55" pos:end="163:55">+</operator> <literal type="number" pos:start="163:57" pos:end="163:57">3</literal></expr>]</index></name> <operator pos:start="163:60" pos:end="163:61">==</operator> <literal type="number" pos:start="163:63" pos:end="163:66">0xE0</literal></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:36"><block_content pos:start="165:13" pos:end="165:36">

            <expr_stmt pos:start="165:13" pos:end="165:36"><expr pos:start="165:13" pos:end="165:35"><name pos:start="165:13" pos:end="165:31">skip_trailing_zeros</name> <operator pos:start="165:33" pos:end="165:33">=</operator> <literal type="number" pos:start="165:35" pos:end="165:35">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:66"><expr pos:start="169:9" pos:end="169:65"><name pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:11">nal</name><operator pos:start="169:12" pos:end="169:13">-&gt;</operator><name pos:start="169:14" pos:end="169:22">size_bits</name></name> <operator pos:start="169:24" pos:end="169:24">=</operator> <call pos:start="169:26" pos:end="169:65"><name pos:start="169:26" pos:end="169:39">get_bit_length</name><argument_list pos:start="169:40" pos:end="169:65">(<argument pos:start="169:41" pos:end="169:43"><expr pos:start="169:41" pos:end="169:43"><name pos:start="169:41" pos:end="169:43">nal</name></expr></argument>, <argument pos:start="169:46" pos:end="169:64"><expr pos:start="169:46" pos:end="169:64"><name pos:start="169:46" pos:end="169:64">skip_trailing_zeros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="173:9" pos:end="173:65"><expr pos:start="173:9" pos:end="173:64"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <call pos:start="173:15" pos:end="173:64"><name pos:start="173:15" pos:end="173:27">init_get_bits</name><argument_list pos:start="173:28" pos:end="173:64">(<argument pos:start="173:29" pos:end="173:36"><expr pos:start="173:29" pos:end="173:36"><operator pos:start="173:29" pos:end="173:29">&amp;</operator><name pos:start="173:30" pos:end="173:36"><name pos:start="173:30" pos:end="173:32">nal</name><operator pos:start="173:33" pos:end="173:34">-&gt;</operator><name pos:start="173:35" pos:end="173:36">gb</name></name></expr></argument>, <argument pos:start="173:39" pos:end="173:47"><expr pos:start="173:39" pos:end="173:47"><name pos:start="173:39" pos:end="173:47"><name pos:start="173:39" pos:end="173:41">nal</name><operator pos:start="173:42" pos:end="173:43">-&gt;</operator><name pos:start="173:44" pos:end="173:47">data</name></name></expr></argument>, <argument pos:start="173:50" pos:end="173:63"><expr pos:start="173:50" pos:end="173:63"><name pos:start="173:50" pos:end="173:63"><name pos:start="173:50" pos:end="173:52">nal</name><operator pos:start="173:53" pos:end="173:54">-&gt;</operator><name pos:start="173:55" pos:end="173:63">size_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="175:9" pos:end="177:23"><if pos:start="175:9" pos:end="177:23">if <condition pos:start="175:12" pos:end="175:20">(<expr pos:start="175:13" pos:end="175:19"><name pos:start="175:13" pos:end="175:15">ret</name> <operator pos:start="175:17" pos:end="175:17">&lt;</operator> <literal type="number" pos:start="175:19" pos:end="175:19">0</literal></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="177:23"><block_content pos:start="177:13" pos:end="177:23">

            <return pos:start="177:13" pos:end="177:23">return <expr pos:start="177:20" pos:end="177:22"><name pos:start="177:20" pos:end="177:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="181:9" pos:end="187:53"><if pos:start="181:9" pos:end="183:53">if <condition pos:start="181:12" pos:end="181:41">(<expr pos:start="181:13" pos:end="181:40"><name pos:start="181:13" pos:end="181:20">codec_id</name> <operator pos:start="181:22" pos:end="181:23">==</operator> <name pos:start="181:25" pos:end="181:40">AV_CODEC_ID_HEVC</name></expr>)</condition><block type="pseudo" pos:start="183:13" pos:end="183:53"><block_content pos:start="183:13" pos:end="183:53">

            <expr_stmt pos:start="183:13" pos:end="183:53"><expr pos:start="183:13" pos:end="183:52"><name pos:start="183:13" pos:end="183:15">ret</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <call pos:start="183:19" pos:end="183:52"><name pos:start="183:19" pos:end="183:39">hevc_parse_nal_header</name><argument_list pos:start="183:40" pos:end="183:52">(<argument pos:start="183:41" pos:end="183:43"><expr pos:start="183:41" pos:end="183:43"><name pos:start="183:41" pos:end="183:43">nal</name></expr></argument>, <argument pos:start="183:46" pos:end="183:51"><expr pos:start="183:46" pos:end="183:51"><name pos:start="183:46" pos:end="183:51">logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="185:9" pos:end="187:53">else<block type="pseudo" pos:start="187:13" pos:end="187:53"><block_content pos:start="187:13" pos:end="187:53">

            <expr_stmt pos:start="187:13" pos:end="187:53"><expr pos:start="187:13" pos:end="187:52"><name pos:start="187:13" pos:end="187:15">ret</name> <operator pos:start="187:17" pos:end="187:17">=</operator> <call pos:start="187:19" pos:end="187:52"><name pos:start="187:19" pos:end="187:39">h264_parse_nal_header</name><argument_list pos:start="187:40" pos:end="187:52">(<argument pos:start="187:41" pos:end="187:43"><expr pos:start="187:41" pos:end="187:43"><name pos:start="187:41" pos:end="187:43">nal</name></expr></argument>, <argument pos:start="187:46" pos:end="187:51"><expr pos:start="187:46" pos:end="187:51"><name pos:start="187:46" pos:end="187:51">logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="189:9" pos:end="201:9"><if pos:start="189:9" pos:end="201:9">if <condition pos:start="189:12" pos:end="189:21">(<expr pos:start="189:13" pos:end="189:20"><name pos:start="189:13" pos:end="189:15">ret</name> <operator pos:start="189:17" pos:end="189:18">&lt;=</operator> <literal type="number" pos:start="189:20" pos:end="189:20">0</literal></expr>)</condition> <block pos:start="189:23" pos:end="201:9">{<block_content pos:start="191:13" pos:end="199:27">

            <if_stmt pos:start="191:13" pos:end="197:13"><if pos:start="191:13" pos:end="197:13">if <condition pos:start="191:16" pos:end="191:24">(<expr pos:start="191:17" pos:end="191:23"><name pos:start="191:17" pos:end="191:19">ret</name> <operator pos:start="191:21" pos:end="191:21">&lt;</operator> <literal type="number" pos:start="191:23" pos:end="191:23">0</literal></expr>)</condition> <block pos:start="191:26" pos:end="197:13">{<block_content pos:start="193:17" pos:end="195:34">

                <expr_stmt pos:start="193:17" pos:end="195:34"><expr pos:start="193:17" pos:end="195:33"><call pos:start="193:17" pos:end="195:33"><name pos:start="193:17" pos:end="193:22">av_log</name><argument_list pos:start="193:23" pos:end="195:33">(<argument pos:start="193:24" pos:end="193:29"><expr pos:start="193:24" pos:end="193:29"><name pos:start="193:24" pos:end="193:29">logctx</name></expr></argument>, <argument pos:start="193:32" pos:end="193:43"><expr pos:start="193:32" pos:end="193:43"><name pos:start="193:32" pos:end="193:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="193:46" pos:end="193:79"><expr pos:start="193:46" pos:end="193:79"><literal type="string" pos:start="193:46" pos:end="193:79">"Invalid NAL unit %d, skipping.\n"</literal></expr></argument>,

                       <argument pos:start="195:24" pos:end="195:32"><expr pos:start="195:24" pos:end="195:32"><name pos:start="195:24" pos:end="195:32"><name pos:start="195:24" pos:end="195:26">nal</name><operator pos:start="195:27" pos:end="195:28">-&gt;</operator><name pos:start="195:29" pos:end="195:32">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:27"><expr pos:start="199:13" pos:end="199:26"><name pos:start="199:13" pos:end="199:24"><name pos:start="199:13" pos:end="199:15">pkt</name><operator pos:start="199:16" pos:end="199:17">-&gt;</operator><name pos:start="199:18" pos:end="199:24">nb_nals</name></name><operator pos:start="199:25" pos:end="199:26">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="205:9" pos:end="205:27"><expr pos:start="205:9" pos:end="205:26"><name pos:start="205:9" pos:end="205:11">buf</name>    <operator pos:start="205:16" pos:end="205:17">+=</operator> <name pos:start="205:19" pos:end="205:26">consumed</name></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:27"><expr pos:start="207:9" pos:end="207:26"><name pos:start="207:9" pos:end="207:14">length</name> <operator pos:start="207:16" pos:end="207:17">-=</operator> <name pos:start="207:19" pos:end="207:26">consumed</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="213:5" pos:end="213:13">return <expr pos:start="213:12" pos:end="213:12"><literal type="number" pos:start="213:12" pos:end="213:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
