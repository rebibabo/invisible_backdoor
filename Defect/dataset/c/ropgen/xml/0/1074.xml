<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1074.c" pos:tabs="8"><decl_stmt pos:start="1:1" pos:end="119:1"><decl pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:20">CALLBACK</name></type> <name pos:start="1:22" pos:end="1:39">host_alarm_handler</name><argument_list pos:start="1:40" pos:end="8:0">(<argument pos:start="1:41" pos:end="1:53"><expr pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:44">UINT</name> <name pos:start="1:46" pos:end="1:53">uTimerID</name></expr></argument>, <argument pos:start="1:56" pos:end="1:64"><expr pos:start="1:56" pos:end="1:64"><name pos:start="1:56" pos:end="1:59">UINT</name> <name pos:start="1:61" pos:end="1:64">uMsg</name></expr></argument>,

                                        <argument pos:start="3:41" pos:end="3:56"><expr pos:start="3:41" pos:end="3:56"><name pos:start="3:41" pos:end="3:49">DWORD_PTR</name> <name pos:start="3:51" pos:end="3:56">dwUser</name></expr></argument>, <argument pos:start="3:59" pos:end="3:71"><expr pos:start="3:59" pos:end="3:71"><name pos:start="3:59" pos:end="3:67">DWORD_PTR</name> <name pos:start="3:69" pos:end="3:71">dw1</name></expr></argument>,

                                        <argument pos:start="5:41" pos:end="5:53"><expr pos:start="5:41" pos:end="5:53"><name pos:start="5:41" pos:end="5:49">DWORD_PTR</name> <name pos:start="5:51" pos:end="5:53">dw2</name></expr></argument>)</argument_list>

<cpp:else pos:start="7:1" pos:end="7:5">#<cpp:directive pos:start="7:2" pos:end="7:5">else</cpp:directive></cpp:else>

static <name pos:start="9:8" pos:end="9:11">void</name> <name pos:start="9:13" pos:end="9:30">host_alarm_handler</name><argument_list pos:start="9:31" pos:end="12:0">(<argument pos:start="9:32" pos:end="9:46"><expr pos:start="9:32" pos:end="9:46"><name pos:start="9:32" pos:end="9:34">int</name> <name pos:start="9:36" pos:end="9:46">host_signum</name></expr></argument>)</argument_list>

<cpp:endif pos:start="11:1" pos:end="11:6">#<cpp:directive pos:start="11:2" pos:end="11:6">endif</cpp:directive></cpp:endif>

<block pos:start="13:1" pos:end="119:1">{<block_content pos:start="73:5" pos:end="117:5">

<cpp:if pos:start="15:1" pos:end="15:5">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:5"><literal type="number" pos:start="15:5" pos:end="15:5">0</literal></expr></cpp:if>

<cpp:define pos:start="17:1" pos:end="17:22">#<cpp:directive pos:start="17:2" pos:end="17:7">define</cpp:directive> <cpp:macro pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:17">DISP_FREQ</name></cpp:macro> <cpp:value pos:start="17:19" pos:end="17:22">1000</cpp:value></cpp:define>

    {

        static int64_t delta_min = INT64_MAX;

        static int64_t delta_max, delta_cum, last_clock, delta, ti;

        static int count;

        ti = qemu_get_clock(vm_clock);

        if (last_clock != 0) {

            delta = ti - last_clock;

            if (delta &lt; delta_min)

                delta_min = delta;

            if (delta &gt; delta_max)

                delta_max = delta;

            delta_cum += delta;

            if (++count == DISP_FREQ) {

                printf("timer: min=%" PRId64 " us max=%" PRId64 " us avg=%" PRId64 " us avg_freq=%0.3f Hz\n",

                       muldiv64(delta_min, 1000000, ticks_per_sec),

                       muldiv64(delta_max, 1000000, ticks_per_sec),

                       muldiv64(delta_cum, 1000000 / DISP_FREQ, ticks_per_sec),

                       (double)ticks_per_sec / ((double)delta_cum / DISP_FREQ));

                count = 0;

                delta_min = INT64_MAX;

                delta_max = 0;

                delta_cum = 0;

            }

        }

        last_clock = ti;

    }

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="73:5" pos:end="117:5"><if pos:start="73:5" pos:end="117:5">if <condition pos:start="73:8" pos:end="83:53">(<expr pos:start="73:9" pos:end="83:52"><call pos:start="73:9" pos:end="73:39"><name pos:start="73:9" pos:end="73:26">alarm_has_dynticks</name><argument_list pos:start="73:27" pos:end="73:39">(<argument pos:start="73:28" pos:end="73:38"><expr pos:start="73:28" pos:end="73:38"><name pos:start="73:28" pos:end="73:38">alarm_timer</name></expr></argument>)</argument_list></call> <operator pos:start="73:41" pos:end="73:42">||</operator>

        <operator pos:start="75:9" pos:end="75:9">(</operator><operator pos:start="75:10" pos:end="75:10">!</operator><name pos:start="75:11" pos:end="75:20">use_icount</name> <operator pos:start="75:22" pos:end="75:23">&amp;&amp;</operator>

            <call pos:start="77:13" pos:end="79:56"><name pos:start="77:13" pos:end="77:30">qemu_timer_expired</name><argument_list pos:start="77:31" pos:end="79:56">(<argument pos:start="77:32" pos:end="77:64"><expr pos:start="77:32" pos:end="77:64"><name pos:start="77:32" pos:end="77:64"><name pos:start="77:32" pos:end="77:44">active_timers</name><index pos:start="77:45" pos:end="77:64">[<expr pos:start="77:46" pos:end="77:63"><name pos:start="77:46" pos:end="77:63">QEMU_TIMER_VIRTUAL</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="79:32" pos:end="79:55"><expr pos:start="79:32" pos:end="79:55"><call pos:start="79:32" pos:end="79:55"><name pos:start="79:32" pos:end="79:45">qemu_get_clock</name><argument_list pos:start="79:46" pos:end="79:55">(<argument pos:start="79:47" pos:end="79:54"><expr pos:start="79:47" pos:end="79:54"><name pos:start="79:47" pos:end="79:54">vm_clock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="79:57" pos:end="79:57">)</operator> <operator pos:start="79:59" pos:end="79:60">||</operator>

        <call pos:start="81:9" pos:end="83:52"><name pos:start="81:9" pos:end="81:26">qemu_timer_expired</name><argument_list pos:start="81:27" pos:end="83:52">(<argument pos:start="81:28" pos:end="81:61"><expr pos:start="81:28" pos:end="81:61"><name pos:start="81:28" pos:end="81:61"><name pos:start="81:28" pos:end="81:40">active_timers</name><index pos:start="81:41" pos:end="81:61">[<expr pos:start="81:42" pos:end="81:60"><name pos:start="81:42" pos:end="81:60">QEMU_TIMER_REALTIME</name></expr>]</index></name></expr></argument>,

                           <argument pos:start="83:28" pos:end="83:51"><expr pos:start="83:28" pos:end="83:51"><call pos:start="83:28" pos:end="83:51"><name pos:start="83:28" pos:end="83:41">qemu_get_clock</name><argument_list pos:start="83:42" pos:end="83:51">(<argument pos:start="83:43" pos:end="83:50"><expr pos:start="83:43" pos:end="83:50"><name pos:start="83:43" pos:end="83:50">rt_clock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:55" pos:end="117:5">{<block_content pos:start="85:9" pos:end="115:28">

        <expr_stmt pos:start="85:9" pos:end="85:31"><expr pos:start="85:9" pos:end="85:30"><call pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:28">qemu_event_increment</name><argument_list pos:start="85:29" pos:end="85:30">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="92:0"><expr pos:start="87:9" pos:end="87:48"><name pos:start="87:9" pos:end="87:26"><name pos:start="87:9" pos:end="87:19">alarm_timer</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:26">flags</name></name> <operator pos:start="87:28" pos:end="87:29">|=</operator> <name pos:start="87:31" pos:end="87:48">ALARM_FLAG_EXPIRED</name></expr>;</expr_stmt>



<cpp:ifndef pos:start="91:1" pos:end="91:23">#<cpp:directive pos:start="91:2" pos:end="91:7">ifndef</cpp:directive> <name pos:start="91:9" pos:end="91:23">CONFIG_IOTHREAD</name></cpp:ifndef>

        <if_stmt pos:start="93:9" pos:end="112:0"><if pos:start="93:9" pos:end="112:0">if <condition pos:start="93:12" pos:end="93:21">(<expr pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:20">next_cpu</name></expr>)</condition> <block pos:start="93:23" pos:end="112:0">{<block_content pos:start="97:13" pos:end="108:0">

            <comment type="block" pos:start="95:13" pos:end="95:74">/* stop the currently executing cpu because a timer occured */</comment>

            <expr_stmt pos:start="97:13" pos:end="100:0"><expr pos:start="97:13" pos:end="97:30"><call pos:start="97:13" pos:end="97:30"><name pos:start="97:13" pos:end="97:20">cpu_exit</name><argument_list pos:start="97:21" pos:end="97:30">(<argument pos:start="97:22" pos:end="97:29"><expr pos:start="97:22" pos:end="97:29"><name pos:start="97:22" pos:end="97:29">next_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="99:1" pos:end="99:19">#<cpp:directive pos:start="99:2" pos:end="99:6">ifdef</cpp:directive> <name pos:start="99:8" pos:end="99:19">CONFIG_KQEMU</name></cpp:ifdef>

            <if_stmt pos:start="101:13" pos:end="108:0"><if pos:start="101:13" pos:end="108:0">if <condition pos:start="101:16" pos:end="101:40">(<expr pos:start="101:17" pos:end="101:39"><name pos:start="101:17" pos:end="101:39"><name pos:start="101:17" pos:end="101:24">next_cpu</name><operator pos:start="101:25" pos:end="101:26">-&gt;</operator><name pos:start="101:27" pos:end="101:39">kqemu_enabled</name></name></expr>)</condition> <block pos:start="101:42" pos:end="108:0">{<block_content pos:start="103:17" pos:end="103:46">

                <expr_stmt pos:start="103:17" pos:end="103:46"><expr pos:start="103:17" pos:end="103:45"><call pos:start="103:17" pos:end="103:45"><name pos:start="103:17" pos:end="103:35">kqemu_cpu_interrupt</name><argument_list pos:start="103:36" pos:end="103:45">(<argument pos:start="103:37" pos:end="103:44"><expr pos:start="103:37" pos:end="103:44"><name pos:start="103:37" pos:end="103:44">next_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="113:9" pos:end="113:32"><expr pos:start="113:9" pos:end="113:31"><name pos:start="113:9" pos:end="113:27">timer_alarm_pending</name> <operator pos:start="113:29" pos:end="113:29">=</operator> <literal type="number" pos:start="113:31" pos:end="113:31">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:28"><expr pos:start="115:9" pos:end="115:27"><call pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:25">qemu_notify_event</name><argument_list pos:start="115:26" pos:end="115:27">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></decl></decl_stmt>
</unit>
