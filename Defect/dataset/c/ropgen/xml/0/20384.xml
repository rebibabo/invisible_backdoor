<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20384.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:111"><name pos:start="1:1" pos:end="1:19">dshow_cycle_devices</name><argument_list pos:start="1:20" pos:end="3:111">(<argument pos:start="1:21" pos:end="1:42">AVFormatContext *avctx</argument>, <argument pos:start="1:45" pos:end="1:67">ICreateDevEnum *devenum</argument>,

                    <argument pos:start="3:21" pos:end="3:48">enum dshowDeviceType devtype</argument>, <argument pos:start="3:51" pos:end="3:87">enum dshowSourceFilterType sourcetype</argument>, <argument pos:start="3:90" pos:end="3:110">IBaseFilter **pfilter</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="205:1">{<block_content pos:start="7:5" pos:end="203:13">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:20">dshow_ctx</name></name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:25">ctx</name> <init pos:start="7:27" pos:end="7:44">= <expr pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:33">avctx</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">IBaseFilter</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:30">device_filter</name> <init pos:start="9:32" pos:end="9:37">= <expr pos:start="9:34" pos:end="9:37"><name pos:start="9:34" pos:end="9:37">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">IEnumMoniker</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:27">classenum</name> <init pos:start="11:29" pos:end="11:34">= <expr pos:start="11:31" pos:end="11:34"><name pos:start="11:31" pos:end="11:34">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">IMoniker</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:15">m</name> <init pos:start="13:17" pos:end="13:22">= <expr pos:start="13:19" pos:end="13:22"><name pos:start="13:19" pos:end="13:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:56"><decl pos:start="15:5" pos:end="15:55"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">device_name</name> <init pos:start="15:29" pos:end="15:55">= <expr pos:start="15:31" pos:end="15:55"><name pos:start="15:31" pos:end="15:55"><name pos:start="15:31" pos:end="15:33">ctx</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:46">device_name</name><index pos:start="15:47" pos:end="15:55">[<expr pos:start="15:48" pos:end="15:54"><name pos:start="15:48" pos:end="15:54">devtype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="19:67"><decl pos:start="17:5" pos:end="19:66"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">skip</name> <init pos:start="17:14" pos:end="19:66">= <expr pos:start="17:16" pos:end="19:66"><ternary pos:start="17:16" pos:end="19:66"><condition pos:start="17:16" pos:end="17:41"><expr pos:start="17:16" pos:end="17:39"><operator pos:start="17:16" pos:end="17:16">(</operator><name pos:start="17:17" pos:end="17:23">devtype</name> <operator pos:start="17:25" pos:end="17:26">==</operator> <name pos:start="17:28" pos:end="17:38">VideoDevice</name><operator pos:start="17:39" pos:end="17:39">)</operator></expr> ?</condition><then pos:start="17:43" pos:end="17:66"> <expr pos:start="17:43" pos:end="17:66"><name pos:start="17:43" pos:end="17:66"><name pos:start="17:43" pos:end="17:45">ctx</name><operator pos:start="17:46" pos:end="17:47">-&gt;</operator><name pos:start="17:48" pos:end="17:66">video_device_number</name></name></expr>

                                        </then><else pos:start="19:41" pos:end="19:66">: <expr pos:start="19:43" pos:end="19:66"><name pos:start="19:43" pos:end="19:66"><name pos:start="19:43" pos:end="19:45">ctx</name><operator pos:start="19:46" pos:end="19:47">-&gt;</operator><name pos:start="19:48" pos:end="19:66">audio_device_number</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">r</name></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="27:69"><decl pos:start="25:5" pos:end="27:68"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">GUID</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:30"><name pos:start="25:17" pos:end="25:27">device_guid</name><index pos:start="25:28" pos:end="25:30">[<expr pos:start="25:29" pos:end="25:29"><literal type="number" pos:start="25:29" pos:end="25:29">2</literal></expr>]</index></name> <init pos:start="25:32" pos:end="27:68">= <expr pos:start="25:34" pos:end="27:68"><block pos:start="25:34" pos:end="27:68">{ <expr pos:start="25:36" pos:end="25:66"><operator pos:start="25:36" pos:end="25:36">&amp;</operator><name pos:start="25:37" pos:end="25:66">CLSID_VideoInputDeviceCategory</name></expr>,

                                   <expr pos:start="27:36" pos:end="27:66"><operator pos:start="27:36" pos:end="27:36">&amp;</operator><name pos:start="27:37" pos:end="27:66">CLSID_AudioInputDeviceCategory</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:80"><decl pos:start="29:5" pos:end="29:79"><type pos:start="29:5" pos:end="29:16"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:14">char</name> <modifier pos:start="29:16" pos:end="29:16">*</modifier></type><name pos:start="29:17" pos:end="29:27">devtypename</name> <init pos:start="29:29" pos:end="29:79">= <expr pos:start="29:31" pos:end="29:79"><ternary pos:start="29:31" pos:end="29:79"><condition pos:start="29:31" pos:end="29:56"><expr pos:start="29:31" pos:end="29:54"><operator pos:start="29:31" pos:end="29:31">(</operator><name pos:start="29:32" pos:end="29:38">devtype</name> <operator pos:start="29:40" pos:end="29:41">==</operator> <name pos:start="29:43" pos:end="29:53">VideoDevice</name><operator pos:start="29:54" pos:end="29:54">)</operator></expr> ?</condition><then pos:start="29:58" pos:end="29:64"> <expr pos:start="29:58" pos:end="29:64"><literal type="string" pos:start="29:58" pos:end="29:64">"video"</literal></expr> </then><else pos:start="29:66" pos:end="29:79">: <expr pos:start="29:68" pos:end="29:79"><literal type="string" pos:start="29:68" pos:end="29:79">"audio only"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:87"><decl pos:start="31:5" pos:end="31:86"><type pos:start="31:5" pos:end="31:16"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:14">char</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:30">sourcetypename</name> <init pos:start="31:32" pos:end="31:86">= <expr pos:start="31:34" pos:end="31:86"><ternary pos:start="31:34" pos:end="31:86"><condition pos:start="31:34" pos:end="31:68"><expr pos:start="31:34" pos:end="31:66"><operator pos:start="31:34" pos:end="31:34">(</operator><name pos:start="31:35" pos:end="31:44">sourcetype</name> <operator pos:start="31:46" pos:end="31:47">==</operator> <name pos:start="31:49" pos:end="31:65">VideoSourceDevice</name><operator pos:start="31:66" pos:end="31:66">)</operator></expr> ?</condition><then pos:start="31:70" pos:end="31:76"> <expr pos:start="31:70" pos:end="31:76"><literal type="string" pos:start="31:70" pos:end="31:76">"video"</literal></expr> </then><else pos:start="31:78" pos:end="31:86">: <expr pos:start="31:80" pos:end="31:86"><literal type="string" pos:start="31:80" pos:end="31:86">"audio"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="37:78"><expr pos:start="35:5" pos:end="37:77"><name pos:start="35:5" pos:end="35:5">r</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <call pos:start="35:9" pos:end="37:77"><name pos:start="35:9" pos:end="35:44">ICreateDevEnum_CreateClassEnumerator</name><argument_list pos:start="35:45" pos:end="37:77">(<argument pos:start="35:46" pos:end="35:52"><expr pos:start="35:46" pos:end="35:52"><name pos:start="35:46" pos:end="35:52">devenum</name></expr></argument>, <argument pos:start="35:55" pos:end="35:77"><expr pos:start="35:55" pos:end="35:77"><name pos:start="35:55" pos:end="35:77"><name pos:start="35:55" pos:end="35:65">device_guid</name><index pos:start="35:66" pos:end="35:77">[<expr pos:start="35:67" pos:end="35:76"><name pos:start="35:67" pos:end="35:76">sourcetype</name></expr>]</index></name></expr></argument>,

                                             <argument pos:start="37:46" pos:end="37:73"><expr pos:start="37:46" pos:end="37:73"><operator pos:start="37:46" pos:end="37:46">(</operator><name pos:start="37:47" pos:end="37:58">IEnumMoniker</name> <operator pos:start="37:60" pos:end="37:60">*</operator><operator pos:start="37:61" pos:end="37:61">*</operator><operator pos:start="37:62" pos:end="37:62">)</operator> <operator pos:start="37:64" pos:end="37:64">&amp;</operator><name pos:start="37:65" pos:end="37:73">classenum</name></expr></argument>, <argument pos:start="37:76" pos:end="37:76"><expr pos:start="37:76" pos:end="37:76"><literal type="number" pos:start="37:76" pos:end="37:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:18">(<expr pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:9">r</name> <operator pos:start="39:11" pos:end="39:12">!=</operator> <name pos:start="39:14" pos:end="39:17">S_OK</name></expr>)</condition> <block pos:start="39:20" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:28">

        <expr_stmt pos:start="41:9" pos:end="43:28"><expr pos:start="41:9" pos:end="43:27"><call pos:start="41:9" pos:end="43:27"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="43:27">(<argument pos:start="41:16" pos:end="41:20"><expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">avctx</name></expr></argument>, <argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:37" pos:end="41:87"><expr pos:start="41:37" pos:end="41:87"><literal type="string" pos:start="41:37" pos:end="41:87">"Could not enumerate %s devices (or none found).\n"</literal></expr></argument>,

               <argument pos:start="43:16" pos:end="43:26"><expr pos:start="43:16" pos:end="43:26"><name pos:start="43:16" pos:end="43:26">devtypename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:28">return <expr pos:start="45:16" pos:end="45:27"><call pos:start="45:16" pos:end="45:27"><name pos:start="45:16" pos:end="45:22">AVERROR</name><argument_list pos:start="45:23" pos:end="45:27">(<argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="51:5" pos:end="177:5">while <condition pos:start="51:11" pos:end="51:79">(<expr pos:start="51:12" pos:end="51:78"><operator pos:start="51:12" pos:end="51:12">!</operator><name pos:start="51:13" pos:end="51:25">device_filter</name> <operator pos:start="51:27" pos:end="51:28">&amp;&amp;</operator> <call pos:start="51:30" pos:end="51:70"><name pos:start="51:30" pos:end="51:46">IEnumMoniker_Next</name><argument_list pos:start="51:47" pos:end="51:70">(<argument pos:start="51:48" pos:end="51:56"><expr pos:start="51:48" pos:end="51:56"><name pos:start="51:48" pos:end="51:56">classenum</name></expr></argument>, <argument pos:start="51:59" pos:end="51:59"><expr pos:start="51:59" pos:end="51:59"><literal type="number" pos:start="51:59" pos:end="51:59">1</literal></expr></argument>, <argument pos:start="51:62" pos:end="51:63"><expr pos:start="51:62" pos:end="51:63"><operator pos:start="51:62" pos:end="51:62">&amp;</operator><name pos:start="51:63" pos:end="51:63">m</name></expr></argument>, <argument pos:start="51:66" pos:end="51:69"><expr pos:start="51:66" pos:end="51:69"><name pos:start="51:66" pos:end="51:69">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="51:72" pos:end="51:73">==</operator> <name pos:start="51:75" pos:end="51:78">S_OK</name></expr>)</condition> <block pos:start="51:81" pos:end="177:5">{<block_content pos:start="53:9" pos:end="175:28">

        <decl_stmt pos:start="53:9" pos:end="53:33"><decl pos:start="53:9" pos:end="53:32"><type pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:20">IPropertyBag</name> <modifier pos:start="53:22" pos:end="53:22">*</modifier></type><name pos:start="53:23" pos:end="53:25">bag</name> <init pos:start="53:27" pos:end="53:32">= <expr pos:start="53:29" pos:end="53:32"><name pos:start="53:29" pos:end="53:32">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:35"><decl pos:start="55:9" pos:end="55:34"><type pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:12">char</name> <modifier pos:start="55:14" pos:end="55:14">*</modifier></type><name pos:start="55:15" pos:end="55:27">friendly_name</name> <init pos:start="55:29" pos:end="55:34">= <expr pos:start="55:31" pos:end="55:34"><name pos:start="55:31" pos:end="55:34">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:33"><decl pos:start="57:9" pos:end="57:32"><type pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:12">char</name> <modifier pos:start="57:14" pos:end="57:14">*</modifier></type><name pos:start="57:15" pos:end="57:25">unique_name</name> <init pos:start="57:27" pos:end="57:32">= <expr pos:start="57:29" pos:end="57:32"><name pos:start="57:29" pos:end="57:32">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:20"><decl pos:start="59:9" pos:end="59:19"><type pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:15">VARIANT</name></type> <name pos:start="59:17" pos:end="59:19">var</name></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:34"><decl pos:start="61:9" pos:end="61:33"><type pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:16">IBindCtx</name> <modifier pos:start="61:18" pos:end="61:18">*</modifier></type><name pos:start="61:19" pos:end="61:26">bind_ctx</name> <init pos:start="61:28" pos:end="61:33">= <expr pos:start="61:30" pos:end="61:33"><name pos:start="61:30" pos:end="61:33">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="63:9" pos:end="63:31"><decl pos:start="63:9" pos:end="63:30"><type pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:16">LPOLESTR</name></type> <name pos:start="63:18" pos:end="63:23">olestr</name> <init pos:start="63:25" pos:end="63:30">= <expr pos:start="63:27" pos:end="63:30"><name pos:start="63:27" pos:end="63:30">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:34"><decl pos:start="65:9" pos:end="65:33"><type pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16">LPMALLOC</name></type> <name pos:start="65:18" pos:end="65:26">co_malloc</name> <init pos:start="65:28" pos:end="65:33">= <expr pos:start="65:30" pos:end="65:33"><name pos:start="65:30" pos:end="65:33">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:14"><decl pos:start="67:9" pos:end="67:13"><type pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:11">int</name></type> <name pos:start="67:13" pos:end="67:13">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:39"><expr pos:start="71:9" pos:end="71:38"><name pos:start="71:9" pos:end="71:9">r</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <call pos:start="71:13" pos:end="71:38"><name pos:start="71:13" pos:end="71:23">CoGetMalloc</name><argument_list pos:start="71:24" pos:end="71:38">(<argument pos:start="71:25" pos:end="71:25"><expr pos:start="71:25" pos:end="71:25"><literal type="number" pos:start="71:25" pos:end="71:25">1</literal></expr></argument>, <argument pos:start="71:28" pos:end="71:37"><expr pos:start="71:28" pos:end="71:37"><operator pos:start="71:28" pos:end="71:28">&amp;</operator><name pos:start="71:29" pos:end="71:37">co_malloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="75:23"><if pos:start="73:9" pos:end="75:23">if <condition pos:start="73:12" pos:end="73:21">(<expr pos:start="73:13" pos:end="73:20"><name pos:start="73:13" pos:end="73:13">r</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <name pos:start="73:17" pos:end="73:20">S_OK</name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:23"><block_content pos:start="75:13" pos:end="75:23">

            <goto pos:start="75:13" pos:end="75:23">goto <name pos:start="75:18" pos:end="75:22">fail1</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:40"><expr pos:start="77:9" pos:end="77:39"><name pos:start="77:9" pos:end="77:9">r</name> <operator pos:start="77:11" pos:end="77:11">=</operator> <call pos:start="77:13" pos:end="77:39"><name pos:start="77:13" pos:end="77:25">CreateBindCtx</name><argument_list pos:start="77:26" pos:end="77:39">(<argument pos:start="77:27" pos:end="77:27"><expr pos:start="77:27" pos:end="77:27"><literal type="number" pos:start="77:27" pos:end="77:27">0</literal></expr></argument>, <argument pos:start="77:30" pos:end="77:38"><expr pos:start="77:30" pos:end="77:38"><operator pos:start="77:30" pos:end="77:30">&amp;</operator><name pos:start="77:31" pos:end="77:38">bind_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="81:23"><if pos:start="79:9" pos:end="81:23">if <condition pos:start="79:12" pos:end="79:22">(<expr pos:start="79:13" pos:end="79:21"><name pos:start="79:13" pos:end="79:13">r</name> <operator pos:start="79:15" pos:end="79:16">!=</operator> <name pos:start="79:18" pos:end="79:21">S_OK</name></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:23"><block_content pos:start="81:13" pos:end="81:23">

            <goto pos:start="81:13" pos:end="81:23">goto <name pos:start="81:18" pos:end="81:22">fail1</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block" pos:start="83:9" pos:end="83:79">/* GetDisplayname works for both video and audio, DevicePath doesn't */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:64"><expr pos:start="85:9" pos:end="85:63"><name pos:start="85:9" pos:end="85:9">r</name> <operator pos:start="85:11" pos:end="85:11">=</operator> <call pos:start="85:13" pos:end="85:63"><name pos:start="85:13" pos:end="85:35">IMoniker_GetDisplayName</name><argument_list pos:start="85:36" pos:end="85:63">(<argument pos:start="85:37" pos:end="85:37"><expr pos:start="85:37" pos:end="85:37"><name pos:start="85:37" pos:end="85:37">m</name></expr></argument>, <argument pos:start="85:40" pos:end="85:47"><expr pos:start="85:40" pos:end="85:47"><name pos:start="85:40" pos:end="85:47">bind_ctx</name></expr></argument>, <argument pos:start="85:50" pos:end="85:53"><expr pos:start="85:50" pos:end="85:53"><name pos:start="85:50" pos:end="85:53">NULL</name></expr></argument>, <argument pos:start="85:56" pos:end="85:62"><expr pos:start="85:56" pos:end="85:62"><operator pos:start="85:56" pos:end="85:56">&amp;</operator><name pos:start="85:57" pos:end="85:62">olestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="89:23"><if pos:start="87:9" pos:end="89:23">if <condition pos:start="87:12" pos:end="87:22">(<expr pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:13">r</name> <operator pos:start="87:15" pos:end="87:16">!=</operator> <name pos:start="87:18" pos:end="87:21">S_OK</name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:23"><block_content pos:start="89:13" pos:end="89:23">

            <goto pos:start="89:13" pos:end="89:23">goto <name pos:start="89:18" pos:end="89:22">fail1</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:48"><expr pos:start="91:9" pos:end="91:47"><name pos:start="91:9" pos:end="91:19">unique_name</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <call pos:start="91:23" pos:end="91:47"><name pos:start="91:23" pos:end="91:39">dup_wchar_to_utf8</name><argument_list pos:start="91:40" pos:end="91:47">(<argument pos:start="91:41" pos:end="91:46"><expr pos:start="91:41" pos:end="91:46"><name pos:start="91:41" pos:end="91:46">olestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="93:9" pos:end="93:78">/* replace ':' with '_' since we use : to delineate between sources */</comment>

        <for pos:start="95:9" pos:end="101:9">for <control pos:start="95:13" pos:end="95:49">(<init pos:start="95:14" pos:end="95:19"><expr pos:start="95:14" pos:end="95:18"><name pos:start="95:14" pos:end="95:14">i</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <literal type="number" pos:start="95:18" pos:end="95:18">0</literal></expr>;</init> <condition pos:start="95:21" pos:end="95:44"><expr pos:start="95:21" pos:end="95:43"><name pos:start="95:21" pos:end="95:21">i</name> <operator pos:start="95:23" pos:end="95:23">&lt;</operator> <call pos:start="95:25" pos:end="95:43"><name pos:start="95:25" pos:end="95:30">strlen</name><argument_list pos:start="95:31" pos:end="95:43">(<argument pos:start="95:32" pos:end="95:42"><expr pos:start="95:32" pos:end="95:42"><name pos:start="95:32" pos:end="95:42">unique_name</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="95:46" pos:end="95:48"><expr pos:start="95:46" pos:end="95:48"><name pos:start="95:46" pos:end="95:46">i</name><operator pos:start="95:47" pos:end="95:48">++</operator></expr></incr>)</control> <block pos:start="95:51" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:37">

            <if_stmt pos:start="97:13" pos:end="99:37"><if pos:start="97:13" pos:end="99:37">if <condition pos:start="97:16" pos:end="97:38">(<expr pos:start="97:17" pos:end="97:37"><name pos:start="97:17" pos:end="97:30"><name pos:start="97:17" pos:end="97:27">unique_name</name><index pos:start="97:28" pos:end="97:30">[<expr pos:start="97:29" pos:end="97:29"><name pos:start="97:29" pos:end="97:29">i</name></expr>]</index></name> <operator pos:start="97:32" pos:end="97:33">==</operator> <literal type="char" pos:start="97:35" pos:end="97:37">':'</literal></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:37"><block_content pos:start="99:17" pos:end="99:37">

                <expr_stmt pos:start="99:17" pos:end="99:37"><expr pos:start="99:17" pos:end="99:36"><name pos:start="99:17" pos:end="99:30"><name pos:start="99:17" pos:end="99:27">unique_name</name><index pos:start="99:28" pos:end="99:30">[<expr pos:start="99:29" pos:end="99:29"><name pos:start="99:29" pos:end="99:29">i</name></expr>]</index></name> <operator pos:start="99:32" pos:end="99:32">=</operator> <literal type="char" pos:start="99:34" pos:end="99:36">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="105:9" pos:end="105:78"><expr pos:start="105:9" pos:end="105:77"><name pos:start="105:9" pos:end="105:9">r</name> <operator pos:start="105:11" pos:end="105:11">=</operator> <call pos:start="105:13" pos:end="105:77"><name pos:start="105:13" pos:end="105:34">IMoniker_BindToStorage</name><argument_list pos:start="105:35" pos:end="105:77">(<argument pos:start="105:36" pos:end="105:36"><expr pos:start="105:36" pos:end="105:36"><name pos:start="105:36" pos:end="105:36">m</name></expr></argument>, <argument pos:start="105:39" pos:end="105:39"><expr pos:start="105:39" pos:end="105:39"><literal type="number" pos:start="105:39" pos:end="105:39">0</literal></expr></argument>, <argument pos:start="105:42" pos:end="105:42"><expr pos:start="105:42" pos:end="105:42"><literal type="number" pos:start="105:42" pos:end="105:42">0</literal></expr></argument>, <argument pos:start="105:45" pos:end="105:61"><expr pos:start="105:45" pos:end="105:61"><operator pos:start="105:45" pos:end="105:45">&amp;</operator><name pos:start="105:46" pos:end="105:61">IID_IPropertyBag</name></expr></argument>, <argument pos:start="105:64" pos:end="105:76"><expr pos:start="105:64" pos:end="105:76"><operator pos:start="105:64" pos:end="105:64">(</operator><name pos:start="105:65" pos:end="105:68">void</name> <operator pos:start="105:70" pos:end="105:70">*</operator><operator pos:start="105:71" pos:end="105:71">)</operator> <operator pos:start="105:73" pos:end="105:73">&amp;</operator><name pos:start="105:74" pos:end="105:76">bag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="109:23"><if pos:start="107:9" pos:end="109:23">if <condition pos:start="107:12" pos:end="107:22">(<expr pos:start="107:13" pos:end="107:21"><name pos:start="107:13" pos:end="107:13">r</name> <operator pos:start="107:15" pos:end="107:16">!=</operator> <name pos:start="107:18" pos:end="107:21">S_OK</name></expr>)</condition><block type="pseudo" pos:start="109:13" pos:end="109:23"><block_content pos:start="109:13" pos:end="109:23">

            <goto pos:start="109:13" pos:end="109:23">goto <name pos:start="109:18" pos:end="109:22">fail1</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:25"><expr pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:14"><name pos:start="113:9" pos:end="113:11">var</name><operator pos:start="113:12" pos:end="113:12">.</operator><name pos:start="113:13" pos:end="113:14">vt</name></name> <operator pos:start="113:16" pos:end="113:16">=</operator> <name pos:start="113:18" pos:end="113:24">VT_BSTR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:64"><expr pos:start="115:9" pos:end="115:63"><name pos:start="115:9" pos:end="115:9">r</name> <operator pos:start="115:11" pos:end="115:11">=</operator> <call pos:start="115:13" pos:end="115:63"><name pos:start="115:13" pos:end="115:29">IPropertyBag_Read</name><argument_list pos:start="115:30" pos:end="115:63">(<argument pos:start="115:31" pos:end="115:33"><expr pos:start="115:31" pos:end="115:33"><name pos:start="115:31" pos:end="115:33">bag</name></expr></argument>, <argument pos:start="115:36" pos:end="115:50"><expr pos:start="115:36" pos:end="115:50"><literal type="string" pos:start="115:36" pos:end="115:50">L"FriendlyName"</literal></expr></argument>, <argument pos:start="115:53" pos:end="115:56"><expr pos:start="115:53" pos:end="115:56"><operator pos:start="115:53" pos:end="115:53">&amp;</operator><name pos:start="115:54" pos:end="115:56">var</name></expr></argument>, <argument pos:start="115:59" pos:end="115:62"><expr pos:start="115:59" pos:end="115:62"><name pos:start="115:59" pos:end="115:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="119:23"><if pos:start="117:9" pos:end="119:23">if <condition pos:start="117:12" pos:end="117:22">(<expr pos:start="117:13" pos:end="117:21"><name pos:start="117:13" pos:end="117:13">r</name> <operator pos:start="117:15" pos:end="117:16">!=</operator> <name pos:start="117:18" pos:end="117:21">S_OK</name></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:23"><block_content pos:start="119:13" pos:end="119:23">

            <goto pos:start="119:13" pos:end="119:23">goto <name pos:start="119:18" pos:end="119:22">fail1</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:55"><expr pos:start="121:9" pos:end="121:54"><name pos:start="121:9" pos:end="121:21">friendly_name</name> <operator pos:start="121:23" pos:end="121:23">=</operator> <call pos:start="121:25" pos:end="121:54"><name pos:start="121:25" pos:end="121:41">dup_wchar_to_utf8</name><argument_list pos:start="121:42" pos:end="121:54">(<argument pos:start="121:43" pos:end="121:53"><expr pos:start="121:43" pos:end="121:53"><name pos:start="121:43" pos:end="121:53"><name pos:start="121:43" pos:end="121:45">var</name><operator pos:start="121:46" pos:end="121:46">.</operator><name pos:start="121:47" pos:end="121:53">bstrVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="125:9" pos:end="153:9"><if pos:start="125:9" pos:end="147:9">if <condition pos:start="125:12" pos:end="125:20">(<expr pos:start="125:13" pos:end="125:19"><name pos:start="125:13" pos:end="125:19">pfilter</name></expr>)</condition> <block pos:start="125:22" pos:end="147:9">{<block_content pos:start="127:13" pos:end="145:13">

            <if_stmt pos:start="127:13" pos:end="129:27"><if pos:start="127:13" pos:end="129:27">if <condition pos:start="127:16" pos:end="127:87">(<expr pos:start="127:17" pos:end="127:86"><call pos:start="127:17" pos:end="127:50"><name pos:start="127:17" pos:end="127:22">strcmp</name><argument_list pos:start="127:23" pos:end="127:50">(<argument pos:start="127:24" pos:end="127:34"><expr pos:start="127:24" pos:end="127:34"><name pos:start="127:24" pos:end="127:34">device_name</name></expr></argument>, <argument pos:start="127:37" pos:end="127:49"><expr pos:start="127:37" pos:end="127:49"><name pos:start="127:37" pos:end="127:49">friendly_name</name></expr></argument>)</argument_list></call> <operator pos:start="127:52" pos:end="127:53">&amp;&amp;</operator> <call pos:start="127:55" pos:end="127:86"><name pos:start="127:55" pos:end="127:60">strcmp</name><argument_list pos:start="127:61" pos:end="127:86">(<argument pos:start="127:62" pos:end="127:72"><expr pos:start="127:62" pos:end="127:72"><name pos:start="127:62" pos:end="127:72">device_name</name></expr></argument>, <argument pos:start="127:75" pos:end="127:85"><expr pos:start="127:75" pos:end="127:85"><name pos:start="127:75" pos:end="127:85">unique_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="129:17" pos:end="129:27"><block_content pos:start="129:17" pos:end="129:27">

                <goto pos:start="129:17" pos:end="129:27">goto <name pos:start="129:22" pos:end="129:26">fail1</name>;</goto></block_content></block></if></if_stmt>



            <if_stmt pos:start="133:13" pos:end="145:13"><if pos:start="133:13" pos:end="145:13">if <condition pos:start="133:16" pos:end="133:24">(<expr pos:start="133:17" pos:end="133:23"><operator pos:start="133:17" pos:end="133:17">!</operator><name pos:start="133:18" pos:end="133:21">skip</name><operator pos:start="133:22" pos:end="133:23">--</operator></expr>)</condition> <block pos:start="133:26" pos:end="145:13">{<block_content pos:start="135:17" pos:end="143:17">

                <expr_stmt pos:start="135:17" pos:end="135:94"><expr pos:start="135:17" pos:end="135:93"><name pos:start="135:17" pos:end="135:17">r</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <call pos:start="135:21" pos:end="135:93"><name pos:start="135:21" pos:end="135:41">IMoniker_BindToObject</name><argument_list pos:start="135:42" pos:end="135:93">(<argument pos:start="135:43" pos:end="135:43"><expr pos:start="135:43" pos:end="135:43"><name pos:start="135:43" pos:end="135:43">m</name></expr></argument>, <argument pos:start="135:46" pos:end="135:46"><expr pos:start="135:46" pos:end="135:46"><literal type="number" pos:start="135:46" pos:end="135:46">0</literal></expr></argument>, <argument pos:start="135:49" pos:end="135:49"><expr pos:start="135:49" pos:end="135:49"><literal type="number" pos:start="135:49" pos:end="135:49">0</literal></expr></argument>, <argument pos:start="135:52" pos:end="135:67"><expr pos:start="135:52" pos:end="135:67"><operator pos:start="135:52" pos:end="135:52">&amp;</operator><name pos:start="135:53" pos:end="135:67">IID_IBaseFilter</name></expr></argument>, <argument pos:start="135:70" pos:end="135:92"><expr pos:start="135:70" pos:end="135:92"><operator pos:start="135:70" pos:end="135:70">(</operator><name pos:start="135:71" pos:end="135:74">void</name> <operator pos:start="135:76" pos:end="135:76">*</operator><operator pos:start="135:77" pos:end="135:77">)</operator> <operator pos:start="135:79" pos:end="135:79">&amp;</operator><name pos:start="135:80" pos:end="135:92">device_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="137:17" pos:end="143:17"><if pos:start="137:17" pos:end="143:17">if <condition pos:start="137:20" pos:end="137:30">(<expr pos:start="137:21" pos:end="137:29"><name pos:start="137:21" pos:end="137:21">r</name> <operator pos:start="137:23" pos:end="137:24">!=</operator> <name pos:start="137:26" pos:end="137:29">S_OK</name></expr>)</condition> <block pos:start="137:32" pos:end="143:17">{<block_content pos:start="139:21" pos:end="141:31">

                    <expr_stmt pos:start="139:21" pos:end="139:96"><expr pos:start="139:21" pos:end="139:95"><call pos:start="139:21" pos:end="139:95"><name pos:start="139:21" pos:end="139:26">av_log</name><argument_list pos:start="139:27" pos:end="139:95">(<argument pos:start="139:28" pos:end="139:32"><expr pos:start="139:28" pos:end="139:32"><name pos:start="139:28" pos:end="139:32">avctx</name></expr></argument>, <argument pos:start="139:35" pos:end="139:46"><expr pos:start="139:35" pos:end="139:46"><name pos:start="139:35" pos:end="139:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="139:49" pos:end="139:81"><expr pos:start="139:49" pos:end="139:81"><literal type="string" pos:start="139:49" pos:end="139:81">"Unable to BindToObject for %s\n"</literal></expr></argument>, <argument pos:start="139:84" pos:end="139:94"><expr pos:start="139:84" pos:end="139:94"><name pos:start="139:84" pos:end="139:94">device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="141:21" pos:end="141:31">goto <name pos:start="141:26" pos:end="141:30">fail1</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="147:11" pos:end="153:9">else <block pos:start="147:16" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:85">

            <expr_stmt pos:start="149:13" pos:end="149:67"><expr pos:start="149:13" pos:end="149:66"><call pos:start="149:13" pos:end="149:66"><name pos:start="149:13" pos:end="149:18">av_log</name><argument_list pos:start="149:19" pos:end="149:66">(<argument pos:start="149:20" pos:end="149:24"><expr pos:start="149:20" pos:end="149:24"><name pos:start="149:20" pos:end="149:24">avctx</name></expr></argument>, <argument pos:start="149:27" pos:end="149:37"><expr pos:start="149:27" pos:end="149:37"><name pos:start="149:27" pos:end="149:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="149:40" pos:end="149:50"><expr pos:start="149:40" pos:end="149:50"><literal type="string" pos:start="149:40" pos:end="149:50">" \"%s\"\n"</literal></expr></argument>, <argument pos:start="149:53" pos:end="149:65"><expr pos:start="149:53" pos:end="149:65"><name pos:start="149:53" pos:end="149:65">friendly_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:85"><expr pos:start="151:13" pos:end="151:84"><call pos:start="151:13" pos:end="151:84"><name pos:start="151:13" pos:end="151:18">av_log</name><argument_list pos:start="151:19" pos:end="151:84">(<argument pos:start="151:20" pos:end="151:24"><expr pos:start="151:20" pos:end="151:24"><name pos:start="151:20" pos:end="151:24">avctx</name></expr></argument>, <argument pos:start="151:27" pos:end="151:37"><expr pos:start="151:27" pos:end="151:37"><name pos:start="151:27" pos:end="151:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="151:40" pos:end="151:70"><expr pos:start="151:40" pos:end="151:70"><literal type="string" pos:start="151:40" pos:end="151:70">"    Alternative name \"%s\"\n"</literal></expr></argument>, <argument pos:start="151:73" pos:end="151:83"><expr pos:start="151:73" pos:end="151:83"><name pos:start="151:73" pos:end="151:83">unique_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



<label pos:start="157:1" pos:end="157:6"><name pos:start="157:1" pos:end="157:5">fail1</name>:</label>

        <if_stmt pos:start="159:9" pos:end="161:44"><if pos:start="159:9" pos:end="161:44">if <condition pos:start="159:12" pos:end="159:32">(<expr pos:start="159:13" pos:end="159:31"><name pos:start="159:13" pos:end="159:18">olestr</name> <operator pos:start="159:20" pos:end="159:21">&amp;&amp;</operator> <name pos:start="159:23" pos:end="159:31">co_malloc</name></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:44"><block_content pos:start="161:13" pos:end="161:44">

            <expr_stmt pos:start="161:13" pos:end="161:44"><expr pos:start="161:13" pos:end="161:43"><call pos:start="161:13" pos:end="161:43"><name pos:start="161:13" pos:end="161:24">IMalloc_Free</name><argument_list pos:start="161:25" pos:end="161:43">(<argument pos:start="161:26" pos:end="161:34"><expr pos:start="161:26" pos:end="161:34"><name pos:start="161:26" pos:end="161:34">co_malloc</name></expr></argument>, <argument pos:start="161:37" pos:end="161:42"><expr pos:start="161:37" pos:end="161:42"><name pos:start="161:37" pos:end="161:42">olestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="163:9" pos:end="165:39"><if pos:start="163:9" pos:end="165:39">if <condition pos:start="163:12" pos:end="163:21">(<expr pos:start="163:13" pos:end="163:20"><name pos:start="163:13" pos:end="163:20">bind_ctx</name></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:39"><block_content pos:start="165:13" pos:end="165:39">

            <expr_stmt pos:start="165:13" pos:end="165:39"><expr pos:start="165:13" pos:end="165:38"><call pos:start="165:13" pos:end="165:38"><name pos:start="165:13" pos:end="165:28">IBindCtx_Release</name><argument_list pos:start="165:29" pos:end="165:38">(<argument pos:start="165:30" pos:end="165:37"><expr pos:start="165:30" pos:end="165:37"><name pos:start="165:30" pos:end="165:37">bind_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:31"><expr pos:start="167:9" pos:end="167:30"><call pos:start="167:9" pos:end="167:30"><name pos:start="167:9" pos:end="167:15">av_free</name><argument_list pos:start="167:16" pos:end="167:30">(<argument pos:start="167:17" pos:end="167:29"><expr pos:start="167:17" pos:end="167:29"><name pos:start="167:17" pos:end="167:29">friendly_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:29"><expr pos:start="169:9" pos:end="169:28"><call pos:start="169:9" pos:end="169:28"><name pos:start="169:9" pos:end="169:15">av_free</name><argument_list pos:start="169:16" pos:end="169:28">(<argument pos:start="169:17" pos:end="169:27"><expr pos:start="169:17" pos:end="169:27"><name pos:start="169:17" pos:end="169:27">unique_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="173:38"><if pos:start="171:9" pos:end="173:38">if <condition pos:start="171:12" pos:end="171:16">(<expr pos:start="171:13" pos:end="171:15"><name pos:start="171:13" pos:end="171:15">bag</name></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:38"><block_content pos:start="173:13" pos:end="173:38">

            <expr_stmt pos:start="173:13" pos:end="173:38"><expr pos:start="173:13" pos:end="173:37"><call pos:start="173:13" pos:end="173:37"><name pos:start="173:13" pos:end="173:32">IPropertyBag_Release</name><argument_list pos:start="173:33" pos:end="173:37">(<argument pos:start="173:34" pos:end="173:36"><expr pos:start="173:34" pos:end="173:36"><name pos:start="173:34" pos:end="173:36">bag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:28"><expr pos:start="175:9" pos:end="175:27"><call pos:start="175:9" pos:end="175:27"><name pos:start="175:9" pos:end="175:24">IMoniker_Release</name><argument_list pos:start="175:25" pos:end="175:27">(<argument pos:start="175:26" pos:end="175:26"><expr pos:start="175:26" pos:end="175:26"><name pos:start="175:26" pos:end="175:26">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="181:5" pos:end="181:36"><expr pos:start="181:5" pos:end="181:35"><call pos:start="181:5" pos:end="181:35"><name pos:start="181:5" pos:end="181:24">IEnumMoniker_Release</name><argument_list pos:start="181:25" pos:end="181:35">(<argument pos:start="181:26" pos:end="181:34"><expr pos:start="181:26" pos:end="181:34"><name pos:start="181:26" pos:end="181:34">classenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="185:5" pos:end="199:5"><if pos:start="185:5" pos:end="199:5">if <condition pos:start="185:8" pos:end="185:16">(<expr pos:start="185:9" pos:end="185:15"><name pos:start="185:9" pos:end="185:15">pfilter</name></expr>)</condition> <block pos:start="185:18" pos:end="199:5">{<block_content pos:start="187:9" pos:end="197:33">

        <if_stmt pos:start="187:9" pos:end="195:9"><if pos:start="187:9" pos:end="195:9">if <condition pos:start="187:12" pos:end="187:27">(<expr pos:start="187:13" pos:end="187:26"><operator pos:start="187:13" pos:end="187:13">!</operator><name pos:start="187:14" pos:end="187:26">device_filter</name></expr>)</condition> <block pos:start="187:29" pos:end="195:9">{<block_content pos:start="189:13" pos:end="193:32">

            <expr_stmt pos:start="189:13" pos:end="191:61"><expr pos:start="189:13" pos:end="191:60"><call pos:start="189:13" pos:end="191:60"><name pos:start="189:13" pos:end="189:18">av_log</name><argument_list pos:start="189:19" pos:end="191:60">(<argument pos:start="189:20" pos:end="189:24"><expr pos:start="189:20" pos:end="189:24"><name pos:start="189:20" pos:end="189:24">avctx</name></expr></argument>, <argument pos:start="189:27" pos:end="189:38"><expr pos:start="189:27" pos:end="189:38"><name pos:start="189:27" pos:end="189:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="189:41" pos:end="189:116"><expr pos:start="189:41" pos:end="189:116"><literal type="string" pos:start="189:41" pos:end="189:116">"Could not find %s device with name [%s] among source devices of type %s.\n"</literal></expr></argument>,

                   <argument pos:start="191:20" pos:end="191:30"><expr pos:start="191:20" pos:end="191:30"><name pos:start="191:20" pos:end="191:30">devtypename</name></expr></argument>, <argument pos:start="191:33" pos:end="191:43"><expr pos:start="191:33" pos:end="191:43"><name pos:start="191:33" pos:end="191:43">device_name</name></expr></argument>, <argument pos:start="191:46" pos:end="191:59"><expr pos:start="191:46" pos:end="191:59"><name pos:start="191:46" pos:end="191:59">sourcetypename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="193:13" pos:end="193:32">return <expr pos:start="193:20" pos:end="193:31"><call pos:start="193:20" pos:end="193:31"><name pos:start="193:20" pos:end="193:26">AVERROR</name><argument_list pos:start="193:27" pos:end="193:31">(<argument pos:start="193:28" pos:end="193:30"><expr pos:start="193:28" pos:end="193:30"><name pos:start="193:28" pos:end="193:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:33"><expr pos:start="197:9" pos:end="197:32"><operator pos:start="197:9" pos:end="197:9">*</operator><name pos:start="197:10" pos:end="197:16">pfilter</name> <operator pos:start="197:18" pos:end="197:18">=</operator> <name pos:start="197:20" pos:end="197:32">device_filter</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="203:5" pos:end="203:13">return <expr pos:start="203:12" pos:end="203:12"><literal type="number" pos:start="203:12" pos:end="203:12">0</literal></expr>;</return>

</block_content>}</block>
</unit>
