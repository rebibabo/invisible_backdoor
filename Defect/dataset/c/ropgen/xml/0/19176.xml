<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19176.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">usb_hid_handle_control</name><parameter_list pos:start="1:34" pos:end="3:76">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:43">USBDevice</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:59">USBPacket</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">p</name></decl></parameter>,

               <parameter pos:start="3:16" pos:end="3:26"><decl pos:start="3:16" pos:end="3:26"><type pos:start="3:16" pos:end="3:26"><name pos:start="3:16" pos:end="3:18">int</name></type> <name pos:start="3:20" pos:end="3:26">request</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:37"><decl pos:start="3:29" pos:end="3:37"><type pos:start="3:29" pos:end="3:37"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:37">value</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:48"><decl pos:start="3:40" pos:end="3:48"><type pos:start="3:40" pos:end="3:48"><name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:48">index</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:60"><decl pos:start="3:51" pos:end="3:60"><type pos:start="3:51" pos:end="3:60"><name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:60">length</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:75"><decl pos:start="3:63" pos:end="3:75"><type pos:start="3:63" pos:end="3:75"><name pos:start="3:63" pos:end="3:69">uint8_t</name> <modifier pos:start="3:71" pos:end="3:71">*</modifier></type><name pos:start="3:72" pos:end="3:75">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="175:1">{<block_content pos:start="7:5" pos:end="173:15">

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">USBHIDState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">us</name> <init pos:start="7:21" pos:end="7:54">= <expr pos:start="7:23" pos:end="7:54"><call pos:start="7:23" pos:end="7:54"><name pos:start="7:23" pos:end="7:31">DO_UPCAST</name><argument_list pos:start="7:32" pos:end="7:54">(<argument pos:start="7:33" pos:end="7:43"><expr pos:start="7:33" pos:end="7:43"><name pos:start="7:33" pos:end="7:43">USBHIDState</name></expr></argument>, <argument pos:start="7:46" pos:end="7:48"><expr pos:start="7:46" pos:end="7:48"><name pos:start="7:46" pos:end="7:48">dev</name></expr></argument>, <argument pos:start="7:51" pos:end="7:53"><expr pos:start="7:51" pos:end="7:53"><name pos:start="7:51" pos:end="7:53">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">HIDState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">hs</name> <init pos:start="9:18" pos:end="9:27">= <expr pos:start="9:20" pos:end="9:27"><operator pos:start="9:20" pos:end="9:20">&amp;</operator><name pos:start="9:21" pos:end="9:27"><name pos:start="9:21" pos:end="9:22">us</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:27">hid</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:79"><expr pos:start="15:5" pos:end="15:78"><name pos:start="15:5" pos:end="15:7">ret</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:78"><name pos:start="15:11" pos:end="15:33">usb_desc_handle_control</name><argument_list pos:start="15:34" pos:end="15:78">(<argument pos:start="15:35" pos:end="15:37"><expr pos:start="15:35" pos:end="15:37"><name pos:start="15:35" pos:end="15:37">dev</name></expr></argument>, <argument pos:start="15:40" pos:end="15:40"><expr pos:start="15:40" pos:end="15:40"><name pos:start="15:40" pos:end="15:40">p</name></expr></argument>, <argument pos:start="15:43" pos:end="15:49"><expr pos:start="15:43" pos:end="15:49"><name pos:start="15:43" pos:end="15:49">request</name></expr></argument>, <argument pos:start="15:52" pos:end="15:56"><expr pos:start="15:52" pos:end="15:56"><name pos:start="15:52" pos:end="15:56">value</name></expr></argument>, <argument pos:start="15:59" pos:end="15:63"><expr pos:start="15:59" pos:end="15:63"><name pos:start="15:59" pos:end="15:63">index</name></expr></argument>, <argument pos:start="15:66" pos:end="15:71"><expr pos:start="15:66" pos:end="15:71"><name pos:start="15:66" pos:end="15:71">length</name></expr></argument>, <argument pos:start="15:74" pos:end="15:77"><expr pos:start="15:74" pos:end="15:77"><name pos:start="15:74" pos:end="15:77">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:17">(<expr pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:14">&gt;=</operator> <literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>)</condition> <block pos:start="17:19" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:19">

        <return pos:start="19:9" pos:end="19:19">return <expr pos:start="19:16" pos:end="19:18"><name pos:start="19:16" pos:end="19:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:12"><expr pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <literal type="number" pos:start="25:11" pos:end="25:11">0</literal></expr>;</expr_stmt>

    <switch pos:start="27:5" pos:end="171:5">switch <condition pos:start="27:12" pos:end="27:20">(<expr pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:19">request</name></expr>)</condition> <block pos:start="27:22" pos:end="171:5">{<block_content pos:start="29:5" pos:end="169:14">

    <case pos:start="29:5" pos:end="29:47">case <expr pos:start="29:10" pos:end="29:46"><name pos:start="29:10" pos:end="29:22">DeviceRequest</name> <operator pos:start="29:24" pos:end="29:24">|</operator> <name pos:start="29:26" pos:end="29:46">USB_REQ_GET_INTERFACE</name></expr>:</case>

        <expr_stmt pos:start="31:9" pos:end="31:20"><expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">data</name><index pos:start="31:13" pos:end="31:15">[<expr pos:start="31:14" pos:end="31:14"><literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>]</index></name> <operator pos:start="31:17" pos:end="31:17">=</operator> <literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:16"><expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <literal type="number" pos:start="33:15" pos:end="33:15">1</literal></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:50">case <expr pos:start="37:10" pos:end="37:49"><name pos:start="37:10" pos:end="37:25">DeviceOutRequest</name> <operator pos:start="37:27" pos:end="37:27">|</operator> <name pos:start="37:29" pos:end="37:49">USB_REQ_SET_INTERFACE</name></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:16"><expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

        <comment type="block" pos:start="43:9" pos:end="43:35">/* hid specific requests */</comment>

    <case pos:start="45:5" pos:end="45:51">case <expr pos:start="45:10" pos:end="45:50"><name pos:start="45:10" pos:end="45:25">InterfaceRequest</name> <operator pos:start="45:27" pos:end="45:27">|</operator> <name pos:start="45:29" pos:end="45:50">USB_REQ_GET_DESCRIPTOR</name></expr>:</case>

        <switch pos:start="47:9" pos:end="83:9">switch <condition pos:start="47:16" pos:end="47:27">(<expr pos:start="47:17" pos:end="47:26"><name pos:start="47:17" pos:end="47:21">value</name> <operator pos:start="47:23" pos:end="47:24">&gt;&gt;</operator> <literal type="number" pos:start="47:26" pos:end="47:26">8</literal></expr>)</condition> <block pos:start="47:29" pos:end="83:9">{<block_content pos:start="49:9" pos:end="81:22">

        <case pos:start="49:9" pos:end="49:18">case <expr pos:start="49:14" pos:end="49:17"><literal type="number" pos:start="49:14" pos:end="49:17">0x22</literal></expr>:</case>

            <if_stmt pos:start="51:13" pos:end="75:13"><if pos:start="51:13" pos:end="59:13">if <condition pos:start="51:16" pos:end="51:38">(<expr pos:start="51:17" pos:end="51:37"><name pos:start="51:17" pos:end="51:24"><name pos:start="51:17" pos:end="51:18">hs</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:24">kind</name></name> <operator pos:start="51:26" pos:end="51:27">==</operator> <name pos:start="51:29" pos:end="51:37">HID_MOUSE</name></expr>)</condition> <block pos:start="51:40" pos:end="59:13">{<block_content pos:start="53:17" pos:end="57:63">

		<expr_stmt pos:start="53:17" pos:end="55:65"><expr pos:start="53:17" pos:end="55:64"><call pos:start="53:17" pos:end="55:64"><name pos:start="53:17" pos:end="53:22">memcpy</name><argument_list pos:start="53:23" pos:end="55:64">(<argument pos:start="53:24" pos:end="53:27"><expr pos:start="53:24" pos:end="53:27"><name pos:start="53:24" pos:end="53:27">data</name></expr></argument>, <argument pos:start="53:30" pos:end="53:61"><expr pos:start="53:30" pos:end="53:61"><name pos:start="53:30" pos:end="53:61">qemu_mouse_hid_report_descriptor</name></expr></argument>,

		       <argument pos:start="55:24" pos:end="55:63"><expr pos:start="55:24" pos:end="55:63"><sizeof pos:start="55:24" pos:end="55:63">sizeof<argument_list pos:start="55:30" pos:end="55:63">(<argument pos:start="55:31" pos:end="55:62"><expr pos:start="55:31" pos:end="55:62"><name pos:start="55:31" pos:end="55:62">qemu_mouse_hid_report_descriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="57:17" pos:end="57:63"><expr pos:start="57:17" pos:end="57:62"><name pos:start="57:17" pos:end="57:19">ret</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <sizeof pos:start="57:23" pos:end="57:62">sizeof<argument_list pos:start="57:29" pos:end="57:62">(<argument pos:start="57:30" pos:end="57:61"><expr pos:start="57:30" pos:end="57:61"><name pos:start="57:30" pos:end="57:61">qemu_mouse_hid_report_descriptor</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="59:15" pos:end="67:13">else if <condition pos:start="59:23" pos:end="59:46">(<expr pos:start="59:24" pos:end="59:45"><name pos:start="59:24" pos:end="59:31"><name pos:start="59:24" pos:end="59:25">hs</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:31">kind</name></name> <operator pos:start="59:33" pos:end="59:34">==</operator> <name pos:start="59:36" pos:end="59:45">HID_TABLET</name></expr>)</condition> <block pos:start="59:48" pos:end="67:13">{<block_content pos:start="61:17" pos:end="65:64">

                <expr_stmt pos:start="61:17" pos:end="63:66"><expr pos:start="61:17" pos:end="63:65"><call pos:start="61:17" pos:end="63:65"><name pos:start="61:17" pos:end="61:22">memcpy</name><argument_list pos:start="61:23" pos:end="63:65">(<argument pos:start="61:24" pos:end="61:27"><expr pos:start="61:24" pos:end="61:27"><name pos:start="61:24" pos:end="61:27">data</name></expr></argument>, <argument pos:start="61:30" pos:end="61:62"><expr pos:start="61:30" pos:end="61:62"><name pos:start="61:30" pos:end="61:62">qemu_tablet_hid_report_descriptor</name></expr></argument>,

		       <argument pos:start="63:24" pos:end="63:64"><expr pos:start="63:24" pos:end="63:64"><sizeof pos:start="63:24" pos:end="63:64">sizeof<argument_list pos:start="63:30" pos:end="63:64">(<argument pos:start="63:31" pos:end="63:63"><expr pos:start="63:31" pos:end="63:63"><name pos:start="63:31" pos:end="63:63">qemu_tablet_hid_report_descriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="65:17" pos:end="65:64"><expr pos:start="65:17" pos:end="65:63"><name pos:start="65:17" pos:end="65:19">ret</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <sizeof pos:start="65:23" pos:end="65:63">sizeof<argument_list pos:start="65:29" pos:end="65:63">(<argument pos:start="65:30" pos:end="65:62"><expr pos:start="65:30" pos:end="65:62"><name pos:start="65:30" pos:end="65:62">qemu_tablet_hid_report_descriptor</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="67:15" pos:end="75:13">else if <condition pos:start="67:23" pos:end="67:48">(<expr pos:start="67:24" pos:end="67:47"><name pos:start="67:24" pos:end="67:31"><name pos:start="67:24" pos:end="67:25">hs</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:31">kind</name></name> <operator pos:start="67:33" pos:end="67:34">==</operator> <name pos:start="67:36" pos:end="67:47">HID_KEYBOARD</name></expr>)</condition> <block pos:start="67:50" pos:end="75:13">{<block_content pos:start="69:17" pos:end="73:66">

                <expr_stmt pos:start="69:17" pos:end="71:68"><expr pos:start="69:17" pos:end="71:67"><call pos:start="69:17" pos:end="71:67"><name pos:start="69:17" pos:end="69:22">memcpy</name><argument_list pos:start="69:23" pos:end="71:67">(<argument pos:start="69:24" pos:end="69:27"><expr pos:start="69:24" pos:end="69:27"><name pos:start="69:24" pos:end="69:27">data</name></expr></argument>, <argument pos:start="69:30" pos:end="69:64"><expr pos:start="69:30" pos:end="69:64"><name pos:start="69:30" pos:end="69:64">qemu_keyboard_hid_report_descriptor</name></expr></argument>,

                       <argument pos:start="71:24" pos:end="71:66"><expr pos:start="71:24" pos:end="71:66"><sizeof pos:start="71:24" pos:end="71:66">sizeof<argument_list pos:start="71:30" pos:end="71:66">(<argument pos:start="71:31" pos:end="71:65"><expr pos:start="71:31" pos:end="71:65"><name pos:start="71:31" pos:end="71:65">qemu_keyboard_hid_report_descriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:66"><expr pos:start="73:17" pos:end="73:65"><name pos:start="73:17" pos:end="73:19">ret</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <sizeof pos:start="73:23" pos:end="73:65">sizeof<argument_list pos:start="73:29" pos:end="73:65">(<argument pos:start="73:30" pos:end="73:64"><expr pos:start="73:30" pos:end="73:64"><name pos:start="73:30" pos:end="73:64">qemu_keyboard_hid_report_descriptor</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        <default pos:start="79:9" pos:end="79:16">default:</default>

            <goto pos:start="81:13" pos:end="81:22">goto <name pos:start="81:18" pos:end="81:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:20">case <expr pos:start="87:10" pos:end="87:19"><name pos:start="87:10" pos:end="87:19">GET_REPORT</name></expr>:</case>

        <if_stmt pos:start="89:9" pos:end="97:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:60">(<expr pos:start="89:13" pos:end="89:59"><name pos:start="89:13" pos:end="89:20"><name pos:start="89:13" pos:end="89:14">hs</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:20">kind</name></name> <operator pos:start="89:22" pos:end="89:23">==</operator> <name pos:start="89:25" pos:end="89:33">HID_MOUSE</name> <operator pos:start="89:35" pos:end="89:36">||</operator> <name pos:start="89:38" pos:end="89:45"><name pos:start="89:38" pos:end="89:39">hs</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:45">kind</name></name> <operator pos:start="89:47" pos:end="89:48">==</operator> <name pos:start="89:50" pos:end="89:59">HID_TABLET</name></expr>)</condition> <block pos:start="89:62" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:53">

            <expr_stmt pos:start="91:13" pos:end="91:53"><expr pos:start="91:13" pos:end="91:52"><name pos:start="91:13" pos:end="91:15">ret</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="91:52"><name pos:start="91:19" pos:end="91:34">hid_pointer_poll</name><argument_list pos:start="91:35" pos:end="91:52">(<argument pos:start="91:36" pos:end="91:37"><expr pos:start="91:36" pos:end="91:37"><name pos:start="91:36" pos:end="91:37">hs</name></expr></argument>, <argument pos:start="91:40" pos:end="91:43"><expr pos:start="91:40" pos:end="91:43"><name pos:start="91:40" pos:end="91:43">data</name></expr></argument>, <argument pos:start="91:46" pos:end="91:51"><expr pos:start="91:46" pos:end="91:51"><name pos:start="91:46" pos:end="91:51">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="93:11" pos:end="97:9">else if <condition pos:start="93:19" pos:end="93:44">(<expr pos:start="93:20" pos:end="93:43"><name pos:start="93:20" pos:end="93:27"><name pos:start="93:20" pos:end="93:21">hs</name><operator pos:start="93:22" pos:end="93:23">-&gt;</operator><name pos:start="93:24" pos:end="93:27">kind</name></name> <operator pos:start="93:29" pos:end="93:30">==</operator> <name pos:start="93:32" pos:end="93:43">HID_KEYBOARD</name></expr>)</condition> <block pos:start="93:46" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:54">

            <expr_stmt pos:start="95:13" pos:end="95:54"><expr pos:start="95:13" pos:end="95:53"><name pos:start="95:13" pos:end="95:15">ret</name> <operator pos:start="95:17" pos:end="95:17">=</operator> <call pos:start="95:19" pos:end="95:53"><name pos:start="95:19" pos:end="95:35">hid_keyboard_poll</name><argument_list pos:start="95:36" pos:end="95:53">(<argument pos:start="95:37" pos:end="95:38"><expr pos:start="95:37" pos:end="95:38"><name pos:start="95:37" pos:end="95:38">hs</name></expr></argument>, <argument pos:start="95:41" pos:end="95:44"><expr pos:start="95:41" pos:end="95:44"><name pos:start="95:41" pos:end="95:44">data</name></expr></argument>, <argument pos:start="95:47" pos:end="95:52"><expr pos:start="95:47" pos:end="95:52"><name pos:start="95:47" pos:end="95:52">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:32"><expr pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:10">us</name><operator pos:start="99:11" pos:end="99:12">-&gt;</operator><name pos:start="99:13" pos:end="99:19">changed</name></name> <operator pos:start="99:21" pos:end="99:21">=</operator> <name pos:start="99:23" pos:end="99:27"><name pos:start="99:23" pos:end="99:24">hs</name><operator pos:start="99:25" pos:end="99:26">-&gt;</operator><name pos:start="99:27" pos:end="99:27">n</name></name> <operator pos:start="99:29" pos:end="99:29">&gt;</operator> <literal type="number" pos:start="99:31" pos:end="99:31">0</literal></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:20">case <expr pos:start="103:10" pos:end="103:19"><name pos:start="103:10" pos:end="103:19">SET_REPORT</name></expr>:</case>

        <if_stmt pos:start="105:9" pos:end="113:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:37">(<expr pos:start="105:13" pos:end="105:36"><name pos:start="105:13" pos:end="105:20"><name pos:start="105:13" pos:end="105:14">hs</name><operator pos:start="105:15" pos:end="105:16">-&gt;</operator><name pos:start="105:17" pos:end="105:20">kind</name></name> <operator pos:start="105:22" pos:end="105:23">==</operator> <name pos:start="105:25" pos:end="105:36">HID_KEYBOARD</name></expr>)</condition> <block pos:start="105:39" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:55">

            <expr_stmt pos:start="107:13" pos:end="107:55"><expr pos:start="107:13" pos:end="107:54"><name pos:start="107:13" pos:end="107:15">ret</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <call pos:start="107:19" pos:end="107:54"><name pos:start="107:19" pos:end="107:36">hid_keyboard_write</name><argument_list pos:start="107:37" pos:end="107:54">(<argument pos:start="107:38" pos:end="107:39"><expr pos:start="107:38" pos:end="107:39"><name pos:start="107:38" pos:end="107:39">hs</name></expr></argument>, <argument pos:start="107:42" pos:end="107:45"><expr pos:start="107:42" pos:end="107:45"><name pos:start="107:42" pos:end="107:45">data</name></expr></argument>, <argument pos:start="107:48" pos:end="107:53"><expr pos:start="107:48" pos:end="107:53"><name pos:start="107:48" pos:end="107:53">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="109:11" pos:end="113:9">else <block pos:start="109:16" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:22">

            <goto pos:start="111:13" pos:end="111:22">goto <name pos:start="111:18" pos:end="111:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:22">case <expr pos:start="117:10" pos:end="117:21"><name pos:start="117:10" pos:end="117:21">GET_PROTOCOL</name></expr>:</case>

        <if_stmt pos:start="119:9" pos:end="123:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:62">(<expr pos:start="119:13" pos:end="119:61"><name pos:start="119:13" pos:end="119:20"><name pos:start="119:13" pos:end="119:14">hs</name><operator pos:start="119:15" pos:end="119:16">-&gt;</operator><name pos:start="119:17" pos:end="119:20">kind</name></name> <operator pos:start="119:22" pos:end="119:23">!=</operator> <name pos:start="119:25" pos:end="119:36">HID_KEYBOARD</name> <operator pos:start="119:38" pos:end="119:39">&amp;&amp;</operator> <name pos:start="119:41" pos:end="119:48"><name pos:start="119:41" pos:end="119:42">hs</name><operator pos:start="119:43" pos:end="119:44">-&gt;</operator><name pos:start="119:45" pos:end="119:48">kind</name></name> <operator pos:start="119:50" pos:end="119:51">!=</operator> <name pos:start="119:53" pos:end="119:61">HID_MOUSE</name></expr>)</condition> <block pos:start="119:64" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:22">

            <goto pos:start="121:13" pos:end="121:22">goto <name pos:start="121:18" pos:end="121:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:16"><expr pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <literal type="number" pos:start="125:15" pos:end="125:15">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:31"><expr pos:start="127:9" pos:end="127:30"><name pos:start="127:9" pos:end="127:15"><name pos:start="127:9" pos:end="127:12">data</name><index pos:start="127:13" pos:end="127:15">[<expr pos:start="127:14" pos:end="127:14"><literal type="number" pos:start="127:14" pos:end="127:14">0</literal></expr>]</index></name> <operator pos:start="127:17" pos:end="127:17">=</operator> <name pos:start="127:19" pos:end="127:30"><name pos:start="127:19" pos:end="127:20">us</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:30">protocol</name></name></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>

    <case pos:start="131:5" pos:end="131:22">case <expr pos:start="131:10" pos:end="131:21"><name pos:start="131:10" pos:end="131:21">SET_PROTOCOL</name></expr>:</case>

        <if_stmt pos:start="133:9" pos:end="137:9"><if pos:start="133:9" pos:end="137:9">if <condition pos:start="133:12" pos:end="133:62">(<expr pos:start="133:13" pos:end="133:61"><name pos:start="133:13" pos:end="133:20"><name pos:start="133:13" pos:end="133:14">hs</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:20">kind</name></name> <operator pos:start="133:22" pos:end="133:23">!=</operator> <name pos:start="133:25" pos:end="133:36">HID_KEYBOARD</name> <operator pos:start="133:38" pos:end="133:39">&amp;&amp;</operator> <name pos:start="133:41" pos:end="133:48"><name pos:start="133:41" pos:end="133:42">hs</name><operator pos:start="133:43" pos:end="133:44">-&gt;</operator><name pos:start="133:45" pos:end="133:48">kind</name></name> <operator pos:start="133:50" pos:end="133:51">!=</operator> <name pos:start="133:53" pos:end="133:61">HID_MOUSE</name></expr>)</condition> <block pos:start="133:64" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:22">

            <goto pos:start="135:13" pos:end="135:22">goto <name pos:start="135:18" pos:end="135:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:16"><expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:11">ret</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <literal type="number" pos:start="139:15" pos:end="139:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:29"><expr pos:start="141:9" pos:end="141:28"><name pos:start="141:9" pos:end="141:20"><name pos:start="141:9" pos:end="141:10">us</name><operator pos:start="141:11" pos:end="141:12">-&gt;</operator><name pos:start="141:13" pos:end="141:20">protocol</name></name> <operator pos:start="141:22" pos:end="141:22">=</operator> <name pos:start="141:24" pos:end="141:28">value</name></expr>;</expr_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    <case pos:start="145:5" pos:end="145:18">case <expr pos:start="145:10" pos:end="145:17"><name pos:start="145:10" pos:end="145:17">GET_IDLE</name></expr>:</case>

        <expr_stmt pos:start="147:9" pos:end="147:16"><expr pos:start="147:9" pos:end="147:15"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <literal type="number" pos:start="147:15" pos:end="147:15">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:27"><expr pos:start="149:9" pos:end="149:26"><name pos:start="149:9" pos:end="149:15"><name pos:start="149:9" pos:end="149:12">data</name><index pos:start="149:13" pos:end="149:15">[<expr pos:start="149:14" pos:end="149:14"><literal type="number" pos:start="149:14" pos:end="149:14">0</literal></expr>]</index></name> <operator pos:start="149:17" pos:end="149:17">=</operator> <name pos:start="149:19" pos:end="149:26"><name pos:start="149:19" pos:end="149:20">us</name><operator pos:start="149:21" pos:end="149:22">-&gt;</operator><name pos:start="149:23" pos:end="149:26">idle</name></name></expr>;</expr_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>

    <case pos:start="153:5" pos:end="153:18">case <expr pos:start="153:10" pos:end="153:17"><name pos:start="153:10" pos:end="153:17">SET_IDLE</name></expr>:</case>

        <expr_stmt pos:start="155:9" pos:end="155:42"><expr pos:start="155:9" pos:end="155:41"><name pos:start="155:9" pos:end="155:16"><name pos:start="155:9" pos:end="155:10">us</name><operator pos:start="155:11" pos:end="155:12">-&gt;</operator><name pos:start="155:13" pos:end="155:16">idle</name></name> <operator pos:start="155:18" pos:end="155:18">=</operator> <operator pos:start="155:20" pos:end="155:20">(</operator><name pos:start="155:21" pos:end="155:27">uint8_t</name><operator pos:start="155:28" pos:end="155:28">)</operator> <operator pos:start="155:30" pos:end="155:30">(</operator><name pos:start="155:31" pos:end="155:35">value</name> <operator pos:start="155:37" pos:end="155:38">&gt;&gt;</operator> <literal type="number" pos:start="155:40" pos:end="155:40">8</literal><operator pos:start="155:41" pos:end="155:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:63"><expr pos:start="157:9" pos:end="157:62"><call pos:start="157:9" pos:end="157:62"><name pos:start="157:9" pos:end="157:29">usb_hid_set_next_idle</name><argument_list pos:start="157:30" pos:end="157:62">(<argument pos:start="157:31" pos:end="157:32"><expr pos:start="157:31" pos:end="157:32"><name pos:start="157:31" pos:end="157:32">us</name></expr></argument>, <argument pos:start="157:35" pos:end="157:61"><expr pos:start="157:35" pos:end="157:61"><call pos:start="157:35" pos:end="157:61"><name pos:start="157:35" pos:end="157:51">qemu_get_clock_ns</name><argument_list pos:start="157:52" pos:end="157:61">(<argument pos:start="157:53" pos:end="157:60"><expr pos:start="157:53" pos:end="157:60"><name pos:start="157:53" pos:end="157:60">vm_clock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:16"><expr pos:start="159:9" pos:end="159:15"><name pos:start="159:9" pos:end="159:11">ret</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <literal type="number" pos:start="159:15" pos:end="159:15">0</literal></expr>;</expr_stmt>

        <break pos:start="161:9" pos:end="161:14">break;</break>

    <default pos:start="163:5" pos:end="163:12">default:</default>

    <label pos:start="165:5" pos:end="165:9"><name pos:start="165:5" pos:end="165:8">fail</name>:</label>

        <expr_stmt pos:start="167:9" pos:end="167:28"><expr pos:start="167:9" pos:end="167:27"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:13">=</operator> <name pos:start="167:15" pos:end="167:27">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="169:9" pos:end="169:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="173:5" pos:end="173:15">return <expr pos:start="173:12" pos:end="173:14"><name pos:start="173:12" pos:end="173:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
