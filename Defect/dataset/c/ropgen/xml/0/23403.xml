<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23403.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:34">get_cluster_offset</name><parameter_list pos:start="1:35" pos:end="7:58">(<parameter pos:start="1:36" pos:end="1:55"><decl pos:start="1:36" pos:end="1:55"><type pos:start="1:36" pos:end="1:55"><name pos:start="1:36" pos:end="1:51">BlockDriverState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">bs</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:50"><decl pos:start="3:36" pos:end="3:50"><type pos:start="3:36" pos:end="3:50"><name pos:start="3:36" pos:end="3:43">uint64_t</name></type> <name pos:start="3:45" pos:end="3:50">offset</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:64"><decl pos:start="3:53" pos:end="3:64"><type pos:start="3:53" pos:end="3:64"><name pos:start="3:53" pos:end="3:55">int</name></type> <name pos:start="3:57" pos:end="3:64">allocate</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:54"><decl pos:start="5:36" pos:end="5:54"><type pos:start="5:36" pos:end="5:54"><name pos:start="5:36" pos:end="5:38">int</name></type> <name pos:start="5:40" pos:end="5:54">compressed_size</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:46"><decl pos:start="7:36" pos:end="7:46"><type pos:start="7:36" pos:end="7:46"><name pos:start="7:36" pos:end="7:38">int</name></type> <name pos:start="7:40" pos:end="7:46">n_start</name></decl></parameter>, <parameter pos:start="7:49" pos:end="7:57"><decl pos:start="7:49" pos:end="7:57"><type pos:start="7:49" pos:end="7:57"><name pos:start="7:49" pos:end="7:51">int</name></type> <name pos:start="7:53" pos:end="7:57">n_end</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="267:1">{<block_content pos:start="11:5" pos:end="265:26">

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">BDRVQcowState</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">s</name> <init pos:start="11:22" pos:end="11:33">= <expr pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:25">bs</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">min_index</name></decl>, <decl pos:start="13:20" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:20" pos:end="13:20">i</name></decl>, <decl pos:start="13:23" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:23" pos:end="13:23">j</name></decl>, <decl pos:start="13:26" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:26" pos:end="13:33">l1_index</name></decl>, <decl pos:start="13:36" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:36" pos:end="13:43">l2_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:55"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:22">l2_offset</name></decl>, <decl pos:start="15:25" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:12"><modifier pos:start="15:25" pos:end="15:25">*</modifier></type><name pos:start="15:26" pos:end="15:33">l2_table</name></decl>, <decl pos:start="15:36" pos:end="15:49"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:36" pos:end="15:49">cluster_offset</name></decl>, <decl pos:start="15:52" pos:end="15:54"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:52" pos:end="15:54">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:22">min_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:20">new_l2_table</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:56"><expr pos:start="23:5" pos:end="23:55"><name pos:start="23:5" pos:end="23:12">l1_index</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:21">offset</name> <operator pos:start="23:23" pos:end="23:24">&gt;&gt;</operator> <operator pos:start="23:26" pos:end="23:26">(</operator><name pos:start="23:27" pos:end="23:36"><name pos:start="23:27" pos:end="23:27">s</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:36">l2_bits</name></name> <operator pos:start="23:38" pos:end="23:38">+</operator> <name pos:start="23:40" pos:end="23:54"><name pos:start="23:40" pos:end="23:40">s</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:54">cluster_bits</name></name><operator pos:start="23:55" pos:end="23:55">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:13">l2_offset</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:37"><name pos:start="25:17" pos:end="25:17">s</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:27">l1_table</name><index pos:start="25:28" pos:end="25:37">[<expr pos:start="25:29" pos:end="25:36"><name pos:start="25:29" pos:end="25:36">l1_index</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:16">new_l2_table</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="59:5"><if pos:start="29:5" pos:end="59:5">if <condition pos:start="29:8" pos:end="29:19">(<expr pos:start="29:9" pos:end="29:18"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:18">l2_offset</name></expr>)</condition> <block pos:start="29:21" pos:end="59:5">{<block_content pos:start="31:9" pos:end="57:25">

        <if_stmt pos:start="31:9" pos:end="33:21"><if pos:start="31:9" pos:end="33:21">if <condition pos:start="31:12" pos:end="31:22">(<expr pos:start="31:13" pos:end="31:21"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:21">allocate</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:21"><block_content pos:start="33:13" pos:end="33:21">

            <return pos:start="33:13" pos:end="33:21">return <expr pos:start="33:20" pos:end="33:20"><literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="35:9" pos:end="35:37">/* allocate a new l2 entry */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:49"><expr pos:start="37:9" pos:end="37:48"><name pos:start="37:9" pos:end="37:17">l2_offset</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <call pos:start="37:21" pos:end="37:48"><name pos:start="37:21" pos:end="37:34">bdrv_getlength</name><argument_list pos:start="37:35" pos:end="37:48">(<argument pos:start="37:36" pos:end="37:47"><expr pos:start="37:36" pos:end="37:47"><name pos:start="37:36" pos:end="37:47"><name pos:start="37:36" pos:end="37:37">bs</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:43">file</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:47">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="39:9" pos:end="39:35">/* round to cluster size */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:79"><expr pos:start="41:9" pos:end="41:78"><name pos:start="41:9" pos:end="41:17">l2_offset</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <operator pos:start="41:21" pos:end="41:21">(</operator><name pos:start="41:22" pos:end="41:30">l2_offset</name> <operator pos:start="41:32" pos:end="41:32">+</operator> <name pos:start="41:34" pos:end="41:48"><name pos:start="41:34" pos:end="41:34">s</name><operator pos:start="41:35" pos:end="41:36">-&gt;</operator><name pos:start="41:37" pos:end="41:48">cluster_size</name></name> <operator pos:start="41:50" pos:end="41:50">-</operator> <literal type="number" pos:start="41:52" pos:end="41:52">1</literal><operator pos:start="41:53" pos:end="41:53">)</operator> <operator pos:start="41:55" pos:end="41:55">&amp;</operator> <operator pos:start="41:57" pos:end="41:57">~</operator><operator pos:start="41:58" pos:end="41:58">(</operator><name pos:start="41:59" pos:end="41:73"><name pos:start="41:59" pos:end="41:59">s</name><operator pos:start="41:60" pos:end="41:61">-&gt;</operator><name pos:start="41:62" pos:end="41:73">cluster_size</name></name> <operator pos:start="41:75" pos:end="41:75">-</operator> <literal type="number" pos:start="41:77" pos:end="41:77">1</literal><operator pos:start="41:78" pos:end="41:78">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="43:9" pos:end="43:33">/* update the L1 entry */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:42"><expr pos:start="45:9" pos:end="45:41"><name pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:19">l1_table</name><index pos:start="45:20" pos:end="45:29">[<expr pos:start="45:21" pos:end="45:28"><name pos:start="45:21" pos:end="45:28">l1_index</name></expr>]</index></name> <operator pos:start="45:31" pos:end="45:31">=</operator> <name pos:start="45:33" pos:end="45:41">l2_offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:37"><expr pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:11">tmp</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:36"><name pos:start="47:15" pos:end="47:25">cpu_to_be64</name><argument_list pos:start="47:26" pos:end="47:36">(<argument pos:start="47:27" pos:end="47:35"><expr pos:start="47:27" pos:end="47:35"><name pos:start="47:27" pos:end="47:35">l2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="55:21"><if pos:start="49:9" pos:end="55:21">if <condition pos:start="49:12" pos:end="53:39">(<expr pos:start="49:13" pos:end="53:38"><call pos:start="49:13" pos:end="53:34"><name pos:start="49:13" pos:end="49:28">bdrv_pwrite_sync</name><argument_list pos:start="49:29" pos:end="53:34">(<argument pos:start="49:30" pos:end="49:37"><expr pos:start="49:30" pos:end="49:37"><name pos:start="49:30" pos:end="49:37"><name pos:start="49:30" pos:end="49:31">bs</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:37">file</name></name></expr></argument>,

                <argument pos:start="51:17" pos:end="51:59"><expr pos:start="51:17" pos:end="51:59"><name pos:start="51:17" pos:end="51:34"><name pos:start="51:17" pos:end="51:17">s</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:34">l1_table_offset</name></name> <operator pos:start="51:36" pos:end="51:36">+</operator> <name pos:start="51:38" pos:end="51:45">l1_index</name> <operator pos:start="51:47" pos:end="51:47">*</operator> <sizeof pos:start="51:49" pos:end="51:59">sizeof<argument_list pos:start="51:55" pos:end="51:59">(<argument pos:start="51:56" pos:end="51:58"><expr pos:start="51:56" pos:end="51:58"><name pos:start="51:56" pos:end="51:58">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                <argument pos:start="53:17" pos:end="53:20"><expr pos:start="53:17" pos:end="53:20"><operator pos:start="53:17" pos:end="53:17">&amp;</operator><name pos:start="53:18" pos:end="53:20">tmp</name></expr></argument>, <argument pos:start="53:23" pos:end="53:33"><expr pos:start="53:23" pos:end="53:33"><sizeof pos:start="53:23" pos:end="53:33">sizeof<argument_list pos:start="53:29" pos:end="53:33">(<argument pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:32">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="53:36" pos:end="53:36">&lt;</operator> <literal type="number" pos:start="53:38" pos:end="53:38">0</literal></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:21"><block_content pos:start="55:13" pos:end="55:21">

            <return pos:start="55:13" pos:end="55:21">return <expr pos:start="55:20" pos:end="55:20"><literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:25"><expr pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:20">new_l2_table</name> <operator pos:start="57:22" pos:end="57:22">=</operator> <literal type="number" pos:start="57:24" pos:end="57:24">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="61:5" pos:end="83:5">for<control pos:start="61:8" pos:end="61:38">(<init pos:start="61:9" pos:end="61:14"><expr pos:start="61:9" pos:end="61:13"><name pos:start="61:9" pos:end="61:9">i</name> <operator pos:start="61:11" pos:end="61:11">=</operator> <literal type="number" pos:start="61:13" pos:end="61:13">0</literal></expr>;</init> <condition pos:start="61:16" pos:end="61:33"><expr pos:start="61:16" pos:end="61:32"><name pos:start="61:16" pos:end="61:16">i</name> <operator pos:start="61:18" pos:end="61:18">&lt;</operator> <name pos:start="61:20" pos:end="61:32">L2_CACHE_SIZE</name></expr>;</condition> <incr pos:start="61:35" pos:end="61:37"><expr pos:start="61:35" pos:end="61:37"><name pos:start="61:35" pos:end="61:35">i</name><operator pos:start="61:36" pos:end="61:37">++</operator></expr></incr>)</control> <block pos:start="61:40" pos:end="83:5">{<block_content pos:start="63:9" pos:end="81:9">

        <if_stmt pos:start="63:9" pos:end="81:9"><if pos:start="63:9" pos:end="81:9">if <condition pos:start="63:12" pos:end="63:48">(<expr pos:start="63:13" pos:end="63:47"><name pos:start="63:13" pos:end="63:21">l2_offset</name> <operator pos:start="63:23" pos:end="63:24">==</operator> <name pos:start="63:26" pos:end="63:47"><name pos:start="63:26" pos:end="63:26">s</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:44">l2_cache_offsets</name><index pos:start="63:45" pos:end="63:47">[<expr pos:start="63:46" pos:end="63:46"><name pos:start="63:46" pos:end="63:46">i</name></expr>]</index></name></expr>)</condition> <block pos:start="63:50" pos:end="81:9">{<block_content pos:start="67:13" pos:end="79:23">

            <comment type="block" pos:start="65:13" pos:end="65:41">/* increment the hit count */</comment>

            <if_stmt pos:start="67:13" pos:end="75:13"><if pos:start="67:13" pos:end="75:13">if <condition pos:start="67:16" pos:end="67:54">(<expr pos:start="67:17" pos:end="67:53"><operator pos:start="67:17" pos:end="67:18">++</operator><name pos:start="67:19" pos:end="67:39"><name pos:start="67:19" pos:end="67:19">s</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:36">l2_cache_counts</name><index pos:start="67:37" pos:end="67:39">[<expr pos:start="67:38" pos:end="67:38"><name pos:start="67:38" pos:end="67:38">i</name></expr>]</index></name> <operator pos:start="67:41" pos:end="67:42">==</operator> <literal type="number" pos:start="67:44" pos:end="67:53">0xffffffff</literal></expr>)</condition> <block pos:start="67:56" pos:end="75:13">{<block_content pos:start="69:17" pos:end="73:17">

                <for pos:start="69:17" pos:end="73:17">for<control pos:start="69:20" pos:end="69:50">(<init pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:25"><name pos:start="69:21" pos:end="69:21">j</name> <operator pos:start="69:23" pos:end="69:23">=</operator> <literal type="number" pos:start="69:25" pos:end="69:25">0</literal></expr>;</init> <condition pos:start="69:28" pos:end="69:45"><expr pos:start="69:28" pos:end="69:44"><name pos:start="69:28" pos:end="69:28">j</name> <operator pos:start="69:30" pos:end="69:30">&lt;</operator> <name pos:start="69:32" pos:end="69:44">L2_CACHE_SIZE</name></expr>;</condition> <incr pos:start="69:47" pos:end="69:49"><expr pos:start="69:47" pos:end="69:49"><name pos:start="69:47" pos:end="69:47">j</name><operator pos:start="69:48" pos:end="69:49">++</operator></expr></incr>)</control> <block pos:start="69:52" pos:end="73:17">{<block_content pos:start="71:21" pos:end="71:48">

                    <expr_stmt pos:start="71:21" pos:end="71:48"><expr pos:start="71:21" pos:end="71:47"><name pos:start="71:21" pos:end="71:41"><name pos:start="71:21" pos:end="71:21">s</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:38">l2_cache_counts</name><index pos:start="71:39" pos:end="71:41">[<expr pos:start="71:40" pos:end="71:40"><name pos:start="71:40" pos:end="71:40">j</name></expr>]</index></name> <operator pos:start="71:43" pos:end="71:45">&gt;&gt;=</operator> <literal type="number" pos:start="71:47" pos:end="71:47">1</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:55"><expr pos:start="77:13" pos:end="77:54"><name pos:start="77:13" pos:end="77:20">l2_table</name> <operator pos:start="77:22" pos:end="77:22">=</operator> <name pos:start="77:24" pos:end="77:34"><name pos:start="77:24" pos:end="77:24">s</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:34">l2_cache</name></name> <operator pos:start="77:36" pos:end="77:36">+</operator> <operator pos:start="77:38" pos:end="77:38">(</operator><name pos:start="77:39" pos:end="77:39">i</name> <operator pos:start="77:41" pos:end="77:42">&lt;&lt;</operator> <name pos:start="77:44" pos:end="77:53"><name pos:start="77:44" pos:end="77:44">s</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:53">l2_bits</name></name><operator pos:start="77:54" pos:end="77:54">)</operator></expr>;</expr_stmt>

            <goto pos:start="79:13" pos:end="79:23">goto <name pos:start="79:18" pos:end="79:22">found</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="85:5" pos:end="85:59">/* not found: load a new entry in the least used one */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:18"><expr pos:start="87:5" pos:end="87:17"><name pos:start="87:5" pos:end="87:13">min_index</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <literal type="number" pos:start="87:17" pos:end="87:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:27"><expr pos:start="89:5" pos:end="89:26"><name pos:start="89:5" pos:end="89:13">min_count</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <literal type="number" pos:start="89:17" pos:end="89:26">0xffffffff</literal></expr>;</expr_stmt>

    <for pos:start="91:5" pos:end="101:5">for<control pos:start="91:8" pos:end="91:38">(<init pos:start="91:9" pos:end="91:14"><expr pos:start="91:9" pos:end="91:13"><name pos:start="91:9" pos:end="91:9">i</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <literal type="number" pos:start="91:13" pos:end="91:13">0</literal></expr>;</init> <condition pos:start="91:16" pos:end="91:33"><expr pos:start="91:16" pos:end="91:32"><name pos:start="91:16" pos:end="91:16">i</name> <operator pos:start="91:18" pos:end="91:18">&lt;</operator> <name pos:start="91:20" pos:end="91:32">L2_CACHE_SIZE</name></expr>;</condition> <incr pos:start="91:35" pos:end="91:37"><expr pos:start="91:35" pos:end="91:37"><name pos:start="91:35" pos:end="91:35">i</name><operator pos:start="91:36" pos:end="91:37">++</operator></expr></incr>)</control> <block pos:start="91:40" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:9">

        <if_stmt pos:start="93:9" pos:end="99:9"><if pos:start="93:9" pos:end="99:9">if <condition pos:start="93:12" pos:end="93:46">(<expr pos:start="93:13" pos:end="93:45"><name pos:start="93:13" pos:end="93:33"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:30">l2_cache_counts</name><index pos:start="93:31" pos:end="93:33">[<expr pos:start="93:32" pos:end="93:32"><name pos:start="93:32" pos:end="93:32">i</name></expr>]</index></name> <operator pos:start="93:35" pos:end="93:35">&lt;</operator> <name pos:start="93:37" pos:end="93:45">min_count</name></expr>)</condition> <block pos:start="93:48" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:26">

            <expr_stmt pos:start="95:13" pos:end="95:46"><expr pos:start="95:13" pos:end="95:45"><name pos:start="95:13" pos:end="95:21">min_count</name> <operator pos:start="95:23" pos:end="95:23">=</operator> <name pos:start="95:25" pos:end="95:45"><name pos:start="95:25" pos:end="95:25">s</name><operator pos:start="95:26" pos:end="95:27">-&gt;</operator><name pos:start="95:28" pos:end="95:42">l2_cache_counts</name><index pos:start="95:43" pos:end="95:45">[<expr pos:start="95:44" pos:end="95:44"><name pos:start="95:44" pos:end="95:44">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:26"><expr pos:start="97:13" pos:end="97:25"><name pos:start="97:13" pos:end="97:21">min_index</name> <operator pos:start="97:23" pos:end="97:23">=</operator> <name pos:start="97:25" pos:end="97:25">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="103:5" pos:end="103:55"><expr pos:start="103:5" pos:end="103:54"><name pos:start="103:5" pos:end="103:12">l2_table</name> <operator pos:start="103:14" pos:end="103:14">=</operator> <name pos:start="103:16" pos:end="103:26"><name pos:start="103:16" pos:end="103:16">s</name><operator pos:start="103:17" pos:end="103:18">-&gt;</operator><name pos:start="103:19" pos:end="103:26">l2_cache</name></name> <operator pos:start="103:28" pos:end="103:28">+</operator> <operator pos:start="103:30" pos:end="103:30">(</operator><name pos:start="103:31" pos:end="103:39">min_index</name> <operator pos:start="103:41" pos:end="103:42">&lt;&lt;</operator> <name pos:start="103:44" pos:end="103:53"><name pos:start="103:44" pos:end="103:44">s</name><operator pos:start="103:45" pos:end="103:46">-&gt;</operator><name pos:start="103:47" pos:end="103:53">l2_bits</name></name><operator pos:start="103:54" pos:end="103:54">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="125:5"><if pos:start="105:5" pos:end="115:5">if <condition pos:start="105:8" pos:end="105:21">(<expr pos:start="105:9" pos:end="105:20"><name pos:start="105:9" pos:end="105:20">new_l2_table</name></expr>)</condition> <block pos:start="105:23" pos:end="115:5">{<block_content pos:start="107:9" pos:end="113:21">

        <expr_stmt pos:start="107:9" pos:end="107:59"><expr pos:start="107:9" pos:end="107:58"><call pos:start="107:9" pos:end="107:58"><name pos:start="107:9" pos:end="107:14">memset</name><argument_list pos:start="107:15" pos:end="107:58">(<argument pos:start="107:16" pos:end="107:23"><expr pos:start="107:16" pos:end="107:23"><name pos:start="107:16" pos:end="107:23">l2_table</name></expr></argument>, <argument pos:start="107:26" pos:end="107:26"><expr pos:start="107:26" pos:end="107:26"><literal type="number" pos:start="107:26" pos:end="107:26">0</literal></expr></argument>, <argument pos:start="107:29" pos:end="107:57"><expr pos:start="107:29" pos:end="107:57"><name pos:start="107:29" pos:end="107:38"><name pos:start="107:29" pos:end="107:29">s</name><operator pos:start="107:30" pos:end="107:31">-&gt;</operator><name pos:start="107:32" pos:end="107:38">l2_size</name></name> <operator pos:start="107:40" pos:end="107:40">*</operator> <sizeof pos:start="107:42" pos:end="107:57">sizeof<argument_list pos:start="107:48" pos:end="107:57">(<argument pos:start="107:49" pos:end="107:56"><expr pos:start="107:49" pos:end="107:56"><name pos:start="107:49" pos:end="107:56">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="113:21"><if pos:start="109:9" pos:end="113:21">if <condition pos:start="109:12" pos:end="111:51">(<expr pos:start="109:13" pos:end="111:50"><call pos:start="109:13" pos:end="111:46"><name pos:start="109:13" pos:end="109:28">bdrv_pwrite_sync</name><argument_list pos:start="109:29" pos:end="111:46">(<argument pos:start="109:30" pos:end="109:37"><expr pos:start="109:30" pos:end="109:37"><name pos:start="109:30" pos:end="109:37"><name pos:start="109:30" pos:end="109:31">bs</name><operator pos:start="109:32" pos:end="109:33">-&gt;</operator><name pos:start="109:34" pos:end="109:37">file</name></name></expr></argument>, <argument pos:start="109:40" pos:end="109:48"><expr pos:start="109:40" pos:end="109:48"><name pos:start="109:40" pos:end="109:48">l2_offset</name></expr></argument>, <argument pos:start="109:51" pos:end="109:58"><expr pos:start="109:51" pos:end="109:58"><name pos:start="109:51" pos:end="109:58">l2_table</name></expr></argument>,

                <argument pos:start="111:17" pos:end="111:45"><expr pos:start="111:17" pos:end="111:45"><name pos:start="111:17" pos:end="111:26"><name pos:start="111:17" pos:end="111:17">s</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:26">l2_size</name></name> <operator pos:start="111:28" pos:end="111:28">*</operator> <sizeof pos:start="111:30" pos:end="111:45">sizeof<argument_list pos:start="111:36" pos:end="111:45">(<argument pos:start="111:37" pos:end="111:44"><expr pos:start="111:37" pos:end="111:44"><name pos:start="111:37" pos:end="111:44">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="111:48" pos:end="111:48">&lt;</operator> <literal type="number" pos:start="111:50" pos:end="111:50">0</literal></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:21"><block_content pos:start="113:13" pos:end="113:21">

            <return pos:start="113:13" pos:end="113:21">return <expr pos:start="113:20" pos:end="113:20"><literal type="number" pos:start="113:20" pos:end="113:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="115:7" pos:end="125:5">else <block pos:start="115:12" pos:end="125:5">{<block_content pos:start="117:9" pos:end="123:21">

        <if_stmt pos:start="117:9" pos:end="123:21"><if pos:start="117:9" pos:end="123:21">if <condition pos:start="117:12" pos:end="121:42">(<expr pos:start="117:13" pos:end="121:41"><call pos:start="117:13" pos:end="119:53"><name pos:start="117:13" pos:end="117:22">bdrv_pread</name><argument_list pos:start="117:23" pos:end="119:53">(<argument pos:start="117:24" pos:end="117:31"><expr pos:start="117:24" pos:end="117:31"><name pos:start="117:24" pos:end="117:31"><name pos:start="117:24" pos:end="117:25">bs</name><operator pos:start="117:26" pos:end="117:27">-&gt;</operator><name pos:start="117:28" pos:end="117:31">file</name></name></expr></argument>, <argument pos:start="117:34" pos:end="117:42"><expr pos:start="117:34" pos:end="117:42"><name pos:start="117:34" pos:end="117:42">l2_offset</name></expr></argument>, <argument pos:start="117:45" pos:end="117:52"><expr pos:start="117:45" pos:end="117:52"><name pos:start="117:45" pos:end="117:52">l2_table</name></expr></argument>,

                       <argument pos:start="119:24" pos:end="119:52"><expr pos:start="119:24" pos:end="119:52"><name pos:start="119:24" pos:end="119:33"><name pos:start="119:24" pos:end="119:24">s</name><operator pos:start="119:25" pos:end="119:26">-&gt;</operator><name pos:start="119:27" pos:end="119:33">l2_size</name></name> <operator pos:start="119:35" pos:end="119:35">*</operator> <sizeof pos:start="119:37" pos:end="119:52">sizeof<argument_list pos:start="119:43" pos:end="119:52">(<argument pos:start="119:44" pos:end="119:51"><expr pos:start="119:44" pos:end="119:51"><name pos:start="119:44" pos:end="119:51">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="119:55" pos:end="119:56">!=</operator>

            <name pos:start="121:13" pos:end="121:22"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:22">l2_size</name></name> <operator pos:start="121:24" pos:end="121:24">*</operator> <sizeof pos:start="121:26" pos:end="121:41">sizeof<argument_list pos:start="121:32" pos:end="121:41">(<argument pos:start="121:33" pos:end="121:40"><expr pos:start="121:33" pos:end="121:40"><name pos:start="121:33" pos:end="121:40">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="123:13" pos:end="123:21"><block_content pos:start="123:13" pos:end="123:21">

            <return pos:start="123:13" pos:end="123:21">return <expr pos:start="123:20" pos:end="123:20"><literal type="number" pos:start="123:20" pos:end="123:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:47"><expr pos:start="127:5" pos:end="127:46"><name pos:start="127:5" pos:end="127:34"><name pos:start="127:5" pos:end="127:5">s</name><operator pos:start="127:6" pos:end="127:7">-&gt;</operator><name pos:start="127:8" pos:end="127:23">l2_cache_offsets</name><index pos:start="127:24" pos:end="127:34">[<expr pos:start="127:25" pos:end="127:33"><name pos:start="127:25" pos:end="127:33">min_index</name></expr>]</index></name> <operator pos:start="127:36" pos:end="127:36">=</operator> <name pos:start="127:38" pos:end="127:46">l2_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:38"><expr pos:start="129:5" pos:end="129:37"><name pos:start="129:5" pos:end="129:33"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:22">l2_cache_counts</name><index pos:start="129:23" pos:end="129:33">[<expr pos:start="129:24" pos:end="129:32"><name pos:start="129:24" pos:end="129:32">min_index</name></expr>]</index></name> <operator pos:start="129:35" pos:end="129:35">=</operator> <literal type="number" pos:start="129:37" pos:end="129:37">1</literal></expr>;</expr_stmt>

 <label pos:start="131:2" pos:end="131:7"><name pos:start="131:2" pos:end="131:6">found</name>:</label>

    <expr_stmt pos:start="133:5" pos:end="133:62"><expr pos:start="133:5" pos:end="133:61"><name pos:start="133:5" pos:end="133:12">l2_index</name> <operator pos:start="133:14" pos:end="133:14">=</operator> <operator pos:start="133:16" pos:end="133:16">(</operator><name pos:start="133:17" pos:end="133:22">offset</name> <operator pos:start="133:24" pos:end="133:25">&gt;&gt;</operator> <name pos:start="133:27" pos:end="133:41"><name pos:start="133:27" pos:end="133:27">s</name><operator pos:start="133:28" pos:end="133:29">-&gt;</operator><name pos:start="133:30" pos:end="133:41">cluster_bits</name></name><operator pos:start="133:42" pos:end="133:42">)</operator> <operator pos:start="133:44" pos:end="133:44">&amp;</operator> <operator pos:start="133:46" pos:end="133:46">(</operator><name pos:start="133:47" pos:end="133:56"><name pos:start="133:47" pos:end="133:47">s</name><operator pos:start="133:48" pos:end="133:49">-&gt;</operator><name pos:start="133:50" pos:end="133:56">l2_size</name></name> <operator pos:start="133:58" pos:end="133:58">-</operator> <literal type="number" pos:start="133:60" pos:end="133:60">1</literal><operator pos:start="133:61" pos:end="133:61">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:53"><expr pos:start="135:5" pos:end="135:52"><name pos:start="135:5" pos:end="135:18">cluster_offset</name> <operator pos:start="135:20" pos:end="135:20">=</operator> <call pos:start="135:22" pos:end="135:52"><name pos:start="135:22" pos:end="135:32">be64_to_cpu</name><argument_list pos:start="135:33" pos:end="135:52">(<argument pos:start="135:34" pos:end="135:51"><expr pos:start="135:34" pos:end="135:51"><name pos:start="135:34" pos:end="135:51"><name pos:start="135:34" pos:end="135:41">l2_table</name><index pos:start="135:42" pos:end="135:51">[<expr pos:start="135:43" pos:end="135:50"><name pos:start="135:43" pos:end="135:50">l2_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="263:5"><if pos:start="137:5" pos:end="263:5">if <condition pos:start="137:8" pos:end="139:68">(<expr pos:start="137:9" pos:end="139:67"><operator pos:start="137:9" pos:end="137:9">!</operator><name pos:start="137:10" pos:end="137:23">cluster_offset</name> <operator pos:start="137:25" pos:end="137:26">||</operator>

        <operator pos:start="139:9" pos:end="139:9">(</operator><operator pos:start="139:10" pos:end="139:10">(</operator><name pos:start="139:11" pos:end="139:24">cluster_offset</name> <operator pos:start="139:26" pos:end="139:26">&amp;</operator> <name pos:start="139:28" pos:end="139:48">QCOW_OFLAG_COMPRESSED</name><operator pos:start="139:49" pos:end="139:49">)</operator> <operator pos:start="139:51" pos:end="139:52">&amp;&amp;</operator> <name pos:start="139:54" pos:end="139:61">allocate</name> <operator pos:start="139:63" pos:end="139:64">==</operator> <literal type="number" pos:start="139:66" pos:end="139:66">1</literal><operator pos:start="139:67" pos:end="139:67">)</operator></expr>)</condition> <block pos:start="139:70" pos:end="263:5">{<block_content pos:start="141:9" pos:end="261:21">

        <if_stmt pos:start="141:9" pos:end="143:21"><if pos:start="141:9" pos:end="143:21">if <condition pos:start="141:12" pos:end="141:22">(<expr pos:start="141:13" pos:end="141:21"><operator pos:start="141:13" pos:end="141:13">!</operator><name pos:start="141:14" pos:end="141:21">allocate</name></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:21"><block_content pos:start="143:13" pos:end="143:21">

            <return pos:start="143:13" pos:end="143:21">return <expr pos:start="143:20" pos:end="143:20"><literal type="number" pos:start="143:20" pos:end="143:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="145:9" pos:end="145:36">/* allocate a new cluster */</comment>

        <if_stmt pos:start="147:9" pos:end="249:9"><if pos:start="147:9" pos:end="177:9">if <condition pos:start="147:12" pos:end="149:51">(<expr pos:start="147:13" pos:end="149:50"><operator pos:start="147:13" pos:end="147:13">(</operator><name pos:start="147:14" pos:end="147:27">cluster_offset</name> <operator pos:start="147:29" pos:end="147:29">&amp;</operator> <name pos:start="147:31" pos:end="147:51">QCOW_OFLAG_COMPRESSED</name><operator pos:start="147:52" pos:end="147:52">)</operator> <operator pos:start="147:54" pos:end="147:55">&amp;&amp;</operator>

            <operator pos:start="149:13" pos:end="149:13">(</operator><name pos:start="149:14" pos:end="149:18">n_end</name> <operator pos:start="149:20" pos:end="149:20">-</operator> <name pos:start="149:22" pos:end="149:28">n_start</name><operator pos:start="149:29" pos:end="149:29">)</operator> <operator pos:start="149:31" pos:end="149:31">&lt;</operator> <name pos:start="149:33" pos:end="149:50"><name pos:start="149:33" pos:end="149:33">s</name><operator pos:start="149:34" pos:end="149:35">-&gt;</operator><name pos:start="149:36" pos:end="149:50">cluster_sectors</name></name></expr>)</condition> <block pos:start="149:53" pos:end="177:9">{<block_content pos:start="157:13" pos:end="175:26">

            <comment type="block" pos:start="151:13" pos:end="155:29">/* if the cluster is already compressed, we must

               decompress it in the case it is not completely

               overwritten */</comment>

            <if_stmt pos:start="157:13" pos:end="159:25"><if pos:start="157:13" pos:end="159:25">if <condition pos:start="157:16" pos:end="157:59">(<expr pos:start="157:17" pos:end="157:58"><call pos:start="157:17" pos:end="157:54"><name pos:start="157:17" pos:end="157:34">decompress_cluster</name><argument_list pos:start="157:35" pos:end="157:54">(<argument pos:start="157:36" pos:end="157:37"><expr pos:start="157:36" pos:end="157:37"><name pos:start="157:36" pos:end="157:37">bs</name></expr></argument>, <argument pos:start="157:40" pos:end="157:53"><expr pos:start="157:40" pos:end="157:53"><name pos:start="157:40" pos:end="157:53">cluster_offset</name></expr></argument>)</argument_list></call> <operator pos:start="157:56" pos:end="157:56">&lt;</operator> <literal type="number" pos:start="157:58" pos:end="157:58">0</literal></expr>)</condition><block type="pseudo" pos:start="159:17" pos:end="159:25"><block_content pos:start="159:17" pos:end="159:25">

                <return pos:start="159:17" pos:end="159:25">return <expr pos:start="159:24" pos:end="159:24"><literal type="number" pos:start="159:24" pos:end="159:24">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:58"><expr pos:start="161:13" pos:end="161:57"><name pos:start="161:13" pos:end="161:26">cluster_offset</name> <operator pos:start="161:28" pos:end="161:28">=</operator> <call pos:start="161:30" pos:end="161:57"><name pos:start="161:30" pos:end="161:43">bdrv_getlength</name><argument_list pos:start="161:44" pos:end="161:57">(<argument pos:start="161:45" pos:end="161:56"><expr pos:start="161:45" pos:end="161:56"><name pos:start="161:45" pos:end="161:56"><name pos:start="161:45" pos:end="161:46">bs</name><operator pos:start="161:47" pos:end="161:48">-&gt;</operator><name pos:start="161:49" pos:end="161:52">file</name><operator pos:start="161:53" pos:end="161:54">-&gt;</operator><name pos:start="161:55" pos:end="161:56">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="165:39"><expr pos:start="163:13" pos:end="165:38"><name pos:start="163:13" pos:end="163:26">cluster_offset</name> <operator pos:start="163:28" pos:end="163:28">=</operator> <operator pos:start="163:30" pos:end="163:30">(</operator><name pos:start="163:31" pos:end="163:44">cluster_offset</name> <operator pos:start="163:46" pos:end="163:46">+</operator> <name pos:start="163:48" pos:end="163:62"><name pos:start="163:48" pos:end="163:48">s</name><operator pos:start="163:49" pos:end="163:50">-&gt;</operator><name pos:start="163:51" pos:end="163:62">cluster_size</name></name> <operator pos:start="163:64" pos:end="163:64">-</operator> <literal type="number" pos:start="163:66" pos:end="163:66">1</literal><operator pos:start="163:67" pos:end="163:67">)</operator> <operator pos:start="163:69" pos:end="163:69">&amp;</operator>

                <operator pos:start="165:17" pos:end="165:17">~</operator><operator pos:start="165:18" pos:end="165:18">(</operator><name pos:start="165:19" pos:end="165:33"><name pos:start="165:19" pos:end="165:19">s</name><operator pos:start="165:20" pos:end="165:21">-&gt;</operator><name pos:start="165:22" pos:end="165:33">cluster_size</name></name> <operator pos:start="165:35" pos:end="165:35">-</operator> <literal type="number" pos:start="165:37" pos:end="165:37">1</literal><operator pos:start="165:38" pos:end="165:38">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="167:13" pos:end="167:43">/* write the cluster content */</comment>

            <if_stmt pos:start="169:13" pos:end="175:26"><if pos:start="169:13" pos:end="175:26">if <condition pos:start="169:16" pos:end="173:32">(<expr pos:start="169:17" pos:end="173:31"><call pos:start="169:17" pos:end="171:44"><name pos:start="169:17" pos:end="169:27">bdrv_pwrite</name><argument_list pos:start="169:28" pos:end="171:44">(<argument pos:start="169:29" pos:end="169:36"><expr pos:start="169:29" pos:end="169:36"><name pos:start="169:29" pos:end="169:36"><name pos:start="169:29" pos:end="169:30">bs</name><operator pos:start="169:31" pos:end="169:32">-&gt;</operator><name pos:start="169:33" pos:end="169:36">file</name></name></expr></argument>, <argument pos:start="169:39" pos:end="169:52"><expr pos:start="169:39" pos:end="169:52"><name pos:start="169:39" pos:end="169:52">cluster_offset</name></expr></argument>, <argument pos:start="169:55" pos:end="169:70"><expr pos:start="169:55" pos:end="169:70"><name pos:start="169:55" pos:end="169:70"><name pos:start="169:55" pos:end="169:55">s</name><operator pos:start="169:56" pos:end="169:57">-&gt;</operator><name pos:start="169:58" pos:end="169:70">cluster_cache</name></name></expr></argument>,

                            <argument pos:start="171:29" pos:end="171:43"><expr pos:start="171:29" pos:end="171:43"><name pos:start="171:29" pos:end="171:43"><name pos:start="171:29" pos:end="171:29">s</name><operator pos:start="171:30" pos:end="171:31">-&gt;</operator><name pos:start="171:32" pos:end="171:43">cluster_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="171:46" pos:end="171:47">!=</operator>

                <name pos:start="173:17" pos:end="173:31"><name pos:start="173:17" pos:end="173:17">s</name><operator pos:start="173:18" pos:end="173:19">-&gt;</operator><name pos:start="173:20" pos:end="173:31">cluster_size</name></name></expr>)</condition><block type="pseudo" pos:start="175:17" pos:end="175:26"><block_content pos:start="175:17" pos:end="175:26">

                <return pos:start="175:17" pos:end="175:26">return <expr pos:start="175:24" pos:end="175:25"><operator pos:start="175:24" pos:end="175:24">-</operator><literal type="number" pos:start="175:25" pos:end="175:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="177:11" pos:end="249:9">else <block pos:start="177:16" pos:end="249:9">{<block_content pos:start="179:13" pos:end="247:13">

            <expr_stmt pos:start="179:13" pos:end="179:58"><expr pos:start="179:13" pos:end="179:57"><name pos:start="179:13" pos:end="179:26">cluster_offset</name> <operator pos:start="179:28" pos:end="179:28">=</operator> <call pos:start="179:30" pos:end="179:57"><name pos:start="179:30" pos:end="179:43">bdrv_getlength</name><argument_list pos:start="179:44" pos:end="179:57">(<argument pos:start="179:45" pos:end="179:56"><expr pos:start="179:45" pos:end="179:56"><name pos:start="179:45" pos:end="179:56"><name pos:start="179:45" pos:end="179:46">bs</name><operator pos:start="179:47" pos:end="179:48">-&gt;</operator><name pos:start="179:49" pos:end="179:52">file</name><operator pos:start="179:53" pos:end="179:54">-&gt;</operator><name pos:start="179:55" pos:end="179:56">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="181:13" pos:end="247:13"><if pos:start="181:13" pos:end="241:13">if <condition pos:start="181:16" pos:end="181:30">(<expr pos:start="181:17" pos:end="181:29"><name pos:start="181:17" pos:end="181:24">allocate</name> <operator pos:start="181:26" pos:end="181:27">==</operator> <literal type="number" pos:start="181:29" pos:end="181:29">1</literal></expr>)</condition> <block pos:start="181:32" pos:end="241:13">{<block_content pos:start="185:17" pos:end="239:17">

                <comment type="block" pos:start="183:17" pos:end="183:43">/* round to cluster size */</comment>

                <expr_stmt pos:start="185:17" pos:end="187:43"><expr pos:start="185:17" pos:end="187:42"><name pos:start="185:17" pos:end="185:30">cluster_offset</name> <operator pos:start="185:32" pos:end="185:32">=</operator> <operator pos:start="185:34" pos:end="185:34">(</operator><name pos:start="185:35" pos:end="185:48">cluster_offset</name> <operator pos:start="185:50" pos:end="185:50">+</operator> <name pos:start="185:52" pos:end="185:66"><name pos:start="185:52" pos:end="185:52">s</name><operator pos:start="185:53" pos:end="185:54">-&gt;</operator><name pos:start="185:55" pos:end="185:66">cluster_size</name></name> <operator pos:start="185:68" pos:end="185:68">-</operator> <literal type="number" pos:start="185:70" pos:end="185:70">1</literal><operator pos:start="185:71" pos:end="185:71">)</operator> <operator pos:start="185:73" pos:end="185:73">&amp;</operator>

                    <operator pos:start="187:21" pos:end="187:21">~</operator><operator pos:start="187:22" pos:end="187:22">(</operator><name pos:start="187:23" pos:end="187:37"><name pos:start="187:23" pos:end="187:23">s</name><operator pos:start="187:24" pos:end="187:25">-&gt;</operator><name pos:start="187:26" pos:end="187:37">cluster_size</name></name> <operator pos:start="187:39" pos:end="187:39">-</operator> <literal type="number" pos:start="187:41" pos:end="187:41">1</literal><operator pos:start="187:42" pos:end="187:42">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:80"><expr pos:start="189:17" pos:end="189:79"><call pos:start="189:17" pos:end="189:79"><name pos:start="189:17" pos:end="189:29">bdrv_truncate</name><argument_list pos:start="189:30" pos:end="189:79">(<argument pos:start="189:31" pos:end="189:38"><expr pos:start="189:31" pos:end="189:38"><name pos:start="189:31" pos:end="189:38"><name pos:start="189:31" pos:end="189:32">bs</name><operator pos:start="189:33" pos:end="189:34">-&gt;</operator><name pos:start="189:35" pos:end="189:38">file</name></name></expr></argument>, <argument pos:start="189:41" pos:end="189:72"><expr pos:start="189:41" pos:end="189:72"><name pos:start="189:41" pos:end="189:54">cluster_offset</name> <operator pos:start="189:56" pos:end="189:56">+</operator> <name pos:start="189:58" pos:end="189:72"><name pos:start="189:58" pos:end="189:58">s</name><operator pos:start="189:59" pos:end="189:60">-&gt;</operator><name pos:start="189:61" pos:end="189:72">cluster_size</name></name></expr></argument>, <argument pos:start="189:75" pos:end="189:78"><expr pos:start="189:75" pos:end="189:78"><name pos:start="189:75" pos:end="189:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="191:17" pos:end="193:52">/* if encrypted, we must initialize the cluster

                   content which won't be written */</comment>

                <if_stmt pos:start="195:17" pos:end="239:17"><if pos:start="195:17" pos:end="239:17">if <condition pos:start="195:20" pos:end="197:59">(<expr pos:start="195:21" pos:end="197:58"><name pos:start="195:21" pos:end="195:33"><name pos:start="195:21" pos:end="195:22">bs</name><operator pos:start="195:23" pos:end="195:24">-&gt;</operator><name pos:start="195:25" pos:end="195:33">encrypted</name></name> <operator pos:start="195:35" pos:end="195:36">&amp;&amp;</operator>

                    <operator pos:start="197:21" pos:end="197:21">(</operator><name pos:start="197:22" pos:end="197:26">n_end</name> <operator pos:start="197:28" pos:end="197:28">-</operator> <name pos:start="197:30" pos:end="197:36">n_start</name><operator pos:start="197:37" pos:end="197:37">)</operator> <operator pos:start="197:39" pos:end="197:39">&lt;</operator> <name pos:start="197:41" pos:end="197:58"><name pos:start="197:41" pos:end="197:41">s</name><operator pos:start="197:42" pos:end="197:43">-&gt;</operator><name pos:start="197:44" pos:end="197:58">cluster_sectors</name></name></expr>)</condition> <block pos:start="197:61" pos:end="239:17">{<block_content pos:start="199:21" pos:end="237:21">

                    <decl_stmt pos:start="199:21" pos:end="199:40"><decl pos:start="199:21" pos:end="199:39"><type pos:start="199:21" pos:end="199:28"><name pos:start="199:21" pos:end="199:28">uint64_t</name></type> <name pos:start="199:30" pos:end="199:39">start_sect</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="201:21" pos:end="201:38"><expr pos:start="201:21" pos:end="201:37"><call pos:start="201:21" pos:end="201:37"><name pos:start="201:21" pos:end="201:26">assert</name><argument_list pos:start="201:27" pos:end="201:37">(<argument pos:start="201:28" pos:end="201:36"><expr pos:start="201:28" pos:end="201:36"><name pos:start="201:28" pos:end="201:36"><name pos:start="201:28" pos:end="201:28">s</name><operator pos:start="201:29" pos:end="201:30">-&gt;</operator><name pos:start="201:31" pos:end="201:36">cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="203:21" pos:end="203:72"><expr pos:start="203:21" pos:end="203:71"><name pos:start="203:21" pos:end="203:30">start_sect</name> <operator pos:start="203:32" pos:end="203:32">=</operator> <operator pos:start="203:34" pos:end="203:34">(</operator><name pos:start="203:35" pos:end="203:40">offset</name> <operator pos:start="203:42" pos:end="203:42">&amp;</operator> <operator pos:start="203:44" pos:end="203:44">~</operator><operator pos:start="203:45" pos:end="203:45">(</operator><name pos:start="203:46" pos:end="203:60"><name pos:start="203:46" pos:end="203:46">s</name><operator pos:start="203:47" pos:end="203:48">-&gt;</operator><name pos:start="203:49" pos:end="203:60">cluster_size</name></name> <operator pos:start="203:62" pos:end="203:62">-</operator> <literal type="number" pos:start="203:64" pos:end="203:64">1</literal><operator pos:start="203:65" pos:end="203:65">)</operator><operator pos:start="203:66" pos:end="203:66">)</operator> <operator pos:start="203:68" pos:end="203:69">&gt;&gt;</operator> <literal type="number" pos:start="203:71" pos:end="203:71">9</literal></expr>;</expr_stmt>

                    <for pos:start="205:21" pos:end="237:21">for<control pos:start="205:24" pos:end="205:59">(<init pos:start="205:25" pos:end="205:30"><expr pos:start="205:25" pos:end="205:29"><name pos:start="205:25" pos:end="205:25">i</name> <operator pos:start="205:27" pos:end="205:27">=</operator> <literal type="number" pos:start="205:29" pos:end="205:29">0</literal></expr>;</init> <condition pos:start="205:32" pos:end="205:54"><expr pos:start="205:32" pos:end="205:53"><name pos:start="205:32" pos:end="205:32">i</name> <operator pos:start="205:34" pos:end="205:34">&lt;</operator> <name pos:start="205:36" pos:end="205:53"><name pos:start="205:36" pos:end="205:36">s</name><operator pos:start="205:37" pos:end="205:38">-&gt;</operator><name pos:start="205:39" pos:end="205:53">cluster_sectors</name></name></expr>;</condition> <incr pos:start="205:56" pos:end="205:58"><expr pos:start="205:56" pos:end="205:58"><name pos:start="205:56" pos:end="205:56">i</name><operator pos:start="205:57" pos:end="205:58">++</operator></expr></incr>)</control> <block pos:start="205:61" pos:end="237:21">{<block_content pos:start="207:25" pos:end="235:25">

                        <if_stmt pos:start="207:25" pos:end="235:25"><if pos:start="207:25" pos:end="235:25">if <condition pos:start="207:28" pos:end="207:54">(<expr pos:start="207:29" pos:end="207:53"><name pos:start="207:29" pos:end="207:29">i</name> <operator pos:start="207:31" pos:end="207:31">&lt;</operator> <name pos:start="207:33" pos:end="207:39">n_start</name> <operator pos:start="207:41" pos:end="207:42">||</operator> <name pos:start="207:44" pos:end="207:44">i</name> <operator pos:start="207:46" pos:end="207:47">&gt;=</operator> <name pos:start="207:49" pos:end="207:53">n_end</name></expr>)</condition> <block pos:start="207:56" pos:end="235:25">{<block_content pos:start="209:29" pos:end="233:42">

                            <decl_stmt pos:start="209:29" pos:end="209:46"><decl pos:start="209:29" pos:end="209:45"><type pos:start="209:29" pos:end="209:35"><name pos:start="209:29" pos:end="209:33">Error</name> <modifier pos:start="209:35" pos:end="209:35">*</modifier></type><name pos:start="209:36" pos:end="209:38">err</name> <init pos:start="209:40" pos:end="209:45">= <expr pos:start="209:42" pos:end="209:45"><name pos:start="209:42" pos:end="209:45">NULL</name></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="211:29" pos:end="211:63"><expr pos:start="211:29" pos:end="211:62"><call pos:start="211:29" pos:end="211:62"><name pos:start="211:29" pos:end="211:34">memset</name><argument_list pos:start="211:35" pos:end="211:62">(<argument pos:start="211:36" pos:end="211:50"><expr pos:start="211:36" pos:end="211:50"><name pos:start="211:36" pos:end="211:50"><name pos:start="211:36" pos:end="211:36">s</name><operator pos:start="211:37" pos:end="211:38">-&gt;</operator><name pos:start="211:39" pos:end="211:50">cluster_data</name></name></expr></argument>, <argument pos:start="211:53" pos:end="211:56"><expr pos:start="211:53" pos:end="211:56"><literal type="number" pos:start="211:53" pos:end="211:56">0x00</literal></expr></argument>, <argument pos:start="211:59" pos:end="211:61"><expr pos:start="211:59" pos:end="211:61"><literal type="number" pos:start="211:59" pos:end="211:61">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="213:29" pos:end="225:29"><if pos:start="213:29" pos:end="225:29">if <condition pos:start="213:32" pos:end="217:64">(<expr pos:start="213:33" pos:end="217:63"><call pos:start="213:33" pos:end="217:59"><name pos:start="213:33" pos:end="213:47">encrypt_sectors</name><argument_list pos:start="213:48" pos:end="217:59">(<argument pos:start="213:49" pos:end="213:49"><expr pos:start="213:49" pos:end="213:49"><name pos:start="213:49" pos:end="213:49">s</name></expr></argument>, <argument pos:start="213:52" pos:end="213:65"><expr pos:start="213:52" pos:end="213:65"><name pos:start="213:52" pos:end="213:61">start_sect</name> <operator pos:start="213:63" pos:end="213:63">+</operator> <name pos:start="213:65" pos:end="213:65">i</name></expr></argument>,

                                                <argument pos:start="215:49" pos:end="215:63"><expr pos:start="215:49" pos:end="215:63"><name pos:start="215:49" pos:end="215:63"><name pos:start="215:49" pos:end="215:49">s</name><operator pos:start="215:50" pos:end="215:51">-&gt;</operator><name pos:start="215:52" pos:end="215:63">cluster_data</name></name></expr></argument>, <argument pos:start="215:66" pos:end="215:66"><expr pos:start="215:66" pos:end="215:66"><literal type="number" pos:start="215:66" pos:end="215:66">1</literal></expr></argument>,

                                                <argument pos:start="217:49" pos:end="217:52"><expr pos:start="217:49" pos:end="217:52"><name pos:start="217:49" pos:end="217:52">true</name></expr></argument>, <argument pos:start="217:55" pos:end="217:58"><expr pos:start="217:55" pos:end="217:58"><operator pos:start="217:55" pos:end="217:55">&amp;</operator><name pos:start="217:56" pos:end="217:58">err</name></expr></argument>)</argument_list></call> <operator pos:start="217:61" pos:end="217:61">&lt;</operator> <literal type="number" pos:start="217:63" pos:end="217:63">0</literal></expr>)</condition> <block pos:start="217:66" pos:end="225:29">{<block_content pos:start="219:33" pos:end="223:42">

                                <expr_stmt pos:start="219:33" pos:end="219:48"><expr pos:start="219:33" pos:end="219:47"><call pos:start="219:33" pos:end="219:47"><name pos:start="219:33" pos:end="219:42">error_free</name><argument_list pos:start="219:43" pos:end="219:47">(<argument pos:start="219:44" pos:end="219:46"><expr pos:start="219:44" pos:end="219:46"><name pos:start="219:44" pos:end="219:46">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="221:33" pos:end="221:44"><expr pos:start="221:33" pos:end="221:43"><name pos:start="221:33" pos:end="221:37">errno</name> <operator pos:start="221:39" pos:end="221:39">=</operator> <name pos:start="221:41" pos:end="221:43">EIO</name></expr>;</expr_stmt>

                                <return pos:start="223:33" pos:end="223:42">return <expr pos:start="223:40" pos:end="223:41"><operator pos:start="223:40" pos:end="223:40">-</operator><literal type="number" pos:start="223:41" pos:end="223:41">1</literal></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                            <if_stmt pos:start="227:29" pos:end="233:42"><if pos:start="227:29" pos:end="233:42">if <condition pos:start="227:32" pos:end="231:73">(<expr pos:start="227:33" pos:end="231:72"><call pos:start="227:33" pos:end="231:65"><name pos:start="227:33" pos:end="227:43">bdrv_pwrite</name><argument_list pos:start="227:44" pos:end="231:65">(<argument pos:start="227:45" pos:end="227:52"><expr pos:start="227:45" pos:end="227:52"><name pos:start="227:45" pos:end="227:52"><name pos:start="227:45" pos:end="227:46">bs</name><operator pos:start="227:47" pos:end="227:48">-&gt;</operator><name pos:start="227:49" pos:end="227:52">file</name></name></expr></argument>,

                                            <argument pos:start="229:45" pos:end="229:68"><expr pos:start="229:45" pos:end="229:68"><name pos:start="229:45" pos:end="229:58">cluster_offset</name> <operator pos:start="229:60" pos:end="229:60">+</operator> <name pos:start="229:62" pos:end="229:62">i</name> <operator pos:start="229:64" pos:end="229:64">*</operator> <literal type="number" pos:start="229:66" pos:end="229:68">512</literal></expr></argument>,

                                            <argument pos:start="231:45" pos:end="231:59"><expr pos:start="231:45" pos:end="231:59"><name pos:start="231:45" pos:end="231:59"><name pos:start="231:45" pos:end="231:45">s</name><operator pos:start="231:46" pos:end="231:47">-&gt;</operator><name pos:start="231:48" pos:end="231:59">cluster_data</name></name></expr></argument>, <argument pos:start="231:62" pos:end="231:64"><expr pos:start="231:62" pos:end="231:64"><literal type="number" pos:start="231:62" pos:end="231:64">512</literal></expr></argument>)</argument_list></call> <operator pos:start="231:67" pos:end="231:68">!=</operator> <literal type="number" pos:start="231:70" pos:end="231:72">512</literal></expr>)</condition><block type="pseudo" pos:start="233:33" pos:end="233:42"><block_content pos:start="233:33" pos:end="233:42">

                                <return pos:start="233:33" pos:end="233:42">return <expr pos:start="233:40" pos:end="233:41"><operator pos:start="233:40" pos:end="233:40">-</operator><literal type="number" pos:start="233:41" pos:end="233:41">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="241:15" pos:end="247:13">else if <condition pos:start="241:23" pos:end="241:37">(<expr pos:start="241:24" pos:end="241:36"><name pos:start="241:24" pos:end="241:31">allocate</name> <operator pos:start="241:33" pos:end="241:34">==</operator> <literal type="number" pos:start="241:36" pos:end="241:36">2</literal></expr>)</condition> <block pos:start="241:39" pos:end="247:13">{<block_content pos:start="243:17" pos:end="245:72">

                <expr_stmt pos:start="243:17" pos:end="245:72"><expr pos:start="243:17" pos:end="245:71"><name pos:start="243:17" pos:end="243:30">cluster_offset</name> <operator pos:start="243:32" pos:end="243:33">|=</operator> <name pos:start="243:35" pos:end="243:55">QCOW_OFLAG_COMPRESSED</name> <operator pos:start="243:57" pos:end="243:57">|</operator>

                    <operator pos:start="245:21" pos:end="245:21">(</operator><name pos:start="245:22" pos:end="245:29">uint64_t</name><operator pos:start="245:30" pos:end="245:30">)</operator><name pos:start="245:31" pos:end="245:45">compressed_size</name> <operator pos:start="245:47" pos:end="245:48">&lt;&lt;</operator> <operator pos:start="245:50" pos:end="245:50">(</operator><literal type="number" pos:start="245:51" pos:end="245:54">63</literal> <operator pos:start="245:54" pos:end="245:54">-</operator> <name pos:start="245:56" pos:end="245:70"><name pos:start="245:56" pos:end="245:56">s</name><operator pos:start="245:57" pos:end="245:58">-&gt;</operator><name pos:start="245:59" pos:end="245:70">cluster_bits</name></name><operator pos:start="245:71" pos:end="245:71">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="251:9" pos:end="251:29">/* update L2 table */</comment>

        <expr_stmt pos:start="253:9" pos:end="253:42"><expr pos:start="253:9" pos:end="253:41"><name pos:start="253:9" pos:end="253:11">tmp</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <call pos:start="253:15" pos:end="253:41"><name pos:start="253:15" pos:end="253:25">cpu_to_be64</name><argument_list pos:start="253:26" pos:end="253:41">(<argument pos:start="253:27" pos:end="253:40"><expr pos:start="253:27" pos:end="253:40"><name pos:start="253:27" pos:end="253:40">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:33"><expr pos:start="255:9" pos:end="255:32"><name pos:start="255:9" pos:end="255:26"><name pos:start="255:9" pos:end="255:16">l2_table</name><index pos:start="255:17" pos:end="255:26">[<expr pos:start="255:18" pos:end="255:25"><name pos:start="255:18" pos:end="255:25">l2_index</name></expr>]</index></name> <operator pos:start="255:28" pos:end="255:28">=</operator> <name pos:start="255:30" pos:end="255:32">tmp</name></expr>;</expr_stmt>

        <if_stmt pos:start="257:9" pos:end="261:21"><if pos:start="257:9" pos:end="261:21">if <condition pos:start="257:12" pos:end="259:39">(<expr pos:start="257:13" pos:end="259:38"><call pos:start="257:13" pos:end="259:34"><name pos:start="257:13" pos:end="257:28">bdrv_pwrite_sync</name><argument_list pos:start="257:29" pos:end="259:34">(<argument pos:start="257:30" pos:end="257:37"><expr pos:start="257:30" pos:end="257:37"><name pos:start="257:30" pos:end="257:37"><name pos:start="257:30" pos:end="257:31">bs</name><operator pos:start="257:32" pos:end="257:33">-&gt;</operator><name pos:start="257:34" pos:end="257:37">file</name></name></expr></argument>, <argument pos:start="257:40" pos:end="257:73"><expr pos:start="257:40" pos:end="257:73"><name pos:start="257:40" pos:end="257:48">l2_offset</name> <operator pos:start="257:50" pos:end="257:50">+</operator> <name pos:start="257:52" pos:end="257:59">l2_index</name> <operator pos:start="257:61" pos:end="257:61">*</operator> <sizeof pos:start="257:63" pos:end="257:73">sizeof<argument_list pos:start="257:69" pos:end="257:73">(<argument pos:start="257:70" pos:end="257:72"><expr pos:start="257:70" pos:end="257:72"><name pos:start="257:70" pos:end="257:72">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                <argument pos:start="259:17" pos:end="259:20"><expr pos:start="259:17" pos:end="259:20"><operator pos:start="259:17" pos:end="259:17">&amp;</operator><name pos:start="259:18" pos:end="259:20">tmp</name></expr></argument>, <argument pos:start="259:23" pos:end="259:33"><expr pos:start="259:23" pos:end="259:33"><sizeof pos:start="259:23" pos:end="259:33">sizeof<argument_list pos:start="259:29" pos:end="259:33">(<argument pos:start="259:30" pos:end="259:32"><expr pos:start="259:30" pos:end="259:32"><name pos:start="259:30" pos:end="259:32">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="259:36" pos:end="259:36">&lt;</operator> <literal type="number" pos:start="259:38" pos:end="259:38">0</literal></expr>)</condition><block type="pseudo" pos:start="261:13" pos:end="261:21"><block_content pos:start="261:13" pos:end="261:21">

            <return pos:start="261:13" pos:end="261:21">return <expr pos:start="261:20" pos:end="261:20"><literal type="number" pos:start="261:20" pos:end="261:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="265:5" pos:end="265:26">return <expr pos:start="265:12" pos:end="265:25"><name pos:start="265:12" pos:end="265:25">cluster_offset</name></expr>;</return>

</block_content>}</block></function>
</unit>
