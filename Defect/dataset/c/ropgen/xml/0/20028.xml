<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20028.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:16">put_v</name><parameter_list pos:start="1:17" pos:end="1:49">(<parameter pos:start="1:18" pos:end="1:34"><decl pos:start="1:18" pos:end="1:34"><type pos:start="1:18" pos:end="1:34"><name pos:start="1:18" pos:end="1:30">ByteIOContext</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:34">bc</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:44">uint64_t</name></type> <name pos:start="1:46" pos:end="1:48">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:13">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

<comment type="line" pos:start="7:1" pos:end="7:30">//    if (bytes_left(s)*8 &lt; 9)</comment>

<comment type="line" pos:start="9:1" pos:end="9:18">//	return -1;</comment>



    <if_stmt pos:start="13:5" pos:end="15:18"><if pos:start="13:5" pos:end="15:18">if <condition pos:start="13:8" pos:end="13:27">(<expr pos:start="13:9" pos:end="13:26"><call pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:18">bytes_left</name><argument_list pos:start="13:19" pos:end="13:22">(<argument pos:start="13:20" pos:end="13:21"><expr pos:start="13:20" pos:end="13:21"><name pos:start="13:20" pos:end="13:21">bc</name></expr></argument>)</argument_list></call> <operator pos:start="13:24" pos:end="13:24">&lt;</operator> <literal type="number" pos:start="13:26" pos:end="13:26">1</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:18"><block_content pos:start="15:9" pos:end="15:18">

	<return pos:start="15:9" pos:end="15:18">return <expr pos:start="15:16" pos:end="15:17"><operator pos:start="15:16" pos:end="15:16">-</operator><literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:33"><expr pos:start="19:5" pos:end="19:32"><name pos:start="19:5" pos:end="19:7">val</name> <operator pos:start="19:9" pos:end="19:10">&amp;=</operator> <literal type="number" pos:start="19:12" pos:end="19:32">0x7FFFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <comment type="line" pos:start="19:35" pos:end="19:81">// FIXME can only encode upto 63 bits currently</comment>

    <expr_stmt pos:start="21:5" pos:end="21:23"><expr pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:5">i</name><operator pos:start="21:6" pos:end="21:6">=</operator> <call pos:start="21:8" pos:end="21:22"><name pos:start="21:8" pos:end="21:17">get_length</name><argument_list pos:start="21:18" pos:end="21:22">(<argument pos:start="21:19" pos:end="21:21"><expr pos:start="21:19" pos:end="21:21"><name pos:start="21:19" pos:end="21:21">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="25:5" pos:end="29:5">for <control pos:start="25:9" pos:end="25:25">(<init pos:start="25:10" pos:end="25:14"><expr pos:start="25:10" pos:end="25:13"><name pos:start="25:10" pos:end="25:10">i</name><operator pos:start="25:11" pos:end="25:12">-=</operator><literal type="number" pos:start="25:13" pos:end="25:13">7</literal></expr>;</init> <condition pos:start="25:16" pos:end="25:19"><expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:16">i</name><operator pos:start="25:17" pos:end="25:17">&gt;</operator><literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>;</condition> <incr pos:start="25:21" pos:end="25:24"><expr pos:start="25:21" pos:end="25:24"><name pos:start="25:21" pos:end="25:21">i</name><operator pos:start="25:22" pos:end="25:23">-=</operator><literal type="number" pos:start="25:24" pos:end="25:24">7</literal></expr></incr>)</control><block pos:start="25:26" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:38">

	<expr_stmt pos:start="27:9" pos:end="27:38"><expr pos:start="27:9" pos:end="27:37"><call pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:16">put_byte</name><argument_list pos:start="27:17" pos:end="27:37">(<argument pos:start="27:18" pos:end="27:19"><expr pos:start="27:18" pos:end="27:19"><name pos:start="27:18" pos:end="27:19">bc</name></expr></argument>, <argument pos:start="27:22" pos:end="27:36"><expr pos:start="27:22" pos:end="27:36"><literal type="number" pos:start="27:22" pos:end="27:25">0x80</literal> <operator pos:start="27:27" pos:end="27:27">|</operator> <operator pos:start="27:29" pos:end="27:29">(</operator><name pos:start="27:30" pos:end="27:32">val</name><operator pos:start="27:33" pos:end="27:34">&gt;&gt;</operator><name pos:start="27:35" pos:end="27:35">i</name><operator pos:start="27:36" pos:end="27:36">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="33:5" pos:end="33:27"><expr pos:start="33:5" pos:end="33:26"><call pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:12">put_byte</name><argument_list pos:start="33:13" pos:end="33:26">(<argument pos:start="33:14" pos:end="33:15"><expr pos:start="33:14" pos:end="33:15"><name pos:start="33:14" pos:end="33:15">bc</name></expr></argument>, <argument pos:start="33:18" pos:end="33:25"><expr pos:start="33:18" pos:end="33:25"><name pos:start="33:18" pos:end="33:20">val</name><operator pos:start="33:21" pos:end="33:21">&amp;</operator><literal type="number" pos:start="33:22" pos:end="33:25">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="37:5" pos:end="37:13">return <expr pos:start="37:12" pos:end="37:12"><literal type="number" pos:start="37:12" pos:end="37:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
