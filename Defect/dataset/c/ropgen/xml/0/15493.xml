<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15493.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:28">bochs_bios_init</name><parameter_list pos:start="1:29" pos:end="1:34">(<parameter pos:start="1:30" pos:end="1:33"><decl pos:start="1:30" pos:end="1:33"><type pos:start="1:30" pos:end="1:33"><name pos:start="1:30" pos:end="1:33">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:18">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:16">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:25">smbios_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:21">smbios_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint64_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:25">numa_fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:12"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:12">j</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:63"><expr pos:start="17:5" pos:end="17:62"><call pos:start="17:5" pos:end="17:62"><name pos:start="17:5" pos:end="17:25">register_ioport_write</name><argument_list pos:start="17:26" pos:end="17:62">(<argument pos:start="17:27" pos:end="17:31"><expr pos:start="17:27" pos:end="17:31"><literal type="number" pos:start="17:27" pos:end="17:31">0x400</literal></expr></argument>, <argument pos:start="17:34" pos:end="17:34"><expr pos:start="17:34" pos:end="17:34"><literal type="number" pos:start="17:34" pos:end="17:34">1</literal></expr></argument>, <argument pos:start="17:37" pos:end="17:37"><expr pos:start="17:37" pos:end="17:37"><literal type="number" pos:start="17:37" pos:end="17:37">2</literal></expr></argument>, <argument pos:start="17:40" pos:end="17:55"><expr pos:start="17:40" pos:end="17:55"><name pos:start="17:40" pos:end="17:55">bochs_bios_write</name></expr></argument>, <argument pos:start="17:58" pos:end="17:61"><expr pos:start="17:58" pos:end="17:61"><name pos:start="17:58" pos:end="17:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:63"><expr pos:start="19:5" pos:end="19:62"><call pos:start="19:5" pos:end="19:62"><name pos:start="19:5" pos:end="19:25">register_ioport_write</name><argument_list pos:start="19:26" pos:end="19:62">(<argument pos:start="19:27" pos:end="19:31"><expr pos:start="19:27" pos:end="19:31"><literal type="number" pos:start="19:27" pos:end="19:31">0x401</literal></expr></argument>, <argument pos:start="19:34" pos:end="19:34"><expr pos:start="19:34" pos:end="19:34"><literal type="number" pos:start="19:34" pos:end="19:34">1</literal></expr></argument>, <argument pos:start="19:37" pos:end="19:37"><expr pos:start="19:37" pos:end="19:37"><literal type="number" pos:start="19:37" pos:end="19:37">2</literal></expr></argument>, <argument pos:start="19:40" pos:end="19:55"><expr pos:start="19:40" pos:end="19:55"><name pos:start="19:40" pos:end="19:55">bochs_bios_write</name></expr></argument>, <argument pos:start="19:58" pos:end="19:61"><expr pos:start="19:58" pos:end="19:61"><name pos:start="19:58" pos:end="19:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:63"><expr pos:start="21:5" pos:end="21:62"><call pos:start="21:5" pos:end="21:62"><name pos:start="21:5" pos:end="21:25">register_ioport_write</name><argument_list pos:start="21:26" pos:end="21:62">(<argument pos:start="21:27" pos:end="21:31"><expr pos:start="21:27" pos:end="21:31"><literal type="number" pos:start="21:27" pos:end="21:31">0x402</literal></expr></argument>, <argument pos:start="21:34" pos:end="21:34"><expr pos:start="21:34" pos:end="21:34"><literal type="number" pos:start="21:34" pos:end="21:34">1</literal></expr></argument>, <argument pos:start="21:37" pos:end="21:37"><expr pos:start="21:37" pos:end="21:37"><literal type="number" pos:start="21:37" pos:end="21:37">1</literal></expr></argument>, <argument pos:start="21:40" pos:end="21:55"><expr pos:start="21:40" pos:end="21:55"><name pos:start="21:40" pos:end="21:55">bochs_bios_write</name></expr></argument>, <argument pos:start="21:58" pos:end="21:61"><expr pos:start="21:58" pos:end="21:61"><name pos:start="21:58" pos:end="21:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:63"><expr pos:start="23:5" pos:end="23:62"><call pos:start="23:5" pos:end="23:62"><name pos:start="23:5" pos:end="23:25">register_ioport_write</name><argument_list pos:start="23:26" pos:end="23:62">(<argument pos:start="23:27" pos:end="23:31"><expr pos:start="23:27" pos:end="23:31"><literal type="number" pos:start="23:27" pos:end="23:31">0x403</literal></expr></argument>, <argument pos:start="23:34" pos:end="23:34"><expr pos:start="23:34" pos:end="23:34"><literal type="number" pos:start="23:34" pos:end="23:34">1</literal></expr></argument>, <argument pos:start="23:37" pos:end="23:37"><expr pos:start="23:37" pos:end="23:37"><literal type="number" pos:start="23:37" pos:end="23:37">1</literal></expr></argument>, <argument pos:start="23:40" pos:end="23:55"><expr pos:start="23:40" pos:end="23:55"><name pos:start="23:40" pos:end="23:55">bochs_bios_write</name></expr></argument>, <argument pos:start="23:58" pos:end="23:61"><expr pos:start="23:58" pos:end="23:61"><name pos:start="23:58" pos:end="23:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:64"><expr pos:start="25:5" pos:end="25:63"><call pos:start="25:5" pos:end="25:63"><name pos:start="25:5" pos:end="25:25">register_ioport_write</name><argument_list pos:start="25:26" pos:end="25:63">(<argument pos:start="25:27" pos:end="25:32"><expr pos:start="25:27" pos:end="25:32"><literal type="number" pos:start="25:27" pos:end="25:32">0x8900</literal></expr></argument>, <argument pos:start="25:35" pos:end="25:35"><expr pos:start="25:35" pos:end="25:35"><literal type="number" pos:start="25:35" pos:end="25:35">1</literal></expr></argument>, <argument pos:start="25:38" pos:end="25:38"><expr pos:start="25:38" pos:end="25:38"><literal type="number" pos:start="25:38" pos:end="25:38">1</literal></expr></argument>, <argument pos:start="25:41" pos:end="25:56"><expr pos:start="25:41" pos:end="25:56"><name pos:start="25:41" pos:end="25:56">bochs_bios_write</name></expr></argument>, <argument pos:start="25:59" pos:end="25:62"><expr pos:start="25:59" pos:end="25:62"><name pos:start="25:59" pos:end="25:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:63"><expr pos:start="29:5" pos:end="29:62"><call pos:start="29:5" pos:end="29:62"><name pos:start="29:5" pos:end="29:25">register_ioport_write</name><argument_list pos:start="29:26" pos:end="29:62">(<argument pos:start="29:27" pos:end="29:31"><expr pos:start="29:27" pos:end="29:31"><literal type="number" pos:start="29:27" pos:end="29:31">0x501</literal></expr></argument>, <argument pos:start="29:34" pos:end="29:34"><expr pos:start="29:34" pos:end="29:34"><literal type="number" pos:start="29:34" pos:end="29:34">1</literal></expr></argument>, <argument pos:start="29:37" pos:end="29:37"><expr pos:start="29:37" pos:end="29:37"><literal type="number" pos:start="29:37" pos:end="29:37">1</literal></expr></argument>, <argument pos:start="29:40" pos:end="29:55"><expr pos:start="29:40" pos:end="29:55"><name pos:start="29:40" pos:end="29:55">bochs_bios_write</name></expr></argument>, <argument pos:start="29:58" pos:end="29:61"><expr pos:start="29:58" pos:end="29:61"><name pos:start="29:58" pos:end="29:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:63"><expr pos:start="31:5" pos:end="31:62"><call pos:start="31:5" pos:end="31:62"><name pos:start="31:5" pos:end="31:25">register_ioport_write</name><argument_list pos:start="31:26" pos:end="31:62">(<argument pos:start="31:27" pos:end="31:31"><expr pos:start="31:27" pos:end="31:31"><literal type="number" pos:start="31:27" pos:end="31:31">0x501</literal></expr></argument>, <argument pos:start="31:34" pos:end="31:34"><expr pos:start="31:34" pos:end="31:34"><literal type="number" pos:start="31:34" pos:end="31:34">1</literal></expr></argument>, <argument pos:start="31:37" pos:end="31:37"><expr pos:start="31:37" pos:end="31:37"><literal type="number" pos:start="31:37" pos:end="31:37">2</literal></expr></argument>, <argument pos:start="31:40" pos:end="31:55"><expr pos:start="31:40" pos:end="31:55"><name pos:start="31:40" pos:end="31:55">bochs_bios_write</name></expr></argument>, <argument pos:start="31:58" pos:end="31:61"><expr pos:start="31:58" pos:end="31:61"><name pos:start="31:58" pos:end="31:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:63"><expr pos:start="33:5" pos:end="33:62"><call pos:start="33:5" pos:end="33:62"><name pos:start="33:5" pos:end="33:25">register_ioport_write</name><argument_list pos:start="33:26" pos:end="33:62">(<argument pos:start="33:27" pos:end="33:31"><expr pos:start="33:27" pos:end="33:31"><literal type="number" pos:start="33:27" pos:end="33:31">0x502</literal></expr></argument>, <argument pos:start="33:34" pos:end="33:34"><expr pos:start="33:34" pos:end="33:34"><literal type="number" pos:start="33:34" pos:end="33:34">1</literal></expr></argument>, <argument pos:start="33:37" pos:end="33:37"><expr pos:start="33:37" pos:end="33:37"><literal type="number" pos:start="33:37" pos:end="33:37">2</literal></expr></argument>, <argument pos:start="33:40" pos:end="33:55"><expr pos:start="33:40" pos:end="33:55"><name pos:start="33:40" pos:end="33:55">bochs_bios_write</name></expr></argument>, <argument pos:start="33:58" pos:end="33:61"><expr pos:start="33:58" pos:end="33:61"><name pos:start="33:58" pos:end="33:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:63"><expr pos:start="35:5" pos:end="35:62"><call pos:start="35:5" pos:end="35:62"><name pos:start="35:5" pos:end="35:25">register_ioport_write</name><argument_list pos:start="35:26" pos:end="35:62">(<argument pos:start="35:27" pos:end="35:31"><expr pos:start="35:27" pos:end="35:31"><literal type="number" pos:start="35:27" pos:end="35:31">0x500</literal></expr></argument>, <argument pos:start="35:34" pos:end="35:34"><expr pos:start="35:34" pos:end="35:34"><literal type="number" pos:start="35:34" pos:end="35:34">1</literal></expr></argument>, <argument pos:start="35:37" pos:end="35:37"><expr pos:start="35:37" pos:end="35:37"><literal type="number" pos:start="35:37" pos:end="35:37">1</literal></expr></argument>, <argument pos:start="35:40" pos:end="35:55"><expr pos:start="35:40" pos:end="35:55"><name pos:start="35:40" pos:end="35:55">bochs_bios_write</name></expr></argument>, <argument pos:start="35:58" pos:end="35:61"><expr pos:start="35:58" pos:end="35:61"><name pos:start="35:58" pos:end="35:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:63"><expr pos:start="37:5" pos:end="37:62"><call pos:start="37:5" pos:end="37:62"><name pos:start="37:5" pos:end="37:25">register_ioport_write</name><argument_list pos:start="37:26" pos:end="37:62">(<argument pos:start="37:27" pos:end="37:31"><expr pos:start="37:27" pos:end="37:31"><literal type="number" pos:start="37:27" pos:end="37:31">0x503</literal></expr></argument>, <argument pos:start="37:34" pos:end="37:34"><expr pos:start="37:34" pos:end="37:34"><literal type="number" pos:start="37:34" pos:end="37:34">1</literal></expr></argument>, <argument pos:start="37:37" pos:end="37:37"><expr pos:start="37:37" pos:end="37:37"><literal type="number" pos:start="37:37" pos:end="37:37">1</literal></expr></argument>, <argument pos:start="37:40" pos:end="37:55"><expr pos:start="37:40" pos:end="37:55"><name pos:start="37:40" pos:end="37:55">bochs_bios_write</name></expr></argument>, <argument pos:start="37:58" pos:end="37:61"><expr pos:start="37:58" pos:end="37:61"><name pos:start="37:58" pos:end="37:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:69"><expr pos:start="41:5" pos:end="41:68"><name pos:start="41:5" pos:end="41:10">fw_cfg</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <call pos:start="41:14" pos:end="41:68"><name pos:start="41:14" pos:end="41:24">fw_cfg_init</name><argument_list pos:start="41:25" pos:end="41:68">(<argument pos:start="41:26" pos:end="41:40"><expr pos:start="41:26" pos:end="41:40"><name pos:start="41:26" pos:end="41:40">BIOS_CFG_IOPORT</name></expr></argument>, <argument pos:start="41:43" pos:end="41:61"><expr pos:start="41:43" pos:end="41:61"><name pos:start="41:43" pos:end="41:57">BIOS_CFG_IOPORT</name> <operator pos:start="41:59" pos:end="41:59">+</operator> <literal type="number" pos:start="41:61" pos:end="41:61">1</literal></expr></argument>, <argument pos:start="41:64" pos:end="41:64"><expr pos:start="41:64" pos:end="41:64"><literal type="number" pos:start="41:64" pos:end="41:64">0</literal></expr></argument>, <argument pos:start="41:67" pos:end="41:67"><expr pos:start="41:67" pos:end="41:67"><literal type="number" pos:start="41:67" pos:end="41:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:41"><expr pos:start="45:5" pos:end="45:40"><call pos:start="45:5" pos:end="45:40"><name pos:start="45:5" pos:end="45:18">fw_cfg_add_i32</name><argument_list pos:start="45:19" pos:end="45:40">(<argument pos:start="45:20" pos:end="45:25"><expr pos:start="45:20" pos:end="45:25"><name pos:start="45:20" pos:end="45:25">fw_cfg</name></expr></argument>, <argument pos:start="45:28" pos:end="45:36"><expr pos:start="45:28" pos:end="45:36"><name pos:start="45:28" pos:end="45:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="45:39" pos:end="45:39"><expr pos:start="45:39" pos:end="45:39"><literal type="number" pos:start="45:39" pos:end="45:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:64"><expr pos:start="47:5" pos:end="47:63"><call pos:start="47:5" pos:end="47:63"><name pos:start="47:5" pos:end="47:18">fw_cfg_add_i64</name><argument_list pos:start="47:19" pos:end="47:63">(<argument pos:start="47:20" pos:end="47:25"><expr pos:start="47:20" pos:end="47:25"><name pos:start="47:20" pos:end="47:25">fw_cfg</name></expr></argument>, <argument pos:start="47:28" pos:end="47:42"><expr pos:start="47:28" pos:end="47:42"><name pos:start="47:28" pos:end="47:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="47:45" pos:end="47:62"><expr pos:start="47:45" pos:end="47:62"><operator pos:start="47:45" pos:end="47:45">(</operator><name pos:start="47:46" pos:end="47:53">uint64_t</name><operator pos:start="47:54" pos:end="47:54">)</operator><name pos:start="47:55" pos:end="47:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:38"><expr pos:start="49:5" pos:end="51:37"><call pos:start="49:5" pos:end="51:37"><name pos:start="49:5" pos:end="49:20">fw_cfg_add_bytes</name><argument_list pos:start="49:21" pos:end="51:37">(<argument pos:start="49:22" pos:end="49:27"><expr pos:start="49:22" pos:end="49:27"><name pos:start="49:22" pos:end="49:27">fw_cfg</name></expr></argument>, <argument pos:start="49:30" pos:end="49:47"><expr pos:start="49:30" pos:end="49:47"><name pos:start="49:30" pos:end="49:47">FW_CFG_ACPI_TABLES</name></expr></argument>, <argument pos:start="49:50" pos:end="49:71"><expr pos:start="49:50" pos:end="49:71"><operator pos:start="49:50" pos:end="49:50">(</operator><name pos:start="49:51" pos:end="49:57">uint8_t</name> <operator pos:start="49:59" pos:end="49:59">*</operator><operator pos:start="49:60" pos:end="49:60">)</operator><name pos:start="49:61" pos:end="49:71">acpi_tables</name></expr></argument>,

                     <argument pos:start="51:22" pos:end="51:36"><expr pos:start="51:22" pos:end="51:36"><name pos:start="51:22" pos:end="51:36">acpi_tables_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:69"><expr pos:start="53:5" pos:end="53:68"><call pos:start="53:5" pos:end="53:68"><name pos:start="53:5" pos:end="53:20">fw_cfg_add_bytes</name><argument_list pos:start="53:21" pos:end="53:68">(<argument pos:start="53:22" pos:end="53:27"><expr pos:start="53:22" pos:end="53:27"><name pos:start="53:22" pos:end="53:27">fw_cfg</name></expr></argument>, <argument pos:start="53:30" pos:end="53:49"><expr pos:start="53:30" pos:end="53:49"><name pos:start="53:30" pos:end="53:49">FW_CFG_IRQ0_OVERRIDE</name></expr></argument>, <argument pos:start="53:52" pos:end="53:64"><expr pos:start="53:52" pos:end="53:64"><operator pos:start="53:52" pos:end="53:52">&amp;</operator><name pos:start="53:53" pos:end="53:64">irq0override</name></expr></argument>, <argument pos:start="53:67" pos:end="53:67"><expr pos:start="53:67" pos:end="53:67"><literal type="number" pos:start="53:67" pos:end="53:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:49"><expr pos:start="57:5" pos:end="57:48"><name pos:start="57:5" pos:end="57:16">smbios_table</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <call pos:start="57:20" pos:end="57:48"><name pos:start="57:20" pos:end="57:35">smbios_get_table</name><argument_list pos:start="57:36" pos:end="57:48">(<argument pos:start="57:37" pos:end="57:47"><expr pos:start="57:37" pos:end="57:47"><operator pos:start="57:37" pos:end="57:37">&amp;</operator><name pos:start="57:38" pos:end="57:47">smbios_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="63:51"><if pos:start="59:5" pos:end="63:51">if <condition pos:start="59:8" pos:end="59:21">(<expr pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:20">smbios_table</name></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="63:51"><block_content pos:start="61:9" pos:end="63:51">

        <expr_stmt pos:start="61:9" pos:end="63:51"><expr pos:start="61:9" pos:end="63:50"><call pos:start="61:9" pos:end="63:50"><name pos:start="61:9" pos:end="61:24">fw_cfg_add_bytes</name><argument_list pos:start="61:25" pos:end="63:50">(<argument pos:start="61:26" pos:end="61:31"><expr pos:start="61:26" pos:end="61:31"><name pos:start="61:26" pos:end="61:31">fw_cfg</name></expr></argument>, <argument pos:start="61:34" pos:end="61:54"><expr pos:start="61:34" pos:end="61:54"><name pos:start="61:34" pos:end="61:54">FW_CFG_SMBIOS_ENTRIES</name></expr></argument>,

                         <argument pos:start="63:26" pos:end="63:37"><expr pos:start="63:26" pos:end="63:37"><name pos:start="63:26" pos:end="63:37">smbios_table</name></expr></argument>, <argument pos:start="63:40" pos:end="63:49"><expr pos:start="63:40" pos:end="63:49"><name pos:start="63:40" pos:end="63:49">smbios_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="67:48"><expr pos:start="65:5" pos:end="67:47"><call pos:start="65:5" pos:end="67:47"><name pos:start="65:5" pos:end="65:20">fw_cfg_add_bytes</name><argument_list pos:start="65:21" pos:end="67:47">(<argument pos:start="65:22" pos:end="65:27"><expr pos:start="65:22" pos:end="65:27"><name pos:start="65:22" pos:end="65:27">fw_cfg</name></expr></argument>, <argument pos:start="65:30" pos:end="65:46"><expr pos:start="65:30" pos:end="65:46"><name pos:start="65:30" pos:end="65:46">FW_CFG_E820_TABLE</name></expr></argument>, <argument pos:start="65:49" pos:end="65:70"><expr pos:start="65:49" pos:end="65:70"><operator pos:start="65:49" pos:end="65:49">(</operator><name pos:start="65:50" pos:end="65:56">uint8_t</name> <operator pos:start="65:58" pos:end="65:58">*</operator><operator pos:start="65:59" pos:end="65:59">)</operator><operator pos:start="65:60" pos:end="65:60">&amp;</operator><name pos:start="65:61" pos:end="65:70">e820_table</name></expr></argument>,

                     <argument pos:start="67:22" pos:end="67:46"><expr pos:start="67:22" pos:end="67:46"><sizeof pos:start="67:22" pos:end="67:46">sizeof<argument_list pos:start="67:28" pos:end="67:46">(<argument pos:start="67:29" pos:end="67:45"><expr pos:start="67:29" pos:end="67:45">struct <name pos:start="67:36" pos:end="67:45">e820_table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="73:52"><expr pos:start="71:5" pos:end="73:51"><call pos:start="71:5" pos:end="73:51"><name pos:start="71:5" pos:end="71:20">fw_cfg_add_bytes</name><argument_list pos:start="71:21" pos:end="73:51">(<argument pos:start="71:22" pos:end="71:27"><expr pos:start="71:22" pos:end="71:27"><name pos:start="71:22" pos:end="71:27">fw_cfg</name></expr></argument>, <argument pos:start="71:30" pos:end="71:40"><expr pos:start="71:30" pos:end="71:40"><name pos:start="71:30" pos:end="71:40">FW_CFG_HPET</name></expr></argument>, <argument pos:start="71:43" pos:end="71:62"><expr pos:start="71:43" pos:end="71:62"><operator pos:start="71:43" pos:end="71:43">(</operator><name pos:start="71:44" pos:end="71:50">uint8_t</name> <operator pos:start="71:52" pos:end="71:52">*</operator><operator pos:start="71:53" pos:end="71:53">)</operator><operator pos:start="71:54" pos:end="71:54">&amp;</operator><name pos:start="71:55" pos:end="71:62">hpet_cfg</name></expr></argument>,

                     <argument pos:start="73:22" pos:end="73:50"><expr pos:start="73:22" pos:end="73:50"><sizeof pos:start="73:22" pos:end="73:50">sizeof<argument_list pos:start="73:28" pos:end="73:50">(<argument pos:start="73:29" pos:end="73:49"><expr pos:start="73:29" pos:end="73:49">struct <name pos:start="73:36" pos:end="73:49">hpet_fw_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="75:5" pos:end="81:7">/* allocate memory for the NUMA channel: one (64bit) word for the number

     * of nodes, one word for each VCPU-&gt;node and one word for each node to

     * hold the amount of memory.

     */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:64"><expr pos:start="83:5" pos:end="83:63"><name pos:start="83:5" pos:end="83:15">numa_fw_cfg</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <call pos:start="83:19" pos:end="83:63"><name pos:start="83:19" pos:end="83:27">g_malloc0</name><argument_list pos:start="83:28" pos:end="83:63">(<argument pos:start="83:29" pos:end="83:62"><expr pos:start="83:29" pos:end="83:62"><operator pos:start="83:29" pos:end="83:29">(</operator><literal type="number" pos:start="83:30" pos:end="83:32">1</literal> <operator pos:start="83:32" pos:end="83:32">+</operator> <name pos:start="83:34" pos:end="83:41">max_cpus</name> <operator pos:start="83:43" pos:end="83:43">+</operator> <name pos:start="83:45" pos:end="83:57">nb_numa_nodes</name><operator pos:start="83:58" pos:end="83:58">)</operator> <operator pos:start="83:60" pos:end="83:60">*</operator> <literal type="number" pos:start="83:62" pos:end="83:62">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:48"><expr pos:start="85:5" pos:end="85:47"><name pos:start="85:5" pos:end="85:18"><name pos:start="85:5" pos:end="85:15">numa_fw_cfg</name><index pos:start="85:16" pos:end="85:18">[<expr pos:start="85:17" pos:end="85:17"><literal type="number" pos:start="85:17" pos:end="85:17">0</literal></expr>]</index></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="85:47"><name pos:start="85:22" pos:end="85:32">cpu_to_le64</name><argument_list pos:start="85:33" pos:end="85:47">(<argument pos:start="85:34" pos:end="85:46"><expr pos:start="85:34" pos:end="85:46"><name pos:start="85:34" pos:end="85:46">nb_numa_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="87:5" pos:end="101:5">for <control pos:start="87:9" pos:end="87:34">(<init pos:start="87:10" pos:end="87:15"><expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:10">i</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:29"><expr pos:start="87:17" pos:end="87:28"><name pos:start="87:17" pos:end="87:17">i</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <name pos:start="87:21" pos:end="87:28">max_cpus</name></expr>;</condition> <incr pos:start="87:31" pos:end="87:33"><expr pos:start="87:31" pos:end="87:33"><name pos:start="87:31" pos:end="87:31">i</name><operator pos:start="87:32" pos:end="87:33">++</operator></expr></incr>)</control> <block pos:start="87:36" pos:end="101:5">{<block_content pos:start="89:9" pos:end="99:9">

        <for pos:start="89:9" pos:end="99:9">for <control pos:start="89:13" pos:end="89:43">(<init pos:start="89:14" pos:end="89:19"><expr pos:start="89:14" pos:end="89:18"><name pos:start="89:14" pos:end="89:14">j</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="number" pos:start="89:18" pos:end="89:18">0</literal></expr>;</init> <condition pos:start="89:21" pos:end="89:38"><expr pos:start="89:21" pos:end="89:37"><name pos:start="89:21" pos:end="89:21">j</name> <operator pos:start="89:23" pos:end="89:23">&lt;</operator> <name pos:start="89:25" pos:end="89:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="89:40" pos:end="89:42"><expr pos:start="89:40" pos:end="89:42"><name pos:start="89:40" pos:end="89:40">j</name><operator pos:start="89:41" pos:end="89:42">++</operator></expr></incr>)</control> <block pos:start="89:45" pos:end="99:9">{<block_content pos:start="91:13" pos:end="97:13">

            <if_stmt pos:start="91:13" pos:end="97:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:43">(<expr pos:start="91:17" pos:end="91:42"><name pos:start="91:17" pos:end="91:31"><name pos:start="91:17" pos:end="91:28">node_cpumask</name><index pos:start="91:29" pos:end="91:31">[<expr pos:start="91:30" pos:end="91:30"><name pos:start="91:30" pos:end="91:30">j</name></expr>]</index></name> <operator pos:start="91:33" pos:end="91:33">&amp;</operator> <operator pos:start="91:35" pos:end="91:35">(</operator><literal type="number" pos:start="91:36" pos:end="91:36">1</literal> <operator pos:start="91:38" pos:end="91:39">&lt;&lt;</operator> <name pos:start="91:41" pos:end="91:41">i</name><operator pos:start="91:42" pos:end="91:42">)</operator></expr>)</condition> <block pos:start="91:45" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:22">

                <expr_stmt pos:start="93:17" pos:end="93:52"><expr pos:start="93:17" pos:end="93:51"><name pos:start="93:17" pos:end="93:34"><name pos:start="93:17" pos:end="93:27">numa_fw_cfg</name><index pos:start="93:28" pos:end="93:34">[<expr pos:start="93:29" pos:end="93:33"><name pos:start="93:29" pos:end="93:29">i</name> <operator pos:start="93:31" pos:end="93:31">+</operator> <literal type="number" pos:start="93:33" pos:end="93:33">1</literal></expr>]</index></name> <operator pos:start="93:36" pos:end="93:36">=</operator> <call pos:start="93:38" pos:end="93:51"><name pos:start="93:38" pos:end="93:48">cpu_to_le64</name><argument_list pos:start="93:49" pos:end="93:51">(<argument pos:start="93:50" pos:end="93:50"><expr pos:start="93:50" pos:end="93:50"><name pos:start="93:50" pos:end="93:50">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="95:17" pos:end="95:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <for pos:start="103:5" pos:end="107:5">for <control pos:start="103:9" pos:end="103:39">(<init pos:start="103:10" pos:end="103:15"><expr pos:start="103:10" pos:end="103:14"><name pos:start="103:10" pos:end="103:10">i</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <literal type="number" pos:start="103:14" pos:end="103:14">0</literal></expr>;</init> <condition pos:start="103:17" pos:end="103:34"><expr pos:start="103:17" pos:end="103:33"><name pos:start="103:17" pos:end="103:17">i</name> <operator pos:start="103:19" pos:end="103:19">&lt;</operator> <name pos:start="103:21" pos:end="103:33">nb_numa_nodes</name></expr>;</condition> <incr pos:start="103:36" pos:end="103:38"><expr pos:start="103:36" pos:end="103:38"><name pos:start="103:36" pos:end="103:36">i</name><operator pos:start="103:37" pos:end="103:38">++</operator></expr></incr>)</control> <block pos:start="103:41" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:65">

        <expr_stmt pos:start="105:9" pos:end="105:65"><expr pos:start="105:9" pos:end="105:64"><name pos:start="105:9" pos:end="105:37"><name pos:start="105:9" pos:end="105:19">numa_fw_cfg</name><index pos:start="105:20" pos:end="105:37">[<expr pos:start="105:21" pos:end="105:36"><name pos:start="105:21" pos:end="105:28">max_cpus</name> <operator pos:start="105:30" pos:end="105:30">+</operator> <literal type="number" pos:start="105:32" pos:end="105:32">1</literal> <operator pos:start="105:34" pos:end="105:34">+</operator> <name pos:start="105:36" pos:end="105:36">i</name></expr>]</index></name> <operator pos:start="105:39" pos:end="105:39">=</operator> <call pos:start="105:41" pos:end="105:64"><name pos:start="105:41" pos:end="105:51">cpu_to_le64</name><argument_list pos:start="105:52" pos:end="105:64">(<argument pos:start="105:53" pos:end="105:63"><expr pos:start="105:53" pos:end="105:63"><name pos:start="105:53" pos:end="105:63"><name pos:start="105:53" pos:end="105:60">node_mem</name><index pos:start="105:61" pos:end="105:63">[<expr pos:start="105:62" pos:end="105:62"><name pos:start="105:62" pos:end="105:62">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="109:5" pos:end="111:57"><expr pos:start="109:5" pos:end="111:56"><call pos:start="109:5" pos:end="111:56"><name pos:start="109:5" pos:end="109:20">fw_cfg_add_bytes</name><argument_list pos:start="109:21" pos:end="111:56">(<argument pos:start="109:22" pos:end="109:27"><expr pos:start="109:22" pos:end="109:27"><name pos:start="109:22" pos:end="109:27">fw_cfg</name></expr></argument>, <argument pos:start="109:30" pos:end="109:40"><expr pos:start="109:30" pos:end="109:40"><name pos:start="109:30" pos:end="109:40">FW_CFG_NUMA</name></expr></argument>, <argument pos:start="109:43" pos:end="109:64"><expr pos:start="109:43" pos:end="109:64"><operator pos:start="109:43" pos:end="109:43">(</operator><name pos:start="109:44" pos:end="109:50">uint8_t</name> <operator pos:start="109:52" pos:end="109:52">*</operator><operator pos:start="109:53" pos:end="109:53">)</operator><name pos:start="109:54" pos:end="109:64">numa_fw_cfg</name></expr></argument>,

                     <argument pos:start="111:22" pos:end="111:55"><expr pos:start="111:22" pos:end="111:55"><operator pos:start="111:22" pos:end="111:22">(</operator><literal type="number" pos:start="111:23" pos:end="111:25">1</literal> <operator pos:start="111:25" pos:end="111:25">+</operator> <name pos:start="111:27" pos:end="111:34">max_cpus</name> <operator pos:start="111:36" pos:end="111:36">+</operator> <name pos:start="111:38" pos:end="111:50">nb_numa_nodes</name><operator pos:start="111:51" pos:end="111:51">)</operator> <operator pos:start="111:53" pos:end="111:53">*</operator> <literal type="number" pos:start="111:55" pos:end="111:55">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="115:5" pos:end="115:18">return <expr pos:start="115:12" pos:end="115:17"><name pos:start="115:12" pos:end="115:17">fw_cfg</name></expr>;</return>

</block_content>}</block></function>
</unit>
