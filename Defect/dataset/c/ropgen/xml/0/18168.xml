<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18168.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:31">av_opencl_buffer_read_image</name><parameter_list pos:start="1:32" pos:end="3:80">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:39">uint8_t</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier><modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:50">dst_data</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:67"><decl pos:start="1:53" pos:end="1:67"><type pos:start="1:53" pos:end="1:67"><name pos:start="1:53" pos:end="1:55">int</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:67">plane_size</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:82"><decl pos:start="1:70" pos:end="1:82"><type pos:start="1:70" pos:end="1:82"><name pos:start="1:70" pos:end="1:72">int</name></type> <name pos:start="1:74" pos:end="1:82">plane_num</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:56"><decl pos:start="3:40" pos:end="3:56"><type pos:start="3:40" pos:end="3:56"><name pos:start="3:40" pos:end="3:45">cl_mem</name></type> <name pos:start="3:47" pos:end="3:56">src_cl_buf</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:79"><decl pos:start="3:59" pos:end="3:79"><type pos:start="3:59" pos:end="3:79"><name pos:start="3:59" pos:end="3:64">size_t</name></type> <name pos:start="3:66" pos:end="3:79">cl_buffer_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="77:1">{<block_content pos:start="7:5" pos:end="75:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>,<decl pos:start="7:11" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:11" pos:end="7:21">buffer_size</name> <init pos:start="7:23" pos:end="7:25">= <expr pos:start="7:25" pos:end="7:25"><literal type="number" pos:start="7:25" pos:end="7:25">0</literal></expr></init></decl>,<decl pos:start="7:27" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:27" pos:end="7:29">ret</name> <init pos:start="7:31" pos:end="7:33">= <expr pos:start="7:33" pos:end="7:33"><literal type="number" pos:start="7:33" pos:end="7:33">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:17">temp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:16">mapped</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">cl_int</name></type> <name pos:start="13:12" pos:end="13:17">status</name></decl>;</decl_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:36">(<expr pos:start="15:9" pos:end="15:35"><operator pos:start="15:9" pos:end="15:9">(</operator><name pos:start="15:10" pos:end="15:17">unsigned</name> <name pos:start="15:19" pos:end="15:21">int</name><operator pos:start="15:22" pos:end="15:22">)</operator><name pos:start="15:23" pos:end="15:31">plane_num</name> <operator pos:start="15:33" pos:end="15:33">&gt;</operator> <literal type="number" pos:start="15:35" pos:end="15:35">8</literal></expr>)</condition> <block pos:start="15:38" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:31">

        <return pos:start="17:9" pos:end="17:31">return <expr pos:start="17:16" pos:end="17:30"><call pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <for pos:start="21:5" pos:end="25:5">for <control pos:start="21:9" pos:end="21:33">(<init pos:start="21:10" pos:end="21:15"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:10">i</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</init><condition pos:start="21:16" pos:end="21:29"><expr pos:start="21:16" pos:end="21:28"><name pos:start="21:16" pos:end="21:16">i</name> <operator pos:start="21:18" pos:end="21:18">&lt;</operator> <name pos:start="21:20" pos:end="21:28">plane_num</name></expr>;</condition><incr pos:start="21:30" pos:end="21:32"><expr pos:start="21:30" pos:end="21:32"><name pos:start="21:30" pos:end="21:30">i</name><operator pos:start="21:31" pos:end="21:32">++</operator></expr></incr>)</control> <block pos:start="21:35" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:37">

        <expr_stmt pos:start="23:9" pos:end="23:37"><expr pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:19">buffer_size</name> <operator pos:start="23:21" pos:end="23:22">+=</operator> <name pos:start="23:24" pos:end="23:36"><name pos:start="23:24" pos:end="23:33">plane_size</name><index pos:start="23:34" pos:end="23:36">[<expr pos:start="23:35" pos:end="23:35"><name pos:start="23:35" pos:end="23:35">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:37">(<expr pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:19">buffer_size</name> <operator pos:start="27:21" pos:end="27:21">&gt;</operator> <name pos:start="27:23" pos:end="27:36">cl_buffer_size</name></expr>)</condition> <block pos:start="27:39" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:31">

        <expr_stmt pos:start="29:9" pos:end="29:106"><expr pos:start="29:9" pos:end="29:105"><call pos:start="29:9" pos:end="29:105"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:105">(<argument pos:start="29:16" pos:end="29:27"><expr pos:start="29:16" pos:end="29:27"><operator pos:start="29:16" pos:end="29:16">&amp;</operator><name pos:start="29:17" pos:end="29:27">openclutils</name></expr></argument>, <argument pos:start="29:30" pos:end="29:41"><expr pos:start="29:30" pos:end="29:41"><name pos:start="29:30" pos:end="29:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:44" pos:end="29:104"><expr pos:start="29:44" pos:end="29:104"><literal type="string" pos:start="29:44" pos:end="29:104">"Cannot write image to CPU buffer: OpenCL buffer too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:31">return <expr pos:start="31:16" pos:end="31:30"><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:22">AVERROR</name><argument_list pos:start="31:23" pos:end="31:30">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="39:62"><expr pos:start="35:5" pos:end="39:61"><name pos:start="35:5" pos:end="35:10">mapped</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="39:61"><name pos:start="35:14" pos:end="35:31">clEnqueueMapBuffer</name><argument_list pos:start="35:32" pos:end="39:61">(<argument pos:start="35:33" pos:end="35:53"><expr pos:start="35:33" pos:end="35:53"><name pos:start="35:33" pos:end="35:53"><name pos:start="35:33" pos:end="35:39">gpu_env</name><operator pos:start="35:40" pos:end="35:40">.</operator><name pos:start="35:41" pos:end="35:53">command_queue</name></name></expr></argument>, <argument pos:start="35:56" pos:end="35:65"><expr pos:start="35:56" pos:end="35:65"><name pos:start="35:56" pos:end="35:65">src_cl_buf</name></expr></argument>,

                                      <argument pos:start="37:39" pos:end="37:45"><expr pos:start="37:39" pos:end="37:45"><name pos:start="37:39" pos:end="37:45">CL_TRUE</name></expr></argument>,<argument pos:start="37:47" pos:end="37:57"><expr pos:start="37:47" pos:end="37:57"><name pos:start="37:47" pos:end="37:57">CL_MAP_READ</name></expr></argument>, <argument pos:start="37:60" pos:end="37:60"><expr pos:start="37:60" pos:end="37:60"><literal type="number" pos:start="37:60" pos:end="37:60">0</literal></expr></argument>, <argument pos:start="37:63" pos:end="37:73"><expr pos:start="37:63" pos:end="37:73"><name pos:start="37:63" pos:end="37:73">buffer_size</name></expr></argument>,

                                      <argument pos:start="39:39" pos:end="39:39"><expr pos:start="39:39" pos:end="39:39"><literal type="number" pos:start="39:39" pos:end="39:39">0</literal></expr></argument>, <argument pos:start="39:42" pos:end="39:45"><expr pos:start="39:42" pos:end="39:45"><name pos:start="39:42" pos:end="39:45">NULL</name></expr></argument>, <argument pos:start="39:48" pos:end="39:51"><expr pos:start="39:48" pos:end="39:51"><name pos:start="39:48" pos:end="39:51">NULL</name></expr></argument>, <argument pos:start="39:54" pos:end="39:60"><expr pos:start="39:54" pos:end="39:60"><operator pos:start="39:54" pos:end="39:54">&amp;</operator><name pos:start="39:55" pos:end="39:60">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:29">(<expr pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:14">status</name> <operator pos:start="43:16" pos:end="43:17">!=</operator> <name pos:start="43:19" pos:end="43:28">CL_SUCCESS</name></expr>)</condition> <block pos:start="43:31" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:32">

        <expr_stmt pos:start="45:9" pos:end="45:103"><expr pos:start="45:9" pos:end="45:102"><call pos:start="45:9" pos:end="45:102"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:102">(<argument pos:start="45:16" pos:end="45:27"><expr pos:start="45:16" pos:end="45:27"><operator pos:start="45:16" pos:end="45:16">&amp;</operator><name pos:start="45:17" pos:end="45:27">openclutils</name></expr></argument>, <argument pos:start="45:30" pos:end="45:41"><expr pos:start="45:30" pos:end="45:41"><name pos:start="45:30" pos:end="45:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:44" pos:end="45:78"><expr pos:start="45:44" pos:end="45:78"><literal type="string" pos:start="45:44" pos:end="45:78">"Could not map OpenCL buffer: %s\n"</literal></expr></argument>, <argument pos:start="45:81" pos:end="45:101"><expr pos:start="45:81" pos:end="45:101"><call pos:start="45:81" pos:end="45:101"><name pos:start="45:81" pos:end="45:93">opencl_errstr</name><argument_list pos:start="45:94" pos:end="45:101">(<argument pos:start="45:95" pos:end="45:100"><expr pos:start="45:95" pos:end="45:100"><name pos:start="45:95" pos:end="45:100">status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:32">return <expr pos:start="47:16" pos:end="47:31"><name pos:start="47:16" pos:end="47:31">AVERROR_EXTERNAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:18"><expr pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:8">temp</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <name pos:start="51:12" pos:end="51:17">mapped</name></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="63:5">if <condition pos:start="53:8" pos:end="53:17">(<expr pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:14">&gt;=</operator> <literal type="number" pos:start="53:16" pos:end="53:16">0</literal></expr>)</condition> <block pos:start="53:19" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:9">

        <for pos:start="55:9" pos:end="61:9">for <control pos:start="55:13" pos:end="55:37">(<init pos:start="55:14" pos:end="55:19"><expr pos:start="55:14" pos:end="55:18"><name pos:start="55:14" pos:end="55:14">i</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>;</init><condition pos:start="55:20" pos:end="55:33"><expr pos:start="55:20" pos:end="55:32"><name pos:start="55:20" pos:end="55:20">i</name> <operator pos:start="55:22" pos:end="55:22">&lt;</operator> <name pos:start="55:24" pos:end="55:32">plane_num</name></expr>;</condition><incr pos:start="55:34" pos:end="55:36"><expr pos:start="55:34" pos:end="55:36"><name pos:start="55:34" pos:end="55:34">i</name><operator pos:start="55:35" pos:end="55:36">++</operator></expr></incr>)</control> <block pos:start="55:39" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:34">

            <expr_stmt pos:start="57:13" pos:end="57:53"><expr pos:start="57:13" pos:end="57:52"><call pos:start="57:13" pos:end="57:52"><name pos:start="57:13" pos:end="57:18">memcpy</name><argument_list pos:start="57:19" pos:end="57:52">(<argument pos:start="57:20" pos:end="57:30"><expr pos:start="57:20" pos:end="57:30"><name pos:start="57:20" pos:end="57:30"><name pos:start="57:20" pos:end="57:27">dst_data</name><index pos:start="57:28" pos:end="57:30">[<expr pos:start="57:29" pos:end="57:29"><name pos:start="57:29" pos:end="57:29">i</name></expr>]</index></name></expr></argument>, <argument pos:start="57:33" pos:end="57:36"><expr pos:start="57:33" pos:end="57:36"><name pos:start="57:33" pos:end="57:36">temp</name></expr></argument>, <argument pos:start="57:39" pos:end="57:51"><expr pos:start="57:39" pos:end="57:51"><name pos:start="57:39" pos:end="57:51"><name pos:start="57:39" pos:end="57:48">plane_size</name><index pos:start="57:49" pos:end="57:51">[<expr pos:start="57:50" pos:end="57:50"><name pos:start="57:50" pos:end="57:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:34"><expr pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:16">temp</name> <operator pos:start="59:18" pos:end="59:19">+=</operator> <name pos:start="59:21" pos:end="59:33"><name pos:start="59:21" pos:end="59:30">plane_size</name><index pos:start="59:31" pos:end="59:33">[<expr pos:start="59:32" pos:end="59:32"><name pos:start="59:32" pos:end="59:32">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:95"><expr pos:start="65:5" pos:end="65:94"><name pos:start="65:5" pos:end="65:10">status</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <call pos:start="65:14" pos:end="65:94"><name pos:start="65:14" pos:end="65:36">clEnqueueUnmapMemObject</name><argument_list pos:start="65:37" pos:end="65:94">(<argument pos:start="65:38" pos:end="65:58"><expr pos:start="65:38" pos:end="65:58"><name pos:start="65:38" pos:end="65:58"><name pos:start="65:38" pos:end="65:44">gpu_env</name><operator pos:start="65:45" pos:end="65:45">.</operator><name pos:start="65:46" pos:end="65:58">command_queue</name></name></expr></argument>, <argument pos:start="65:61" pos:end="65:70"><expr pos:start="65:61" pos:end="65:70"><name pos:start="65:61" pos:end="65:70">src_cl_buf</name></expr></argument>, <argument pos:start="65:73" pos:end="65:78"><expr pos:start="65:73" pos:end="65:78"><name pos:start="65:73" pos:end="65:78">mapped</name></expr></argument>, <argument pos:start="65:81" pos:end="65:81"><expr pos:start="65:81" pos:end="65:81"><literal type="number" pos:start="65:81" pos:end="65:81">0</literal></expr></argument>, <argument pos:start="65:84" pos:end="65:87"><expr pos:start="65:84" pos:end="65:87"><name pos:start="65:84" pos:end="65:87">NULL</name></expr></argument>, <argument pos:start="65:90" pos:end="65:93"><expr pos:start="65:90" pos:end="65:93"><name pos:start="65:90" pos:end="65:93">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:29">(<expr pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:14">status</name> <operator pos:start="67:16" pos:end="67:17">!=</operator> <name pos:start="67:19" pos:end="67:28">CL_SUCCESS</name></expr>)</condition> <block pos:start="67:31" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:32">

        <expr_stmt pos:start="69:9" pos:end="69:105"><expr pos:start="69:9" pos:end="69:104"><call pos:start="69:9" pos:end="69:104"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="69:104">(<argument pos:start="69:16" pos:end="69:27"><expr pos:start="69:16" pos:end="69:27"><operator pos:start="69:16" pos:end="69:16">&amp;</operator><name pos:start="69:17" pos:end="69:27">openclutils</name></expr></argument>, <argument pos:start="69:30" pos:end="69:41"><expr pos:start="69:30" pos:end="69:41"><name pos:start="69:30" pos:end="69:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:44" pos:end="69:80"><expr pos:start="69:44" pos:end="69:80"><literal type="string" pos:start="69:44" pos:end="69:80">"Could not unmap OpenCL buffer: %s\n"</literal></expr></argument>, <argument pos:start="69:83" pos:end="69:103"><expr pos:start="69:83" pos:end="69:103"><call pos:start="69:83" pos:end="69:103"><name pos:start="69:83" pos:end="69:95">opencl_errstr</name><argument_list pos:start="69:96" pos:end="69:103">(<argument pos:start="69:97" pos:end="69:102"><expr pos:start="69:97" pos:end="69:102"><name pos:start="69:97" pos:end="69:102">status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:32">return <expr pos:start="71:16" pos:end="71:31"><name pos:start="71:16" pos:end="71:31">AVERROR_EXTERNAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
