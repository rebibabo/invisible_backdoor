<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8851.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:15">ide_dma_cb</name><parameter_list pos:start="1:16" pos:end="1:38">(<parameter pos:start="1:17" pos:end="1:28"><decl pos:start="1:17" pos:end="1:28"><type pos:start="1:17" pos:end="1:28"><name pos:start="1:17" pos:end="1:20">void</name> <modifier pos:start="1:22" pos:end="1:22">*</modifier></type><name pos:start="1:23" pos:end="1:28">opaque</name></decl></parameter>, <parameter pos:start="1:31" pos:end="1:37"><decl pos:start="1:31" pos:end="1:37"><type pos:start="1:31" pos:end="1:37"><name pos:start="1:31" pos:end="1:33">int</name></type> <name pos:start="1:35" pos:end="1:37">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="185:1">{<block_content pos:start="5:5" pos:end="183:37">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IDEState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:22">sector_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:20">stay_active</name> <init pos:start="11:22" pos:end="11:28">= <expr pos:start="11:24" pos:end="11:28"><name pos:start="11:24" pos:end="11:28">false</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:26">(<expr pos:start="15:9" pos:end="15:25"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:14">==</operator> <operator pos:start="15:16" pos:end="15:16">-</operator><name pos:start="15:17" pos:end="15:25">ECANCELED</name></expr>)</condition> <block pos:start="15:28" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="43:5"><if pos:start="21:5" pos:end="43:5">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">&lt;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>)</condition> <block pos:start="21:18" pos:end="43:5">{<block_content pos:start="23:9" pos:end="41:9">

        <decl_stmt pos:start="23:9" pos:end="23:31"><decl pos:start="23:9" pos:end="23:30"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:14">op</name> <init pos:start="23:16" pos:end="23:30">= <expr pos:start="23:18" pos:end="23:30"><name pos:start="23:18" pos:end="23:30">IDE_RETRY_DMA</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="27:9" pos:end="33:33"><if pos:start="27:9" pos:end="29:33">if <condition pos:start="27:12" pos:end="27:39">(<expr pos:start="27:13" pos:end="27:38"><name pos:start="27:13" pos:end="27:22"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:22">dma_cmd</name></name> <operator pos:start="27:24" pos:end="27:25">==</operator> <name pos:start="27:27" pos:end="27:38">IDE_DMA_READ</name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:33"><block_content pos:start="29:13" pos:end="29:33">

            <expr_stmt pos:start="29:13" pos:end="29:33"><expr pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:14">op</name> <operator pos:start="29:16" pos:end="29:17">|=</operator> <name pos:start="29:19" pos:end="29:32">IDE_RETRY_READ</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="31:9" pos:end="33:33">else if <condition pos:start="31:17" pos:end="31:44">(<expr pos:start="31:18" pos:end="31:43"><name pos:start="31:18" pos:end="31:27"><name pos:start="31:18" pos:end="31:18">s</name><operator pos:start="31:19" pos:end="31:20">-&gt;</operator><name pos:start="31:21" pos:end="31:27">dma_cmd</name></name> <operator pos:start="31:29" pos:end="31:30">==</operator> <name pos:start="31:32" pos:end="31:43">IDE_DMA_TRIM</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:33"><block_content pos:start="33:13" pos:end="33:33">

            <expr_stmt pos:start="33:13" pos:end="33:33"><expr pos:start="33:13" pos:end="33:32"><name pos:start="33:13" pos:end="33:14">op</name> <operator pos:start="33:16" pos:end="33:17">|=</operator> <name pos:start="33:19" pos:end="33:32">IDE_RETRY_TRIM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:45">(<expr pos:start="37:13" pos:end="37:44"><call pos:start="37:13" pos:end="37:44"><name pos:start="37:13" pos:end="37:31">ide_handle_rw_error</name><argument_list pos:start="37:32" pos:end="37:44">(<argument pos:start="37:33" pos:end="37:33"><expr pos:start="37:33" pos:end="37:33"><name pos:start="37:33" pos:end="37:33">s</name></expr></argument>, <argument pos:start="37:36" pos:end="37:39"><expr pos:start="37:36" pos:end="37:39"><operator pos:start="37:36" pos:end="37:36">-</operator><name pos:start="37:37" pos:end="37:39">ret</name></expr></argument>, <argument pos:start="37:42" pos:end="37:43"><expr pos:start="37:42" pos:end="37:43"><name pos:start="37:42" pos:end="37:43">op</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:47" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:19">

            <return pos:start="39:13" pos:end="39:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:5">n</name> <operator pos:start="47:7" pos:end="47:7">=</operator> <name pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:25">io_buffer_size</name></name> <operator pos:start="47:27" pos:end="47:28">&gt;&gt;</operator> <literal type="number" pos:start="47:30" pos:end="47:30">9</literal></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="61:5"><if pos:start="49:5" pos:end="61:5">if <condition pos:start="49:8" pos:end="49:23">(<expr pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:9">n</name> <operator pos:start="49:11" pos:end="49:11">&gt;</operator> <name pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:22">nsector</name></name></expr>)</condition> <block pos:start="49:25" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:27">

        <comment type="block" pos:start="51:9" pos:end="55:42">/* The PRDs were longer than needed for this request. Shorten them so

         * we don't get a negative remainder. The Active bit must remain set

         * after the request completes. */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:23"><expr pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:9">n</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <name pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:22">nsector</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:27"><expr pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:19">stay_active</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <name pos:start="59:23" pos:end="59:26">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:35"><expr pos:start="65:5" pos:end="65:34"><name pos:start="65:5" pos:end="65:14">sector_num</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:34"><name pos:start="65:18" pos:end="65:31">ide_get_sector</name><argument_list pos:start="65:32" pos:end="65:34">(<argument pos:start="65:33" pos:end="65:33"><expr pos:start="65:33" pos:end="65:33"><name pos:start="65:33" pos:end="65:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="77:5"><if pos:start="67:5" pos:end="77:5">if <condition pos:start="67:8" pos:end="67:14">(<expr pos:start="67:9" pos:end="67:13"><name pos:start="67:9" pos:end="67:9">n</name> <operator pos:start="67:11" pos:end="67:11">&gt;</operator> <literal type="number" pos:start="67:13" pos:end="67:13">0</literal></expr>)</condition> <block pos:start="67:16" pos:end="77:5">{<block_content pos:start="69:9" pos:end="75:24">

        <expr_stmt pos:start="69:9" pos:end="69:26"><expr pos:start="69:9" pos:end="69:25"><call pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:22">dma_buf_commit</name><argument_list pos:start="69:23" pos:end="69:25">(<argument pos:start="69:24" pos:end="69:24"><expr pos:start="69:24" pos:end="69:24"><name pos:start="69:24" pos:end="69:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:24"><expr pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:18">sector_num</name> <operator pos:start="71:20" pos:end="71:21">+=</operator> <name pos:start="71:23" pos:end="71:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:38"><expr pos:start="73:9" pos:end="73:37"><call pos:start="73:9" pos:end="73:37"><name pos:start="73:9" pos:end="73:22">ide_set_sector</name><argument_list pos:start="73:23" pos:end="73:37">(<argument pos:start="73:24" pos:end="73:24"><expr pos:start="73:24" pos:end="73:24"><name pos:start="73:24" pos:end="73:24">s</name></expr></argument>, <argument pos:start="73:27" pos:end="73:36"><expr pos:start="73:27" pos:end="73:36"><name pos:start="73:27" pos:end="73:36">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:24"><expr pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:18">nsector</name></name> <operator pos:start="75:20" pos:end="75:21">-=</operator> <name pos:start="75:23" pos:end="75:23">n</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:27">/* end of transfer ? */</comment>

    <if_stmt pos:start="83:5" pos:end="91:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="83:24">(<expr pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:18">nsector</name></name> <operator pos:start="83:20" pos:end="83:21">==</operator> <literal type="number" pos:start="83:23" pos:end="83:23">0</literal></expr>)</condition> <block pos:start="83:26" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:17">

        <expr_stmt pos:start="85:9" pos:end="85:43"><expr pos:start="85:9" pos:end="85:42"><name pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:17">status</name></name> <operator pos:start="85:19" pos:end="85:19">=</operator> <name pos:start="85:21" pos:end="85:30">READY_STAT</name> <operator pos:start="85:32" pos:end="85:32">|</operator> <name pos:start="85:34" pos:end="85:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:28"><expr pos:start="87:9" pos:end="87:27"><call pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:19">ide_set_irq</name><argument_list pos:start="87:20" pos:end="87:27">(<argument pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:21">s</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="89:9" pos:end="89:17">goto <name pos:start="89:14" pos:end="89:16">eot</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:30">/* launch next transfer */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:19"><expr pos:start="97:5" pos:end="97:18"><name pos:start="97:5" pos:end="97:5">n</name> <operator pos:start="97:7" pos:end="97:7">=</operator> <name pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:18">nsector</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:27"><expr pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:22"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:22">io_buffer_index</name></name> <operator pos:start="99:24" pos:end="99:24">=</operator> <literal type="number" pos:start="99:26" pos:end="99:26">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:32"><expr pos:start="101:5" pos:end="101:31"><name pos:start="101:5" pos:end="101:21"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:21">io_buffer_size</name></name> <operator pos:start="101:23" pos:end="101:23">=</operator> <name pos:start="101:25" pos:end="101:25">n</name> <operator pos:start="101:27" pos:end="101:27">*</operator> <literal type="number" pos:start="101:29" pos:end="101:31">512</literal></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="118:0"><if pos:start="103:5" pos:end="118:0">if <condition pos:start="103:8" pos:end="103:76">(<expr pos:start="103:9" pos:end="103:75"><call pos:start="103:9" pos:end="103:70"><name pos:start="103:9" pos:end="103:37"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:14">bus</name><operator pos:start="103:15" pos:end="103:16">-&gt;</operator><name pos:start="103:17" pos:end="103:19">dma</name><operator pos:start="103:20" pos:end="103:21">-&gt;</operator><name pos:start="103:22" pos:end="103:24">ops</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:37">prepare_buf</name></name><argument_list pos:start="103:38" pos:end="103:70">(<argument pos:start="103:39" pos:end="103:49"><expr pos:start="103:39" pos:end="103:49"><name pos:start="103:39" pos:end="103:49"><name pos:start="103:39" pos:end="103:39">s</name><operator pos:start="103:40" pos:end="103:41">-&gt;</operator><name pos:start="103:42" pos:end="103:44">bus</name><operator pos:start="103:45" pos:end="103:46">-&gt;</operator><name pos:start="103:47" pos:end="103:49">dma</name></name></expr></argument>, <argument pos:start="103:52" pos:end="103:69"><expr pos:start="103:52" pos:end="103:69"><call pos:start="103:52" pos:end="103:69"><name pos:start="103:52" pos:end="103:66">ide_cmd_is_read</name><argument_list pos:start="103:67" pos:end="103:69">(<argument pos:start="103:68" pos:end="103:68"><expr pos:start="103:68" pos:end="103:68"><name pos:start="103:68" pos:end="103:68">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="103:72" pos:end="103:73">==</operator> <literal type="number" pos:start="103:75" pos:end="103:75">0</literal></expr>)</condition> <block pos:start="103:78" pos:end="118:0">{<block_content pos:start="109:9" pos:end="111:17">

        <comment type="block" pos:start="105:9" pos:end="107:24">/* The PRDs were too short. Reset the Active bit, but don't raise an

         * interrupt. */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:43"><expr pos:start="109:9" pos:end="109:42"><name pos:start="109:9" pos:end="109:17"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:17">status</name></name> <operator pos:start="109:19" pos:end="109:19">=</operator> <name pos:start="109:21" pos:end="109:30">READY_STAT</name> <operator pos:start="109:32" pos:end="109:32">|</operator> <name pos:start="109:34" pos:end="109:42">SEEK_STAT</name></expr>;</expr_stmt>

        <goto pos:start="111:9" pos:end="111:17">goto <name pos:start="111:14" pos:end="111:16">eot</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="117:1" pos:end="117:16">#<cpp:directive pos:start="117:2" pos:end="117:6">ifdef</cpp:directive> <name pos:start="117:8" pos:end="117:16">DEBUG_AIO</name></cpp:ifdef>

    <expr_stmt pos:start="119:5" pos:end="124:0"><expr pos:start="119:5" pos:end="121:37"><call pos:start="119:5" pos:end="121:37"><name pos:start="119:5" pos:end="119:10">printf</name><argument_list pos:start="119:11" pos:end="121:37">(<argument pos:start="119:12" pos:end="119:66"><expr pos:start="119:12" pos:end="119:66"><literal type="string" pos:start="119:12" pos:end="119:37">"ide_dma_cb: sector_num=%"</literal> <name pos:start="119:39" pos:end="119:44">PRId64</name> <literal type="string" pos:start="119:46" pos:end="119:66">" n=%d, cmd_cmd=%d\n"</literal></expr></argument>,

           <argument pos:start="121:12" pos:end="121:21"><expr pos:start="121:12" pos:end="121:21"><name pos:start="121:12" pos:end="121:21">sector_num</name></expr></argument>, <argument pos:start="121:24" pos:end="121:24"><expr pos:start="121:24" pos:end="121:24"><name pos:start="121:24" pos:end="121:24">n</name></expr></argument>, <argument pos:start="121:27" pos:end="121:36"><expr pos:start="121:27" pos:end="121:36"><name pos:start="121:27" pos:end="121:36"><name pos:start="121:27" pos:end="121:27">s</name><operator pos:start="121:28" pos:end="121:29">-&gt;</operator><name pos:start="121:30" pos:end="121:36">dma_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="127:5" pos:end="137:5"><if pos:start="127:5" pos:end="137:5">if <condition pos:start="127:8" pos:end="129:45">(<expr pos:start="127:9" pos:end="129:44"><operator pos:start="127:9" pos:end="127:9">(</operator><name pos:start="127:10" pos:end="127:19"><name pos:start="127:10" pos:end="127:10">s</name><operator pos:start="127:11" pos:end="127:12">-&gt;</operator><name pos:start="127:13" pos:end="127:19">dma_cmd</name></name> <operator pos:start="127:21" pos:end="127:22">==</operator> <name pos:start="127:24" pos:end="127:35">IDE_DMA_READ</name> <operator pos:start="127:37" pos:end="127:38">||</operator> <name pos:start="127:40" pos:end="127:49"><name pos:start="127:40" pos:end="127:40">s</name><operator pos:start="127:41" pos:end="127:42">-&gt;</operator><name pos:start="127:43" pos:end="127:49">dma_cmd</name></name> <operator pos:start="127:51" pos:end="127:52">==</operator> <name pos:start="127:54" pos:end="127:66">IDE_DMA_WRITE</name><operator pos:start="127:67" pos:end="127:67">)</operator> <operator pos:start="127:69" pos:end="127:70">&amp;&amp;</operator>

        <operator pos:start="129:9" pos:end="129:9">!</operator><call pos:start="129:10" pos:end="129:44"><name pos:start="129:10" pos:end="129:26">ide_sect_range_ok</name><argument_list pos:start="129:27" pos:end="129:44">(<argument pos:start="129:28" pos:end="129:28"><expr pos:start="129:28" pos:end="129:28"><name pos:start="129:28" pos:end="129:28">s</name></expr></argument>, <argument pos:start="129:31" pos:end="129:40"><expr pos:start="129:31" pos:end="129:40"><name pos:start="129:31" pos:end="129:40">sector_num</name></expr></argument>, <argument pos:start="129:43" pos:end="129:43"><expr pos:start="129:43" pos:end="129:43"><name pos:start="129:43" pos:end="129:43">n</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:47" pos:end="137:5">{<block_content pos:start="131:9" pos:end="135:15">

        <expr_stmt pos:start="131:9" pos:end="131:26"><expr pos:start="131:9" pos:end="131:25"><call pos:start="131:9" pos:end="131:25"><name pos:start="131:9" pos:end="131:22">dma_buf_commit</name><argument_list pos:start="131:23" pos:end="131:25">(<argument pos:start="131:24" pos:end="131:24"><expr pos:start="131:24" pos:end="131:24"><name pos:start="131:24" pos:end="131:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:25"><expr pos:start="133:9" pos:end="133:24"><call pos:start="133:9" pos:end="133:24"><name pos:start="133:9" pos:end="133:21">ide_dma_error</name><argument_list pos:start="133:22" pos:end="133:24">(<argument pos:start="133:23" pos:end="133:23"><expr pos:start="133:23" pos:end="133:23"><name pos:start="133:23" pos:end="133:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="135:9" pos:end="135:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="141:5" pos:end="169:5">switch <condition pos:start="141:12" pos:end="141:23">(<expr pos:start="141:13" pos:end="141:22"><name pos:start="141:13" pos:end="141:22"><name pos:start="141:13" pos:end="141:13">s</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:22">dma_cmd</name></name></expr>)</condition> <block pos:start="141:25" pos:end="169:5">{<block_content pos:start="143:5" pos:end="167:14">

    <case pos:start="143:5" pos:end="143:22">case <expr pos:start="143:10" pos:end="143:21"><name pos:start="143:10" pos:end="143:21">IDE_DMA_READ</name></expr>:</case>

        <expr_stmt pos:start="145:9" pos:end="147:58"><expr pos:start="145:9" pos:end="147:57"><name pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:14">bus</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:19">dma</name><operator pos:start="145:20" pos:end="145:21">-&gt;</operator><name pos:start="145:22" pos:end="145:26">aiocb</name></name> <operator pos:start="145:28" pos:end="145:28">=</operator> <call pos:start="145:30" pos:end="147:57"><name pos:start="145:30" pos:end="145:42">dma_bdrv_read</name><argument_list pos:start="145:43" pos:end="147:57">(<argument pos:start="145:44" pos:end="145:48"><expr pos:start="145:44" pos:end="145:48"><name pos:start="145:44" pos:end="145:48"><name pos:start="145:44" pos:end="145:44">s</name><operator pos:start="145:45" pos:end="145:46">-&gt;</operator><name pos:start="145:47" pos:end="145:48">bs</name></name></expr></argument>, <argument pos:start="145:51" pos:end="145:56"><expr pos:start="145:51" pos:end="145:56"><operator pos:start="145:51" pos:end="145:51">&amp;</operator><name pos:start="145:52" pos:end="145:56"><name pos:start="145:52" pos:end="145:52">s</name><operator pos:start="145:53" pos:end="145:54">-&gt;</operator><name pos:start="145:55" pos:end="145:56">sg</name></name></expr></argument>, <argument pos:start="145:59" pos:end="145:68"><expr pos:start="145:59" pos:end="145:68"><name pos:start="145:59" pos:end="145:68">sector_num</name></expr></argument>,

                                           <argument pos:start="147:44" pos:end="147:53"><expr pos:start="147:44" pos:end="147:53"><name pos:start="147:44" pos:end="147:53">ide_dma_cb</name></expr></argument>, <argument pos:start="147:56" pos:end="147:56"><expr pos:start="147:56" pos:end="147:56"><name pos:start="147:56" pos:end="147:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <case pos:start="151:5" pos:end="151:23">case <expr pos:start="151:10" pos:end="151:22"><name pos:start="151:10" pos:end="151:22">IDE_DMA_WRITE</name></expr>:</case>

        <expr_stmt pos:start="153:9" pos:end="155:59"><expr pos:start="153:9" pos:end="155:58"><name pos:start="153:9" pos:end="153:26"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:14">bus</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:19">dma</name><operator pos:start="153:20" pos:end="153:21">-&gt;</operator><name pos:start="153:22" pos:end="153:26">aiocb</name></name> <operator pos:start="153:28" pos:end="153:28">=</operator> <call pos:start="153:30" pos:end="155:58"><name pos:start="153:30" pos:end="153:43">dma_bdrv_write</name><argument_list pos:start="153:44" pos:end="155:58">(<argument pos:start="153:45" pos:end="153:49"><expr pos:start="153:45" pos:end="153:49"><name pos:start="153:45" pos:end="153:49"><name pos:start="153:45" pos:end="153:45">s</name><operator pos:start="153:46" pos:end="153:47">-&gt;</operator><name pos:start="153:48" pos:end="153:49">bs</name></name></expr></argument>, <argument pos:start="153:52" pos:end="153:57"><expr pos:start="153:52" pos:end="153:57"><operator pos:start="153:52" pos:end="153:52">&amp;</operator><name pos:start="153:53" pos:end="153:57"><name pos:start="153:53" pos:end="153:53">s</name><operator pos:start="153:54" pos:end="153:55">-&gt;</operator><name pos:start="153:56" pos:end="153:57">sg</name></name></expr></argument>, <argument pos:start="153:60" pos:end="153:69"><expr pos:start="153:60" pos:end="153:69"><name pos:start="153:60" pos:end="153:69">sector_num</name></expr></argument>,

                                            <argument pos:start="155:45" pos:end="155:54"><expr pos:start="155:45" pos:end="155:54"><name pos:start="155:45" pos:end="155:54">ide_dma_cb</name></expr></argument>, <argument pos:start="155:57" pos:end="155:57"><expr pos:start="155:57" pos:end="155:57"><name pos:start="155:57" pos:end="155:57">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="157:9" pos:end="157:14">break;</break>

    <case pos:start="159:5" pos:end="159:22">case <expr pos:start="159:10" pos:end="159:21"><name pos:start="159:10" pos:end="159:21">IDE_DMA_TRIM</name></expr>:</case>

        <expr_stmt pos:start="161:9" pos:end="165:66"><expr pos:start="161:9" pos:end="165:65"><name pos:start="161:9" pos:end="161:26"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:14">bus</name><operator pos:start="161:15" pos:end="161:16">-&gt;</operator><name pos:start="161:17" pos:end="161:19">dma</name><operator pos:start="161:20" pos:end="161:21">-&gt;</operator><name pos:start="161:22" pos:end="161:26">aiocb</name></name> <operator pos:start="161:28" pos:end="161:28">=</operator> <call pos:start="161:30" pos:end="165:65"><name pos:start="161:30" pos:end="161:40">dma_bdrv_io</name><argument_list pos:start="161:41" pos:end="165:65">(<argument pos:start="161:42" pos:end="161:46"><expr pos:start="161:42" pos:end="161:46"><name pos:start="161:42" pos:end="161:46"><name pos:start="161:42" pos:end="161:42">s</name><operator pos:start="161:43" pos:end="161:44">-&gt;</operator><name pos:start="161:45" pos:end="161:46">bs</name></name></expr></argument>, <argument pos:start="161:49" pos:end="161:54"><expr pos:start="161:49" pos:end="161:54"><operator pos:start="161:49" pos:end="161:49">&amp;</operator><name pos:start="161:50" pos:end="161:54"><name pos:start="161:50" pos:end="161:50">s</name><operator pos:start="161:51" pos:end="161:52">-&gt;</operator><name pos:start="161:53" pos:end="161:54">sg</name></name></expr></argument>, <argument pos:start="161:57" pos:end="161:66"><expr pos:start="161:57" pos:end="161:66"><name pos:start="161:57" pos:end="161:66">sector_num</name></expr></argument>,

                                         <argument pos:start="163:42" pos:end="163:55"><expr pos:start="163:42" pos:end="163:55"><name pos:start="163:42" pos:end="163:55">ide_issue_trim</name></expr></argument>, <argument pos:start="163:58" pos:end="163:67"><expr pos:start="163:58" pos:end="163:67"><name pos:start="163:58" pos:end="163:67">ide_dma_cb</name></expr></argument>, <argument pos:start="163:70" pos:end="163:70"><expr pos:start="163:70" pos:end="163:70"><name pos:start="163:70" pos:end="163:70">s</name></expr></argument>,

                                         <argument pos:start="165:42" pos:end="165:64"><expr pos:start="165:42" pos:end="165:64"><name pos:start="165:42" pos:end="165:64">DMA_DIRECTION_TO_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="167:9" pos:end="167:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="171:5" pos:end="171:11">return;</return>



<label pos:start="175:1" pos:end="175:4"><name pos:start="175:1" pos:end="175:3">eot</name>:</label>

    <if_stmt pos:start="177:5" pos:end="181:5"><if pos:start="177:5" pos:end="181:5">if <condition pos:start="177:8" pos:end="177:66">(<expr pos:start="177:9" pos:end="177:65"><name pos:start="177:9" pos:end="177:18"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:18">dma_cmd</name></name> <operator pos:start="177:20" pos:end="177:21">==</operator> <name pos:start="177:23" pos:end="177:34">IDE_DMA_READ</name> <operator pos:start="177:36" pos:end="177:37">||</operator> <name pos:start="177:39" pos:end="177:48"><name pos:start="177:39" pos:end="177:39">s</name><operator pos:start="177:40" pos:end="177:41">-&gt;</operator><name pos:start="177:42" pos:end="177:48">dma_cmd</name></name> <operator pos:start="177:50" pos:end="177:51">==</operator> <name pos:start="177:53" pos:end="177:65">IDE_DMA_WRITE</name></expr>)</condition> <block pos:start="177:68" pos:end="181:5">{<block_content pos:start="179:9" pos:end="179:57">

        <expr_stmt pos:start="179:9" pos:end="179:57"><expr pos:start="179:9" pos:end="179:56"><call pos:start="179:9" pos:end="179:56"><name pos:start="179:9" pos:end="179:23">block_acct_done</name><argument_list pos:start="179:24" pos:end="179:56">(<argument pos:start="179:25" pos:end="179:45"><expr pos:start="179:25" pos:end="179:45"><call pos:start="179:25" pos:end="179:45"><name pos:start="179:25" pos:end="179:38">bdrv_get_stats</name><argument_list pos:start="179:39" pos:end="179:45">(<argument pos:start="179:40" pos:end="179:44"><expr pos:start="179:40" pos:end="179:44"><name pos:start="179:40" pos:end="179:44"><name pos:start="179:40" pos:end="179:40">s</name><operator pos:start="179:41" pos:end="179:42">-&gt;</operator><name pos:start="179:43" pos:end="179:44">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="179:48" pos:end="179:55"><expr pos:start="179:48" pos:end="179:55"><operator pos:start="179:48" pos:end="179:48">&amp;</operator><name pos:start="179:49" pos:end="179:55"><name pos:start="179:49" pos:end="179:49">s</name><operator pos:start="179:50" pos:end="179:51">-&gt;</operator><name pos:start="179:52" pos:end="179:55">acct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:37"><expr pos:start="183:5" pos:end="183:36"><call pos:start="183:5" pos:end="183:36"><name pos:start="183:5" pos:end="183:20">ide_set_inactive</name><argument_list pos:start="183:21" pos:end="183:36">(<argument pos:start="183:22" pos:end="183:22"><expr pos:start="183:22" pos:end="183:22"><name pos:start="183:22" pos:end="183:22">s</name></expr></argument>, <argument pos:start="183:25" pos:end="183:35"><expr pos:start="183:25" pos:end="183:35"><name pos:start="183:25" pos:end="183:35">stay_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
