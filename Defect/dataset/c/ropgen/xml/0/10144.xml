<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10144.c" pos:tabs="8"><function pos:start="1:1" pos:end="321:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">avfilter_init_filter</name><parameter_list pos:start="1:25" pos:end="4:0">(<parameter pos:start="1:26" pos:end="1:48"><decl pos:start="1:26" pos:end="1:48"><type pos:start="1:26" pos:end="1:48"><name pos:start="1:26" pos:end="1:40">AVFilterContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">filter</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:66"><decl pos:start="1:51" pos:end="1:66"><type pos:start="1:51" pos:end="1:66"><specifier pos:start="1:51" pos:end="1:55">const</specifier> <name pos:start="1:57" pos:end="1:60">char</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">args</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:80"><decl pos:start="1:69" pos:end="1:80"><type pos:start="1:69" pos:end="1:80"><name pos:start="1:69" pos:end="1:72">void</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:80">opaque</name></decl></parameter>)</parameter_list>

<cpp:endif pos:start="3:1" pos:end="3:6">#<cpp:directive pos:start="3:2" pos:end="3:6">endif</cpp:directive></cpp:endif>

<block pos:start="5:1" pos:end="321:1">{<block_content pos:start="7:5" pos:end="319:15">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">AVDictionary</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:25">options</name> <init pos:start="7:27" pos:end="7:32">= <expr pos:start="7:29" pos:end="7:32"><name pos:start="7:29" pos:end="7:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">AVDictionaryEntry</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:24">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name><init pos:start="11:12" pos:end="11:13">=<expr pos:start="11:13" pos:end="11:13"><literal type="number" pos:start="11:13" pos:end="11:13">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="263:5"><if pos:start="15:5" pos:end="263:5">if <condition pos:start="15:8" pos:end="15:22">(<expr pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:12">args</name> <operator pos:start="15:14" pos:end="15:15">&amp;&amp;</operator> <operator pos:start="15:17" pos:end="15:17">*</operator><name pos:start="15:18" pos:end="15:21">args</name></expr>)</condition> <block pos:start="15:24" pos:end="263:5">{<block_content pos:start="17:9" pos:end="261:9">

        <if_stmt pos:start="17:9" pos:end="30:0"><if pos:start="17:9" pos:end="30:0">if <condition pos:start="17:12" pos:end="17:40">(<expr pos:start="17:13" pos:end="17:39"><operator pos:start="17:13" pos:end="17:13">!</operator><name pos:start="17:14" pos:end="17:39"><name pos:start="17:14" pos:end="17:19">filter</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:27">filter</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:39">priv_class</name></name></expr>)</condition> <block pos:start="17:42" pos:end="30:0">{<block_content pos:start="19:13" pos:end="23:35">

            <expr_stmt pos:start="19:13" pos:end="21:70"><expr pos:start="19:13" pos:end="21:69"><call pos:start="19:13" pos:end="21:69"><name pos:start="19:13" pos:end="19:18">av_log</name><argument_list pos:start="19:19" pos:end="21:69">(<argument pos:start="19:20" pos:end="19:25"><expr pos:start="19:20" pos:end="19:25"><name pos:start="19:20" pos:end="19:25">filter</name></expr></argument>, <argument pos:start="19:28" pos:end="19:39"><expr pos:start="19:28" pos:end="19:39"><name pos:start="19:28" pos:end="19:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:42" pos:end="21:62"><expr pos:start="19:42" pos:end="21:62"><literal type="string" pos:start="19:42" pos:end="19:73">"This filter does not take any "</literal>

                   <literal type="string" pos:start="21:20" pos:end="21:62">"options, but options were provided: %s.\n"</literal></expr></argument>, <argument pos:start="21:65" pos:end="21:68"><expr pos:start="21:65" pos:end="21:68"><name pos:start="21:65" pos:end="21:68">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="23:13" pos:end="23:35">return <expr pos:start="23:20" pos:end="23:34"><call pos:start="23:20" pos:end="23:34"><name pos:start="23:20" pos:end="23:26">AVERROR</name><argument_list pos:start="23:27" pos:end="23:34">(<argument pos:start="23:28" pos:end="23:33"><expr pos:start="23:28" pos:end="23:33"><name pos:start="23:28" pos:end="23:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



<cpp:if pos:start="29:1" pos:end="29:26">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:26"><name pos:start="29:5" pos:end="29:26">FF_API_OLD_FILTER_OPTS</name></expr></cpp:if>

        <if_stmt pos:start="31:9" pos:end="261:9"><if pos:start="31:9" pos:end="83:9">if <condition pos:start="31:12" pos:end="33:50">(<expr pos:start="31:13" pos:end="33:49"><operator pos:start="31:13" pos:end="31:13">!</operator><call pos:start="31:14" pos:end="31:50"><name pos:start="31:14" pos:end="31:19">strcmp</name><argument_list pos:start="31:20" pos:end="31:50">(<argument pos:start="31:21" pos:end="31:40"><expr pos:start="31:21" pos:end="31:40"><name pos:start="31:21" pos:end="31:40"><name pos:start="31:21" pos:end="31:26">filter</name><operator pos:start="31:27" pos:end="31:28">-&gt;</operator><name pos:start="31:29" pos:end="31:34">filter</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:40">name</name></name></expr></argument>, <argument pos:start="31:43" pos:end="31:49"><expr pos:start="31:43" pos:end="31:49"><literal type="string" pos:start="31:43" pos:end="31:49">"scale"</literal></expr></argument>)</argument_list></call> <operator pos:start="31:52" pos:end="31:53">&amp;&amp;</operator>

            <call pos:start="33:13" pos:end="33:29"><name pos:start="33:13" pos:end="33:18">strchr</name><argument_list pos:start="33:19" pos:end="33:29">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">args</name></expr></argument>, <argument pos:start="33:26" pos:end="33:28"><expr pos:start="33:26" pos:end="33:28"><literal type="char" pos:start="33:26" pos:end="33:28">':'</literal></expr></argument>)</argument_list></call> <operator pos:start="33:31" pos:end="33:31">&lt;</operator> <call pos:start="33:33" pos:end="33:49"><name pos:start="33:33" pos:end="33:38">strchr</name><argument_list pos:start="33:39" pos:end="33:49">(<argument pos:start="33:40" pos:end="33:43"><expr pos:start="33:40" pos:end="33:43"><name pos:start="33:40" pos:end="33:43">args</name></expr></argument>, <argument pos:start="33:46" pos:end="33:48"><expr pos:start="33:46" pos:end="33:48"><literal type="char" pos:start="33:46" pos:end="33:48">'='</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:52" pos:end="83:9">{<block_content pos:start="37:13" pos:end="81:26">

            <comment type="block" pos:start="35:13" pos:end="35:46">/* old w:h:flags=&lt;flags&gt; syntax */</comment>

            <decl_stmt pos:start="37:13" pos:end="37:41"><decl pos:start="37:13" pos:end="37:40"><type pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:16">char</name> <modifier pos:start="37:18" pos:end="37:18">*</modifier></type><name pos:start="37:19" pos:end="37:22">copy</name> <init pos:start="37:24" pos:end="37:40">= <expr pos:start="37:26" pos:end="37:40"><call pos:start="37:26" pos:end="37:40"><name pos:start="37:26" pos:end="37:34">av_strdup</name><argument_list pos:start="37:35" pos:end="37:40">(<argument pos:start="37:36" pos:end="37:39"><expr pos:start="37:36" pos:end="37:39"><name pos:start="37:36" pos:end="37:39">args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="39:13" pos:end="39:20"><decl pos:start="39:13" pos:end="39:19"><type pos:start="39:13" pos:end="39:18"><name pos:start="39:13" pos:end="39:16">char</name> <modifier pos:start="39:18" pos:end="39:18">*</modifier></type><name pos:start="39:19" pos:end="39:19">p</name></decl>;</decl_stmt>



            <expr_stmt pos:start="43:13" pos:end="47:51"><expr pos:start="43:13" pos:end="47:50"><call pos:start="43:13" pos:end="47:50"><name pos:start="43:13" pos:end="43:18">av_log</name><argument_list pos:start="43:19" pos:end="47:50">(<argument pos:start="43:20" pos:end="43:25"><expr pos:start="43:20" pos:end="43:25"><name pos:start="43:20" pos:end="43:25">filter</name></expr></argument>, <argument pos:start="43:28" pos:end="43:41"><expr pos:start="43:28" pos:end="43:41"><name pos:start="43:28" pos:end="43:41">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="43:44" pos:end="47:49"><expr pos:start="43:44" pos:end="47:49"><literal type="string" pos:start="43:44" pos:end="43:78">"The &lt;w&gt;:&lt;h&gt;:flags=&lt;flags&gt; option "</literal>

                   <literal type="string" pos:start="45:20" pos:end="45:73">"syntax is deprecated. Use either &lt;w&gt;:&lt;h&gt;:&lt;flags&gt; or "</literal>

                   <literal type="string" pos:start="47:20" pos:end="47:49">"w=&lt;w&gt;:h=&lt;h&gt;:flags=&lt;flags&gt;.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="51:13" pos:end="57:13"><if pos:start="51:13" pos:end="57:13">if <condition pos:start="51:16" pos:end="51:22">(<expr pos:start="51:17" pos:end="51:21"><operator pos:start="51:17" pos:end="51:17">!</operator><name pos:start="51:18" pos:end="51:21">copy</name></expr>)</condition> <block pos:start="51:24" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:26">

                <expr_stmt pos:start="53:17" pos:end="53:38"><expr pos:start="53:17" pos:end="53:37"><name pos:start="53:17" pos:end="53:19">ret</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:37"><name pos:start="53:23" pos:end="53:29">AVERROR</name><argument_list pos:start="53:30" pos:end="53:37">(<argument pos:start="53:31" pos:end="53:36"><expr pos:start="53:31" pos:end="53:36"><name pos:start="53:31" pos:end="53:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="55:17" pos:end="55:26">goto <name pos:start="55:22" pos:end="55:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="61:13" pos:end="61:35"><expr pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:13">p</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <call pos:start="61:17" pos:end="61:34"><name pos:start="61:17" pos:end="61:23">strrchr</name><argument_list pos:start="61:24" pos:end="61:34">(<argument pos:start="61:25" pos:end="61:28"><expr pos:start="61:25" pos:end="61:28"><name pos:start="61:25" pos:end="61:28">copy</name></expr></argument>, <argument pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><literal type="char" pos:start="61:31" pos:end="61:33">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="69:13"><if pos:start="63:13" pos:end="69:13">if <condition pos:start="63:16" pos:end="63:18">(<expr pos:start="63:17" pos:end="63:17"><name pos:start="63:17" pos:end="63:17">p</name></expr>)</condition> <block pos:start="63:20" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:69">

                <expr_stmt pos:start="65:17" pos:end="65:25"><expr pos:start="65:17" pos:end="65:24"><operator pos:start="65:17" pos:end="65:17">*</operator><name pos:start="65:18" pos:end="65:18">p</name><operator pos:start="65:19" pos:end="65:20">++</operator> <operator pos:start="65:22" pos:end="65:22">=</operator> <literal type="number" pos:start="65:24" pos:end="65:24">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:69"><expr pos:start="67:17" pos:end="67:68"><name pos:start="67:17" pos:end="67:19">ret</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:68"><name pos:start="67:23" pos:end="67:42">av_dict_parse_string</name><argument_list pos:start="67:43" pos:end="67:68">(<argument pos:start="67:44" pos:end="67:51"><expr pos:start="67:44" pos:end="67:51"><operator pos:start="67:44" pos:end="67:44">&amp;</operator><name pos:start="67:45" pos:end="67:51">options</name></expr></argument>, <argument pos:start="67:54" pos:end="67:54"><expr pos:start="67:54" pos:end="67:54"><name pos:start="67:54" pos:end="67:54">p</name></expr></argument>, <argument pos:start="67:57" pos:end="67:59"><expr pos:start="67:57" pos:end="67:59"><literal type="string" pos:start="67:57" pos:end="67:59">"="</literal></expr></argument>, <argument pos:start="67:62" pos:end="67:64"><expr pos:start="67:62" pos:end="67:64"><literal type="string" pos:start="67:62" pos:end="67:64">":"</literal></expr></argument>, <argument pos:start="67:67" pos:end="67:67"><expr pos:start="67:67" pos:end="67:67"><literal type="number" pos:start="67:67" pos:end="67:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="71:13" pos:end="73:62"><if pos:start="71:13" pos:end="73:62">if <condition pos:start="71:16" pos:end="71:25">(<expr pos:start="71:17" pos:end="71:24"><name pos:start="71:17" pos:end="71:19">ret</name> <operator pos:start="71:21" pos:end="71:22">&gt;=</operator> <literal type="number" pos:start="71:24" pos:end="71:24">0</literal></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:62"><block_content pos:start="73:17" pos:end="73:62">

                <expr_stmt pos:start="73:17" pos:end="73:62"><expr pos:start="73:17" pos:end="73:61"><name pos:start="73:17" pos:end="73:19">ret</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <call pos:start="73:23" pos:end="73:61"><name pos:start="73:23" pos:end="73:37">process_options</name><argument_list pos:start="73:38" pos:end="73:61">(<argument pos:start="73:39" pos:end="73:44"><expr pos:start="73:39" pos:end="73:44"><name pos:start="73:39" pos:end="73:44">filter</name></expr></argument>, <argument pos:start="73:47" pos:end="73:54"><expr pos:start="73:47" pos:end="73:54"><operator pos:start="73:47" pos:end="73:47">&amp;</operator><name pos:start="73:48" pos:end="73:54">options</name></expr></argument>, <argument pos:start="73:57" pos:end="73:60"><expr pos:start="73:57" pos:end="73:60"><name pos:start="73:57" pos:end="73:60">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:28"><expr pos:start="75:13" pos:end="75:27"><call pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:20">av_freep</name><argument_list pos:start="75:21" pos:end="75:27">(<argument pos:start="75:22" pos:end="75:26"><expr pos:start="75:22" pos:end="75:26"><operator pos:start="75:22" pos:end="75:22">&amp;</operator><name pos:start="75:23" pos:end="75:26">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="79:13" pos:end="81:26"><if pos:start="79:13" pos:end="81:26">if <condition pos:start="79:16" pos:end="79:24">(<expr pos:start="79:17" pos:end="79:23"><name pos:start="79:17" pos:end="79:19">ret</name> <operator pos:start="79:21" pos:end="79:21">&lt;</operator> <literal type="number" pos:start="79:23" pos:end="79:23">0</literal></expr>)</condition><block type="pseudo" pos:start="81:17" pos:end="81:26"><block_content pos:start="81:17" pos:end="81:26">

                <goto pos:start="81:17" pos:end="81:26">goto <name pos:start="81:22" pos:end="81:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="83:11" pos:end="223:9">else if <condition pos:start="83:19" pos:end="97:61">(<expr pos:start="83:20" pos:end="97:60"><operator pos:start="83:20" pos:end="83:20">!</operator><call pos:start="83:21" pos:end="83:58"><name pos:start="83:21" pos:end="83:26">strcmp</name><argument_list pos:start="83:27" pos:end="83:58">(<argument pos:start="83:28" pos:end="83:47"><expr pos:start="83:28" pos:end="83:47"><name pos:start="83:28" pos:end="83:47"><name pos:start="83:28" pos:end="83:33">filter</name><operator pos:start="83:34" pos:end="83:35">-&gt;</operator><name pos:start="83:36" pos:end="83:41">filter</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:47">name</name></name></expr></argument>, <argument pos:start="83:50" pos:end="83:57"><expr pos:start="83:50" pos:end="83:57"><literal type="string" pos:start="83:50" pos:end="83:57">"format"</literal></expr></argument>)</argument_list></call>     <operator pos:start="83:64" pos:end="83:65">||</operator>

                   <operator pos:start="85:20" pos:end="85:20">!</operator><call pos:start="85:21" pos:end="85:60"><name pos:start="85:21" pos:end="85:26">strcmp</name><argument_list pos:start="85:27" pos:end="85:60">(<argument pos:start="85:28" pos:end="85:47"><expr pos:start="85:28" pos:end="85:47"><name pos:start="85:28" pos:end="85:47"><name pos:start="85:28" pos:end="85:33">filter</name><operator pos:start="85:34" pos:end="85:35">-&gt;</operator><name pos:start="85:36" pos:end="85:41">filter</name><operator pos:start="85:42" pos:end="85:43">-&gt;</operator><name pos:start="85:44" pos:end="85:47">name</name></name></expr></argument>, <argument pos:start="85:50" pos:end="85:59"><expr pos:start="85:50" pos:end="85:59"><literal type="string" pos:start="85:50" pos:end="85:59">"noformat"</literal></expr></argument>)</argument_list></call>   <operator pos:start="85:64" pos:end="85:65">||</operator>

                   <operator pos:start="87:20" pos:end="87:20">!</operator><call pos:start="87:21" pos:end="87:58"><name pos:start="87:21" pos:end="87:26">strcmp</name><argument_list pos:start="87:27" pos:end="87:58">(<argument pos:start="87:28" pos:end="87:47"><expr pos:start="87:28" pos:end="87:47"><name pos:start="87:28" pos:end="87:47"><name pos:start="87:28" pos:end="87:33">filter</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:41">filter</name><operator pos:start="87:42" pos:end="87:43">-&gt;</operator><name pos:start="87:44" pos:end="87:47">name</name></name></expr></argument>, <argument pos:start="87:50" pos:end="87:57"><expr pos:start="87:50" pos:end="87:57"><literal type="string" pos:start="87:50" pos:end="87:57">"frei0r"</literal></expr></argument>)</argument_list></call>     <operator pos:start="87:64" pos:end="87:65">||</operator>

                   <operator pos:start="89:20" pos:end="89:20">!</operator><call pos:start="89:21" pos:end="89:62"><name pos:start="89:21" pos:end="89:26">strcmp</name><argument_list pos:start="89:27" pos:end="89:62">(<argument pos:start="89:28" pos:end="89:47"><expr pos:start="89:28" pos:end="89:47"><name pos:start="89:28" pos:end="89:47"><name pos:start="89:28" pos:end="89:33">filter</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:41">filter</name><operator pos:start="89:42" pos:end="89:43">-&gt;</operator><name pos:start="89:44" pos:end="89:47">name</name></name></expr></argument>, <argument pos:start="89:50" pos:end="89:61"><expr pos:start="89:50" pos:end="89:61"><literal type="string" pos:start="89:50" pos:end="89:61">"frei0r_src"</literal></expr></argument>)</argument_list></call> <operator pos:start="89:64" pos:end="89:65">||</operator>

                   <operator pos:start="91:20" pos:end="91:20">!</operator><call pos:start="91:21" pos:end="91:55"><name pos:start="91:21" pos:end="91:26">strcmp</name><argument_list pos:start="91:27" pos:end="91:55">(<argument pos:start="91:28" pos:end="91:47"><expr pos:start="91:28" pos:end="91:47"><name pos:start="91:28" pos:end="91:47"><name pos:start="91:28" pos:end="91:33">filter</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:41">filter</name><operator pos:start="91:42" pos:end="91:43">-&gt;</operator><name pos:start="91:44" pos:end="91:47">name</name></name></expr></argument>, <argument pos:start="91:50" pos:end="91:54"><expr pos:start="91:50" pos:end="91:54"><literal type="string" pos:start="91:50" pos:end="91:54">"ocv"</literal></expr></argument>)</argument_list></call>        <operator pos:start="91:64" pos:end="91:65">||</operator>

                   <operator pos:start="93:20" pos:end="93:20">!</operator><call pos:start="93:21" pos:end="93:55"><name pos:start="93:21" pos:end="93:26">strcmp</name><argument_list pos:start="93:27" pos:end="93:55">(<argument pos:start="93:28" pos:end="93:47"><expr pos:start="93:28" pos:end="93:47"><name pos:start="93:28" pos:end="93:47"><name pos:start="93:28" pos:end="93:33">filter</name><operator pos:start="93:34" pos:end="93:35">-&gt;</operator><name pos:start="93:36" pos:end="93:41">filter</name><operator pos:start="93:42" pos:end="93:43">-&gt;</operator><name pos:start="93:44" pos:end="93:47">name</name></name></expr></argument>, <argument pos:start="93:50" pos:end="93:54"><expr pos:start="93:50" pos:end="93:54"><literal type="string" pos:start="93:50" pos:end="93:54">"pan"</literal></expr></argument>)</argument_list></call>        <operator pos:start="93:64" pos:end="93:65">||</operator>

                   <operator pos:start="95:20" pos:end="95:20">!</operator><call pos:start="95:21" pos:end="95:54"><name pos:start="95:21" pos:end="95:26">strcmp</name><argument_list pos:start="95:27" pos:end="95:54">(<argument pos:start="95:28" pos:end="95:47"><expr pos:start="95:28" pos:end="95:47"><name pos:start="95:28" pos:end="95:47"><name pos:start="95:28" pos:end="95:33">filter</name><operator pos:start="95:34" pos:end="95:35">-&gt;</operator><name pos:start="95:36" pos:end="95:41">filter</name><operator pos:start="95:42" pos:end="95:43">-&gt;</operator><name pos:start="95:44" pos:end="95:47">name</name></name></expr></argument>, <argument pos:start="95:50" pos:end="95:53"><expr pos:start="95:50" pos:end="95:53"><literal type="string" pos:start="95:50" pos:end="95:53">"pp"</literal></expr></argument>)</argument_list></call>         <operator pos:start="95:64" pos:end="95:65">||</operator>

                   <operator pos:start="97:20" pos:end="97:20">!</operator><call pos:start="97:21" pos:end="97:60"><name pos:start="97:21" pos:end="97:26">strcmp</name><argument_list pos:start="97:27" pos:end="97:60">(<argument pos:start="97:28" pos:end="97:47"><expr pos:start="97:28" pos:end="97:47"><name pos:start="97:28" pos:end="97:47"><name pos:start="97:28" pos:end="97:33">filter</name><operator pos:start="97:34" pos:end="97:35">-&gt;</operator><name pos:start="97:36" pos:end="97:41">filter</name><operator pos:start="97:42" pos:end="97:43">-&gt;</operator><name pos:start="97:44" pos:end="97:47">name</name></name></expr></argument>, <argument pos:start="97:50" pos:end="97:59"><expr pos:start="97:50" pos:end="97:59"><literal type="string" pos:start="97:50" pos:end="97:59">"aevalsrc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:63" pos:end="223:9">{<block_content pos:start="103:13" pos:end="222:0">

            <comment type="block" pos:start="99:13" pos:end="101:40">/* a hack for compatibility with the old syntax

             * replace colons with |s */</comment>

            <decl_stmt pos:start="103:13" pos:end="103:41"><decl pos:start="103:13" pos:end="103:40"><type pos:start="103:13" pos:end="103:18"><name pos:start="103:13" pos:end="103:16">char</name> <modifier pos:start="103:18" pos:end="103:18">*</modifier></type><name pos:start="103:19" pos:end="103:22">copy</name> <init pos:start="103:24" pos:end="103:40">= <expr pos:start="103:26" pos:end="103:40"><call pos:start="103:26" pos:end="103:40"><name pos:start="103:26" pos:end="103:34">av_strdup</name><argument_list pos:start="103:35" pos:end="103:40">(<argument pos:start="103:36" pos:end="103:39"><expr pos:start="103:36" pos:end="103:39"><name pos:start="103:36" pos:end="103:39">args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="105:13" pos:end="105:30"><decl pos:start="105:13" pos:end="105:29"><type pos:start="105:13" pos:end="105:18"><name pos:start="105:13" pos:end="105:16">char</name> <modifier pos:start="105:18" pos:end="105:18">*</modifier></type><name pos:start="105:19" pos:end="105:19">p</name>    <init pos:start="105:24" pos:end="105:29">= <expr pos:start="105:26" pos:end="105:29"><name pos:start="105:26" pos:end="105:29">copy</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="107:13" pos:end="107:31"><decl pos:start="107:13" pos:end="107:30"><type pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:15">int</name></type> <name pos:start="107:17" pos:end="107:26">nb_leading</name> <init pos:start="107:28" pos:end="107:30">= <expr pos:start="107:30" pos:end="107:30"><literal type="number" pos:start="107:30" pos:end="107:30">0</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="107:33" pos:end="107:67">// number of leading colons to skip</comment>

            <decl_stmt pos:start="109:13" pos:end="109:31"><decl pos:start="109:13" pos:end="109:30"><type pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">int</name></type> <name pos:start="109:17" pos:end="109:26">deprecated</name> <init pos:start="109:28" pos:end="109:30">= <expr pos:start="109:30" pos:end="109:30"><literal type="number" pos:start="109:30" pos:end="109:30">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="113:22">(<expr pos:start="113:17" pos:end="113:21"><operator pos:start="113:17" pos:end="113:17">!</operator><name pos:start="113:18" pos:end="113:21">copy</name></expr>)</condition> <block pos:start="113:24" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:26">

                <expr_stmt pos:start="115:17" pos:end="115:38"><expr pos:start="115:17" pos:end="115:37"><name pos:start="115:17" pos:end="115:19">ret</name> <operator pos:start="115:21" pos:end="115:21">=</operator> <call pos:start="115:23" pos:end="115:37"><name pos:start="115:23" pos:end="115:29">AVERROR</name><argument_list pos:start="115:30" pos:end="115:37">(<argument pos:start="115:31" pos:end="115:36"><expr pos:start="115:31" pos:end="115:36"><name pos:start="115:31" pos:end="115:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="117:17" pos:end="117:26">goto <name pos:start="117:22" pos:end="117:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="123:13" pos:end="131:31"><if pos:start="123:13" pos:end="127:31">if <condition pos:start="123:16" pos:end="125:53">(<expr pos:start="123:17" pos:end="125:52"><operator pos:start="123:17" pos:end="123:17">!</operator><call pos:start="123:18" pos:end="123:55"><name pos:start="123:18" pos:end="123:23">strcmp</name><argument_list pos:start="123:24" pos:end="123:55">(<argument pos:start="123:25" pos:end="123:44"><expr pos:start="123:25" pos:end="123:44"><name pos:start="123:25" pos:end="123:44"><name pos:start="123:25" pos:end="123:30">filter</name><operator pos:start="123:31" pos:end="123:32">-&gt;</operator><name pos:start="123:33" pos:end="123:38">filter</name><operator pos:start="123:39" pos:end="123:40">-&gt;</operator><name pos:start="123:41" pos:end="123:44">name</name></name></expr></argument>, <argument pos:start="123:47" pos:end="123:54"><expr pos:start="123:47" pos:end="123:54"><literal type="string" pos:start="123:47" pos:end="123:54">"frei0r"</literal></expr></argument>)</argument_list></call> <operator pos:start="123:57" pos:end="123:58">||</operator>

                <operator pos:start="125:17" pos:end="125:17">!</operator><call pos:start="125:18" pos:end="125:52"><name pos:start="125:18" pos:end="125:23">strcmp</name><argument_list pos:start="125:24" pos:end="125:52">(<argument pos:start="125:25" pos:end="125:44"><expr pos:start="125:25" pos:end="125:44"><name pos:start="125:25" pos:end="125:44"><name pos:start="125:25" pos:end="125:30">filter</name><operator pos:start="125:31" pos:end="125:32">-&gt;</operator><name pos:start="125:33" pos:end="125:38">filter</name><operator pos:start="125:39" pos:end="125:40">-&gt;</operator><name pos:start="125:41" pos:end="125:44">name</name></name></expr></argument>, <argument pos:start="125:47" pos:end="125:51"><expr pos:start="125:47" pos:end="125:51"><literal type="string" pos:start="125:47" pos:end="125:51">"ocv"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="127:17" pos:end="127:31"><block_content pos:start="127:17" pos:end="127:31">

                <expr_stmt pos:start="127:17" pos:end="127:31"><expr pos:start="127:17" pos:end="127:30"><name pos:start="127:17" pos:end="127:26">nb_leading</name> <operator pos:start="127:28" pos:end="127:28">=</operator> <literal type="number" pos:start="127:30" pos:end="127:30">1</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="129:13" pos:end="131:31">else if <condition pos:start="129:21" pos:end="129:65">(<expr pos:start="129:22" pos:end="129:64"><operator pos:start="129:22" pos:end="129:22">!</operator><call pos:start="129:23" pos:end="129:64"><name pos:start="129:23" pos:end="129:28">strcmp</name><argument_list pos:start="129:29" pos:end="129:64">(<argument pos:start="129:30" pos:end="129:49"><expr pos:start="129:30" pos:end="129:49"><name pos:start="129:30" pos:end="129:49"><name pos:start="129:30" pos:end="129:35">filter</name><operator pos:start="129:36" pos:end="129:37">-&gt;</operator><name pos:start="129:38" pos:end="129:43">filter</name><operator pos:start="129:44" pos:end="129:45">-&gt;</operator><name pos:start="129:46" pos:end="129:49">name</name></name></expr></argument>, <argument pos:start="129:52" pos:end="129:63"><expr pos:start="129:52" pos:end="129:63"><literal type="string" pos:start="129:52" pos:end="129:63">"frei0r_src"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="131:31"><block_content pos:start="131:17" pos:end="131:31">

                <expr_stmt pos:start="131:17" pos:end="131:31"><expr pos:start="131:17" pos:end="131:30"><name pos:start="131:17" pos:end="131:26">nb_leading</name> <operator pos:start="131:28" pos:end="131:28">=</operator> <literal type="number" pos:start="131:30" pos:end="131:30">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <while pos:start="135:13" pos:end="149:13">while <condition pos:start="135:19" pos:end="135:32">(<expr pos:start="135:20" pos:end="135:31"><name pos:start="135:20" pos:end="135:29">nb_leading</name><operator pos:start="135:30" pos:end="135:31">--</operator></expr>)</condition> <block pos:start="135:34" pos:end="149:13">{<block_content pos:start="137:17" pos:end="147:20">

                <expr_stmt pos:start="137:17" pos:end="137:35"><expr pos:start="137:17" pos:end="137:34"><name pos:start="137:17" pos:end="137:17">p</name> <operator pos:start="137:19" pos:end="137:19">=</operator> <call pos:start="137:21" pos:end="137:34"><name pos:start="137:21" pos:end="137:26">strchr</name><argument_list pos:start="137:27" pos:end="137:34">(<argument pos:start="137:28" pos:end="137:28"><expr pos:start="137:28" pos:end="137:28"><name pos:start="137:28" pos:end="137:28">p</name></expr></argument>, <argument pos:start="137:31" pos:end="137:33"><expr pos:start="137:31" pos:end="137:33"><literal type="char" pos:start="137:31" pos:end="137:33">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="139:17" pos:end="145:17"><if pos:start="139:17" pos:end="145:17">if <condition pos:start="139:20" pos:end="139:23">(<expr pos:start="139:21" pos:end="139:22"><operator pos:start="139:21" pos:end="139:21">!</operator><name pos:start="139:22" pos:end="139:22">p</name></expr>)</condition> <block pos:start="139:25" pos:end="145:17">{<block_content pos:start="141:21" pos:end="143:26">

                    <expr_stmt pos:start="141:21" pos:end="141:44"><expr pos:start="141:21" pos:end="141:43"><name pos:start="141:21" pos:end="141:21">p</name> <operator pos:start="141:23" pos:end="141:23">=</operator> <name pos:start="141:25" pos:end="141:28">copy</name> <operator pos:start="141:30" pos:end="141:30">+</operator> <call pos:start="141:32" pos:end="141:43"><name pos:start="141:32" pos:end="141:37">strlen</name><argument_list pos:start="141:38" pos:end="141:43">(<argument pos:start="141:39" pos:end="141:42"><expr pos:start="141:39" pos:end="141:42"><name pos:start="141:39" pos:end="141:42">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="143:21" pos:end="143:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:20"><expr pos:start="147:17" pos:end="147:19"><name pos:start="147:17" pos:end="147:17">p</name><operator pos:start="147:18" pos:end="147:19">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>



            <expr_stmt pos:start="153:13" pos:end="153:48"><expr pos:start="153:13" pos:end="153:47"><name pos:start="153:13" pos:end="153:22">deprecated</name> <operator pos:start="153:24" pos:end="153:24">=</operator> <call pos:start="153:26" pos:end="153:39"><name pos:start="153:26" pos:end="153:31">strchr</name><argument_list pos:start="153:32" pos:end="153:39">(<argument pos:start="153:33" pos:end="153:33"><expr pos:start="153:33" pos:end="153:33"><name pos:start="153:33" pos:end="153:33">p</name></expr></argument>, <argument pos:start="153:36" pos:end="153:38"><expr pos:start="153:36" pos:end="153:38"><literal type="char" pos:start="153:36" pos:end="153:38">':'</literal></expr></argument>)</argument_list></call> <operator pos:start="153:41" pos:end="153:42">!=</operator> <name pos:start="153:44" pos:end="153:47">NULL</name></expr>;</expr_stmt>



            <if_stmt pos:start="157:13" pos:end="197:27"><if pos:start="157:13" pos:end="193:13">if <condition pos:start="157:16" pos:end="157:58">(<expr pos:start="157:17" pos:end="157:57"><operator pos:start="157:17" pos:end="157:17">!</operator><call pos:start="157:18" pos:end="157:57"><name pos:start="157:18" pos:end="157:23">strcmp</name><argument_list pos:start="157:24" pos:end="157:57">(<argument pos:start="157:25" pos:end="157:44"><expr pos:start="157:25" pos:end="157:44"><name pos:start="157:25" pos:end="157:44"><name pos:start="157:25" pos:end="157:30">filter</name><operator pos:start="157:31" pos:end="157:32">-&gt;</operator><name pos:start="157:33" pos:end="157:38">filter</name><operator pos:start="157:39" pos:end="157:40">-&gt;</operator><name pos:start="157:41" pos:end="157:44">name</name></name></expr></argument>, <argument pos:start="157:47" pos:end="157:56"><expr pos:start="157:47" pos:end="157:56"><literal type="string" pos:start="157:47" pos:end="157:56">"aevalsrc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:60" pos:end="193:13">{<block_content pos:start="159:17" pos:end="191:17">

                <expr_stmt pos:start="159:17" pos:end="159:31"><expr pos:start="159:17" pos:end="159:30"><name pos:start="159:17" pos:end="159:26">deprecated</name> <operator pos:start="159:28" pos:end="159:28">=</operator> <literal type="number" pos:start="159:30" pos:end="159:30">0</literal></expr>;</expr_stmt>

                <while pos:start="161:17" pos:end="183:17">while <condition pos:start="161:23" pos:end="161:59">(<expr pos:start="161:24" pos:end="161:58"><operator pos:start="161:24" pos:end="161:24">(</operator><name pos:start="161:25" pos:end="161:25">p</name> <operator pos:start="161:27" pos:end="161:27">=</operator> <call pos:start="161:29" pos:end="161:42"><name pos:start="161:29" pos:end="161:34">strchr</name><argument_list pos:start="161:35" pos:end="161:42">(<argument pos:start="161:36" pos:end="161:36"><expr pos:start="161:36" pos:end="161:36"><name pos:start="161:36" pos:end="161:36">p</name></expr></argument>, <argument pos:start="161:39" pos:end="161:41"><expr pos:start="161:39" pos:end="161:41"><literal type="char" pos:start="161:39" pos:end="161:41">':'</literal></expr></argument>)</argument_list></call><operator pos:start="161:43" pos:end="161:43">)</operator> <operator pos:start="161:45" pos:end="161:46">&amp;&amp;</operator> <name pos:start="161:48" pos:end="161:51"><name pos:start="161:48" pos:end="161:48">p</name><index pos:start="161:49" pos:end="161:51">[<expr pos:start="161:50" pos:end="161:50"><literal type="number" pos:start="161:50" pos:end="161:50">1</literal></expr>]</index></name> <operator pos:start="161:53" pos:end="161:54">!=</operator> <literal type="char" pos:start="161:56" pos:end="161:58">':'</literal></expr>)</condition> <block pos:start="161:61" pos:end="183:17">{<block_content pos:start="163:21" pos:end="181:31">

                    <decl_stmt pos:start="163:21" pos:end="163:58"><decl pos:start="163:21" pos:end="163:57"><type pos:start="163:21" pos:end="163:32"><specifier pos:start="163:21" pos:end="163:25">const</specifier> <name pos:start="163:27" pos:end="163:30">char</name> <modifier pos:start="163:32" pos:end="163:32">*</modifier></type><name pos:start="163:33" pos:end="163:36">epos</name> <init pos:start="163:38" pos:end="163:57">= <expr pos:start="163:40" pos:end="163:57"><call pos:start="163:40" pos:end="163:57"><name pos:start="163:40" pos:end="163:45">strchr</name><argument_list pos:start="163:46" pos:end="163:57">(<argument pos:start="163:47" pos:end="163:51"><expr pos:start="163:47" pos:end="163:51"><name pos:start="163:47" pos:end="163:47">p</name> <operator pos:start="163:49" pos:end="163:49">+</operator> <literal type="number" pos:start="163:51" pos:end="163:51">1</literal></expr></argument>, <argument pos:start="163:54" pos:end="163:56"><expr pos:start="163:54" pos:end="163:56"><literal type="char" pos:start="163:54" pos:end="163:56">'='</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="165:21" pos:end="165:58"><decl pos:start="165:21" pos:end="165:57"><type pos:start="165:21" pos:end="165:32"><specifier pos:start="165:21" pos:end="165:25">const</specifier> <name pos:start="165:27" pos:end="165:30">char</name> <modifier pos:start="165:32" pos:end="165:32">*</modifier></type><name pos:start="165:33" pos:end="165:36">spos</name> <init pos:start="165:38" pos:end="165:57">= <expr pos:start="165:40" pos:end="165:57"><call pos:start="165:40" pos:end="165:57"><name pos:start="165:40" pos:end="165:45">strchr</name><argument_list pos:start="165:46" pos:end="165:57">(<argument pos:start="165:47" pos:end="165:51"><expr pos:start="165:47" pos:end="165:51"><name pos:start="165:47" pos:end="165:47">p</name> <operator pos:start="165:49" pos:end="165:49">+</operator> <literal type="number" pos:start="165:51" pos:end="165:51">1</literal></expr></argument>, <argument pos:start="165:54" pos:end="165:56"><expr pos:start="165:54" pos:end="165:56"><literal type="char" pos:start="165:54" pos:end="165:56">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="167:21" pos:end="167:81"><decl pos:start="167:21" pos:end="167:80"><type pos:start="167:21" pos:end="167:29"><specifier pos:start="167:21" pos:end="167:25">const</specifier> <name pos:start="167:27" pos:end="167:29">int</name></type> <name pos:start="167:31" pos:end="167:47">next_token_is_opt</name> <init pos:start="167:49" pos:end="167:80">= <expr pos:start="167:51" pos:end="167:80"><name pos:start="167:51" pos:end="167:54">epos</name> <operator pos:start="167:56" pos:end="167:57">&amp;&amp;</operator> <operator pos:start="167:59" pos:end="167:59">(</operator><operator pos:start="167:60" pos:end="167:60">!</operator><name pos:start="167:61" pos:end="167:64">spos</name> <operator pos:start="167:66" pos:end="167:67">||</operator> <name pos:start="167:69" pos:end="167:72">epos</name> <operator pos:start="167:74" pos:end="167:74">&lt;</operator> <name pos:start="167:76" pos:end="167:79">spos</name><operator pos:start="167:80" pos:end="167:80">)</operator></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="169:21" pos:end="175:21"><if pos:start="169:21" pos:end="175:21">if <condition pos:start="169:24" pos:end="169:42">(<expr pos:start="169:25" pos:end="169:41"><name pos:start="169:25" pos:end="169:41">next_token_is_opt</name></expr>)</condition> <block pos:start="169:44" pos:end="175:21">{<block_content pos:start="171:25" pos:end="173:30">

                        <expr_stmt pos:start="171:25" pos:end="171:28"><expr pos:start="171:25" pos:end="171:27"><name pos:start="171:25" pos:end="171:25">p</name><operator pos:start="171:26" pos:end="171:27">++</operator></expr>;</expr_stmt>

                        <break pos:start="173:25" pos:end="173:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="177:21" pos:end="177:88">/* next token does not contain a '=', assume a channel expression */</comment>

                    <expr_stmt pos:start="179:21" pos:end="179:35"><expr pos:start="179:21" pos:end="179:34"><name pos:start="179:21" pos:end="179:30">deprecated</name> <operator pos:start="179:32" pos:end="179:32">=</operator> <literal type="number" pos:start="179:34" pos:end="179:34">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="181:21" pos:end="181:31"><expr pos:start="181:21" pos:end="181:30"><operator pos:start="181:21" pos:end="181:21">*</operator><name pos:start="181:22" pos:end="181:22">p</name><operator pos:start="181:23" pos:end="181:24">++</operator> <operator pos:start="181:26" pos:end="181:26">=</operator> <literal type="char" pos:start="181:28" pos:end="181:30">'|'</literal></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="185:17" pos:end="191:17"><if pos:start="185:17" pos:end="191:17">if <condition pos:start="185:20" pos:end="185:35">(<expr pos:start="185:21" pos:end="185:34"><name pos:start="185:21" pos:end="185:21">p</name> <operator pos:start="185:23" pos:end="185:24">&amp;&amp;</operator> <operator pos:start="185:26" pos:end="185:26">*</operator><name pos:start="185:27" pos:end="185:27">p</name> <operator pos:start="185:29" pos:end="185:30">==</operator> <literal type="char" pos:start="185:32" pos:end="185:34">':'</literal></expr>)</condition> <block pos:start="185:37" pos:end="191:17">{<block_content pos:start="187:21" pos:end="189:49"> <comment type="line" pos:start="185:39" pos:end="185:62">// double sep '::' found</comment>

                    <expr_stmt pos:start="187:21" pos:end="187:35"><expr pos:start="187:21" pos:end="187:34"><name pos:start="187:21" pos:end="187:30">deprecated</name> <operator pos:start="187:32" pos:end="187:32">=</operator> <literal type="number" pos:start="187:34" pos:end="187:34">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="189:21" pos:end="189:49"><expr pos:start="189:21" pos:end="189:48"><call pos:start="189:21" pos:end="189:48"><name pos:start="189:21" pos:end="189:27">memmove</name><argument_list pos:start="189:28" pos:end="189:48">(<argument pos:start="189:29" pos:end="189:29"><expr pos:start="189:29" pos:end="189:29"><name pos:start="189:29" pos:end="189:29">p</name></expr></argument>, <argument pos:start="189:32" pos:end="189:36"><expr pos:start="189:32" pos:end="189:36"><name pos:start="189:32" pos:end="189:32">p</name> <operator pos:start="189:34" pos:end="189:34">+</operator> <literal type="number" pos:start="189:36" pos:end="189:36">1</literal></expr></argument>, <argument pos:start="189:39" pos:end="189:47"><expr pos:start="189:39" pos:end="189:47"><call pos:start="189:39" pos:end="189:47"><name pos:start="189:39" pos:end="189:44">strlen</name><argument_list pos:start="189:45" pos:end="189:47">(<argument pos:start="189:46" pos:end="189:46"><expr pos:start="189:46" pos:end="189:46"><name pos:start="189:46" pos:end="189:46">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="193:15" pos:end="197:27">else<block type="pseudo" pos:start="195:13" pos:end="197:27"><block_content pos:start="195:13" pos:end="197:27">

            <while pos:start="195:13" pos:end="197:27">while <condition pos:start="195:19" pos:end="195:40">(<expr pos:start="195:20" pos:end="195:39"><operator pos:start="195:20" pos:end="195:20">(</operator><name pos:start="195:21" pos:end="195:21">p</name> <operator pos:start="195:23" pos:end="195:23">=</operator> <call pos:start="195:25" pos:end="195:38"><name pos:start="195:25" pos:end="195:30">strchr</name><argument_list pos:start="195:31" pos:end="195:38">(<argument pos:start="195:32" pos:end="195:32"><expr pos:start="195:32" pos:end="195:32"><name pos:start="195:32" pos:end="195:32">p</name></expr></argument>, <argument pos:start="195:35" pos:end="195:37"><expr pos:start="195:35" pos:end="195:37"><literal type="char" pos:start="195:35" pos:end="195:37">':'</literal></expr></argument>)</argument_list></call><operator pos:start="195:39" pos:end="195:39">)</operator></expr>)</condition><block type="pseudo" pos:start="197:17" pos:end="197:27"><block_content pos:start="197:17" pos:end="197:27">

                <expr_stmt pos:start="197:17" pos:end="197:27"><expr pos:start="197:17" pos:end="197:26"><operator pos:start="197:17" pos:end="197:17">*</operator><name pos:start="197:18" pos:end="197:18">p</name><operator pos:start="197:19" pos:end="197:20">++</operator> <operator pos:start="197:22" pos:end="197:22">=</operator> <literal type="char" pos:start="197:24" pos:end="197:26">'|'</literal></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>



            <if_stmt pos:start="201:13" pos:end="205:60"><if pos:start="201:13" pos:end="205:60">if <condition pos:start="201:16" pos:end="201:27">(<expr pos:start="201:17" pos:end="201:26"><name pos:start="201:17" pos:end="201:26">deprecated</name></expr>)</condition><block type="pseudo" pos:start="203:17" pos:end="205:60"><block_content pos:start="203:17" pos:end="205:60">

                <expr_stmt pos:start="203:17" pos:end="205:60"><expr pos:start="203:17" pos:end="205:59"><call pos:start="203:17" pos:end="205:59"><name pos:start="203:17" pos:end="203:22">av_log</name><argument_list pos:start="203:23" pos:end="205:59">(<argument pos:start="203:24" pos:end="203:29"><expr pos:start="203:24" pos:end="203:29"><name pos:start="203:24" pos:end="203:29">filter</name></expr></argument>, <argument pos:start="203:32" pos:end="203:45"><expr pos:start="203:32" pos:end="203:45"><name pos:start="203:32" pos:end="203:45">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="203:48" pos:end="205:58"><expr pos:start="203:48" pos:end="205:58"><literal type="string" pos:start="203:48" pos:end="203:80">"This syntax is deprecated. Use "</literal>

                       <literal type="string" pos:start="205:24" pos:end="205:58">"'|' to separate the list items.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="209:13" pos:end="209:82"><expr pos:start="209:13" pos:end="209:81"><call pos:start="209:13" pos:end="209:81"><name pos:start="209:13" pos:end="209:18">av_log</name><argument_list pos:start="209:19" pos:end="209:81">(<argument pos:start="209:20" pos:end="209:25"><expr pos:start="209:20" pos:end="209:25"><name pos:start="209:20" pos:end="209:25">filter</name></expr></argument>, <argument pos:start="209:28" pos:end="209:39"><expr pos:start="209:28" pos:end="209:39"><name pos:start="209:28" pos:end="209:39">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="209:42" pos:end="209:74"><expr pos:start="209:42" pos:end="209:74"><literal type="string" pos:start="209:42" pos:end="209:74">"compat: called with args=[%s]\n"</literal></expr></argument>, <argument pos:start="209:77" pos:end="209:80"><expr pos:start="209:77" pos:end="209:80"><name pos:start="209:77" pos:end="209:80">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:58"><expr pos:start="211:13" pos:end="211:57"><name pos:start="211:13" pos:end="211:15">ret</name> <operator pos:start="211:17" pos:end="211:17">=</operator> <call pos:start="211:19" pos:end="211:57"><name pos:start="211:19" pos:end="211:33">process_options</name><argument_list pos:start="211:34" pos:end="211:57">(<argument pos:start="211:35" pos:end="211:40"><expr pos:start="211:35" pos:end="211:40"><name pos:start="211:35" pos:end="211:40">filter</name></expr></argument>, <argument pos:start="211:43" pos:end="211:50"><expr pos:start="211:43" pos:end="211:50"><operator pos:start="211:43" pos:end="211:43">&amp;</operator><name pos:start="211:44" pos:end="211:50">options</name></expr></argument>, <argument pos:start="211:53" pos:end="211:56"><expr pos:start="211:53" pos:end="211:56"><name pos:start="211:53" pos:end="211:56">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:28"><expr pos:start="213:13" pos:end="213:27"><call pos:start="213:13" pos:end="213:27"><name pos:start="213:13" pos:end="213:20">av_freep</name><argument_list pos:start="213:21" pos:end="213:27">(<argument pos:start="213:22" pos:end="213:26"><expr pos:start="213:22" pos:end="213:26"><operator pos:start="213:22" pos:end="213:22">&amp;</operator><name pos:start="213:23" pos:end="213:26">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="217:13" pos:end="222:0"><if pos:start="217:13" pos:end="222:0">if <condition pos:start="217:16" pos:end="217:24">(<expr pos:start="217:17" pos:end="217:23"><name pos:start="217:17" pos:end="217:19">ret</name> <operator pos:start="217:21" pos:end="217:21">&lt;</operator> <literal type="number" pos:start="217:23" pos:end="217:23">0</literal></expr>)</condition><block type="pseudo" pos:start="219:17" pos:end="222:0"><block_content pos:start="219:17" pos:end="222:0">

                <goto pos:start="219:17" pos:end="222:0">goto <name pos:start="219:22" pos:end="219:25">fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="221:1" pos:end="221:6">#<cpp:directive pos:start="221:2" pos:end="221:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="223:11" pos:end="261:9">else <block pos:start="223:16" pos:end="261:9">{<block_content pos:start="227:13" pos:end="259:26">

<cpp:if pos:start="225:1" pos:end="225:20">#<cpp:directive pos:start="225:2" pos:end="225:3">if</cpp:directive> <expr pos:start="225:5" pos:end="225:20"><name pos:start="225:5" pos:end="225:20">CONFIG_MP_FILTER</name></expr></cpp:if>

            <if_stmt pos:start="227:13" pos:end="255:58"><if pos:start="227:13" pos:end="251:13">if <condition pos:start="227:16" pos:end="227:52">(<expr pos:start="227:17" pos:end="227:51"><operator pos:start="227:17" pos:end="227:17">!</operator><call pos:start="227:18" pos:end="227:51"><name pos:start="227:18" pos:end="227:23">strcmp</name><argument_list pos:start="227:24" pos:end="227:51">(<argument pos:start="227:25" pos:end="227:44"><expr pos:start="227:25" pos:end="227:44"><name pos:start="227:25" pos:end="227:44"><name pos:start="227:25" pos:end="227:30">filter</name><operator pos:start="227:31" pos:end="227:32">-&gt;</operator><name pos:start="227:33" pos:end="227:38">filter</name><operator pos:start="227:39" pos:end="227:40">-&gt;</operator><name pos:start="227:41" pos:end="227:44">name</name></name></expr></argument>, <argument pos:start="227:47" pos:end="227:50"><expr pos:start="227:47" pos:end="227:50"><literal type="string" pos:start="227:47" pos:end="227:50">"mp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="227:54" pos:end="251:13">{<block_content pos:start="229:17" pos:end="249:33">

                <decl_stmt pos:start="229:17" pos:end="229:30"><decl pos:start="229:17" pos:end="229:29"><type pos:start="229:17" pos:end="229:22"><name pos:start="229:17" pos:end="229:20">char</name> <modifier pos:start="229:22" pos:end="229:22">*</modifier></type><name pos:start="229:23" pos:end="229:29">escaped</name></decl>;</decl_stmt>



                <if_stmt pos:start="233:17" pos:end="235:30"><if pos:start="233:17" pos:end="235:30">if <condition pos:start="233:20" pos:end="233:49">(<expr pos:start="233:21" pos:end="233:48"><operator pos:start="233:21" pos:end="233:21">!</operator><call pos:start="233:22" pos:end="233:48"><name pos:start="233:22" pos:end="233:28">strncmp</name><argument_list pos:start="233:29" pos:end="233:48">(<argument pos:start="233:30" pos:end="233:33"><expr pos:start="233:30" pos:end="233:33"><name pos:start="233:30" pos:end="233:33">args</name></expr></argument>, <argument pos:start="233:36" pos:end="233:44"><expr pos:start="233:36" pos:end="233:44"><literal type="string" pos:start="233:36" pos:end="233:44">"filter="</literal></expr></argument>, <argument pos:start="233:47" pos:end="233:47"><expr pos:start="233:47" pos:end="233:47"><literal type="number" pos:start="233:47" pos:end="233:47">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="235:21" pos:end="235:30"><block_content pos:start="235:21" pos:end="235:30">

                    <expr_stmt pos:start="235:21" pos:end="235:30"><expr pos:start="235:21" pos:end="235:29"><name pos:start="235:21" pos:end="235:24">args</name> <operator pos:start="235:26" pos:end="235:27">+=</operator> <literal type="number" pos:start="235:29" pos:end="235:29">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:83"><expr pos:start="237:17" pos:end="237:82"><name pos:start="237:17" pos:end="237:19">ret</name> <operator pos:start="237:21" pos:end="237:21">=</operator> <call pos:start="237:23" pos:end="237:82"><name pos:start="237:23" pos:end="237:31">av_escape</name><argument_list pos:start="237:32" pos:end="237:82">(<argument pos:start="237:33" pos:end="237:40"><expr pos:start="237:33" pos:end="237:40"><operator pos:start="237:33" pos:end="237:33">&amp;</operator><name pos:start="237:34" pos:end="237:40">escaped</name></expr></argument>, <argument pos:start="237:43" pos:end="237:46"><expr pos:start="237:43" pos:end="237:46"><name pos:start="237:43" pos:end="237:46">args</name></expr></argument>, <argument pos:start="237:49" pos:end="237:52"><expr pos:start="237:49" pos:end="237:52"><literal type="string" pos:start="237:49" pos:end="237:52">":="</literal></expr></argument>, <argument pos:start="237:55" pos:end="237:78"><expr pos:start="237:55" pos:end="237:78"><name pos:start="237:55" pos:end="237:78">AV_ESCAPE_MODE_BACKSLASH</name></expr></argument>, <argument pos:start="237:81" pos:end="237:81"><expr pos:start="237:81" pos:end="237:81"><literal type="number" pos:start="237:81" pos:end="237:81">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="239:17" pos:end="245:17"><if pos:start="239:17" pos:end="245:17">if <condition pos:start="239:20" pos:end="239:28">(<expr pos:start="239:21" pos:end="239:27"><name pos:start="239:21" pos:end="239:23">ret</name> <operator pos:start="239:25" pos:end="239:25">&lt;</operator> <literal type="number" pos:start="239:27" pos:end="239:27">0</literal></expr>)</condition> <block pos:start="239:30" pos:end="245:17">{<block_content pos:start="241:21" pos:end="243:30">

                    <expr_stmt pos:start="241:21" pos:end="241:102"><expr pos:start="241:21" pos:end="241:101"><call pos:start="241:21" pos:end="241:101"><name pos:start="241:21" pos:end="241:26">av_log</name><argument_list pos:start="241:27" pos:end="241:101">(<argument pos:start="241:28" pos:end="241:33"><expr pos:start="241:28" pos:end="241:33"><name pos:start="241:28" pos:end="241:33">filter</name></expr></argument>, <argument pos:start="241:36" pos:end="241:47"><expr pos:start="241:36" pos:end="241:47"><name pos:start="241:36" pos:end="241:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="241:50" pos:end="241:94"><expr pos:start="241:50" pos:end="241:94"><literal type="string" pos:start="241:50" pos:end="241:94">"Unable to escape MPlayer filters arg '%s'\n"</literal></expr></argument>, <argument pos:start="241:97" pos:end="241:100"><expr pos:start="241:97" pos:end="241:100"><name pos:start="241:97" pos:end="241:100">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="243:21" pos:end="243:30">goto <name pos:start="243:26" pos:end="243:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:65"><expr pos:start="247:17" pos:end="247:64"><name pos:start="247:17" pos:end="247:19">ret</name> <operator pos:start="247:21" pos:end="247:21">=</operator> <call pos:start="247:23" pos:end="247:64"><name pos:start="247:23" pos:end="247:37">process_options</name><argument_list pos:start="247:38" pos:end="247:64">(<argument pos:start="247:39" pos:end="247:44"><expr pos:start="247:39" pos:end="247:44"><name pos:start="247:39" pos:end="247:44">filter</name></expr></argument>, <argument pos:start="247:47" pos:end="247:54"><expr pos:start="247:47" pos:end="247:54"><operator pos:start="247:47" pos:end="247:47">&amp;</operator><name pos:start="247:48" pos:end="247:54">options</name></expr></argument>, <argument pos:start="247:57" pos:end="247:63"><expr pos:start="247:57" pos:end="247:63"><name pos:start="247:57" pos:end="247:63">escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:33"><expr pos:start="249:17" pos:end="249:32"><call pos:start="249:17" pos:end="249:32"><name pos:start="249:17" pos:end="249:23">av_free</name><argument_list pos:start="249:24" pos:end="249:32">(<argument pos:start="249:25" pos:end="249:31"><expr pos:start="249:25" pos:end="249:31"><name pos:start="249:25" pos:end="249:31">escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="251:15" pos:end="255:58">else<block type="pseudo" pos:start="255:13" pos:end="255:58"><block_content pos:start="255:13" pos:end="255:58">

<cpp:endif pos:start="253:1" pos:end="253:6">#<cpp:directive pos:start="253:2" pos:end="253:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="255:13" pos:end="255:58"><expr pos:start="255:13" pos:end="255:57"><name pos:start="255:13" pos:end="255:15">ret</name> <operator pos:start="255:17" pos:end="255:17">=</operator> <call pos:start="255:19" pos:end="255:57"><name pos:start="255:19" pos:end="255:33">process_options</name><argument_list pos:start="255:34" pos:end="255:57">(<argument pos:start="255:35" pos:end="255:40"><expr pos:start="255:35" pos:end="255:40"><name pos:start="255:35" pos:end="255:40">filter</name></expr></argument>, <argument pos:start="255:43" pos:end="255:50"><expr pos:start="255:43" pos:end="255:50"><operator pos:start="255:43" pos:end="255:43">&amp;</operator><name pos:start="255:44" pos:end="255:50">options</name></expr></argument>, <argument pos:start="255:53" pos:end="255:56"><expr pos:start="255:53" pos:end="255:56"><name pos:start="255:53" pos:end="255:56">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="257:13" pos:end="259:26"><if pos:start="257:13" pos:end="259:26">if <condition pos:start="257:16" pos:end="257:24">(<expr pos:start="257:17" pos:end="257:23"><name pos:start="257:17" pos:end="257:19">ret</name> <operator pos:start="257:21" pos:end="257:21">&lt;</operator> <literal type="number" pos:start="257:23" pos:end="257:23">0</literal></expr>)</condition><block type="pseudo" pos:start="259:17" pos:end="259:26"><block_content pos:start="259:17" pos:end="259:26">

                <goto pos:start="259:17" pos:end="259:26">goto <name pos:start="259:22" pos:end="259:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="267:5" pos:end="279:5"><if pos:start="267:5" pos:end="279:5">if <condition pos:start="267:8" pos:end="267:35">(<expr pos:start="267:9" pos:end="267:34"><name pos:start="267:9" pos:end="267:34"><name pos:start="267:9" pos:end="267:14">filter</name><operator pos:start="267:15" pos:end="267:16">-&gt;</operator><name pos:start="267:17" pos:end="267:22">filter</name><operator pos:start="267:23" pos:end="267:24">-&gt;</operator><name pos:start="267:25" pos:end="267:34">priv_class</name></name></expr>)</condition> <block pos:start="267:37" pos:end="279:5">{<block_content pos:start="269:9" pos:end="277:9">

        <expr_stmt pos:start="269:9" pos:end="269:54"><expr pos:start="269:9" pos:end="269:53"><name pos:start="269:9" pos:end="269:11">ret</name> <operator pos:start="269:13" pos:end="269:13">=</operator> <call pos:start="269:15" pos:end="269:53"><name pos:start="269:15" pos:end="269:29">av_opt_set_dict</name><argument_list pos:start="269:30" pos:end="269:53">(<argument pos:start="269:31" pos:end="269:42"><expr pos:start="269:31" pos:end="269:42"><name pos:start="269:31" pos:end="269:42"><name pos:start="269:31" pos:end="269:36">filter</name><operator pos:start="269:37" pos:end="269:38">-&gt;</operator><name pos:start="269:39" pos:end="269:42">priv</name></name></expr></argument>, <argument pos:start="269:45" pos:end="269:52"><expr pos:start="269:45" pos:end="269:52"><operator pos:start="269:45" pos:end="269:45">&amp;</operator><name pos:start="269:46" pos:end="269:52">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="271:9" pos:end="277:9"><if pos:start="271:9" pos:end="277:9">if <condition pos:start="271:12" pos:end="271:20">(<expr pos:start="271:13" pos:end="271:19"><name pos:start="271:13" pos:end="271:15">ret</name> <operator pos:start="271:17" pos:end="271:17">&lt;</operator> <literal type="number" pos:start="271:19" pos:end="271:19">0</literal></expr>)</condition> <block pos:start="271:22" pos:end="277:9">{<block_content pos:start="273:13" pos:end="275:22">

            <expr_stmt pos:start="273:13" pos:end="273:84"><expr pos:start="273:13" pos:end="273:83"><call pos:start="273:13" pos:end="273:83"><name pos:start="273:13" pos:end="273:18">av_log</name><argument_list pos:start="273:19" pos:end="273:83">(<argument pos:start="273:20" pos:end="273:25"><expr pos:start="273:20" pos:end="273:25"><name pos:start="273:20" pos:end="273:25">filter</name></expr></argument>, <argument pos:start="273:28" pos:end="273:39"><expr pos:start="273:28" pos:end="273:39"><name pos:start="273:28" pos:end="273:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="273:42" pos:end="273:82"><expr pos:start="273:42" pos:end="273:82"><literal type="string" pos:start="273:42" pos:end="273:82">"Error applying options to the filter.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="275:13" pos:end="275:22">goto <name pos:start="275:18" pos:end="275:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="283:5" pos:end="293:58"><if pos:start="283:5" pos:end="285:58">if <condition pos:start="283:8" pos:end="283:36">(<expr pos:start="283:9" pos:end="283:35"><name pos:start="283:9" pos:end="283:35"><name pos:start="283:9" pos:end="283:14">filter</name><operator pos:start="283:15" pos:end="283:16">-&gt;</operator><name pos:start="283:17" pos:end="283:22">filter</name><operator pos:start="283:23" pos:end="283:24">-&gt;</operator><name pos:start="283:25" pos:end="283:35">init_opaque</name></name></expr>)</condition><block type="pseudo" pos:start="285:9" pos:end="285:58"><block_content pos:start="285:9" pos:end="285:58">

        <expr_stmt pos:start="285:9" pos:end="285:58"><expr pos:start="285:9" pos:end="285:57"><name pos:start="285:9" pos:end="285:11">ret</name> <operator pos:start="285:13" pos:end="285:13">=</operator> <call pos:start="285:15" pos:end="285:57"><name pos:start="285:15" pos:end="285:41"><name pos:start="285:15" pos:end="285:20">filter</name><operator pos:start="285:21" pos:end="285:22">-&gt;</operator><name pos:start="285:23" pos:end="285:28">filter</name><operator pos:start="285:29" pos:end="285:30">-&gt;</operator><name pos:start="285:31" pos:end="285:41">init_opaque</name></name><argument_list pos:start="285:42" pos:end="285:57">(<argument pos:start="285:43" pos:end="285:48"><expr pos:start="285:43" pos:end="285:48"><name pos:start="285:43" pos:end="285:48">filter</name></expr></argument>, <argument pos:start="285:51" pos:end="285:56"><expr pos:start="285:51" pos:end="285:56"><name pos:start="285:51" pos:end="285:56">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="287:5" pos:end="289:43">else if <condition pos:start="287:13" pos:end="287:34">(<expr pos:start="287:14" pos:end="287:33"><name pos:start="287:14" pos:end="287:33"><name pos:start="287:14" pos:end="287:19">filter</name><operator pos:start="287:20" pos:end="287:21">-&gt;</operator><name pos:start="287:22" pos:end="287:27">filter</name><operator pos:start="287:28" pos:end="287:29">-&gt;</operator><name pos:start="287:30" pos:end="287:33">init</name></name></expr>)</condition><block type="pseudo" pos:start="289:9" pos:end="289:43"><block_content pos:start="289:9" pos:end="289:43">

        <expr_stmt pos:start="289:9" pos:end="289:43"><expr pos:start="289:9" pos:end="289:42"><name pos:start="289:9" pos:end="289:11">ret</name> <operator pos:start="289:13" pos:end="289:13">=</operator> <call pos:start="289:15" pos:end="289:42"><name pos:start="289:15" pos:end="289:34"><name pos:start="289:15" pos:end="289:20">filter</name><operator pos:start="289:21" pos:end="289:22">-&gt;</operator><name pos:start="289:23" pos:end="289:28">filter</name><operator pos:start="289:29" pos:end="289:30">-&gt;</operator><name pos:start="289:31" pos:end="289:34">init</name></name><argument_list pos:start="289:35" pos:end="289:42">(<argument pos:start="289:36" pos:end="289:41"><expr pos:start="289:36" pos:end="289:41"><name pos:start="289:36" pos:end="289:41">filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="291:5" pos:end="293:58">else if <condition pos:start="291:13" pos:end="291:39">(<expr pos:start="291:14" pos:end="291:38"><name pos:start="291:14" pos:end="291:38"><name pos:start="291:14" pos:end="291:19">filter</name><operator pos:start="291:20" pos:end="291:21">-&gt;</operator><name pos:start="291:22" pos:end="291:27">filter</name><operator pos:start="291:28" pos:end="291:29">-&gt;</operator><name pos:start="291:30" pos:end="291:38">init_dict</name></name></expr>)</condition><block type="pseudo" pos:start="293:9" pos:end="293:58"><block_content pos:start="293:9" pos:end="293:58">

        <expr_stmt pos:start="293:9" pos:end="293:58"><expr pos:start="293:9" pos:end="293:57"><name pos:start="293:9" pos:end="293:11">ret</name> <operator pos:start="293:13" pos:end="293:13">=</operator> <call pos:start="293:15" pos:end="293:57"><name pos:start="293:15" pos:end="293:39"><name pos:start="293:15" pos:end="293:20">filter</name><operator pos:start="293:21" pos:end="293:22">-&gt;</operator><name pos:start="293:23" pos:end="293:28">filter</name><operator pos:start="293:29" pos:end="293:30">-&gt;</operator><name pos:start="293:31" pos:end="293:39">init_dict</name></name><argument_list pos:start="293:40" pos:end="293:57">(<argument pos:start="293:41" pos:end="293:46"><expr pos:start="293:41" pos:end="293:46"><name pos:start="293:41" pos:end="293:46">filter</name></expr></argument>, <argument pos:start="293:49" pos:end="293:56"><expr pos:start="293:49" pos:end="293:56"><operator pos:start="293:49" pos:end="293:49">&amp;</operator><name pos:start="293:50" pos:end="293:56">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="295:5" pos:end="297:18"><if pos:start="295:5" pos:end="297:18">if <condition pos:start="295:8" pos:end="295:16">(<expr pos:start="295:9" pos:end="295:15"><name pos:start="295:9" pos:end="295:11">ret</name> <operator pos:start="295:13" pos:end="295:13">&lt;</operator> <literal type="number" pos:start="295:15" pos:end="295:15">0</literal></expr>)</condition><block type="pseudo" pos:start="297:9" pos:end="297:18"><block_content pos:start="297:9" pos:end="297:18">

        <goto pos:start="297:9" pos:end="297:18">goto <name pos:start="297:14" pos:end="297:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="301:5" pos:end="309:5"><if pos:start="301:5" pos:end="309:5">if <condition pos:start="301:8" pos:end="301:68">(<expr pos:start="301:9" pos:end="301:67"><operator pos:start="301:9" pos:end="301:9">(</operator><name pos:start="301:10" pos:end="301:10">e</name> <operator pos:start="301:12" pos:end="301:12">=</operator> <call pos:start="301:14" pos:end="301:66"><name pos:start="301:14" pos:end="301:24">av_dict_get</name><argument_list pos:start="301:25" pos:end="301:66">(<argument pos:start="301:26" pos:end="301:32"><expr pos:start="301:26" pos:end="301:32"><name pos:start="301:26" pos:end="301:32">options</name></expr></argument>, <argument pos:start="301:35" pos:end="301:36"><expr pos:start="301:35" pos:end="301:36"><literal type="string" pos:start="301:35" pos:end="301:36">""</literal></expr></argument>, <argument pos:start="301:39" pos:end="301:42"><expr pos:start="301:39" pos:end="301:42"><name pos:start="301:39" pos:end="301:42">NULL</name></expr></argument>, <argument pos:start="301:45" pos:end="301:65"><expr pos:start="301:45" pos:end="301:65"><name pos:start="301:45" pos:end="301:65">AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator pos:start="301:67" pos:end="301:67">)</operator></expr>)</condition> <block pos:start="301:70" pos:end="309:5">{<block_content pos:start="303:9" pos:end="307:18">

        <expr_stmt pos:start="303:9" pos:end="303:70"><expr pos:start="303:9" pos:end="303:69"><call pos:start="303:9" pos:end="303:69"><name pos:start="303:9" pos:end="303:14">av_log</name><argument_list pos:start="303:15" pos:end="303:69">(<argument pos:start="303:16" pos:end="303:21"><expr pos:start="303:16" pos:end="303:21"><name pos:start="303:16" pos:end="303:21">filter</name></expr></argument>, <argument pos:start="303:24" pos:end="303:35"><expr pos:start="303:24" pos:end="303:35"><name pos:start="303:24" pos:end="303:35">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="303:38" pos:end="303:60"><expr pos:start="303:38" pos:end="303:60"><literal type="string" pos:start="303:38" pos:end="303:60">"No such option: %s.\n"</literal></expr></argument>, <argument pos:start="303:63" pos:end="303:68"><expr pos:start="303:63" pos:end="303:68"><name pos:start="303:63" pos:end="303:68"><name pos:start="303:63" pos:end="303:63">e</name><operator pos:start="303:64" pos:end="303:65">-&gt;</operator><name pos:start="303:66" pos:end="303:68">key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:39"><expr pos:start="305:9" pos:end="305:38"><name pos:start="305:9" pos:end="305:11">ret</name> <operator pos:start="305:13" pos:end="305:13">=</operator> <name pos:start="305:15" pos:end="305:38">AVERROR_OPTION_NOT_FOUND</name></expr>;</expr_stmt>

        <goto pos:start="307:9" pos:end="307:18">goto <name pos:start="307:14" pos:end="307:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="313:1" pos:end="313:5"><name pos:start="313:1" pos:end="313:4">fail</name>:</label>

    <expr_stmt pos:start="315:5" pos:end="315:27"><expr pos:start="315:5" pos:end="315:26"><call pos:start="315:5" pos:end="315:26"><name pos:start="315:5" pos:end="315:16">av_dict_free</name><argument_list pos:start="315:17" pos:end="315:26">(<argument pos:start="315:18" pos:end="315:25"><expr pos:start="315:18" pos:end="315:25"><operator pos:start="315:18" pos:end="315:18">&amp;</operator><name pos:start="315:19" pos:end="315:25">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="319:5" pos:end="319:15">return <expr pos:start="319:12" pos:end="319:14"><name pos:start="319:12" pos:end="319:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
