<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14579.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">checkpoint</name><parameter_list pos:start="1:23" pos:end="1:28">(<parameter pos:start="1:24" pos:end="1:27"><decl pos:start="1:24" pos:end="1:27"><type pos:start="1:24" pos:end="1:27"><name pos:start="1:24" pos:end="1:27">void</name></type></decl></parameter>)</parameter_list> <block pos:start="1:30" pos:end="39:1">{<block_content pos:start="3:5" pos:end="38:0">

    <expr_stmt pos:start="3:5" pos:end="3:66"><expr pos:start="3:5" pos:end="3:65"><call pos:start="3:5" pos:end="3:65"><name pos:start="3:5" pos:end="3:10">assert</name><argument_list pos:start="3:11" pos:end="3:65">(<argument pos:start="3:12" pos:end="3:64"><expr pos:start="3:12" pos:end="3:64"><operator pos:start="3:12" pos:end="3:12">(</operator><operator pos:start="3:13" pos:end="3:13">(</operator><name pos:start="3:14" pos:end="3:22">mapping_t</name><operator pos:start="3:23" pos:end="3:23">*</operator><operator pos:start="3:24" pos:end="3:24">)</operator><call pos:start="3:25" pos:end="3:53"><name pos:start="3:25" pos:end="3:33">array_get</name><argument_list pos:start="3:34" pos:end="3:53">(<argument pos:start="3:35" pos:end="3:49"><expr pos:start="3:35" pos:end="3:49"><operator pos:start="3:35" pos:end="3:35">&amp;</operator><operator pos:start="3:36" pos:end="3:36">(</operator><name pos:start="3:37" pos:end="3:48"><name pos:start="3:37" pos:end="3:39">vvv</name><operator pos:start="3:40" pos:end="3:41">-&gt;</operator><name pos:start="3:42" pos:end="3:48">mapping</name></name><operator pos:start="3:49" pos:end="3:49">)</operator></expr></argument>, <argument pos:start="3:52" pos:end="3:52"><expr pos:start="3:52" pos:end="3:52"><literal type="number" pos:start="3:52" pos:end="3:52">0</literal></expr></argument>)</argument_list></call><operator pos:start="3:54" pos:end="3:54">)</operator><operator pos:start="3:55" pos:end="3:56">-&gt;</operator><name pos:start="3:57" pos:end="3:59">end</name> <operator pos:start="3:61" pos:end="3:62">==</operator> <literal type="number" pos:start="3:64" pos:end="3:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="5:5" pos:end="5:16"><expr pos:start="5:5" pos:end="5:15"><call pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:10">check1</name><argument_list pos:start="5:11" pos:end="5:15">(<argument pos:start="5:12" pos:end="5:14"><expr pos:start="5:12" pos:end="5:14"><name pos:start="5:12" pos:end="5:14">vvv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:16"><expr pos:start="7:5" pos:end="7:15"><call pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:10">check2</name><argument_list pos:start="7:11" pos:end="7:15">(<argument pos:start="7:12" pos:end="7:14"><expr pos:start="7:12" pos:end="7:14"><name pos:start="7:12" pos:end="7:14">vvv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="38:0"><expr pos:start="9:5" pos:end="9:101"><call pos:start="9:5" pos:end="9:101"><name pos:start="9:5" pos:end="9:10">assert</name><argument_list pos:start="9:11" pos:end="9:101">(<argument pos:start="9:12" pos:end="9:100"><expr pos:start="9:12" pos:end="9:100"><operator pos:start="9:12" pos:end="9:12">!</operator><name pos:start="9:13" pos:end="9:32"><name pos:start="9:13" pos:end="9:15">vvv</name><operator pos:start="9:16" pos:end="9:17">-&gt;</operator><name pos:start="9:18" pos:end="9:32">current_mapping</name></name> <operator pos:start="9:34" pos:end="9:35">||</operator> <name pos:start="9:37" pos:end="9:51"><name pos:start="9:37" pos:end="9:39">vvv</name><operator pos:start="9:40" pos:end="9:41">-&gt;</operator><name pos:start="9:42" pos:end="9:51">current_fd</name></name> <operator pos:start="9:53" pos:end="9:54">||</operator> <operator pos:start="9:56" pos:end="9:56">(</operator><name pos:start="9:57" pos:end="9:82"><name pos:start="9:57" pos:end="9:59">vvv</name><operator pos:start="9:60" pos:end="9:61">-&gt;</operator><name pos:start="9:62" pos:end="9:76">current_mapping</name><operator pos:start="9:77" pos:end="9:78">-&gt;</operator><name pos:start="9:79" pos:end="9:82">mode</name></name> <operator pos:start="9:84" pos:end="9:84">&amp;</operator> <name pos:start="9:86" pos:end="9:99">MODE_DIRECTORY</name><operator pos:start="9:100" pos:end="9:100">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="11:1" pos:end="11:5">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:5"><literal type="number" pos:start="11:5" pos:end="11:5">0</literal></expr></cpp:if>

    if (((direntry_t*)vvv-&gt;directory.pointer)[1].attributes != 0xf)

        fprintf(stderr, "Nonono!\n");

    mapping_t* mapping;

    direntry_t* direntry;

    assert(vvv-&gt;mapping.size &gt;= vvv-&gt;mapping.item_size * vvv-&gt;mapping.next);

    assert(vvv-&gt;directory.size &gt;= vvv-&gt;directory.item_size * vvv-&gt;directory.next);

    if (vvv-&gt;mapping.next&lt;47)

        return;

    assert((mapping = array_get(&amp;(vvv-&gt;mapping), 47)));

    assert(mapping-&gt;dir_index &lt; vvv-&gt;directory.next);

    direntry = array_get(&amp;(vvv-&gt;directory), mapping-&gt;dir_index);

    assert(!memcmp(direntry-&gt;name, "USB     H  ", 11) || direntry-&gt;name[0]==0);

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
