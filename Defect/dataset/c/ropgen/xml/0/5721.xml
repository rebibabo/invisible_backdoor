<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5721.c" pos:tabs="8"><function pos:start="1:1" pos:end="301:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">cook_decode_init</name><parameter_list pos:start="1:28" pos:end="1:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:44"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="301:1">{<block_content pos:start="5:5" pos:end="299:13">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">COOKextradata</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">e</name> <init pos:start="5:22" pos:end="5:56">= <expr pos:start="5:24" pos:end="5:56"><operator pos:start="5:24" pos:end="5:24">(</operator><name pos:start="5:25" pos:end="5:37">COOKextradata</name> <operator pos:start="5:39" pos:end="5:39">*</operator><operator pos:start="5:40" pos:end="5:40">)</operator><name pos:start="5:41" pos:end="5:56"><name pos:start="5:41" pos:end="5:45">avctx</name><operator pos:start="5:46" pos:end="5:47">-&gt;</operator><name pos:start="5:48" pos:end="5:56">extradata</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">COOKContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">q</name> <init pos:start="7:20" pos:end="7:37">= <expr pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:26">avctx</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:37">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:52">/* Take care of the codec specific extradata. */</comment>

    <if_stmt pos:start="13:5" pos:end="45:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:35">(<expr pos:start="13:9" pos:end="13:34"><name pos:start="13:9" pos:end="13:29"><name pos:start="13:9" pos:end="13:13">avctx</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:29">extradata_size</name></name> <operator pos:start="13:31" pos:end="13:32">&lt;=</operator> <literal type="number" pos:start="13:34" pos:end="13:34">0</literal></expr>)</condition> <block pos:start="13:37" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:68"><expr pos:start="15:9" pos:end="15:67"><call pos:start="15:9" pos:end="15:67"><name pos:start="15:9" pos:end="15:14">av_log</name><argument_list pos:start="15:15" pos:end="15:67">(<argument pos:start="15:16" pos:end="15:20"><expr pos:start="15:16" pos:end="15:20"><name pos:start="15:16" pos:end="15:20">avctx</name></expr></argument>,<argument pos:start="15:22" pos:end="15:33"><expr pos:start="15:22" pos:end="15:33"><name pos:start="15:22" pos:end="15:33">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="15:35" pos:end="15:66"><expr pos:start="15:35" pos:end="15:66"><literal type="string" pos:start="15:35" pos:end="15:66">"Necessary extradata missing!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="45:5">else <block pos:start="19:12" pos:end="45:5">{<block_content pos:start="25:9" pos:end="43:9">

        <comment type="block" pos:start="21:9" pos:end="23:73">/* 8 for mono, 16 for stereo, ? for multichannel

           Swap to right endianness so we don't need to care later on. */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:81"><expr pos:start="25:9" pos:end="25:80"><call pos:start="25:9" pos:end="25:80"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:80">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>,<argument pos:start="25:22" pos:end="25:33"><expr pos:start="25:22" pos:end="25:33"><name pos:start="25:22" pos:end="25:33">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="25:35" pos:end="25:57"><expr pos:start="25:35" pos:end="25:57"><literal type="string" pos:start="25:35" pos:end="25:57">"codecdata_length=%d\n"</literal></expr></argument>,<argument pos:start="25:59" pos:end="25:79"><expr pos:start="25:59" pos:end="25:79"><name pos:start="25:59" pos:end="25:79"><name pos:start="25:59" pos:end="25:63">avctx</name><operator pos:start="25:64" pos:end="25:65">-&gt;</operator><name pos:start="25:66" pos:end="25:79">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="35:9"><if pos:start="27:9" pos:end="35:9">if <condition pos:start="27:12" pos:end="27:39">(<expr pos:start="27:13" pos:end="27:38"><name pos:start="27:13" pos:end="27:33"><name pos:start="27:13" pos:end="27:17">avctx</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:33">extradata_size</name></name> <operator pos:start="27:35" pos:end="27:36">&gt;=</operator> <literal type="number" pos:start="27:38" pos:end="27:38">8</literal></expr>)</condition><block pos:start="27:40" pos:end="35:9">{<block_content pos:start="29:13" pos:end="33:48">

            <expr_stmt pos:start="29:13" pos:end="29:54"><expr pos:start="29:13" pos:end="29:53"><name pos:start="29:13" pos:end="29:26"><name pos:start="29:13" pos:end="29:13">e</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:26">cookversion</name></name> <operator pos:start="29:28" pos:end="29:28">=</operator> <call pos:start="29:30" pos:end="29:53"><name pos:start="29:30" pos:end="29:37">be2me_32</name><argument_list pos:start="29:38" pos:end="29:53">(<argument pos:start="29:39" pos:end="29:52"><expr pos:start="29:39" pos:end="29:52"><name pos:start="29:39" pos:end="29:52"><name pos:start="29:39" pos:end="29:39">e</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:52">cookversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:66"><expr pos:start="31:13" pos:end="31:65"><name pos:start="31:13" pos:end="31:32"><name pos:start="31:13" pos:end="31:13">e</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:32">samples_per_frame</name></name> <operator pos:start="31:34" pos:end="31:34">=</operator> <call pos:start="31:36" pos:end="31:65"><name pos:start="31:36" pos:end="31:43">be2me_16</name><argument_list pos:start="31:44" pos:end="31:65">(<argument pos:start="31:45" pos:end="31:64"><expr pos:start="31:45" pos:end="31:64"><name pos:start="31:45" pos:end="31:64"><name pos:start="31:45" pos:end="31:45">e</name><operator pos:start="31:46" pos:end="31:47">-&gt;</operator><name pos:start="31:48" pos:end="31:64">samples_per_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:48"><expr pos:start="33:13" pos:end="33:47"><name pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:13">e</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:23">subbands</name></name> <operator pos:start="33:25" pos:end="33:25">=</operator> <call pos:start="33:27" pos:end="33:47"><name pos:start="33:27" pos:end="33:34">be2me_16</name><argument_list pos:start="33:35" pos:end="33:47">(<argument pos:start="33:36" pos:end="33:46"><expr pos:start="33:36" pos:end="33:46"><name pos:start="33:36" pos:end="33:46"><name pos:start="33:36" pos:end="33:36">e</name><operator pos:start="33:37" pos:end="33:38">-&gt;</operator><name pos:start="33:39" pos:end="33:46">subbands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:40">(<expr pos:start="37:13" pos:end="37:39"><name pos:start="37:13" pos:end="37:33"><name pos:start="37:13" pos:end="37:17">avctx</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:33">extradata_size</name></name> <operator pos:start="37:35" pos:end="37:36">&gt;=</operator> <literal type="number" pos:start="37:38" pos:end="37:39">16</literal></expr>)</condition><block pos:start="37:41" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:54">

            <expr_stmt pos:start="39:13" pos:end="39:64"><expr pos:start="39:13" pos:end="39:63"><name pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:13">e</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:31">js_subband_start</name></name> <operator pos:start="39:33" pos:end="39:33">=</operator> <call pos:start="39:35" pos:end="39:63"><name pos:start="39:35" pos:end="39:42">be2me_16</name><argument_list pos:start="39:43" pos:end="39:63">(<argument pos:start="39:44" pos:end="39:62"><expr pos:start="39:44" pos:end="39:62"><name pos:start="39:44" pos:end="39:62"><name pos:start="39:44" pos:end="39:44">e</name><operator pos:start="39:45" pos:end="39:46">-&gt;</operator><name pos:start="39:47" pos:end="39:62">js_subband_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:54"><expr pos:start="41:13" pos:end="41:53"><name pos:start="41:13" pos:end="41:26"><name pos:start="41:13" pos:end="41:13">e</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:26">js_vlc_bits</name></name> <operator pos:start="41:28" pos:end="41:28">=</operator> <call pos:start="41:30" pos:end="41:53"><name pos:start="41:30" pos:end="41:37">be2me_16</name><argument_list pos:start="41:38" pos:end="41:53">(<argument pos:start="41:39" pos:end="41:52"><expr pos:start="41:39" pos:end="41:52"><name pos:start="41:39" pos:end="41:52"><name pos:start="41:39" pos:end="41:39">e</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:52">js_vlc_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:59">/* Take data from the AVCodecContext (RM container). */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:40"><expr pos:start="51:5" pos:end="51:39"><name pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:5">q</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:18">sample_rate</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <name pos:start="51:22" pos:end="51:39"><name pos:start="51:22" pos:end="51:26">avctx</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:39">sample_rate</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:37"><expr pos:start="53:5" pos:end="53:36"><name pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:5">q</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:18">nb_channels</name></name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:36"><name pos:start="53:22" pos:end="53:26">avctx</name><operator pos:start="53:27" pos:end="53:28">-&gt;</operator><name pos:start="53:29" pos:end="53:36">channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:34"><expr pos:start="55:5" pos:end="55:33"><name pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:5">q</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:15">bit_rate</name></name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:33"><name pos:start="55:19" pos:end="55:23">avctx</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:33">bit_rate</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:27">/* Initialize state. */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:24"><expr pos:start="61:5" pos:end="61:23"><name pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:5">q</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:19">random_state</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <literal type="number" pos:start="61:23" pos:end="61:23">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:49">/* Initialize extradata related variables. */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:67"><expr pos:start="67:5" pos:end="67:66"><name pos:start="67:5" pos:end="67:26"><name pos:start="67:5" pos:end="67:5">q</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:26">samples_per_channel</name></name> <operator pos:start="67:28" pos:end="67:28">=</operator> <name pos:start="67:30" pos:end="67:49"><name pos:start="67:30" pos:end="67:30">e</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:49">samples_per_frame</name></name> <operator pos:start="67:51" pos:end="67:51">/</operator> <name pos:start="67:53" pos:end="67:66"><name pos:start="67:53" pos:end="67:53">q</name><operator pos:start="67:54" pos:end="67:55">-&gt;</operator><name pos:start="67:56" pos:end="67:66">nb_channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:48"><expr pos:start="69:5" pos:end="69:47"><name pos:start="69:5" pos:end="69:24"><name pos:start="69:5" pos:end="69:5">q</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:24">samples_per_frame</name></name> <operator pos:start="69:26" pos:end="69:26">=</operator> <name pos:start="69:28" pos:end="69:47"><name pos:start="69:28" pos:end="69:28">e</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:47">samples_per_frame</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:30"><expr pos:start="71:5" pos:end="71:29"><name pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:5">q</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:15">subbands</name></name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:29"><name pos:start="71:19" pos:end="71:19">e</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:29">subbands</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:51"><expr pos:start="73:5" pos:end="73:50"><name pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:5">q</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:25">bits_per_subpacket</name></name> <operator pos:start="73:27" pos:end="73:27">=</operator> <name pos:start="73:29" pos:end="73:46"><name pos:start="73:29" pos:end="73:33">avctx</name><operator pos:start="73:34" pos:end="73:35">-&gt;</operator><name pos:start="73:36" pos:end="73:46">block_align</name></name> <operator pos:start="73:48" pos:end="73:48">*</operator> <literal type="number" pos:start="73:50" pos:end="73:50">8</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:41">/* Initialize default data states. */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:28"><expr pos:start="79:5" pos:end="79:27"><name pos:start="79:5" pos:end="79:23"><name pos:start="79:5" pos:end="79:5">q</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:23">js_subband_start</name></name> <operator pos:start="79:25" pos:end="79:25">=</operator> <literal type="number" pos:start="79:27" pos:end="79:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:31"><expr pos:start="81:5" pos:end="81:30"><name pos:start="81:5" pos:end="81:26"><name pos:start="81:5" pos:end="81:5">q</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:26">log2_numvector_size</name></name> <operator pos:start="81:28" pos:end="81:28">=</operator> <literal type="number" pos:start="81:30" pos:end="81:30">5</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:36"><expr pos:start="83:5" pos:end="83:35"><name pos:start="83:5" pos:end="83:21"><name pos:start="83:5" pos:end="83:5">q</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:21">total_subbands</name></name> <operator pos:start="83:23" pos:end="83:23">=</operator> <name pos:start="83:25" pos:end="83:35"><name pos:start="83:25" pos:end="83:25">q</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:35">subbands</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:48">/* Initialize version-dependent variables */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:67"><expr pos:start="89:5" pos:end="89:66"><call pos:start="89:5" pos:end="89:66"><name pos:start="89:5" pos:end="89:10">av_log</name><argument_list pos:start="89:11" pos:end="89:66">(<argument pos:start="89:12" pos:end="89:15"><expr pos:start="89:12" pos:end="89:15"><name pos:start="89:12" pos:end="89:15">NULL</name></expr></argument>,<argument pos:start="89:17" pos:end="89:28"><expr pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:28">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="89:30" pos:end="89:50"><expr pos:start="89:30" pos:end="89:50"><literal type="string" pos:start="89:30" pos:end="89:50">"e-&gt;cookversion=%x\n"</literal></expr></argument>,<argument pos:start="89:52" pos:end="89:65"><expr pos:start="89:52" pos:end="89:65"><name pos:start="89:52" pos:end="89:65"><name pos:start="89:52" pos:end="89:52">e</name><operator pos:start="89:53" pos:end="89:54">-&gt;</operator><name pos:start="89:55" pos:end="89:65">cookversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:24"><expr pos:start="91:5" pos:end="91:23"><name pos:start="91:5" pos:end="91:19"><name pos:start="91:5" pos:end="91:5">q</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:19">joint_stereo</name></name> <operator pos:start="91:21" pos:end="91:21">=</operator> <literal type="number" pos:start="91:23" pos:end="91:23">0</literal></expr>;</expr_stmt>

    <switch pos:start="93:5" pos:end="175:5">switch <condition pos:start="93:12" pos:end="93:27">(<expr pos:start="93:13" pos:end="93:26"><name pos:start="93:13" pos:end="93:26"><name pos:start="93:13" pos:end="93:13">e</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:26">cookversion</name></name></expr>)</condition> <block pos:start="93:29" pos:end="175:5">{<block_content pos:start="95:9" pos:end="173:18">

        <case pos:start="95:9" pos:end="95:18">case <expr pos:start="95:14" pos:end="95:17"><name pos:start="95:14" pos:end="95:17">MONO</name></expr>:</case>

            <if_stmt pos:start="97:13" pos:end="103:13"><if pos:start="97:13" pos:end="103:13">if <condition pos:start="97:16" pos:end="97:36">(<expr pos:start="97:17" pos:end="97:35"><name pos:start="97:17" pos:end="97:30"><name pos:start="97:17" pos:end="97:17">q</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:30">nb_channels</name></name> <operator pos:start="97:32" pos:end="97:33">!=</operator> <literal type="number" pos:start="97:35" pos:end="97:35">1</literal></expr>)</condition> <block pos:start="97:38" pos:end="103:13">{<block_content pos:start="99:17" pos:end="101:26">

                <expr_stmt pos:start="99:17" pos:end="99:87"><expr pos:start="99:17" pos:end="99:86"><call pos:start="99:17" pos:end="99:86"><name pos:start="99:17" pos:end="99:22">av_log</name><argument_list pos:start="99:23" pos:end="99:86">(<argument pos:start="99:24" pos:end="99:28"><expr pos:start="99:24" pos:end="99:28"><name pos:start="99:24" pos:end="99:28">avctx</name></expr></argument>,<argument pos:start="99:30" pos:end="99:41"><expr pos:start="99:30" pos:end="99:41"><name pos:start="99:30" pos:end="99:41">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="99:43" pos:end="99:85"><expr pos:start="99:43" pos:end="99:85"><literal type="string" pos:start="99:43" pos:end="99:85">"Container channels != 1, report sample!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="101:17" pos:end="101:26">return <expr pos:start="101:24" pos:end="101:25"><operator pos:start="101:24" pos:end="101:24">-</operator><literal type="number" pos:start="101:25" pos:end="101:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:48"><expr pos:start="105:13" pos:end="105:47"><call pos:start="105:13" pos:end="105:47"><name pos:start="105:13" pos:end="105:18">av_log</name><argument_list pos:start="105:19" pos:end="105:47">(<argument pos:start="105:20" pos:end="105:24"><expr pos:start="105:20" pos:end="105:24"><name pos:start="105:20" pos:end="105:24">avctx</name></expr></argument>,<argument pos:start="105:26" pos:end="105:37"><expr pos:start="105:26" pos:end="105:37"><name pos:start="105:26" pos:end="105:37">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="105:39" pos:end="105:46"><expr pos:start="105:39" pos:end="105:46"><literal type="string" pos:start="105:39" pos:end="105:46">"MONO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <case pos:start="109:9" pos:end="109:20">case <expr pos:start="109:14" pos:end="109:19"><name pos:start="109:14" pos:end="109:19">STEREO</name></expr>:</case>

            <if_stmt pos:start="111:13" pos:end="115:13"><if pos:start="111:13" pos:end="115:13">if <condition pos:start="111:16" pos:end="111:36">(<expr pos:start="111:17" pos:end="111:35"><name pos:start="111:17" pos:end="111:30"><name pos:start="111:17" pos:end="111:17">q</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:30">nb_channels</name></name> <operator pos:start="111:32" pos:end="111:33">!=</operator> <literal type="number" pos:start="111:35" pos:end="111:35">1</literal></expr>)</condition> <block pos:start="111:38" pos:end="115:13">{<block_content pos:start="113:17" pos:end="113:64">

                <expr_stmt pos:start="113:17" pos:end="113:64"><expr pos:start="113:17" pos:end="113:63"><name pos:start="113:17" pos:end="113:37"><name pos:start="113:17" pos:end="113:17">q</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:37">bits_per_subpacket</name></name> <operator pos:start="113:39" pos:end="113:39">=</operator> <name pos:start="113:41" pos:end="113:61"><name pos:start="113:41" pos:end="113:41">q</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:61">bits_per_subpacket</name></name><operator pos:start="113:62" pos:end="113:62">/</operator><literal type="number" pos:start="113:63" pos:end="113:63">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:50"><expr pos:start="117:13" pos:end="117:49"><call pos:start="117:13" pos:end="117:49"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="117:49">(<argument pos:start="117:20" pos:end="117:24"><expr pos:start="117:20" pos:end="117:24"><name pos:start="117:20" pos:end="117:24">avctx</name></expr></argument>,<argument pos:start="117:26" pos:end="117:37"><expr pos:start="117:26" pos:end="117:37"><name pos:start="117:26" pos:end="117:37">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="117:39" pos:end="117:48"><expr pos:start="117:39" pos:end="117:48"><literal type="string" pos:start="117:39" pos:end="117:48">"STEREO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="119:13" pos:end="119:18">break;</break>

        <case pos:start="121:9" pos:end="121:26">case <expr pos:start="121:14" pos:end="121:25"><name pos:start="121:14" pos:end="121:25">JOINT_STEREO</name></expr>:</case>

            <if_stmt pos:start="123:13" pos:end="129:13"><if pos:start="123:13" pos:end="129:13">if <condition pos:start="123:16" pos:end="123:36">(<expr pos:start="123:17" pos:end="123:35"><name pos:start="123:17" pos:end="123:30"><name pos:start="123:17" pos:end="123:17">q</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:30">nb_channels</name></name> <operator pos:start="123:32" pos:end="123:33">!=</operator> <literal type="number" pos:start="123:35" pos:end="123:35">2</literal></expr>)</condition> <block pos:start="123:38" pos:end="129:13">{<block_content pos:start="125:17" pos:end="127:26">

                <expr_stmt pos:start="125:17" pos:end="125:87"><expr pos:start="125:17" pos:end="125:86"><call pos:start="125:17" pos:end="125:86"><name pos:start="125:17" pos:end="125:22">av_log</name><argument_list pos:start="125:23" pos:end="125:86">(<argument pos:start="125:24" pos:end="125:28"><expr pos:start="125:24" pos:end="125:28"><name pos:start="125:24" pos:end="125:28">avctx</name></expr></argument>,<argument pos:start="125:30" pos:end="125:41"><expr pos:start="125:30" pos:end="125:41"><name pos:start="125:30" pos:end="125:41">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="125:43" pos:end="125:85"><expr pos:start="125:43" pos:end="125:85"><literal type="string" pos:start="125:43" pos:end="125:85">"Container channels != 2, report sample!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="127:17" pos:end="127:26">return <expr pos:start="127:24" pos:end="127:25"><operator pos:start="127:24" pos:end="127:24">-</operator><literal type="number" pos:start="127:25" pos:end="127:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:56"><expr pos:start="131:13" pos:end="131:55"><call pos:start="131:13" pos:end="131:55"><name pos:start="131:13" pos:end="131:18">av_log</name><argument_list pos:start="131:19" pos:end="131:55">(<argument pos:start="131:20" pos:end="131:24"><expr pos:start="131:20" pos:end="131:24"><name pos:start="131:20" pos:end="131:24">avctx</name></expr></argument>,<argument pos:start="131:26" pos:end="131:37"><expr pos:start="131:26" pos:end="131:37"><name pos:start="131:26" pos:end="131:37">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="131:39" pos:end="131:54"><expr pos:start="131:39" pos:end="131:54"><literal type="string" pos:start="131:39" pos:end="131:54">"JOINT_STEREO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="143:13"><if pos:start="133:13" pos:end="143:13">if <condition pos:start="133:16" pos:end="133:44">(<expr pos:start="133:17" pos:end="133:43"><name pos:start="133:17" pos:end="133:37"><name pos:start="133:17" pos:end="133:21">avctx</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:37">extradata_size</name></name> <operator pos:start="133:39" pos:end="133:40">&gt;=</operator> <literal type="number" pos:start="133:42" pos:end="133:43">16</literal></expr>)</condition><block pos:start="133:45" pos:end="143:13">{<block_content pos:start="135:17" pos:end="141:48">

                <expr_stmt pos:start="135:17" pos:end="135:70"><expr pos:start="135:17" pos:end="135:69"><name pos:start="135:17" pos:end="135:33"><name pos:start="135:17" pos:end="135:17">q</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:33">total_subbands</name></name> <operator pos:start="135:35" pos:end="135:35">=</operator> <name pos:start="135:37" pos:end="135:47"><name pos:start="135:37" pos:end="135:37">q</name><operator pos:start="135:38" pos:end="135:39">-&gt;</operator><name pos:start="135:40" pos:end="135:47">subbands</name></name> <operator pos:start="135:49" pos:end="135:49">+</operator> <name pos:start="135:51" pos:end="135:69"><name pos:start="135:51" pos:end="135:51">e</name><operator pos:start="135:52" pos:end="135:53">-&gt;</operator><name pos:start="135:54" pos:end="135:69">js_subband_start</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:58"><expr pos:start="137:17" pos:end="137:57"><name pos:start="137:17" pos:end="137:35"><name pos:start="137:17" pos:end="137:17">q</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:35">js_subband_start</name></name> <operator pos:start="137:37" pos:end="137:37">=</operator> <name pos:start="137:39" pos:end="137:57"><name pos:start="137:39" pos:end="137:39">e</name><operator pos:start="137:40" pos:end="137:41">-&gt;</operator><name pos:start="137:42" pos:end="137:57">js_subband_start</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:36"><expr pos:start="139:17" pos:end="139:35"><name pos:start="139:17" pos:end="139:31"><name pos:start="139:17" pos:end="139:17">q</name><operator pos:start="139:18" pos:end="139:19">-&gt;</operator><name pos:start="139:20" pos:end="139:31">joint_stereo</name></name> <operator pos:start="139:33" pos:end="139:33">=</operator> <literal type="number" pos:start="139:35" pos:end="139:35">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:48"><expr pos:start="141:17" pos:end="141:47"><name pos:start="141:17" pos:end="141:30"><name pos:start="141:17" pos:end="141:17">q</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:30">js_vlc_bits</name></name> <operator pos:start="141:32" pos:end="141:32">=</operator> <name pos:start="141:34" pos:end="141:47"><name pos:start="141:34" pos:end="141:34">e</name><operator pos:start="141:35" pos:end="141:36">-&gt;</operator><name pos:start="141:37" pos:end="141:47">js_vlc_bits</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="145:13" pos:end="149:13"><if pos:start="145:13" pos:end="149:13">if <condition pos:start="145:16" pos:end="145:45">(<expr pos:start="145:17" pos:end="145:44"><name pos:start="145:17" pos:end="145:38"><name pos:start="145:17" pos:end="145:17">q</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:38">samples_per_channel</name></name> <operator pos:start="145:40" pos:end="145:40">&gt;</operator> <literal type="number" pos:start="145:42" pos:end="145:44">256</literal></expr>)</condition> <block pos:start="145:47" pos:end="149:13">{<block_content pos:start="147:17" pos:end="147:44">

                <expr_stmt pos:start="147:17" pos:end="147:44"><expr pos:start="147:17" pos:end="147:43"><name pos:start="147:17" pos:end="147:38"><name pos:start="147:17" pos:end="147:17">q</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:38">log2_numvector_size</name></name>  <operator pos:start="147:41" pos:end="147:41">=</operator> <literal type="number" pos:start="147:43" pos:end="147:43">6</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="151:13" pos:end="155:13"><if pos:start="151:13" pos:end="155:13">if <condition pos:start="151:16" pos:end="151:45">(<expr pos:start="151:17" pos:end="151:44"><name pos:start="151:17" pos:end="151:38"><name pos:start="151:17" pos:end="151:17">q</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:38">samples_per_channel</name></name> <operator pos:start="151:40" pos:end="151:40">&gt;</operator> <literal type="number" pos:start="151:42" pos:end="151:44">512</literal></expr>)</condition> <block pos:start="151:47" pos:end="155:13">{<block_content pos:start="153:17" pos:end="153:44">

                <expr_stmt pos:start="153:17" pos:end="153:44"><expr pos:start="153:17" pos:end="153:43"><name pos:start="153:17" pos:end="153:38"><name pos:start="153:17" pos:end="153:17">q</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:38">log2_numvector_size</name></name>  <operator pos:start="153:41" pos:end="153:41">=</operator> <literal type="number" pos:start="153:43" pos:end="153:43">7</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>

        <case pos:start="159:9" pos:end="159:21">case <expr pos:start="159:14" pos:end="159:20"><name pos:start="159:14" pos:end="159:20">MC_COOK</name></expr>:</case>

            <expr_stmt pos:start="161:13" pos:end="161:66"><expr pos:start="161:13" pos:end="161:65"><call pos:start="161:13" pos:end="161:65"><name pos:start="161:13" pos:end="161:18">av_log</name><argument_list pos:start="161:19" pos:end="161:65">(<argument pos:start="161:20" pos:end="161:24"><expr pos:start="161:20" pos:end="161:24"><name pos:start="161:20" pos:end="161:24">avctx</name></expr></argument>,<argument pos:start="161:26" pos:end="161:37"><expr pos:start="161:26" pos:end="161:37"><name pos:start="161:26" pos:end="161:37">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="161:39" pos:end="161:64"><expr pos:start="161:39" pos:end="161:64"><literal type="string" pos:start="161:39" pos:end="161:64">"MC_COOK not supported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="163:13" pos:end="163:22">return <expr pos:start="163:20" pos:end="163:21"><operator pos:start="163:20" pos:end="163:20">-</operator><literal type="number" pos:start="163:21" pos:end="163:21">1</literal></expr>;</return>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <default pos:start="167:9" pos:end="167:16">default:</default>

            <expr_stmt pos:start="169:13" pos:end="169:80"><expr pos:start="169:13" pos:end="169:79"><call pos:start="169:13" pos:end="169:79"><name pos:start="169:13" pos:end="169:18">av_log</name><argument_list pos:start="169:19" pos:end="169:79">(<argument pos:start="169:20" pos:end="169:24"><expr pos:start="169:20" pos:end="169:24"><name pos:start="169:20" pos:end="169:24">avctx</name></expr></argument>,<argument pos:start="169:26" pos:end="169:37"><expr pos:start="169:26" pos:end="169:37"><name pos:start="169:26" pos:end="169:37">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="169:39" pos:end="169:78"><expr pos:start="169:39" pos:end="169:78"><literal type="string" pos:start="169:39" pos:end="169:78">"Unknown Cook version, report sample!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="171:13" pos:end="171:22">return <expr pos:start="171:20" pos:end="171:21"><operator pos:start="171:20" pos:end="171:20">-</operator><literal type="number" pos:start="171:21" pos:end="171:21">1</literal></expr>;</return>

            <break pos:start="173:13" pos:end="173:18">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="179:5" pos:end="179:39">/* Initialize variable relations */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:41"><expr pos:start="181:5" pos:end="181:40"><name pos:start="181:5" pos:end="181:15"><name pos:start="181:5" pos:end="181:5">q</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:15">mlt_size</name></name> <operator pos:start="181:17" pos:end="181:17">=</operator> <name pos:start="181:19" pos:end="181:40"><name pos:start="181:19" pos:end="181:19">q</name><operator pos:start="181:20" pos:end="181:21">-&gt;</operator><name pos:start="181:22" pos:end="181:40">samples_per_channel</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:54"><expr pos:start="183:5" pos:end="183:53"><name pos:start="183:5" pos:end="183:21"><name pos:start="183:5" pos:end="183:5">q</name><operator pos:start="183:6" pos:end="183:7">-&gt;</operator><name pos:start="183:8" pos:end="183:21">numvector_size</name></name> <operator pos:start="183:23" pos:end="183:23">=</operator> <operator pos:start="183:25" pos:end="183:25">(</operator><literal type="number" pos:start="183:26" pos:end="183:26">1</literal> <operator pos:start="183:28" pos:end="183:29">&lt;&lt;</operator> <name pos:start="183:31" pos:end="183:52"><name pos:start="183:31" pos:end="183:31">q</name><operator pos:start="183:32" pos:end="183:33">-&gt;</operator><name pos:start="183:34" pos:end="183:52">log2_numvector_size</name></name><operator pos:start="183:53" pos:end="183:53">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="187:5" pos:end="187:25">/* Generate tables */</comment>

    <expr_stmt pos:start="189:5" pos:end="189:26"><expr pos:start="189:5" pos:end="189:25"><call pos:start="189:5" pos:end="189:25"><name pos:start="189:5" pos:end="189:22">init_rootpow2table</name><argument_list pos:start="189:23" pos:end="189:25">(<argument pos:start="189:24" pos:end="189:24"><expr pos:start="189:24" pos:end="189:24"><name pos:start="189:24" pos:end="189:24">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:22"><expr pos:start="191:5" pos:end="191:21"><call pos:start="191:5" pos:end="191:21"><name pos:start="191:5" pos:end="191:18">init_pow2table</name><argument_list pos:start="191:19" pos:end="191:21">(<argument pos:start="191:20" pos:end="191:20"><expr pos:start="191:20" pos:end="191:20"><name pos:start="191:20" pos:end="191:20">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:23"><expr pos:start="193:5" pos:end="193:22"><call pos:start="193:5" pos:end="193:22"><name pos:start="193:5" pos:end="193:19">init_gain_table</name><argument_list pos:start="193:20" pos:end="193:22">(<argument pos:start="193:21" pos:end="193:21"><expr pos:start="193:21" pos:end="193:21"><name pos:start="193:21" pos:end="193:21">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="197:5" pos:end="199:18"><if pos:start="197:5" pos:end="199:18">if <condition pos:start="197:8" pos:end="197:37">(<expr pos:start="197:9" pos:end="197:36"><call pos:start="197:9" pos:end="197:31"><name pos:start="197:9" pos:end="197:28">init_cook_vlc_tables</name><argument_list pos:start="197:29" pos:end="197:31">(<argument pos:start="197:30" pos:end="197:30"><expr pos:start="197:30" pos:end="197:30"><name pos:start="197:30" pos:end="197:30">q</name></expr></argument>)</argument_list></call> <operator pos:start="197:33" pos:end="197:34">!=</operator> <literal type="number" pos:start="197:36" pos:end="197:36">0</literal></expr>)</condition><block type="pseudo" pos:start="199:9" pos:end="199:18"><block_content pos:start="199:9" pos:end="199:18">

        <return pos:start="199:9" pos:end="199:18">return <expr pos:start="199:16" pos:end="199:17"><operator pos:start="199:16" pos:end="199:16">-</operator><literal type="number" pos:start="199:17" pos:end="199:17">1</literal></expr>;</return></block_content></block></if></if_stmt>





    <if_stmt pos:start="205:5" pos:end="207:18"><if pos:start="205:5" pos:end="207:18">if<condition pos:start="205:7" pos:end="205:40">(<expr pos:start="205:8" pos:end="205:39"><name pos:start="205:8" pos:end="205:25"><name pos:start="205:8" pos:end="205:12">avctx</name><operator pos:start="205:13" pos:end="205:14">-&gt;</operator><name pos:start="205:15" pos:end="205:25">block_align</name></name> <operator pos:start="205:27" pos:end="205:28">&gt;=</operator> <name pos:start="205:30" pos:end="205:37">UINT_MAX</name><operator pos:start="205:38" pos:end="205:38">/</operator><literal type="number" pos:start="205:39" pos:end="205:39">2</literal></expr>)</condition><block type="pseudo" pos:start="207:9" pos:end="207:18"><block_content pos:start="207:9" pos:end="207:18">

        <return pos:start="207:9" pos:end="207:18">return <expr pos:start="207:16" pos:end="207:17"><operator pos:start="207:16" pos:end="207:16">-</operator><literal type="number" pos:start="207:17" pos:end="207:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="211:5" pos:end="215:64">/* Pad the databuffer with:

       DECODE_BYTES_PAD1 or DECODE_BYTES_PAD2 for decode_bytes(),

       FF_INPUT_BUFFER_PADDING_SIZE, for the bitstreamreader. */</comment>

    <if_stmt pos:start="217:5" pos:end="237:5"><if pos:start="217:5" pos:end="227:5">if <condition pos:start="217:8" pos:end="217:48">(<expr pos:start="217:9" pos:end="217:47"><name pos:start="217:9" pos:end="217:22"><name pos:start="217:9" pos:end="217:9">q</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:22">nb_channels</name></name><operator pos:start="217:23" pos:end="217:24">==</operator><literal type="number" pos:start="217:25" pos:end="217:25">2</literal> <operator pos:start="217:27" pos:end="217:28">&amp;&amp;</operator> <name pos:start="217:30" pos:end="217:44"><name pos:start="217:30" pos:end="217:30">q</name><operator pos:start="217:31" pos:end="217:32">-&gt;</operator><name pos:start="217:33" pos:end="217:44">joint_stereo</name></name><operator pos:start="217:45" pos:end="217:46">==</operator><literal type="number" pos:start="217:47" pos:end="217:47">0</literal></expr>)</condition> <block pos:start="217:50" pos:end="227:5">{<block_content pos:start="219:9" pos:end="225:53">

        <expr_stmt pos:start="219:9" pos:end="225:53"><expr pos:start="219:9" pos:end="225:52"><name pos:start="219:9" pos:end="219:31"><name pos:start="219:9" pos:end="219:9">q</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:31">decoded_bytes_buffer</name></name> <operator pos:start="219:33" pos:end="219:33">=</operator>

          <call pos:start="221:11" pos:end="225:52"><name pos:start="221:11" pos:end="221:20">av_mallocz</name><argument_list pos:start="221:21" pos:end="225:52">(<argument pos:start="221:22" pos:end="225:51"><expr pos:start="221:22" pos:end="225:51"><name pos:start="221:22" pos:end="221:39"><name pos:start="221:22" pos:end="221:26">avctx</name><operator pos:start="221:27" pos:end="221:28">-&gt;</operator><name pos:start="221:29" pos:end="221:39">block_align</name></name><operator pos:start="221:40" pos:end="221:40">/</operator><literal type="number" pos:start="221:41" pos:end="223:22">2</literal>

                     <operator pos:start="223:22" pos:end="223:22">+</operator> <call pos:start="223:24" pos:end="223:62"><name pos:start="223:24" pos:end="223:40">DECODE_BYTES_PAD2</name><argument_list pos:start="223:41" pos:end="223:62">(<argument pos:start="223:42" pos:end="223:61"><expr pos:start="223:42" pos:end="223:61"><name pos:start="223:42" pos:end="223:59"><name pos:start="223:42" pos:end="223:46">avctx</name><operator pos:start="223:47" pos:end="223:48">-&gt;</operator><name pos:start="223:49" pos:end="223:59">block_align</name></name><operator pos:start="223:60" pos:end="223:60">/</operator><literal type="number" pos:start="223:61" pos:end="223:61">2</literal></expr></argument>)</argument_list></call>

                     <operator pos:start="225:22" pos:end="225:22">+</operator> <name pos:start="225:24" pos:end="225:51">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="227:7" pos:end="237:5">else <block pos:start="227:12" pos:end="237:5">{<block_content pos:start="229:9" pos:end="235:53">

        <expr_stmt pos:start="229:9" pos:end="235:53"><expr pos:start="229:9" pos:end="235:52"><name pos:start="229:9" pos:end="229:31"><name pos:start="229:9" pos:end="229:9">q</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:31">decoded_bytes_buffer</name></name> <operator pos:start="229:33" pos:end="229:33">=</operator>

          <call pos:start="231:11" pos:end="235:52"><name pos:start="231:11" pos:end="231:20">av_mallocz</name><argument_list pos:start="231:21" pos:end="235:52">(<argument pos:start="231:22" pos:end="235:51"><expr pos:start="231:22" pos:end="235:51"><name pos:start="231:22" pos:end="231:39"><name pos:start="231:22" pos:end="231:26">avctx</name><operator pos:start="231:27" pos:end="231:28">-&gt;</operator><name pos:start="231:29" pos:end="231:39">block_align</name></name>

                     <operator pos:start="233:22" pos:end="233:22">+</operator> <call pos:start="233:24" pos:end="233:60"><name pos:start="233:24" pos:end="233:40">DECODE_BYTES_PAD1</name><argument_list pos:start="233:41" pos:end="233:60">(<argument pos:start="233:42" pos:end="233:59"><expr pos:start="233:42" pos:end="233:59"><name pos:start="233:42" pos:end="233:59"><name pos:start="233:42" pos:end="233:46">avctx</name><operator pos:start="233:47" pos:end="233:48">-&gt;</operator><name pos:start="233:49" pos:end="233:59">block_align</name></name></expr></argument>)</argument_list></call>

                     <operator pos:start="235:22" pos:end="235:22">+</operator> <name pos:start="235:24" pos:end="235:51">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="239:5" pos:end="241:18"><if pos:start="239:5" pos:end="241:18">if <condition pos:start="239:8" pos:end="239:40">(<expr pos:start="239:9" pos:end="239:39"><name pos:start="239:9" pos:end="239:31"><name pos:start="239:9" pos:end="239:9">q</name><operator pos:start="239:10" pos:end="239:11">-&gt;</operator><name pos:start="239:12" pos:end="239:31">decoded_bytes_buffer</name></name> <operator pos:start="239:33" pos:end="239:34">==</operator> <name pos:start="239:36" pos:end="239:39">NULL</name></expr>)</condition><block type="pseudo" pos:start="241:9" pos:end="241:18"><block_content pos:start="241:9" pos:end="241:18">

        <return pos:start="241:9" pos:end="241:18">return <expr pos:start="241:16" pos:end="241:17"><operator pos:start="241:16" pos:end="241:16">-</operator><literal type="number" pos:start="241:17" pos:end="241:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:33"><expr pos:start="245:5" pos:end="245:32"><name pos:start="245:5" pos:end="245:19"><name pos:start="245:5" pos:end="245:5">q</name><operator pos:start="245:6" pos:end="245:7">-&gt;</operator><name pos:start="245:8" pos:end="245:16">gain_ptr1</name><index pos:start="245:17" pos:end="245:19">[<expr pos:start="245:18" pos:end="245:18"><literal type="number" pos:start="245:18" pos:end="245:18">0</literal></expr>]</index></name> <operator pos:start="245:21" pos:end="245:21">=</operator> <operator pos:start="245:23" pos:end="245:23">&amp;</operator><name pos:start="245:24" pos:end="245:32"><name pos:start="245:24" pos:end="245:24">q</name><operator pos:start="245:25" pos:end="245:26">-&gt;</operator><name pos:start="245:27" pos:end="245:32">gain_1</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:33"><expr pos:start="247:5" pos:end="247:32"><name pos:start="247:5" pos:end="247:19"><name pos:start="247:5" pos:end="247:5">q</name><operator pos:start="247:6" pos:end="247:7">-&gt;</operator><name pos:start="247:8" pos:end="247:16">gain_ptr1</name><index pos:start="247:17" pos:end="247:19">[<expr pos:start="247:18" pos:end="247:18"><literal type="number" pos:start="247:18" pos:end="247:18">1</literal></expr>]</index></name> <operator pos:start="247:21" pos:end="247:21">=</operator> <operator pos:start="247:23" pos:end="247:23">&amp;</operator><name pos:start="247:24" pos:end="247:32"><name pos:start="247:24" pos:end="247:24">q</name><operator pos:start="247:25" pos:end="247:26">-&gt;</operator><name pos:start="247:27" pos:end="247:32">gain_2</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:33"><expr pos:start="249:5" pos:end="249:32"><name pos:start="249:5" pos:end="249:19"><name pos:start="249:5" pos:end="249:5">q</name><operator pos:start="249:6" pos:end="249:7">-&gt;</operator><name pos:start="249:8" pos:end="249:16">gain_ptr2</name><index pos:start="249:17" pos:end="249:19">[<expr pos:start="249:18" pos:end="249:18"><literal type="number" pos:start="249:18" pos:end="249:18">0</literal></expr>]</index></name> <operator pos:start="249:21" pos:end="249:21">=</operator> <operator pos:start="249:23" pos:end="249:23">&amp;</operator><name pos:start="249:24" pos:end="249:32"><name pos:start="249:24" pos:end="249:24">q</name><operator pos:start="249:25" pos:end="249:26">-&gt;</operator><name pos:start="249:27" pos:end="249:32">gain_3</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:33"><expr pos:start="251:5" pos:end="251:32"><name pos:start="251:5" pos:end="251:19"><name pos:start="251:5" pos:end="251:5">q</name><operator pos:start="251:6" pos:end="251:7">-&gt;</operator><name pos:start="251:8" pos:end="251:16">gain_ptr2</name><index pos:start="251:17" pos:end="251:19">[<expr pos:start="251:18" pos:end="251:18"><literal type="number" pos:start="251:18" pos:end="251:18">1</literal></expr>]</index></name> <operator pos:start="251:21" pos:end="251:21">=</operator> <operator pos:start="251:23" pos:end="251:23">&amp;</operator><name pos:start="251:24" pos:end="251:32"><name pos:start="251:24" pos:end="251:24">q</name><operator pos:start="251:25" pos:end="251:26">-&gt;</operator><name pos:start="251:27" pos:end="251:32">gain_4</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="255:5" pos:end="255:31">/* Initialize transform. */</comment>

    <if_stmt pos:start="257:5" pos:end="259:18"><if pos:start="257:5" pos:end="259:18">if <condition pos:start="257:8" pos:end="257:32">( <expr pos:start="257:10" pos:end="257:30"><call pos:start="257:10" pos:end="257:25"><name pos:start="257:10" pos:end="257:22">init_cook_mlt</name><argument_list pos:start="257:23" pos:end="257:25">(<argument pos:start="257:24" pos:end="257:24"><expr pos:start="257:24" pos:end="257:24"><name pos:start="257:24" pos:end="257:24">q</name></expr></argument>)</argument_list></call> <operator pos:start="257:27" pos:end="257:28">==</operator> <literal type="number" pos:start="257:30" pos:end="257:30">0</literal></expr> )</condition><block type="pseudo" pos:start="259:9" pos:end="259:18"><block_content pos:start="259:9" pos:end="259:18">

        <return pos:start="259:9" pos:end="259:18">return <expr pos:start="259:16" pos:end="259:17"><operator pos:start="259:16" pos:end="259:16">-</operator><literal type="number" pos:start="259:17" pos:end="259:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="263:5" pos:end="263:87">/* Try to catch some obviously faulty streams, othervise it might be exploitable */</comment>

    <if_stmt pos:start="265:5" pos:end="271:5"><if pos:start="265:5" pos:end="271:5">if <condition pos:start="265:8" pos:end="265:31">(<expr pos:start="265:9" pos:end="265:30"><name pos:start="265:9" pos:end="265:25"><name pos:start="265:9" pos:end="265:9">q</name><operator pos:start="265:10" pos:end="265:11">-&gt;</operator><name pos:start="265:12" pos:end="265:25">total_subbands</name></name> <operator pos:start="265:27" pos:end="265:27">&gt;</operator> <literal type="number" pos:start="265:29" pos:end="265:30">53</literal></expr>)</condition> <block pos:start="265:33" pos:end="271:5">{<block_content pos:start="267:9" pos:end="269:18">

        <expr_stmt pos:start="267:9" pos:end="267:75"><expr pos:start="267:9" pos:end="267:74"><call pos:start="267:9" pos:end="267:74"><name pos:start="267:9" pos:end="267:14">av_log</name><argument_list pos:start="267:15" pos:end="267:74">(<argument pos:start="267:16" pos:end="267:20"><expr pos:start="267:16" pos:end="267:20"><name pos:start="267:16" pos:end="267:20">avctx</name></expr></argument>,<argument pos:start="267:22" pos:end="267:33"><expr pos:start="267:22" pos:end="267:33"><name pos:start="267:22" pos:end="267:33">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="267:35" pos:end="267:73"><expr pos:start="267:35" pos:end="267:73"><literal type="string" pos:start="267:35" pos:end="267:73">"total_subbands &gt; 53, report sample!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="269:9" pos:end="269:18">return <expr pos:start="269:16" pos:end="269:17"><operator pos:start="269:16" pos:end="269:16">-</operator><literal type="number" pos:start="269:17" pos:end="269:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="273:5" pos:end="279:5"><if pos:start="273:5" pos:end="279:5">if <condition pos:start="273:8" pos:end="273:25">(<expr pos:start="273:9" pos:end="273:24"><name pos:start="273:9" pos:end="273:19"><name pos:start="273:9" pos:end="273:9">q</name><operator pos:start="273:10" pos:end="273:11">-&gt;</operator><name pos:start="273:12" pos:end="273:19">subbands</name></name> <operator pos:start="273:21" pos:end="273:21">&gt;</operator> <literal type="number" pos:start="273:23" pos:end="273:24">50</literal></expr>)</condition> <block pos:start="273:27" pos:end="279:5">{<block_content pos:start="275:9" pos:end="277:18">

        <expr_stmt pos:start="275:9" pos:end="275:69"><expr pos:start="275:9" pos:end="275:68"><call pos:start="275:9" pos:end="275:68"><name pos:start="275:9" pos:end="275:14">av_log</name><argument_list pos:start="275:15" pos:end="275:68">(<argument pos:start="275:16" pos:end="275:20"><expr pos:start="275:16" pos:end="275:20"><name pos:start="275:16" pos:end="275:20">avctx</name></expr></argument>,<argument pos:start="275:22" pos:end="275:33"><expr pos:start="275:22" pos:end="275:33"><name pos:start="275:22" pos:end="275:33">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="275:35" pos:end="275:67"><expr pos:start="275:35" pos:end="275:67"><literal type="string" pos:start="275:35" pos:end="275:67">"subbands &gt; 50, report sample!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="277:9" pos:end="277:18">return <expr pos:start="277:16" pos:end="277:17"><operator pos:start="277:16" pos:end="277:16">-</operator><literal type="number" pos:start="277:17" pos:end="277:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="281:5" pos:end="294:0"><if pos:start="281:5" pos:end="283:5">if <condition pos:start="281:8" pos:end="281:111">(<expr pos:start="281:9" pos:end="281:110"><operator pos:start="281:9" pos:end="281:9">(</operator><name pos:start="281:10" pos:end="281:31"><name pos:start="281:10" pos:end="281:10">q</name><operator pos:start="281:11" pos:end="281:12">-&gt;</operator><name pos:start="281:13" pos:end="281:31">samples_per_channel</name></name> <operator pos:start="281:33" pos:end="281:34">==</operator> <literal type="number" pos:start="281:36" pos:end="281:38">256</literal><operator pos:start="281:39" pos:end="281:39">)</operator> <operator pos:start="281:41" pos:end="281:42">||</operator> <operator pos:start="281:44" pos:end="281:44">(</operator><name pos:start="281:45" pos:end="281:66"><name pos:start="281:45" pos:end="281:45">q</name><operator pos:start="281:46" pos:end="281:47">-&gt;</operator><name pos:start="281:48" pos:end="281:66">samples_per_channel</name></name> <operator pos:start="281:68" pos:end="281:69">==</operator> <literal type="number" pos:start="281:71" pos:end="281:73">512</literal><operator pos:start="281:74" pos:end="281:74">)</operator> <operator pos:start="281:76" pos:end="281:77">||</operator> <operator pos:start="281:79" pos:end="281:79">(</operator><name pos:start="281:80" pos:end="281:101"><name pos:start="281:80" pos:end="281:80">q</name><operator pos:start="281:81" pos:end="281:82">-&gt;</operator><name pos:start="281:83" pos:end="281:101">samples_per_channel</name></name> <operator pos:start="281:103" pos:end="281:104">==</operator> <literal type="number" pos:start="281:106" pos:end="281:109">1024</literal><operator pos:start="281:110" pos:end="281:110">)</operator></expr>)</condition> <block pos:start="281:113" pos:end="283:5">{<block_content>

    </block_content>}</block></if> <else pos:start="283:7" pos:end="294:0">else <block pos:start="283:12" pos:end="294:0">{<block_content pos:start="285:9" pos:end="287:18">

        <expr_stmt pos:start="285:9" pos:end="285:121"><expr pos:start="285:9" pos:end="285:120"><call pos:start="285:9" pos:end="285:120"><name pos:start="285:9" pos:end="285:14">av_log</name><argument_list pos:start="285:15" pos:end="285:120">(<argument pos:start="285:16" pos:end="285:20"><expr pos:start="285:16" pos:end="285:20"><name pos:start="285:16" pos:end="285:20">avctx</name></expr></argument>,<argument pos:start="285:22" pos:end="285:33"><expr pos:start="285:22" pos:end="285:33"><name pos:start="285:22" pos:end="285:33">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="285:35" pos:end="285:96"><expr pos:start="285:35" pos:end="285:96"><literal type="string" pos:start="285:35" pos:end="285:96">"unknown amount of samples_per_channel = %d, report sample!\n"</literal></expr></argument>,<argument pos:start="285:98" pos:end="285:119"><expr pos:start="285:98" pos:end="285:119"><name pos:start="285:98" pos:end="285:119"><name pos:start="285:98" pos:end="285:98">q</name><operator pos:start="285:99" pos:end="285:100">-&gt;</operator><name pos:start="285:101" pos:end="285:119">samples_per_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="287:9" pos:end="287:18">return <expr pos:start="287:16" pos:end="287:17"><operator pos:start="287:16" pos:end="287:16">-</operator><literal type="number" pos:start="287:17" pos:end="287:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="293:1" pos:end="293:16">#<cpp:directive pos:start="293:2" pos:end="293:6">ifdef</cpp:directive> <name pos:start="293:8" pos:end="293:16">COOKDEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="295:5" pos:end="298:0"><expr pos:start="295:5" pos:end="295:26"><call pos:start="295:5" pos:end="295:26"><name pos:start="295:5" pos:end="295:21">dump_cook_context</name><argument_list pos:start="295:22" pos:end="295:26">(<argument pos:start="295:23" pos:end="295:23"><expr pos:start="295:23" pos:end="295:23"><name pos:start="295:23" pos:end="295:23">q</name></expr></argument>,<argument pos:start="295:25" pos:end="295:25"><expr pos:start="295:25" pos:end="295:25"><name pos:start="295:25" pos:end="295:25">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="297:1" pos:end="297:6">#<cpp:directive pos:start="297:2" pos:end="297:6">endif</cpp:directive></cpp:endif>

    <return pos:start="299:5" pos:end="299:13">return <expr pos:start="299:12" pos:end="299:12"><literal type="number" pos:start="299:12" pos:end="299:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
