<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22790.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:67"><name pos:start="1:1" pos:end="1:20">matroska_parse_block</name><argument_list pos:start="1:21" pos:end="5:67">(<argument pos:start="1:22" pos:end="1:51">MatroskaDemuxContext *matroska</argument>, <argument pos:start="1:54" pos:end="1:66">uint8_t *data</argument>, <argument pos:start="1:69" pos:end="1:76">int size</argument>,

                     <argument pos:start="3:22" pos:end="3:32">int64_t pos</argument>, <argument pos:start="3:35" pos:end="3:55">uint64_t cluster_time</argument>,

                     <argument pos:start="5:22" pos:end="5:36">int is_keyframe</argument>, <argument pos:start="5:39" pos:end="5:49">int *ptrack</argument>, <argument pos:start="5:52" pos:end="5:66">AVPacket **ppkt</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="349:1">{<block_content pos:start="9:5" pos:end="347:15">

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">res</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">track</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">AVPacket</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">pkt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:21">origdata</name> <init pos:start="15:23" pos:end="15:28">= <expr pos:start="15:25" pos:end="15:28"><name pos:start="15:25" pos:end="15:28">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int16_t</name></type> <name pos:start="17:13" pos:end="17:22">block_time</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">uint32_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:23">lace_size</name> <init pos:start="19:25" pos:end="19:30">= <expr pos:start="19:27" pos:end="19:30"><name pos:start="19:27" pos:end="19:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">n</name></decl>, <decl pos:start="21:12" pos:end="21:16"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:16">flags</name></decl>, <decl pos:start="21:19" pos:end="21:27"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:19" pos:end="21:23">laces</name> <init pos:start="21:25" pos:end="21:27">= <expr pos:start="21:27" pos:end="21:27"><literal type="number" pos:start="21:27" pos:end="21:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint64_t</name></type> <name pos:start="23:14" pos:end="23:16">num</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:33">/* first byte(s): tracknum */</comment>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:58">(<expr pos:start="29:9" pos:end="29:57"><operator pos:start="29:9" pos:end="29:9">(</operator><name pos:start="29:10" pos:end="29:10">n</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <call pos:start="29:14" pos:end="29:52"><name pos:start="29:14" pos:end="29:34">matroska_ebmlnum_uint</name><argument_list pos:start="29:35" pos:end="29:52">(<argument pos:start="29:36" pos:end="29:39"><expr pos:start="29:36" pos:end="29:39"><name pos:start="29:36" pos:end="29:39">data</name></expr></argument>, <argument pos:start="29:42" pos:end="29:45"><expr pos:start="29:42" pos:end="29:45"><name pos:start="29:42" pos:end="29:45">size</name></expr></argument>, <argument pos:start="29:48" pos:end="29:51"><expr pos:start="29:48" pos:end="29:51"><operator pos:start="29:48" pos:end="29:48">&amp;</operator><name pos:start="29:49" pos:end="29:51">num</name></expr></argument>)</argument_list></call><operator pos:start="29:53" pos:end="29:53">)</operator> <operator pos:start="29:55" pos:end="29:55">&lt;</operator> <literal type="number" pos:start="29:57" pos:end="29:57">0</literal></expr>)</condition> <block pos:start="29:60" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:19">

        <expr_stmt pos:start="31:9" pos:end="31:71"><expr pos:start="31:9" pos:end="31:70"><call pos:start="31:9" pos:end="31:70"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:70">(<argument pos:start="31:16" pos:end="31:28"><expr pos:start="31:16" pos:end="31:28"><name pos:start="31:16" pos:end="31:28"><name pos:start="31:16" pos:end="31:23">matroska</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:28">ctx</name></name></expr></argument>, <argument pos:start="31:31" pos:end="31:42"><expr pos:start="31:31" pos:end="31:42"><name pos:start="31:31" pos:end="31:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:45" pos:end="31:69"><expr pos:start="31:45" pos:end="31:69"><literal type="string" pos:start="31:45" pos:end="31:69">"EBML block data error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:26"><expr pos:start="33:9" pos:end="33:25"><call pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:15">av_free</name><argument_list pos:start="33:16" pos:end="33:25">(<argument pos:start="33:17" pos:end="33:24"><expr pos:start="33:17" pos:end="33:24"><name pos:start="33:17" pos:end="33:24">origdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:19">return <expr pos:start="35:16" pos:end="35:18"><name pos:start="35:16" pos:end="35:18">res</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:14"><expr pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:8">data</name> <operator pos:start="39:10" pos:end="39:11">+=</operator> <name pos:start="39:13" pos:end="39:13">n</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:14"><expr pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:8">size</name> <operator pos:start="41:10" pos:end="41:11">-=</operator> <name pos:start="41:13" pos:end="41:13">n</name></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:30">/* fetch track from num */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:54"><expr pos:start="47:5" pos:end="47:53"><name pos:start="47:5" pos:end="47:9">track</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="47:53"><name pos:start="47:13" pos:end="47:38">matroska_find_track_by_num</name><argument_list pos:start="47:39" pos:end="47:53">(<argument pos:start="47:40" pos:end="47:47"><expr pos:start="47:40" pos:end="47:47"><name pos:start="47:40" pos:end="47:47">matroska</name></expr></argument>, <argument pos:start="47:50" pos:end="47:52"><expr pos:start="47:50" pos:end="47:52"><name pos:start="47:50" pos:end="47:52">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="49:33"><if pos:start="49:5" pos:end="49:33">if <condition pos:start="49:8" pos:end="49:15">(<expr pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:14">ptrack</name></expr>)</condition><block type="pseudo" pos:start="49:18" pos:end="49:33"><block_content pos:start="49:18" pos:end="49:33">  <expr_stmt pos:start="49:18" pos:end="49:33"><expr pos:start="49:18" pos:end="49:32"><operator pos:start="49:18" pos:end="49:18">*</operator><name pos:start="49:19" pos:end="49:24">ptrack</name> <operator pos:start="49:26" pos:end="49:26">=</operator> <name pos:start="49:28" pos:end="49:32">track</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="61:5"><if pos:start="51:5" pos:end="61:5">if <condition pos:start="51:8" pos:end="51:64">(<expr pos:start="51:9" pos:end="51:63"><name pos:start="51:9" pos:end="51:12">size</name> <operator pos:start="51:14" pos:end="51:15">&lt;=</operator> <literal type="number" pos:start="51:17" pos:end="51:17">3</literal> <operator pos:start="51:19" pos:end="51:20">||</operator> <name pos:start="51:22" pos:end="51:26">track</name> <operator pos:start="51:28" pos:end="51:28">&lt;</operator> <literal type="number" pos:start="51:30" pos:end="51:30">0</literal> <operator pos:start="51:32" pos:end="51:33">||</operator> <name pos:start="51:35" pos:end="51:39">track</name> <operator pos:start="51:41" pos:end="51:42">&gt;=</operator> <name pos:start="51:44" pos:end="51:63"><name pos:start="51:44" pos:end="51:51">matroska</name><operator pos:start="51:52" pos:end="51:53">-&gt;</operator><name pos:start="51:54" pos:end="51:63">num_tracks</name></name></expr>)</condition> <block pos:start="51:66" pos:end="61:5">{<block_content pos:start="53:9" pos:end="59:19">

        <expr_stmt pos:start="53:9" pos:end="55:62"><expr pos:start="53:9" pos:end="55:61"><call pos:start="53:9" pos:end="55:61"><name pos:start="53:9" pos:end="53:14">av_log</name><argument_list pos:start="53:15" pos:end="55:61">(<argument pos:start="53:16" pos:end="53:28"><expr pos:start="53:16" pos:end="53:28"><name pos:start="53:16" pos:end="53:28"><name pos:start="53:16" pos:end="53:23">matroska</name><operator pos:start="53:24" pos:end="53:25">-&gt;</operator><name pos:start="53:26" pos:end="53:28">ctx</name></name></expr></argument>, <argument pos:start="53:31" pos:end="53:41"><expr pos:start="53:31" pos:end="53:41"><name pos:start="53:31" pos:end="53:41">AV_LOG_INFO</name></expr></argument>,

               <argument pos:start="55:16" pos:end="55:47"><expr pos:start="55:16" pos:end="55:47"><literal type="string" pos:start="55:16" pos:end="55:47">"Invalid stream %d or size %u\n"</literal></expr></argument>, <argument pos:start="55:50" pos:end="55:54"><expr pos:start="55:50" pos:end="55:54"><name pos:start="55:50" pos:end="55:54">track</name></expr></argument>, <argument pos:start="55:57" pos:end="55:60"><expr pos:start="55:57" pos:end="55:60"><name pos:start="55:57" pos:end="55:60">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:26"><expr pos:start="57:9" pos:end="57:25"><call pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:15">av_free</name><argument_list pos:start="57:16" pos:end="57:25">(<argument pos:start="57:17" pos:end="57:24"><expr pos:start="57:17" pos:end="57:24"><name pos:start="57:17" pos:end="57:24">origdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:19">return <expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">res</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if<condition pos:start="63:7" pos:end="63:97">(<expr pos:start="63:8" pos:end="63:96"><name pos:start="63:8" pos:end="63:70"><name pos:start="63:8" pos:end="63:15">matroska</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:20">ctx</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:29">streams</name><index pos:start="63:30" pos:end="63:70">[ <expr pos:start="63:32" pos:end="63:68"><name pos:start="63:32" pos:end="63:54"><name pos:start="63:32" pos:end="63:39">matroska</name><operator pos:start="63:40" pos:end="63:41">-&gt;</operator><name pos:start="63:42" pos:end="63:47">tracks</name><index pos:start="63:48" pos:end="63:54">[<expr pos:start="63:49" pos:end="63:53"><name pos:start="63:49" pos:end="63:53">track</name></expr>]</index></name><operator pos:start="63:55" pos:end="63:56">-&gt;</operator><name pos:start="63:57" pos:end="63:68">stream_index</name></expr> ]</index></name><operator pos:start="63:71" pos:end="63:72">-&gt;</operator><name pos:start="63:73" pos:end="63:79">discard</name> <operator pos:start="63:81" pos:end="63:82">&gt;=</operator> <name pos:start="63:84" pos:end="63:96">AVDISCARD_ALL</name></expr>)</condition><block pos:start="63:98" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:19">

        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><call pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:15">av_free</name><argument_list pos:start="65:16" pos:end="65:25">(<argument pos:start="65:17" pos:end="65:24"><expr pos:start="65:17" pos:end="65:24"><name pos:start="65:17" pos:end="65:24">origdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:19">return <expr pos:start="67:16" pos:end="67:18"><name pos:start="67:16" pos:end="67:18">res</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:47">/* block_time (relative to cluster time) */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:42"><expr pos:start="75:5" pos:end="75:41"><name pos:start="75:5" pos:end="75:14">block_time</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <operator pos:start="75:18" pos:end="75:18">(</operator><name pos:start="75:19" pos:end="75:25"><name pos:start="75:19" pos:end="75:22">data</name><index pos:start="75:23" pos:end="75:25">[<expr pos:start="75:24" pos:end="75:24"><literal type="number" pos:start="75:24" pos:end="75:24">0</literal></expr>]</index></name> <operator pos:start="75:27" pos:end="75:28">&lt;&lt;</operator> <literal type="number" pos:start="75:30" pos:end="75:30">8</literal><operator pos:start="75:31" pos:end="75:31">)</operator> <operator pos:start="75:33" pos:end="75:33">|</operator> <name pos:start="75:35" pos:end="75:41"><name pos:start="75:35" pos:end="75:38">data</name><index pos:start="75:39" pos:end="75:41">[<expr pos:start="75:40" pos:end="75:40"><literal type="number" pos:start="75:40" pos:end="75:40">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:14"><expr pos:start="77:5" pos:end="77:13"><name pos:start="77:5" pos:end="77:8">data</name> <operator pos:start="77:10" pos:end="77:11">+=</operator> <literal type="number" pos:start="77:13" pos:end="77:13">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:14"><expr pos:start="79:5" pos:end="79:13"><name pos:start="79:5" pos:end="79:8">size</name> <operator pos:start="79:10" pos:end="79:11">-=</operator> <literal type="number" pos:start="79:13" pos:end="79:13">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:18"><expr pos:start="81:5" pos:end="81:17"><name pos:start="81:5" pos:end="81:9">flags</name> <operator pos:start="81:11" pos:end="81:11">=</operator> <operator pos:start="81:13" pos:end="81:13">*</operator><name pos:start="81:14" pos:end="81:17">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:14"><expr pos:start="83:5" pos:end="83:13"><name pos:start="83:5" pos:end="83:8">data</name> <operator pos:start="83:10" pos:end="83:11">+=</operator> <literal type="number" pos:start="83:13" pos:end="83:13">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:14"><expr pos:start="85:5" pos:end="85:13"><name pos:start="85:5" pos:end="85:8">size</name> <operator pos:start="85:10" pos:end="85:11">-=</operator> <literal type="number" pos:start="85:13" pos:end="85:13">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="89:51"><if pos:start="87:5" pos:end="89:51">if <condition pos:start="87:8" pos:end="87:26">(<expr pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:19">is_keyframe</name> <operator pos:start="87:21" pos:end="87:22">==</operator> <operator pos:start="87:24" pos:end="87:24">-</operator><literal type="number" pos:start="87:25" pos:end="87:25">1</literal></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:51"><block_content pos:start="89:9" pos:end="89:51">

        <expr_stmt pos:start="89:9" pos:end="89:51"><expr pos:start="89:9" pos:end="89:50"><name pos:start="89:9" pos:end="89:19">is_keyframe</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <ternary pos:start="89:23" pos:end="89:50"><condition pos:start="89:23" pos:end="89:33"><expr pos:start="89:23" pos:end="89:31"><name pos:start="89:23" pos:end="89:27">flags</name> <operator pos:start="89:29" pos:end="89:29">&amp;</operator> <literal type="number" pos:start="89:31" pos:end="89:31">1</literal></expr> ?</condition><then pos:start="89:35" pos:end="89:46"> <expr pos:start="89:35" pos:end="89:46"><name pos:start="89:35" pos:end="89:46">PKT_FLAG_KEY</name></expr> </then><else pos:start="89:48" pos:end="89:50">: <expr pos:start="89:50" pos:end="89:50"><literal type="number" pos:start="89:50" pos:end="89:50">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <switch pos:start="91:5" pos:end="245:5">switch <condition pos:start="91:12" pos:end="91:32">(<expr pos:start="91:13" pos:end="91:31"><operator pos:start="91:13" pos:end="91:13">(</operator><name pos:start="91:14" pos:end="91:18">flags</name> <operator pos:start="91:20" pos:end="91:20">&amp;</operator> <literal type="number" pos:start="91:22" pos:end="91:25">0x06</literal><operator pos:start="91:26" pos:end="91:26">)</operator> <operator pos:start="91:28" pos:end="91:29">&gt;&gt;</operator> <literal type="number" pos:start="91:31" pos:end="91:31">1</literal></expr>)</condition> <block pos:start="91:34" pos:end="245:5">{<block_content pos:start="93:9" pos:end="243:18">

        <case pos:start="93:9" pos:end="93:17">case <expr pos:start="93:14" pos:end="93:16"><literal type="number" pos:start="93:14" pos:end="93:16">0x0</literal></expr>:</case> <comment type="block" pos:start="93:19" pos:end="93:33">/* no lacing */</comment>

            <expr_stmt pos:start="95:13" pos:end="95:22"><expr pos:start="95:13" pos:end="95:21"><name pos:start="95:13" pos:end="95:17">laces</name> <operator pos:start="95:19" pos:end="95:19">=</operator> <literal type="number" pos:start="95:21" pos:end="95:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:48"><expr pos:start="97:13" pos:end="97:47"><name pos:start="97:13" pos:end="97:21">lace_size</name> <operator pos:start="97:23" pos:end="97:23">=</operator> <call pos:start="97:25" pos:end="97:47"><name pos:start="97:25" pos:end="97:34">av_mallocz</name><argument_list pos:start="97:35" pos:end="97:47">(<argument pos:start="97:36" pos:end="97:46"><expr pos:start="97:36" pos:end="97:46"><sizeof pos:start="97:36" pos:end="97:46">sizeof<argument_list pos:start="97:42" pos:end="97:46">(<argument pos:start="97:43" pos:end="97:45"><expr pos:start="97:43" pos:end="97:45"><name pos:start="97:43" pos:end="97:45">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:32"><expr pos:start="99:13" pos:end="99:31"><name pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:21">lace_size</name><index pos:start="99:22" pos:end="99:24">[<expr pos:start="99:23" pos:end="99:23"><literal type="number" pos:start="99:23" pos:end="99:23">0</literal></expr>]</index></name> <operator pos:start="99:26" pos:end="99:26">=</operator> <name pos:start="99:28" pos:end="99:31">size</name></expr>;</expr_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>



        <case pos:start="105:9" pos:end="105:17">case <expr pos:start="105:14" pos:end="105:16"><literal type="number" pos:start="105:14" pos:end="105:16">0x1</literal></expr>:</case> <comment type="block" pos:start="105:19" pos:end="105:35">/* xiph lacing */</comment>

        <case pos:start="107:9" pos:end="107:17">case <expr pos:start="107:14" pos:end="107:16"><literal type="number" pos:start="107:14" pos:end="107:16">0x2</literal></expr>:</case> <comment type="block" pos:start="107:19" pos:end="107:41">/* fixed-size lacing */</comment>

        <case pos:start="109:9" pos:end="109:17">case <expr pos:start="109:14" pos:end="109:16"><literal type="number" pos:start="109:14" pos:end="109:16">0x3</literal></expr>:</case> <comment type="block" pos:start="109:19" pos:end="109:35">/* EBML lacing */</comment>

            <if_stmt pos:start="111:13" pos:end="117:13"><if pos:start="111:13" pos:end="117:13">if <condition pos:start="111:16" pos:end="111:26">(<expr pos:start="111:17" pos:end="111:25"><name pos:start="111:17" pos:end="111:20">size</name> <operator pos:start="111:22" pos:end="111:23">==</operator> <literal type="number" pos:start="111:25" pos:end="111:25">0</literal></expr>)</condition> <block pos:start="111:28" pos:end="117:13">{<block_content pos:start="113:17" pos:end="115:22">

                <expr_stmt pos:start="113:17" pos:end="113:25"><expr pos:start="113:17" pos:end="113:24"><name pos:start="113:17" pos:end="113:19">res</name> <operator pos:start="113:21" pos:end="113:21">=</operator> <operator pos:start="113:23" pos:end="113:23">-</operator><literal type="number" pos:start="113:24" pos:end="113:24">1</literal></expr>;</expr_stmt>

                <break pos:start="115:17" pos:end="115:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:32"><expr pos:start="119:13" pos:end="119:31"><name pos:start="119:13" pos:end="119:17">laces</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <operator pos:start="119:21" pos:end="119:21">(</operator><operator pos:start="119:22" pos:end="119:22">*</operator><name pos:start="119:23" pos:end="119:26">data</name><operator pos:start="119:27" pos:end="119:27">)</operator> <operator pos:start="119:29" pos:end="119:29">+</operator> <literal type="number" pos:start="119:31" pos:end="119:31">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:22"><expr pos:start="121:13" pos:end="121:21"><name pos:start="121:13" pos:end="121:16">data</name> <operator pos:start="121:18" pos:end="121:19">+=</operator> <literal type="number" pos:start="121:21" pos:end="121:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:22"><expr pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:16">size</name> <operator pos:start="123:18" pos:end="123:19">-=</operator> <literal type="number" pos:start="123:21" pos:end="123:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:56"><expr pos:start="125:13" pos:end="125:55"><name pos:start="125:13" pos:end="125:21">lace_size</name> <operator pos:start="125:23" pos:end="125:23">=</operator> <call pos:start="125:25" pos:end="125:55"><name pos:start="125:25" pos:end="125:34">av_mallocz</name><argument_list pos:start="125:35" pos:end="125:55">(<argument pos:start="125:36" pos:end="125:54"><expr pos:start="125:36" pos:end="125:54"><name pos:start="125:36" pos:end="125:40">laces</name> <operator pos:start="125:42" pos:end="125:42">*</operator> <sizeof pos:start="125:44" pos:end="125:54">sizeof<argument_list pos:start="125:50" pos:end="125:54">(<argument pos:start="125:51" pos:end="125:53"><expr pos:start="125:51" pos:end="125:53"><name pos:start="125:51" pos:end="125:53">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <switch pos:start="129:13" pos:end="241:13">switch <condition pos:start="129:20" pos:end="129:40">(<expr pos:start="129:21" pos:end="129:39"><operator pos:start="129:21" pos:end="129:21">(</operator><name pos:start="129:22" pos:end="129:26">flags</name> <operator pos:start="129:28" pos:end="129:28">&amp;</operator> <literal type="number" pos:start="129:30" pos:end="129:33">0x06</literal><operator pos:start="129:34" pos:end="129:34">)</operator> <operator pos:start="129:36" pos:end="129:37">&gt;&gt;</operator> <literal type="number" pos:start="129:39" pos:end="129:39">1</literal></expr>)</condition> <block pos:start="129:42" pos:end="241:13">{<block_content pos:start="131:17" pos:end="239:17">

                <case pos:start="131:17" pos:end="131:25">case <expr pos:start="131:22" pos:end="131:24"><literal type="number" pos:start="131:22" pos:end="131:24">0x1</literal></expr>:</case> <comment type="block" pos:start="131:27" pos:end="131:43">/* xiph lacing */</comment> <block pos:start="131:45" pos:end="171:17">{<block_content pos:start="133:21" pos:end="169:26">

                    <decl_stmt pos:start="133:21" pos:end="133:33"><decl pos:start="133:21" pos:end="133:32"><type pos:start="133:21" pos:end="133:27"><name pos:start="133:21" pos:end="133:27">uint8_t</name></type> <name pos:start="133:29" pos:end="133:32">temp</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="135:21" pos:end="135:39"><decl pos:start="135:21" pos:end="135:38"><type pos:start="135:21" pos:end="135:28"><name pos:start="135:21" pos:end="135:28">uint32_t</name></type> <name pos:start="135:30" pos:end="135:34">total</name> <init pos:start="135:36" pos:end="135:38">= <expr pos:start="135:38" pos:end="135:38"><literal type="number" pos:start="135:38" pos:end="135:38">0</literal></expr></init></decl>;</decl_stmt>

                    <for pos:start="137:21" pos:end="165:21">for <control pos:start="137:25" pos:end="137:63">(<init pos:start="137:26" pos:end="137:31"><expr pos:start="137:26" pos:end="137:30"><name pos:start="137:26" pos:end="137:26">n</name> <operator pos:start="137:28" pos:end="137:28">=</operator> <literal type="number" pos:start="137:30" pos:end="137:30">0</literal></expr>;</init> <condition pos:start="137:33" pos:end="137:58"><expr pos:start="137:33" pos:end="137:57"><name pos:start="137:33" pos:end="137:35">res</name> <operator pos:start="137:37" pos:end="137:38">==</operator> <literal type="number" pos:start="137:40" pos:end="137:40">0</literal> <operator pos:start="137:42" pos:end="137:43">&amp;&amp;</operator> <name pos:start="137:45" pos:end="137:45">n</name> <operator pos:start="137:47" pos:end="137:47">&lt;</operator> <name pos:start="137:49" pos:end="137:53">laces</name> <operator pos:start="137:55" pos:end="137:55">-</operator> <literal type="number" pos:start="137:57" pos:end="137:57">1</literal></expr>;</condition> <incr pos:start="137:60" pos:end="137:62"><expr pos:start="137:60" pos:end="137:62"><name pos:start="137:60" pos:end="137:60">n</name><operator pos:start="137:61" pos:end="137:62">++</operator></expr></incr>)</control> <block pos:start="137:65" pos:end="165:21">{<block_content pos:start="139:25" pos:end="163:46">

                        <while pos:start="139:25" pos:end="161:25">while <condition pos:start="139:31" pos:end="139:33">(<expr pos:start="139:32" pos:end="139:32"><literal type="number" pos:start="139:32" pos:end="139:32">1</literal></expr>)</condition> <block pos:start="139:35" pos:end="161:25">{<block_content pos:start="141:29" pos:end="159:38">

                            <if_stmt pos:start="141:29" pos:end="147:29"><if pos:start="141:29" pos:end="147:29">if <condition pos:start="141:32" pos:end="141:42">(<expr pos:start="141:33" pos:end="141:41"><name pos:start="141:33" pos:end="141:36">size</name> <operator pos:start="141:38" pos:end="141:39">==</operator> <literal type="number" pos:start="141:41" pos:end="141:41">0</literal></expr>)</condition> <block pos:start="141:44" pos:end="147:29">{<block_content pos:start="143:33" pos:end="145:38">

                                <expr_stmt pos:start="143:33" pos:end="143:41"><expr pos:start="143:33" pos:end="143:40"><name pos:start="143:33" pos:end="143:35">res</name> <operator pos:start="143:37" pos:end="143:37">=</operator> <operator pos:start="143:39" pos:end="143:39">-</operator><literal type="number" pos:start="143:40" pos:end="143:40">1</literal></expr>;</expr_stmt>

                                <break pos:start="145:33" pos:end="145:38">break;</break>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="149:29" pos:end="149:41"><expr pos:start="149:29" pos:end="149:40"><name pos:start="149:29" pos:end="149:32">temp</name> <operator pos:start="149:34" pos:end="149:34">=</operator> <operator pos:start="149:36" pos:end="149:36">*</operator><name pos:start="149:37" pos:end="149:40">data</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="151:29" pos:end="151:49"><expr pos:start="151:29" pos:end="151:48"><name pos:start="151:29" pos:end="151:40"><name pos:start="151:29" pos:end="151:37">lace_size</name><index pos:start="151:38" pos:end="151:40">[<expr pos:start="151:39" pos:end="151:39"><name pos:start="151:39" pos:end="151:39">n</name></expr>]</index></name> <operator pos:start="151:42" pos:end="151:43">+=</operator> <name pos:start="151:45" pos:end="151:48">temp</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="153:29" pos:end="153:38"><expr pos:start="153:29" pos:end="153:37"><name pos:start="153:29" pos:end="153:32">data</name> <operator pos:start="153:34" pos:end="153:35">+=</operator> <literal type="number" pos:start="153:37" pos:end="153:37">1</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="155:29" pos:end="155:38"><expr pos:start="155:29" pos:end="155:37"><name pos:start="155:29" pos:end="155:32">size</name> <operator pos:start="155:34" pos:end="155:35">-=</operator> <literal type="number" pos:start="155:37" pos:end="155:37">1</literal></expr>;</expr_stmt>

                            <if_stmt pos:start="157:29" pos:end="159:38"><if pos:start="157:29" pos:end="159:38">if <condition pos:start="157:32" pos:end="157:45">(<expr pos:start="157:33" pos:end="157:44"><name pos:start="157:33" pos:end="157:36">temp</name> <operator pos:start="157:38" pos:end="157:39">!=</operator> <literal type="number" pos:start="157:41" pos:end="157:44">0xff</literal></expr>)</condition><block type="pseudo" pos:start="159:33" pos:end="159:38"><block_content pos:start="159:33" pos:end="159:38">

                                <break pos:start="159:33" pos:end="159:38">break;</break></block_content></block></if></if_stmt>

                        </block_content>}</block></while>

                        <expr_stmt pos:start="163:25" pos:end="163:46"><expr pos:start="163:25" pos:end="163:45"><name pos:start="163:25" pos:end="163:29">total</name> <operator pos:start="163:31" pos:end="163:32">+=</operator> <name pos:start="163:34" pos:end="163:45"><name pos:start="163:34" pos:end="163:42">lace_size</name><index pos:start="163:43" pos:end="163:45">[<expr pos:start="163:44" pos:end="163:44"><name pos:start="163:44" pos:end="163:44">n</name></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="167:21" pos:end="167:48"><expr pos:start="167:21" pos:end="167:47"><name pos:start="167:21" pos:end="167:32"><name pos:start="167:21" pos:end="167:29">lace_size</name><index pos:start="167:30" pos:end="167:32">[<expr pos:start="167:31" pos:end="167:31"><name pos:start="167:31" pos:end="167:31">n</name></expr>]</index></name> <operator pos:start="167:34" pos:end="167:34">=</operator> <name pos:start="167:36" pos:end="167:39">size</name> <operator pos:start="167:41" pos:end="167:41">-</operator> <name pos:start="167:43" pos:end="167:47">total</name></expr>;</expr_stmt>

                    <break pos:start="169:21" pos:end="169:26">break;</break>

                </block_content>}</block>



                <case pos:start="175:17" pos:end="175:25">case <expr pos:start="175:22" pos:end="175:24"><literal type="number" pos:start="175:22" pos:end="175:24">0x2</literal></expr>:</case> <comment type="block" pos:start="175:27" pos:end="175:49">/* fixed-size lacing */</comment>

                    <for pos:start="177:21" pos:end="179:52">for <control pos:start="177:25" pos:end="177:47">(<init pos:start="177:26" pos:end="177:31"><expr pos:start="177:26" pos:end="177:30"><name pos:start="177:26" pos:end="177:26">n</name> <operator pos:start="177:28" pos:end="177:28">=</operator> <literal type="number" pos:start="177:30" pos:end="177:30">0</literal></expr>;</init> <condition pos:start="177:33" pos:end="177:42"><expr pos:start="177:33" pos:end="177:41"><name pos:start="177:33" pos:end="177:33">n</name> <operator pos:start="177:35" pos:end="177:35">&lt;</operator> <name pos:start="177:37" pos:end="177:41">laces</name></expr>;</condition> <incr pos:start="177:44" pos:end="177:46"><expr pos:start="177:44" pos:end="177:46"><name pos:start="177:44" pos:end="177:44">n</name><operator pos:start="177:45" pos:end="177:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="179:25" pos:end="179:52"><block_content pos:start="179:25" pos:end="179:52">

                        <expr_stmt pos:start="179:25" pos:end="179:52"><expr pos:start="179:25" pos:end="179:51"><name pos:start="179:25" pos:end="179:36"><name pos:start="179:25" pos:end="179:33">lace_size</name><index pos:start="179:34" pos:end="179:36">[<expr pos:start="179:35" pos:end="179:35"><name pos:start="179:35" pos:end="179:35">n</name></expr>]</index></name> <operator pos:start="179:38" pos:end="179:38">=</operator> <name pos:start="179:40" pos:end="179:43">size</name> <operator pos:start="179:45" pos:end="179:45">/</operator> <name pos:start="179:47" pos:end="179:51">laces</name></expr>;</expr_stmt></block_content></block></for>

                    <break pos:start="181:21" pos:end="181:26">break;</break>



                <case pos:start="185:17" pos:end="185:25">case <expr pos:start="185:22" pos:end="185:24"><literal type="number" pos:start="185:22" pos:end="185:24">0x3</literal></expr>:</case> <comment type="block" pos:start="185:27" pos:end="185:43">/* EBML lacing */</comment> <block pos:start="185:45" pos:end="239:17">{<block_content pos:start="187:21" pos:end="237:26">

                    <decl_stmt pos:start="187:21" pos:end="187:35"><decl pos:start="187:21" pos:end="187:34"><type pos:start="187:21" pos:end="187:28"><name pos:start="187:21" pos:end="187:28">uint32_t</name></type> <name pos:start="187:30" pos:end="187:34">total</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="189:21" pos:end="189:64"><expr pos:start="189:21" pos:end="189:63"><name pos:start="189:21" pos:end="189:21">n</name> <operator pos:start="189:23" pos:end="189:23">=</operator> <call pos:start="189:25" pos:end="189:63"><name pos:start="189:25" pos:end="189:45">matroska_ebmlnum_uint</name><argument_list pos:start="189:46" pos:end="189:63">(<argument pos:start="189:47" pos:end="189:50"><expr pos:start="189:47" pos:end="189:50"><name pos:start="189:47" pos:end="189:50">data</name></expr></argument>, <argument pos:start="189:53" pos:end="189:56"><expr pos:start="189:53" pos:end="189:56"><name pos:start="189:53" pos:end="189:56">size</name></expr></argument>, <argument pos:start="189:59" pos:end="189:62"><expr pos:start="189:59" pos:end="189:62"><operator pos:start="189:59" pos:end="189:59">&amp;</operator><name pos:start="189:60" pos:end="189:62">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="191:21" pos:end="199:21"><if pos:start="191:21" pos:end="199:21">if <condition pos:start="191:24" pos:end="191:30">(<expr pos:start="191:25" pos:end="191:29"><name pos:start="191:25" pos:end="191:25">n</name> <operator pos:start="191:27" pos:end="191:27">&lt;</operator> <literal type="number" pos:start="191:29" pos:end="191:29">0</literal></expr>)</condition> <block pos:start="191:32" pos:end="199:21">{<block_content pos:start="193:25" pos:end="197:30">

                        <expr_stmt pos:start="193:25" pos:end="195:58"><expr pos:start="193:25" pos:end="195:57"><call pos:start="193:25" pos:end="195:57"><name pos:start="193:25" pos:end="193:30">av_log</name><argument_list pos:start="193:31" pos:end="195:57">(<argument pos:start="193:32" pos:end="193:44"><expr pos:start="193:32" pos:end="193:44"><name pos:start="193:32" pos:end="193:44"><name pos:start="193:32" pos:end="193:39">matroska</name><operator pos:start="193:40" pos:end="193:41">-&gt;</operator><name pos:start="193:42" pos:end="193:44">ctx</name></name></expr></argument>, <argument pos:start="193:47" pos:end="193:57"><expr pos:start="193:47" pos:end="193:57"><name pos:start="193:47" pos:end="193:57">AV_LOG_INFO</name></expr></argument>,

                               <argument pos:start="195:32" pos:end="195:56"><expr pos:start="195:32" pos:end="195:56"><literal type="string" pos:start="195:32" pos:end="195:56">"EBML block data error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="197:25" pos:end="197:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="201:21" pos:end="201:30"><expr pos:start="201:21" pos:end="201:29"><name pos:start="201:21" pos:end="201:24">data</name> <operator pos:start="201:26" pos:end="201:27">+=</operator> <name pos:start="201:29" pos:end="201:29">n</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="203:21" pos:end="203:30"><expr pos:start="203:21" pos:end="203:29"><name pos:start="203:21" pos:end="203:24">size</name> <operator pos:start="203:26" pos:end="203:27">-=</operator> <name pos:start="203:29" pos:end="203:29">n</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="205:21" pos:end="205:47"><expr pos:start="205:21" pos:end="205:46"><name pos:start="205:21" pos:end="205:25">total</name> <operator pos:start="205:27" pos:end="205:27">=</operator> <name pos:start="205:29" pos:end="205:40"><name pos:start="205:29" pos:end="205:37">lace_size</name><index pos:start="205:38" pos:end="205:40">[<expr pos:start="205:39" pos:end="205:39"><literal type="number" pos:start="205:39" pos:end="205:39">0</literal></expr>]</index></name> <operator pos:start="205:42" pos:end="205:42">=</operator> <name pos:start="205:44" pos:end="205:46">num</name></expr>;</expr_stmt>

                    <for pos:start="207:21" pos:end="233:21">for <control pos:start="207:25" pos:end="207:63">(<init pos:start="207:26" pos:end="207:31"><expr pos:start="207:26" pos:end="207:30"><name pos:start="207:26" pos:end="207:26">n</name> <operator pos:start="207:28" pos:end="207:28">=</operator> <literal type="number" pos:start="207:30" pos:end="207:30">1</literal></expr>;</init> <condition pos:start="207:33" pos:end="207:58"><expr pos:start="207:33" pos:end="207:57"><name pos:start="207:33" pos:end="207:35">res</name> <operator pos:start="207:37" pos:end="207:38">==</operator> <literal type="number" pos:start="207:40" pos:end="207:40">0</literal> <operator pos:start="207:42" pos:end="207:43">&amp;&amp;</operator> <name pos:start="207:45" pos:end="207:45">n</name> <operator pos:start="207:47" pos:end="207:47">&lt;</operator> <name pos:start="207:49" pos:end="207:53">laces</name> <operator pos:start="207:55" pos:end="207:55">-</operator> <literal type="number" pos:start="207:57" pos:end="207:57">1</literal></expr>;</condition> <incr pos:start="207:60" pos:end="207:62"><expr pos:start="207:60" pos:end="207:62"><name pos:start="207:60" pos:end="207:60">n</name><operator pos:start="207:61" pos:end="207:62">++</operator></expr></incr>)</control> <block pos:start="207:65" pos:end="233:21">{<block_content pos:start="209:25" pos:end="231:46">

                        <decl_stmt pos:start="209:25" pos:end="209:37"><decl pos:start="209:25" pos:end="209:36"><type pos:start="209:25" pos:end="209:31"><name pos:start="209:25" pos:end="209:31">int64_t</name></type> <name pos:start="209:33" pos:end="209:36">snum</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="211:25" pos:end="211:30"><decl pos:start="211:25" pos:end="211:29"><type pos:start="211:25" pos:end="211:27"><name pos:start="211:25" pos:end="211:27">int</name></type> <name pos:start="211:29" pos:end="211:29">r</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="213:25" pos:end="213:70"><expr pos:start="213:25" pos:end="213:69"><name pos:start="213:25" pos:end="213:25">r</name> <operator pos:start="213:27" pos:end="213:27">=</operator> <call pos:start="213:29" pos:end="213:69"><name pos:start="213:29" pos:end="213:49">matroska_ebmlnum_sint</name> <argument_list pos:start="213:51" pos:end="213:69">(<argument pos:start="213:52" pos:end="213:55"><expr pos:start="213:52" pos:end="213:55"><name pos:start="213:52" pos:end="213:55">data</name></expr></argument>, <argument pos:start="213:58" pos:end="213:61"><expr pos:start="213:58" pos:end="213:61"><name pos:start="213:58" pos:end="213:61">size</name></expr></argument>, <argument pos:start="213:64" pos:end="213:68"><expr pos:start="213:64" pos:end="213:68"><operator pos:start="213:64" pos:end="213:64">&amp;</operator><name pos:start="213:65" pos:end="213:68">snum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="215:25" pos:end="223:25"><if pos:start="215:25" pos:end="223:25">if <condition pos:start="215:28" pos:end="215:34">(<expr pos:start="215:29" pos:end="215:33"><name pos:start="215:29" pos:end="215:29">r</name> <operator pos:start="215:31" pos:end="215:31">&lt;</operator> <literal type="number" pos:start="215:33" pos:end="215:33">0</literal></expr>)</condition> <block pos:start="215:36" pos:end="223:25">{<block_content pos:start="217:29" pos:end="221:34">

                            <expr_stmt pos:start="217:29" pos:end="219:62"><expr pos:start="217:29" pos:end="219:61"><call pos:start="217:29" pos:end="219:61"><name pos:start="217:29" pos:end="217:34">av_log</name><argument_list pos:start="217:35" pos:end="219:61">(<argument pos:start="217:36" pos:end="217:48"><expr pos:start="217:36" pos:end="217:48"><name pos:start="217:36" pos:end="217:48"><name pos:start="217:36" pos:end="217:43">matroska</name><operator pos:start="217:44" pos:end="217:45">-&gt;</operator><name pos:start="217:46" pos:end="217:48">ctx</name></name></expr></argument>, <argument pos:start="217:51" pos:end="217:61"><expr pos:start="217:51" pos:end="217:61"><name pos:start="217:51" pos:end="217:61">AV_LOG_INFO</name></expr></argument>,

                                   <argument pos:start="219:36" pos:end="219:60"><expr pos:start="219:36" pos:end="219:60"><literal type="string" pos:start="219:36" pos:end="219:60">"EBML block data error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="221:29" pos:end="221:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="225:25" pos:end="225:34"><expr pos:start="225:25" pos:end="225:33"><name pos:start="225:25" pos:end="225:28">data</name> <operator pos:start="225:30" pos:end="225:31">+=</operator> <name pos:start="225:33" pos:end="225:33">r</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="227:25" pos:end="227:34"><expr pos:start="227:25" pos:end="227:33"><name pos:start="227:25" pos:end="227:28">size</name> <operator pos:start="227:30" pos:end="227:31">-=</operator> <name pos:start="227:33" pos:end="227:33">r</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="229:25" pos:end="229:63"><expr pos:start="229:25" pos:end="229:62"><name pos:start="229:25" pos:end="229:36"><name pos:start="229:25" pos:end="229:33">lace_size</name><index pos:start="229:34" pos:end="229:36">[<expr pos:start="229:35" pos:end="229:35"><name pos:start="229:35" pos:end="229:35">n</name></expr>]</index></name> <operator pos:start="229:38" pos:end="229:38">=</operator> <name pos:start="229:40" pos:end="229:55"><name pos:start="229:40" pos:end="229:48">lace_size</name><index pos:start="229:49" pos:end="229:55">[<expr pos:start="229:50" pos:end="229:54"><name pos:start="229:50" pos:end="229:50">n</name> <operator pos:start="229:52" pos:end="229:52">-</operator> <literal type="number" pos:start="229:54" pos:end="229:54">1</literal></expr>]</index></name> <operator pos:start="229:57" pos:end="229:57">+</operator> <name pos:start="229:59" pos:end="229:62">snum</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="231:25" pos:end="231:46"><expr pos:start="231:25" pos:end="231:45"><name pos:start="231:25" pos:end="231:29">total</name> <operator pos:start="231:31" pos:end="231:32">+=</operator> <name pos:start="231:34" pos:end="231:45"><name pos:start="231:34" pos:end="231:42">lace_size</name><index pos:start="231:43" pos:end="231:45">[<expr pos:start="231:44" pos:end="231:44"><name pos:start="231:44" pos:end="231:44">n</name></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="235:21" pos:end="235:48"><expr pos:start="235:21" pos:end="235:47"><name pos:start="235:21" pos:end="235:32"><name pos:start="235:21" pos:end="235:29">lace_size</name><index pos:start="235:30" pos:end="235:32">[<expr pos:start="235:31" pos:end="235:31"><name pos:start="235:31" pos:end="235:31">n</name></expr>]</index></name> <operator pos:start="235:34" pos:end="235:34">=</operator> <name pos:start="235:36" pos:end="235:39">size</name> <operator pos:start="235:41" pos:end="235:41">-</operator> <name pos:start="235:43" pos:end="235:47">total</name></expr>;</expr_stmt>

                    <break pos:start="237:21" pos:end="237:26">break;</break>

                </block_content>}</block>

            </block_content>}</block></switch>

            <break pos:start="243:13" pos:end="243:18">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="249:5" pos:end="339:5"><if pos:start="249:5" pos:end="339:5">if <condition pos:start="249:8" pos:end="249:17">(<expr pos:start="249:9" pos:end="249:16"><name pos:start="249:9" pos:end="249:11">res</name> <operator pos:start="249:13" pos:end="249:14">==</operator> <literal type="number" pos:start="249:16" pos:end="249:16">0</literal></expr>)</condition> <block pos:start="249:19" pos:end="339:5">{<block_content pos:start="251:9" pos:end="337:9">

        <decl_stmt pos:start="251:9" pos:end="251:76"><decl pos:start="251:9" pos:end="251:75"><type pos:start="251:9" pos:end="251:11"><name pos:start="251:9" pos:end="251:11">int</name></type> <name pos:start="251:13" pos:end="251:18">real_v</name> <init pos:start="251:20" pos:end="251:75">= <expr pos:start="251:22" pos:end="251:75"><name pos:start="251:22" pos:end="251:44"><name pos:start="251:22" pos:end="251:29">matroska</name><operator pos:start="251:30" pos:end="251:31">-&gt;</operator><name pos:start="251:32" pos:end="251:37">tracks</name><index pos:start="251:38" pos:end="251:44">[<expr pos:start="251:39" pos:end="251:43"><name pos:start="251:39" pos:end="251:43">track</name></expr>]</index></name><operator pos:start="251:45" pos:end="251:46">-&gt;</operator><name pos:start="251:47" pos:end="251:51">flags</name> <operator pos:start="251:53" pos:end="251:53">&amp;</operator> <name pos:start="251:55" pos:end="251:75">MATROSKA_TRACK_REAL_V</name></expr></init></decl>;</decl_stmt>

        <for pos:start="253:9" pos:end="337:9">for <control pos:start="253:13" pos:end="253:35">(<init pos:start="253:14" pos:end="253:19"><expr pos:start="253:14" pos:end="253:18"><name pos:start="253:14" pos:end="253:14">n</name> <operator pos:start="253:16" pos:end="253:16">=</operator> <literal type="number" pos:start="253:18" pos:end="253:18">0</literal></expr>;</init> <condition pos:start="253:21" pos:end="253:30"><expr pos:start="253:21" pos:end="253:29"><name pos:start="253:21" pos:end="253:21">n</name> <operator pos:start="253:23" pos:end="253:23">&lt;</operator> <name pos:start="253:25" pos:end="253:29">laces</name></expr>;</condition> <incr pos:start="253:32" pos:end="253:34"><expr pos:start="253:32" pos:end="253:34"><name pos:start="253:32" pos:end="253:32">n</name><operator pos:start="253:33" pos:end="253:34">++</operator></expr></incr>)</control> <block pos:start="253:37" pos:end="337:9">{<block_content pos:start="255:13" pos:end="335:33">

            <decl_stmt pos:start="255:13" pos:end="255:47"><decl pos:start="255:13" pos:end="255:46"><type pos:start="255:13" pos:end="255:20"><name pos:start="255:13" pos:end="255:20">uint64_t</name></type> <name pos:start="255:22" pos:end="255:29">timecode</name> <init pos:start="255:31" pos:end="255:46">= <expr pos:start="255:33" pos:end="255:46"><name pos:start="255:33" pos:end="255:46">AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="257:13" pos:end="257:34"><decl pos:start="257:13" pos:end="257:21"><type pos:start="257:13" pos:end="257:15"><name pos:start="257:13" pos:end="257:15">int</name></type> <name pos:start="257:17" pos:end="257:21">slice</name></decl>, <decl pos:start="257:24" pos:end="257:33"><type ref="prev" pos:start="257:13" pos:end="257:15"/><name pos:start="257:24" pos:end="257:29">slices</name> <init pos:start="257:31" pos:end="257:33">= <expr pos:start="257:33" pos:end="257:33"><literal type="number" pos:start="257:33" pos:end="257:33">1</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="261:13" pos:end="267:13"><if pos:start="261:13" pos:end="267:13">if <condition pos:start="261:16" pos:end="261:23">(<expr pos:start="261:17" pos:end="261:22"><name pos:start="261:17" pos:end="261:22">real_v</name></expr>)</condition> <block pos:start="261:25" pos:end="267:13">{<block_content pos:start="263:17" pos:end="265:31">

                <expr_stmt pos:start="263:17" pos:end="263:37"><expr pos:start="263:17" pos:end="263:36"><name pos:start="263:17" pos:end="263:22">slices</name> <operator pos:start="263:24" pos:end="263:24">=</operator> <operator pos:start="263:26" pos:end="263:26">*</operator><name pos:start="263:27" pos:end="263:30">data</name><operator pos:start="263:31" pos:end="263:32">++</operator> <operator pos:start="263:34" pos:end="263:34">+</operator> <literal type="number" pos:start="263:36" pos:end="263:36">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:31"><expr pos:start="265:17" pos:end="265:30"><name pos:start="265:17" pos:end="265:28"><name pos:start="265:17" pos:end="265:25">lace_size</name><index pos:start="265:26" pos:end="265:28">[<expr pos:start="265:27" pos:end="265:27"><name pos:start="265:27" pos:end="265:27">n</name></expr>]</index></name><operator pos:start="265:29" pos:end="265:30">--</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="269:13" pos:end="275:13"><if pos:start="269:13" pos:end="275:13">if <condition pos:start="269:16" pos:end="269:55">(<expr pos:start="269:17" pos:end="269:54"><name pos:start="269:17" pos:end="269:28">cluster_time</name> <operator pos:start="269:30" pos:end="269:31">!=</operator> <operator pos:start="269:33" pos:end="269:33">(</operator><name pos:start="269:34" pos:end="269:41">uint64_t</name><operator pos:start="269:42" pos:end="269:42">)</operator><operator pos:start="269:43" pos:end="269:43">-</operator><literal type="number" pos:start="269:44" pos:end="269:44">1</literal> <operator pos:start="269:46" pos:end="269:47">&amp;&amp;</operator> <name pos:start="269:49" pos:end="269:49">n</name> <operator pos:start="269:51" pos:end="269:52">==</operator> <literal type="number" pos:start="269:54" pos:end="269:54">0</literal></expr>)</condition> <block pos:start="269:57" pos:end="275:13">{<block_content pos:start="271:17" pos:end="273:82">

                <if_stmt pos:start="271:17" pos:end="273:82"><if pos:start="271:17" pos:end="273:82">if <condition pos:start="271:20" pos:end="271:51">(<expr pos:start="271:21" pos:end="271:50"><name pos:start="271:21" pos:end="271:32">cluster_time</name> <operator pos:start="271:34" pos:end="271:34">+</operator> <name pos:start="271:36" pos:end="271:45">block_time</name> <operator pos:start="271:47" pos:end="271:48">&gt;=</operator> <literal type="number" pos:start="271:50" pos:end="271:50">0</literal></expr>)</condition><block type="pseudo" pos:start="273:21" pos:end="273:82"><block_content pos:start="273:21" pos:end="273:82">

                    <expr_stmt pos:start="273:21" pos:end="273:82"><expr pos:start="273:21" pos:end="273:81"><name pos:start="273:21" pos:end="273:28">timecode</name> <operator pos:start="273:30" pos:end="273:30">=</operator> <operator pos:start="273:32" pos:end="273:32">(</operator><name pos:start="273:33" pos:end="273:44">cluster_time</name> <operator pos:start="273:46" pos:end="273:46">+</operator> <name pos:start="273:48" pos:end="273:57">block_time</name><operator pos:start="273:58" pos:end="273:58">)</operator> <operator pos:start="273:60" pos:end="273:60">*</operator> <name pos:start="273:62" pos:end="273:81"><name pos:start="273:62" pos:end="273:69">matroska</name><operator pos:start="273:70" pos:end="273:71">-&gt;</operator><name pos:start="273:72" pos:end="273:81">time_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="277:13" pos:end="277:33">/* FIXME: duration */</comment>



            <for pos:start="281:13" pos:end="333:13">for <control pos:start="281:17" pos:end="281:48">(<init pos:start="281:18" pos:end="281:25"><expr pos:start="281:18" pos:end="281:24"><name pos:start="281:18" pos:end="281:22">slice</name><operator pos:start="281:23" pos:end="281:23">=</operator><literal type="number" pos:start="281:24" pos:end="281:24">0</literal></expr>;</init> <condition pos:start="281:27" pos:end="281:39"><expr pos:start="281:27" pos:end="281:38"><name pos:start="281:27" pos:end="281:31">slice</name><operator pos:start="281:32" pos:end="281:32">&lt;</operator><name pos:start="281:33" pos:end="281:38">slices</name></expr>;</condition> <incr pos:start="281:41" pos:end="281:47"><expr pos:start="281:41" pos:end="281:47"><name pos:start="281:41" pos:end="281:45">slice</name><operator pos:start="281:46" pos:end="281:47">++</operator></expr></incr>)</control> <block pos:start="281:50" pos:end="333:13">{<block_content pos:start="283:17" pos:end="331:53">

                <decl_stmt pos:start="283:17" pos:end="283:49"><decl pos:start="283:17" pos:end="283:30"><type pos:start="283:17" pos:end="283:19"><name pos:start="283:17" pos:end="283:19">int</name></type> <name pos:start="283:21" pos:end="283:30">slice_size</name></decl>, <decl pos:start="283:33" pos:end="283:48"><type ref="prev" pos:start="283:17" pos:end="283:19"/><name pos:start="283:33" pos:end="283:44">slice_offset</name> <init pos:start="283:46" pos:end="283:48">= <expr pos:start="283:48" pos:end="283:48"><literal type="number" pos:start="283:48" pos:end="283:48">0</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="285:17" pos:end="287:66"><if pos:start="285:17" pos:end="287:66">if <condition pos:start="285:20" pos:end="285:27">(<expr pos:start="285:21" pos:end="285:26"><name pos:start="285:21" pos:end="285:26">real_v</name></expr>)</condition><block type="pseudo" pos:start="287:21" pos:end="287:66"><block_content pos:start="287:21" pos:end="287:66">

                    <expr_stmt pos:start="287:21" pos:end="287:66"><expr pos:start="287:21" pos:end="287:65"><name pos:start="287:21" pos:end="287:32">slice_offset</name> <operator pos:start="287:34" pos:end="287:34">=</operator> <call pos:start="287:36" pos:end="287:65"><name pos:start="287:36" pos:end="287:44">rv_offset</name><argument_list pos:start="287:45" pos:end="287:65">(<argument pos:start="287:46" pos:end="287:49"><expr pos:start="287:46" pos:end="287:49"><name pos:start="287:46" pos:end="287:49">data</name></expr></argument>, <argument pos:start="287:52" pos:end="287:56"><expr pos:start="287:52" pos:end="287:56"><name pos:start="287:52" pos:end="287:56">slice</name></expr></argument>, <argument pos:start="287:59" pos:end="287:64"><expr pos:start="287:59" pos:end="287:64"><name pos:start="287:59" pos:end="287:64">slices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="289:17" pos:end="295:81"><if pos:start="289:17" pos:end="291:61">if <condition pos:start="289:20" pos:end="289:38">(<expr pos:start="289:21" pos:end="289:37"><name pos:start="289:21" pos:end="289:25">slice</name><operator pos:start="289:26" pos:end="289:26">+</operator><literal type="number" pos:start="289:27" pos:end="289:27">1</literal> <operator pos:start="289:29" pos:end="289:30">==</operator> <name pos:start="289:32" pos:end="289:37">slices</name></expr>)</condition><block type="pseudo" pos:start="291:21" pos:end="291:61"><block_content pos:start="291:21" pos:end="291:61">

                    <expr_stmt pos:start="291:21" pos:end="291:61"><expr pos:start="291:21" pos:end="291:60"><name pos:start="291:21" pos:end="291:30">slice_size</name> <operator pos:start="291:32" pos:end="291:32">=</operator> <name pos:start="291:34" pos:end="291:45"><name pos:start="291:34" pos:end="291:42">lace_size</name><index pos:start="291:43" pos:end="291:45">[<expr pos:start="291:44" pos:end="291:44"><name pos:start="291:44" pos:end="291:44">n</name></expr>]</index></name> <operator pos:start="291:47" pos:end="291:47">-</operator> <name pos:start="291:49" pos:end="291:60">slice_offset</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="293:17" pos:end="295:81">else<block type="pseudo" pos:start="295:21" pos:end="295:81"><block_content pos:start="295:21" pos:end="295:81">

                    <expr_stmt pos:start="295:21" pos:end="295:81"><expr pos:start="295:21" pos:end="295:80"><name pos:start="295:21" pos:end="295:30">slice_size</name> <operator pos:start="295:32" pos:end="295:32">=</operator> <call pos:start="295:34" pos:end="295:65"><name pos:start="295:34" pos:end="295:42">rv_offset</name><argument_list pos:start="295:43" pos:end="295:65">(<argument pos:start="295:44" pos:end="295:47"><expr pos:start="295:44" pos:end="295:47"><name pos:start="295:44" pos:end="295:47">data</name></expr></argument>, <argument pos:start="295:50" pos:end="295:56"><expr pos:start="295:50" pos:end="295:56"><name pos:start="295:50" pos:end="295:54">slice</name><operator pos:start="295:55" pos:end="295:55">+</operator><literal type="number" pos:start="295:56" pos:end="295:56">1</literal></expr></argument>, <argument pos:start="295:59" pos:end="295:64"><expr pos:start="295:59" pos:end="295:64"><name pos:start="295:59" pos:end="295:64">slices</name></expr></argument>)</argument_list></call> <operator pos:start="295:67" pos:end="295:67">-</operator> <name pos:start="295:69" pos:end="295:80">slice_offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="297:17" pos:end="297:51"><expr pos:start="297:17" pos:end="297:50"><name pos:start="297:17" pos:end="297:19">pkt</name> <operator pos:start="297:21" pos:end="297:21">=</operator> <call pos:start="297:23" pos:end="297:50"><name pos:start="297:23" pos:end="297:32">av_mallocz</name><argument_list pos:start="297:33" pos:end="297:50">(<argument pos:start="297:34" pos:end="297:49"><expr pos:start="297:34" pos:end="297:49"><sizeof pos:start="297:34" pos:end="297:49">sizeof<argument_list pos:start="297:40" pos:end="297:49">(<argument pos:start="297:41" pos:end="297:48"><expr pos:start="297:41" pos:end="297:48"><name pos:start="297:41" pos:end="297:48">AVPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="299:17" pos:end="299:39"><if pos:start="299:17" pos:end="299:39">if <condition pos:start="299:20" pos:end="299:25">(<expr pos:start="299:21" pos:end="299:24"><name pos:start="299:21" pos:end="299:24">ppkt</name></expr>)</condition><block type="pseudo" pos:start="299:28" pos:end="299:39"><block_content pos:start="299:28" pos:end="299:39">  <expr_stmt pos:start="299:28" pos:end="299:39"><expr pos:start="299:28" pos:end="299:38"><operator pos:start="299:28" pos:end="299:28">*</operator><name pos:start="299:29" pos:end="299:32">ppkt</name> <operator pos:start="299:34" pos:end="299:34">=</operator> <name pos:start="299:36" pos:end="299:38">pkt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="block" pos:start="301:17" pos:end="301:47">/* XXX: prevent data copy... */</comment>

                <if_stmt pos:start="303:17" pos:end="311:17"><if pos:start="303:17" pos:end="311:17">if <condition pos:start="303:20" pos:end="303:55">(<expr pos:start="303:21" pos:end="303:54"><call pos:start="303:21" pos:end="303:50"><name pos:start="303:21" pos:end="303:33">av_new_packet</name><argument_list pos:start="303:34" pos:end="303:50">(<argument pos:start="303:35" pos:end="303:37"><expr pos:start="303:35" pos:end="303:37"><name pos:start="303:35" pos:end="303:37">pkt</name></expr></argument>, <argument pos:start="303:40" pos:end="303:49"><expr pos:start="303:40" pos:end="303:49"><name pos:start="303:40" pos:end="303:49">slice_size</name></expr></argument>)</argument_list></call> <operator pos:start="303:52" pos:end="303:52">&lt;</operator> <literal type="number" pos:start="303:54" pos:end="303:54">0</literal></expr>)</condition> <block pos:start="303:57" pos:end="311:17">{<block_content pos:start="305:21" pos:end="309:26">

                    <expr_stmt pos:start="305:21" pos:end="305:40"><expr pos:start="305:21" pos:end="305:39"><name pos:start="305:21" pos:end="305:23">res</name> <operator pos:start="305:25" pos:end="305:25">=</operator> <name pos:start="305:27" pos:end="305:39">AVERROR_NOMEM</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="307:21" pos:end="307:32"><expr pos:start="307:21" pos:end="307:31"><name pos:start="307:21" pos:end="307:21">n</name> <operator pos:start="307:23" pos:end="307:23">=</operator> <name pos:start="307:25" pos:end="307:29">laces</name><operator pos:start="307:30" pos:end="307:30">-</operator><literal type="number" pos:start="307:31" pos:end="307:31">1</literal></expr>;</expr_stmt>

                    <break pos:start="309:21" pos:end="309:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="313:17" pos:end="313:66"><expr pos:start="313:17" pos:end="313:65"><call pos:start="313:17" pos:end="313:65"><name pos:start="313:17" pos:end="313:22">memcpy</name> <argument_list pos:start="313:24" pos:end="313:65">(<argument pos:start="313:25" pos:end="313:33"><expr pos:start="313:25" pos:end="313:33"><name pos:start="313:25" pos:end="313:33"><name pos:start="313:25" pos:end="313:27">pkt</name><operator pos:start="313:28" pos:end="313:29">-&gt;</operator><name pos:start="313:30" pos:end="313:33">data</name></name></expr></argument>, <argument pos:start="313:36" pos:end="313:52"><expr pos:start="313:36" pos:end="313:52"><name pos:start="313:36" pos:end="313:39">data</name><operator pos:start="313:40" pos:end="313:40">+</operator><name pos:start="313:41" pos:end="313:52">slice_offset</name></expr></argument>, <argument pos:start="313:55" pos:end="313:64"><expr pos:start="313:55" pos:end="313:64"><name pos:start="313:55" pos:end="313:64">slice_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="317:17" pos:end="319:45"><if pos:start="317:17" pos:end="319:45">if <condition pos:start="317:20" pos:end="317:27">(<expr pos:start="317:21" pos:end="317:26"><name pos:start="317:21" pos:end="317:21">n</name> <operator pos:start="317:23" pos:end="317:24">==</operator> <literal type="number" pos:start="317:26" pos:end="317:26">0</literal></expr>)</condition><block type="pseudo" pos:start="319:21" pos:end="319:45"><block_content pos:start="319:21" pos:end="319:45">

                    <expr_stmt pos:start="319:21" pos:end="319:45"><expr pos:start="319:21" pos:end="319:44"><name pos:start="319:21" pos:end="319:30"><name pos:start="319:21" pos:end="319:23">pkt</name><operator pos:start="319:24" pos:end="319:25">-&gt;</operator><name pos:start="319:26" pos:end="319:30">flags</name></name> <operator pos:start="319:32" pos:end="319:32">=</operator> <name pos:start="319:34" pos:end="319:44">is_keyframe</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="321:17" pos:end="321:74"><expr pos:start="321:17" pos:end="321:73"><name pos:start="321:17" pos:end="321:33"><name pos:start="321:17" pos:end="321:19">pkt</name><operator pos:start="321:20" pos:end="321:21">-&gt;</operator><name pos:start="321:22" pos:end="321:33">stream_index</name></name> <operator pos:start="321:35" pos:end="321:35">=</operator> <name pos:start="321:37" pos:end="321:59"><name pos:start="321:37" pos:end="321:44">matroska</name><operator pos:start="321:45" pos:end="321:46">-&gt;</operator><name pos:start="321:47" pos:end="321:52">tracks</name><index pos:start="321:53" pos:end="321:59">[<expr pos:start="321:54" pos:end="321:58"><name pos:start="321:54" pos:end="321:58">track</name></expr>]</index></name><operator pos:start="321:60" pos:end="321:61">-&gt;</operator><name pos:start="321:62" pos:end="321:73">stream_index</name></expr>;</expr_stmt>



                <expr_stmt pos:start="325:17" pos:end="325:36"><expr pos:start="325:17" pos:end="325:35"><name pos:start="325:17" pos:end="325:24"><name pos:start="325:17" pos:end="325:19">pkt</name><operator pos:start="325:20" pos:end="325:21">-&gt;</operator><name pos:start="325:22" pos:end="325:24">pts</name></name> <operator pos:start="325:26" pos:end="325:26">=</operator> <name pos:start="325:28" pos:end="325:35">timecode</name></expr>;</expr_stmt>

                <expr_stmt pos:start="327:17" pos:end="327:31"><expr pos:start="327:17" pos:end="327:30"><name pos:start="327:17" pos:end="327:24"><name pos:start="327:17" pos:end="327:19">pkt</name><operator pos:start="327:20" pos:end="327:21">-&gt;</operator><name pos:start="327:22" pos:end="327:24">pos</name></name> <operator pos:start="327:26" pos:end="327:26">=</operator> <name pos:start="327:28" pos:end="327:30">pos</name></expr>;</expr_stmt>



                <expr_stmt pos:start="331:17" pos:end="331:53"><expr pos:start="331:17" pos:end="331:52"><call pos:start="331:17" pos:end="331:52"><name pos:start="331:17" pos:end="331:37">matroska_queue_packet</name><argument_list pos:start="331:38" pos:end="331:52">(<argument pos:start="331:39" pos:end="331:46"><expr pos:start="331:39" pos:end="331:46"><name pos:start="331:39" pos:end="331:46">matroska</name></expr></argument>, <argument pos:start="331:49" pos:end="331:51"><expr pos:start="331:49" pos:end="331:51"><name pos:start="331:49" pos:end="331:51">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="335:13" pos:end="335:33"><expr pos:start="335:13" pos:end="335:32"><name pos:start="335:13" pos:end="335:16">data</name> <operator pos:start="335:18" pos:end="335:19">+=</operator> <name pos:start="335:21" pos:end="335:32"><name pos:start="335:21" pos:end="335:29">lace_size</name><index pos:start="335:30" pos:end="335:32">[<expr pos:start="335:31" pos:end="335:31"><name pos:start="335:31" pos:end="335:31">n</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="343:5" pos:end="343:23"><expr pos:start="343:5" pos:end="343:22"><call pos:start="343:5" pos:end="343:22"><name pos:start="343:5" pos:end="343:11">av_free</name><argument_list pos:start="343:12" pos:end="343:22">(<argument pos:start="343:13" pos:end="343:21"><expr pos:start="343:13" pos:end="343:21"><name pos:start="343:13" pos:end="343:21">lace_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:22"><expr pos:start="345:5" pos:end="345:21"><call pos:start="345:5" pos:end="345:21"><name pos:start="345:5" pos:end="345:11">av_free</name><argument_list pos:start="345:12" pos:end="345:21">(<argument pos:start="345:13" pos:end="345:20"><expr pos:start="345:13" pos:end="345:20"><name pos:start="345:13" pos:end="345:20">origdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="347:5" pos:end="347:15">return <expr pos:start="347:12" pos:end="347:14"><name pos:start="347:12" pos:end="347:14">res</name></expr>;</return>

</block_content>}</block>
</unit>
