<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3520.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">v9fs_synth_name_to_path</name><parameter_list pos:start="1:35" pos:end="3:70">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:44">FsContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:69"><decl pos:start="1:52" pos:end="1:69"><type pos:start="1:52" pos:end="1:69"><name pos:start="1:52" pos:end="1:59">V9fsPath</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:69">dir_path</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:51"><decl pos:start="3:36" pos:end="3:51"><type pos:start="3:36" pos:end="3:51"><specifier pos:start="3:36" pos:end="3:40">const</specifier> <name pos:start="3:42" pos:end="3:45">char</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:51">name</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:69"><decl pos:start="3:54" pos:end="3:69"><type pos:start="3:54" pos:end="3:69"><name pos:start="3:54" pos:end="3:61">V9fsPath</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:69">target</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:13">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">V9fsSynthNode</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:23">node</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">V9fsSynthNode</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:27">dir_node</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:38">/* "." and ".." are not allowed */</comment>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:50">(<expr pos:start="15:9" pos:end="15:49"><operator pos:start="15:9" pos:end="15:9">!</operator><call pos:start="15:10" pos:end="15:26"><name pos:start="15:10" pos:end="15:15">strcmp</name><argument_list pos:start="15:16" pos:end="15:26">(<argument pos:start="15:17" pos:end="15:20"><expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">name</name></expr></argument>, <argument pos:start="15:23" pos:end="15:25"><expr pos:start="15:23" pos:end="15:25"><literal type="string" pos:start="15:23" pos:end="15:25">"."</literal></expr></argument>)</argument_list></call> <operator pos:start="15:28" pos:end="15:29">||</operator> <operator pos:start="15:31" pos:end="15:31">!</operator><call pos:start="15:32" pos:end="15:49"><name pos:start="15:32" pos:end="15:37">strcmp</name><argument_list pos:start="15:38" pos:end="15:49">(<argument pos:start="15:39" pos:end="15:42"><expr pos:start="15:39" pos:end="15:42"><name pos:start="15:39" pos:end="15:42">name</name></expr></argument>, <argument pos:start="15:45" pos:end="15:48"><expr pos:start="15:45" pos:end="15:48"><literal type="string" pos:start="15:45" pos:end="15:48">".."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:52" pos:end="23:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:23"><expr pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:13">errno</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>



    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:18">(<expr pos:start="25:9" pos:end="25:17"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:17">dir_path</name></expr>)</condition> <block pos:start="25:20" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:36">

        <expr_stmt pos:start="27:9" pos:end="27:36"><expr pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:16">dir_node</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <operator pos:start="27:20" pos:end="27:20">&amp;</operator><name pos:start="27:21" pos:end="27:35">v9fs_synth_root</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="33:5">else <block pos:start="29:12" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:53">

        <expr_stmt pos:start="31:9" pos:end="31:53"><expr pos:start="31:9" pos:end="31:52"><name pos:start="31:9" pos:end="31:16">dir_node</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <operator pos:start="31:20" pos:end="31:20">*</operator><operator pos:start="31:21" pos:end="31:21">(</operator><name pos:start="31:22" pos:end="31:34">V9fsSynthNode</name> <operator pos:start="31:36" pos:end="31:36">*</operator><operator pos:start="31:37" pos:end="31:37">*</operator><operator pos:start="31:38" pos:end="31:38">)</operator><name pos:start="31:39" pos:end="31:52"><name pos:start="31:39" pos:end="31:46">dir_path</name><operator pos:start="31:47" pos:end="31:48">-&gt;</operator><name pos:start="31:49" pos:end="31:52">data</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:27">(<expr pos:start="35:9" pos:end="35:26"><operator pos:start="35:9" pos:end="35:9">!</operator><call pos:start="35:10" pos:end="35:26"><name pos:start="35:10" pos:end="35:15">strcmp</name><argument_list pos:start="35:16" pos:end="35:26">(<argument pos:start="35:17" pos:end="35:20"><expr pos:start="35:17" pos:end="35:20"><name pos:start="35:17" pos:end="35:20">name</name></expr></argument>, <argument pos:start="35:23" pos:end="35:25"><expr pos:start="35:23" pos:end="35:25"><literal type="string" pos:start="35:23" pos:end="35:25">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:29" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:17">

        <expr_stmt pos:start="37:9" pos:end="37:24"><expr pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:12">node</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <name pos:start="37:16" pos:end="37:23">dir_node</name></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:17">goto <name pos:start="39:14" pos:end="39:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="43:5" pos:end="43:45">/* search for the name in the childern */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:20"><expr pos:start="45:5" pos:end="45:19"><call pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:17">rcu_read_lock</name><argument_list pos:start="45:18" pos:end="45:19">()</argument_list></call></expr>;</expr_stmt>

    <macro pos:start="47:5" pos:end="47:50"><name pos:start="47:5" pos:end="47:17">QLIST_FOREACH</name><argument_list pos:start="47:18" pos:end="47:50">(<argument pos:start="47:19" pos:end="47:22">node</argument>, <argument pos:start="47:25" pos:end="47:40">&amp;dir_node-&gt;child</argument>, <argument pos:start="47:43" pos:end="47:49">sibling</argument>)</argument_list></macro> <block pos:start="47:52" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:9">

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:38">(<expr pos:start="49:13" pos:end="49:37"><operator pos:start="49:13" pos:end="49:13">!</operator><call pos:start="49:14" pos:end="49:37"><name pos:start="49:14" pos:end="49:19">strcmp</name><argument_list pos:start="49:20" pos:end="49:37">(<argument pos:start="49:21" pos:end="49:30"><expr pos:start="49:21" pos:end="49:30"><name pos:start="49:21" pos:end="49:30"><name pos:start="49:21" pos:end="49:24">node</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:30">name</name></name></expr></argument>, <argument pos:start="49:33" pos:end="49:36"><expr pos:start="49:33" pos:end="49:36"><name pos:start="49:33" pos:end="49:36">name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:40" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:18">

            <break pos:start="51:13" pos:end="51:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="57:5" pos:end="57:22"><expr pos:start="57:5" pos:end="57:21"><call pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:19">rcu_read_unlock</name><argument_list pos:start="57:20" pos:end="57:21">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:14">(<expr pos:start="61:9" pos:end="61:13"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:13">node</name></expr>)</condition> <block pos:start="61:16" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:18">

        <expr_stmt pos:start="63:9" pos:end="63:23"><expr pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:13">errno</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <name pos:start="63:17" pos:end="63:22">ENOENT</name></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<label pos:start="69:1" pos:end="69:4"><name pos:start="69:1" pos:end="69:3">out</name>:</label>

    <comment type="block" pos:start="71:5" pos:end="71:38">/* Copy the node pointer to fid */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:44"><expr pos:start="73:5" pos:end="73:43"><name pos:start="73:5" pos:end="73:16"><name pos:start="73:5" pos:end="73:10">target</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:16">data</name></name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:43"><name pos:start="73:20" pos:end="73:27">g_malloc</name><argument_list pos:start="73:28" pos:end="73:43">(<argument pos:start="73:29" pos:end="73:42"><expr pos:start="73:29" pos:end="73:42"><sizeof pos:start="73:29" pos:end="73:42">sizeof<argument_list pos:start="73:35" pos:end="73:42">(<argument pos:start="73:36" pos:end="73:41"><expr pos:start="73:36" pos:end="73:41"><name pos:start="73:36" pos:end="73:39">void</name> <operator pos:start="73:41" pos:end="73:41">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:48"><expr pos:start="75:5" pos:end="75:47"><call pos:start="75:5" pos:end="75:47"><name pos:start="75:5" pos:end="75:10">memcpy</name><argument_list pos:start="75:11" pos:end="75:47">(<argument pos:start="75:12" pos:end="75:23"><expr pos:start="75:12" pos:end="75:23"><name pos:start="75:12" pos:end="75:23"><name pos:start="75:12" pos:end="75:17">target</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:23">data</name></name></expr></argument>, <argument pos:start="75:26" pos:end="75:30"><expr pos:start="75:26" pos:end="75:30"><operator pos:start="75:26" pos:end="75:26">&amp;</operator><name pos:start="75:27" pos:end="75:30">node</name></expr></argument>, <argument pos:start="75:33" pos:end="75:46"><expr pos:start="75:33" pos:end="75:46"><sizeof pos:start="75:33" pos:end="75:46">sizeof<argument_list pos:start="75:39" pos:end="75:46">(<argument pos:start="75:40" pos:end="75:45"><expr pos:start="75:40" pos:end="75:45"><name pos:start="75:40" pos:end="75:43">void</name> <operator pos:start="75:45" pos:end="75:45">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:34"><expr pos:start="77:5" pos:end="77:33"><name pos:start="77:5" pos:end="77:16"><name pos:start="77:5" pos:end="77:10">target</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:16">size</name></name> <operator pos:start="77:18" pos:end="77:18">=</operator> <sizeof pos:start="77:20" pos:end="77:33">sizeof<argument_list pos:start="77:26" pos:end="77:33">(<argument pos:start="77:27" pos:end="77:32"><expr pos:start="77:27" pos:end="77:32"><name pos:start="77:27" pos:end="77:30">void</name> <operator pos:start="77:32" pos:end="77:32">*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
