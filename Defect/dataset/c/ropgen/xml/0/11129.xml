<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11129.c" pos:tabs="8"><function pos:start="1:1" pos:end="971:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">decode_mb_cabac</name><parameter_list pos:start="1:27" pos:end="1:42">(<parameter pos:start="1:28" pos:end="1:41"><decl pos:start="1:28" pos:end="1:41"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:38">H264Context</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">h</name></decl></parameter>)</parameter_list> <block pos:start="1:44" pos:end="971:1">{<block_content pos:start="3:5" pos:end="969:13">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:51"><type pos:start="5:5" pos:end="5:13"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:13">int</name></type> <name pos:start="5:15" pos:end="5:19">mb_xy</name><init pos:start="5:20" pos:end="5:51">= <expr pos:start="5:22" pos:end="5:51"><name pos:start="5:22" pos:end="5:28"><name pos:start="5:22" pos:end="5:22">s</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:28">mb_x</name></name> <operator pos:start="5:30" pos:end="5:30">+</operator> <name pos:start="5:32" pos:end="5:38"><name pos:start="5:32" pos:end="5:32">s</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:38">mb_y</name></name><operator pos:start="5:39" pos:end="5:39">*</operator><name pos:start="5:40" pos:end="5:51"><name pos:start="5:40" pos:end="5:40">s</name><operator pos:start="5:41" pos:end="5:42">-&gt;</operator><name pos:start="5:43" pos:end="5:51">mb_stride</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">mb_type</name></decl>, <decl pos:start="7:18" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:32">partition_count</name></decl>, <decl pos:start="7:35" pos:end="7:41"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:35" pos:end="7:37">cbp</name> <init pos:start="7:39" pos:end="7:41">= <expr pos:start="7:41" pos:end="7:41"><literal type="number" pos:start="7:41" pos:end="7:41">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:50"><decl pos:start="9:5" pos:end="9:49"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:22">dct8x8_allowed</name><init pos:start="9:23" pos:end="9:49">= <expr pos:start="9:25" pos:end="9:49"><name pos:start="9:25" pos:end="9:49"><name pos:start="9:25" pos:end="9:25">h</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:30">pps</name><operator pos:start="9:31" pos:end="9:31">.</operator><name pos:start="9:32" pos:end="9:49">transform_8x8_mode</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><call pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:10">dsp</name><operator pos:start="13:11" pos:end="13:11">.</operator><name pos:start="13:12" pos:end="13:23">clear_blocks</name></name><argument_list pos:start="13:24" pos:end="13:30">(<argument pos:start="13:25" pos:end="13:29"><expr pos:start="13:25" pos:end="13:29"><name pos:start="13:25" pos:end="13:29"><name pos:start="13:25" pos:end="13:25">h</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:29">mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="13:33" pos:end="13:90">//FIXME avoid if already clear (move after skip handlong?)</comment>



    <expr_stmt pos:start="17:5" pos:end="17:65"><expr pos:start="17:5" pos:end="17:64"><call pos:start="17:5" pos:end="17:64"><name pos:start="17:5" pos:end="17:11">tprintf</name><argument_list pos:start="17:12" pos:end="17:64">(<argument pos:start="17:13" pos:end="17:31"><expr pos:start="17:13" pos:end="17:31"><literal type="string" pos:start="17:13" pos:end="17:31">"pic:%d mb:%d/%d\n"</literal></expr></argument>, <argument pos:start="17:34" pos:end="17:45"><expr pos:start="17:34" pos:end="17:45"><name pos:start="17:34" pos:end="17:45"><name pos:start="17:34" pos:end="17:34">h</name><operator pos:start="17:35" pos:end="17:36">-&gt;</operator><name pos:start="17:37" pos:end="17:45">frame_num</name></name></expr></argument>, <argument pos:start="17:48" pos:end="17:54"><expr pos:start="17:48" pos:end="17:54"><name pos:start="17:48" pos:end="17:54"><name pos:start="17:48" pos:end="17:48">s</name><operator pos:start="17:49" pos:end="17:50">-&gt;</operator><name pos:start="17:51" pos:end="17:54">mb_x</name></name></expr></argument>, <argument pos:start="17:57" pos:end="17:63"><expr pos:start="17:57" pos:end="17:63"><name pos:start="17:57" pos:end="17:63"><name pos:start="17:57" pos:end="17:57">s</name><operator pos:start="17:58" pos:end="17:59">-&gt;</operator><name pos:start="17:60" pos:end="17:63">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="77:5"><if pos:start="19:5" pos:end="77:5">if<condition pos:start="19:7" pos:end="19:61">( <expr pos:start="19:9" pos:end="19:59"><name pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:9">h</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:21">slice_type</name></name> <operator pos:start="19:23" pos:end="19:24">!=</operator> <name pos:start="19:26" pos:end="19:31">I_TYPE</name> <operator pos:start="19:33" pos:end="19:34">&amp;&amp;</operator> <name pos:start="19:36" pos:end="19:48"><name pos:start="19:36" pos:end="19:36">h</name><operator pos:start="19:37" pos:end="19:38">-&gt;</operator><name pos:start="19:39" pos:end="19:48">slice_type</name></name> <operator pos:start="19:50" pos:end="19:51">!=</operator> <name pos:start="19:53" pos:end="19:59">SI_TYPE</name></expr> )</condition> <block pos:start="19:63" pos:end="77:5">{<block_content pos:start="21:9" pos:end="75:9">

        <decl_stmt pos:start="21:9" pos:end="21:17"><decl pos:start="21:9" pos:end="21:16"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:16">skip</name></decl>;</decl_stmt>

        <comment type="block" pos:start="23:9" pos:end="23:67">/* a skipped mb needs the aff flag from the following mb */</comment>

        <if_stmt pos:start="25:9" pos:end="27:43"><if pos:start="25:9" pos:end="27:43">if<condition pos:start="25:11" pos:end="25:57">( <expr pos:start="25:13" pos:end="25:55"><name pos:start="25:13" pos:end="25:23">FRAME_MBAFF</name> <operator pos:start="25:25" pos:end="25:26">&amp;&amp;</operator> <name pos:start="25:28" pos:end="25:34"><name pos:start="25:28" pos:end="25:28">s</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:34">mb_x</name></name><operator pos:start="25:35" pos:end="25:36">==</operator><literal type="number" pos:start="25:37" pos:end="25:37">0</literal> <operator pos:start="25:39" pos:end="25:40">&amp;&amp;</operator> <operator pos:start="25:42" pos:end="25:42">(</operator><name pos:start="25:43" pos:end="25:49"><name pos:start="25:43" pos:end="25:43">s</name><operator pos:start="25:44" pos:end="25:45">-&gt;</operator><name pos:start="25:46" pos:end="25:49">mb_y</name></name><operator pos:start="25:50" pos:end="25:50">&amp;</operator><literal type="number" pos:start="25:51" pos:end="25:51">1</literal><operator pos:start="25:52" pos:end="25:52">)</operator><operator pos:start="25:53" pos:end="25:54">==</operator><literal type="number" pos:start="25:55" pos:end="25:55">0</literal></expr> )</condition><block type="pseudo" pos:start="27:13" pos:end="27:43"><block_content pos:start="27:13" pos:end="27:43">

            <expr_stmt pos:start="27:13" pos:end="27:43"><expr pos:start="27:13" pos:end="27:42"><call pos:start="27:13" pos:end="27:42"><name pos:start="27:13" pos:end="27:39">predict_field_decoding_flag</name><argument_list pos:start="27:40" pos:end="27:42">(<argument pos:start="27:41" pos:end="27:41"><expr pos:start="27:41" pos:end="27:41"><name pos:start="27:41" pos:end="27:41">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="35:63"><if pos:start="29:9" pos:end="31:38">if<condition pos:start="29:11" pos:end="29:65">( <expr pos:start="29:13" pos:end="29:63"><name pos:start="29:13" pos:end="29:23">FRAME_MBAFF</name> <operator pos:start="29:25" pos:end="29:26">&amp;&amp;</operator> <operator pos:start="29:28" pos:end="29:28">(</operator><name pos:start="29:29" pos:end="29:35"><name pos:start="29:29" pos:end="29:29">s</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:35">mb_y</name></name><operator pos:start="29:36" pos:end="29:36">&amp;</operator><literal type="number" pos:start="29:37" pos:end="29:37">1</literal><operator pos:start="29:38" pos:end="29:38">)</operator><operator pos:start="29:39" pos:end="29:40">==</operator><literal type="number" pos:start="29:41" pos:end="29:41">1</literal> <operator pos:start="29:43" pos:end="29:44">&amp;&amp;</operator> <name pos:start="29:46" pos:end="29:63"><name pos:start="29:46" pos:end="29:46">h</name><operator pos:start="29:47" pos:end="29:48">-&gt;</operator><name pos:start="29:49" pos:end="29:63">prev_mb_skipped</name></name></expr> )</condition><block type="pseudo" pos:start="31:13" pos:end="31:38"><block_content pos:start="31:13" pos:end="31:38">

            <expr_stmt pos:start="31:13" pos:end="31:38"><expr pos:start="31:13" pos:end="31:37"><name pos:start="31:13" pos:end="31:16">skip</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:37"><name pos:start="31:20" pos:end="31:20">h</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:37">next_mb_skipped</name></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="33:9" pos:end="35:63">else<block type="pseudo" pos:start="35:13" pos:end="35:63"><block_content pos:start="35:13" pos:end="35:63">

            <expr_stmt pos:start="35:13" pos:end="35:63"><expr pos:start="35:13" pos:end="35:62"><name pos:start="35:13" pos:end="35:16">skip</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <call pos:start="35:20" pos:end="35:62"><name pos:start="35:20" pos:end="35:39">decode_cabac_mb_skip</name><argument_list pos:start="35:40" pos:end="35:62">( <argument pos:start="35:42" pos:end="35:42"><expr pos:start="35:42" pos:end="35:42"><name pos:start="35:42" pos:end="35:42">h</name></expr></argument>, <argument pos:start="35:45" pos:end="35:51"><expr pos:start="35:45" pos:end="35:51"><name pos:start="35:45" pos:end="35:51"><name pos:start="35:45" pos:end="35:45">s</name><operator pos:start="35:46" pos:end="35:47">-&gt;</operator><name pos:start="35:48" pos:end="35:51">mb_x</name></name></expr></argument>, <argument pos:start="35:54" pos:end="35:60"><expr pos:start="35:54" pos:end="35:60"><name pos:start="35:54" pos:end="35:60"><name pos:start="35:54" pos:end="35:54">s</name><operator pos:start="35:55" pos:end="35:56">-&gt;</operator><name pos:start="35:57" pos:end="35:60">mb_y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block" pos:start="37:9" pos:end="37:29">/* read skip flags */</comment>

        <if_stmt pos:start="39:9" pos:end="75:9"><if pos:start="39:9" pos:end="75:9">if<condition pos:start="39:11" pos:end="39:18">( <expr pos:start="39:13" pos:end="39:16"><name pos:start="39:13" pos:end="39:16">skip</name></expr> )</condition> <block pos:start="39:20" pos:end="75:9">{<block_content pos:start="41:13" pos:end="71:21">

            <if_stmt pos:start="41:13" pos:end="55:13"><if pos:start="41:13" pos:end="55:13">if<condition pos:start="41:15" pos:end="41:47">( <expr pos:start="41:17" pos:end="41:45"><name pos:start="41:17" pos:end="41:27">FRAME_MBAFF</name> <operator pos:start="41:29" pos:end="41:30">&amp;&amp;</operator> <operator pos:start="41:32" pos:end="41:32">(</operator><name pos:start="41:33" pos:end="41:39"><name pos:start="41:33" pos:end="41:33">s</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:39">mb_y</name></name><operator pos:start="41:40" pos:end="41:40">&amp;</operator><literal type="number" pos:start="41:41" pos:end="41:41">1</literal><operator pos:start="41:42" pos:end="41:42">)</operator><operator pos:start="41:43" pos:end="41:44">==</operator><literal type="number" pos:start="41:45" pos:end="41:45">0</literal></expr> )</condition><block pos:start="41:48" pos:end="55:13">{<block_content pos:start="43:17" pos:end="53:98">

                <expr_stmt pos:start="43:17" pos:end="43:65"><expr pos:start="43:17" pos:end="43:64"><name pos:start="43:17" pos:end="43:49"><name pos:start="43:17" pos:end="43:17">s</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:34">current_picture</name><operator pos:start="43:35" pos:end="43:35">.</operator><name pos:start="43:36" pos:end="43:42">mb_type</name><index pos:start="43:43" pos:end="43:49">[<expr pos:start="43:44" pos:end="43:48"><name pos:start="43:44" pos:end="43:48">mb_xy</name></expr>]</index></name> <operator pos:start="43:51" pos:end="43:51">=</operator> <name pos:start="43:53" pos:end="43:64">MB_TYPE_SKIP</name></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:83"><expr pos:start="45:17" pos:end="45:82"><name pos:start="45:17" pos:end="45:34"><name pos:start="45:17" pos:end="45:17">h</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:34">next_mb_skipped</name></name> <operator pos:start="45:36" pos:end="45:36">=</operator> <call pos:start="45:38" pos:end="45:82"><name pos:start="45:38" pos:end="45:57">decode_cabac_mb_skip</name><argument_list pos:start="45:58" pos:end="45:82">( <argument pos:start="45:60" pos:end="45:60"><expr pos:start="45:60" pos:end="45:60"><name pos:start="45:60" pos:end="45:60">h</name></expr></argument>, <argument pos:start="45:63" pos:end="45:69"><expr pos:start="45:63" pos:end="45:69"><name pos:start="45:63" pos:end="45:69"><name pos:start="45:63" pos:end="45:63">s</name><operator pos:start="45:64" pos:end="45:65">-&gt;</operator><name pos:start="45:66" pos:end="45:69">mb_x</name></name></expr></argument>, <argument pos:start="45:72" pos:end="45:80"><expr pos:start="45:72" pos:end="45:80"><name pos:start="45:72" pos:end="45:78"><name pos:start="45:72" pos:end="45:72">s</name><operator pos:start="45:73" pos:end="45:74">-&gt;</operator><name pos:start="45:75" pos:end="45:78">mb_y</name></name><operator pos:start="45:79" pos:end="45:79">+</operator><literal type="number" pos:start="45:80" pos:end="45:80">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="47:17" pos:end="53:98"><if pos:start="47:17" pos:end="49:51">if<condition pos:start="47:19" pos:end="47:38">(<expr pos:start="47:20" pos:end="47:37"><name pos:start="47:20" pos:end="47:37"><name pos:start="47:20" pos:end="47:20">h</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:37">next_mb_skipped</name></name></expr>)</condition><block type="pseudo" pos:start="49:21" pos:end="49:51"><block_content pos:start="49:21" pos:end="49:51">

                    <expr_stmt pos:start="49:21" pos:end="49:51"><expr pos:start="49:21" pos:end="49:50"><call pos:start="49:21" pos:end="49:50"><name pos:start="49:21" pos:end="49:47">predict_field_decoding_flag</name><argument_list pos:start="49:48" pos:end="49:50">(<argument pos:start="49:49" pos:end="49:49"><expr pos:start="49:49" pos:end="49:49"><name pos:start="49:49" pos:end="49:49">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="51:17" pos:end="53:98">else<block type="pseudo" pos:start="53:21" pos:end="53:98"><block_content pos:start="53:21" pos:end="53:98">

                    <expr_stmt pos:start="53:21" pos:end="53:98"><expr pos:start="53:21" pos:end="53:97"><name pos:start="53:21" pos:end="53:31"><name pos:start="53:21" pos:end="53:21">h</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:31">mb_mbaff</name></name> <operator pos:start="53:33" pos:end="53:33">=</operator> <name pos:start="53:35" pos:end="53:59"><name pos:start="53:35" pos:end="53:35">h</name><operator pos:start="53:36" pos:end="53:37">-&gt;</operator><name pos:start="53:38" pos:end="53:59">mb_field_decoding_flag</name></name> <operator pos:start="53:61" pos:end="53:61">=</operator> <call pos:start="53:63" pos:end="53:97"><name pos:start="53:63" pos:end="53:94">decode_cabac_field_decoding_flag</name><argument_list pos:start="53:95" pos:end="53:97">(<argument pos:start="53:96" pos:end="53:96"><expr pos:start="53:96" pos:end="53:96"><name pos:start="53:96" pos:end="53:96">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="59:13" pos:end="59:30"><expr pos:start="59:13" pos:end="59:29"><call pos:start="59:13" pos:end="59:29"><name pos:start="59:13" pos:end="59:26">decode_mb_skip</name><argument_list pos:start="59:27" pos:end="59:29">(<argument pos:start="59:28" pos:end="59:28"><expr pos:start="59:28" pos:end="59:28"><name pos:start="59:28" pos:end="59:28">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="63:13" pos:end="63:36"><expr pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:13">h</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:24">cbp_table</name><index pos:start="63:25" pos:end="63:31">[<expr pos:start="63:26" pos:end="63:30"><name pos:start="63:26" pos:end="63:30">mb_xy</name></expr>]</index></name> <operator pos:start="63:33" pos:end="63:33">=</operator> <literal type="number" pos:start="63:35" pos:end="63:35">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:49"><expr pos:start="65:13" pos:end="65:48"><name pos:start="65:13" pos:end="65:44"><name pos:start="65:13" pos:end="65:13">h</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:37">chroma_pred_mode_table</name><index pos:start="65:38" pos:end="65:44">[<expr pos:start="65:39" pos:end="65:43"><name pos:start="65:39" pos:end="65:43">mb_xy</name></expr>]</index></name> <operator pos:start="65:46" pos:end="65:46">=</operator> <literal type="number" pos:start="65:48" pos:end="65:48">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:36"><expr pos:start="67:13" pos:end="67:35"><name pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:13">h</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:31">last_qscale_diff</name></name> <operator pos:start="67:33" pos:end="67:33">=</operator> <literal type="number" pos:start="67:35" pos:end="67:35">0</literal></expr>;</expr_stmt>



            <return pos:start="71:13" pos:end="71:21">return <expr pos:start="71:20" pos:end="71:20"><literal type="number" pos:start="71:20" pos:end="71:20">0</literal></expr>;</return>



        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="89:70"><if pos:start="79:5" pos:end="87:5">if<condition pos:start="79:7" pos:end="79:19">(<expr pos:start="79:8" pos:end="79:18"><name pos:start="79:8" pos:end="79:18">FRAME_MBAFF</name></expr>)</condition><block pos:start="79:20" pos:end="87:5">{<block_content pos:start="81:9" pos:end="85:76">

        <if_stmt pos:start="81:9" pos:end="85:76"><if pos:start="81:9" pos:end="85:76">if<condition pos:start="81:11" pos:end="81:30">( <expr pos:start="81:13" pos:end="81:28"><operator pos:start="81:13" pos:end="81:13">(</operator><name pos:start="81:14" pos:end="81:20"><name pos:start="81:14" pos:end="81:14">s</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:20">mb_y</name></name><operator pos:start="81:21" pos:end="81:21">&amp;</operator><literal type="number" pos:start="81:22" pos:end="81:22">1</literal><operator pos:start="81:23" pos:end="81:23">)</operator> <operator pos:start="81:25" pos:end="81:26">==</operator> <literal type="number" pos:start="81:28" pos:end="81:28">0</literal></expr> )</condition><block type="pseudo" pos:start="83:13" pos:end="85:76"><block_content pos:start="83:13" pos:end="85:76">

            <expr_stmt pos:start="83:13" pos:end="85:76"><expr pos:start="83:13" pos:end="85:75"><name pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:13">h</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:23">mb_mbaff</name></name> <operator pos:start="83:25" pos:end="83:25">=</operator>

            <name pos:start="85:13" pos:end="85:37"><name pos:start="85:13" pos:end="85:13">h</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:37">mb_field_decoding_flag</name></name> <operator pos:start="85:39" pos:end="85:39">=</operator> <call pos:start="85:41" pos:end="85:75"><name pos:start="85:41" pos:end="85:72">decode_cabac_field_decoding_flag</name><argument_list pos:start="85:73" pos:end="85:75">(<argument pos:start="85:74" pos:end="85:74"><expr pos:start="85:74" pos:end="85:74"><name pos:start="85:74" pos:end="85:74">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if><else pos:start="87:6" pos:end="89:70">else<block type="pseudo" pos:start="89:9" pos:end="89:70"><block_content pos:start="89:9" pos:end="89:70">

        <expr_stmt pos:start="89:9" pos:end="89:70"><expr pos:start="89:9" pos:end="89:69"><name pos:start="89:9" pos:end="89:33"><name pos:start="89:9" pos:end="89:9">h</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:33">mb_field_decoding_flag</name></name><operator pos:start="89:34" pos:end="89:34">=</operator> <operator pos:start="89:36" pos:end="89:36">(</operator><name pos:start="89:37" pos:end="89:56"><name pos:start="89:37" pos:end="89:37">s</name><operator pos:start="89:38" pos:end="89:39">-&gt;</operator><name pos:start="89:40" pos:end="89:56">picture_structure</name></name><operator pos:start="89:57" pos:end="89:58">!=</operator><name pos:start="89:59" pos:end="89:68">PICT_FRAME</name><operator pos:start="89:69" pos:end="89:69">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:27"><expr pos:start="93:5" pos:end="93:26"><name pos:start="93:5" pos:end="93:22"><name pos:start="93:5" pos:end="93:5">h</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:22">prev_mb_skipped</name></name> <operator pos:start="93:24" pos:end="93:24">=</operator> <literal type="number" pos:start="93:26" pos:end="93:26">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:28"><expr pos:start="97:5" pos:end="97:27"><call pos:start="97:5" pos:end="97:27"><name pos:start="97:5" pos:end="97:24">compute_mb_neighbors</name><argument_list pos:start="97:25" pos:end="97:27">(<argument pos:start="97:26" pos:end="97:26"><expr pos:start="97:26" pos:end="97:26"><name pos:start="97:26" pos:end="97:26">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if<condition pos:start="99:7" pos:end="99:53">( <expr pos:start="99:9" pos:end="99:51"><operator pos:start="99:9" pos:end="99:9">(</operator> <name pos:start="99:11" pos:end="99:17">mb_type</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <call pos:start="99:21" pos:end="99:45"><name pos:start="99:21" pos:end="99:40">decode_cabac_mb_type</name><argument_list pos:start="99:41" pos:end="99:45">( <argument pos:start="99:43" pos:end="99:43"><expr pos:start="99:43" pos:end="99:43"><name pos:start="99:43" pos:end="99:43">h</name></expr></argument> )</argument_list></call> <operator pos:start="99:47" pos:end="99:47">)</operator> <operator pos:start="99:49" pos:end="99:49">&lt;</operator> <literal type="number" pos:start="99:51" pos:end="99:51">0</literal></expr> )</condition> <block pos:start="99:55" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:18">

        <expr_stmt pos:start="101:9" pos:end="101:76"><expr pos:start="101:9" pos:end="101:75"><call pos:start="101:9" pos:end="101:75"><name pos:start="101:9" pos:end="101:14">av_log</name><argument_list pos:start="101:15" pos:end="101:75">( <argument pos:start="101:17" pos:end="101:26"><expr pos:start="101:17" pos:end="101:26"><name pos:start="101:17" pos:end="101:26"><name pos:start="101:17" pos:end="101:17">h</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:20">s</name><operator pos:start="101:21" pos:end="101:21">.</operator><name pos:start="101:22" pos:end="101:26">avctx</name></name></expr></argument>, <argument pos:start="101:29" pos:end="101:40"><expr pos:start="101:29" pos:end="101:40"><name pos:start="101:29" pos:end="101:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:43" pos:end="101:73"><expr pos:start="101:43" pos:end="101:73"><literal type="string" pos:start="101:43" pos:end="101:73">"decode_cabac_mb_type failed\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:18">return <expr pos:start="103:16" pos:end="103:17"><operator pos:start="103:16" pos:end="103:16">-</operator><literal type="number" pos:start="103:17" pos:end="103:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="155:5"><if pos:start="109:5" pos:end="125:5">if<condition pos:start="109:7" pos:end="109:33">( <expr pos:start="109:9" pos:end="109:31"><name pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:9">h</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:21">slice_type</name></name> <operator pos:start="109:23" pos:end="109:24">==</operator> <name pos:start="109:26" pos:end="109:31">B_TYPE</name></expr> )</condition> <block pos:start="109:35" pos:end="125:5">{<block_content pos:start="111:9" pos:end="123:9">

        <if_stmt pos:start="111:9" pos:end="123:9"><if pos:start="111:9" pos:end="117:9">if<condition pos:start="111:11" pos:end="111:26">( <expr pos:start="111:13" pos:end="111:24"><name pos:start="111:13" pos:end="111:19">mb_type</name> <operator pos:start="111:21" pos:end="111:21">&lt;</operator> <literal type="number" pos:start="111:23" pos:end="111:24">23</literal></expr> )</condition><block pos:start="111:27" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:58">

            <expr_stmt pos:start="113:13" pos:end="113:69"><expr pos:start="113:13" pos:end="113:68"><name pos:start="113:13" pos:end="113:27">partition_count</name><operator pos:start="113:28" pos:end="113:28">=</operator> <name pos:start="113:30" pos:end="113:52"><name pos:start="113:30" pos:end="113:43">b_mb_type_info</name><index pos:start="113:44" pos:end="113:52">[<expr pos:start="113:45" pos:end="113:51"><name pos:start="113:45" pos:end="113:51">mb_type</name></expr>]</index></name><operator pos:start="113:53" pos:end="113:53">.</operator><name pos:start="113:54" pos:end="113:68">partition_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:58"><expr pos:start="115:13" pos:end="115:57"><name pos:start="115:13" pos:end="115:19">mb_type</name><operator pos:start="115:20" pos:end="115:20">=</operator>         <name pos:start="115:30" pos:end="115:52"><name pos:start="115:30" pos:end="115:43">b_mb_type_info</name><index pos:start="115:44" pos:end="115:52">[<expr pos:start="115:45" pos:end="115:51"><name pos:start="115:45" pos:end="115:51">mb_type</name></expr>]</index></name><operator pos:start="115:53" pos:end="115:53">.</operator><name pos:start="115:54" pos:end="115:57">type</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="117:10" pos:end="123:9">else<block pos:start="117:14" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:33">

            <expr_stmt pos:start="119:13" pos:end="119:26"><expr pos:start="119:13" pos:end="119:25"><name pos:start="119:13" pos:end="119:19">mb_type</name> <operator pos:start="119:21" pos:end="119:22">-=</operator> <literal type="number" pos:start="119:24" pos:end="119:25">23</literal></expr>;</expr_stmt>

            <goto pos:start="121:13" pos:end="121:33">goto <name pos:start="121:18" pos:end="121:32">decode_intra_mb</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="125:7" pos:end="141:5">else if<condition pos:start="125:14" pos:end="125:40">( <expr pos:start="125:16" pos:end="125:38"><name pos:start="125:16" pos:end="125:28"><name pos:start="125:16" pos:end="125:16">h</name><operator pos:start="125:17" pos:end="125:18">-&gt;</operator><name pos:start="125:19" pos:end="125:28">slice_type</name></name> <operator pos:start="125:30" pos:end="125:31">==</operator> <name pos:start="125:33" pos:end="125:38">P_TYPE</name></expr> )</condition> <block pos:start="125:42" pos:end="141:5">{<block_content pos:start="127:9" pos:end="139:9">

        <if_stmt pos:start="127:9" pos:end="139:9"><if pos:start="127:9" pos:end="133:9">if<condition pos:start="127:11" pos:end="127:24">( <expr pos:start="127:13" pos:end="127:23"><name pos:start="127:13" pos:end="127:19">mb_type</name> <operator pos:start="127:21" pos:end="127:21">&lt;</operator> <literal type="number" pos:start="127:23" pos:end="127:23">5</literal></expr>)</condition> <block pos:start="127:26" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:58">

            <expr_stmt pos:start="129:13" pos:end="129:69"><expr pos:start="129:13" pos:end="129:68"><name pos:start="129:13" pos:end="129:27">partition_count</name><operator pos:start="129:28" pos:end="129:28">=</operator> <name pos:start="129:30" pos:end="129:52"><name pos:start="129:30" pos:end="129:43">p_mb_type_info</name><index pos:start="129:44" pos:end="129:52">[<expr pos:start="129:45" pos:end="129:51"><name pos:start="129:45" pos:end="129:51">mb_type</name></expr>]</index></name><operator pos:start="129:53" pos:end="129:53">.</operator><name pos:start="129:54" pos:end="129:68">partition_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:58"><expr pos:start="131:13" pos:end="131:57"><name pos:start="131:13" pos:end="131:19">mb_type</name><operator pos:start="131:20" pos:end="131:20">=</operator>         <name pos:start="131:30" pos:end="131:52"><name pos:start="131:30" pos:end="131:43">p_mb_type_info</name><index pos:start="131:44" pos:end="131:52">[<expr pos:start="131:45" pos:end="131:51"><name pos:start="131:45" pos:end="131:51">mb_type</name></expr>]</index></name><operator pos:start="131:53" pos:end="131:53">.</operator><name pos:start="131:54" pos:end="131:57">type</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="133:11" pos:end="139:9">else <block pos:start="133:16" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:33">

            <expr_stmt pos:start="135:13" pos:end="135:25"><expr pos:start="135:13" pos:end="135:24"><name pos:start="135:13" pos:end="135:19">mb_type</name> <operator pos:start="135:21" pos:end="135:22">-=</operator> <literal type="number" pos:start="135:24" pos:end="135:24">5</literal></expr>;</expr_stmt>

            <goto pos:start="137:13" pos:end="137:33">goto <name pos:start="137:18" pos:end="137:32">decode_intra_mb</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="155:5">else <block pos:start="141:12" pos:end="155:5">{<block_content pos:start="143:8" pos:end="153:46">

       <expr_stmt pos:start="143:8" pos:end="143:39"><expr pos:start="143:8" pos:end="143:38"><call pos:start="143:8" pos:end="143:38"><name pos:start="143:8" pos:end="143:13">assert</name><argument_list pos:start="143:14" pos:end="143:38">(<argument pos:start="143:15" pos:end="143:37"><expr pos:start="143:15" pos:end="143:37"><name pos:start="143:15" pos:end="143:27"><name pos:start="143:15" pos:end="143:15">h</name><operator pos:start="143:16" pos:end="143:17">-&gt;</operator><name pos:start="143:18" pos:end="143:27">slice_type</name></name> <operator pos:start="143:29" pos:end="143:30">==</operator> <name pos:start="143:32" pos:end="143:37">I_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="145:1" pos:end="145:16"><name pos:start="145:1" pos:end="145:15">decode_intra_mb</name>:</label>

        <expr_stmt pos:start="147:9" pos:end="147:28"><expr pos:start="147:9" pos:end="147:27"><name pos:start="147:9" pos:end="147:23">partition_count</name> <operator pos:start="147:25" pos:end="147:25">=</operator> <literal type="number" pos:start="147:27" pos:end="147:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:41"><expr pos:start="149:9" pos:end="149:40"><name pos:start="149:9" pos:end="149:11">cbp</name><operator pos:start="149:12" pos:end="149:12">=</operator> <name pos:start="149:14" pos:end="149:36"><name pos:start="149:14" pos:end="149:27">i_mb_type_info</name><index pos:start="149:28" pos:end="149:36">[<expr pos:start="149:29" pos:end="149:35"><name pos:start="149:29" pos:end="149:35">mb_type</name></expr>]</index></name><operator pos:start="149:37" pos:end="149:37">.</operator><name pos:start="149:38" pos:end="149:40">cbp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:67"><expr pos:start="151:9" pos:end="151:66"><name pos:start="151:9" pos:end="151:31"><name pos:start="151:9" pos:end="151:9">h</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:31">intra16x16_pred_mode</name></name><operator pos:start="151:32" pos:end="151:32">=</operator> <name pos:start="151:34" pos:end="151:56"><name pos:start="151:34" pos:end="151:47">i_mb_type_info</name><index pos:start="151:48" pos:end="151:56">[<expr pos:start="151:49" pos:end="151:55"><name pos:start="151:49" pos:end="151:55">mb_type</name></expr>]</index></name><operator pos:start="151:57" pos:end="151:57">.</operator><name pos:start="151:58" pos:end="151:66">pred_mode</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:46"><expr pos:start="153:9" pos:end="153:45"><name pos:start="153:9" pos:end="153:15">mb_type</name><operator pos:start="153:16" pos:end="153:16">=</operator> <name pos:start="153:18" pos:end="153:40"><name pos:start="153:18" pos:end="153:31">i_mb_type_info</name><index pos:start="153:32" pos:end="153:40">[<expr pos:start="153:33" pos:end="153:39"><name pos:start="153:33" pos:end="153:39">mb_type</name></expr>]</index></name><operator pos:start="153:41" pos:end="153:41">.</operator><name pos:start="153:42" pos:end="153:45">type</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="157:5" pos:end="159:38"><if pos:start="157:5" pos:end="159:38">if<condition pos:start="157:7" pos:end="157:16">(<expr pos:start="157:8" pos:end="157:15"><name pos:start="157:8" pos:end="157:15">MB_FIELD</name></expr>)</condition><block type="pseudo" pos:start="159:9" pos:end="159:38"><block_content pos:start="159:9" pos:end="159:38">

        <expr_stmt pos:start="159:9" pos:end="159:38"><expr pos:start="159:9" pos:end="159:37"><name pos:start="159:9" pos:end="159:15">mb_type</name> <operator pos:start="159:17" pos:end="159:18">|=</operator> <name pos:start="159:20" pos:end="159:37">MB_TYPE_INTERLACED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:42"><expr pos:start="163:5" pos:end="163:41"><name pos:start="163:5" pos:end="163:27"><name pos:start="163:5" pos:end="163:5">h</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:18">slice_table</name><index pos:start="163:19" pos:end="163:27">[ <expr pos:start="163:21" pos:end="163:25"><name pos:start="163:21" pos:end="163:25">mb_xy</name></expr> ]</index></name><operator pos:start="163:28" pos:end="163:28">=</operator> <name pos:start="163:30" pos:end="163:41"><name pos:start="163:30" pos:end="163:30">h</name><operator pos:start="163:31" pos:end="163:32">-&gt;</operator><name pos:start="163:33" pos:end="163:41">slice_num</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="167:5" pos:end="263:5"><if pos:start="167:5" pos:end="263:5">if<condition pos:start="167:7" pos:end="167:29">(<expr pos:start="167:8" pos:end="167:28"><call pos:start="167:8" pos:end="167:28"><name pos:start="167:8" pos:end="167:19">IS_INTRA_PCM</name><argument_list pos:start="167:20" pos:end="167:28">(<argument pos:start="167:21" pos:end="167:27"><expr pos:start="167:21" pos:end="167:27"><name pos:start="167:21" pos:end="167:27">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:31" pos:end="263:5">{<block_content pos:start="169:9" pos:end="261:17">

        <decl_stmt pos:start="169:9" pos:end="169:27"><decl pos:start="169:9" pos:end="169:26"><type pos:start="169:9" pos:end="169:23"><specifier pos:start="169:9" pos:end="169:13">const</specifier> <name pos:start="169:15" pos:end="169:21">uint8_t</name> <modifier pos:start="169:23" pos:end="169:23">*</modifier></type><name pos:start="169:24" pos:end="169:26">ptr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="171:9" pos:end="171:26"><decl pos:start="171:9" pos:end="171:22"><type pos:start="171:9" pos:end="171:20"><name pos:start="171:9" pos:end="171:16">unsigned</name> <name pos:start="171:18" pos:end="171:20">int</name></type> <name pos:start="171:22" pos:end="171:22">x</name></decl>, <decl pos:start="171:25" pos:end="171:25"><type ref="prev" pos:start="171:9" pos:end="171:20"/><name pos:start="171:25" pos:end="171:25">y</name></decl>;</decl_stmt>



        <comment type="line" pos:start="175:9" pos:end="175:71">// We assume these blocks are very rare so we dont optimize it.</comment>

        <comment type="line" pos:start="177:9" pos:end="177:80">// FIXME The two following lines get the bitstream position in the cabac</comment>

        <comment type="line" pos:start="179:9" pos:end="179:83">// decode, I think it should be done by a function in cabac.h (or cabac.c).</comment>

        <expr_stmt pos:start="181:9" pos:end="181:33"><expr pos:start="181:9" pos:end="181:32"><name pos:start="181:9" pos:end="181:11">ptr</name><operator pos:start="181:12" pos:end="181:12">=</operator> <name pos:start="181:14" pos:end="181:32"><name pos:start="181:14" pos:end="181:14">h</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:21">cabac</name><operator pos:start="181:22" pos:end="181:22">.</operator><name pos:start="181:23" pos:end="181:32">bytestream</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="183:35"><if pos:start="183:9" pos:end="183:35">if<condition pos:start="183:11" pos:end="183:28">(<expr pos:start="183:12" pos:end="183:27"><name pos:start="183:12" pos:end="183:23"><name pos:start="183:12" pos:end="183:12">h</name><operator pos:start="183:13" pos:end="183:14">-&gt;</operator><name pos:start="183:15" pos:end="183:19">cabac</name><operator pos:start="183:20" pos:end="183:20">.</operator><name pos:start="183:21" pos:end="183:23">low</name></name><operator pos:start="183:24" pos:end="183:24">&amp;</operator><literal type="number" pos:start="183:25" pos:end="183:27">0x1</literal></expr>)</condition><block type="pseudo" pos:start="183:30" pos:end="183:35"><block_content pos:start="183:30" pos:end="183:35"> <expr_stmt pos:start="183:30" pos:end="183:35"><expr pos:start="183:30" pos:end="183:34"><name pos:start="183:30" pos:end="183:32">ptr</name><operator pos:start="183:33" pos:end="183:34">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="185:9" pos:end="189:9"><if pos:start="185:9" pos:end="189:9">if<condition pos:start="185:11" pos:end="185:26">(<expr pos:start="185:12" pos:end="185:25"><name pos:start="185:12" pos:end="185:21">CABAC_BITS</name><operator pos:start="185:22" pos:end="185:23">==</operator><literal type="number" pos:start="185:24" pos:end="185:25">16</literal></expr>)</condition><block pos:start="185:27" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:41">

            <if_stmt pos:start="187:13" pos:end="187:41"><if pos:start="187:13" pos:end="187:41">if<condition pos:start="187:15" pos:end="187:34">(<expr pos:start="187:16" pos:end="187:33"><name pos:start="187:16" pos:end="187:27"><name pos:start="187:16" pos:end="187:16">h</name><operator pos:start="187:17" pos:end="187:18">-&gt;</operator><name pos:start="187:19" pos:end="187:23">cabac</name><operator pos:start="187:24" pos:end="187:24">.</operator><name pos:start="187:25" pos:end="187:27">low</name></name><operator pos:start="187:28" pos:end="187:28">&amp;</operator><literal type="number" pos:start="187:29" pos:end="187:33">0x1FF</literal></expr>)</condition><block type="pseudo" pos:start="187:36" pos:end="187:41"><block_content pos:start="187:36" pos:end="187:41"> <expr_stmt pos:start="187:36" pos:end="187:41"><expr pos:start="187:36" pos:end="187:40"><name pos:start="187:36" pos:end="187:38">ptr</name><operator pos:start="187:39" pos:end="187:40">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="193:9" pos:end="193:76">// The pixels are stored in the same order as levels in h-&gt;mb array.</comment>

        <for pos:start="195:9" pos:end="207:9">for<control pos:start="195:12" pos:end="195:27">(<init pos:start="195:13" pos:end="195:16"><expr pos:start="195:13" pos:end="195:15"><name pos:start="195:13" pos:end="195:13">y</name><operator pos:start="195:14" pos:end="195:14">=</operator><literal type="number" pos:start="195:15" pos:end="195:15">0</literal></expr>;</init> <condition pos:start="195:18" pos:end="195:22"><expr pos:start="195:18" pos:end="195:21"><name pos:start="195:18" pos:end="195:18">y</name><operator pos:start="195:19" pos:end="195:19">&lt;</operator><literal type="number" pos:start="195:20" pos:end="195:21">16</literal></expr>;</condition> <incr pos:start="195:24" pos:end="195:26"><expr pos:start="195:24" pos:end="195:26"><name pos:start="195:24" pos:end="195:24">y</name><operator pos:start="195:25" pos:end="195:26">++</operator></expr></incr>)</control><block pos:start="195:28" pos:end="207:9">{<block_content pos:start="197:13" pos:end="205:13">

            <decl_stmt pos:start="197:13" pos:end="197:66"><decl pos:start="197:13" pos:end="197:65"><type pos:start="197:13" pos:end="197:21"><specifier pos:start="197:13" pos:end="197:17">const</specifier> <name pos:start="197:19" pos:end="197:21">int</name></type> <name pos:start="197:23" pos:end="197:27">index</name><init pos:start="197:28" pos:end="197:65">= <expr pos:start="197:30" pos:end="197:65"><literal type="number" pos:start="197:30" pos:end="197:30">4</literal><operator pos:start="197:31" pos:end="197:31">*</operator><operator pos:start="197:32" pos:end="197:32">(</operator><name pos:start="197:33" pos:end="197:33">y</name><operator pos:start="197:34" pos:end="197:34">&amp;</operator><literal type="number" pos:start="197:35" pos:end="197:35">3</literal><operator pos:start="197:36" pos:end="197:36">)</operator> <operator pos:start="197:38" pos:end="197:38">+</operator> <literal type="number" pos:start="197:40" pos:end="197:41">32</literal><operator pos:start="197:42" pos:end="197:42">*</operator><operator pos:start="197:43" pos:end="197:43">(</operator><operator pos:start="197:44" pos:end="197:44">(</operator><name pos:start="197:45" pos:end="197:45">y</name><operator pos:start="197:46" pos:end="197:47">&gt;&gt;</operator><literal type="number" pos:start="197:48" pos:end="197:48">2</literal><operator pos:start="197:49" pos:end="197:49">)</operator><operator pos:start="197:50" pos:end="197:50">&amp;</operator><literal type="number" pos:start="197:51" pos:end="197:51">1</literal><operator pos:start="197:52" pos:end="197:52">)</operator> <operator pos:start="197:54" pos:end="197:54">+</operator> <literal type="number" pos:start="197:56" pos:end="197:58">128</literal><operator pos:start="197:59" pos:end="197:59">*</operator><operator pos:start="197:60" pos:end="197:60">(</operator><name pos:start="197:61" pos:end="197:61">y</name><operator pos:start="197:62" pos:end="197:63">&gt;&gt;</operator><literal type="number" pos:start="197:64" pos:end="197:64">3</literal><operator pos:start="197:65" pos:end="197:65">)</operator></expr></init></decl>;</decl_stmt>

            <for pos:start="199:13" pos:end="205:13">for<control pos:start="199:16" pos:end="199:31">(<init pos:start="199:17" pos:end="199:20"><expr pos:start="199:17" pos:end="199:19"><name pos:start="199:17" pos:end="199:17">x</name><operator pos:start="199:18" pos:end="199:18">=</operator><literal type="number" pos:start="199:19" pos:end="199:19">0</literal></expr>;</init> <condition pos:start="199:22" pos:end="199:26"><expr pos:start="199:22" pos:end="199:25"><name pos:start="199:22" pos:end="199:22">x</name><operator pos:start="199:23" pos:end="199:23">&lt;</operator><literal type="number" pos:start="199:24" pos:end="199:25">16</literal></expr>;</condition> <incr pos:start="199:28" pos:end="199:30"><expr pos:start="199:28" pos:end="199:30"><name pos:start="199:28" pos:end="199:28">x</name><operator pos:start="199:29" pos:end="199:30">++</operator></expr></incr>)</control><block pos:start="199:32" pos:end="205:13">{<block_content pos:start="201:17" pos:end="203:73">

                <expr_stmt pos:start="201:17" pos:end="201:57"><expr pos:start="201:17" pos:end="201:56"><call pos:start="201:17" pos:end="201:56"><name pos:start="201:17" pos:end="201:23">tprintf</name><argument_list pos:start="201:24" pos:end="201:56">(<argument pos:start="201:25" pos:end="201:49"><expr pos:start="201:25" pos:end="201:49"><literal type="string" pos:start="201:25" pos:end="201:49">"LUMA ICPM LEVEL (%3d)\n"</literal></expr></argument>, <argument pos:start="201:52" pos:end="201:55"><expr pos:start="201:52" pos:end="201:55"><operator pos:start="201:52" pos:end="201:52">*</operator><name pos:start="201:53" pos:end="201:55">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:73"><expr pos:start="203:17" pos:end="203:72"><name pos:start="203:17" pos:end="203:64"><name pos:start="203:17" pos:end="203:17">h</name><operator pos:start="203:18" pos:end="203:19">-&gt;</operator><name pos:start="203:20" pos:end="203:21">mb</name><index pos:start="203:22" pos:end="203:64">[<expr pos:start="203:23" pos:end="203:63"><name pos:start="203:23" pos:end="203:27">index</name> <operator pos:start="203:29" pos:end="203:29">+</operator> <operator pos:start="203:31" pos:end="203:31">(</operator><name pos:start="203:32" pos:end="203:32">x</name><operator pos:start="203:33" pos:end="203:33">&amp;</operator><literal type="number" pos:start="203:34" pos:end="203:34">3</literal><operator pos:start="203:35" pos:end="203:35">)</operator> <operator pos:start="203:37" pos:end="203:37">+</operator> <literal type="number" pos:start="203:39" pos:end="203:40">16</literal><operator pos:start="203:41" pos:end="203:41">*</operator><operator pos:start="203:42" pos:end="203:42">(</operator><operator pos:start="203:43" pos:end="203:43">(</operator><name pos:start="203:44" pos:end="203:44">x</name><operator pos:start="203:45" pos:end="203:46">&gt;&gt;</operator><literal type="number" pos:start="203:47" pos:end="203:47">2</literal><operator pos:start="203:48" pos:end="203:48">)</operator><operator pos:start="203:49" pos:end="203:49">&amp;</operator><literal type="number" pos:start="203:50" pos:end="203:50">1</literal><operator pos:start="203:51" pos:end="203:51">)</operator> <operator pos:start="203:53" pos:end="203:53">+</operator> <literal type="number" pos:start="203:55" pos:end="203:56">64</literal><operator pos:start="203:57" pos:end="203:57">*</operator><operator pos:start="203:58" pos:end="203:58">(</operator><name pos:start="203:59" pos:end="203:59">x</name><operator pos:start="203:60" pos:end="203:61">&gt;&gt;</operator><literal type="number" pos:start="203:62" pos:end="203:62">3</literal><operator pos:start="203:63" pos:end="203:63">)</operator></expr>]</index></name><operator pos:start="203:65" pos:end="203:65">=</operator> <operator pos:start="203:67" pos:end="203:67">*</operator><name pos:start="203:68" pos:end="203:70">ptr</name><operator pos:start="203:71" pos:end="203:72">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <for pos:start="209:9" pos:end="221:9">for<control pos:start="209:12" pos:end="209:26">(<init pos:start="209:13" pos:end="209:16"><expr pos:start="209:13" pos:end="209:15"><name pos:start="209:13" pos:end="209:13">y</name><operator pos:start="209:14" pos:end="209:14">=</operator><literal type="number" pos:start="209:15" pos:end="209:15">0</literal></expr>;</init> <condition pos:start="209:18" pos:end="209:21"><expr pos:start="209:18" pos:end="209:20"><name pos:start="209:18" pos:end="209:18">y</name><operator pos:start="209:19" pos:end="209:19">&lt;</operator><literal type="number" pos:start="209:20" pos:end="209:20">8</literal></expr>;</condition> <incr pos:start="209:23" pos:end="209:25"><expr pos:start="209:23" pos:end="209:25"><name pos:start="209:23" pos:end="209:23">y</name><operator pos:start="209:24" pos:end="209:25">++</operator></expr></incr>)</control><block pos:start="209:27" pos:end="221:9">{<block_content pos:start="211:13" pos:end="219:13">

            <decl_stmt pos:start="211:13" pos:end="211:55"><decl pos:start="211:13" pos:end="211:54"><type pos:start="211:13" pos:end="211:21"><specifier pos:start="211:13" pos:end="211:17">const</specifier> <name pos:start="211:19" pos:end="211:21">int</name></type> <name pos:start="211:23" pos:end="211:27">index</name><init pos:start="211:28" pos:end="211:54">= <expr pos:start="211:30" pos:end="211:54"><literal type="number" pos:start="211:30" pos:end="211:34">256</literal> <operator pos:start="211:34" pos:end="211:34">+</operator> <literal type="number" pos:start="211:36" pos:end="211:36">4</literal><operator pos:start="211:37" pos:end="211:37">*</operator><operator pos:start="211:38" pos:end="211:38">(</operator><name pos:start="211:39" pos:end="211:39">y</name><operator pos:start="211:40" pos:end="211:40">&amp;</operator><literal type="number" pos:start="211:41" pos:end="211:41">3</literal><operator pos:start="211:42" pos:end="211:42">)</operator> <operator pos:start="211:44" pos:end="211:44">+</operator> <literal type="number" pos:start="211:46" pos:end="211:47">32</literal><operator pos:start="211:48" pos:end="211:48">*</operator><operator pos:start="211:49" pos:end="211:49">(</operator><name pos:start="211:50" pos:end="211:50">y</name><operator pos:start="211:51" pos:end="211:52">&gt;&gt;</operator><literal type="number" pos:start="211:53" pos:end="211:53">2</literal><operator pos:start="211:54" pos:end="211:54">)</operator></expr></init></decl>;</decl_stmt>

            <for pos:start="213:13" pos:end="219:13">for<control pos:start="213:16" pos:end="213:30">(<init pos:start="213:17" pos:end="213:20"><expr pos:start="213:17" pos:end="213:19"><name pos:start="213:17" pos:end="213:17">x</name><operator pos:start="213:18" pos:end="213:18">=</operator><literal type="number" pos:start="213:19" pos:end="213:19">0</literal></expr>;</init> <condition pos:start="213:22" pos:end="213:25"><expr pos:start="213:22" pos:end="213:24"><name pos:start="213:22" pos:end="213:22">x</name><operator pos:start="213:23" pos:end="213:23">&lt;</operator><literal type="number" pos:start="213:24" pos:end="213:24">8</literal></expr>;</condition> <incr pos:start="213:27" pos:end="213:29"><expr pos:start="213:27" pos:end="213:29"><name pos:start="213:27" pos:end="213:27">x</name><operator pos:start="213:28" pos:end="213:29">++</operator></expr></incr>)</control><block pos:start="213:31" pos:end="219:13">{<block_content pos:start="215:17" pos:end="217:57">

                <expr_stmt pos:start="215:17" pos:end="215:61"><expr pos:start="215:17" pos:end="215:60"><call pos:start="215:17" pos:end="215:60"><name pos:start="215:17" pos:end="215:23">tprintf</name><argument_list pos:start="215:24" pos:end="215:60">(<argument pos:start="215:25" pos:end="215:53"><expr pos:start="215:25" pos:end="215:53"><literal type="string" pos:start="215:25" pos:end="215:53">"CHROMA U ICPM LEVEL (%3d)\n"</literal></expr></argument>, <argument pos:start="215:56" pos:end="215:59"><expr pos:start="215:56" pos:end="215:59"><operator pos:start="215:56" pos:end="215:56">*</operator><name pos:start="215:57" pos:end="215:59">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:57"><expr pos:start="217:17" pos:end="217:56"><name pos:start="217:17" pos:end="217:48"><name pos:start="217:17" pos:end="217:17">h</name><operator pos:start="217:18" pos:end="217:19">-&gt;</operator><name pos:start="217:20" pos:end="217:21">mb</name><index pos:start="217:22" pos:end="217:48">[<expr pos:start="217:23" pos:end="217:47"><name pos:start="217:23" pos:end="217:27">index</name> <operator pos:start="217:29" pos:end="217:29">+</operator> <operator pos:start="217:31" pos:end="217:31">(</operator><name pos:start="217:32" pos:end="217:32">x</name><operator pos:start="217:33" pos:end="217:33">&amp;</operator><literal type="number" pos:start="217:34" pos:end="217:34">3</literal><operator pos:start="217:35" pos:end="217:35">)</operator> <operator pos:start="217:37" pos:end="217:37">+</operator> <literal type="number" pos:start="217:39" pos:end="217:40">16</literal><operator pos:start="217:41" pos:end="217:41">*</operator><operator pos:start="217:42" pos:end="217:42">(</operator><name pos:start="217:43" pos:end="217:43">x</name><operator pos:start="217:44" pos:end="217:45">&gt;&gt;</operator><literal type="number" pos:start="217:46" pos:end="217:46">2</literal><operator pos:start="217:47" pos:end="217:47">)</operator></expr>]</index></name><operator pos:start="217:49" pos:end="217:49">=</operator> <operator pos:start="217:51" pos:end="217:51">*</operator><name pos:start="217:52" pos:end="217:54">ptr</name><operator pos:start="217:55" pos:end="217:56">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <for pos:start="223:9" pos:end="235:9">for<control pos:start="223:12" pos:end="223:26">(<init pos:start="223:13" pos:end="223:16"><expr pos:start="223:13" pos:end="223:15"><name pos:start="223:13" pos:end="223:13">y</name><operator pos:start="223:14" pos:end="223:14">=</operator><literal type="number" pos:start="223:15" pos:end="223:15">0</literal></expr>;</init> <condition pos:start="223:18" pos:end="223:21"><expr pos:start="223:18" pos:end="223:20"><name pos:start="223:18" pos:end="223:18">y</name><operator pos:start="223:19" pos:end="223:19">&lt;</operator><literal type="number" pos:start="223:20" pos:end="223:20">8</literal></expr>;</condition> <incr pos:start="223:23" pos:end="223:25"><expr pos:start="223:23" pos:end="223:25"><name pos:start="223:23" pos:end="223:23">y</name><operator pos:start="223:24" pos:end="223:25">++</operator></expr></incr>)</control><block pos:start="223:27" pos:end="235:9">{<block_content pos:start="225:13" pos:end="233:13">

            <decl_stmt pos:start="225:13" pos:end="225:60"><decl pos:start="225:13" pos:end="225:59"><type pos:start="225:13" pos:end="225:21"><specifier pos:start="225:13" pos:end="225:17">const</specifier> <name pos:start="225:19" pos:end="225:21">int</name></type> <name pos:start="225:23" pos:end="225:27">index</name><init pos:start="225:28" pos:end="225:59">= <expr pos:start="225:30" pos:end="225:59"><literal type="number" pos:start="225:30" pos:end="225:34">256</literal> <operator pos:start="225:34" pos:end="225:34">+</operator> <literal type="number" pos:start="225:36" pos:end="225:39">64</literal> <operator pos:start="225:39" pos:end="225:39">+</operator> <literal type="number" pos:start="225:41" pos:end="225:41">4</literal><operator pos:start="225:42" pos:end="225:42">*</operator><operator pos:start="225:43" pos:end="225:43">(</operator><name pos:start="225:44" pos:end="225:44">y</name><operator pos:start="225:45" pos:end="225:45">&amp;</operator><literal type="number" pos:start="225:46" pos:end="225:46">3</literal><operator pos:start="225:47" pos:end="225:47">)</operator> <operator pos:start="225:49" pos:end="225:49">+</operator> <literal type="number" pos:start="225:51" pos:end="225:52">32</literal><operator pos:start="225:53" pos:end="225:53">*</operator><operator pos:start="225:54" pos:end="225:54">(</operator><name pos:start="225:55" pos:end="225:55">y</name><operator pos:start="225:56" pos:end="225:57">&gt;&gt;</operator><literal type="number" pos:start="225:58" pos:end="225:58">2</literal><operator pos:start="225:59" pos:end="225:59">)</operator></expr></init></decl>;</decl_stmt>

            <for pos:start="227:13" pos:end="233:13">for<control pos:start="227:16" pos:end="227:30">(<init pos:start="227:17" pos:end="227:20"><expr pos:start="227:17" pos:end="227:19"><name pos:start="227:17" pos:end="227:17">x</name><operator pos:start="227:18" pos:end="227:18">=</operator><literal type="number" pos:start="227:19" pos:end="227:19">0</literal></expr>;</init> <condition pos:start="227:22" pos:end="227:25"><expr pos:start="227:22" pos:end="227:24"><name pos:start="227:22" pos:end="227:22">x</name><operator pos:start="227:23" pos:end="227:23">&lt;</operator><literal type="number" pos:start="227:24" pos:end="227:24">8</literal></expr>;</condition> <incr pos:start="227:27" pos:end="227:29"><expr pos:start="227:27" pos:end="227:29"><name pos:start="227:27" pos:end="227:27">x</name><operator pos:start="227:28" pos:end="227:29">++</operator></expr></incr>)</control><block pos:start="227:31" pos:end="233:13">{<block_content pos:start="229:17" pos:end="231:57">

                <expr_stmt pos:start="229:17" pos:end="229:61"><expr pos:start="229:17" pos:end="229:60"><call pos:start="229:17" pos:end="229:60"><name pos:start="229:17" pos:end="229:23">tprintf</name><argument_list pos:start="229:24" pos:end="229:60">(<argument pos:start="229:25" pos:end="229:53"><expr pos:start="229:25" pos:end="229:53"><literal type="string" pos:start="229:25" pos:end="229:53">"CHROMA V ICPM LEVEL (%3d)\n"</literal></expr></argument>, <argument pos:start="229:56" pos:end="229:59"><expr pos:start="229:56" pos:end="229:59"><operator pos:start="229:56" pos:end="229:56">*</operator><name pos:start="229:57" pos:end="229:59">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:57"><expr pos:start="231:17" pos:end="231:56"><name pos:start="231:17" pos:end="231:48"><name pos:start="231:17" pos:end="231:17">h</name><operator pos:start="231:18" pos:end="231:19">-&gt;</operator><name pos:start="231:20" pos:end="231:21">mb</name><index pos:start="231:22" pos:end="231:48">[<expr pos:start="231:23" pos:end="231:47"><name pos:start="231:23" pos:end="231:27">index</name> <operator pos:start="231:29" pos:end="231:29">+</operator> <operator pos:start="231:31" pos:end="231:31">(</operator><name pos:start="231:32" pos:end="231:32">x</name><operator pos:start="231:33" pos:end="231:33">&amp;</operator><literal type="number" pos:start="231:34" pos:end="231:34">3</literal><operator pos:start="231:35" pos:end="231:35">)</operator> <operator pos:start="231:37" pos:end="231:37">+</operator> <literal type="number" pos:start="231:39" pos:end="231:40">16</literal><operator pos:start="231:41" pos:end="231:41">*</operator><operator pos:start="231:42" pos:end="231:42">(</operator><name pos:start="231:43" pos:end="231:43">x</name><operator pos:start="231:44" pos:end="231:45">&gt;&gt;</operator><literal type="number" pos:start="231:46" pos:end="231:46">2</literal><operator pos:start="231:47" pos:end="231:47">)</operator></expr>]</index></name><operator pos:start="231:49" pos:end="231:49">=</operator> <operator pos:start="231:51" pos:end="231:51">*</operator><name pos:start="231:52" pos:end="231:54">ptr</name><operator pos:start="231:55" pos:end="231:56">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <expr_stmt pos:start="239:9" pos:end="239:77"><expr pos:start="239:9" pos:end="239:76"><call pos:start="239:9" pos:end="239:76"><name pos:start="239:9" pos:end="239:29">ff_init_cabac_decoder</name><argument_list pos:start="239:30" pos:end="239:76">(<argument pos:start="239:31" pos:end="239:39"><expr pos:start="239:31" pos:end="239:39"><operator pos:start="239:31" pos:end="239:31">&amp;</operator><name pos:start="239:32" pos:end="239:39"><name pos:start="239:32" pos:end="239:32">h</name><operator pos:start="239:33" pos:end="239:34">-&gt;</operator><name pos:start="239:35" pos:end="239:39">cabac</name></name></expr></argument>, <argument pos:start="239:42" pos:end="239:44"><expr pos:start="239:42" pos:end="239:44"><name pos:start="239:42" pos:end="239:44">ptr</name></expr></argument>, <argument pos:start="239:47" pos:end="239:75"><expr pos:start="239:47" pos:end="239:75"><name pos:start="239:47" pos:end="239:69"><name pos:start="239:47" pos:end="239:47">h</name><operator pos:start="239:48" pos:end="239:49">-&gt;</operator><name pos:start="239:50" pos:end="239:54">cabac</name><operator pos:start="239:55" pos:end="239:55">.</operator><name pos:start="239:56" pos:end="239:69">bytestream_end</name></name> <operator pos:start="239:71" pos:end="239:71">-</operator> <name pos:start="239:73" pos:end="239:75">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="243:9" pos:end="243:33">// All blocks are present</comment>

        <expr_stmt pos:start="245:9" pos:end="245:36"><expr pos:start="245:9" pos:end="245:35"><name pos:start="245:9" pos:end="245:27"><name pos:start="245:9" pos:end="245:9">h</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:20">cbp_table</name><index pos:start="245:21" pos:end="245:27">[<expr pos:start="245:22" pos:end="245:26"><name pos:start="245:22" pos:end="245:26">mb_xy</name></expr>]</index></name> <operator pos:start="245:29" pos:end="245:29">=</operator> <literal type="number" pos:start="245:31" pos:end="245:35">0x1ef</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:45"><expr pos:start="247:9" pos:end="247:44"><name pos:start="247:9" pos:end="247:40"><name pos:start="247:9" pos:end="247:9">h</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:33">chroma_pred_mode_table</name><index pos:start="247:34" pos:end="247:40">[<expr pos:start="247:35" pos:end="247:39"><name pos:start="247:35" pos:end="247:39">mb_xy</name></expr>]</index></name> <operator pos:start="247:42" pos:end="247:42">=</operator> <literal type="number" pos:start="247:44" pos:end="247:44">0</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="249:9" pos:end="249:44">// In deblocking, the quantizer is 0</comment>

        <expr_stmt pos:start="251:9" pos:end="251:50"><expr pos:start="251:9" pos:end="251:49"><name pos:start="251:9" pos:end="251:46"><name pos:start="251:9" pos:end="251:9">s</name><operator pos:start="251:10" pos:end="251:11">-&gt;</operator><name pos:start="251:12" pos:end="251:26">current_picture</name><operator pos:start="251:27" pos:end="251:27">.</operator><name pos:start="251:28" pos:end="251:39">qscale_table</name><index pos:start="251:40" pos:end="251:46">[<expr pos:start="251:41" pos:end="251:45"><name pos:start="251:41" pos:end="251:45">mb_xy</name></expr>]</index></name><operator pos:start="251:47" pos:end="251:47">=</operator> <literal type="number" pos:start="251:49" pos:end="251:49">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:71"><expr pos:start="253:9" pos:end="253:70"><name pos:start="253:9" pos:end="253:20"><name pos:start="253:9" pos:end="253:9">h</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:20">chroma_qp</name></name> <operator pos:start="253:22" pos:end="253:22">=</operator> <call pos:start="253:24" pos:end="253:70"><name pos:start="253:24" pos:end="253:36">get_chroma_qp</name><argument_list pos:start="253:37" pos:end="253:70">(<argument pos:start="253:38" pos:end="253:66"><expr pos:start="253:38" pos:end="253:66"><name pos:start="253:38" pos:end="253:66"><name pos:start="253:38" pos:end="253:38">h</name><operator pos:start="253:39" pos:end="253:40">-&gt;</operator><name pos:start="253:41" pos:end="253:43">pps</name><operator pos:start="253:44" pos:end="253:44">.</operator><name pos:start="253:45" pos:end="253:66">chroma_qp_index_offset</name></name></expr></argument>, <argument pos:start="253:69" pos:end="253:69"><expr pos:start="253:69" pos:end="253:69"><literal type="number" pos:start="253:69" pos:end="253:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="255:9" pos:end="255:33">// All coeffs are present</comment>

        <expr_stmt pos:start="257:9" pos:end="257:49"><expr pos:start="257:9" pos:end="257:48"><call pos:start="257:9" pos:end="257:48"><name pos:start="257:9" pos:end="257:14">memset</name><argument_list pos:start="257:15" pos:end="257:48">(<argument pos:start="257:16" pos:end="257:39"><expr pos:start="257:16" pos:end="257:39"><name pos:start="257:16" pos:end="257:39"><name pos:start="257:16" pos:end="257:16">h</name><operator pos:start="257:17" pos:end="257:18">-&gt;</operator><name pos:start="257:19" pos:end="257:32">non_zero_count</name><index pos:start="257:33" pos:end="257:39">[<expr pos:start="257:34" pos:end="257:38"><name pos:start="257:34" pos:end="257:38">mb_xy</name></expr>]</index></name></expr></argument>, <argument pos:start="257:42" pos:end="257:43"><expr pos:start="257:42" pos:end="257:43"><literal type="number" pos:start="257:42" pos:end="257:43">16</literal></expr></argument>, <argument pos:start="257:46" pos:end="257:47"><expr pos:start="257:46" pos:end="257:47"><literal type="number" pos:start="257:46" pos:end="257:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:51"><expr pos:start="259:9" pos:end="259:50"><name pos:start="259:9" pos:end="259:41"><name pos:start="259:9" pos:end="259:9">s</name><operator pos:start="259:10" pos:end="259:11">-&gt;</operator><name pos:start="259:12" pos:end="259:26">current_picture</name><operator pos:start="259:27" pos:end="259:27">.</operator><name pos:start="259:28" pos:end="259:34">mb_type</name><index pos:start="259:35" pos:end="259:41">[<expr pos:start="259:36" pos:end="259:40"><name pos:start="259:36" pos:end="259:40">mb_xy</name></expr>]</index></name><operator pos:start="259:42" pos:end="259:42">=</operator> <name pos:start="259:44" pos:end="259:50">mb_type</name></expr>;</expr_stmt>

        <return pos:start="261:9" pos:end="261:17">return <expr pos:start="261:16" pos:end="261:16"><literal type="number" pos:start="261:16" pos:end="261:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="267:5" pos:end="273:5"><if pos:start="267:5" pos:end="273:5">if<condition pos:start="267:7" pos:end="267:16">(<expr pos:start="267:8" pos:end="267:15"><name pos:start="267:8" pos:end="267:15">MB_MBAFF</name></expr>)</condition><block pos:start="267:17" pos:end="273:5">{<block_content pos:start="269:9" pos:end="271:30">

        <expr_stmt pos:start="269:9" pos:end="269:30"><expr pos:start="269:9" pos:end="269:29"><name pos:start="269:9" pos:end="269:23"><name pos:start="269:9" pos:end="269:9">h</name><operator pos:start="269:10" pos:end="269:11">-&gt;</operator><name pos:start="269:12" pos:end="269:20">ref_count</name><index pos:start="269:21" pos:end="269:23">[<expr pos:start="269:22" pos:end="269:22"><literal type="number" pos:start="269:22" pos:end="269:22">0</literal></expr>]</index></name> <operator pos:start="269:25" pos:end="269:27">&lt;&lt;=</operator> <literal type="number" pos:start="269:29" pos:end="269:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:30"><expr pos:start="271:9" pos:end="271:29"><name pos:start="271:9" pos:end="271:23"><name pos:start="271:9" pos:end="271:9">h</name><operator pos:start="271:10" pos:end="271:11">-&gt;</operator><name pos:start="271:12" pos:end="271:20">ref_count</name><index pos:start="271:21" pos:end="271:23">[<expr pos:start="271:22" pos:end="271:22"><literal type="number" pos:start="271:22" pos:end="271:22">1</literal></expr>]</index></name> <operator pos:start="271:25" pos:end="271:27">&lt;&lt;=</operator> <literal type="number" pos:start="271:29" pos:end="271:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="277:5" pos:end="277:31"><expr pos:start="277:5" pos:end="277:30"><call pos:start="277:5" pos:end="277:30"><name pos:start="277:5" pos:end="277:15">fill_caches</name><argument_list pos:start="277:16" pos:end="277:30">(<argument pos:start="277:17" pos:end="277:17"><expr pos:start="277:17" pos:end="277:17"><name pos:start="277:17" pos:end="277:17">h</name></expr></argument>, <argument pos:start="277:20" pos:end="277:26"><expr pos:start="277:20" pos:end="277:26"><name pos:start="277:20" pos:end="277:26">mb_type</name></expr></argument>, <argument pos:start="277:29" pos:end="277:29"><expr pos:start="277:29" pos:end="277:29"><literal type="number" pos:start="277:29" pos:end="277:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="281:5" pos:end="721:5"><if pos:start="281:5" pos:end="341:5">if<condition pos:start="281:7" pos:end="281:29">( <expr pos:start="281:9" pos:end="281:27"><call pos:start="281:9" pos:end="281:27"><name pos:start="281:9" pos:end="281:16">IS_INTRA</name><argument_list pos:start="281:17" pos:end="281:27">( <argument pos:start="281:19" pos:end="281:25"><expr pos:start="281:19" pos:end="281:25"><name pos:start="281:19" pos:end="281:25">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="281:31" pos:end="341:5">{<block_content pos:start="283:9" pos:end="339:39">

        <decl_stmt pos:start="283:9" pos:end="283:25"><decl pos:start="283:9" pos:end="283:13"><type pos:start="283:9" pos:end="283:11"><name pos:start="283:9" pos:end="283:11">int</name></type> <name pos:start="283:13" pos:end="283:13">i</name></decl>, <decl pos:start="283:16" pos:end="283:24"><type ref="prev" pos:start="283:9" pos:end="283:11"/><name pos:start="283:16" pos:end="283:24">pred_mode</name></decl>;</decl_stmt>

        <if_stmt pos:start="285:9" pos:end="327:9"><if pos:start="285:9" pos:end="321:9">if<condition pos:start="285:11" pos:end="285:36">( <expr pos:start="285:13" pos:end="285:34"><call pos:start="285:13" pos:end="285:34"><name pos:start="285:13" pos:end="285:23">IS_INTRA4x4</name><argument_list pos:start="285:24" pos:end="285:34">( <argument pos:start="285:26" pos:end="285:32"><expr pos:start="285:26" pos:end="285:32"><name pos:start="285:26" pos:end="285:32">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="285:38" pos:end="321:9">{<block_content pos:start="287:13" pos:end="319:60">

            <if_stmt pos:start="287:13" pos:end="315:13"><if pos:start="287:13" pos:end="301:13">if<condition pos:start="287:15" pos:end="287:71">( <expr pos:start="287:17" pos:end="287:69"><name pos:start="287:17" pos:end="287:30">dct8x8_allowed</name> <operator pos:start="287:32" pos:end="287:33">&amp;&amp;</operator> <call pos:start="287:35" pos:end="287:69"><name pos:start="287:35" pos:end="287:64">decode_cabac_mb_transform_size</name><argument_list pos:start="287:65" pos:end="287:69">( <argument pos:start="287:67" pos:end="287:67"><expr pos:start="287:67" pos:end="287:67"><name pos:start="287:67" pos:end="287:67">h</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="287:73" pos:end="301:13">{<block_content pos:start="289:17" pos:end="299:17">

                <expr_stmt pos:start="289:17" pos:end="289:42"><expr pos:start="289:17" pos:end="289:41"><name pos:start="289:17" pos:end="289:23">mb_type</name> <operator pos:start="289:25" pos:end="289:26">|=</operator> <name pos:start="289:28" pos:end="289:41">MB_TYPE_8x8DCT</name></expr>;</expr_stmt>

                <for pos:start="291:17" pos:end="299:17">for<control pos:start="291:20" pos:end="291:42">( <init pos:start="291:22" pos:end="291:27"><expr pos:start="291:22" pos:end="291:26"><name pos:start="291:22" pos:end="291:22">i</name> <operator pos:start="291:24" pos:end="291:24">=</operator> <literal type="number" pos:start="291:26" pos:end="291:26">0</literal></expr>;</init> <condition pos:start="291:29" pos:end="291:35"><expr pos:start="291:29" pos:end="291:34"><name pos:start="291:29" pos:end="291:29">i</name> <operator pos:start="291:31" pos:end="291:31">&lt;</operator> <literal type="number" pos:start="291:33" pos:end="291:34">16</literal></expr>;</condition> <incr pos:start="291:37" pos:end="291:40"><expr pos:start="291:37" pos:end="291:40"><name pos:start="291:37" pos:end="291:37">i</name><operator pos:start="291:38" pos:end="291:39">+=</operator><literal type="number" pos:start="291:40" pos:end="291:40">4</literal></expr></incr> )</control> <block pos:start="291:44" pos:end="299:17">{<block_content pos:start="293:21" pos:end="297:97">

                    <decl_stmt pos:start="293:21" pos:end="293:55"><decl pos:start="293:21" pos:end="293:54"><type pos:start="293:21" pos:end="293:23"><name pos:start="293:21" pos:end="293:23">int</name></type> <name pos:start="293:25" pos:end="293:28">pred</name> <init pos:start="293:30" pos:end="293:54">= <expr pos:start="293:32" pos:end="293:54"><call pos:start="293:32" pos:end="293:54"><name pos:start="293:32" pos:end="293:46">pred_intra_mode</name><argument_list pos:start="293:47" pos:end="293:54">( <argument pos:start="293:49" pos:end="293:49"><expr pos:start="293:49" pos:end="293:49"><name pos:start="293:49" pos:end="293:49">h</name></expr></argument>, <argument pos:start="293:52" pos:end="293:52"><expr pos:start="293:52" pos:end="293:52"><name pos:start="293:52" pos:end="293:52">i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="295:21" pos:end="295:77"><decl pos:start="295:21" pos:end="295:76"><type pos:start="295:21" pos:end="295:23"><name pos:start="295:21" pos:end="295:23">int</name></type> <name pos:start="295:25" pos:end="295:28">mode</name> <init pos:start="295:30" pos:end="295:76">= <expr pos:start="295:32" pos:end="295:76"><call pos:start="295:32" pos:end="295:76"><name pos:start="295:32" pos:end="295:65">decode_cabac_mb_intra4x4_pred_mode</name><argument_list pos:start="295:66" pos:end="295:76">( <argument pos:start="295:68" pos:end="295:68"><expr pos:start="295:68" pos:end="295:68"><name pos:start="295:68" pos:end="295:68">h</name></expr></argument>, <argument pos:start="295:71" pos:end="295:74"><expr pos:start="295:71" pos:end="295:74"><name pos:start="295:71" pos:end="295:74">pred</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="297:21" pos:end="297:97"><expr pos:start="297:21" pos:end="297:96"><call pos:start="297:21" pos:end="297:96"><name pos:start="297:21" pos:end="297:34">fill_rectangle</name><argument_list pos:start="297:35" pos:end="297:96">( <argument pos:start="297:37" pos:end="297:76"><expr pos:start="297:37" pos:end="297:76"><operator pos:start="297:37" pos:end="297:37">&amp;</operator><name pos:start="297:38" pos:end="297:76"><name pos:start="297:38" pos:end="297:38">h</name><operator pos:start="297:39" pos:end="297:40">-&gt;</operator><name pos:start="297:41" pos:end="297:64">intra4x4_pred_mode_cache</name><index pos:start="297:65" pos:end="297:76">[ <expr pos:start="297:67" pos:end="297:74"><name pos:start="297:67" pos:end="297:74"><name pos:start="297:67" pos:end="297:71">scan8</name><index pos:start="297:72" pos:end="297:74">[<expr pos:start="297:73" pos:end="297:73"><name pos:start="297:73" pos:end="297:73">i</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="297:79" pos:end="297:79"><expr pos:start="297:79" pos:end="297:79"><literal type="number" pos:start="297:79" pos:end="297:79">2</literal></expr></argument>, <argument pos:start="297:82" pos:end="297:82"><expr pos:start="297:82" pos:end="297:82"><literal type="number" pos:start="297:82" pos:end="297:82">2</literal></expr></argument>, <argument pos:start="297:85" pos:end="297:85"><expr pos:start="297:85" pos:end="297:85"><literal type="number" pos:start="297:85" pos:end="297:85">8</literal></expr></argument>, <argument pos:start="297:88" pos:end="297:91"><expr pos:start="297:88" pos:end="297:91"><name pos:start="297:88" pos:end="297:91">mode</name></expr></argument>, <argument pos:start="297:94" pos:end="297:94"><expr pos:start="297:94" pos:end="297:94"><literal type="number" pos:start="297:94" pos:end="297:94">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="301:15" pos:end="315:13">else <block pos:start="301:20" pos:end="315:13">{<block_content pos:start="303:17" pos:end="313:17">

                <for pos:start="303:17" pos:end="313:17">for<control pos:start="303:20" pos:end="303:41">( <init pos:start="303:22" pos:end="303:27"><expr pos:start="303:22" pos:end="303:26"><name pos:start="303:22" pos:end="303:22">i</name> <operator pos:start="303:24" pos:end="303:24">=</operator> <literal type="number" pos:start="303:26" pos:end="303:26">0</literal></expr>;</init> <condition pos:start="303:29" pos:end="303:35"><expr pos:start="303:29" pos:end="303:34"><name pos:start="303:29" pos:end="303:29">i</name> <operator pos:start="303:31" pos:end="303:31">&lt;</operator> <literal type="number" pos:start="303:33" pos:end="303:34">16</literal></expr>;</condition> <incr pos:start="303:37" pos:end="303:39"><expr pos:start="303:37" pos:end="303:39"><name pos:start="303:37" pos:end="303:37">i</name><operator pos:start="303:38" pos:end="303:39">++</operator></expr></incr> )</control> <block pos:start="303:43" pos:end="313:17">{<block_content pos:start="305:21" pos:end="307:108">

                    <decl_stmt pos:start="305:21" pos:end="305:55"><decl pos:start="305:21" pos:end="305:54"><type pos:start="305:21" pos:end="305:23"><name pos:start="305:21" pos:end="305:23">int</name></type> <name pos:start="305:25" pos:end="305:28">pred</name> <init pos:start="305:30" pos:end="305:54">= <expr pos:start="305:32" pos:end="305:54"><call pos:start="305:32" pos:end="305:54"><name pos:start="305:32" pos:end="305:46">pred_intra_mode</name><argument_list pos:start="305:47" pos:end="305:54">( <argument pos:start="305:49" pos:end="305:49"><expr pos:start="305:49" pos:end="305:49"><name pos:start="305:49" pos:end="305:49">h</name></expr></argument>, <argument pos:start="305:52" pos:end="305:52"><expr pos:start="305:52" pos:end="305:52"><name pos:start="305:52" pos:end="305:52">i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="307:21" pos:end="307:108"><expr pos:start="307:21" pos:end="307:107"><name pos:start="307:21" pos:end="307:59"><name pos:start="307:21" pos:end="307:21">h</name><operator pos:start="307:22" pos:end="307:23">-&gt;</operator><name pos:start="307:24" pos:end="307:47">intra4x4_pred_mode_cache</name><index pos:start="307:48" pos:end="307:59">[ <expr pos:start="307:50" pos:end="307:57"><name pos:start="307:50" pos:end="307:57"><name pos:start="307:50" pos:end="307:54">scan8</name><index pos:start="307:55" pos:end="307:57">[<expr pos:start="307:56" pos:end="307:56"><name pos:start="307:56" pos:end="307:56">i</name></expr>]</index></name></expr> ]</index></name> <operator pos:start="307:61" pos:end="307:61">=</operator> <call pos:start="307:63" pos:end="307:107"><name pos:start="307:63" pos:end="307:96">decode_cabac_mb_intra4x4_pred_mode</name><argument_list pos:start="307:97" pos:end="307:107">( <argument pos:start="307:99" pos:end="307:99"><expr pos:start="307:99" pos:end="307:99"><name pos:start="307:99" pos:end="307:99">h</name></expr></argument>, <argument pos:start="307:102" pos:end="307:105"><expr pos:start="307:102" pos:end="307:105"><name pos:start="307:102" pos:end="307:105">pred</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



                <comment type="line" pos:start="311:17" pos:end="311:124">//av_log( s-&gt;avctx, AV_LOG_ERROR, "i4x4 pred=%d mode=%d\n", pred, h-&gt;intra4x4_pred_mode_cache[ scan8[i] ] );</comment>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="317:13" pos:end="317:42"><expr pos:start="317:13" pos:end="317:41"><call pos:start="317:13" pos:end="317:41"><name pos:start="317:13" pos:end="317:38">write_back_intra_pred_mode</name><argument_list pos:start="317:39" pos:end="317:41">(<argument pos:start="317:40" pos:end="317:40"><expr pos:start="317:40" pos:end="317:40"><name pos:start="317:40" pos:end="317:40">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="319:13" pos:end="319:60"><if pos:start="319:13" pos:end="319:60">if<condition pos:start="319:15" pos:end="319:49">( <expr pos:start="319:17" pos:end="319:47"><call pos:start="319:17" pos:end="319:43"><name pos:start="319:17" pos:end="319:40">check_intra4x4_pred_mode</name><argument_list pos:start="319:41" pos:end="319:43">(<argument pos:start="319:42" pos:end="319:42"><expr pos:start="319:42" pos:end="319:42"><name pos:start="319:42" pos:end="319:42">h</name></expr></argument>)</argument_list></call> <operator pos:start="319:45" pos:end="319:45">&lt;</operator> <literal type="number" pos:start="319:47" pos:end="319:47">0</literal></expr> )</condition><block type="pseudo" pos:start="319:51" pos:end="319:60"><block_content pos:start="319:51" pos:end="319:60"> <return pos:start="319:51" pos:end="319:60">return <expr pos:start="319:58" pos:end="319:59"><operator pos:start="319:58" pos:end="319:58">-</operator><literal type="number" pos:start="319:59" pos:end="319:59">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="321:11" pos:end="327:9">else <block pos:start="321:16" pos:end="327:9">{<block_content pos:start="323:13" pos:end="325:56">

            <expr_stmt pos:start="323:13" pos:end="323:89"><expr pos:start="323:13" pos:end="323:88"><name pos:start="323:13" pos:end="323:35"><name pos:start="323:13" pos:end="323:13">h</name><operator pos:start="323:14" pos:end="323:15">-&gt;</operator><name pos:start="323:16" pos:end="323:35">intra16x16_pred_mode</name></name><operator pos:start="323:36" pos:end="323:36">=</operator> <call pos:start="323:38" pos:end="323:88"><name pos:start="323:38" pos:end="323:58">check_intra_pred_mode</name><argument_list pos:start="323:59" pos:end="323:88">( <argument pos:start="323:61" pos:end="323:61"><expr pos:start="323:61" pos:end="323:61"><name pos:start="323:61" pos:end="323:61">h</name></expr></argument>, <argument pos:start="323:64" pos:end="323:86"><expr pos:start="323:64" pos:end="323:86"><name pos:start="323:64" pos:end="323:86"><name pos:start="323:64" pos:end="323:64">h</name><operator pos:start="323:65" pos:end="323:66">-&gt;</operator><name pos:start="323:67" pos:end="323:86">intra16x16_pred_mode</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="325:13" pos:end="325:56"><if pos:start="325:13" pos:end="325:56">if<condition pos:start="325:15" pos:end="325:45">( <expr pos:start="325:17" pos:end="325:43"><name pos:start="325:17" pos:end="325:39"><name pos:start="325:17" pos:end="325:17">h</name><operator pos:start="325:18" pos:end="325:19">-&gt;</operator><name pos:start="325:20" pos:end="325:39">intra16x16_pred_mode</name></name> <operator pos:start="325:41" pos:end="325:41">&lt;</operator> <literal type="number" pos:start="325:43" pos:end="325:43">0</literal></expr> )</condition><block type="pseudo" pos:start="325:47" pos:end="325:56"><block_content pos:start="325:47" pos:end="325:56"> <return pos:start="325:47" pos:end="325:56">return <expr pos:start="325:54" pos:end="325:55"><operator pos:start="325:54" pos:end="325:54">-</operator><literal type="number" pos:start="325:55" pos:end="325:55">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="329:9" pos:end="331:80"><expr pos:start="329:9" pos:end="331:79"><name pos:start="329:9" pos:end="329:40"><name pos:start="329:9" pos:end="329:9">h</name><operator pos:start="329:10" pos:end="329:11">-&gt;</operator><name pos:start="329:12" pos:end="329:33">chroma_pred_mode_table</name><index pos:start="329:34" pos:end="329:40">[<expr pos:start="329:35" pos:end="329:39"><name pos:start="329:35" pos:end="329:39">mb_xy</name></expr>]</index></name> <operator pos:start="329:42" pos:end="329:42">=</operator>

        <name pos:start="331:9" pos:end="331:17">pred_mode</name>                        <operator pos:start="331:42" pos:end="331:42">=</operator> <call pos:start="331:44" pos:end="331:79"><name pos:start="331:44" pos:end="331:74">decode_cabac_mb_chroma_pre_mode</name><argument_list pos:start="331:75" pos:end="331:79">( <argument pos:start="331:77" pos:end="331:77"><expr pos:start="331:77" pos:end="331:77"><name pos:start="331:77" pos:end="331:77">h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="335:9" pos:end="335:57"><expr pos:start="335:9" pos:end="335:56"><name pos:start="335:9" pos:end="335:17">pred_mode</name><operator pos:start="335:18" pos:end="335:18">=</operator> <call pos:start="335:20" pos:end="335:56"><name pos:start="335:20" pos:end="335:40">check_intra_pred_mode</name><argument_list pos:start="335:41" pos:end="335:56">( <argument pos:start="335:43" pos:end="335:43"><expr pos:start="335:43" pos:end="335:43"><name pos:start="335:43" pos:end="335:43">h</name></expr></argument>, <argument pos:start="335:46" pos:end="335:54"><expr pos:start="335:46" pos:end="335:54"><name pos:start="335:46" pos:end="335:54">pred_mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="337:9" pos:end="337:38"><if pos:start="337:9" pos:end="337:38">if<condition pos:start="337:11" pos:end="337:27">( <expr pos:start="337:13" pos:end="337:25"><name pos:start="337:13" pos:end="337:21">pred_mode</name> <operator pos:start="337:23" pos:end="337:23">&lt;</operator> <literal type="number" pos:start="337:25" pos:end="337:25">0</literal></expr> )</condition><block type="pseudo" pos:start="337:29" pos:end="337:38"><block_content pos:start="337:29" pos:end="337:38"> <return pos:start="337:29" pos:end="337:38">return <expr pos:start="337:36" pos:end="337:37"><operator pos:start="337:36" pos:end="337:36">-</operator><literal type="number" pos:start="337:37" pos:end="337:37">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:39"><expr pos:start="339:9" pos:end="339:38"><name pos:start="339:9" pos:end="339:27"><name pos:start="339:9" pos:end="339:9">h</name><operator pos:start="339:10" pos:end="339:11">-&gt;</operator><name pos:start="339:12" pos:end="339:27">chroma_pred_mode</name></name><operator pos:start="339:28" pos:end="339:28">=</operator> <name pos:start="339:30" pos:end="339:38">pred_mode</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="341:7" pos:end="551:5">else if<condition pos:start="341:14" pos:end="341:37">( <expr pos:start="341:16" pos:end="341:35"><name pos:start="341:16" pos:end="341:30">partition_count</name> <operator pos:start="341:32" pos:end="341:33">==</operator> <literal type="number" pos:start="341:35" pos:end="341:35">4</literal></expr> )</condition> <block pos:start="341:39" pos:end="551:5">{<block_content pos:start="343:9" pos:end="549:9">

        <decl_stmt pos:start="343:9" pos:end="343:58"><decl pos:start="343:9" pos:end="343:13"><type pos:start="343:9" pos:end="343:11"><name pos:start="343:9" pos:end="343:11">int</name></type> <name pos:start="343:13" pos:end="343:13">i</name></decl>, <decl pos:start="343:16" pos:end="343:16"><type ref="prev" pos:start="343:9" pos:end="343:11"/><name pos:start="343:16" pos:end="343:16">j</name></decl>, <decl pos:start="343:19" pos:end="343:40"><type ref="prev" pos:start="343:9" pos:end="343:11"/><name pos:start="343:19" pos:end="343:40"><name pos:start="343:19" pos:end="343:37">sub_partition_count</name><index pos:start="343:38" pos:end="343:40">[<expr pos:start="343:39" pos:end="343:39"><literal type="number" pos:start="343:39" pos:end="343:39">4</literal></expr>]</index></name></decl>, <decl pos:start="343:43" pos:end="343:46"><type ref="prev" pos:start="343:9" pos:end="343:11"/><name pos:start="343:43" pos:end="343:46">list</name></decl>, <decl pos:start="343:49" pos:end="343:57"><type ref="prev" pos:start="343:9" pos:end="343:11"/><name pos:start="343:49" pos:end="343:57"><name pos:start="343:49" pos:end="343:51">ref</name><index pos:start="343:52" pos:end="343:54">[<expr pos:start="343:53" pos:end="343:53"><literal type="number" pos:start="343:53" pos:end="343:53">2</literal></expr>]</index><index pos:start="343:55" pos:end="343:57">[<expr pos:start="343:56" pos:end="343:56"><literal type="number" pos:start="343:56" pos:end="343:56">4</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="347:9" pos:end="389:9"><if pos:start="347:9" pos:end="377:9">if<condition pos:start="347:11" pos:end="347:37">( <expr pos:start="347:13" pos:end="347:35"><name pos:start="347:13" pos:end="347:25"><name pos:start="347:13" pos:end="347:13">h</name><operator pos:start="347:14" pos:end="347:15">-&gt;</operator><name pos:start="347:16" pos:end="347:25">slice_type</name></name> <operator pos:start="347:27" pos:end="347:28">==</operator> <name pos:start="347:30" pos:end="347:35">B_TYPE</name></expr> )</condition> <block pos:start="347:39" pos:end="377:9">{<block_content pos:start="349:13" pos:end="375:13">

            <for pos:start="349:13" pos:end="357:13">for<control pos:start="349:16" pos:end="349:36">( <init pos:start="349:18" pos:end="349:23"><expr pos:start="349:18" pos:end="349:22"><name pos:start="349:18" pos:end="349:18">i</name> <operator pos:start="349:20" pos:end="349:20">=</operator> <literal type="number" pos:start="349:22" pos:end="349:22">0</literal></expr>;</init> <condition pos:start="349:25" pos:end="349:30"><expr pos:start="349:25" pos:end="349:29"><name pos:start="349:25" pos:end="349:25">i</name> <operator pos:start="349:27" pos:end="349:27">&lt;</operator> <literal type="number" pos:start="349:29" pos:end="349:29">4</literal></expr>;</condition> <incr pos:start="349:32" pos:end="349:34"><expr pos:start="349:32" pos:end="349:34"><name pos:start="349:32" pos:end="349:32">i</name><operator pos:start="349:33" pos:end="349:34">++</operator></expr></incr> )</control> <block pos:start="349:38" pos:end="357:13">{<block_content pos:start="351:17" pos:end="355:85">

                <expr_stmt pos:start="351:17" pos:end="351:68"><expr pos:start="351:17" pos:end="351:67"><name pos:start="351:17" pos:end="351:33"><name pos:start="351:17" pos:end="351:17">h</name><operator pos:start="351:18" pos:end="351:19">-&gt;</operator><name pos:start="351:20" pos:end="351:30">sub_mb_type</name><index pos:start="351:31" pos:end="351:33">[<expr pos:start="351:32" pos:end="351:32"><name pos:start="351:32" pos:end="351:32">i</name></expr>]</index></name> <operator pos:start="351:35" pos:end="351:35">=</operator> <call pos:start="351:37" pos:end="351:67"><name pos:start="351:37" pos:end="351:62">decode_cabac_b_mb_sub_type</name><argument_list pos:start="351:63" pos:end="351:67">( <argument pos:start="351:65" pos:end="351:65"><expr pos:start="351:65" pos:end="351:65"><name pos:start="351:65" pos:end="351:65">h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="353:17" pos:end="353:96"><expr pos:start="353:17" pos:end="353:95"><name pos:start="353:17" pos:end="353:38"><name pos:start="353:17" pos:end="353:35">sub_partition_count</name><index pos:start="353:36" pos:end="353:38">[<expr pos:start="353:37" pos:end="353:37"><name pos:start="353:37" pos:end="353:37">i</name></expr>]</index></name><operator pos:start="353:39" pos:end="353:39">=</operator> <name pos:start="353:41" pos:end="353:79"><name pos:start="353:41" pos:end="353:58">b_sub_mb_type_info</name><index pos:start="353:59" pos:end="353:79">[ <expr pos:start="353:61" pos:end="353:77"><name pos:start="353:61" pos:end="353:77"><name pos:start="353:61" pos:end="353:61">h</name><operator pos:start="353:62" pos:end="353:63">-&gt;</operator><name pos:start="353:64" pos:end="353:74">sub_mb_type</name><index pos:start="353:75" pos:end="353:77">[<expr pos:start="353:76" pos:end="353:76"><name pos:start="353:76" pos:end="353:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="353:80" pos:end="353:80">.</operator><name pos:start="353:81" pos:end="353:95">partition_count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="355:17" pos:end="355:85"><expr pos:start="355:17" pos:end="355:84"><name pos:start="355:17" pos:end="355:33"><name pos:start="355:17" pos:end="355:17">h</name><operator pos:start="355:18" pos:end="355:19">-&gt;</operator><name pos:start="355:20" pos:end="355:30">sub_mb_type</name><index pos:start="355:31" pos:end="355:33">[<expr pos:start="355:32" pos:end="355:32"><name pos:start="355:32" pos:end="355:32">i</name></expr>]</index></name><operator pos:start="355:34" pos:end="355:34">=</operator>      <name pos:start="355:41" pos:end="355:79"><name pos:start="355:41" pos:end="355:58">b_sub_mb_type_info</name><index pos:start="355:59" pos:end="355:79">[ <expr pos:start="355:61" pos:end="355:77"><name pos:start="355:61" pos:end="355:77"><name pos:start="355:61" pos:end="355:61">h</name><operator pos:start="355:62" pos:end="355:63">-&gt;</operator><name pos:start="355:64" pos:end="355:74">sub_mb_type</name><index pos:start="355:75" pos:end="355:77">[<expr pos:start="355:76" pos:end="355:76"><name pos:start="355:76" pos:end="355:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="355:80" pos:end="355:80">.</operator><name pos:start="355:81" pos:end="355:84">type</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="359:13" pos:end="375:13"><if pos:start="359:13" pos:end="375:13">if<condition pos:start="359:15" pos:end="361:66">( <expr pos:start="359:17" pos:end="361:64"><call pos:start="359:17" pos:end="361:64"><name pos:start="359:17" pos:end="359:25">IS_DIRECT</name><argument_list pos:start="359:26" pos:end="361:64">(<argument pos:start="359:27" pos:end="361:63"><expr pos:start="359:27" pos:end="361:63"><name pos:start="359:27" pos:end="359:43"><name pos:start="359:27" pos:end="359:27">h</name><operator pos:start="359:28" pos:end="359:29">-&gt;</operator><name pos:start="359:30" pos:end="359:40">sub_mb_type</name><index pos:start="359:41" pos:end="359:43">[<expr pos:start="359:42" pos:end="359:42"><literal type="number" pos:start="359:42" pos:end="359:42">0</literal></expr>]</index></name> <operator pos:start="359:45" pos:end="359:45">|</operator> <name pos:start="359:47" pos:end="359:63"><name pos:start="359:47" pos:end="359:47">h</name><operator pos:start="359:48" pos:end="359:49">-&gt;</operator><name pos:start="359:50" pos:end="359:60">sub_mb_type</name><index pos:start="359:61" pos:end="359:63">[<expr pos:start="359:62" pos:end="359:62"><literal type="number" pos:start="359:62" pos:end="359:62">1</literal></expr>]</index></name> <operator pos:start="359:65" pos:end="359:65">|</operator>

                          <name pos:start="361:27" pos:end="361:43"><name pos:start="361:27" pos:end="361:27">h</name><operator pos:start="361:28" pos:end="361:29">-&gt;</operator><name pos:start="361:30" pos:end="361:40">sub_mb_type</name><index pos:start="361:41" pos:end="361:43">[<expr pos:start="361:42" pos:end="361:42"><literal type="number" pos:start="361:42" pos:end="361:42">2</literal></expr>]</index></name> <operator pos:start="361:45" pos:end="361:45">|</operator> <name pos:start="361:47" pos:end="361:63"><name pos:start="361:47" pos:end="361:47">h</name><operator pos:start="361:48" pos:end="361:49">-&gt;</operator><name pos:start="361:50" pos:end="361:60">sub_mb_type</name><index pos:start="361:61" pos:end="361:63">[<expr pos:start="361:62" pos:end="361:62"><literal type="number" pos:start="361:62" pos:end="361:62">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition> <block pos:start="361:68" pos:end="375:13">{<block_content pos:start="363:17" pos:end="373:17">

                <expr_stmt pos:start="363:17" pos:end="363:48"><expr pos:start="363:17" pos:end="363:47"><call pos:start="363:17" pos:end="363:47"><name pos:start="363:17" pos:end="363:34">pred_direct_motion</name><argument_list pos:start="363:35" pos:end="363:47">(<argument pos:start="363:36" pos:end="363:36"><expr pos:start="363:36" pos:end="363:36"><name pos:start="363:36" pos:end="363:36">h</name></expr></argument>, <argument pos:start="363:39" pos:end="363:46"><expr pos:start="363:39" pos:end="363:46"><operator pos:start="363:39" pos:end="363:39">&amp;</operator><name pos:start="363:40" pos:end="363:46">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="365:17" pos:end="373:17"><if pos:start="365:17" pos:end="373:17">if<condition pos:start="365:19" pos:end="365:64">( <expr pos:start="365:21" pos:end="365:62"><name pos:start="365:21" pos:end="365:35"><name pos:start="365:21" pos:end="365:21">h</name><operator pos:start="365:22" pos:end="365:23">-&gt;</operator><name pos:start="365:24" pos:end="365:32">ref_count</name><index pos:start="365:33" pos:end="365:35">[<expr pos:start="365:34" pos:end="365:34"><literal type="number" pos:start="365:34" pos:end="365:34">0</literal></expr>]</index></name> <operator pos:start="365:37" pos:end="365:37">&gt;</operator> <literal type="number" pos:start="365:39" pos:end="365:39">1</literal> <operator pos:start="365:41" pos:end="365:42">||</operator> <name pos:start="365:44" pos:end="365:58"><name pos:start="365:44" pos:end="365:44">h</name><operator pos:start="365:45" pos:end="365:46">-&gt;</operator><name pos:start="365:47" pos:end="365:55">ref_count</name><index pos:start="365:56" pos:end="365:58">[<expr pos:start="365:57" pos:end="365:57"><literal type="number" pos:start="365:57" pos:end="365:57">1</literal></expr>]</index></name> <operator pos:start="365:60" pos:end="365:60">&gt;</operator> <literal type="number" pos:start="365:62" pos:end="365:62">1</literal></expr> )</condition> <block pos:start="365:66" pos:end="373:17">{<block_content pos:start="367:21" pos:end="371:90">

                    <for pos:start="367:21" pos:end="371:90">for<control pos:start="367:24" pos:end="367:44">( <init pos:start="367:26" pos:end="367:31"><expr pos:start="367:26" pos:end="367:30"><name pos:start="367:26" pos:end="367:26">i</name> <operator pos:start="367:28" pos:end="367:28">=</operator> <literal type="number" pos:start="367:30" pos:end="367:30">0</literal></expr>;</init> <condition pos:start="367:33" pos:end="367:38"><expr pos:start="367:33" pos:end="367:37"><name pos:start="367:33" pos:end="367:33">i</name> <operator pos:start="367:35" pos:end="367:35">&lt;</operator> <literal type="number" pos:start="367:37" pos:end="367:37">4</literal></expr>;</condition> <incr pos:start="367:40" pos:end="367:42"><expr pos:start="367:40" pos:end="367:42"><name pos:start="367:40" pos:end="367:40">i</name><operator pos:start="367:41" pos:end="367:42">++</operator></expr></incr> )</control><block type="pseudo" pos:start="369:25" pos:end="371:90"><block_content pos:start="369:25" pos:end="371:90">

                        <if_stmt pos:start="369:25" pos:end="371:90"><if pos:start="369:25" pos:end="371:90">if<condition pos:start="369:27" pos:end="369:58">( <expr pos:start="369:29" pos:end="369:56"><call pos:start="369:29" pos:end="369:56"><name pos:start="369:29" pos:end="369:37">IS_DIRECT</name><argument_list pos:start="369:38" pos:end="369:56">(<argument pos:start="369:39" pos:end="369:55"><expr pos:start="369:39" pos:end="369:55"><name pos:start="369:39" pos:end="369:55"><name pos:start="369:39" pos:end="369:39">h</name><operator pos:start="369:40" pos:end="369:41">-&gt;</operator><name pos:start="369:42" pos:end="369:52">sub_mb_type</name><index pos:start="369:53" pos:end="369:55">[<expr pos:start="369:54" pos:end="369:54"><name pos:start="369:54" pos:end="369:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo" pos:start="371:29" pos:end="371:90"><block_content pos:start="371:29" pos:end="371:90">

                            <expr_stmt pos:start="371:29" pos:end="371:90"><expr pos:start="371:29" pos:end="371:89"><call pos:start="371:29" pos:end="371:89"><name pos:start="371:29" pos:end="371:42">fill_rectangle</name><argument_list pos:start="371:43" pos:end="371:89">( <argument pos:start="371:45" pos:end="371:72"><expr pos:start="371:45" pos:end="371:72"><operator pos:start="371:45" pos:end="371:45">&amp;</operator><name pos:start="371:46" pos:end="371:72"><name pos:start="371:46" pos:end="371:46">h</name><operator pos:start="371:47" pos:end="371:48">-&gt;</operator><name pos:start="371:49" pos:end="371:60">direct_cache</name><index pos:start="371:61" pos:end="371:72">[<expr pos:start="371:62" pos:end="371:71"><name pos:start="371:62" pos:end="371:71"><name pos:start="371:62" pos:end="371:66">scan8</name><index pos:start="371:67" pos:end="371:71">[<expr pos:start="371:68" pos:end="371:70"><literal type="number" pos:start="371:68" pos:end="371:68">4</literal><operator pos:start="371:69" pos:end="371:69">*</operator><name pos:start="371:70" pos:end="371:70">i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="371:75" pos:end="371:75"><expr pos:start="371:75" pos:end="371:75"><literal type="number" pos:start="371:75" pos:end="371:75">2</literal></expr></argument>, <argument pos:start="371:78" pos:end="371:78"><expr pos:start="371:78" pos:end="371:78"><literal type="number" pos:start="371:78" pos:end="371:78">2</literal></expr></argument>, <argument pos:start="371:81" pos:end="371:81"><expr pos:start="371:81" pos:end="371:81"><literal type="number" pos:start="371:81" pos:end="371:81">8</literal></expr></argument>, <argument pos:start="371:84" pos:end="371:84"><expr pos:start="371:84" pos:end="371:84"><literal type="number" pos:start="371:84" pos:end="371:84">1</literal></expr></argument>, <argument pos:start="371:87" pos:end="371:87"><expr pos:start="371:87" pos:end="371:87"><literal type="number" pos:start="371:87" pos:end="371:87">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="377:11" pos:end="389:9">else <block pos:start="377:16" pos:end="389:9">{<block_content pos:start="379:13" pos:end="387:13">

            <for pos:start="379:13" pos:end="387:13">for<control pos:start="379:16" pos:end="379:36">( <init pos:start="379:18" pos:end="379:23"><expr pos:start="379:18" pos:end="379:22"><name pos:start="379:18" pos:end="379:18">i</name> <operator pos:start="379:20" pos:end="379:20">=</operator> <literal type="number" pos:start="379:22" pos:end="379:22">0</literal></expr>;</init> <condition pos:start="379:25" pos:end="379:30"><expr pos:start="379:25" pos:end="379:29"><name pos:start="379:25" pos:end="379:25">i</name> <operator pos:start="379:27" pos:end="379:27">&lt;</operator> <literal type="number" pos:start="379:29" pos:end="379:29">4</literal></expr>;</condition> <incr pos:start="379:32" pos:end="379:34"><expr pos:start="379:32" pos:end="379:34"><name pos:start="379:32" pos:end="379:32">i</name><operator pos:start="379:33" pos:end="379:34">++</operator></expr></incr> )</control> <block pos:start="379:38" pos:end="387:13">{<block_content pos:start="381:17" pos:end="385:85">

                <expr_stmt pos:start="381:17" pos:end="381:68"><expr pos:start="381:17" pos:end="381:67"><name pos:start="381:17" pos:end="381:33"><name pos:start="381:17" pos:end="381:17">h</name><operator pos:start="381:18" pos:end="381:19">-&gt;</operator><name pos:start="381:20" pos:end="381:30">sub_mb_type</name><index pos:start="381:31" pos:end="381:33">[<expr pos:start="381:32" pos:end="381:32"><name pos:start="381:32" pos:end="381:32">i</name></expr>]</index></name> <operator pos:start="381:35" pos:end="381:35">=</operator> <call pos:start="381:37" pos:end="381:67"><name pos:start="381:37" pos:end="381:62">decode_cabac_p_mb_sub_type</name><argument_list pos:start="381:63" pos:end="381:67">( <argument pos:start="381:65" pos:end="381:65"><expr pos:start="381:65" pos:end="381:65"><name pos:start="381:65" pos:end="381:65">h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="383:17" pos:end="383:96"><expr pos:start="383:17" pos:end="383:95"><name pos:start="383:17" pos:end="383:38"><name pos:start="383:17" pos:end="383:35">sub_partition_count</name><index pos:start="383:36" pos:end="383:38">[<expr pos:start="383:37" pos:end="383:37"><name pos:start="383:37" pos:end="383:37">i</name></expr>]</index></name><operator pos:start="383:39" pos:end="383:39">=</operator> <name pos:start="383:41" pos:end="383:79"><name pos:start="383:41" pos:end="383:58">p_sub_mb_type_info</name><index pos:start="383:59" pos:end="383:79">[ <expr pos:start="383:61" pos:end="383:77"><name pos:start="383:61" pos:end="383:77"><name pos:start="383:61" pos:end="383:61">h</name><operator pos:start="383:62" pos:end="383:63">-&gt;</operator><name pos:start="383:64" pos:end="383:74">sub_mb_type</name><index pos:start="383:75" pos:end="383:77">[<expr pos:start="383:76" pos:end="383:76"><name pos:start="383:76" pos:end="383:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="383:80" pos:end="383:80">.</operator><name pos:start="383:81" pos:end="383:95">partition_count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="385:17" pos:end="385:85"><expr pos:start="385:17" pos:end="385:84"><name pos:start="385:17" pos:end="385:33"><name pos:start="385:17" pos:end="385:17">h</name><operator pos:start="385:18" pos:end="385:19">-&gt;</operator><name pos:start="385:20" pos:end="385:30">sub_mb_type</name><index pos:start="385:31" pos:end="385:33">[<expr pos:start="385:32" pos:end="385:32"><name pos:start="385:32" pos:end="385:32">i</name></expr>]</index></name><operator pos:start="385:34" pos:end="385:34">=</operator>      <name pos:start="385:41" pos:end="385:79"><name pos:start="385:41" pos:end="385:58">p_sub_mb_type_info</name><index pos:start="385:59" pos:end="385:79">[ <expr pos:start="385:61" pos:end="385:77"><name pos:start="385:61" pos:end="385:77"><name pos:start="385:61" pos:end="385:61">h</name><operator pos:start="385:62" pos:end="385:63">-&gt;</operator><name pos:start="385:64" pos:end="385:74">sub_mb_type</name><index pos:start="385:75" pos:end="385:77">[<expr pos:start="385:76" pos:end="385:76"><name pos:start="385:76" pos:end="385:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="385:80" pos:end="385:80">.</operator><name pos:start="385:81" pos:end="385:84">type</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <for pos:start="393:9" pos:end="421:9">for<control pos:start="393:12" pos:end="393:53">( <init pos:start="393:14" pos:end="393:22"><expr pos:start="393:14" pos:end="393:21"><name pos:start="393:14" pos:end="393:17">list</name> <operator pos:start="393:19" pos:end="393:19">=</operator> <literal type="number" pos:start="393:21" pos:end="393:21">0</literal></expr>;</init> <condition pos:start="393:24" pos:end="393:44"><expr pos:start="393:24" pos:end="393:43"><name pos:start="393:24" pos:end="393:27">list</name> <operator pos:start="393:29" pos:end="393:29">&lt;</operator> <name pos:start="393:31" pos:end="393:43"><name pos:start="393:31" pos:end="393:31">h</name><operator pos:start="393:32" pos:end="393:33">-&gt;</operator><name pos:start="393:34" pos:end="393:43">list_count</name></name></expr>;</condition> <incr pos:start="393:46" pos:end="393:51"><expr pos:start="393:46" pos:end="393:51"><name pos:start="393:46" pos:end="393:49">list</name><operator pos:start="393:50" pos:end="393:51">++</operator></expr></incr> )</control> <block pos:start="393:55" pos:end="421:9">{<block_content pos:start="395:17" pos:end="419:17">

                <for pos:start="395:17" pos:end="419:17">for<control pos:start="395:20" pos:end="395:40">( <init pos:start="395:22" pos:end="395:27"><expr pos:start="395:22" pos:end="395:26"><name pos:start="395:22" pos:end="395:22">i</name> <operator pos:start="395:24" pos:end="395:24">=</operator> <literal type="number" pos:start="395:26" pos:end="395:26">0</literal></expr>;</init> <condition pos:start="395:29" pos:end="395:34"><expr pos:start="395:29" pos:end="395:33"><name pos:start="395:29" pos:end="395:29">i</name> <operator pos:start="395:31" pos:end="395:31">&lt;</operator> <literal type="number" pos:start="395:33" pos:end="395:33">4</literal></expr>;</condition> <incr pos:start="395:36" pos:end="395:38"><expr pos:start="395:36" pos:end="395:38"><name pos:start="395:36" pos:end="395:36">i</name><operator pos:start="395:37" pos:end="395:38">++</operator></expr></incr> )</control> <block pos:start="395:42" pos:end="419:17">{<block_content pos:start="397:21" pos:end="417:104">

                    <if_stmt pos:start="397:21" pos:end="397:62"><if pos:start="397:21" pos:end="397:62">if<condition pos:start="397:23" pos:end="397:52">(<expr pos:start="397:24" pos:end="397:51"><call pos:start="397:24" pos:end="397:51"><name pos:start="397:24" pos:end="397:32">IS_DIRECT</name><argument_list pos:start="397:33" pos:end="397:51">(<argument pos:start="397:34" pos:end="397:50"><expr pos:start="397:34" pos:end="397:50"><name pos:start="397:34" pos:end="397:50"><name pos:start="397:34" pos:end="397:34">h</name><operator pos:start="397:35" pos:end="397:36">-&gt;</operator><name pos:start="397:37" pos:end="397:47">sub_mb_type</name><index pos:start="397:48" pos:end="397:50">[<expr pos:start="397:49" pos:end="397:49"><name pos:start="397:49" pos:end="397:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="397:54" pos:end="397:62"><block_content pos:start="397:54" pos:end="397:62"> <continue pos:start="397:54" pos:end="397:62">continue;</continue></block_content></block></if></if_stmt>

                    <if_stmt pos:start="399:21" pos:end="413:21"><if pos:start="399:21" pos:end="409:21">if<condition pos:start="399:23" pos:end="399:58">(<expr pos:start="399:24" pos:end="399:57"><call pos:start="399:24" pos:end="399:57"><name pos:start="399:24" pos:end="399:29">IS_DIR</name><argument_list pos:start="399:30" pos:end="399:57">(<argument pos:start="399:31" pos:end="399:47"><expr pos:start="399:31" pos:end="399:47"><name pos:start="399:31" pos:end="399:47"><name pos:start="399:31" pos:end="399:31">h</name><operator pos:start="399:32" pos:end="399:33">-&gt;</operator><name pos:start="399:34" pos:end="399:44">sub_mb_type</name><index pos:start="399:45" pos:end="399:47">[<expr pos:start="399:46" pos:end="399:46"><name pos:start="399:46" pos:end="399:46">i</name></expr>]</index></name></expr></argument>, <argument pos:start="399:50" pos:end="399:50"><expr pos:start="399:50" pos:end="399:50"><literal type="number" pos:start="399:50" pos:end="399:50">0</literal></expr></argument>, <argument pos:start="399:53" pos:end="399:56"><expr pos:start="399:53" pos:end="399:56"><name pos:start="399:53" pos:end="399:56">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="399:59" pos:end="409:21">{<block_content pos:start="401:25" pos:end="407:45">

                        <if_stmt pos:start="401:25" pos:end="407:45"><if pos:start="401:25" pos:end="403:79">if<condition pos:start="401:27" pos:end="401:52">( <expr pos:start="401:29" pos:end="401:50"><name pos:start="401:29" pos:end="401:46"><name pos:start="401:29" pos:end="401:29">h</name><operator pos:start="401:30" pos:end="401:31">-&gt;</operator><name pos:start="401:32" pos:end="401:40">ref_count</name><index pos:start="401:41" pos:end="401:46">[<expr pos:start="401:42" pos:end="401:45"><name pos:start="401:42" pos:end="401:45">list</name></expr>]</index></name> <operator pos:start="401:48" pos:end="401:48">&gt;</operator> <literal type="number" pos:start="401:50" pos:end="401:50">1</literal></expr> )</condition><block type="pseudo" pos:start="403:29" pos:end="403:79"><block_content pos:start="403:29" pos:end="403:79">

                            <expr_stmt pos:start="403:29" pos:end="403:79"><expr pos:start="403:29" pos:end="403:78"><name pos:start="403:29" pos:end="403:40"><name pos:start="403:29" pos:end="403:31">ref</name><index pos:start="403:32" pos:end="403:37">[<expr pos:start="403:33" pos:end="403:36"><name pos:start="403:33" pos:end="403:36">list</name></expr>]</index><index pos:start="403:38" pos:end="403:40">[<expr pos:start="403:39" pos:end="403:39"><name pos:start="403:39" pos:end="403:39">i</name></expr>]</index></name> <operator pos:start="403:42" pos:end="403:42">=</operator> <call pos:start="403:44" pos:end="403:78"><name pos:start="403:44" pos:end="403:62">decode_cabac_mb_ref</name><argument_list pos:start="403:63" pos:end="403:78">( <argument pos:start="403:65" pos:end="403:65"><expr pos:start="403:65" pos:end="403:65"><name pos:start="403:65" pos:end="403:65">h</name></expr></argument>, <argument pos:start="403:68" pos:end="403:71"><expr pos:start="403:68" pos:end="403:71"><name pos:start="403:68" pos:end="403:71">list</name></expr></argument>, <argument pos:start="403:74" pos:end="403:76"><expr pos:start="403:74" pos:end="403:76"><literal type="number" pos:start="403:74" pos:end="403:74">4</literal><operator pos:start="403:75" pos:end="403:75">*</operator><name pos:start="403:76" pos:end="403:76">i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="405:25" pos:end="407:45">else<block type="pseudo" pos:start="407:29" pos:end="407:45"><block_content pos:start="407:29" pos:end="407:45">

                            <expr_stmt pos:start="407:29" pos:end="407:45"><expr pos:start="407:29" pos:end="407:44"><name pos:start="407:29" pos:end="407:40"><name pos:start="407:29" pos:end="407:31">ref</name><index pos:start="407:32" pos:end="407:37">[<expr pos:start="407:33" pos:end="407:36"><name pos:start="407:33" pos:end="407:36">list</name></expr>]</index><index pos:start="407:38" pos:end="407:40">[<expr pos:start="407:39" pos:end="407:39"><name pos:start="407:39" pos:end="407:39">i</name></expr>]</index></name> <operator pos:start="407:42" pos:end="407:42">=</operator> <literal type="number" pos:start="407:44" pos:end="407:44">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="409:23" pos:end="413:21">else <block pos:start="409:28" pos:end="413:21">{<block_content pos:start="411:25" pos:end="411:42">

                        <expr_stmt pos:start="411:25" pos:end="411:42"><expr pos:start="411:25" pos:end="411:41"><name pos:start="411:25" pos:end="411:36"><name pos:start="411:25" pos:end="411:27">ref</name><index pos:start="411:28" pos:end="411:33">[<expr pos:start="411:29" pos:end="411:32"><name pos:start="411:29" pos:end="411:32">list</name></expr>]</index><index pos:start="411:34" pos:end="411:36">[<expr pos:start="411:35" pos:end="411:35"><name pos:start="411:35" pos:end="411:35">i</name></expr>]</index></name> <operator pos:start="411:38" pos:end="411:38">=</operator> <operator pos:start="411:40" pos:end="411:40">-</operator><literal type="number" pos:start="411:41" pos:end="411:41">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                                                       <expr_stmt pos:start="415:56" pos:end="417:104"><expr pos:start="415:56" pos:end="417:103"><name pos:start="415:56" pos:end="415:89"><name pos:start="415:56" pos:end="415:56">h</name><operator pos:start="415:57" pos:end="415:58">-&gt;</operator><name pos:start="415:59" pos:end="415:67">ref_cache</name><index pos:start="415:68" pos:end="415:73">[<expr pos:start="415:69" pos:end="415:72"><name pos:start="415:69" pos:end="415:72">list</name></expr>]</index><index pos:start="415:74" pos:end="415:89">[ <expr pos:start="415:76" pos:end="415:87"><name pos:start="415:76" pos:end="415:85"><name pos:start="415:76" pos:end="415:80">scan8</name><index pos:start="415:81" pos:end="415:85">[<expr pos:start="415:82" pos:end="415:84"><literal type="number" pos:start="415:82" pos:end="415:82">4</literal><operator pos:start="415:83" pos:end="415:83">*</operator><name pos:start="415:84" pos:end="415:84">i</name></expr>]</index></name><operator pos:start="415:86" pos:end="415:86">+</operator><literal type="number" pos:start="415:87" pos:end="415:87">1</literal></expr> ]</index></name><operator pos:start="415:90" pos:end="415:90">=</operator>

                    <name pos:start="417:21" pos:end="417:54"><name pos:start="417:21" pos:end="417:21">h</name><operator pos:start="417:22" pos:end="417:23">-&gt;</operator><name pos:start="417:24" pos:end="417:32">ref_cache</name><index pos:start="417:33" pos:end="417:38">[<expr pos:start="417:34" pos:end="417:37"><name pos:start="417:34" pos:end="417:37">list</name></expr>]</index><index pos:start="417:39" pos:end="417:54">[ <expr pos:start="417:41" pos:end="417:52"><name pos:start="417:41" pos:end="417:50"><name pos:start="417:41" pos:end="417:45">scan8</name><index pos:start="417:46" pos:end="417:50">[<expr pos:start="417:47" pos:end="417:49"><literal type="number" pos:start="417:47" pos:end="417:47">4</literal><operator pos:start="417:48" pos:end="417:48">*</operator><name pos:start="417:49" pos:end="417:49">i</name></expr>]</index></name><operator pos:start="417:51" pos:end="417:51">+</operator><literal type="number" pos:start="417:52" pos:end="417:52">8</literal></expr> ]</index></name><operator pos:start="417:55" pos:end="417:55">=</operator><name pos:start="417:56" pos:end="417:89"><name pos:start="417:56" pos:end="417:56">h</name><operator pos:start="417:57" pos:end="417:58">-&gt;</operator><name pos:start="417:59" pos:end="417:67">ref_cache</name><index pos:start="417:68" pos:end="417:73">[<expr pos:start="417:69" pos:end="417:72"><name pos:start="417:69" pos:end="417:72">list</name></expr>]</index><index pos:start="417:74" pos:end="417:89">[ <expr pos:start="417:76" pos:end="417:87"><name pos:start="417:76" pos:end="417:85"><name pos:start="417:76" pos:end="417:80">scan8</name><index pos:start="417:81" pos:end="417:85">[<expr pos:start="417:82" pos:end="417:84"><literal type="number" pos:start="417:82" pos:end="417:82">4</literal><operator pos:start="417:83" pos:end="417:83">*</operator><name pos:start="417:84" pos:end="417:84">i</name></expr>]</index></name><operator pos:start="417:86" pos:end="417:86">+</operator><literal type="number" pos:start="417:87" pos:end="417:87">9</literal></expr> ]</index></name><operator pos:start="417:90" pos:end="417:90">=</operator> <name pos:start="417:92" pos:end="417:103"><name pos:start="417:92" pos:end="417:94">ref</name><index pos:start="417:95" pos:end="417:100">[<expr pos:start="417:96" pos:end="417:99"><name pos:start="417:96" pos:end="417:99">list</name></expr>]</index><index pos:start="417:101" pos:end="417:103">[<expr pos:start="417:102" pos:end="417:102"><name pos:start="417:102" pos:end="417:102">i</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

        </block_content>}</block></for>



        <if_stmt pos:start="425:9" pos:end="427:51"><if pos:start="425:9" pos:end="427:51">if<condition pos:start="425:11" pos:end="425:26">(<expr pos:start="425:12" pos:end="425:25"><name pos:start="425:12" pos:end="425:25">dct8x8_allowed</name></expr>)</condition><block type="pseudo" pos:start="427:13" pos:end="427:51"><block_content pos:start="427:13" pos:end="427:51">

            <expr_stmt pos:start="427:13" pos:end="427:51"><expr pos:start="427:13" pos:end="427:50"><name pos:start="427:13" pos:end="427:26">dct8x8_allowed</name> <operator pos:start="427:28" pos:end="427:28">=</operator> <call pos:start="427:30" pos:end="427:50"><name pos:start="427:30" pos:end="427:47">get_dct8x8_allowed</name><argument_list pos:start="427:48" pos:end="427:50">(<argument pos:start="427:49" pos:end="427:49"><expr pos:start="427:49" pos:end="427:49"><name pos:start="427:49" pos:end="427:49">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="431:9" pos:end="549:9">for<control pos:start="431:12" pos:end="431:47">(<init pos:start="431:13" pos:end="431:19"><expr pos:start="431:13" pos:end="431:18"><name pos:start="431:13" pos:end="431:16">list</name><operator pos:start="431:17" pos:end="431:17">=</operator><literal type="number" pos:start="431:18" pos:end="431:18">0</literal></expr>;</init> <condition pos:start="431:21" pos:end="431:39"><expr pos:start="431:21" pos:end="431:38"><name pos:start="431:21" pos:end="431:24">list</name><operator pos:start="431:25" pos:end="431:25">&lt;</operator><name pos:start="431:26" pos:end="431:38"><name pos:start="431:26" pos:end="431:26">h</name><operator pos:start="431:27" pos:end="431:28">-&gt;</operator><name pos:start="431:29" pos:end="431:38">list_count</name></name></expr>;</condition> <incr pos:start="431:41" pos:end="431:46"><expr pos:start="431:41" pos:end="431:46"><name pos:start="431:41" pos:end="431:44">list</name><operator pos:start="431:45" pos:end="431:46">++</operator></expr></incr>)</control><block pos:start="431:48" pos:end="549:9">{<block_content pos:start="433:13" pos:end="547:13">

            <for pos:start="433:13" pos:end="547:13">for<control pos:start="433:16" pos:end="433:30">(<init pos:start="433:17" pos:end="433:20"><expr pos:start="433:17" pos:end="433:19"><name pos:start="433:17" pos:end="433:17">i</name><operator pos:start="433:18" pos:end="433:18">=</operator><literal type="number" pos:start="433:19" pos:end="433:19">0</literal></expr>;</init> <condition pos:start="433:22" pos:end="433:25"><expr pos:start="433:22" pos:end="433:24"><name pos:start="433:22" pos:end="433:22">i</name><operator pos:start="433:23" pos:end="433:23">&lt;</operator><literal type="number" pos:start="433:24" pos:end="433:24">4</literal></expr>;</condition> <incr pos:start="433:27" pos:end="433:29"><expr pos:start="433:27" pos:end="433:29"><name pos:start="433:27" pos:end="433:27">i</name><operator pos:start="433:28" pos:end="433:29">++</operator></expr></incr>)</control><block pos:start="433:31" pos:end="547:13">{<block_content pos:start="435:17" pos:end="545:17">

                <if_stmt pos:start="435:17" pos:end="441:17"><if pos:start="435:17" pos:end="441:17">if<condition pos:start="435:19" pos:end="435:48">(<expr pos:start="435:20" pos:end="435:47"><call pos:start="435:20" pos:end="435:47"><name pos:start="435:20" pos:end="435:28">IS_DIRECT</name><argument_list pos:start="435:29" pos:end="435:47">(<argument pos:start="435:30" pos:end="435:46"><expr pos:start="435:30" pos:end="435:46"><name pos:start="435:30" pos:end="435:46"><name pos:start="435:30" pos:end="435:30">h</name><operator pos:start="435:31" pos:end="435:32">-&gt;</operator><name pos:start="435:33" pos:end="435:43">sub_mb_type</name><index pos:start="435:44" pos:end="435:46">[<expr pos:start="435:45" pos:end="435:45"><name pos:start="435:45" pos:end="435:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="435:49" pos:end="441:17">{<block_content pos:start="437:21" pos:end="439:29">

                    <expr_stmt pos:start="437:21" pos:end="437:82"><expr pos:start="437:21" pos:end="437:81"><call pos:start="437:21" pos:end="437:81"><name pos:start="437:21" pos:end="437:34">fill_rectangle</name><argument_list pos:start="437:35" pos:end="437:81">(<argument pos:start="437:36" pos:end="437:65"><expr pos:start="437:36" pos:end="437:65"><name pos:start="437:36" pos:end="437:65"><name pos:start="437:36" pos:end="437:36">h</name><operator pos:start="437:37" pos:end="437:38">-&gt;</operator><name pos:start="437:39" pos:end="437:47">mvd_cache</name><index pos:start="437:48" pos:end="437:53">[<expr pos:start="437:49" pos:end="437:52"><name pos:start="437:49" pos:end="437:52">list</name></expr>]</index><index pos:start="437:54" pos:end="437:65">[<expr pos:start="437:55" pos:end="437:64"><name pos:start="437:55" pos:end="437:64"><name pos:start="437:55" pos:end="437:59">scan8</name><index pos:start="437:60" pos:end="437:64">[<expr pos:start="437:61" pos:end="437:63"><literal type="number" pos:start="437:61" pos:end="437:61">4</literal><operator pos:start="437:62" pos:end="437:62">*</operator><name pos:start="437:63" pos:end="437:63">i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="437:68" pos:end="437:68"><expr pos:start="437:68" pos:end="437:68"><literal type="number" pos:start="437:68" pos:end="437:68">2</literal></expr></argument>, <argument pos:start="437:71" pos:end="437:71"><expr pos:start="437:71" pos:end="437:71"><literal type="number" pos:start="437:71" pos:end="437:71">2</literal></expr></argument>, <argument pos:start="437:74" pos:end="437:74"><expr pos:start="437:74" pos:end="437:74"><literal type="number" pos:start="437:74" pos:end="437:74">8</literal></expr></argument>, <argument pos:start="437:77" pos:end="437:77"><expr pos:start="437:77" pos:end="437:77"><literal type="number" pos:start="437:77" pos:end="437:77">0</literal></expr></argument>, <argument pos:start="437:80" pos:end="437:80"><expr pos:start="437:80" pos:end="437:80"><literal type="number" pos:start="437:80" pos:end="437:80">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <continue pos:start="439:21" pos:end="439:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="443:17" pos:end="443:86"><expr pos:start="443:17" pos:end="443:85"><name pos:start="443:17" pos:end="443:50"><name pos:start="443:17" pos:end="443:17">h</name><operator pos:start="443:18" pos:end="443:19">-&gt;</operator><name pos:start="443:20" pos:end="443:28">ref_cache</name><index pos:start="443:29" pos:end="443:34">[<expr pos:start="443:30" pos:end="443:33"><name pos:start="443:30" pos:end="443:33">list</name></expr>]</index><index pos:start="443:35" pos:end="443:50">[ <expr pos:start="443:37" pos:end="443:46"><name pos:start="443:37" pos:end="443:46"><name pos:start="443:37" pos:end="443:41">scan8</name><index pos:start="443:42" pos:end="443:46">[<expr pos:start="443:43" pos:end="443:45"><literal type="number" pos:start="443:43" pos:end="443:43">4</literal><operator pos:start="443:44" pos:end="443:44">*</operator><name pos:start="443:45" pos:end="443:45">i</name></expr>]</index></name></expr>   ]</index></name><operator pos:start="443:51" pos:end="443:51">=</operator><name pos:start="443:52" pos:end="443:85"><name pos:start="443:52" pos:end="443:52">h</name><operator pos:start="443:53" pos:end="443:54">-&gt;</operator><name pos:start="443:55" pos:end="443:63">ref_cache</name><index pos:start="443:64" pos:end="443:69">[<expr pos:start="443:65" pos:end="443:68"><name pos:start="443:65" pos:end="443:68">list</name></expr>]</index><index pos:start="443:70" pos:end="443:85">[ <expr pos:start="443:72" pos:end="443:83"><name pos:start="443:72" pos:end="443:81"><name pos:start="443:72" pos:end="443:76">scan8</name><index pos:start="443:77" pos:end="443:81">[<expr pos:start="443:78" pos:end="443:80"><literal type="number" pos:start="443:78" pos:end="443:78">4</literal><operator pos:start="443:79" pos:end="443:79">*</operator><name pos:start="443:80" pos:end="443:80">i</name></expr>]</index></name><operator pos:start="443:82" pos:end="443:82">+</operator><literal type="number" pos:start="443:83" pos:end="443:83">1</literal></expr> ]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="447:17" pos:end="545:17"><if pos:start="447:17" pos:end="535:17">if<condition pos:start="447:19" pos:end="447:87">(<expr pos:start="447:20" pos:end="447:86"><call pos:start="447:20" pos:end="447:53"><name pos:start="447:20" pos:end="447:25">IS_DIR</name><argument_list pos:start="447:26" pos:end="447:53">(<argument pos:start="447:27" pos:end="447:43"><expr pos:start="447:27" pos:end="447:43"><name pos:start="447:27" pos:end="447:43"><name pos:start="447:27" pos:end="447:27">h</name><operator pos:start="447:28" pos:end="447:29">-&gt;</operator><name pos:start="447:30" pos:end="447:40">sub_mb_type</name><index pos:start="447:41" pos:end="447:43">[<expr pos:start="447:42" pos:end="447:42"><name pos:start="447:42" pos:end="447:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="447:46" pos:end="447:46"><expr pos:start="447:46" pos:end="447:46"><literal type="number" pos:start="447:46" pos:end="447:46">0</literal></expr></argument>, <argument pos:start="447:49" pos:end="447:52"><expr pos:start="447:49" pos:end="447:52"><name pos:start="447:49" pos:end="447:52">list</name></expr></argument>)</argument_list></call> <operator pos:start="447:55" pos:end="447:56">&amp;&amp;</operator> <operator pos:start="447:58" pos:end="447:58">!</operator><call pos:start="447:59" pos:end="447:86"><name pos:start="447:59" pos:end="447:67">IS_DIRECT</name><argument_list pos:start="447:68" pos:end="447:86">(<argument pos:start="447:69" pos:end="447:85"><expr pos:start="447:69" pos:end="447:85"><name pos:start="447:69" pos:end="447:85"><name pos:start="447:69" pos:end="447:69">h</name><operator pos:start="447:70" pos:end="447:71">-&gt;</operator><name pos:start="447:72" pos:end="447:82">sub_mb_type</name><index pos:start="447:83" pos:end="447:85">[<expr pos:start="447:84" pos:end="447:84"><name pos:start="447:84" pos:end="447:84">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="447:88" pos:end="535:17">{<block_content pos:start="449:21" pos:end="533:21">

                    <decl_stmt pos:start="449:21" pos:end="449:61"><decl pos:start="449:21" pos:end="449:60"><type pos:start="449:21" pos:end="449:29"><specifier pos:start="449:21" pos:end="449:25">const</specifier> <name pos:start="449:27" pos:end="449:29">int</name></type> <name pos:start="449:31" pos:end="449:41">sub_mb_type</name><init pos:start="449:42" pos:end="449:60">= <expr pos:start="449:44" pos:end="449:60"><name pos:start="449:44" pos:end="449:60"><name pos:start="449:44" pos:end="449:44">h</name><operator pos:start="449:45" pos:end="449:46">-&gt;</operator><name pos:start="449:47" pos:end="449:57">sub_mb_type</name><index pos:start="449:58" pos:end="449:60">[<expr pos:start="449:59" pos:end="449:59"><name pos:start="449:59" pos:end="449:59">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="451:21" pos:end="451:96"><decl pos:start="451:21" pos:end="451:95"><type pos:start="451:21" pos:end="451:29"><specifier pos:start="451:21" pos:end="451:25">const</specifier> <name pos:start="451:27" pos:end="451:29">int</name></type> <name pos:start="451:31" pos:end="451:41">block_width</name><init pos:start="451:42" pos:end="451:95">= <expr pos:start="451:44" pos:end="451:95"><ternary pos:start="451:44" pos:end="451:95"><condition pos:start="451:44" pos:end="451:89"><expr pos:start="451:44" pos:end="451:87"><operator pos:start="451:44" pos:end="451:44">(</operator><name pos:start="451:45" pos:end="451:55">sub_mb_type</name> <operator pos:start="451:57" pos:end="451:57">&amp;</operator> <operator pos:start="451:59" pos:end="451:59">(</operator><name pos:start="451:60" pos:end="451:72">MB_TYPE_16x16</name><operator pos:start="451:73" pos:end="451:73">|</operator><name pos:start="451:74" pos:end="451:85">MB_TYPE_16x8</name><operator pos:start="451:86" pos:end="451:86">)</operator><operator pos:start="451:87" pos:end="451:87">)</operator></expr> ?</condition><then pos:start="451:91" pos:end="451:91"> <expr pos:start="451:91" pos:end="451:91"><literal type="number" pos:start="451:91" pos:end="451:91">2</literal></expr> </then><else pos:start="451:93" pos:end="451:95">: <expr pos:start="451:95" pos:end="451:95"><literal type="number" pos:start="451:95" pos:end="451:95">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <for pos:start="453:21" pos:end="533:21">for<control pos:start="453:24" pos:end="453:59">(<init pos:start="453:25" pos:end="453:28"><expr pos:start="453:25" pos:end="453:27"><name pos:start="453:25" pos:end="453:25">j</name><operator pos:start="453:26" pos:end="453:26">=</operator><literal type="number" pos:start="453:27" pos:end="453:27">0</literal></expr>;</init> <condition pos:start="453:30" pos:end="453:54"><expr pos:start="453:30" pos:end="453:53"><name pos:start="453:30" pos:end="453:30">j</name><operator pos:start="453:31" pos:end="453:31">&lt;</operator><name pos:start="453:32" pos:end="453:53"><name pos:start="453:32" pos:end="453:50">sub_partition_count</name><index pos:start="453:51" pos:end="453:53">[<expr pos:start="453:52" pos:end="453:52"><name pos:start="453:52" pos:end="453:52">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="453:56" pos:end="453:58"><expr pos:start="453:56" pos:end="453:58"><name pos:start="453:56" pos:end="453:56">j</name><operator pos:start="453:57" pos:end="453:58">++</operator></expr></incr>)</control><block pos:start="453:60" pos:end="533:21">{<block_content pos:start="455:25" pos:end="531:52">

                        <decl_stmt pos:start="455:25" pos:end="455:37"><decl pos:start="455:25" pos:end="455:31"><type pos:start="455:25" pos:end="455:27"><name pos:start="455:25" pos:end="455:27">int</name></type> <name pos:start="455:29" pos:end="455:31">mpx</name></decl>, <decl pos:start="455:34" pos:end="455:36"><type ref="prev" pos:start="455:25" pos:end="455:27"/><name pos:start="455:34" pos:end="455:36">mpy</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="457:25" pos:end="457:35"><decl pos:start="457:25" pos:end="457:30"><type pos:start="457:25" pos:end="457:27"><name pos:start="457:25" pos:end="457:27">int</name></type> <name pos:start="457:29" pos:end="457:30">mx</name></decl>, <decl pos:start="457:33" pos:end="457:34"><type ref="prev" pos:start="457:25" pos:end="457:27"/><name pos:start="457:33" pos:end="457:34">my</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="459:25" pos:end="459:61"><decl pos:start="459:25" pos:end="459:60"><type pos:start="459:25" pos:end="459:33"><specifier pos:start="459:25" pos:end="459:29">const</specifier> <name pos:start="459:31" pos:end="459:33">int</name></type> <name pos:start="459:35" pos:end="459:39">index</name><init pos:start="459:40" pos:end="459:60">= <expr pos:start="459:42" pos:end="459:60"><literal type="number" pos:start="459:42" pos:end="459:42">4</literal><operator pos:start="459:43" pos:end="459:43">*</operator><name pos:start="459:44" pos:end="459:44">i</name> <operator pos:start="459:46" pos:end="459:46">+</operator> <name pos:start="459:48" pos:end="459:58">block_width</name><operator pos:start="459:59" pos:end="459:59">*</operator><name pos:start="459:60" pos:end="459:60">j</name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="461:25" pos:end="461:84"><expr pos:start="461:25" pos:end="461:83"><call pos:start="461:25" pos:end="461:44"><name pos:start="461:25" pos:end="461:31">int16_t</name> <argument_list pos:start="461:33" pos:end="461:44">(<argument pos:start="461:34" pos:end="461:43"><expr pos:start="461:34" pos:end="461:43"><operator pos:start="461:34" pos:end="461:34">*</operator> <name pos:start="461:36" pos:end="461:43">mv_cache</name></expr></argument>)</argument_list></call><index pos:start="461:45" pos:end="461:47">[<expr pos:start="461:46" pos:end="461:46"><literal type="number" pos:start="461:46" pos:end="461:46">2</literal></expr>]</index><operator pos:start="461:48" pos:end="461:48">=</operator> <operator pos:start="461:50" pos:end="461:50">&amp;</operator><name pos:start="461:51" pos:end="461:83"><name pos:start="461:51" pos:end="461:51">h</name><operator pos:start="461:52" pos:end="461:53">-&gt;</operator><name pos:start="461:54" pos:end="461:61">mv_cache</name><index pos:start="461:62" pos:end="461:67">[<expr pos:start="461:63" pos:end="461:66"><name pos:start="461:63" pos:end="461:66">list</name></expr>]</index><index pos:start="461:68" pos:end="461:83">[ <expr pos:start="461:70" pos:end="461:81"><name pos:start="461:70" pos:end="461:81"><name pos:start="461:70" pos:end="461:74">scan8</name><index pos:start="461:75" pos:end="461:81">[<expr pos:start="461:76" pos:end="461:80"><name pos:start="461:76" pos:end="461:80">index</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="463:25" pos:end="463:86"><expr pos:start="463:25" pos:end="463:85"><call pos:start="463:25" pos:end="463:45"><name pos:start="463:25" pos:end="463:31">int16_t</name> <argument_list pos:start="463:33" pos:end="463:45">(<argument pos:start="463:34" pos:end="463:44"><expr pos:start="463:34" pos:end="463:44"><operator pos:start="463:34" pos:end="463:34">*</operator> <name pos:start="463:36" pos:end="463:44">mvd_cache</name></expr></argument>)</argument_list></call><index pos:start="463:46" pos:end="463:48">[<expr pos:start="463:47" pos:end="463:47"><literal type="number" pos:start="463:47" pos:end="463:47">2</literal></expr>]</index><operator pos:start="463:49" pos:end="463:49">=</operator> <operator pos:start="463:51" pos:end="463:51">&amp;</operator><name pos:start="463:52" pos:end="463:85"><name pos:start="463:52" pos:end="463:52">h</name><operator pos:start="463:53" pos:end="463:54">-&gt;</operator><name pos:start="463:55" pos:end="463:63">mvd_cache</name><index pos:start="463:64" pos:end="463:69">[<expr pos:start="463:65" pos:end="463:68"><name pos:start="463:65" pos:end="463:68">list</name></expr>]</index><index pos:start="463:70" pos:end="463:85">[ <expr pos:start="463:72" pos:end="463:83"><name pos:start="463:72" pos:end="463:83"><name pos:start="463:72" pos:end="463:76">scan8</name><index pos:start="463:77" pos:end="463:83">[<expr pos:start="463:78" pos:end="463:82"><name pos:start="463:78" pos:end="463:82">index</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="465:25" pos:end="465:113"><expr pos:start="465:25" pos:end="465:112"><call pos:start="465:25" pos:end="465:112"><name pos:start="465:25" pos:end="465:35">pred_motion</name><argument_list pos:start="465:36" pos:end="465:112">(<argument pos:start="465:37" pos:end="465:37"><expr pos:start="465:37" pos:end="465:37"><name pos:start="465:37" pos:end="465:37">h</name></expr></argument>, <argument pos:start="465:40" pos:end="465:44"><expr pos:start="465:40" pos:end="465:44"><name pos:start="465:40" pos:end="465:44">index</name></expr></argument>, <argument pos:start="465:47" pos:end="465:57"><expr pos:start="465:47" pos:end="465:57"><name pos:start="465:47" pos:end="465:57">block_width</name></expr></argument>, <argument pos:start="465:60" pos:end="465:63"><expr pos:start="465:60" pos:end="465:63"><name pos:start="465:60" pos:end="465:63">list</name></expr></argument>, <argument pos:start="465:66" pos:end="465:99"><expr pos:start="465:66" pos:end="465:99"><name pos:start="465:66" pos:end="465:99"><name pos:start="465:66" pos:end="465:66">h</name><operator pos:start="465:67" pos:end="465:68">-&gt;</operator><name pos:start="465:69" pos:end="465:77">ref_cache</name><index pos:start="465:78" pos:end="465:83">[<expr pos:start="465:79" pos:end="465:82"><name pos:start="465:79" pos:end="465:82">list</name></expr>]</index><index pos:start="465:84" pos:end="465:99">[ <expr pos:start="465:86" pos:end="465:97"><name pos:start="465:86" pos:end="465:97"><name pos:start="465:86" pos:end="465:90">scan8</name><index pos:start="465:91" pos:end="465:97">[<expr pos:start="465:92" pos:end="465:96"><name pos:start="465:92" pos:end="465:96">index</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="465:102" pos:end="465:105"><expr pos:start="465:102" pos:end="465:105"><operator pos:start="465:102" pos:end="465:102">&amp;</operator><name pos:start="465:103" pos:end="465:105">mpx</name></expr></argument>, <argument pos:start="465:108" pos:end="465:111"><expr pos:start="465:108" pos:end="465:111"><operator pos:start="465:108" pos:end="465:108">&amp;</operator><name pos:start="465:109" pos:end="465:111">mpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="469:25" pos:end="469:76"><expr pos:start="469:25" pos:end="469:75"><name pos:start="469:25" pos:end="469:26">mx</name> <operator pos:start="469:28" pos:end="469:28">=</operator> <name pos:start="469:30" pos:end="469:32">mpx</name> <operator pos:start="469:34" pos:end="469:34">+</operator> <call pos:start="469:36" pos:end="469:75"><name pos:start="469:36" pos:end="469:54">decode_cabac_mb_mvd</name><argument_list pos:start="469:55" pos:end="469:75">( <argument pos:start="469:57" pos:end="469:57"><expr pos:start="469:57" pos:end="469:57"><name pos:start="469:57" pos:end="469:57">h</name></expr></argument>, <argument pos:start="469:60" pos:end="469:63"><expr pos:start="469:60" pos:end="469:63"><name pos:start="469:60" pos:end="469:63">list</name></expr></argument>, <argument pos:start="469:66" pos:end="469:70"><expr pos:start="469:66" pos:end="469:70"><name pos:start="469:66" pos:end="469:70">index</name></expr></argument>, <argument pos:start="469:73" pos:end="469:73"><expr pos:start="469:73" pos:end="469:73"><literal type="number" pos:start="469:73" pos:end="469:73">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="471:25" pos:end="471:76"><expr pos:start="471:25" pos:end="471:75"><name pos:start="471:25" pos:end="471:26">my</name> <operator pos:start="471:28" pos:end="471:28">=</operator> <name pos:start="471:30" pos:end="471:32">mpy</name> <operator pos:start="471:34" pos:end="471:34">+</operator> <call pos:start="471:36" pos:end="471:75"><name pos:start="471:36" pos:end="471:54">decode_cabac_mb_mvd</name><argument_list pos:start="471:55" pos:end="471:75">( <argument pos:start="471:57" pos:end="471:57"><expr pos:start="471:57" pos:end="471:57"><name pos:start="471:57" pos:end="471:57">h</name></expr></argument>, <argument pos:start="471:60" pos:end="471:63"><expr pos:start="471:60" pos:end="471:63"><name pos:start="471:60" pos:end="471:63">list</name></expr></argument>, <argument pos:start="471:66" pos:end="471:70"><expr pos:start="471:66" pos:end="471:70"><name pos:start="471:66" pos:end="471:70">index</name></expr></argument>, <argument pos:start="471:73" pos:end="471:73"><expr pos:start="471:73" pos:end="471:73"><literal type="number" pos:start="471:73" pos:end="471:73">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="473:25" pos:end="473:60"><expr pos:start="473:25" pos:end="473:59"><call pos:start="473:25" pos:end="473:59"><name pos:start="473:25" pos:end="473:31">tprintf</name><argument_list pos:start="473:32" pos:end="473:59">(<argument pos:start="473:33" pos:end="473:50"><expr pos:start="473:33" pos:end="473:50"><literal type="string" pos:start="473:33" pos:end="473:50">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="473:53" pos:end="473:54"><expr pos:start="473:53" pos:end="473:54"><name pos:start="473:53" pos:end="473:54">mx</name></expr></argument>, <argument pos:start="473:57" pos:end="473:58"><expr pos:start="473:57" pos:end="473:58"><name pos:start="473:57" pos:end="473:58">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="477:25" pos:end="521:25"><if pos:start="477:25" pos:end="497:25">if<condition pos:start="477:27" pos:end="477:51">(<expr pos:start="477:28" pos:end="477:50"><call pos:start="477:28" pos:end="477:50"><name pos:start="477:28" pos:end="477:37">IS_SUB_8X8</name><argument_list pos:start="477:38" pos:end="477:50">(<argument pos:start="477:39" pos:end="477:49"><expr pos:start="477:39" pos:end="477:49"><name pos:start="477:39" pos:end="477:49">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="477:52" pos:end="497:25">{<block_content pos:start="479:29" pos:end="495:75">

                            <expr_stmt pos:start="479:29" pos:end="481:67"><expr pos:start="479:29" pos:end="481:66"><name pos:start="479:29" pos:end="479:44"><name pos:start="479:29" pos:end="479:36">mv_cache</name><index pos:start="479:37" pos:end="479:41">[ <expr pos:start="479:39" pos:end="479:39"><literal type="number" pos:start="479:39" pos:end="479:39">1</literal></expr> ]</index><index pos:start="479:42" pos:end="479:44">[<expr pos:start="479:43" pos:end="479:43"><literal type="number" pos:start="479:43" pos:end="479:43">0</literal></expr>]</index></name><operator pos:start="479:45" pos:end="479:45">=</operator>

                            <name pos:start="481:29" pos:end="481:44"><name pos:start="481:29" pos:end="481:36">mv_cache</name><index pos:start="481:37" pos:end="481:41">[ <expr pos:start="481:39" pos:end="481:39"><literal type="number" pos:start="481:39" pos:end="481:39">8</literal></expr> ]</index><index pos:start="481:42" pos:end="481:44">[<expr pos:start="481:43" pos:end="481:43"><literal type="number" pos:start="481:43" pos:end="481:43">0</literal></expr>]</index></name><operator pos:start="481:45" pos:end="481:45">=</operator> <name pos:start="481:47" pos:end="481:62"><name pos:start="481:47" pos:end="481:54">mv_cache</name><index pos:start="481:55" pos:end="481:59">[ <expr pos:start="481:57" pos:end="481:57"><literal type="number" pos:start="481:57" pos:end="481:57">9</literal></expr> ]</index><index pos:start="481:60" pos:end="481:62">[<expr pos:start="481:61" pos:end="481:61"><literal type="number" pos:start="481:61" pos:end="481:61">0</literal></expr>]</index></name><operator pos:start="481:63" pos:end="481:63">=</operator> <name pos:start="481:65" pos:end="481:66">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="483:29" pos:end="485:67"><expr pos:start="483:29" pos:end="485:66"><name pos:start="483:29" pos:end="483:44"><name pos:start="483:29" pos:end="483:36">mv_cache</name><index pos:start="483:37" pos:end="483:41">[ <expr pos:start="483:39" pos:end="483:39"><literal type="number" pos:start="483:39" pos:end="483:39">1</literal></expr> ]</index><index pos:start="483:42" pos:end="483:44">[<expr pos:start="483:43" pos:end="483:43"><literal type="number" pos:start="483:43" pos:end="483:43">1</literal></expr>]</index></name><operator pos:start="483:45" pos:end="483:45">=</operator>

                            <name pos:start="485:29" pos:end="485:44"><name pos:start="485:29" pos:end="485:36">mv_cache</name><index pos:start="485:37" pos:end="485:41">[ <expr pos:start="485:39" pos:end="485:39"><literal type="number" pos:start="485:39" pos:end="485:39">8</literal></expr> ]</index><index pos:start="485:42" pos:end="485:44">[<expr pos:start="485:43" pos:end="485:43"><literal type="number" pos:start="485:43" pos:end="485:43">1</literal></expr>]</index></name><operator pos:start="485:45" pos:end="485:45">=</operator> <name pos:start="485:47" pos:end="485:62"><name pos:start="485:47" pos:end="485:54">mv_cache</name><index pos:start="485:55" pos:end="485:59">[ <expr pos:start="485:57" pos:end="485:57"><literal type="number" pos:start="485:57" pos:end="485:57">9</literal></expr> ]</index><index pos:start="485:60" pos:end="485:62">[<expr pos:start="485:61" pos:end="485:61"><literal type="number" pos:start="485:61" pos:end="485:61">1</literal></expr>]</index></name><operator pos:start="485:63" pos:end="485:63">=</operator> <name pos:start="485:65" pos:end="485:66">my</name></expr>;</expr_stmt>



                            <expr_stmt pos:start="489:29" pos:end="491:75"><expr pos:start="489:29" pos:end="491:74"><name pos:start="489:29" pos:end="489:45"><name pos:start="489:29" pos:end="489:37">mvd_cache</name><index pos:start="489:38" pos:end="489:42">[ <expr pos:start="489:40" pos:end="489:40"><literal type="number" pos:start="489:40" pos:end="489:40">1</literal></expr> ]</index><index pos:start="489:43" pos:end="489:45">[<expr pos:start="489:44" pos:end="489:44"><literal type="number" pos:start="489:44" pos:end="489:44">0</literal></expr>]</index></name><operator pos:start="489:46" pos:end="489:46">=</operator>

                            <name pos:start="491:29" pos:end="491:45"><name pos:start="491:29" pos:end="491:37">mvd_cache</name><index pos:start="491:38" pos:end="491:42">[ <expr pos:start="491:40" pos:end="491:40"><literal type="number" pos:start="491:40" pos:end="491:40">8</literal></expr> ]</index><index pos:start="491:43" pos:end="491:45">[<expr pos:start="491:44" pos:end="491:44"><literal type="number" pos:start="491:44" pos:end="491:44">0</literal></expr>]</index></name><operator pos:start="491:46" pos:end="491:46">=</operator> <name pos:start="491:48" pos:end="491:64"><name pos:start="491:48" pos:end="491:56">mvd_cache</name><index pos:start="491:57" pos:end="491:61">[ <expr pos:start="491:59" pos:end="491:59"><literal type="number" pos:start="491:59" pos:end="491:59">9</literal></expr> ]</index><index pos:start="491:62" pos:end="491:64">[<expr pos:start="491:63" pos:end="491:63"><literal type="number" pos:start="491:63" pos:end="491:63">0</literal></expr>]</index></name><operator pos:start="491:65" pos:end="491:65">=</operator> <name pos:start="491:67" pos:end="491:68">mx</name> <operator pos:start="491:70" pos:end="491:70">-</operator> <name pos:start="491:72" pos:end="491:74">mpx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="493:29" pos:end="495:75"><expr pos:start="493:29" pos:end="495:74"><name pos:start="493:29" pos:end="493:45"><name pos:start="493:29" pos:end="493:37">mvd_cache</name><index pos:start="493:38" pos:end="493:42">[ <expr pos:start="493:40" pos:end="493:40"><literal type="number" pos:start="493:40" pos:end="493:40">1</literal></expr> ]</index><index pos:start="493:43" pos:end="493:45">[<expr pos:start="493:44" pos:end="493:44"><literal type="number" pos:start="493:44" pos:end="493:44">1</literal></expr>]</index></name><operator pos:start="493:46" pos:end="493:46">=</operator>

                            <name pos:start="495:29" pos:end="495:45"><name pos:start="495:29" pos:end="495:37">mvd_cache</name><index pos:start="495:38" pos:end="495:42">[ <expr pos:start="495:40" pos:end="495:40"><literal type="number" pos:start="495:40" pos:end="495:40">8</literal></expr> ]</index><index pos:start="495:43" pos:end="495:45">[<expr pos:start="495:44" pos:end="495:44"><literal type="number" pos:start="495:44" pos:end="495:44">1</literal></expr>]</index></name><operator pos:start="495:46" pos:end="495:46">=</operator> <name pos:start="495:48" pos:end="495:64"><name pos:start="495:48" pos:end="495:56">mvd_cache</name><index pos:start="495:57" pos:end="495:61">[ <expr pos:start="495:59" pos:end="495:59"><literal type="number" pos:start="495:59" pos:end="495:59">9</literal></expr> ]</index><index pos:start="495:62" pos:end="495:64">[<expr pos:start="495:63" pos:end="495:63"><literal type="number" pos:start="495:63" pos:end="495:63">1</literal></expr>]</index></name><operator pos:start="495:65" pos:end="495:65">=</operator> <name pos:start="495:67" pos:end="495:68">my</name> <operator pos:start="495:70" pos:end="495:70">-</operator> <name pos:start="495:72" pos:end="495:74">mpy</name></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="497:26" pos:end="509:25">else if<condition pos:start="497:33" pos:end="497:57">(<expr pos:start="497:34" pos:end="497:56"><call pos:start="497:34" pos:end="497:56"><name pos:start="497:34" pos:end="497:43">IS_SUB_8X4</name><argument_list pos:start="497:44" pos:end="497:56">(<argument pos:start="497:45" pos:end="497:55"><expr pos:start="497:45" pos:end="497:55"><name pos:start="497:45" pos:end="497:55">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="497:58" pos:end="509:25">{<block_content pos:start="499:29" pos:end="507:56">

                            <expr_stmt pos:start="499:29" pos:end="499:49"><expr pos:start="499:29" pos:end="499:48"><name pos:start="499:29" pos:end="499:44"><name pos:start="499:29" pos:end="499:36">mv_cache</name><index pos:start="499:37" pos:end="499:41">[ <expr pos:start="499:39" pos:end="499:39"><literal type="number" pos:start="499:39" pos:end="499:39">1</literal></expr> ]</index><index pos:start="499:42" pos:end="499:44">[<expr pos:start="499:43" pos:end="499:43"><literal type="number" pos:start="499:43" pos:end="499:43">0</literal></expr>]</index></name><operator pos:start="499:45" pos:end="499:45">=</operator> <name pos:start="499:47" pos:end="499:48">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="501:29" pos:end="501:49"><expr pos:start="501:29" pos:end="501:48"><name pos:start="501:29" pos:end="501:44"><name pos:start="501:29" pos:end="501:36">mv_cache</name><index pos:start="501:37" pos:end="501:41">[ <expr pos:start="501:39" pos:end="501:39"><literal type="number" pos:start="501:39" pos:end="501:39">1</literal></expr> ]</index><index pos:start="501:42" pos:end="501:44">[<expr pos:start="501:43" pos:end="501:43"><literal type="number" pos:start="501:43" pos:end="501:43">1</literal></expr>]</index></name><operator pos:start="501:45" pos:end="501:45">=</operator> <name pos:start="501:47" pos:end="501:48">my</name></expr>;</expr_stmt>



                            <expr_stmt pos:start="505:29" pos:end="505:56"><expr pos:start="505:29" pos:end="505:55"><name pos:start="505:29" pos:end="505:45"><name pos:start="505:29" pos:end="505:37">mvd_cache</name><index pos:start="505:38" pos:end="505:42">[ <expr pos:start="505:40" pos:end="505:40"><literal type="number" pos:start="505:40" pos:end="505:40">1</literal></expr> ]</index><index pos:start="505:43" pos:end="505:45">[<expr pos:start="505:44" pos:end="505:44"><literal type="number" pos:start="505:44" pos:end="505:44">0</literal></expr>]</index></name><operator pos:start="505:46" pos:end="505:46">=</operator> <name pos:start="505:48" pos:end="505:49">mx</name> <operator pos:start="505:51" pos:end="505:51">-</operator> <name pos:start="505:53" pos:end="505:55">mpx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="507:29" pos:end="507:56"><expr pos:start="507:29" pos:end="507:55"><name pos:start="507:29" pos:end="507:45"><name pos:start="507:29" pos:end="507:37">mvd_cache</name><index pos:start="507:38" pos:end="507:42">[ <expr pos:start="507:40" pos:end="507:40"><literal type="number" pos:start="507:40" pos:end="507:40">1</literal></expr> ]</index><index pos:start="507:43" pos:end="507:45">[<expr pos:start="507:44" pos:end="507:44"><literal type="number" pos:start="507:44" pos:end="507:44">1</literal></expr>]</index></name><operator pos:start="507:46" pos:end="507:46">=</operator> <name pos:start="507:48" pos:end="507:49">my</name> <operator pos:start="507:51" pos:end="507:51">-</operator> <name pos:start="507:53" pos:end="507:55">mpy</name></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="509:26" pos:end="521:25">else if<condition pos:start="509:33" pos:end="509:57">(<expr pos:start="509:34" pos:end="509:56"><call pos:start="509:34" pos:end="509:56"><name pos:start="509:34" pos:end="509:43">IS_SUB_4X8</name><argument_list pos:start="509:44" pos:end="509:56">(<argument pos:start="509:45" pos:end="509:55"><expr pos:start="509:45" pos:end="509:55"><name pos:start="509:45" pos:end="509:55">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="509:58" pos:end="521:25">{<block_content pos:start="511:29" pos:end="519:56">

                            <expr_stmt pos:start="511:29" pos:end="511:49"><expr pos:start="511:29" pos:end="511:48"><name pos:start="511:29" pos:end="511:44"><name pos:start="511:29" pos:end="511:36">mv_cache</name><index pos:start="511:37" pos:end="511:41">[ <expr pos:start="511:39" pos:end="511:39"><literal type="number" pos:start="511:39" pos:end="511:39">8</literal></expr> ]</index><index pos:start="511:42" pos:end="511:44">[<expr pos:start="511:43" pos:end="511:43"><literal type="number" pos:start="511:43" pos:end="511:43">0</literal></expr>]</index></name><operator pos:start="511:45" pos:end="511:45">=</operator> <name pos:start="511:47" pos:end="511:48">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="513:29" pos:end="513:49"><expr pos:start="513:29" pos:end="513:48"><name pos:start="513:29" pos:end="513:44"><name pos:start="513:29" pos:end="513:36">mv_cache</name><index pos:start="513:37" pos:end="513:41">[ <expr pos:start="513:39" pos:end="513:39"><literal type="number" pos:start="513:39" pos:end="513:39">8</literal></expr> ]</index><index pos:start="513:42" pos:end="513:44">[<expr pos:start="513:43" pos:end="513:43"><literal type="number" pos:start="513:43" pos:end="513:43">1</literal></expr>]</index></name><operator pos:start="513:45" pos:end="513:45">=</operator> <name pos:start="513:47" pos:end="513:48">my</name></expr>;</expr_stmt>



                            <expr_stmt pos:start="517:29" pos:end="517:56"><expr pos:start="517:29" pos:end="517:55"><name pos:start="517:29" pos:end="517:45"><name pos:start="517:29" pos:end="517:37">mvd_cache</name><index pos:start="517:38" pos:end="517:42">[ <expr pos:start="517:40" pos:end="517:40"><literal type="number" pos:start="517:40" pos:end="517:40">8</literal></expr> ]</index><index pos:start="517:43" pos:end="517:45">[<expr pos:start="517:44" pos:end="517:44"><literal type="number" pos:start="517:44" pos:end="517:44">0</literal></expr>]</index></name><operator pos:start="517:46" pos:end="517:46">=</operator> <name pos:start="517:48" pos:end="517:49">mx</name> <operator pos:start="517:51" pos:end="517:51">-</operator> <name pos:start="517:53" pos:end="517:55">mpx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="519:29" pos:end="519:56"><expr pos:start="519:29" pos:end="519:55"><name pos:start="519:29" pos:end="519:45"><name pos:start="519:29" pos:end="519:37">mvd_cache</name><index pos:start="519:38" pos:end="519:42">[ <expr pos:start="519:40" pos:end="519:40"><literal type="number" pos:start="519:40" pos:end="519:40">8</literal></expr> ]</index><index pos:start="519:43" pos:end="519:45">[<expr pos:start="519:44" pos:end="519:44"><literal type="number" pos:start="519:44" pos:end="519:44">1</literal></expr>]</index></name><operator pos:start="519:46" pos:end="519:46">=</operator> <name pos:start="519:48" pos:end="519:49">my</name> <operator pos:start="519:51" pos:end="519:51">-</operator> <name pos:start="519:53" pos:end="519:55">mpy</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="523:25" pos:end="523:45"><expr pos:start="523:25" pos:end="523:44"><name pos:start="523:25" pos:end="523:40"><name pos:start="523:25" pos:end="523:32">mv_cache</name><index pos:start="523:33" pos:end="523:37">[ <expr pos:start="523:35" pos:end="523:35"><literal type="number" pos:start="523:35" pos:end="523:35">0</literal></expr> ]</index><index pos:start="523:38" pos:end="523:40">[<expr pos:start="523:39" pos:end="523:39"><literal type="number" pos:start="523:39" pos:end="523:39">0</literal></expr>]</index></name><operator pos:start="523:41" pos:end="523:41">=</operator> <name pos:start="523:43" pos:end="523:44">mx</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="525:25" pos:end="525:45"><expr pos:start="525:25" pos:end="525:44"><name pos:start="525:25" pos:end="525:40"><name pos:start="525:25" pos:end="525:32">mv_cache</name><index pos:start="525:33" pos:end="525:37">[ <expr pos:start="525:35" pos:end="525:35"><literal type="number" pos:start="525:35" pos:end="525:35">0</literal></expr> ]</index><index pos:start="525:38" pos:end="525:40">[<expr pos:start="525:39" pos:end="525:39"><literal type="number" pos:start="525:39" pos:end="525:39">1</literal></expr>]</index></name><operator pos:start="525:41" pos:end="525:41">=</operator> <name pos:start="525:43" pos:end="525:44">my</name></expr>;</expr_stmt>



                        <expr_stmt pos:start="529:25" pos:end="529:52"><expr pos:start="529:25" pos:end="529:51"><name pos:start="529:25" pos:end="529:41"><name pos:start="529:25" pos:end="529:33">mvd_cache</name><index pos:start="529:34" pos:end="529:38">[ <expr pos:start="529:36" pos:end="529:36"><literal type="number" pos:start="529:36" pos:end="529:36">0</literal></expr> ]</index><index pos:start="529:39" pos:end="529:41">[<expr pos:start="529:40" pos:end="529:40"><literal type="number" pos:start="529:40" pos:end="529:40">0</literal></expr>]</index></name><operator pos:start="529:42" pos:end="529:42">=</operator> <name pos:start="529:44" pos:end="529:45">mx</name> <operator pos:start="529:47" pos:end="529:47">-</operator> <name pos:start="529:49" pos:end="529:51">mpx</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="531:25" pos:end="531:52"><expr pos:start="531:25" pos:end="531:51"><name pos:start="531:25" pos:end="531:41"><name pos:start="531:25" pos:end="531:33">mvd_cache</name><index pos:start="531:34" pos:end="531:38">[ <expr pos:start="531:36" pos:end="531:36"><literal type="number" pos:start="531:36" pos:end="531:36">0</literal></expr> ]</index><index pos:start="531:39" pos:end="531:41">[<expr pos:start="531:40" pos:end="531:40"><literal type="number" pos:start="531:40" pos:end="531:40">1</literal></expr>]</index></name><operator pos:start="531:42" pos:end="531:42">=</operator> <name pos:start="531:44" pos:end="531:45">my</name> <operator pos:start="531:47" pos:end="531:47">-</operator> <name pos:start="531:49" pos:end="531:51">mpy</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if><else pos:start="535:18" pos:end="545:17">else<block pos:start="535:22" pos:end="545:17">{<block_content pos:start="537:21" pos:end="543:50">

                    <decl_stmt pos:start="537:21" pos:end="537:81"><decl pos:start="537:21" pos:end="537:80"><type pos:start="537:21" pos:end="537:30"><name pos:start="537:21" pos:end="537:28">uint32_t</name> <modifier pos:start="537:30" pos:end="537:30">*</modifier></type><name pos:start="537:31" pos:end="537:31">p</name><init pos:start="537:32" pos:end="537:80">= <expr pos:start="537:34" pos:end="537:80"><operator pos:start="537:34" pos:end="537:34">(</operator><name pos:start="537:35" pos:end="537:42">uint32_t</name> <operator pos:start="537:44" pos:end="537:44">*</operator><operator pos:start="537:45" pos:end="537:45">)</operator><operator pos:start="537:46" pos:end="537:46">&amp;</operator><name pos:start="537:47" pos:end="537:80"><name pos:start="537:47" pos:end="537:47">h</name><operator pos:start="537:48" pos:end="537:49">-&gt;</operator><name pos:start="537:50" pos:end="537:57">mv_cache</name><index pos:start="537:58" pos:end="537:63">[<expr pos:start="537:59" pos:end="537:62"><name pos:start="537:59" pos:end="537:62">list</name></expr>]</index><index pos:start="537:64" pos:end="537:77">[ <expr pos:start="537:66" pos:end="537:75"><name pos:start="537:66" pos:end="537:75"><name pos:start="537:66" pos:end="537:70">scan8</name><index pos:start="537:71" pos:end="537:75">[<expr pos:start="537:72" pos:end="537:74"><literal type="number" pos:start="537:72" pos:end="537:72">4</literal><operator pos:start="537:73" pos:end="537:73">*</operator><name pos:start="537:74" pos:end="537:74">i</name></expr>]</index></name></expr> ]</index><index pos:start="537:78" pos:end="537:80">[<expr pos:start="537:79" pos:end="537:79"><literal type="number" pos:start="537:79" pos:end="537:79">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="539:21" pos:end="539:83"><decl pos:start="539:21" pos:end="539:82"><type pos:start="539:21" pos:end="539:30"><name pos:start="539:21" pos:end="539:28">uint32_t</name> <modifier pos:start="539:30" pos:end="539:30">*</modifier></type><name pos:start="539:31" pos:end="539:32">pd</name><init pos:start="539:33" pos:end="539:82">= <expr pos:start="539:35" pos:end="539:82"><operator pos:start="539:35" pos:end="539:35">(</operator><name pos:start="539:36" pos:end="539:43">uint32_t</name> <operator pos:start="539:45" pos:end="539:45">*</operator><operator pos:start="539:46" pos:end="539:46">)</operator><operator pos:start="539:47" pos:end="539:47">&amp;</operator><name pos:start="539:48" pos:end="539:82"><name pos:start="539:48" pos:end="539:48">h</name><operator pos:start="539:49" pos:end="539:50">-&gt;</operator><name pos:start="539:51" pos:end="539:59">mvd_cache</name><index pos:start="539:60" pos:end="539:65">[<expr pos:start="539:61" pos:end="539:64"><name pos:start="539:61" pos:end="539:64">list</name></expr>]</index><index pos:start="539:66" pos:end="539:79">[ <expr pos:start="539:68" pos:end="539:77"><name pos:start="539:68" pos:end="539:77"><name pos:start="539:68" pos:end="539:72">scan8</name><index pos:start="539:73" pos:end="539:77">[<expr pos:start="539:74" pos:end="539:76"><literal type="number" pos:start="539:74" pos:end="539:74">4</literal><operator pos:start="539:75" pos:end="539:75">*</operator><name pos:start="539:76" pos:end="539:76">i</name></expr>]</index></name></expr> ]</index><index pos:start="539:80" pos:end="539:82">[<expr pos:start="539:81" pos:end="539:81"><literal type="number" pos:start="539:81" pos:end="539:81">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="541:21" pos:end="541:50"><expr pos:start="541:21" pos:end="541:49"><name pos:start="541:21" pos:end="541:24"><name pos:start="541:21" pos:end="541:21">p</name><index pos:start="541:22" pos:end="541:24">[<expr pos:start="541:23" pos:end="541:23"><literal type="number" pos:start="541:23" pos:end="541:23">0</literal></expr>]</index></name> <operator pos:start="541:26" pos:end="541:26">=</operator> <name pos:start="541:28" pos:end="541:31"><name pos:start="541:28" pos:end="541:28">p</name><index pos:start="541:29" pos:end="541:31">[<expr pos:start="541:30" pos:end="541:30"><literal type="number" pos:start="541:30" pos:end="541:30">1</literal></expr>]</index></name> <operator pos:start="541:33" pos:end="541:33">=</operator> <name pos:start="541:35" pos:end="541:38"><name pos:start="541:35" pos:end="541:35">p</name><index pos:start="541:36" pos:end="541:38">[<expr pos:start="541:37" pos:end="541:37"><literal type="number" pos:start="541:37" pos:end="541:37">8</literal></expr>]</index></name> <operator pos:start="541:40" pos:end="541:40">=</operator> <name pos:start="541:42" pos:end="541:45"><name pos:start="541:42" pos:end="541:42">p</name><index pos:start="541:43" pos:end="541:45">[<expr pos:start="541:44" pos:end="541:44"><literal type="number" pos:start="541:44" pos:end="541:44">9</literal></expr>]</index></name> <operator pos:start="541:47" pos:end="541:47">=</operator> <literal type="number" pos:start="541:49" pos:end="541:49">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="543:21" pos:end="543:50"><expr pos:start="543:21" pos:end="543:49"><name pos:start="543:21" pos:end="543:25"><name pos:start="543:21" pos:end="543:22">pd</name><index pos:start="543:23" pos:end="543:25">[<expr pos:start="543:24" pos:end="543:24"><literal type="number" pos:start="543:24" pos:end="543:24">0</literal></expr>]</index></name><operator pos:start="543:26" pos:end="543:26">=</operator> <name pos:start="543:28" pos:end="543:32"><name pos:start="543:28" pos:end="543:29">pd</name><index pos:start="543:30" pos:end="543:32">[<expr pos:start="543:31" pos:end="543:31"><literal type="number" pos:start="543:31" pos:end="543:31">1</literal></expr>]</index></name><operator pos:start="543:33" pos:end="543:33">=</operator> <name pos:start="543:35" pos:end="543:39"><name pos:start="543:35" pos:end="543:36">pd</name><index pos:start="543:37" pos:end="543:39">[<expr pos:start="543:38" pos:end="543:38"><literal type="number" pos:start="543:38" pos:end="543:38">8</literal></expr>]</index></name><operator pos:start="543:40" pos:end="543:40">=</operator> <name pos:start="543:42" pos:end="543:46"><name pos:start="543:42" pos:end="543:43">pd</name><index pos:start="543:44" pos:end="543:46">[<expr pos:start="543:45" pos:end="543:45"><literal type="number" pos:start="543:45" pos:end="543:45">9</literal></expr>]</index></name><operator pos:start="543:47" pos:end="543:47">=</operator> <literal type="number" pos:start="543:49" pos:end="543:49">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="551:7" pos:end="561:5">else if<condition pos:start="551:14" pos:end="551:35">( <expr pos:start="551:16" pos:end="551:33"><call pos:start="551:16" pos:end="551:33"><name pos:start="551:16" pos:end="551:24">IS_DIRECT</name><argument_list pos:start="551:25" pos:end="551:33">(<argument pos:start="551:26" pos:end="551:32"><expr pos:start="551:26" pos:end="551:32"><name pos:start="551:26" pos:end="551:32">mb_type</name></expr></argument>)</argument_list></call></expr> )</condition> <block pos:start="551:37" pos:end="561:5">{<block_content pos:start="553:9" pos:end="559:59">

        <expr_stmt pos:start="553:9" pos:end="553:40"><expr pos:start="553:9" pos:end="553:39"><call pos:start="553:9" pos:end="553:39"><name pos:start="553:9" pos:end="553:26">pred_direct_motion</name><argument_list pos:start="553:27" pos:end="553:39">(<argument pos:start="553:28" pos:end="553:28"><expr pos:start="553:28" pos:end="553:28"><name pos:start="553:28" pos:end="553:28">h</name></expr></argument>, <argument pos:start="553:31" pos:end="553:38"><expr pos:start="553:31" pos:end="553:38"><operator pos:start="553:31" pos:end="553:31">&amp;</operator><name pos:start="553:32" pos:end="553:38">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="555:9" pos:end="555:65"><expr pos:start="555:9" pos:end="555:64"><call pos:start="555:9" pos:end="555:64"><name pos:start="555:9" pos:end="555:22">fill_rectangle</name><argument_list pos:start="555:23" pos:end="555:64">(<argument pos:start="555:24" pos:end="555:48"><expr pos:start="555:24" pos:end="555:48"><name pos:start="555:24" pos:end="555:48"><name pos:start="555:24" pos:end="555:24">h</name><operator pos:start="555:25" pos:end="555:26">-&gt;</operator><name pos:start="555:27" pos:end="555:35">mvd_cache</name><index pos:start="555:36" pos:end="555:38">[<expr pos:start="555:37" pos:end="555:37"><literal type="number" pos:start="555:37" pos:end="555:37">0</literal></expr>]</index><index pos:start="555:39" pos:end="555:48">[<expr pos:start="555:40" pos:end="555:47"><name pos:start="555:40" pos:end="555:47"><name pos:start="555:40" pos:end="555:44">scan8</name><index pos:start="555:45" pos:end="555:47">[<expr pos:start="555:46" pos:end="555:46"><literal type="number" pos:start="555:46" pos:end="555:46">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="555:51" pos:end="555:51"><expr pos:start="555:51" pos:end="555:51"><literal type="number" pos:start="555:51" pos:end="555:51">4</literal></expr></argument>, <argument pos:start="555:54" pos:end="555:54"><expr pos:start="555:54" pos:end="555:54"><literal type="number" pos:start="555:54" pos:end="555:54">4</literal></expr></argument>, <argument pos:start="555:57" pos:end="555:57"><expr pos:start="555:57" pos:end="555:57"><literal type="number" pos:start="555:57" pos:end="555:57">8</literal></expr></argument>, <argument pos:start="555:60" pos:end="555:60"><expr pos:start="555:60" pos:end="555:60"><literal type="number" pos:start="555:60" pos:end="555:60">0</literal></expr></argument>, <argument pos:start="555:63" pos:end="555:63"><expr pos:start="555:63" pos:end="555:63"><literal type="number" pos:start="555:63" pos:end="555:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="557:9" pos:end="557:65"><expr pos:start="557:9" pos:end="557:64"><call pos:start="557:9" pos:end="557:64"><name pos:start="557:9" pos:end="557:22">fill_rectangle</name><argument_list pos:start="557:23" pos:end="557:64">(<argument pos:start="557:24" pos:end="557:48"><expr pos:start="557:24" pos:end="557:48"><name pos:start="557:24" pos:end="557:48"><name pos:start="557:24" pos:end="557:24">h</name><operator pos:start="557:25" pos:end="557:26">-&gt;</operator><name pos:start="557:27" pos:end="557:35">mvd_cache</name><index pos:start="557:36" pos:end="557:38">[<expr pos:start="557:37" pos:end="557:37"><literal type="number" pos:start="557:37" pos:end="557:37">1</literal></expr>]</index><index pos:start="557:39" pos:end="557:48">[<expr pos:start="557:40" pos:end="557:47"><name pos:start="557:40" pos:end="557:47"><name pos:start="557:40" pos:end="557:44">scan8</name><index pos:start="557:45" pos:end="557:47">[<expr pos:start="557:46" pos:end="557:46"><literal type="number" pos:start="557:46" pos:end="557:46">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="557:51" pos:end="557:51"><expr pos:start="557:51" pos:end="557:51"><literal type="number" pos:start="557:51" pos:end="557:51">4</literal></expr></argument>, <argument pos:start="557:54" pos:end="557:54"><expr pos:start="557:54" pos:end="557:54"><literal type="number" pos:start="557:54" pos:end="557:54">4</literal></expr></argument>, <argument pos:start="557:57" pos:end="557:57"><expr pos:start="557:57" pos:end="557:57"><literal type="number" pos:start="557:57" pos:end="557:57">8</literal></expr></argument>, <argument pos:start="557:60" pos:end="557:60"><expr pos:start="557:60" pos:end="557:60"><literal type="number" pos:start="557:60" pos:end="557:60">0</literal></expr></argument>, <argument pos:start="557:63" pos:end="557:63"><expr pos:start="557:63" pos:end="557:63"><literal type="number" pos:start="557:63" pos:end="557:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="559:9" pos:end="559:59"><expr pos:start="559:9" pos:end="559:58"><name pos:start="559:9" pos:end="559:22">dct8x8_allowed</name> <operator pos:start="559:24" pos:end="559:25">&amp;=</operator> <name pos:start="559:27" pos:end="559:58"><name pos:start="559:27" pos:end="559:27">h</name><operator pos:start="559:28" pos:end="559:29">-&gt;</operator><name pos:start="559:30" pos:end="559:32">sps</name><operator pos:start="559:33" pos:end="559:33">.</operator><name pos:start="559:34" pos:end="559:58">direct_8x8_inference_flag</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="561:7" pos:end="721:5">else <block pos:start="561:12" pos:end="721:5">{<block_content pos:start="563:9" pos:end="719:9">

        <decl_stmt pos:start="563:9" pos:end="563:38"><decl pos:start="563:9" pos:end="563:16"><type pos:start="563:9" pos:end="563:11"><name pos:start="563:9" pos:end="563:11">int</name></type> <name pos:start="563:13" pos:end="563:16">list</name></decl>, <decl pos:start="563:19" pos:end="563:20"><type ref="prev" pos:start="563:9" pos:end="563:11"/><name pos:start="563:19" pos:end="563:20">mx</name></decl>, <decl pos:start="563:23" pos:end="563:24"><type ref="prev" pos:start="563:9" pos:end="563:11"/><name pos:start="563:23" pos:end="563:24">my</name></decl>, <decl pos:start="563:27" pos:end="563:27"><type ref="prev" pos:start="563:9" pos:end="563:11"/><name pos:start="563:27" pos:end="563:27">i</name></decl>, <decl pos:start="563:30" pos:end="563:32"><type ref="prev" pos:start="563:9" pos:end="563:11"/><name pos:start="563:30" pos:end="563:32">mpx</name></decl>, <decl pos:start="563:35" pos:end="563:37"><type ref="prev" pos:start="563:9" pos:end="563:11"/><name pos:start="563:35" pos:end="563:37">mpy</name></decl>;</decl_stmt>

        <if_stmt pos:start="565:9" pos:end="719:9"><if pos:start="565:9" pos:end="611:9">if<condition pos:start="565:11" pos:end="565:29">(<expr pos:start="565:12" pos:end="565:28"><call pos:start="565:12" pos:end="565:28"><name pos:start="565:12" pos:end="565:19">IS_16X16</name><argument_list pos:start="565:20" pos:end="565:28">(<argument pos:start="565:21" pos:end="565:27"><expr pos:start="565:21" pos:end="565:27"><name pos:start="565:21" pos:end="565:27">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="565:30" pos:end="611:9">{<block_content pos:start="567:13" pos:end="609:13">

            <for pos:start="567:13" pos:end="583:13">for<control pos:start="567:16" pos:end="567:39">(<init pos:start="567:17" pos:end="567:23"><expr pos:start="567:17" pos:end="567:22"><name pos:start="567:17" pos:end="567:20">list</name><operator pos:start="567:21" pos:end="567:21">=</operator><literal type="number" pos:start="567:22" pos:end="567:22">0</literal></expr>;</init> <condition pos:start="567:25" pos:end="567:31"><expr pos:start="567:25" pos:end="567:30"><name pos:start="567:25" pos:end="567:28">list</name><operator pos:start="567:29" pos:end="567:29">&lt;</operator><literal type="number" pos:start="567:30" pos:end="567:30">2</literal></expr>;</condition> <incr pos:start="567:33" pos:end="567:38"><expr pos:start="567:33" pos:end="567:38"><name pos:start="567:33" pos:end="567:36">list</name><operator pos:start="567:37" pos:end="567:38">++</operator></expr></incr>)</control><block pos:start="567:40" pos:end="583:13">{<block_content pos:start="569:17" pos:end="581:104">

                <if_stmt pos:start="569:17" pos:end="581:104"><if pos:start="569:17" pos:end="579:17">if<condition pos:start="569:19" pos:end="569:44">(<expr pos:start="569:20" pos:end="569:43"><call pos:start="569:20" pos:end="569:43"><name pos:start="569:20" pos:end="569:25">IS_DIR</name><argument_list pos:start="569:26" pos:end="569:43">(<argument pos:start="569:27" pos:end="569:33"><expr pos:start="569:27" pos:end="569:33"><name pos:start="569:27" pos:end="569:33">mb_type</name></expr></argument>, <argument pos:start="569:36" pos:end="569:36"><expr pos:start="569:36" pos:end="569:36"><literal type="number" pos:start="569:36" pos:end="569:36">0</literal></expr></argument>, <argument pos:start="569:39" pos:end="569:42"><expr pos:start="569:39" pos:end="569:42"><name pos:start="569:39" pos:end="569:42">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="569:45" pos:end="579:17">{<block_content pos:start="571:21" pos:end="577:21">

                    <if_stmt pos:start="571:21" pos:end="577:21"><if pos:start="571:21" pos:end="577:21">if<condition pos:start="571:23" pos:end="571:47">(<expr pos:start="571:24" pos:end="571:45"><name pos:start="571:24" pos:end="571:41"><name pos:start="571:24" pos:end="571:24">h</name><operator pos:start="571:25" pos:end="571:26">-&gt;</operator><name pos:start="571:27" pos:end="571:35">ref_count</name><index pos:start="571:36" pos:end="571:41">[<expr pos:start="571:37" pos:end="571:40"><name pos:start="571:37" pos:end="571:40">list</name></expr>]</index></name> <operator pos:start="571:43" pos:end="571:43">&gt;</operator> <literal type="number" pos:start="571:45" pos:end="571:45">0</literal></expr> )</condition><block pos:start="571:48" pos:end="577:21">{<block_content pos:start="573:25" pos:end="575:89">

                        <decl_stmt pos:start="573:25" pos:end="573:103"><decl pos:start="573:25" pos:end="573:102"><type pos:start="573:25" pos:end="573:33"><specifier pos:start="573:25" pos:end="573:29">const</specifier> <name pos:start="573:31" pos:end="573:33">int</name></type> <name pos:start="573:35" pos:end="573:37">ref</name> <init pos:start="573:39" pos:end="573:102">= <expr pos:start="573:41" pos:end="573:102"><ternary pos:start="573:41" pos:end="573:102"><condition pos:start="573:41" pos:end="573:64"><expr pos:start="573:41" pos:end="573:62"><name pos:start="573:41" pos:end="573:58"><name pos:start="573:41" pos:end="573:41">h</name><operator pos:start="573:42" pos:end="573:43">-&gt;</operator><name pos:start="573:44" pos:end="573:52">ref_count</name><index pos:start="573:53" pos:end="573:58">[<expr pos:start="573:54" pos:end="573:57"><name pos:start="573:54" pos:end="573:57">list</name></expr>]</index></name> <operator pos:start="573:60" pos:end="573:60">&gt;</operator> <literal type="number" pos:start="573:62" pos:end="573:62">1</literal></expr> ?</condition><then pos:start="573:66" pos:end="573:98"> <expr pos:start="573:66" pos:end="573:98"><call pos:start="573:66" pos:end="573:98"><name pos:start="573:66" pos:end="573:84">decode_cabac_mb_ref</name><argument_list pos:start="573:85" pos:end="573:98">( <argument pos:start="573:87" pos:end="573:87"><expr pos:start="573:87" pos:end="573:87"><name pos:start="573:87" pos:end="573:87">h</name></expr></argument>, <argument pos:start="573:90" pos:end="573:93"><expr pos:start="573:90" pos:end="573:93"><name pos:start="573:90" pos:end="573:93">list</name></expr></argument>, <argument pos:start="573:96" pos:end="573:96"><expr pos:start="573:96" pos:end="573:96"><literal type="number" pos:start="573:96" pos:end="573:96">0</literal></expr></argument> )</argument_list></call></expr> </then><else pos:start="573:100" pos:end="573:102">: <expr pos:start="573:102" pos:end="573:102"><literal type="number" pos:start="573:102" pos:end="573:102">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="575:25" pos:end="575:89"><expr pos:start="575:25" pos:end="575:88"><call pos:start="575:25" pos:end="575:88"><name pos:start="575:25" pos:end="575:38">fill_rectangle</name><argument_list pos:start="575:39" pos:end="575:88">(<argument pos:start="575:40" pos:end="575:70"><expr pos:start="575:40" pos:end="575:70"><operator pos:start="575:40" pos:end="575:40">&amp;</operator><name pos:start="575:41" pos:end="575:70"><name pos:start="575:41" pos:end="575:41">h</name><operator pos:start="575:42" pos:end="575:43">-&gt;</operator><name pos:start="575:44" pos:end="575:52">ref_cache</name><index pos:start="575:53" pos:end="575:58">[<expr pos:start="575:54" pos:end="575:57"><name pos:start="575:54" pos:end="575:57">list</name></expr>]</index><index pos:start="575:59" pos:end="575:70">[ <expr pos:start="575:61" pos:end="575:68"><name pos:start="575:61" pos:end="575:68"><name pos:start="575:61" pos:end="575:65">scan8</name><index pos:start="575:66" pos:end="575:68">[<expr pos:start="575:67" pos:end="575:67"><literal type="number" pos:start="575:67" pos:end="575:67">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="575:73" pos:end="575:73"><expr pos:start="575:73" pos:end="575:73"><literal type="number" pos:start="575:73" pos:end="575:73">4</literal></expr></argument>, <argument pos:start="575:76" pos:end="575:76"><expr pos:start="575:76" pos:end="575:76"><literal type="number" pos:start="575:76" pos:end="575:76">4</literal></expr></argument>, <argument pos:start="575:79" pos:end="575:79"><expr pos:start="575:79" pos:end="575:79"><literal type="number" pos:start="575:79" pos:end="575:79">8</literal></expr></argument>, <argument pos:start="575:82" pos:end="575:84"><expr pos:start="575:82" pos:end="575:84"><name pos:start="575:82" pos:end="575:84">ref</name></expr></argument>, <argument pos:start="575:87" pos:end="575:87"><expr pos:start="575:87" pos:end="575:87"><literal type="number" pos:start="575:87" pos:end="575:87">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if><else pos:start="579:18" pos:end="581:104">else<block type="pseudo" pos:start="581:21" pos:end="581:104"><block_content pos:start="581:21" pos:end="581:104">

                    <expr_stmt pos:start="581:21" pos:end="581:104"><expr pos:start="581:21" pos:end="581:103"><call pos:start="581:21" pos:end="581:103"><name pos:start="581:21" pos:end="581:34">fill_rectangle</name><argument_list pos:start="581:35" pos:end="581:103">(<argument pos:start="581:36" pos:end="581:66"><expr pos:start="581:36" pos:end="581:66"><operator pos:start="581:36" pos:end="581:36">&amp;</operator><name pos:start="581:37" pos:end="581:66"><name pos:start="581:37" pos:end="581:37">h</name><operator pos:start="581:38" pos:end="581:39">-&gt;</operator><name pos:start="581:40" pos:end="581:48">ref_cache</name><index pos:start="581:49" pos:end="581:54">[<expr pos:start="581:50" pos:end="581:53"><name pos:start="581:50" pos:end="581:53">list</name></expr>]</index><index pos:start="581:55" pos:end="581:66">[ <expr pos:start="581:57" pos:end="581:64"><name pos:start="581:57" pos:end="581:64"><name pos:start="581:57" pos:end="581:61">scan8</name><index pos:start="581:62" pos:end="581:64">[<expr pos:start="581:63" pos:end="581:63"><literal type="number" pos:start="581:63" pos:end="581:63">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="581:69" pos:end="581:69"><expr pos:start="581:69" pos:end="581:69"><literal type="number" pos:start="581:69" pos:end="581:69">4</literal></expr></argument>, <argument pos:start="581:72" pos:end="581:72"><expr pos:start="581:72" pos:end="581:72"><literal type="number" pos:start="581:72" pos:end="581:72">4</literal></expr></argument>, <argument pos:start="581:75" pos:end="581:75"><expr pos:start="581:75" pos:end="581:75"><literal type="number" pos:start="581:75" pos:end="581:75">8</literal></expr></argument>, <argument pos:start="581:78" pos:end="581:99"><expr pos:start="581:78" pos:end="581:99"><operator pos:start="581:78" pos:end="581:78">(</operator><name pos:start="581:79" pos:end="581:85">uint8_t</name><operator pos:start="581:86" pos:end="581:86">)</operator><name pos:start="581:87" pos:end="581:99">LIST_NOT_USED</name></expr></argument>, <argument pos:start="581:102" pos:end="581:102"><expr pos:start="581:102" pos:end="581:102"><literal type="number" pos:start="581:102" pos:end="581:102">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></for>

            <for pos:start="585:13" pos:end="609:13">for<control pos:start="585:16" pos:end="585:39">(<init pos:start="585:17" pos:end="585:23"><expr pos:start="585:17" pos:end="585:22"><name pos:start="585:17" pos:end="585:20">list</name><operator pos:start="585:21" pos:end="585:21">=</operator><literal type="number" pos:start="585:22" pos:end="585:22">0</literal></expr>;</init> <condition pos:start="585:25" pos:end="585:31"><expr pos:start="585:25" pos:end="585:30"><name pos:start="585:25" pos:end="585:28">list</name><operator pos:start="585:29" pos:end="585:29">&lt;</operator><literal type="number" pos:start="585:30" pos:end="585:30">2</literal></expr>;</condition> <incr pos:start="585:33" pos:end="585:38"><expr pos:start="585:33" pos:end="585:38"><name pos:start="585:33" pos:end="585:36">list</name><operator pos:start="585:37" pos:end="585:38">++</operator></expr></incr>)</control><block pos:start="585:40" pos:end="609:13">{<block_content pos:start="587:17" pos:end="607:81">

                <if_stmt pos:start="587:17" pos:end="607:81"><if pos:start="587:17" pos:end="605:17">if<condition pos:start="587:19" pos:end="587:44">(<expr pos:start="587:20" pos:end="587:43"><call pos:start="587:20" pos:end="587:43"><name pos:start="587:20" pos:end="587:25">IS_DIR</name><argument_list pos:start="587:26" pos:end="587:43">(<argument pos:start="587:27" pos:end="587:33"><expr pos:start="587:27" pos:end="587:33"><name pos:start="587:27" pos:end="587:33">mb_type</name></expr></argument>, <argument pos:start="587:36" pos:end="587:36"><expr pos:start="587:36" pos:end="587:36"><literal type="number" pos:start="587:36" pos:end="587:36">0</literal></expr></argument>, <argument pos:start="587:39" pos:end="587:42"><expr pos:start="587:39" pos:end="587:42"><name pos:start="587:39" pos:end="587:42">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="587:45" pos:end="605:17">{<block_content pos:start="589:21" pos:end="603:97">

                    <expr_stmt pos:start="589:21" pos:end="589:91"><expr pos:start="589:21" pos:end="589:90"><call pos:start="589:21" pos:end="589:90"><name pos:start="589:21" pos:end="589:31">pred_motion</name><argument_list pos:start="589:32" pos:end="589:90">(<argument pos:start="589:33" pos:end="589:33"><expr pos:start="589:33" pos:end="589:33"><name pos:start="589:33" pos:end="589:33">h</name></expr></argument>, <argument pos:start="589:36" pos:end="589:36"><expr pos:start="589:36" pos:end="589:36"><literal type="number" pos:start="589:36" pos:end="589:36">0</literal></expr></argument>, <argument pos:start="589:39" pos:end="589:39"><expr pos:start="589:39" pos:end="589:39"><literal type="number" pos:start="589:39" pos:end="589:39">4</literal></expr></argument>, <argument pos:start="589:42" pos:end="589:45"><expr pos:start="589:42" pos:end="589:45"><name pos:start="589:42" pos:end="589:45">list</name></expr></argument>, <argument pos:start="589:48" pos:end="589:77"><expr pos:start="589:48" pos:end="589:77"><name pos:start="589:48" pos:end="589:77"><name pos:start="589:48" pos:end="589:48">h</name><operator pos:start="589:49" pos:end="589:50">-&gt;</operator><name pos:start="589:51" pos:end="589:59">ref_cache</name><index pos:start="589:60" pos:end="589:65">[<expr pos:start="589:61" pos:end="589:64"><name pos:start="589:61" pos:end="589:64">list</name></expr>]</index><index pos:start="589:66" pos:end="589:77">[ <expr pos:start="589:68" pos:end="589:75"><name pos:start="589:68" pos:end="589:75"><name pos:start="589:68" pos:end="589:72">scan8</name><index pos:start="589:73" pos:end="589:75">[<expr pos:start="589:74" pos:end="589:74"><literal type="number" pos:start="589:74" pos:end="589:74">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="589:80" pos:end="589:83"><expr pos:start="589:80" pos:end="589:83"><operator pos:start="589:80" pos:end="589:80">&amp;</operator><name pos:start="589:81" pos:end="589:83">mpx</name></expr></argument>, <argument pos:start="589:86" pos:end="589:89"><expr pos:start="589:86" pos:end="589:89"><operator pos:start="589:86" pos:end="589:86">&amp;</operator><name pos:start="589:87" pos:end="589:89">mpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="593:21" pos:end="593:68"><expr pos:start="593:21" pos:end="593:67"><name pos:start="593:21" pos:end="593:22">mx</name> <operator pos:start="593:24" pos:end="593:24">=</operator> <name pos:start="593:26" pos:end="593:28">mpx</name> <operator pos:start="593:30" pos:end="593:30">+</operator> <call pos:start="593:32" pos:end="593:67"><name pos:start="593:32" pos:end="593:50">decode_cabac_mb_mvd</name><argument_list pos:start="593:51" pos:end="593:67">( <argument pos:start="593:53" pos:end="593:53"><expr pos:start="593:53" pos:end="593:53"><name pos:start="593:53" pos:end="593:53">h</name></expr></argument>, <argument pos:start="593:56" pos:end="593:59"><expr pos:start="593:56" pos:end="593:59"><name pos:start="593:56" pos:end="593:59">list</name></expr></argument>, <argument pos:start="593:62" pos:end="593:62"><expr pos:start="593:62" pos:end="593:62"><literal type="number" pos:start="593:62" pos:end="593:62">0</literal></expr></argument>, <argument pos:start="593:65" pos:end="593:65"><expr pos:start="593:65" pos:end="593:65"><literal type="number" pos:start="593:65" pos:end="593:65">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="595:21" pos:end="595:68"><expr pos:start="595:21" pos:end="595:67"><name pos:start="595:21" pos:end="595:22">my</name> <operator pos:start="595:24" pos:end="595:24">=</operator> <name pos:start="595:26" pos:end="595:28">mpy</name> <operator pos:start="595:30" pos:end="595:30">+</operator> <call pos:start="595:32" pos:end="595:67"><name pos:start="595:32" pos:end="595:50">decode_cabac_mb_mvd</name><argument_list pos:start="595:51" pos:end="595:67">( <argument pos:start="595:53" pos:end="595:53"><expr pos:start="595:53" pos:end="595:53"><name pos:start="595:53" pos:end="595:53">h</name></expr></argument>, <argument pos:start="595:56" pos:end="595:59"><expr pos:start="595:56" pos:end="595:59"><name pos:start="595:56" pos:end="595:59">list</name></expr></argument>, <argument pos:start="595:62" pos:end="595:62"><expr pos:start="595:62" pos:end="595:62"><literal type="number" pos:start="595:62" pos:end="595:62">0</literal></expr></argument>, <argument pos:start="595:65" pos:end="595:65"><expr pos:start="595:65" pos:end="595:65"><literal type="number" pos:start="595:65" pos:end="595:65">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="597:21" pos:end="597:56"><expr pos:start="597:21" pos:end="597:55"><call pos:start="597:21" pos:end="597:55"><name pos:start="597:21" pos:end="597:27">tprintf</name><argument_list pos:start="597:28" pos:end="597:55">(<argument pos:start="597:29" pos:end="597:46"><expr pos:start="597:29" pos:end="597:46"><literal type="string" pos:start="597:29" pos:end="597:46">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="597:49" pos:end="597:50"><expr pos:start="597:49" pos:end="597:50"><name pos:start="597:49" pos:end="597:50">mx</name></expr></argument>, <argument pos:start="597:53" pos:end="597:54"><expr pos:start="597:53" pos:end="597:54"><name pos:start="597:53" pos:end="597:54">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="601:21" pos:end="601:106"><expr pos:start="601:21" pos:end="601:105"><call pos:start="601:21" pos:end="601:105"><name pos:start="601:21" pos:end="601:34">fill_rectangle</name><argument_list pos:start="601:35" pos:end="601:105">(<argument pos:start="601:36" pos:end="601:65"><expr pos:start="601:36" pos:end="601:65"><name pos:start="601:36" pos:end="601:65"><name pos:start="601:36" pos:end="601:36">h</name><operator pos:start="601:37" pos:end="601:38">-&gt;</operator><name pos:start="601:39" pos:end="601:47">mvd_cache</name><index pos:start="601:48" pos:end="601:53">[<expr pos:start="601:49" pos:end="601:52"><name pos:start="601:49" pos:end="601:52">list</name></expr>]</index><index pos:start="601:54" pos:end="601:65">[ <expr pos:start="601:56" pos:end="601:63"><name pos:start="601:56" pos:end="601:63"><name pos:start="601:56" pos:end="601:60">scan8</name><index pos:start="601:61" pos:end="601:63">[<expr pos:start="601:62" pos:end="601:62"><literal type="number" pos:start="601:62" pos:end="601:62">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="601:68" pos:end="601:68"><expr pos:start="601:68" pos:end="601:68"><literal type="number" pos:start="601:68" pos:end="601:68">4</literal></expr></argument>, <argument pos:start="601:71" pos:end="601:71"><expr pos:start="601:71" pos:end="601:71"><literal type="number" pos:start="601:71" pos:end="601:71">4</literal></expr></argument>, <argument pos:start="601:74" pos:end="601:74"><expr pos:start="601:74" pos:end="601:74"><literal type="number" pos:start="601:74" pos:end="601:74">8</literal></expr></argument>, <argument pos:start="601:77" pos:end="601:101"><expr pos:start="601:77" pos:end="601:101"><call pos:start="601:77" pos:end="601:101"><name pos:start="601:77" pos:end="601:86">pack16to32</name><argument_list pos:start="601:87" pos:end="601:101">(<argument pos:start="601:88" pos:end="601:93"><expr pos:start="601:88" pos:end="601:93"><name pos:start="601:88" pos:end="601:89">mx</name><operator pos:start="601:90" pos:end="601:90">-</operator><name pos:start="601:91" pos:end="601:93">mpx</name></expr></argument>,<argument pos:start="601:95" pos:end="601:100"><expr pos:start="601:95" pos:end="601:100"><name pos:start="601:95" pos:end="601:96">my</name><operator pos:start="601:97" pos:end="601:97">-</operator><name pos:start="601:98" pos:end="601:100">mpy</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="601:104" pos:end="601:104"><expr pos:start="601:104" pos:end="601:104"><literal type="number" pos:start="601:104" pos:end="601:104">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="603:21" pos:end="603:97"><expr pos:start="603:21" pos:end="603:96"><call pos:start="603:21" pos:end="603:96"><name pos:start="603:21" pos:end="603:34">fill_rectangle</name><argument_list pos:start="603:35" pos:end="603:96">(<argument pos:start="603:36" pos:end="603:64"><expr pos:start="603:36" pos:end="603:64"><name pos:start="603:36" pos:end="603:64"><name pos:start="603:36" pos:end="603:36">h</name><operator pos:start="603:37" pos:end="603:38">-&gt;</operator><name pos:start="603:39" pos:end="603:46">mv_cache</name><index pos:start="603:47" pos:end="603:52">[<expr pos:start="603:48" pos:end="603:51"><name pos:start="603:48" pos:end="603:51">list</name></expr>]</index><index pos:start="603:53" pos:end="603:64">[ <expr pos:start="603:55" pos:end="603:62"><name pos:start="603:55" pos:end="603:62"><name pos:start="603:55" pos:end="603:59">scan8</name><index pos:start="603:60" pos:end="603:62">[<expr pos:start="603:61" pos:end="603:61"><literal type="number" pos:start="603:61" pos:end="603:61">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="603:67" pos:end="603:67"><expr pos:start="603:67" pos:end="603:67"><literal type="number" pos:start="603:67" pos:end="603:67">4</literal></expr></argument>, <argument pos:start="603:70" pos:end="603:70"><expr pos:start="603:70" pos:end="603:70"><literal type="number" pos:start="603:70" pos:end="603:70">4</literal></expr></argument>, <argument pos:start="603:73" pos:end="603:73"><expr pos:start="603:73" pos:end="603:73"><literal type="number" pos:start="603:73" pos:end="603:73">8</literal></expr></argument>, <argument pos:start="603:76" pos:end="603:92"><expr pos:start="603:76" pos:end="603:92"><call pos:start="603:76" pos:end="603:92"><name pos:start="603:76" pos:end="603:85">pack16to32</name><argument_list pos:start="603:86" pos:end="603:92">(<argument pos:start="603:87" pos:end="603:88"><expr pos:start="603:87" pos:end="603:88"><name pos:start="603:87" pos:end="603:88">mx</name></expr></argument>,<argument pos:start="603:90" pos:end="603:91"><expr pos:start="603:90" pos:end="603:91"><name pos:start="603:90" pos:end="603:91">my</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="603:95" pos:end="603:95"><expr pos:start="603:95" pos:end="603:95"><literal type="number" pos:start="603:95" pos:end="603:95">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="605:18" pos:end="607:81">else<block type="pseudo" pos:start="607:21" pos:end="607:81"><block_content pos:start="607:21" pos:end="607:81">

                    <expr_stmt pos:start="607:21" pos:end="607:81"><expr pos:start="607:21" pos:end="607:80"><call pos:start="607:21" pos:end="607:80"><name pos:start="607:21" pos:end="607:34">fill_rectangle</name><argument_list pos:start="607:35" pos:end="607:80">(<argument pos:start="607:36" pos:end="607:64"><expr pos:start="607:36" pos:end="607:64"><name pos:start="607:36" pos:end="607:64"><name pos:start="607:36" pos:end="607:36">h</name><operator pos:start="607:37" pos:end="607:38">-&gt;</operator><name pos:start="607:39" pos:end="607:46">mv_cache</name><index pos:start="607:47" pos:end="607:52">[<expr pos:start="607:48" pos:end="607:51"><name pos:start="607:48" pos:end="607:51">list</name></expr>]</index><index pos:start="607:53" pos:end="607:64">[ <expr pos:start="607:55" pos:end="607:62"><name pos:start="607:55" pos:end="607:62"><name pos:start="607:55" pos:end="607:59">scan8</name><index pos:start="607:60" pos:end="607:62">[<expr pos:start="607:61" pos:end="607:61"><literal type="number" pos:start="607:61" pos:end="607:61">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="607:67" pos:end="607:67"><expr pos:start="607:67" pos:end="607:67"><literal type="number" pos:start="607:67" pos:end="607:67">4</literal></expr></argument>, <argument pos:start="607:70" pos:end="607:70"><expr pos:start="607:70" pos:end="607:70"><literal type="number" pos:start="607:70" pos:end="607:70">4</literal></expr></argument>, <argument pos:start="607:73" pos:end="607:73"><expr pos:start="607:73" pos:end="607:73"><literal type="number" pos:start="607:73" pos:end="607:73">8</literal></expr></argument>, <argument pos:start="607:76" pos:end="607:76"><expr pos:start="607:76" pos:end="607:76"><literal type="number" pos:start="607:76" pos:end="607:76">0</literal></expr></argument>, <argument pos:start="607:79" pos:end="607:79"><expr pos:start="607:79" pos:end="607:79"><literal type="number" pos:start="607:79" pos:end="607:79">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if>

        <if type="elseif" pos:start="613:9" pos:end="665:9">else if<condition pos:start="613:16" pos:end="613:33">(<expr pos:start="613:17" pos:end="613:32"><call pos:start="613:17" pos:end="613:32"><name pos:start="613:17" pos:end="613:23">IS_16X8</name><argument_list pos:start="613:24" pos:end="613:32">(<argument pos:start="613:25" pos:end="613:31"><expr pos:start="613:25" pos:end="613:31"><name pos:start="613:25" pos:end="613:31">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="613:34" pos:end="665:9">{<block_content pos:start="615:13" pos:end="663:13">

            <for pos:start="615:13" pos:end="631:13">for<control pos:start="615:16" pos:end="615:51">(<init pos:start="615:17" pos:end="615:23"><expr pos:start="615:17" pos:end="615:22"><name pos:start="615:17" pos:end="615:20">list</name><operator pos:start="615:21" pos:end="615:21">=</operator><literal type="number" pos:start="615:22" pos:end="615:22">0</literal></expr>;</init> <condition pos:start="615:25" pos:end="615:43"><expr pos:start="615:25" pos:end="615:42"><name pos:start="615:25" pos:end="615:28">list</name><operator pos:start="615:29" pos:end="615:29">&lt;</operator><name pos:start="615:30" pos:end="615:42"><name pos:start="615:30" pos:end="615:30">h</name><operator pos:start="615:31" pos:end="615:32">-&gt;</operator><name pos:start="615:33" pos:end="615:42">list_count</name></name></expr>;</condition> <incr pos:start="615:45" pos:end="615:50"><expr pos:start="615:45" pos:end="615:50"><name pos:start="615:45" pos:end="615:48">list</name><operator pos:start="615:49" pos:end="615:50">++</operator></expr></incr>)</control><block pos:start="615:52" pos:end="631:13">{<block_content pos:start="617:21" pos:end="629:21">

                    <for pos:start="617:21" pos:end="629:21">for<control pos:start="617:24" pos:end="617:38">(<init pos:start="617:25" pos:end="617:28"><expr pos:start="617:25" pos:end="617:27"><name pos:start="617:25" pos:end="617:25">i</name><operator pos:start="617:26" pos:end="617:26">=</operator><literal type="number" pos:start="617:27" pos:end="617:27">0</literal></expr>;</init> <condition pos:start="617:30" pos:end="617:33"><expr pos:start="617:30" pos:end="617:32"><name pos:start="617:30" pos:end="617:30">i</name><operator pos:start="617:31" pos:end="617:31">&lt;</operator><literal type="number" pos:start="617:32" pos:end="617:32">2</literal></expr>;</condition> <incr pos:start="617:35" pos:end="617:37"><expr pos:start="617:35" pos:end="617:37"><name pos:start="617:35" pos:end="617:35">i</name><operator pos:start="617:36" pos:end="617:37">++</operator></expr></incr>)</control><block pos:start="617:39" pos:end="629:21">{<block_content pos:start="619:25" pos:end="627:117">

                        <if_stmt pos:start="619:25" pos:end="627:117"><if pos:start="619:25" pos:end="625:25">if<condition pos:start="619:27" pos:end="619:52">(<expr pos:start="619:28" pos:end="619:51"><call pos:start="619:28" pos:end="619:51"><name pos:start="619:28" pos:end="619:33">IS_DIR</name><argument_list pos:start="619:34" pos:end="619:51">(<argument pos:start="619:35" pos:end="619:41"><expr pos:start="619:35" pos:end="619:41"><name pos:start="619:35" pos:end="619:41">mb_type</name></expr></argument>, <argument pos:start="619:44" pos:end="619:44"><expr pos:start="619:44" pos:end="619:44"><name pos:start="619:44" pos:end="619:44">i</name></expr></argument>, <argument pos:start="619:47" pos:end="619:50"><expr pos:start="619:47" pos:end="619:50"><name pos:start="619:47" pos:end="619:50">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="619:53" pos:end="625:25">{<block_content pos:start="621:29" pos:end="623:100">

                            <decl_stmt pos:start="621:29" pos:end="621:108"><decl pos:start="621:29" pos:end="621:107"><type pos:start="621:29" pos:end="621:37"><specifier pos:start="621:29" pos:end="621:33">const</specifier> <name pos:start="621:35" pos:end="621:37">int</name></type> <name pos:start="621:39" pos:end="621:41">ref</name><init pos:start="621:42" pos:end="621:107">= <expr pos:start="621:44" pos:end="621:107"><ternary pos:start="621:44" pos:end="621:107"><condition pos:start="621:44" pos:end="621:67"><expr pos:start="621:44" pos:end="621:65"><name pos:start="621:44" pos:end="621:61"><name pos:start="621:44" pos:end="621:44">h</name><operator pos:start="621:45" pos:end="621:46">-&gt;</operator><name pos:start="621:47" pos:end="621:55">ref_count</name><index pos:start="621:56" pos:end="621:61">[<expr pos:start="621:57" pos:end="621:60"><name pos:start="621:57" pos:end="621:60">list</name></expr>]</index></name> <operator pos:start="621:63" pos:end="621:63">&gt;</operator> <literal type="number" pos:start="621:65" pos:end="621:65">1</literal></expr> ?</condition><then pos:start="621:69" pos:end="621:103"> <expr pos:start="621:69" pos:end="621:103"><call pos:start="621:69" pos:end="621:103"><name pos:start="621:69" pos:end="621:87">decode_cabac_mb_ref</name><argument_list pos:start="621:88" pos:end="621:103">( <argument pos:start="621:90" pos:end="621:90"><expr pos:start="621:90" pos:end="621:90"><name pos:start="621:90" pos:end="621:90">h</name></expr></argument>, <argument pos:start="621:93" pos:end="621:96"><expr pos:start="621:93" pos:end="621:96"><name pos:start="621:93" pos:end="621:96">list</name></expr></argument>, <argument pos:start="621:99" pos:end="621:101"><expr pos:start="621:99" pos:end="621:101"><literal type="number" pos:start="621:99" pos:end="621:99">8</literal><operator pos:start="621:100" pos:end="621:100">*</operator><name pos:start="621:101" pos:end="621:101">i</name></expr></argument> )</argument_list></call></expr> </then><else pos:start="621:105" pos:end="621:107">: <expr pos:start="621:107" pos:end="621:107"><literal type="number" pos:start="621:107" pos:end="621:107">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="623:29" pos:end="623:100"><expr pos:start="623:29" pos:end="623:99"><call pos:start="623:29" pos:end="623:99"><name pos:start="623:29" pos:end="623:42">fill_rectangle</name><argument_list pos:start="623:43" pos:end="623:99">(<argument pos:start="623:44" pos:end="623:81"><expr pos:start="623:44" pos:end="623:81"><operator pos:start="623:44" pos:end="623:44">&amp;</operator><name pos:start="623:45" pos:end="623:81"><name pos:start="623:45" pos:end="623:45">h</name><operator pos:start="623:46" pos:end="623:47">-&gt;</operator><name pos:start="623:48" pos:end="623:56">ref_cache</name><index pos:start="623:57" pos:end="623:62">[<expr pos:start="623:58" pos:end="623:61"><name pos:start="623:58" pos:end="623:61">list</name></expr>]</index><index pos:start="623:63" pos:end="623:81">[ <expr pos:start="623:65" pos:end="623:79"><name pos:start="623:65" pos:end="623:72"><name pos:start="623:65" pos:end="623:69">scan8</name><index pos:start="623:70" pos:end="623:72">[<expr pos:start="623:71" pos:end="623:71"><literal type="number" pos:start="623:71" pos:end="623:71">0</literal></expr>]</index></name> <operator pos:start="623:74" pos:end="623:74">+</operator> <literal type="number" pos:start="623:76" pos:end="623:77">16</literal><operator pos:start="623:78" pos:end="623:78">*</operator><name pos:start="623:79" pos:end="623:79">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="623:84" pos:end="623:84"><expr pos:start="623:84" pos:end="623:84"><literal type="number" pos:start="623:84" pos:end="623:84">4</literal></expr></argument>, <argument pos:start="623:87" pos:end="623:87"><expr pos:start="623:87" pos:end="623:87"><literal type="number" pos:start="623:87" pos:end="623:87">2</literal></expr></argument>, <argument pos:start="623:90" pos:end="623:90"><expr pos:start="623:90" pos:end="623:90"><literal type="number" pos:start="623:90" pos:end="623:90">8</literal></expr></argument>, <argument pos:start="623:93" pos:end="623:95"><expr pos:start="623:93" pos:end="623:95"><name pos:start="623:93" pos:end="623:95">ref</name></expr></argument>, <argument pos:start="623:98" pos:end="623:98"><expr pos:start="623:98" pos:end="623:98"><literal type="number" pos:start="623:98" pos:end="623:98">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if><else pos:start="625:26" pos:end="627:117">else<block type="pseudo" pos:start="627:29" pos:end="627:117"><block_content pos:start="627:29" pos:end="627:117">

                            <expr_stmt pos:start="627:29" pos:end="627:117"><expr pos:start="627:29" pos:end="627:116"><call pos:start="627:29" pos:end="627:116"><name pos:start="627:29" pos:end="627:42">fill_rectangle</name><argument_list pos:start="627:43" pos:end="627:116">(<argument pos:start="627:44" pos:end="627:81"><expr pos:start="627:44" pos:end="627:81"><operator pos:start="627:44" pos:end="627:44">&amp;</operator><name pos:start="627:45" pos:end="627:81"><name pos:start="627:45" pos:end="627:45">h</name><operator pos:start="627:46" pos:end="627:47">-&gt;</operator><name pos:start="627:48" pos:end="627:56">ref_cache</name><index pos:start="627:57" pos:end="627:62">[<expr pos:start="627:58" pos:end="627:61"><name pos:start="627:58" pos:end="627:61">list</name></expr>]</index><index pos:start="627:63" pos:end="627:81">[ <expr pos:start="627:65" pos:end="627:79"><name pos:start="627:65" pos:end="627:72"><name pos:start="627:65" pos:end="627:69">scan8</name><index pos:start="627:70" pos:end="627:72">[<expr pos:start="627:71" pos:end="627:71"><literal type="number" pos:start="627:71" pos:end="627:71">0</literal></expr>]</index></name> <operator pos:start="627:74" pos:end="627:74">+</operator> <literal type="number" pos:start="627:76" pos:end="627:77">16</literal><operator pos:start="627:78" pos:end="627:78">*</operator><name pos:start="627:79" pos:end="627:79">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="627:84" pos:end="627:84"><expr pos:start="627:84" pos:end="627:84"><literal type="number" pos:start="627:84" pos:end="627:84">4</literal></expr></argument>, <argument pos:start="627:87" pos:end="627:87"><expr pos:start="627:87" pos:end="627:87"><literal type="number" pos:start="627:87" pos:end="627:87">2</literal></expr></argument>, <argument pos:start="627:90" pos:end="627:90"><expr pos:start="627:90" pos:end="627:90"><literal type="number" pos:start="627:90" pos:end="627:90">8</literal></expr></argument>, <argument pos:start="627:93" pos:end="627:112"><expr pos:start="627:93" pos:end="627:112"><operator pos:start="627:93" pos:end="627:93">(</operator><name pos:start="627:94" pos:end="627:106">LIST_NOT_USED</name><operator pos:start="627:107" pos:end="627:107">&amp;</operator><literal type="number" pos:start="627:108" pos:end="627:111">0xFF</literal><operator pos:start="627:112" pos:end="627:112">)</operator></expr></argument>, <argument pos:start="627:115" pos:end="627:115"><expr pos:start="627:115" pos:end="627:115"><literal type="number" pos:start="627:115" pos:end="627:115">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></for>

            </block_content>}</block></for>

            <for pos:start="633:13" pos:end="663:13">for<control pos:start="633:16" pos:end="633:51">(<init pos:start="633:17" pos:end="633:23"><expr pos:start="633:17" pos:end="633:22"><name pos:start="633:17" pos:end="633:20">list</name><operator pos:start="633:21" pos:end="633:21">=</operator><literal type="number" pos:start="633:22" pos:end="633:22">0</literal></expr>;</init> <condition pos:start="633:25" pos:end="633:43"><expr pos:start="633:25" pos:end="633:42"><name pos:start="633:25" pos:end="633:28">list</name><operator pos:start="633:29" pos:end="633:29">&lt;</operator><name pos:start="633:30" pos:end="633:42"><name pos:start="633:30" pos:end="633:30">h</name><operator pos:start="633:31" pos:end="633:32">-&gt;</operator><name pos:start="633:33" pos:end="633:42">list_count</name></name></expr>;</condition> <incr pos:start="633:45" pos:end="633:50"><expr pos:start="633:45" pos:end="633:50"><name pos:start="633:45" pos:end="633:48">list</name><operator pos:start="633:49" pos:end="633:50">++</operator></expr></incr>)</control><block pos:start="633:52" pos:end="663:13">{<block_content pos:start="635:17" pos:end="661:17">

                <for pos:start="635:17" pos:end="661:17">for<control pos:start="635:20" pos:end="635:34">(<init pos:start="635:21" pos:end="635:24"><expr pos:start="635:21" pos:end="635:23"><name pos:start="635:21" pos:end="635:21">i</name><operator pos:start="635:22" pos:end="635:22">=</operator><literal type="number" pos:start="635:23" pos:end="635:23">0</literal></expr>;</init> <condition pos:start="635:26" pos:end="635:29"><expr pos:start="635:26" pos:end="635:28"><name pos:start="635:26" pos:end="635:26">i</name><operator pos:start="635:27" pos:end="635:27">&lt;</operator><literal type="number" pos:start="635:28" pos:end="635:28">2</literal></expr>;</condition> <incr pos:start="635:31" pos:end="635:33"><expr pos:start="635:31" pos:end="635:33"><name pos:start="635:31" pos:end="635:31">i</name><operator pos:start="635:32" pos:end="635:33">++</operator></expr></incr>)</control><block pos:start="635:35" pos:end="661:17">{<block_content pos:start="637:21" pos:end="659:21">

                    <if_stmt pos:start="637:21" pos:end="659:21"><if pos:start="637:21" pos:end="653:21">if<condition pos:start="637:23" pos:end="637:48">(<expr pos:start="637:24" pos:end="637:47"><call pos:start="637:24" pos:end="637:47"><name pos:start="637:24" pos:end="637:29">IS_DIR</name><argument_list pos:start="637:30" pos:end="637:47">(<argument pos:start="637:31" pos:end="637:37"><expr pos:start="637:31" pos:end="637:37"><name pos:start="637:31" pos:end="637:37">mb_type</name></expr></argument>, <argument pos:start="637:40" pos:end="637:40"><expr pos:start="637:40" pos:end="637:40"><name pos:start="637:40" pos:end="637:40">i</name></expr></argument>, <argument pos:start="637:43" pos:end="637:46"><expr pos:start="637:43" pos:end="637:46"><name pos:start="637:43" pos:end="637:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="637:49" pos:end="653:21">{<block_content pos:start="639:25" pos:end="651:108">

                        <expr_stmt pos:start="639:25" pos:end="639:104"><expr pos:start="639:25" pos:end="639:103"><call pos:start="639:25" pos:end="639:103"><name pos:start="639:25" pos:end="639:40">pred_16x8_motion</name><argument_list pos:start="639:41" pos:end="639:103">(<argument pos:start="639:42" pos:end="639:42"><expr pos:start="639:42" pos:end="639:42"><name pos:start="639:42" pos:end="639:42">h</name></expr></argument>, <argument pos:start="639:45" pos:end="639:47"><expr pos:start="639:45" pos:end="639:47"><literal type="number" pos:start="639:45" pos:end="639:45">8</literal><operator pos:start="639:46" pos:end="639:46">*</operator><name pos:start="639:47" pos:end="639:47">i</name></expr></argument>, <argument pos:start="639:50" pos:end="639:53"><expr pos:start="639:50" pos:end="639:53"><name pos:start="639:50" pos:end="639:53">list</name></expr></argument>, <argument pos:start="639:56" pos:end="639:90"><expr pos:start="639:56" pos:end="639:90"><name pos:start="639:56" pos:end="639:90"><name pos:start="639:56" pos:end="639:56">h</name><operator pos:start="639:57" pos:end="639:58">-&gt;</operator><name pos:start="639:59" pos:end="639:67">ref_cache</name><index pos:start="639:68" pos:end="639:73">[<expr pos:start="639:69" pos:end="639:72"><name pos:start="639:69" pos:end="639:72">list</name></expr>]</index><index pos:start="639:74" pos:end="639:90">[<expr pos:start="639:75" pos:end="639:89"><name pos:start="639:75" pos:end="639:82"><name pos:start="639:75" pos:end="639:79">scan8</name><index pos:start="639:80" pos:end="639:82">[<expr pos:start="639:81" pos:end="639:81"><literal type="number" pos:start="639:81" pos:end="639:81">0</literal></expr>]</index></name> <operator pos:start="639:84" pos:end="639:84">+</operator> <literal type="number" pos:start="639:86" pos:end="639:87">16</literal><operator pos:start="639:88" pos:end="639:88">*</operator><name pos:start="639:89" pos:end="639:89">i</name></expr>]</index></name></expr></argument>, <argument pos:start="639:93" pos:end="639:96"><expr pos:start="639:93" pos:end="639:96"><operator pos:start="639:93" pos:end="639:93">&amp;</operator><name pos:start="639:94" pos:end="639:96">mpx</name></expr></argument>, <argument pos:start="639:99" pos:end="639:102"><expr pos:start="639:99" pos:end="639:102"><operator pos:start="639:99" pos:end="639:99">&amp;</operator><name pos:start="639:100" pos:end="639:102">mpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="641:25" pos:end="641:74"><expr pos:start="641:25" pos:end="641:73"><name pos:start="641:25" pos:end="641:26">mx</name> <operator pos:start="641:28" pos:end="641:28">=</operator> <name pos:start="641:30" pos:end="641:32">mpx</name> <operator pos:start="641:34" pos:end="641:34">+</operator> <call pos:start="641:36" pos:end="641:73"><name pos:start="641:36" pos:end="641:54">decode_cabac_mb_mvd</name><argument_list pos:start="641:55" pos:end="641:73">( <argument pos:start="641:57" pos:end="641:57"><expr pos:start="641:57" pos:end="641:57"><name pos:start="641:57" pos:end="641:57">h</name></expr></argument>, <argument pos:start="641:60" pos:end="641:63"><expr pos:start="641:60" pos:end="641:63"><name pos:start="641:60" pos:end="641:63">list</name></expr></argument>, <argument pos:start="641:66" pos:end="641:68"><expr pos:start="641:66" pos:end="641:68"><literal type="number" pos:start="641:66" pos:end="641:66">8</literal><operator pos:start="641:67" pos:end="641:67">*</operator><name pos:start="641:68" pos:end="641:68">i</name></expr></argument>, <argument pos:start="641:71" pos:end="641:71"><expr pos:start="641:71" pos:end="641:71"><literal type="number" pos:start="641:71" pos:end="641:71">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="643:25" pos:end="643:74"><expr pos:start="643:25" pos:end="643:73"><name pos:start="643:25" pos:end="643:26">my</name> <operator pos:start="643:28" pos:end="643:28">=</operator> <name pos:start="643:30" pos:end="643:32">mpy</name> <operator pos:start="643:34" pos:end="643:34">+</operator> <call pos:start="643:36" pos:end="643:73"><name pos:start="643:36" pos:end="643:54">decode_cabac_mb_mvd</name><argument_list pos:start="643:55" pos:end="643:73">( <argument pos:start="643:57" pos:end="643:57"><expr pos:start="643:57" pos:end="643:57"><name pos:start="643:57" pos:end="643:57">h</name></expr></argument>, <argument pos:start="643:60" pos:end="643:63"><expr pos:start="643:60" pos:end="643:63"><name pos:start="643:60" pos:end="643:63">list</name></expr></argument>, <argument pos:start="643:66" pos:end="643:68"><expr pos:start="643:66" pos:end="643:68"><literal type="number" pos:start="643:66" pos:end="643:66">8</literal><operator pos:start="643:67" pos:end="643:67">*</operator><name pos:start="643:68" pos:end="643:68">i</name></expr></argument>, <argument pos:start="643:71" pos:end="643:71"><expr pos:start="643:71" pos:end="643:71"><literal type="number" pos:start="643:71" pos:end="643:71">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="645:25" pos:end="645:60"><expr pos:start="645:25" pos:end="645:59"><call pos:start="645:25" pos:end="645:59"><name pos:start="645:25" pos:end="645:31">tprintf</name><argument_list pos:start="645:32" pos:end="645:59">(<argument pos:start="645:33" pos:end="645:50"><expr pos:start="645:33" pos:end="645:50"><literal type="string" pos:start="645:33" pos:end="645:50">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="645:53" pos:end="645:54"><expr pos:start="645:53" pos:end="645:54"><name pos:start="645:53" pos:end="645:54">mx</name></expr></argument>, <argument pos:start="645:57" pos:end="645:58"><expr pos:start="645:57" pos:end="645:58"><name pos:start="645:57" pos:end="645:58">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="649:25" pos:end="649:117"><expr pos:start="649:25" pos:end="649:116"><call pos:start="649:25" pos:end="649:116"><name pos:start="649:25" pos:end="649:38">fill_rectangle</name><argument_list pos:start="649:39" pos:end="649:116">(<argument pos:start="649:40" pos:end="649:76"><expr pos:start="649:40" pos:end="649:76"><name pos:start="649:40" pos:end="649:76"><name pos:start="649:40" pos:end="649:40">h</name><operator pos:start="649:41" pos:end="649:42">-&gt;</operator><name pos:start="649:43" pos:end="649:51">mvd_cache</name><index pos:start="649:52" pos:end="649:57">[<expr pos:start="649:53" pos:end="649:56"><name pos:start="649:53" pos:end="649:56">list</name></expr>]</index><index pos:start="649:58" pos:end="649:76">[ <expr pos:start="649:60" pos:end="649:74"><name pos:start="649:60" pos:end="649:67"><name pos:start="649:60" pos:end="649:64">scan8</name><index pos:start="649:65" pos:end="649:67">[<expr pos:start="649:66" pos:end="649:66"><literal type="number" pos:start="649:66" pos:end="649:66">0</literal></expr>]</index></name> <operator pos:start="649:69" pos:end="649:69">+</operator> <literal type="number" pos:start="649:71" pos:end="649:72">16</literal><operator pos:start="649:73" pos:end="649:73">*</operator><name pos:start="649:74" pos:end="649:74">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="649:79" pos:end="649:79"><expr pos:start="649:79" pos:end="649:79"><literal type="number" pos:start="649:79" pos:end="649:79">4</literal></expr></argument>, <argument pos:start="649:82" pos:end="649:82"><expr pos:start="649:82" pos:end="649:82"><literal type="number" pos:start="649:82" pos:end="649:82">2</literal></expr></argument>, <argument pos:start="649:85" pos:end="649:85"><expr pos:start="649:85" pos:end="649:85"><literal type="number" pos:start="649:85" pos:end="649:85">8</literal></expr></argument>, <argument pos:start="649:88" pos:end="649:112"><expr pos:start="649:88" pos:end="649:112"><call pos:start="649:88" pos:end="649:112"><name pos:start="649:88" pos:end="649:97">pack16to32</name><argument_list pos:start="649:98" pos:end="649:112">(<argument pos:start="649:99" pos:end="649:104"><expr pos:start="649:99" pos:end="649:104"><name pos:start="649:99" pos:end="649:100">mx</name><operator pos:start="649:101" pos:end="649:101">-</operator><name pos:start="649:102" pos:end="649:104">mpx</name></expr></argument>,<argument pos:start="649:106" pos:end="649:111"><expr pos:start="649:106" pos:end="649:111"><name pos:start="649:106" pos:end="649:107">my</name><operator pos:start="649:108" pos:end="649:108">-</operator><name pos:start="649:109" pos:end="649:111">mpy</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="649:115" pos:end="649:115"><expr pos:start="649:115" pos:end="649:115"><literal type="number" pos:start="649:115" pos:end="649:115">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="651:25" pos:end="651:108"><expr pos:start="651:25" pos:end="651:107"><call pos:start="651:25" pos:end="651:107"><name pos:start="651:25" pos:end="651:38">fill_rectangle</name><argument_list pos:start="651:39" pos:end="651:107">(<argument pos:start="651:40" pos:end="651:75"><expr pos:start="651:40" pos:end="651:75"><name pos:start="651:40" pos:end="651:75"><name pos:start="651:40" pos:end="651:40">h</name><operator pos:start="651:41" pos:end="651:42">-&gt;</operator><name pos:start="651:43" pos:end="651:50">mv_cache</name><index pos:start="651:51" pos:end="651:56">[<expr pos:start="651:52" pos:end="651:55"><name pos:start="651:52" pos:end="651:55">list</name></expr>]</index><index pos:start="651:57" pos:end="651:75">[ <expr pos:start="651:59" pos:end="651:73"><name pos:start="651:59" pos:end="651:66"><name pos:start="651:59" pos:end="651:63">scan8</name><index pos:start="651:64" pos:end="651:66">[<expr pos:start="651:65" pos:end="651:65"><literal type="number" pos:start="651:65" pos:end="651:65">0</literal></expr>]</index></name> <operator pos:start="651:68" pos:end="651:68">+</operator> <literal type="number" pos:start="651:70" pos:end="651:71">16</literal><operator pos:start="651:72" pos:end="651:72">*</operator><name pos:start="651:73" pos:end="651:73">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="651:78" pos:end="651:78"><expr pos:start="651:78" pos:end="651:78"><literal type="number" pos:start="651:78" pos:end="651:78">4</literal></expr></argument>, <argument pos:start="651:81" pos:end="651:81"><expr pos:start="651:81" pos:end="651:81"><literal type="number" pos:start="651:81" pos:end="651:81">2</literal></expr></argument>, <argument pos:start="651:84" pos:end="651:84"><expr pos:start="651:84" pos:end="651:84"><literal type="number" pos:start="651:84" pos:end="651:84">8</literal></expr></argument>, <argument pos:start="651:87" pos:end="651:103"><expr pos:start="651:87" pos:end="651:103"><call pos:start="651:87" pos:end="651:103"><name pos:start="651:87" pos:end="651:96">pack16to32</name><argument_list pos:start="651:97" pos:end="651:103">(<argument pos:start="651:98" pos:end="651:99"><expr pos:start="651:98" pos:end="651:99"><name pos:start="651:98" pos:end="651:99">mx</name></expr></argument>,<argument pos:start="651:101" pos:end="651:102"><expr pos:start="651:101" pos:end="651:102"><name pos:start="651:101" pos:end="651:102">my</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="651:106" pos:end="651:106"><expr pos:start="651:106" pos:end="651:106"><literal type="number" pos:start="651:106" pos:end="651:106">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="653:22" pos:end="659:21">else<block pos:start="653:26" pos:end="659:21">{<block_content pos:start="655:25" pos:end="657:93">

                        <expr_stmt pos:start="655:25" pos:end="655:93"><expr pos:start="655:25" pos:end="655:92"><call pos:start="655:25" pos:end="655:92"><name pos:start="655:25" pos:end="655:38">fill_rectangle</name><argument_list pos:start="655:39" pos:end="655:92">(<argument pos:start="655:40" pos:end="655:76"><expr pos:start="655:40" pos:end="655:76"><name pos:start="655:40" pos:end="655:76"><name pos:start="655:40" pos:end="655:40">h</name><operator pos:start="655:41" pos:end="655:42">-&gt;</operator><name pos:start="655:43" pos:end="655:51">mvd_cache</name><index pos:start="655:52" pos:end="655:57">[<expr pos:start="655:53" pos:end="655:56"><name pos:start="655:53" pos:end="655:56">list</name></expr>]</index><index pos:start="655:58" pos:end="655:76">[ <expr pos:start="655:60" pos:end="655:74"><name pos:start="655:60" pos:end="655:67"><name pos:start="655:60" pos:end="655:64">scan8</name><index pos:start="655:65" pos:end="655:67">[<expr pos:start="655:66" pos:end="655:66"><literal type="number" pos:start="655:66" pos:end="655:66">0</literal></expr>]</index></name> <operator pos:start="655:69" pos:end="655:69">+</operator> <literal type="number" pos:start="655:71" pos:end="655:72">16</literal><operator pos:start="655:73" pos:end="655:73">*</operator><name pos:start="655:74" pos:end="655:74">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="655:79" pos:end="655:79"><expr pos:start="655:79" pos:end="655:79"><literal type="number" pos:start="655:79" pos:end="655:79">4</literal></expr></argument>, <argument pos:start="655:82" pos:end="655:82"><expr pos:start="655:82" pos:end="655:82"><literal type="number" pos:start="655:82" pos:end="655:82">2</literal></expr></argument>, <argument pos:start="655:85" pos:end="655:85"><expr pos:start="655:85" pos:end="655:85"><literal type="number" pos:start="655:85" pos:end="655:85">8</literal></expr></argument>, <argument pos:start="655:88" pos:end="655:88"><expr pos:start="655:88" pos:end="655:88"><literal type="number" pos:start="655:88" pos:end="655:88">0</literal></expr></argument>, <argument pos:start="655:91" pos:end="655:91"><expr pos:start="655:91" pos:end="655:91"><literal type="number" pos:start="655:91" pos:end="655:91">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="657:25" pos:end="657:93"><expr pos:start="657:25" pos:end="657:92"><call pos:start="657:25" pos:end="657:92"><name pos:start="657:25" pos:end="657:38">fill_rectangle</name><argument_list pos:start="657:39" pos:end="657:92">(<argument pos:start="657:40" pos:end="657:76"><expr pos:start="657:40" pos:end="657:76"><name pos:start="657:40" pos:end="657:76"><name pos:start="657:40" pos:end="657:40">h</name><operator pos:start="657:41" pos:end="657:42">-&gt;</operator> <name pos:start="657:44" pos:end="657:51">mv_cache</name><index pos:start="657:52" pos:end="657:57">[<expr pos:start="657:53" pos:end="657:56"><name pos:start="657:53" pos:end="657:56">list</name></expr>]</index><index pos:start="657:58" pos:end="657:76">[ <expr pos:start="657:60" pos:end="657:74"><name pos:start="657:60" pos:end="657:67"><name pos:start="657:60" pos:end="657:64">scan8</name><index pos:start="657:65" pos:end="657:67">[<expr pos:start="657:66" pos:end="657:66"><literal type="number" pos:start="657:66" pos:end="657:66">0</literal></expr>]</index></name> <operator pos:start="657:69" pos:end="657:69">+</operator> <literal type="number" pos:start="657:71" pos:end="657:72">16</literal><operator pos:start="657:73" pos:end="657:73">*</operator><name pos:start="657:74" pos:end="657:74">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="657:79" pos:end="657:79"><expr pos:start="657:79" pos:end="657:79"><literal type="number" pos:start="657:79" pos:end="657:79">4</literal></expr></argument>, <argument pos:start="657:82" pos:end="657:82"><expr pos:start="657:82" pos:end="657:82"><literal type="number" pos:start="657:82" pos:end="657:82">2</literal></expr></argument>, <argument pos:start="657:85" pos:end="657:85"><expr pos:start="657:85" pos:end="657:85"><literal type="number" pos:start="657:85" pos:end="657:85">8</literal></expr></argument>, <argument pos:start="657:88" pos:end="657:88"><expr pos:start="657:88" pos:end="657:88"><literal type="number" pos:start="657:88" pos:end="657:88">0</literal></expr></argument>, <argument pos:start="657:91" pos:end="657:91"><expr pos:start="657:91" pos:end="657:91"><literal type="number" pos:start="657:91" pos:end="657:91">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></if><else pos:start="665:10" pos:end="719:9">else<block pos:start="665:14" pos:end="719:9">{<block_content pos:start="667:13" pos:end="717:13">

            <expr_stmt pos:start="667:13" pos:end="667:37"><expr pos:start="667:13" pos:end="667:36"><call pos:start="667:13" pos:end="667:36"><name pos:start="667:13" pos:end="667:18">assert</name><argument_list pos:start="667:19" pos:end="667:36">(<argument pos:start="667:20" pos:end="667:35"><expr pos:start="667:20" pos:end="667:35"><call pos:start="667:20" pos:end="667:35"><name pos:start="667:20" pos:end="667:26">IS_8X16</name><argument_list pos:start="667:27" pos:end="667:35">(<argument pos:start="667:28" pos:end="667:34"><expr pos:start="667:28" pos:end="667:34"><name pos:start="667:28" pos:end="667:34">mb_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="669:13" pos:end="685:13">for<control pos:start="669:16" pos:end="669:51">(<init pos:start="669:17" pos:end="669:23"><expr pos:start="669:17" pos:end="669:22"><name pos:start="669:17" pos:end="669:20">list</name><operator pos:start="669:21" pos:end="669:21">=</operator><literal type="number" pos:start="669:22" pos:end="669:22">0</literal></expr>;</init> <condition pos:start="669:25" pos:end="669:43"><expr pos:start="669:25" pos:end="669:42"><name pos:start="669:25" pos:end="669:28">list</name><operator pos:start="669:29" pos:end="669:29">&lt;</operator><name pos:start="669:30" pos:end="669:42"><name pos:start="669:30" pos:end="669:30">h</name><operator pos:start="669:31" pos:end="669:32">-&gt;</operator><name pos:start="669:33" pos:end="669:42">list_count</name></name></expr>;</condition> <incr pos:start="669:45" pos:end="669:50"><expr pos:start="669:45" pos:end="669:50"><name pos:start="669:45" pos:end="669:48">list</name><operator pos:start="669:49" pos:end="669:50">++</operator></expr></incr>)</control><block pos:start="669:52" pos:end="685:13">{<block_content pos:start="671:21" pos:end="683:21">

                    <for pos:start="671:21" pos:end="683:21">for<control pos:start="671:24" pos:end="671:38">(<init pos:start="671:25" pos:end="671:28"><expr pos:start="671:25" pos:end="671:27"><name pos:start="671:25" pos:end="671:25">i</name><operator pos:start="671:26" pos:end="671:26">=</operator><literal type="number" pos:start="671:27" pos:end="671:27">0</literal></expr>;</init> <condition pos:start="671:30" pos:end="671:33"><expr pos:start="671:30" pos:end="671:32"><name pos:start="671:30" pos:end="671:30">i</name><operator pos:start="671:31" pos:end="671:31">&lt;</operator><literal type="number" pos:start="671:32" pos:end="671:32">2</literal></expr>;</condition> <incr pos:start="671:35" pos:end="671:37"><expr pos:start="671:35" pos:end="671:37"><name pos:start="671:35" pos:end="671:35">i</name><operator pos:start="671:36" pos:end="671:37">++</operator></expr></incr>)</control><block pos:start="671:39" pos:end="683:21">{<block_content pos:start="673:25" pos:end="681:116">

                        <if_stmt pos:start="673:25" pos:end="681:116"><if pos:start="673:25" pos:end="679:25">if<condition pos:start="673:27" pos:end="673:52">(<expr pos:start="673:28" pos:end="673:51"><call pos:start="673:28" pos:end="673:51"><name pos:start="673:28" pos:end="673:33">IS_DIR</name><argument_list pos:start="673:34" pos:end="673:51">(<argument pos:start="673:35" pos:end="673:41"><expr pos:start="673:35" pos:end="673:41"><name pos:start="673:35" pos:end="673:41">mb_type</name></expr></argument>, <argument pos:start="673:44" pos:end="673:44"><expr pos:start="673:44" pos:end="673:44"><name pos:start="673:44" pos:end="673:44">i</name></expr></argument>, <argument pos:start="673:47" pos:end="673:50"><expr pos:start="673:47" pos:end="673:50"><name pos:start="673:47" pos:end="673:50">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="673:53" pos:end="679:25">{<block_content pos:start="675:29" pos:end="677:99"> <comment type="line" pos:start="673:55" pos:end="673:70">//FIXME optimize</comment>

                            <decl_stmt pos:start="675:29" pos:end="675:108"><decl pos:start="675:29" pos:end="675:107"><type pos:start="675:29" pos:end="675:37"><specifier pos:start="675:29" pos:end="675:33">const</specifier> <name pos:start="675:35" pos:end="675:37">int</name></type> <name pos:start="675:39" pos:end="675:41">ref</name><init pos:start="675:42" pos:end="675:107">= <expr pos:start="675:44" pos:end="675:107"><ternary pos:start="675:44" pos:end="675:107"><condition pos:start="675:44" pos:end="675:67"><expr pos:start="675:44" pos:end="675:65"><name pos:start="675:44" pos:end="675:61"><name pos:start="675:44" pos:end="675:44">h</name><operator pos:start="675:45" pos:end="675:46">-&gt;</operator><name pos:start="675:47" pos:end="675:55">ref_count</name><index pos:start="675:56" pos:end="675:61">[<expr pos:start="675:57" pos:end="675:60"><name pos:start="675:57" pos:end="675:60">list</name></expr>]</index></name> <operator pos:start="675:63" pos:end="675:63">&gt;</operator> <literal type="number" pos:start="675:65" pos:end="675:65">1</literal></expr> ?</condition><then pos:start="675:69" pos:end="675:103"> <expr pos:start="675:69" pos:end="675:103"><call pos:start="675:69" pos:end="675:103"><name pos:start="675:69" pos:end="675:87">decode_cabac_mb_ref</name><argument_list pos:start="675:88" pos:end="675:103">( <argument pos:start="675:90" pos:end="675:90"><expr pos:start="675:90" pos:end="675:90"><name pos:start="675:90" pos:end="675:90">h</name></expr></argument>, <argument pos:start="675:93" pos:end="675:96"><expr pos:start="675:93" pos:end="675:96"><name pos:start="675:93" pos:end="675:96">list</name></expr></argument>, <argument pos:start="675:99" pos:end="675:101"><expr pos:start="675:99" pos:end="675:101"><literal type="number" pos:start="675:99" pos:end="675:99">4</literal><operator pos:start="675:100" pos:end="675:100">*</operator><name pos:start="675:101" pos:end="675:101">i</name></expr></argument> )</argument_list></call></expr> </then><else pos:start="675:105" pos:end="675:107">: <expr pos:start="675:107" pos:end="675:107"><literal type="number" pos:start="675:107" pos:end="675:107">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="677:29" pos:end="677:99"><expr pos:start="677:29" pos:end="677:98"><call pos:start="677:29" pos:end="677:98"><name pos:start="677:29" pos:end="677:42">fill_rectangle</name><argument_list pos:start="677:43" pos:end="677:98">(<argument pos:start="677:44" pos:end="677:80"><expr pos:start="677:44" pos:end="677:80"><operator pos:start="677:44" pos:end="677:44">&amp;</operator><name pos:start="677:45" pos:end="677:80"><name pos:start="677:45" pos:end="677:45">h</name><operator pos:start="677:46" pos:end="677:47">-&gt;</operator><name pos:start="677:48" pos:end="677:56">ref_cache</name><index pos:start="677:57" pos:end="677:62">[<expr pos:start="677:58" pos:end="677:61"><name pos:start="677:58" pos:end="677:61">list</name></expr>]</index><index pos:start="677:63" pos:end="677:80">[ <expr pos:start="677:65" pos:end="677:78"><name pos:start="677:65" pos:end="677:72"><name pos:start="677:65" pos:end="677:69">scan8</name><index pos:start="677:70" pos:end="677:72">[<expr pos:start="677:71" pos:end="677:71"><literal type="number" pos:start="677:71" pos:end="677:71">0</literal></expr>]</index></name> <operator pos:start="677:74" pos:end="677:74">+</operator> <literal type="number" pos:start="677:76" pos:end="677:76">2</literal><operator pos:start="677:77" pos:end="677:77">*</operator><name pos:start="677:78" pos:end="677:78">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="677:83" pos:end="677:83"><expr pos:start="677:83" pos:end="677:83"><literal type="number" pos:start="677:83" pos:end="677:83">2</literal></expr></argument>, <argument pos:start="677:86" pos:end="677:86"><expr pos:start="677:86" pos:end="677:86"><literal type="number" pos:start="677:86" pos:end="677:86">4</literal></expr></argument>, <argument pos:start="677:89" pos:end="677:89"><expr pos:start="677:89" pos:end="677:89"><literal type="number" pos:start="677:89" pos:end="677:89">8</literal></expr></argument>, <argument pos:start="677:92" pos:end="677:94"><expr pos:start="677:92" pos:end="677:94"><name pos:start="677:92" pos:end="677:94">ref</name></expr></argument>, <argument pos:start="677:97" pos:end="677:97"><expr pos:start="677:97" pos:end="677:97"><literal type="number" pos:start="677:97" pos:end="677:97">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if><else pos:start="679:26" pos:end="681:116">else<block type="pseudo" pos:start="681:29" pos:end="681:116"><block_content pos:start="681:29" pos:end="681:116">

                            <expr_stmt pos:start="681:29" pos:end="681:116"><expr pos:start="681:29" pos:end="681:115"><call pos:start="681:29" pos:end="681:115"><name pos:start="681:29" pos:end="681:42">fill_rectangle</name><argument_list pos:start="681:43" pos:end="681:115">(<argument pos:start="681:44" pos:end="681:80"><expr pos:start="681:44" pos:end="681:80"><operator pos:start="681:44" pos:end="681:44">&amp;</operator><name pos:start="681:45" pos:end="681:80"><name pos:start="681:45" pos:end="681:45">h</name><operator pos:start="681:46" pos:end="681:47">-&gt;</operator><name pos:start="681:48" pos:end="681:56">ref_cache</name><index pos:start="681:57" pos:end="681:62">[<expr pos:start="681:58" pos:end="681:61"><name pos:start="681:58" pos:end="681:61">list</name></expr>]</index><index pos:start="681:63" pos:end="681:80">[ <expr pos:start="681:65" pos:end="681:78"><name pos:start="681:65" pos:end="681:72"><name pos:start="681:65" pos:end="681:69">scan8</name><index pos:start="681:70" pos:end="681:72">[<expr pos:start="681:71" pos:end="681:71"><literal type="number" pos:start="681:71" pos:end="681:71">0</literal></expr>]</index></name> <operator pos:start="681:74" pos:end="681:74">+</operator> <literal type="number" pos:start="681:76" pos:end="681:76">2</literal><operator pos:start="681:77" pos:end="681:77">*</operator><name pos:start="681:78" pos:end="681:78">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="681:83" pos:end="681:83"><expr pos:start="681:83" pos:end="681:83"><literal type="number" pos:start="681:83" pos:end="681:83">2</literal></expr></argument>, <argument pos:start="681:86" pos:end="681:86"><expr pos:start="681:86" pos:end="681:86"><literal type="number" pos:start="681:86" pos:end="681:86">4</literal></expr></argument>, <argument pos:start="681:89" pos:end="681:89"><expr pos:start="681:89" pos:end="681:89"><literal type="number" pos:start="681:89" pos:end="681:89">8</literal></expr></argument>, <argument pos:start="681:92" pos:end="681:111"><expr pos:start="681:92" pos:end="681:111"><operator pos:start="681:92" pos:end="681:92">(</operator><name pos:start="681:93" pos:end="681:105">LIST_NOT_USED</name><operator pos:start="681:106" pos:end="681:106">&amp;</operator><literal type="number" pos:start="681:107" pos:end="681:110">0xFF</literal><operator pos:start="681:111" pos:end="681:111">)</operator></expr></argument>, <argument pos:start="681:114" pos:end="681:114"><expr pos:start="681:114" pos:end="681:114"><literal type="number" pos:start="681:114" pos:end="681:114">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></for>

            </block_content>}</block></for>

            <for pos:start="687:13" pos:end="717:13">for<control pos:start="687:16" pos:end="687:51">(<init pos:start="687:17" pos:end="687:23"><expr pos:start="687:17" pos:end="687:22"><name pos:start="687:17" pos:end="687:20">list</name><operator pos:start="687:21" pos:end="687:21">=</operator><literal type="number" pos:start="687:22" pos:end="687:22">0</literal></expr>;</init> <condition pos:start="687:25" pos:end="687:43"><expr pos:start="687:25" pos:end="687:42"><name pos:start="687:25" pos:end="687:28">list</name><operator pos:start="687:29" pos:end="687:29">&lt;</operator><name pos:start="687:30" pos:end="687:42"><name pos:start="687:30" pos:end="687:30">h</name><operator pos:start="687:31" pos:end="687:32">-&gt;</operator><name pos:start="687:33" pos:end="687:42">list_count</name></name></expr>;</condition> <incr pos:start="687:45" pos:end="687:50"><expr pos:start="687:45" pos:end="687:50"><name pos:start="687:45" pos:end="687:48">list</name><operator pos:start="687:49" pos:end="687:50">++</operator></expr></incr>)</control><block pos:start="687:52" pos:end="717:13">{<block_content pos:start="689:17" pos:end="715:17">

                <for pos:start="689:17" pos:end="715:17">for<control pos:start="689:20" pos:end="689:34">(<init pos:start="689:21" pos:end="689:24"><expr pos:start="689:21" pos:end="689:23"><name pos:start="689:21" pos:end="689:21">i</name><operator pos:start="689:22" pos:end="689:22">=</operator><literal type="number" pos:start="689:23" pos:end="689:23">0</literal></expr>;</init> <condition pos:start="689:26" pos:end="689:29"><expr pos:start="689:26" pos:end="689:28"><name pos:start="689:26" pos:end="689:26">i</name><operator pos:start="689:27" pos:end="689:27">&lt;</operator><literal type="number" pos:start="689:28" pos:end="689:28">2</literal></expr>;</condition> <incr pos:start="689:31" pos:end="689:33"><expr pos:start="689:31" pos:end="689:33"><name pos:start="689:31" pos:end="689:31">i</name><operator pos:start="689:32" pos:end="689:33">++</operator></expr></incr>)</control><block pos:start="689:35" pos:end="715:17">{<block_content pos:start="691:21" pos:end="713:21">

                    <if_stmt pos:start="691:21" pos:end="713:21"><if pos:start="691:21" pos:end="707:21">if<condition pos:start="691:23" pos:end="691:48">(<expr pos:start="691:24" pos:end="691:47"><call pos:start="691:24" pos:end="691:47"><name pos:start="691:24" pos:end="691:29">IS_DIR</name><argument_list pos:start="691:30" pos:end="691:47">(<argument pos:start="691:31" pos:end="691:37"><expr pos:start="691:31" pos:end="691:37"><name pos:start="691:31" pos:end="691:37">mb_type</name></expr></argument>, <argument pos:start="691:40" pos:end="691:40"><expr pos:start="691:40" pos:end="691:40"><name pos:start="691:40" pos:end="691:40">i</name></expr></argument>, <argument pos:start="691:43" pos:end="691:46"><expr pos:start="691:43" pos:end="691:46"><name pos:start="691:43" pos:end="691:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="691:49" pos:end="707:21">{<block_content pos:start="693:25" pos:end="705:107">

                        <expr_stmt pos:start="693:25" pos:end="693:105"><expr pos:start="693:25" pos:end="693:104"><call pos:start="693:25" pos:end="693:104"><name pos:start="693:25" pos:end="693:40">pred_8x16_motion</name><argument_list pos:start="693:41" pos:end="693:104">(<argument pos:start="693:42" pos:end="693:42"><expr pos:start="693:42" pos:end="693:42"><name pos:start="693:42" pos:end="693:42">h</name></expr></argument>, <argument pos:start="693:45" pos:end="693:47"><expr pos:start="693:45" pos:end="693:47"><name pos:start="693:45" pos:end="693:45">i</name><operator pos:start="693:46" pos:end="693:46">*</operator><literal type="number" pos:start="693:47" pos:end="693:47">4</literal></expr></argument>, <argument pos:start="693:50" pos:end="693:53"><expr pos:start="693:50" pos:end="693:53"><name pos:start="693:50" pos:end="693:53">list</name></expr></argument>, <argument pos:start="693:56" pos:end="693:91"><expr pos:start="693:56" pos:end="693:91"><name pos:start="693:56" pos:end="693:91"><name pos:start="693:56" pos:end="693:56">h</name><operator pos:start="693:57" pos:end="693:58">-&gt;</operator><name pos:start="693:59" pos:end="693:67">ref_cache</name><index pos:start="693:68" pos:end="693:73">[<expr pos:start="693:69" pos:end="693:72"><name pos:start="693:69" pos:end="693:72">list</name></expr>]</index><index pos:start="693:74" pos:end="693:91">[ <expr pos:start="693:76" pos:end="693:89"><name pos:start="693:76" pos:end="693:83"><name pos:start="693:76" pos:end="693:80">scan8</name><index pos:start="693:81" pos:end="693:83">[<expr pos:start="693:82" pos:end="693:82"><literal type="number" pos:start="693:82" pos:end="693:82">0</literal></expr>]</index></name> <operator pos:start="693:85" pos:end="693:85">+</operator> <literal type="number" pos:start="693:87" pos:end="693:87">2</literal><operator pos:start="693:88" pos:end="693:88">*</operator><name pos:start="693:89" pos:end="693:89">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="693:94" pos:end="693:97"><expr pos:start="693:94" pos:end="693:97"><operator pos:start="693:94" pos:end="693:94">&amp;</operator><name pos:start="693:95" pos:end="693:97">mpx</name></expr></argument>, <argument pos:start="693:100" pos:end="693:103"><expr pos:start="693:100" pos:end="693:103"><operator pos:start="693:100" pos:end="693:100">&amp;</operator><name pos:start="693:101" pos:end="693:103">mpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="695:25" pos:end="695:74"><expr pos:start="695:25" pos:end="695:73"><name pos:start="695:25" pos:end="695:26">mx</name> <operator pos:start="695:28" pos:end="695:28">=</operator> <name pos:start="695:30" pos:end="695:32">mpx</name> <operator pos:start="695:34" pos:end="695:34">+</operator> <call pos:start="695:36" pos:end="695:73"><name pos:start="695:36" pos:end="695:54">decode_cabac_mb_mvd</name><argument_list pos:start="695:55" pos:end="695:73">( <argument pos:start="695:57" pos:end="695:57"><expr pos:start="695:57" pos:end="695:57"><name pos:start="695:57" pos:end="695:57">h</name></expr></argument>, <argument pos:start="695:60" pos:end="695:63"><expr pos:start="695:60" pos:end="695:63"><name pos:start="695:60" pos:end="695:63">list</name></expr></argument>, <argument pos:start="695:66" pos:end="695:68"><expr pos:start="695:66" pos:end="695:68"><literal type="number" pos:start="695:66" pos:end="695:66">4</literal><operator pos:start="695:67" pos:end="695:67">*</operator><name pos:start="695:68" pos:end="695:68">i</name></expr></argument>, <argument pos:start="695:71" pos:end="695:71"><expr pos:start="695:71" pos:end="695:71"><literal type="number" pos:start="695:71" pos:end="695:71">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="697:25" pos:end="697:74"><expr pos:start="697:25" pos:end="697:73"><name pos:start="697:25" pos:end="697:26">my</name> <operator pos:start="697:28" pos:end="697:28">=</operator> <name pos:start="697:30" pos:end="697:32">mpy</name> <operator pos:start="697:34" pos:end="697:34">+</operator> <call pos:start="697:36" pos:end="697:73"><name pos:start="697:36" pos:end="697:54">decode_cabac_mb_mvd</name><argument_list pos:start="697:55" pos:end="697:73">( <argument pos:start="697:57" pos:end="697:57"><expr pos:start="697:57" pos:end="697:57"><name pos:start="697:57" pos:end="697:57">h</name></expr></argument>, <argument pos:start="697:60" pos:end="697:63"><expr pos:start="697:60" pos:end="697:63"><name pos:start="697:60" pos:end="697:63">list</name></expr></argument>, <argument pos:start="697:66" pos:end="697:68"><expr pos:start="697:66" pos:end="697:68"><literal type="number" pos:start="697:66" pos:end="697:66">4</literal><operator pos:start="697:67" pos:end="697:67">*</operator><name pos:start="697:68" pos:end="697:68">i</name></expr></argument>, <argument pos:start="697:71" pos:end="697:71"><expr pos:start="697:71" pos:end="697:71"><literal type="number" pos:start="697:71" pos:end="697:71">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="701:25" pos:end="701:60"><expr pos:start="701:25" pos:end="701:59"><call pos:start="701:25" pos:end="701:59"><name pos:start="701:25" pos:end="701:31">tprintf</name><argument_list pos:start="701:32" pos:end="701:59">(<argument pos:start="701:33" pos:end="701:50"><expr pos:start="701:33" pos:end="701:50"><literal type="string" pos:start="701:33" pos:end="701:50">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="701:53" pos:end="701:54"><expr pos:start="701:53" pos:end="701:54"><name pos:start="701:53" pos:end="701:54">mx</name></expr></argument>, <argument pos:start="701:57" pos:end="701:58"><expr pos:start="701:57" pos:end="701:58"><name pos:start="701:57" pos:end="701:58">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="703:25" pos:end="703:116"><expr pos:start="703:25" pos:end="703:115"><call pos:start="703:25" pos:end="703:115"><name pos:start="703:25" pos:end="703:38">fill_rectangle</name><argument_list pos:start="703:39" pos:end="703:115">(<argument pos:start="703:40" pos:end="703:75"><expr pos:start="703:40" pos:end="703:75"><name pos:start="703:40" pos:end="703:75"><name pos:start="703:40" pos:end="703:40">h</name><operator pos:start="703:41" pos:end="703:42">-&gt;</operator><name pos:start="703:43" pos:end="703:51">mvd_cache</name><index pos:start="703:52" pos:end="703:57">[<expr pos:start="703:53" pos:end="703:56"><name pos:start="703:53" pos:end="703:56">list</name></expr>]</index><index pos:start="703:58" pos:end="703:75">[ <expr pos:start="703:60" pos:end="703:73"><name pos:start="703:60" pos:end="703:67"><name pos:start="703:60" pos:end="703:64">scan8</name><index pos:start="703:65" pos:end="703:67">[<expr pos:start="703:66" pos:end="703:66"><literal type="number" pos:start="703:66" pos:end="703:66">0</literal></expr>]</index></name> <operator pos:start="703:69" pos:end="703:69">+</operator> <literal type="number" pos:start="703:71" pos:end="703:71">2</literal><operator pos:start="703:72" pos:end="703:72">*</operator><name pos:start="703:73" pos:end="703:73">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="703:78" pos:end="703:78"><expr pos:start="703:78" pos:end="703:78"><literal type="number" pos:start="703:78" pos:end="703:78">2</literal></expr></argument>, <argument pos:start="703:81" pos:end="703:81"><expr pos:start="703:81" pos:end="703:81"><literal type="number" pos:start="703:81" pos:end="703:81">4</literal></expr></argument>, <argument pos:start="703:84" pos:end="703:84"><expr pos:start="703:84" pos:end="703:84"><literal type="number" pos:start="703:84" pos:end="703:84">8</literal></expr></argument>, <argument pos:start="703:87" pos:end="703:111"><expr pos:start="703:87" pos:end="703:111"><call pos:start="703:87" pos:end="703:111"><name pos:start="703:87" pos:end="703:96">pack16to32</name><argument_list pos:start="703:97" pos:end="703:111">(<argument pos:start="703:98" pos:end="703:103"><expr pos:start="703:98" pos:end="703:103"><name pos:start="703:98" pos:end="703:99">mx</name><operator pos:start="703:100" pos:end="703:100">-</operator><name pos:start="703:101" pos:end="703:103">mpx</name></expr></argument>,<argument pos:start="703:105" pos:end="703:110"><expr pos:start="703:105" pos:end="703:110"><name pos:start="703:105" pos:end="703:106">my</name><operator pos:start="703:107" pos:end="703:107">-</operator><name pos:start="703:108" pos:end="703:110">mpy</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="703:114" pos:end="703:114"><expr pos:start="703:114" pos:end="703:114"><literal type="number" pos:start="703:114" pos:end="703:114">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="705:25" pos:end="705:107"><expr pos:start="705:25" pos:end="705:106"><call pos:start="705:25" pos:end="705:106"><name pos:start="705:25" pos:end="705:38">fill_rectangle</name><argument_list pos:start="705:39" pos:end="705:106">(<argument pos:start="705:40" pos:end="705:74"><expr pos:start="705:40" pos:end="705:74"><name pos:start="705:40" pos:end="705:74"><name pos:start="705:40" pos:end="705:40">h</name><operator pos:start="705:41" pos:end="705:42">-&gt;</operator><name pos:start="705:43" pos:end="705:50">mv_cache</name><index pos:start="705:51" pos:end="705:56">[<expr pos:start="705:52" pos:end="705:55"><name pos:start="705:52" pos:end="705:55">list</name></expr>]</index><index pos:start="705:57" pos:end="705:74">[ <expr pos:start="705:59" pos:end="705:72"><name pos:start="705:59" pos:end="705:66"><name pos:start="705:59" pos:end="705:63">scan8</name><index pos:start="705:64" pos:end="705:66">[<expr pos:start="705:65" pos:end="705:65"><literal type="number" pos:start="705:65" pos:end="705:65">0</literal></expr>]</index></name> <operator pos:start="705:68" pos:end="705:68">+</operator> <literal type="number" pos:start="705:70" pos:end="705:70">2</literal><operator pos:start="705:71" pos:end="705:71">*</operator><name pos:start="705:72" pos:end="705:72">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="705:77" pos:end="705:77"><expr pos:start="705:77" pos:end="705:77"><literal type="number" pos:start="705:77" pos:end="705:77">2</literal></expr></argument>, <argument pos:start="705:80" pos:end="705:80"><expr pos:start="705:80" pos:end="705:80"><literal type="number" pos:start="705:80" pos:end="705:80">4</literal></expr></argument>, <argument pos:start="705:83" pos:end="705:83"><expr pos:start="705:83" pos:end="705:83"><literal type="number" pos:start="705:83" pos:end="705:83">8</literal></expr></argument>, <argument pos:start="705:86" pos:end="705:102"><expr pos:start="705:86" pos:end="705:102"><call pos:start="705:86" pos:end="705:102"><name pos:start="705:86" pos:end="705:95">pack16to32</name><argument_list pos:start="705:96" pos:end="705:102">(<argument pos:start="705:97" pos:end="705:98"><expr pos:start="705:97" pos:end="705:98"><name pos:start="705:97" pos:end="705:98">mx</name></expr></argument>,<argument pos:start="705:100" pos:end="705:101"><expr pos:start="705:100" pos:end="705:101"><name pos:start="705:100" pos:end="705:101">my</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="705:105" pos:end="705:105"><expr pos:start="705:105" pos:end="705:105"><literal type="number" pos:start="705:105" pos:end="705:105">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="707:22" pos:end="713:21">else<block pos:start="707:26" pos:end="713:21">{<block_content pos:start="709:25" pos:end="711:92">

                        <expr_stmt pos:start="709:25" pos:end="709:92"><expr pos:start="709:25" pos:end="709:91"><call pos:start="709:25" pos:end="709:91"><name pos:start="709:25" pos:end="709:38">fill_rectangle</name><argument_list pos:start="709:39" pos:end="709:91">(<argument pos:start="709:40" pos:end="709:75"><expr pos:start="709:40" pos:end="709:75"><name pos:start="709:40" pos:end="709:75"><name pos:start="709:40" pos:end="709:40">h</name><operator pos:start="709:41" pos:end="709:42">-&gt;</operator><name pos:start="709:43" pos:end="709:51">mvd_cache</name><index pos:start="709:52" pos:end="709:57">[<expr pos:start="709:53" pos:end="709:56"><name pos:start="709:53" pos:end="709:56">list</name></expr>]</index><index pos:start="709:58" pos:end="709:75">[ <expr pos:start="709:60" pos:end="709:73"><name pos:start="709:60" pos:end="709:67"><name pos:start="709:60" pos:end="709:64">scan8</name><index pos:start="709:65" pos:end="709:67">[<expr pos:start="709:66" pos:end="709:66"><literal type="number" pos:start="709:66" pos:end="709:66">0</literal></expr>]</index></name> <operator pos:start="709:69" pos:end="709:69">+</operator> <literal type="number" pos:start="709:71" pos:end="709:71">2</literal><operator pos:start="709:72" pos:end="709:72">*</operator><name pos:start="709:73" pos:end="709:73">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="709:78" pos:end="709:78"><expr pos:start="709:78" pos:end="709:78"><literal type="number" pos:start="709:78" pos:end="709:78">2</literal></expr></argument>, <argument pos:start="709:81" pos:end="709:81"><expr pos:start="709:81" pos:end="709:81"><literal type="number" pos:start="709:81" pos:end="709:81">4</literal></expr></argument>, <argument pos:start="709:84" pos:end="709:84"><expr pos:start="709:84" pos:end="709:84"><literal type="number" pos:start="709:84" pos:end="709:84">8</literal></expr></argument>, <argument pos:start="709:87" pos:end="709:87"><expr pos:start="709:87" pos:end="709:87"><literal type="number" pos:start="709:87" pos:end="709:87">0</literal></expr></argument>, <argument pos:start="709:90" pos:end="709:90"><expr pos:start="709:90" pos:end="709:90"><literal type="number" pos:start="709:90" pos:end="709:90">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="711:25" pos:end="711:92"><expr pos:start="711:25" pos:end="711:91"><call pos:start="711:25" pos:end="711:91"><name pos:start="711:25" pos:end="711:38">fill_rectangle</name><argument_list pos:start="711:39" pos:end="711:91">(<argument pos:start="711:40" pos:end="711:75"><expr pos:start="711:40" pos:end="711:75"><name pos:start="711:40" pos:end="711:75"><name pos:start="711:40" pos:end="711:40">h</name><operator pos:start="711:41" pos:end="711:42">-&gt;</operator> <name pos:start="711:44" pos:end="711:51">mv_cache</name><index pos:start="711:52" pos:end="711:57">[<expr pos:start="711:53" pos:end="711:56"><name pos:start="711:53" pos:end="711:56">list</name></expr>]</index><index pos:start="711:58" pos:end="711:75">[ <expr pos:start="711:60" pos:end="711:73"><name pos:start="711:60" pos:end="711:67"><name pos:start="711:60" pos:end="711:64">scan8</name><index pos:start="711:65" pos:end="711:67">[<expr pos:start="711:66" pos:end="711:66"><literal type="number" pos:start="711:66" pos:end="711:66">0</literal></expr>]</index></name> <operator pos:start="711:69" pos:end="711:69">+</operator> <literal type="number" pos:start="711:71" pos:end="711:71">2</literal><operator pos:start="711:72" pos:end="711:72">*</operator><name pos:start="711:73" pos:end="711:73">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="711:78" pos:end="711:78"><expr pos:start="711:78" pos:end="711:78"><literal type="number" pos:start="711:78" pos:end="711:78">2</literal></expr></argument>, <argument pos:start="711:81" pos:end="711:81"><expr pos:start="711:81" pos:end="711:81"><literal type="number" pos:start="711:81" pos:end="711:81">4</literal></expr></argument>, <argument pos:start="711:84" pos:end="711:84"><expr pos:start="711:84" pos:end="711:84"><literal type="number" pos:start="711:84" pos:end="711:84">8</literal></expr></argument>, <argument pos:start="711:87" pos:end="711:87"><expr pos:start="711:87" pos:end="711:87"><literal type="number" pos:start="711:87" pos:end="711:87">0</literal></expr></argument>, <argument pos:start="711:90" pos:end="711:90"><expr pos:start="711:90" pos:end="711:90"><literal type="number" pos:start="711:90" pos:end="711:90">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



   <if_stmt pos:start="725:4" pos:end="731:4"><if pos:start="725:4" pos:end="731:4">if<condition pos:start="725:6" pos:end="725:28">( <expr pos:start="725:8" pos:end="725:26"><call pos:start="725:8" pos:end="725:26"><name pos:start="725:8" pos:end="725:15">IS_INTER</name><argument_list pos:start="725:16" pos:end="725:26">( <argument pos:start="725:18" pos:end="725:24"><expr pos:start="725:18" pos:end="725:24"><name pos:start="725:18" pos:end="725:24">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="725:30" pos:end="731:4">{<block_content pos:start="727:9" pos:end="729:40">

        <expr_stmt pos:start="727:9" pos:end="727:45"><expr pos:start="727:9" pos:end="727:44"><name pos:start="727:9" pos:end="727:40"><name pos:start="727:9" pos:end="727:9">h</name><operator pos:start="727:10" pos:end="727:11">-&gt;</operator><name pos:start="727:12" pos:end="727:33">chroma_pred_mode_table</name><index pos:start="727:34" pos:end="727:40">[<expr pos:start="727:35" pos:end="727:39"><name pos:start="727:35" pos:end="727:39">mb_xy</name></expr>]</index></name> <operator pos:start="727:42" pos:end="727:42">=</operator> <literal type="number" pos:start="727:44" pos:end="727:44">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="729:9" pos:end="729:40"><expr pos:start="729:9" pos:end="729:39"><call pos:start="729:9" pos:end="729:39"><name pos:start="729:9" pos:end="729:25">write_back_motion</name><argument_list pos:start="729:26" pos:end="729:39">( <argument pos:start="729:28" pos:end="729:28"><expr pos:start="729:28" pos:end="729:28"><name pos:start="729:28" pos:end="729:28">h</name></expr></argument>, <argument pos:start="729:31" pos:end="729:37"><expr pos:start="729:31" pos:end="729:37"><name pos:start="729:31" pos:end="729:37">mb_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

   </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="735:5" pos:end="741:5"><if pos:start="735:5" pos:end="741:5">if<condition pos:start="735:7" pos:end="735:35">( <expr pos:start="735:9" pos:end="735:33"><operator pos:start="735:9" pos:end="735:9">!</operator><call pos:start="735:10" pos:end="735:33"><name pos:start="735:10" pos:end="735:22">IS_INTRA16x16</name><argument_list pos:start="735:23" pos:end="735:33">( <argument pos:start="735:25" pos:end="735:31"><expr pos:start="735:25" pos:end="735:31"><name pos:start="735:25" pos:end="735:31">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="735:37" pos:end="741:5">{<block_content pos:start="737:9" pos:end="739:52">

        <expr_stmt pos:start="737:9" pos:end="737:45"><expr pos:start="737:9" pos:end="737:44"><name pos:start="737:9" pos:end="737:11">cbp</name>  <operator pos:start="737:14" pos:end="737:14">=</operator> <call pos:start="737:16" pos:end="737:44"><name pos:start="737:16" pos:end="737:39">decode_cabac_mb_cbp_luma</name><argument_list pos:start="737:40" pos:end="737:44">( <argument pos:start="737:42" pos:end="737:42"><expr pos:start="737:42" pos:end="737:42"><name pos:start="737:42" pos:end="737:42">h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="739:9" pos:end="739:52"><expr pos:start="739:9" pos:end="739:51"><name pos:start="739:9" pos:end="739:11">cbp</name> <operator pos:start="739:13" pos:end="739:14">|=</operator> <call pos:start="739:16" pos:end="739:46"><name pos:start="739:16" pos:end="739:41">decode_cabac_mb_cbp_chroma</name><argument_list pos:start="739:42" pos:end="739:46">( <argument pos:start="739:44" pos:end="739:44"><expr pos:start="739:44" pos:end="739:44"><name pos:start="739:44" pos:end="739:44">h</name></expr></argument> )</argument_list></call> <operator pos:start="739:48" pos:end="739:49">&lt;&lt;</operator> <literal type="number" pos:start="739:51" pos:end="739:51">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="745:5" pos:end="745:39"><expr pos:start="745:5" pos:end="745:38"><name pos:start="745:5" pos:end="745:23"><name pos:start="745:5" pos:end="745:5">h</name><operator pos:start="745:6" pos:end="745:7">-&gt;</operator><name pos:start="745:8" pos:end="745:16">cbp_table</name><index pos:start="745:17" pos:end="745:23">[<expr pos:start="745:18" pos:end="745:22"><name pos:start="745:18" pos:end="745:22">mb_xy</name></expr>]</index></name> <operator pos:start="745:25" pos:end="745:25">=</operator> <name pos:start="745:27" pos:end="745:32"><name pos:start="745:27" pos:end="745:27">h</name><operator pos:start="745:28" pos:end="745:29">-&gt;</operator><name pos:start="745:30" pos:end="745:32">cbp</name></name> <operator pos:start="745:34" pos:end="745:34">=</operator> <name pos:start="745:36" pos:end="745:38">cbp</name></expr>;</expr_stmt>



    <if_stmt pos:start="749:5" pos:end="755:5"><if pos:start="749:5" pos:end="755:5">if<condition pos:start="749:7" pos:end="749:60">( <expr pos:start="749:9" pos:end="749:58"><name pos:start="749:9" pos:end="749:22">dct8x8_allowed</name> <operator pos:start="749:24" pos:end="749:25">&amp;&amp;</operator> <operator pos:start="749:27" pos:end="749:27">(</operator><name pos:start="749:28" pos:end="749:30">cbp</name><operator pos:start="749:31" pos:end="749:31">&amp;</operator><literal type="number" pos:start="749:32" pos:end="749:33">15</literal><operator pos:start="749:34" pos:end="749:34">)</operator> <operator pos:start="749:36" pos:end="749:37">&amp;&amp;</operator> <operator pos:start="749:39" pos:end="749:39">!</operator><call pos:start="749:40" pos:end="749:58"><name pos:start="749:40" pos:end="749:47">IS_INTRA</name><argument_list pos:start="749:48" pos:end="749:58">( <argument pos:start="749:50" pos:end="749:56"><expr pos:start="749:50" pos:end="749:56"><name pos:start="749:50" pos:end="749:56">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="749:62" pos:end="755:5">{<block_content pos:start="751:9" pos:end="753:38">

        <if_stmt pos:start="751:9" pos:end="753:38"><if pos:start="751:9" pos:end="753:38">if<condition pos:start="751:11" pos:end="751:49">( <expr pos:start="751:13" pos:end="751:47"><call pos:start="751:13" pos:end="751:47"><name pos:start="751:13" pos:end="751:42">decode_cabac_mb_transform_size</name><argument_list pos:start="751:43" pos:end="751:47">( <argument pos:start="751:45" pos:end="751:45"><expr pos:start="751:45" pos:end="751:45"><name pos:start="751:45" pos:end="751:45">h</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo" pos:start="753:13" pos:end="753:38"><block_content pos:start="753:13" pos:end="753:38">

            <expr_stmt pos:start="753:13" pos:end="753:38"><expr pos:start="753:13" pos:end="753:37"><name pos:start="753:13" pos:end="753:19">mb_type</name> <operator pos:start="753:21" pos:end="753:22">|=</operator> <name pos:start="753:24" pos:end="753:37">MB_TYPE_8x8DCT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="757:5" pos:end="757:47"><expr pos:start="757:5" pos:end="757:46"><name pos:start="757:5" pos:end="757:37"><name pos:start="757:5" pos:end="757:5">s</name><operator pos:start="757:6" pos:end="757:7">-&gt;</operator><name pos:start="757:8" pos:end="757:22">current_picture</name><operator pos:start="757:23" pos:end="757:23">.</operator><name pos:start="757:24" pos:end="757:30">mb_type</name><index pos:start="757:31" pos:end="757:37">[<expr pos:start="757:32" pos:end="757:36"><name pos:start="757:32" pos:end="757:36">mb_xy</name></expr>]</index></name><operator pos:start="757:38" pos:end="757:38">=</operator> <name pos:start="757:40" pos:end="757:46">mb_type</name></expr>;</expr_stmt>



    <if_stmt pos:start="761:5" pos:end="949:5"><if pos:start="761:5" pos:end="937:5">if<condition pos:start="761:7" pos:end="761:41">( <expr pos:start="761:9" pos:end="761:39"><name pos:start="761:9" pos:end="761:11">cbp</name> <operator pos:start="761:13" pos:end="761:14">||</operator> <call pos:start="761:16" pos:end="761:39"><name pos:start="761:16" pos:end="761:28">IS_INTRA16x16</name><argument_list pos:start="761:29" pos:end="761:39">( <argument pos:start="761:31" pos:end="761:37"><expr pos:start="761:31" pos:end="761:37"><name pos:start="761:31" pos:end="761:37">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="761:43" pos:end="937:5">{<block_content pos:start="763:9" pos:end="935:9">

        <decl_stmt pos:start="763:9" pos:end="763:48"><decl pos:start="763:9" pos:end="763:27"><type pos:start="763:9" pos:end="763:23"><specifier pos:start="763:9" pos:end="763:13">const</specifier> <name pos:start="763:15" pos:end="763:21">uint8_t</name> <modifier pos:start="763:23" pos:end="763:23">*</modifier></type><name pos:start="763:24" pos:end="763:27">scan</name></decl>, <decl pos:start="763:30" pos:end="763:37"><type ref="prev" pos:start="763:9" pos:end="763:23"><modifier pos:start="763:30" pos:end="763:30">*</modifier></type><name pos:start="763:31" pos:end="763:37">scan8x8</name></decl>, <decl pos:start="763:40" pos:end="763:47"><type ref="prev" pos:start="763:9" pos:end="763:23"><modifier pos:start="763:40" pos:end="763:40">*</modifier></type><name pos:start="763:41" pos:end="763:47">dc_scan</name></decl>;</decl_stmt>

        <decl_stmt pos:start="765:9" pos:end="765:16"><decl pos:start="765:9" pos:end="765:15"><type pos:start="765:9" pos:end="765:11"><name pos:start="765:9" pos:end="765:11">int</name></type> <name pos:start="765:13" pos:end="765:15">dqp</name></decl>;</decl_stmt>



        <if_stmt pos:start="769:9" pos:end="785:9"><if pos:start="769:9" pos:end="777:9">if<condition pos:start="769:11" pos:end="769:34">(<expr pos:start="769:12" pos:end="769:33"><call pos:start="769:12" pos:end="769:33"><name pos:start="769:12" pos:end="769:24">IS_INTERLACED</name><argument_list pos:start="769:25" pos:end="769:33">(<argument pos:start="769:26" pos:end="769:32"><expr pos:start="769:26" pos:end="769:32"><name pos:start="769:26" pos:end="769:32">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="769:35" pos:end="777:9">{<block_content pos:start="771:13" pos:end="775:40">

            <expr_stmt pos:start="771:13" pos:end="771:72"><expr pos:start="771:13" pos:end="771:71"><name pos:start="771:13" pos:end="771:19">scan8x8</name><operator pos:start="771:20" pos:end="771:20">=</operator> <ternary pos:start="771:22" pos:end="771:71"><condition pos:start="771:22" pos:end="771:32"><expr pos:start="771:22" pos:end="771:30"><name pos:start="771:22" pos:end="771:30"><name pos:start="771:22" pos:end="771:22">s</name><operator pos:start="771:23" pos:end="771:24">-&gt;</operator><name pos:start="771:25" pos:end="771:30">qscale</name></name></expr> ?</condition><then pos:start="771:34" pos:end="771:49"> <expr pos:start="771:34" pos:end="771:49"><name pos:start="771:34" pos:end="771:49"><name pos:start="771:34" pos:end="771:34">h</name><operator pos:start="771:35" pos:end="771:36">-&gt;</operator><name pos:start="771:37" pos:end="771:49">field_scan8x8</name></name></expr> </then><else pos:start="771:51" pos:end="771:71">: <expr pos:start="771:53" pos:end="771:71"><name pos:start="771:53" pos:end="771:71"><name pos:start="771:53" pos:end="771:53">h</name><operator pos:start="771:54" pos:end="771:55">-&gt;</operator><name pos:start="771:56" pos:end="771:71">field_scan8x8_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="773:13" pos:end="773:63"><expr pos:start="773:13" pos:end="773:62"><name pos:start="773:13" pos:end="773:16">scan</name><operator pos:start="773:17" pos:end="773:17">=</operator> <ternary pos:start="773:19" pos:end="773:62"><condition pos:start="773:19" pos:end="773:29"><expr pos:start="773:19" pos:end="773:27"><name pos:start="773:19" pos:end="773:27"><name pos:start="773:19" pos:end="773:19">s</name><operator pos:start="773:20" pos:end="773:21">-&gt;</operator><name pos:start="773:22" pos:end="773:27">qscale</name></name></expr> ?</condition><then pos:start="773:31" pos:end="773:43"> <expr pos:start="773:31" pos:end="773:43"><name pos:start="773:31" pos:end="773:43"><name pos:start="773:31" pos:end="773:31">h</name><operator pos:start="773:32" pos:end="773:33">-&gt;</operator><name pos:start="773:34" pos:end="773:43">field_scan</name></name></expr> </then><else pos:start="773:45" pos:end="773:62">: <expr pos:start="773:47" pos:end="773:62"><name pos:start="773:47" pos:end="773:62"><name pos:start="773:47" pos:end="773:47">h</name><operator pos:start="773:48" pos:end="773:49">-&gt;</operator><name pos:start="773:50" pos:end="773:62">field_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="775:13" pos:end="775:40"><expr pos:start="775:13" pos:end="775:39"><name pos:start="775:13" pos:end="775:19">dc_scan</name><operator pos:start="775:20" pos:end="775:20">=</operator> <name pos:start="775:22" pos:end="775:39">luma_dc_field_scan</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="777:10" pos:end="785:9">else<block pos:start="777:14" pos:end="785:9">{<block_content pos:start="779:13" pos:end="783:41">

            <expr_stmt pos:start="779:13" pos:end="779:74"><expr pos:start="779:13" pos:end="779:73"><name pos:start="779:13" pos:end="779:19">scan8x8</name><operator pos:start="779:20" pos:end="779:20">=</operator> <ternary pos:start="779:22" pos:end="779:73"><condition pos:start="779:22" pos:end="779:32"><expr pos:start="779:22" pos:end="779:30"><name pos:start="779:22" pos:end="779:30"><name pos:start="779:22" pos:end="779:22">s</name><operator pos:start="779:23" pos:end="779:24">-&gt;</operator><name pos:start="779:25" pos:end="779:30">qscale</name></name></expr> ?</condition><then pos:start="779:34" pos:end="779:50"> <expr pos:start="779:34" pos:end="779:50"><name pos:start="779:34" pos:end="779:50"><name pos:start="779:34" pos:end="779:34">h</name><operator pos:start="779:35" pos:end="779:36">-&gt;</operator><name pos:start="779:37" pos:end="779:50">zigzag_scan8x8</name></name></expr> </then><else pos:start="779:52" pos:end="779:73">: <expr pos:start="779:54" pos:end="779:73"><name pos:start="779:54" pos:end="779:73"><name pos:start="779:54" pos:end="779:54">h</name><operator pos:start="779:55" pos:end="779:56">-&gt;</operator><name pos:start="779:57" pos:end="779:73">zigzag_scan8x8_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="781:13" pos:end="781:65"><expr pos:start="781:13" pos:end="781:64"><name pos:start="781:13" pos:end="781:16">scan</name><operator pos:start="781:17" pos:end="781:17">=</operator> <ternary pos:start="781:19" pos:end="781:64"><condition pos:start="781:19" pos:end="781:29"><expr pos:start="781:19" pos:end="781:27"><name pos:start="781:19" pos:end="781:27"><name pos:start="781:19" pos:end="781:19">s</name><operator pos:start="781:20" pos:end="781:21">-&gt;</operator><name pos:start="781:22" pos:end="781:27">qscale</name></name></expr> ?</condition><then pos:start="781:31" pos:end="781:44"> <expr pos:start="781:31" pos:end="781:44"><name pos:start="781:31" pos:end="781:44"><name pos:start="781:31" pos:end="781:31">h</name><operator pos:start="781:32" pos:end="781:33">-&gt;</operator><name pos:start="781:34" pos:end="781:44">zigzag_scan</name></name></expr> </then><else pos:start="781:46" pos:end="781:64">: <expr pos:start="781:48" pos:end="781:64"><name pos:start="781:48" pos:end="781:64"><name pos:start="781:48" pos:end="781:48">h</name><operator pos:start="781:49" pos:end="781:50">-&gt;</operator><name pos:start="781:51" pos:end="781:64">zigzag_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="783:13" pos:end="783:41"><expr pos:start="783:13" pos:end="783:40"><name pos:start="783:13" pos:end="783:19">dc_scan</name><operator pos:start="783:20" pos:end="783:20">=</operator> <name pos:start="783:22" pos:end="783:40">luma_dc_zigzag_scan</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="789:9" pos:end="789:61"><expr pos:start="789:9" pos:end="789:60"><name pos:start="789:9" pos:end="789:27"><name pos:start="789:9" pos:end="789:9">h</name><operator pos:start="789:10" pos:end="789:11">-&gt;</operator><name pos:start="789:12" pos:end="789:27">last_qscale_diff</name></name> <operator pos:start="789:29" pos:end="789:29">=</operator> <name pos:start="789:31" pos:end="789:33">dqp</name> <operator pos:start="789:35" pos:end="789:35">=</operator> <call pos:start="789:37" pos:end="789:60"><name pos:start="789:37" pos:end="789:55">decode_cabac_mb_dqp</name><argument_list pos:start="789:56" pos:end="789:60">( <argument pos:start="789:58" pos:end="789:58"><expr pos:start="789:58" pos:end="789:58"><name pos:start="789:58" pos:end="789:58">h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="791:9" pos:end="797:9"><if pos:start="791:9" pos:end="797:9">if<condition pos:start="791:11" pos:end="791:28">( <expr pos:start="791:13" pos:end="791:26"><name pos:start="791:13" pos:end="791:15">dqp</name> <operator pos:start="791:17" pos:end="791:18">==</operator> <name pos:start="791:20" pos:end="791:26">INT_MIN</name></expr> )</condition><block pos:start="791:29" pos:end="797:9">{<block_content pos:start="793:13" pos:end="795:22">

            <expr_stmt pos:start="793:13" pos:end="793:112"><expr pos:start="793:13" pos:end="793:111"><call pos:start="793:13" pos:end="793:111"><name pos:start="793:13" pos:end="793:18">av_log</name><argument_list pos:start="793:19" pos:end="793:111">(<argument pos:start="793:20" pos:end="793:29"><expr pos:start="793:20" pos:end="793:29"><name pos:start="793:20" pos:end="793:29"><name pos:start="793:20" pos:end="793:20">h</name><operator pos:start="793:21" pos:end="793:22">-&gt;</operator><name pos:start="793:23" pos:end="793:23">s</name><operator pos:start="793:24" pos:end="793:24">.</operator><name pos:start="793:25" pos:end="793:29">avctx</name></name></expr></argument>, <argument pos:start="793:32" pos:end="793:43"><expr pos:start="793:32" pos:end="793:43"><name pos:start="793:32" pos:end="793:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="793:46" pos:end="793:92"><expr pos:start="793:46" pos:end="793:92"><literal type="string" pos:start="793:46" pos:end="793:92">"cabac decode of qscale diff failed at %d %d\n"</literal></expr></argument>, <argument pos:start="793:95" pos:end="793:101"><expr pos:start="793:95" pos:end="793:101"><name pos:start="793:95" pos:end="793:101"><name pos:start="793:95" pos:end="793:95">s</name><operator pos:start="793:96" pos:end="793:97">-&gt;</operator><name pos:start="793:98" pos:end="793:101">mb_x</name></name></expr></argument>, <argument pos:start="793:104" pos:end="793:110"><expr pos:start="793:104" pos:end="793:110"><name pos:start="793:104" pos:end="793:110"><name pos:start="793:104" pos:end="793:104">s</name><operator pos:start="793:105" pos:end="793:106">-&gt;</operator><name pos:start="793:107" pos:end="793:110">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="795:13" pos:end="795:22">return <expr pos:start="795:20" pos:end="795:21"><operator pos:start="795:20" pos:end="795:20">-</operator><literal type="number" pos:start="795:21" pos:end="795:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="799:9" pos:end="799:25"><expr pos:start="799:9" pos:end="799:24"><name pos:start="799:9" pos:end="799:17"><name pos:start="799:9" pos:end="799:9">s</name><operator pos:start="799:10" pos:end="799:11">-&gt;</operator><name pos:start="799:12" pos:end="799:17">qscale</name></name> <operator pos:start="799:19" pos:end="799:20">+=</operator> <name pos:start="799:22" pos:end="799:24">dqp</name></expr>;</expr_stmt>

        <if_stmt pos:start="801:9" pos:end="807:9"><if pos:start="801:9" pos:end="807:9">if<condition pos:start="801:11" pos:end="801:38">(<expr pos:start="801:12" pos:end="801:37"><operator pos:start="801:12" pos:end="801:12">(</operator><operator pos:start="801:13" pos:end="801:13">(</operator><name pos:start="801:14" pos:end="801:21">unsigned</name><operator pos:start="801:22" pos:end="801:22">)</operator><name pos:start="801:23" pos:end="801:31"><name pos:start="801:23" pos:end="801:23">s</name><operator pos:start="801:24" pos:end="801:25">-&gt;</operator><name pos:start="801:26" pos:end="801:31">qscale</name></name><operator pos:start="801:32" pos:end="801:32">)</operator> <operator pos:start="801:34" pos:end="801:34">&gt;</operator> <literal type="number" pos:start="801:36" pos:end="801:37">51</literal></expr>)</condition><block pos:start="801:39" pos:end="807:9">{<block_content pos:start="803:13" pos:end="805:43">

            <if_stmt pos:start="803:13" pos:end="805:43"><if pos:start="803:13" pos:end="803:43">if<condition pos:start="803:15" pos:end="803:27">(<expr pos:start="803:16" pos:end="803:26"><name pos:start="803:16" pos:end="803:24"><name pos:start="803:16" pos:end="803:16">s</name><operator pos:start="803:17" pos:end="803:18">-&gt;</operator><name pos:start="803:19" pos:end="803:24">qscale</name></name><operator pos:start="803:25" pos:end="803:25">&lt;</operator><literal type="number" pos:start="803:26" pos:end="803:26">0</literal></expr>)</condition><block type="pseudo" pos:start="803:29" pos:end="803:43"><block_content pos:start="803:29" pos:end="803:43"> <expr_stmt pos:start="803:29" pos:end="803:43"><expr pos:start="803:29" pos:end="803:42"><name pos:start="803:29" pos:end="803:37"><name pos:start="803:29" pos:end="803:29">s</name><operator pos:start="803:30" pos:end="803:31">-&gt;</operator><name pos:start="803:32" pos:end="803:37">qscale</name></name><operator pos:start="803:38" pos:end="803:39">+=</operator> <literal type="number" pos:start="803:41" pos:end="803:42">52</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="805:13" pos:end="805:43">else<block type="pseudo" pos:start="805:29" pos:end="805:43"><block_content pos:start="805:29" pos:end="805:43">            <expr_stmt pos:start="805:29" pos:end="805:43"><expr pos:start="805:29" pos:end="805:42"><name pos:start="805:29" pos:end="805:37"><name pos:start="805:29" pos:end="805:29">s</name><operator pos:start="805:30" pos:end="805:31">-&gt;</operator><name pos:start="805:32" pos:end="805:37">qscale</name></name><operator pos:start="805:38" pos:end="805:39">-=</operator> <literal type="number" pos:start="805:41" pos:end="805:42">52</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="809:9" pos:end="809:79"><expr pos:start="809:9" pos:end="809:78"><name pos:start="809:9" pos:end="809:20"><name pos:start="809:9" pos:end="809:9">h</name><operator pos:start="809:10" pos:end="809:11">-&gt;</operator><name pos:start="809:12" pos:end="809:20">chroma_qp</name></name> <operator pos:start="809:22" pos:end="809:22">=</operator> <call pos:start="809:24" pos:end="809:78"><name pos:start="809:24" pos:end="809:36">get_chroma_qp</name><argument_list pos:start="809:37" pos:end="809:78">(<argument pos:start="809:38" pos:end="809:66"><expr pos:start="809:38" pos:end="809:66"><name pos:start="809:38" pos:end="809:66"><name pos:start="809:38" pos:end="809:38">h</name><operator pos:start="809:39" pos:end="809:40">-&gt;</operator><name pos:start="809:41" pos:end="809:43">pps</name><operator pos:start="809:44" pos:end="809:44">.</operator><name pos:start="809:45" pos:end="809:66">chroma_qp_index_offset</name></name></expr></argument>, <argument pos:start="809:69" pos:end="809:77"><expr pos:start="809:69" pos:end="809:77"><name pos:start="809:69" pos:end="809:77"><name pos:start="809:69" pos:end="809:69">s</name><operator pos:start="809:70" pos:end="809:71">-&gt;</operator><name pos:start="809:72" pos:end="809:77">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="813:9" pos:end="885:9"><if pos:start="813:9" pos:end="841:9">if<condition pos:start="813:11" pos:end="813:38">( <expr pos:start="813:13" pos:end="813:36"><call pos:start="813:13" pos:end="813:36"><name pos:start="813:13" pos:end="813:25">IS_INTRA16x16</name><argument_list pos:start="813:26" pos:end="813:36">( <argument pos:start="813:28" pos:end="813:34"><expr pos:start="813:28" pos:end="813:34"><name pos:start="813:28" pos:end="813:34">mb_type</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="813:40" pos:end="841:9">{<block_content pos:start="815:13" pos:end="839:13">

            <decl_stmt pos:start="815:13" pos:end="815:18"><decl pos:start="815:13" pos:end="815:17"><type pos:start="815:13" pos:end="815:15"><name pos:start="815:13" pos:end="815:15">int</name></type> <name pos:start="815:17" pos:end="815:17">i</name></decl>;</decl_stmt>

            <comment type="line" pos:start="817:13" pos:end="817:66">//av_log( s-&gt;avctx, AV_LOG_ERROR, "INTRA16x16 DC\n" );</comment>

            <if_stmt pos:start="819:13" pos:end="821:26"><if pos:start="819:13" pos:end="821:26">if<condition pos:start="819:15" pos:end="819:78">( <expr pos:start="819:17" pos:end="819:77"><call pos:start="819:17" pos:end="819:73"><name pos:start="819:17" pos:end="819:37">decode_cabac_residual</name><argument_list pos:start="819:38" pos:end="819:73">( <argument pos:start="819:40" pos:end="819:40"><expr pos:start="819:40" pos:end="819:40"><name pos:start="819:40" pos:end="819:40">h</name></expr></argument>, <argument pos:start="819:43" pos:end="819:47"><expr pos:start="819:43" pos:end="819:47"><name pos:start="819:43" pos:end="819:47"><name pos:start="819:43" pos:end="819:43">h</name><operator pos:start="819:44" pos:end="819:45">-&gt;</operator><name pos:start="819:46" pos:end="819:47">mb</name></name></expr></argument>, <argument pos:start="819:50" pos:end="819:50"><expr pos:start="819:50" pos:end="819:50"><literal type="number" pos:start="819:50" pos:end="819:50">0</literal></expr></argument>, <argument pos:start="819:53" pos:end="819:53"><expr pos:start="819:53" pos:end="819:53"><literal type="number" pos:start="819:53" pos:end="819:53">0</literal></expr></argument>, <argument pos:start="819:56" pos:end="819:62"><expr pos:start="819:56" pos:end="819:62"><name pos:start="819:56" pos:end="819:62">dc_scan</name></expr></argument>, <argument pos:start="819:65" pos:end="819:68"><expr pos:start="819:65" pos:end="819:68"><name pos:start="819:65" pos:end="819:68">NULL</name></expr></argument>, <argument pos:start="819:71" pos:end="819:72"><expr pos:start="819:71" pos:end="819:72"><literal type="number" pos:start="819:71" pos:end="819:72">16</literal></expr></argument>)</argument_list></call> <operator pos:start="819:75" pos:end="819:75">&lt;</operator> <literal type="number" pos:start="819:77" pos:end="819:77">0</literal></expr>)</condition><block type="pseudo" pos:start="821:17" pos:end="821:26"><block_content pos:start="821:17" pos:end="821:26">

                <return pos:start="821:17" pos:end="821:26">return <expr pos:start="821:24" pos:end="821:25"><operator pos:start="821:24" pos:end="821:24">-</operator><literal type="number" pos:start="821:25" pos:end="821:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="823:13" pos:end="839:13"><if pos:start="823:13" pos:end="835:13">if<condition pos:start="823:15" pos:end="823:24">( <expr pos:start="823:17" pos:end="823:22"><name pos:start="823:17" pos:end="823:19">cbp</name><operator pos:start="823:20" pos:end="823:20">&amp;</operator><literal type="number" pos:start="823:21" pos:end="823:22">15</literal></expr> )</condition> <block pos:start="823:26" pos:end="835:13">{<block_content pos:start="825:17" pos:end="833:17">

                <for pos:start="825:17" pos:end="833:17">for<control pos:start="825:20" pos:end="825:41">( <init pos:start="825:22" pos:end="825:27"><expr pos:start="825:22" pos:end="825:26"><name pos:start="825:22" pos:end="825:22">i</name> <operator pos:start="825:24" pos:end="825:24">=</operator> <literal type="number" pos:start="825:26" pos:end="825:26">0</literal></expr>;</init> <condition pos:start="825:29" pos:end="825:35"><expr pos:start="825:29" pos:end="825:34"><name pos:start="825:29" pos:end="825:29">i</name> <operator pos:start="825:31" pos:end="825:31">&lt;</operator> <literal type="number" pos:start="825:33" pos:end="825:34">16</literal></expr>;</condition> <incr pos:start="825:37" pos:end="825:39"><expr pos:start="825:37" pos:end="825:39"><name pos:start="825:37" pos:end="825:37">i</name><operator pos:start="825:38" pos:end="825:39">++</operator></expr></incr> )</control> <block pos:start="825:43" pos:end="833:17">{<block_content pos:start="829:21" pos:end="831:34">

                    <comment type="line" pos:start="827:21" pos:end="827:80">//av_log( s-&gt;avctx, AV_LOG_ERROR, "INTRA16x16 AC:%d\n", i );</comment>

                    <if_stmt pos:start="829:21" pos:end="831:34"><if pos:start="829:21" pos:end="831:34">if<condition pos:start="829:23" pos:end="829:121">( <expr pos:start="829:25" pos:end="829:119"><call pos:start="829:25" pos:end="829:115"><name pos:start="829:25" pos:end="829:45">decode_cabac_residual</name><argument_list pos:start="829:46" pos:end="829:115">(<argument pos:start="829:47" pos:end="829:47"><expr pos:start="829:47" pos:end="829:47"><name pos:start="829:47" pos:end="829:47">h</name></expr></argument>, <argument pos:start="829:50" pos:end="829:61"><expr pos:start="829:50" pos:end="829:61"><name pos:start="829:50" pos:end="829:54"><name pos:start="829:50" pos:end="829:50">h</name><operator pos:start="829:51" pos:end="829:52">-&gt;</operator><name pos:start="829:53" pos:end="829:54">mb</name></name> <operator pos:start="829:56" pos:end="829:56">+</operator> <literal type="number" pos:start="829:58" pos:end="829:59">16</literal><operator pos:start="829:60" pos:end="829:60">*</operator><name pos:start="829:61" pos:end="829:61">i</name></expr></argument>, <argument pos:start="829:64" pos:end="829:64"><expr pos:start="829:64" pos:end="829:64"><literal type="number" pos:start="829:64" pos:end="829:64">1</literal></expr></argument>, <argument pos:start="829:67" pos:end="829:67"><expr pos:start="829:67" pos:end="829:67"><name pos:start="829:67" pos:end="829:67">i</name></expr></argument>, <argument pos:start="829:70" pos:end="829:77"><expr pos:start="829:70" pos:end="829:77"><name pos:start="829:70" pos:end="829:73">scan</name> <operator pos:start="829:75" pos:end="829:75">+</operator> <literal type="number" pos:start="829:77" pos:end="829:77">1</literal></expr></argument>, <argument pos:start="829:80" pos:end="829:110"><expr pos:start="829:80" pos:end="829:110"><name pos:start="829:80" pos:end="829:110"><name pos:start="829:80" pos:end="829:80">h</name><operator pos:start="829:81" pos:end="829:82">-&gt;</operator><name pos:start="829:83" pos:end="829:96">dequant4_coeff</name><index pos:start="829:97" pos:end="829:99">[<expr pos:start="829:98" pos:end="829:98"><literal type="number" pos:start="829:98" pos:end="829:98">0</literal></expr>]</index><index pos:start="829:100" pos:end="829:110">[<expr pos:start="829:101" pos:end="829:109"><name pos:start="829:101" pos:end="829:109"><name pos:start="829:101" pos:end="829:101">s</name><operator pos:start="829:102" pos:end="829:103">-&gt;</operator><name pos:start="829:104" pos:end="829:109">qscale</name></name></expr>]</index></name></expr></argument>, <argument pos:start="829:113" pos:end="829:114"><expr pos:start="829:113" pos:end="829:114"><literal type="number" pos:start="829:113" pos:end="829:114">15</literal></expr></argument>)</argument_list></call> <operator pos:start="829:117" pos:end="829:117">&lt;</operator> <literal type="number" pos:start="829:119" pos:end="829:119">0</literal></expr> )</condition><block type="pseudo" pos:start="831:25" pos:end="831:34"><block_content pos:start="831:25" pos:end="831:34">

                        <return pos:start="831:25" pos:end="831:34">return <expr pos:start="831:32" pos:end="831:33"><operator pos:start="831:32" pos:end="831:32">-</operator><literal type="number" pos:start="831:33" pos:end="831:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="835:15" pos:end="839:13">else <block pos:start="835:20" pos:end="839:13">{<block_content pos:start="837:17" pos:end="837:82">

                <expr_stmt pos:start="837:17" pos:end="837:82"><expr pos:start="837:17" pos:end="837:81"><call pos:start="837:17" pos:end="837:81"><name pos:start="837:17" pos:end="837:30">fill_rectangle</name><argument_list pos:start="837:31" pos:end="837:81">(<argument pos:start="837:32" pos:end="837:65"><expr pos:start="837:32" pos:end="837:65"><operator pos:start="837:32" pos:end="837:32">&amp;</operator><name pos:start="837:33" pos:end="837:65"><name pos:start="837:33" pos:end="837:33">h</name><operator pos:start="837:34" pos:end="837:35">-&gt;</operator><name pos:start="837:36" pos:end="837:55">non_zero_count_cache</name><index pos:start="837:56" pos:end="837:65">[<expr pos:start="837:57" pos:end="837:64"><name pos:start="837:57" pos:end="837:64"><name pos:start="837:57" pos:end="837:61">scan8</name><index pos:start="837:62" pos:end="837:64">[<expr pos:start="837:63" pos:end="837:63"><literal type="number" pos:start="837:63" pos:end="837:63">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="837:68" pos:end="837:68"><expr pos:start="837:68" pos:end="837:68"><literal type="number" pos:start="837:68" pos:end="837:68">4</literal></expr></argument>, <argument pos:start="837:71" pos:end="837:71"><expr pos:start="837:71" pos:end="837:71"><literal type="number" pos:start="837:71" pos:end="837:71">4</literal></expr></argument>, <argument pos:start="837:74" pos:end="837:74"><expr pos:start="837:74" pos:end="837:74"><literal type="number" pos:start="837:74" pos:end="837:74">8</literal></expr></argument>, <argument pos:start="837:77" pos:end="837:77"><expr pos:start="837:77" pos:end="837:77"><literal type="number" pos:start="837:77" pos:end="837:77">0</literal></expr></argument>, <argument pos:start="837:80" pos:end="837:80"><expr pos:start="837:80" pos:end="837:80"><literal type="number" pos:start="837:80" pos:end="837:80">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="841:11" pos:end="885:9">else <block pos:start="841:16" pos:end="885:9">{<block_content pos:start="843:13" pos:end="883:13">

            <decl_stmt pos:start="843:13" pos:end="843:27"><decl pos:start="843:13" pos:end="843:20"><type pos:start="843:13" pos:end="843:15"><name pos:start="843:13" pos:end="843:15">int</name></type> <name pos:start="843:17" pos:end="843:20">i8x8</name></decl>, <decl pos:start="843:23" pos:end="843:26"><type ref="prev" pos:start="843:13" pos:end="843:15"/><name pos:start="843:23" pos:end="843:26">i4x4</name></decl>;</decl_stmt>

            <for pos:start="845:13" pos:end="883:13">for<control pos:start="845:16" pos:end="845:45">( <init pos:start="845:18" pos:end="845:26"><expr pos:start="845:18" pos:end="845:25"><name pos:start="845:18" pos:end="845:21">i8x8</name> <operator pos:start="845:23" pos:end="845:23">=</operator> <literal type="number" pos:start="845:25" pos:end="845:25">0</literal></expr>;</init> <condition pos:start="845:28" pos:end="845:36"><expr pos:start="845:28" pos:end="845:35"><name pos:start="845:28" pos:end="845:31">i8x8</name> <operator pos:start="845:33" pos:end="845:33">&lt;</operator> <literal type="number" pos:start="845:35" pos:end="845:35">4</literal></expr>;</condition> <incr pos:start="845:38" pos:end="845:43"><expr pos:start="845:38" pos:end="845:43"><name pos:start="845:38" pos:end="845:41">i8x8</name><operator pos:start="845:42" pos:end="845:43">++</operator></expr></incr> )</control> <block pos:start="845:47" pos:end="883:13">{<block_content pos:start="847:17" pos:end="881:17">

                <if_stmt pos:start="847:17" pos:end="881:17"><if pos:start="847:17" pos:end="875:17">if<condition pos:start="847:19" pos:end="847:37">( <expr pos:start="847:21" pos:end="847:35"><name pos:start="847:21" pos:end="847:23">cbp</name> <operator pos:start="847:25" pos:end="847:25">&amp;</operator> <operator pos:start="847:27" pos:end="847:27">(</operator><literal type="number" pos:start="847:28" pos:end="847:28">1</literal><operator pos:start="847:29" pos:end="847:30">&lt;&lt;</operator><name pos:start="847:31" pos:end="847:34">i8x8</name><operator pos:start="847:35" pos:end="847:35">)</operator></expr> )</condition> <block pos:start="847:39" pos:end="875:17">{<block_content pos:start="849:21" pos:end="873:21">

                    <if_stmt pos:start="849:21" pos:end="873:21"><if pos:start="849:21" pos:end="857:21">if<condition pos:start="849:23" pos:end="849:44">( <expr pos:start="849:25" pos:end="849:42"><call pos:start="849:25" pos:end="849:42"><name pos:start="849:25" pos:end="849:33">IS_8x8DCT</name><argument_list pos:start="849:34" pos:end="849:42">(<argument pos:start="849:35" pos:end="849:41"><expr pos:start="849:35" pos:end="849:41"><name pos:start="849:35" pos:end="849:41">mb_type</name></expr></argument>)</argument_list></call></expr> )</condition> <block pos:start="849:46" pos:end="857:21">{<block_content pos:start="851:25" pos:end="855:38">

                        <if_stmt pos:start="851:25" pos:end="855:38"><if pos:start="851:25" pos:end="855:38">if<condition pos:start="851:27" pos:end="853:103">( <expr pos:start="851:29" pos:end="853:101"><call pos:start="851:29" pos:end="853:97"><name pos:start="851:29" pos:end="851:49">decode_cabac_residual</name><argument_list pos:start="851:50" pos:end="853:97">(<argument pos:start="851:51" pos:end="851:51"><expr pos:start="851:51" pos:end="851:51"><name pos:start="851:51" pos:end="851:51">h</name></expr></argument>, <argument pos:start="851:54" pos:end="851:68"><expr pos:start="851:54" pos:end="851:68"><name pos:start="851:54" pos:end="851:58"><name pos:start="851:54" pos:end="851:54">h</name><operator pos:start="851:55" pos:end="851:56">-&gt;</operator><name pos:start="851:57" pos:end="851:58">mb</name></name> <operator pos:start="851:60" pos:end="851:60">+</operator> <literal type="number" pos:start="851:62" pos:end="851:63">64</literal><operator pos:start="851:64" pos:end="851:64">*</operator><name pos:start="851:65" pos:end="851:68">i8x8</name></expr></argument>, <argument pos:start="851:71" pos:end="851:71"><expr pos:start="851:71" pos:end="851:71"><literal type="number" pos:start="851:71" pos:end="851:71">5</literal></expr></argument>, <argument pos:start="851:74" pos:end="851:79"><expr pos:start="851:74" pos:end="851:79"><literal type="number" pos:start="851:74" pos:end="851:74">4</literal><operator pos:start="851:75" pos:end="851:75">*</operator><name pos:start="851:76" pos:end="851:79">i8x8</name></expr></argument>,

                            <argument pos:start="853:29" pos:end="853:35"><expr pos:start="853:29" pos:end="853:35"><name pos:start="853:29" pos:end="853:35">scan8x8</name></expr></argument>, <argument pos:start="853:38" pos:end="853:92"><expr pos:start="853:38" pos:end="853:92"><name pos:start="853:38" pos:end="853:92"><name pos:start="853:38" pos:end="853:38">h</name><operator pos:start="853:39" pos:end="853:40">-&gt;</operator><name pos:start="853:41" pos:end="853:54">dequant8_coeff</name><index pos:start="853:55" pos:end="853:81">[<expr pos:start="853:56" pos:end="853:80"><ternary pos:start="853:56" pos:end="853:80"><condition pos:start="853:56" pos:end="853:76"><expr pos:start="853:56" pos:end="853:74"><call pos:start="853:56" pos:end="853:74"><name pos:start="853:56" pos:end="853:63">IS_INTRA</name><argument_list pos:start="853:64" pos:end="853:74">( <argument pos:start="853:66" pos:end="853:72"><expr pos:start="853:66" pos:end="853:72"><name pos:start="853:66" pos:end="853:72">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="853:78" pos:end="853:78"> <expr pos:start="853:78" pos:end="853:78"><literal type="number" pos:start="853:78" pos:end="853:78">0</literal></expr></then><else pos:start="853:79" pos:end="853:80">:<expr pos:start="853:80" pos:end="853:80"><literal type="number" pos:start="853:80" pos:end="853:80">1</literal></expr></else></ternary></expr>]</index><index pos:start="853:82" pos:end="853:92">[<expr pos:start="853:83" pos:end="853:91"><name pos:start="853:83" pos:end="853:91"><name pos:start="853:83" pos:end="853:83">s</name><operator pos:start="853:84" pos:end="853:85">-&gt;</operator><name pos:start="853:86" pos:end="853:91">qscale</name></name></expr>]</index></name></expr></argument>, <argument pos:start="853:95" pos:end="853:96"><expr pos:start="853:95" pos:end="853:96"><literal type="number" pos:start="853:95" pos:end="853:96">64</literal></expr></argument>)</argument_list></call> <operator pos:start="853:99" pos:end="853:99">&lt;</operator> <literal type="number" pos:start="853:101" pos:end="853:101">0</literal></expr> )</condition><block type="pseudo" pos:start="855:29" pos:end="855:38"><block_content pos:start="855:29" pos:end="855:38">

                            <return pos:start="855:29" pos:end="855:38">return <expr pos:start="855:36" pos:end="855:37"><operator pos:start="855:36" pos:end="855:36">-</operator><literal type="number" pos:start="855:37" pos:end="855:37">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="857:23" pos:end="873:21">else<block type="pseudo" pos:start="859:21" pos:end="873:21"><block_content pos:start="859:21" pos:end="873:21">

                    <for pos:start="859:21" pos:end="873:21">for<control pos:start="859:24" pos:end="859:53">( <init pos:start="859:26" pos:end="859:34"><expr pos:start="859:26" pos:end="859:33"><name pos:start="859:26" pos:end="859:29">i4x4</name> <operator pos:start="859:31" pos:end="859:31">=</operator> <literal type="number" pos:start="859:33" pos:end="859:33">0</literal></expr>;</init> <condition pos:start="859:36" pos:end="859:44"><expr pos:start="859:36" pos:end="859:43"><name pos:start="859:36" pos:end="859:39">i4x4</name> <operator pos:start="859:41" pos:end="859:41">&lt;</operator> <literal type="number" pos:start="859:43" pos:end="859:43">4</literal></expr>;</condition> <incr pos:start="859:46" pos:end="859:51"><expr pos:start="859:46" pos:end="859:51"><name pos:start="859:46" pos:end="859:49">i4x4</name><operator pos:start="859:50" pos:end="859:51">++</operator></expr></incr> )</control> <block pos:start="859:55" pos:end="873:21">{<block_content pos:start="861:25" pos:end="869:38">

                        <decl_stmt pos:start="861:25" pos:end="861:56"><decl pos:start="861:25" pos:end="861:55"><type pos:start="861:25" pos:end="861:33"><specifier pos:start="861:25" pos:end="861:29">const</specifier> <name pos:start="861:31" pos:end="861:33">int</name></type> <name pos:start="861:35" pos:end="861:39">index</name> <init pos:start="861:41" pos:end="861:55">= <expr pos:start="861:43" pos:end="861:55"><literal type="number" pos:start="861:43" pos:end="861:43">4</literal><operator pos:start="861:44" pos:end="861:44">*</operator><name pos:start="861:45" pos:end="861:48">i8x8</name> <operator pos:start="861:50" pos:end="861:50">+</operator> <name pos:start="861:52" pos:end="861:55">i4x4</name></expr></init></decl>;</decl_stmt>

                        <comment type="line" pos:start="863:25" pos:end="863:83">//av_log( s-&gt;avctx, AV_LOG_ERROR, "Luma4x4: %d\n", index );</comment>

<comment type="line" pos:start="865:1" pos:end="865:13">//START_TIMER</comment>

                        <if_stmt pos:start="867:25" pos:end="869:38"><if pos:start="867:25" pos:end="869:38">if<condition pos:start="867:27" pos:end="867:153">( <expr pos:start="867:29" pos:end="867:151"><call pos:start="867:29" pos:end="867:147"><name pos:start="867:29" pos:end="867:49">decode_cabac_residual</name><argument_list pos:start="867:50" pos:end="867:147">(<argument pos:start="867:51" pos:end="867:51"><expr pos:start="867:51" pos:end="867:51"><name pos:start="867:51" pos:end="867:51">h</name></expr></argument>, <argument pos:start="867:54" pos:end="867:69"><expr pos:start="867:54" pos:end="867:69"><name pos:start="867:54" pos:end="867:58"><name pos:start="867:54" pos:end="867:54">h</name><operator pos:start="867:55" pos:end="867:56">-&gt;</operator><name pos:start="867:57" pos:end="867:58">mb</name></name> <operator pos:start="867:60" pos:end="867:60">+</operator> <literal type="number" pos:start="867:62" pos:end="867:63">16</literal><operator pos:start="867:64" pos:end="867:64">*</operator><name pos:start="867:65" pos:end="867:69">index</name></expr></argument>, <argument pos:start="867:72" pos:end="867:72"><expr pos:start="867:72" pos:end="867:72"><literal type="number" pos:start="867:72" pos:end="867:72">2</literal></expr></argument>, <argument pos:start="867:75" pos:end="867:79"><expr pos:start="867:75" pos:end="867:79"><name pos:start="867:75" pos:end="867:79">index</name></expr></argument>, <argument pos:start="867:82" pos:end="867:85"><expr pos:start="867:82" pos:end="867:85"><name pos:start="867:82" pos:end="867:85">scan</name></expr></argument>, <argument pos:start="867:88" pos:end="867:142"><expr pos:start="867:88" pos:end="867:142"><name pos:start="867:88" pos:end="867:142"><name pos:start="867:88" pos:end="867:88">h</name><operator pos:start="867:89" pos:end="867:90">-&gt;</operator><name pos:start="867:91" pos:end="867:104">dequant4_coeff</name><index pos:start="867:105" pos:end="867:131">[<expr pos:start="867:106" pos:end="867:130"><ternary pos:start="867:106" pos:end="867:130"><condition pos:start="867:106" pos:end="867:126"><expr pos:start="867:106" pos:end="867:124"><call pos:start="867:106" pos:end="867:124"><name pos:start="867:106" pos:end="867:113">IS_INTRA</name><argument_list pos:start="867:114" pos:end="867:124">( <argument pos:start="867:116" pos:end="867:122"><expr pos:start="867:116" pos:end="867:122"><name pos:start="867:116" pos:end="867:122">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="867:128" pos:end="867:128"> <expr pos:start="867:128" pos:end="867:128"><literal type="number" pos:start="867:128" pos:end="867:128">0</literal></expr></then><else pos:start="867:129" pos:end="867:130">:<expr pos:start="867:130" pos:end="867:130"><literal type="number" pos:start="867:130" pos:end="867:130">3</literal></expr></else></ternary></expr>]</index><index pos:start="867:132" pos:end="867:142">[<expr pos:start="867:133" pos:end="867:141"><name pos:start="867:133" pos:end="867:141"><name pos:start="867:133" pos:end="867:133">s</name><operator pos:start="867:134" pos:end="867:135">-&gt;</operator><name pos:start="867:136" pos:end="867:141">qscale</name></name></expr>]</index></name></expr></argument>, <argument pos:start="867:145" pos:end="867:146"><expr pos:start="867:145" pos:end="867:146"><literal type="number" pos:start="867:145" pos:end="867:146">16</literal></expr></argument>)</argument_list></call> <operator pos:start="867:149" pos:end="867:149">&lt;</operator> <literal type="number" pos:start="867:151" pos:end="867:151">0</literal></expr> )</condition><block type="pseudo" pos:start="869:29" pos:end="869:38"><block_content pos:start="869:29" pos:end="869:38">

                            <return pos:start="869:29" pos:end="869:38">return <expr pos:start="869:36" pos:end="869:37"><operator pos:start="869:36" pos:end="869:36">-</operator><literal type="number" pos:start="869:37" pos:end="869:37">1</literal></expr>;</return></block_content></block></if></if_stmt>

<comment type="line" pos:start="871:1" pos:end="871:31">//STOP_TIMER("decode_residual")</comment>

                    </block_content>}</block></for></block_content></block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="875:19" pos:end="881:17">else <block pos:start="875:24" pos:end="881:17">{<block_content pos:start="877:21" pos:end="879:58">

                    <decl_stmt pos:start="877:21" pos:end="877:83"><decl pos:start="877:21" pos:end="877:82"><type pos:start="877:21" pos:end="877:35"><name pos:start="877:21" pos:end="877:27">uint8_t</name> <modifier pos:start="877:29" pos:end="877:29">*</modifier> <specifier pos:start="877:31" pos:end="877:35">const</specifier></type> <name pos:start="877:37" pos:end="877:39">nnz</name><init pos:start="877:40" pos:end="877:82">= <expr pos:start="877:42" pos:end="877:82"><operator pos:start="877:42" pos:end="877:42">&amp;</operator><name pos:start="877:43" pos:end="877:82"><name pos:start="877:43" pos:end="877:43">h</name><operator pos:start="877:44" pos:end="877:45">-&gt;</operator><name pos:start="877:46" pos:end="877:65">non_zero_count_cache</name><index pos:start="877:66" pos:end="877:82">[ <expr pos:start="877:68" pos:end="877:80"><name pos:start="877:68" pos:end="877:80"><name pos:start="877:68" pos:end="877:72">scan8</name><index pos:start="877:73" pos:end="877:80">[<expr pos:start="877:74" pos:end="877:79"><literal type="number" pos:start="877:74" pos:end="877:74">4</literal><operator pos:start="877:75" pos:end="877:75">*</operator><name pos:start="877:76" pos:end="877:79">i8x8</name></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="879:21" pos:end="879:58"><expr pos:start="879:21" pos:end="879:57"><name pos:start="879:21" pos:end="879:26"><name pos:start="879:21" pos:end="879:23">nnz</name><index pos:start="879:24" pos:end="879:26">[<expr pos:start="879:25" pos:end="879:25"><literal type="number" pos:start="879:25" pos:end="879:25">0</literal></expr>]</index></name> <operator pos:start="879:28" pos:end="879:28">=</operator> <name pos:start="879:30" pos:end="879:35"><name pos:start="879:30" pos:end="879:32">nnz</name><index pos:start="879:33" pos:end="879:35">[<expr pos:start="879:34" pos:end="879:34"><literal type="number" pos:start="879:34" pos:end="879:34">1</literal></expr>]</index></name> <operator pos:start="879:37" pos:end="879:37">=</operator> <name pos:start="879:39" pos:end="879:44"><name pos:start="879:39" pos:end="879:41">nnz</name><index pos:start="879:42" pos:end="879:44">[<expr pos:start="879:43" pos:end="879:43"><literal type="number" pos:start="879:43" pos:end="879:43">8</literal></expr>]</index></name> <operator pos:start="879:46" pos:end="879:46">=</operator> <name pos:start="879:48" pos:end="879:53"><name pos:start="879:48" pos:end="879:50">nnz</name><index pos:start="879:51" pos:end="879:53">[<expr pos:start="879:52" pos:end="879:52"><literal type="number" pos:start="879:52" pos:end="879:52">9</literal></expr>]</index></name> <operator pos:start="879:55" pos:end="879:55">=</operator> <literal type="number" pos:start="879:57" pos:end="879:57">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="889:9" pos:end="903:9"><if pos:start="889:9" pos:end="903:9">if<condition pos:start="889:11" pos:end="889:22">( <expr pos:start="889:13" pos:end="889:20"><name pos:start="889:13" pos:end="889:15">cbp</name><operator pos:start="889:16" pos:end="889:16">&amp;</operator><literal type="number" pos:start="889:17" pos:end="889:20">0x30</literal></expr> )</condition><block pos:start="889:23" pos:end="903:9">{<block_content pos:start="891:13" pos:end="901:13">

            <decl_stmt pos:start="891:13" pos:end="891:18"><decl pos:start="891:13" pos:end="891:17"><type pos:start="891:13" pos:end="891:15"><name pos:start="891:13" pos:end="891:15">int</name></type> <name pos:start="891:17" pos:end="891:17">c</name></decl>;</decl_stmt>

            <for pos:start="893:13" pos:end="901:13">for<control pos:start="893:16" pos:end="893:36">( <init pos:start="893:18" pos:end="893:23"><expr pos:start="893:18" pos:end="893:22"><name pos:start="893:18" pos:end="893:18">c</name> <operator pos:start="893:20" pos:end="893:20">=</operator> <literal type="number" pos:start="893:22" pos:end="893:22">0</literal></expr>;</init> <condition pos:start="893:25" pos:end="893:30"><expr pos:start="893:25" pos:end="893:29"><name pos:start="893:25" pos:end="893:25">c</name> <operator pos:start="893:27" pos:end="893:27">&lt;</operator> <literal type="number" pos:start="893:29" pos:end="893:29">2</literal></expr>;</condition> <incr pos:start="893:32" pos:end="893:34"><expr pos:start="893:32" pos:end="893:34"><name pos:start="893:32" pos:end="893:32">c</name><operator pos:start="893:33" pos:end="893:34">++</operator></expr></incr> )</control> <block pos:start="893:38" pos:end="901:13">{<block_content pos:start="897:17" pos:end="899:30">

                <comment type="line" pos:start="895:17" pos:end="895:71">//av_log( s-&gt;avctx, AV_LOG_ERROR, "INTRA C%d-DC\n",c );</comment>

                <if_stmt pos:start="897:17" pos:end="899:30"><if pos:start="897:17" pos:end="899:30">if<condition pos:start="897:19" pos:end="897:102">( <expr pos:start="897:21" pos:end="897:101"><call pos:start="897:21" pos:end="897:97"><name pos:start="897:21" pos:end="897:41">decode_cabac_residual</name><argument_list pos:start="897:42" pos:end="897:97">(<argument pos:start="897:43" pos:end="897:43"><expr pos:start="897:43" pos:end="897:43"><name pos:start="897:43" pos:end="897:43">h</name></expr></argument>, <argument pos:start="897:46" pos:end="897:65"><expr pos:start="897:46" pos:end="897:65"><name pos:start="897:46" pos:end="897:50"><name pos:start="897:46" pos:end="897:46">h</name><operator pos:start="897:47" pos:end="897:48">-&gt;</operator><name pos:start="897:49" pos:end="897:50">mb</name></name> <operator pos:start="897:52" pos:end="897:52">+</operator> <literal type="number" pos:start="897:54" pos:end="897:58">256</literal> <operator pos:start="897:58" pos:end="897:58">+</operator> <literal type="number" pos:start="897:60" pos:end="897:61">16</literal><operator pos:start="897:62" pos:end="897:62">*</operator><literal type="number" pos:start="897:63" pos:end="897:63">4</literal><operator pos:start="897:64" pos:end="897:64">*</operator><name pos:start="897:65" pos:end="897:65">c</name></expr></argument>, <argument pos:start="897:68" pos:end="897:68"><expr pos:start="897:68" pos:end="897:68"><literal type="number" pos:start="897:68" pos:end="897:68">3</literal></expr></argument>, <argument pos:start="897:71" pos:end="897:71"><expr pos:start="897:71" pos:end="897:71"><name pos:start="897:71" pos:end="897:71">c</name></expr></argument>, <argument pos:start="897:74" pos:end="897:87"><expr pos:start="897:74" pos:end="897:87"><name pos:start="897:74" pos:end="897:87">chroma_dc_scan</name></expr></argument>, <argument pos:start="897:90" pos:end="897:93"><expr pos:start="897:90" pos:end="897:93"><name pos:start="897:90" pos:end="897:93">NULL</name></expr></argument>, <argument pos:start="897:96" pos:end="897:96"><expr pos:start="897:96" pos:end="897:96"><literal type="number" pos:start="897:96" pos:end="897:96">4</literal></expr></argument>)</argument_list></call> <operator pos:start="897:99" pos:end="897:99">&lt;</operator> <literal type="number" pos:start="897:101" pos:end="897:101">0</literal></expr>)</condition><block type="pseudo" pos:start="899:21" pos:end="899:30"><block_content pos:start="899:21" pos:end="899:30">

                    <return pos:start="899:21" pos:end="899:30">return <expr pos:start="899:28" pos:end="899:29"><operator pos:start="899:28" pos:end="899:28">-</operator><literal type="number" pos:start="899:29" pos:end="899:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="907:9" pos:end="935:9"><if pos:start="907:9" pos:end="927:9">if<condition pos:start="907:11" pos:end="907:22">( <expr pos:start="907:13" pos:end="907:20"><name pos:start="907:13" pos:end="907:15">cbp</name><operator pos:start="907:16" pos:end="907:16">&amp;</operator><literal type="number" pos:start="907:17" pos:end="907:20">0x20</literal></expr> )</condition> <block pos:start="907:24" pos:end="927:9">{<block_content pos:start="909:13" pos:end="925:13">

            <decl_stmt pos:start="909:13" pos:end="909:21"><decl pos:start="909:13" pos:end="909:17"><type pos:start="909:13" pos:end="909:15"><name pos:start="909:13" pos:end="909:15">int</name></type> <name pos:start="909:17" pos:end="909:17">c</name></decl>, <decl pos:start="909:20" pos:end="909:20"><type ref="prev" pos:start="909:13" pos:end="909:15"/><name pos:start="909:20" pos:end="909:20">i</name></decl>;</decl_stmt>

            <for pos:start="911:13" pos:end="925:13">for<control pos:start="911:16" pos:end="911:36">( <init pos:start="911:18" pos:end="911:23"><expr pos:start="911:18" pos:end="911:22"><name pos:start="911:18" pos:end="911:18">c</name> <operator pos:start="911:20" pos:end="911:20">=</operator> <literal type="number" pos:start="911:22" pos:end="911:22">0</literal></expr>;</init> <condition pos:start="911:25" pos:end="911:30"><expr pos:start="911:25" pos:end="911:29"><name pos:start="911:25" pos:end="911:25">c</name> <operator pos:start="911:27" pos:end="911:27">&lt;</operator> <literal type="number" pos:start="911:29" pos:end="911:29">2</literal></expr>;</condition> <incr pos:start="911:32" pos:end="911:34"><expr pos:start="911:32" pos:end="911:34"><name pos:start="911:32" pos:end="911:32">c</name><operator pos:start="911:33" pos:end="911:34">++</operator></expr></incr> )</control> <block pos:start="911:38" pos:end="925:13">{<block_content pos:start="913:17" pos:end="923:17">

                <for pos:start="913:17" pos:end="923:17">for<control pos:start="913:20" pos:end="913:40">( <init pos:start="913:22" pos:end="913:27"><expr pos:start="913:22" pos:end="913:26"><name pos:start="913:22" pos:end="913:22">i</name> <operator pos:start="913:24" pos:end="913:24">=</operator> <literal type="number" pos:start="913:26" pos:end="913:26">0</literal></expr>;</init> <condition pos:start="913:29" pos:end="913:34"><expr pos:start="913:29" pos:end="913:33"><name pos:start="913:29" pos:end="913:29">i</name> <operator pos:start="913:31" pos:end="913:31">&lt;</operator> <literal type="number" pos:start="913:33" pos:end="913:33">4</literal></expr>;</condition> <incr pos:start="913:36" pos:end="913:38"><expr pos:start="913:36" pos:end="913:38"><name pos:start="913:36" pos:end="913:36">i</name><operator pos:start="913:37" pos:end="913:38">++</operator></expr></incr> )</control> <block pos:start="913:42" pos:end="923:17">{<block_content pos:start="915:21" pos:end="921:34">

                    <decl_stmt pos:start="915:21" pos:end="915:53"><decl pos:start="915:21" pos:end="915:52"><type pos:start="915:21" pos:end="915:29"><specifier pos:start="915:21" pos:end="915:25">const</specifier> <name pos:start="915:27" pos:end="915:29">int</name></type> <name pos:start="915:31" pos:end="915:35">index</name> <init pos:start="915:37" pos:end="915:52">= <expr pos:start="915:39" pos:end="915:52"><literal type="number" pos:start="915:39" pos:end="915:42">16</literal> <operator pos:start="915:42" pos:end="915:42">+</operator> <literal type="number" pos:start="915:44" pos:end="915:44">4</literal> <operator pos:start="915:46" pos:end="915:46">*</operator> <name pos:start="915:48" pos:end="915:48">c</name> <operator pos:start="915:50" pos:end="915:50">+</operator> <name pos:start="915:52" pos:end="915:52">i</name></expr></init></decl>;</decl_stmt>

                    <comment type="line" pos:start="917:21" pos:end="917:90">//av_log( s-&gt;avctx, AV_LOG_ERROR, "INTRA C%d-AC %d\n",c, index - 16 );</comment>

                    <if_stmt pos:start="919:21" pos:end="921:34"><if pos:start="919:21" pos:end="921:34">if<condition pos:start="919:23" pos:end="919:166">( <expr pos:start="919:25" pos:end="919:165"><call pos:start="919:25" pos:end="919:161"><name pos:start="919:25" pos:end="919:45">decode_cabac_residual</name><argument_list pos:start="919:46" pos:end="919:161">(<argument pos:start="919:47" pos:end="919:47"><expr pos:start="919:47" pos:end="919:47"><name pos:start="919:47" pos:end="919:47">h</name></expr></argument>, <argument pos:start="919:50" pos:end="919:65"><expr pos:start="919:50" pos:end="919:65"><name pos:start="919:50" pos:end="919:54"><name pos:start="919:50" pos:end="919:50">h</name><operator pos:start="919:51" pos:end="919:52">-&gt;</operator><name pos:start="919:53" pos:end="919:54">mb</name></name> <operator pos:start="919:56" pos:end="919:56">+</operator> <literal type="number" pos:start="919:58" pos:end="919:59">16</literal><operator pos:start="919:60" pos:end="919:60">*</operator><name pos:start="919:61" pos:end="919:65">index</name></expr></argument>, <argument pos:start="919:68" pos:end="919:68"><expr pos:start="919:68" pos:end="919:68"><literal type="number" pos:start="919:68" pos:end="919:68">4</literal></expr></argument>, <argument pos:start="919:71" pos:end="919:80"><expr pos:start="919:71" pos:end="919:80"><name pos:start="919:71" pos:end="919:75">index</name> <operator pos:start="919:77" pos:end="919:77">-</operator> <literal type="number" pos:start="919:79" pos:end="919:80">16</literal></expr></argument>, <argument pos:start="919:83" pos:end="919:90"><expr pos:start="919:83" pos:end="919:90"><name pos:start="919:83" pos:end="919:86">scan</name> <operator pos:start="919:88" pos:end="919:88">+</operator> <literal type="number" pos:start="919:90" pos:end="919:90">1</literal></expr></argument>, <argument pos:start="919:93" pos:end="919:156"><expr pos:start="919:93" pos:end="919:156"><name pos:start="919:93" pos:end="919:156"><name pos:start="919:93" pos:end="919:93">h</name><operator pos:start="919:94" pos:end="919:95">-&gt;</operator><name pos:start="919:96" pos:end="919:109">dequant4_coeff</name><index pos:start="919:110" pos:end="919:142">[<expr pos:start="919:111" pos:end="919:141"><name pos:start="919:111" pos:end="919:111">c</name><operator pos:start="919:112" pos:end="919:112">+</operator><literal type="number" pos:start="919:113" pos:end="919:114">1</literal><operator pos:start="919:114" pos:end="919:114">+</operator><operator pos:start="919:115" pos:end="919:115">(</operator><ternary pos:start="919:116" pos:end="919:140"><condition pos:start="919:116" pos:end="919:136"><expr pos:start="919:116" pos:end="919:134"><call pos:start="919:116" pos:end="919:134"><name pos:start="919:116" pos:end="919:123">IS_INTRA</name><argument_list pos:start="919:124" pos:end="919:134">( <argument pos:start="919:126" pos:end="919:132"><expr pos:start="919:126" pos:end="919:132"><name pos:start="919:126" pos:end="919:132">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="919:138" pos:end="919:138"> <expr pos:start="919:138" pos:end="919:138"><literal type="number" pos:start="919:138" pos:end="919:138">0</literal></expr></then><else pos:start="919:139" pos:end="919:140">:<expr pos:start="919:140" pos:end="919:140"><literal type="number" pos:start="919:140" pos:end="919:140">3</literal></expr></else></ternary><operator pos:start="919:141" pos:end="919:141">)</operator></expr>]</index><index pos:start="919:143" pos:end="919:156">[<expr pos:start="919:144" pos:end="919:155"><name pos:start="919:144" pos:end="919:155"><name pos:start="919:144" pos:end="919:144">h</name><operator pos:start="919:145" pos:end="919:146">-&gt;</operator><name pos:start="919:147" pos:end="919:155">chroma_qp</name></name></expr>]</index></name></expr></argument>, <argument pos:start="919:159" pos:end="919:160"><expr pos:start="919:159" pos:end="919:160"><literal type="number" pos:start="919:159" pos:end="919:160">15</literal></expr></argument>)</argument_list></call> <operator pos:start="919:163" pos:end="919:163">&lt;</operator> <literal type="number" pos:start="919:165" pos:end="919:165">0</literal></expr>)</condition><block type="pseudo" pos:start="921:25" pos:end="921:34"><block_content pos:start="921:25" pos:end="921:34">

                        <return pos:start="921:25" pos:end="921:34">return <expr pos:start="921:32" pos:end="921:33"><operator pos:start="921:32" pos:end="921:32">-</operator><literal type="number" pos:start="921:33" pos:end="921:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="927:11" pos:end="935:9">else <block pos:start="927:16" pos:end="935:9">{<block_content pos:start="929:13" pos:end="933:96">

            <decl_stmt pos:start="929:13" pos:end="929:61"><decl pos:start="929:13" pos:end="929:60"><type pos:start="929:13" pos:end="929:27"><name pos:start="929:13" pos:end="929:19">uint8_t</name> <modifier pos:start="929:21" pos:end="929:21">*</modifier> <specifier pos:start="929:23" pos:end="929:27">const</specifier></type> <name pos:start="929:29" pos:end="929:31">nnz</name><init pos:start="929:32" pos:end="929:60">= <expr pos:start="929:34" pos:end="929:60"><operator pos:start="929:34" pos:end="929:34">&amp;</operator><name pos:start="929:35" pos:end="929:60"><name pos:start="929:35" pos:end="929:35">h</name><operator pos:start="929:36" pos:end="929:37">-&gt;</operator><name pos:start="929:38" pos:end="929:57">non_zero_count_cache</name><index pos:start="929:58" pos:end="929:60">[<expr pos:start="929:59" pos:end="929:59"><literal type="number" pos:start="929:59" pos:end="929:59">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="931:13" pos:end="933:96"><expr pos:start="931:13" pos:end="933:95"><name pos:start="931:13" pos:end="931:30"><name pos:start="931:13" pos:end="931:15">nnz</name><index pos:start="931:16" pos:end="931:30">[ <expr pos:start="931:18" pos:end="931:28"><name pos:start="931:18" pos:end="931:26"><name pos:start="931:18" pos:end="931:22">scan8</name><index pos:start="931:23" pos:end="931:26">[<expr pos:start="931:24" pos:end="931:25"><literal type="number" pos:start="931:24" pos:end="931:25">16</literal></expr>]</index></name><operator pos:start="931:27" pos:end="931:27">+</operator><literal type="number" pos:start="931:28" pos:end="931:28">0</literal></expr> ]</index></name> <operator pos:start="931:32" pos:end="931:32">=</operator> <name pos:start="931:34" pos:end="931:51"><name pos:start="931:34" pos:end="931:36">nnz</name><index pos:start="931:37" pos:end="931:51">[ <expr pos:start="931:39" pos:end="931:49"><name pos:start="931:39" pos:end="931:47"><name pos:start="931:39" pos:end="931:43">scan8</name><index pos:start="931:44" pos:end="931:47">[<expr pos:start="931:45" pos:end="931:46"><literal type="number" pos:start="931:45" pos:end="931:46">16</literal></expr>]</index></name><operator pos:start="931:48" pos:end="931:48">+</operator><literal type="number" pos:start="931:49" pos:end="931:49">1</literal></expr> ]</index></name> <operator pos:start="931:53" pos:end="931:53">=</operator><name pos:start="931:54" pos:end="931:71"><name pos:start="931:54" pos:end="931:56">nnz</name><index pos:start="931:57" pos:end="931:71">[ <expr pos:start="931:59" pos:end="931:69"><name pos:start="931:59" pos:end="931:67"><name pos:start="931:59" pos:end="931:63">scan8</name><index pos:start="931:64" pos:end="931:67">[<expr pos:start="931:65" pos:end="931:66"><literal type="number" pos:start="931:65" pos:end="931:66">16</literal></expr>]</index></name><operator pos:start="931:68" pos:end="931:68">+</operator><literal type="number" pos:start="931:69" pos:end="931:69">8</literal></expr> ]</index></name> <operator pos:start="931:73" pos:end="931:73">=</operator><name pos:start="931:74" pos:end="931:91"><name pos:start="931:74" pos:end="931:76">nnz</name><index pos:start="931:77" pos:end="931:91">[ <expr pos:start="931:79" pos:end="931:89"><name pos:start="931:79" pos:end="931:87"><name pos:start="931:79" pos:end="931:83">scan8</name><index pos:start="931:84" pos:end="931:87">[<expr pos:start="931:85" pos:end="931:86"><literal type="number" pos:start="931:85" pos:end="931:86">16</literal></expr>]</index></name><operator pos:start="931:88" pos:end="931:88">+</operator><literal type="number" pos:start="931:89" pos:end="931:89">9</literal></expr> ]</index></name> <operator pos:start="931:93" pos:end="931:93">=</operator>

            <name pos:start="933:13" pos:end="933:30"><name pos:start="933:13" pos:end="933:15">nnz</name><index pos:start="933:16" pos:end="933:30">[ <expr pos:start="933:18" pos:end="933:28"><name pos:start="933:18" pos:end="933:26"><name pos:start="933:18" pos:end="933:22">scan8</name><index pos:start="933:23" pos:end="933:26">[<expr pos:start="933:24" pos:end="933:25"><literal type="number" pos:start="933:24" pos:end="933:25">20</literal></expr>]</index></name><operator pos:start="933:27" pos:end="933:27">+</operator><literal type="number" pos:start="933:28" pos:end="933:28">0</literal></expr> ]</index></name> <operator pos:start="933:32" pos:end="933:32">=</operator> <name pos:start="933:34" pos:end="933:51"><name pos:start="933:34" pos:end="933:36">nnz</name><index pos:start="933:37" pos:end="933:51">[ <expr pos:start="933:39" pos:end="933:49"><name pos:start="933:39" pos:end="933:47"><name pos:start="933:39" pos:end="933:43">scan8</name><index pos:start="933:44" pos:end="933:47">[<expr pos:start="933:45" pos:end="933:46"><literal type="number" pos:start="933:45" pos:end="933:46">20</literal></expr>]</index></name><operator pos:start="933:48" pos:end="933:48">+</operator><literal type="number" pos:start="933:49" pos:end="933:49">1</literal></expr> ]</index></name> <operator pos:start="933:53" pos:end="933:53">=</operator><name pos:start="933:54" pos:end="933:71"><name pos:start="933:54" pos:end="933:56">nnz</name><index pos:start="933:57" pos:end="933:71">[ <expr pos:start="933:59" pos:end="933:69"><name pos:start="933:59" pos:end="933:67"><name pos:start="933:59" pos:end="933:63">scan8</name><index pos:start="933:64" pos:end="933:67">[<expr pos:start="933:65" pos:end="933:66"><literal type="number" pos:start="933:65" pos:end="933:66">20</literal></expr>]</index></name><operator pos:start="933:68" pos:end="933:68">+</operator><literal type="number" pos:start="933:69" pos:end="933:69">8</literal></expr> ]</index></name> <operator pos:start="933:73" pos:end="933:73">=</operator><name pos:start="933:74" pos:end="933:91"><name pos:start="933:74" pos:end="933:76">nnz</name><index pos:start="933:77" pos:end="933:91">[ <expr pos:start="933:79" pos:end="933:89"><name pos:start="933:79" pos:end="933:87"><name pos:start="933:79" pos:end="933:83">scan8</name><index pos:start="933:84" pos:end="933:87">[<expr pos:start="933:85" pos:end="933:86"><literal type="number" pos:start="933:85" pos:end="933:86">20</literal></expr>]</index></name><operator pos:start="933:88" pos:end="933:88">+</operator><literal type="number" pos:start="933:89" pos:end="933:89">9</literal></expr> ]</index></name> <operator pos:start="933:93" pos:end="933:93">=</operator> <literal type="number" pos:start="933:95" pos:end="933:95">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="937:7" pos:end="949:5">else <block pos:start="937:12" pos:end="949:5">{<block_content pos:start="939:9" pos:end="947:32">

        <decl_stmt pos:start="939:9" pos:end="939:57"><decl pos:start="939:9" pos:end="939:56"><type pos:start="939:9" pos:end="939:23"><name pos:start="939:9" pos:end="939:15">uint8_t</name> <modifier pos:start="939:17" pos:end="939:17">*</modifier> <specifier pos:start="939:19" pos:end="939:23">const</specifier></type> <name pos:start="939:25" pos:end="939:27">nnz</name><init pos:start="939:28" pos:end="939:56">= <expr pos:start="939:30" pos:end="939:56"><operator pos:start="939:30" pos:end="939:30">&amp;</operator><name pos:start="939:31" pos:end="939:56"><name pos:start="939:31" pos:end="939:31">h</name><operator pos:start="939:32" pos:end="939:33">-&gt;</operator><name pos:start="939:34" pos:end="939:53">non_zero_count_cache</name><index pos:start="939:54" pos:end="939:56">[<expr pos:start="939:55" pos:end="939:55"><literal type="number" pos:start="939:55" pos:end="939:55">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="941:9" pos:end="941:54"><expr pos:start="941:9" pos:end="941:53"><call pos:start="941:9" pos:end="941:53"><name pos:start="941:9" pos:end="941:22">fill_rectangle</name><argument_list pos:start="941:23" pos:end="941:53">(<argument pos:start="941:24" pos:end="941:37"><expr pos:start="941:24" pos:end="941:37"><operator pos:start="941:24" pos:end="941:24">&amp;</operator><name pos:start="941:25" pos:end="941:37"><name pos:start="941:25" pos:end="941:27">nnz</name><index pos:start="941:28" pos:end="941:37">[<expr pos:start="941:29" pos:end="941:36"><name pos:start="941:29" pos:end="941:36"><name pos:start="941:29" pos:end="941:33">scan8</name><index pos:start="941:34" pos:end="941:36">[<expr pos:start="941:35" pos:end="941:35"><literal type="number" pos:start="941:35" pos:end="941:35">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="941:40" pos:end="941:40"><expr pos:start="941:40" pos:end="941:40"><literal type="number" pos:start="941:40" pos:end="941:40">4</literal></expr></argument>, <argument pos:start="941:43" pos:end="941:43"><expr pos:start="941:43" pos:end="941:43"><literal type="number" pos:start="941:43" pos:end="941:43">4</literal></expr></argument>, <argument pos:start="941:46" pos:end="941:46"><expr pos:start="941:46" pos:end="941:46"><literal type="number" pos:start="941:46" pos:end="941:46">8</literal></expr></argument>, <argument pos:start="941:49" pos:end="941:49"><expr pos:start="941:49" pos:end="941:49"><literal type="number" pos:start="941:49" pos:end="941:49">0</literal></expr></argument>, <argument pos:start="941:52" pos:end="941:52"><expr pos:start="941:52" pos:end="941:52"><literal type="number" pos:start="941:52" pos:end="941:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="943:9" pos:end="945:92"><expr pos:start="943:9" pos:end="945:91"><name pos:start="943:9" pos:end="943:26"><name pos:start="943:9" pos:end="943:11">nnz</name><index pos:start="943:12" pos:end="943:26">[ <expr pos:start="943:14" pos:end="943:24"><name pos:start="943:14" pos:end="943:22"><name pos:start="943:14" pos:end="943:18">scan8</name><index pos:start="943:19" pos:end="943:22">[<expr pos:start="943:20" pos:end="943:21"><literal type="number" pos:start="943:20" pos:end="943:21">16</literal></expr>]</index></name><operator pos:start="943:23" pos:end="943:23">+</operator><literal type="number" pos:start="943:24" pos:end="943:24">0</literal></expr> ]</index></name> <operator pos:start="943:28" pos:end="943:28">=</operator> <name pos:start="943:30" pos:end="943:47"><name pos:start="943:30" pos:end="943:32">nnz</name><index pos:start="943:33" pos:end="943:47">[ <expr pos:start="943:35" pos:end="943:45"><name pos:start="943:35" pos:end="943:43"><name pos:start="943:35" pos:end="943:39">scan8</name><index pos:start="943:40" pos:end="943:43">[<expr pos:start="943:41" pos:end="943:42"><literal type="number" pos:start="943:41" pos:end="943:42">16</literal></expr>]</index></name><operator pos:start="943:44" pos:end="943:44">+</operator><literal type="number" pos:start="943:45" pos:end="943:45">1</literal></expr> ]</index></name> <operator pos:start="943:49" pos:end="943:49">=</operator><name pos:start="943:50" pos:end="943:67"><name pos:start="943:50" pos:end="943:52">nnz</name><index pos:start="943:53" pos:end="943:67">[ <expr pos:start="943:55" pos:end="943:65"><name pos:start="943:55" pos:end="943:63"><name pos:start="943:55" pos:end="943:59">scan8</name><index pos:start="943:60" pos:end="943:63">[<expr pos:start="943:61" pos:end="943:62"><literal type="number" pos:start="943:61" pos:end="943:62">16</literal></expr>]</index></name><operator pos:start="943:64" pos:end="943:64">+</operator><literal type="number" pos:start="943:65" pos:end="943:65">8</literal></expr> ]</index></name> <operator pos:start="943:69" pos:end="943:69">=</operator><name pos:start="943:70" pos:end="943:87"><name pos:start="943:70" pos:end="943:72">nnz</name><index pos:start="943:73" pos:end="943:87">[ <expr pos:start="943:75" pos:end="943:85"><name pos:start="943:75" pos:end="943:83"><name pos:start="943:75" pos:end="943:79">scan8</name><index pos:start="943:80" pos:end="943:83">[<expr pos:start="943:81" pos:end="943:82"><literal type="number" pos:start="943:81" pos:end="943:82">16</literal></expr>]</index></name><operator pos:start="943:84" pos:end="943:84">+</operator><literal type="number" pos:start="943:85" pos:end="943:85">9</literal></expr> ]</index></name> <operator pos:start="943:89" pos:end="943:89">=</operator>

        <name pos:start="945:9" pos:end="945:26"><name pos:start="945:9" pos:end="945:11">nnz</name><index pos:start="945:12" pos:end="945:26">[ <expr pos:start="945:14" pos:end="945:24"><name pos:start="945:14" pos:end="945:22"><name pos:start="945:14" pos:end="945:18">scan8</name><index pos:start="945:19" pos:end="945:22">[<expr pos:start="945:20" pos:end="945:21"><literal type="number" pos:start="945:20" pos:end="945:21">20</literal></expr>]</index></name><operator pos:start="945:23" pos:end="945:23">+</operator><literal type="number" pos:start="945:24" pos:end="945:24">0</literal></expr> ]</index></name> <operator pos:start="945:28" pos:end="945:28">=</operator> <name pos:start="945:30" pos:end="945:47"><name pos:start="945:30" pos:end="945:32">nnz</name><index pos:start="945:33" pos:end="945:47">[ <expr pos:start="945:35" pos:end="945:45"><name pos:start="945:35" pos:end="945:43"><name pos:start="945:35" pos:end="945:39">scan8</name><index pos:start="945:40" pos:end="945:43">[<expr pos:start="945:41" pos:end="945:42"><literal type="number" pos:start="945:41" pos:end="945:42">20</literal></expr>]</index></name><operator pos:start="945:44" pos:end="945:44">+</operator><literal type="number" pos:start="945:45" pos:end="945:45">1</literal></expr> ]</index></name> <operator pos:start="945:49" pos:end="945:49">=</operator><name pos:start="945:50" pos:end="945:67"><name pos:start="945:50" pos:end="945:52">nnz</name><index pos:start="945:53" pos:end="945:67">[ <expr pos:start="945:55" pos:end="945:65"><name pos:start="945:55" pos:end="945:63"><name pos:start="945:55" pos:end="945:59">scan8</name><index pos:start="945:60" pos:end="945:63">[<expr pos:start="945:61" pos:end="945:62"><literal type="number" pos:start="945:61" pos:end="945:62">20</literal></expr>]</index></name><operator pos:start="945:64" pos:end="945:64">+</operator><literal type="number" pos:start="945:65" pos:end="945:65">8</literal></expr> ]</index></name> <operator pos:start="945:69" pos:end="945:69">=</operator><name pos:start="945:70" pos:end="945:87"><name pos:start="945:70" pos:end="945:72">nnz</name><index pos:start="945:73" pos:end="945:87">[ <expr pos:start="945:75" pos:end="945:85"><name pos:start="945:75" pos:end="945:83"><name pos:start="945:75" pos:end="945:79">scan8</name><index pos:start="945:80" pos:end="945:83">[<expr pos:start="945:81" pos:end="945:82"><literal type="number" pos:start="945:81" pos:end="945:82">20</literal></expr>]</index></name><operator pos:start="945:84" pos:end="945:84">+</operator><literal type="number" pos:start="945:85" pos:end="945:85">9</literal></expr> ]</index></name> <operator pos:start="945:89" pos:end="945:89">=</operator> <literal type="number" pos:start="945:91" pos:end="945:91">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="947:9" pos:end="947:32"><expr pos:start="947:9" pos:end="947:31"><name pos:start="947:9" pos:end="947:27"><name pos:start="947:9" pos:end="947:9">h</name><operator pos:start="947:10" pos:end="947:11">-&gt;</operator><name pos:start="947:12" pos:end="947:27">last_qscale_diff</name></name> <operator pos:start="947:29" pos:end="947:29">=</operator> <literal type="number" pos:start="947:31" pos:end="947:31">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="953:5" pos:end="953:54"><expr pos:start="953:5" pos:end="953:53"><name pos:start="953:5" pos:end="953:42"><name pos:start="953:5" pos:end="953:5">s</name><operator pos:start="953:6" pos:end="953:7">-&gt;</operator><name pos:start="953:8" pos:end="953:22">current_picture</name><operator pos:start="953:23" pos:end="953:23">.</operator><name pos:start="953:24" pos:end="953:35">qscale_table</name><index pos:start="953:36" pos:end="953:42">[<expr pos:start="953:37" pos:end="953:41"><name pos:start="953:37" pos:end="953:41">mb_xy</name></expr>]</index></name><operator pos:start="953:43" pos:end="953:43">=</operator> <name pos:start="953:45" pos:end="953:53"><name pos:start="953:45" pos:end="953:45">s</name><operator pos:start="953:46" pos:end="953:47">-&gt;</operator><name pos:start="953:48" pos:end="953:53">qscale</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="955:5" pos:end="955:33"><expr pos:start="955:5" pos:end="955:32"><call pos:start="955:5" pos:end="955:32"><name pos:start="955:5" pos:end="955:29">write_back_non_zero_count</name><argument_list pos:start="955:30" pos:end="955:32">(<argument pos:start="955:31" pos:end="955:31"><expr pos:start="955:31" pos:end="955:31"><name pos:start="955:31" pos:end="955:31">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="959:5" pos:end="965:5"><if pos:start="959:5" pos:end="965:5">if<condition pos:start="959:7" pos:end="959:16">(<expr pos:start="959:8" pos:end="959:15"><name pos:start="959:8" pos:end="959:15">MB_MBAFF</name></expr>)</condition><block pos:start="959:17" pos:end="965:5">{<block_content pos:start="961:9" pos:end="963:30">

        <expr_stmt pos:start="961:9" pos:end="961:30"><expr pos:start="961:9" pos:end="961:29"><name pos:start="961:9" pos:end="961:23"><name pos:start="961:9" pos:end="961:9">h</name><operator pos:start="961:10" pos:end="961:11">-&gt;</operator><name pos:start="961:12" pos:end="961:20">ref_count</name><index pos:start="961:21" pos:end="961:23">[<expr pos:start="961:22" pos:end="961:22"><literal type="number" pos:start="961:22" pos:end="961:22">0</literal></expr>]</index></name> <operator pos:start="961:25" pos:end="961:27">&gt;&gt;=</operator> <literal type="number" pos:start="961:29" pos:end="961:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="963:9" pos:end="963:30"><expr pos:start="963:9" pos:end="963:29"><name pos:start="963:9" pos:end="963:23"><name pos:start="963:9" pos:end="963:9">h</name><operator pos:start="963:10" pos:end="963:11">-&gt;</operator><name pos:start="963:12" pos:end="963:20">ref_count</name><index pos:start="963:21" pos:end="963:23">[<expr pos:start="963:22" pos:end="963:22"><literal type="number" pos:start="963:22" pos:end="963:22">1</literal></expr>]</index></name> <operator pos:start="963:25" pos:end="963:27">&gt;&gt;=</operator> <literal type="number" pos:start="963:29" pos:end="963:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="969:5" pos:end="969:13">return <expr pos:start="969:12" pos:end="969:12"><literal type="number" pos:start="969:12" pos:end="969:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
