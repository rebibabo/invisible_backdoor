<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6588.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">tosa_dac_send</name><parameter_list pos:start="1:25" pos:end="1:53">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:33">I2CSlave</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">i2c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:47">uint8_t</name></type> <name pos:start="1:49" pos:end="1:52">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="5:5" pos:end="35:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">TosaDACState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:35">= <expr pos:start="5:23" pos:end="5:35"><call pos:start="5:23" pos:end="5:35"><name pos:start="5:23" pos:end="5:30">TOSA_DAC</name><argument_list pos:start="5:31" pos:end="5:35">(<argument pos:start="5:32" pos:end="5:34"><expr pos:start="5:32" pos:end="5:34"><name pos:start="5:32" pos:end="5:34">i2c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:26"><expr pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:5">s</name><operator pos:start="9:6" pos:end="9:7">-&gt;</operator><name pos:start="9:8" pos:end="9:10">buf</name><index pos:start="9:11" pos:end="9:18">[<expr pos:start="9:12" pos:end="9:17"><name pos:start="9:12" pos:end="9:17"><name pos:start="9:12" pos:end="9:12">s</name><operator pos:start="9:13" pos:end="9:14">-&gt;</operator><name pos:start="9:15" pos:end="9:17">len</name></name></expr>]</index></name> <operator pos:start="9:20" pos:end="9:20">=</operator> <name pos:start="9:22" pos:end="9:25">data</name></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="21:5"><if pos:start="11:5" pos:end="21:5">if <condition pos:start="11:8" pos:end="11:22">(<expr pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:14">len</name></name> <operator pos:start="11:16" pos:end="11:17">++</operator> <operator pos:start="11:19" pos:end="11:19">&gt;</operator> <literal type="number" pos:start="11:21" pos:end="11:21">2</literal></expr>)</condition> <block pos:start="11:24" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:17">

<cpp:ifdef pos:start="13:1" pos:end="13:14">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:14">VERBOSE</name></cpp:ifdef>

        <expr_stmt pos:start="15:9" pos:end="18:0"><expr pos:start="15:9" pos:end="15:82"><call pos:start="15:9" pos:end="15:82"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="15:82">(<argument pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">stderr</name></expr></argument>, <argument pos:start="15:25" pos:end="15:59"><expr pos:start="15:25" pos:end="15:59"><literal type="string" pos:start="15:25" pos:end="15:59">"%s: message too long (%i bytes)\n"</literal></expr></argument>, <argument pos:start="15:62" pos:end="15:73"><expr pos:start="15:62" pos:end="15:73"><name pos:start="15:62" pos:end="15:73">__FUNCTION__</name></expr></argument>, <argument pos:start="15:76" pos:end="15:81"><expr pos:start="15:76" pos:end="15:81"><name pos:start="15:76" pos:end="15:81"><name pos:start="15:76" pos:end="15:76">s</name><operator pos:start="15:77" pos:end="15:78">-&gt;</operator><name pos:start="15:79" pos:end="15:81">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:20">(<expr pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:14">len</name></name> <operator pos:start="25:16" pos:end="25:17">==</operator> <literal type="number" pos:start="25:19" pos:end="25:19">2</literal></expr>)</condition> <block pos:start="25:22" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:38">

        <expr_stmt pos:start="27:9" pos:end="29:38"><expr pos:start="27:9" pos:end="29:37"><call pos:start="27:9" pos:end="29:37"><name pos:start="27:9" pos:end="27:15">fprintf</name><argument_list pos:start="27:16" pos:end="29:37">(<argument pos:start="27:17" pos:end="27:22"><expr pos:start="27:17" pos:end="27:22"><name pos:start="27:17" pos:end="27:22">stderr</name></expr></argument>, <argument pos:start="27:25" pos:end="27:56"><expr pos:start="27:25" pos:end="27:56"><literal type="string" pos:start="27:25" pos:end="27:56">"dac: channel %d value 0x%02x\n"</literal></expr></argument>,

                <argument pos:start="29:17" pos:end="29:25"><expr pos:start="29:17" pos:end="29:25"><name pos:start="29:17" pos:end="29:25"><name pos:start="29:17" pos:end="29:17">s</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:22">buf</name><index pos:start="29:23" pos:end="29:25">[<expr pos:start="29:24" pos:end="29:24"><literal type="number" pos:start="29:24" pos:end="29:24">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="29:28" pos:end="29:36"><expr pos:start="29:28" pos:end="29:36"><name pos:start="29:28" pos:end="29:36"><name pos:start="29:28" pos:end="29:28">s</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:33">buf</name><index pos:start="29:34" pos:end="29:36">[<expr pos:start="29:35" pos:end="29:35"><literal type="number" pos:start="29:35" pos:end="29:35">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="35:5" pos:end="35:13">return <expr pos:start="35:12" pos:end="35:12"><literal type="number" pos:start="35:12" pos:end="35:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
