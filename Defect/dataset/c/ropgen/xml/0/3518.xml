<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3518.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:15">slirp_init</name><parameter_list pos:start="1:16" pos:end="1:55">(<parameter pos:start="1:17" pos:end="1:30"><decl pos:start="1:17" pos:end="1:30"><type pos:start="1:17" pos:end="1:30"><name pos:start="1:17" pos:end="1:19">int</name></type> <name pos:start="1:21" pos:end="1:30">restricted</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:54"><decl pos:start="1:33" pos:end="1:54"><type pos:start="1:33" pos:end="1:54"><specifier pos:start="1:33" pos:end="1:37">const</specifier> <name pos:start="1:39" pos:end="1:42">char</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:54">special_ip</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="11:5" pos:end="71:77">

    <comment type="line" pos:start="5:5" pos:end="5:54">//    debug_init("/tmp/slirp.log", DEBUG_DEFAULT);</comment>



<cpp:ifdef pos:start="9:1" pos:end="9:13">#<cpp:directive pos:start="9:2" pos:end="9:6">ifdef</cpp:directive> <name pos:start="9:8" pos:end="9:13">_WIN32</name></cpp:ifdef>

    <block pos:start="11:5" pos:end="22:0">{<block_content pos:start="13:9" pos:end="17:30">

        <decl_stmt pos:start="13:9" pos:end="13:21"><decl pos:start="13:9" pos:end="13:20"><type pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:15">WSADATA</name></type> <name pos:start="13:17" pos:end="13:20">Data</name></decl>;</decl_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:41"><expr pos:start="15:9" pos:end="15:40"><call pos:start="15:9" pos:end="15:40"><name pos:start="15:9" pos:end="15:18">WSAStartup</name><argument_list pos:start="15:19" pos:end="15:40">(<argument pos:start="15:20" pos:end="15:32"><expr pos:start="15:20" pos:end="15:32"><call pos:start="15:20" pos:end="15:32"><name pos:start="15:20" pos:end="15:27">MAKEWORD</name><argument_list pos:start="15:28" pos:end="15:32">(<argument pos:start="15:29" pos:end="15:29"><expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">2</literal></expr></argument>,<argument pos:start="15:31" pos:end="15:31"><expr pos:start="15:31" pos:end="15:31"><literal type="number" pos:start="15:31" pos:end="15:31">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="15:35" pos:end="15:39"><expr pos:start="15:35" pos:end="15:39"><operator pos:start="15:35" pos:end="15:35">&amp;</operator><name pos:start="15:36" pos:end="15:39">Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><call pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:14">atexit</name><argument_list pos:start="17:15" pos:end="17:29">(<argument pos:start="17:16" pos:end="17:28"><expr pos:start="17:16" pos:end="17:28"><name pos:start="17:16" pos:end="17:28">slirp_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="25:5" pos:end="25:16"><expr pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:11">link_up</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <literal type="number" pos:start="25:15" pos:end="25:15">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:32"><expr pos:start="27:5" pos:end="27:31"><name pos:start="27:5" pos:end="27:18">slirp_restrict</name> <operator pos:start="27:20" pos:end="27:20">=</operator> <name pos:start="27:22" pos:end="27:31">restricted</name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:14"><expr pos:start="31:5" pos:end="31:13"><call pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:11">if_init</name><argument_list pos:start="31:12" pos:end="31:13">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:14"><expr pos:start="33:5" pos:end="33:13"><call pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:11">ip_init</name><argument_list pos:start="33:12" pos:end="33:13">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:50">/* Initialise mbufs *after* setting the MTU */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:13"><expr pos:start="39:5" pos:end="39:12"><call pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:10">m_init</name><argument_list pos:start="39:11" pos:end="39:12">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:31">/* set default addresses */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:43"><expr pos:start="45:5" pos:end="45:42"><call pos:start="45:5" pos:end="45:42"><name pos:start="45:5" pos:end="45:13">inet_aton</name><argument_list pos:start="45:14" pos:end="45:42">(<argument pos:start="45:15" pos:end="45:25"><expr pos:start="45:15" pos:end="45:25"><literal type="string" pos:start="45:15" pos:end="45:25">"127.0.0.1"</literal></expr></argument>, <argument pos:start="45:28" pos:end="45:41"><expr pos:start="45:28" pos:end="45:41"><operator pos:start="45:28" pos:end="45:28">&amp;</operator><name pos:start="45:29" pos:end="45:41">loopback_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:36">(<expr pos:start="49:9" pos:end="49:35"><call pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:20">get_dns_addr</name><argument_list pos:start="49:21" pos:end="49:31">(<argument pos:start="49:22" pos:end="49:30"><expr pos:start="49:22" pos:end="49:30"><operator pos:start="49:22" pos:end="49:22">&amp;</operator><name pos:start="49:23" pos:end="49:30">dns_addr</name></expr></argument>)</argument_list></call> <operator pos:start="49:33" pos:end="49:33">&lt;</operator> <literal type="number" pos:start="49:35" pos:end="49:35">0</literal></expr>)</condition> <block pos:start="49:38" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:60">

        <expr_stmt pos:start="51:9" pos:end="51:33"><expr pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:16">dns_addr</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <name pos:start="51:20" pos:end="51:32">loopback_addr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:60"><expr pos:start="53:9" pos:end="53:59"><call pos:start="53:9" pos:end="53:59"><name pos:start="53:9" pos:end="53:15">fprintf</name> <argument_list pos:start="53:17" pos:end="53:59">(<argument pos:start="53:18" pos:end="53:23"><expr pos:start="53:18" pos:end="53:23"><name pos:start="53:18" pos:end="53:23">stderr</name></expr></argument>, <argument pos:start="53:26" pos:end="53:58"><expr pos:start="53:26" pos:end="53:58"><literal type="string" pos:start="53:26" pos:end="53:58">"Warning: No DNS servers found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="61:38"><if pos:start="59:5" pos:end="61:38">if <condition pos:start="59:8" pos:end="59:19">(<expr pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:18">special_ip</name></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:38"><block_content pos:start="61:9" pos:end="61:38">

        <expr_stmt pos:start="61:9" pos:end="61:38"><expr pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:24">slirp_special_ip</name> <operator pos:start="61:26" pos:end="61:26">=</operator> <name pos:start="61:28" pos:end="61:37">special_ip</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:47"><expr pos:start="65:5" pos:end="65:46"><call pos:start="65:5" pos:end="65:46"><name pos:start="65:5" pos:end="65:13">inet_aton</name><argument_list pos:start="65:14" pos:end="65:46">(<argument pos:start="65:15" pos:end="65:30"><expr pos:start="65:15" pos:end="65:30"><name pos:start="65:15" pos:end="65:30">slirp_special_ip</name></expr></argument>, <argument pos:start="65:33" pos:end="65:45"><expr pos:start="65:33" pos:end="65:45"><operator pos:start="65:33" pos:end="65:33">&amp;</operator><name pos:start="65:34" pos:end="65:45">special_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:63"><expr pos:start="67:5" pos:end="67:62"><name pos:start="67:5" pos:end="67:21"><name pos:start="67:5" pos:end="67:14">alias_addr</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:21">s_addr</name></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:43"><name pos:start="67:25" pos:end="67:36">special_addr</name><operator pos:start="67:37" pos:end="67:37">.</operator><name pos:start="67:38" pos:end="67:43">s_addr</name></name> <operator pos:start="67:45" pos:end="67:45">|</operator> <call pos:start="67:47" pos:end="67:62"><name pos:start="67:47" pos:end="67:51">htonl</name><argument_list pos:start="67:52" pos:end="67:62">(<argument pos:start="67:53" pos:end="67:61"><expr pos:start="67:53" pos:end="67:61"><name pos:start="67:53" pos:end="67:61">CTL_ALIAS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:17"><expr pos:start="69:5" pos:end="69:16"><call pos:start="69:5" pos:end="69:16"><name pos:start="69:5" pos:end="69:14">getouraddr</name><argument_list pos:start="69:15" pos:end="69:16">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:77"><expr pos:start="71:5" pos:end="71:76"><call pos:start="71:5" pos:end="71:76"><name pos:start="71:5" pos:end="71:19">register_savevm</name><argument_list pos:start="71:20" pos:end="71:76">(<argument pos:start="71:21" pos:end="71:27"><expr pos:start="71:21" pos:end="71:27"><literal type="string" pos:start="71:21" pos:end="71:27">"slirp"</literal></expr></argument>, <argument pos:start="71:30" pos:end="71:30"><expr pos:start="71:30" pos:end="71:30"><literal type="number" pos:start="71:30" pos:end="71:30">0</literal></expr></argument>, <argument pos:start="71:33" pos:end="71:33"><expr pos:start="71:33" pos:end="71:33"><literal type="number" pos:start="71:33" pos:end="71:33">1</literal></expr></argument>, <argument pos:start="71:36" pos:end="71:51"><expr pos:start="71:36" pos:end="71:51"><name pos:start="71:36" pos:end="71:51">slirp_state_save</name></expr></argument>, <argument pos:start="71:54" pos:end="71:69"><expr pos:start="71:54" pos:end="71:69"><name pos:start="71:54" pos:end="71:69">slirp_state_load</name></expr></argument>, <argument pos:start="71:72" pos:end="71:75"><expr pos:start="71:72" pos:end="71:75"><name pos:start="71:72" pos:end="71:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
