<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21975.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:32"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name><modifier pos:start="1:12" pos:end="1:12">*</modifier> <name pos:start="1:14" pos:end="1:32">attribute_align_arg</name></type> <name pos:start="1:34" pos:end="1:39">worker</name><parameter_list pos:start="1:40" pos:end="1:48">(<parameter pos:start="1:41" pos:end="1:47"><decl pos:start="1:41" pos:end="1:47"><type pos:start="1:41" pos:end="1:46"><name pos:start="1:41" pos:end="1:44">void</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">v</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:5">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">AVCodecContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:25">avctx</name> <init pos:start="5:27" pos:end="5:29">= <expr pos:start="5:29" pos:end="5:29"><name pos:start="5:29" pos:end="5:29">v</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">SliceThreadContext</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">c</name> <init pos:start="7:27" pos:end="7:55">= <expr pos:start="7:29" pos:end="7:55"><name pos:start="7:29" pos:end="7:55"><name pos:start="7:29" pos:end="7:33">avctx</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:43">internal</name><operator pos:start="7:44" pos:end="7:45">-&gt;</operator><name pos:start="7:46" pos:end="7:55">thread_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:25">last_execute</name> <init pos:start="9:27" pos:end="9:29">= <expr pos:start="9:29" pos:end="9:29"><literal type="number" pos:start="9:29" pos:end="9:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">our_job</name> <init pos:start="11:17" pos:end="11:30">= <expr pos:start="11:19" pos:end="11:30"><name pos:start="11:19" pos:end="11:30"><name pos:start="11:19" pos:end="11:19">c</name><operator pos:start="11:20" pos:end="11:21">-&gt;</operator><name pos:start="11:22" pos:end="11:30">job_count</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:20">thread_count</name> <init pos:start="13:22" pos:end="13:42">= <expr pos:start="13:24" pos:end="13:42"><name pos:start="13:24" pos:end="13:42"><name pos:start="13:24" pos:end="13:28">avctx</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:42">thread_count</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">self_id</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:45"><expr pos:start="19:5" pos:end="19:44"><call pos:start="19:5" pos:end="19:44"><name pos:start="19:5" pos:end="19:22">pthread_mutex_lock</name><argument_list pos:start="19:23" pos:end="19:44">(<argument pos:start="19:24" pos:end="19:43"><expr pos:start="19:24" pos:end="19:43"><operator pos:start="19:24" pos:end="19:24">&amp;</operator><name pos:start="19:25" pos:end="19:43"><name pos:start="19:25" pos:end="19:25">c</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:43">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:11">self_id</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:28"><name pos:start="21:15" pos:end="21:15">c</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:28">current_job</name></name><operator pos:start="21:29" pos:end="21:30">++</operator></expr>;</expr_stmt>

    <for pos:start="23:5" pos:end="67:5">for <control pos:start="23:9" pos:end="23:12">(<init pos:start="23:10" pos:end="23:10">;</init><condition pos:start="23:11" pos:end="23:11">;</condition><incr/>)</control><block pos:start="23:13" pos:end="67:5">{<block_content pos:start="25:9" pos:end="65:35">

        <while pos:start="25:9" pos:end="51:9">while <condition pos:start="25:15" pos:end="25:39">(<expr pos:start="25:16" pos:end="25:38"><name pos:start="25:16" pos:end="25:22">our_job</name> <operator pos:start="25:24" pos:end="25:25">&gt;=</operator> <name pos:start="25:27" pos:end="25:38"><name pos:start="25:27" pos:end="25:27">c</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:38">job_count</name></name></expr>)</condition> <block pos:start="25:41" pos:end="51:9">{<block_content pos:start="27:13" pos:end="49:13">

            <if_stmt pos:start="27:13" pos:end="29:55"><if pos:start="27:13" pos:end="29:55">if <condition pos:start="27:16" pos:end="27:62">(<expr pos:start="27:17" pos:end="27:61"><name pos:start="27:17" pos:end="27:30"><name pos:start="27:17" pos:end="27:17">c</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:30">current_job</name></name> <operator pos:start="27:32" pos:end="27:33">==</operator> <name pos:start="27:35" pos:end="27:46">thread_count</name> <operator pos:start="27:48" pos:end="27:48">+</operator> <name pos:start="27:50" pos:end="27:61"><name pos:start="27:50" pos:end="27:50">c</name><operator pos:start="27:51" pos:end="27:52">-&gt;</operator><name pos:start="27:53" pos:end="27:61">job_count</name></name></expr>)</condition><block type="pseudo" pos:start="29:17" pos:end="29:55"><block_content pos:start="29:17" pos:end="29:55">

                <expr_stmt pos:start="29:17" pos:end="29:55"><expr pos:start="29:17" pos:end="29:54"><call pos:start="29:17" pos:end="29:54"><name pos:start="29:17" pos:end="29:35">pthread_cond_signal</name><argument_list pos:start="29:36" pos:end="29:54">(<argument pos:start="29:37" pos:end="29:53"><expr pos:start="29:37" pos:end="29:53"><operator pos:start="29:37" pos:end="29:37">&amp;</operator><name pos:start="29:38" pos:end="29:53"><name pos:start="29:38" pos:end="29:38">c</name><operator pos:start="29:39" pos:end="29:40">-&gt;</operator><name pos:start="29:41" pos:end="29:53">last_job_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <while pos:start="33:13" pos:end="35:78">while <condition pos:start="33:19" pos:end="33:66">(<expr pos:start="33:20" pos:end="33:65"><name pos:start="33:20" pos:end="33:31">last_execute</name> <operator pos:start="33:33" pos:end="33:34">==</operator> <name pos:start="33:36" pos:end="33:53"><name pos:start="33:36" pos:end="33:36">c</name><operator pos:start="33:37" pos:end="33:38">-&gt;</operator><name pos:start="33:39" pos:end="33:53">current_execute</name></name> <operator pos:start="33:55" pos:end="33:56">&amp;&amp;</operator> <operator pos:start="33:58" pos:end="33:58">!</operator><name pos:start="33:59" pos:end="33:65"><name pos:start="33:59" pos:end="33:59">c</name><operator pos:start="33:60" pos:end="33:61">-&gt;</operator><name pos:start="33:62" pos:end="33:65">done</name></name></expr>)</condition><block type="pseudo" pos:start="35:17" pos:end="35:78"><block_content pos:start="35:17" pos:end="35:78">

                <expr_stmt pos:start="35:17" pos:end="35:78"><expr pos:start="35:17" pos:end="35:77"><call pos:start="35:17" pos:end="35:77"><name pos:start="35:17" pos:end="35:33">pthread_cond_wait</name><argument_list pos:start="35:34" pos:end="35:77">(<argument pos:start="35:35" pos:end="35:54"><expr pos:start="35:35" pos:end="35:54"><operator pos:start="35:35" pos:end="35:35">&amp;</operator><name pos:start="35:36" pos:end="35:54"><name pos:start="35:36" pos:end="35:36">c</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:54">current_job_cond</name></name></expr></argument>, <argument pos:start="35:57" pos:end="35:76"><expr pos:start="35:57" pos:end="35:76"><operator pos:start="35:57" pos:end="35:57">&amp;</operator><name pos:start="35:58" pos:end="35:76"><name pos:start="35:58" pos:end="35:58">c</name><operator pos:start="35:59" pos:end="35:60">-&gt;</operator><name pos:start="35:61" pos:end="35:76">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="37:13" pos:end="37:46"><expr pos:start="37:13" pos:end="37:45"><name pos:start="37:13" pos:end="37:24">last_execute</name> <operator pos:start="37:26" pos:end="37:26">=</operator> <name pos:start="37:28" pos:end="37:45"><name pos:start="37:28" pos:end="37:28">c</name><operator pos:start="37:29" pos:end="37:30">-&gt;</operator><name pos:start="37:31" pos:end="37:45">current_execute</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:30"><expr pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:19">our_job</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:29">self_id</name></expr>;</expr_stmt>



            <if_stmt pos:start="43:13" pos:end="49:13"><if pos:start="43:13" pos:end="49:13">if <condition pos:start="43:16" pos:end="43:24">(<expr pos:start="43:17" pos:end="43:23"><name pos:start="43:17" pos:end="43:23"><name pos:start="43:17" pos:end="43:17">c</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:23">done</name></name></expr>)</condition> <block pos:start="43:26" pos:end="49:13">{<block_content pos:start="45:17" pos:end="47:28">

                <expr_stmt pos:start="45:17" pos:end="45:59"><expr pos:start="45:17" pos:end="45:58"><call pos:start="45:17" pos:end="45:58"><name pos:start="45:17" pos:end="45:36">pthread_mutex_unlock</name><argument_list pos:start="45:37" pos:end="45:58">(<argument pos:start="45:38" pos:end="45:57"><expr pos:start="45:38" pos:end="45:57"><operator pos:start="45:38" pos:end="45:38">&amp;</operator><name pos:start="45:39" pos:end="45:57"><name pos:start="45:39" pos:end="45:39">c</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:57">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="47:17" pos:end="47:28">return <expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">NULL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><call pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:28">pthread_mutex_unlock</name><argument_list pos:start="53:29" pos:end="53:50">(<argument pos:start="53:30" pos:end="53:49"><expr pos:start="53:30" pos:end="53:49"><operator pos:start="53:30" pos:end="53:30">&amp;</operator><name pos:start="53:31" pos:end="53:49"><name pos:start="53:31" pos:end="53:31">c</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:49">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="57:9" pos:end="59:94"><expr pos:start="57:9" pos:end="59:93"><name pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:9">c</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:15">rets</name><index pos:start="57:16" pos:end="57:38">[<expr pos:start="57:17" pos:end="57:37"><name pos:start="57:17" pos:end="57:23">our_job</name><operator pos:start="57:24" pos:end="57:24">%</operator><name pos:start="57:25" pos:end="57:37"><name pos:start="57:25" pos:end="57:25">c</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:37">rets_count</name></name></expr>]</index></name> <operator pos:start="57:40" pos:end="57:40">=</operator> <ternary pos:start="57:42" pos:end="59:93"><condition pos:start="57:42" pos:end="57:50"><expr pos:start="57:42" pos:end="57:48"><name pos:start="57:42" pos:end="57:48"><name pos:start="57:42" pos:end="57:42">c</name><operator pos:start="57:43" pos:end="57:44">-&gt;</operator><name pos:start="57:45" pos:end="57:48">func</name></name></expr> ?</condition><then pos:start="57:52" pos:end="57:103"> <expr pos:start="57:52" pos:end="57:103"><call pos:start="57:52" pos:end="57:103"><name pos:start="57:52" pos:end="57:58"><name pos:start="57:52" pos:end="57:52">c</name><operator pos:start="57:53" pos:end="57:54">-&gt;</operator><name pos:start="57:55" pos:end="57:58">func</name></name><argument_list pos:start="57:59" pos:end="57:103">(<argument pos:start="57:60" pos:end="57:64"><expr pos:start="57:60" pos:end="57:64"><name pos:start="57:60" pos:end="57:64">avctx</name></expr></argument>, <argument pos:start="57:67" pos:end="57:102"><expr pos:start="57:67" pos:end="57:102"><operator pos:start="57:67" pos:end="57:67">(</operator><name pos:start="57:68" pos:end="57:71">char</name><operator pos:start="57:72" pos:end="57:72">*</operator><operator pos:start="57:73" pos:end="57:73">)</operator><name pos:start="57:74" pos:end="57:80"><name pos:start="57:74" pos:end="57:74">c</name><operator pos:start="57:75" pos:end="57:76">-&gt;</operator><name pos:start="57:77" pos:end="57:80">args</name></name> <operator pos:start="57:82" pos:end="57:82">+</operator> <name pos:start="57:84" pos:end="57:90">our_job</name><operator pos:start="57:91" pos:end="57:91">*</operator><name pos:start="57:92" pos:end="57:102"><name pos:start="57:92" pos:end="57:92">c</name><operator pos:start="57:93" pos:end="57:94">-&gt;</operator><name pos:start="57:95" pos:end="57:102">job_size</name></name></expr></argument>)</argument_list></call></expr></then><else pos:start="57:104" pos:end="59:93">:

                                                   <expr pos:start="59:52" pos:end="59:93"><call pos:start="59:52" pos:end="59:93"><name pos:start="59:52" pos:end="59:59"><name pos:start="59:52" pos:end="59:52">c</name><operator pos:start="59:53" pos:end="59:54">-&gt;</operator><name pos:start="59:55" pos:end="59:59">func2</name></name><argument_list pos:start="59:60" pos:end="59:93">(<argument pos:start="59:61" pos:end="59:65"><expr pos:start="59:61" pos:end="59:65"><name pos:start="59:61" pos:end="59:65">avctx</name></expr></argument>, <argument pos:start="59:68" pos:end="59:74"><expr pos:start="59:68" pos:end="59:74"><name pos:start="59:68" pos:end="59:74"><name pos:start="59:68" pos:end="59:68">c</name><operator pos:start="59:69" pos:end="59:70">-&gt;</operator><name pos:start="59:71" pos:end="59:74">args</name></name></expr></argument>, <argument pos:start="59:77" pos:end="59:83"><expr pos:start="59:77" pos:end="59:83"><name pos:start="59:77" pos:end="59:83">our_job</name></expr></argument>, <argument pos:start="59:86" pos:end="59:92"><expr pos:start="59:86" pos:end="59:92"><name pos:start="59:86" pos:end="59:92">self_id</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:49"><expr pos:start="63:9" pos:end="63:48"><call pos:start="63:9" pos:end="63:48"><name pos:start="63:9" pos:end="63:26">pthread_mutex_lock</name><argument_list pos:start="63:27" pos:end="63:48">(<argument pos:start="63:28" pos:end="63:47"><expr pos:start="63:28" pos:end="63:47"><operator pos:start="63:28" pos:end="63:28">&amp;</operator><name pos:start="63:29" pos:end="63:47"><name pos:start="63:29" pos:end="63:29">c</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:47">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:35"><expr pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:15">our_job</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <name pos:start="65:19" pos:end="65:32"><name pos:start="65:19" pos:end="65:19">c</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:32">current_job</name></name><operator pos:start="65:33" pos:end="65:34">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
