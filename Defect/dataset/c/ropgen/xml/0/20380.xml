<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20380.c" pos:tabs="8"><function pos:start="1:1" pos:end="343:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="7:40">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:34"><decl pos:start="3:25" pos:end="3:34"><type pos:start="3:25" pos:end="3:34"><name pos:start="3:25" pos:end="3:28">void</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">data</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:38"><decl pos:start="5:25" pos:end="5:38"><type pos:start="5:25" pos:end="5:38"><name pos:start="5:25" pos:end="5:27">int</name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:38">data_size</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:39"><decl pos:start="7:25" pos:end="7:39"><type pos:start="7:25" pos:end="7:39"><name pos:start="7:25" pos:end="7:32">AVPacket</name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:39">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="343:1">{<block_content pos:start="11:5" pos:end="341:20">

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">buf</name> <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:55"><decl pos:start="13:5" pos:end="13:54"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">buf_end</name> <init pos:start="13:28" pos:end="13:54">= <expr pos:start="13:30" pos:end="13:54"><name pos:start="13:30" pos:end="13:40"><name pos:start="13:30" pos:end="13:34">avpkt</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:40">data</name></name> <operator pos:start="13:42" pos:end="13:42">+</operator> <name pos:start="13:44" pos:end="13:54"><name pos:start="13:44" pos:end="13:48">avpkt</name><operator pos:start="13:49" pos:end="13:50">-&gt;</operator><name pos:start="13:51" pos:end="13:54">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:36"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">buf_size</name>       <init pos:start="15:24" pos:end="15:36">= <expr pos:start="15:26" pos:end="15:36"><name pos:start="15:26" pos:end="15:36"><name pos:start="15:26" pos:end="15:30">avpkt</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:43"><decl pos:start="17:5" pos:end="17:42"><type pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:14">DPXContext</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier><specifier pos:start="17:17" pos:end="17:21">const</specifier></type> <name pos:start="17:23" pos:end="17:23">s</name> <init pos:start="17:25" pos:end="17:42">= <expr pos:start="17:27" pos:end="17:42"><name pos:start="17:27" pos:end="17:42"><name pos:start="17:27" pos:end="17:31">avctx</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:29"><decl pos:start="19:5" pos:end="19:28"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">AVFrame</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:20">picture</name>  <init pos:start="19:23" pos:end="19:28">= <expr pos:start="19:25" pos:end="19:28"><name pos:start="19:25" pos:end="19:28">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:35"><decl pos:start="21:5" pos:end="21:34"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:11">AVFrame</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier><specifier pos:start="21:14" pos:end="21:18">const</specifier></type> <name pos:start="21:20" pos:end="21:20">p</name> <init pos:start="21:22" pos:end="21:34">= <expr pos:start="21:24" pos:end="21:34"><operator pos:start="21:24" pos:end="21:24">&amp;</operator><name pos:start="21:25" pos:end="21:34"><name pos:start="21:25" pos:end="21:25">s</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:34">picture</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">uint8_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:16">ptr</name></decl>;</decl_stmt>



    <decl_stmt pos:start="27:5" pos:end="27:34"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:17">magic_num</name></decl>, <decl pos:start="27:20" pos:end="27:25"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:20" pos:end="27:25">offset</name></decl>, <decl pos:start="27:28" pos:end="27:33"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:28" pos:end="27:33">endian</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:13"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">x</name></decl>, <decl pos:start="29:12" pos:end="29:12"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:12" pos:end="29:12">y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:99"><decl pos:start="31:5" pos:end="31:9"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:9">w</name></decl>, <decl pos:start="31:12" pos:end="31:12"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:12" pos:end="31:12">h</name></decl>, <decl pos:start="31:15" pos:end="31:20"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:15" pos:end="31:20">stride</name></decl>, <decl pos:start="31:23" pos:end="31:36"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:23" pos:end="31:36">bits_per_color</name></decl>, <decl pos:start="31:39" pos:end="31:48"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:39" pos:end="31:48">descriptor</name></decl>, <decl pos:start="31:51" pos:end="31:58"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:51" pos:end="31:58">elements</name></decl>, <decl pos:start="31:61" pos:end="31:78"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:61" pos:end="31:78">target_packet_size</name></decl>, <decl pos:start="31:81" pos:end="31:98"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:81" pos:end="31:98">source_packet_size</name></decl>;</decl_stmt>



    <decl_stmt pos:start="35:5" pos:end="35:27"><decl pos:start="35:5" pos:end="35:26"><type pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:12">unsigned</name> <name pos:start="35:14" pos:end="35:16">int</name></type> <name pos:start="35:18" pos:end="35:26">rgbBuffer</name></decl>;</decl_stmt>



    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:28">(<expr pos:start="39:9" pos:end="39:27"><name pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:13">avpkt</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:19">size</name></name> <operator pos:start="39:21" pos:end="39:22">&lt;=</operator> <literal type="number" pos:start="39:24" pos:end="39:27">1634</literal></expr>)</condition> <block pos:start="39:30" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:35">

        <expr_stmt pos:start="41:9" pos:end="41:73"><expr pos:start="41:9" pos:end="41:72"><call pos:start="41:9" pos:end="41:72"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:72">(<argument pos:start="41:16" pos:end="41:20"><expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">avctx</name></expr></argument>, <argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:37" pos:end="41:71"><expr pos:start="41:37" pos:end="41:71"><literal type="string" pos:start="41:37" pos:end="41:71">"Packet too small for DPX header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:35">return <expr pos:start="43:16" pos:end="43:34"><name pos:start="43:16" pos:end="43:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:29"><expr pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:13">magic_num</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <call pos:start="49:17" pos:end="49:28"><name pos:start="49:17" pos:end="49:23">AV_RB32</name><argument_list pos:start="49:24" pos:end="49:28">(<argument pos:start="49:25" pos:end="49:27"><expr pos:start="49:25" pos:end="49:27"><name pos:start="49:25" pos:end="49:27">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:13"><expr pos:start="51:5" pos:end="51:12"><name pos:start="51:5" pos:end="51:7">buf</name> <operator pos:start="51:9" pos:end="51:10">+=</operator> <literal type="number" pos:start="51:12" pos:end="51:12">4</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="57:61">/* Check if the files "magic number" is "SDPX" which means it uses

     * big-endian or XPDS which is for little-endian files */</comment>

    <if_stmt pos:start="59:5" pos:end="73:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:37">(<expr pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:17">magic_num</name> <operator pos:start="59:19" pos:end="59:20">==</operator> <call pos:start="59:22" pos:end="59:36"><name pos:start="59:22" pos:end="59:28">AV_RL32</name><argument_list pos:start="59:29" pos:end="59:36">(<argument pos:start="59:30" pos:end="59:35"><expr pos:start="59:30" pos:end="59:35"><literal type="string" pos:start="59:30" pos:end="59:35">"SDPX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:39" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:19">

        <expr_stmt pos:start="61:9" pos:end="61:19"><expr pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:14">endian</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <literal type="number" pos:start="61:18" pos:end="61:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="63:7" pos:end="67:5">else if <condition pos:start="63:15" pos:end="63:44">(<expr pos:start="63:16" pos:end="63:43"><name pos:start="63:16" pos:end="63:24">magic_num</name> <operator pos:start="63:26" pos:end="63:27">==</operator> <call pos:start="63:29" pos:end="63:43"><name pos:start="63:29" pos:end="63:35">AV_RB32</name><argument_list pos:start="63:36" pos:end="63:43">(<argument pos:start="63:37" pos:end="63:42"><expr pos:start="63:37" pos:end="63:42"><literal type="string" pos:start="63:37" pos:end="63:42">"SDPX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:46" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:19">

        <expr_stmt pos:start="65:9" pos:end="65:19"><expr pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:14">endian</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="73:5">else <block pos:start="67:12" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:18">

        <expr_stmt pos:start="69:9" pos:end="69:62"><expr pos:start="69:9" pos:end="69:61"><call pos:start="69:9" pos:end="69:61"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="69:61">(<argument pos:start="69:16" pos:end="69:20"><expr pos:start="69:16" pos:end="69:20"><name pos:start="69:16" pos:end="69:20">avctx</name></expr></argument>, <argument pos:start="69:23" pos:end="69:34"><expr pos:start="69:23" pos:end="69:34"><name pos:start="69:23" pos:end="69:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:37" pos:end="69:60"><expr pos:start="69:37" pos:end="69:60"><literal type="string" pos:start="69:37" pos:end="69:60">"DPX marker not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:18">return <expr pos:start="71:16" pos:end="71:17"><operator pos:start="71:16" pos:end="71:16">-</operator><literal type="number" pos:start="71:17" pos:end="71:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:34"><expr pos:start="77:5" pos:end="77:33"><name pos:start="77:5" pos:end="77:10">offset</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <call pos:start="77:14" pos:end="77:33"><name pos:start="77:14" pos:end="77:19">read32</name><argument_list pos:start="77:20" pos:end="77:33">(<argument pos:start="77:21" pos:end="77:24"><expr pos:start="77:21" pos:end="77:24"><operator pos:start="77:21" pos:end="77:21">&amp;</operator><name pos:start="77:22" pos:end="77:24">buf</name></expr></argument>, <argument pos:start="77:27" pos:end="77:32"><expr pos:start="77:27" pos:end="77:32"><name pos:start="77:27" pos:end="77:32">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:30">(<expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:13">avpkt</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:19">size</name></name> <operator pos:start="79:21" pos:end="79:22">&lt;=</operator> <name pos:start="79:24" pos:end="79:29">offset</name></expr>)</condition> <block pos:start="79:32" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:35">

        <expr_stmt pos:start="81:9" pos:end="81:67"><expr pos:start="81:9" pos:end="81:66"><call pos:start="81:9" pos:end="81:66"><name pos:start="81:9" pos:end="81:14">av_log</name><argument_list pos:start="81:15" pos:end="81:66">(<argument pos:start="81:16" pos:end="81:20"><expr pos:start="81:16" pos:end="81:20"><name pos:start="81:16" pos:end="81:20">avctx</name></expr></argument>, <argument pos:start="81:23" pos:end="81:34"><expr pos:start="81:23" pos:end="81:34"><name pos:start="81:23" pos:end="81:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:37" pos:end="81:65"><expr pos:start="81:37" pos:end="81:65"><literal type="string" pos:start="81:37" pos:end="81:65">"Invalid data start offset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:35">return <expr pos:start="83:16" pos:end="83:34"><name pos:start="83:16" pos:end="83:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="87:5" pos:end="87:53">// Need to end in 0x304 offset from start of file</comment>

    <expr_stmt pos:start="89:5" pos:end="89:30"><expr pos:start="89:5" pos:end="89:29"><name pos:start="89:5" pos:end="89:7">buf</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <name pos:start="89:11" pos:end="89:21"><name pos:start="89:11" pos:end="89:15">avpkt</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:21">data</name></name> <operator pos:start="89:23" pos:end="89:23">+</operator> <literal type="number" pos:start="89:25" pos:end="89:29">0x304</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:29"><expr pos:start="91:5" pos:end="91:28"><name pos:start="91:5" pos:end="91:5">w</name> <operator pos:start="91:7" pos:end="91:7">=</operator> <call pos:start="91:9" pos:end="91:28"><name pos:start="91:9" pos:end="91:14">read32</name><argument_list pos:start="91:15" pos:end="91:28">(<argument pos:start="91:16" pos:end="91:19"><expr pos:start="91:16" pos:end="91:19"><operator pos:start="91:16" pos:end="91:16">&amp;</operator><name pos:start="91:17" pos:end="91:19">buf</name></expr></argument>, <argument pos:start="91:22" pos:end="91:27"><expr pos:start="91:22" pos:end="91:27"><name pos:start="91:22" pos:end="91:27">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:29"><expr pos:start="93:5" pos:end="93:28"><name pos:start="93:5" pos:end="93:5">h</name> <operator pos:start="93:7" pos:end="93:7">=</operator> <call pos:start="93:9" pos:end="93:28"><name pos:start="93:9" pos:end="93:14">read32</name><argument_list pos:start="93:15" pos:end="93:28">(<argument pos:start="93:16" pos:end="93:19"><expr pos:start="93:16" pos:end="93:19"><operator pos:start="93:16" pos:end="93:16">&amp;</operator><name pos:start="93:17" pos:end="93:19">buf</name></expr></argument>, <argument pos:start="93:22" pos:end="93:27"><expr pos:start="93:22" pos:end="93:27"><name pos:start="93:22" pos:end="93:27">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="97:5" pos:end="97:50">// Need to end in 0x320 to read the descriptor</comment>

    <expr_stmt pos:start="99:5" pos:end="99:14"><expr pos:start="99:5" pos:end="99:13"><name pos:start="99:5" pos:end="99:7">buf</name> <operator pos:start="99:9" pos:end="99:10">+=</operator> <literal type="number" pos:start="99:12" pos:end="99:13">20</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:24"><expr pos:start="101:5" pos:end="101:23"><name pos:start="101:5" pos:end="101:14">descriptor</name> <operator pos:start="101:16" pos:end="101:16">=</operator> <name pos:start="101:18" pos:end="101:23"><name pos:start="101:18" pos:end="101:20">buf</name><index pos:start="101:21" pos:end="101:23">[<expr pos:start="101:22" pos:end="101:22"><literal type="number" pos:start="101:22" pos:end="101:22">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="line" pos:start="105:5" pos:end="105:54">// Need to end in 0x323 to read the bits per color</comment>

    <expr_stmt pos:start="107:5" pos:end="107:13"><expr pos:start="107:5" pos:end="107:12"><name pos:start="107:5" pos:end="107:7">buf</name> <operator pos:start="107:9" pos:end="107:10">+=</operator> <literal type="number" pos:start="107:12" pos:end="107:12">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="111:28"><expr pos:start="109:5" pos:end="111:27"><name pos:start="109:5" pos:end="109:30"><name pos:start="109:5" pos:end="109:9">avctx</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:30">bits_per_raw_sample</name></name> <operator pos:start="109:32" pos:end="109:32">=</operator>

    <name pos:start="111:5" pos:end="111:18">bits_per_color</name> <operator pos:start="111:20" pos:end="111:20">=</operator> <name pos:start="111:22" pos:end="111:27"><name pos:start="111:22" pos:end="111:24">buf</name><index pos:start="111:25" pos:end="111:27">[<expr pos:start="111:26" pos:end="111:26"><literal type="number" pos:start="111:26" pos:end="111:26">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:15"><expr pos:start="115:5" pos:end="115:14"><name pos:start="115:5" pos:end="115:7">buf</name> <operator pos:start="115:9" pos:end="115:10">+=</operator> <literal type="number" pos:start="115:12" pos:end="115:14">825</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:58"><expr pos:start="117:5" pos:end="117:57"><name pos:start="117:5" pos:end="117:34"><name pos:start="117:5" pos:end="117:9">avctx</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:30">sample_aspect_ratio</name><operator pos:start="117:31" pos:end="117:31">.</operator><name pos:start="117:32" pos:end="117:34">num</name></name> <operator pos:start="117:36" pos:end="117:36">=</operator> <call pos:start="117:38" pos:end="117:57"><name pos:start="117:38" pos:end="117:43">read32</name><argument_list pos:start="117:44" pos:end="117:57">(<argument pos:start="117:45" pos:end="117:48"><expr pos:start="117:45" pos:end="117:48"><operator pos:start="117:45" pos:end="117:45">&amp;</operator><name pos:start="117:46" pos:end="117:48">buf</name></expr></argument>, <argument pos:start="117:51" pos:end="117:56"><expr pos:start="117:51" pos:end="117:56"><name pos:start="117:51" pos:end="117:56">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:58"><expr pos:start="119:5" pos:end="119:57"><name pos:start="119:5" pos:end="119:34"><name pos:start="119:5" pos:end="119:9">avctx</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:30">sample_aspect_ratio</name><operator pos:start="119:31" pos:end="119:31">.</operator><name pos:start="119:32" pos:end="119:34">den</name></name> <operator pos:start="119:36" pos:end="119:36">=</operator> <call pos:start="119:38" pos:end="119:57"><name pos:start="119:38" pos:end="119:43">read32</name><argument_list pos:start="119:44" pos:end="119:57">(<argument pos:start="119:45" pos:end="119:48"><expr pos:start="119:45" pos:end="119:48"><operator pos:start="119:45" pos:end="119:45">&amp;</operator><name pos:start="119:46" pos:end="119:48">buf</name></expr></argument>, <argument pos:start="119:51" pos:end="119:56"><expr pos:start="119:51" pos:end="119:56"><name pos:start="119:51" pos:end="119:56">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="131:58"><if pos:start="121:5" pos:end="127:27">if <condition pos:start="121:8" pos:end="121:81">(<expr pos:start="121:9" pos:end="121:80"><name pos:start="121:9" pos:end="121:38"><name pos:start="121:9" pos:end="121:13">avctx</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:34">sample_aspect_ratio</name><operator pos:start="121:35" pos:end="121:35">.</operator><name pos:start="121:36" pos:end="121:38">num</name></name> <operator pos:start="121:40" pos:end="121:40">&gt;</operator> <literal type="number" pos:start="121:42" pos:end="121:42">0</literal> <operator pos:start="121:44" pos:end="121:45">&amp;&amp;</operator> <name pos:start="121:47" pos:end="121:76"><name pos:start="121:47" pos:end="121:51">avctx</name><operator pos:start="121:52" pos:end="121:53">-&gt;</operator><name pos:start="121:54" pos:end="121:72">sample_aspect_ratio</name><operator pos:start="121:73" pos:end="121:73">.</operator><name pos:start="121:74" pos:end="121:76">den</name></name> <operator pos:start="121:78" pos:end="121:78">&gt;</operator> <literal type="number" pos:start="121:80" pos:end="121:80">0</literal></expr>)</condition><block type="pseudo" pos:start="123:9" pos:end="127:27"><block_content pos:start="123:9" pos:end="127:27">

        <expr_stmt pos:start="123:9" pos:end="127:27"><expr pos:start="123:9" pos:end="127:26"><call pos:start="123:9" pos:end="127:26"><name pos:start="123:9" pos:end="123:17">av_reduce</name><argument_list pos:start="123:18" pos:end="127:26">(<argument pos:start="123:19" pos:end="123:49"><expr pos:start="123:19" pos:end="123:49"><operator pos:start="123:19" pos:end="123:19">&amp;</operator><name pos:start="123:20" pos:end="123:49"><name pos:start="123:20" pos:end="123:24">avctx</name><operator pos:start="123:25" pos:end="123:26">-&gt;</operator><name pos:start="123:27" pos:end="123:45">sample_aspect_ratio</name><operator pos:start="123:46" pos:end="123:46">.</operator><name pos:start="123:47" pos:end="123:49">num</name></name></expr></argument>, <argument pos:start="123:52" pos:end="123:82"><expr pos:start="123:52" pos:end="123:82"><operator pos:start="123:52" pos:end="123:52">&amp;</operator><name pos:start="123:53" pos:end="123:82"><name pos:start="123:53" pos:end="123:57">avctx</name><operator pos:start="123:58" pos:end="123:59">-&gt;</operator><name pos:start="123:60" pos:end="123:78">sample_aspect_ratio</name><operator pos:start="123:79" pos:end="123:79">.</operator><name pos:start="123:80" pos:end="123:82">den</name></name></expr></argument>,

                   <argument pos:start="125:20" pos:end="125:49"><expr pos:start="125:20" pos:end="125:49"><name pos:start="125:20" pos:end="125:49"><name pos:start="125:20" pos:end="125:24">avctx</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:45">sample_aspect_ratio</name><operator pos:start="125:46" pos:end="125:46">.</operator><name pos:start="125:47" pos:end="125:49">num</name></name></expr></argument>,  <argument pos:start="125:53" pos:end="125:82"><expr pos:start="125:53" pos:end="125:82"><name pos:start="125:53" pos:end="125:82"><name pos:start="125:53" pos:end="125:57">avctx</name><operator pos:start="125:58" pos:end="125:59">-&gt;</operator><name pos:start="125:60" pos:end="125:78">sample_aspect_ratio</name><operator pos:start="125:79" pos:end="125:79">.</operator><name pos:start="125:80" pos:end="125:82">den</name></name></expr></argument>,

                  <argument pos:start="127:19" pos:end="127:25"><expr pos:start="127:19" pos:end="127:25"><literal type="number" pos:start="127:19" pos:end="127:25">0x10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="129:5" pos:end="131:58">else<block type="pseudo" pos:start="131:9" pos:end="131:58"><block_content pos:start="131:9" pos:end="131:58">

        <expr_stmt pos:start="131:9" pos:end="131:58"><expr pos:start="131:9" pos:end="131:57"><name pos:start="131:9" pos:end="131:34"><name pos:start="131:9" pos:end="131:13">avctx</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:34">sample_aspect_ratio</name></name> <operator pos:start="131:36" pos:end="131:36">=</operator> <operator pos:start="131:38" pos:end="131:38">(</operator><name pos:start="131:39" pos:end="131:48">AVRational</name><operator pos:start="131:49" pos:end="131:49">)</operator><block pos:start="131:50" pos:end="131:57">{ <expr pos:start="131:52" pos:end="131:52"><literal type="number" pos:start="131:52" pos:end="131:52">0</literal></expr>, <expr pos:start="131:55" pos:end="131:55"><literal type="number" pos:start="131:55" pos:end="131:55">0</literal></expr> }</block></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <switch pos:start="135:5" pos:end="155:5">switch <condition pos:start="135:12" pos:end="135:23">(<expr pos:start="135:13" pos:end="135:22"><name pos:start="135:13" pos:end="135:22">descriptor</name></expr>)</condition> <block pos:start="135:25" pos:end="155:5">{<block_content pos:start="137:9" pos:end="153:22">

        <case pos:start="137:9" pos:end="137:16">case <expr pos:start="137:14" pos:end="137:15"><literal type="number" pos:start="137:14" pos:end="137:15">51</literal></expr>:</case> <comment type="line" pos:start="137:18" pos:end="137:24">// RGBA</comment>

            <expr_stmt pos:start="139:13" pos:end="139:25"><expr pos:start="139:13" pos:end="139:24"><name pos:start="139:13" pos:end="139:20">elements</name> <operator pos:start="139:22" pos:end="139:22">=</operator> <literal type="number" pos:start="139:24" pos:end="139:24">4</literal></expr>;</expr_stmt>

            <break pos:start="141:13" pos:end="141:18">break;</break>

        <case pos:start="143:9" pos:end="143:16">case <expr pos:start="143:14" pos:end="143:15"><literal type="number" pos:start="143:14" pos:end="143:15">50</literal></expr>:</case> <comment type="line" pos:start="143:18" pos:end="143:23">// RGB</comment>

            <expr_stmt pos:start="145:13" pos:end="145:25"><expr pos:start="145:13" pos:end="145:24"><name pos:start="145:13" pos:end="145:20">elements</name> <operator pos:start="145:22" pos:end="145:22">=</operator> <literal type="number" pos:start="145:24" pos:end="145:24">3</literal></expr>;</expr_stmt>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        <default pos:start="149:9" pos:end="149:16">default:</default>

            <expr_stmt pos:start="151:13" pos:end="151:83"><expr pos:start="151:13" pos:end="151:82"><call pos:start="151:13" pos:end="151:82"><name pos:start="151:13" pos:end="151:18">av_log</name><argument_list pos:start="151:19" pos:end="151:82">(<argument pos:start="151:20" pos:end="151:24"><expr pos:start="151:20" pos:end="151:24"><name pos:start="151:20" pos:end="151:24">avctx</name></expr></argument>, <argument pos:start="151:27" pos:end="151:38"><expr pos:start="151:27" pos:end="151:38"><name pos:start="151:27" pos:end="151:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="151:41" pos:end="151:69"><expr pos:start="151:41" pos:end="151:69"><literal type="string" pos:start="151:41" pos:end="151:69">"Unsupported descriptor %d\n"</literal></expr></argument>, <argument pos:start="151:72" pos:end="151:81"><expr pos:start="151:72" pos:end="151:81"><name pos:start="151:72" pos:end="151:81">descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="153:13" pos:end="153:22">return <expr pos:start="153:20" pos:end="153:21"><operator pos:start="153:20" pos:end="153:20">-</operator><literal type="number" pos:start="153:21" pos:end="153:21">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <switch pos:start="159:5" pos:end="215:5">switch <condition pos:start="159:12" pos:end="159:27">(<expr pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:26">bits_per_color</name></expr>)</condition> <block pos:start="159:29" pos:end="215:5">{<block_content pos:start="161:9" pos:end="213:22">

        <case pos:start="161:9" pos:end="161:15">case <expr pos:start="161:14" pos:end="161:14"><literal type="number" pos:start="161:14" pos:end="161:14">8</literal></expr>:</case>

            <if_stmt pos:start="163:13" pos:end="171:13"><if pos:start="163:13" pos:end="167:13">if <condition pos:start="163:16" pos:end="163:30">(<expr pos:start="163:17" pos:end="163:29"><name pos:start="163:17" pos:end="163:24">elements</name> <operator pos:start="163:26" pos:end="163:27">==</operator> <literal type="number" pos:start="163:29" pos:end="163:29">4</literal></expr>)</condition> <block pos:start="163:32" pos:end="167:13">{<block_content pos:start="165:17" pos:end="165:46">

                <expr_stmt pos:start="165:17" pos:end="165:46"><expr pos:start="165:17" pos:end="165:45"><name pos:start="165:17" pos:end="165:30"><name pos:start="165:17" pos:end="165:21">avctx</name><operator pos:start="165:22" pos:end="165:23">-&gt;</operator><name pos:start="165:24" pos:end="165:30">pix_fmt</name></name> <operator pos:start="165:32" pos:end="165:32">=</operator> <name pos:start="165:34" pos:end="165:45">PIX_FMT_RGBA</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="167:15" pos:end="171:13">else <block pos:start="167:20" pos:end="171:13">{<block_content pos:start="169:17" pos:end="169:47">

                <expr_stmt pos:start="169:17" pos:end="169:47"><expr pos:start="169:17" pos:end="169:46"><name pos:start="169:17" pos:end="169:30"><name pos:start="169:17" pos:end="169:21">avctx</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:30">pix_fmt</name></name> <operator pos:start="169:32" pos:end="169:32">=</operator> <name pos:start="169:34" pos:end="169:46">PIX_FMT_RGB24</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:42"><expr pos:start="173:13" pos:end="173:41"><name pos:start="173:13" pos:end="173:30">source_packet_size</name> <operator pos:start="173:32" pos:end="173:32">=</operator> <name pos:start="173:34" pos:end="173:41">elements</name></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:42"><expr pos:start="175:13" pos:end="175:41"><name pos:start="175:13" pos:end="175:30">target_packet_size</name> <operator pos:start="175:32" pos:end="175:32">=</operator> <name pos:start="175:34" pos:end="175:41">elements</name></expr>;</expr_stmt>

            <break pos:start="177:13" pos:end="177:18">break;</break>

        <case pos:start="179:9" pos:end="179:16">case <expr pos:start="179:14" pos:end="179:15"><literal type="number" pos:start="179:14" pos:end="179:15">10</literal></expr>:</case>

            <expr_stmt pos:start="181:13" pos:end="181:43"><expr pos:start="181:13" pos:end="181:42"><name pos:start="181:13" pos:end="181:26"><name pos:start="181:13" pos:end="181:17">avctx</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:26">pix_fmt</name></name> <operator pos:start="181:28" pos:end="181:28">=</operator> <name pos:start="181:30" pos:end="181:42">PIX_FMT_RGB48</name></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:35"><expr pos:start="183:13" pos:end="183:34"><name pos:start="183:13" pos:end="183:30">target_packet_size</name> <operator pos:start="183:32" pos:end="183:32">=</operator> <literal type="number" pos:start="183:34" pos:end="183:34">6</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:35"><expr pos:start="185:13" pos:end="185:34"><name pos:start="185:13" pos:end="185:30">source_packet_size</name> <operator pos:start="185:32" pos:end="185:32">=</operator> <literal type="number" pos:start="185:34" pos:end="185:34">4</literal></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        <case pos:start="189:9" pos:end="189:16">case <expr pos:start="189:14" pos:end="189:15"><literal type="number" pos:start="189:14" pos:end="189:15">12</literal></expr>:</case>

        <case pos:start="191:9" pos:end="191:16">case <expr pos:start="191:14" pos:end="191:15"><literal type="number" pos:start="191:14" pos:end="191:15">16</literal></expr>:</case>

            <if_stmt pos:start="193:13" pos:end="201:13"><if pos:start="193:13" pos:end="197:13">if <condition pos:start="193:16" pos:end="193:23">(<expr pos:start="193:17" pos:end="193:22"><name pos:start="193:17" pos:end="193:22">endian</name></expr>)</condition> <block pos:start="193:25" pos:end="197:13">{<block_content pos:start="195:17" pos:end="195:84">

                <expr_stmt pos:start="195:17" pos:end="195:84"><expr pos:start="195:17" pos:end="195:83"><name pos:start="195:17" pos:end="195:30"><name pos:start="195:17" pos:end="195:21">avctx</name><operator pos:start="195:22" pos:end="195:23">-&gt;</operator><name pos:start="195:24" pos:end="195:30">pix_fmt</name></name> <operator pos:start="195:32" pos:end="195:32">=</operator> <ternary pos:start="195:34" pos:end="195:83"><condition pos:start="195:34" pos:end="195:48"><expr pos:start="195:34" pos:end="195:46"><name pos:start="195:34" pos:end="195:41">elements</name> <operator pos:start="195:43" pos:end="195:44">==</operator> <literal type="number" pos:start="195:46" pos:end="195:46">4</literal></expr> ?</condition><then pos:start="195:50" pos:end="195:65"> <expr pos:start="195:50" pos:end="195:65"><name pos:start="195:50" pos:end="195:65">PIX_FMT_RGBA64BE</name></expr> </then><else pos:start="195:67" pos:end="195:83">: <expr pos:start="195:69" pos:end="195:83"><name pos:start="195:69" pos:end="195:83">PIX_FMT_RGB48BE</name></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="197:15" pos:end="201:13">else <block pos:start="197:20" pos:end="201:13">{<block_content pos:start="199:17" pos:end="199:84">

                <expr_stmt pos:start="199:17" pos:end="199:84"><expr pos:start="199:17" pos:end="199:83"><name pos:start="199:17" pos:end="199:30"><name pos:start="199:17" pos:end="199:21">avctx</name><operator pos:start="199:22" pos:end="199:23">-&gt;</operator><name pos:start="199:24" pos:end="199:30">pix_fmt</name></name> <operator pos:start="199:32" pos:end="199:32">=</operator> <ternary pos:start="199:34" pos:end="199:83"><condition pos:start="199:34" pos:end="199:48"><expr pos:start="199:34" pos:end="199:46"><name pos:start="199:34" pos:end="199:41">elements</name> <operator pos:start="199:43" pos:end="199:44">==</operator> <literal type="number" pos:start="199:46" pos:end="199:46">4</literal></expr> ?</condition><then pos:start="199:50" pos:end="199:65"> <expr pos:start="199:50" pos:end="199:65"><name pos:start="199:50" pos:end="199:65">PIX_FMT_RGBA64LE</name></expr> </then><else pos:start="199:67" pos:end="199:83">: <expr pos:start="199:69" pos:end="199:83"><name pos:start="199:69" pos:end="199:83">PIX_FMT_RGB48LE</name></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="203:13" pos:end="205:46"><expr pos:start="203:13" pos:end="205:45"><name pos:start="203:13" pos:end="203:30">target_packet_size</name> <operator pos:start="203:32" pos:end="203:32">=</operator>

            <name pos:start="205:13" pos:end="205:30">source_packet_size</name> <operator pos:start="205:32" pos:end="205:32">=</operator> <name pos:start="205:34" pos:end="205:41">elements</name> <operator pos:start="205:43" pos:end="205:43">*</operator> <literal type="number" pos:start="205:45" pos:end="205:45">2</literal></expr>;</expr_stmt>

            <break pos:start="207:13" pos:end="207:18">break;</break>

        <default pos:start="209:9" pos:end="209:16">default:</default>

            <expr_stmt pos:start="211:13" pos:end="211:90"><expr pos:start="211:13" pos:end="211:89"><call pos:start="211:13" pos:end="211:89"><name pos:start="211:13" pos:end="211:18">av_log</name><argument_list pos:start="211:19" pos:end="211:89">(<argument pos:start="211:20" pos:end="211:24"><expr pos:start="211:20" pos:end="211:24"><name pos:start="211:20" pos:end="211:24">avctx</name></expr></argument>, <argument pos:start="211:27" pos:end="211:38"><expr pos:start="211:27" pos:end="211:38"><name pos:start="211:27" pos:end="211:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="211:41" pos:end="211:72"><expr pos:start="211:41" pos:end="211:72"><literal type="string" pos:start="211:41" pos:end="211:72">"Unsupported color depth : %d\n"</literal></expr></argument>, <argument pos:start="211:75" pos:end="211:88"><expr pos:start="211:75" pos:end="211:88"><name pos:start="211:75" pos:end="211:88">bits_per_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="213:13" pos:end="213:22">return <expr pos:start="213:20" pos:end="213:21"><operator pos:start="213:20" pos:end="213:20">-</operator><literal type="number" pos:start="213:21" pos:end="213:21">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="219:5" pos:end="221:50"><if pos:start="219:5" pos:end="221:50">if <condition pos:start="219:8" pos:end="219:27">(<expr pos:start="219:9" pos:end="219:26"><name pos:start="219:9" pos:end="219:26"><name pos:start="219:9" pos:end="219:9">s</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:18">picture</name><operator pos:start="219:19" pos:end="219:19">.</operator><name pos:start="219:20" pos:end="219:23">data</name><index pos:start="219:24" pos:end="219:26">[<expr pos:start="219:25" pos:end="219:25"><literal type="number" pos:start="219:25" pos:end="219:25">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="221:9" pos:end="221:50"><block_content pos:start="221:9" pos:end="221:50">

        <expr_stmt pos:start="221:9" pos:end="221:50"><expr pos:start="221:9" pos:end="221:49"><call pos:start="221:9" pos:end="221:49"><name pos:start="221:9" pos:end="221:29"><name pos:start="221:9" pos:end="221:13">avctx</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:29">release_buffer</name></name><argument_list pos:start="221:30" pos:end="221:49">(<argument pos:start="221:31" pos:end="221:35"><expr pos:start="221:31" pos:end="221:35"><name pos:start="221:31" pos:end="221:35">avctx</name></expr></argument>, <argument pos:start="221:38" pos:end="221:48"><expr pos:start="221:38" pos:end="221:48"><operator pos:start="221:38" pos:end="221:38">&amp;</operator><name pos:start="221:39" pos:end="221:48"><name pos:start="221:39" pos:end="221:39">s</name><operator pos:start="221:40" pos:end="221:41">-&gt;</operator><name pos:start="221:42" pos:end="221:48">picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="223:5" pos:end="225:18"><if pos:start="223:5" pos:end="225:18">if <condition pos:start="223:8" pos:end="223:44">(<expr pos:start="223:9" pos:end="223:43"><call pos:start="223:9" pos:end="223:43"><name pos:start="223:9" pos:end="223:27">av_image_check_size</name><argument_list pos:start="223:28" pos:end="223:43">(<argument pos:start="223:29" pos:end="223:29"><expr pos:start="223:29" pos:end="223:29"><name pos:start="223:29" pos:end="223:29">w</name></expr></argument>, <argument pos:start="223:32" pos:end="223:32"><expr pos:start="223:32" pos:end="223:32"><name pos:start="223:32" pos:end="223:32">h</name></expr></argument>, <argument pos:start="223:35" pos:end="223:35"><expr pos:start="223:35" pos:end="223:35"><literal type="number" pos:start="223:35" pos:end="223:35">0</literal></expr></argument>, <argument pos:start="223:38" pos:end="223:42"><expr pos:start="223:38" pos:end="223:42"><name pos:start="223:38" pos:end="223:42">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="225:9" pos:end="225:18"><block_content pos:start="225:9" pos:end="225:18">

        <return pos:start="225:9" pos:end="225:18">return <expr pos:start="225:16" pos:end="225:17"><operator pos:start="225:16" pos:end="225:16">-</operator><literal type="number" pos:start="225:17" pos:end="225:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="227:5" pos:end="229:44"><if pos:start="227:5" pos:end="229:44">if <condition pos:start="227:8" pos:end="227:48">(<expr pos:start="227:9" pos:end="227:47"><name pos:start="227:9" pos:end="227:9">w</name> <operator pos:start="227:11" pos:end="227:12">!=</operator> <name pos:start="227:14" pos:end="227:25"><name pos:start="227:14" pos:end="227:18">avctx</name><operator pos:start="227:19" pos:end="227:20">-&gt;</operator><name pos:start="227:21" pos:end="227:25">width</name></name> <operator pos:start="227:27" pos:end="227:28">||</operator> <name pos:start="227:30" pos:end="227:30">h</name> <operator pos:start="227:32" pos:end="227:33">!=</operator> <name pos:start="227:35" pos:end="227:47"><name pos:start="227:35" pos:end="227:39">avctx</name><operator pos:start="227:40" pos:end="227:41">-&gt;</operator><name pos:start="227:42" pos:end="227:47">height</name></name></expr>)</condition><block type="pseudo" pos:start="229:9" pos:end="229:44"><block_content pos:start="229:9" pos:end="229:44">

        <expr_stmt pos:start="229:9" pos:end="229:44"><expr pos:start="229:9" pos:end="229:43"><call pos:start="229:9" pos:end="229:43"><name pos:start="229:9" pos:end="229:30">avcodec_set_dimensions</name><argument_list pos:start="229:31" pos:end="229:43">(<argument pos:start="229:32" pos:end="229:36"><expr pos:start="229:32" pos:end="229:36"><name pos:start="229:32" pos:end="229:36">avctx</name></expr></argument>, <argument pos:start="229:39" pos:end="229:39"><expr pos:start="229:39" pos:end="229:39"><name pos:start="229:39" pos:end="229:39">w</name></expr></argument>, <argument pos:start="229:42" pos:end="229:42"><expr pos:start="229:42" pos:end="229:42"><name pos:start="229:42" pos:end="229:42">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="231:5" pos:end="237:5"><if pos:start="231:5" pos:end="237:5">if <condition pos:start="231:8" pos:end="231:40">(<expr pos:start="231:9" pos:end="231:39"><call pos:start="231:9" pos:end="231:35"><name pos:start="231:9" pos:end="231:25"><name pos:start="231:9" pos:end="231:13">avctx</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:25">get_buffer</name></name><argument_list pos:start="231:26" pos:end="231:35">(<argument pos:start="231:27" pos:end="231:31"><expr pos:start="231:27" pos:end="231:31"><name pos:start="231:27" pos:end="231:31">avctx</name></expr></argument>, <argument pos:start="231:34" pos:end="231:34"><expr pos:start="231:34" pos:end="231:34"><name pos:start="231:34" pos:end="231:34">p</name></expr></argument>)</argument_list></call> <operator pos:start="231:37" pos:end="231:37">&lt;</operator> <literal type="number" pos:start="231:39" pos:end="231:39">0</literal></expr>)</condition> <block pos:start="231:42" pos:end="237:5">{<block_content pos:start="233:9" pos:end="235:18">

        <expr_stmt pos:start="233:9" pos:end="233:61"><expr pos:start="233:9" pos:end="233:60"><call pos:start="233:9" pos:end="233:60"><name pos:start="233:9" pos:end="233:14">av_log</name><argument_list pos:start="233:15" pos:end="233:60">(<argument pos:start="233:16" pos:end="233:20"><expr pos:start="233:16" pos:end="233:20"><name pos:start="233:16" pos:end="233:20">avctx</name></expr></argument>, <argument pos:start="233:23" pos:end="233:34"><expr pos:start="233:23" pos:end="233:34"><name pos:start="233:23" pos:end="233:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="233:37" pos:end="233:59"><expr pos:start="233:37" pos:end="233:59"><literal type="string" pos:start="233:37" pos:end="233:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="235:9" pos:end="235:18">return <expr pos:start="235:16" pos:end="235:17"><operator pos:start="235:16" pos:end="235:16">-</operator><literal type="number" pos:start="235:17" pos:end="235:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="241:5" pos:end="241:48">// Move pointer to offset from start of file</comment>

    <expr_stmt pos:start="243:5" pos:end="243:32"><expr pos:start="243:5" pos:end="243:31"><name pos:start="243:5" pos:end="243:7">buf</name> <operator pos:start="243:9" pos:end="243:9">=</operator>  <name pos:start="243:12" pos:end="243:22"><name pos:start="243:12" pos:end="243:16">avpkt</name><operator pos:start="243:17" pos:end="243:18">-&gt;</operator><name pos:start="243:19" pos:end="243:22">data</name></name> <operator pos:start="243:24" pos:end="243:24">+</operator> <name pos:start="243:26" pos:end="243:31">offset</name></expr>;</expr_stmt>



    <expr_stmt pos:start="247:5" pos:end="247:24"><expr pos:start="247:5" pos:end="247:23"><name pos:start="247:5" pos:end="247:7">ptr</name>    <operator pos:start="247:12" pos:end="247:12">=</operator> <name pos:start="247:14" pos:end="247:23"><name pos:start="247:14" pos:end="247:14">p</name><operator pos:start="247:15" pos:end="247:16">-&gt;</operator><name pos:start="247:17" pos:end="247:20">data</name><index pos:start="247:21" pos:end="247:23">[<expr pos:start="247:22" pos:end="247:22"><literal type="number" pos:start="247:22" pos:end="247:22">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:28"><expr pos:start="249:5" pos:end="249:27"><name pos:start="249:5" pos:end="249:10">stride</name> <operator pos:start="249:12" pos:end="249:12">=</operator> <name pos:start="249:14" pos:end="249:27"><name pos:start="249:14" pos:end="249:14">p</name><operator pos:start="249:15" pos:end="249:16">-&gt;</operator><name pos:start="249:17" pos:end="249:24">linesize</name><index pos:start="249:25" pos:end="249:27">[<expr pos:start="249:26" pos:end="249:26"><literal type="number" pos:start="249:26" pos:end="249:26">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="253:5" pos:end="259:5"><if pos:start="253:5" pos:end="259:5">if <condition pos:start="253:8" pos:end="253:70">(<expr pos:start="253:9" pos:end="253:69"><name pos:start="253:9" pos:end="253:26">source_packet_size</name><operator pos:start="253:27" pos:end="253:27">*</operator><name pos:start="253:28" pos:end="253:39"><name pos:start="253:28" pos:end="253:32">avctx</name><operator pos:start="253:33" pos:end="253:34">-&gt;</operator><name pos:start="253:35" pos:end="253:39">width</name></name><operator pos:start="253:40" pos:end="253:40">*</operator><name pos:start="253:41" pos:end="253:53"><name pos:start="253:41" pos:end="253:45">avctx</name><operator pos:start="253:46" pos:end="253:47">-&gt;</operator><name pos:start="253:48" pos:end="253:53">height</name></name> <operator pos:start="253:55" pos:end="253:55">&gt;</operator> <name pos:start="253:57" pos:end="253:63">buf_end</name> <operator pos:start="253:65" pos:end="253:65">-</operator> <name pos:start="253:67" pos:end="253:69">buf</name></expr>)</condition> <block pos:start="253:72" pos:end="259:5">{<block_content pos:start="255:9" pos:end="257:18">

        <expr_stmt pos:start="255:9" pos:end="255:74"><expr pos:start="255:9" pos:end="255:73"><call pos:start="255:9" pos:end="255:73"><name pos:start="255:9" pos:end="255:14">av_log</name><argument_list pos:start="255:15" pos:end="255:73">(<argument pos:start="255:16" pos:end="255:20"><expr pos:start="255:16" pos:end="255:20"><name pos:start="255:16" pos:end="255:20">avctx</name></expr></argument>, <argument pos:start="255:23" pos:end="255:34"><expr pos:start="255:23" pos:end="255:34"><name pos:start="255:23" pos:end="255:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="255:37" pos:end="255:72"><expr pos:start="255:37" pos:end="255:72"><literal type="string" pos:start="255:37" pos:end="255:72">"Overread buffer. Invalid header?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="257:9" pos:end="257:18">return <expr pos:start="257:16" pos:end="257:17"><operator pos:start="257:16" pos:end="257:16">-</operator><literal type="number" pos:start="257:17" pos:end="257:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="261:5" pos:end="331:5">switch <condition pos:start="261:12" pos:end="261:27">(<expr pos:start="261:13" pos:end="261:26"><name pos:start="261:13" pos:end="261:26">bits_per_color</name></expr>)</condition> <block pos:start="261:29" pos:end="331:5">{<block_content pos:start="263:9" pos:end="329:18">

        <case pos:start="263:9" pos:end="263:16">case <expr pos:start="263:14" pos:end="263:15"><literal type="number" pos:start="263:14" pos:end="263:15">10</literal></expr>:</case>

            <for pos:start="265:13" pos:end="285:13">for <control pos:start="265:17" pos:end="265:47">(<init pos:start="265:18" pos:end="265:23"><expr pos:start="265:18" pos:end="265:22"><name pos:start="265:18" pos:end="265:18">x</name> <operator pos:start="265:20" pos:end="265:20">=</operator> <literal type="number" pos:start="265:22" pos:end="265:22">0</literal></expr>;</init> <condition pos:start="265:25" pos:end="265:42"><expr pos:start="265:25" pos:end="265:41"><name pos:start="265:25" pos:end="265:25">x</name> <operator pos:start="265:27" pos:end="265:27">&lt;</operator> <name pos:start="265:29" pos:end="265:41"><name pos:start="265:29" pos:end="265:33">avctx</name><operator pos:start="265:34" pos:end="265:35">-&gt;</operator><name pos:start="265:36" pos:end="265:41">height</name></name></expr>;</condition> <incr pos:start="265:44" pos:end="265:46"><expr pos:start="265:44" pos:end="265:46"><name pos:start="265:44" pos:end="265:44">x</name><operator pos:start="265:45" pos:end="265:46">++</operator></expr></incr>)</control> <block pos:start="265:49" pos:end="285:13">{<block_content pos:start="267:16" pos:end="283:29">

               <decl_stmt pos:start="267:16" pos:end="267:46"><decl pos:start="267:16" pos:end="267:45"><type pos:start="267:16" pos:end="267:25"><name pos:start="267:16" pos:end="267:23">uint16_t</name> <modifier pos:start="267:25" pos:end="267:25">*</modifier></type><name pos:start="267:26" pos:end="267:28">dst</name> <init pos:start="267:30" pos:end="267:45">= <expr pos:start="267:32" pos:end="267:45"><operator pos:start="267:32" pos:end="267:32">(</operator><name pos:start="267:33" pos:end="267:40">uint16_t</name><operator pos:start="267:41" pos:end="267:41">*</operator><operator pos:start="267:42" pos:end="267:42">)</operator><name pos:start="267:43" pos:end="267:45">ptr</name></expr></init></decl>;</decl_stmt>

               <for pos:start="269:16" pos:end="281:16">for <control pos:start="269:20" pos:end="269:49">(<init pos:start="269:21" pos:end="269:26"><expr pos:start="269:21" pos:end="269:25"><name pos:start="269:21" pos:end="269:21">y</name> <operator pos:start="269:23" pos:end="269:23">=</operator> <literal type="number" pos:start="269:25" pos:end="269:25">0</literal></expr>;</init> <condition pos:start="269:28" pos:end="269:44"><expr pos:start="269:28" pos:end="269:43"><name pos:start="269:28" pos:end="269:28">y</name> <operator pos:start="269:30" pos:end="269:30">&lt;</operator> <name pos:start="269:32" pos:end="269:43"><name pos:start="269:32" pos:end="269:36">avctx</name><operator pos:start="269:37" pos:end="269:38">-&gt;</operator><name pos:start="269:39" pos:end="269:43">width</name></name></expr>;</condition> <incr pos:start="269:46" pos:end="269:48"><expr pos:start="269:46" pos:end="269:48"><name pos:start="269:46" pos:end="269:46">y</name><operator pos:start="269:47" pos:end="269:48">++</operator></expr></incr>)</control> <block pos:start="269:51" pos:end="281:16">{<block_content pos:start="271:20" pos:end="279:56">

                   <expr_stmt pos:start="271:20" pos:end="271:52"><expr pos:start="271:20" pos:end="271:51"><name pos:start="271:20" pos:end="271:28">rgbBuffer</name> <operator pos:start="271:30" pos:end="271:30">=</operator> <call pos:start="271:32" pos:end="271:51"><name pos:start="271:32" pos:end="271:37">read32</name><argument_list pos:start="271:38" pos:end="271:51">(<argument pos:start="271:39" pos:end="271:42"><expr pos:start="271:39" pos:end="271:42"><operator pos:start="271:39" pos:end="271:39">&amp;</operator><name pos:start="271:40" pos:end="271:42">buf</name></expr></argument>, <argument pos:start="271:45" pos:end="271:50"><expr pos:start="271:45" pos:end="271:50"><name pos:start="271:45" pos:end="271:50">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <comment type="line" pos:start="273:20" pos:end="273:70">// Read out the 10-bit colors and convert to 16-bit</comment>

                   <expr_stmt pos:start="275:20" pos:end="275:56"><expr pos:start="275:20" pos:end="275:55"><operator pos:start="275:20" pos:end="275:20">*</operator><name pos:start="275:21" pos:end="275:23">dst</name><operator pos:start="275:24" pos:end="275:25">++</operator> <operator pos:start="275:27" pos:end="275:27">=</operator> <call pos:start="275:29" pos:end="275:55"><name pos:start="275:29" pos:end="275:38">make_16bit</name><argument_list pos:start="275:39" pos:end="275:55">(<argument pos:start="275:40" pos:end="275:54"><expr pos:start="275:40" pos:end="275:54"><name pos:start="275:40" pos:end="275:48">rgbBuffer</name> <operator pos:start="275:50" pos:end="275:51">&gt;&gt;</operator> <literal type="number" pos:start="275:53" pos:end="275:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="277:20" pos:end="277:56"><expr pos:start="277:20" pos:end="277:55"><operator pos:start="277:20" pos:end="277:20">*</operator><name pos:start="277:21" pos:end="277:23">dst</name><operator pos:start="277:24" pos:end="277:25">++</operator> <operator pos:start="277:27" pos:end="277:27">=</operator> <call pos:start="277:29" pos:end="277:55"><name pos:start="277:29" pos:end="277:38">make_16bit</name><argument_list pos:start="277:39" pos:end="277:55">(<argument pos:start="277:40" pos:end="277:54"><expr pos:start="277:40" pos:end="277:54"><name pos:start="277:40" pos:end="277:48">rgbBuffer</name> <operator pos:start="277:50" pos:end="277:51">&gt;&gt;</operator>  <literal type="number" pos:start="277:54" pos:end="277:54">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="279:20" pos:end="279:56"><expr pos:start="279:20" pos:end="279:55"><operator pos:start="279:20" pos:end="279:20">*</operator><name pos:start="279:21" pos:end="279:23">dst</name><operator pos:start="279:24" pos:end="279:25">++</operator> <operator pos:start="279:27" pos:end="279:27">=</operator> <call pos:start="279:29" pos:end="279:55"><name pos:start="279:29" pos:end="279:38">make_16bit</name><argument_list pos:start="279:39" pos:end="279:55">(<argument pos:start="279:40" pos:end="279:54"><expr pos:start="279:40" pos:end="279:54"><name pos:start="279:40" pos:end="279:48">rgbBuffer</name> <operator pos:start="279:50" pos:end="279:51">&lt;&lt;</operator>  <literal type="number" pos:start="279:54" pos:end="279:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

               </block_content>}</block></for>

               <expr_stmt pos:start="283:16" pos:end="283:29"><expr pos:start="283:16" pos:end="283:28"><name pos:start="283:16" pos:end="283:18">ptr</name> <operator pos:start="283:20" pos:end="283:21">+=</operator> <name pos:start="283:23" pos:end="283:28">stride</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="287:13" pos:end="287:18">break;</break>

        <case pos:start="289:9" pos:end="289:15">case <expr pos:start="289:14" pos:end="289:14"><literal type="number" pos:start="289:14" pos:end="289:14">8</literal></expr>:</case>

        <case pos:start="291:9" pos:end="291:16">case <expr pos:start="291:14" pos:end="291:15"><literal type="number" pos:start="291:14" pos:end="291:15">12</literal></expr>:</case> <comment type="line" pos:start="291:18" pos:end="291:42">// Treat 12-bit as 16-bit</comment>

        <case pos:start="293:9" pos:end="293:16">case <expr pos:start="293:14" pos:end="293:15"><literal type="number" pos:start="293:14" pos:end="293:15">16</literal></expr>:</case>

            <if_stmt pos:start="295:13" pos:end="327:13"><if pos:start="295:13" pos:end="307:13">if <condition pos:start="295:16" pos:end="295:57">(<expr pos:start="295:17" pos:end="295:56"><name pos:start="295:17" pos:end="295:34">source_packet_size</name> <operator pos:start="295:36" pos:end="295:37">==</operator> <name pos:start="295:39" pos:end="295:56">target_packet_size</name></expr>)</condition> <block pos:start="295:59" pos:end="307:13">{<block_content pos:start="297:17" pos:end="305:17">

                <for pos:start="297:17" pos:end="305:17">for <control pos:start="297:21" pos:end="297:51">(<init pos:start="297:22" pos:end="297:27"><expr pos:start="297:22" pos:end="297:26"><name pos:start="297:22" pos:end="297:22">x</name> <operator pos:start="297:24" pos:end="297:24">=</operator> <literal type="number" pos:start="297:26" pos:end="297:26">0</literal></expr>;</init> <condition pos:start="297:29" pos:end="297:46"><expr pos:start="297:29" pos:end="297:45"><name pos:start="297:29" pos:end="297:29">x</name> <operator pos:start="297:31" pos:end="297:31">&lt;</operator> <name pos:start="297:33" pos:end="297:45"><name pos:start="297:33" pos:end="297:37">avctx</name><operator pos:start="297:38" pos:end="297:39">-&gt;</operator><name pos:start="297:40" pos:end="297:45">height</name></name></expr>;</condition> <incr pos:start="297:48" pos:end="297:50"><expr pos:start="297:48" pos:end="297:50"><name pos:start="297:48" pos:end="297:48">x</name><operator pos:start="297:49" pos:end="297:50">++</operator></expr></incr>)</control> <block pos:start="297:53" pos:end="305:17">{<block_content pos:start="299:21" pos:end="303:59">

                    <expr_stmt pos:start="299:21" pos:end="299:70"><expr pos:start="299:21" pos:end="299:69"><call pos:start="299:21" pos:end="299:69"><name pos:start="299:21" pos:end="299:26">memcpy</name><argument_list pos:start="299:27" pos:end="299:69">(<argument pos:start="299:28" pos:end="299:30"><expr pos:start="299:28" pos:end="299:30"><name pos:start="299:28" pos:end="299:30">ptr</name></expr></argument>, <argument pos:start="299:33" pos:end="299:35"><expr pos:start="299:33" pos:end="299:35"><name pos:start="299:33" pos:end="299:35">buf</name></expr></argument>, <argument pos:start="299:38" pos:end="299:68"><expr pos:start="299:38" pos:end="299:68"><name pos:start="299:38" pos:end="299:55">target_packet_size</name><operator pos:start="299:56" pos:end="299:56">*</operator><name pos:start="299:57" pos:end="299:68"><name pos:start="299:57" pos:end="299:61">avctx</name><operator pos:start="299:62" pos:end="299:63">-&gt;</operator><name pos:start="299:64" pos:end="299:68">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="301:21" pos:end="301:34"><expr pos:start="301:21" pos:end="301:33"><name pos:start="301:21" pos:end="301:23">ptr</name> <operator pos:start="301:25" pos:end="301:26">+=</operator> <name pos:start="301:28" pos:end="301:33">stride</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="303:21" pos:end="303:59"><expr pos:start="303:21" pos:end="303:58"><name pos:start="303:21" pos:end="303:23">buf</name> <operator pos:start="303:25" pos:end="303:26">+=</operator> <name pos:start="303:28" pos:end="303:45">source_packet_size</name><operator pos:start="303:46" pos:end="303:46">*</operator><name pos:start="303:47" pos:end="303:58"><name pos:start="303:47" pos:end="303:51">avctx</name><operator pos:start="303:52" pos:end="303:53">-&gt;</operator><name pos:start="303:54" pos:end="303:58">width</name></name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="307:15" pos:end="327:13">else <block pos:start="307:20" pos:end="327:13">{<block_content pos:start="309:17" pos:end="325:17">

                <for pos:start="309:17" pos:end="325:17">for <control pos:start="309:21" pos:end="309:51">(<init pos:start="309:22" pos:end="309:27"><expr pos:start="309:22" pos:end="309:26"><name pos:start="309:22" pos:end="309:22">x</name> <operator pos:start="309:24" pos:end="309:24">=</operator> <literal type="number" pos:start="309:26" pos:end="309:26">0</literal></expr>;</init> <condition pos:start="309:29" pos:end="309:46"><expr pos:start="309:29" pos:end="309:45"><name pos:start="309:29" pos:end="309:29">x</name> <operator pos:start="309:31" pos:end="309:31">&lt;</operator> <name pos:start="309:33" pos:end="309:45"><name pos:start="309:33" pos:end="309:37">avctx</name><operator pos:start="309:38" pos:end="309:39">-&gt;</operator><name pos:start="309:40" pos:end="309:45">height</name></name></expr>;</condition> <incr pos:start="309:48" pos:end="309:50"><expr pos:start="309:48" pos:end="309:50"><name pos:start="309:48" pos:end="309:48">x</name><operator pos:start="309:49" pos:end="309:50">++</operator></expr></incr>)</control> <block pos:start="309:53" pos:end="325:17">{<block_content pos:start="311:21" pos:end="323:34">

                    <decl_stmt pos:start="311:21" pos:end="311:39"><decl pos:start="311:21" pos:end="311:38"><type pos:start="311:21" pos:end="311:29"><name pos:start="311:21" pos:end="311:27">uint8_t</name> <modifier pos:start="311:29" pos:end="311:29">*</modifier></type><name pos:start="311:30" pos:end="311:32">dst</name> <init pos:start="311:34" pos:end="311:38">= <expr pos:start="311:36" pos:end="311:38"><name pos:start="311:36" pos:end="311:38">ptr</name></expr></init></decl>;</decl_stmt>

                    <for pos:start="313:21" pos:end="321:21">for <control pos:start="313:25" pos:end="313:54">(<init pos:start="313:26" pos:end="313:31"><expr pos:start="313:26" pos:end="313:30"><name pos:start="313:26" pos:end="313:26">y</name> <operator pos:start="313:28" pos:end="313:28">=</operator> <literal type="number" pos:start="313:30" pos:end="313:30">0</literal></expr>;</init> <condition pos:start="313:33" pos:end="313:49"><expr pos:start="313:33" pos:end="313:48"><name pos:start="313:33" pos:end="313:33">y</name> <operator pos:start="313:35" pos:end="313:35">&lt;</operator> <name pos:start="313:37" pos:end="313:48"><name pos:start="313:37" pos:end="313:41">avctx</name><operator pos:start="313:42" pos:end="313:43">-&gt;</operator><name pos:start="313:44" pos:end="313:48">width</name></name></expr>;</condition> <incr pos:start="313:51" pos:end="313:53"><expr pos:start="313:51" pos:end="313:53"><name pos:start="313:51" pos:end="313:51">y</name><operator pos:start="313:52" pos:end="313:53">++</operator></expr></incr>)</control> <block pos:start="313:56" pos:end="321:21">{<block_content pos:start="315:25" pos:end="319:50">

                        <expr_stmt pos:start="315:25" pos:end="315:61"><expr pos:start="315:25" pos:end="315:60"><call pos:start="315:25" pos:end="315:60"><name pos:start="315:25" pos:end="315:30">memcpy</name><argument_list pos:start="315:31" pos:end="315:60">(<argument pos:start="315:32" pos:end="315:34"><expr pos:start="315:32" pos:end="315:34"><name pos:start="315:32" pos:end="315:34">dst</name></expr></argument>, <argument pos:start="315:37" pos:end="315:39"><expr pos:start="315:37" pos:end="315:39"><name pos:start="315:37" pos:end="315:39">buf</name></expr></argument>, <argument pos:start="315:42" pos:end="315:59"><expr pos:start="315:42" pos:end="315:59"><name pos:start="315:42" pos:end="315:59">target_packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="317:25" pos:end="317:50"><expr pos:start="317:25" pos:end="317:49"><name pos:start="317:25" pos:end="317:27">dst</name> <operator pos:start="317:29" pos:end="317:30">+=</operator> <name pos:start="317:32" pos:end="317:49">target_packet_size</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="319:25" pos:end="319:50"><expr pos:start="319:25" pos:end="319:49"><name pos:start="319:25" pos:end="319:27">buf</name> <operator pos:start="319:29" pos:end="319:30">+=</operator> <name pos:start="319:32" pos:end="319:49">source_packet_size</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="323:21" pos:end="323:34"><expr pos:start="323:21" pos:end="323:33"><name pos:start="323:21" pos:end="323:23">ptr</name> <operator pos:start="323:25" pos:end="323:26">+=</operator> <name pos:start="323:28" pos:end="323:33">stride</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <break pos:start="329:13" pos:end="329:18">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="335:5" pos:end="335:28"><expr pos:start="335:5" pos:end="335:27"><operator pos:start="335:5" pos:end="335:5">*</operator><name pos:start="335:6" pos:end="335:12">picture</name>   <operator pos:start="335:16" pos:end="335:16">=</operator> <name pos:start="335:18" pos:end="335:27"><name pos:start="335:18" pos:end="335:18">s</name><operator pos:start="335:19" pos:end="335:20">-&gt;</operator><name pos:start="335:21" pos:end="335:27">picture</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="337:5" pos:end="337:35"><expr pos:start="337:5" pos:end="337:34"><operator pos:start="337:5" pos:end="337:5">*</operator><name pos:start="337:6" pos:end="337:14">data_size</name> <operator pos:start="337:16" pos:end="337:16">=</operator> <sizeof pos:start="337:18" pos:end="337:34">sizeof<argument_list pos:start="337:24" pos:end="337:34">(<argument pos:start="337:25" pos:end="337:33"><expr pos:start="337:25" pos:end="337:33"><name pos:start="337:25" pos:end="337:33">AVPicture</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <return pos:start="341:5" pos:end="341:20">return <expr pos:start="341:12" pos:end="341:19"><name pos:start="341:12" pos:end="341:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
