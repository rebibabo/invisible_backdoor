<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16517.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">xio3130_upstream_initfn</name><parameter_list pos:start="1:35" pos:end="1:48">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:46"><name pos:start="1:36" pos:end="1:44">PCIDevice</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">d</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:14">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:13">PCIBridge</name><modifier pos:start="5:14" pos:end="5:14">*</modifier></type> <name pos:start="5:16" pos:end="5:17">br</name> <init pos:start="5:19" pos:end="5:48">= <expr pos:start="5:21" pos:end="5:48"><call pos:start="5:21" pos:end="5:48"><name pos:start="5:21" pos:end="5:29">DO_UPCAST</name><argument_list pos:start="5:30" pos:end="5:48">(<argument pos:start="5:31" pos:end="5:39"><expr pos:start="5:31" pos:end="5:39"><name pos:start="5:31" pos:end="5:39">PCIBridge</name></expr></argument>, <argument pos:start="5:42" pos:end="5:44"><expr pos:start="5:42" pos:end="5:44"><name pos:start="5:42" pos:end="5:44">dev</name></expr></argument>, <argument pos:start="5:47" pos:end="5:47"><expr pos:start="5:47" pos:end="5:47"><name pos:start="5:47" pos:end="5:47">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">PCIEPort</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">p</name> <init pos:start="7:17" pos:end="7:45">= <expr pos:start="7:19" pos:end="7:45"><call pos:start="7:19" pos:end="7:45"><name pos:start="7:19" pos:end="7:27">DO_UPCAST</name><argument_list pos:start="7:28" pos:end="7:45">(<argument pos:start="7:29" pos:end="7:36"><expr pos:start="7:29" pos:end="7:36"><name pos:start="7:29" pos:end="7:36">PCIEPort</name></expr></argument>, <argument pos:start="7:39" pos:end="7:40"><expr pos:start="7:39" pos:end="7:40"><name pos:start="7:39" pos:end="7:40">br</name></expr></argument>, <argument pos:start="7:43" pos:end="7:44"><expr pos:start="7:43" pos:end="7:44"><name pos:start="7:43" pos:end="7:44">br</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">tmp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:30"><expr pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:6">rc</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <call pos:start="15:10" pos:end="15:29"><name pos:start="15:10" pos:end="15:26">pci_bridge_initfn</name><argument_list pos:start="15:27" pos:end="15:29">(<argument pos:start="15:28" pos:end="15:28"><expr pos:start="15:28" pos:end="15:28"><name pos:start="15:28" pos:end="15:28">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:15">(<expr pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:10">rc</name> <operator pos:start="17:12" pos:end="17:12">&lt;</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>)</condition> <block pos:start="17:17" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:18">

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><name pos:start="19:16" pos:end="19:17">rc</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><call pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:22">pcie_port_init_reg</name><argument_list pos:start="25:23" pos:end="25:25">(<argument pos:start="25:24" pos:end="25:24"><expr pos:start="25:24" pos:end="25:24"><name pos:start="25:24" pos:end="25:24">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:58"><expr pos:start="27:5" pos:end="27:57"><call pos:start="27:5" pos:end="27:57"><name pos:start="27:5" pos:end="27:28">pci_config_set_vendor_id</name><argument_list pos:start="27:29" pos:end="27:57">(<argument pos:start="27:30" pos:end="27:38"><expr pos:start="27:30" pos:end="27:38"><name pos:start="27:30" pos:end="27:38"><name pos:start="27:30" pos:end="27:30">d</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:38">config</name></name></expr></argument>, <argument pos:start="27:41" pos:end="27:56"><expr pos:start="27:41" pos:end="27:56"><name pos:start="27:41" pos:end="27:56">PCI_VENDOR_ID_TI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:67"><expr pos:start="29:5" pos:end="29:66"><call pos:start="29:5" pos:end="29:66"><name pos:start="29:5" pos:end="29:28">pci_config_set_device_id</name><argument_list pos:start="29:29" pos:end="29:66">(<argument pos:start="29:30" pos:end="29:38"><expr pos:start="29:30" pos:end="29:38"><name pos:start="29:30" pos:end="29:38"><name pos:start="29:30" pos:end="29:30">d</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:38">config</name></name></expr></argument>, <argument pos:start="29:41" pos:end="29:65"><expr pos:start="29:41" pos:end="29:65"><name pos:start="29:41" pos:end="29:65">PCI_DEVICE_ID_TI_XIO3130U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:50"><expr pos:start="31:5" pos:end="31:49"><name pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:5">d</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:13">config</name><index pos:start="31:14" pos:end="31:30">[<expr pos:start="31:15" pos:end="31:29"><name pos:start="31:15" pos:end="31:29">PCI_REVISION_ID</name></expr>]</index></name> <operator pos:start="31:32" pos:end="31:32">=</operator> <name pos:start="31:34" pos:end="31:49">XIO3130_REVISION</name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="39:71"><expr pos:start="35:5" pos:end="39:70"><name pos:start="35:5" pos:end="35:6">rc</name> <operator pos:start="35:8" pos:end="35:8">=</operator> <call pos:start="35:10" pos:end="39:70"><name pos:start="35:10" pos:end="35:17">msi_init</name><argument_list pos:start="35:18" pos:end="39:70">(<argument pos:start="35:19" pos:end="35:19"><expr pos:start="35:19" pos:end="35:19"><name pos:start="35:19" pos:end="35:19">d</name></expr></argument>, <argument pos:start="35:22" pos:end="35:39"><expr pos:start="35:22" pos:end="35:39"><name pos:start="35:22" pos:end="35:39">XIO3130_MSI_OFFSET</name></expr></argument>, <argument pos:start="35:42" pos:end="35:62"><expr pos:start="35:42" pos:end="35:62"><name pos:start="35:42" pos:end="35:62">XIO3130_MSI_NR_VECTOR</name></expr></argument>,

                  <argument pos:start="37:19" pos:end="37:67"><expr pos:start="37:19" pos:end="37:67"><name pos:start="37:19" pos:end="37:45">XIO3130_MSI_SUPPORTED_FLAGS</name> <operator pos:start="37:47" pos:end="37:47">&amp;</operator> <name pos:start="37:49" pos:end="37:67">PCI_MSI_FLAGS_64BIT</name></expr></argument>,

                  <argument pos:start="39:19" pos:end="39:69"><expr pos:start="39:19" pos:end="39:69"><name pos:start="39:19" pos:end="39:45">XIO3130_MSI_SUPPORTED_FLAGS</name> <operator pos:start="39:47" pos:end="39:47">&amp;</operator> <name pos:start="39:49" pos:end="39:69">PCI_MSI_FLAGS_MASKBIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:15">(<expr pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:10">rc</name> <operator pos:start="41:12" pos:end="41:12">&lt;</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>)</condition> <block pos:start="41:17" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:24">

        <goto pos:start="43:9" pos:end="43:24">goto <name pos:start="43:14" pos:end="43:23">err_bridge</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="49:71"><expr pos:start="47:5" pos:end="49:70"><name pos:start="47:5" pos:end="47:6">rc</name> <operator pos:start="47:8" pos:end="47:8">=</operator> <call pos:start="47:10" pos:end="49:70"><name pos:start="47:10" pos:end="47:30">pci_bridge_ssvid_init</name><argument_list pos:start="47:31" pos:end="49:70">(<argument pos:start="47:32" pos:end="47:32"><expr pos:start="47:32" pos:end="47:32"><name pos:start="47:32" pos:end="47:32">d</name></expr></argument>, <argument pos:start="47:35" pos:end="47:54"><expr pos:start="47:35" pos:end="47:54"><name pos:start="47:35" pos:end="47:54">XIO3130_SSVID_OFFSET</name></expr></argument>,

                               <argument pos:start="49:32" pos:end="49:49"><expr pos:start="49:32" pos:end="49:49"><name pos:start="49:32" pos:end="49:49">XIO3130_SSVID_SVID</name></expr></argument>, <argument pos:start="49:52" pos:end="49:69"><expr pos:start="49:52" pos:end="49:69"><name pos:start="49:52" pos:end="49:69">XIO3130_SSVID_SSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:15">(<expr pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:10">rc</name> <operator pos:start="51:12" pos:end="51:12">&lt;</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>)</condition> <block pos:start="51:17" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:24">

        <goto pos:start="53:9" pos:end="53:24">goto <name pos:start="53:14" pos:end="53:23">err_bridge</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="59:32"><expr pos:start="57:5" pos:end="59:31"><name pos:start="57:5" pos:end="57:6">rc</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <call pos:start="57:10" pos:end="59:31"><name pos:start="57:10" pos:end="57:22">pcie_cap_init</name><argument_list pos:start="57:23" pos:end="59:31">(<argument pos:start="57:24" pos:end="57:24"><expr pos:start="57:24" pos:end="57:24"><name pos:start="57:24" pos:end="57:24">d</name></expr></argument>, <argument pos:start="57:27" pos:end="57:44"><expr pos:start="57:27" pos:end="57:44"><name pos:start="57:27" pos:end="57:44">XIO3130_EXP_OFFSET</name></expr></argument>, <argument pos:start="57:47" pos:end="57:67"><expr pos:start="57:47" pos:end="57:67"><name pos:start="57:47" pos:end="57:67">PCI_EXP_TYPE_UPSTREAM</name></expr></argument>,

                       <argument pos:start="59:24" pos:end="59:30"><expr pos:start="59:24" pos:end="59:30"><name pos:start="59:24" pos:end="59:30"><name pos:start="59:24" pos:end="59:24">p</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:30">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:15">(<expr pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:10">rc</name> <operator pos:start="61:12" pos:end="61:12">&lt;</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>)</condition> <block pos:start="61:17" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:21">

        <goto pos:start="63:9" pos:end="63:21">goto <name pos:start="63:14" pos:end="63:20">err_msi</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:25"><expr pos:start="67:5" pos:end="67:24"><call pos:start="67:5" pos:end="67:24"><name pos:start="67:5" pos:end="67:21">pcie_cap_flr_init</name><argument_list pos:start="67:22" pos:end="67:24">(<argument pos:start="67:23" pos:end="67:23"><expr pos:start="67:23" pos:end="67:23"><name pos:start="67:23" pos:end="67:23">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:28"><expr pos:start="69:5" pos:end="69:27"><call pos:start="69:5" pos:end="69:27"><name pos:start="69:5" pos:end="69:24">pcie_cap_deverr_init</name><argument_list pos:start="69:25" pos:end="69:27">(<argument pos:start="69:26" pos:end="69:26"><expr pos:start="69:26" pos:end="69:26"><name pos:start="69:26" pos:end="69:26">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:46"><expr pos:start="71:5" pos:end="71:45"><name pos:start="71:5" pos:end="71:6">rc</name> <operator pos:start="71:8" pos:end="71:8">=</operator> <call pos:start="71:10" pos:end="71:45"><name pos:start="71:10" pos:end="71:22">pcie_aer_init</name><argument_list pos:start="71:23" pos:end="71:45">(<argument pos:start="71:24" pos:end="71:24"><expr pos:start="71:24" pos:end="71:24"><name pos:start="71:24" pos:end="71:24">d</name></expr></argument>, <argument pos:start="71:27" pos:end="71:44"><expr pos:start="71:27" pos:end="71:44"><name pos:start="71:27" pos:end="71:44">XIO3130_AER_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:15">(<expr pos:start="73:9" pos:end="73:14"><name pos:start="73:9" pos:end="73:10">rc</name> <operator pos:start="73:12" pos:end="73:12">&lt;</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>)</condition> <block pos:start="73:17" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:17">

        <goto pos:start="75:9" pos:end="75:17">goto <name pos:start="75:14" pos:end="75:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="81:5" pos:end="81:13">return <expr pos:start="81:12" pos:end="81:12"><literal type="number" pos:start="81:12" pos:end="81:12">0</literal></expr>;</return>



<label pos:start="85:1" pos:end="85:4"><name pos:start="85:1" pos:end="85:3">err</name>:</label>

    <expr_stmt pos:start="87:5" pos:end="87:21"><expr pos:start="87:5" pos:end="87:20"><call pos:start="87:5" pos:end="87:20"><name pos:start="87:5" pos:end="87:17">pcie_cap_exit</name><argument_list pos:start="87:18" pos:end="87:20">(<argument pos:start="87:19" pos:end="87:19"><expr pos:start="87:19" pos:end="87:19"><name pos:start="87:19" pos:end="87:19">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="89:1" pos:end="89:8"><name pos:start="89:1" pos:end="89:7">err_msi</name>:</label>

    <expr_stmt pos:start="91:5" pos:end="91:18"><expr pos:start="91:5" pos:end="91:17"><call pos:start="91:5" pos:end="91:17"><name pos:start="91:5" pos:end="91:14">msi_uninit</name><argument_list pos:start="91:15" pos:end="91:17">(<argument pos:start="91:16" pos:end="91:16"><expr pos:start="91:16" pos:end="91:16"><name pos:start="91:16" pos:end="91:16">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="93:1" pos:end="93:11"><name pos:start="93:1" pos:end="93:10">err_bridge</name>:</label>

    <expr_stmt pos:start="95:5" pos:end="95:32"><expr pos:start="95:5" pos:end="95:31"><name pos:start="95:5" pos:end="95:7">tmp</name> <operator pos:start="95:9" pos:end="95:9">=</operator>  <call pos:start="95:12" pos:end="95:31"><name pos:start="95:12" pos:end="95:28">pci_bridge_exitfn</name><argument_list pos:start="95:29" pos:end="95:31">(<argument pos:start="95:30" pos:end="95:30"><expr pos:start="95:30" pos:end="95:30"><name pos:start="95:30" pos:end="95:30">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:17"><expr pos:start="97:5" pos:end="97:16"><call pos:start="97:5" pos:end="97:16"><name pos:start="97:5" pos:end="97:10">assert</name><argument_list pos:start="97:11" pos:end="97:16">(<argument pos:start="97:12" pos:end="97:15"><expr pos:start="97:12" pos:end="97:15"><operator pos:start="97:12" pos:end="97:12">!</operator><name pos:start="97:13" pos:end="97:15">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="99:5" pos:end="99:14">return <expr pos:start="99:12" pos:end="99:13"><name pos:start="99:12" pos:end="99:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
