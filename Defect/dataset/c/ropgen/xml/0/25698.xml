<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25698.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">rocker_io_writel</name><parameter_list pos:start="1:29" pos:end="1:69">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:54"><decl pos:start="1:44" pos:end="1:54"><type pos:start="1:44" pos:end="1:54"><name pos:start="1:44" pos:end="1:49">hwaddr</name></type> <name pos:start="1:51" pos:end="1:54">addr</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:64">uint32_t</name></type> <name pos:start="1:66" pos:end="1:68">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:5">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">Rocker</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:13">r</name> <init pos:start="5:15" pos:end="5:22">= <expr pos:start="5:17" pos:end="5:22"><name pos:start="5:17" pos:end="5:22">opaque</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="81:5"><if pos:start="9:5" pos:end="81:5">if <condition pos:start="9:8" pos:end="9:41">(<expr pos:start="9:9" pos:end="9:40"><call pos:start="9:9" pos:end="9:40"><name pos:start="9:9" pos:end="9:31">rocker_addr_is_desc_reg</name><argument_list pos:start="9:32" pos:end="9:40">(<argument pos:start="9:33" pos:end="9:33"><expr pos:start="9:33" pos:end="9:33"><name pos:start="9:33" pos:end="9:33">r</name></expr></argument>, <argument pos:start="9:36" pos:end="9:39"><expr pos:start="9:36" pos:end="9:39"><name pos:start="9:36" pos:end="9:39">addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:43" pos:end="81:5">{<block_content pos:start="11:9" pos:end="79:15">

        <decl_stmt pos:start="11:9" pos:end="11:49"><decl pos:start="11:9" pos:end="11:48"><type pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16">unsigned</name></type> <name pos:start="11:18" pos:end="11:22">index</name> <init pos:start="11:24" pos:end="11:48">= <expr pos:start="11:26" pos:end="11:48"><call pos:start="11:26" pos:end="11:48"><name pos:start="11:26" pos:end="11:42">ROCKER_RING_INDEX</name><argument_list pos:start="11:43" pos:end="11:48">(<argument pos:start="11:44" pos:end="11:47"><expr pos:start="11:44" pos:end="11:47"><name pos:start="11:44" pos:end="11:47">addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:54"><decl pos:start="13:9" pos:end="13:53"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">unsigned</name></type> <name pos:start="13:18" pos:end="13:23">offset</name> <init pos:start="13:25" pos:end="13:53">= <expr pos:start="13:27" pos:end="13:53"><name pos:start="13:27" pos:end="13:30">addr</name> <operator pos:start="13:32" pos:end="13:32">&amp;</operator> <name pos:start="13:34" pos:end="13:53">ROCKER_DMA_DESC_MASK</name></expr></init></decl>;</decl_stmt>



        <switch pos:start="17:9" pos:end="77:9">switch <condition pos:start="17:16" pos:end="17:23">(<expr pos:start="17:17" pos:end="17:22"><name pos:start="17:17" pos:end="17:22">offset</name></expr>)</condition> <block pos:start="17:25" pos:end="77:9">{<block_content pos:start="19:9" pos:end="75:18">

        <case pos:start="19:9" pos:end="19:41">case <expr pos:start="19:14" pos:end="19:40"><name pos:start="19:14" pos:end="19:40">ROCKER_DMA_DESC_ADDR_OFFSET</name></expr>:</case>

            <expr_stmt pos:start="21:13" pos:end="21:39"><expr pos:start="21:13" pos:end="21:38"><name pos:start="21:13" pos:end="21:22"><name pos:start="21:13" pos:end="21:13">r</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:22">lower32</name></name> <operator pos:start="21:24" pos:end="21:24">=</operator> <operator pos:start="21:26" pos:end="21:26">(</operator><name pos:start="21:27" pos:end="21:34">uint64_t</name><operator pos:start="21:35" pos:end="21:35">)</operator><name pos:start="21:36" pos:end="21:38">val</name></expr>;</expr_stmt>

            <break pos:start="23:13" pos:end="23:18">break;</break>

        <case pos:start="25:9" pos:end="25:45">case <expr pos:start="25:14" pos:end="25:44"><name pos:start="25:14" pos:end="25:40">ROCKER_DMA_DESC_ADDR_OFFSET</name> <operator pos:start="25:42" pos:end="25:42">+</operator> <literal type="number" pos:start="25:44" pos:end="25:44">4</literal></expr>:</case>

            <expr_stmt pos:start="27:13" pos:end="29:72"><expr pos:start="27:13" pos:end="29:71"><call pos:start="27:13" pos:end="29:71"><name pos:start="27:13" pos:end="27:35">desc_ring_set_base_addr</name><argument_list pos:start="27:36" pos:end="29:71">(<argument pos:start="27:37" pos:end="27:51"><expr pos:start="27:37" pos:end="27:51"><name pos:start="27:37" pos:end="27:51"><name pos:start="27:37" pos:end="27:37">r</name><operator pos:start="27:38" pos:end="27:39">-&gt;</operator><name pos:start="27:40" pos:end="27:44">rings</name><index pos:start="27:45" pos:end="27:51">[<expr pos:start="27:46" pos:end="27:50"><name pos:start="27:46" pos:end="27:50">index</name></expr>]</index></name></expr></argument>,

                                    <argument pos:start="29:37" pos:end="29:70"><expr pos:start="29:37" pos:end="29:70"><operator pos:start="29:37" pos:end="29:37">(</operator><operator pos:start="29:38" pos:end="29:38">(</operator><name pos:start="29:39" pos:end="29:46">uint64_t</name><operator pos:start="29:47" pos:end="29:47">)</operator><name pos:start="29:48" pos:end="29:50">val</name><operator pos:start="29:51" pos:end="29:51">)</operator> <operator pos:start="29:53" pos:end="29:54">&lt;&lt;</operator> <literal type="number" pos:start="29:56" pos:end="29:57">32</literal> <operator pos:start="29:59" pos:end="29:59">|</operator> <name pos:start="29:61" pos:end="29:70"><name pos:start="29:61" pos:end="29:61">r</name><operator pos:start="29:62" pos:end="29:63">-&gt;</operator><name pos:start="29:64" pos:end="29:70">lower32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:27"><expr pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:22"><name pos:start="31:13" pos:end="31:13">r</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:22">lower32</name></name> <operator pos:start="31:24" pos:end="31:24">=</operator> <literal type="number" pos:start="31:26" pos:end="31:26">0</literal></expr>;</expr_stmt>

            <break pos:start="33:13" pos:end="33:18">break;</break>

        <case pos:start="35:9" pos:end="35:41">case <expr pos:start="35:14" pos:end="35:40"><name pos:start="35:14" pos:end="35:40">ROCKER_DMA_DESC_SIZE_OFFSET</name></expr>:</case>

            <expr_stmt pos:start="37:13" pos:end="37:53"><expr pos:start="37:13" pos:end="37:52"><call pos:start="37:13" pos:end="37:52"><name pos:start="37:13" pos:end="37:30">desc_ring_set_size</name><argument_list pos:start="37:31" pos:end="37:52">(<argument pos:start="37:32" pos:end="37:46"><expr pos:start="37:32" pos:end="37:46"><name pos:start="37:32" pos:end="37:46"><name pos:start="37:32" pos:end="37:32">r</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:39">rings</name><index pos:start="37:40" pos:end="37:46">[<expr pos:start="37:41" pos:end="37:45"><name pos:start="37:41" pos:end="37:45">index</name></expr>]</index></name></expr></argument>, <argument pos:start="37:49" pos:end="37:51"><expr pos:start="37:49" pos:end="37:51"><name pos:start="37:49" pos:end="37:51">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>

        <case pos:start="41:9" pos:end="41:41">case <expr pos:start="41:14" pos:end="41:40"><name pos:start="41:14" pos:end="41:40">ROCKER_DMA_DESC_HEAD_OFFSET</name></expr>:</case>

            <if_stmt pos:start="43:13" pos:end="47:13"><if pos:start="43:13" pos:end="47:13">if <condition pos:start="43:16" pos:end="43:57">(<expr pos:start="43:17" pos:end="43:56"><call pos:start="43:17" pos:end="43:56"><name pos:start="43:17" pos:end="43:34">desc_ring_set_head</name><argument_list pos:start="43:35" pos:end="43:56">(<argument pos:start="43:36" pos:end="43:50"><expr pos:start="43:36" pos:end="43:50"><name pos:start="43:36" pos:end="43:50"><name pos:start="43:36" pos:end="43:36">r</name><operator pos:start="43:37" pos:end="43:38">-&gt;</operator><name pos:start="43:39" pos:end="43:43">rings</name><index pos:start="43:44" pos:end="43:50">[<expr pos:start="43:45" pos:end="43:49"><name pos:start="43:45" pos:end="43:49">index</name></expr>]</index></name></expr></argument>, <argument pos:start="43:53" pos:end="43:55"><expr pos:start="43:53" pos:end="43:55"><name pos:start="43:53" pos:end="43:55">val</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:59" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:79">

                <expr_stmt pos:start="45:17" pos:end="45:79"><expr pos:start="45:17" pos:end="45:78"><call pos:start="45:17" pos:end="45:78"><name pos:start="45:17" pos:end="45:31">rocker_msix_irq</name><argument_list pos:start="45:32" pos:end="45:78">(<argument pos:start="45:33" pos:end="45:33"><expr pos:start="45:33" pos:end="45:33"><name pos:start="45:33" pos:end="45:33">r</name></expr></argument>, <argument pos:start="45:36" pos:end="45:77"><expr pos:start="45:36" pos:end="45:77"><call pos:start="45:36" pos:end="45:77"><name pos:start="45:36" pos:end="45:60">desc_ring_get_msix_vector</name><argument_list pos:start="45:61" pos:end="45:77">(<argument pos:start="45:62" pos:end="45:76"><expr pos:start="45:62" pos:end="45:76"><name pos:start="45:62" pos:end="45:76"><name pos:start="45:62" pos:end="45:62">r</name><operator pos:start="45:63" pos:end="45:64">-&gt;</operator><name pos:start="45:65" pos:end="45:69">rings</name><index pos:start="45:70" pos:end="45:76">[<expr pos:start="45:71" pos:end="45:75"><name pos:start="45:71" pos:end="45:75">index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        <case pos:start="51:9" pos:end="51:41">case <expr pos:start="51:14" pos:end="51:40"><name pos:start="51:14" pos:end="51:40">ROCKER_DMA_DESC_CTRL_OFFSET</name></expr>:</case>

            <expr_stmt pos:start="53:13" pos:end="53:53"><expr pos:start="53:13" pos:end="53:52"><call pos:start="53:13" pos:end="53:52"><name pos:start="53:13" pos:end="53:30">desc_ring_set_ctrl</name><argument_list pos:start="53:31" pos:end="53:52">(<argument pos:start="53:32" pos:end="53:46"><expr pos:start="53:32" pos:end="53:46"><name pos:start="53:32" pos:end="53:46"><name pos:start="53:32" pos:end="53:32">r</name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:39">rings</name><index pos:start="53:40" pos:end="53:46">[<expr pos:start="53:41" pos:end="53:45"><name pos:start="53:41" pos:end="53:45">index</name></expr>]</index></name></expr></argument>, <argument pos:start="53:49" pos:end="53:51"><expr pos:start="53:49" pos:end="53:51"><name pos:start="53:49" pos:end="53:51">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <case pos:start="57:9" pos:end="57:44">case <expr pos:start="57:14" pos:end="57:43"><name pos:start="57:14" pos:end="57:43">ROCKER_DMA_DESC_CREDITS_OFFSET</name></expr>:</case>

            <if_stmt pos:start="59:13" pos:end="63:13"><if pos:start="59:13" pos:end="63:13">if <condition pos:start="59:16" pos:end="59:60">(<expr pos:start="59:17" pos:end="59:59"><call pos:start="59:17" pos:end="59:59"><name pos:start="59:17" pos:end="59:37">desc_ring_ret_credits</name><argument_list pos:start="59:38" pos:end="59:59">(<argument pos:start="59:39" pos:end="59:53"><expr pos:start="59:39" pos:end="59:53"><name pos:start="59:39" pos:end="59:53"><name pos:start="59:39" pos:end="59:39">r</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:46">rings</name><index pos:start="59:47" pos:end="59:53">[<expr pos:start="59:48" pos:end="59:52"><name pos:start="59:48" pos:end="59:52">index</name></expr>]</index></name></expr></argument>, <argument pos:start="59:56" pos:end="59:58"><expr pos:start="59:56" pos:end="59:58"><name pos:start="59:56" pos:end="59:58">val</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:62" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:79">

                <expr_stmt pos:start="61:17" pos:end="61:79"><expr pos:start="61:17" pos:end="61:78"><call pos:start="61:17" pos:end="61:78"><name pos:start="61:17" pos:end="61:31">rocker_msix_irq</name><argument_list pos:start="61:32" pos:end="61:78">(<argument pos:start="61:33" pos:end="61:33"><expr pos:start="61:33" pos:end="61:33"><name pos:start="61:33" pos:end="61:33">r</name></expr></argument>, <argument pos:start="61:36" pos:end="61:77"><expr pos:start="61:36" pos:end="61:77"><call pos:start="61:36" pos:end="61:77"><name pos:start="61:36" pos:end="61:60">desc_ring_get_msix_vector</name><argument_list pos:start="61:61" pos:end="61:77">(<argument pos:start="61:62" pos:end="61:76"><expr pos:start="61:62" pos:end="61:76"><name pos:start="61:62" pos:end="61:76"><name pos:start="61:62" pos:end="61:62">r</name><operator pos:start="61:63" pos:end="61:64">-&gt;</operator><name pos:start="61:65" pos:end="61:69">rings</name><index pos:start="61:70" pos:end="61:76">[<expr pos:start="61:71" pos:end="61:75"><name pos:start="61:71" pos:end="61:75">index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="65:13" pos:end="65:18">break;</break>

        <default pos:start="67:9" pos:end="67:16">default:</default>

            <expr_stmt pos:start="69:13" pos:end="73:46"><expr pos:start="69:13" pos:end="73:45"><call pos:start="69:13" pos:end="73:45"><name pos:start="69:13" pos:end="69:19">DPRINTF</name><argument_list pos:start="69:20" pos:end="73:45">(<argument pos:start="69:21" pos:end="71:58"><expr pos:start="69:21" pos:end="71:58"><literal type="string" pos:start="69:21" pos:end="69:62">"not implemented dma reg write(l) addr=0x"</literal> <name pos:start="69:64" pos:end="69:77">TARGET_FMT_plx</name>

                    <literal type="string" pos:start="71:21" pos:end="71:58">" val=0x%08x (ring %d, addr=0x%02x)\n"</literal></expr></argument>,

                    <argument pos:start="73:21" pos:end="73:24"><expr pos:start="73:21" pos:end="73:24"><name pos:start="73:21" pos:end="73:24">addr</name></expr></argument>, <argument pos:start="73:27" pos:end="73:29"><expr pos:start="73:27" pos:end="73:29"><name pos:start="73:27" pos:end="73:29">val</name></expr></argument>, <argument pos:start="73:32" pos:end="73:36"><expr pos:start="73:32" pos:end="73:36"><name pos:start="73:32" pos:end="73:36">index</name></expr></argument>, <argument pos:start="73:39" pos:end="73:44"><expr pos:start="73:39" pos:end="73:44"><name pos:start="73:39" pos:end="73:44">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        </block_content>}</block></switch>

        <return pos:start="79:9" pos:end="79:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="85:5" pos:end="159:5">switch <condition pos:start="85:12" pos:end="85:17">(<expr pos:start="85:13" pos:end="85:16"><name pos:start="85:13" pos:end="85:16">addr</name></expr>)</condition> <block pos:start="85:19" pos:end="159:5">{<block_content pos:start="87:5" pos:end="157:14">

    <case pos:start="87:5" pos:end="87:25">case <expr pos:start="87:10" pos:end="87:24"><name pos:start="87:10" pos:end="87:24">ROCKER_TEST_REG</name></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:26"><expr pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:9">r</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:19">test_reg</name></name> <operator pos:start="89:21" pos:end="89:21">=</operator> <name pos:start="89:23" pos:end="89:25">val</name></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <case pos:start="93:5" pos:end="93:27">case <expr pos:start="93:10" pos:end="93:26"><name pos:start="93:10" pos:end="93:26">ROCKER_TEST_REG64</name></expr>:</case>

    <case pos:start="95:5" pos:end="95:30">case <expr pos:start="95:10" pos:end="95:29"><name pos:start="95:10" pos:end="95:29">ROCKER_TEST_DMA_ADDR</name></expr>:</case>

    <case pos:start="97:5" pos:end="97:33">case <expr pos:start="97:10" pos:end="97:32"><name pos:start="97:10" pos:end="97:32">ROCKER_PORT_PHYS_ENABLE</name></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="99:35"><expr pos:start="99:9" pos:end="99:34"><name pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:9">r</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:18">lower32</name></name> <operator pos:start="99:20" pos:end="99:20">=</operator> <operator pos:start="99:22" pos:end="99:22">(</operator><name pos:start="99:23" pos:end="99:30">uint64_t</name><operator pos:start="99:31" pos:end="99:31">)</operator><name pos:start="99:32" pos:end="99:34">val</name></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:31">case <expr pos:start="103:10" pos:end="103:30"><name pos:start="103:10" pos:end="103:26">ROCKER_TEST_REG64</name> <operator pos:start="103:28" pos:end="103:28">+</operator> <literal type="number" pos:start="103:30" pos:end="103:30">4</literal></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:59"><expr pos:start="105:9" pos:end="105:58"><name pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:9">r</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:21">test_reg64</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <operator pos:start="105:25" pos:end="105:25">(</operator><operator pos:start="105:26" pos:end="105:26">(</operator><name pos:start="105:27" pos:end="105:34">uint64_t</name><operator pos:start="105:35" pos:end="105:35">)</operator><name pos:start="105:36" pos:end="105:38">val</name><operator pos:start="105:39" pos:end="105:39">)</operator> <operator pos:start="105:41" pos:end="105:42">&lt;&lt;</operator> <literal type="number" pos:start="105:44" pos:end="105:45">32</literal> <operator pos:start="105:47" pos:end="105:47">|</operator> <name pos:start="105:49" pos:end="105:58"><name pos:start="105:49" pos:end="105:49">r</name><operator pos:start="105:50" pos:end="105:51">-&gt;</operator><name pos:start="105:52" pos:end="105:58">lower32</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:23"><expr pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:18"><name pos:start="107:9" pos:end="107:9">r</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:18">lower32</name></name> <operator pos:start="107:20" pos:end="107:20">=</operator> <literal type="number" pos:start="107:22" pos:end="107:22">0</literal></expr>;</expr_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <case pos:start="111:5" pos:end="111:25">case <expr pos:start="111:10" pos:end="111:24"><name pos:start="111:10" pos:end="111:24">ROCKER_TEST_IRQ</name></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:32"><expr pos:start="113:9" pos:end="113:31"><call pos:start="113:9" pos:end="113:31"><name pos:start="113:9" pos:end="113:23">rocker_msix_irq</name><argument_list pos:start="113:24" pos:end="113:31">(<argument pos:start="113:25" pos:end="113:25"><expr pos:start="113:25" pos:end="113:25"><name pos:start="113:25" pos:end="113:25">r</name></expr></argument>, <argument pos:start="113:28" pos:end="113:30"><expr pos:start="113:28" pos:end="113:30"><name pos:start="113:28" pos:end="113:30">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:30">case <expr pos:start="117:10" pos:end="117:29"><name pos:start="117:10" pos:end="117:29">ROCKER_TEST_DMA_SIZE</name></expr>:</case>

        <expr_stmt pos:start="119:9" pos:end="119:31"><expr pos:start="119:9" pos:end="119:30"><name pos:start="119:9" pos:end="119:24"><name pos:start="119:9" pos:end="119:9">r</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:24">test_dma_size</name></name> <operator pos:start="119:26" pos:end="119:26">=</operator> <name pos:start="119:28" pos:end="119:30">val</name></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    <case pos:start="123:5" pos:end="123:34">case <expr pos:start="123:10" pos:end="123:33"><name pos:start="123:10" pos:end="123:29">ROCKER_TEST_DMA_ADDR</name> <operator pos:start="123:31" pos:end="123:31">+</operator> <literal type="number" pos:start="123:33" pos:end="123:33">4</literal></expr>:</case>

        <expr_stmt pos:start="125:9" pos:end="125:62"><expr pos:start="125:9" pos:end="125:61"><name pos:start="125:9" pos:end="125:24"><name pos:start="125:9" pos:end="125:9">r</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:24">test_dma_addr</name></name> <operator pos:start="125:26" pos:end="125:26">=</operator> <operator pos:start="125:28" pos:end="125:28">(</operator><operator pos:start="125:29" pos:end="125:29">(</operator><name pos:start="125:30" pos:end="125:37">uint64_t</name><operator pos:start="125:38" pos:end="125:38">)</operator><name pos:start="125:39" pos:end="125:41">val</name><operator pos:start="125:42" pos:end="125:42">)</operator> <operator pos:start="125:44" pos:end="125:45">&lt;&lt;</operator> <literal type="number" pos:start="125:47" pos:end="125:48">32</literal> <operator pos:start="125:50" pos:end="125:50">|</operator> <name pos:start="125:52" pos:end="125:61"><name pos:start="125:52" pos:end="125:52">r</name><operator pos:start="125:53" pos:end="125:54">-&gt;</operator><name pos:start="125:55" pos:end="125:61">lower32</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:23"><expr pos:start="127:9" pos:end="127:22"><name pos:start="127:9" pos:end="127:18"><name pos:start="127:9" pos:end="127:9">r</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:18">lower32</name></name> <operator pos:start="127:20" pos:end="127:20">=</operator> <literal type="number" pos:start="127:22" pos:end="127:22">0</literal></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>

    <case pos:start="131:5" pos:end="131:30">case <expr pos:start="131:10" pos:end="131:29"><name pos:start="131:10" pos:end="131:29">ROCKER_TEST_DMA_CTRL</name></expr>:</case>

        <expr_stmt pos:start="133:9" pos:end="133:37"><expr pos:start="133:9" pos:end="133:36"><call pos:start="133:9" pos:end="133:36"><name pos:start="133:9" pos:end="133:28">rocker_test_dma_ctrl</name><argument_list pos:start="133:29" pos:end="133:36">(<argument pos:start="133:30" pos:end="133:30"><expr pos:start="133:30" pos:end="133:30"><name pos:start="133:30" pos:end="133:30">r</name></expr></argument>, <argument pos:start="133:33" pos:end="133:35"><expr pos:start="133:33" pos:end="133:35"><name pos:start="133:33" pos:end="133:35">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:24">case <expr pos:start="137:10" pos:end="137:23"><name pos:start="137:10" pos:end="137:23">ROCKER_CONTROL</name></expr>:</case>

        <expr_stmt pos:start="139:9" pos:end="139:31"><expr pos:start="139:9" pos:end="139:30"><call pos:start="139:9" pos:end="139:30"><name pos:start="139:9" pos:end="139:22">rocker_control</name><argument_list pos:start="139:23" pos:end="139:30">(<argument pos:start="139:24" pos:end="139:24"><expr pos:start="139:24" pos:end="139:24"><name pos:start="139:24" pos:end="139:24">r</name></expr></argument>, <argument pos:start="139:27" pos:end="139:29"><expr pos:start="139:27" pos:end="139:29"><name pos:start="139:27" pos:end="139:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="141:9" pos:end="141:14">break;</break>

    <case pos:start="143:5" pos:end="143:37">case <expr pos:start="143:10" pos:end="143:36"><name pos:start="143:10" pos:end="143:32">ROCKER_PORT_PHYS_ENABLE</name> <operator pos:start="143:34" pos:end="143:34">+</operator> <literal type="number" pos:start="143:36" pos:end="143:36">4</literal></expr>:</case>

        <expr_stmt pos:start="145:9" pos:end="145:77"><expr pos:start="145:9" pos:end="145:76"><call pos:start="145:9" pos:end="145:76"><name pos:start="145:9" pos:end="145:37">rocker_port_phys_enable_write</name><argument_list pos:start="145:38" pos:end="145:76">(<argument pos:start="145:39" pos:end="145:39"><expr pos:start="145:39" pos:end="145:39"><name pos:start="145:39" pos:end="145:39">r</name></expr></argument>, <argument pos:start="145:42" pos:end="145:75"><expr pos:start="145:42" pos:end="145:75"><operator pos:start="145:42" pos:end="145:42">(</operator><operator pos:start="145:43" pos:end="145:43">(</operator><name pos:start="145:44" pos:end="145:51">uint64_t</name><operator pos:start="145:52" pos:end="145:52">)</operator><name pos:start="145:53" pos:end="145:55">val</name><operator pos:start="145:56" pos:end="145:56">)</operator> <operator pos:start="145:58" pos:end="145:59">&lt;&lt;</operator> <literal type="number" pos:start="145:61" pos:end="145:62">32</literal> <operator pos:start="145:64" pos:end="145:64">|</operator> <name pos:start="145:66" pos:end="145:75"><name pos:start="145:66" pos:end="145:66">r</name><operator pos:start="145:67" pos:end="145:68">-&gt;</operator><name pos:start="145:69" pos:end="145:75">lower32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:23"><expr pos:start="147:9" pos:end="147:22"><name pos:start="147:9" pos:end="147:18"><name pos:start="147:9" pos:end="147:9">r</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:18">lower32</name></name> <operator pos:start="147:20" pos:end="147:20">=</operator> <literal type="number" pos:start="147:22" pos:end="147:22">0</literal></expr>;</expr_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <default pos:start="151:5" pos:end="151:12">default:</default>

        <expr_stmt pos:start="153:9" pos:end="155:44"><expr pos:start="153:9" pos:end="155:43"><call pos:start="153:9" pos:end="155:43"><name pos:start="153:9" pos:end="153:15">DPRINTF</name><argument_list pos:start="153:16" pos:end="155:43">(<argument pos:start="153:17" pos:end="155:31"><expr pos:start="153:17" pos:end="155:31"><literal type="string" pos:start="153:17" pos:end="153:50">"not implemented write(l) addr=0x"</literal> <name pos:start="153:52" pos:end="153:65">TARGET_FMT_plx</name>

                <literal type="string" pos:start="155:17" pos:end="155:31">" val=0x%08x\n"</literal></expr></argument>, <argument pos:start="155:34" pos:end="155:37"><expr pos:start="155:34" pos:end="155:37"><name pos:start="155:34" pos:end="155:37">addr</name></expr></argument>, <argument pos:start="155:40" pos:end="155:42"><expr pos:start="155:40" pos:end="155:42"><name pos:start="155:40" pos:end="155:42">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="157:9" pos:end="157:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
