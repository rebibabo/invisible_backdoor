<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20757.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">atrac1_decode_frame</name><parameter_list pos:start="1:31" pos:end="3:63">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:64"><decl pos:start="1:55" pos:end="1:64"><type pos:start="1:55" pos:end="1:64"><name pos:start="1:55" pos:end="1:58">void</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">data</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:45"><decl pos:start="3:32" pos:end="3:45"><type pos:start="3:32" pos:end="3:45"><name pos:start="3:32" pos:end="3:34">int</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:45">data_size</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:62"><decl pos:start="3:48" pos:end="3:62"><type pos:start="3:48" pos:end="3:62"><name pos:start="3:48" pos:end="3:55">AVPacket</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:62">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="101:1">{<block_content pos:start="7:5" pos:end="99:30">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>       <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">AT1Ctx</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:13">q</name>          <init pos:start="11:24" pos:end="11:41">= <expr pos:start="11:26" pos:end="11:41"><name pos:start="11:26" pos:end="11:41"><name pos:start="11:26" pos:end="11:30">avctx</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:10"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">ch</name></decl>, <decl pos:start="13:13" pos:end="13:15"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:13" pos:end="13:15">ret</name></decl>, <decl pos:start="13:18" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">GetBitContext</name></type> <name pos:start="15:19" pos:end="15:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:9">float</name><modifier pos:start="17:10" pos:end="17:10">*</modifier></type> <name pos:start="17:12" pos:end="17:18">samples</name> <init pos:start="17:20" pos:end="17:25">= <expr pos:start="17:22" pos:end="17:25"><name pos:start="17:22" pos:end="17:25">data</name></expr></init></decl>;</decl_stmt>





    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:37">(<expr pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:16">buf_size</name> <operator pos:start="23:18" pos:end="23:18">&lt;</operator> <literal type="number" pos:start="23:20" pos:end="23:22">212</literal> <operator pos:start="23:24" pos:end="23:24">*</operator> <name pos:start="23:26" pos:end="23:36"><name pos:start="23:26" pos:end="23:26">q</name><operator pos:start="23:27" pos:end="23:28">-&gt;</operator><name pos:start="23:29" pos:end="23:36">channels</name></name></expr>)</condition> <block pos:start="23:39" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <expr_stmt pos:start="25:9" pos:end="25:63"><expr pos:start="25:9" pos:end="25:62"><call pos:start="25:9" pos:end="25:62"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:62">(<argument pos:start="25:16" pos:end="25:16"><expr pos:start="25:16" pos:end="25:16"><name pos:start="25:16" pos:end="25:16">q</name></expr></argument>,<argument pos:start="25:18" pos:end="25:29"><expr pos:start="25:18" pos:end="25:29"><name pos:start="25:18" pos:end="25:29">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="25:31" pos:end="25:61"><expr pos:start="25:31" pos:end="25:61"><literal type="string" pos:start="25:31" pos:end="25:61">"Not enought data to decode!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="33:5" pos:end="69:5">for <control pos:start="33:9" pos:end="33:40">(<init pos:start="33:10" pos:end="33:16"><expr pos:start="33:10" pos:end="33:15"><name pos:start="33:10" pos:end="33:11">ch</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>;</init> <condition pos:start="33:18" pos:end="33:34"><expr pos:start="33:18" pos:end="33:33"><name pos:start="33:18" pos:end="33:19">ch</name> <operator pos:start="33:21" pos:end="33:21">&lt;</operator> <name pos:start="33:23" pos:end="33:33"><name pos:start="33:23" pos:end="33:23">q</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:33">channels</name></name></expr>;</condition> <incr pos:start="33:36" pos:end="33:39"><expr pos:start="33:36" pos:end="33:39"><name pos:start="33:36" pos:end="33:37">ch</name><operator pos:start="33:38" pos:end="33:39">++</operator></expr></incr>)</control> <block pos:start="33:42" pos:end="69:5">{<block_content pos:start="35:9" pos:end="67:57">

        <decl_stmt pos:start="35:9" pos:end="35:35"><decl pos:start="35:9" pos:end="35:34"><type pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:16">AT1SUCtx</name><modifier pos:start="35:17" pos:end="35:17">*</modifier></type> <name pos:start="35:19" pos:end="35:20">su</name> <init pos:start="35:22" pos:end="35:34">= <expr pos:start="35:24" pos:end="35:34"><operator pos:start="35:24" pos:end="35:24">&amp;</operator><name pos:start="35:25" pos:end="35:34"><name pos:start="35:25" pos:end="35:25">q</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:30">SUs</name><index pos:start="35:31" pos:end="35:34">[<expr pos:start="35:32" pos:end="35:33"><name pos:start="35:32" pos:end="35:33">ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:52"><expr pos:start="39:9" pos:end="39:51"><call pos:start="39:9" pos:end="39:51"><name pos:start="39:9" pos:end="39:21">init_get_bits</name><argument_list pos:start="39:22" pos:end="39:51">(<argument pos:start="39:23" pos:end="39:25"><expr pos:start="39:23" pos:end="39:25"><operator pos:start="39:23" pos:end="39:23">&amp;</operator><name pos:start="39:24" pos:end="39:25">gb</name></expr></argument>, <argument pos:start="39:28" pos:end="39:41"><expr pos:start="39:28" pos:end="39:41"><operator pos:start="39:28" pos:end="39:28">&amp;</operator><name pos:start="39:29" pos:end="39:41"><name pos:start="39:29" pos:end="39:31">buf</name><index pos:start="39:32" pos:end="39:41">[<expr pos:start="39:33" pos:end="39:40"><literal type="number" pos:start="39:33" pos:end="39:35">212</literal> <operator pos:start="39:37" pos:end="39:37">*</operator> <name pos:start="39:39" pos:end="39:40">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="39:44" pos:end="39:50"><expr pos:start="39:44" pos:end="39:50"><literal type="number" pos:start="39:44" pos:end="39:46">212</literal> <operator pos:start="39:48" pos:end="39:48">*</operator> <literal type="number" pos:start="39:50" pos:end="39:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="43:9" pos:end="43:45">/* parse block_size_mode, 1st byte */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:55"><expr pos:start="45:9" pos:end="45:54"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:54"><name pos:start="45:15" pos:end="45:27">at1_parse_bsm</name><argument_list pos:start="45:28" pos:end="45:54">(<argument pos:start="45:29" pos:end="45:31"><expr pos:start="45:29" pos:end="45:31"><operator pos:start="45:29" pos:end="45:29">&amp;</operator><name pos:start="45:30" pos:end="45:31">gb</name></expr></argument>, <argument pos:start="45:34" pos:end="45:53"><expr pos:start="45:34" pos:end="45:53"><name pos:start="45:34" pos:end="45:53"><name pos:start="45:34" pos:end="45:35">su</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:53">log2_block_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="49:23"><if pos:start="47:9" pos:end="49:23">if <condition pos:start="47:12" pos:end="47:20">(<expr pos:start="47:13" pos:end="47:19"><name pos:start="47:13" pos:end="47:15">ret</name> <operator pos:start="47:17" pos:end="47:17">&lt;</operator> <literal type="number" pos:start="47:19" pos:end="47:19">0</literal></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:23"><block_content pos:start="49:13" pos:end="49:23">

            <return pos:start="49:13" pos:end="49:23">return <expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:50"><name pos:start="53:15" pos:end="53:32">at1_unpack_dequant</name><argument_list pos:start="53:33" pos:end="53:50">(<argument pos:start="53:34" pos:end="53:36"><expr pos:start="53:34" pos:end="53:36"><operator pos:start="53:34" pos:end="53:34">&amp;</operator><name pos:start="53:35" pos:end="53:36">gb</name></expr></argument>, <argument pos:start="53:39" pos:end="53:40"><expr pos:start="53:39" pos:end="53:40"><name pos:start="53:39" pos:end="53:40">su</name></expr></argument>, <argument pos:start="53:43" pos:end="53:49"><expr pos:start="53:43" pos:end="53:49"><name pos:start="53:43" pos:end="53:49"><name pos:start="53:43" pos:end="53:43">q</name><operator pos:start="53:44" pos:end="53:45">-&gt;</operator><name pos:start="53:46" pos:end="53:49">spec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="57:23"><if pos:start="55:9" pos:end="57:23">if <condition pos:start="55:12" pos:end="55:20">(<expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">&lt;</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:23"><block_content pos:start="57:13" pos:end="57:23">

            <return pos:start="57:13" pos:end="57:23">return <expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:37"><expr pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:36"><name pos:start="61:15" pos:end="61:29">at1_imdct_block</name><argument_list pos:start="61:30" pos:end="61:36">(<argument pos:start="61:31" pos:end="61:32"><expr pos:start="61:31" pos:end="61:32"><name pos:start="61:31" pos:end="61:32">su</name></expr></argument>, <argument pos:start="61:35" pos:end="61:35"><expr pos:start="61:35" pos:end="61:35"><name pos:start="61:35" pos:end="61:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="65:23"><if pos:start="63:9" pos:end="65:23">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">&lt;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:23"><block_content pos:start="65:13" pos:end="65:23">

            <return pos:start="65:13" pos:end="65:23">return <expr pos:start="65:20" pos:end="65:22"><name pos:start="65:20" pos:end="65:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:57"><expr pos:start="67:9" pos:end="67:56"><call pos:start="67:9" pos:end="67:56"><name pos:start="67:9" pos:end="67:29">at1_subband_synthesis</name><argument_list pos:start="67:30" pos:end="67:56">(<argument pos:start="67:31" pos:end="67:31"><expr pos:start="67:31" pos:end="67:31"><name pos:start="67:31" pos:end="67:31">q</name></expr></argument>, <argument pos:start="67:34" pos:end="67:35"><expr pos:start="67:34" pos:end="67:35"><name pos:start="67:34" pos:end="67:35">su</name></expr></argument>, <argument pos:start="67:38" pos:end="67:55"><expr pos:start="67:38" pos:end="67:55"><name pos:start="67:38" pos:end="67:55"><name pos:start="67:38" pos:end="67:38">q</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:51">out_samples</name><index pos:start="67:52" pos:end="67:55">[<expr pos:start="67:53" pos:end="67:54"><name pos:start="67:53" pos:end="67:54">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="73:5" pos:end="73:61">/* interleave; FIXME, should create/use a DSP function */</comment>

    <if_stmt pos:start="75:5" pos:end="93:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:25">(<expr pos:start="75:9" pos:end="75:24"><name pos:start="75:9" pos:end="75:19"><name pos:start="75:9" pos:end="75:9">q</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:19">channels</name></name> <operator pos:start="75:21" pos:end="75:22">==</operator> <literal type="number" pos:start="75:24" pos:end="75:24">1</literal></expr>)</condition> <block pos:start="75:27" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:63">

        <comment type="block" pos:start="77:9" pos:end="77:18">/* mono */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:63"><expr pos:start="79:9" pos:end="79:62"><call pos:start="79:9" pos:end="79:62"><name pos:start="79:9" pos:end="79:14">memcpy</name><argument_list pos:start="79:15" pos:end="79:62">(<argument pos:start="79:16" pos:end="79:22"><expr pos:start="79:16" pos:end="79:22"><name pos:start="79:16" pos:end="79:22">samples</name></expr></argument>, <argument pos:start="79:25" pos:end="79:41"><expr pos:start="79:25" pos:end="79:41"><name pos:start="79:25" pos:end="79:41"><name pos:start="79:25" pos:end="79:25">q</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:38">out_samples</name><index pos:start="79:39" pos:end="79:41">[<expr pos:start="79:40" pos:end="79:40"><literal type="number" pos:start="79:40" pos:end="79:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:44" pos:end="79:61"><expr pos:start="79:44" pos:end="79:61"><name pos:start="79:44" pos:end="79:57">AT1_SU_SAMPLES</name> <operator pos:start="79:59" pos:end="79:59">*</operator> <literal type="number" pos:start="79:61" pos:end="79:61">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="93:5">else <block pos:start="81:12" pos:end="93:5">{<block_content pos:start="85:9" pos:end="91:9">

        <comment type="block" pos:start="83:9" pos:end="83:20">/* stereo */</comment>

        <for pos:start="85:9" pos:end="91:9">for <control pos:start="85:13" pos:end="85:44">(<init pos:start="85:14" pos:end="85:19"><expr pos:start="85:14" pos:end="85:18"><name pos:start="85:14" pos:end="85:14">i</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <literal type="number" pos:start="85:18" pos:end="85:18">0</literal></expr>;</init> <condition pos:start="85:21" pos:end="85:39"><expr pos:start="85:21" pos:end="85:38"><name pos:start="85:21" pos:end="85:21">i</name> <operator pos:start="85:23" pos:end="85:23">&lt;</operator> <name pos:start="85:25" pos:end="85:38">AT1_SU_SAMPLES</name></expr>;</condition> <incr pos:start="85:41" pos:end="85:43"><expr pos:start="85:41" pos:end="85:43"><name pos:start="85:41" pos:end="85:41">i</name><operator pos:start="85:42" pos:end="85:43">++</operator></expr></incr>)</control> <block pos:start="85:46" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:54">

            <expr_stmt pos:start="87:13" pos:end="87:54"><expr pos:start="87:13" pos:end="87:53"><name pos:start="87:13" pos:end="87:26"><name pos:start="87:13" pos:end="87:19">samples</name><index pos:start="87:20" pos:end="87:26">[<expr pos:start="87:21" pos:end="87:25"><name pos:start="87:21" pos:end="87:21">i</name> <operator pos:start="87:23" pos:end="87:23">*</operator> <literal type="number" pos:start="87:25" pos:end="87:25">2</literal></expr>]</index></name>     <operator pos:start="87:32" pos:end="87:32">=</operator> <name pos:start="87:34" pos:end="87:53"><name pos:start="87:34" pos:end="87:34">q</name><operator pos:start="87:35" pos:end="87:36">-&gt;</operator><name pos:start="87:37" pos:end="87:47">out_samples</name><index pos:start="87:48" pos:end="87:50">[<expr pos:start="87:49" pos:end="87:49"><literal type="number" pos:start="87:49" pos:end="87:49">0</literal></expr>]</index><index pos:start="87:51" pos:end="87:53">[<expr pos:start="87:52" pos:end="87:52"><name pos:start="87:52" pos:end="87:52">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:54"><expr pos:start="89:13" pos:end="89:53"><name pos:start="89:13" pos:end="89:30"><name pos:start="89:13" pos:end="89:19">samples</name><index pos:start="89:20" pos:end="89:30">[<expr pos:start="89:21" pos:end="89:29"><name pos:start="89:21" pos:end="89:21">i</name> <operator pos:start="89:23" pos:end="89:23">*</operator> <literal type="number" pos:start="89:25" pos:end="89:25">2</literal> <operator pos:start="89:27" pos:end="89:27">+</operator> <literal type="number" pos:start="89:29" pos:end="89:29">1</literal></expr>]</index></name> <operator pos:start="89:32" pos:end="89:32">=</operator> <name pos:start="89:34" pos:end="89:53"><name pos:start="89:34" pos:end="89:34">q</name><operator pos:start="89:35" pos:end="89:36">-&gt;</operator><name pos:start="89:37" pos:end="89:47">out_samples</name><index pos:start="89:48" pos:end="89:50">[<expr pos:start="89:49" pos:end="89:49"><literal type="number" pos:start="89:49" pos:end="89:49">1</literal></expr>]</index><index pos:start="89:51" pos:end="89:53">[<expr pos:start="89:52" pos:end="89:52"><name pos:start="89:52" pos:end="89:52">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:65"><expr pos:start="97:5" pos:end="97:64"><operator pos:start="97:5" pos:end="97:5">*</operator><name pos:start="97:6" pos:end="97:14">data_size</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <name pos:start="97:18" pos:end="97:28"><name pos:start="97:18" pos:end="97:18">q</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:28">channels</name></name> <operator pos:start="97:30" pos:end="97:30">*</operator> <name pos:start="97:32" pos:end="97:45">AT1_SU_SAMPLES</name> <operator pos:start="97:47" pos:end="97:47">*</operator> <sizeof pos:start="97:49" pos:end="97:64">sizeof<argument_list pos:start="97:55" pos:end="97:64">(<argument pos:start="97:56" pos:end="97:63"><expr pos:start="97:56" pos:end="97:63"><operator pos:start="97:56" pos:end="97:56">*</operator><name pos:start="97:57" pos:end="97:63">samples</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <return pos:start="99:5" pos:end="99:30">return <expr pos:start="99:12" pos:end="99:29"><name pos:start="99:12" pos:end="99:29"><name pos:start="99:12" pos:end="99:16">avctx</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:29">block_align</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
