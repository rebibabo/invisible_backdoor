<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10024.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">qcow_read_extensions</name><parameter_list pos:start="1:32" pos:end="3:52">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:75"><decl pos:start="1:55" pos:end="1:75"><type pos:start="1:55" pos:end="1:75"><name pos:start="1:55" pos:end="1:62">uint64_t</name></type> <name pos:start="1:64" pos:end="1:75">start_offset</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:51"><decl pos:start="3:33" pos:end="3:51"><type pos:start="3:33" pos:end="3:51"><name pos:start="3:33" pos:end="3:40">uint64_t</name></type> <name pos:start="3:42" pos:end="3:51">end_offset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="123:1">{<block_content pos:start="7:5" pos:end="121:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">QCowExtension</name></type> <name pos:start="9:19" pos:end="9:21">ext</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:19">offset</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="15:1" pos:end="15:16">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:16">DEBUG_EXT</name></cpp:ifdef>

    <expr_stmt pos:start="17:5" pos:end="20:0"><expr pos:start="17:5" pos:end="17:81"><call pos:start="17:5" pos:end="17:81"><name pos:start="17:5" pos:end="17:10">printf</name><argument_list pos:start="17:11" pos:end="17:81">(<argument pos:start="17:12" pos:end="17:54"><expr pos:start="17:12" pos:end="17:54"><literal type="string" pos:start="17:12" pos:end="17:54">"qcow_read_extensions: start=%ld end=%ld\n"</literal></expr></argument>, <argument pos:start="17:57" pos:end="17:68"><expr pos:start="17:57" pos:end="17:68"><name pos:start="17:57" pos:end="17:68">start_offset</name></expr></argument>, <argument pos:start="17:71" pos:end="17:80"><expr pos:start="17:71" pos:end="17:80"><name pos:start="17:71" pos:end="17:80">end_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="21:5" pos:end="21:26"><expr pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:10">offset</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:25">start_offset</name></expr>;</expr_stmt>

    <while pos:start="23:5" pos:end="117:5">while <condition pos:start="23:11" pos:end="23:31">(<expr pos:start="23:12" pos:end="23:30"><name pos:start="23:12" pos:end="23:17">offset</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <name pos:start="23:21" pos:end="23:30">end_offset</name></expr>)</condition> <block pos:start="23:33" pos:end="117:5">{<block_content pos:start="31:9" pos:end="115:9">



<cpp:ifdef pos:start="27:1" pos:end="27:16">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:16">DEBUG_EXT</name></cpp:ifdef>

        <comment type="block" pos:start="29:9" pos:end="29:26">/* Sanity check */</comment>

        <if_stmt pos:start="31:9" pos:end="33:77"><if pos:start="31:9" pos:end="33:77">if <condition pos:start="31:12" pos:end="31:37">(<expr pos:start="31:13" pos:end="31:36"><name pos:start="31:13" pos:end="31:18">offset</name> <operator pos:start="31:20" pos:end="31:20">&gt;</operator> <name pos:start="31:22" pos:end="31:36"><name pos:start="31:22" pos:end="31:22">s</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:36">cluster_size</name></name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:77"><block_content pos:start="33:13" pos:end="33:77">

            <expr_stmt pos:start="33:13" pos:end="33:77"><expr pos:start="33:13" pos:end="33:76"><call pos:start="33:13" pos:end="33:76"><name pos:start="33:13" pos:end="33:18">printf</name><argument_list pos:start="33:19" pos:end="33:76">(<argument pos:start="33:20" pos:end="33:67"><expr pos:start="33:20" pos:end="33:67"><literal type="string" pos:start="33:20" pos:end="33:67">"qcow_handle_extension: suspicious offset %lu\n"</literal></expr></argument>, <argument pos:start="33:70" pos:end="33:75"><expr pos:start="33:70" pos:end="33:75"><name pos:start="33:70" pos:end="33:75">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="40:0"><expr pos:start="37:9" pos:end="37:75"><call pos:start="37:9" pos:end="37:75"><name pos:start="37:9" pos:end="37:14">printf</name><argument_list pos:start="37:15" pos:end="37:75">(<argument pos:start="37:16" pos:end="37:66"><expr pos:start="37:16" pos:end="37:66"><literal type="string" pos:start="37:16" pos:end="37:66">"attemting to read extended header in offset %lu\n"</literal></expr></argument>, <argument pos:start="37:69" pos:end="37:74"><expr pos:start="37:69" pos:end="37:74"><name pos:start="37:69" pos:end="37:74">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif>



        <if_stmt pos:start="43:9" pos:end="51:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="43:72">(<expr pos:start="43:13" pos:end="43:71"><call pos:start="43:13" pos:end="43:56"><name pos:start="43:13" pos:end="43:22">bdrv_pread</name><argument_list pos:start="43:23" pos:end="43:56">(<argument pos:start="43:24" pos:end="43:28"><expr pos:start="43:24" pos:end="43:28"><name pos:start="43:24" pos:end="43:28"><name pos:start="43:24" pos:end="43:24">s</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:28">hd</name></name></expr></argument>, <argument pos:start="43:31" pos:end="43:36"><expr pos:start="43:31" pos:end="43:36"><name pos:start="43:31" pos:end="43:36">offset</name></expr></argument>, <argument pos:start="43:39" pos:end="43:42"><expr pos:start="43:39" pos:end="43:42"><operator pos:start="43:39" pos:end="43:39">&amp;</operator><name pos:start="43:40" pos:end="43:42">ext</name></expr></argument>, <argument pos:start="43:45" pos:end="43:55"><expr pos:start="43:45" pos:end="43:55"><sizeof pos:start="43:45" pos:end="43:55">sizeof<argument_list pos:start="43:51" pos:end="43:55">(<argument pos:start="43:52" pos:end="43:54"><expr pos:start="43:52" pos:end="43:54"><name pos:start="43:52" pos:end="43:54">ext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="43:58" pos:end="43:59">!=</operator> <sizeof pos:start="43:61" pos:end="43:71">sizeof<argument_list pos:start="43:67" pos:end="43:71">(<argument pos:start="43:68" pos:end="43:70"><expr pos:start="43:68" pos:end="43:70"><name pos:start="43:68" pos:end="43:70">ext</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="43:74" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:21">

            <expr_stmt pos:start="45:13" pos:end="47:48"><expr pos:start="45:13" pos:end="47:47"><call pos:start="45:13" pos:end="47:47"><name pos:start="45:13" pos:end="45:19">fprintf</name><argument_list pos:start="45:20" pos:end="47:47">(<argument pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:26"><name pos:start="45:21" pos:end="45:26">stderr</name></expr></argument>, <argument pos:start="45:29" pos:end="45:89"><expr pos:start="45:29" pos:end="45:89"><literal type="string" pos:start="45:29" pos:end="45:89">"qcow_handle_extension: ERROR: pread fail from offset %llu\n"</literal></expr></argument>,

                    <argument pos:start="47:21" pos:end="47:46"><expr pos:start="47:21" pos:end="47:46"><operator pos:start="47:21" pos:end="47:21">(</operator><name pos:start="47:22" pos:end="47:29">unsigned</name> <name pos:start="47:31" pos:end="47:34">long</name> <name pos:start="47:36" pos:end="47:39">long</name><operator pos:start="47:40" pos:end="47:40">)</operator><name pos:start="47:41" pos:end="47:46">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:21">return <expr pos:start="49:20" pos:end="49:20"><literal type="number" pos:start="49:20" pos:end="49:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:33"><expr pos:start="53:9" pos:end="53:32"><call pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:20">be32_to_cpus</name><argument_list pos:start="53:21" pos:end="53:32">(<argument pos:start="53:22" pos:end="53:31"><expr pos:start="53:22" pos:end="53:31"><operator pos:start="53:22" pos:end="53:22">&amp;</operator><name pos:start="53:23" pos:end="53:31"><name pos:start="53:23" pos:end="53:25">ext</name><operator pos:start="53:26" pos:end="53:26">.</operator><name pos:start="53:27" pos:end="53:31">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><call pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:20">be32_to_cpus</name><argument_list pos:start="55:21" pos:end="55:30">(<argument pos:start="55:22" pos:end="55:29"><expr pos:start="55:22" pos:end="55:29"><operator pos:start="55:22" pos:end="55:22">&amp;</operator><name pos:start="55:23" pos:end="55:29"><name pos:start="55:23" pos:end="55:25">ext</name><operator pos:start="55:26" pos:end="55:26">.</operator><name pos:start="55:27" pos:end="55:29">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="60:0"><expr pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:14">offset</name> <operator pos:start="57:16" pos:end="57:17">+=</operator> <sizeof pos:start="57:19" pos:end="57:29">sizeof<argument_list pos:start="57:25" pos:end="57:29">(<argument pos:start="57:26" pos:end="57:28"><expr pos:start="57:26" pos:end="57:28"><name pos:start="57:26" pos:end="57:28">ext</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:ifdef pos:start="59:1" pos:end="59:16">#<cpp:directive pos:start="59:2" pos:end="59:6">ifdef</cpp:directive> <name pos:start="59:8" pos:end="59:16">DEBUG_EXT</name></cpp:ifdef>

        <expr_stmt pos:start="61:9" pos:end="64:0"><expr pos:start="61:9" pos:end="61:47"><call pos:start="61:9" pos:end="61:47"><name pos:start="61:9" pos:end="61:14">printf</name><argument_list pos:start="61:15" pos:end="61:47">(<argument pos:start="61:16" pos:end="61:35"><expr pos:start="61:16" pos:end="61:35"><literal type="string" pos:start="61:16" pos:end="61:35">"ext.magic = 0x%x\n"</literal></expr></argument>, <argument pos:start="61:38" pos:end="61:46"><expr pos:start="61:38" pos:end="61:46"><name pos:start="61:38" pos:end="61:46"><name pos:start="61:38" pos:end="61:40">ext</name><operator pos:start="61:41" pos:end="61:41">.</operator><name pos:start="61:42" pos:end="61:46">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

        <switch pos:start="65:9" pos:end="115:9">switch <condition pos:start="65:16" pos:end="65:26">(<expr pos:start="65:17" pos:end="65:25"><name pos:start="65:17" pos:end="65:25"><name pos:start="65:17" pos:end="65:19">ext</name><operator pos:start="65:20" pos:end="65:20">.</operator><name pos:start="65:21" pos:end="65:25">magic</name></name></expr>)</condition> <block pos:start="65:28" pos:end="115:9">{<block_content pos:start="67:9" pos:end="113:18">

        <case pos:start="67:9" pos:end="67:32">case <expr pos:start="67:14" pos:end="67:31"><name pos:start="67:14" pos:end="67:31">QCOW_EXT_MAGIC_END</name></expr>:</case>

            <return pos:start="69:13" pos:end="69:21">return <expr pos:start="69:20" pos:end="69:20"><literal type="number" pos:start="69:20" pos:end="69:20">0</literal></expr>;</return>



        <case pos:start="73:9" pos:end="73:43">case <expr pos:start="73:14" pos:end="73:42"><name pos:start="73:14" pos:end="73:42">QCOW_EXT_MAGIC_BACKING_FORMAT</name></expr>:</case>

            <if_stmt pos:start="75:13" pos:end="85:13"><if pos:start="75:13" pos:end="85:13">if <condition pos:start="75:16" pos:end="75:54">(<expr pos:start="75:17" pos:end="75:53"><name pos:start="75:17" pos:end="75:23"><name pos:start="75:17" pos:end="75:19">ext</name><operator pos:start="75:20" pos:end="75:20">.</operator><name pos:start="75:21" pos:end="75:23">len</name></name> <operator pos:start="75:25" pos:end="75:26">&gt;=</operator> <sizeof pos:start="75:28" pos:end="75:53">sizeof<argument_list pos:start="75:34" pos:end="75:53">(<argument pos:start="75:35" pos:end="75:52"><expr pos:start="75:35" pos:end="75:52"><name pos:start="75:35" pos:end="75:52"><name pos:start="75:35" pos:end="75:36">bs</name><operator pos:start="75:37" pos:end="75:38">-&gt;</operator><name pos:start="75:39" pos:end="75:52">backing_format</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="75:56" pos:end="85:13">{<block_content pos:start="77:17" pos:end="83:25">

                <expr_stmt pos:start="77:17" pos:end="81:61"><expr pos:start="77:17" pos:end="81:60"><call pos:start="77:17" pos:end="81:60"><name pos:start="77:17" pos:end="77:23">fprintf</name><argument_list pos:start="77:24" pos:end="81:60">(<argument pos:start="77:25" pos:end="77:30"><expr pos:start="77:25" pos:end="77:30"><name pos:start="77:25" pos:end="77:30">stderr</name></expr></argument>, <argument pos:start="77:33" pos:end="79:36"><expr pos:start="77:33" pos:end="79:36"><literal type="string" pos:start="77:33" pos:end="77:77">"ERROR: ext_backing_format: len=%u too large"</literal>

                        <literal type="string" pos:start="79:25" pos:end="79:36">" (&gt;=%zu)\n"</literal></expr></argument>,

                        <argument pos:start="81:25" pos:end="81:31"><expr pos:start="81:25" pos:end="81:31"><name pos:start="81:25" pos:end="81:31"><name pos:start="81:25" pos:end="81:27">ext</name><operator pos:start="81:28" pos:end="81:28">.</operator><name pos:start="81:29" pos:end="81:31">len</name></name></expr></argument>, <argument pos:start="81:34" pos:end="81:59"><expr pos:start="81:34" pos:end="81:59"><sizeof pos:start="81:34" pos:end="81:59">sizeof<argument_list pos:start="81:40" pos:end="81:59">(<argument pos:start="81:41" pos:end="81:58"><expr pos:start="81:41" pos:end="81:58"><name pos:start="81:41" pos:end="81:58"><name pos:start="81:41" pos:end="81:42">bs</name><operator pos:start="81:43" pos:end="81:44">-&gt;</operator><name pos:start="81:45" pos:end="81:58">backing_format</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="83:17" pos:end="83:25">return <expr pos:start="83:24" pos:end="83:24"><literal type="number" pos:start="83:24" pos:end="83:24">2</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="87:13" pos:end="91:25"><if pos:start="87:13" pos:end="91:25">if <condition pos:start="87:16" pos:end="89:47">(<expr pos:start="87:17" pos:end="89:46"><call pos:start="87:17" pos:end="89:35"><name pos:start="87:17" pos:end="87:26">bdrv_pread</name><argument_list pos:start="87:27" pos:end="89:35">(<argument pos:start="87:28" pos:end="87:32"><expr pos:start="87:28" pos:end="87:32"><name pos:start="87:28" pos:end="87:32"><name pos:start="87:28" pos:end="87:28">s</name><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:32">hd</name></name></expr></argument>, <argument pos:start="87:35" pos:end="87:40"><expr pos:start="87:35" pos:end="87:40"><name pos:start="87:35" pos:end="87:40">offset</name></expr></argument> , <argument pos:start="87:44" pos:end="87:61"><expr pos:start="87:44" pos:end="87:61"><name pos:start="87:44" pos:end="87:61"><name pos:start="87:44" pos:end="87:45">bs</name><operator pos:start="87:46" pos:end="87:47">-&gt;</operator><name pos:start="87:48" pos:end="87:61">backing_format</name></name></expr></argument>,

                           <argument pos:start="89:28" pos:end="89:34"><expr pos:start="89:28" pos:end="89:34"><name pos:start="89:28" pos:end="89:34"><name pos:start="89:28" pos:end="89:30">ext</name><operator pos:start="89:31" pos:end="89:31">.</operator><name pos:start="89:32" pos:end="89:34">len</name></name></expr></argument>)</argument_list></call> <operator pos:start="89:37" pos:end="89:38">!=</operator> <name pos:start="89:40" pos:end="89:46"><name pos:start="89:40" pos:end="89:42">ext</name><operator pos:start="89:43" pos:end="89:43">.</operator><name pos:start="89:44" pos:end="89:46">len</name></name></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="91:25"><block_content pos:start="91:17" pos:end="91:25">

                <return pos:start="91:17" pos:end="91:25">return <expr pos:start="91:24" pos:end="91:24"><literal type="number" pos:start="91:24" pos:end="91:24">3</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="96:0"><expr pos:start="93:13" pos:end="93:46"><name pos:start="93:13" pos:end="93:39"><name pos:start="93:13" pos:end="93:14">bs</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:30">backing_format</name><index pos:start="93:31" pos:end="93:39">[<expr pos:start="93:32" pos:end="93:38"><name pos:start="93:32" pos:end="93:38"><name pos:start="93:32" pos:end="93:34">ext</name><operator pos:start="93:35" pos:end="93:35">.</operator><name pos:start="93:36" pos:end="93:38">len</name></name></expr>]</index></name> <operator pos:start="93:41" pos:end="93:41">=</operator> <literal type="char" pos:start="93:43" pos:end="93:46">'\0'</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="95:1" pos:end="95:16">#<cpp:directive pos:start="95:2" pos:end="95:6">ifdef</cpp:directive> <name pos:start="95:8" pos:end="95:16">DEBUG_EXT</name></cpp:ifdef>

            <expr_stmt pos:start="97:13" pos:end="100:0"><expr pos:start="97:13" pos:end="97:74"><call pos:start="97:13" pos:end="97:74"><name pos:start="97:13" pos:end="97:18">printf</name><argument_list pos:start="97:19" pos:end="97:74">(<argument pos:start="97:20" pos:end="97:53"><expr pos:start="97:20" pos:end="97:53"><literal type="string" pos:start="97:20" pos:end="97:53">"Qcow2: Got format extension %s\n"</literal></expr></argument>, <argument pos:start="97:56" pos:end="97:73"><expr pos:start="97:56" pos:end="97:73"><name pos:start="97:56" pos:end="97:73"><name pos:start="97:56" pos:end="97:57">bs</name><operator pos:start="97:58" pos:end="97:59">-&gt;</operator><name pos:start="97:60" pos:end="97:73">backing_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="101:13" pos:end="101:43"><expr pos:start="101:13" pos:end="101:42"><name pos:start="101:13" pos:end="101:18">offset</name> <operator pos:start="101:20" pos:end="101:21">+=</operator> <operator pos:start="101:23" pos:end="101:23">(</operator><operator pos:start="101:24" pos:end="101:24">(</operator><name pos:start="101:25" pos:end="101:31"><name pos:start="101:25" pos:end="101:27">ext</name><operator pos:start="101:28" pos:end="101:28">.</operator><name pos:start="101:29" pos:end="101:31">len</name></name> <operator pos:start="101:33" pos:end="101:33">+</operator> <literal type="number" pos:start="101:35" pos:end="101:35">7</literal><operator pos:start="101:36" pos:end="101:36">)</operator> <operator pos:start="101:38" pos:end="101:38">&amp;</operator> <operator pos:start="101:40" pos:end="101:40">~</operator><literal type="number" pos:start="101:41" pos:end="101:41">7</literal><operator pos:start="101:42" pos:end="101:42">)</operator></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>



        <default pos:start="107:9" pos:end="107:16">default:</default>

            <comment type="block" pos:start="109:13" pos:end="109:47">/* unknown magic -- just skip it */</comment>

            <expr_stmt pos:start="111:13" pos:end="111:43"><expr pos:start="111:13" pos:end="111:42"><name pos:start="111:13" pos:end="111:18">offset</name> <operator pos:start="111:20" pos:end="111:21">+=</operator> <operator pos:start="111:23" pos:end="111:23">(</operator><operator pos:start="111:24" pos:end="111:24">(</operator><name pos:start="111:25" pos:end="111:31"><name pos:start="111:25" pos:end="111:27">ext</name><operator pos:start="111:28" pos:end="111:28">.</operator><name pos:start="111:29" pos:end="111:31">len</name></name> <operator pos:start="111:33" pos:end="111:33">+</operator> <literal type="number" pos:start="111:35" pos:end="111:35">7</literal><operator pos:start="111:36" pos:end="111:36">)</operator> <operator pos:start="111:38" pos:end="111:38">&amp;</operator> <operator pos:start="111:40" pos:end="111:40">~</operator><literal type="number" pos:start="111:41" pos:end="111:41">7</literal><operator pos:start="111:42" pos:end="111:42">)</operator></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
