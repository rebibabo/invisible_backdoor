<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23045.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">qemu_irq</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:19">mpic_init</name> <parameter_list pos:start="1:21" pos:end="3:68">(<parameter pos:start="1:22" pos:end="1:48"><decl pos:start="1:22" pos:end="1:48"><type pos:start="1:22" pos:end="1:48"><name pos:start="1:22" pos:end="1:33">MemoryRegion</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:48">address_space</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:56">hwaddr</name></type> <name pos:start="1:58" pos:end="1:61">base</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:32"><decl pos:start="3:22" pos:end="3:32"><type pos:start="3:22" pos:end="3:32"><name pos:start="3:22" pos:end="3:24">int</name></type> <name pos:start="3:26" pos:end="3:32">nb_cpus</name></decl></parameter>, <parameter pos:start="3:35" pos:end="3:49"><decl pos:start="3:35" pos:end="3:49"><type pos:start="3:35" pos:end="3:49"><name pos:start="3:35" pos:end="3:42">qemu_irq</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier><modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:49">irqs</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:67"><decl pos:start="3:52" pos:end="3:67"><type pos:start="3:52" pos:end="3:67"><name pos:start="3:52" pos:end="3:59">qemu_irq</name></type> <name pos:start="3:61" pos:end="3:67">irq_out</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="113:1">{<block_content pos:start="7:5" pos:end="111:66">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:16">OpenPICState</name>    <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">mpp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type>           <name pos:start="9:19" pos:end="9:19">i</name></decl>;</decl_stmt>

    <struct pos:start="11:5" pos:end="31:6">struct <block pos:start="11:12" pos:end="21:5">{

        <decl_stmt pos:start="13:9" pos:end="13:37"><decl pos:start="13:9" pos:end="13:36"><type pos:start="13:9" pos:end="13:32"><specifier pos:start="13:9" pos:end="13:13">const</specifier> <name pos:start="13:15" pos:end="13:18">char</name>             <modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:36">name</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:36"><decl pos:start="15:9" pos:end="15:35"><type pos:start="15:9" pos:end="15:32"><name pos:start="15:9" pos:end="15:23">MemoryRegionOps</name> <specifier pos:start="15:25" pos:end="15:29">const</specifier>  <modifier pos:start="15:32" pos:end="15:32">*</modifier></type><name pos:start="15:33" pos:end="15:35">ops</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:31"><decl pos:start="17:9" pos:end="17:30"><type pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:14">hwaddr</name></type>      <name pos:start="17:21" pos:end="17:30">start_addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:37"><decl pos:start="19:9" pos:end="19:36"><type pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:18">ram_addr_t</name></type>              <name pos:start="19:33" pos:end="19:36">size</name></decl>;</decl_stmt>

    }</block> <decl pos:start="21:7" pos:end="31:5">const <name pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:16">list</name><index pos:start="21:17" pos:end="21:18">[]</index></name> <init pos:start="21:20" pos:end="31:5">= <expr pos:start="21:22" pos:end="31:5"><block pos:start="21:22" pos:end="31:5">{

        <expr pos:start="23:9" pos:end="23:75"><block pos:start="23:9" pos:end="23:75">{<expr pos:start="23:10" pos:end="23:14"><literal type="string" pos:start="23:10" pos:end="23:14">"glb"</literal></expr>, <expr pos:start="23:17" pos:end="23:35"><operator pos:start="23:17" pos:end="23:17">&amp;</operator><name pos:start="23:18" pos:end="23:35">openpic_glb_ops_be</name></expr>, <expr pos:start="23:38" pos:end="23:55"><name pos:start="23:38" pos:end="23:55">MPIC_GLB_REG_START</name></expr>, <expr pos:start="23:58" pos:end="23:74"><name pos:start="23:58" pos:end="23:74">MPIC_GLB_REG_SIZE</name></expr>}</block></expr>,

        <expr pos:start="25:9" pos:end="25:75"><block pos:start="25:9" pos:end="25:75">{<expr pos:start="25:10" pos:end="25:14"><literal type="string" pos:start="25:10" pos:end="25:14">"tmr"</literal></expr>, <expr pos:start="25:17" pos:end="25:35"><operator pos:start="25:17" pos:end="25:17">&amp;</operator><name pos:start="25:18" pos:end="25:35">openpic_tmr_ops_be</name></expr>, <expr pos:start="25:38" pos:end="25:55"><name pos:start="25:38" pos:end="25:55">MPIC_TMR_REG_START</name></expr>, <expr pos:start="25:58" pos:end="25:74"><name pos:start="25:58" pos:end="25:74">MPIC_TMR_REG_SIZE</name></expr>}</block></expr>,

        <expr pos:start="27:9" pos:end="27:75"><block pos:start="27:9" pos:end="27:75">{<expr pos:start="27:10" pos:end="27:14"><literal type="string" pos:start="27:10" pos:end="27:14">"src"</literal></expr>, <expr pos:start="27:17" pos:end="27:35"><operator pos:start="27:17" pos:end="27:17">&amp;</operator><name pos:start="27:18" pos:end="27:35">openpic_src_ops_be</name></expr>, <expr pos:start="27:38" pos:end="27:55"><name pos:start="27:38" pos:end="27:55">MPIC_SRC_REG_START</name></expr>, <expr pos:start="27:58" pos:end="27:74"><name pos:start="27:58" pos:end="27:74">MPIC_SRC_REG_SIZE</name></expr>}</block></expr>,

        <expr pos:start="29:9" pos:end="29:75"><block pos:start="29:9" pos:end="29:75">{<expr pos:start="29:10" pos:end="29:14"><literal type="string" pos:start="29:10" pos:end="29:14">"cpu"</literal></expr>, <expr pos:start="29:17" pos:end="29:35"><operator pos:start="29:17" pos:end="29:17">&amp;</operator><name pos:start="29:18" pos:end="29:35">openpic_cpu_ops_be</name></expr>, <expr pos:start="29:38" pos:end="29:55"><name pos:start="29:38" pos:end="29:55">MPIC_CPU_REG_START</name></expr>, <expr pos:start="29:58" pos:end="29:74"><name pos:start="29:58" pos:end="29:74">MPIC_CPU_REG_SIZE</name></expr>}</block></expr>,

    }</block></expr></init></decl>;</struct>



    <expr_stmt pos:start="35:5" pos:end="35:42"><expr pos:start="35:5" pos:end="35:41"><name pos:start="35:5" pos:end="35:7">mpp</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:41"><name pos:start="35:11" pos:end="35:19">g_malloc0</name><argument_list pos:start="35:20" pos:end="35:41">(<argument pos:start="35:21" pos:end="35:40"><expr pos:start="35:21" pos:end="35:40"><sizeof pos:start="35:21" pos:end="35:40">sizeof<argument_list pos:start="35:27" pos:end="35:40">(<argument pos:start="35:28" pos:end="35:39"><expr pos:start="35:28" pos:end="35:39"><name pos:start="35:28" pos:end="35:39">OpenPICState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:51"><expr pos:start="39:5" pos:end="39:50"><call pos:start="39:5" pos:end="39:50"><name pos:start="39:5" pos:end="39:22">memory_region_init</name><argument_list pos:start="39:23" pos:end="39:50">(<argument pos:start="39:24" pos:end="39:32"><expr pos:start="39:24" pos:end="39:32"><operator pos:start="39:24" pos:end="39:24">&amp;</operator><name pos:start="39:25" pos:end="39:32"><name pos:start="39:25" pos:end="39:27">mpp</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:32">mem</name></name></expr></argument>, <argument pos:start="39:35" pos:end="39:40"><expr pos:start="39:35" pos:end="39:40"><literal type="string" pos:start="39:35" pos:end="39:40">"mpic"</literal></expr></argument>, <argument pos:start="39:43" pos:end="39:49"><expr pos:start="39:43" pos:end="39:49"><literal type="number" pos:start="39:43" pos:end="39:49">0x40000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:64"><expr pos:start="41:5" pos:end="41:63"><call pos:start="41:5" pos:end="41:63"><name pos:start="41:5" pos:end="41:31">memory_region_add_subregion</name><argument_list pos:start="41:32" pos:end="41:63">(<argument pos:start="41:33" pos:end="41:45"><expr pos:start="41:33" pos:end="41:45"><name pos:start="41:33" pos:end="41:45">address_space</name></expr></argument>, <argument pos:start="41:48" pos:end="41:51"><expr pos:start="41:48" pos:end="41:51"><name pos:start="41:48" pos:end="41:51">base</name></expr></argument>, <argument pos:start="41:54" pos:end="41:62"><expr pos:start="41:54" pos:end="41:62"><operator pos:start="41:54" pos:end="41:54">&amp;</operator><name pos:start="41:55" pos:end="41:62"><name pos:start="41:55" pos:end="41:57">mpp</name><operator pos:start="41:58" pos:end="41:59">-&gt;</operator><name pos:start="41:60" pos:end="41:62">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="45:5" pos:end="59:5">for <control pos:start="45:9" pos:end="45:54">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:49"><expr pos:start="45:17" pos:end="45:48"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <sizeof pos:start="45:21" pos:end="45:32">sizeof<argument_list pos:start="45:27" pos:end="45:32">(<argument pos:start="45:28" pos:end="45:31"><expr pos:start="45:28" pos:end="45:31"><name pos:start="45:28" pos:end="45:31">list</name></expr></argument>)</argument_list></sizeof><operator pos:start="45:33" pos:end="45:33">/</operator><sizeof pos:start="45:34" pos:end="45:48">sizeof<argument_list pos:start="45:40" pos:end="45:48">(<argument pos:start="45:41" pos:end="45:47"><expr pos:start="45:41" pos:end="45:47"><name pos:start="45:41" pos:end="45:47"><name pos:start="45:41" pos:end="45:44">list</name><index pos:start="45:45" pos:end="45:47">[<expr pos:start="45:46" pos:end="45:46"><literal type="number" pos:start="45:46" pos:end="45:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr pos:start="45:51" pos:end="45:53"><expr pos:start="45:51" pos:end="45:53"><name pos:start="45:51" pos:end="45:51">i</name><operator pos:start="45:52" pos:end="45:53">++</operator></expr></incr>)</control> <block pos:start="45:56" pos:end="59:5">{<block_content pos:start="49:9" pos:end="57:57">



        <expr_stmt pos:start="49:9" pos:end="51:58"><expr pos:start="49:9" pos:end="51:57"><call pos:start="49:9" pos:end="51:57"><name pos:start="49:9" pos:end="49:29">memory_region_init_io</name><argument_list pos:start="49:30" pos:end="51:57">(<argument pos:start="49:31" pos:end="49:49"><expr pos:start="49:31" pos:end="49:49"><operator pos:start="49:31" pos:end="49:31">&amp;</operator><name pos:start="49:32" pos:end="49:49"><name pos:start="49:32" pos:end="49:34">mpp</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:46">sub_io_mem</name><index pos:start="49:47" pos:end="49:49">[<expr pos:start="49:48" pos:end="49:48"><name pos:start="49:48" pos:end="49:48">i</name></expr>]</index></name></expr></argument>, <argument pos:start="49:52" pos:end="49:62"><expr pos:start="49:52" pos:end="49:62"><name pos:start="49:52" pos:end="49:58"><name pos:start="49:52" pos:end="49:55">list</name><index pos:start="49:56" pos:end="49:58">[<expr pos:start="49:57" pos:end="49:57"><name pos:start="49:57" pos:end="49:57">i</name></expr>]</index></name><operator pos:start="49:59" pos:end="49:59">.</operator><name pos:start="49:60" pos:end="49:62">ops</name></expr></argument>, <argument pos:start="49:65" pos:end="49:67"><expr pos:start="49:65" pos:end="49:67"><name pos:start="49:65" pos:end="49:67">mpp</name></expr></argument>,

                              <argument pos:start="51:31" pos:end="51:42"><expr pos:start="51:31" pos:end="51:42"><name pos:start="51:31" pos:end="51:37"><name pos:start="51:31" pos:end="51:34">list</name><index pos:start="51:35" pos:end="51:37">[<expr pos:start="51:36" pos:end="51:36"><name pos:start="51:36" pos:end="51:36">i</name></expr>]</index></name><operator pos:start="51:38" pos:end="51:38">.</operator><name pos:start="51:39" pos:end="51:42">name</name></expr></argument>, <argument pos:start="51:45" pos:end="51:56"><expr pos:start="51:45" pos:end="51:56"><name pos:start="51:45" pos:end="51:51"><name pos:start="51:45" pos:end="51:48">list</name><index pos:start="51:49" pos:end="51:51">[<expr pos:start="51:50" pos:end="51:50"><name pos:start="51:50" pos:end="51:50">i</name></expr>]</index></name><operator pos:start="51:52" pos:end="51:52">.</operator><name pos:start="51:53" pos:end="51:56">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="57:57"><expr pos:start="55:9" pos:end="57:56"><call pos:start="55:9" pos:end="57:56"><name pos:start="55:9" pos:end="55:35">memory_region_add_subregion</name><argument_list pos:start="55:36" pos:end="57:56">(<argument pos:start="55:37" pos:end="55:45"><expr pos:start="55:37" pos:end="55:45"><operator pos:start="55:37" pos:end="55:37">&amp;</operator><name pos:start="55:38" pos:end="55:45"><name pos:start="55:38" pos:end="55:40">mpp</name><operator pos:start="55:41" pos:end="55:42">-&gt;</operator><name pos:start="55:43" pos:end="55:45">mem</name></name></expr></argument>, <argument pos:start="55:48" pos:end="55:65"><expr pos:start="55:48" pos:end="55:65"><name pos:start="55:48" pos:end="55:54"><name pos:start="55:48" pos:end="55:51">list</name><index pos:start="55:52" pos:end="55:54">[<expr pos:start="55:53" pos:end="55:53"><name pos:start="55:53" pos:end="55:53">i</name></expr>]</index></name><operator pos:start="55:55" pos:end="55:55">.</operator><name pos:start="55:56" pos:end="55:65">start_addr</name></expr></argument>,

                                    <argument pos:start="57:37" pos:end="57:55"><expr pos:start="57:37" pos:end="57:55"><operator pos:start="57:37" pos:end="57:37">&amp;</operator><name pos:start="57:38" pos:end="57:55"><name pos:start="57:38" pos:end="57:40">mpp</name><operator pos:start="57:41" pos:end="57:42">-&gt;</operator><name pos:start="57:43" pos:end="57:52">sub_io_mem</name><index pos:start="57:53" pos:end="57:55">[<expr pos:start="57:54" pos:end="57:54"><name pos:start="57:54" pos:end="57:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="63:5" pos:end="63:27"><expr pos:start="63:5" pos:end="63:26"><name pos:start="63:5" pos:end="63:16"><name pos:start="63:5" pos:end="63:7">mpp</name><operator pos:start="63:8" pos:end="63:9">-&gt;</operator><name pos:start="63:10" pos:end="63:16">nb_cpus</name></name> <operator pos:start="63:18" pos:end="63:18">=</operator> <name pos:start="63:20" pos:end="63:26">nb_cpus</name></expr>;</expr_stmt>

    <comment type="block" pos:start="65:5" pos:end="67:70">/* 12 external sources, 48 internal sources , 4 timer sources,

       4 IPI sources, 4 messaging sources, and 8 Shared MSI sources */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:22"><expr pos:start="69:5" pos:end="69:21"><name pos:start="69:5" pos:end="69:16"><name pos:start="69:5" pos:end="69:7">mpp</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:16">nb_irqs</name></name> <operator pos:start="69:18" pos:end="69:18">=</operator> <literal type="number" pos:start="69:20" pos:end="69:21">80</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:32"><expr pos:start="71:5" pos:end="71:31"><name pos:start="71:5" pos:end="71:12"><name pos:start="71:5" pos:end="71:7">mpp</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:12">vid</name></name> <operator pos:start="71:14" pos:end="71:14">=</operator> <name pos:start="71:16" pos:end="71:31">VID_REVISION_1_2</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:29"><expr pos:start="73:5" pos:end="73:28"><name pos:start="73:5" pos:end="73:13"><name pos:start="73:5" pos:end="73:7">mpp</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:13">veni</name></name> <operator pos:start="73:15" pos:end="73:15">=</operator> <name pos:start="73:17" pos:end="73:28">VENI_GENERIC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:28"><expr pos:start="75:5" pos:end="75:27"><name pos:start="75:5" pos:end="75:18"><name pos:start="75:5" pos:end="75:7">mpp</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:18">spve_mask</name></name> <operator pos:start="75:20" pos:end="75:20">=</operator> <literal type="number" pos:start="75:22" pos:end="75:27">0xFFFF</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:33"><expr pos:start="77:5" pos:end="77:32"><name pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:7">mpp</name><operator pos:start="77:8" pos:end="77:9">-&gt;</operator><name pos:start="77:10" pos:end="77:19">tifr_reset</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <literal type="number" pos:start="77:23" pos:end="77:32">0x00000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:33"><expr pos:start="79:5" pos:end="79:32"><name pos:start="79:5" pos:end="79:19"><name pos:start="79:5" pos:end="79:7">mpp</name><operator pos:start="79:8" pos:end="79:9">-&gt;</operator><name pos:start="79:10" pos:end="79:19">ipvp_reset</name></name> <operator pos:start="79:21" pos:end="79:21">=</operator> <literal type="number" pos:start="79:23" pos:end="79:32">0x80000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:32"><expr pos:start="81:5" pos:end="81:31"><name pos:start="81:5" pos:end="81:18"><name pos:start="81:5" pos:end="81:7">mpp</name><operator pos:start="81:8" pos:end="81:9">-&gt;</operator><name pos:start="81:10" pos:end="81:18">ide_reset</name></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <literal type="number" pos:start="81:22" pos:end="81:31">0x00000001</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:32"><expr pos:start="83:5" pos:end="83:31"><name pos:start="83:5" pos:end="83:16"><name pos:start="83:5" pos:end="83:7">mpp</name><operator pos:start="83:8" pos:end="83:9">-&gt;</operator><name pos:start="83:10" pos:end="83:16">max_irq</name></name> <operator pos:start="83:18" pos:end="83:18">=</operator> <name pos:start="83:20" pos:end="83:31">MPIC_MAX_IRQ</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:33"><expr pos:start="85:5" pos:end="85:32"><name pos:start="85:5" pos:end="85:17"><name pos:start="85:5" pos:end="85:7">mpp</name><operator pos:start="85:8" pos:end="85:9">-&gt;</operator><name pos:start="85:10" pos:end="85:17">irq_ipi0</name></name> <operator pos:start="85:19" pos:end="85:19">=</operator> <name pos:start="85:21" pos:end="85:32">MPIC_IPI_IRQ</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:33"><expr pos:start="87:5" pos:end="87:32"><name pos:start="87:5" pos:end="87:17"><name pos:start="87:5" pos:end="87:7">mpp</name><operator pos:start="87:8" pos:end="87:9">-&gt;</operator><name pos:start="87:10" pos:end="87:17">irq_tim0</name></name> <operator pos:start="87:19" pos:end="87:19">=</operator> <name pos:start="87:21" pos:end="87:32">MPIC_TMR_IRQ</name></expr>;</expr_stmt>



    <for pos:start="91:5" pos:end="93:35">for <control pos:start="91:9" pos:end="91:33">(<init pos:start="91:10" pos:end="91:15"><expr pos:start="91:10" pos:end="91:14"><name pos:start="91:10" pos:end="91:10">i</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <literal type="number" pos:start="91:14" pos:end="91:14">0</literal></expr>;</init> <condition pos:start="91:17" pos:end="91:28"><expr pos:start="91:17" pos:end="91:27"><name pos:start="91:17" pos:end="91:17">i</name> <operator pos:start="91:19" pos:end="91:19">&lt;</operator> <name pos:start="91:21" pos:end="91:27">nb_cpus</name></expr>;</condition> <incr pos:start="91:30" pos:end="91:32"><expr pos:start="91:30" pos:end="91:32"><name pos:start="91:30" pos:end="91:30">i</name><operator pos:start="91:31" pos:end="91:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="93:9" pos:end="93:35"><block_content pos:start="93:9" pos:end="93:35">

        <expr_stmt pos:start="93:9" pos:end="93:35"><expr pos:start="93:9" pos:end="93:34"><name pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:11">mpp</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:16">dst</name><index pos:start="93:17" pos:end="93:19">[<expr pos:start="93:18" pos:end="93:18"><name pos:start="93:18" pos:end="93:18">i</name></expr>]</index></name><operator pos:start="93:20" pos:end="93:20">.</operator><name pos:start="93:21" pos:end="93:24">irqs</name> <operator pos:start="93:26" pos:end="93:26">=</operator> <name pos:start="93:28" pos:end="93:34"><name pos:start="93:28" pos:end="93:31">irqs</name><index pos:start="93:32" pos:end="93:34">[<expr pos:start="93:33" pos:end="93:33"><name pos:start="93:33" pos:end="93:33">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="95:5" pos:end="95:27"><expr pos:start="95:5" pos:end="95:26"><name pos:start="95:5" pos:end="95:16"><name pos:start="95:5" pos:end="95:7">mpp</name><operator pos:start="95:8" pos:end="95:9">-&gt;</operator><name pos:start="95:10" pos:end="95:16">irq_out</name></name> <operator pos:start="95:18" pos:end="95:18">=</operator> <name pos:start="95:20" pos:end="95:26">irq_out</name></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:43">/* Enable critical interrupt support */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:40"><expr pos:start="101:5" pos:end="101:39"><name pos:start="101:5" pos:end="101:14"><name pos:start="101:5" pos:end="101:7">mpp</name><operator pos:start="101:8" pos:end="101:9">-&gt;</operator><name pos:start="101:10" pos:end="101:14">flags</name></name> <operator pos:start="101:16" pos:end="101:17">|=</operator> <name pos:start="101:19" pos:end="101:39">OPENPIC_FLAG_IDE_CRIT</name></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:73"><expr pos:start="105:5" pos:end="105:72"><call pos:start="105:5" pos:end="105:72"><name pos:start="105:5" pos:end="105:19">register_savevm</name><argument_list pos:start="105:20" pos:end="105:72">(<argument pos:start="105:21" pos:end="105:24"><expr pos:start="105:21" pos:end="105:24"><name pos:start="105:21" pos:end="105:24">NULL</name></expr></argument>, <argument pos:start="105:27" pos:end="105:32"><expr pos:start="105:27" pos:end="105:32"><literal type="string" pos:start="105:27" pos:end="105:32">"mpic"</literal></expr></argument>, <argument pos:start="105:35" pos:end="105:35"><expr pos:start="105:35" pos:end="105:35"><literal type="number" pos:start="105:35" pos:end="105:35">0</literal></expr></argument>, <argument pos:start="105:38" pos:end="105:38"><expr pos:start="105:38" pos:end="105:38"><literal type="number" pos:start="105:38" pos:end="105:38">2</literal></expr></argument>, <argument pos:start="105:41" pos:end="105:52"><expr pos:start="105:41" pos:end="105:52"><name pos:start="105:41" pos:end="105:52">openpic_save</name></expr></argument>, <argument pos:start="105:55" pos:end="105:66"><expr pos:start="105:55" pos:end="105:66"><name pos:start="105:55" pos:end="105:66">openpic_load</name></expr></argument>, <argument pos:start="105:69" pos:end="105:71"><expr pos:start="105:69" pos:end="105:71"><name pos:start="105:69" pos:end="105:71">mpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:44"><expr pos:start="107:5" pos:end="107:43"><call pos:start="107:5" pos:end="107:43"><name pos:start="107:5" pos:end="107:23">qemu_register_reset</name><argument_list pos:start="107:24" pos:end="107:43">(<argument pos:start="107:25" pos:end="107:37"><expr pos:start="107:25" pos:end="107:37"><name pos:start="107:25" pos:end="107:37">openpic_reset</name></expr></argument>, <argument pos:start="107:40" pos:end="107:42"><expr pos:start="107:40" pos:end="107:42"><name pos:start="107:40" pos:end="107:42">mpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="111:5" pos:end="111:66">return <expr pos:start="111:12" pos:end="111:65"><call pos:start="111:12" pos:end="111:65"><name pos:start="111:12" pos:end="111:29">qemu_allocate_irqs</name><argument_list pos:start="111:30" pos:end="111:65">(<argument pos:start="111:31" pos:end="111:45"><expr pos:start="111:31" pos:end="111:45"><name pos:start="111:31" pos:end="111:45">openpic_set_irq</name></expr></argument>, <argument pos:start="111:48" pos:end="111:50"><expr pos:start="111:48" pos:end="111:50"><name pos:start="111:48" pos:end="111:50">mpp</name></expr></argument>, <argument pos:start="111:53" pos:end="111:64"><expr pos:start="111:53" pos:end="111:64"><name pos:start="111:53" pos:end="111:64"><name pos:start="111:53" pos:end="111:55">mpp</name><operator pos:start="111:56" pos:end="111:57">-&gt;</operator><name pos:start="111:58" pos:end="111:64">max_irq</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
