<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8045.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:24">address_space_unmap</name><parameter_list pos:start="1:25" pos:end="3:57">(<parameter pos:start="1:26" pos:end="1:41"><decl pos:start="1:26" pos:end="1:41"><type pos:start="1:26" pos:end="1:41"><name pos:start="1:26" pos:end="1:37">AddressSpace</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">as</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:47">void</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:55">buffer</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:67"><decl pos:start="1:58" pos:end="1:67"><type pos:start="1:58" pos:end="1:67"><name pos:start="1:58" pos:end="1:63">hwaddr</name></type> <name pos:start="1:65" pos:end="1:67">len</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:37"><decl pos:start="3:26" pos:end="3:37"><type pos:start="3:26" pos:end="3:37"><name pos:start="3:26" pos:end="3:28">int</name></type> <name pos:start="3:30" pos:end="3:37">is_write</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:56"><decl pos:start="3:40" pos:end="3:56"><type pos:start="3:40" pos:end="3:56"><name pos:start="3:40" pos:end="3:45">hwaddr</name></type> <name pos:start="3:47" pos:end="3:56">access_len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="67:1">{<block_content pos:start="7:5" pos:end="65:29">

    <if_stmt pos:start="7:5" pos:end="51:5"><if pos:start="7:5" pos:end="51:5">if <condition pos:start="7:8" pos:end="7:32">(<expr pos:start="7:9" pos:end="7:31"><name pos:start="7:9" pos:end="7:14">buffer</name> <operator pos:start="7:16" pos:end="7:17">!=</operator> <name pos:start="7:19" pos:end="7:31"><name pos:start="7:19" pos:end="7:24">bounce</name><operator pos:start="7:25" pos:end="7:25">.</operator><name pos:start="7:26" pos:end="7:31">buffer</name></name></expr>)</condition> <block pos:start="7:34" pos:end="51:5">{<block_content pos:start="9:9" pos:end="49:15">

        <decl_stmt pos:start="9:9" pos:end="9:25"><decl pos:start="9:9" pos:end="9:24"><type pos:start="9:9" pos:end="9:22"><name pos:start="9:9" pos:end="9:20">MemoryRegion</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">mr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:25"><decl pos:start="11:9" pos:end="11:24"><type pos:start="11:9" pos:end="11:18"><name pos:start="11:9" pos:end="11:18">ram_addr_t</name></type> <name pos:start="11:20" pos:end="11:24">addr1</name></decl>;</decl_stmt>



        <expr_stmt pos:start="15:9" pos:end="15:53"><expr pos:start="15:9" pos:end="15:52"><name pos:start="15:9" pos:end="15:10">mr</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <call pos:start="15:14" pos:end="15:52"><name pos:start="15:14" pos:end="15:36">qemu_ram_addr_from_host</name><argument_list pos:start="15:37" pos:end="15:52">(<argument pos:start="15:38" pos:end="15:43"><expr pos:start="15:38" pos:end="15:43"><name pos:start="15:38" pos:end="15:43">buffer</name></expr></argument>, <argument pos:start="15:46" pos:end="15:51"><expr pos:start="15:46" pos:end="15:51"><operator pos:start="15:46" pos:end="15:46">&amp;</operator><name pos:start="15:47" pos:end="15:51">addr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:27"><expr pos:start="17:9" pos:end="17:26"><call pos:start="17:9" pos:end="17:26"><name pos:start="17:9" pos:end="17:14">assert</name><argument_list pos:start="17:15" pos:end="17:26">(<argument pos:start="17:16" pos:end="17:25"><expr pos:start="17:16" pos:end="17:25"><name pos:start="17:16" pos:end="17:17">mr</name> <operator pos:start="17:19" pos:end="17:20">!=</operator> <name pos:start="17:22" pos:end="17:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="39:9"><if pos:start="19:9" pos:end="39:9">if <condition pos:start="19:12" pos:end="19:21">(<expr pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:20">is_write</name></expr>)</condition> <block pos:start="19:23" pos:end="39:9">{<block_content pos:start="21:13" pos:end="37:13">

            <while pos:start="21:13" pos:end="37:13">while <condition pos:start="21:19" pos:end="21:30">(<expr pos:start="21:20" pos:end="21:29"><name pos:start="21:20" pos:end="21:29">access_len</name></expr>)</condition> <block pos:start="21:32" pos:end="37:13">{<block_content pos:start="23:17" pos:end="35:32">

                <decl_stmt pos:start="23:17" pos:end="23:27"><decl pos:start="23:17" pos:end="23:26"><type pos:start="23:17" pos:end="23:24"><name pos:start="23:17" pos:end="23:24">unsigned</name></type> <name pos:start="23:26" pos:end="23:26">l</name></decl>;</decl_stmt>

                <expr_stmt pos:start="25:17" pos:end="25:37"><expr pos:start="25:17" pos:end="25:36"><name pos:start="25:17" pos:end="25:17">l</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <name pos:start="25:21" pos:end="25:36">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

                <if_stmt pos:start="27:17" pos:end="29:35"><if pos:start="27:17" pos:end="29:35">if <condition pos:start="27:20" pos:end="27:35">(<expr pos:start="27:21" pos:end="27:34"><name pos:start="27:21" pos:end="27:21">l</name> <operator pos:start="27:23" pos:end="27:23">&gt;</operator> <name pos:start="27:25" pos:end="27:34">access_len</name></expr>)</condition><block type="pseudo" pos:start="29:21" pos:end="29:35"><block_content pos:start="29:21" pos:end="29:35">

                    <expr_stmt pos:start="29:21" pos:end="29:35"><expr pos:start="29:21" pos:end="29:34"><name pos:start="29:21" pos:end="29:21">l</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <name pos:start="29:25" pos:end="29:34">access_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="31:17" pos:end="31:51"><expr pos:start="31:17" pos:end="31:50"><call pos:start="31:17" pos:end="31:50"><name pos:start="31:17" pos:end="31:40">invalidate_and_set_dirty</name><argument_list pos:start="31:41" pos:end="31:50">(<argument pos:start="31:42" pos:end="31:46"><expr pos:start="31:42" pos:end="31:46"><name pos:start="31:42" pos:end="31:46">addr1</name></expr></argument>, <argument pos:start="31:49" pos:end="31:49"><expr pos:start="31:49" pos:end="31:49"><name pos:start="31:49" pos:end="31:49">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:27"><expr pos:start="33:17" pos:end="33:26"><name pos:start="33:17" pos:end="33:21">addr1</name> <operator pos:start="33:23" pos:end="33:24">+=</operator> <name pos:start="33:26" pos:end="33:26">l</name></expr>;</expr_stmt>

                <expr_stmt pos:start="35:17" pos:end="35:32"><expr pos:start="35:17" pos:end="35:31"><name pos:start="35:17" pos:end="35:26">access_len</name> <operator pos:start="35:28" pos:end="35:29">-=</operator> <name pos:start="35:31" pos:end="35:31">l</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="45:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:26">(<expr pos:start="41:13" pos:end="41:25"><call pos:start="41:13" pos:end="41:25"><name pos:start="41:13" pos:end="41:23">xen_enabled</name><argument_list pos:start="41:24" pos:end="41:25">()</argument_list></call></expr>)</condition> <block pos:start="41:28" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:51">

            <expr_stmt pos:start="43:13" pos:end="43:51"><expr pos:start="43:13" pos:end="43:50"><call pos:start="43:13" pos:end="43:50"><name pos:start="43:13" pos:end="43:42">xen_invalidate_map_cache_entry</name><argument_list pos:start="43:43" pos:end="43:50">(<argument pos:start="43:44" pos:end="43:49"><expr pos:start="43:44" pos:end="43:49"><name pos:start="43:44" pos:end="43:49">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:32"><expr pos:start="47:9" pos:end="47:31"><call pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:27">memory_region_unref</name><argument_list pos:start="47:28" pos:end="47:31">(<argument pos:start="47:29" pos:end="47:30"><expr pos:start="47:29" pos:end="47:30"><name pos:start="47:29" pos:end="47:30">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:17">(<expr pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:16">is_write</name></expr>)</condition> <block pos:start="53:19" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:72">

        <expr_stmt pos:start="55:9" pos:end="55:72"><expr pos:start="55:9" pos:end="55:71"><call pos:start="55:9" pos:end="55:71"><name pos:start="55:9" pos:end="55:27">address_space_write</name><argument_list pos:start="55:28" pos:end="55:71">(<argument pos:start="55:29" pos:end="55:30"><expr pos:start="55:29" pos:end="55:30"><name pos:start="55:29" pos:end="55:30">as</name></expr></argument>, <argument pos:start="55:33" pos:end="55:43"><expr pos:start="55:33" pos:end="55:43"><name pos:start="55:33" pos:end="55:43"><name pos:start="55:33" pos:end="55:38">bounce</name><operator pos:start="55:39" pos:end="55:39">.</operator><name pos:start="55:40" pos:end="55:43">addr</name></name></expr></argument>, <argument pos:start="55:46" pos:end="55:58"><expr pos:start="55:46" pos:end="55:58"><name pos:start="55:46" pos:end="55:58"><name pos:start="55:46" pos:end="55:51">bounce</name><operator pos:start="55:52" pos:end="55:52">.</operator><name pos:start="55:53" pos:end="55:58">buffer</name></name></expr></argument>, <argument pos:start="55:61" pos:end="55:70"><expr pos:start="55:61" pos:end="55:70"><name pos:start="55:61" pos:end="55:70">access_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:30"><expr pos:start="59:5" pos:end="59:29"><call pos:start="59:5" pos:end="59:29"><name pos:start="59:5" pos:end="59:14">qemu_vfree</name><argument_list pos:start="59:15" pos:end="59:29">(<argument pos:start="59:16" pos:end="59:28"><expr pos:start="59:16" pos:end="59:28"><name pos:start="59:16" pos:end="59:28"><name pos:start="59:16" pos:end="59:21">bounce</name><operator pos:start="59:22" pos:end="59:22">.</operator><name pos:start="59:23" pos:end="59:28">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:25"><expr pos:start="61:5" pos:end="61:24"><name pos:start="61:5" pos:end="61:17"><name pos:start="61:5" pos:end="61:10">bounce</name><operator pos:start="61:11" pos:end="61:11">.</operator><name pos:start="61:12" pos:end="61:17">buffer</name></name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:24">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><call pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:23">memory_region_unref</name><argument_list pos:start="63:24" pos:end="63:34">(<argument pos:start="63:25" pos:end="63:33"><expr pos:start="63:25" pos:end="63:33"><name pos:start="63:25" pos:end="63:33"><name pos:start="63:25" pos:end="63:30">bounce</name><operator pos:start="63:31" pos:end="63:31">.</operator><name pos:start="63:32" pos:end="63:33">mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:29"><expr pos:start="65:5" pos:end="65:28"><call pos:start="65:5" pos:end="65:28"><name pos:start="65:5" pos:end="65:26">cpu_notify_map_clients</name><argument_list pos:start="65:27" pos:end="65:28">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
