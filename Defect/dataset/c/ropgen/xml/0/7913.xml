<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7913.c" pos:tabs="8"><function pos:start="1:1" pos:end="407:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="1:91">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:57"><decl pos:start="1:48" pos:end="1:57"><type pos:start="1:48" pos:end="1:57"><name pos:start="1:48" pos:end="1:51">void</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">data</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:62">int</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:73">data_size</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:90"><decl pos:start="1:76" pos:end="1:90"><type pos:start="1:76" pos:end="1:90"><name pos:start="1:76" pos:end="1:83">AVPacket</name> <modifier pos:start="1:85" pos:end="1:85">*</modifier></type><name pos:start="1:86" pos:end="1:90">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="407:1">{<block_content pos:start="5:5" pos:end="405:20">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">buf</name> <init pos:start="5:24" pos:end="5:36">= <expr pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:30">avpkt</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">buf_size</name> <init pos:start="7:18" pos:end="7:30">= <expr pos:start="7:20" pos:end="7:30"><name pos:start="7:20" pos:end="7:30"><name pos:start="7:20" pos:end="7:24">avpkt</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:15">ZmbvContext</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier> <specifier pos:start="9:19" pos:end="9:23">const</specifier></type> <name pos:start="9:25" pos:end="9:25">c</name> <init pos:start="9:27" pos:end="9:44">= <expr pos:start="9:29" pos:end="9:44"><name pos:start="9:29" pos:end="9:44"><name pos:start="9:29" pos:end="9:33">avctx</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">zret</name> <init pos:start="11:14" pos:end="11:19">= <expr pos:start="11:16" pos:end="11:19"><name pos:start="11:16" pos:end="11:19">Z_OK</name></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="11:22" pos:end="11:40">// Zlib return code</comment>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">len</name> <init pos:start="13:13" pos:end="13:22">= <expr pos:start="13:15" pos:end="13:22"><name pos:start="13:15" pos:end="13:22">buf_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">hi_ver</name></decl>, <decl pos:start="15:17" pos:end="15:22"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:17" pos:end="15:22">lo_ver</name></decl>, <decl pos:start="15:25" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:25" pos:end="15:27">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:50"><if pos:start="19:5" pos:end="21:50">if <condition pos:start="19:8" pos:end="19:23">(<expr pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:9">c</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:14">pic</name><operator pos:start="19:15" pos:end="19:15">.</operator><name pos:start="19:16" pos:end="19:19">data</name><index pos:start="19:20" pos:end="19:22">[<expr pos:start="19:21" pos:end="19:21"><literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:50"><block_content pos:start="21:13" pos:end="21:50">

            <expr_stmt pos:start="21:13" pos:end="21:50"><expr pos:start="21:13" pos:end="21:49"><call pos:start="21:13" pos:end="21:49"><name pos:start="21:13" pos:end="21:33"><name pos:start="21:13" pos:end="21:17">avctx</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:33">release_buffer</name></name><argument_list pos:start="21:34" pos:end="21:49">(<argument pos:start="21:35" pos:end="21:39"><expr pos:start="21:35" pos:end="21:39"><name pos:start="21:35" pos:end="21:39">avctx</name></expr></argument>, <argument pos:start="21:42" pos:end="21:48"><expr pos:start="21:42" pos:end="21:48"><operator pos:start="21:42" pos:end="21:42">&amp;</operator><name pos:start="21:43" pos:end="21:48"><name pos:start="21:43" pos:end="21:43">c</name><operator pos:start="21:44" pos:end="21:45">-&gt;</operator><name pos:start="21:46" pos:end="21:48">pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:5">c</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:10">pic</name><operator pos:start="25:11" pos:end="25:11">.</operator><name pos:start="25:12" pos:end="25:20">reference</name></name> <operator pos:start="25:22" pos:end="25:22">=</operator> <literal type="number" pos:start="25:24" pos:end="25:24">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:48"><expr pos:start="27:5" pos:end="27:47"><name pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:5">c</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:10">pic</name><operator pos:start="27:11" pos:end="27:11">.</operator><name pos:start="27:12" pos:end="27:23">buffer_hints</name></name> <operator pos:start="27:25" pos:end="27:25">=</operator> <name pos:start="27:27" pos:end="27:47">FF_BUFFER_HINTS_VALID</name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:54">(<expr pos:start="29:9" pos:end="29:53"><operator pos:start="29:9" pos:end="29:9">(</operator><name pos:start="29:10" pos:end="29:12">ret</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:48"><name pos:start="29:16" pos:end="29:32"><name pos:start="29:16" pos:end="29:20">avctx</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:32">get_buffer</name></name><argument_list pos:start="29:33" pos:end="29:48">(<argument pos:start="29:34" pos:end="29:38"><expr pos:start="29:34" pos:end="29:38"><name pos:start="29:34" pos:end="29:38">avctx</name></expr></argument>, <argument pos:start="29:41" pos:end="29:47"><expr pos:start="29:41" pos:end="29:47"><operator pos:start="29:41" pos:end="29:41">&amp;</operator><name pos:start="29:42" pos:end="29:47"><name pos:start="29:42" pos:end="29:42">c</name><operator pos:start="29:43" pos:end="29:44">-&gt;</operator><name pos:start="29:45" pos:end="29:47">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="29:49" pos:end="29:49">)</operator> <operator pos:start="29:51" pos:end="29:51">&lt;</operator> <literal type="number" pos:start="29:53" pos:end="29:53">0</literal></expr>)</condition> <block pos:start="29:56" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:19">

        <expr_stmt pos:start="31:9" pos:end="31:61"><expr pos:start="31:9" pos:end="31:60"><call pos:start="31:9" pos:end="31:60"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:60">(<argument pos:start="31:16" pos:end="31:20"><expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">avctx</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:37" pos:end="31:59"><expr pos:start="31:37" pos:end="31:59"><literal type="string" pos:start="31:37" pos:end="31:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:19">return <expr pos:start="33:16" pos:end="33:18"><name pos:start="33:16" pos:end="33:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:22">/* parse header */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:5">c</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:12">flags</name></name> <operator pos:start="41:14" pos:end="41:14">=</operator> <name pos:start="41:16" pos:end="41:21"><name pos:start="41:16" pos:end="41:18">buf</name><index pos:start="41:19" pos:end="41:21">[<expr pos:start="41:20" pos:end="41:20"><literal type="number" pos:start="41:20" pos:end="41:20">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:10"><expr pos:start="43:5" pos:end="43:9"><name pos:start="43:5" pos:end="43:7">buf</name><operator pos:start="43:8" pos:end="43:9">++</operator></expr>;</expr_stmt> <expr_stmt pos:start="43:12" pos:end="43:17"><expr pos:start="43:12" pos:end="43:16"><name pos:start="43:12" pos:end="43:14">len</name><operator pos:start="43:15" pos:end="43:16">--</operator></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="195:5"><if pos:start="45:5" pos:end="195:5">if <condition pos:start="45:8" pos:end="45:33">(<expr pos:start="45:9" pos:end="45:32"><name pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:9">c</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:16">flags</name></name> <operator pos:start="45:18" pos:end="45:18">&amp;</operator> <name pos:start="45:20" pos:end="45:32">ZMBV_KEYFRAME</name></expr>)</condition> <block pos:start="45:35" pos:end="195:5">{<block_content pos:start="47:9" pos:end="193:38">

        <decl_stmt pos:start="47:9" pos:end="47:34"><decl pos:start="47:9" pos:end="47:33"><type pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:12">void</name> <modifier pos:start="47:14" pos:end="47:14">*</modifier></type><name pos:start="47:15" pos:end="47:26">decode_intra</name> <init pos:start="47:28" pos:end="47:33">= <expr pos:start="47:30" pos:end="47:33"><name pos:start="47:30" pos:end="47:33">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:30"><expr pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:9">c</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:23">decode_intra</name></name><operator pos:start="49:24" pos:end="49:24">=</operator> <name pos:start="49:26" pos:end="49:29">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:24"><expr pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:14">hi_ver</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <name pos:start="51:18" pos:end="51:23"><name pos:start="51:18" pos:end="51:20">buf</name><index pos:start="51:21" pos:end="51:23">[<expr pos:start="51:22" pos:end="51:22"><literal type="number" pos:start="51:22" pos:end="51:22">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:24"><expr pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:14">lo_ver</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <name pos:start="53:18" pos:end="53:23"><name pos:start="53:18" pos:end="53:20">buf</name><index pos:start="53:21" pos:end="53:23">[<expr pos:start="53:22" pos:end="53:22"><literal type="number" pos:start="53:22" pos:end="53:22">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:25"><expr pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:9">c</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:15">comp</name></name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:24"><name pos:start="55:19" pos:end="55:21">buf</name><index pos:start="55:22" pos:end="55:24">[<expr pos:start="55:23" pos:end="55:23"><literal type="number" pos:start="55:23" pos:end="55:23">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:24"><expr pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:9">c</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:14">fmt</name></name> <operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:23"><name pos:start="57:18" pos:end="57:20">buf</name><index pos:start="57:21" pos:end="57:23">[<expr pos:start="57:22" pos:end="57:22"><literal type="number" pos:start="57:22" pos:end="57:22">3</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:23"><expr pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:13"><name pos:start="59:9" pos:end="59:9">c</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:13">bw</name></name> <operator pos:start="59:15" pos:end="59:15">=</operator> <name pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:19">buf</name><index pos:start="59:20" pos:end="59:22">[<expr pos:start="59:21" pos:end="59:21"><literal type="number" pos:start="59:21" pos:end="59:21">4</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:23"><expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:13"><name pos:start="61:9" pos:end="61:9">c</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:13">bh</name></name> <operator pos:start="61:15" pos:end="61:15">=</operator> <name pos:start="61:17" pos:end="61:22"><name pos:start="61:17" pos:end="61:19">buf</name><index pos:start="61:20" pos:end="61:22">[<expr pos:start="61:21" pos:end="61:21"><literal type="number" pos:start="61:21" pos:end="61:21">5</literal></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:17"><expr pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:11">buf</name> <operator pos:start="65:13" pos:end="65:14">+=</operator> <literal type="number" pos:start="65:16" pos:end="65:16">6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:17"><expr pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:11">len</name> <operator pos:start="67:13" pos:end="67:14">-=</operator> <literal type="number" pos:start="67:16" pos:end="67:16">6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="73:66"><expr pos:start="69:9" pos:end="73:65"><call pos:start="69:9" pos:end="73:65"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="73:65">(<argument pos:start="69:16" pos:end="69:20"><expr pos:start="69:16" pos:end="69:20"><name pos:start="69:16" pos:end="69:20">avctx</name></expr></argument>, <argument pos:start="69:23" pos:end="69:34"><expr pos:start="69:23" pos:end="69:34"><name pos:start="69:23" pos:end="69:34">AV_LOG_DEBUG</name></expr></argument>,

               <argument pos:start="71:16" pos:end="71:62"><expr pos:start="71:16" pos:end="71:62"><literal type="string" pos:start="71:16" pos:end="71:62">"Flags=%X ver=%i.%i comp=%i fmt=%i blk=%ix%i\n"</literal></expr></argument>,

               <argument pos:start="73:16" pos:end="73:23"><expr pos:start="73:16" pos:end="73:23"><name pos:start="73:16" pos:end="73:23"><name pos:start="73:16" pos:end="73:16">c</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:23">flags</name></name></expr></argument>,<argument pos:start="73:25" pos:end="73:30"><expr pos:start="73:25" pos:end="73:30"><name pos:start="73:25" pos:end="73:30">hi_ver</name></expr></argument>,<argument pos:start="73:32" pos:end="73:37"><expr pos:start="73:32" pos:end="73:37"><name pos:start="73:32" pos:end="73:37">lo_ver</name></expr></argument>,<argument pos:start="73:39" pos:end="73:45"><expr pos:start="73:39" pos:end="73:45"><name pos:start="73:39" pos:end="73:45"><name pos:start="73:39" pos:end="73:39">c</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:45">comp</name></name></expr></argument>,<argument pos:start="73:47" pos:end="73:52"><expr pos:start="73:47" pos:end="73:52"><name pos:start="73:47" pos:end="73:52"><name pos:start="73:47" pos:end="73:47">c</name><operator pos:start="73:48" pos:end="73:49">-&gt;</operator><name pos:start="73:50" pos:end="73:52">fmt</name></name></expr></argument>,<argument pos:start="73:54" pos:end="73:58"><expr pos:start="73:54" pos:end="73:58"><name pos:start="73:54" pos:end="73:58"><name pos:start="73:54" pos:end="73:54">c</name><operator pos:start="73:55" pos:end="73:56">-&gt;</operator><name pos:start="73:57" pos:end="73:58">bw</name></name></expr></argument>,<argument pos:start="73:60" pos:end="73:64"><expr pos:start="73:60" pos:end="73:64"><name pos:start="73:60" pos:end="73:64"><name pos:start="73:60" pos:end="73:60">c</name><operator pos:start="73:61" pos:end="73:62">-&gt;</operator><name pos:start="73:63" pos:end="73:64">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="83:9"><if pos:start="75:9" pos:end="83:9">if <condition pos:start="75:12" pos:end="75:39">(<expr pos:start="75:13" pos:end="75:38"><name pos:start="75:13" pos:end="75:18">hi_ver</name> <operator pos:start="75:20" pos:end="75:21">!=</operator> <literal type="number" pos:start="75:23" pos:end="75:23">0</literal> <operator pos:start="75:25" pos:end="75:26">||</operator> <name pos:start="75:28" pos:end="75:33">lo_ver</name> <operator pos:start="75:35" pos:end="75:36">!=</operator> <literal type="number" pos:start="75:38" pos:end="75:38">1</literal></expr>)</condition> <block pos:start="75:41" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:40">

            <expr_stmt pos:start="77:13" pos:end="79:50"><expr pos:start="77:13" pos:end="79:49"><call pos:start="77:13" pos:end="79:49"><name pos:start="77:13" pos:end="77:33">av_log_ask_for_sample</name><argument_list pos:start="77:34" pos:end="79:49">(<argument pos:start="77:35" pos:end="77:39"><expr pos:start="77:35" pos:end="77:39"><name pos:start="77:35" pos:end="77:39">avctx</name></expr></argument>, <argument pos:start="77:42" pos:end="77:70"><expr pos:start="77:42" pos:end="77:70"><literal type="string" pos:start="77:42" pos:end="77:70">"Unsupported version %i.%i\n"</literal></expr></argument>,

                                  <argument pos:start="79:35" pos:end="79:40"><expr pos:start="79:35" pos:end="79:40"><name pos:start="79:35" pos:end="79:40">hi_ver</name></expr></argument>, <argument pos:start="79:43" pos:end="79:48"><expr pos:start="79:43" pos:end="79:48"><name pos:start="79:43" pos:end="79:48">lo_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:40">return <expr pos:start="81:20" pos:end="81:39"><name pos:start="81:20" pos:end="81:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:37">(<expr pos:start="85:13" pos:end="85:36"><name pos:start="85:13" pos:end="85:17"><name pos:start="85:13" pos:end="85:13">c</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:17">bw</name></name> <operator pos:start="85:19" pos:end="85:20">==</operator> <literal type="number" pos:start="85:22" pos:end="85:22">0</literal> <operator pos:start="85:24" pos:end="85:25">||</operator> <name pos:start="85:27" pos:end="85:31"><name pos:start="85:27" pos:end="85:27">c</name><operator pos:start="85:28" pos:end="85:29">-&gt;</operator><name pos:start="85:30" pos:end="85:31">bh</name></name> <operator pos:start="85:33" pos:end="85:34">==</operator> <literal type="number" pos:start="85:36" pos:end="85:36">0</literal></expr>)</condition> <block pos:start="85:39" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:40">

            <expr_stmt pos:start="87:13" pos:end="89:48"><expr pos:start="87:13" pos:end="89:47"><call pos:start="87:13" pos:end="89:47"><name pos:start="87:13" pos:end="87:33">av_log_ask_for_sample</name><argument_list pos:start="87:34" pos:end="89:47">(<argument pos:start="87:35" pos:end="87:39"><expr pos:start="87:35" pos:end="87:39"><name pos:start="87:35" pos:end="87:39">avctx</name></expr></argument>, <argument pos:start="87:42" pos:end="87:73"><expr pos:start="87:42" pos:end="87:73"><literal type="string" pos:start="87:42" pos:end="87:73">"Unsupported block size %ix%i\n"</literal></expr></argument>,

                                  <argument pos:start="89:35" pos:end="89:39"><expr pos:start="89:35" pos:end="89:39"><name pos:start="89:35" pos:end="89:39"><name pos:start="89:35" pos:end="89:35">c</name><operator pos:start="89:36" pos:end="89:37">-&gt;</operator><name pos:start="89:38" pos:end="89:39">bw</name></name></expr></argument>, <argument pos:start="89:42" pos:end="89:46"><expr pos:start="89:42" pos:end="89:46"><name pos:start="89:42" pos:end="89:46"><name pos:start="89:42" pos:end="89:42">c</name><operator pos:start="89:43" pos:end="89:44">-&gt;</operator><name pos:start="89:45" pos:end="89:46">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:40">return <expr pos:start="91:20" pos:end="91:39"><name pos:start="91:20" pos:end="91:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="95:9" pos:end="103:9"><if pos:start="95:9" pos:end="103:9">if <condition pos:start="95:12" pos:end="95:41">(<expr pos:start="95:13" pos:end="95:40"><name pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:13">c</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:19">comp</name></name> <operator pos:start="95:21" pos:end="95:22">!=</operator> <literal type="number" pos:start="95:24" pos:end="95:24">0</literal> <operator pos:start="95:26" pos:end="95:27">&amp;&amp;</operator> <name pos:start="95:29" pos:end="95:35"><name pos:start="95:29" pos:end="95:29">c</name><operator pos:start="95:30" pos:end="95:31">-&gt;</operator><name pos:start="95:32" pos:end="95:35">comp</name></name> <operator pos:start="95:37" pos:end="95:38">!=</operator> <literal type="number" pos:start="95:40" pos:end="95:40">1</literal></expr>)</condition> <block pos:start="95:43" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:40">

            <expr_stmt pos:start="97:13" pos:end="99:43"><expr pos:start="97:13" pos:end="99:42"><call pos:start="97:13" pos:end="99:42"><name pos:start="97:13" pos:end="97:33">av_log_ask_for_sample</name><argument_list pos:start="97:34" pos:end="99:42">(<argument pos:start="97:35" pos:end="97:39"><expr pos:start="97:35" pos:end="97:39"><name pos:start="97:35" pos:end="97:39">avctx</name></expr></argument>, <argument pos:start="97:42" pos:end="97:76"><expr pos:start="97:42" pos:end="97:76"><literal type="string" pos:start="97:42" pos:end="97:76">"Unsupported compression type %i\n"</literal></expr></argument>,

                                  <argument pos:start="99:35" pos:end="99:41"><expr pos:start="99:35" pos:end="99:41"><name pos:start="99:35" pos:end="99:41"><name pos:start="99:35" pos:end="99:35">c</name><operator pos:start="99:36" pos:end="99:37">-&gt;</operator><name pos:start="99:38" pos:end="99:41">comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="101:13" pos:end="101:40">return <expr pos:start="101:20" pos:end="101:39"><name pos:start="101:20" pos:end="101:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="107:9" pos:end="165:9">switch <condition pos:start="107:16" pos:end="107:23">(<expr pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:17">c</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:22">fmt</name></name></expr>)</condition> <block pos:start="107:25" pos:end="165:9">{<block_content pos:start="109:9" pos:end="163:40">

        <case pos:start="109:9" pos:end="109:27">case <expr pos:start="109:14" pos:end="109:26"><name pos:start="109:14" pos:end="109:26">ZMBV_FMT_8BPP</name></expr>:</case>

            <expr_stmt pos:start="111:13" pos:end="111:23"><expr pos:start="111:13" pos:end="111:22"><name pos:start="111:13" pos:end="111:18"><name pos:start="111:13" pos:end="111:13">c</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:18">bpp</name></name> <operator pos:start="111:20" pos:end="111:20">=</operator> <literal type="number" pos:start="111:22" pos:end="111:22">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:45"><expr pos:start="113:13" pos:end="113:44"><name pos:start="113:13" pos:end="113:24">decode_intra</name> <operator pos:start="113:26" pos:end="113:26">=</operator> <name pos:start="113:28" pos:end="113:44">zmbv_decode_intra</name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:46"><expr pos:start="115:13" pos:end="115:45"><name pos:start="115:13" pos:end="115:25"><name pos:start="115:13" pos:end="115:13">c</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:25">decode_xor</name></name> <operator pos:start="115:27" pos:end="115:27">=</operator> <name pos:start="115:29" pos:end="115:45">zmbv_decode_xor_8</name></expr>;</expr_stmt>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        <case pos:start="119:9" pos:end="119:28">case <expr pos:start="119:14" pos:end="119:27"><name pos:start="119:14" pos:end="119:27">ZMBV_FMT_15BPP</name></expr>:</case>

        <case pos:start="121:9" pos:end="121:28">case <expr pos:start="121:14" pos:end="121:27"><name pos:start="121:14" pos:end="121:27">ZMBV_FMT_16BPP</name></expr>:</case>

            <expr_stmt pos:start="123:13" pos:end="123:24"><expr pos:start="123:13" pos:end="123:23"><name pos:start="123:13" pos:end="123:18"><name pos:start="123:13" pos:end="123:13">c</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:18">bpp</name></name> <operator pos:start="123:20" pos:end="123:20">=</operator> <literal type="number" pos:start="123:22" pos:end="123:23">16</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:45"><expr pos:start="125:13" pos:end="125:44"><name pos:start="125:13" pos:end="125:24">decode_intra</name> <operator pos:start="125:26" pos:end="125:26">=</operator> <name pos:start="125:28" pos:end="125:44">zmbv_decode_intra</name></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:47"><expr pos:start="127:13" pos:end="127:46"><name pos:start="127:13" pos:end="127:25"><name pos:start="127:13" pos:end="127:13">c</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:25">decode_xor</name></name> <operator pos:start="127:27" pos:end="127:27">=</operator> <name pos:start="127:29" pos:end="127:46">zmbv_decode_xor_16</name></expr>;</expr_stmt>

            <break pos:start="129:13" pos:end="132:0">break;</break>

<cpp:ifdef pos:start="131:1" pos:end="131:24">#<cpp:directive pos:start="131:2" pos:end="131:6">ifdef</cpp:directive> <name pos:start="131:8" pos:end="131:24">ZMBV_ENABLE_24BPP</name></cpp:ifdef>

        <case pos:start="133:9" pos:end="133:28">case <expr pos:start="133:14" pos:end="133:27"><name pos:start="133:14" pos:end="133:27">ZMBV_FMT_24BPP</name></expr>:</case>

            <expr_stmt pos:start="135:13" pos:end="135:24"><expr pos:start="135:13" pos:end="135:23"><name pos:start="135:13" pos:end="135:18"><name pos:start="135:13" pos:end="135:13">c</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:18">bpp</name></name> <operator pos:start="135:20" pos:end="135:20">=</operator> <literal type="number" pos:start="135:22" pos:end="135:23">24</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:45"><expr pos:start="137:13" pos:end="137:44"><name pos:start="137:13" pos:end="137:24">decode_intra</name> <operator pos:start="137:26" pos:end="137:26">=</operator> <name pos:start="137:28" pos:end="137:44">zmbv_decode_intra</name></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:47"><expr pos:start="139:13" pos:end="139:46"><name pos:start="139:13" pos:end="139:25"><name pos:start="139:13" pos:end="139:13">c</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:25">decode_xor</name></name> <operator pos:start="139:27" pos:end="139:27">=</operator> <name pos:start="139:29" pos:end="139:46">zmbv_decode_xor_24</name></expr>;</expr_stmt>

            <break pos:start="141:13" pos:end="144:0">break;</break>

<cpp:endif pos:start="143:1" pos:end="143:6">#<cpp:directive pos:start="143:2" pos:end="143:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="143:8" pos:end="143:26">//ZMBV_ENABLE_24BPP</comment>

        <case pos:start="145:9" pos:end="145:28">case <expr pos:start="145:14" pos:end="145:27"><name pos:start="145:14" pos:end="145:27">ZMBV_FMT_32BPP</name></expr>:</case>

            <expr_stmt pos:start="147:13" pos:end="147:24"><expr pos:start="147:13" pos:end="147:23"><name pos:start="147:13" pos:end="147:18"><name pos:start="147:13" pos:end="147:13">c</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:18">bpp</name></name> <operator pos:start="147:20" pos:end="147:20">=</operator> <literal type="number" pos:start="147:22" pos:end="147:23">32</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:45"><expr pos:start="149:13" pos:end="149:44"><name pos:start="149:13" pos:end="149:24">decode_intra</name> <operator pos:start="149:26" pos:end="149:26">=</operator> <name pos:start="149:28" pos:end="149:44">zmbv_decode_intra</name></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:47"><expr pos:start="151:13" pos:end="151:46"><name pos:start="151:13" pos:end="151:25"><name pos:start="151:13" pos:end="151:13">c</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:25">decode_xor</name></name> <operator pos:start="151:27" pos:end="151:27">=</operator> <name pos:start="151:29" pos:end="151:46">zmbv_decode_xor_32</name></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        <default pos:start="155:9" pos:end="155:16">default:</default>

            <expr_stmt pos:start="157:13" pos:end="157:33"><expr pos:start="157:13" pos:end="157:32"><name pos:start="157:13" pos:end="157:25"><name pos:start="157:13" pos:end="157:13">c</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:25">decode_xor</name></name> <operator pos:start="157:27" pos:end="157:27">=</operator> <name pos:start="157:29" pos:end="157:32">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="161:42"><expr pos:start="159:13" pos:end="161:41"><call pos:start="159:13" pos:end="161:41"><name pos:start="159:13" pos:end="159:33">av_log_ask_for_sample</name><argument_list pos:start="159:34" pos:end="161:41">(<argument pos:start="159:35" pos:end="159:39"><expr pos:start="159:35" pos:end="159:39"><name pos:start="159:35" pos:end="159:39">avctx</name></expr></argument>, <argument pos:start="159:42" pos:end="159:76"><expr pos:start="159:42" pos:end="159:76"><literal type="string" pos:start="159:42" pos:end="159:76">"Unsupported (for now) format %i\n"</literal></expr></argument>,

                                  <argument pos:start="161:35" pos:end="161:40"><expr pos:start="161:35" pos:end="161:40"><name pos:start="161:35" pos:end="161:40"><name pos:start="161:35" pos:end="161:35">c</name><operator pos:start="161:36" pos:end="161:37">-&gt;</operator><name pos:start="161:38" pos:end="161:40">fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="163:13" pos:end="163:40">return <expr pos:start="163:20" pos:end="163:39"><name pos:start="163:20" pos:end="163:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></switch>



        <expr_stmt pos:start="169:9" pos:end="169:41"><expr pos:start="169:9" pos:end="169:40"><name pos:start="169:9" pos:end="169:12">zret</name> <operator pos:start="169:14" pos:end="169:14">=</operator> <call pos:start="169:16" pos:end="169:40"><name pos:start="169:16" pos:end="169:27">inflateReset</name><argument_list pos:start="169:28" pos:end="169:40">(<argument pos:start="169:29" pos:end="169:39"><expr pos:start="169:29" pos:end="169:39"><operator pos:start="169:29" pos:end="169:29">&amp;</operator><name pos:start="169:30" pos:end="169:39"><name pos:start="169:30" pos:end="169:30">c</name><operator pos:start="169:31" pos:end="169:32">-&gt;</operator><name pos:start="169:33" pos:end="169:39">zstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="177:9"><if pos:start="171:9" pos:end="177:9">if <condition pos:start="171:12" pos:end="171:25">(<expr pos:start="171:13" pos:end="171:24"><name pos:start="171:13" pos:end="171:16">zret</name> <operator pos:start="171:18" pos:end="171:19">!=</operator> <name pos:start="171:21" pos:end="171:24">Z_OK</name></expr>)</condition> <block pos:start="171:27" pos:end="177:9">{<block_content pos:start="173:13" pos:end="175:22">

            <expr_stmt pos:start="173:13" pos:end="173:75"><expr pos:start="173:13" pos:end="173:74"><call pos:start="173:13" pos:end="173:74"><name pos:start="173:13" pos:end="173:18">av_log</name><argument_list pos:start="173:19" pos:end="173:74">(<argument pos:start="173:20" pos:end="173:24"><expr pos:start="173:20" pos:end="173:24"><name pos:start="173:20" pos:end="173:24">avctx</name></expr></argument>, <argument pos:start="173:27" pos:end="173:38"><expr pos:start="173:27" pos:end="173:38"><name pos:start="173:27" pos:end="173:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="173:41" pos:end="173:67"><expr pos:start="173:41" pos:end="173:67"><literal type="string" pos:start="173:41" pos:end="173:67">"Inflate reset error: %d\n"</literal></expr></argument>, <argument pos:start="173:70" pos:end="173:73"><expr pos:start="173:70" pos:end="173:73"><name pos:start="173:70" pos:end="173:73">zret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="175:13" pos:end="175:22">return <expr pos:start="175:20" pos:end="175:21"><operator pos:start="175:20" pos:end="175:20">-</operator><literal type="number" pos:start="175:21" pos:end="175:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:84"><expr pos:start="181:9" pos:end="181:83"><name pos:start="181:9" pos:end="181:14"><name pos:start="181:9" pos:end="181:9">c</name><operator pos:start="181:10" pos:end="181:11">-&gt;</operator><name pos:start="181:12" pos:end="181:14">cur</name></name>  <operator pos:start="181:17" pos:end="181:17">=</operator> <call pos:start="181:19" pos:end="181:83"><name pos:start="181:19" pos:end="181:30">av_realloc_f</name><argument_list pos:start="181:31" pos:end="181:83">(<argument pos:start="181:32" pos:end="181:37"><expr pos:start="181:32" pos:end="181:37"><name pos:start="181:32" pos:end="181:37"><name pos:start="181:32" pos:end="181:32">c</name><operator pos:start="181:33" pos:end="181:34">-&gt;</operator><name pos:start="181:35" pos:end="181:37">cur</name></name></expr></argument>, <argument pos:start="181:40" pos:end="181:67"><expr pos:start="181:40" pos:end="181:67"><name pos:start="181:40" pos:end="181:51"><name pos:start="181:40" pos:end="181:44">avctx</name><operator pos:start="181:45" pos:end="181:46">-&gt;</operator><name pos:start="181:47" pos:end="181:51">width</name></name> <operator pos:start="181:53" pos:end="181:53">*</operator> <name pos:start="181:55" pos:end="181:67"><name pos:start="181:55" pos:end="181:59">avctx</name><operator pos:start="181:60" pos:end="181:61">-&gt;</operator><name pos:start="181:62" pos:end="181:67">height</name></name></expr></argument>,  <argument pos:start="181:71" pos:end="181:82"><expr pos:start="181:71" pos:end="181:82"><operator pos:start="181:71" pos:end="181:71">(</operator><name pos:start="181:72" pos:end="181:77"><name pos:start="181:72" pos:end="181:72">c</name><operator pos:start="181:73" pos:end="181:74">-&gt;</operator><name pos:start="181:75" pos:end="181:77">bpp</name></name> <operator pos:start="181:79" pos:end="181:79">/</operator> <literal type="number" pos:start="181:81" pos:end="181:81">8</literal><operator pos:start="181:82" pos:end="181:82">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:85"><expr pos:start="183:9" pos:end="183:84"><name pos:start="183:9" pos:end="183:15"><name pos:start="183:9" pos:end="183:9">c</name><operator pos:start="183:10" pos:end="183:11">-&gt;</operator><name pos:start="183:12" pos:end="183:15">prev</name></name> <operator pos:start="183:17" pos:end="183:17">=</operator> <call pos:start="183:19" pos:end="183:84"><name pos:start="183:19" pos:end="183:30">av_realloc_f</name><argument_list pos:start="183:31" pos:end="183:84">(<argument pos:start="183:32" pos:end="183:38"><expr pos:start="183:32" pos:end="183:38"><name pos:start="183:32" pos:end="183:38"><name pos:start="183:32" pos:end="183:32">c</name><operator pos:start="183:33" pos:end="183:34">-&gt;</operator><name pos:start="183:35" pos:end="183:38">prev</name></name></expr></argument>, <argument pos:start="183:41" pos:end="183:68"><expr pos:start="183:41" pos:end="183:68"><name pos:start="183:41" pos:end="183:52"><name pos:start="183:41" pos:end="183:45">avctx</name><operator pos:start="183:46" pos:end="183:47">-&gt;</operator><name pos:start="183:48" pos:end="183:52">width</name></name> <operator pos:start="183:54" pos:end="183:54">*</operator> <name pos:start="183:56" pos:end="183:68"><name pos:start="183:56" pos:end="183:60">avctx</name><operator pos:start="183:61" pos:end="183:62">-&gt;</operator><name pos:start="183:63" pos:end="183:68">height</name></name></expr></argument>,  <argument pos:start="183:72" pos:end="183:83"><expr pos:start="183:72" pos:end="183:83"><operator pos:start="183:72" pos:end="183:72">(</operator><name pos:start="183:73" pos:end="183:78"><name pos:start="183:73" pos:end="183:73">c</name><operator pos:start="183:74" pos:end="183:75">-&gt;</operator><name pos:start="183:76" pos:end="183:78">bpp</name></name> <operator pos:start="183:80" pos:end="183:80">/</operator> <literal type="number" pos:start="183:82" pos:end="183:82">8</literal><operator pos:start="183:83" pos:end="183:83">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:47"><expr pos:start="185:9" pos:end="185:46"><name pos:start="185:9" pos:end="185:13"><name pos:start="185:9" pos:end="185:9">c</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:13">bx</name></name> <operator pos:start="185:15" pos:end="185:15">=</operator> <operator pos:start="185:17" pos:end="185:17">(</operator><name pos:start="185:18" pos:end="185:25"><name pos:start="185:18" pos:end="185:18">c</name><operator pos:start="185:19" pos:end="185:20">-&gt;</operator><name pos:start="185:21" pos:end="185:25">width</name></name> <operator pos:start="185:27" pos:end="185:27">+</operator> <name pos:start="185:29" pos:end="185:33"><name pos:start="185:29" pos:end="185:29">c</name><operator pos:start="185:30" pos:end="185:31">-&gt;</operator><name pos:start="185:32" pos:end="185:33">bw</name></name> <operator pos:start="185:35" pos:end="185:35">-</operator> <literal type="number" pos:start="185:37" pos:end="185:37">1</literal><operator pos:start="185:38" pos:end="185:38">)</operator> <operator pos:start="185:40" pos:end="185:40">/</operator> <name pos:start="185:42" pos:end="185:46"><name pos:start="185:42" pos:end="185:42">c</name><operator pos:start="185:43" pos:end="185:44">-&gt;</operator><name pos:start="185:45" pos:end="185:46">bw</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:47"><expr pos:start="187:9" pos:end="187:46"><name pos:start="187:9" pos:end="187:13"><name pos:start="187:9" pos:end="187:9">c</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:13">by</name></name> <operator pos:start="187:15" pos:end="187:15">=</operator> <operator pos:start="187:17" pos:end="187:17">(</operator><name pos:start="187:18" pos:end="187:26"><name pos:start="187:18" pos:end="187:18">c</name><operator pos:start="187:19" pos:end="187:20">-&gt;</operator><name pos:start="187:21" pos:end="187:26">height</name></name><operator pos:start="187:27" pos:end="187:27">+</operator> <name pos:start="187:29" pos:end="187:33"><name pos:start="187:29" pos:end="187:29">c</name><operator pos:start="187:30" pos:end="187:31">-&gt;</operator><name pos:start="187:32" pos:end="187:33">bh</name></name> <operator pos:start="187:35" pos:end="187:35">-</operator> <literal type="number" pos:start="187:37" pos:end="187:37">1</literal><operator pos:start="187:38" pos:end="187:38">)</operator> <operator pos:start="187:40" pos:end="187:40">/</operator> <name pos:start="187:42" pos:end="187:46"><name pos:start="187:42" pos:end="187:42">c</name><operator pos:start="187:43" pos:end="187:44">-&gt;</operator><name pos:start="187:45" pos:end="187:46">bh</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="191:22"><if pos:start="189:9" pos:end="191:22">if <condition pos:start="189:12" pos:end="189:32">(<expr pos:start="189:13" pos:end="189:31"><operator pos:start="189:13" pos:end="189:13">!</operator><name pos:start="189:14" pos:end="189:19"><name pos:start="189:14" pos:end="189:14">c</name><operator pos:start="189:15" pos:end="189:16">-&gt;</operator><name pos:start="189:17" pos:end="189:19">cur</name></name> <operator pos:start="189:21" pos:end="189:22">||</operator> <operator pos:start="189:24" pos:end="189:24">!</operator><name pos:start="189:25" pos:end="189:31"><name pos:start="189:25" pos:end="189:25">c</name><operator pos:start="189:26" pos:end="189:27">-&gt;</operator><name pos:start="189:28" pos:end="189:31">prev</name></name></expr>)</condition><block type="pseudo" pos:start="191:13" pos:end="191:22"><block_content pos:start="191:13" pos:end="191:22">

            <return pos:start="191:13" pos:end="191:22">return <expr pos:start="191:20" pos:end="191:21"><operator pos:start="191:20" pos:end="191:20">-</operator><literal type="number" pos:start="191:21" pos:end="191:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:38"><expr pos:start="193:9" pos:end="193:37"><name pos:start="193:9" pos:end="193:23"><name pos:start="193:9" pos:end="193:9">c</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:23">decode_intra</name></name><operator pos:start="193:24" pos:end="193:24">=</operator> <name pos:start="193:26" pos:end="193:37">decode_intra</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="199:5" pos:end="205:5"><if pos:start="199:5" pos:end="205:5">if <condition pos:start="199:8" pos:end="199:32">(<expr pos:start="199:9" pos:end="199:31"><name pos:start="199:9" pos:end="199:23"><name pos:start="199:9" pos:end="199:9">c</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:23">decode_intra</name></name> <operator pos:start="199:25" pos:end="199:26">==</operator> <name pos:start="199:28" pos:end="199:31">NULL</name></expr>)</condition> <block pos:start="199:34" pos:end="205:5">{<block_content pos:start="201:9" pos:end="203:35">

        <expr_stmt pos:start="201:9" pos:end="201:78"><expr pos:start="201:9" pos:end="201:77"><call pos:start="201:9" pos:end="201:77"><name pos:start="201:9" pos:end="201:14">av_log</name><argument_list pos:start="201:15" pos:end="201:77">(<argument pos:start="201:16" pos:end="201:20"><expr pos:start="201:16" pos:end="201:20"><name pos:start="201:16" pos:end="201:20">avctx</name></expr></argument>, <argument pos:start="201:23" pos:end="201:34"><expr pos:start="201:23" pos:end="201:34"><name pos:start="201:23" pos:end="201:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="201:37" pos:end="201:76"><expr pos:start="201:37" pos:end="201:76"><literal type="string" pos:start="201:37" pos:end="201:76">"Error! Got no format or no keyframe!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="203:9" pos:end="203:35">return <expr pos:start="203:16" pos:end="203:34"><name pos:start="203:16" pos:end="203:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="209:5" pos:end="239:5"><if pos:start="209:5" pos:end="215:5">if <condition pos:start="209:8" pos:end="209:21">(<expr pos:start="209:9" pos:end="209:20"><name pos:start="209:9" pos:end="209:15"><name pos:start="209:9" pos:end="209:9">c</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:15">comp</name></name> <operator pos:start="209:17" pos:end="209:18">==</operator> <literal type="number" pos:start="209:20" pos:end="209:20">0</literal></expr>)</condition> <block pos:start="209:23" pos:end="215:5">{<block_content pos:start="211:9" pos:end="213:27"> <comment type="line" pos:start="209:25" pos:end="209:43">//Uncompressed data</comment>

        <expr_stmt pos:start="211:9" pos:end="211:40"><expr pos:start="211:9" pos:end="211:39"><call pos:start="211:9" pos:end="211:39"><name pos:start="211:9" pos:end="211:14">memcpy</name><argument_list pos:start="211:15" pos:end="211:39">(<argument pos:start="211:16" pos:end="211:28"><expr pos:start="211:16" pos:end="211:28"><name pos:start="211:16" pos:end="211:28"><name pos:start="211:16" pos:end="211:16">c</name><operator pos:start="211:17" pos:end="211:18">-&gt;</operator><name pos:start="211:19" pos:end="211:28">decomp_buf</name></name></expr></argument>, <argument pos:start="211:31" pos:end="211:33"><expr pos:start="211:31" pos:end="211:33"><name pos:start="211:31" pos:end="211:33">buf</name></expr></argument>, <argument pos:start="211:36" pos:end="211:38"><expr pos:start="211:36" pos:end="211:38"><name pos:start="211:36" pos:end="211:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:27"><expr pos:start="213:9" pos:end="213:26"><name pos:start="213:9" pos:end="213:22"><name pos:start="213:9" pos:end="213:9">c</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:22">decomp_size</name></name> <operator pos:start="213:24" pos:end="213:24">=</operator> <literal type="number" pos:start="213:26" pos:end="213:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="215:7" pos:end="239:5">else <block pos:start="215:12" pos:end="239:5">{<block_content pos:start="217:9" pos:end="237:45"> <comment type="line" pos:start="215:14" pos:end="215:36">// ZLIB-compressed data</comment>

        <expr_stmt pos:start="217:9" pos:end="217:55"><expr pos:start="217:9" pos:end="217:54"><name pos:start="217:9" pos:end="217:27"><name pos:start="217:9" pos:end="217:9">c</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:18">zstream</name><operator pos:start="217:19" pos:end="217:19">.</operator><name pos:start="217:20" pos:end="217:27">total_in</name></name> <operator pos:start="217:29" pos:end="217:29">=</operator> <name pos:start="217:31" pos:end="217:50"><name pos:start="217:31" pos:end="217:31">c</name><operator pos:start="217:32" pos:end="217:33">-&gt;</operator><name pos:start="217:34" pos:end="217:40">zstream</name><operator pos:start="217:41" pos:end="217:41">.</operator><name pos:start="217:42" pos:end="217:50">total_out</name></name> <operator pos:start="217:52" pos:end="217:52">=</operator> <literal type="number" pos:start="217:54" pos:end="217:54">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:43"><expr pos:start="219:9" pos:end="219:42"><name pos:start="219:9" pos:end="219:26"><name pos:start="219:9" pos:end="219:9">c</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:18">zstream</name><operator pos:start="219:19" pos:end="219:19">.</operator><name pos:start="219:20" pos:end="219:26">next_in</name></name> <operator pos:start="219:28" pos:end="219:28">=</operator> <operator pos:start="219:30" pos:end="219:30">(</operator><name pos:start="219:31" pos:end="219:37">uint8_t</name><operator pos:start="219:38" pos:end="219:38">*</operator><operator pos:start="219:39" pos:end="219:39">)</operator><name pos:start="219:40" pos:end="219:42">buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:34"><expr pos:start="221:9" pos:end="221:33"><name pos:start="221:9" pos:end="221:27"><name pos:start="221:9" pos:end="221:9">c</name><operator pos:start="221:10" pos:end="221:11">-&gt;</operator><name pos:start="221:12" pos:end="221:18">zstream</name><operator pos:start="221:19" pos:end="221:19">.</operator><name pos:start="221:20" pos:end="221:27">avail_in</name></name> <operator pos:start="221:29" pos:end="221:29">=</operator> <name pos:start="221:31" pos:end="221:33">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:44"><expr pos:start="223:9" pos:end="223:43"><name pos:start="223:9" pos:end="223:27"><name pos:start="223:9" pos:end="223:9">c</name><operator pos:start="223:10" pos:end="223:11">-&gt;</operator><name pos:start="223:12" pos:end="223:18">zstream</name><operator pos:start="223:19" pos:end="223:19">.</operator><name pos:start="223:20" pos:end="223:27">next_out</name></name> <operator pos:start="223:29" pos:end="223:29">=</operator> <name pos:start="223:31" pos:end="223:43"><name pos:start="223:31" pos:end="223:31">c</name><operator pos:start="223:32" pos:end="223:33">-&gt;</operator><name pos:start="223:34" pos:end="223:43">decomp_buf</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:46"><expr pos:start="225:9" pos:end="225:45"><name pos:start="225:9" pos:end="225:28"><name pos:start="225:9" pos:end="225:9">c</name><operator pos:start="225:10" pos:end="225:11">-&gt;</operator><name pos:start="225:12" pos:end="225:18">zstream</name><operator pos:start="225:19" pos:end="225:19">.</operator><name pos:start="225:20" pos:end="225:28">avail_out</name></name> <operator pos:start="225:30" pos:end="225:30">=</operator> <name pos:start="225:32" pos:end="225:45"><name pos:start="225:32" pos:end="225:32">c</name><operator pos:start="225:33" pos:end="225:34">-&gt;</operator><name pos:start="225:35" pos:end="225:45">decomp_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:50"><expr pos:start="227:9" pos:end="227:49"><name pos:start="227:9" pos:end="227:12">zret</name> <operator pos:start="227:14" pos:end="227:14">=</operator> <call pos:start="227:16" pos:end="227:49"><name pos:start="227:16" pos:end="227:22">inflate</name><argument_list pos:start="227:23" pos:end="227:49">(<argument pos:start="227:24" pos:end="227:34"><expr pos:start="227:24" pos:end="227:34"><operator pos:start="227:24" pos:end="227:24">&amp;</operator><name pos:start="227:25" pos:end="227:34"><name pos:start="227:25" pos:end="227:25">c</name><operator pos:start="227:26" pos:end="227:27">-&gt;</operator><name pos:start="227:28" pos:end="227:34">zstream</name></name></expr></argument>, <argument pos:start="227:37" pos:end="227:48"><expr pos:start="227:37" pos:end="227:48"><name pos:start="227:37" pos:end="227:48">Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="229:9" pos:end="235:9"><if pos:start="229:9" pos:end="235:9">if <condition pos:start="229:12" pos:end="229:49">(<expr pos:start="229:13" pos:end="229:48"><name pos:start="229:13" pos:end="229:16">zret</name> <operator pos:start="229:18" pos:end="229:19">!=</operator> <name pos:start="229:21" pos:end="229:24">Z_OK</name> <operator pos:start="229:26" pos:end="229:27">&amp;&amp;</operator> <name pos:start="229:29" pos:end="229:32">zret</name> <operator pos:start="229:34" pos:end="229:35">!=</operator> <name pos:start="229:37" pos:end="229:48">Z_STREAM_END</name></expr>)</condition> <block pos:start="229:51" pos:end="235:9">{<block_content pos:start="231:13" pos:end="233:39">

            <expr_stmt pos:start="231:13" pos:end="231:68"><expr pos:start="231:13" pos:end="231:67"><call pos:start="231:13" pos:end="231:67"><name pos:start="231:13" pos:end="231:18">av_log</name><argument_list pos:start="231:19" pos:end="231:67">(<argument pos:start="231:20" pos:end="231:24"><expr pos:start="231:20" pos:end="231:24"><name pos:start="231:20" pos:end="231:24">avctx</name></expr></argument>, <argument pos:start="231:27" pos:end="231:38"><expr pos:start="231:27" pos:end="231:38"><name pos:start="231:27" pos:end="231:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="231:41" pos:end="231:60"><expr pos:start="231:41" pos:end="231:60"><literal type="string" pos:start="231:41" pos:end="231:60">"inflate error %d\n"</literal></expr></argument>, <argument pos:start="231:63" pos:end="231:66"><expr pos:start="231:63" pos:end="231:66"><name pos:start="231:63" pos:end="231:66">zret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="233:13" pos:end="233:39">return <expr pos:start="233:20" pos:end="233:38"><name pos:start="233:20" pos:end="233:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:45"><expr pos:start="237:9" pos:end="237:44"><name pos:start="237:9" pos:end="237:21"><name pos:start="237:9" pos:end="237:9">c</name><operator pos:start="237:10" pos:end="237:11">-&gt;</operator><name pos:start="237:12" pos:end="237:21">decomp_len</name></name> <operator pos:start="237:23" pos:end="237:23">=</operator> <name pos:start="237:25" pos:end="237:44"><name pos:start="237:25" pos:end="237:25">c</name><operator pos:start="237:26" pos:end="237:27">-&gt;</operator><name pos:start="237:28" pos:end="237:34">zstream</name><operator pos:start="237:35" pos:end="237:35">.</operator><name pos:start="237:36" pos:end="237:44">total_out</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="241:5" pos:end="259:5"><if pos:start="241:5" pos:end="249:5">if <condition pos:start="241:8" pos:end="241:33">(<expr pos:start="241:9" pos:end="241:32"><name pos:start="241:9" pos:end="241:16"><name pos:start="241:9" pos:end="241:9">c</name><operator pos:start="241:10" pos:end="241:11">-&gt;</operator><name pos:start="241:12" pos:end="241:16">flags</name></name> <operator pos:start="241:18" pos:end="241:18">&amp;</operator> <name pos:start="241:20" pos:end="241:32">ZMBV_KEYFRAME</name></expr>)</condition> <block pos:start="241:35" pos:end="249:5">{<block_content pos:start="243:9" pos:end="247:27">

        <expr_stmt pos:start="243:9" pos:end="243:29"><expr pos:start="243:9" pos:end="243:28"><name pos:start="243:9" pos:end="243:24"><name pos:start="243:9" pos:end="243:9">c</name><operator pos:start="243:10" pos:end="243:11">-&gt;</operator><name pos:start="243:12" pos:end="243:14">pic</name><operator pos:start="243:15" pos:end="243:15">.</operator><name pos:start="243:16" pos:end="243:24">key_frame</name></name> <operator pos:start="243:26" pos:end="243:26">=</operator> <literal type="number" pos:start="243:28" pos:end="243:28">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:45"><expr pos:start="245:9" pos:end="245:44"><name pos:start="245:9" pos:end="245:24"><name pos:start="245:9" pos:end="245:9">c</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:14">pic</name><operator pos:start="245:15" pos:end="245:15">.</operator><name pos:start="245:16" pos:end="245:24">pict_type</name></name> <operator pos:start="245:26" pos:end="245:26">=</operator> <name pos:start="245:28" pos:end="245:44">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:27"><expr pos:start="247:9" pos:end="247:26"><call pos:start="247:9" pos:end="247:26"><name pos:start="247:9" pos:end="247:23"><name pos:start="247:9" pos:end="247:9">c</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:23">decode_intra</name></name><argument_list pos:start="247:24" pos:end="247:26">(<argument pos:start="247:25" pos:end="247:25"><expr pos:start="247:25" pos:end="247:25"><name pos:start="247:25" pos:end="247:25">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="249:7" pos:end="259:5">else <block pos:start="249:12" pos:end="259:5">{<block_content pos:start="251:9" pos:end="257:29">

        <expr_stmt pos:start="251:9" pos:end="251:29"><expr pos:start="251:9" pos:end="251:28"><name pos:start="251:9" pos:end="251:24"><name pos:start="251:9" pos:end="251:9">c</name><operator pos:start="251:10" pos:end="251:11">-&gt;</operator><name pos:start="251:12" pos:end="251:14">pic</name><operator pos:start="251:15" pos:end="251:15">.</operator><name pos:start="251:16" pos:end="251:24">key_frame</name></name> <operator pos:start="251:26" pos:end="251:26">=</operator> <literal type="number" pos:start="251:28" pos:end="251:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:45"><expr pos:start="253:9" pos:end="253:44"><name pos:start="253:9" pos:end="253:24"><name pos:start="253:9" pos:end="253:9">c</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:14">pic</name><operator pos:start="253:15" pos:end="253:15">.</operator><name pos:start="253:16" pos:end="253:24">pict_type</name></name> <operator pos:start="253:26" pos:end="253:26">=</operator> <name pos:start="253:28" pos:end="253:44">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

        <if_stmt pos:start="255:9" pos:end="257:29"><if pos:start="255:9" pos:end="257:29">if <condition pos:start="255:12" pos:end="255:26">(<expr pos:start="255:13" pos:end="255:25"><name pos:start="255:13" pos:end="255:25"><name pos:start="255:13" pos:end="255:13">c</name><operator pos:start="255:14" pos:end="255:15">-&gt;</operator><name pos:start="255:16" pos:end="255:25">decomp_len</name></name></expr>)</condition><block type="pseudo" pos:start="257:13" pos:end="257:29"><block_content pos:start="257:13" pos:end="257:29">

            <expr_stmt pos:start="257:13" pos:end="257:29"><expr pos:start="257:13" pos:end="257:28"><call pos:start="257:13" pos:end="257:28"><name pos:start="257:13" pos:end="257:25"><name pos:start="257:13" pos:end="257:13">c</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:25">decode_xor</name></name><argument_list pos:start="257:26" pos:end="257:28">(<argument pos:start="257:27" pos:end="257:27"><expr pos:start="257:27" pos:end="257:27"><name pos:start="257:27" pos:end="257:27">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="263:5" pos:end="263:23">/* update frames */</comment>

    <block pos:start="265:5" pos:end="395:5">{<block_content pos:start="267:9" pos:end="393:43">

        <decl_stmt pos:start="267:9" pos:end="267:27"><decl pos:start="267:9" pos:end="267:20"><type pos:start="267:9" pos:end="267:17"><name pos:start="267:9" pos:end="267:15">uint8_t</name> <modifier pos:start="267:17" pos:end="267:17">*</modifier></type><name pos:start="267:18" pos:end="267:20">out</name></decl>, <decl pos:start="267:23" pos:end="267:26"><type ref="prev" pos:start="267:9" pos:end="267:17"><modifier pos:start="267:23" pos:end="267:23">*</modifier></type><name pos:start="267:24" pos:end="267:26">src</name></decl>;</decl_stmt>

        <decl_stmt pos:start="269:9" pos:end="269:17"><decl pos:start="269:9" pos:end="269:13"><type pos:start="269:9" pos:end="269:11"><name pos:start="269:9" pos:end="269:11">int</name></type> <name pos:start="269:13" pos:end="269:13">i</name></decl>, <decl pos:start="269:16" pos:end="269:16"><type ref="prev" pos:start="269:9" pos:end="269:11"/><name pos:start="269:16" pos:end="269:16">j</name></decl>;</decl_stmt>



        <expr_stmt pos:start="273:9" pos:end="273:29"><expr pos:start="273:9" pos:end="273:28"><name pos:start="273:9" pos:end="273:11">out</name> <operator pos:start="273:13" pos:end="273:13">=</operator> <name pos:start="273:15" pos:end="273:28"><name pos:start="273:15" pos:end="273:15">c</name><operator pos:start="273:16" pos:end="273:17">-&gt;</operator><name pos:start="273:18" pos:end="273:20">pic</name><operator pos:start="273:21" pos:end="273:21">.</operator><name pos:start="273:22" pos:end="273:25">data</name><index pos:start="273:26" pos:end="273:28">[<expr pos:start="273:27" pos:end="273:27"><literal type="number" pos:start="273:27" pos:end="273:27">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:21"><expr pos:start="275:9" pos:end="275:20"><name pos:start="275:9" pos:end="275:11">src</name> <operator pos:start="275:13" pos:end="275:13">=</operator> <name pos:start="275:15" pos:end="275:20"><name pos:start="275:15" pos:end="275:15">c</name><operator pos:start="275:16" pos:end="275:17">-&gt;</operator><name pos:start="275:18" pos:end="275:20">cur</name></name></expr>;</expr_stmt>

        <switch pos:start="277:9" pos:end="391:9">switch <condition pos:start="277:16" pos:end="277:23">(<expr pos:start="277:17" pos:end="277:22"><name pos:start="277:17" pos:end="277:22"><name pos:start="277:17" pos:end="277:17">c</name><operator pos:start="277:18" pos:end="277:19">-&gt;</operator><name pos:start="277:20" pos:end="277:22">fmt</name></name></expr>)</condition> <block pos:start="277:25" pos:end="391:9">{<block_content pos:start="279:9" pos:end="389:77">

        <case pos:start="279:9" pos:end="279:27">case <expr pos:start="279:14" pos:end="279:26"><name pos:start="279:14" pos:end="279:26">ZMBV_FMT_8BPP</name></expr>:</case>

            <for pos:start="281:13" pos:end="297:13">for <control pos:start="281:17" pos:end="281:43">(<init pos:start="281:18" pos:end="281:23"><expr pos:start="281:18" pos:end="281:22"><name pos:start="281:18" pos:end="281:18">j</name> <operator pos:start="281:20" pos:end="281:20">=</operator> <literal type="number" pos:start="281:22" pos:end="281:22">0</literal></expr>;</init> <condition pos:start="281:25" pos:end="281:38"><expr pos:start="281:25" pos:end="281:37"><name pos:start="281:25" pos:end="281:25">j</name> <operator pos:start="281:27" pos:end="281:27">&lt;</operator> <name pos:start="281:29" pos:end="281:37"><name pos:start="281:29" pos:end="281:29">c</name><operator pos:start="281:30" pos:end="281:31">-&gt;</operator><name pos:start="281:32" pos:end="281:37">height</name></name></expr>;</condition> <incr pos:start="281:40" pos:end="281:42"><expr pos:start="281:40" pos:end="281:42"><name pos:start="281:40" pos:end="281:40">j</name><operator pos:start="281:41" pos:end="281:42">++</operator></expr></incr>)</control> <block pos:start="281:45" pos:end="297:13">{<block_content pos:start="283:17" pos:end="295:42">

                <for pos:start="283:17" pos:end="293:17">for <control pos:start="283:21" pos:end="283:46">(<init pos:start="283:22" pos:end="283:27"><expr pos:start="283:22" pos:end="283:26"><name pos:start="283:22" pos:end="283:22">i</name> <operator pos:start="283:24" pos:end="283:24">=</operator> <literal type="number" pos:start="283:26" pos:end="283:26">0</literal></expr>;</init> <condition pos:start="283:29" pos:end="283:41"><expr pos:start="283:29" pos:end="283:40"><name pos:start="283:29" pos:end="283:29">i</name> <operator pos:start="283:31" pos:end="283:31">&lt;</operator> <name pos:start="283:33" pos:end="283:40"><name pos:start="283:33" pos:end="283:33">c</name><operator pos:start="283:34" pos:end="283:35">-&gt;</operator><name pos:start="283:36" pos:end="283:40">width</name></name></expr>;</condition> <incr pos:start="283:43" pos:end="283:45"><expr pos:start="283:43" pos:end="283:45"><name pos:start="283:43" pos:end="283:43">i</name><operator pos:start="283:44" pos:end="283:45">++</operator></expr></incr>)</control> <block pos:start="283:48" pos:end="293:17">{<block_content pos:start="285:21" pos:end="291:26">

                    <expr_stmt pos:start="285:21" pos:end="285:60"><expr pos:start="285:21" pos:end="285:59"><name pos:start="285:21" pos:end="285:34"><name pos:start="285:21" pos:end="285:23">out</name><index pos:start="285:24" pos:end="285:34">[<expr pos:start="285:25" pos:end="285:33"><name pos:start="285:25" pos:end="285:25">i</name> <operator pos:start="285:27" pos:end="285:27">*</operator> <literal type="number" pos:start="285:29" pos:end="285:29">3</literal> <operator pos:start="285:31" pos:end="285:31">+</operator> <literal type="number" pos:start="285:33" pos:end="285:33">0</literal></expr>]</index></name> <operator pos:start="285:36" pos:end="285:36">=</operator> <name pos:start="285:38" pos:end="285:59"><name pos:start="285:38" pos:end="285:38">c</name><operator pos:start="285:39" pos:end="285:40">-&gt;</operator><name pos:start="285:41" pos:end="285:43">pal</name><index pos:start="285:44" pos:end="285:59">[<expr pos:start="285:45" pos:end="285:58"><operator pos:start="285:45" pos:end="285:45">(</operator><operator pos:start="285:46" pos:end="285:46">*</operator><name pos:start="285:47" pos:end="285:49">src</name><operator pos:start="285:50" pos:end="285:50">)</operator> <operator pos:start="285:52" pos:end="285:52">*</operator> <literal type="number" pos:start="285:54" pos:end="285:56">3</literal> <operator pos:start="285:56" pos:end="285:56">+</operator> <literal type="number" pos:start="285:58" pos:end="285:58">0</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="287:21" pos:end="287:60"><expr pos:start="287:21" pos:end="287:59"><name pos:start="287:21" pos:end="287:34"><name pos:start="287:21" pos:end="287:23">out</name><index pos:start="287:24" pos:end="287:34">[<expr pos:start="287:25" pos:end="287:33"><name pos:start="287:25" pos:end="287:25">i</name> <operator pos:start="287:27" pos:end="287:27">*</operator> <literal type="number" pos:start="287:29" pos:end="287:29">3</literal> <operator pos:start="287:31" pos:end="287:31">+</operator> <literal type="number" pos:start="287:33" pos:end="287:33">1</literal></expr>]</index></name> <operator pos:start="287:36" pos:end="287:36">=</operator> <name pos:start="287:38" pos:end="287:59"><name pos:start="287:38" pos:end="287:38">c</name><operator pos:start="287:39" pos:end="287:40">-&gt;</operator><name pos:start="287:41" pos:end="287:43">pal</name><index pos:start="287:44" pos:end="287:59">[<expr pos:start="287:45" pos:end="287:58"><operator pos:start="287:45" pos:end="287:45">(</operator><operator pos:start="287:46" pos:end="287:46">*</operator><name pos:start="287:47" pos:end="287:49">src</name><operator pos:start="287:50" pos:end="287:50">)</operator> <operator pos:start="287:52" pos:end="287:52">*</operator> <literal type="number" pos:start="287:54" pos:end="287:56">3</literal> <operator pos:start="287:56" pos:end="287:56">+</operator> <literal type="number" pos:start="287:58" pos:end="287:58">1</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="289:21" pos:end="289:60"><expr pos:start="289:21" pos:end="289:59"><name pos:start="289:21" pos:end="289:34"><name pos:start="289:21" pos:end="289:23">out</name><index pos:start="289:24" pos:end="289:34">[<expr pos:start="289:25" pos:end="289:33"><name pos:start="289:25" pos:end="289:25">i</name> <operator pos:start="289:27" pos:end="289:27">*</operator> <literal type="number" pos:start="289:29" pos:end="289:29">3</literal> <operator pos:start="289:31" pos:end="289:31">+</operator> <literal type="number" pos:start="289:33" pos:end="289:33">2</literal></expr>]</index></name> <operator pos:start="289:36" pos:end="289:36">=</operator> <name pos:start="289:38" pos:end="289:59"><name pos:start="289:38" pos:end="289:38">c</name><operator pos:start="289:39" pos:end="289:40">-&gt;</operator><name pos:start="289:41" pos:end="289:43">pal</name><index pos:start="289:44" pos:end="289:59">[<expr pos:start="289:45" pos:end="289:58"><operator pos:start="289:45" pos:end="289:45">(</operator><operator pos:start="289:46" pos:end="289:46">*</operator><name pos:start="289:47" pos:end="289:49">src</name><operator pos:start="289:50" pos:end="289:50">)</operator> <operator pos:start="289:52" pos:end="289:52">*</operator> <literal type="number" pos:start="289:54" pos:end="289:56">3</literal> <operator pos:start="289:56" pos:end="289:56">+</operator> <literal type="number" pos:start="289:58" pos:end="289:58">2</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="291:21" pos:end="291:26"><expr pos:start="291:21" pos:end="291:25"><name pos:start="291:21" pos:end="291:23">src</name><operator pos:start="291:24" pos:end="291:25">++</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="295:17" pos:end="295:42"><expr pos:start="295:17" pos:end="295:41"><name pos:start="295:17" pos:end="295:19">out</name> <operator pos:start="295:21" pos:end="295:22">+=</operator> <name pos:start="295:24" pos:end="295:41"><name pos:start="295:24" pos:end="295:24">c</name><operator pos:start="295:25" pos:end="295:26">-&gt;</operator><name pos:start="295:27" pos:end="295:29">pic</name><operator pos:start="295:30" pos:end="295:30">.</operator><name pos:start="295:31" pos:end="295:38">linesize</name><index pos:start="295:39" pos:end="295:41">[<expr pos:start="295:40" pos:end="295:40"><literal type="number" pos:start="295:40" pos:end="295:40">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="299:13" pos:end="299:18">break;</break>

        <case pos:start="301:9" pos:end="301:28">case <expr pos:start="301:14" pos:end="301:27"><name pos:start="301:14" pos:end="301:27">ZMBV_FMT_15BPP</name></expr>:</case>

            <for pos:start="303:13" pos:end="321:13">for <control pos:start="303:17" pos:end="303:43">(<init pos:start="303:18" pos:end="303:23"><expr pos:start="303:18" pos:end="303:22"><name pos:start="303:18" pos:end="303:18">j</name> <operator pos:start="303:20" pos:end="303:20">=</operator> <literal type="number" pos:start="303:22" pos:end="303:22">0</literal></expr>;</init> <condition pos:start="303:25" pos:end="303:38"><expr pos:start="303:25" pos:end="303:37"><name pos:start="303:25" pos:end="303:25">j</name> <operator pos:start="303:27" pos:end="303:27">&lt;</operator> <name pos:start="303:29" pos:end="303:37"><name pos:start="303:29" pos:end="303:29">c</name><operator pos:start="303:30" pos:end="303:31">-&gt;</operator><name pos:start="303:32" pos:end="303:37">height</name></name></expr>;</condition> <incr pos:start="303:40" pos:end="303:42"><expr pos:start="303:40" pos:end="303:42"><name pos:start="303:40" pos:end="303:40">j</name><operator pos:start="303:41" pos:end="303:42">++</operator></expr></incr>)</control> <block pos:start="303:45" pos:end="321:13">{<block_content pos:start="305:17" pos:end="319:42">

                <for pos:start="305:17" pos:end="317:17">for <control pos:start="305:21" pos:end="305:46">(<init pos:start="305:22" pos:end="305:27"><expr pos:start="305:22" pos:end="305:26"><name pos:start="305:22" pos:end="305:22">i</name> <operator pos:start="305:24" pos:end="305:24">=</operator> <literal type="number" pos:start="305:26" pos:end="305:26">0</literal></expr>;</init> <condition pos:start="305:29" pos:end="305:41"><expr pos:start="305:29" pos:end="305:40"><name pos:start="305:29" pos:end="305:29">i</name> <operator pos:start="305:31" pos:end="305:31">&lt;</operator> <name pos:start="305:33" pos:end="305:40"><name pos:start="305:33" pos:end="305:33">c</name><operator pos:start="305:34" pos:end="305:35">-&gt;</operator><name pos:start="305:36" pos:end="305:40">width</name></name></expr>;</condition> <incr pos:start="305:43" pos:end="305:45"><expr pos:start="305:43" pos:end="305:45"><name pos:start="305:43" pos:end="305:43">i</name><operator pos:start="305:44" pos:end="305:45">++</operator></expr></incr>)</control> <block pos:start="305:48" pos:end="317:17">{<block_content pos:start="307:21" pos:end="315:57">

                    <decl_stmt pos:start="307:21" pos:end="307:48"><decl pos:start="307:21" pos:end="307:47"><type pos:start="307:21" pos:end="307:28"><name pos:start="307:21" pos:end="307:28">uint16_t</name></type> <name pos:start="307:30" pos:end="307:32">tmp</name> <init pos:start="307:34" pos:end="307:47">= <expr pos:start="307:36" pos:end="307:47"><call pos:start="307:36" pos:end="307:47"><name pos:start="307:36" pos:end="307:42">AV_RL16</name><argument_list pos:start="307:43" pos:end="307:47">(<argument pos:start="307:44" pos:end="307:46"><expr pos:start="307:44" pos:end="307:46"><name pos:start="307:44" pos:end="307:46">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="309:21" pos:end="309:29"><expr pos:start="309:21" pos:end="309:28"><name pos:start="309:21" pos:end="309:23">src</name> <operator pos:start="309:25" pos:end="309:26">+=</operator> <literal type="number" pos:start="309:28" pos:end="309:28">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="311:21" pos:end="311:57"><expr pos:start="311:21" pos:end="311:56"><name pos:start="311:21" pos:end="311:34"><name pos:start="311:21" pos:end="311:23">out</name><index pos:start="311:24" pos:end="311:34">[<expr pos:start="311:25" pos:end="311:33"><name pos:start="311:25" pos:end="311:25">i</name> <operator pos:start="311:27" pos:end="311:27">*</operator> <literal type="number" pos:start="311:29" pos:end="311:29">3</literal> <operator pos:start="311:31" pos:end="311:31">+</operator> <literal type="number" pos:start="311:33" pos:end="311:33">0</literal></expr>]</index></name> <operator pos:start="311:36" pos:end="311:36">=</operator> <operator pos:start="311:38" pos:end="311:38">(</operator><name pos:start="311:39" pos:end="311:41">tmp</name> <operator pos:start="311:43" pos:end="311:43">&amp;</operator> <literal type="number" pos:start="311:45" pos:end="311:50">0x7C00</literal><operator pos:start="311:51" pos:end="311:51">)</operator> <operator pos:start="311:53" pos:end="311:54">&gt;&gt;</operator> <literal type="number" pos:start="311:56" pos:end="311:56">7</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="313:21" pos:end="313:57"><expr pos:start="313:21" pos:end="313:56"><name pos:start="313:21" pos:end="313:34"><name pos:start="313:21" pos:end="313:23">out</name><index pos:start="313:24" pos:end="313:34">[<expr pos:start="313:25" pos:end="313:33"><name pos:start="313:25" pos:end="313:25">i</name> <operator pos:start="313:27" pos:end="313:27">*</operator> <literal type="number" pos:start="313:29" pos:end="313:29">3</literal> <operator pos:start="313:31" pos:end="313:31">+</operator> <literal type="number" pos:start="313:33" pos:end="313:33">1</literal></expr>]</index></name> <operator pos:start="313:36" pos:end="313:36">=</operator> <operator pos:start="313:38" pos:end="313:38">(</operator><name pos:start="313:39" pos:end="313:41">tmp</name> <operator pos:start="313:43" pos:end="313:43">&amp;</operator> <literal type="number" pos:start="313:45" pos:end="313:50">0x03E0</literal><operator pos:start="313:51" pos:end="313:51">)</operator> <operator pos:start="313:53" pos:end="313:54">&gt;&gt;</operator> <literal type="number" pos:start="313:56" pos:end="313:56">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="315:21" pos:end="315:57"><expr pos:start="315:21" pos:end="315:56"><name pos:start="315:21" pos:end="315:34"><name pos:start="315:21" pos:end="315:23">out</name><index pos:start="315:24" pos:end="315:34">[<expr pos:start="315:25" pos:end="315:33"><name pos:start="315:25" pos:end="315:25">i</name> <operator pos:start="315:27" pos:end="315:27">*</operator> <literal type="number" pos:start="315:29" pos:end="315:29">3</literal> <operator pos:start="315:31" pos:end="315:31">+</operator> <literal type="number" pos:start="315:33" pos:end="315:33">2</literal></expr>]</index></name> <operator pos:start="315:36" pos:end="315:36">=</operator> <operator pos:start="315:38" pos:end="315:38">(</operator><name pos:start="315:39" pos:end="315:41">tmp</name> <operator pos:start="315:43" pos:end="315:43">&amp;</operator> <literal type="number" pos:start="315:45" pos:end="315:50">0x001F</literal><operator pos:start="315:51" pos:end="315:51">)</operator> <operator pos:start="315:53" pos:end="315:54">&lt;&lt;</operator> <literal type="number" pos:start="315:56" pos:end="315:56">3</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="319:17" pos:end="319:42"><expr pos:start="319:17" pos:end="319:41"><name pos:start="319:17" pos:end="319:19">out</name> <operator pos:start="319:21" pos:end="319:22">+=</operator> <name pos:start="319:24" pos:end="319:41"><name pos:start="319:24" pos:end="319:24">c</name><operator pos:start="319:25" pos:end="319:26">-&gt;</operator><name pos:start="319:27" pos:end="319:29">pic</name><operator pos:start="319:30" pos:end="319:30">.</operator><name pos:start="319:31" pos:end="319:38">linesize</name><index pos:start="319:39" pos:end="319:41">[<expr pos:start="319:40" pos:end="319:40"><literal type="number" pos:start="319:40" pos:end="319:40">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="323:13" pos:end="323:18">break;</break>

        <case pos:start="325:9" pos:end="325:28">case <expr pos:start="325:14" pos:end="325:27"><name pos:start="325:14" pos:end="325:27">ZMBV_FMT_16BPP</name></expr>:</case>

            <for pos:start="327:13" pos:end="345:13">for <control pos:start="327:17" pos:end="327:43">(<init pos:start="327:18" pos:end="327:23"><expr pos:start="327:18" pos:end="327:22"><name pos:start="327:18" pos:end="327:18">j</name> <operator pos:start="327:20" pos:end="327:20">=</operator> <literal type="number" pos:start="327:22" pos:end="327:22">0</literal></expr>;</init> <condition pos:start="327:25" pos:end="327:38"><expr pos:start="327:25" pos:end="327:37"><name pos:start="327:25" pos:end="327:25">j</name> <operator pos:start="327:27" pos:end="327:27">&lt;</operator> <name pos:start="327:29" pos:end="327:37"><name pos:start="327:29" pos:end="327:29">c</name><operator pos:start="327:30" pos:end="327:31">-&gt;</operator><name pos:start="327:32" pos:end="327:37">height</name></name></expr>;</condition> <incr pos:start="327:40" pos:end="327:42"><expr pos:start="327:40" pos:end="327:42"><name pos:start="327:40" pos:end="327:40">j</name><operator pos:start="327:41" pos:end="327:42">++</operator></expr></incr>)</control> <block pos:start="327:45" pos:end="345:13">{<block_content pos:start="329:17" pos:end="343:42">

                <for pos:start="329:17" pos:end="341:17">for <control pos:start="329:21" pos:end="329:46">(<init pos:start="329:22" pos:end="329:27"><expr pos:start="329:22" pos:end="329:26"><name pos:start="329:22" pos:end="329:22">i</name> <operator pos:start="329:24" pos:end="329:24">=</operator> <literal type="number" pos:start="329:26" pos:end="329:26">0</literal></expr>;</init> <condition pos:start="329:29" pos:end="329:41"><expr pos:start="329:29" pos:end="329:40"><name pos:start="329:29" pos:end="329:29">i</name> <operator pos:start="329:31" pos:end="329:31">&lt;</operator> <name pos:start="329:33" pos:end="329:40"><name pos:start="329:33" pos:end="329:33">c</name><operator pos:start="329:34" pos:end="329:35">-&gt;</operator><name pos:start="329:36" pos:end="329:40">width</name></name></expr>;</condition> <incr pos:start="329:43" pos:end="329:45"><expr pos:start="329:43" pos:end="329:45"><name pos:start="329:43" pos:end="329:43">i</name><operator pos:start="329:44" pos:end="329:45">++</operator></expr></incr>)</control> <block pos:start="329:48" pos:end="341:17">{<block_content pos:start="331:21" pos:end="339:57">

                    <decl_stmt pos:start="331:21" pos:end="331:48"><decl pos:start="331:21" pos:end="331:47"><type pos:start="331:21" pos:end="331:28"><name pos:start="331:21" pos:end="331:28">uint16_t</name></type> <name pos:start="331:30" pos:end="331:32">tmp</name> <init pos:start="331:34" pos:end="331:47">= <expr pos:start="331:36" pos:end="331:47"><call pos:start="331:36" pos:end="331:47"><name pos:start="331:36" pos:end="331:42">AV_RL16</name><argument_list pos:start="331:43" pos:end="331:47">(<argument pos:start="331:44" pos:end="331:46"><expr pos:start="331:44" pos:end="331:46"><name pos:start="331:44" pos:end="331:46">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="333:21" pos:end="333:29"><expr pos:start="333:21" pos:end="333:28"><name pos:start="333:21" pos:end="333:23">src</name> <operator pos:start="333:25" pos:end="333:26">+=</operator> <literal type="number" pos:start="333:28" pos:end="333:28">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="335:21" pos:end="335:57"><expr pos:start="335:21" pos:end="335:56"><name pos:start="335:21" pos:end="335:34"><name pos:start="335:21" pos:end="335:23">out</name><index pos:start="335:24" pos:end="335:34">[<expr pos:start="335:25" pos:end="335:33"><name pos:start="335:25" pos:end="335:25">i</name> <operator pos:start="335:27" pos:end="335:27">*</operator> <literal type="number" pos:start="335:29" pos:end="335:29">3</literal> <operator pos:start="335:31" pos:end="335:31">+</operator> <literal type="number" pos:start="335:33" pos:end="335:33">0</literal></expr>]</index></name> <operator pos:start="335:36" pos:end="335:36">=</operator> <operator pos:start="335:38" pos:end="335:38">(</operator><name pos:start="335:39" pos:end="335:41">tmp</name> <operator pos:start="335:43" pos:end="335:43">&amp;</operator> <literal type="number" pos:start="335:45" pos:end="335:50">0xF800</literal><operator pos:start="335:51" pos:end="335:51">)</operator> <operator pos:start="335:53" pos:end="335:54">&gt;&gt;</operator> <literal type="number" pos:start="335:56" pos:end="335:56">8</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="337:21" pos:end="337:57"><expr pos:start="337:21" pos:end="337:56"><name pos:start="337:21" pos:end="337:34"><name pos:start="337:21" pos:end="337:23">out</name><index pos:start="337:24" pos:end="337:34">[<expr pos:start="337:25" pos:end="337:33"><name pos:start="337:25" pos:end="337:25">i</name> <operator pos:start="337:27" pos:end="337:27">*</operator> <literal type="number" pos:start="337:29" pos:end="337:29">3</literal> <operator pos:start="337:31" pos:end="337:31">+</operator> <literal type="number" pos:start="337:33" pos:end="337:33">1</literal></expr>]</index></name> <operator pos:start="337:36" pos:end="337:36">=</operator> <operator pos:start="337:38" pos:end="337:38">(</operator><name pos:start="337:39" pos:end="337:41">tmp</name> <operator pos:start="337:43" pos:end="337:43">&amp;</operator> <literal type="number" pos:start="337:45" pos:end="337:50">0x07E0</literal><operator pos:start="337:51" pos:end="337:51">)</operator> <operator pos:start="337:53" pos:end="337:54">&gt;&gt;</operator> <literal type="number" pos:start="337:56" pos:end="337:56">3</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="339:21" pos:end="339:57"><expr pos:start="339:21" pos:end="339:56"><name pos:start="339:21" pos:end="339:34"><name pos:start="339:21" pos:end="339:23">out</name><index pos:start="339:24" pos:end="339:34">[<expr pos:start="339:25" pos:end="339:33"><name pos:start="339:25" pos:end="339:25">i</name> <operator pos:start="339:27" pos:end="339:27">*</operator> <literal type="number" pos:start="339:29" pos:end="339:29">3</literal> <operator pos:start="339:31" pos:end="339:31">+</operator> <literal type="number" pos:start="339:33" pos:end="339:33">2</literal></expr>]</index></name> <operator pos:start="339:36" pos:end="339:36">=</operator> <operator pos:start="339:38" pos:end="339:38">(</operator><name pos:start="339:39" pos:end="339:41">tmp</name> <operator pos:start="339:43" pos:end="339:43">&amp;</operator> <literal type="number" pos:start="339:45" pos:end="339:50">0x001F</literal><operator pos:start="339:51" pos:end="339:51">)</operator> <operator pos:start="339:53" pos:end="339:54">&lt;&lt;</operator> <literal type="number" pos:start="339:56" pos:end="339:56">3</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="343:17" pos:end="343:42"><expr pos:start="343:17" pos:end="343:41"><name pos:start="343:17" pos:end="343:19">out</name> <operator pos:start="343:21" pos:end="343:22">+=</operator> <name pos:start="343:24" pos:end="343:41"><name pos:start="343:24" pos:end="343:24">c</name><operator pos:start="343:25" pos:end="343:26">-&gt;</operator><name pos:start="343:27" pos:end="343:29">pic</name><operator pos:start="343:30" pos:end="343:30">.</operator><name pos:start="343:31" pos:end="343:38">linesize</name><index pos:start="343:39" pos:end="343:41">[<expr pos:start="343:40" pos:end="343:40"><literal type="number" pos:start="343:40" pos:end="343:40">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="347:13" pos:end="350:0">break;</break>

<cpp:ifdef pos:start="349:1" pos:end="349:24">#<cpp:directive pos:start="349:2" pos:end="349:6">ifdef</cpp:directive> <name pos:start="349:8" pos:end="349:24">ZMBV_ENABLE_24BPP</name></cpp:ifdef>

        <case pos:start="351:9" pos:end="351:28">case <expr pos:start="351:14" pos:end="351:27"><name pos:start="351:14" pos:end="351:27">ZMBV_FMT_24BPP</name></expr>:</case>

            <for pos:start="353:13" pos:end="361:13">for <control pos:start="353:17" pos:end="353:43">(<init pos:start="353:18" pos:end="353:23"><expr pos:start="353:18" pos:end="353:22"><name pos:start="353:18" pos:end="353:18">j</name> <operator pos:start="353:20" pos:end="353:20">=</operator> <literal type="number" pos:start="353:22" pos:end="353:22">0</literal></expr>;</init> <condition pos:start="353:25" pos:end="353:38"><expr pos:start="353:25" pos:end="353:37"><name pos:start="353:25" pos:end="353:25">j</name> <operator pos:start="353:27" pos:end="353:27">&lt;</operator> <name pos:start="353:29" pos:end="353:37"><name pos:start="353:29" pos:end="353:29">c</name><operator pos:start="353:30" pos:end="353:31">-&gt;</operator><name pos:start="353:32" pos:end="353:37">height</name></name></expr>;</condition> <incr pos:start="353:40" pos:end="353:42"><expr pos:start="353:40" pos:end="353:42"><name pos:start="353:40" pos:end="353:40">j</name><operator pos:start="353:41" pos:end="353:42">++</operator></expr></incr>)</control> <block pos:start="353:45" pos:end="361:13">{<block_content pos:start="355:17" pos:end="359:42">

                <expr_stmt pos:start="355:17" pos:end="355:47"><expr pos:start="355:17" pos:end="355:46"><call pos:start="355:17" pos:end="355:46"><name pos:start="355:17" pos:end="355:22">memcpy</name><argument_list pos:start="355:23" pos:end="355:46">(<argument pos:start="355:24" pos:end="355:26"><expr pos:start="355:24" pos:end="355:26"><name pos:start="355:24" pos:end="355:26">out</name></expr></argument>, <argument pos:start="355:29" pos:end="355:31"><expr pos:start="355:29" pos:end="355:31"><name pos:start="355:29" pos:end="355:31">src</name></expr></argument>, <argument pos:start="355:34" pos:end="355:45"><expr pos:start="355:34" pos:end="355:45"><name pos:start="355:34" pos:end="355:41"><name pos:start="355:34" pos:end="355:34">c</name><operator pos:start="355:35" pos:end="355:36">-&gt;</operator><name pos:start="355:37" pos:end="355:41">width</name></name> <operator pos:start="355:43" pos:end="355:43">*</operator> <literal type="number" pos:start="355:45" pos:end="355:45">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="357:17" pos:end="357:36"><expr pos:start="357:17" pos:end="357:35"><name pos:start="357:17" pos:end="357:19">src</name> <operator pos:start="357:21" pos:end="357:22">+=</operator> <name pos:start="357:24" pos:end="357:31"><name pos:start="357:24" pos:end="357:24">c</name><operator pos:start="357:25" pos:end="357:26">-&gt;</operator><name pos:start="357:27" pos:end="357:31">width</name></name> <operator pos:start="357:33" pos:end="357:33">*</operator> <literal type="number" pos:start="357:35" pos:end="357:35">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:42"><expr pos:start="359:17" pos:end="359:41"><name pos:start="359:17" pos:end="359:19">out</name> <operator pos:start="359:21" pos:end="359:22">+=</operator> <name pos:start="359:24" pos:end="359:41"><name pos:start="359:24" pos:end="359:24">c</name><operator pos:start="359:25" pos:end="359:26">-&gt;</operator><name pos:start="359:27" pos:end="359:29">pic</name><operator pos:start="359:30" pos:end="359:30">.</operator><name pos:start="359:31" pos:end="359:38">linesize</name><index pos:start="359:39" pos:end="359:41">[<expr pos:start="359:40" pos:end="359:40"><literal type="number" pos:start="359:40" pos:end="359:40">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="363:13" pos:end="366:0">break;</break>

<cpp:endif pos:start="365:1" pos:end="365:6">#<cpp:directive pos:start="365:2" pos:end="365:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="365:8" pos:end="365:26">//ZMBV_ENABLE_24BPP</comment>

        <case pos:start="367:9" pos:end="367:28">case <expr pos:start="367:14" pos:end="367:27"><name pos:start="367:14" pos:end="367:27">ZMBV_FMT_32BPP</name></expr>:</case>

            <for pos:start="369:13" pos:end="383:13">for <control pos:start="369:17" pos:end="369:43">(<init pos:start="369:18" pos:end="369:23"><expr pos:start="369:18" pos:end="369:22"><name pos:start="369:18" pos:end="369:18">j</name> <operator pos:start="369:20" pos:end="369:20">=</operator> <literal type="number" pos:start="369:22" pos:end="369:22">0</literal></expr>;</init> <condition pos:start="369:25" pos:end="369:38"><expr pos:start="369:25" pos:end="369:37"><name pos:start="369:25" pos:end="369:25">j</name> <operator pos:start="369:27" pos:end="369:27">&lt;</operator> <name pos:start="369:29" pos:end="369:37"><name pos:start="369:29" pos:end="369:29">c</name><operator pos:start="369:30" pos:end="369:31">-&gt;</operator><name pos:start="369:32" pos:end="369:37">height</name></name></expr>;</condition> <incr pos:start="369:40" pos:end="369:42"><expr pos:start="369:40" pos:end="369:42"><name pos:start="369:40" pos:end="369:40">j</name><operator pos:start="369:41" pos:end="369:42">++</operator></expr></incr>)</control> <block pos:start="369:45" pos:end="383:13">{<block_content pos:start="371:17" pos:end="381:42">

                <for pos:start="371:17" pos:end="379:17">for <control pos:start="371:21" pos:end="371:46">(<init pos:start="371:22" pos:end="371:27"><expr pos:start="371:22" pos:end="371:26"><name pos:start="371:22" pos:end="371:22">i</name> <operator pos:start="371:24" pos:end="371:24">=</operator> <literal type="number" pos:start="371:26" pos:end="371:26">0</literal></expr>;</init> <condition pos:start="371:29" pos:end="371:41"><expr pos:start="371:29" pos:end="371:40"><name pos:start="371:29" pos:end="371:29">i</name> <operator pos:start="371:31" pos:end="371:31">&lt;</operator> <name pos:start="371:33" pos:end="371:40"><name pos:start="371:33" pos:end="371:33">c</name><operator pos:start="371:34" pos:end="371:35">-&gt;</operator><name pos:start="371:36" pos:end="371:40">width</name></name></expr>;</condition> <incr pos:start="371:43" pos:end="371:45"><expr pos:start="371:43" pos:end="371:45"><name pos:start="371:43" pos:end="371:43">i</name><operator pos:start="371:44" pos:end="371:45">++</operator></expr></incr>)</control> <block pos:start="371:48" pos:end="379:17">{<block_content pos:start="373:21" pos:end="377:44">

                    <decl_stmt pos:start="373:21" pos:end="373:48"><decl pos:start="373:21" pos:end="373:47"><type pos:start="373:21" pos:end="373:28"><name pos:start="373:21" pos:end="373:28">uint32_t</name></type> <name pos:start="373:30" pos:end="373:32">tmp</name> <init pos:start="373:34" pos:end="373:47">= <expr pos:start="373:36" pos:end="373:47"><call pos:start="373:36" pos:end="373:47"><name pos:start="373:36" pos:end="373:42">AV_RL32</name><argument_list pos:start="373:43" pos:end="373:47">(<argument pos:start="373:44" pos:end="373:46"><expr pos:start="373:44" pos:end="373:46"><name pos:start="373:44" pos:end="373:46">src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="375:21" pos:end="375:29"><expr pos:start="375:21" pos:end="375:28"><name pos:start="375:21" pos:end="375:23">src</name> <operator pos:start="375:25" pos:end="375:26">+=</operator> <literal type="number" pos:start="375:28" pos:end="375:28">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="377:21" pos:end="377:44"><expr pos:start="377:21" pos:end="377:43"><call pos:start="377:21" pos:end="377:43"><name pos:start="377:21" pos:end="377:27">AV_WB24</name><argument_list pos:start="377:28" pos:end="377:43">(<argument pos:start="377:29" pos:end="377:37"><expr pos:start="377:29" pos:end="377:37"><name pos:start="377:29" pos:end="377:31">out</name><operator pos:start="377:32" pos:end="377:32">+</operator><operator pos:start="377:33" pos:end="377:33">(</operator><name pos:start="377:34" pos:end="377:34">i</name><operator pos:start="377:35" pos:end="377:35">*</operator><literal type="number" pos:start="377:36" pos:end="377:36">3</literal><operator pos:start="377:37" pos:end="377:37">)</operator></expr></argument>, <argument pos:start="377:40" pos:end="377:42"><expr pos:start="377:40" pos:end="377:42"><name pos:start="377:40" pos:end="377:42">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="381:17" pos:end="381:42"><expr pos:start="381:17" pos:end="381:41"><name pos:start="381:17" pos:end="381:19">out</name> <operator pos:start="381:21" pos:end="381:22">+=</operator> <name pos:start="381:24" pos:end="381:41"><name pos:start="381:24" pos:end="381:24">c</name><operator pos:start="381:25" pos:end="381:26">-&gt;</operator><name pos:start="381:27" pos:end="381:29">pic</name><operator pos:start="381:30" pos:end="381:30">.</operator><name pos:start="381:31" pos:end="381:38">linesize</name><index pos:start="381:39" pos:end="381:41">[<expr pos:start="381:40" pos:end="381:40"><literal type="number" pos:start="381:40" pos:end="381:40">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="385:13" pos:end="385:18">break;</break>

        <default pos:start="387:9" pos:end="387:16">default:</default>

            <expr_stmt pos:start="389:13" pos:end="389:77"><expr pos:start="389:13" pos:end="389:76"><call pos:start="389:13" pos:end="389:76"><name pos:start="389:13" pos:end="389:18">av_log</name><argument_list pos:start="389:19" pos:end="389:76">(<argument pos:start="389:20" pos:end="389:24"><expr pos:start="389:20" pos:end="389:24"><name pos:start="389:20" pos:end="389:24">avctx</name></expr></argument>, <argument pos:start="389:27" pos:end="389:38"><expr pos:start="389:27" pos:end="389:38"><name pos:start="389:27" pos:end="389:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="389:41" pos:end="389:67"><expr pos:start="389:41" pos:end="389:67"><literal type="string" pos:start="389:41" pos:end="389:67">"Cannot handle format %i\n"</literal></expr></argument>, <argument pos:start="389:70" pos:end="389:75"><expr pos:start="389:70" pos:end="389:75"><name pos:start="389:70" pos:end="389:75"><name pos:start="389:70" pos:end="389:70">c</name><operator pos:start="389:71" pos:end="389:72">-&gt;</operator><name pos:start="389:73" pos:end="389:75">fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <expr_stmt pos:start="393:9" pos:end="393:43"><expr pos:start="393:9" pos:end="393:42"><call pos:start="393:9" pos:end="393:42"><name pos:start="393:9" pos:end="393:14">FFSWAP</name><argument_list pos:start="393:15" pos:end="393:42">(<argument pos:start="393:16" pos:end="393:24"><expr pos:start="393:16" pos:end="393:24"><name pos:start="393:16" pos:end="393:22">uint8_t</name> <operator pos:start="393:24" pos:end="393:24">*</operator></expr></argument>, <argument pos:start="393:27" pos:end="393:32"><expr pos:start="393:27" pos:end="393:32"><name pos:start="393:27" pos:end="393:32"><name pos:start="393:27" pos:end="393:27">c</name><operator pos:start="393:28" pos:end="393:29">-&gt;</operator><name pos:start="393:30" pos:end="393:32">cur</name></name></expr></argument>, <argument pos:start="393:35" pos:end="393:41"><expr pos:start="393:35" pos:end="393:41"><name pos:start="393:35" pos:end="393:41"><name pos:start="393:35" pos:end="393:35">c</name><operator pos:start="393:36" pos:end="393:37">-&gt;</operator><name pos:start="393:38" pos:end="393:41">prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="397:5" pos:end="397:33"><expr pos:start="397:5" pos:end="397:32"><operator pos:start="397:5" pos:end="397:5">*</operator><name pos:start="397:6" pos:end="397:14">data_size</name> <operator pos:start="397:16" pos:end="397:16">=</operator> <sizeof pos:start="397:18" pos:end="397:32">sizeof<argument_list pos:start="397:24" pos:end="397:32">(<argument pos:start="397:25" pos:end="397:31"><expr pos:start="397:25" pos:end="397:31"><name pos:start="397:25" pos:end="397:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:29"><expr pos:start="399:5" pos:end="399:28"><operator pos:start="399:5" pos:end="399:5">*</operator><operator pos:start="399:6" pos:end="399:6">(</operator><name pos:start="399:7" pos:end="399:13">AVFrame</name><operator pos:start="399:14" pos:end="399:14">*</operator><operator pos:start="399:15" pos:end="399:15">)</operator><name pos:start="399:16" pos:end="399:19">data</name> <operator pos:start="399:21" pos:end="399:21">=</operator> <name pos:start="399:23" pos:end="399:28"><name pos:start="399:23" pos:end="399:23">c</name><operator pos:start="399:24" pos:end="399:25">-&gt;</operator><name pos:start="399:26" pos:end="399:28">pic</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="403:5" pos:end="403:63">/* always report that the buffer was completely consumed */</comment>

    <return pos:start="405:5" pos:end="405:20">return <expr pos:start="405:12" pos:end="405:19"><name pos:start="405:12" pos:end="405:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
