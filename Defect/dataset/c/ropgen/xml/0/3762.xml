<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3762.c" pos:tabs="8"><function pos:start="1:1" pos:end="387:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">sun4m_hw_init</name><parameter_list pos:start="1:26" pos:end="9:77">(<parameter pos:start="1:27" pos:end="1:57"><decl pos:start="1:27" pos:end="1:57"><type pos:start="1:27" pos:end="1:57"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:38">struct</name> <name pos:start="1:40" pos:end="1:50">sun4m_hwdef</name></name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">hwdef</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:78"><decl pos:start="1:60" pos:end="1:78"><type pos:start="1:60" pos:end="1:78"><name pos:start="1:60" pos:end="1:69">ram_addr_t</name></type> <name pos:start="1:71" pos:end="1:78">RAM_size</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:49"><decl pos:start="3:27" pos:end="3:49"><type pos:start="3:27" pos:end="3:49"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:36">char</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:49">boot_device</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:42"><decl pos:start="5:27" pos:end="5:42"><type pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:38">DisplayState</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:42">ds</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:71"><decl pos:start="5:45" pos:end="5:71"><type pos:start="5:45" pos:end="5:71"><specifier pos:start="5:45" pos:end="5:49">const</specifier> <name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:71">kernel_filename</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:52"><decl pos:start="7:27" pos:end="7:52"><type pos:start="7:27" pos:end="7:52"><specifier pos:start="7:27" pos:end="7:31">const</specifier> <name pos:start="7:33" pos:end="7:36">char</name> <modifier pos:start="7:38" pos:end="7:38">*</modifier></type><name pos:start="7:39" pos:end="7:52">kernel_cmdline</name></decl></parameter>,

                          <parameter pos:start="9:27" pos:end="9:53"><decl pos:start="9:27" pos:end="9:53"><type pos:start="9:27" pos:end="9:53"><specifier pos:start="9:27" pos:end="9:31">const</specifier> <name pos:start="9:33" pos:end="9:36">char</name> <modifier pos:start="9:38" pos:end="9:38">*</modifier></type><name pos:start="9:39" pos:end="9:53">initrd_filename</name></decl></parameter>, <parameter pos:start="9:56" pos:end="9:76"><decl pos:start="9:56" pos:end="9:76"><type pos:start="9:56" pos:end="9:76"><specifier pos:start="9:56" pos:end="9:60">const</specifier> <name pos:start="9:62" pos:end="9:65">char</name> <modifier pos:start="9:67" pos:end="9:67">*</modifier></type><name pos:start="9:68" pos:end="9:76">cpu_model</name></decl></parameter>)</parameter_list>



<block pos:start="13:1" pos:end="387:1">{<block_content pos:start="15:5" pos:end="385:62">

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">env</name></decl>, <decl pos:start="15:20" pos:end="15:34"><type ref="prev" pos:start="15:5" pos:end="15:14"><modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:34"><name pos:start="15:21" pos:end="15:24">envs</name><index pos:start="15:25" pos:end="15:34">[<expr pos:start="15:26" pos:end="15:33"><name pos:start="15:26" pos:end="15:33">MAX_CPUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:52"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">void</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:15">iommu</name></decl>, <decl pos:start="19:18" pos:end="19:24"><type ref="prev" pos:start="19:5" pos:end="19:10"><modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:24">espdma</name></decl>, <decl pos:start="19:27" pos:end="19:32"><type ref="prev" pos:start="19:5" pos:end="19:10"><modifier pos:start="19:27" pos:end="19:27">*</modifier></type><name pos:start="19:28" pos:end="19:32">ledma</name></decl>, <decl pos:start="19:35" pos:end="19:43"><type ref="prev" pos:start="19:5" pos:end="19:10"><modifier pos:start="19:35" pos:end="19:35">*</modifier></type><name pos:start="19:36" pos:end="19:43">main_esp</name></decl>, <decl pos:start="19:46" pos:end="19:51"><type ref="prev" pos:start="19:5" pos:end="19:10"><modifier pos:start="19:46" pos:end="19:46">*</modifier></type><name pos:start="19:47" pos:end="19:51">nvram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="23:32"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:32"><name pos:start="21:15" pos:end="21:22">cpu_irqs</name><index pos:start="21:23" pos:end="21:32">[<expr pos:start="21:24" pos:end="21:31"><name pos:start="21:24" pos:end="21:31">MAX_CPUS</name></expr>]</index></name></decl>, <decl pos:start="21:35" pos:end="21:45"><type ref="prev" pos:start="21:5" pos:end="21:14"><modifier pos:start="21:35" pos:end="21:35">*</modifier></type><name pos:start="21:36" pos:end="21:45">slavio_irq</name></decl>, <decl pos:start="21:48" pos:end="21:62"><type ref="prev" pos:start="21:5" pos:end="21:14"><modifier pos:start="21:48" pos:end="21:48">*</modifier></type><name pos:start="21:49" pos:end="21:62">slavio_cpu_irq</name></decl>,

        <decl pos:start="23:9" pos:end="23:19"><type ref="prev" pos:start="21:5" pos:end="21:14"><modifier pos:start="23:9" pos:end="23:9">*</modifier></type><name pos:start="23:10" pos:end="23:19">espdma_irq</name></decl>, <decl pos:start="23:22" pos:end="23:31"><type ref="prev" pos:start="21:5" pos:end="21:14"><modifier pos:start="23:22" pos:end="23:22">*</modifier></type><name pos:start="23:23" pos:end="23:31">ledma_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:35"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">qemu_irq</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:23">esp_reset</name></decl>, <decl pos:start="25:26" pos:end="25:34"><type ref="prev" pos:start="25:5" pos:end="25:14"><modifier pos:start="25:26" pos:end="25:26">*</modifier></type><name pos:start="25:27" pos:end="25:34">le_reset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:21"><decl pos:start="27:5" pos:end="27:20"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">qemu_irq</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:20">fdc_tc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:23"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">qemu_irq</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:22">cpu_halt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:65"><decl pos:start="31:5" pos:end="31:25"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:14">ram_addr_t</name></type> <name pos:start="31:16" pos:end="31:25">ram_offset</name></decl>, <decl pos:start="31:28" pos:end="31:38"><type ref="prev" pos:start="31:5" pos:end="31:14"/><name pos:start="31:28" pos:end="31:38">prom_offset</name></decl>, <decl pos:start="31:41" pos:end="31:50"><type ref="prev" pos:start="31:5" pos:end="31:14"/><name pos:start="31:41" pos:end="31:50">tcx_offset</name></decl>, <decl pos:start="31:53" pos:end="31:64"><type ref="prev" pos:start="31:5" pos:end="31:14"/><name pos:start="31:53" pos:end="31:64">idreg_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:30"><decl pos:start="33:5" pos:end="33:29"><type pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:12">unsigned</name> <name pos:start="33:14" pos:end="33:17">long</name></type> <name pos:start="33:19" pos:end="33:29">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:12"><decl pos:start="35:5" pos:end="35:11"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:19"><decl pos:start="37:5" pos:end="37:18"><type pos:start="37:5" pos:end="37:8"><name pos:start="37:5" pos:end="37:8">char</name></type> <name pos:start="37:10" pos:end="37:18"><name pos:start="37:10" pos:end="37:12">buf</name><index pos:start="37:13" pos:end="37:18">[<expr pos:start="37:14" pos:end="37:17"><literal type="number" pos:start="37:14" pos:end="37:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:33"><decl pos:start="39:5" pos:end="39:32"><type pos:start="39:5" pos:end="39:22"><name pos:start="39:5" pos:end="39:20">BlockDriverState</name> <modifier pos:start="39:22" pos:end="39:22">*</modifier></type><name pos:start="39:23" pos:end="39:32"><name pos:start="39:23" pos:end="39:24">fd</name><index pos:start="39:25" pos:end="39:32">[<expr pos:start="39:26" pos:end="39:31"><name pos:start="39:26" pos:end="39:31">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:20"><decl pos:start="41:5" pos:end="41:19"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:19">drive_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:17"><decl pos:start="43:5" pos:end="43:16"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:8">void</name> <modifier pos:start="43:10" pos:end="43:10">*</modifier></type><name pos:start="43:11" pos:end="43:16">fw_cfg</name></decl>;</decl_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:19">/* init CPUs */</comment>

    <if_stmt pos:start="49:5" pos:end="51:45"><if pos:start="49:5" pos:end="51:45">if <condition pos:start="49:8" pos:end="49:19">(<expr pos:start="49:9" pos:end="49:18"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:45"><block_content pos:start="51:9" pos:end="51:45">

        <expr_stmt pos:start="51:9" pos:end="51:45"><expr pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:17">cpu_model</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:44"><name pos:start="51:21" pos:end="51:25">hwdef</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:44">default_cpu_model</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="55:5" pos:end="87:5">for<control pos:start="55:8" pos:end="55:33">(<init pos:start="55:9" pos:end="55:14"><expr pos:start="55:9" pos:end="55:13"><name pos:start="55:9" pos:end="55:9">i</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <literal type="number" pos:start="55:13" pos:end="55:13">0</literal></expr>;</init> <condition pos:start="55:16" pos:end="55:28"><expr pos:start="55:16" pos:end="55:27"><name pos:start="55:16" pos:end="55:16">i</name> <operator pos:start="55:18" pos:end="55:18">&lt;</operator> <name pos:start="55:20" pos:end="55:27">smp_cpus</name></expr>;</condition> <incr pos:start="55:30" pos:end="55:32"><expr pos:start="55:30" pos:end="55:32"><name pos:start="55:30" pos:end="55:30">i</name><operator pos:start="55:31" pos:end="55:32">++</operator></expr></incr>)</control> <block pos:start="55:35" pos:end="87:5">{<block_content pos:start="57:9" pos:end="85:44">

        <expr_stmt pos:start="57:9" pos:end="57:34"><expr pos:start="57:9" pos:end="57:33"><name pos:start="57:9" pos:end="57:11">env</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:33"><name pos:start="57:15" pos:end="57:22">cpu_init</name><argument_list pos:start="57:23" pos:end="57:33">(<argument pos:start="57:24" pos:end="57:32"><expr pos:start="57:24" pos:end="57:32"><name pos:start="57:24" pos:end="57:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:17">(<expr pos:start="59:13" pos:end="59:16"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:16">env</name></expr>)</condition> <block pos:start="59:19" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:20">

            <expr_stmt pos:start="61:13" pos:end="61:75"><expr pos:start="61:13" pos:end="61:74"><call pos:start="61:13" pos:end="61:74"><name pos:start="61:13" pos:end="61:19">fprintf</name><argument_list pos:start="61:20" pos:end="61:74">(<argument pos:start="61:21" pos:end="61:26"><expr pos:start="61:21" pos:end="61:26"><name pos:start="61:21" pos:end="61:26">stderr</name></expr></argument>, <argument pos:start="61:29" pos:end="61:73"><expr pos:start="61:29" pos:end="61:73"><literal type="string" pos:start="61:29" pos:end="61:73">"qemu: Unable to find Sparc CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:20"><expr pos:start="63:13" pos:end="63:19"><call pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:16">exit</name><argument_list pos:start="63:17" pos:end="63:19">(<argument pos:start="63:18" pos:end="63:18"><expr pos:start="63:18" pos:end="63:18"><literal type="number" pos:start="63:18" pos:end="63:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:33"><expr pos:start="67:9" pos:end="67:32"><call pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:24">cpu_sparc_set_id</name><argument_list pos:start="67:25" pos:end="67:32">(<argument pos:start="67:26" pos:end="67:28"><expr pos:start="67:26" pos:end="67:28"><name pos:start="67:26" pos:end="67:28">env</name></expr></argument>, <argument pos:start="67:31" pos:end="67:31"><expr pos:start="67:31" pos:end="67:31"><name pos:start="67:31" pos:end="67:31">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:22"><expr pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:12">envs</name><index pos:start="69:13" pos:end="69:15">[<expr pos:start="69:14" pos:end="69:14"><name pos:start="69:14" pos:end="69:14">i</name></expr>]</index></name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:21">env</name></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="81:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:19">(<expr pos:start="71:13" pos:end="71:18"><name pos:start="71:13" pos:end="71:13">i</name> <operator pos:start="71:15" pos:end="71:16">==</operator> <literal type="number" pos:start="71:18" pos:end="71:18">0</literal></expr>)</condition> <block pos:start="71:21" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:53">

            <expr_stmt pos:start="73:13" pos:end="73:53"><expr pos:start="73:13" pos:end="73:52"><call pos:start="73:13" pos:end="73:52"><name pos:start="73:13" pos:end="73:31">qemu_register_reset</name><argument_list pos:start="73:32" pos:end="73:52">(<argument pos:start="73:33" pos:end="73:46"><expr pos:start="73:33" pos:end="73:46"><name pos:start="73:33" pos:end="73:46">main_cpu_reset</name></expr></argument>, <argument pos:start="73:49" pos:end="73:51"><expr pos:start="73:49" pos:end="73:51"><name pos:start="73:49" pos:end="73:51">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="75:11" pos:end="81:9">else <block pos:start="75:16" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:28">

            <expr_stmt pos:start="77:13" pos:end="77:58"><expr pos:start="77:13" pos:end="77:57"><call pos:start="77:13" pos:end="77:57"><name pos:start="77:13" pos:end="77:31">qemu_register_reset</name><argument_list pos:start="77:32" pos:end="77:57">(<argument pos:start="77:33" pos:end="77:51"><expr pos:start="77:33" pos:end="77:51"><name pos:start="77:33" pos:end="77:51">secondary_cpu_reset</name></expr></argument>, <argument pos:start="77:54" pos:end="77:56"><expr pos:start="77:54" pos:end="77:56"><name pos:start="77:54" pos:end="77:56">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:28"><expr pos:start="79:13" pos:end="79:27"><name pos:start="79:13" pos:end="79:23"><name pos:start="79:13" pos:end="79:15">env</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:23">halted</name></name> <operator pos:start="79:25" pos:end="79:25">=</operator> <literal type="number" pos:start="79:27" pos:end="79:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:73"><expr pos:start="83:9" pos:end="83:72"><name pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:16">cpu_irqs</name><index pos:start="83:17" pos:end="83:19">[<expr pos:start="83:18" pos:end="83:18"><name pos:start="83:18" pos:end="83:18">i</name></expr>]</index></name> <operator pos:start="83:21" pos:end="83:21">=</operator> <call pos:start="83:23" pos:end="83:72"><name pos:start="83:23" pos:end="83:40">qemu_allocate_irqs</name><argument_list pos:start="83:41" pos:end="83:72">(<argument pos:start="83:42" pos:end="83:52"><expr pos:start="83:42" pos:end="83:52"><name pos:start="83:42" pos:end="83:52">cpu_set_irq</name></expr></argument>, <argument pos:start="83:55" pos:end="83:61"><expr pos:start="83:55" pos:end="83:61"><name pos:start="83:55" pos:end="83:61"><name pos:start="83:55" pos:end="83:58">envs</name><index pos:start="83:59" pos:end="83:61">[<expr pos:start="83:60" pos:end="83:60"><name pos:start="83:60" pos:end="83:60">i</name></expr>]</index></name></expr></argument>, <argument pos:start="83:64" pos:end="83:71"><expr pos:start="83:64" pos:end="83:71"><name pos:start="83:64" pos:end="83:71">MAX_PILS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:44"><expr pos:start="85:9" pos:end="85:43"><name pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:11">env</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:22">prom_addr</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:43"><name pos:start="85:26" pos:end="85:30">hwdef</name><operator pos:start="85:31" pos:end="85:32">-&gt;</operator><name pos:start="85:33" pos:end="85:43">slavio_base</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="91:5" pos:end="93:76">for <control pos:start="91:9" pos:end="91:41">(<init pos:start="91:10" pos:end="91:22"><expr pos:start="91:10" pos:end="91:21"><name pos:start="91:10" pos:end="91:10">i</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <name pos:start="91:14" pos:end="91:21">smp_cpus</name></expr>;</init> <condition pos:start="91:24" pos:end="91:36"><expr pos:start="91:24" pos:end="91:35"><name pos:start="91:24" pos:end="91:24">i</name> <operator pos:start="91:26" pos:end="91:26">&lt;</operator> <name pos:start="91:28" pos:end="91:35">MAX_CPUS</name></expr>;</condition> <incr pos:start="91:38" pos:end="91:40"><expr pos:start="91:38" pos:end="91:40"><name pos:start="91:38" pos:end="91:38">i</name><operator pos:start="91:39" pos:end="91:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="93:9" pos:end="93:76"><block_content pos:start="93:9" pos:end="93:76">

        <expr_stmt pos:start="93:9" pos:end="93:76"><expr pos:start="93:9" pos:end="93:75"><name pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:16">cpu_irqs</name><index pos:start="93:17" pos:end="93:19">[<expr pos:start="93:18" pos:end="93:18"><name pos:start="93:18" pos:end="93:18">i</name></expr>]</index></name> <operator pos:start="93:21" pos:end="93:21">=</operator> <call pos:start="93:23" pos:end="93:75"><name pos:start="93:23" pos:end="93:40">qemu_allocate_irqs</name><argument_list pos:start="93:41" pos:end="93:75">(<argument pos:start="93:42" pos:end="93:58"><expr pos:start="93:42" pos:end="93:58"><name pos:start="93:42" pos:end="93:58">dummy_cpu_set_irq</name></expr></argument>, <argument pos:start="93:61" pos:end="93:64"><expr pos:start="93:61" pos:end="93:64"><name pos:start="93:61" pos:end="93:64">NULL</name></expr></argument>, <argument pos:start="93:67" pos:end="93:74"><expr pos:start="93:67" pos:end="93:74"><name pos:start="93:67" pos:end="93:74">MAX_PILS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>





    <comment type="block" pos:start="99:5" pos:end="99:22">/* allocate RAM */</comment>

    <if_stmt pos:start="101:5" pos:end="113:5"><if pos:start="101:5" pos:end="113:5">if <condition pos:start="101:8" pos:end="101:44">(<expr pos:start="101:9" pos:end="101:43"><operator pos:start="101:9" pos:end="101:9">(</operator><name pos:start="101:10" pos:end="101:17">uint64_t</name><operator pos:start="101:18" pos:end="101:18">)</operator><name pos:start="101:19" pos:end="101:26">RAM_size</name> <operator pos:start="101:28" pos:end="101:28">&gt;</operator> <name pos:start="101:30" pos:end="101:43"><name pos:start="101:30" pos:end="101:34">hwdef</name><operator pos:start="101:35" pos:end="101:36">-&gt;</operator><name pos:start="101:37" pos:end="101:43">max_mem</name></name></expr>)</condition> <block pos:start="101:46" pos:end="113:5">{<block_content pos:start="103:9" pos:end="111:16">

        <expr_stmt pos:start="103:9" pos:end="109:64"><expr pos:start="103:9" pos:end="109:63"><call pos:start="103:9" pos:end="109:63"><name pos:start="103:9" pos:end="103:15">fprintf</name><argument_list pos:start="103:16" pos:end="109:63">(<argument pos:start="103:17" pos:end="103:22"><expr pos:start="103:17" pos:end="103:22"><name pos:start="103:17" pos:end="103:22">stderr</name></expr></argument>,

                <argument pos:start="105:17" pos:end="105:74"><expr pos:start="105:17" pos:end="105:74"><literal type="string" pos:start="105:17" pos:end="105:74">"qemu: Too much memory for this machine: %d, maximum %d\n"</literal></expr></argument>,

                <argument pos:start="107:17" pos:end="107:56"><expr pos:start="107:17" pos:end="107:56"><operator pos:start="107:17" pos:end="107:17">(</operator><name pos:start="107:18" pos:end="107:25">unsigned</name> <name pos:start="107:27" pos:end="107:29">int</name><operator pos:start="107:30" pos:end="107:30">)</operator><operator pos:start="107:31" pos:end="107:31">(</operator><name pos:start="107:32" pos:end="107:39">RAM_size</name> <operator pos:start="107:41" pos:end="107:41">/</operator> <operator pos:start="107:43" pos:end="107:43">(</operator><literal type="number" pos:start="107:44" pos:end="107:47">1024</literal> <operator pos:start="107:49" pos:end="107:49">*</operator> <literal type="number" pos:start="107:51" pos:end="107:54">1024</literal><operator pos:start="107:55" pos:end="107:55">)</operator><operator pos:start="107:56" pos:end="107:56">)</operator></expr></argument>,

                <argument pos:start="109:17" pos:end="109:62"><expr pos:start="109:17" pos:end="109:62"><operator pos:start="109:17" pos:end="109:17">(</operator><name pos:start="109:18" pos:end="109:25">unsigned</name> <name pos:start="109:27" pos:end="109:29">int</name><operator pos:start="109:30" pos:end="109:30">)</operator><operator pos:start="109:31" pos:end="109:31">(</operator><name pos:start="109:32" pos:end="109:45"><name pos:start="109:32" pos:end="109:36">hwdef</name><operator pos:start="109:37" pos:end="109:38">-&gt;</operator><name pos:start="109:39" pos:end="109:45">max_mem</name></name> <operator pos:start="109:47" pos:end="109:47">/</operator> <operator pos:start="109:49" pos:end="109:49">(</operator><literal type="number" pos:start="109:50" pos:end="109:53">1024</literal> <operator pos:start="109:55" pos:end="109:55">*</operator> <literal type="number" pos:start="109:57" pos:end="109:60">1024</literal><operator pos:start="109:61" pos:end="109:61">)</operator><operator pos:start="109:62" pos:end="109:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:16"><expr pos:start="111:9" pos:end="111:15"><call pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:12">exit</name><argument_list pos:start="111:13" pos:end="111:15">(<argument pos:start="111:14" pos:end="111:14"><expr pos:start="111:14" pos:end="111:14"><literal type="number" pos:start="111:14" pos:end="111:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:42"><expr pos:start="115:5" pos:end="115:41"><name pos:start="115:5" pos:end="115:14">ram_offset</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <call pos:start="115:18" pos:end="115:41"><name pos:start="115:18" pos:end="115:31">qemu_ram_alloc</name><argument_list pos:start="115:32" pos:end="115:41">(<argument pos:start="115:33" pos:end="115:40"><expr pos:start="115:33" pos:end="115:40"><name pos:start="115:33" pos:end="115:40">RAM_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:58"><expr pos:start="117:5" pos:end="117:57"><call pos:start="117:5" pos:end="117:57"><name pos:start="117:5" pos:end="117:32">cpu_register_physical_memory</name><argument_list pos:start="117:33" pos:end="117:57">(<argument pos:start="117:34" pos:end="117:34"><expr pos:start="117:34" pos:end="117:34"><literal type="number" pos:start="117:34" pos:end="117:34">0</literal></expr></argument>, <argument pos:start="117:37" pos:end="117:44"><expr pos:start="117:37" pos:end="117:44"><name pos:start="117:37" pos:end="117:44">RAM_size</name></expr></argument>, <argument pos:start="117:47" pos:end="117:56"><expr pos:start="117:47" pos:end="117:56"><name pos:start="117:47" pos:end="117:56">ram_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:24">/* load boot prom */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:48"><expr pos:start="123:5" pos:end="123:47"><name pos:start="123:5" pos:end="123:15">prom_offset</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <call pos:start="123:19" pos:end="123:47"><name pos:start="123:19" pos:end="123:32">qemu_ram_alloc</name><argument_list pos:start="123:33" pos:end="123:47">(<argument pos:start="123:34" pos:end="123:46"><expr pos:start="123:34" pos:end="123:46"><name pos:start="123:34" pos:end="123:46">PROM_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="131:59"><expr pos:start="125:5" pos:end="131:58"><call pos:start="125:5" pos:end="131:58"><name pos:start="125:5" pos:end="125:32">cpu_register_physical_memory</name><argument_list pos:start="125:33" pos:end="131:58">(<argument pos:start="125:34" pos:end="125:51"><expr pos:start="125:34" pos:end="125:51"><name pos:start="125:34" pos:end="125:51"><name pos:start="125:34" pos:end="125:38">hwdef</name><operator pos:start="125:39" pos:end="125:40">-&gt;</operator><name pos:start="125:41" pos:end="125:51">slavio_base</name></name></expr></argument>,

                                 <argument pos:start="127:34" pos:end="129:49"><expr pos:start="127:34" pos:end="129:49"><operator pos:start="127:34" pos:end="127:34">(</operator><name pos:start="127:35" pos:end="127:47">PROM_SIZE_MAX</name> <operator pos:start="127:49" pos:end="127:49">+</operator> <name pos:start="127:51" pos:end="127:66">TARGET_PAGE_SIZE</name> <operator pos:start="127:68" pos:end="127:68">-</operator> <literal type="number" pos:start="127:70" pos:end="127:70">1</literal><operator pos:start="127:71" pos:end="127:71">)</operator> <operator pos:start="127:73" pos:end="127:73">&amp;</operator>

                                 <name pos:start="129:34" pos:end="129:49">TARGET_PAGE_MASK</name></expr></argument>,

                                 <argument pos:start="131:34" pos:end="131:57"><expr pos:start="131:34" pos:end="131:57"><name pos:start="131:34" pos:end="131:44">prom_offset</name> <operator pos:start="131:46" pos:end="131:46">|</operator> <name pos:start="131:48" pos:end="131:57">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="135:5" pos:end="137:34"><if pos:start="135:5" pos:end="137:34">if <condition pos:start="135:8" pos:end="135:26">(<expr pos:start="135:9" pos:end="135:25"><name pos:start="135:9" pos:end="135:17">bios_name</name> <operator pos:start="135:19" pos:end="135:20">==</operator> <name pos:start="135:22" pos:end="135:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:34"><block_content pos:start="137:9" pos:end="137:34">

        <expr_stmt pos:start="137:9" pos:end="137:34"><expr pos:start="137:9" pos:end="137:33"><name pos:start="137:9" pos:end="137:17">bios_name</name> <operator pos:start="137:19" pos:end="137:19">=</operator> <name pos:start="137:21" pos:end="137:33">PROM_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:61"><expr pos:start="139:5" pos:end="139:60"><call pos:start="139:5" pos:end="139:60"><name pos:start="139:5" pos:end="139:12">snprintf</name><argument_list pos:start="139:13" pos:end="139:60">(<argument pos:start="139:14" pos:end="139:16"><expr pos:start="139:14" pos:end="139:16"><name pos:start="139:14" pos:end="139:16">buf</name></expr></argument>, <argument pos:start="139:19" pos:end="139:29"><expr pos:start="139:19" pos:end="139:29"><sizeof pos:start="139:19" pos:end="139:29">sizeof<argument_list pos:start="139:25" pos:end="139:29">(<argument pos:start="139:26" pos:end="139:28"><expr pos:start="139:26" pos:end="139:28"><name pos:start="139:26" pos:end="139:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="139:32" pos:end="139:38"><expr pos:start="139:32" pos:end="139:38"><literal type="string" pos:start="139:32" pos:end="139:38">"%s/%s"</literal></expr></argument>, <argument pos:start="139:41" pos:end="139:48"><expr pos:start="139:41" pos:end="139:48"><name pos:start="139:41" pos:end="139:48">bios_dir</name></expr></argument>, <argument pos:start="139:51" pos:end="139:59"><expr pos:start="139:51" pos:end="139:59"><name pos:start="139:51" pos:end="139:59">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:75"><expr pos:start="141:5" pos:end="141:74"><name pos:start="141:5" pos:end="141:7">ret</name> <operator pos:start="141:9" pos:end="141:9">=</operator> <call pos:start="141:11" pos:end="141:74"><name pos:start="141:11" pos:end="141:18">load_elf</name><argument_list pos:start="141:19" pos:end="141:74">(<argument pos:start="141:20" pos:end="141:22"><expr pos:start="141:20" pos:end="141:22"><name pos:start="141:20" pos:end="141:22">buf</name></expr></argument>, <argument pos:start="141:25" pos:end="141:55"><expr pos:start="141:25" pos:end="141:55"><name pos:start="141:25" pos:end="141:42"><name pos:start="141:25" pos:end="141:29">hwdef</name><operator pos:start="141:30" pos:end="141:31">-&gt;</operator><name pos:start="141:32" pos:end="141:42">slavio_base</name></name> <operator pos:start="141:44" pos:end="141:44">-</operator> <name pos:start="141:46" pos:end="141:55">PROM_VADDR</name></expr></argument>, <argument pos:start="141:58" pos:end="141:61"><expr pos:start="141:58" pos:end="141:61"><name pos:start="141:58" pos:end="141:61">NULL</name></expr></argument>, <argument pos:start="141:64" pos:end="141:67"><expr pos:start="141:64" pos:end="141:67"><name pos:start="141:64" pos:end="141:67">NULL</name></expr></argument>, <argument pos:start="141:70" pos:end="141:73"><expr pos:start="141:70" pos:end="141:73"><name pos:start="141:70" pos:end="141:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="145:74"><if pos:start="143:5" pos:end="145:74">if <condition pos:start="143:8" pos:end="143:39">(<expr pos:start="143:9" pos:end="143:38"><name pos:start="143:9" pos:end="143:24"><name pos:start="143:9" pos:end="143:11">ret</name> <argument_list type="generic" pos:start="143:13" pos:end="143:24">&lt; <argument pos:start="143:15" pos:end="143:22"><expr pos:start="143:15" pos:end="143:22"><literal type="number" pos:start="143:15" pos:end="143:15">0</literal> <operator pos:start="143:17" pos:end="143:18">||</operator> <name pos:start="143:20" pos:end="143:22">ret</name></expr></argument> &gt;</argument_list></name> <name pos:start="143:26" pos:end="143:38">PROM_SIZE_MAX</name></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:74"><block_content pos:start="145:9" pos:end="145:74">

        <expr_stmt pos:start="145:9" pos:end="145:74"><expr pos:start="145:9" pos:end="145:73"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <call pos:start="145:15" pos:end="145:73"><name pos:start="145:15" pos:end="145:33">load_image_targphys</name><argument_list pos:start="145:34" pos:end="145:73">(<argument pos:start="145:35" pos:end="145:37"><expr pos:start="145:35" pos:end="145:37"><name pos:start="145:35" pos:end="145:37">buf</name></expr></argument>, <argument pos:start="145:40" pos:end="145:57"><expr pos:start="145:40" pos:end="145:57"><name pos:start="145:40" pos:end="145:57"><name pos:start="145:40" pos:end="145:44">hwdef</name><operator pos:start="145:45" pos:end="145:46">-&gt;</operator><name pos:start="145:47" pos:end="145:57">slavio_base</name></name></expr></argument>, <argument pos:start="145:60" pos:end="145:72"><expr pos:start="145:60" pos:end="145:72"><name pos:start="145:60" pos:end="145:72">PROM_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="147:5" pos:end="155:5"><if pos:start="147:5" pos:end="155:5">if <condition pos:start="147:8" pos:end="147:39">(<expr pos:start="147:9" pos:end="147:38"><name pos:start="147:9" pos:end="147:24"><name pos:start="147:9" pos:end="147:11">ret</name> <argument_list type="generic" pos:start="147:13" pos:end="147:24">&lt; <argument pos:start="147:15" pos:end="147:22"><expr pos:start="147:15" pos:end="147:22"><literal type="number" pos:start="147:15" pos:end="147:15">0</literal> <operator pos:start="147:17" pos:end="147:18">||</operator> <name pos:start="147:20" pos:end="147:22">ret</name></expr></argument> &gt;</argument_list></name> <name pos:start="147:26" pos:end="147:38">PROM_SIZE_MAX</name></expr>)</condition> <block pos:start="147:41" pos:end="155:5">{<block_content pos:start="149:9" pos:end="153:16">

        <expr_stmt pos:start="149:9" pos:end="151:21"><expr pos:start="149:9" pos:end="151:20"><call pos:start="149:9" pos:end="151:20"><name pos:start="149:9" pos:end="149:15">fprintf</name><argument_list pos:start="149:16" pos:end="151:20">(<argument pos:start="149:17" pos:end="149:22"><expr pos:start="149:17" pos:end="149:22"><name pos:start="149:17" pos:end="149:22">stderr</name></expr></argument>, <argument pos:start="149:25" pos:end="149:58"><expr pos:start="149:25" pos:end="149:58"><literal type="string" pos:start="149:25" pos:end="149:58">"qemu: could not load prom '%s'\n"</literal></expr></argument>,

                <argument pos:start="151:17" pos:end="151:19"><expr pos:start="151:17" pos:end="151:19"><name pos:start="151:17" pos:end="151:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:16"><expr pos:start="153:9" pos:end="153:15"><call pos:start="153:9" pos:end="153:15"><name pos:start="153:9" pos:end="153:12">exit</name><argument_list pos:start="153:13" pos:end="153:15">(<argument pos:start="153:14" pos:end="153:14"><expr pos:start="153:14" pos:end="153:14"><literal type="number" pos:start="153:14" pos:end="153:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:24">/* set up devices */</comment>

    <expr_stmt pos:start="161:5" pos:end="171:57"><expr pos:start="161:5" pos:end="171:56"><name pos:start="161:5" pos:end="161:17">slavio_intctl</name> <operator pos:start="161:19" pos:end="161:19">=</operator> <call pos:start="161:21" pos:end="171:56"><name pos:start="161:21" pos:end="161:38">slavio_intctl_init</name><argument_list pos:start="161:39" pos:end="171:56">(<argument pos:start="161:40" pos:end="161:57"><expr pos:start="161:40" pos:end="161:57"><name pos:start="161:40" pos:end="161:57"><name pos:start="161:40" pos:end="161:44">hwdef</name><operator pos:start="161:45" pos:end="161:46">-&gt;</operator><name pos:start="161:47" pos:end="161:57">intctl_base</name></name></expr></argument>,

                                       <argument pos:start="163:40" pos:end="163:70"><expr pos:start="163:40" pos:end="163:70"><name pos:start="163:40" pos:end="163:57"><name pos:start="163:40" pos:end="163:44">hwdef</name><operator pos:start="163:45" pos:end="163:46">-&gt;</operator><name pos:start="163:47" pos:end="163:57">intctl_base</name></name> <operator pos:start="163:59" pos:end="163:59">+</operator> <literal type="number" pos:start="163:61" pos:end="163:70">0x10000ULL</literal></expr></argument>,

                                       <argument pos:start="165:40" pos:end="165:65"><expr pos:start="165:40" pos:end="165:65"><operator pos:start="165:40" pos:end="165:40">&amp;</operator><name pos:start="165:41" pos:end="165:65"><name pos:start="165:41" pos:end="165:45">hwdef</name><operator pos:start="165:46" pos:end="165:47">-&gt;</operator><name pos:start="165:48" pos:end="165:62">intbit_to_level</name><index pos:start="165:63" pos:end="165:65">[<expr pos:start="165:64" pos:end="165:64"><literal type="number" pos:start="165:64" pos:end="165:64">0</literal></expr>]</index></name></expr></argument>,

                                       <argument pos:start="167:40" pos:end="167:50"><expr pos:start="167:40" pos:end="167:50"><operator pos:start="167:40" pos:end="167:40">&amp;</operator><name pos:start="167:41" pos:end="167:50">slavio_irq</name></expr></argument>, <argument pos:start="167:53" pos:end="167:67"><expr pos:start="167:53" pos:end="167:67"><operator pos:start="167:53" pos:end="167:53">&amp;</operator><name pos:start="167:54" pos:end="167:67">slavio_cpu_irq</name></expr></argument>,

                                       <argument pos:start="169:40" pos:end="169:47"><expr pos:start="169:40" pos:end="169:47"><name pos:start="169:40" pos:end="169:47">cpu_irqs</name></expr></argument>,

                                       <argument pos:start="171:40" pos:end="171:55"><expr pos:start="171:40" pos:end="171:55"><name pos:start="171:40" pos:end="171:55"><name pos:start="171:40" pos:end="171:44">hwdef</name><operator pos:start="171:45" pos:end="171:46">-&gt;</operator><name pos:start="171:47" pos:end="171:55">clock_irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="175:5" pos:end="191:5"><if pos:start="175:5" pos:end="191:5">if <condition pos:start="175:8" pos:end="175:26">(<expr pos:start="175:9" pos:end="175:25"><name pos:start="175:9" pos:end="175:25"><name pos:start="175:9" pos:end="175:13">hwdef</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:25">idreg_base</name></name></expr>)</condition> <block pos:start="175:28" pos:end="191:5">{<block_content pos:start="177:9" pos:end="189:58">

        <decl_stmt pos:start="177:9" pos:end="177:71"><decl pos:start="177:9" pos:end="177:70"><type pos:start="177:9" pos:end="177:28"><specifier pos:start="177:9" pos:end="177:14">static</specifier> <specifier pos:start="177:16" pos:end="177:20">const</specifier> <name pos:start="177:22" pos:end="177:28">uint8_t</name></type> <name pos:start="177:30" pos:end="177:41"><name pos:start="177:30" pos:end="177:39">idreg_data</name><index pos:start="177:40" pos:end="177:41">[]</index></name> <init pos:start="177:43" pos:end="177:70">= <expr pos:start="177:45" pos:end="177:70"><block pos:start="177:45" pos:end="177:70">{ <expr pos:start="177:47" pos:end="177:50"><literal type="number" pos:start="177:47" pos:end="177:50">0xfe</literal></expr>, <expr pos:start="177:53" pos:end="177:56"><literal type="number" pos:start="177:53" pos:end="177:56">0x81</literal></expr>, <expr pos:start="177:59" pos:end="177:62"><literal type="number" pos:start="177:59" pos:end="177:62">0x01</literal></expr>, <expr pos:start="177:65" pos:end="177:68"><literal type="number" pos:start="177:65" pos:end="177:68">0x03</literal></expr> }</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:58"><expr pos:start="181:9" pos:end="181:57"><name pos:start="181:9" pos:end="181:20">idreg_offset</name> <operator pos:start="181:22" pos:end="181:22">=</operator> <call pos:start="181:24" pos:end="181:57"><name pos:start="181:24" pos:end="181:37">qemu_ram_alloc</name><argument_list pos:start="181:38" pos:end="181:57">(<argument pos:start="181:39" pos:end="181:56"><expr pos:start="181:39" pos:end="181:56"><sizeof pos:start="181:39" pos:end="181:56">sizeof<argument_list pos:start="181:45" pos:end="181:56">(<argument pos:start="181:46" pos:end="181:55"><expr pos:start="181:46" pos:end="181:55"><name pos:start="181:46" pos:end="181:55">idreg_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="185:64"><expr pos:start="183:9" pos:end="185:63"><call pos:start="183:9" pos:end="185:63"><name pos:start="183:9" pos:end="183:36">cpu_register_physical_memory</name><argument_list pos:start="183:37" pos:end="185:63">(<argument pos:start="183:38" pos:end="183:54"><expr pos:start="183:38" pos:end="183:54"><name pos:start="183:38" pos:end="183:54"><name pos:start="183:38" pos:end="183:42">hwdef</name><operator pos:start="183:43" pos:end="183:44">-&gt;</operator><name pos:start="183:45" pos:end="183:54">idreg_base</name></name></expr></argument>, <argument pos:start="183:57" pos:end="183:74"><expr pos:start="183:57" pos:end="183:74"><sizeof pos:start="183:57" pos:end="183:74">sizeof<argument_list pos:start="183:63" pos:end="183:74">(<argument pos:start="183:64" pos:end="183:73"><expr pos:start="183:64" pos:end="183:73"><name pos:start="183:64" pos:end="183:73">idreg_data</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                     <argument pos:start="185:38" pos:end="185:62"><expr pos:start="185:38" pos:end="185:62"><name pos:start="185:38" pos:end="185:49">idreg_offset</name> <operator pos:start="185:51" pos:end="185:51">|</operator> <name pos:start="185:53" pos:end="185:62">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="189:58"><expr pos:start="187:9" pos:end="189:57"><call pos:start="187:9" pos:end="189:57"><name pos:start="187:9" pos:end="187:37">cpu_physical_memory_write_rom</name><argument_list pos:start="187:38" pos:end="189:57">(<argument pos:start="187:39" pos:end="187:55"><expr pos:start="187:39" pos:end="187:55"><name pos:start="187:39" pos:end="187:55"><name pos:start="187:39" pos:end="187:43">hwdef</name><operator pos:start="187:44" pos:end="187:45">-&gt;</operator><name pos:start="187:46" pos:end="187:55">idreg_base</name></name></expr></argument>, <argument pos:start="187:58" pos:end="187:67"><expr pos:start="187:58" pos:end="187:67"><name pos:start="187:58" pos:end="187:67">idreg_data</name></expr></argument>,

                                      <argument pos:start="189:39" pos:end="189:56"><expr pos:start="189:39" pos:end="189:56"><sizeof pos:start="189:39" pos:end="189:56">sizeof<argument_list pos:start="189:45" pos:end="189:56">(<argument pos:start="189:46" pos:end="189:55"><expr pos:start="189:46" pos:end="189:55"><name pos:start="189:46" pos:end="189:55">idreg_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="195:5" pos:end="197:50"><expr pos:start="195:5" pos:end="197:49"><name pos:start="195:5" pos:end="195:9">iommu</name> <operator pos:start="195:11" pos:end="195:11">=</operator> <call pos:start="195:13" pos:end="197:49"><name pos:start="195:13" pos:end="195:22">iommu_init</name><argument_list pos:start="195:23" pos:end="197:49">(<argument pos:start="195:24" pos:end="195:40"><expr pos:start="195:24" pos:end="195:40"><name pos:start="195:24" pos:end="195:40"><name pos:start="195:24" pos:end="195:28">hwdef</name><operator pos:start="195:29" pos:end="195:30">-&gt;</operator><name pos:start="195:31" pos:end="195:40">iommu_base</name></name></expr></argument>, <argument pos:start="195:43" pos:end="195:62"><expr pos:start="195:43" pos:end="195:62"><name pos:start="195:43" pos:end="195:62"><name pos:start="195:43" pos:end="195:47">hwdef</name><operator pos:start="195:48" pos:end="195:49">-&gt;</operator><name pos:start="195:50" pos:end="195:62">iommu_version</name></name></expr></argument>,

                       <argument pos:start="197:24" pos:end="197:48"><expr pos:start="197:24" pos:end="197:48"><name pos:start="197:24" pos:end="197:48"><name pos:start="197:24" pos:end="197:33">slavio_irq</name><index pos:start="197:34" pos:end="197:48">[<expr pos:start="197:35" pos:end="197:47"><name pos:start="197:35" pos:end="197:47"><name pos:start="197:35" pos:end="197:39">hwdef</name><operator pos:start="197:40" pos:end="197:41">-&gt;</operator><name pos:start="197:42" pos:end="197:47">me_irq</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="201:5" pos:end="203:62"><expr pos:start="201:5" pos:end="203:61"><name pos:start="201:5" pos:end="201:10">espdma</name> <operator pos:start="201:12" pos:end="201:12">=</operator> <call pos:start="201:14" pos:end="203:61"><name pos:start="201:14" pos:end="201:29">sparc32_dma_init</name><argument_list pos:start="201:30" pos:end="203:61">(<argument pos:start="201:31" pos:end="201:45"><expr pos:start="201:31" pos:end="201:45"><name pos:start="201:31" pos:end="201:45"><name pos:start="201:31" pos:end="201:35">hwdef</name><operator pos:start="201:36" pos:end="201:37">-&gt;</operator><name pos:start="201:38" pos:end="201:45">dma_base</name></name></expr></argument>, <argument pos:start="201:48" pos:end="201:73"><expr pos:start="201:48" pos:end="201:73"><name pos:start="201:48" pos:end="201:73"><name pos:start="201:48" pos:end="201:57">slavio_irq</name><index pos:start="201:58" pos:end="201:73">[<expr pos:start="201:59" pos:end="201:72"><name pos:start="201:59" pos:end="201:72"><name pos:start="201:59" pos:end="201:63">hwdef</name><operator pos:start="201:64" pos:end="201:65">-&gt;</operator><name pos:start="201:66" pos:end="201:72">esp_irq</name></name></expr>]</index></name></expr></argument>,

                              <argument pos:start="203:31" pos:end="203:35"><expr pos:start="203:31" pos:end="203:35"><name pos:start="203:31" pos:end="203:35">iommu</name></expr></argument>, <argument pos:start="203:38" pos:end="203:48"><expr pos:start="203:38" pos:end="203:48"><operator pos:start="203:38" pos:end="203:38">&amp;</operator><name pos:start="203:39" pos:end="203:48">espdma_irq</name></expr></argument>, <argument pos:start="203:51" pos:end="203:60"><expr pos:start="203:51" pos:end="203:60"><operator pos:start="203:51" pos:end="203:51">&amp;</operator><name pos:start="203:52" pos:end="203:60">esp_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="207:5" pos:end="211:40"><expr pos:start="207:5" pos:end="211:39"><name pos:start="207:5" pos:end="207:9">ledma</name> <operator pos:start="207:11" pos:end="207:11">=</operator> <call pos:start="207:13" pos:end="211:39"><name pos:start="207:13" pos:end="207:28">sparc32_dma_init</name><argument_list pos:start="207:29" pos:end="211:39">(<argument pos:start="207:30" pos:end="207:52"><expr pos:start="207:30" pos:end="207:52"><name pos:start="207:30" pos:end="207:44"><name pos:start="207:30" pos:end="207:34">hwdef</name><operator pos:start="207:35" pos:end="207:36">-&gt;</operator><name pos:start="207:37" pos:end="207:44">dma_base</name></name> <operator pos:start="207:46" pos:end="207:46">+</operator> <literal type="number" pos:start="207:48" pos:end="207:52">16ULL</literal></expr></argument>,

                             <argument pos:start="209:30" pos:end="209:54"><expr pos:start="209:30" pos:end="209:54"><name pos:start="209:30" pos:end="209:54"><name pos:start="209:30" pos:end="209:39">slavio_irq</name><index pos:start="209:40" pos:end="209:54">[<expr pos:start="209:41" pos:end="209:53"><name pos:start="209:41" pos:end="209:53"><name pos:start="209:41" pos:end="209:45">hwdef</name><operator pos:start="209:46" pos:end="209:47">-&gt;</operator><name pos:start="209:48" pos:end="209:53">le_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="209:57" pos:end="209:61"><expr pos:start="209:57" pos:end="209:61"><name pos:start="209:57" pos:end="209:61">iommu</name></expr></argument>, <argument pos:start="209:64" pos:end="209:73"><expr pos:start="209:64" pos:end="209:73"><operator pos:start="209:64" pos:end="209:64">&amp;</operator><name pos:start="209:65" pos:end="209:73">ledma_irq</name></expr></argument>,

                             <argument pos:start="211:30" pos:end="211:38"><expr pos:start="211:30" pos:end="211:38"><operator pos:start="211:30" pos:end="211:30">&amp;</operator><name pos:start="211:31" pos:end="211:38">le_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="215:5" pos:end="221:5"><if pos:start="215:5" pos:end="221:5">if <condition pos:start="215:8" pos:end="215:50">(<expr pos:start="215:9" pos:end="215:49"><name pos:start="215:9" pos:end="215:21">graphic_depth</name> <operator pos:start="215:23" pos:end="215:24">!=</operator> <literal type="number" pos:start="215:26" pos:end="215:26">8</literal> <operator pos:start="215:28" pos:end="215:29">&amp;&amp;</operator> <name pos:start="215:31" pos:end="215:43">graphic_depth</name> <operator pos:start="215:45" pos:end="215:46">!=</operator> <literal type="number" pos:start="215:48" pos:end="215:49">24</literal></expr>)</condition> <block pos:start="215:52" pos:end="221:5">{<block_content pos:start="217:9" pos:end="219:17">

        <expr_stmt pos:start="217:9" pos:end="217:72"><expr pos:start="217:9" pos:end="217:71"><call pos:start="217:9" pos:end="217:71"><name pos:start="217:9" pos:end="217:15">fprintf</name><argument_list pos:start="217:16" pos:end="217:71">(<argument pos:start="217:17" pos:end="217:22"><expr pos:start="217:17" pos:end="217:22"><name pos:start="217:17" pos:end="217:22">stderr</name></expr></argument>, <argument pos:start="217:25" pos:end="217:55"><expr pos:start="217:25" pos:end="217:55"><literal type="string" pos:start="217:25" pos:end="217:55">"qemu: Unsupported depth: %d\n"</literal></expr></argument>, <argument pos:start="217:58" pos:end="217:70"><expr pos:start="217:58" pos:end="217:70"><name pos:start="217:58" pos:end="217:70">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:17"><expr pos:start="219:9" pos:end="219:16"><call pos:start="219:9" pos:end="219:16"><name pos:start="219:9" pos:end="219:12">exit</name> <argument_list pos:start="219:14" pos:end="219:16">(<argument pos:start="219:15" pos:end="219:15"><expr pos:start="219:15" pos:end="219:15"><literal type="number" pos:start="219:15" pos:end="219:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:50"><expr pos:start="223:5" pos:end="223:49"><name pos:start="223:5" pos:end="223:14">tcx_offset</name> <operator pos:start="223:16" pos:end="223:16">=</operator> <call pos:start="223:18" pos:end="223:49"><name pos:start="223:18" pos:end="223:31">qemu_ram_alloc</name><argument_list pos:start="223:32" pos:end="223:49">(<argument pos:start="223:33" pos:end="223:48"><expr pos:start="223:33" pos:end="223:48"><name pos:start="223:33" pos:end="223:48"><name pos:start="223:33" pos:end="223:37">hwdef</name><operator pos:start="223:38" pos:end="223:39">-&gt;</operator><name pos:start="223:40" pos:end="223:48">vram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="227:77"><expr pos:start="225:5" pos:end="227:76"><call pos:start="225:5" pos:end="227:76"><name pos:start="225:5" pos:end="225:12">tcx_init</name><argument_list pos:start="225:13" pos:end="227:76">(<argument pos:start="225:14" pos:end="225:15"><expr pos:start="225:14" pos:end="225:15"><name pos:start="225:14" pos:end="225:15">ds</name></expr></argument>, <argument pos:start="225:18" pos:end="225:32"><expr pos:start="225:18" pos:end="225:32"><name pos:start="225:18" pos:end="225:32"><name pos:start="225:18" pos:end="225:22">hwdef</name><operator pos:start="225:23" pos:end="225:24">-&gt;</operator><name pos:start="225:25" pos:end="225:32">tcx_base</name></name></expr></argument>, <argument pos:start="225:35" pos:end="225:60"><expr pos:start="225:35" pos:end="225:60"><name pos:start="225:35" pos:end="225:47">phys_ram_base</name> <operator pos:start="225:49" pos:end="225:49">+</operator> <name pos:start="225:51" pos:end="225:60">tcx_offset</name></expr></argument>, <argument pos:start="225:63" pos:end="225:72"><expr pos:start="225:63" pos:end="225:72"><name pos:start="225:63" pos:end="225:72">tcx_offset</name></expr></argument>,

             <argument pos:start="227:14" pos:end="227:29"><expr pos:start="227:14" pos:end="227:29"><name pos:start="227:14" pos:end="227:29"><name pos:start="227:14" pos:end="227:18">hwdef</name><operator pos:start="227:19" pos:end="227:20">-&gt;</operator><name pos:start="227:21" pos:end="227:29">vram_size</name></name></expr></argument>, <argument pos:start="227:32" pos:end="227:44"><expr pos:start="227:32" pos:end="227:44"><name pos:start="227:32" pos:end="227:44">graphic_width</name></expr></argument>, <argument pos:start="227:47" pos:end="227:60"><expr pos:start="227:47" pos:end="227:60"><name pos:start="227:47" pos:end="227:60">graphic_height</name></expr></argument>, <argument pos:start="227:63" pos:end="227:75"><expr pos:start="227:63" pos:end="227:75"><name pos:start="227:63" pos:end="227:75">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="231:5" pos:end="233:36"><if pos:start="231:5" pos:end="233:36">if <condition pos:start="231:8" pos:end="231:34">(<expr pos:start="231:9" pos:end="231:33"><name pos:start="231:9" pos:end="231:19"><name pos:start="231:9" pos:end="231:16">nd_table</name><index pos:start="231:17" pos:end="231:19">[<expr pos:start="231:18" pos:end="231:18"><literal type="number" pos:start="231:18" pos:end="231:18">0</literal></expr>]</index></name><operator pos:start="231:20" pos:end="231:20">.</operator><name pos:start="231:21" pos:end="231:25">model</name> <operator pos:start="231:27" pos:end="231:28">==</operator> <name pos:start="231:30" pos:end="231:33">NULL</name></expr>)</condition><block type="pseudo" pos:start="233:9" pos:end="233:36"><block_content pos:start="233:9" pos:end="233:36">

        <expr_stmt pos:start="233:9" pos:end="233:36"><expr pos:start="233:9" pos:end="233:35"><name pos:start="233:9" pos:end="233:19"><name pos:start="233:9" pos:end="233:16">nd_table</name><index pos:start="233:17" pos:end="233:19">[<expr pos:start="233:18" pos:end="233:18"><literal type="number" pos:start="233:18" pos:end="233:18">0</literal></expr>]</index></name><operator pos:start="233:20" pos:end="233:20">.</operator><name pos:start="233:21" pos:end="233:25">model</name> <operator pos:start="233:27" pos:end="233:27">=</operator> <literal type="string" pos:start="233:29" pos:end="233:35">"lance"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="235:5" pos:end="251:5"><if pos:start="235:5" pos:end="239:5">if <condition pos:start="235:8" pos:end="235:48">(<expr pos:start="235:9" pos:end="235:47"><call pos:start="235:9" pos:end="235:42"><name pos:start="235:9" pos:end="235:14">strcmp</name><argument_list pos:start="235:15" pos:end="235:42">(<argument pos:start="235:16" pos:end="235:32"><expr pos:start="235:16" pos:end="235:32"><name pos:start="235:16" pos:end="235:26"><name pos:start="235:16" pos:end="235:23">nd_table</name><index pos:start="235:24" pos:end="235:26">[<expr pos:start="235:25" pos:end="235:25"><literal type="number" pos:start="235:25" pos:end="235:25">0</literal></expr>]</index></name><operator pos:start="235:27" pos:end="235:27">.</operator><name pos:start="235:28" pos:end="235:32">model</name></expr></argument>, <argument pos:start="235:35" pos:end="235:41"><expr pos:start="235:35" pos:end="235:41"><literal type="string" pos:start="235:35" pos:end="235:41">"lance"</literal></expr></argument>)</argument_list></call> <operator pos:start="235:44" pos:end="235:45">==</operator> <literal type="number" pos:start="235:47" pos:end="235:47">0</literal></expr>)</condition> <block pos:start="235:50" pos:end="239:5">{<block_content pos:start="237:9" pos:end="237:78">

        <expr_stmt pos:start="237:9" pos:end="237:78"><expr pos:start="237:9" pos:end="237:77"><call pos:start="237:9" pos:end="237:77"><name pos:start="237:9" pos:end="237:18">lance_init</name><argument_list pos:start="237:19" pos:end="237:77">(<argument pos:start="237:20" pos:end="237:31"><expr pos:start="237:20" pos:end="237:31"><operator pos:start="237:20" pos:end="237:20">&amp;</operator><name pos:start="237:21" pos:end="237:31"><name pos:start="237:21" pos:end="237:28">nd_table</name><index pos:start="237:29" pos:end="237:31">[<expr pos:start="237:30" pos:end="237:30"><literal type="number" pos:start="237:30" pos:end="237:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="237:34" pos:end="237:47"><expr pos:start="237:34" pos:end="237:47"><name pos:start="237:34" pos:end="237:47"><name pos:start="237:34" pos:end="237:38">hwdef</name><operator pos:start="237:39" pos:end="237:40">-&gt;</operator><name pos:start="237:41" pos:end="237:47">le_base</name></name></expr></argument>, <argument pos:start="237:50" pos:end="237:54"><expr pos:start="237:50" pos:end="237:54"><name pos:start="237:50" pos:end="237:54">ledma</name></expr></argument>, <argument pos:start="237:57" pos:end="237:66"><expr pos:start="237:57" pos:end="237:66"><operator pos:start="237:57" pos:end="237:57">*</operator><name pos:start="237:58" pos:end="237:66">ledma_irq</name></expr></argument>, <argument pos:start="237:69" pos:end="237:76"><expr pos:start="237:69" pos:end="237:76"><name pos:start="237:69" pos:end="237:76">le_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="239:7" pos:end="245:5">else if <condition pos:start="239:15" pos:end="239:51">(<expr pos:start="239:16" pos:end="239:50"><call pos:start="239:16" pos:end="239:45"><name pos:start="239:16" pos:end="239:21">strcmp</name><argument_list pos:start="239:22" pos:end="239:45">(<argument pos:start="239:23" pos:end="239:39"><expr pos:start="239:23" pos:end="239:39"><name pos:start="239:23" pos:end="239:33"><name pos:start="239:23" pos:end="239:30">nd_table</name><index pos:start="239:31" pos:end="239:33">[<expr pos:start="239:32" pos:end="239:32"><literal type="number" pos:start="239:32" pos:end="239:32">0</literal></expr>]</index></name><operator pos:start="239:34" pos:end="239:34">.</operator><name pos:start="239:35" pos:end="239:39">model</name></expr></argument>, <argument pos:start="239:42" pos:end="239:44"><expr pos:start="239:42" pos:end="239:44"><literal type="string" pos:start="239:42" pos:end="239:44">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="239:47" pos:end="239:48">==</operator> <literal type="number" pos:start="239:50" pos:end="239:50">0</literal></expr>)</condition> <block pos:start="239:53" pos:end="245:5">{<block_content pos:start="241:9" pos:end="243:17">

        <expr_stmt pos:start="241:9" pos:end="241:57"><expr pos:start="241:9" pos:end="241:56"><call pos:start="241:9" pos:end="241:56"><name pos:start="241:9" pos:end="241:15">fprintf</name><argument_list pos:start="241:16" pos:end="241:56">(<argument pos:start="241:17" pos:end="241:22"><expr pos:start="241:17" pos:end="241:22"><name pos:start="241:17" pos:end="241:22">stderr</name></expr></argument>, <argument pos:start="241:25" pos:end="241:55"><expr pos:start="241:25" pos:end="241:55"><literal type="string" pos:start="241:25" pos:end="241:55">"qemu: Supported NICs: lance\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:17"><expr pos:start="243:9" pos:end="243:16"><call pos:start="243:9" pos:end="243:16"><name pos:start="243:9" pos:end="243:12">exit</name> <argument_list pos:start="243:14" pos:end="243:16">(<argument pos:start="243:15" pos:end="243:15"><expr pos:start="243:15" pos:end="243:15"><literal type="number" pos:start="243:15" pos:end="243:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="245:7" pos:end="251:5">else <block pos:start="245:12" pos:end="251:5">{<block_content pos:start="247:9" pos:end="249:17">

        <expr_stmt pos:start="247:9" pos:end="247:74"><expr pos:start="247:9" pos:end="247:73"><call pos:start="247:9" pos:end="247:73"><name pos:start="247:9" pos:end="247:15">fprintf</name><argument_list pos:start="247:16" pos:end="247:73">(<argument pos:start="247:17" pos:end="247:22"><expr pos:start="247:17" pos:end="247:22"><name pos:start="247:17" pos:end="247:22">stderr</name></expr></argument>, <argument pos:start="247:25" pos:end="247:53"><expr pos:start="247:25" pos:end="247:53"><literal type="string" pos:start="247:25" pos:end="247:53">"qemu: Unsupported NIC: %s\n"</literal></expr></argument>, <argument pos:start="247:56" pos:end="247:72"><expr pos:start="247:56" pos:end="247:72"><name pos:start="247:56" pos:end="247:66"><name pos:start="247:56" pos:end="247:63">nd_table</name><index pos:start="247:64" pos:end="247:66">[<expr pos:start="247:65" pos:end="247:65"><literal type="number" pos:start="247:65" pos:end="247:65">0</literal></expr>]</index></name><operator pos:start="247:67" pos:end="247:67">.</operator><name pos:start="247:68" pos:end="247:72">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:17"><expr pos:start="249:9" pos:end="249:16"><call pos:start="249:9" pos:end="249:16"><name pos:start="249:9" pos:end="249:12">exit</name> <argument_list pos:start="249:14" pos:end="249:16">(<argument pos:start="249:15" pos:end="249:15"><expr pos:start="249:15" pos:end="249:15"><literal type="number" pos:start="249:15" pos:end="249:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="255:5" pos:end="257:46"><expr pos:start="255:5" pos:end="257:45"><name pos:start="255:5" pos:end="255:9">nvram</name> <operator pos:start="255:11" pos:end="255:11">=</operator> <call pos:start="255:13" pos:end="257:45"><name pos:start="255:13" pos:end="255:23">m48t59_init</name><argument_list pos:start="255:24" pos:end="257:45">(<argument pos:start="255:25" pos:end="255:37"><expr pos:start="255:25" pos:end="255:37"><name pos:start="255:25" pos:end="255:37"><name pos:start="255:25" pos:end="255:34">slavio_irq</name><index pos:start="255:35" pos:end="255:37">[<expr pos:start="255:36" pos:end="255:36"><literal type="number" pos:start="255:36" pos:end="255:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="255:40" pos:end="255:56"><expr pos:start="255:40" pos:end="255:56"><name pos:start="255:40" pos:end="255:56"><name pos:start="255:40" pos:end="255:44">hwdef</name><operator pos:start="255:45" pos:end="255:46">-&gt;</operator><name pos:start="255:47" pos:end="255:56">nvram_base</name></name></expr></argument>, <argument pos:start="255:59" pos:end="255:59"><expr pos:start="255:59" pos:end="255:59"><literal type="number" pos:start="255:59" pos:end="255:59">0</literal></expr></argument>,

                        <argument pos:start="257:25" pos:end="257:41"><expr pos:start="257:25" pos:end="257:41"><name pos:start="257:25" pos:end="257:41"><name pos:start="257:25" pos:end="257:29">hwdef</name><operator pos:start="257:30" pos:end="257:31">-&gt;</operator><name pos:start="257:32" pos:end="257:41">nvram_size</name></name></expr></argument>, <argument pos:start="257:44" pos:end="257:44"><expr pos:start="257:44" pos:end="257:44"><literal type="number" pos:start="257:44" pos:end="257:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="261:5" pos:end="263:52"><expr pos:start="261:5" pos:end="263:51"><call pos:start="261:5" pos:end="263:51"><name pos:start="261:5" pos:end="261:25">slavio_timer_init_all</name><argument_list pos:start="261:26" pos:end="263:51">(<argument pos:start="261:27" pos:end="261:45"><expr pos:start="261:27" pos:end="261:45"><name pos:start="261:27" pos:end="261:45"><name pos:start="261:27" pos:end="261:31">hwdef</name><operator pos:start="261:32" pos:end="261:33">-&gt;</operator><name pos:start="261:34" pos:end="261:45">counter_base</name></name></expr></argument>, <argument pos:start="261:48" pos:end="261:76"><expr pos:start="261:48" pos:end="261:76"><name pos:start="261:48" pos:end="261:76"><name pos:start="261:48" pos:end="261:57">slavio_irq</name><index pos:start="261:58" pos:end="261:76">[<expr pos:start="261:59" pos:end="261:75"><name pos:start="261:59" pos:end="261:75"><name pos:start="261:59" pos:end="261:63">hwdef</name><operator pos:start="261:64" pos:end="261:65">-&gt;</operator><name pos:start="261:66" pos:end="261:75">clock1_irq</name></name></expr>]</index></name></expr></argument>,

                          <argument pos:start="263:27" pos:end="263:40"><expr pos:start="263:27" pos:end="263:40"><name pos:start="263:27" pos:end="263:40">slavio_cpu_irq</name></expr></argument>, <argument pos:start="263:43" pos:end="263:50"><expr pos:start="263:43" pos:end="263:50"><name pos:start="263:43" pos:end="263:50">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="267:5" pos:end="269:56"><expr pos:start="267:5" pos:end="269:55"><call pos:start="267:5" pos:end="269:55"><name pos:start="267:5" pos:end="267:29">slavio_serial_ms_kbd_init</name><argument_list pos:start="267:30" pos:end="269:55">(<argument pos:start="267:31" pos:end="267:47"><expr pos:start="267:31" pos:end="267:47"><name pos:start="267:31" pos:end="267:47"><name pos:start="267:31" pos:end="267:35">hwdef</name><operator pos:start="267:36" pos:end="267:37">-&gt;</operator><name pos:start="267:38" pos:end="267:47">ms_kb_base</name></name></expr></argument>, <argument pos:start="267:50" pos:end="267:77"><expr pos:start="267:50" pos:end="267:77"><name pos:start="267:50" pos:end="267:77"><name pos:start="267:50" pos:end="267:59">slavio_irq</name><index pos:start="267:60" pos:end="267:77">[<expr pos:start="267:61" pos:end="267:76"><name pos:start="267:61" pos:end="267:76"><name pos:start="267:61" pos:end="267:65">hwdef</name><operator pos:start="267:66" pos:end="267:67">-&gt;</operator><name pos:start="267:68" pos:end="267:76">ms_kb_irq</name></name></expr>]</index></name></expr></argument>,

                              <argument pos:start="269:31" pos:end="269:39"><expr pos:start="269:31" pos:end="269:39"><name pos:start="269:31" pos:end="269:39">nographic</name></expr></argument>, <argument pos:start="269:42" pos:end="269:51"><expr pos:start="269:42" pos:end="269:51"><name pos:start="269:42" pos:end="269:51">ESCC_CLOCK</name></expr></argument>, <argument pos:start="269:54" pos:end="269:54"><expr pos:start="269:54" pos:end="269:54"><literal type="number" pos:start="269:54" pos:end="269:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="271:5" pos:end="271:72">// Slavio TTYA (base+4, Linux ttyS0) is the first Qemu serial device</comment>

    <comment type="line" pos:start="273:5" pos:end="273:73">// Slavio TTYB (base+0, Linux ttyS1) is the second Qemu serial device</comment>

    <expr_stmt pos:start="275:5" pos:end="277:44"><expr pos:start="275:5" pos:end="277:43"><call pos:start="275:5" pos:end="277:43"><name pos:start="275:5" pos:end="275:13">escc_init</name><argument_list pos:start="275:14" pos:end="277:43">(<argument pos:start="275:15" pos:end="275:32"><expr pos:start="275:15" pos:end="275:32"><name pos:start="275:15" pos:end="275:32"><name pos:start="275:15" pos:end="275:19">hwdef</name><operator pos:start="275:20" pos:end="275:21">-&gt;</operator><name pos:start="275:22" pos:end="275:32">serial_base</name></name></expr></argument>, <argument pos:start="275:35" pos:end="275:60"><expr pos:start="275:35" pos:end="275:60"><name pos:start="275:35" pos:end="275:60"><name pos:start="275:35" pos:end="275:44">slavio_irq</name><index pos:start="275:45" pos:end="275:60">[<expr pos:start="275:46" pos:end="275:59"><name pos:start="275:46" pos:end="275:59"><name pos:start="275:46" pos:end="275:50">hwdef</name><operator pos:start="275:51" pos:end="275:52">-&gt;</operator><name pos:start="275:53" pos:end="275:59">ser_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="275:63" pos:end="275:75"><expr pos:start="275:63" pos:end="275:75"><name pos:start="275:63" pos:end="275:75"><name pos:start="275:63" pos:end="275:72">serial_hds</name><index pos:start="275:73" pos:end="275:75">[<expr pos:start="275:74" pos:end="275:74"><literal type="number" pos:start="275:74" pos:end="275:74">1</literal></expr>]</index></name></expr></argument>,

              <argument pos:start="277:15" pos:end="277:27"><expr pos:start="277:15" pos:end="277:27"><name pos:start="277:15" pos:end="277:27"><name pos:start="277:15" pos:end="277:24">serial_hds</name><index pos:start="277:25" pos:end="277:27">[<expr pos:start="277:26" pos:end="277:26"><literal type="number" pos:start="277:26" pos:end="277:26">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="277:30" pos:end="277:39"><expr pos:start="277:30" pos:end="277:39"><name pos:start="277:30" pos:end="277:39">ESCC_CLOCK</name></expr></argument>, <argument pos:start="277:42" pos:end="277:42"><expr pos:start="277:42" pos:end="277:42"><literal type="number" pos:start="277:42" pos:end="277:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="281:5" pos:end="281:60"><expr pos:start="281:5" pos:end="281:59"><name pos:start="281:5" pos:end="281:12">cpu_halt</name> <operator pos:start="281:14" pos:end="281:14">=</operator> <call pos:start="281:16" pos:end="281:59"><name pos:start="281:16" pos:end="281:33">qemu_allocate_irqs</name><argument_list pos:start="281:34" pos:end="281:59">(<argument pos:start="281:35" pos:end="281:49"><expr pos:start="281:35" pos:end="281:49"><name pos:start="281:35" pos:end="281:49">cpu_halt_signal</name></expr></argument>, <argument pos:start="281:52" pos:end="281:55"><expr pos:start="281:52" pos:end="281:55"><name pos:start="281:52" pos:end="281:55">NULL</name></expr></argument>, <argument pos:start="281:58" pos:end="281:58"><expr pos:start="281:58" pos:end="281:58"><literal type="number" pos:start="281:58" pos:end="281:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="289:44"><expr pos:start="283:5" pos:end="289:43"><name pos:start="283:5" pos:end="283:15">slavio_misc</name> <operator pos:start="283:17" pos:end="283:17">=</operator> <call pos:start="283:19" pos:end="289:43"><name pos:start="283:19" pos:end="283:34">slavio_misc_init</name><argument_list pos:start="283:35" pos:end="289:43">(<argument pos:start="283:36" pos:end="283:53"><expr pos:start="283:36" pos:end="283:53"><name pos:start="283:36" pos:end="283:53"><name pos:start="283:36" pos:end="283:40">hwdef</name><operator pos:start="283:41" pos:end="283:42">-&gt;</operator><name pos:start="283:43" pos:end="283:53">slavio_base</name></name></expr></argument>, <argument pos:start="283:56" pos:end="283:70"><expr pos:start="283:56" pos:end="283:70"><name pos:start="283:56" pos:end="283:70"><name pos:start="283:56" pos:end="283:60">hwdef</name><operator pos:start="283:61" pos:end="283:62">-&gt;</operator><name pos:start="283:63" pos:end="283:70">apc_base</name></name></expr></argument>,

                                   <argument pos:start="285:36" pos:end="285:51"><expr pos:start="285:36" pos:end="285:51"><name pos:start="285:36" pos:end="285:51"><name pos:start="285:36" pos:end="285:40">hwdef</name><operator pos:start="285:41" pos:end="285:42">-&gt;</operator><name pos:start="285:43" pos:end="285:51">aux1_base</name></name></expr></argument>, <argument pos:start="285:54" pos:end="285:69"><expr pos:start="285:54" pos:end="285:69"><name pos:start="285:54" pos:end="285:69"><name pos:start="285:54" pos:end="285:58">hwdef</name><operator pos:start="285:59" pos:end="285:60">-&gt;</operator><name pos:start="285:61" pos:end="285:69">aux2_base</name></name></expr></argument>,

                                   <argument pos:start="287:36" pos:end="287:60"><expr pos:start="287:36" pos:end="287:60"><name pos:start="287:36" pos:end="287:60"><name pos:start="287:36" pos:end="287:45">slavio_irq</name><index pos:start="287:46" pos:end="287:60">[<expr pos:start="287:47" pos:end="287:59"><name pos:start="287:47" pos:end="287:59"><name pos:start="287:47" pos:end="287:51">hwdef</name><operator pos:start="287:52" pos:end="287:53">-&gt;</operator><name pos:start="287:54" pos:end="287:59">me_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="287:63" pos:end="287:73"><expr pos:start="287:63" pos:end="287:73"><name pos:start="287:63" pos:end="287:73"><name pos:start="287:63" pos:end="287:70">cpu_halt</name><index pos:start="287:71" pos:end="287:73">[<expr pos:start="287:72" pos:end="287:72"><literal type="number" pos:start="287:72" pos:end="287:72">0</literal></expr>]</index></name></expr></argument>,

                                   <argument pos:start="289:36" pos:end="289:42"><expr pos:start="289:36" pos:end="289:42"><operator pos:start="289:36" pos:end="289:36">&amp;</operator><name pos:start="289:37" pos:end="289:42">fdc_tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="293:5" pos:end="311:5"><if pos:start="293:5" pos:end="311:5">if <condition pos:start="293:8" pos:end="293:23">(<expr pos:start="293:9" pos:end="293:22"><name pos:start="293:9" pos:end="293:22"><name pos:start="293:9" pos:end="293:13">hwdef</name><operator pos:start="293:14" pos:end="293:15">-&gt;</operator><name pos:start="293:16" pos:end="293:22">fd_base</name></name></expr>)</condition> <block pos:start="293:25" pos:end="311:5">{<block_content pos:start="297:9" pos:end="309:34">

        <comment type="block" pos:start="295:9" pos:end="295:47">/* there is zero or one floppy drive */</comment>

        <expr_stmt pos:start="297:9" pos:end="297:34"><expr pos:start="297:9" pos:end="297:33"><call pos:start="297:9" pos:end="297:33"><name pos:start="297:9" pos:end="297:14">memset</name><argument_list pos:start="297:15" pos:end="297:33">(<argument pos:start="297:16" pos:end="297:17"><expr pos:start="297:16" pos:end="297:17"><name pos:start="297:16" pos:end="297:17">fd</name></expr></argument>, <argument pos:start="297:20" pos:end="297:20"><expr pos:start="297:20" pos:end="297:20"><literal type="number" pos:start="297:20" pos:end="297:20">0</literal></expr></argument>, <argument pos:start="297:23" pos:end="297:32"><expr pos:start="297:23" pos:end="297:32"><sizeof pos:start="297:23" pos:end="297:32">sizeof<argument_list pos:start="297:29" pos:end="297:32">(<argument pos:start="297:30" pos:end="297:31"><expr pos:start="297:30" pos:end="297:31"><name pos:start="297:30" pos:end="297:31">fd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:55"><expr pos:start="299:9" pos:end="299:54"><name pos:start="299:9" pos:end="299:19">drive_index</name> <operator pos:start="299:21" pos:end="299:21">=</operator> <call pos:start="299:23" pos:end="299:54"><name pos:start="299:23" pos:end="299:37">drive_get_index</name><argument_list pos:start="299:38" pos:end="299:54">(<argument pos:start="299:39" pos:end="299:47"><expr pos:start="299:39" pos:end="299:47"><name pos:start="299:39" pos:end="299:47">IF_FLOPPY</name></expr></argument>, <argument pos:start="299:50" pos:end="299:50"><expr pos:start="299:50" pos:end="299:50"><literal type="number" pos:start="299:50" pos:end="299:50">0</literal></expr></argument>, <argument pos:start="299:53" pos:end="299:53"><expr pos:start="299:53" pos:end="299:53"><literal type="number" pos:start="299:53" pos:end="299:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="301:9" pos:end="303:51"><if pos:start="301:9" pos:end="303:51">if <condition pos:start="301:12" pos:end="301:30">(<expr pos:start="301:13" pos:end="301:29"><name pos:start="301:13" pos:end="301:23">drive_index</name> <operator pos:start="301:25" pos:end="301:26">!=</operator> <operator pos:start="301:28" pos:end="301:28">-</operator><literal type="number" pos:start="301:29" pos:end="301:29">1</literal></expr>)</condition><block type="pseudo" pos:start="303:13" pos:end="303:51"><block_content pos:start="303:13" pos:end="303:51">

            <expr_stmt pos:start="303:13" pos:end="303:51"><expr pos:start="303:13" pos:end="303:50"><name pos:start="303:13" pos:end="303:17"><name pos:start="303:13" pos:end="303:14">fd</name><index pos:start="303:15" pos:end="303:17">[<expr pos:start="303:16" pos:end="303:16"><literal type="number" pos:start="303:16" pos:end="303:16">0</literal></expr>]</index></name> <operator pos:start="303:19" pos:end="303:19">=</operator> <name pos:start="303:21" pos:end="303:45"><name pos:start="303:21" pos:end="303:32">drives_table</name><index pos:start="303:33" pos:end="303:45">[<expr pos:start="303:34" pos:end="303:44"><name pos:start="303:34" pos:end="303:44">drive_index</name></expr>]</index></name><operator pos:start="303:46" pos:end="303:46">.</operator><name pos:start="303:47" pos:end="303:50">bdrv</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="307:9" pos:end="309:34"><expr pos:start="307:9" pos:end="309:33"><call pos:start="307:9" pos:end="309:33"><name pos:start="307:9" pos:end="307:25">sun4m_fdctrl_init</name><argument_list pos:start="307:26" pos:end="309:33">(<argument pos:start="307:27" pos:end="307:51"><expr pos:start="307:27" pos:end="307:51"><name pos:start="307:27" pos:end="307:51"><name pos:start="307:27" pos:end="307:36">slavio_irq</name><index pos:start="307:37" pos:end="307:51">[<expr pos:start="307:38" pos:end="307:50"><name pos:start="307:38" pos:end="307:50"><name pos:start="307:38" pos:end="307:42">hwdef</name><operator pos:start="307:43" pos:end="307:44">-&gt;</operator><name pos:start="307:45" pos:end="307:50">fd_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="307:54" pos:end="307:67"><expr pos:start="307:54" pos:end="307:67"><name pos:start="307:54" pos:end="307:67"><name pos:start="307:54" pos:end="307:58">hwdef</name><operator pos:start="307:59" pos:end="307:60">-&gt;</operator><name pos:start="307:61" pos:end="307:67">fd_base</name></name></expr></argument>, <argument pos:start="307:70" pos:end="307:71"><expr pos:start="307:70" pos:end="307:71"><name pos:start="307:70" pos:end="307:71">fd</name></expr></argument>,

                          <argument pos:start="309:27" pos:end="309:32"><expr pos:start="309:27" pos:end="309:32"><name pos:start="309:27" pos:end="309:32">fdc_tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="315:5" pos:end="321:5"><if pos:start="315:5" pos:end="321:5">if <condition pos:start="315:8" pos:end="315:39">(<expr pos:start="315:9" pos:end="315:38"><call pos:start="315:9" pos:end="315:34"><name pos:start="315:9" pos:end="315:25">drive_get_max_bus</name><argument_list pos:start="315:26" pos:end="315:34">(<argument pos:start="315:27" pos:end="315:33"><expr pos:start="315:27" pos:end="315:33"><name pos:start="315:27" pos:end="315:33">IF_SCSI</name></expr></argument>)</argument_list></call> <operator pos:start="315:36" pos:end="315:36">&gt;</operator> <literal type="number" pos:start="315:38" pos:end="315:38">0</literal></expr>)</condition> <block pos:start="315:41" pos:end="321:5">{<block_content pos:start="317:9" pos:end="319:16">

        <expr_stmt pos:start="317:9" pos:end="317:53"><expr pos:start="317:9" pos:end="317:52"><call pos:start="317:9" pos:end="317:52"><name pos:start="317:9" pos:end="317:15">fprintf</name><argument_list pos:start="317:16" pos:end="317:52">(<argument pos:start="317:17" pos:end="317:22"><expr pos:start="317:17" pos:end="317:22"><name pos:start="317:17" pos:end="317:22">stderr</name></expr></argument>, <argument pos:start="317:25" pos:end="317:51"><expr pos:start="317:25" pos:end="317:51"><literal type="string" pos:start="317:25" pos:end="317:51">"qemu: too many SCSI bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:16"><expr pos:start="319:9" pos:end="319:15"><call pos:start="319:9" pos:end="319:15"><name pos:start="319:9" pos:end="319:12">exit</name><argument_list pos:start="319:13" pos:end="319:15">(<argument pos:start="319:14" pos:end="319:14"><expr pos:start="319:14" pos:end="319:14"><literal type="number" pos:start="319:14" pos:end="319:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="325:5" pos:end="329:56"><expr pos:start="325:5" pos:end="329:55"><name pos:start="325:5" pos:end="325:12">main_esp</name> <operator pos:start="325:14" pos:end="325:14">=</operator> <call pos:start="325:16" pos:end="329:55"><name pos:start="325:16" pos:end="325:23">esp_init</name><argument_list pos:start="325:24" pos:end="329:55">(<argument pos:start="325:25" pos:end="325:39"><expr pos:start="325:25" pos:end="325:39"><name pos:start="325:25" pos:end="325:39"><name pos:start="325:25" pos:end="325:29">hwdef</name><operator pos:start="325:30" pos:end="325:31">-&gt;</operator><name pos:start="325:32" pos:end="325:39">esp_base</name></name></expr></argument>, <argument pos:start="325:42" pos:end="325:42"><expr pos:start="325:42" pos:end="325:42"><literal type="number" pos:start="325:42" pos:end="325:42">2</literal></expr></argument>,

                        <argument pos:start="327:25" pos:end="327:42"><expr pos:start="327:25" pos:end="327:42"><name pos:start="327:25" pos:end="327:42">espdma_memory_read</name></expr></argument>, <argument pos:start="327:45" pos:end="327:63"><expr pos:start="327:45" pos:end="327:63"><name pos:start="327:45" pos:end="327:63">espdma_memory_write</name></expr></argument>,

                        <argument pos:start="329:25" pos:end="329:30"><expr pos:start="329:25" pos:end="329:30"><name pos:start="329:25" pos:end="329:30">espdma</name></expr></argument>, <argument pos:start="329:33" pos:end="329:43"><expr pos:start="329:33" pos:end="329:43"><operator pos:start="329:33" pos:end="329:33">*</operator><name pos:start="329:34" pos:end="329:43">espdma_irq</name></expr></argument>, <argument pos:start="329:46" pos:end="329:54"><expr pos:start="329:46" pos:end="329:54"><name pos:start="329:46" pos:end="329:54">esp_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="333:5" pos:end="343:5">for <control pos:start="333:9" pos:end="333:38">(<init pos:start="333:10" pos:end="333:15"><expr pos:start="333:10" pos:end="333:14"><name pos:start="333:10" pos:end="333:10">i</name> <operator pos:start="333:12" pos:end="333:12">=</operator> <literal type="number" pos:start="333:14" pos:end="333:14">0</literal></expr>;</init> <condition pos:start="333:17" pos:end="333:33"><expr pos:start="333:17" pos:end="333:32"><name pos:start="333:17" pos:end="333:17">i</name> <operator pos:start="333:19" pos:end="333:19">&lt;</operator> <name pos:start="333:21" pos:end="333:32">ESP_MAX_DEVS</name></expr>;</condition> <incr pos:start="333:35" pos:end="333:37"><expr pos:start="333:35" pos:end="333:37"><name pos:start="333:35" pos:end="333:35">i</name><operator pos:start="333:36" pos:end="333:37">++</operator></expr></incr>)</control> <block pos:start="333:40" pos:end="343:5">{<block_content pos:start="335:9" pos:end="341:69">

        <expr_stmt pos:start="335:9" pos:end="335:53"><expr pos:start="335:9" pos:end="335:52"><name pos:start="335:9" pos:end="335:19">drive_index</name> <operator pos:start="335:21" pos:end="335:21">=</operator> <call pos:start="335:23" pos:end="335:52"><name pos:start="335:23" pos:end="335:37">drive_get_index</name><argument_list pos:start="335:38" pos:end="335:52">(<argument pos:start="335:39" pos:end="335:45"><expr pos:start="335:39" pos:end="335:45"><name pos:start="335:39" pos:end="335:45">IF_SCSI</name></expr></argument>, <argument pos:start="335:48" pos:end="335:48"><expr pos:start="335:48" pos:end="335:48"><literal type="number" pos:start="335:48" pos:end="335:48">0</literal></expr></argument>, <argument pos:start="335:51" pos:end="335:51"><expr pos:start="335:51" pos:end="335:51"><name pos:start="335:51" pos:end="335:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="337:9" pos:end="339:21"><if pos:start="337:9" pos:end="339:21">if <condition pos:start="337:12" pos:end="337:30">(<expr pos:start="337:13" pos:end="337:29"><name pos:start="337:13" pos:end="337:23">drive_index</name> <operator pos:start="337:25" pos:end="337:26">==</operator> <operator pos:start="337:28" pos:end="337:28">-</operator><literal type="number" pos:start="337:29" pos:end="337:29">1</literal></expr>)</condition><block type="pseudo" pos:start="339:13" pos:end="339:21"><block_content pos:start="339:13" pos:end="339:21">

            <continue pos:start="339:13" pos:end="339:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:69"><expr pos:start="341:9" pos:end="341:68"><call pos:start="341:9" pos:end="341:68"><name pos:start="341:9" pos:end="341:23">esp_scsi_attach</name><argument_list pos:start="341:24" pos:end="341:68">(<argument pos:start="341:25" pos:end="341:32"><expr pos:start="341:25" pos:end="341:32"><name pos:start="341:25" pos:end="341:32">main_esp</name></expr></argument>, <argument pos:start="341:35" pos:end="341:64"><expr pos:start="341:35" pos:end="341:64"><name pos:start="341:35" pos:end="341:59"><name pos:start="341:35" pos:end="341:46">drives_table</name><index pos:start="341:47" pos:end="341:59">[<expr pos:start="341:48" pos:end="341:58"><name pos:start="341:48" pos:end="341:58">drive_index</name></expr>]</index></name><operator pos:start="341:60" pos:end="341:60">.</operator><name pos:start="341:61" pos:end="341:64">bdrv</name></expr></argument>, <argument pos:start="341:67" pos:end="341:67"><expr pos:start="341:67" pos:end="341:67"><name pos:start="341:67" pos:end="341:67">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="347:5" pos:end="349:62"><if pos:start="347:5" pos:end="349:62">if <condition pos:start="347:8" pos:end="347:23">(<expr pos:start="347:9" pos:end="347:22"><name pos:start="347:9" pos:end="347:22"><name pos:start="347:9" pos:end="347:13">hwdef</name><operator pos:start="347:14" pos:end="347:15">-&gt;</operator><name pos:start="347:16" pos:end="347:22">cs_base</name></name></expr>)</condition><block type="pseudo" pos:start="349:9" pos:end="349:62"><block_content pos:start="349:9" pos:end="349:62">

        <expr_stmt pos:start="349:9" pos:end="349:62"><expr pos:start="349:9" pos:end="349:61"><call pos:start="349:9" pos:end="349:61"><name pos:start="349:9" pos:end="349:15">cs_init</name><argument_list pos:start="349:16" pos:end="349:61">(<argument pos:start="349:17" pos:end="349:30"><expr pos:start="349:17" pos:end="349:30"><name pos:start="349:17" pos:end="349:30"><name pos:start="349:17" pos:end="349:21">hwdef</name><operator pos:start="349:22" pos:end="349:23">-&gt;</operator><name pos:start="349:24" pos:end="349:30">cs_base</name></name></expr></argument>, <argument pos:start="349:33" pos:end="349:45"><expr pos:start="349:33" pos:end="349:45"><name pos:start="349:33" pos:end="349:45"><name pos:start="349:33" pos:end="349:37">hwdef</name><operator pos:start="349:38" pos:end="349:39">-&gt;</operator><name pos:start="349:40" pos:end="349:45">cs_irq</name></name></expr></argument>, <argument pos:start="349:48" pos:end="349:60"><expr pos:start="349:48" pos:end="349:60"><name pos:start="349:48" pos:end="349:60">slavio_intctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="353:5" pos:end="355:46"><expr pos:start="353:5" pos:end="355:45"><name pos:start="353:5" pos:end="353:15">kernel_size</name> <operator pos:start="353:17" pos:end="353:17">=</operator> <call pos:start="353:19" pos:end="355:45"><name pos:start="353:19" pos:end="353:35">sun4m_load_kernel</name><argument_list pos:start="353:36" pos:end="355:45">(<argument pos:start="353:37" pos:end="353:51"><expr pos:start="353:37" pos:end="353:51"><name pos:start="353:37" pos:end="353:51">kernel_filename</name></expr></argument>, <argument pos:start="353:54" pos:end="353:68"><expr pos:start="353:54" pos:end="353:68"><name pos:start="353:54" pos:end="353:68">initrd_filename</name></expr></argument>,

                                    <argument pos:start="355:37" pos:end="355:44"><expr pos:start="355:37" pos:end="355:44"><name pos:start="355:37" pos:end="355:44">RAM_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="359:5" pos:end="365:24"><expr pos:start="359:5" pos:end="365:23"><call pos:start="359:5" pos:end="365:23"><name pos:start="359:5" pos:end="359:14">nvram_init</name><argument_list pos:start="359:15" pos:end="365:23">(<argument pos:start="359:16" pos:end="359:20"><expr pos:start="359:16" pos:end="359:20"><name pos:start="359:16" pos:end="359:20">nvram</name></expr></argument>, <argument pos:start="359:23" pos:end="359:53"><expr pos:start="359:23" pos:end="359:53"><operator pos:start="359:23" pos:end="359:23">(</operator><name pos:start="359:24" pos:end="359:30">uint8_t</name> <operator pos:start="359:32" pos:end="359:32">*</operator><operator pos:start="359:33" pos:end="359:33">)</operator><operator pos:start="359:34" pos:end="359:34">&amp;</operator><name pos:start="359:35" pos:end="359:45"><name pos:start="359:35" pos:end="359:42">nd_table</name><index pos:start="359:43" pos:end="359:45">[<expr pos:start="359:44" pos:end="359:44"><literal type="number" pos:start="359:44" pos:end="359:44">0</literal></expr>]</index></name><operator pos:start="359:46" pos:end="359:46">.</operator><name pos:start="359:47" pos:end="359:53">macaddr</name></expr></argument>, <argument pos:start="359:56" pos:end="359:69"><expr pos:start="359:56" pos:end="359:69"><name pos:start="359:56" pos:end="359:69">kernel_cmdline</name></expr></argument>,

               <argument pos:start="361:16" pos:end="361:26"><expr pos:start="361:16" pos:end="361:26"><name pos:start="361:16" pos:end="361:26">boot_device</name></expr></argument>, <argument pos:start="361:29" pos:end="361:36"><expr pos:start="361:29" pos:end="361:36"><name pos:start="361:29" pos:end="361:36">RAM_size</name></expr></argument>, <argument pos:start="361:39" pos:end="361:49"><expr pos:start="361:39" pos:end="361:49"><name pos:start="361:39" pos:end="361:49">kernel_size</name></expr></argument>, <argument pos:start="361:52" pos:end="361:64"><expr pos:start="361:52" pos:end="361:64"><name pos:start="361:52" pos:end="361:64">graphic_width</name></expr></argument>,

               <argument pos:start="363:16" pos:end="363:29"><expr pos:start="363:16" pos:end="363:29"><name pos:start="363:16" pos:end="363:29">graphic_height</name></expr></argument>, <argument pos:start="363:32" pos:end="363:44"><expr pos:start="363:32" pos:end="363:44"><name pos:start="363:32" pos:end="363:44">graphic_depth</name></expr></argument>, <argument pos:start="363:47" pos:end="363:69"><expr pos:start="363:47" pos:end="363:69"><name pos:start="363:47" pos:end="363:69"><name pos:start="363:47" pos:end="363:51">hwdef</name><operator pos:start="363:52" pos:end="363:53">-&gt;</operator><name pos:start="363:54" pos:end="363:69">nvram_machine_id</name></name></expr></argument>,

               <argument pos:start="365:16" pos:end="365:22"><expr pos:start="365:16" pos:end="365:22"><literal type="string" pos:start="365:16" pos:end="365:22">"Sun4m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="369:5" pos:end="373:37"><if pos:start="369:5" pos:end="373:37">if <condition pos:start="369:8" pos:end="369:24">(<expr pos:start="369:9" pos:end="369:23"><name pos:start="369:9" pos:end="369:23"><name pos:start="369:9" pos:end="369:13">hwdef</name><operator pos:start="369:14" pos:end="369:15">-&gt;</operator><name pos:start="369:16" pos:end="369:23">ecc_base</name></name></expr>)</condition><block type="pseudo" pos:start="371:9" pos:end="373:37"><block_content pos:start="371:9" pos:end="373:37">

        <expr_stmt pos:start="371:9" pos:end="373:37"><expr pos:start="371:9" pos:end="373:36"><call pos:start="371:9" pos:end="373:36"><name pos:start="371:9" pos:end="371:16">ecc_init</name><argument_list pos:start="371:17" pos:end="373:36">(<argument pos:start="371:18" pos:end="371:32"><expr pos:start="371:18" pos:end="371:32"><name pos:start="371:18" pos:end="371:32"><name pos:start="371:18" pos:end="371:22">hwdef</name><operator pos:start="371:23" pos:end="371:24">-&gt;</operator><name pos:start="371:25" pos:end="371:32">ecc_base</name></name></expr></argument>, <argument pos:start="371:35" pos:end="371:60"><expr pos:start="371:35" pos:end="371:60"><name pos:start="371:35" pos:end="371:60"><name pos:start="371:35" pos:end="371:44">slavio_irq</name><index pos:start="371:45" pos:end="371:60">[<expr pos:start="371:46" pos:end="371:59"><name pos:start="371:46" pos:end="371:59"><name pos:start="371:46" pos:end="371:50">hwdef</name><operator pos:start="371:51" pos:end="371:52">-&gt;</operator><name pos:start="371:53" pos:end="371:59">ecc_irq</name></name></expr>]</index></name></expr></argument>,

                 <argument pos:start="373:18" pos:end="373:35"><expr pos:start="373:18" pos:end="373:35"><name pos:start="373:18" pos:end="373:35"><name pos:start="373:18" pos:end="373:22">hwdef</name><operator pos:start="373:23" pos:end="373:24">-&gt;</operator><name pos:start="373:25" pos:end="373:35">ecc_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="377:5" pos:end="377:55"><expr pos:start="377:5" pos:end="377:54"><name pos:start="377:5" pos:end="377:10">fw_cfg</name> <operator pos:start="377:12" pos:end="377:12">=</operator> <call pos:start="377:14" pos:end="377:54"><name pos:start="377:14" pos:end="377:24">fw_cfg_init</name><argument_list pos:start="377:25" pos:end="377:54">(<argument pos:start="377:26" pos:end="377:26"><expr pos:start="377:26" pos:end="377:26"><literal type="number" pos:start="377:26" pos:end="377:26">0</literal></expr></argument>, <argument pos:start="377:29" pos:end="377:29"><expr pos:start="377:29" pos:end="377:29"><literal type="number" pos:start="377:29" pos:end="377:29">0</literal></expr></argument>, <argument pos:start="377:32" pos:end="377:39"><expr pos:start="377:32" pos:end="377:39"><name pos:start="377:32" pos:end="377:39">CFG_ADDR</name></expr></argument>, <argument pos:start="377:42" pos:end="377:53"><expr pos:start="377:42" pos:end="377:53"><name pos:start="377:42" pos:end="377:49">CFG_ADDR</name> <operator pos:start="377:51" pos:end="377:51">+</operator> <literal type="number" pos:start="377:53" pos:end="377:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="379:5" pos:end="379:41"><expr pos:start="379:5" pos:end="379:40"><call pos:start="379:5" pos:end="379:40"><name pos:start="379:5" pos:end="379:18">fw_cfg_add_i32</name><argument_list pos:start="379:19" pos:end="379:40">(<argument pos:start="379:20" pos:end="379:25"><expr pos:start="379:20" pos:end="379:25"><name pos:start="379:20" pos:end="379:25">fw_cfg</name></expr></argument>, <argument pos:start="379:28" pos:end="379:36"><expr pos:start="379:28" pos:end="379:36"><name pos:start="379:28" pos:end="379:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="379:39" pos:end="379:39"><expr pos:start="379:39" pos:end="379:39"><literal type="number" pos:start="379:39" pos:end="379:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="381:5" pos:end="381:64"><expr pos:start="381:5" pos:end="381:63"><call pos:start="381:5" pos:end="381:63"><name pos:start="381:5" pos:end="381:18">fw_cfg_add_i64</name><argument_list pos:start="381:19" pos:end="381:63">(<argument pos:start="381:20" pos:end="381:25"><expr pos:start="381:20" pos:end="381:25"><name pos:start="381:20" pos:end="381:25">fw_cfg</name></expr></argument>, <argument pos:start="381:28" pos:end="381:42"><expr pos:start="381:28" pos:end="381:42"><name pos:start="381:28" pos:end="381:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="381:45" pos:end="381:62"><expr pos:start="381:45" pos:end="381:62"><operator pos:start="381:45" pos:end="381:45">(</operator><name pos:start="381:46" pos:end="381:53">uint64_t</name><operator pos:start="381:54" pos:end="381:54">)</operator><name pos:start="381:55" pos:end="381:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="383:65"><expr pos:start="383:5" pos:end="383:64"><call pos:start="383:5" pos:end="383:64"><name pos:start="383:5" pos:end="383:18">fw_cfg_add_i16</name><argument_list pos:start="383:19" pos:end="383:64">(<argument pos:start="383:20" pos:end="383:25"><expr pos:start="383:20" pos:end="383:25"><name pos:start="383:20" pos:end="383:25">fw_cfg</name></expr></argument>, <argument pos:start="383:28" pos:end="383:44"><expr pos:start="383:28" pos:end="383:44"><name pos:start="383:28" pos:end="383:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="383:47" pos:end="383:63"><expr pos:start="383:47" pos:end="383:63"><name pos:start="383:47" pos:end="383:63"><name pos:start="383:47" pos:end="383:51">hwdef</name><operator pos:start="383:52" pos:end="383:53">-&gt;</operator><name pos:start="383:54" pos:end="383:63">machine_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:62"><expr pos:start="385:5" pos:end="385:61"><call pos:start="385:5" pos:end="385:61"><name pos:start="385:5" pos:end="385:18">fw_cfg_add_i16</name><argument_list pos:start="385:19" pos:end="385:61">(<argument pos:start="385:20" pos:end="385:25"><expr pos:start="385:20" pos:end="385:25"><name pos:start="385:20" pos:end="385:25">fw_cfg</name></expr></argument>, <argument pos:start="385:28" pos:end="385:45"><expr pos:start="385:28" pos:end="385:45"><name pos:start="385:28" pos:end="385:45">FW_CFG_SUN4M_DEPTH</name></expr></argument>, <argument pos:start="385:48" pos:end="385:60"><expr pos:start="385:48" pos:end="385:60"><name pos:start="385:48" pos:end="385:60">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
