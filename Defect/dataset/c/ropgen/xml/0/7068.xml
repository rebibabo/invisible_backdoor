<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7068.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:31">malta_fpga_read</name><parameter_list pos:start="1:32" pos:end="3:46">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:69"><decl pos:start="1:47" pos:end="1:69"><type pos:start="1:47" pos:end="1:69"><name pos:start="1:47" pos:end="1:64">target_phys_addr_t</name></type> <name pos:start="1:66" pos:end="1:69">addr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:40">unsigned</name></type> <name pos:start="3:42" pos:end="3:45">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="173:1">{<block_content pos:start="7:5" pos:end="171:15">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MaltaFPGAState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><name pos:start="7:25" pos:end="7:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">val</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">saddr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:29"><expr pos:start="15:5" pos:end="15:28"><name pos:start="15:5" pos:end="15:9">saddr</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <operator pos:start="15:13" pos:end="15:13">(</operator><name pos:start="15:14" pos:end="15:17">addr</name> <operator pos:start="15:19" pos:end="15:19">&amp;</operator> <literal type="number" pos:start="15:21" pos:end="15:27">0xfffff</literal><operator pos:start="15:28" pos:end="15:28">)</operator></expr>;</expr_stmt>



    <switch pos:start="19:5" pos:end="169:5">switch <condition pos:start="19:12" pos:end="19:18">(<expr pos:start="19:13" pos:end="19:17"><name pos:start="19:13" pos:end="19:17">saddr</name></expr>)</condition> <block pos:start="19:20" pos:end="169:5">{<block_content pos:start="25:5" pos:end="167:14">



    <comment type="block" pos:start="23:5" pos:end="23:25">/* SWITCH Register */</comment>

    <case pos:start="25:5" pos:end="25:17">case <expr pos:start="25:10" pos:end="25:16"><literal type="number" pos:start="25:10" pos:end="25:16">0x00200</literal></expr>:</case>

        <expr_stmt pos:start="27:9" pos:end="27:25"><expr pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:11">val</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <literal type="number" pos:start="27:15" pos:end="27:24">0x00000000</literal></expr>;</expr_stmt>		<comment type="block" pos:start="27:41" pos:end="27:65">/* All switches closed */</comment>

        <break pos:start="29:9" pos:end="29:14">break;</break>



    <comment type="block" pos:start="33:5" pos:end="33:25">/* STATUS Register */</comment>

    <case pos:start="35:5" pos:end="38:0">case <expr pos:start="35:10" pos:end="35:16"><literal type="number" pos:start="35:10" pos:end="35:16">0x00208</literal></expr>:</case>

<cpp:ifdef pos:start="37:1" pos:end="37:29">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="39:9" pos:end="42:0"><expr pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:11">val</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <literal type="number" pos:start="39:15" pos:end="39:24">0x00000012</literal></expr>;</expr_stmt>

<cpp:else pos:start="41:1" pos:end="41:5">#<cpp:directive pos:start="41:2" pos:end="41:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="43:9" pos:end="46:0"><expr pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:11">val</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <literal type="number" pos:start="43:15" pos:end="43:24">0x00000010</literal></expr>;</expr_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

        <break pos:start="47:9" pos:end="47:14">break;</break>



    <comment type="block" pos:start="51:5" pos:end="51:24">/* JMPRS Register */</comment>

    <case pos:start="53:5" pos:end="53:17">case <expr pos:start="53:10" pos:end="53:16"><literal type="number" pos:start="53:10" pos:end="53:16">0x00210</literal></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:19"><expr pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:11">val</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <literal type="number" pos:start="55:15" pos:end="55:18">0x00</literal></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>



    <comment type="block" pos:start="61:5" pos:end="61:25">/* LEDBAR Register */</comment>

    <case pos:start="63:5" pos:end="63:17">case <expr pos:start="63:10" pos:end="63:16"><literal type="number" pos:start="63:10" pos:end="63:16">0x00408</literal></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:11">val</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:21"><name pos:start="65:15" pos:end="65:15">s</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:21">leds</name></name></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>



    <comment type="block" pos:start="71:5" pos:end="71:25">/* BRKRES Register */</comment>

    <case pos:start="73:5" pos:end="73:17">case <expr pos:start="73:10" pos:end="73:16"><literal type="number" pos:start="73:10" pos:end="73:16">0x00508</literal></expr>:</case>

        <expr_stmt pos:start="75:9" pos:end="75:21"><expr pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:11">val</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <name pos:start="75:15" pos:end="75:20"><name pos:start="75:15" pos:end="75:15">s</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:20">brk</name></name></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>



    <comment type="block" pos:start="81:5" pos:end="81:66">/* UART Registers are handled directly by the serial device */</comment>



    <comment type="block" pos:start="85:5" pos:end="85:24">/* GPOUT Register */</comment>

    <case pos:start="87:5" pos:end="87:17">case <expr pos:start="87:10" pos:end="87:16"><literal type="number" pos:start="87:10" pos:end="87:16">0x00a00</literal></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:23"><expr pos:start="89:9" pos:end="89:22"><name pos:start="89:9" pos:end="89:11">val</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <name pos:start="89:15" pos:end="89:22"><name pos:start="89:15" pos:end="89:15">s</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:22">gpout</name></name></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>



    <comment type="block" pos:start="95:5" pos:end="95:46">/* XXX: implement a real I2C controller */</comment>



    <comment type="block" pos:start="99:5" pos:end="99:24">/* GPINP Register */</comment>

    <case pos:start="101:5" pos:end="101:17">case <expr pos:start="101:10" pos:end="101:16"><literal type="number" pos:start="101:10" pos:end="101:16">0x00a08</literal></expr>:</case>

        <comment type="block" pos:start="103:9" pos:end="103:62">/* IN = OUT until a real I2C control is implemented */</comment>

        <if_stmt pos:start="105:9" pos:end="111:23"><if pos:start="105:9" pos:end="107:28">if <condition pos:start="105:12" pos:end="105:22">(<expr pos:start="105:13" pos:end="105:21"><name pos:start="105:13" pos:end="105:21"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:21">i2csel</name></name></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:28"><block_content pos:start="107:13" pos:end="107:28">

            <expr_stmt pos:start="107:13" pos:end="107:28"><expr pos:start="107:13" pos:end="107:27"><name pos:start="107:13" pos:end="107:15">val</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <name pos:start="107:19" pos:end="107:27"><name pos:start="107:19" pos:end="107:19">s</name><operator pos:start="107:20" pos:end="107:21">-&gt;</operator><name pos:start="107:22" pos:end="107:27">i2cout</name></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="109:9" pos:end="111:23">else<block type="pseudo" pos:start="111:13" pos:end="111:23"><block_content pos:start="111:13" pos:end="111:23">

            <expr_stmt pos:start="111:13" pos:end="111:23"><expr pos:start="111:13" pos:end="111:22"><name pos:start="111:13" pos:end="111:15">val</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <literal type="number" pos:start="111:19" pos:end="111:22">0x00</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>



    <comment type="block" pos:start="117:5" pos:end="117:25">/* I2CINP Register */</comment>

    <case pos:start="119:5" pos:end="119:17">case <expr pos:start="119:10" pos:end="119:16"><literal type="number" pos:start="119:10" pos:end="119:16">0x00b00</literal></expr>:</case>

        <expr_stmt pos:start="121:9" pos:end="121:53"><expr pos:start="121:9" pos:end="121:52"><name pos:start="121:9" pos:end="121:11">val</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <operator pos:start="121:15" pos:end="121:15">(</operator><operator pos:start="121:16" pos:end="121:16">(</operator><name pos:start="121:17" pos:end="121:24"><name pos:start="121:17" pos:end="121:17">s</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:24">i2cin</name></name> <operator pos:start="121:26" pos:end="121:26">&amp;</operator> <operator pos:start="121:28" pos:end="121:28">~</operator><literal type="number" pos:start="121:29" pos:end="121:29">1</literal><operator pos:start="121:30" pos:end="121:30">)</operator> <operator pos:start="121:32" pos:end="121:32">|</operator> <call pos:start="121:34" pos:end="121:51"><name pos:start="121:34" pos:end="121:49">eeprom24c0x_read</name><argument_list pos:start="121:50" pos:end="121:51">()</argument_list></call><operator pos:start="121:52" pos:end="121:52">)</operator></expr>;</expr_stmt>

        <break pos:start="123:9" pos:end="123:14">break;</break>



    <comment type="block" pos:start="127:5" pos:end="127:24">/* I2COE Register */</comment>

    <case pos:start="129:5" pos:end="129:17">case <expr pos:start="129:10" pos:end="129:16"><literal type="number" pos:start="129:10" pos:end="129:16">0x00b08</literal></expr>:</case>

        <expr_stmt pos:start="131:9" pos:end="131:23"><expr pos:start="131:9" pos:end="131:22"><name pos:start="131:9" pos:end="131:11">val</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <name pos:start="131:15" pos:end="131:22"><name pos:start="131:15" pos:end="131:15">s</name><operator pos:start="131:16" pos:end="131:17">-&gt;</operator><name pos:start="131:18" pos:end="131:22">i2coe</name></name></expr>;</expr_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>



    <comment type="block" pos:start="137:5" pos:end="137:25">/* I2COUT Register */</comment>

    <case pos:start="139:5" pos:end="139:17">case <expr pos:start="139:10" pos:end="139:16"><literal type="number" pos:start="139:10" pos:end="139:16">0x00b10</literal></expr>:</case>

        <expr_stmt pos:start="141:9" pos:end="141:24"><expr pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:11">val</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <name pos:start="141:15" pos:end="141:23"><name pos:start="141:15" pos:end="141:15">s</name><operator pos:start="141:16" pos:end="141:17">-&gt;</operator><name pos:start="141:18" pos:end="141:23">i2cout</name></name></expr>;</expr_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>



    <comment type="block" pos:start="147:5" pos:end="147:25">/* I2CSEL Register */</comment>

    <case pos:start="149:5" pos:end="149:17">case <expr pos:start="149:10" pos:end="149:16"><literal type="number" pos:start="149:10" pos:end="149:16">0x00b18</literal></expr>:</case>

        <expr_stmt pos:start="151:9" pos:end="151:24"><expr pos:start="151:9" pos:end="151:23"><name pos:start="151:9" pos:end="151:11">val</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <name pos:start="151:15" pos:end="151:23"><name pos:start="151:15" pos:end="151:15">s</name><operator pos:start="151:16" pos:end="151:17">-&gt;</operator><name pos:start="151:18" pos:end="151:23">i2csel</name></name></expr>;</expr_stmt>

        <break pos:start="153:9" pos:end="153:14">break;</break>



    <default pos:start="157:5" pos:end="166:0">default:</default>

<cpp:if pos:start="159:1" pos:end="159:5">#<cpp:directive pos:start="159:2" pos:end="159:3">if</cpp:directive> <expr pos:start="159:5" pos:end="159:5"><literal type="number" pos:start="159:5" pos:end="159:5">0</literal></expr></cpp:if>

        printf ("malta_fpga_read: Bad register offset 0x" TARGET_FMT_lx "\n",

                addr);

<cpp:endif pos:start="165:1" pos:end="165:6">#<cpp:directive pos:start="165:2" pos:end="165:6">endif</cpp:directive></cpp:endif>

        <break pos:start="167:9" pos:end="167:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="171:5" pos:end="171:15">return <expr pos:start="171:12" pos:end="171:14"><name pos:start="171:12" pos:end="171:14">val</name></expr>;</return>

</block_content>}</block></function>
</unit>
