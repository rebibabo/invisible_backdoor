<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18896.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:33">virtio_net_receive</name><parameter_list pos:start="1:34" pos:end="1:87">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:49">VLANClientState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">nc</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:73"><decl pos:start="1:56" pos:end="1:73"><type pos:start="1:56" pos:end="1:73"><specifier pos:start="1:56" pos:end="1:60">const</specifier> <name pos:start="1:62" pos:end="1:68">uint8_t</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:73">buf</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:86"><decl pos:start="1:76" pos:end="1:86"><type pos:start="1:76" pos:end="1:86"><name pos:start="1:76" pos:end="1:81">size_t</name></type> <name pos:start="1:83" pos:end="1:86">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="5:5" pos:end="155:16">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">VirtIONet</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">n</name> <init pos:start="5:18" pos:end="5:54">= <expr pos:start="5:20" pos:end="5:54"><call pos:start="5:20" pos:end="5:46"><name pos:start="5:20" pos:end="5:28">DO_UPCAST</name><argument_list pos:start="5:29" pos:end="5:46">(<argument pos:start="5:30" pos:end="5:37"><expr pos:start="5:30" pos:end="5:37"><name pos:start="5:30" pos:end="5:37">NICState</name></expr></argument>, <argument pos:start="5:40" pos:end="5:41"><expr pos:start="5:40" pos:end="5:41"><name pos:start="5:40" pos:end="5:41">nc</name></expr></argument>, <argument pos:start="5:44" pos:end="5:45"><expr pos:start="5:44" pos:end="5:45"><name pos:start="5:44" pos:end="5:45">nc</name></expr></argument>)</argument_list></call><operator pos:start="5:47" pos:end="5:48">-&gt;</operator><name pos:start="5:49" pos:end="5:54">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:37"><name pos:start="7:5" pos:end="7:35"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:35">virtio_net_hdr_mrg_rxbuf</name></name> <modifier pos:start="7:37" pos:end="7:37">*</modifier></type><name pos:start="7:38" pos:end="7:41">mhdr</name> <init pos:start="7:43" pos:end="7:48">= <expr pos:start="7:45" pos:end="7:48"><name pos:start="7:45" pos:end="7:48">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:18">hdr_len</name></decl>, <decl pos:start="9:21" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:21" pos:end="9:26">offset</name></decl>, <decl pos:start="9:29" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:29" pos:end="9:29">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:18"><if pos:start="13:5" pos:end="15:18">if <condition pos:start="13:8" pos:end="13:45">(<expr pos:start="13:9" pos:end="13:44"><operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="13:44"><name pos:start="13:10" pos:end="13:31">virtio_net_can_receive</name><argument_list pos:start="13:32" pos:end="13:44">(<argument pos:start="13:33" pos:end="13:43"><expr pos:start="13:33" pos:end="13:43"><operator pos:start="13:33" pos:end="13:33">&amp;</operator><name pos:start="13:34" pos:end="13:43"><name pos:start="13:34" pos:end="13:34">n</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:39">nic</name><operator pos:start="13:40" pos:end="13:41">-&gt;</operator><name pos:start="13:42" pos:end="13:43">nc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:18"><block_content pos:start="15:9" pos:end="15:18">

        <return pos:start="15:9" pos:end="15:18">return <expr pos:start="15:16" pos:end="15:17"><operator pos:start="15:16" pos:end="15:16">-</operator><literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:61">/* hdr_len refers to the header we supply to the guest */</comment>

    <expr_stmt pos:start="21:5" pos:end="23:80"><expr pos:start="21:5" pos:end="23:79"><name pos:start="21:5" pos:end="21:11">hdr_len</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <ternary pos:start="21:15" pos:end="23:79"><condition pos:start="21:15" pos:end="21:36"><expr pos:start="21:15" pos:end="21:34"><name pos:start="21:15" pos:end="21:34"><name pos:start="21:15" pos:end="21:15">n</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:34">mergeable_rx_bufs</name></name></expr> ?</condition><then pos:start="23:9" pos:end="23:47">

        <expr pos:start="23:9" pos:end="23:47"><sizeof pos:start="23:9" pos:end="23:47">sizeof<argument_list pos:start="23:15" pos:end="23:47">(<argument pos:start="23:16" pos:end="23:46"><expr pos:start="23:16" pos:end="23:46">struct <name pos:start="23:23" pos:end="23:46">virtio_net_hdr_mrg_rxbuf</name></expr></argument>)</argument_list></sizeof></expr> </then><else pos:start="23:49" pos:end="23:79">: <expr pos:start="23:51" pos:end="23:79"><sizeof pos:start="23:51" pos:end="23:79">sizeof<argument_list pos:start="23:57" pos:end="23:79">(<argument pos:start="23:58" pos:end="23:78"><expr pos:start="23:58" pos:end="23:78">struct <name pos:start="23:65" pos:end="23:78">virtio_net_hdr</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>





    <if_stmt pos:start="29:5" pos:end="31:17"><if pos:start="29:5" pos:end="31:17">if <condition pos:start="29:8" pos:end="29:51">(<expr pos:start="29:9" pos:end="29:50"><operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:50"><name pos:start="29:10" pos:end="29:31">virtio_net_has_buffers</name><argument_list pos:start="29:32" pos:end="29:50">(<argument pos:start="29:33" pos:end="29:33"><expr pos:start="29:33" pos:end="29:33"><name pos:start="29:33" pos:end="29:33">n</name></expr></argument>, <argument pos:start="29:36" pos:end="29:49"><expr pos:start="29:36" pos:end="29:49"><name pos:start="29:36" pos:end="29:39">size</name> <operator pos:start="29:41" pos:end="29:41">+</operator> <name pos:start="29:43" pos:end="29:49">hdr_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:17"><block_content pos:start="31:9" pos:end="31:17">

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="37:20"><if pos:start="35:5" pos:end="37:20">if <condition pos:start="35:8" pos:end="35:38">(<expr pos:start="35:9" pos:end="35:37"><operator pos:start="35:9" pos:end="35:9">!</operator><call pos:start="35:10" pos:end="35:37"><name pos:start="35:10" pos:end="35:23">receive_filter</name><argument_list pos:start="35:24" pos:end="35:37">(<argument pos:start="35:25" pos:end="35:25"><expr pos:start="35:25" pos:end="35:25"><name pos:start="35:25" pos:end="35:25">n</name></expr></argument>, <argument pos:start="35:28" pos:end="35:30"><expr pos:start="35:28" pos:end="35:30"><name pos:start="35:28" pos:end="35:30">buf</name></expr></argument>, <argument pos:start="35:33" pos:end="35:36"><expr pos:start="35:33" pos:end="35:36"><name pos:start="35:33" pos:end="35:36">size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:20"><block_content pos:start="37:9" pos:end="37:20">

        <return pos:start="37:9" pos:end="37:20">return <expr pos:start="37:16" pos:end="37:19"><name pos:start="37:16" pos:end="37:19">size</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:19"><expr pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:10">offset</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <name pos:start="41:14" pos:end="41:14">i</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <literal type="number" pos:start="41:18" pos:end="41:18">0</literal></expr>;</expr_stmt>



    <while pos:start="45:5" pos:end="139:5">while <condition pos:start="45:11" pos:end="45:25">(<expr pos:start="45:12" pos:end="45:24"><name pos:start="45:12" pos:end="45:17">offset</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <name pos:start="45:21" pos:end="45:24">size</name></expr>)</condition> <block pos:start="45:27" pos:end="139:5">{<block_content pos:start="47:9" pos:end="137:22">

        <decl_stmt pos:start="47:9" pos:end="47:30"><decl pos:start="47:9" pos:end="47:29"><type pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:24">VirtQueueElement</name></type> <name pos:start="47:26" pos:end="47:29">elem</name></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:23"><decl pos:start="49:9" pos:end="49:15"><type pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">int</name></type> <name pos:start="49:13" pos:end="49:15">len</name></decl>, <decl pos:start="49:18" pos:end="49:22"><type ref="prev" pos:start="49:9" pos:end="49:11"/><name pos:start="49:18" pos:end="49:22">total</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:44"><decl pos:start="51:9" pos:end="51:43"><type pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:14">struct</name> <name pos:start="51:16" pos:end="51:20">iovec</name></name></type> <name pos:start="51:22" pos:end="51:43"><name pos:start="51:22" pos:end="51:23">sg</name><index pos:start="51:24" pos:end="51:43">[<expr pos:start="51:25" pos:end="51:42"><name pos:start="51:25" pos:end="51:42">VIRTQUEUE_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:18"><expr pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:13">total</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <literal type="number" pos:start="55:17" pos:end="55:17">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="59:9" pos:end="75:9"><if pos:start="59:9" pos:end="75:9">if <condition pos:start="59:12" pos:end="61:48">(<expr pos:start="59:13" pos:end="61:47"><operator pos:start="59:13" pos:end="59:13">(</operator><name pos:start="59:14" pos:end="59:14">i</name> <operator pos:start="59:16" pos:end="59:17">!=</operator> <literal type="number" pos:start="59:19" pos:end="59:19">0</literal> <operator pos:start="59:21" pos:end="59:22">&amp;&amp;</operator> <operator pos:start="59:24" pos:end="59:24">!</operator><name pos:start="59:25" pos:end="59:44"><name pos:start="59:25" pos:end="59:25">n</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:44">mergeable_rx_bufs</name></name><operator pos:start="59:45" pos:end="59:45">)</operator> <operator pos:start="59:47" pos:end="59:48">||</operator>

            <call pos:start="61:13" pos:end="61:42"><name pos:start="61:13" pos:end="61:25">virtqueue_pop</name><argument_list pos:start="61:26" pos:end="61:42">(<argument pos:start="61:27" pos:end="61:34"><expr pos:start="61:27" pos:end="61:34"><name pos:start="61:27" pos:end="61:34"><name pos:start="61:27" pos:end="61:27">n</name><operator pos:start="61:28" pos:end="61:29">-&gt;</operator><name pos:start="61:30" pos:end="61:34">rx_vq</name></name></expr></argument>, <argument pos:start="61:37" pos:end="61:41"><expr pos:start="61:37" pos:end="61:41"><operator pos:start="61:37" pos:end="61:37">&amp;</operator><name pos:start="61:38" pos:end="61:41">elem</name></expr></argument>)</argument_list></call> <operator pos:start="61:44" pos:end="61:45">==</operator> <literal type="number" pos:start="61:47" pos:end="61:47">0</literal></expr>)</condition> <block pos:start="61:50" pos:end="75:9">{<block_content pos:start="63:13" pos:end="73:20">

            <if_stmt pos:start="63:13" pos:end="65:26"><if pos:start="63:13" pos:end="65:26">if <condition pos:start="63:16" pos:end="63:23">(<expr pos:start="63:17" pos:end="63:22"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:20">==</operator> <literal type="number" pos:start="63:22" pos:end="63:22">0</literal></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:26"><block_content pos:start="65:17" pos:end="65:26">

                <return pos:start="65:17" pos:end="65:26">return <expr pos:start="65:24" pos:end="65:25"><operator pos:start="65:24" pos:end="65:24">-</operator><literal type="number" pos:start="65:25" pos:end="65:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="67:13" pos:end="71:43"><expr pos:start="67:13" pos:end="71:42"><call pos:start="67:13" pos:end="71:42"><name pos:start="67:13" pos:end="67:19">fprintf</name><argument_list pos:start="67:20" pos:end="71:42">(<argument pos:start="67:21" pos:end="67:26"><expr pos:start="67:21" pos:end="67:26"><name pos:start="67:21" pos:end="67:26">stderr</name></expr></argument>, <argument pos:start="67:29" pos:end="69:57"><expr pos:start="67:29" pos:end="69:57"><literal type="string" pos:start="67:29" pos:end="67:60">"virtio-net truncating packet: "</literal>

                    <literal type="string" pos:start="69:21" pos:end="69:57">"offset %zd, size %zd, hdr_len %zd\n"</literal></expr></argument>,

                    <argument pos:start="71:21" pos:end="71:26"><expr pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:26">offset</name></expr></argument>, <argument pos:start="71:29" pos:end="71:32"><expr pos:start="71:29" pos:end="71:32"><name pos:start="71:29" pos:end="71:32">size</name></expr></argument>, <argument pos:start="71:35" pos:end="71:41"><expr pos:start="71:35" pos:end="71:41"><name pos:start="71:35" pos:end="71:41">hdr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:20"><expr pos:start="73:13" pos:end="73:19"><call pos:start="73:13" pos:end="73:19"><name pos:start="73:13" pos:end="73:16">exit</name><argument_list pos:start="73:17" pos:end="73:19">(<argument pos:start="73:18" pos:end="73:18"><expr pos:start="73:18" pos:end="73:18"><literal type="number" pos:start="73:18" pos:end="73:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:28">(<expr pos:start="79:13" pos:end="79:27"><name pos:start="79:13" pos:end="79:23"><name pos:start="79:13" pos:end="79:16">elem</name><operator pos:start="79:17" pos:end="79:17">.</operator><name pos:start="79:18" pos:end="79:23">in_num</name></name> <operator pos:start="79:25" pos:end="79:25">&lt;</operator> <literal type="number" pos:start="79:27" pos:end="79:27">1</literal></expr>)</condition> <block pos:start="79:30" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:20">

            <expr_stmt pos:start="81:13" pos:end="81:81"><expr pos:start="81:13" pos:end="81:80"><call pos:start="81:13" pos:end="81:80"><name pos:start="81:13" pos:end="81:19">fprintf</name><argument_list pos:start="81:20" pos:end="81:80">(<argument pos:start="81:21" pos:end="81:26"><expr pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:26">stderr</name></expr></argument>, <argument pos:start="81:29" pos:end="81:79"><expr pos:start="81:29" pos:end="81:79"><literal type="string" pos:start="81:29" pos:end="81:79">"virtio-net receive queue contains no in buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:20"><expr pos:start="83:13" pos:end="83:19"><call pos:start="83:13" pos:end="83:19"><name pos:start="83:13" pos:end="83:16">exit</name><argument_list pos:start="83:17" pos:end="83:19">(<argument pos:start="83:18" pos:end="83:18"><expr pos:start="83:18" pos:end="83:18"><literal type="number" pos:start="83:18" pos:end="83:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:70">(<expr pos:start="89:13" pos:end="89:69"><operator pos:start="89:13" pos:end="89:13">!</operator><name pos:start="89:14" pos:end="89:33"><name pos:start="89:14" pos:end="89:14">n</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:33">mergeable_rx_bufs</name></name> <operator pos:start="89:35" pos:end="89:36">&amp;&amp;</operator> <name pos:start="89:38" pos:end="89:50"><name pos:start="89:38" pos:end="89:41">elem</name><operator pos:start="89:42" pos:end="89:42">.</operator><name pos:start="89:43" pos:end="89:47">in_sg</name><index pos:start="89:48" pos:end="89:50">[<expr pos:start="89:49" pos:end="89:49"><literal type="number" pos:start="89:49" pos:end="89:49">0</literal></expr>]</index></name><operator pos:start="89:51" pos:end="89:51">.</operator><name pos:start="89:52" pos:end="89:58">iov_len</name> <operator pos:start="89:60" pos:end="89:61">!=</operator> <name pos:start="89:63" pos:end="89:69">hdr_len</name></expr>)</condition> <block pos:start="89:72" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:20">

            <expr_stmt pos:start="91:13" pos:end="91:72"><expr pos:start="91:13" pos:end="91:71"><call pos:start="91:13" pos:end="91:71"><name pos:start="91:13" pos:end="91:19">fprintf</name><argument_list pos:start="91:20" pos:end="91:71">(<argument pos:start="91:21" pos:end="91:26"><expr pos:start="91:21" pos:end="91:26"><name pos:start="91:21" pos:end="91:26">stderr</name></expr></argument>, <argument pos:start="91:29" pos:end="91:70"><expr pos:start="91:29" pos:end="91:70"><literal type="string" pos:start="91:29" pos:end="91:70">"virtio-net header not in first element\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:20"><expr pos:start="93:13" pos:end="93:19"><call pos:start="93:13" pos:end="93:19"><name pos:start="93:13" pos:end="93:16">exit</name><argument_list pos:start="93:17" pos:end="93:19">(<argument pos:start="93:18" pos:end="93:18"><expr pos:start="93:18" pos:end="93:18"><literal type="number" pos:start="93:18" pos:end="93:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:65"><expr pos:start="99:9" pos:end="99:64"><call pos:start="99:9" pos:end="99:64"><name pos:start="99:9" pos:end="99:14">memcpy</name><argument_list pos:start="99:15" pos:end="99:64">(<argument pos:start="99:16" pos:end="99:18"><expr pos:start="99:16" pos:end="99:18"><operator pos:start="99:16" pos:end="99:16">&amp;</operator><name pos:start="99:17" pos:end="99:18">sg</name></expr></argument>, <argument pos:start="99:21" pos:end="99:34"><expr pos:start="99:21" pos:end="99:34"><operator pos:start="99:21" pos:end="99:21">&amp;</operator><name pos:start="99:22" pos:end="99:34"><name pos:start="99:22" pos:end="99:25">elem</name><operator pos:start="99:26" pos:end="99:26">.</operator><name pos:start="99:27" pos:end="99:31">in_sg</name><index pos:start="99:32" pos:end="99:34">[<expr pos:start="99:33" pos:end="99:33"><literal type="number" pos:start="99:33" pos:end="99:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="99:37" pos:end="99:63"><expr pos:start="99:37" pos:end="99:63"><sizeof pos:start="99:37" pos:end="99:49">sizeof<argument_list pos:start="99:43" pos:end="99:49">(<argument pos:start="99:44" pos:end="99:48"><expr pos:start="99:44" pos:end="99:48"><name pos:start="99:44" pos:end="99:48"><name pos:start="99:44" pos:end="99:45">sg</name><index pos:start="99:46" pos:end="99:48">[<expr pos:start="99:47" pos:end="99:47"><literal type="number" pos:start="99:47" pos:end="99:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator pos:start="99:51" pos:end="99:51">*</operator> <name pos:start="99:53" pos:end="99:63"><name pos:start="99:53" pos:end="99:56">elem</name><operator pos:start="99:57" pos:end="99:57">.</operator><name pos:start="99:58" pos:end="99:63">in_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="103:9" pos:end="117:9"><if pos:start="103:9" pos:end="117:9">if <condition pos:start="103:12" pos:end="103:19">(<expr pos:start="103:13" pos:end="103:18"><name pos:start="103:13" pos:end="103:13">i</name> <operator pos:start="103:15" pos:end="103:16">==</operator> <literal type="number" pos:start="103:18" pos:end="103:18">0</literal></expr>)</condition> <block pos:start="103:21" pos:end="117:9">{<block_content pos:start="105:13" pos:end="115:29">

            <if_stmt pos:start="105:13" pos:end="107:73"><if pos:start="105:13" pos:end="107:73">if <condition pos:start="105:16" pos:end="105:37">(<expr pos:start="105:17" pos:end="105:36"><name pos:start="105:17" pos:end="105:36"><name pos:start="105:17" pos:end="105:17">n</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:36">mergeable_rx_bufs</name></name></expr>)</condition><block type="pseudo" pos:start="107:17" pos:end="107:73"><block_content pos:start="107:17" pos:end="107:73">

                <expr_stmt pos:start="107:17" pos:end="107:73"><expr pos:start="107:17" pos:end="107:72"><name pos:start="107:17" pos:end="107:20">mhdr</name> <operator pos:start="107:22" pos:end="107:22">=</operator> <operator pos:start="107:24" pos:end="107:24">(</operator>struct <name pos:start="107:32" pos:end="107:55">virtio_net_hdr_mrg_rxbuf</name> <operator pos:start="107:57" pos:end="107:57">*</operator><operator pos:start="107:58" pos:end="107:58">)</operator><name pos:start="107:59" pos:end="107:63"><name pos:start="107:59" pos:end="107:60">sg</name><index pos:start="107:61" pos:end="107:63">[<expr pos:start="107:62" pos:end="107:62"><literal type="number" pos:start="107:62" pos:end="107:62">0</literal></expr>]</index></name><operator pos:start="107:64" pos:end="107:64">.</operator><name pos:start="107:65" pos:end="107:72">iov_base</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="111:13" pos:end="113:75"><expr pos:start="111:13" pos:end="113:74"><name pos:start="111:13" pos:end="111:18">offset</name> <operator pos:start="111:20" pos:end="111:21">+=</operator> <call pos:start="111:23" pos:end="113:74"><name pos:start="111:23" pos:end="111:36">receive_header</name><argument_list pos:start="111:37" pos:end="113:74">(<argument pos:start="111:38" pos:end="111:38"><expr pos:start="111:38" pos:end="111:38"><name pos:start="111:38" pos:end="111:38">n</name></expr></argument>, <argument pos:start="111:41" pos:end="111:42"><expr pos:start="111:41" pos:end="111:42"><name pos:start="111:41" pos:end="111:42">sg</name></expr></argument>, <argument pos:start="111:45" pos:end="111:55"><expr pos:start="111:45" pos:end="111:55"><name pos:start="111:45" pos:end="111:55"><name pos:start="111:45" pos:end="111:48">elem</name><operator pos:start="111:49" pos:end="111:49">.</operator><name pos:start="111:50" pos:end="111:55">in_num</name></name></expr></argument>,

                                     <argument pos:start="113:38" pos:end="113:49"><expr pos:start="113:38" pos:end="113:49"><name pos:start="113:38" pos:end="113:40">buf</name> <operator pos:start="113:42" pos:end="113:42">+</operator> <name pos:start="113:44" pos:end="113:49">offset</name></expr></argument>, <argument pos:start="113:52" pos:end="113:64"><expr pos:start="113:52" pos:end="113:64"><name pos:start="113:52" pos:end="113:55">size</name> <operator pos:start="113:57" pos:end="113:57">-</operator> <name pos:start="113:59" pos:end="113:64">offset</name></expr></argument>, <argument pos:start="113:67" pos:end="113:73"><expr pos:start="113:67" pos:end="113:73"><name pos:start="113:67" pos:end="113:73">hdr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:29"><expr pos:start="115:13" pos:end="115:28"><name pos:start="115:13" pos:end="115:17">total</name> <operator pos:start="115:19" pos:end="115:20">+=</operator> <name pos:start="115:22" pos:end="115:28">hdr_len</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="121:9" pos:end="121:34">/* copy in packet.  ugh */</comment>

        <expr_stmt pos:start="123:9" pos:end="125:56"><expr pos:start="123:9" pos:end="125:55"><name pos:start="123:9" pos:end="123:11">len</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <call pos:start="123:15" pos:end="125:55"><name pos:start="123:15" pos:end="123:26">iov_from_buf</name><argument_list pos:start="123:27" pos:end="125:55">(<argument pos:start="123:28" pos:end="123:29"><expr pos:start="123:28" pos:end="123:29"><name pos:start="123:28" pos:end="123:29">sg</name></expr></argument>, <argument pos:start="123:32" pos:end="123:42"><expr pos:start="123:32" pos:end="123:42"><name pos:start="123:32" pos:end="123:42"><name pos:start="123:32" pos:end="123:35">elem</name><operator pos:start="123:36" pos:end="123:36">.</operator><name pos:start="123:37" pos:end="123:42">in_num</name></name></expr></argument>,

                           <argument pos:start="125:28" pos:end="125:39"><expr pos:start="125:28" pos:end="125:39"><name pos:start="125:28" pos:end="125:30">buf</name> <operator pos:start="125:32" pos:end="125:32">+</operator> <name pos:start="125:34" pos:end="125:39">offset</name></expr></argument>, <argument pos:start="125:42" pos:end="125:54"><expr pos:start="125:42" pos:end="125:54"><name pos:start="125:42" pos:end="125:45">size</name> <operator pos:start="125:47" pos:end="125:47">-</operator> <name pos:start="125:49" pos:end="125:54">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:21"><expr pos:start="127:9" pos:end="127:20"><name pos:start="127:9" pos:end="127:13">total</name> <operator pos:start="127:15" pos:end="127:16">+=</operator> <name pos:start="127:18" pos:end="127:20">len</name></expr>;</expr_stmt>



        <comment type="block" pos:start="131:9" pos:end="131:31">/* signal other side */</comment>

        <expr_stmt pos:start="133:9" pos:end="133:52"><expr pos:start="133:9" pos:end="133:51"><call pos:start="133:9" pos:end="133:51"><name pos:start="133:9" pos:end="133:22">virtqueue_fill</name><argument_list pos:start="133:23" pos:end="133:51">(<argument pos:start="133:24" pos:end="133:31"><expr pos:start="133:24" pos:end="133:31"><name pos:start="133:24" pos:end="133:31"><name pos:start="133:24" pos:end="133:24">n</name><operator pos:start="133:25" pos:end="133:26">-&gt;</operator><name pos:start="133:27" pos:end="133:31">rx_vq</name></name></expr></argument>, <argument pos:start="133:34" pos:end="133:38"><expr pos:start="133:34" pos:end="133:38"><operator pos:start="133:34" pos:end="133:34">&amp;</operator><name pos:start="133:35" pos:end="133:38">elem</name></expr></argument>, <argument pos:start="133:41" pos:end="133:45"><expr pos:start="133:41" pos:end="133:45"><name pos:start="133:41" pos:end="133:45">total</name></expr></argument>, <argument pos:start="133:48" pos:end="133:50"><expr pos:start="133:48" pos:end="133:50"><name pos:start="133:48" pos:end="133:48">i</name><operator pos:start="133:49" pos:end="133:50">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:22"><expr pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:14">offset</name> <operator pos:start="137:16" pos:end="137:17">+=</operator> <name pos:start="137:19" pos:end="137:21">len</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="143:5" pos:end="145:30"><if pos:start="143:5" pos:end="145:30">if <condition pos:start="143:8" pos:end="143:13">(<expr pos:start="143:9" pos:end="143:12"><name pos:start="143:9" pos:end="143:12">mhdr</name></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:30"><block_content pos:start="145:9" pos:end="145:30">

        <expr_stmt pos:start="145:9" pos:end="145:30"><expr pos:start="145:9" pos:end="145:29"><name pos:start="145:9" pos:end="145:25"><name pos:start="145:9" pos:end="145:12">mhdr</name><operator pos:start="145:13" pos:end="145:14">-&gt;</operator><name pos:start="145:15" pos:end="145:25">num_buffers</name></name> <operator pos:start="145:27" pos:end="145:27">=</operator> <name pos:start="145:29" pos:end="145:29">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:33"><expr pos:start="149:5" pos:end="149:32"><call pos:start="149:5" pos:end="149:32"><name pos:start="149:5" pos:end="149:19">virtqueue_flush</name><argument_list pos:start="149:20" pos:end="149:32">(<argument pos:start="149:21" pos:end="149:28"><expr pos:start="149:21" pos:end="149:28"><name pos:start="149:21" pos:end="149:28"><name pos:start="149:21" pos:end="149:21">n</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:28">rx_vq</name></name></expr></argument>, <argument pos:start="149:31" pos:end="149:31"><expr pos:start="149:31" pos:end="149:31"><name pos:start="149:31" pos:end="149:31">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:38"><expr pos:start="151:5" pos:end="151:37"><call pos:start="151:5" pos:end="151:37"><name pos:start="151:5" pos:end="151:17">virtio_notify</name><argument_list pos:start="151:18" pos:end="151:37">(<argument pos:start="151:19" pos:end="151:26"><expr pos:start="151:19" pos:end="151:26"><operator pos:start="151:19" pos:end="151:19">&amp;</operator><name pos:start="151:20" pos:end="151:26"><name pos:start="151:20" pos:end="151:20">n</name><operator pos:start="151:21" pos:end="151:22">-&gt;</operator><name pos:start="151:23" pos:end="151:26">vdev</name></name></expr></argument>, <argument pos:start="151:29" pos:end="151:36"><expr pos:start="151:29" pos:end="151:36"><name pos:start="151:29" pos:end="151:36"><name pos:start="151:29" pos:end="151:29">n</name><operator pos:start="151:30" pos:end="151:31">-&gt;</operator><name pos:start="151:32" pos:end="151:36">rx_vq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="155:5" pos:end="155:16">return <expr pos:start="155:12" pos:end="155:15"><name pos:start="155:12" pos:end="155:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
