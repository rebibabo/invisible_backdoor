<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15325.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:35"><name pos:start="1:1" pos:end="1:14">H264_CHROMA_MC</name><argument_list pos:start="1:15" pos:end="1:35">(<argument pos:start="1:16" pos:end="1:19">put_</argument>       , <argument pos:start="1:29" pos:end="1:34">op_put</argument>)</argument_list></macro>

<macro pos:start="3:1" pos:end="900:0"><name pos:start="3:1" pos:end="3:14">H264_CHROMA_MC</name><argument_list pos:start="3:15" pos:end="900:0">(<argument pos:start="3:16" pos:end="3:19">avg_</argument>       , <argument pos:start="3:29" pos:end="3:34">op_avg</argument>)</argument_list></macro>

<cpp:undef pos:start="5:1" pos:end="5:13">#<cpp:directive pos:start="5:2" pos:end="5:6">undef</cpp:directive> <name pos:start="5:8" pos:end="5:13">op_avg</name></cpp:undef>

<cpp:undef pos:start="7:1" pos:end="7:13">#<cpp:directive pos:start="7:2" pos:end="7:6">undef</cpp:directive> <name pos:start="7:8" pos:end="7:13">op_put</name></cpp:undef>



<cpp:define pos:start="11:1" pos:end="891:58">#<cpp:directive pos:start="11:2" pos:end="11:7">define</cpp:directive> <cpp:macro pos:start="11:9" pos:end="11:37"><name pos:start="11:9" pos:end="11:20">H264_LOWPASS</name><parameter_list pos:start="11:21" pos:end="11:37">(<parameter pos:start="11:22" pos:end="11:27"><type pos:start="11:22" pos:end="11:27"><name pos:start="11:22" pos:end="11:27">OPNAME</name></type></parameter>, <parameter pos:start="11:30" pos:end="11:31"><type pos:start="11:30" pos:end="11:31"><name pos:start="11:30" pos:end="11:31">OP</name></type></parameter>, <parameter pos:start="11:34" pos:end="11:36"><type pos:start="11:34" pos:end="11:36"><name pos:start="11:34" pos:end="11:36">OP2</name></type></parameter>)</parameter_list></cpp:macro> \

<cpp:value pos:start="13:1" pos:end="891:58">static av_unused void FUNC(OPNAME ## h264_qpel2_h_lowpass)(uint8_t *p_dst, uint8_t *p_src, int dstStride, int srcStride){\

    const int h=2;\

    INIT_CLIP\

    int i;\

    pixel *dst = (pixel*)p_dst;\

    pixel *src = (pixel*)p_src;\

    dstStride &gt;&gt;= sizeof(pixel)-1;\

    srcStride &gt;&gt;= sizeof(pixel)-1;\

    for(i=0; i&lt;h; i++)\

    {\

        OP(dst[0], (src[0]+src[1])*20 - (src[-1]+src[2])*5 + (src[-2]+src[3]));\

        OP(dst[1], (src[1]+src[2])*20 - (src[0 ]+src[3])*5 + (src[-1]+src[4]));\

        dst+=dstStride;\

        src+=srcStride;\

    }\

}\

\

static av_unused void FUNC(OPNAME ## h264_qpel2_v_lowpass)(uint8_t *p_dst, uint8_t *p_src, int dstStride, int srcStride){\

    const int w=2;\

    INIT_CLIP\

    int i;\

    pixel *dst = (pixel*)p_dst;\

    pixel *src = (pixel*)p_src;\

    dstStride &gt;&gt;= sizeof(pixel)-1;\

    srcStride &gt;&gt;= sizeof(pixel)-1;\

    for(i=0; i&lt;w; i++)\

    {\

        const int srcB= src[-2*srcStride];\

        const int srcA= src[-1*srcStride];\

        const int src0= src[0 *srcStride];\

        const int src1= src[1 *srcStride];\

        const int src2= src[2 *srcStride];\

        const int src3= src[3 *srcStride];\

        const int src4= src[4 *srcStride];\

        OP(dst[0*dstStride], (src0+src1)*20 - (srcA+src2)*5 + (srcB+src3));\

        OP(dst[1*dstStride], (src1+src2)*20 - (src0+src3)*5 + (srcA+src4));\

        dst++;\

        src++;\

    }\

}\

\

static av_unused void FUNC(OPNAME ## h264_qpel2_hv_lowpass)(uint8_t *p_dst, pixeltmp *tmp, uint8_t *p_src, int dstStride, int tmpStride, int srcStride){\

    const int h=2;\

    const int w=2;\

    const int pad = (BIT_DEPTH &gt; 9) ? (-10 * ((1&lt;&lt;BIT_DEPTH)-1)) : 0;\

    INIT_CLIP\

    int i;\

    pixel *dst = (pixel*)p_dst;\

    pixel *src = (pixel*)p_src;\

    dstStride &gt;&gt;= sizeof(pixel)-1;\

    srcStride &gt;&gt;= sizeof(pixel)-1;\

    src -= 2*srcStride;\

    for(i=0; i&lt;h+5; i++)\

    {\

        tmp[0]= (src[0]+src[1])*20 - (src[-1]+src[2])*5 + (src[-2]+src[3]) + pad;\

        tmp[1]= (src[1]+src[2])*20 - (src[0 ]+src[3])*5 + (src[-1]+src[4]) + pad;\

        tmp+=tmpStride;\

        src+=srcStride;\

    }\

    tmp -= tmpStride*(h+5-2);\

    for(i=0; i&lt;w; i++)\

    {\

        const int tmpB= tmp[-2*tmpStride] - pad;\

        const int tmpA= tmp[-1*tmpStride] - pad;\

        const int tmp0= tmp[0 *tmpStride] - pad;\

        const int tmp1= tmp[1 *tmpStride] - pad;\

        const int tmp2= tmp[2 *tmpStride] - pad;\

        const int tmp3= tmp[3 *tmpStride] - pad;\

        const int tmp4= tmp[4 *tmpStride] - pad;\

        OP2(dst[0*dstStride], (tmp0+tmp1)*20 - (tmpA+tmp2)*5 + (tmpB+tmp3));\

        OP2(dst[1*dstStride], (tmp1+tmp2)*20 - (tmp0+tmp3)*5 + (tmpA+tmp4));\

        dst++;\

        tmp++;\

    }\

}\

static void FUNC(OPNAME ## h264_qpel4_h_lowpass)(uint8_t *p_dst, uint8_t *p_src, int dstStride, int srcStride){\

    const int h=4;\

    INIT_CLIP\

    int i;\

    pixel *dst = (pixel*)p_dst;\

    pixel *src = (pixel*)p_src;\

    dstStride &gt;&gt;= sizeof(pixel)-1;\

    srcStride &gt;&gt;= sizeof(pixel)-1;\

    for(i=0; i&lt;h; i++)\

    {\

        OP(dst[0], (src[0]+src[1])*20 - (src[-1]+src[2])*5 + (src[-2]+src[3]));\

        OP(dst[1], (src[1]+src[2])*20 - (src[0 ]+src[3])*5 + (src[-1]+src[4]));\

        OP(dst[2], (src[2]+src[3])*20 - (src[1 ]+src[4])*5 + (src[0 ]+src[5]));\

        OP(dst[3], (src[3]+src[4])*20 - (src[2 ]+src[5])*5 + (src[1 ]+src[6]));\

        dst+=dstStride;\

        src+=srcStride;\

    }\

}\

\

static void FUNC(OPNAME ## h264_qpel4_v_lowpass)(uint8_t *p_dst, uint8_t *p_src, int dstStride, int srcStride){\

    const int w=4;\

    INIT_CLIP\

    int i;\

    pixel *dst = (pixel*)p_dst;\

    pixel *src = (pixel*)p_src;\

    dstStride &gt;&gt;= sizeof(pixel)-1;\

    srcStride &gt;&gt;= sizeof(pixel)-1;\

    for(i=0; i&lt;w; i++)\

    {\

        const int srcB= src[-2*srcStride];\

        const int srcA= src[-1*srcStride];\

        const int src0= src[0 *srcStride];\

        const int src1= src[1 *srcStride];\

        const int src2= src[2 *srcStride];\

        const int src3= src[3 *srcStride];\

        const int src4= src[4 *srcStride];\

        const int src5= src[5 *srcStride];\

        const int src6= src[6 *srcStride];\

        OP(dst[0*dstStride], (src0+src1)*20 - (srcA+src2)*5 + (srcB+src3));\

        OP(dst[1*dstStride], (src1+src2)*20 - (src0+src3)*5 + (srcA+src4));\

        OP(dst[2*dstStride], (src2+src3)*20 - (src1+src4)*5 + (src0+src5));\

        OP(dst[3*dstStride], (src3+src4)*20 - (src2+src5)*5 + (src1+src6));\

        dst++;\

        src++;\

    }\

}\

\

static void FUNC(OPNAME ## h264_qpel4_hv_lowpass)(uint8_t *p_dst, pixeltmp *tmp, uint8_t *p_src, int dstStride, int tmpStride, int srcStride){\

    const int h=4;\

    const int w=4;\

    const int pad = (BIT_DEPTH &gt; 9) ? (-10 * ((1&lt;&lt;BIT_DEPTH)-1)) : 0;\

    INIT_CLIP\

    int i;\

    pixel *dst = (pixel*)p_dst;\

    pixel *src = (pixel*)p_src;\

    dstStride &gt;&gt;= sizeof(pixel)-1;\

    srcStride &gt;&gt;= sizeof(pixel)-1;\

    src -= 2*srcStride;\

    for(i=0; i&lt;h+5; i++)\

    {\

        tmp[0]= (src[0]+src[1])*20 - (src[-1]+src[2])*5 + (src[-2]+src[3]) + pad;\

        tmp[1]= (src[1]+src[2])*20 - (src[0 ]+src[3])*5 + (src[-1]+src[4]) + pad;\

        tmp[2]= (src[2]+src[3])*20 - (src[1 ]+src[4])*5 + (src[0 ]+src[5]) + pad;\

        tmp[3]= (src[3]+src[4])*20 - (src[2 ]+src[5])*5 + (src[1 ]+src[6]) + pad;\

        tmp+=tmpStride;\

        src+=srcStride;\

    }\

    tmp -= tmpStride*(h+5-2);\

    for(i=0; i&lt;w; i++)\

    {\

        const int tmpB= tmp[-2*tmpStride] - pad;\

        const int tmpA= tmp[-1*tmpStride] - pad;\

        const int tmp0= tmp[0 *tmpStride] - pad;\

        const int tmp1= tmp[1 *tmpStride] - pad;\

        const int tmp2= tmp[2 *tmpStride] - pad;\

        const int tmp3= tmp[3 *tmpStride] - pad;\

        const int tmp4= tmp[4 *tmpStride] - pad;\

        const int tmp5= tmp[5 *tmpStride] - pad;\

        const int tmp6= tmp[6 *tmpStride] - pad;\

        OP2(dst[0*dstStride], (tmp0+tmp1)*20 - (tmpA+tmp2)*5 + (tmpB+tmp3));\

        OP2(dst[1*dstStride], (tmp1+tmp2)*20 - (tmp0+tmp3)*5 + (tmpA+tmp4));\

        OP2(dst[2*dstStride], (tmp2+tmp3)*20 - (tmp1+tmp4)*5 + (tmp0+tmp5));\

        OP2(dst[3*dstStride], (tmp3+tmp4)*20 - (tmp2+tmp5)*5 + (tmp1+tmp6));\

        dst++;\

        tmp++;\

    }\

}\

\

static void FUNC(OPNAME ## h264_qpel8_h_lowpass)(uint8_t *p_dst, uint8_t *p_src, int dstStride, int srcStride){\

    const int h=8;\

    INIT_CLIP\

    int i;\

    pixel *dst = (pixel*)p_dst;\

    pixel *src = (pixel*)p_src;\

    dstStride &gt;&gt;= sizeof(pixel)-1;\

    srcStride &gt;&gt;= sizeof(pixel)-1;\

    for(i=0; i&lt;h; i++)\

    {\

        OP(dst[0], (src[0]+src[1])*20 - (src[-1]+src[2])*5 + (src[-2]+src[3 ]));\

        OP(dst[1], (src[1]+src[2])*20 - (src[0 ]+src[3])*5 + (src[-1]+src[4 ]));\

        OP(dst[2], (src[2]+src[3])*20 - (src[1 ]+src[4])*5 + (src[0 ]+src[5 ]));\

        OP(dst[3], (src[3]+src[4])*20 - (src[2 ]+src[5])*5 + (src[1 ]+src[6 ]));\

        OP(dst[4], (src[4]+src[5])*20 - (src[3 ]+src[6])*5 + (src[2 ]+src[7 ]));\

        OP(dst[5], (src[5]+src[6])*20 - (src[4 ]+src[7])*5 + (src[3 ]+src[8 ]));\

        OP(dst[6], (src[6]+src[7])*20 - (src[5 ]+src[8])*5 + (src[4 ]+src[9 ]));\

        OP(dst[7], (src[7]+src[8])*20 - (src[6 ]+src[9])*5 + (src[5 ]+src[10]));\

        dst+=dstStride;\

        src+=srcStride;\

    }\

}\

\

static void FUNC(OPNAME ## h264_qpel8_v_lowpass)(uint8_t *p_dst, uint8_t *p_src, int dstStride, int srcStride){\

    const int w=8;\

    INIT_CLIP\

    int i;\

    pixel *dst = (pixel*)p_dst;\

    pixel *src = (pixel*)p_src;\

    dstStride &gt;&gt;= sizeof(pixel)-1;\

    srcStride &gt;&gt;= sizeof(pixel)-1;\

    for(i=0; i&lt;w; i++)\

    {\

        const int srcB= src[-2*srcStride];\

        const int srcA= src[-1*srcStride];\

        const int src0= src[0 *srcStride];\

        const int src1= src[1 *srcStride];\

        const int src2= src[2 *srcStride];\

        const int src3= src[3 *srcStride];\

        const int src4= src[4 *srcStride];\

        const int src5= src[5 *srcStride];\

        const int src6= src[6 *srcStride];\

        const int src7= src[7 *srcStride];\

        const int src8= src[8 *srcStride];\

        const int src9= src[9 *srcStride];\

        const int src10=src[10*srcStride];\

        OP(dst[0*dstStride], (src0+src1)*20 - (srcA+src2)*5 + (srcB+src3));\

        OP(dst[1*dstStride], (src1+src2)*20 - (src0+src3)*5 + (srcA+src4));\

        OP(dst[2*dstStride], (src2+src3)*20 - (src1+src4)*5 + (src0+src5));\

        OP(dst[3*dstStride], (src3+src4)*20 - (src2+src5)*5 + (src1+src6));\

        OP(dst[4*dstStride], (src4+src5)*20 - (src3+src6)*5 + (src2+src7));\

        OP(dst[5*dstStride], (src5+src6)*20 - (src4+src7)*5 + (src3+src8));\

        OP(dst[6*dstStride], (src6+src7)*20 - (src5+src8)*5 + (src4+src9));\

        OP(dst[7*dstStride], (src7+src8)*20 - (src6+src9)*5 + (src5+src10));\

        dst++;\

        src++;\

    }\

}\

\

static void FUNC(OPNAME ## h264_qpel8_hv_lowpass)(uint8_t *p_dst, pixeltmp *tmp, uint8_t *p_src, int dstStride, int tmpStride, int srcStride){\

    const int h=8;\

    const int w=8;\

    const int pad = (BIT_DEPTH &gt; 9) ? (-10 * ((1&lt;&lt;BIT_DEPTH)-1)) : 0;\

    INIT_CLIP\

    int i;\

    pixel *dst = (pixel*)p_dst;\

    pixel *src = (pixel*)p_src;\

    dstStride &gt;&gt;= sizeof(pixel)-1;\

    srcStride &gt;&gt;= sizeof(pixel)-1;\

    src -= 2*srcStride;\

    for(i=0; i&lt;h+5; i++)\

    {\

        tmp[0]= (src[0]+src[1])*20 - (src[-1]+src[2])*5 + (src[-2]+src[3 ]) + pad;\

        tmp[1]= (src[1]+src[2])*20 - (src[0 ]+src[3])*5 + (src[-1]+src[4 ]) + pad;\

        tmp[2]= (src[2]+src[3])*20 - (src[1 ]+src[4])*5 + (src[0 ]+src[5 ]) + pad;\

        tmp[3]= (src[3]+src[4])*20 - (src[2 ]+src[5])*5 + (src[1 ]+src[6 ]) + pad;\

        tmp[4]= (src[4]+src[5])*20 - (src[3 ]+src[6])*5 + (src[2 ]+src[7 ]) + pad;\

        tmp[5]= (src[5]+src[6])*20 - (src[4 ]+src[7])*5 + (src[3 ]+src[8 ]) + pad;\

        tmp[6]= (src[6]+src[7])*20 - (src[5 ]+src[8])*5 + (src[4 ]+src[9 ]) + pad;\

        tmp[7]= (src[7]+src[8])*20 - (src[6 ]+src[9])*5 + (src[5 ]+src[10]) + pad;\

        tmp+=tmpStride;\

        src+=srcStride;\

    }\

    tmp -= tmpStride*(h+5-2);\

    for(i=0; i&lt;w; i++)\

    {\

        const int tmpB= tmp[-2*tmpStride] - pad;\

        const int tmpA= tmp[-1*tmpStride] - pad;\

        const int tmp0= tmp[0 *tmpStride] - pad;\

        const int tmp1= tmp[1 *tmpStride] - pad;\

        const int tmp2= tmp[2 *tmpStride] - pad;\

        const int tmp3= tmp[3 *tmpStride] - pad;\

        const int tmp4= tmp[4 *tmpStride] - pad;\

        const int tmp5= tmp[5 *tmpStride] - pad;\

        const int tmp6= tmp[6 *tmpStride] - pad;\

        const int tmp7= tmp[7 *tmpStride] - pad;\

        const int tmp8= tmp[8 *tmpStride] - pad;\

        const int tmp9= tmp[9 *tmpStride] - pad;\

        const int tmp10=tmp[10*tmpStride] - pad;\

        OP2(dst[0*dstStride], (tmp0+tmp1)*20 - (tmpA+tmp2)*5 + (tmpB+tmp3));\

        OP2(dst[1*dstStride], (tmp1+tmp2)*20 - (tmp0+tmp3)*5 + (tmpA+tmp4));\

        OP2(dst[2*dstStride], (tmp2+tmp3)*20 - (tmp1+tmp4)*5 + (tmp0+tmp5));\

        OP2(dst[3*dstStride], (tmp3+tmp4)*20 - (tmp2+tmp5)*5 + (tmp1+tmp6));\

        OP2(dst[4*dstStride], (tmp4+tmp5)*20 - (tmp3+tmp6)*5 + (tmp2+tmp7));\

        OP2(dst[5*dstStride], (tmp5+tmp6)*20 - (tmp4+tmp7)*5 + (tmp3+tmp8));\

        OP2(dst[6*dstStride], (tmp6+tmp7)*20 - (tmp5+tmp8)*5 + (tmp4+tmp9));\

        OP2(dst[7*dstStride], (tmp7+tmp8)*20 - (tmp6+tmp9)*5 + (tmp5+tmp10));\

        dst++;\

        tmp++;\

    }\

}\

\

static void FUNC(OPNAME ## h264_qpel16_v_lowpass)(uint8_t *dst, uint8_t *src, int dstStride, int srcStride){\

    FUNC(OPNAME ## h264_qpel8_v_lowpass)(dst                , src                , dstStride, srcStride);\

    FUNC(OPNAME ## h264_qpel8_v_lowpass)(dst+8*sizeof(pixel), src+8*sizeof(pixel), dstStride, srcStride);\

    src += 8*srcStride;\

    dst += 8*dstStride;\

    FUNC(OPNAME ## h264_qpel8_v_lowpass)(dst                , src                , dstStride, srcStride);\

    FUNC(OPNAME ## h264_qpel8_v_lowpass)(dst+8*sizeof(pixel), src+8*sizeof(pixel), dstStride, srcStride);\

}\

\

static void FUNC(OPNAME ## h264_qpel16_h_lowpass)(uint8_t *dst, uint8_t *src, int dstStride, int srcStride){\

    FUNC(OPNAME ## h264_qpel8_h_lowpass)(dst                , src                , dstStride, srcStride);\

    FUNC(OPNAME ## h264_qpel8_h_lowpass)(dst+8*sizeof(pixel), src+8*sizeof(pixel), dstStride, srcStride);\

    src += 8*srcStride;\

    dst += 8*dstStride;\

    FUNC(OPNAME ## h264_qpel8_h_lowpass)(dst                , src                , dstStride, srcStride);\

    FUNC(OPNAME ## h264_qpel8_h_lowpass)(dst+8*sizeof(pixel), src+8*sizeof(pixel), dstStride, srcStride);\

}\

\

static void FUNC(OPNAME ## h264_qpel16_hv_lowpass)(uint8_t *dst, pixeltmp *tmp, uint8_t *src, int dstStride, int tmpStride, int srcStride){\

    FUNC(OPNAME ## h264_qpel8_hv_lowpass)(dst                , tmp  , src                , dstStride, tmpStride, srcStride);\

    FUNC(OPNAME ## h264_qpel8_hv_lowpass)(dst+8*sizeof(pixel), tmp+8, src+8*sizeof(pixel), dstStride, tmpStride, srcStride);\

    src += 8*srcStride;\

    dst += 8*dstStride;\

    FUNC(OPNAME ## h264_qpel8_hv_lowpass)(dst                , tmp  , src                , dstStride, tmpStride, srcStride);\

    FUNC(OPNAME ## h264_qpel8_hv_lowpass)(dst+8*sizeof(pixel), tmp+8, src+8*sizeof(pixel), dstStride, tmpStride, srcStride);\

}\



#define H264_MC(OPNAME, SIZE) \

static av_unused void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc00)(uint8_t *dst, uint8_t *src, int stride){\

    FUNCC(OPNAME ## pixels ## SIZE)(dst, src, stride, SIZE);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc10)(uint8_t *dst, uint8_t *src, int stride){\

    uint8_t half[SIZE*SIZE*sizeof(pixel)];\

    FUNC(put_h264_qpel ## SIZE ## _h_lowpass)(half, src, SIZE*sizeof(pixel), stride);\

    FUNC(OPNAME ## pixels ## SIZE ## _l2)(dst, src, half, stride, stride, SIZE*sizeof(pixel), SIZE);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc20)(uint8_t *dst, uint8_t *src, int stride){\

    FUNC(OPNAME ## h264_qpel ## SIZE ## _h_lowpass)(dst, src, stride, stride);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc30)(uint8_t *dst, uint8_t *src, int stride){\

    uint8_t half[SIZE*SIZE*sizeof(pixel)];\

    FUNC(put_h264_qpel ## SIZE ## _h_lowpass)(half, src, SIZE*sizeof(pixel), stride);\

    FUNC(OPNAME ## pixels ## SIZE ## _l2)(dst, src+sizeof(pixel), half, stride, stride, SIZE*sizeof(pixel), SIZE);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc01)(uint8_t *dst, uint8_t *src, int stride){\

    uint8_t full[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t * const full_mid= full + SIZE*2*sizeof(pixel);\

    uint8_t half[SIZE*SIZE*sizeof(pixel)];\

    FUNC(copy_block ## SIZE )(full, src - stride*2, SIZE*sizeof(pixel),  stride, SIZE + 5);\

    FUNC(put_h264_qpel ## SIZE ## _v_lowpass)(half, full_mid, SIZE*sizeof(pixel), SIZE*sizeof(pixel));\

    FUNC(OPNAME ## pixels ## SIZE ## _l2)(dst, full_mid, half, stride, SIZE*sizeof(pixel), SIZE*sizeof(pixel), SIZE);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc02)(uint8_t *dst, uint8_t *src, int stride){\

    uint8_t full[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t * const full_mid= full + SIZE*2*sizeof(pixel);\

    FUNC(copy_block ## SIZE )(full, src - stride*2, SIZE*sizeof(pixel),  stride, SIZE + 5);\

    FUNC(OPNAME ## h264_qpel ## SIZE ## _v_lowpass)(dst, full_mid, stride, SIZE*sizeof(pixel));\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc03)(uint8_t *dst, uint8_t *src, int stride){\

    uint8_t full[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t * const full_mid= full + SIZE*2*sizeof(pixel);\

    uint8_t half[SIZE*SIZE*sizeof(pixel)];\

    FUNC(copy_block ## SIZE )(full, src - stride*2, SIZE*sizeof(pixel),  stride, SIZE + 5);\

    FUNC(put_h264_qpel ## SIZE ## _v_lowpass)(half, full_mid, SIZE*sizeof(pixel), SIZE*sizeof(pixel));\

    FUNC(OPNAME ## pixels ## SIZE ## _l2)(dst, full_mid+SIZE*sizeof(pixel), half, stride, SIZE*sizeof(pixel), SIZE*sizeof(pixel), SIZE);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc11)(uint8_t *dst, uint8_t *src, int stride){\

    uint8_t full[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t * const full_mid= full + SIZE*2*sizeof(pixel);\

    uint8_t halfH[SIZE*SIZE*sizeof(pixel)];\

    uint8_t halfV[SIZE*SIZE*sizeof(pixel)];\

    FUNC(put_h264_qpel ## SIZE ## _h_lowpass)(halfH, src, SIZE*sizeof(pixel), stride);\

    FUNC(copy_block ## SIZE )(full, src - stride*2, SIZE*sizeof(pixel),  stride, SIZE + 5);\

    FUNC(put_h264_qpel ## SIZE ## _v_lowpass)(halfV, full_mid, SIZE*sizeof(pixel), SIZE*sizeof(pixel));\

    FUNC(OPNAME ## pixels ## SIZE ## _l2)(dst, halfH, halfV, stride, SIZE*sizeof(pixel), SIZE*sizeof(pixel), SIZE);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc31)(uint8_t *dst, uint8_t *src, int stride){\

    uint8_t full[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t * const full_mid= full + SIZE*2*sizeof(pixel);\

    uint8_t halfH[SIZE*SIZE*sizeof(pixel)];\

    uint8_t halfV[SIZE*SIZE*sizeof(pixel)];\

    FUNC(put_h264_qpel ## SIZE ## _h_lowpass)(halfH, src, SIZE*sizeof(pixel), stride);\

    FUNC(copy_block ## SIZE )(full, src - stride*2 + sizeof(pixel), SIZE*sizeof(pixel),  stride, SIZE + 5);\

    FUNC(put_h264_qpel ## SIZE ## _v_lowpass)(halfV, full_mid, SIZE*sizeof(pixel), SIZE*sizeof(pixel));\

    FUNC(OPNAME ## pixels ## SIZE ## _l2)(dst, halfH, halfV, stride, SIZE*sizeof(pixel), SIZE*sizeof(pixel), SIZE);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc13)(uint8_t *dst, uint8_t *src, int stride){\

    uint8_t full[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t * const full_mid= full + SIZE*2*sizeof(pixel);\

    uint8_t halfH[SIZE*SIZE*sizeof(pixel)];\

    uint8_t halfV[SIZE*SIZE*sizeof(pixel)];\

    FUNC(put_h264_qpel ## SIZE ## _h_lowpass)(halfH, src + stride, SIZE*sizeof(pixel), stride);\

    FUNC(copy_block ## SIZE )(full, src - stride*2, SIZE*sizeof(pixel),  stride, SIZE + 5);\

    FUNC(put_h264_qpel ## SIZE ## _v_lowpass)(halfV, full_mid, SIZE*sizeof(pixel), SIZE*sizeof(pixel));\

    FUNC(OPNAME ## pixels ## SIZE ## _l2)(dst, halfH, halfV, stride, SIZE*sizeof(pixel), SIZE*sizeof(pixel), SIZE);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc33)(uint8_t *dst, uint8_t *src, int stride){\

    uint8_t full[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t * const full_mid= full + SIZE*2*sizeof(pixel);\

    uint8_t halfH[SIZE*SIZE*sizeof(pixel)];\

    uint8_t halfV[SIZE*SIZE*sizeof(pixel)];\

    FUNC(put_h264_qpel ## SIZE ## _h_lowpass)(halfH, src + stride, SIZE*sizeof(pixel), stride);\

    FUNC(copy_block ## SIZE )(full, src - stride*2 + sizeof(pixel), SIZE*sizeof(pixel),  stride, SIZE + 5);\

    FUNC(put_h264_qpel ## SIZE ## _v_lowpass)(halfV, full_mid, SIZE*sizeof(pixel), SIZE*sizeof(pixel));\

    FUNC(OPNAME ## pixels ## SIZE ## _l2)(dst, halfH, halfV, stride, SIZE*sizeof(pixel), SIZE*sizeof(pixel), SIZE);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc22)(uint8_t *dst, uint8_t *src, int stride){\

    pixeltmp tmp[SIZE*(SIZE+5)*sizeof(pixel)];\

    FUNC(OPNAME ## h264_qpel ## SIZE ## _hv_lowpass)(dst, tmp, src, stride, SIZE*sizeof(pixel), stride);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc21)(uint8_t *dst, uint8_t *src, int stride){\

    pixeltmp tmp[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t halfH[SIZE*SIZE*sizeof(pixel)];\

    uint8_t halfHV[SIZE*SIZE*sizeof(pixel)];\

    FUNC(put_h264_qpel ## SIZE ## _h_lowpass)(halfH, src, SIZE*sizeof(pixel), stride);\

    FUNC(put_h264_qpel ## SIZE ## _hv_lowpass)(halfHV, tmp, src, SIZE*sizeof(pixel), SIZE*sizeof(pixel), stride);\

    FUNC(OPNAME ## pixels ## SIZE ## _l2)(dst, halfH, halfHV, stride, SIZE*sizeof(pixel), SIZE*sizeof(pixel), SIZE);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc23)(uint8_t *dst, uint8_t *src, int stride){\

    pixeltmp tmp[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t halfH[SIZE*SIZE*sizeof(pixel)];\

    uint8_t halfHV[SIZE*SIZE*sizeof(pixel)];\

    FUNC(put_h264_qpel ## SIZE ## _h_lowpass)(halfH, src + stride, SIZE*sizeof(pixel), stride);\

    FUNC(put_h264_qpel ## SIZE ## _hv_lowpass)(halfHV, tmp, src, SIZE*sizeof(pixel), SIZE*sizeof(pixel), stride);\

    FUNC(OPNAME ## pixels ## SIZE ## _l2)(dst, halfH, halfHV, stride, SIZE*sizeof(pixel), SIZE*sizeof(pixel), SIZE);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc12)(uint8_t *dst, uint8_t *src, int stride){\

    uint8_t full[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t * const full_mid= full + SIZE*2*sizeof(pixel);\

    pixeltmp tmp[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t halfV[SIZE*SIZE*sizeof(pixel)];\

    uint8_t halfHV[SIZE*SIZE*sizeof(pixel)];\

    FUNC(copy_block ## SIZE )(full, src - stride*2, SIZE*sizeof(pixel),  stride, SIZE + 5);\

    FUNC(put_h264_qpel ## SIZE ## _v_lowpass)(halfV, full_mid, SIZE*sizeof(pixel), SIZE*sizeof(pixel));\

    FUNC(put_h264_qpel ## SIZE ## _hv_lowpass)(halfHV, tmp, src, SIZE*sizeof(pixel), SIZE*sizeof(pixel), stride);\

    FUNC(OPNAME ## pixels ## SIZE ## _l2)(dst, halfV, halfHV, stride, SIZE*sizeof(pixel), SIZE*sizeof(pixel), SIZE);\

}\

\

static void FUNCC(OPNAME ## h264_qpel ## SIZE ## _mc32)(uint8_t *dst, uint8_t *src, int stride){\

    uint8_t full[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t * const full_mid= full + SIZE*2*sizeof(pixel);\

    pixeltmp tmp[SIZE*(SIZE+5)*sizeof(pixel)];\

    uint8_t halfV[SIZE*SIZE*sizeof(pixel)];\

    uint8_t halfHV[SIZE*SIZE*sizeof(pixel)];\

    FUNC(copy_block ## SIZE )(full, src - stride*2 + sizeof(pixel), SIZE*sizeof(pixel),  stride, SIZE + 5);\

    FUNC(put_h264_qpel ## SIZE ## _v_lowpass)(halfV, full_mid, SIZE*sizeof(pixel), SIZE*sizeof(pixel));\

    FUNC(put_h264_qpel ## SIZE ## _hv_lowpass)(halfHV, tmp, src, SIZE*sizeof(pixel), SIZE*sizeof(pixel), stride);\

    FUNC(OPNAME ## pixels ## SIZE ## _l2)(dst, halfV, halfHV, stride, SIZE*sizeof(pixel), SIZE*sizeof(pixel), SIZE);\

}\



#define op_avg(a, b)  a = (((a)+CLIP(((b) + 16)&gt;&gt;5)+1)&gt;&gt;1)</cpp:value></cpp:define>

<comment type="line" pos:start="893:1" pos:end="893:71">//#define op_avg2(a, b) a = (((a)*w1+cm[((b) + 16)&gt;&gt;5]*w2 + o + 64)&gt;&gt;7)</comment>

<cpp:define pos:start="895:1" pos:end="895:45">#<cpp:directive pos:start="895:2" pos:end="895:7">define</cpp:directive> <cpp:macro pos:start="895:9" pos:end="895:20"><name pos:start="895:9" pos:end="895:14">op_put</name><parameter_list pos:start="895:15" pos:end="895:20">(<parameter pos:start="895:16" pos:end="895:16"><type pos:start="895:16" pos:end="895:16"><name pos:start="895:16" pos:end="895:16">a</name></type></parameter>, <parameter pos:start="895:19" pos:end="895:19"><type pos:start="895:19" pos:end="895:19"><name pos:start="895:19" pos:end="895:19">b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value pos:start="895:23" pos:end="895:45">a = CLIP(((b) + 16)&gt;&gt;5)</cpp:value></cpp:define>

<cpp:define pos:start="897:1" pos:end="897:61">#<cpp:directive pos:start="897:2" pos:end="897:7">define</cpp:directive> <cpp:macro pos:start="897:9" pos:end="897:21"><name pos:start="897:9" pos:end="897:15">op2_avg</name><parameter_list pos:start="897:16" pos:end="897:21">(<parameter pos:start="897:17" pos:end="897:17"><type pos:start="897:17" pos:end="897:17"><name pos:start="897:17" pos:end="897:17">a</name></type></parameter>, <parameter pos:start="897:20" pos:end="897:20"><type pos:start="897:20" pos:end="897:20"><name pos:start="897:20" pos:end="897:20">b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value pos:start="897:24" pos:end="897:61">a = (((a)+CLIP(((b) + 512)&gt;&gt;10)+1)&gt;&gt;1)</cpp:value></cpp:define>

<cpp:define pos:start="899:1" pos:end="899:48">#<cpp:directive pos:start="899:2" pos:end="899:7">define</cpp:directive> <cpp:macro pos:start="899:9" pos:end="899:21"><name pos:start="899:9" pos:end="899:15">op2_put</name><parameter_list pos:start="899:16" pos:end="899:21">(<parameter pos:start="899:17" pos:end="899:17"><type pos:start="899:17" pos:end="899:17"><name pos:start="899:17" pos:end="899:17">a</name></type></parameter>, <parameter pos:start="899:20" pos:end="899:20"><type pos:start="899:20" pos:end="899:20"><name pos:start="899:20" pos:end="899:20">b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value pos:start="899:24" pos:end="899:48">a = CLIP(((b) + 512)&gt;&gt;10)</cpp:value></cpp:define>



<macro pos:start="903:1" pos:end="903:42"><name pos:start="903:1" pos:end="903:12">H264_LOWPASS</name><argument_list pos:start="903:13" pos:end="903:42">(<argument pos:start="903:14" pos:end="903:17">put_</argument>       , <argument pos:start="903:27" pos:end="903:32">op_put</argument>, <argument pos:start="903:35" pos:end="903:41">op2_put</argument>)</argument_list></macro>

<macro pos:start="905:1" pos:end="905:42"><name pos:start="905:1" pos:end="905:12">H264_LOWPASS</name><argument_list pos:start="905:13" pos:end="905:42">(<argument pos:start="905:14" pos:end="905:17">avg_</argument>       , <argument pos:start="905:27" pos:end="905:32">op_avg</argument>, <argument pos:start="905:35" pos:end="905:41">op2_avg</argument>)</argument_list></macro>

<macro pos:start="907:1" pos:end="907:16"><name pos:start="907:1" pos:end="907:7">H264_MC</name><argument_list pos:start="907:8" pos:end="907:16">(<argument pos:start="907:9" pos:end="907:12">put_</argument>, <argument pos:start="907:15" pos:end="907:15"><literal type="number" pos:start="907:15" pos:end="907:15">2</literal></argument>)</argument_list></macro>

<macro pos:start="909:1" pos:end="909:16"><name pos:start="909:1" pos:end="909:7">H264_MC</name><argument_list pos:start="909:8" pos:end="909:16">(<argument pos:start="909:9" pos:end="909:12">put_</argument>, <argument pos:start="909:15" pos:end="909:15"><literal type="number" pos:start="909:15" pos:end="909:15">4</literal></argument>)</argument_list></macro>

<macro pos:start="911:1" pos:end="911:16"><name pos:start="911:1" pos:end="911:7">H264_MC</name><argument_list pos:start="911:8" pos:end="911:16">(<argument pos:start="911:9" pos:end="911:12">put_</argument>, <argument pos:start="911:15" pos:end="911:15"><literal type="number" pos:start="911:15" pos:end="911:15">8</literal></argument>)</argument_list></macro>

<macro pos:start="913:1" pos:end="913:17"><name pos:start="913:1" pos:end="913:7">H264_MC</name><argument_list pos:start="913:8" pos:end="913:17">(<argument pos:start="913:9" pos:end="913:12">put_</argument>, <argument pos:start="913:15" pos:end="913:16"><literal type="number" pos:start="913:15" pos:end="913:16">16</literal></argument>)</argument_list></macro>

<macro pos:start="915:1" pos:end="915:16"><name pos:start="915:1" pos:end="915:7">H264_MC</name><argument_list pos:start="915:8" pos:end="915:16">(<argument pos:start="915:9" pos:end="915:12">avg_</argument>, <argument pos:start="915:15" pos:end="915:15"><literal type="number" pos:start="915:15" pos:end="915:15">4</literal></argument>)</argument_list></macro>

<macro pos:start="917:1" pos:end="917:16"><name pos:start="917:1" pos:end="917:7">H264_MC</name><argument_list pos:start="917:8" pos:end="917:16">(<argument pos:start="917:9" pos:end="917:12">avg_</argument>, <argument pos:start="917:15" pos:end="917:15"><literal type="number" pos:start="917:15" pos:end="917:15">8</literal></argument>)</argument_list></macro>

<macro pos:start="919:1" pos:end="984:0"><name pos:start="919:1" pos:end="919:7">H264_MC</name><argument_list pos:start="919:8" pos:end="984:0">(<argument pos:start="919:9" pos:end="919:12">avg_</argument>, <argument pos:start="919:15" pos:end="919:16"><literal type="number" pos:start="919:15" pos:end="919:16">16</literal></argument>)</argument_list></macro>



<cpp:undef pos:start="923:1" pos:end="923:13">#<cpp:directive pos:start="923:2" pos:end="923:6">undef</cpp:directive> <name pos:start="923:8" pos:end="923:13">op_avg</name></cpp:undef>

<cpp:undef pos:start="925:1" pos:end="925:13">#<cpp:directive pos:start="925:2" pos:end="925:6">undef</cpp:directive> <name pos:start="925:8" pos:end="925:13">op_put</name></cpp:undef>

<cpp:undef pos:start="927:1" pos:end="927:14">#<cpp:directive pos:start="927:2" pos:end="927:6">undef</cpp:directive> <name pos:start="927:8" pos:end="927:14">op2_avg</name></cpp:undef>

<cpp:undef pos:start="929:1" pos:end="929:14">#<cpp:directive pos:start="929:2" pos:end="929:6">undef</cpp:directive> <name pos:start="929:8" pos:end="929:14">op2_put</name></cpp:undef>



<cpp:if pos:start="933:1" pos:end="933:18">#<cpp:directive pos:start="933:2" pos:end="933:3">if</cpp:directive> <expr pos:start="933:5" pos:end="933:18"><name pos:start="933:5" pos:end="933:13">BIT_DEPTH</name> <operator pos:start="933:15" pos:end="933:16">==</operator> <literal type="number" pos:start="933:18" pos:end="933:18">8</literal></expr></cpp:if>

<cpp:define pos:start="935:1" pos:end="935:56">#   <cpp:directive pos:start="935:5" pos:end="935:10">define</cpp:directive> <cpp:macro pos:start="935:12" pos:end="935:34"><name pos:start="935:12" pos:end="935:34">put_h264_qpel8_mc00_8_c</name></cpp:macro>  <cpp:value pos:start="935:37" pos:end="935:56">ff_put_pixels8x8_8_c</cpp:value></cpp:define>

<cpp:define pos:start="937:1" pos:end="937:56">#   <cpp:directive pos:start="937:5" pos:end="937:10">define</cpp:directive> <cpp:macro pos:start="937:12" pos:end="937:34"><name pos:start="937:12" pos:end="937:34">avg_h264_qpel8_mc00_8_c</name></cpp:macro>  <cpp:value pos:start="937:37" pos:end="937:56">ff_avg_pixels8x8_8_c</cpp:value></cpp:define>

<cpp:define pos:start="939:1" pos:end="939:58">#   <cpp:directive pos:start="939:5" pos:end="939:10">define</cpp:directive> <cpp:macro pos:start="939:12" pos:end="939:35"><name pos:start="939:12" pos:end="939:35">put_h264_qpel16_mc00_8_c</name></cpp:macro> <cpp:value pos:start="939:37" pos:end="939:58">ff_put_pixels16x16_8_c</cpp:value></cpp:define>

<cpp:define pos:start="941:1" pos:end="941:58">#   <cpp:directive pos:start="941:5" pos:end="941:10">define</cpp:directive> <cpp:macro pos:start="941:12" pos:end="941:35"><name pos:start="941:12" pos:end="941:35">avg_h264_qpel16_mc00_8_c</name></cpp:macro> <cpp:value pos:start="941:37" pos:end="941:58">ff_avg_pixels16x16_8_c</cpp:value></cpp:define>

<cpp:elif pos:start="943:1" pos:end="943:20">#<cpp:directive pos:start="943:2" pos:end="943:5">elif</cpp:directive> <expr pos:start="943:7" pos:end="943:20"><name pos:start="943:7" pos:end="943:15">BIT_DEPTH</name> <operator pos:start="943:17" pos:end="943:18">==</operator> <literal type="number" pos:start="943:20" pos:end="943:20">9</literal></expr></cpp:elif>

<cpp:define pos:start="945:1" pos:end="945:56">#   <cpp:directive pos:start="945:5" pos:end="945:10">define</cpp:directive> <cpp:macro pos:start="945:12" pos:end="945:34"><name pos:start="945:12" pos:end="945:34">put_h264_qpel8_mc00_9_c</name></cpp:macro>  <cpp:value pos:start="945:37" pos:end="945:56">ff_put_pixels8x8_9_c</cpp:value></cpp:define>

<cpp:define pos:start="947:1" pos:end="947:56">#   <cpp:directive pos:start="947:5" pos:end="947:10">define</cpp:directive> <cpp:macro pos:start="947:12" pos:end="947:34"><name pos:start="947:12" pos:end="947:34">avg_h264_qpel8_mc00_9_c</name></cpp:macro>  <cpp:value pos:start="947:37" pos:end="947:56">ff_avg_pixels8x8_9_c</cpp:value></cpp:define>

<cpp:define pos:start="949:1" pos:end="949:58">#   <cpp:directive pos:start="949:5" pos:end="949:10">define</cpp:directive> <cpp:macro pos:start="949:12" pos:end="949:35"><name pos:start="949:12" pos:end="949:35">put_h264_qpel16_mc00_9_c</name></cpp:macro> <cpp:value pos:start="949:37" pos:end="949:58">ff_put_pixels16x16_9_c</cpp:value></cpp:define>

<cpp:define pos:start="951:1" pos:end="951:58">#   <cpp:directive pos:start="951:5" pos:end="951:10">define</cpp:directive> <cpp:macro pos:start="951:12" pos:end="951:35"><name pos:start="951:12" pos:end="951:35">avg_h264_qpel16_mc00_9_c</name></cpp:macro> <cpp:value pos:start="951:37" pos:end="951:58">ff_avg_pixels16x16_9_c</cpp:value></cpp:define>

<cpp:elif pos:start="953:1" pos:end="953:21">#<cpp:directive pos:start="953:2" pos:end="953:5">elif</cpp:directive> <expr pos:start="953:7" pos:end="953:21"><name pos:start="953:7" pos:end="953:15">BIT_DEPTH</name> <operator pos:start="953:17" pos:end="953:18">==</operator> <literal type="number" pos:start="953:20" pos:end="953:21">10</literal></expr></cpp:elif>

<cpp:define pos:start="955:1" pos:end="955:58">#   <cpp:directive pos:start="955:5" pos:end="955:10">define</cpp:directive> <cpp:macro pos:start="955:12" pos:end="955:35"><name pos:start="955:12" pos:end="955:35">put_h264_qpel8_mc00_10_c</name></cpp:macro>  <cpp:value pos:start="955:38" pos:end="955:58">ff_put_pixels8x8_10_c</cpp:value></cpp:define>

<cpp:define pos:start="957:1" pos:end="957:58">#   <cpp:directive pos:start="957:5" pos:end="957:10">define</cpp:directive> <cpp:macro pos:start="957:12" pos:end="957:35"><name pos:start="957:12" pos:end="957:35">avg_h264_qpel8_mc00_10_c</name></cpp:macro>  <cpp:value pos:start="957:38" pos:end="957:58">ff_avg_pixels8x8_10_c</cpp:value></cpp:define>

<cpp:define pos:start="959:1" pos:end="959:60">#   <cpp:directive pos:start="959:5" pos:end="959:10">define</cpp:directive> <cpp:macro pos:start="959:12" pos:end="959:36"><name pos:start="959:12" pos:end="959:36">put_h264_qpel16_mc00_10_c</name></cpp:macro> <cpp:value pos:start="959:38" pos:end="959:60">ff_put_pixels16x16_10_c</cpp:value></cpp:define>

<cpp:define pos:start="961:1" pos:end="961:60">#   <cpp:directive pos:start="961:5" pos:end="961:10">define</cpp:directive> <cpp:macro pos:start="961:12" pos:end="961:36"><name pos:start="961:12" pos:end="961:36">avg_h264_qpel16_mc00_10_c</name></cpp:macro> <cpp:value pos:start="961:38" pos:end="961:60">ff_avg_pixels16x16_10_c</cpp:value></cpp:define>

<cpp:elif pos:start="963:1" pos:end="963:21">#<cpp:directive pos:start="963:2" pos:end="963:5">elif</cpp:directive> <expr pos:start="963:7" pos:end="963:21"><name pos:start="963:7" pos:end="963:15">BIT_DEPTH</name> <operator pos:start="963:17" pos:end="963:18">==</operator> <literal type="number" pos:start="963:20" pos:end="963:21">12</literal></expr></cpp:elif>

<cpp:define pos:start="965:1" pos:end="965:58">#   <cpp:directive pos:start="965:5" pos:end="965:10">define</cpp:directive> <cpp:macro pos:start="965:12" pos:end="965:35"><name pos:start="965:12" pos:end="965:35">put_h264_qpel8_mc00_12_c</name></cpp:macro>  <cpp:value pos:start="965:38" pos:end="965:58">ff_put_pixels8x8_12_c</cpp:value></cpp:define>

<cpp:define pos:start="967:1" pos:end="967:58">#   <cpp:directive pos:start="967:5" pos:end="967:10">define</cpp:directive> <cpp:macro pos:start="967:12" pos:end="967:35"><name pos:start="967:12" pos:end="967:35">avg_h264_qpel8_mc00_12_c</name></cpp:macro>  <cpp:value pos:start="967:38" pos:end="967:58">ff_avg_pixels8x8_12_c</cpp:value></cpp:define>

<cpp:define pos:start="969:1" pos:end="969:60">#   <cpp:directive pos:start="969:5" pos:end="969:10">define</cpp:directive> <cpp:macro pos:start="969:12" pos:end="969:36"><name pos:start="969:12" pos:end="969:36">put_h264_qpel16_mc00_12_c</name></cpp:macro> <cpp:value pos:start="969:38" pos:end="969:60">ff_put_pixels16x16_12_c</cpp:value></cpp:define>

<cpp:define pos:start="971:1" pos:end="971:60">#   <cpp:directive pos:start="971:5" pos:end="971:10">define</cpp:directive> <cpp:macro pos:start="971:12" pos:end="971:36"><name pos:start="971:12" pos:end="971:36">avg_h264_qpel16_mc00_12_c</name></cpp:macro> <cpp:value pos:start="971:38" pos:end="971:60">ff_avg_pixels16x16_12_c</cpp:value></cpp:define>

<cpp:elif pos:start="973:1" pos:end="973:21">#<cpp:directive pos:start="973:2" pos:end="973:5">elif</cpp:directive> <expr pos:start="973:7" pos:end="973:21"><name pos:start="973:7" pos:end="973:15">BIT_DEPTH</name> <operator pos:start="973:17" pos:end="973:18">==</operator> <literal type="number" pos:start="973:20" pos:end="973:21">14</literal></expr></cpp:elif>

<cpp:define pos:start="975:1" pos:end="975:58">#   <cpp:directive pos:start="975:5" pos:end="975:10">define</cpp:directive> <cpp:macro pos:start="975:12" pos:end="975:35"><name pos:start="975:12" pos:end="975:35">put_h264_qpel8_mc00_14_c</name></cpp:macro>  <cpp:value pos:start="975:38" pos:end="975:58">ff_put_pixels8x8_14_c</cpp:value></cpp:define>

<cpp:define pos:start="977:1" pos:end="977:58">#   <cpp:directive pos:start="977:5" pos:end="977:10">define</cpp:directive> <cpp:macro pos:start="977:12" pos:end="977:35"><name pos:start="977:12" pos:end="977:35">avg_h264_qpel8_mc00_14_c</name></cpp:macro>  <cpp:value pos:start="977:38" pos:end="977:58">ff_avg_pixels8x8_14_c</cpp:value></cpp:define>

<cpp:define pos:start="979:1" pos:end="979:60">#   <cpp:directive pos:start="979:5" pos:end="979:10">define</cpp:directive> <cpp:macro pos:start="979:12" pos:end="979:36"><name pos:start="979:12" pos:end="979:36">put_h264_qpel16_mc00_14_c</name></cpp:macro> <cpp:value pos:start="979:38" pos:end="979:60">ff_put_pixels16x16_14_c</cpp:value></cpp:define>

<cpp:define pos:start="981:1" pos:end="981:60">#   <cpp:directive pos:start="981:5" pos:end="981:10">define</cpp:directive> <cpp:macro pos:start="981:12" pos:end="981:36"><name pos:start="981:12" pos:end="981:36">avg_h264_qpel16_mc00_14_c</name></cpp:macro> <cpp:value pos:start="981:38" pos:end="981:60">ff_avg_pixels16x16_14_c</cpp:value></cpp:define>

<cpp:endif pos:start="983:1" pos:end="983:6">#<cpp:directive pos:start="983:2" pos:end="983:6">endif</cpp:directive></cpp:endif>



<function pos:start="987:1" pos:end="991:1"><type pos:start="987:1" pos:end="987:10"><name pos:start="987:1" pos:end="987:4">void</name> <name pos:start="987:6" pos:end="987:10">FUNCC</name></type>(<name pos:start="987:12" pos:end="987:27">ff_put_pixels8x8</name>)<parameter_list pos:start="987:29" pos:end="987:68">(<parameter pos:start="987:30" pos:end="987:41"><decl pos:start="987:30" pos:end="987:41"><type pos:start="987:30" pos:end="987:41"><name pos:start="987:30" pos:end="987:36">uint8_t</name> <modifier pos:start="987:38" pos:end="987:38">*</modifier></type><name pos:start="987:39" pos:end="987:41">dst</name></decl></parameter>, <parameter pos:start="987:44" pos:end="987:55"><decl pos:start="987:44" pos:end="987:55"><type pos:start="987:44" pos:end="987:55"><name pos:start="987:44" pos:end="987:50">uint8_t</name> <modifier pos:start="987:52" pos:end="987:52">*</modifier></type><name pos:start="987:53" pos:end="987:55">src</name></decl></parameter>, <parameter pos:start="987:58" pos:end="987:67"><decl pos:start="987:58" pos:end="987:67"><type pos:start="987:58" pos:end="987:67"><name pos:start="987:58" pos:end="987:60">int</name></type> <name pos:start="987:62" pos:end="987:67">stride</name></decl></parameter>)</parameter_list> <block pos:start="987:70" pos:end="991:1">{<block_content pos:start="989:5" pos:end="989:44">

    <expr_stmt pos:start="989:5" pos:end="989:44"><expr pos:start="989:5" pos:end="989:43"><call pos:start="989:5" pos:end="989:43"><call pos:start="989:5" pos:end="989:22"><name pos:start="989:5" pos:end="989:9">FUNCC</name><argument_list pos:start="989:10" pos:end="989:22">(<argument pos:start="989:11" pos:end="989:21"><expr pos:start="989:11" pos:end="989:21"><name pos:start="989:11" pos:end="989:21">put_pixels8</name></expr></argument>)</argument_list></call><argument_list pos:start="989:23" pos:end="989:43">(<argument pos:start="989:24" pos:end="989:26"><expr pos:start="989:24" pos:end="989:26"><name pos:start="989:24" pos:end="989:26">dst</name></expr></argument>, <argument pos:start="989:29" pos:end="989:31"><expr pos:start="989:29" pos:end="989:31"><name pos:start="989:29" pos:end="989:31">src</name></expr></argument>, <argument pos:start="989:34" pos:end="989:39"><expr pos:start="989:34" pos:end="989:39"><name pos:start="989:34" pos:end="989:39">stride</name></expr></argument>, <argument pos:start="989:42" pos:end="989:42"><expr pos:start="989:42" pos:end="989:42"><literal type="number" pos:start="989:42" pos:end="989:42">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
