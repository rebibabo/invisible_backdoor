<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19296.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:15">aio_bh_poll</name><parameter_list pos:start="1:16" pos:end="1:32">(<parameter pos:start="1:17" pos:end="1:31"><decl pos:start="1:17" pos:end="1:31"><type pos:start="1:17" pos:end="1:28"><name pos:start="1:17" pos:end="1:26">AioContext</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:31">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:15">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">QEMUBH</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:14">bh</name></decl>, <decl pos:start="5:17" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:12"><modifier pos:start="5:17" pos:end="5:17">*</modifier><modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">bhp</name></decl>, <decl pos:start="5:24" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:12"><modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:28">next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:16">deleted</name> <init pos:start="9:18" pos:end="9:24">= <expr pos:start="9:20" pos:end="9:24"><name pos:start="9:20" pos:end="9:24">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:38"><expr pos:start="13:5" pos:end="13:37"><call pos:start="13:5" pos:end="13:37"><name pos:start="13:5" pos:end="13:20">qemu_lockcnt_inc</name><argument_list pos:start="13:21" pos:end="13:37">(<argument pos:start="13:22" pos:end="13:36"><expr pos:start="13:22" pos:end="13:36"><operator pos:start="13:22" pos:end="13:22">&amp;</operator><name pos:start="13:23" pos:end="13:36"><name pos:start="13:23" pos:end="13:25">ctx</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:36">list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:12"><expr pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <literal type="number" pos:start="17:11" pos:end="17:11">0</literal></expr>;</expr_stmt>

    <for pos:start="19:5" pos:end="57:5">for <control pos:start="19:9" pos:end="19:61">(<init pos:start="19:10" pos:end="19:46"><expr pos:start="19:10" pos:end="19:45"><name pos:start="19:10" pos:end="19:11">bh</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:45"><name pos:start="19:15" pos:end="19:29">atomic_rcu_read</name><argument_list pos:start="19:30" pos:end="19:45">(<argument pos:start="19:31" pos:end="19:44"><expr pos:start="19:31" pos:end="19:44"><operator pos:start="19:31" pos:end="19:31">&amp;</operator><name pos:start="19:32" pos:end="19:44"><name pos:start="19:32" pos:end="19:34">ctx</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:44">first_bh</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="19:48" pos:end="19:50"><expr pos:start="19:48" pos:end="19:49"><name pos:start="19:48" pos:end="19:49">bh</name></expr>;</condition> <incr pos:start="19:52" pos:end="19:60"><expr pos:start="19:52" pos:end="19:60"><name pos:start="19:52" pos:end="19:53">bh</name> <operator pos:start="19:55" pos:end="19:55">=</operator> <name pos:start="19:57" pos:end="19:60">next</name></expr></incr>)</control> <block pos:start="19:63" pos:end="57:5">{<block_content pos:start="21:9" pos:end="55:9">

        <expr_stmt pos:start="21:9" pos:end="21:42"><expr pos:start="21:9" pos:end="21:41"><name pos:start="21:9" pos:end="21:12">next</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:41"><name pos:start="21:16" pos:end="21:30">atomic_rcu_read</name><argument_list pos:start="21:31" pos:end="21:41">(<argument pos:start="21:32" pos:end="21:40"><expr pos:start="21:32" pos:end="21:40"><operator pos:start="21:32" pos:end="21:32">&amp;</operator><name pos:start="21:33" pos:end="21:40"><name pos:start="21:33" pos:end="21:34">bh</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:40">next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="23:9" pos:end="33:11">/* The atomic_xchg is paired with the one in qemu_bh_schedule.  The

         * implicit memory barrier ensures that the callback sees all writes

         * done by the scheduling thread.  It also ensures that the scheduling

         * thread sees the zero before bh-&gt;cb has run, and thus will call

         * aio_notify again if necessary.

         */</comment>

        <if_stmt pos:start="35:9" pos:end="49:9"><if pos:start="35:9" pos:end="49:9">if <condition pos:start="35:12" pos:end="35:43">(<expr pos:start="35:13" pos:end="35:42"><call pos:start="35:13" pos:end="35:42"><name pos:start="35:13" pos:end="35:23">atomic_xchg</name><argument_list pos:start="35:24" pos:end="35:42">(<argument pos:start="35:25" pos:end="35:38"><expr pos:start="35:25" pos:end="35:38"><operator pos:start="35:25" pos:end="35:25">&amp;</operator><name pos:start="35:26" pos:end="35:38"><name pos:start="35:26" pos:end="35:27">bh</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:38">scheduled</name></name></expr></argument>, <argument pos:start="35:41" pos:end="35:41"><expr pos:start="35:41" pos:end="35:41"><literal type="number" pos:start="35:41" pos:end="35:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:45" pos:end="49:9">{<block_content pos:start="39:13" pos:end="47:28">

            <comment type="block" pos:start="37:13" pos:end="37:50">/* Idle BHs don't count as progress */</comment>

            <if_stmt pos:start="39:13" pos:end="43:13"><if pos:start="39:13" pos:end="43:13">if <condition pos:start="39:16" pos:end="39:26">(<expr pos:start="39:17" pos:end="39:25"><operator pos:start="39:17" pos:end="39:17">!</operator><name pos:start="39:18" pos:end="39:25"><name pos:start="39:18" pos:end="39:19">bh</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:25">idle</name></name></expr>)</condition> <block pos:start="39:28" pos:end="43:13">{<block_content pos:start="41:17" pos:end="41:24">

                <expr_stmt pos:start="41:17" pos:end="41:24"><expr pos:start="41:17" pos:end="41:23"><name pos:start="41:17" pos:end="41:19">ret</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <literal type="number" pos:start="41:23" pos:end="41:23">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:25"><expr pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:14">bh</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:20">idle</name></name> <operator pos:start="45:22" pos:end="45:22">=</operator> <literal type="number" pos:start="45:24" pos:end="45:24">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:28"><expr pos:start="47:13" pos:end="47:27"><call pos:start="47:13" pos:end="47:27"><name pos:start="47:13" pos:end="47:23">aio_bh_call</name><argument_list pos:start="47:24" pos:end="47:27">(<argument pos:start="47:25" pos:end="47:26"><expr pos:start="47:25" pos:end="47:26"><name pos:start="47:25" pos:end="47:26">bh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:24">(<expr pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:14">bh</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:23">deleted</name></name></expr>)</condition> <block pos:start="51:26" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:27">

            <expr_stmt pos:start="53:13" pos:end="53:27"><expr pos:start="53:13" pos:end="53:26"><name pos:start="53:13" pos:end="53:19">deleted</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <name pos:start="53:23" pos:end="53:26">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="61:5" pos:end="61:28">/* remove deleted bhs */</comment>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:17">(<expr pos:start="63:9" pos:end="63:16"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:16">deleted</name></expr>)</condition> <block pos:start="63:19" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:19">

        <expr_stmt pos:start="65:9" pos:end="65:42"><expr pos:start="65:9" pos:end="65:41"><call pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:24">qemu_lockcnt_dec</name><argument_list pos:start="65:25" pos:end="65:41">(<argument pos:start="65:26" pos:end="65:40"><expr pos:start="65:26" pos:end="65:40"><operator pos:start="65:26" pos:end="65:26">&amp;</operator><name pos:start="65:27" pos:end="65:40"><name pos:start="65:27" pos:end="65:29">ctx</name><operator pos:start="65:30" pos:end="65:31">-&gt;</operator><name pos:start="65:32" pos:end="65:40">list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:19">return <expr pos:start="67:16" pos:end="67:18"><name pos:start="67:16" pos:end="67:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="97:5"><if pos:start="73:5" pos:end="97:5">if <condition pos:start="73:8" pos:end="73:51">(<expr pos:start="73:9" pos:end="73:50"><call pos:start="73:9" pos:end="73:50"><name pos:start="73:9" pos:end="73:33">qemu_lockcnt_dec_and_lock</name><argument_list pos:start="73:34" pos:end="73:50">(<argument pos:start="73:35" pos:end="73:49"><expr pos:start="73:35" pos:end="73:49"><operator pos:start="73:35" pos:end="73:35">&amp;</operator><name pos:start="73:36" pos:end="73:49"><name pos:start="73:36" pos:end="73:38">ctx</name><operator pos:start="73:39" pos:end="73:40">-&gt;</operator><name pos:start="73:41" pos:end="73:49">list_lock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:53" pos:end="97:5">{<block_content pos:start="75:9" pos:end="95:45">

        <expr_stmt pos:start="75:9" pos:end="75:29"><expr pos:start="75:9" pos:end="75:28"><name pos:start="75:9" pos:end="75:11">bhp</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <operator pos:start="75:15" pos:end="75:15">&amp;</operator><name pos:start="75:16" pos:end="75:28"><name pos:start="75:16" pos:end="75:18">ctx</name><operator pos:start="75:19" pos:end="75:20">-&gt;</operator><name pos:start="75:21" pos:end="75:28">first_bh</name></name></expr>;</expr_stmt>

        <while pos:start="77:9" pos:end="93:9">while <condition pos:start="77:15" pos:end="77:20">(<expr pos:start="77:16" pos:end="77:19"><operator pos:start="77:16" pos:end="77:16">*</operator><name pos:start="77:17" pos:end="77:19">bhp</name></expr>)</condition> <block pos:start="77:22" pos:end="93:9">{<block_content pos:start="79:13" pos:end="91:13">

            <expr_stmt pos:start="79:13" pos:end="79:22"><expr pos:start="79:13" pos:end="79:21"><name pos:start="79:13" pos:end="79:14">bh</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <operator pos:start="79:18" pos:end="79:18">*</operator><name pos:start="79:19" pos:end="79:21">bhp</name></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="91:13"><if pos:start="81:13" pos:end="87:13">if <condition pos:start="81:16" pos:end="81:46">(<expr pos:start="81:17" pos:end="81:45"><name pos:start="81:17" pos:end="81:27"><name pos:start="81:17" pos:end="81:18">bh</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:27">deleted</name></name> <operator pos:start="81:29" pos:end="81:30">&amp;&amp;</operator> <operator pos:start="81:32" pos:end="81:32">!</operator><name pos:start="81:33" pos:end="81:45"><name pos:start="81:33" pos:end="81:34">bh</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:45">scheduled</name></name></expr>)</condition> <block pos:start="81:48" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:27">

                <expr_stmt pos:start="83:17" pos:end="83:32"><expr pos:start="83:17" pos:end="83:31"><operator pos:start="83:17" pos:end="83:17">*</operator><name pos:start="83:18" pos:end="83:20">bhp</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <name pos:start="83:24" pos:end="83:31"><name pos:start="83:24" pos:end="83:25">bh</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:31">next</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:27"><expr pos:start="85:17" pos:end="85:26"><call pos:start="85:17" pos:end="85:26"><name pos:start="85:17" pos:end="85:22">g_free</name><argument_list pos:start="85:23" pos:end="85:26">(<argument pos:start="85:24" pos:end="85:25"><expr pos:start="85:24" pos:end="85:25"><name pos:start="85:24" pos:end="85:25">bh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="87:15" pos:end="91:13">else <block pos:start="87:20" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:32">

                <expr_stmt pos:start="89:17" pos:end="89:32"><expr pos:start="89:17" pos:end="89:31"><name pos:start="89:17" pos:end="89:19">bhp</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <operator pos:start="89:23" pos:end="89:23">&amp;</operator><name pos:start="89:24" pos:end="89:31"><name pos:start="89:24" pos:end="89:25">bh</name><operator pos:start="89:26" pos:end="89:27">-&gt;</operator><name pos:start="89:28" pos:end="89:31">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="95:9" pos:end="95:45"><expr pos:start="95:9" pos:end="95:44"><call pos:start="95:9" pos:end="95:44"><name pos:start="95:9" pos:end="95:27">qemu_lockcnt_unlock</name><argument_list pos:start="95:28" pos:end="95:44">(<argument pos:start="95:29" pos:end="95:43"><expr pos:start="95:29" pos:end="95:43"><operator pos:start="95:29" pos:end="95:29">&amp;</operator><name pos:start="95:30" pos:end="95:43"><name pos:start="95:30" pos:end="95:32">ctx</name><operator pos:start="95:33" pos:end="95:34">-&gt;</operator><name pos:start="95:35" pos:end="95:43">list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="99:5" pos:end="99:15">return <expr pos:start="99:12" pos:end="99:14"><name pos:start="99:12" pos:end="99:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
