<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19033.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">wsvqa_read_header</name><parameter_list pos:start="1:29" pos:end="1:48">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:46"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:1">{<block_content pos:start="5:5" pos:end="165:13">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">WsVqaDemuxContext</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:28">wsvqa</name> <init pos:start="5:30" pos:end="5:43">= <expr pos:start="5:32" pos:end="5:43"><name pos:start="5:32" pos:end="5:43"><name pos:start="5:32" pos:end="5:32">s</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:43">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name> <init pos:start="7:21" pos:end="7:27">= <expr pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:23">s</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">AVStream</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:25">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name></type> <name pos:start="13:19" pos:end="13:44"><name pos:start="13:19" pos:end="13:25">scratch</name><index pos:start="13:26" pos:end="13:44">[<expr pos:start="13:27" pos:end="13:43"><name pos:start="13:27" pos:end="13:43">VQA_PREAMBLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:26">chunk_tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:27">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">fps</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:45">/* initialize the video decoder stream */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:6">st</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:37"><name pos:start="25:10" pos:end="25:28">avformat_new_stream</name><argument_list pos:start="25:29" pos:end="25:37">(<argument pos:start="25:30" pos:end="25:30"><expr pos:start="25:30" pos:end="25:30"><name pos:start="25:30" pos:end="25:30">s</name></expr></argument>, <argument pos:start="25:33" pos:end="25:36"><expr pos:start="25:33" pos:end="25:36"><name pos:start="25:33" pos:end="25:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="29:31"><if pos:start="27:5" pos:end="29:31">if <condition pos:start="27:8" pos:end="27:12">(<expr pos:start="27:9" pos:end="27:11"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:11">st</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:31"><block_content pos:start="29:9" pos:end="29:31">

        <return pos:start="29:9" pos:end="29:31">return <expr pos:start="29:16" pos:end="29:30"><call pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:22">AVERROR</name><argument_list pos:start="29:23" pos:end="29:30">(<argument pos:start="29:24" pos:end="29:29"><expr pos:start="29:24" pos:end="29:29"><name pos:start="29:24" pos:end="29:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:6">st</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:18">start_time</name></name> <operator pos:start="31:20" pos:end="31:20">=</operator> <literal type="number" pos:start="31:22" pos:end="31:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:42"><expr pos:start="33:5" pos:end="33:41"><name pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:9">wsvqa</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:29">video_stream_index</name></name> <operator pos:start="33:31" pos:end="33:31">=</operator> <name pos:start="33:33" pos:end="33:41"><name pos:start="33:33" pos:end="33:34">st</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:41">index</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:47"><expr pos:start="35:5" pos:end="35:46"><name pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:6">st</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:13">codec</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:25">codec_type</name></name> <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:46">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:45"><expr pos:start="37:5" pos:end="37:44"><name pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:6">st</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:13">codec</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:23">codec_id</name></name> <operator pos:start="37:25" pos:end="37:25">=</operator> <name pos:start="37:27" pos:end="37:44">AV_CODEC_ID_WS_VQA</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:6">st</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:13">codec</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:24">codec_tag</name></name> <operator pos:start="39:26" pos:end="39:26">=</operator> <literal type="number" pos:start="39:28" pos:end="39:28">0</literal></expr>;</expr_stmt>  <comment type="block" pos:start="39:32" pos:end="39:46">/* no fourcc */</comment>



    <comment type="block" pos:start="43:5" pos:end="43:45">/* skip to the start of the VQA header */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:32"><expr pos:start="45:5" pos:end="45:31"><call pos:start="45:5" pos:end="45:31"><name pos:start="45:5" pos:end="45:13">avio_seek</name><argument_list pos:start="45:14" pos:end="45:31">(<argument pos:start="45:15" pos:end="45:16"><expr pos:start="45:15" pos:end="45:16"><name pos:start="45:15" pos:end="45:16">pb</name></expr></argument>, <argument pos:start="45:19" pos:end="45:20"><expr pos:start="45:19" pos:end="45:20"><literal type="number" pos:start="45:19" pos:end="45:20">20</literal></expr></argument>, <argument pos:start="45:23" pos:end="45:30"><expr pos:start="45:23" pos:end="45:30"><name pos:start="45:23" pos:end="45:30">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:51">/* the VQA header needs to go to the decoder */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:48"><expr pos:start="51:5" pos:end="51:47"><name pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:6">st</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:13">codec</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:29">extradata_size</name></name> <operator pos:start="51:31" pos:end="51:31">=</operator> <name pos:start="51:33" pos:end="51:47">VQA_HEADER_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:86"><expr pos:start="53:5" pos:end="53:85"><name pos:start="53:5" pos:end="53:24"><name pos:start="53:5" pos:end="53:6">st</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:13">codec</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:24">extradata</name></name> <operator pos:start="53:26" pos:end="53:26">=</operator> <call pos:start="53:28" pos:end="53:85"><name pos:start="53:28" pos:end="53:37">av_mallocz</name><argument_list pos:start="53:38" pos:end="53:85">(<argument pos:start="53:39" pos:end="53:84"><expr pos:start="53:39" pos:end="53:84"><name pos:start="53:39" pos:end="53:53">VQA_HEADER_SIZE</name> <operator pos:start="53:55" pos:end="53:55">+</operator> <name pos:start="53:57" pos:end="53:84">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:51"><expr pos:start="55:5" pos:end="55:50"><name pos:start="55:5" pos:end="55:10">header</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <operator pos:start="55:14" pos:end="55:14">(</operator><name pos:start="55:15" pos:end="55:22">unsigned</name> <name pos:start="55:24" pos:end="55:27">char</name> <operator pos:start="55:29" pos:end="55:29">*</operator><operator pos:start="55:30" pos:end="55:30">)</operator><name pos:start="55:31" pos:end="55:50"><name pos:start="55:31" pos:end="55:32">st</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:39">codec</name><operator pos:start="55:40" pos:end="55:41">-&gt;</operator><name pos:start="55:42" pos:end="55:50">extradata</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="59:24">(<expr pos:start="57:9" pos:end="59:23"><call pos:start="57:9" pos:end="57:60"><name pos:start="57:9" pos:end="57:17">avio_read</name><argument_list pos:start="57:18" pos:end="57:60">(<argument pos:start="57:19" pos:end="57:20"><expr pos:start="57:19" pos:end="57:20"><name pos:start="57:19" pos:end="57:20">pb</name></expr></argument>, <argument pos:start="57:23" pos:end="57:42"><expr pos:start="57:23" pos:end="57:42"><name pos:start="57:23" pos:end="57:42"><name pos:start="57:23" pos:end="57:24">st</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:31">codec</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:42">extradata</name></name></expr></argument>, <argument pos:start="57:45" pos:end="57:59"><expr pos:start="57:45" pos:end="57:59"><name pos:start="57:45" pos:end="57:59">VQA_HEADER_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="57:62" pos:end="57:63">!=</operator>

        <name pos:start="59:9" pos:end="59:23">VQA_HEADER_SIZE</name></expr>)</condition> <block pos:start="59:26" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:28">

        <expr_stmt pos:start="61:9" pos:end="61:38"><expr pos:start="61:9" pos:end="61:37"><call pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:15">av_free</name><argument_list pos:start="61:16" pos:end="61:37">(<argument pos:start="61:17" pos:end="61:36"><expr pos:start="61:17" pos:end="61:36"><name pos:start="61:17" pos:end="61:36"><name pos:start="61:17" pos:end="61:18">st</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:25">codec</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:36">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:28">return <expr pos:start="63:16" pos:end="63:27"><call pos:start="63:16" pos:end="63:27"><name pos:start="63:16" pos:end="63:22">AVERROR</name><argument_list pos:start="63:23" pos:end="63:27">(<argument pos:start="63:24" pos:end="63:26"><expr pos:start="63:24" pos:end="63:26"><name pos:start="63:24" pos:end="63:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:43"><expr pos:start="67:5" pos:end="67:42"><name pos:start="67:5" pos:end="67:20"><name pos:start="67:5" pos:end="67:6">st</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:13">codec</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:20">width</name></name> <operator pos:start="67:22" pos:end="67:22">=</operator> <call pos:start="67:24" pos:end="67:42"><name pos:start="67:24" pos:end="67:30">AV_RL16</name><argument_list pos:start="67:31" pos:end="67:42">(<argument pos:start="67:32" pos:end="67:41"><expr pos:start="67:32" pos:end="67:41"><operator pos:start="67:32" pos:end="67:32">&amp;</operator><name pos:start="67:33" pos:end="67:41"><name pos:start="67:33" pos:end="67:38">header</name><index pos:start="67:39" pos:end="67:41">[<expr pos:start="67:40" pos:end="67:40"><literal type="number" pos:start="67:40" pos:end="67:40">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:44"><expr pos:start="69:5" pos:end="69:43"><name pos:start="69:5" pos:end="69:21"><name pos:start="69:5" pos:end="69:6">st</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:13">codec</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:21">height</name></name> <operator pos:start="69:23" pos:end="69:23">=</operator> <call pos:start="69:25" pos:end="69:43"><name pos:start="69:25" pos:end="69:31">AV_RL16</name><argument_list pos:start="69:32" pos:end="69:43">(<argument pos:start="69:33" pos:end="69:42"><expr pos:start="69:33" pos:end="69:42"><operator pos:start="69:33" pos:end="69:33">&amp;</operator><name pos:start="69:34" pos:end="69:42"><name pos:start="69:34" pos:end="69:39">header</name><index pos:start="69:40" pos:end="69:42">[<expr pos:start="69:41" pos:end="69:41"><literal type="number" pos:start="69:41" pos:end="69:41">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:21"><expr pos:start="71:5" pos:end="71:20"><name pos:start="71:5" pos:end="71:7">fps</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <name pos:start="71:11" pos:end="71:20"><name pos:start="71:11" pos:end="71:16">header</name><index pos:start="71:17" pos:end="71:20">[<expr pos:start="71:18" pos:end="71:19"><literal type="number" pos:start="71:18" pos:end="71:19">12</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="75:40"><expr pos:start="73:5" pos:end="75:39"><name pos:start="73:5" pos:end="73:17"><name pos:start="73:5" pos:end="73:6">st</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:17">nb_frames</name></name> <operator pos:start="73:19" pos:end="73:19">=</operator>

    <name pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:6">st</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:16">duration</name></name>  <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="75:39"><name pos:start="75:21" pos:end="75:27">AV_RL16</name><argument_list pos:start="75:28" pos:end="75:39">(<argument pos:start="75:29" pos:end="75:38"><expr pos:start="75:29" pos:end="75:38"><operator pos:start="75:29" pos:end="75:29">&amp;</operator><name pos:start="75:30" pos:end="75:38"><name pos:start="75:30" pos:end="75:35">header</name><index pos:start="75:36" pos:end="75:38">[<expr pos:start="75:37" pos:end="75:37"><literal type="number" pos:start="75:37" pos:end="75:37">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:28">(<expr pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:11">fps</name> <argument_list type="generic" pos:start="77:13" pos:end="77:24">&lt; <argument pos:start="77:15" pos:end="77:22"><expr pos:start="77:15" pos:end="77:22"><literal type="number" pos:start="77:15" pos:end="77:15">1</literal> <operator pos:start="77:17" pos:end="77:18">||</operator> <name pos:start="77:20" pos:end="77:22">fps</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="77:26" pos:end="77:27">30</literal></expr>)</condition> <block pos:start="77:30" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:35">

        <expr_stmt pos:start="79:9" pos:end="79:58"><expr pos:start="79:9" pos:end="79:57"><call pos:start="79:9" pos:end="79:57"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:57">(<argument pos:start="79:16" pos:end="79:16"><expr pos:start="79:16" pos:end="79:16"><name pos:start="79:16" pos:end="79:16">s</name></expr></argument>, <argument pos:start="79:19" pos:end="79:30"><expr pos:start="79:19" pos:end="79:30"><name pos:start="79:19" pos:end="79:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:33" pos:end="79:51"><expr pos:start="79:33" pos:end="79:51"><literal type="string" pos:start="79:33" pos:end="79:51">"invalid fps: %d\n"</literal></expr></argument>, <argument pos:start="79:54" pos:end="79:56"><expr pos:start="79:54" pos:end="79:56"><name pos:start="79:54" pos:end="79:56">fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:35">return <expr pos:start="81:16" pos:end="81:34"><name pos:start="81:16" pos:end="81:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:40"><expr pos:start="85:5" pos:end="85:39"><call pos:start="85:5" pos:end="85:39"><name pos:start="85:5" pos:end="85:23">avpriv_set_pts_info</name><argument_list pos:start="85:24" pos:end="85:39">(<argument pos:start="85:25" pos:end="85:26"><expr pos:start="85:25" pos:end="85:26"><name pos:start="85:25" pos:end="85:26">st</name></expr></argument>, <argument pos:start="85:29" pos:end="85:30"><expr pos:start="85:29" pos:end="85:30"><literal type="number" pos:start="85:29" pos:end="85:30">64</literal></expr></argument>, <argument pos:start="85:33" pos:end="85:33"><expr pos:start="85:33" pos:end="85:33"><literal type="number" pos:start="85:33" pos:end="85:33">1</literal></expr></argument>, <argument pos:start="85:36" pos:end="85:38"><expr pos:start="85:36" pos:end="85:38"><name pos:start="85:36" pos:end="85:38">fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:47"><expr pos:start="89:5" pos:end="89:46"><name pos:start="89:5" pos:end="89:18"><name pos:start="89:5" pos:end="89:9">wsvqa</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:18">version</name></name>      <operator pos:start="89:25" pos:end="89:25">=</operator> <call pos:start="89:27" pos:end="89:46"><name pos:start="89:27" pos:end="89:33">AV_RL16</name><argument_list pos:start="89:34" pos:end="89:46">(<argument pos:start="89:35" pos:end="89:45"><expr pos:start="89:35" pos:end="89:45"><operator pos:start="89:35" pos:end="89:35">&amp;</operator><name pos:start="89:36" pos:end="89:45"><name pos:start="89:36" pos:end="89:41">header</name><index pos:start="89:42" pos:end="89:45">[ <expr pos:start="89:44" pos:end="89:44"><literal type="number" pos:start="89:44" pos:end="89:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:47"><expr pos:start="91:5" pos:end="91:46"><name pos:start="91:5" pos:end="91:22"><name pos:start="91:5" pos:end="91:9">wsvqa</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:22">sample_rate</name></name>  <operator pos:start="91:25" pos:end="91:25">=</operator> <call pos:start="91:27" pos:end="91:46"><name pos:start="91:27" pos:end="91:33">AV_RL16</name><argument_list pos:start="91:34" pos:end="91:46">(<argument pos:start="91:35" pos:end="91:45"><expr pos:start="91:35" pos:end="91:45"><operator pos:start="91:35" pos:end="91:35">&amp;</operator><name pos:start="91:36" pos:end="91:45"><name pos:start="91:36" pos:end="91:41">header</name><index pos:start="91:42" pos:end="91:45">[<expr pos:start="91:43" pos:end="91:44"><literal type="number" pos:start="91:43" pos:end="91:44">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:37"><expr pos:start="93:5" pos:end="93:36"><name pos:start="93:5" pos:end="93:19"><name pos:start="93:5" pos:end="93:9">wsvqa</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:19">channels</name></name>     <operator pos:start="93:25" pos:end="93:25">=</operator> <name pos:start="93:27" pos:end="93:36"><name pos:start="93:27" pos:end="93:32">header</name><index pos:start="93:33" pos:end="93:36">[<expr pos:start="93:34" pos:end="93:35"><literal type="number" pos:start="93:34" pos:end="93:35">26</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:37"><expr pos:start="95:5" pos:end="95:36"><name pos:start="95:5" pos:end="95:14"><name pos:start="95:5" pos:end="95:9">wsvqa</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:14">bps</name></name>          <operator pos:start="95:25" pos:end="95:25">=</operator> <name pos:start="95:27" pos:end="95:36"><name pos:start="95:27" pos:end="95:32">header</name><index pos:start="95:33" pos:end="95:36">[<expr pos:start="95:34" pos:end="95:35"><literal type="number" pos:start="95:34" pos:end="95:35">27</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:35"><expr pos:start="97:5" pos:end="97:34"><name pos:start="97:5" pos:end="97:29"><name pos:start="97:5" pos:end="97:9">wsvqa</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:29">audio_stream_index</name></name> <operator pos:start="97:31" pos:end="97:31">=</operator> <operator pos:start="97:33" pos:end="97:33">-</operator><literal type="number" pos:start="97:34" pos:end="97:34">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:38"><expr pos:start="101:5" pos:end="101:37"><name pos:start="101:5" pos:end="101:16"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:16">ctx_flags</name></name> <operator pos:start="101:18" pos:end="101:19">|=</operator> <name pos:start="101:21" pos:end="101:37">AVFMTCTX_NOHEADER</name></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="107:72">/* there are 0 or more chunks before the FINF chunk; iterate until

     * FINF has been skipped and the file will be ready to be demuxed */</comment>

    <do pos:start="109:5" pos:end="161:36">do <block pos:start="109:8" pos:end="161:5">{<block_content pos:start="111:9" pos:end="159:34">

        <if_stmt pos:start="111:9" pos:end="113:32"><if pos:start="111:9" pos:end="113:32">if <condition pos:start="111:12" pos:end="111:75">(<expr pos:start="111:13" pos:end="111:74"><call pos:start="111:13" pos:end="111:53"><name pos:start="111:13" pos:end="111:21">avio_read</name><argument_list pos:start="111:22" pos:end="111:53">(<argument pos:start="111:23" pos:end="111:24"><expr pos:start="111:23" pos:end="111:24"><name pos:start="111:23" pos:end="111:24">pb</name></expr></argument>, <argument pos:start="111:27" pos:end="111:33"><expr pos:start="111:27" pos:end="111:33"><name pos:start="111:27" pos:end="111:33">scratch</name></expr></argument>, <argument pos:start="111:36" pos:end="111:52"><expr pos:start="111:36" pos:end="111:52"><name pos:start="111:36" pos:end="111:52">VQA_PREAMBLE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="111:55" pos:end="111:56">!=</operator> <name pos:start="111:58" pos:end="111:74">VQA_PREAMBLE_SIZE</name></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:32"><block_content pos:start="113:13" pos:end="113:32">

            <return pos:start="113:13" pos:end="113:32">return <expr pos:start="113:20" pos:end="113:31"><call pos:start="113:20" pos:end="113:31"><name pos:start="113:20" pos:end="113:26">AVERROR</name><argument_list pos:start="113:27" pos:end="113:31">(<argument pos:start="113:28" pos:end="113:30"><expr pos:start="113:28" pos:end="113:30"><name pos:start="113:28" pos:end="113:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:41"><expr pos:start="115:9" pos:end="115:40"><name pos:start="115:9" pos:end="115:17">chunk_tag</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <call pos:start="115:21" pos:end="115:40"><name pos:start="115:21" pos:end="115:27">AV_RB32</name><argument_list pos:start="115:28" pos:end="115:40">(<argument pos:start="115:29" pos:end="115:39"><expr pos:start="115:29" pos:end="115:39"><operator pos:start="115:29" pos:end="115:29">&amp;</operator><name pos:start="115:30" pos:end="115:39"><name pos:start="115:30" pos:end="115:36">scratch</name><index pos:start="115:37" pos:end="115:39">[<expr pos:start="115:38" pos:end="115:38"><literal type="number" pos:start="115:38" pos:end="115:38">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:42"><expr pos:start="117:9" pos:end="117:41"><name pos:start="117:9" pos:end="117:18">chunk_size</name> <operator pos:start="117:20" pos:end="117:20">=</operator> <call pos:start="117:22" pos:end="117:41"><name pos:start="117:22" pos:end="117:28">AV_RB32</name><argument_list pos:start="117:29" pos:end="117:41">(<argument pos:start="117:30" pos:end="117:40"><expr pos:start="117:30" pos:end="117:40"><operator pos:start="117:30" pos:end="117:30">&amp;</operator><name pos:start="117:31" pos:end="117:40"><name pos:start="117:31" pos:end="117:37">scratch</name><index pos:start="117:38" pos:end="117:40">[<expr pos:start="117:39" pos:end="117:39"><literal type="number" pos:start="117:39" pos:end="117:39">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="121:9" pos:end="121:59">/* catch any unknown header tags, for curiousity */</comment>

        <switch pos:start="123:9" pos:end="155:9">switch <condition pos:start="123:16" pos:end="123:26">(<expr pos:start="123:17" pos:end="123:25"><name pos:start="123:17" pos:end="123:25">chunk_tag</name></expr>)</condition> <block pos:start="123:28" pos:end="155:9">{<block_content pos:start="125:9" pos:end="153:18">

        <case pos:start="125:9" pos:end="125:22">case <expr pos:start="125:14" pos:end="125:21"><name pos:start="125:14" pos:end="125:21">CINF_TAG</name></expr>:</case>

        <case pos:start="127:9" pos:end="127:22">case <expr pos:start="127:14" pos:end="127:21"><name pos:start="127:14" pos:end="127:21">CINH_TAG</name></expr>:</case>

        <case pos:start="129:9" pos:end="129:22">case <expr pos:start="129:14" pos:end="129:21"><name pos:start="129:14" pos:end="129:21">CIND_TAG</name></expr>:</case>

        <case pos:start="131:9" pos:end="131:22">case <expr pos:start="131:14" pos:end="131:21"><name pos:start="131:14" pos:end="131:21">PINF_TAG</name></expr>:</case>

        <case pos:start="133:9" pos:end="133:22">case <expr pos:start="133:14" pos:end="133:21"><name pos:start="133:14" pos:end="133:21">PINH_TAG</name></expr>:</case>

        <case pos:start="135:9" pos:end="135:22">case <expr pos:start="135:14" pos:end="135:21"><name pos:start="135:14" pos:end="135:21">PIND_TAG</name></expr>:</case>

        <case pos:start="137:9" pos:end="137:22">case <expr pos:start="137:14" pos:end="137:21"><name pos:start="137:14" pos:end="137:21">FINF_TAG</name></expr>:</case>

        <case pos:start="139:9" pos:end="139:22">case <expr pos:start="139:14" pos:end="139:21"><name pos:start="139:14" pos:end="139:21">CMDS_TAG</name></expr>:</case>

            <break pos:start="141:13" pos:end="141:18">break;</break>



        <default pos:start="145:9" pos:end="145:16">default:</default>

            <expr_stmt pos:start="147:13" pos:end="151:40"><expr pos:start="147:13" pos:end="151:39"><call pos:start="147:13" pos:end="151:39"><name pos:start="147:13" pos:end="147:18">av_log</name> <argument_list pos:start="147:20" pos:end="151:39">(<argument pos:start="147:21" pos:end="147:21"><expr pos:start="147:21" pos:end="147:21"><name pos:start="147:21" pos:end="147:21">s</name></expr></argument>, <argument pos:start="147:24" pos:end="147:35"><expr pos:start="147:24" pos:end="147:35"><name pos:start="147:24" pos:end="147:35">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:38" pos:end="147:77"><expr pos:start="147:38" pos:end="147:77"><literal type="string" pos:start="147:38" pos:end="147:77">" note: unknown chunk seen (%c%c%c%c)\n"</literal></expr></argument>,

                <argument pos:start="149:17" pos:end="149:26"><expr pos:start="149:17" pos:end="149:26"><name pos:start="149:17" pos:end="149:26"><name pos:start="149:17" pos:end="149:23">scratch</name><index pos:start="149:24" pos:end="149:26">[<expr pos:start="149:25" pos:end="149:25"><literal type="number" pos:start="149:25" pos:end="149:25">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="149:29" pos:end="149:38"><expr pos:start="149:29" pos:end="149:38"><name pos:start="149:29" pos:end="149:38"><name pos:start="149:29" pos:end="149:35">scratch</name><index pos:start="149:36" pos:end="149:38">[<expr pos:start="149:37" pos:end="149:37"><literal type="number" pos:start="149:37" pos:end="149:37">1</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="151:17" pos:end="151:26"><expr pos:start="151:17" pos:end="151:26"><name pos:start="151:17" pos:end="151:26"><name pos:start="151:17" pos:end="151:23">scratch</name><index pos:start="151:24" pos:end="151:26">[<expr pos:start="151:25" pos:end="151:25"><literal type="number" pos:start="151:25" pos:end="151:25">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="151:29" pos:end="151:38"><expr pos:start="151:29" pos:end="151:38"><name pos:start="151:29" pos:end="151:38"><name pos:start="151:29" pos:end="151:35">scratch</name><index pos:start="151:36" pos:end="151:38">[<expr pos:start="151:37" pos:end="151:37"><literal type="number" pos:start="151:37" pos:end="151:37">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="159:9" pos:end="159:34"><expr pos:start="159:9" pos:end="159:33"><call pos:start="159:9" pos:end="159:33"><name pos:start="159:9" pos:end="159:17">avio_skip</name><argument_list pos:start="159:18" pos:end="159:33">(<argument pos:start="159:19" pos:end="159:20"><expr pos:start="159:19" pos:end="159:20"><name pos:start="159:19" pos:end="159:20">pb</name></expr></argument>, <argument pos:start="159:23" pos:end="159:32"><expr pos:start="159:23" pos:end="159:32"><name pos:start="159:23" pos:end="159:32">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="161:13" pos:end="161:35">(<expr pos:start="161:14" pos:end="161:34"><name pos:start="161:14" pos:end="161:22">chunk_tag</name> <operator pos:start="161:24" pos:end="161:25">!=</operator> <name pos:start="161:27" pos:end="161:34">FINF_TAG</name></expr>)</condition>;</do>



    <return pos:start="165:5" pos:end="165:13">return <expr pos:start="165:12" pos:end="165:12"><literal type="number" pos:start="165:12" pos:end="165:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
