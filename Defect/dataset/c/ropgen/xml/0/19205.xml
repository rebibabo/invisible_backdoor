<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19205.c" pos:tabs="8"><function pos:start="1:1" pos:end="387:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">sun4m_hw_init</name><parameter_list pos:start="1:26" pos:end="3:52">(<parameter pos:start="1:27" pos:end="1:57"><decl pos:start="1:27" pos:end="1:57"><type pos:start="1:27" pos:end="1:57"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:38">struct</name> <name pos:start="1:40" pos:end="1:50">sun4m_hwdef</name></name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">hwdef</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:51"><decl pos:start="3:27" pos:end="3:51"><type pos:start="3:27" pos:end="3:51"><name pos:start="3:27" pos:end="3:45">QEMUMachineInitArgs</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:51">args</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="387:1">{<block_content pos:start="7:5" pos:end="385:52">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:32">args</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:15">iommu</name></decl>, <decl pos:start="11:18" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:24">espdma</name></decl>, <decl pos:start="11:27" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:32">ledma</name></decl>, <decl pos:start="11:35" pos:end="11:40"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:35" pos:end="11:35">*</modifier></type><name pos:start="11:36" pos:end="11:40">nvram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="15:30"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">qemu_irq</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:32"><name pos:start="13:15" pos:end="13:22">cpu_irqs</name><index pos:start="13:23" pos:end="13:32">[<expr pos:start="13:24" pos:end="13:31"><name pos:start="13:24" pos:end="13:31">MAX_CPUS</name></expr>]</index></name></decl>, <decl pos:start="13:35" pos:end="13:48"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="13:35" pos:end="13:48"><name pos:start="13:35" pos:end="13:44">slavio_irq</name><index pos:start="13:45" pos:end="13:48">[<expr pos:start="13:46" pos:end="13:47"><literal type="number" pos:start="13:46" pos:end="13:47">32</literal></expr>]</index></name></decl>, <decl pos:start="13:51" pos:end="13:74"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="13:51" pos:end="13:74"><name pos:start="13:51" pos:end="13:64">slavio_cpu_irq</name><index pos:start="13:65" pos:end="13:74">[<expr pos:start="13:66" pos:end="13:73"><name pos:start="13:66" pos:end="13:73">MAX_CPUS</name></expr>]</index></name></decl>,

        <decl pos:start="15:9" pos:end="15:18"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="15:9" pos:end="15:18">espdma_irq</name></decl>, <decl pos:start="15:21" pos:end="15:29"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="15:21" pos:end="15:29">ledma_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">qemu_irq</name></type> <name pos:start="17:14" pos:end="17:22">esp_reset</name></decl>, <decl pos:start="17:25" pos:end="17:34"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:25" pos:end="17:34">dma_enable</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">qemu_irq</name></type> <name pos:start="19:14" pos:end="19:19">fdc_tc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:22">cpu_halt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:17">long</name></type> <name pos:start="23:19" pos:end="23:29">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:13">DriveInfo</name> <modifier pos:start="25:15" pos:end="25:15">*</modifier></type><name pos:start="25:16" pos:end="25:25"><name pos:start="25:16" pos:end="25:17">fd</name><index pos:start="25:18" pos:end="25:25">[<expr pos:start="25:19" pos:end="25:24"><name pos:start="25:19" pos:end="25:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:23"><decl pos:start="27:5" pos:end="27:22"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:14">FWCfgState</name> <modifier pos:start="27:16" pos:end="27:16">*</modifier></type><name pos:start="27:17" pos:end="27:22">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:12">unsigned</name> <name pos:start="29:14" pos:end="29:16">int</name></type> <name pos:start="29:18" pos:end="29:27">num_vsimms</name></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:19">/* init CPUs */</comment>

    <if_stmt pos:start="35:5" pos:end="37:45"><if pos:start="35:5" pos:end="37:45">if <condition pos:start="35:8" pos:end="35:19">(<expr pos:start="35:9" pos:end="35:18"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:45"><block_content pos:start="37:9" pos:end="37:45">

        <expr_stmt pos:start="37:9" pos:end="37:45"><expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:17">cpu_model</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:44"><name pos:start="37:21" pos:end="37:25">hwdef</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:44">default_cpu_model</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="41:5" pos:end="45:5">for<control pos:start="41:8" pos:end="41:33">(<init pos:start="41:9" pos:end="41:14"><expr pos:start="41:9" pos:end="41:13"><name pos:start="41:9" pos:end="41:9">i</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <literal type="number" pos:start="41:13" pos:end="41:13">0</literal></expr>;</init> <condition pos:start="41:16" pos:end="41:28"><expr pos:start="41:16" pos:end="41:27"><name pos:start="41:16" pos:end="41:16">i</name> <operator pos:start="41:18" pos:end="41:18">&lt;</operator> <name pos:start="41:20" pos:end="41:27">smp_cpus</name></expr>;</condition> <incr pos:start="41:30" pos:end="41:32"><expr pos:start="41:30" pos:end="41:32"><name pos:start="41:30" pos:end="41:30">i</name><operator pos:start="41:31" pos:end="41:32">++</operator></expr></incr>)</control> <block pos:start="41:35" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:68">

        <expr_stmt pos:start="43:9" pos:end="43:68"><expr pos:start="43:9" pos:end="43:67"><call pos:start="43:9" pos:end="43:67"><name pos:start="43:9" pos:end="43:19">cpu_devinit</name><argument_list pos:start="43:20" pos:end="43:67">(<argument pos:start="43:21" pos:end="43:29"><expr pos:start="43:21" pos:end="43:29"><name pos:start="43:21" pos:end="43:29">cpu_model</name></expr></argument>, <argument pos:start="43:32" pos:end="43:32"><expr pos:start="43:32" pos:end="43:32"><name pos:start="43:32" pos:end="43:32">i</name></expr></argument>, <argument pos:start="43:35" pos:end="43:52"><expr pos:start="43:35" pos:end="43:52"><name pos:start="43:35" pos:end="43:52"><name pos:start="43:35" pos:end="43:39">hwdef</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:52">slavio_base</name></name></expr></argument>, <argument pos:start="43:55" pos:end="43:66"><expr pos:start="43:55" pos:end="43:66"><operator pos:start="43:55" pos:end="43:55">&amp;</operator><name pos:start="43:56" pos:end="43:66"><name pos:start="43:56" pos:end="43:63">cpu_irqs</name><index pos:start="43:64" pos:end="43:66">[<expr pos:start="43:65" pos:end="43:65"><name pos:start="43:65" pos:end="43:65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="49:5" pos:end="51:76">for <control pos:start="49:9" pos:end="49:41">(<init pos:start="49:10" pos:end="49:22"><expr pos:start="49:10" pos:end="49:21"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:21">smp_cpus</name></expr>;</init> <condition pos:start="49:24" pos:end="49:36"><expr pos:start="49:24" pos:end="49:35"><name pos:start="49:24" pos:end="49:24">i</name> <operator pos:start="49:26" pos:end="49:26">&lt;</operator> <name pos:start="49:28" pos:end="49:35">MAX_CPUS</name></expr>;</condition> <incr pos:start="49:38" pos:end="49:40"><expr pos:start="49:38" pos:end="49:40"><name pos:start="49:38" pos:end="49:38">i</name><operator pos:start="49:39" pos:end="49:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="51:9" pos:end="51:76"><block_content pos:start="51:9" pos:end="51:76">

        <expr_stmt pos:start="51:9" pos:end="51:76"><expr pos:start="51:9" pos:end="51:75"><name pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:16">cpu_irqs</name><index pos:start="51:17" pos:end="51:19">[<expr pos:start="51:18" pos:end="51:18"><name pos:start="51:18" pos:end="51:18">i</name></expr>]</index></name> <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="51:75"><name pos:start="51:23" pos:end="51:40">qemu_allocate_irqs</name><argument_list pos:start="51:41" pos:end="51:75">(<argument pos:start="51:42" pos:end="51:58"><expr pos:start="51:42" pos:end="51:58"><name pos:start="51:42" pos:end="51:58">dummy_cpu_set_irq</name></expr></argument>, <argument pos:start="51:61" pos:end="51:64"><expr pos:start="51:61" pos:end="51:64"><name pos:start="51:61" pos:end="51:64">NULL</name></expr></argument>, <argument pos:start="51:67" pos:end="51:74"><expr pos:start="51:67" pos:end="51:74"><name pos:start="51:67" pos:end="51:74">MAX_PILS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>





    <comment type="block" pos:start="57:5" pos:end="57:24">/* set up devices */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:48"><expr pos:start="59:5" pos:end="59:47"><call pos:start="59:5" pos:end="59:47"><name pos:start="59:5" pos:end="59:12">ram_init</name><argument_list pos:start="59:13" pos:end="59:47">(<argument pos:start="59:14" pos:end="59:14"><expr pos:start="59:14" pos:end="59:14"><literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr></argument>, <argument pos:start="59:17" pos:end="59:30"><expr pos:start="59:17" pos:end="59:30"><name pos:start="59:17" pos:end="59:30"><name pos:start="59:17" pos:end="59:20">args</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:30">ram_size</name></name></expr></argument>, <argument pos:start="59:33" pos:end="59:46"><expr pos:start="59:33" pos:end="59:46"><name pos:start="59:33" pos:end="59:46"><name pos:start="59:33" pos:end="59:37">hwdef</name><operator pos:start="59:38" pos:end="59:39">-&gt;</operator><name pos:start="59:40" pos:end="59:46">max_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="61:68">/* models without ECC don't trap when missing ram is accessed */</comment>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:25">(<expr pos:start="63:9" pos:end="63:24"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:24"><name pos:start="63:10" pos:end="63:14">hwdef</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:24">ecc_base</name></name></expr>)</condition> <block pos:start="63:27" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:73">

        <expr_stmt pos:start="65:9" pos:end="65:73"><expr pos:start="65:9" pos:end="65:72"><call pos:start="65:9" pos:end="65:72"><name pos:start="65:9" pos:end="65:23">empty_slot_init</name><argument_list pos:start="65:24" pos:end="65:72">(<argument pos:start="65:25" pos:end="65:38"><expr pos:start="65:25" pos:end="65:38"><name pos:start="65:25" pos:end="65:38"><name pos:start="65:25" pos:end="65:28">args</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:38">ram_size</name></name></expr></argument>, <argument pos:start="65:41" pos:end="65:71"><expr pos:start="65:41" pos:end="65:71"><name pos:start="65:41" pos:end="65:54"><name pos:start="65:41" pos:end="65:45">hwdef</name><operator pos:start="65:46" pos:end="65:47">-&gt;</operator><name pos:start="65:48" pos:end="65:54">max_mem</name></name> <operator pos:start="65:56" pos:end="65:56">-</operator> <name pos:start="65:58" pos:end="65:71"><name pos:start="65:58" pos:end="65:61">args</name><operator pos:start="65:62" pos:end="65:63">-&gt;</operator><name pos:start="65:64" pos:end="65:71">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:45"><expr pos:start="71:5" pos:end="71:44"><call pos:start="71:5" pos:end="71:44"><name pos:start="71:5" pos:end="71:13">prom_init</name><argument_list pos:start="71:14" pos:end="71:44">(<argument pos:start="71:15" pos:end="71:32"><expr pos:start="71:15" pos:end="71:32"><name pos:start="71:15" pos:end="71:32"><name pos:start="71:15" pos:end="71:19">hwdef</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:32">slavio_base</name></name></expr></argument>, <argument pos:start="71:35" pos:end="71:43"><expr pos:start="71:35" pos:end="71:43"><name pos:start="71:35" pos:end="71:43">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="79:49"><expr pos:start="75:5" pos:end="79:48"><name pos:start="75:5" pos:end="75:17">slavio_intctl</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="79:48"><name pos:start="75:21" pos:end="75:38">slavio_intctl_init</name><argument_list pos:start="75:39" pos:end="79:48">(<argument pos:start="75:40" pos:end="75:57"><expr pos:start="75:40" pos:end="75:57"><name pos:start="75:40" pos:end="75:57"><name pos:start="75:40" pos:end="75:44">hwdef</name><operator pos:start="75:45" pos:end="75:46">-&gt;</operator><name pos:start="75:47" pos:end="75:57">intctl_base</name></name></expr></argument>,

                                       <argument pos:start="77:40" pos:end="77:70"><expr pos:start="77:40" pos:end="77:70"><name pos:start="77:40" pos:end="77:57"><name pos:start="77:40" pos:end="77:44">hwdef</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:57">intctl_base</name></name> <operator pos:start="77:59" pos:end="77:59">+</operator> <literal type="number" pos:start="77:61" pos:end="77:70">0x10000ULL</literal></expr></argument>,

                                       <argument pos:start="79:40" pos:end="79:47"><expr pos:start="79:40" pos:end="79:47"><name pos:start="79:40" pos:end="79:47">cpu_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="83:5" pos:end="87:5">for <control pos:start="83:9" pos:end="83:28">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:23"><expr pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <literal type="number" pos:start="83:21" pos:end="83:22">32</literal></expr>;</condition> <incr pos:start="83:25" pos:end="83:27"><expr pos:start="83:25" pos:end="83:27"><name pos:start="83:25" pos:end="83:25">i</name><operator pos:start="83:26" pos:end="83:27">++</operator></expr></incr>)</control> <block pos:start="83:30" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:59">

        <expr_stmt pos:start="85:9" pos:end="85:59"><expr pos:start="85:9" pos:end="85:58"><name pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:18">slavio_irq</name><index pos:start="85:19" pos:end="85:21">[<expr pos:start="85:20" pos:end="85:20"><name pos:start="85:20" pos:end="85:20">i</name></expr>]</index></name> <operator pos:start="85:23" pos:end="85:23">=</operator> <call pos:start="85:25" pos:end="85:58"><name pos:start="85:25" pos:end="85:40">qdev_get_gpio_in</name><argument_list pos:start="85:41" pos:end="85:58">(<argument pos:start="85:42" pos:end="85:54"><expr pos:start="85:42" pos:end="85:54"><name pos:start="85:42" pos:end="85:54">slavio_intctl</name></expr></argument>, <argument pos:start="85:57" pos:end="85:57"><expr pos:start="85:57" pos:end="85:57"><name pos:start="85:57" pos:end="85:57">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="89:5" pos:end="93:5">for <control pos:start="89:9" pos:end="89:34">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:29"><expr pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <name pos:start="89:21" pos:end="89:28">MAX_CPUS</name></expr>;</condition> <incr pos:start="89:31" pos:end="89:33"><expr pos:start="89:31" pos:end="89:33"><name pos:start="89:31" pos:end="89:31">i</name><operator pos:start="89:32" pos:end="89:33">++</operator></expr></incr>)</control> <block pos:start="89:36" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:68">

        <expr_stmt pos:start="91:9" pos:end="91:68"><expr pos:start="91:9" pos:end="91:67"><name pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:22">slavio_cpu_irq</name><index pos:start="91:23" pos:end="91:25">[<expr pos:start="91:24" pos:end="91:24"><name pos:start="91:24" pos:end="91:24">i</name></expr>]</index></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <call pos:start="91:29" pos:end="91:67"><name pos:start="91:29" pos:end="91:44">qdev_get_gpio_in</name><argument_list pos:start="91:45" pos:end="91:67">(<argument pos:start="91:46" pos:end="91:58"><expr pos:start="91:46" pos:end="91:58"><name pos:start="91:46" pos:end="91:58">slavio_intctl</name></expr></argument>, <argument pos:start="91:61" pos:end="91:66"><expr pos:start="91:61" pos:end="91:66"><literal type="number" pos:start="91:61" pos:end="91:64">32</literal> <operator pos:start="91:64" pos:end="91:64">+</operator> <name pos:start="91:66" pos:end="91:66">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:26">(<expr pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:13">hwdef</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:25">idreg_base</name></name></expr>)</condition> <block pos:start="97:28" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:38">

        <expr_stmt pos:start="99:9" pos:end="99:38"><expr pos:start="99:9" pos:end="99:37"><call pos:start="99:9" pos:end="99:37"><name pos:start="99:9" pos:end="99:18">idreg_init</name><argument_list pos:start="99:19" pos:end="99:37">(<argument pos:start="99:20" pos:end="99:36"><expr pos:start="99:20" pos:end="99:36"><name pos:start="99:20" pos:end="99:36"><name pos:start="99:20" pos:end="99:24">hwdef</name><operator pos:start="99:25" pos:end="99:26">-&gt;</operator><name pos:start="99:27" pos:end="99:36">idreg_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:24">(<expr pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:13">hwdef</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:23">afx_base</name></name></expr>)</condition> <block pos:start="105:26" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:34">

        <expr_stmt pos:start="107:9" pos:end="107:34"><expr pos:start="107:9" pos:end="107:33"><call pos:start="107:9" pos:end="107:33"><name pos:start="107:9" pos:end="107:16">afx_init</name><argument_list pos:start="107:17" pos:end="107:33">(<argument pos:start="107:18" pos:end="107:32"><expr pos:start="107:18" pos:end="107:32"><name pos:start="107:18" pos:end="107:32"><name pos:start="107:18" pos:end="107:22">hwdef</name><operator pos:start="107:23" pos:end="107:24">-&gt;</operator><name pos:start="107:25" pos:end="107:32">afx_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="115:39"><expr pos:start="113:5" pos:end="115:38"><name pos:start="113:5" pos:end="113:9">iommu</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <call pos:start="113:13" pos:end="115:38"><name pos:start="113:13" pos:end="113:22">iommu_init</name><argument_list pos:start="113:23" pos:end="115:38">(<argument pos:start="113:24" pos:end="113:40"><expr pos:start="113:24" pos:end="113:40"><name pos:start="113:24" pos:end="113:40"><name pos:start="113:24" pos:end="113:28">hwdef</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:40">iommu_base</name></name></expr></argument>, <argument pos:start="113:43" pos:end="113:62"><expr pos:start="113:43" pos:end="113:62"><name pos:start="113:43" pos:end="113:62"><name pos:start="113:43" pos:end="113:47">hwdef</name><operator pos:start="113:48" pos:end="113:49">-&gt;</operator><name pos:start="113:50" pos:end="113:62">iommu_version</name></name></expr></argument>,

                       <argument pos:start="115:24" pos:end="115:37"><expr pos:start="115:24" pos:end="115:37"><name pos:start="115:24" pos:end="115:37"><name pos:start="115:24" pos:end="115:33">slavio_irq</name><index pos:start="115:34" pos:end="115:37">[<expr pos:start="115:35" pos:end="115:36"><literal type="number" pos:start="115:35" pos:end="115:36">30</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="131:5"><if pos:start="119:5" pos:end="131:5">if <condition pos:start="119:8" pos:end="119:30">(<expr pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:13">hwdef</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:29">iommu_pad_base</name></name></expr>)</condition> <block pos:start="119:32" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:68">

        <comment type="block" pos:start="121:9" pos:end="127:37">/* On the real hardware (SS-5, LX) the MMU is not padded, but aliased.

           Software shouldn't use aliased addresses, neither should it crash

           when does. Using empty_slot instead of aliasing can help with

           debugging such accesses */</comment>

        <expr_stmt pos:start="129:9" pos:end="129:68"><expr pos:start="129:9" pos:end="129:67"><call pos:start="129:9" pos:end="129:67"><name pos:start="129:9" pos:end="129:23">empty_slot_init</name><argument_list pos:start="129:24" pos:end="129:67">(<argument pos:start="129:25" pos:end="129:45"><expr pos:start="129:25" pos:end="129:45"><name pos:start="129:25" pos:end="129:45"><name pos:start="129:25" pos:end="129:29">hwdef</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:45">iommu_pad_base</name></name></expr></argument>,<argument pos:start="129:47" pos:end="129:66"><expr pos:start="129:47" pos:end="129:66"><name pos:start="129:47" pos:end="129:66"><name pos:start="129:47" pos:end="129:51">hwdef</name><operator pos:start="129:52" pos:end="129:53">-&gt;</operator><name pos:start="129:54" pos:end="129:66">iommu_pad_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="137:53"><expr pos:start="135:5" pos:end="137:52"><name pos:start="135:5" pos:end="135:10">espdma</name> <operator pos:start="135:12" pos:end="135:12">=</operator> <call pos:start="135:14" pos:end="137:52"><name pos:start="135:14" pos:end="135:29">sparc32_dma_init</name><argument_list pos:start="135:30" pos:end="137:52">(<argument pos:start="135:31" pos:end="135:45"><expr pos:start="135:31" pos:end="135:45"><name pos:start="135:31" pos:end="135:45"><name pos:start="135:31" pos:end="135:35">hwdef</name><operator pos:start="135:36" pos:end="135:37">-&gt;</operator><name pos:start="135:38" pos:end="135:45">dma_base</name></name></expr></argument>, <argument pos:start="135:48" pos:end="135:61"><expr pos:start="135:48" pos:end="135:61"><name pos:start="135:48" pos:end="135:61"><name pos:start="135:48" pos:end="135:57">slavio_irq</name><index pos:start="135:58" pos:end="135:61">[<expr pos:start="135:59" pos:end="135:60"><literal type="number" pos:start="135:59" pos:end="135:60">18</literal></expr>]</index></name></expr></argument>,

                              <argument pos:start="137:31" pos:end="137:35"><expr pos:start="137:31" pos:end="137:35"><name pos:start="137:31" pos:end="137:35">iommu</name></expr></argument>, <argument pos:start="137:38" pos:end="137:48"><expr pos:start="137:38" pos:end="137:48"><operator pos:start="137:38" pos:end="137:38">&amp;</operator><name pos:start="137:39" pos:end="137:48">espdma_irq</name></expr></argument>, <argument pos:start="137:51" pos:end="137:51"><expr pos:start="137:51" pos:end="137:51"><literal type="number" pos:start="137:51" pos:end="137:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="143:67"><expr pos:start="141:5" pos:end="143:66"><name pos:start="141:5" pos:end="141:9">ledma</name> <operator pos:start="141:11" pos:end="141:11">=</operator> <call pos:start="141:13" pos:end="143:66"><name pos:start="141:13" pos:end="141:28">sparc32_dma_init</name><argument_list pos:start="141:29" pos:end="143:66">(<argument pos:start="141:30" pos:end="141:52"><expr pos:start="141:30" pos:end="141:52"><name pos:start="141:30" pos:end="141:44"><name pos:start="141:30" pos:end="141:34">hwdef</name><operator pos:start="141:35" pos:end="141:36">-&gt;</operator><name pos:start="141:37" pos:end="141:44">dma_base</name></name> <operator pos:start="141:46" pos:end="141:46">+</operator> <literal type="number" pos:start="141:48" pos:end="141:52">16ULL</literal></expr></argument>,

                             <argument pos:start="143:30" pos:end="143:43"><expr pos:start="143:30" pos:end="143:43"><name pos:start="143:30" pos:end="143:43"><name pos:start="143:30" pos:end="143:39">slavio_irq</name><index pos:start="143:40" pos:end="143:43">[<expr pos:start="143:41" pos:end="143:42"><literal type="number" pos:start="143:41" pos:end="143:42">16</literal></expr>]</index></name></expr></argument>, <argument pos:start="143:46" pos:end="143:50"><expr pos:start="143:46" pos:end="143:50"><name pos:start="143:46" pos:end="143:50">iommu</name></expr></argument>, <argument pos:start="143:53" pos:end="143:62"><expr pos:start="143:53" pos:end="143:62"><operator pos:start="143:53" pos:end="143:53">&amp;</operator><name pos:start="143:54" pos:end="143:62">ledma_irq</name></expr></argument>, <argument pos:start="143:65" pos:end="143:65"><expr pos:start="143:65" pos:end="143:65"><literal type="number" pos:start="143:65" pos:end="143:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="147:5" pos:end="153:5"><if pos:start="147:5" pos:end="153:5">if <condition pos:start="147:8" pos:end="147:50">(<expr pos:start="147:9" pos:end="147:49"><name pos:start="147:9" pos:end="147:21">graphic_depth</name> <operator pos:start="147:23" pos:end="147:24">!=</operator> <literal type="number" pos:start="147:26" pos:end="147:26">8</literal> <operator pos:start="147:28" pos:end="147:29">&amp;&amp;</operator> <name pos:start="147:31" pos:end="147:43">graphic_depth</name> <operator pos:start="147:45" pos:end="147:46">!=</operator> <literal type="number" pos:start="147:48" pos:end="147:49">24</literal></expr>)</condition> <block pos:start="147:52" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:17">

        <expr_stmt pos:start="149:9" pos:end="149:72"><expr pos:start="149:9" pos:end="149:71"><call pos:start="149:9" pos:end="149:71"><name pos:start="149:9" pos:end="149:15">fprintf</name><argument_list pos:start="149:16" pos:end="149:71">(<argument pos:start="149:17" pos:end="149:22"><expr pos:start="149:17" pos:end="149:22"><name pos:start="149:17" pos:end="149:22">stderr</name></expr></argument>, <argument pos:start="149:25" pos:end="149:55"><expr pos:start="149:25" pos:end="149:55"><literal type="string" pos:start="149:25" pos:end="149:55">"qemu: Unsupported depth: %d\n"</literal></expr></argument>, <argument pos:start="149:58" pos:end="149:70"><expr pos:start="149:58" pos:end="149:70"><name pos:start="149:58" pos:end="149:70">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:17"><expr pos:start="151:9" pos:end="151:16"><call pos:start="151:9" pos:end="151:16"><name pos:start="151:9" pos:end="151:12">exit</name> <argument_list pos:start="151:14" pos:end="151:16">(<argument pos:start="151:15" pos:end="151:15"><expr pos:start="151:15" pos:end="151:15"><literal type="number" pos:start="151:15" pos:end="151:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:19"><expr pos:start="155:5" pos:end="155:18"><name pos:start="155:5" pos:end="155:14">num_vsimms</name> <operator pos:start="155:16" pos:end="155:16">=</operator> <literal type="number" pos:start="155:18" pos:end="155:18">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="163:5"><if pos:start="157:5" pos:end="163:5">if <condition pos:start="157:8" pos:end="157:24">(<expr pos:start="157:9" pos:end="157:23"><name pos:start="157:9" pos:end="157:18">num_vsimms</name> <operator pos:start="157:20" pos:end="157:21">==</operator> <literal type="number" pos:start="157:23" pos:end="157:23">0</literal></expr>)</condition> <block pos:start="157:26" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:32">

        <expr_stmt pos:start="159:9" pos:end="161:32"><expr pos:start="159:9" pos:end="161:31"><call pos:start="159:9" pos:end="161:31"><name pos:start="159:9" pos:end="159:16">tcx_init</name><argument_list pos:start="159:17" pos:end="161:31">(<argument pos:start="159:18" pos:end="159:32"><expr pos:start="159:18" pos:end="159:32"><name pos:start="159:18" pos:end="159:32"><name pos:start="159:18" pos:end="159:22">hwdef</name><operator pos:start="159:23" pos:end="159:24">-&gt;</operator><name pos:start="159:25" pos:end="159:32">tcx_base</name></name></expr></argument>, <argument pos:start="159:35" pos:end="159:44"><expr pos:start="159:35" pos:end="159:44"><literal type="number" pos:start="159:35" pos:end="159:44">0x00100000</literal></expr></argument>, <argument pos:start="159:47" pos:end="159:59"><expr pos:start="159:47" pos:end="159:59"><name pos:start="159:47" pos:end="159:59">graphic_width</name></expr></argument>, <argument pos:start="159:62" pos:end="159:75"><expr pos:start="159:62" pos:end="159:75"><name pos:start="159:62" pos:end="159:75">graphic_height</name></expr></argument>,

                 <argument pos:start="161:18" pos:end="161:30"><expr pos:start="161:18" pos:end="161:30"><name pos:start="161:18" pos:end="161:30">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="167:5" pos:end="177:5">for <control pos:start="167:9" pos:end="167:45">(<init pos:start="167:10" pos:end="167:24"><expr pos:start="167:10" pos:end="167:23"><name pos:start="167:10" pos:end="167:10">i</name> <operator pos:start="167:12" pos:end="167:12">=</operator> <name pos:start="167:14" pos:end="167:23">num_vsimms</name></expr>;</init> <condition pos:start="167:26" pos:end="167:40"><expr pos:start="167:26" pos:end="167:39"><name pos:start="167:26" pos:end="167:26">i</name> <operator pos:start="167:28" pos:end="167:28">&lt;</operator> <name pos:start="167:30" pos:end="167:39">MAX_VSIMMS</name></expr>;</condition> <incr pos:start="167:42" pos:end="167:44"><expr pos:start="167:42" pos:end="167:44"><name pos:start="167:42" pos:end="167:42">i</name><operator pos:start="167:43" pos:end="167:44">++</operator></expr></incr>)</control> <block pos:start="167:47" pos:end="177:5">{<block_content pos:start="171:9" pos:end="175:9">

        <comment type="block" pos:start="169:9" pos:end="169:43">/* vsimm registers probed by OBP */</comment>

        <if_stmt pos:start="171:9" pos:end="175:9"><if pos:start="171:9" pos:end="175:9">if <condition pos:start="171:12" pos:end="171:37">(<expr pos:start="171:13" pos:end="171:36"><name pos:start="171:13" pos:end="171:27"><name pos:start="171:13" pos:end="171:17">hwdef</name><operator pos:start="171:18" pos:end="171:19">-&gt;</operator><name pos:start="171:20" pos:end="171:24">vsimm</name><index pos:start="171:25" pos:end="171:27">[<expr pos:start="171:26" pos:end="171:26"><name pos:start="171:26" pos:end="171:26">i</name></expr>]</index></name><operator pos:start="171:28" pos:end="171:28">.</operator><name pos:start="171:29" pos:end="171:36">reg_base</name></expr>)</condition> <block pos:start="171:39" pos:end="175:9">{<block_content pos:start="173:13" pos:end="173:62">

            <expr_stmt pos:start="173:13" pos:end="173:62"><expr pos:start="173:13" pos:end="173:61"><call pos:start="173:13" pos:end="173:61"><name pos:start="173:13" pos:end="173:27">empty_slot_init</name><argument_list pos:start="173:28" pos:end="173:61">(<argument pos:start="173:29" pos:end="173:52"><expr pos:start="173:29" pos:end="173:52"><name pos:start="173:29" pos:end="173:43"><name pos:start="173:29" pos:end="173:33">hwdef</name><operator pos:start="173:34" pos:end="173:35">-&gt;</operator><name pos:start="173:36" pos:end="173:40">vsimm</name><index pos:start="173:41" pos:end="173:43">[<expr pos:start="173:42" pos:end="173:42"><name pos:start="173:42" pos:end="173:42">i</name></expr>]</index></name><operator pos:start="173:44" pos:end="173:44">.</operator><name pos:start="173:45" pos:end="173:52">reg_base</name></expr></argument>, <argument pos:start="173:55" pos:end="173:60"><expr pos:start="173:55" pos:end="173:60"><literal type="number" pos:start="173:55" pos:end="173:60">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="181:5" pos:end="185:5"><if pos:start="181:5" pos:end="185:5">if <condition pos:start="181:8" pos:end="181:23">(<expr pos:start="181:9" pos:end="181:22"><name pos:start="181:9" pos:end="181:22"><name pos:start="181:9" pos:end="181:13">hwdef</name><operator pos:start="181:14" pos:end="181:15">-&gt;</operator><name pos:start="181:16" pos:end="181:22">sx_base</name></name></expr>)</condition> <block pos:start="181:25" pos:end="185:5">{<block_content pos:start="183:9" pos:end="183:48">

        <expr_stmt pos:start="183:9" pos:end="183:48"><expr pos:start="183:9" pos:end="183:47"><call pos:start="183:9" pos:end="183:47"><name pos:start="183:9" pos:end="183:23">empty_slot_init</name><argument_list pos:start="183:24" pos:end="183:47">(<argument pos:start="183:25" pos:end="183:38"><expr pos:start="183:25" pos:end="183:38"><name pos:start="183:25" pos:end="183:38"><name pos:start="183:25" pos:end="183:29">hwdef</name><operator pos:start="183:30" pos:end="183:31">-&gt;</operator><name pos:start="183:32" pos:end="183:38">sx_base</name></name></expr></argument>, <argument pos:start="183:41" pos:end="183:46"><expr pos:start="183:41" pos:end="183:46"><literal type="number" pos:start="183:41" pos:end="183:46">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="189:5" pos:end="189:63"><expr pos:start="189:5" pos:end="189:62"><call pos:start="189:5" pos:end="189:62"><name pos:start="189:5" pos:end="189:14">lance_init</name><argument_list pos:start="189:15" pos:end="189:62">(<argument pos:start="189:16" pos:end="189:27"><expr pos:start="189:16" pos:end="189:27"><operator pos:start="189:16" pos:end="189:16">&amp;</operator><name pos:start="189:17" pos:end="189:27"><name pos:start="189:17" pos:end="189:24">nd_table</name><index pos:start="189:25" pos:end="189:27">[<expr pos:start="189:26" pos:end="189:26"><literal type="number" pos:start="189:26" pos:end="189:26">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="189:30" pos:end="189:43"><expr pos:start="189:30" pos:end="189:43"><name pos:start="189:30" pos:end="189:43"><name pos:start="189:30" pos:end="189:34">hwdef</name><operator pos:start="189:35" pos:end="189:36">-&gt;</operator><name pos:start="189:37" pos:end="189:43">le_base</name></name></expr></argument>, <argument pos:start="189:46" pos:end="189:50"><expr pos:start="189:46" pos:end="189:50"><name pos:start="189:46" pos:end="189:50">ledma</name></expr></argument>, <argument pos:start="189:53" pos:end="189:61"><expr pos:start="189:53" pos:end="189:61"><name pos:start="189:53" pos:end="189:61">ledma_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:72"><expr pos:start="193:5" pos:end="193:71"><name pos:start="193:5" pos:end="193:9">nvram</name> <operator pos:start="193:11" pos:end="193:11">=</operator> <call pos:start="193:13" pos:end="193:71"><name pos:start="193:13" pos:end="193:23">m48t59_init</name><argument_list pos:start="193:24" pos:end="193:71">(<argument pos:start="193:25" pos:end="193:37"><expr pos:start="193:25" pos:end="193:37"><name pos:start="193:25" pos:end="193:37"><name pos:start="193:25" pos:end="193:34">slavio_irq</name><index pos:start="193:35" pos:end="193:37">[<expr pos:start="193:36" pos:end="193:36"><literal type="number" pos:start="193:36" pos:end="193:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="193:40" pos:end="193:56"><expr pos:start="193:40" pos:end="193:56"><name pos:start="193:40" pos:end="193:56"><name pos:start="193:40" pos:end="193:44">hwdef</name><operator pos:start="193:45" pos:end="193:46">-&gt;</operator><name pos:start="193:47" pos:end="193:56">nvram_base</name></name></expr></argument>, <argument pos:start="193:59" pos:end="193:59"><expr pos:start="193:59" pos:end="193:59"><literal type="number" pos:start="193:59" pos:end="193:59">0</literal></expr></argument>, <argument pos:start="193:62" pos:end="193:67"><expr pos:start="193:62" pos:end="193:67"><literal type="number" pos:start="193:62" pos:end="193:67">0x2000</literal></expr></argument>, <argument pos:start="193:70" pos:end="193:70"><expr pos:start="193:70" pos:end="193:70"><literal type="number" pos:start="193:70" pos:end="193:70">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:89"><expr pos:start="197:5" pos:end="197:88"><call pos:start="197:5" pos:end="197:88"><name pos:start="197:5" pos:end="197:25">slavio_timer_init_all</name><argument_list pos:start="197:26" pos:end="197:88">(<argument pos:start="197:27" pos:end="197:45"><expr pos:start="197:27" pos:end="197:45"><name pos:start="197:27" pos:end="197:45"><name pos:start="197:27" pos:end="197:31">hwdef</name><operator pos:start="197:32" pos:end="197:33">-&gt;</operator><name pos:start="197:34" pos:end="197:45">counter_base</name></name></expr></argument>, <argument pos:start="197:48" pos:end="197:61"><expr pos:start="197:48" pos:end="197:61"><name pos:start="197:48" pos:end="197:61"><name pos:start="197:48" pos:end="197:57">slavio_irq</name><index pos:start="197:58" pos:end="197:61">[<expr pos:start="197:59" pos:end="197:60"><literal type="number" pos:start="197:59" pos:end="197:60">19</literal></expr>]</index></name></expr></argument>, <argument pos:start="197:64" pos:end="197:77"><expr pos:start="197:64" pos:end="197:77"><name pos:start="197:64" pos:end="197:77">slavio_cpu_irq</name></expr></argument>, <argument pos:start="197:80" pos:end="197:87"><expr pos:start="197:80" pos:end="197:87"><name pos:start="197:80" pos:end="197:87">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="201:5" pos:end="203:75"><expr pos:start="201:5" pos:end="203:74"><call pos:start="201:5" pos:end="203:74"><name pos:start="201:5" pos:end="201:29">slavio_serial_ms_kbd_init</name><argument_list pos:start="201:30" pos:end="203:74">(<argument pos:start="201:31" pos:end="201:47"><expr pos:start="201:31" pos:end="201:47"><name pos:start="201:31" pos:end="201:47"><name pos:start="201:31" pos:end="201:35">hwdef</name><operator pos:start="201:36" pos:end="201:37">-&gt;</operator><name pos:start="201:38" pos:end="201:47">ms_kb_base</name></name></expr></argument>, <argument pos:start="201:50" pos:end="201:63"><expr pos:start="201:50" pos:end="201:63"><name pos:start="201:50" pos:end="201:63"><name pos:start="201:50" pos:end="201:59">slavio_irq</name><index pos:start="201:60" pos:end="201:63">[<expr pos:start="201:61" pos:end="201:62"><literal type="number" pos:start="201:61" pos:end="201:62">14</literal></expr>]</index></name></expr></argument>,

                              <argument pos:start="203:31" pos:end="203:58"><expr pos:start="203:31" pos:end="203:58"><name pos:start="203:31" pos:end="203:42">display_type</name> <operator pos:start="203:44" pos:end="203:45">==</operator> <name pos:start="203:47" pos:end="203:58">DT_NOGRAPHIC</name></expr></argument>, <argument pos:start="203:61" pos:end="203:70"><expr pos:start="203:61" pos:end="203:70"><name pos:start="203:61" pos:end="203:70">ESCC_CLOCK</name></expr></argument>, <argument pos:start="203:73" pos:end="203:73"><expr pos:start="203:73" pos:end="203:73"><literal type="number" pos:start="203:73" pos:end="203:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="205:5" pos:end="207:76">/* Slavio TTYA (base+4, Linux ttyS0) is the first QEMU serial device

       Slavio TTYB (base+0, Linux ttyS1) is the second QEMU serial device */</comment>

    <expr_stmt pos:start="209:5" pos:end="211:59"><expr pos:start="209:5" pos:end="211:58"><call pos:start="209:5" pos:end="211:58"><name pos:start="209:5" pos:end="209:13">escc_init</name><argument_list pos:start="209:14" pos:end="211:58">(<argument pos:start="209:15" pos:end="209:32"><expr pos:start="209:15" pos:end="209:32"><name pos:start="209:15" pos:end="209:32"><name pos:start="209:15" pos:end="209:19">hwdef</name><operator pos:start="209:20" pos:end="209:21">-&gt;</operator><name pos:start="209:22" pos:end="209:32">serial_base</name></name></expr></argument>, <argument pos:start="209:35" pos:end="209:48"><expr pos:start="209:35" pos:end="209:48"><name pos:start="209:35" pos:end="209:48"><name pos:start="209:35" pos:end="209:44">slavio_irq</name><index pos:start="209:45" pos:end="209:48">[<expr pos:start="209:46" pos:end="209:47"><literal type="number" pos:start="209:46" pos:end="209:47">15</literal></expr>]</index></name></expr></argument>, <argument pos:start="209:51" pos:end="209:64"><expr pos:start="209:51" pos:end="209:64"><name pos:start="209:51" pos:end="209:64"><name pos:start="209:51" pos:end="209:60">slavio_irq</name><index pos:start="209:61" pos:end="209:64">[<expr pos:start="209:62" pos:end="209:63"><literal type="number" pos:start="209:62" pos:end="209:63">15</literal></expr>]</index></name></expr></argument>,

              <argument pos:start="211:15" pos:end="211:27"><expr pos:start="211:15" pos:end="211:27"><name pos:start="211:15" pos:end="211:27"><name pos:start="211:15" pos:end="211:24">serial_hds</name><index pos:start="211:25" pos:end="211:27">[<expr pos:start="211:26" pos:end="211:26"><literal type="number" pos:start="211:26" pos:end="211:26">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="211:30" pos:end="211:42"><expr pos:start="211:30" pos:end="211:42"><name pos:start="211:30" pos:end="211:42"><name pos:start="211:30" pos:end="211:39">serial_hds</name><index pos:start="211:40" pos:end="211:42">[<expr pos:start="211:41" pos:end="211:41"><literal type="number" pos:start="211:41" pos:end="211:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="211:45" pos:end="211:54"><expr pos:start="211:45" pos:end="211:54"><name pos:start="211:45" pos:end="211:54">ESCC_CLOCK</name></expr></argument>, <argument pos:start="211:57" pos:end="211:57"><expr pos:start="211:57" pos:end="211:57"><literal type="number" pos:start="211:57" pos:end="211:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="215:5" pos:end="215:60"><expr pos:start="215:5" pos:end="215:59"><name pos:start="215:5" pos:end="215:12">cpu_halt</name> <operator pos:start="215:14" pos:end="215:14">=</operator> <call pos:start="215:16" pos:end="215:59"><name pos:start="215:16" pos:end="215:33">qemu_allocate_irqs</name><argument_list pos:start="215:34" pos:end="215:59">(<argument pos:start="215:35" pos:end="215:49"><expr pos:start="215:35" pos:end="215:49"><name pos:start="215:35" pos:end="215:49">cpu_halt_signal</name></expr></argument>, <argument pos:start="215:52" pos:end="215:55"><expr pos:start="215:52" pos:end="215:55"><name pos:start="215:52" pos:end="215:55">NULL</name></expr></argument>, <argument pos:start="215:58" pos:end="215:58"><expr pos:start="215:58" pos:end="215:58"><literal type="number" pos:start="215:58" pos:end="215:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="217:5" pos:end="221:5"><if pos:start="217:5" pos:end="221:5">if <condition pos:start="217:8" pos:end="217:24">(<expr pos:start="217:9" pos:end="217:23"><name pos:start="217:9" pos:end="217:23"><name pos:start="217:9" pos:end="217:13">hwdef</name><operator pos:start="217:14" pos:end="217:15">-&gt;</operator><name pos:start="217:16" pos:end="217:23">apc_base</name></name></expr>)</condition> <block pos:start="217:26" pos:end="221:5">{<block_content pos:start="219:9" pos:end="219:47">

        <expr_stmt pos:start="219:9" pos:end="219:47"><expr pos:start="219:9" pos:end="219:46"><call pos:start="219:9" pos:end="219:46"><name pos:start="219:9" pos:end="219:16">apc_init</name><argument_list pos:start="219:17" pos:end="219:46">(<argument pos:start="219:18" pos:end="219:32"><expr pos:start="219:18" pos:end="219:32"><name pos:start="219:18" pos:end="219:32"><name pos:start="219:18" pos:end="219:22">hwdef</name><operator pos:start="219:23" pos:end="219:24">-&gt;</operator><name pos:start="219:25" pos:end="219:32">apc_base</name></name></expr></argument>, <argument pos:start="219:35" pos:end="219:45"><expr pos:start="219:35" pos:end="219:45"><name pos:start="219:35" pos:end="219:45"><name pos:start="219:35" pos:end="219:42">cpu_halt</name><index pos:start="219:43" pos:end="219:45">[<expr pos:start="219:44" pos:end="219:44"><literal type="number" pos:start="219:44" pos:end="219:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="225:5" pos:end="241:5"><if pos:start="225:5" pos:end="237:5">if <condition pos:start="225:8" pos:end="225:23">(<expr pos:start="225:9" pos:end="225:22"><name pos:start="225:9" pos:end="225:22"><name pos:start="225:9" pos:end="225:13">hwdef</name><operator pos:start="225:14" pos:end="225:15">-&gt;</operator><name pos:start="225:16" pos:end="225:22">fd_base</name></name></expr>)</condition> <block pos:start="225:25" pos:end="237:5">{<block_content pos:start="229:9" pos:end="235:35">

        <comment type="block" pos:start="227:9" pos:end="227:47">/* there is zero or one floppy drive */</comment>

        <expr_stmt pos:start="229:9" pos:end="229:34"><expr pos:start="229:9" pos:end="229:33"><call pos:start="229:9" pos:end="229:33"><name pos:start="229:9" pos:end="229:14">memset</name><argument_list pos:start="229:15" pos:end="229:33">(<argument pos:start="229:16" pos:end="229:17"><expr pos:start="229:16" pos:end="229:17"><name pos:start="229:16" pos:end="229:17">fd</name></expr></argument>, <argument pos:start="229:20" pos:end="229:20"><expr pos:start="229:20" pos:end="229:20"><literal type="number" pos:start="229:20" pos:end="229:20">0</literal></expr></argument>, <argument pos:start="229:23" pos:end="229:32"><expr pos:start="229:23" pos:end="229:32"><sizeof pos:start="229:23" pos:end="229:32">sizeof<argument_list pos:start="229:29" pos:end="229:32">(<argument pos:start="229:30" pos:end="229:31"><expr pos:start="229:30" pos:end="229:31"><name pos:start="229:30" pos:end="229:31">fd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:43"><expr pos:start="231:9" pos:end="231:42"><name pos:start="231:9" pos:end="231:13"><name pos:start="231:9" pos:end="231:10">fd</name><index pos:start="231:11" pos:end="231:13">[<expr pos:start="231:12" pos:end="231:12"><literal type="number" pos:start="231:12" pos:end="231:12">0</literal></expr>]</index></name> <operator pos:start="231:15" pos:end="231:15">=</operator> <call pos:start="231:17" pos:end="231:42"><name pos:start="231:17" pos:end="231:25">drive_get</name><argument_list pos:start="231:26" pos:end="231:42">(<argument pos:start="231:27" pos:end="231:35"><expr pos:start="231:27" pos:end="231:35"><name pos:start="231:27" pos:end="231:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="231:38" pos:end="231:38"><expr pos:start="231:38" pos:end="231:38"><literal type="number" pos:start="231:38" pos:end="231:38">0</literal></expr></argument>, <argument pos:start="231:41" pos:end="231:41"><expr pos:start="231:41" pos:end="231:41"><literal type="number" pos:start="231:41" pos:end="231:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="235:35"><expr pos:start="233:9" pos:end="235:34"><call pos:start="233:9" pos:end="235:34"><name pos:start="233:9" pos:end="233:25">sun4m_fdctrl_init</name><argument_list pos:start="233:26" pos:end="235:34">(<argument pos:start="233:27" pos:end="233:40"><expr pos:start="233:27" pos:end="233:40"><name pos:start="233:27" pos:end="233:40"><name pos:start="233:27" pos:end="233:36">slavio_irq</name><index pos:start="233:37" pos:end="233:40">[<expr pos:start="233:38" pos:end="233:39"><literal type="number" pos:start="233:38" pos:end="233:39">22</literal></expr>]</index></name></expr></argument>, <argument pos:start="233:43" pos:end="233:56"><expr pos:start="233:43" pos:end="233:56"><name pos:start="233:43" pos:end="233:56"><name pos:start="233:43" pos:end="233:47">hwdef</name><operator pos:start="233:48" pos:end="233:49">-&gt;</operator><name pos:start="233:50" pos:end="233:56">fd_base</name></name></expr></argument>, <argument pos:start="233:59" pos:end="233:60"><expr pos:start="233:59" pos:end="233:60"><name pos:start="233:59" pos:end="233:60">fd</name></expr></argument>,

                          <argument pos:start="235:27" pos:end="235:33"><expr pos:start="235:27" pos:end="235:33"><operator pos:start="235:27" pos:end="235:27">&amp;</operator><name pos:start="235:28" pos:end="235:33">fdc_tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="237:7" pos:end="241:5">else <block pos:start="237:12" pos:end="241:5">{<block_content pos:start="239:9" pos:end="239:60">

        <expr_stmt pos:start="239:9" pos:end="239:60"><expr pos:start="239:9" pos:end="239:59"><name pos:start="239:9" pos:end="239:14">fdc_tc</name> <operator pos:start="239:16" pos:end="239:16">=</operator> <operator pos:start="239:18" pos:end="239:18">*</operator><call pos:start="239:19" pos:end="239:59"><name pos:start="239:19" pos:end="239:36">qemu_allocate_irqs</name><argument_list pos:start="239:37" pos:end="239:59">(<argument pos:start="239:38" pos:end="239:49"><expr pos:start="239:38" pos:end="239:49"><name pos:start="239:38" pos:end="239:49">dummy_fdc_tc</name></expr></argument>, <argument pos:start="239:52" pos:end="239:55"><expr pos:start="239:52" pos:end="239:55"><name pos:start="239:52" pos:end="239:55">NULL</name></expr></argument>, <argument pos:start="239:58" pos:end="239:58"><expr pos:start="239:58" pos:end="239:58"><literal type="number" pos:start="239:58" pos:end="239:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="247:45"><expr pos:start="245:5" pos:end="247:44"><call pos:start="245:5" pos:end="247:44"><name pos:start="245:5" pos:end="245:20">slavio_misc_init</name><argument_list pos:start="245:21" pos:end="247:44">(<argument pos:start="245:22" pos:end="245:39"><expr pos:start="245:22" pos:end="245:39"><name pos:start="245:22" pos:end="245:39"><name pos:start="245:22" pos:end="245:26">hwdef</name><operator pos:start="245:27" pos:end="245:28">-&gt;</operator><name pos:start="245:29" pos:end="245:39">slavio_base</name></name></expr></argument>, <argument pos:start="245:42" pos:end="245:57"><expr pos:start="245:42" pos:end="245:57"><name pos:start="245:42" pos:end="245:57"><name pos:start="245:42" pos:end="245:46">hwdef</name><operator pos:start="245:47" pos:end="245:48">-&gt;</operator><name pos:start="245:49" pos:end="245:57">aux1_base</name></name></expr></argument>, <argument pos:start="245:60" pos:end="245:75"><expr pos:start="245:60" pos:end="245:75"><name pos:start="245:60" pos:end="245:75"><name pos:start="245:60" pos:end="245:64">hwdef</name><operator pos:start="245:65" pos:end="245:66">-&gt;</operator><name pos:start="245:67" pos:end="245:75">aux2_base</name></name></expr></argument>,

                     <argument pos:start="247:22" pos:end="247:35"><expr pos:start="247:22" pos:end="247:35"><name pos:start="247:22" pos:end="247:35"><name pos:start="247:22" pos:end="247:31">slavio_irq</name><index pos:start="247:32" pos:end="247:35">[<expr pos:start="247:33" pos:end="247:34"><literal type="number" pos:start="247:33" pos:end="247:34">30</literal></expr>]</index></name></expr></argument>, <argument pos:start="247:38" pos:end="247:43"><expr pos:start="247:38" pos:end="247:43"><name pos:start="247:38" pos:end="247:43">fdc_tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="251:5" pos:end="257:5"><if pos:start="251:5" pos:end="257:5">if <condition pos:start="251:8" pos:end="251:39">(<expr pos:start="251:9" pos:end="251:38"><call pos:start="251:9" pos:end="251:34"><name pos:start="251:9" pos:end="251:25">drive_get_max_bus</name><argument_list pos:start="251:26" pos:end="251:34">(<argument pos:start="251:27" pos:end="251:33"><expr pos:start="251:27" pos:end="251:33"><name pos:start="251:27" pos:end="251:33">IF_SCSI</name></expr></argument>)</argument_list></call> <operator pos:start="251:36" pos:end="251:36">&gt;</operator> <literal type="number" pos:start="251:38" pos:end="251:38">0</literal></expr>)</condition> <block pos:start="251:41" pos:end="257:5">{<block_content pos:start="253:9" pos:end="255:16">

        <expr_stmt pos:start="253:9" pos:end="253:53"><expr pos:start="253:9" pos:end="253:52"><call pos:start="253:9" pos:end="253:52"><name pos:start="253:9" pos:end="253:15">fprintf</name><argument_list pos:start="253:16" pos:end="253:52">(<argument pos:start="253:17" pos:end="253:22"><expr pos:start="253:17" pos:end="253:22"><name pos:start="253:17" pos:end="253:22">stderr</name></expr></argument>, <argument pos:start="253:25" pos:end="253:51"><expr pos:start="253:25" pos:end="253:51"><literal type="string" pos:start="253:25" pos:end="253:51">"qemu: too many SCSI bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:16"><expr pos:start="255:9" pos:end="255:15"><call pos:start="255:9" pos:end="255:15"><name pos:start="255:9" pos:end="255:12">exit</name><argument_list pos:start="255:13" pos:end="255:15">(<argument pos:start="255:14" pos:end="255:14"><expr pos:start="255:14" pos:end="255:14"><literal type="number" pos:start="255:14" pos:end="255:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="261:5" pos:end="265:58"><expr pos:start="261:5" pos:end="265:57"><call pos:start="261:5" pos:end="265:57"><name pos:start="261:5" pos:end="261:12">esp_init</name><argument_list pos:start="261:13" pos:end="265:57">(<argument pos:start="261:14" pos:end="261:28"><expr pos:start="261:14" pos:end="261:28"><name pos:start="261:14" pos:end="261:28"><name pos:start="261:14" pos:end="261:18">hwdef</name><operator pos:start="261:19" pos:end="261:20">-&gt;</operator><name pos:start="261:21" pos:end="261:28">esp_base</name></name></expr></argument>, <argument pos:start="261:31" pos:end="261:31"><expr pos:start="261:31" pos:end="261:31"><literal type="number" pos:start="261:31" pos:end="261:31">2</literal></expr></argument>,

             <argument pos:start="263:14" pos:end="263:31"><expr pos:start="263:14" pos:end="263:31"><name pos:start="263:14" pos:end="263:31">espdma_memory_read</name></expr></argument>, <argument pos:start="263:34" pos:end="263:52"><expr pos:start="263:34" pos:end="263:52"><name pos:start="263:34" pos:end="263:52">espdma_memory_write</name></expr></argument>,

             <argument pos:start="265:14" pos:end="265:19"><expr pos:start="265:14" pos:end="265:19"><name pos:start="265:14" pos:end="265:19">espdma</name></expr></argument>, <argument pos:start="265:22" pos:end="265:31"><expr pos:start="265:22" pos:end="265:31"><name pos:start="265:22" pos:end="265:31">espdma_irq</name></expr></argument>, <argument pos:start="265:34" pos:end="265:43"><expr pos:start="265:34" pos:end="265:43"><operator pos:start="265:34" pos:end="265:34">&amp;</operator><name pos:start="265:35" pos:end="265:43">esp_reset</name></expr></argument>, <argument pos:start="265:46" pos:end="265:56"><expr pos:start="265:46" pos:end="265:56"><operator pos:start="265:46" pos:end="265:46">&amp;</operator><name pos:start="265:47" pos:end="265:56">dma_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="269:5" pos:end="269:48"><expr pos:start="269:5" pos:end="269:47"><call pos:start="269:5" pos:end="269:47"><name pos:start="269:5" pos:end="269:25">qdev_connect_gpio_out</name><argument_list pos:start="269:26" pos:end="269:47">(<argument pos:start="269:27" pos:end="269:32"><expr pos:start="269:27" pos:end="269:32"><name pos:start="269:27" pos:end="269:32">espdma</name></expr></argument>, <argument pos:start="269:35" pos:end="269:35"><expr pos:start="269:35" pos:end="269:35"><literal type="number" pos:start="269:35" pos:end="269:35">0</literal></expr></argument>, <argument pos:start="269:38" pos:end="269:46"><expr pos:start="269:38" pos:end="269:46"><name pos:start="269:38" pos:end="269:46">esp_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:49"><expr pos:start="271:5" pos:end="271:48"><call pos:start="271:5" pos:end="271:48"><name pos:start="271:5" pos:end="271:25">qdev_connect_gpio_out</name><argument_list pos:start="271:26" pos:end="271:48">(<argument pos:start="271:27" pos:end="271:32"><expr pos:start="271:27" pos:end="271:32"><name pos:start="271:27" pos:end="271:32">espdma</name></expr></argument>, <argument pos:start="271:35" pos:end="271:35"><expr pos:start="271:35" pos:end="271:35"><literal type="number" pos:start="271:35" pos:end="271:35">1</literal></expr></argument>, <argument pos:start="271:38" pos:end="271:47"><expr pos:start="271:38" pos:end="271:47"><name pos:start="271:38" pos:end="271:47">dma_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="275:5" pos:end="281:5"><if pos:start="275:5" pos:end="281:5">if <condition pos:start="275:8" pos:end="275:23">(<expr pos:start="275:9" pos:end="275:22"><name pos:start="275:9" pos:end="275:22"><name pos:start="275:9" pos:end="275:13">hwdef</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:22">cs_base</name></name></expr>)</condition> <block pos:start="275:25" pos:end="281:5">{<block_content pos:start="277:9" pos:end="279:44">

        <expr_stmt pos:start="277:9" pos:end="279:44"><expr pos:start="277:9" pos:end="279:43"><call pos:start="277:9" pos:end="279:43"><name pos:start="277:9" pos:end="277:28">sysbus_create_simple</name><argument_list pos:start="277:29" pos:end="279:43">(<argument pos:start="277:30" pos:end="277:42"><expr pos:start="277:30" pos:end="277:42"><literal type="string" pos:start="277:30" pos:end="277:42">"SUNW,CS4231"</literal></expr></argument>, <argument pos:start="277:45" pos:end="277:58"><expr pos:start="277:45" pos:end="277:58"><name pos:start="277:45" pos:end="277:58"><name pos:start="277:45" pos:end="277:49">hwdef</name><operator pos:start="277:50" pos:end="277:51">-&gt;</operator><name pos:start="277:52" pos:end="277:58">cs_base</name></name></expr></argument>,

                             <argument pos:start="279:30" pos:end="279:42"><expr pos:start="279:30" pos:end="279:42"><name pos:start="279:30" pos:end="279:42"><name pos:start="279:30" pos:end="279:39">slavio_irq</name><index pos:start="279:40" pos:end="279:42">[<expr pos:start="279:41" pos:end="279:41"><literal type="number" pos:start="279:41" pos:end="279:41">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="285:5" pos:end="297:5"><if pos:start="285:5" pos:end="297:5">if <condition pos:start="285:8" pos:end="285:25">(<expr pos:start="285:9" pos:end="285:24"><name pos:start="285:9" pos:end="285:24"><name pos:start="285:9" pos:end="285:13">hwdef</name><operator pos:start="285:14" pos:end="285:15">-&gt;</operator><name pos:start="285:16" pos:end="285:24">dbri_base</name></name></expr>)</condition> <block pos:start="285:27" pos:end="297:5">{<block_content pos:start="291:9" pos:end="295:57">

        <comment type="block" pos:start="287:9" pos:end="287:56">/* ISDN chip with attached CS4215 audio codec */</comment>

        <comment type="block" pos:start="289:9" pos:end="289:24">/* prom space */</comment>

        <expr_stmt pos:start="291:9" pos:end="291:55"><expr pos:start="291:9" pos:end="291:54"><call pos:start="291:9" pos:end="291:54"><name pos:start="291:9" pos:end="291:23">empty_slot_init</name><argument_list pos:start="291:24" pos:end="291:54">(<argument pos:start="291:25" pos:end="291:47"><expr pos:start="291:25" pos:end="291:47"><name pos:start="291:25" pos:end="291:40"><name pos:start="291:25" pos:end="291:29">hwdef</name><operator pos:start="291:30" pos:end="291:31">-&gt;</operator><name pos:start="291:32" pos:end="291:40">dbri_base</name></name><operator pos:start="291:41" pos:end="291:41">+</operator><literal type="number" pos:start="291:42" pos:end="291:47">0x1000</literal></expr></argument>, <argument pos:start="291:50" pos:end="291:53"><expr pos:start="291:50" pos:end="291:53"><literal type="number" pos:start="291:50" pos:end="291:53">0x30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="293:9" pos:end="293:23">/* reg space */</comment>

        <expr_stmt pos:start="295:9" pos:end="295:57"><expr pos:start="295:9" pos:end="295:56"><call pos:start="295:9" pos:end="295:56"><name pos:start="295:9" pos:end="295:23">empty_slot_init</name><argument_list pos:start="295:24" pos:end="295:56">(<argument pos:start="295:25" pos:end="295:48"><expr pos:start="295:25" pos:end="295:48"><name pos:start="295:25" pos:end="295:40"><name pos:start="295:25" pos:end="295:29">hwdef</name><operator pos:start="295:30" pos:end="295:31">-&gt;</operator><name pos:start="295:32" pos:end="295:40">dbri_base</name></name><operator pos:start="295:41" pos:end="295:41">+</operator><literal type="number" pos:start="295:42" pos:end="295:48">0x10000</literal></expr></argument>, <argument pos:start="295:51" pos:end="295:55"><expr pos:start="295:51" pos:end="295:55"><literal type="number" pos:start="295:51" pos:end="295:55">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="301:5" pos:end="307:5"><if pos:start="301:5" pos:end="307:5">if <condition pos:start="301:8" pos:end="301:24">(<expr pos:start="301:9" pos:end="301:23"><name pos:start="301:9" pos:end="301:23"><name pos:start="301:9" pos:end="301:13">hwdef</name><operator pos:start="301:14" pos:end="301:15">-&gt;</operator><name pos:start="301:16" pos:end="301:23">bpp_base</name></name></expr>)</condition> <block pos:start="301:26" pos:end="307:5">{<block_content pos:start="305:9" pos:end="305:47">

        <comment type="block" pos:start="303:9" pos:end="303:27">/* parallel port */</comment>

        <expr_stmt pos:start="305:9" pos:end="305:47"><expr pos:start="305:9" pos:end="305:46"><call pos:start="305:9" pos:end="305:46"><name pos:start="305:9" pos:end="305:23">empty_slot_init</name><argument_list pos:start="305:24" pos:end="305:46">(<argument pos:start="305:25" pos:end="305:39"><expr pos:start="305:25" pos:end="305:39"><name pos:start="305:25" pos:end="305:39"><name pos:start="305:25" pos:end="305:29">hwdef</name><operator pos:start="305:30" pos:end="305:31">-&gt;</operator><name pos:start="305:32" pos:end="305:39">bpp_base</name></name></expr></argument>, <argument pos:start="305:42" pos:end="305:45"><expr pos:start="305:42" pos:end="305:45"><literal type="number" pos:start="305:42" pos:end="305:45">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="311:5" pos:end="315:52"><expr pos:start="311:5" pos:end="315:51"><name pos:start="311:5" pos:end="311:15">kernel_size</name> <operator pos:start="311:17" pos:end="311:17">=</operator> <call pos:start="311:19" pos:end="315:51"><name pos:start="311:19" pos:end="311:35">sun4m_load_kernel</name><argument_list pos:start="311:36" pos:end="315:51">(<argument pos:start="311:37" pos:end="311:57"><expr pos:start="311:37" pos:end="311:57"><name pos:start="311:37" pos:end="311:57"><name pos:start="311:37" pos:end="311:40">args</name><operator pos:start="311:41" pos:end="311:42">-&gt;</operator><name pos:start="311:43" pos:end="311:57">kernel_filename</name></name></expr></argument>,

                                    <argument pos:start="313:37" pos:end="313:57"><expr pos:start="313:37" pos:end="313:57"><name pos:start="313:37" pos:end="313:57"><name pos:start="313:37" pos:end="313:40">args</name><operator pos:start="313:41" pos:end="313:42">-&gt;</operator><name pos:start="313:43" pos:end="313:57">initrd_filename</name></name></expr></argument>,

                                    <argument pos:start="315:37" pos:end="315:50"><expr pos:start="315:37" pos:end="315:50"><name pos:start="315:37" pos:end="315:50"><name pos:start="315:37" pos:end="315:40">args</name><operator pos:start="315:41" pos:end="315:42">-&gt;</operator><name pos:start="315:43" pos:end="315:50">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="319:5" pos:end="325:24"><expr pos:start="319:5" pos:end="325:23"><call pos:start="319:5" pos:end="325:23"><name pos:start="319:5" pos:end="319:14">nvram_init</name><argument_list pos:start="319:15" pos:end="325:23">(<argument pos:start="319:16" pos:end="319:20"><expr pos:start="319:16" pos:end="319:20"><name pos:start="319:16" pos:end="319:20">nvram</name></expr></argument>, <argument pos:start="319:23" pos:end="319:53"><expr pos:start="319:23" pos:end="319:53"><operator pos:start="319:23" pos:end="319:23">(</operator><name pos:start="319:24" pos:end="319:30">uint8_t</name> <operator pos:start="319:32" pos:end="319:32">*</operator><operator pos:start="319:33" pos:end="319:33">)</operator><operator pos:start="319:34" pos:end="319:34">&amp;</operator><name pos:start="319:35" pos:end="319:45"><name pos:start="319:35" pos:end="319:42">nd_table</name><index pos:start="319:43" pos:end="319:45">[<expr pos:start="319:44" pos:end="319:44"><literal type="number" pos:start="319:44" pos:end="319:44">0</literal></expr>]</index></name><operator pos:start="319:46" pos:end="319:46">.</operator><name pos:start="319:47" pos:end="319:53">macaddr</name></expr></argument>, <argument pos:start="319:56" pos:end="319:75"><expr pos:start="319:56" pos:end="319:75"><name pos:start="319:56" pos:end="319:75"><name pos:start="319:56" pos:end="319:59">args</name><operator pos:start="319:60" pos:end="319:61">-&gt;</operator><name pos:start="319:62" pos:end="319:75">kernel_cmdline</name></name></expr></argument>,

               <argument pos:start="321:16" pos:end="321:32"><expr pos:start="321:16" pos:end="321:32"><name pos:start="321:16" pos:end="321:32"><name pos:start="321:16" pos:end="321:19">args</name><operator pos:start="321:20" pos:end="321:21">-&gt;</operator><name pos:start="321:22" pos:end="321:32">boot_device</name></name></expr></argument>, <argument pos:start="321:35" pos:end="321:48"><expr pos:start="321:35" pos:end="321:48"><name pos:start="321:35" pos:end="321:48"><name pos:start="321:35" pos:end="321:38">args</name><operator pos:start="321:39" pos:end="321:40">-&gt;</operator><name pos:start="321:41" pos:end="321:48">ram_size</name></name></expr></argument>, <argument pos:start="321:51" pos:end="321:61"><expr pos:start="321:51" pos:end="321:61"><name pos:start="321:51" pos:end="321:61">kernel_size</name></expr></argument>, <argument pos:start="321:64" pos:end="321:76"><expr pos:start="321:64" pos:end="321:76"><name pos:start="321:64" pos:end="321:76">graphic_width</name></expr></argument>,

               <argument pos:start="323:16" pos:end="323:29"><expr pos:start="323:16" pos:end="323:29"><name pos:start="323:16" pos:end="323:29">graphic_height</name></expr></argument>, <argument pos:start="323:32" pos:end="323:44"><expr pos:start="323:32" pos:end="323:44"><name pos:start="323:32" pos:end="323:44">graphic_depth</name></expr></argument>, <argument pos:start="323:47" pos:end="323:69"><expr pos:start="323:47" pos:end="323:69"><name pos:start="323:47" pos:end="323:69"><name pos:start="323:47" pos:end="323:51">hwdef</name><operator pos:start="323:52" pos:end="323:53">-&gt;</operator><name pos:start="323:54" pos:end="323:69">nvram_machine_id</name></name></expr></argument>,

               <argument pos:start="325:16" pos:end="325:22"><expr pos:start="325:16" pos:end="325:22"><literal type="string" pos:start="325:16" pos:end="325:22">"Sun4m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="329:5" pos:end="333:37"><if pos:start="329:5" pos:end="333:37">if <condition pos:start="329:8" pos:end="329:24">(<expr pos:start="329:9" pos:end="329:23"><name pos:start="329:9" pos:end="329:23"><name pos:start="329:9" pos:end="329:13">hwdef</name><operator pos:start="329:14" pos:end="329:15">-&gt;</operator><name pos:start="329:16" pos:end="329:23">ecc_base</name></name></expr>)</condition><block type="pseudo" pos:start="331:9" pos:end="333:37"><block_content pos:start="331:9" pos:end="333:37">

        <expr_stmt pos:start="331:9" pos:end="333:37"><expr pos:start="331:9" pos:end="333:36"><call pos:start="331:9" pos:end="333:36"><name pos:start="331:9" pos:end="331:16">ecc_init</name><argument_list pos:start="331:17" pos:end="333:36">(<argument pos:start="331:18" pos:end="331:32"><expr pos:start="331:18" pos:end="331:32"><name pos:start="331:18" pos:end="331:32"><name pos:start="331:18" pos:end="331:22">hwdef</name><operator pos:start="331:23" pos:end="331:24">-&gt;</operator><name pos:start="331:25" pos:end="331:32">ecc_base</name></name></expr></argument>, <argument pos:start="331:35" pos:end="331:48"><expr pos:start="331:35" pos:end="331:48"><name pos:start="331:35" pos:end="331:48"><name pos:start="331:35" pos:end="331:44">slavio_irq</name><index pos:start="331:45" pos:end="331:48">[<expr pos:start="331:46" pos:end="331:47"><literal type="number" pos:start="331:46" pos:end="331:47">28</literal></expr>]</index></name></expr></argument>,

                 <argument pos:start="333:18" pos:end="333:35"><expr pos:start="333:18" pos:end="333:35"><name pos:start="333:18" pos:end="333:35"><name pos:start="333:18" pos:end="333:22">hwdef</name><operator pos:start="333:23" pos:end="333:24">-&gt;</operator><name pos:start="333:25" pos:end="333:35">ecc_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="337:5" pos:end="337:55"><expr pos:start="337:5" pos:end="337:54"><name pos:start="337:5" pos:end="337:10">fw_cfg</name> <operator pos:start="337:12" pos:end="337:12">=</operator> <call pos:start="337:14" pos:end="337:54"><name pos:start="337:14" pos:end="337:24">fw_cfg_init</name><argument_list pos:start="337:25" pos:end="337:54">(<argument pos:start="337:26" pos:end="337:26"><expr pos:start="337:26" pos:end="337:26"><literal type="number" pos:start="337:26" pos:end="337:26">0</literal></expr></argument>, <argument pos:start="337:29" pos:end="337:29"><expr pos:start="337:29" pos:end="337:29"><literal type="number" pos:start="337:29" pos:end="337:29">0</literal></expr></argument>, <argument pos:start="337:32" pos:end="337:39"><expr pos:start="337:32" pos:end="337:39"><name pos:start="337:32" pos:end="337:39">CFG_ADDR</name></expr></argument>, <argument pos:start="337:42" pos:end="337:53"><expr pos:start="337:42" pos:end="337:53"><name pos:start="337:42" pos:end="337:49">CFG_ADDR</name> <operator pos:start="337:51" pos:end="337:51">+</operator> <literal type="number" pos:start="337:53" pos:end="337:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:64"><expr pos:start="339:5" pos:end="339:63"><call pos:start="339:5" pos:end="339:63"><name pos:start="339:5" pos:end="339:18">fw_cfg_add_i16</name><argument_list pos:start="339:19" pos:end="339:63">(<argument pos:start="339:20" pos:end="339:25"><expr pos:start="339:20" pos:end="339:25"><name pos:start="339:20" pos:end="339:25">fw_cfg</name></expr></argument>, <argument pos:start="339:28" pos:end="339:42"><expr pos:start="339:28" pos:end="339:42"><name pos:start="339:28" pos:end="339:42">FW_CFG_MAX_CPUS</name></expr></argument>, <argument pos:start="339:45" pos:end="339:62"><expr pos:start="339:45" pos:end="339:62"><operator pos:start="339:45" pos:end="339:45">(</operator><name pos:start="339:46" pos:end="339:53">uint16_t</name><operator pos:start="339:54" pos:end="339:54">)</operator><name pos:start="339:55" pos:end="339:62">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="341:5" pos:end="341:41"><expr pos:start="341:5" pos:end="341:40"><call pos:start="341:5" pos:end="341:40"><name pos:start="341:5" pos:end="341:18">fw_cfg_add_i32</name><argument_list pos:start="341:19" pos:end="341:40">(<argument pos:start="341:20" pos:end="341:25"><expr pos:start="341:20" pos:end="341:25"><name pos:start="341:20" pos:end="341:25">fw_cfg</name></expr></argument>, <argument pos:start="341:28" pos:end="341:36"><expr pos:start="341:28" pos:end="341:36"><name pos:start="341:28" pos:end="341:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="341:39" pos:end="341:39"><expr pos:start="341:39" pos:end="341:39"><literal type="number" pos:start="341:39" pos:end="341:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="343:5" pos:end="343:64"><expr pos:start="343:5" pos:end="343:63"><call pos:start="343:5" pos:end="343:63"><name pos:start="343:5" pos:end="343:18">fw_cfg_add_i64</name><argument_list pos:start="343:19" pos:end="343:63">(<argument pos:start="343:20" pos:end="343:25"><expr pos:start="343:20" pos:end="343:25"><name pos:start="343:20" pos:end="343:25">fw_cfg</name></expr></argument>, <argument pos:start="343:28" pos:end="343:42"><expr pos:start="343:28" pos:end="343:42"><name pos:start="343:28" pos:end="343:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="343:45" pos:end="343:62"><expr pos:start="343:45" pos:end="343:62"><operator pos:start="343:45" pos:end="343:45">(</operator><name pos:start="343:46" pos:end="343:53">uint64_t</name><operator pos:start="343:54" pos:end="343:54">)</operator><name pos:start="343:55" pos:end="343:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:65"><expr pos:start="345:5" pos:end="345:64"><call pos:start="345:5" pos:end="345:64"><name pos:start="345:5" pos:end="345:18">fw_cfg_add_i16</name><argument_list pos:start="345:19" pos:end="345:64">(<argument pos:start="345:20" pos:end="345:25"><expr pos:start="345:20" pos:end="345:25"><name pos:start="345:20" pos:end="345:25">fw_cfg</name></expr></argument>, <argument pos:start="345:28" pos:end="345:44"><expr pos:start="345:28" pos:end="345:44"><name pos:start="345:28" pos:end="345:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="345:47" pos:end="345:63"><expr pos:start="345:47" pos:end="345:63"><name pos:start="345:47" pos:end="345:63"><name pos:start="345:47" pos:end="345:51">hwdef</name><operator pos:start="345:52" pos:end="345:53">-&gt;</operator><name pos:start="345:54" pos:end="345:63">machine_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:62"><expr pos:start="347:5" pos:end="347:61"><call pos:start="347:5" pos:end="347:61"><name pos:start="347:5" pos:end="347:18">fw_cfg_add_i16</name><argument_list pos:start="347:19" pos:end="347:61">(<argument pos:start="347:20" pos:end="347:25"><expr pos:start="347:20" pos:end="347:25"><name pos:start="347:20" pos:end="347:25">fw_cfg</name></expr></argument>, <argument pos:start="347:28" pos:end="347:45"><expr pos:start="347:28" pos:end="347:45"><name pos:start="347:28" pos:end="347:45">FW_CFG_SUN4M_DEPTH</name></expr></argument>, <argument pos:start="347:48" pos:end="347:60"><expr pos:start="347:48" pos:end="347:60"><name pos:start="347:48" pos:end="347:60">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="349:62"><expr pos:start="349:5" pos:end="349:61"><call pos:start="349:5" pos:end="349:61"><name pos:start="349:5" pos:end="349:18">fw_cfg_add_i16</name><argument_list pos:start="349:19" pos:end="349:61">(<argument pos:start="349:20" pos:end="349:25"><expr pos:start="349:20" pos:end="349:25"><name pos:start="349:20" pos:end="349:25">fw_cfg</name></expr></argument>, <argument pos:start="349:28" pos:end="349:45"><expr pos:start="349:28" pos:end="349:45"><name pos:start="349:28" pos:end="349:45">FW_CFG_SUN4M_WIDTH</name></expr></argument>, <argument pos:start="349:48" pos:end="349:60"><expr pos:start="349:48" pos:end="349:60"><name pos:start="349:48" pos:end="349:60">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="351:5" pos:end="351:64"><expr pos:start="351:5" pos:end="351:63"><call pos:start="351:5" pos:end="351:63"><name pos:start="351:5" pos:end="351:18">fw_cfg_add_i16</name><argument_list pos:start="351:19" pos:end="351:63">(<argument pos:start="351:20" pos:end="351:25"><expr pos:start="351:20" pos:end="351:25"><name pos:start="351:20" pos:end="351:25">fw_cfg</name></expr></argument>, <argument pos:start="351:28" pos:end="351:46"><expr pos:start="351:28" pos:end="351:46"><name pos:start="351:28" pos:end="351:46">FW_CFG_SUN4M_HEIGHT</name></expr></argument>, <argument pos:start="351:49" pos:end="351:62"><expr pos:start="351:49" pos:end="351:62"><name pos:start="351:49" pos:end="351:62">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="353:5" pos:end="353:65"><expr pos:start="353:5" pos:end="353:64"><call pos:start="353:5" pos:end="353:64"><name pos:start="353:5" pos:end="353:18">fw_cfg_add_i32</name><argument_list pos:start="353:19" pos:end="353:64">(<argument pos:start="353:20" pos:end="353:25"><expr pos:start="353:20" pos:end="353:25"><name pos:start="353:20" pos:end="353:25">fw_cfg</name></expr></argument>, <argument pos:start="353:28" pos:end="353:45"><expr pos:start="353:28" pos:end="353:45"><name pos:start="353:28" pos:end="353:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="353:48" pos:end="353:63"><expr pos:start="353:48" pos:end="353:63"><name pos:start="353:48" pos:end="353:63">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:60"><expr pos:start="355:5" pos:end="355:59"><call pos:start="355:5" pos:end="355:59"><name pos:start="355:5" pos:end="355:18">fw_cfg_add_i32</name><argument_list pos:start="355:19" pos:end="355:59">(<argument pos:start="355:20" pos:end="355:25"><expr pos:start="355:20" pos:end="355:25"><name pos:start="355:20" pos:end="355:25">fw_cfg</name></expr></argument>, <argument pos:start="355:28" pos:end="355:45"><expr pos:start="355:28" pos:end="355:45"><name pos:start="355:28" pos:end="355:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="355:48" pos:end="355:58"><expr pos:start="355:48" pos:end="355:58"><name pos:start="355:48" pos:end="355:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="357:5" pos:end="377:5"><if pos:start="357:5" pos:end="371:5">if <condition pos:start="357:8" pos:end="357:29">(<expr pos:start="357:9" pos:end="357:28"><name pos:start="357:9" pos:end="357:28"><name pos:start="357:9" pos:end="357:12">args</name><operator pos:start="357:13" pos:end="357:14">-&gt;</operator><name pos:start="357:15" pos:end="357:28">kernel_cmdline</name></name></expr>)</condition> <block pos:start="357:31" pos:end="371:5">{<block_content pos:start="359:9" pos:end="369:57">

        <expr_stmt pos:start="359:9" pos:end="359:68"><expr pos:start="359:9" pos:end="359:67"><call pos:start="359:9" pos:end="359:67"><name pos:start="359:9" pos:end="359:22">fw_cfg_add_i32</name><argument_list pos:start="359:23" pos:end="359:67">(<argument pos:start="359:24" pos:end="359:29"><expr pos:start="359:24" pos:end="359:29"><name pos:start="359:24" pos:end="359:29">fw_cfg</name></expr></argument>, <argument pos:start="359:32" pos:end="359:52"><expr pos:start="359:32" pos:end="359:52"><name pos:start="359:32" pos:end="359:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="359:55" pos:end="359:66"><expr pos:start="359:55" pos:end="359:66"><name pos:start="359:55" pos:end="359:66">CMDLINE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="361:9" pos:end="363:47"><expr pos:start="361:9" pos:end="363:46"><call pos:start="361:9" pos:end="363:46"><name pos:start="361:9" pos:end="361:24">pstrcpy_targphys</name><argument_list pos:start="361:25" pos:end="363:46">(<argument pos:start="361:26" pos:end="361:34"><expr pos:start="361:26" pos:end="361:34"><literal type="string" pos:start="361:26" pos:end="361:34">"cmdline"</literal></expr></argument>, <argument pos:start="361:37" pos:end="361:48"><expr pos:start="361:37" pos:end="361:48"><name pos:start="361:37" pos:end="361:48">CMDLINE_ADDR</name></expr></argument>, <argument pos:start="361:51" pos:end="361:66"><expr pos:start="361:51" pos:end="361:66"><name pos:start="361:51" pos:end="361:66">TARGET_PAGE_SIZE</name></expr></argument>,

                         <argument pos:start="363:26" pos:end="363:45"><expr pos:start="363:26" pos:end="363:45"><name pos:start="363:26" pos:end="363:45"><name pos:start="363:26" pos:end="363:29">args</name><operator pos:start="363:30" pos:end="363:31">-&gt;</operator><name pos:start="363:32" pos:end="363:45">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="365:9" pos:end="365:77"><expr pos:start="365:9" pos:end="365:76"><call pos:start="365:9" pos:end="365:76"><name pos:start="365:9" pos:end="365:25">fw_cfg_add_string</name><argument_list pos:start="365:26" pos:end="365:76">(<argument pos:start="365:27" pos:end="365:32"><expr pos:start="365:27" pos:end="365:32"><name pos:start="365:27" pos:end="365:32">fw_cfg</name></expr></argument>, <argument pos:start="365:35" pos:end="365:53"><expr pos:start="365:35" pos:end="365:53"><name pos:start="365:35" pos:end="365:53">FW_CFG_CMDLINE_DATA</name></expr></argument>, <argument pos:start="365:56" pos:end="365:75"><expr pos:start="365:56" pos:end="365:75"><name pos:start="365:56" pos:end="365:75"><name pos:start="365:56" pos:end="365:59">args</name><operator pos:start="365:60" pos:end="365:61">-&gt;</operator><name pos:start="365:62" pos:end="365:75">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="367:9" pos:end="369:57"><expr pos:start="367:9" pos:end="369:56"><call pos:start="367:9" pos:end="369:56"><name pos:start="367:9" pos:end="367:22">fw_cfg_add_i32</name><argument_list pos:start="367:23" pos:end="369:56">(<argument pos:start="367:24" pos:end="367:29"><expr pos:start="367:24" pos:end="367:29"><name pos:start="367:24" pos:end="367:29">fw_cfg</name></expr></argument>, <argument pos:start="367:32" pos:end="367:50"><expr pos:start="367:32" pos:end="367:50"><name pos:start="367:32" pos:end="367:50">FW_CFG_CMDLINE_SIZE</name></expr></argument>,

                       <argument pos:start="369:24" pos:end="369:55"><expr pos:start="369:24" pos:end="369:55"><call pos:start="369:24" pos:end="369:51"><name pos:start="369:24" pos:end="369:29">strlen</name><argument_list pos:start="369:30" pos:end="369:51">(<argument pos:start="369:31" pos:end="369:50"><expr pos:start="369:31" pos:end="369:50"><name pos:start="369:31" pos:end="369:50"><name pos:start="369:31" pos:end="369:34">args</name><operator pos:start="369:35" pos:end="369:36">-&gt;</operator><name pos:start="369:37" pos:end="369:50">kernel_cmdline</name></name></expr></argument>)</argument_list></call> <operator pos:start="369:53" pos:end="369:53">+</operator> <literal type="number" pos:start="369:55" pos:end="369:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="371:7" pos:end="377:5">else <block pos:start="371:12" pos:end="377:5">{<block_content pos:start="373:9" pos:end="375:55">

        <expr_stmt pos:start="373:9" pos:end="373:57"><expr pos:start="373:9" pos:end="373:56"><call pos:start="373:9" pos:end="373:56"><name pos:start="373:9" pos:end="373:22">fw_cfg_add_i32</name><argument_list pos:start="373:23" pos:end="373:56">(<argument pos:start="373:24" pos:end="373:29"><expr pos:start="373:24" pos:end="373:29"><name pos:start="373:24" pos:end="373:29">fw_cfg</name></expr></argument>, <argument pos:start="373:32" pos:end="373:52"><expr pos:start="373:32" pos:end="373:52"><name pos:start="373:32" pos:end="373:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="373:55" pos:end="373:55"><expr pos:start="373:55" pos:end="373:55"><literal type="number" pos:start="373:55" pos:end="373:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:55"><expr pos:start="375:9" pos:end="375:54"><call pos:start="375:9" pos:end="375:54"><name pos:start="375:9" pos:end="375:22">fw_cfg_add_i32</name><argument_list pos:start="375:23" pos:end="375:54">(<argument pos:start="375:24" pos:end="375:29"><expr pos:start="375:24" pos:end="375:29"><name pos:start="375:24" pos:end="375:29">fw_cfg</name></expr></argument>, <argument pos:start="375:32" pos:end="375:50"><expr pos:start="375:32" pos:end="375:50"><name pos:start="375:32" pos:end="375:50">FW_CFG_CMDLINE_SIZE</name></expr></argument>, <argument pos:start="375:53" pos:end="375:53"><expr pos:start="375:53" pos:end="375:53"><literal type="number" pos:start="375:53" pos:end="375:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="379:5" pos:end="379:65"><expr pos:start="379:5" pos:end="379:64"><call pos:start="379:5" pos:end="379:64"><name pos:start="379:5" pos:end="379:18">fw_cfg_add_i32</name><argument_list pos:start="379:19" pos:end="379:64">(<argument pos:start="379:20" pos:end="379:25"><expr pos:start="379:20" pos:end="379:25"><name pos:start="379:20" pos:end="379:25">fw_cfg</name></expr></argument>, <argument pos:start="379:28" pos:end="379:45"><expr pos:start="379:28" pos:end="379:45"><name pos:start="379:28" pos:end="379:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="379:48" pos:end="379:63"><expr pos:start="379:48" pos:end="379:63"><name pos:start="379:48" pos:end="379:63">INITRD_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="381:5" pos:end="381:50"><expr pos:start="381:5" pos:end="381:49"><call pos:start="381:5" pos:end="381:49"><name pos:start="381:5" pos:end="381:18">fw_cfg_add_i32</name><argument_list pos:start="381:19" pos:end="381:49">(<argument pos:start="381:20" pos:end="381:25"><expr pos:start="381:20" pos:end="381:25"><name pos:start="381:20" pos:end="381:25">fw_cfg</name></expr></argument>, <argument pos:start="381:28" pos:end="381:45"><expr pos:start="381:28" pos:end="381:45"><name pos:start="381:28" pos:end="381:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="381:48" pos:end="381:48"><expr pos:start="381:48" pos:end="381:48"><literal type="number" pos:start="381:48" pos:end="381:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="381:52" pos:end="381:62">// not used</comment>

    <expr_stmt pos:start="383:5" pos:end="383:69"><expr pos:start="383:5" pos:end="383:68"><call pos:start="383:5" pos:end="383:68"><name pos:start="383:5" pos:end="383:18">fw_cfg_add_i16</name><argument_list pos:start="383:19" pos:end="383:68">(<argument pos:start="383:20" pos:end="383:25"><expr pos:start="383:20" pos:end="383:25"><name pos:start="383:20" pos:end="383:25">fw_cfg</name></expr></argument>, <argument pos:start="383:28" pos:end="383:45"><expr pos:start="383:28" pos:end="383:45"><name pos:start="383:28" pos:end="383:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="383:48" pos:end="383:67"><expr pos:start="383:48" pos:end="383:67"><name pos:start="383:48" pos:end="383:67"><name pos:start="383:48" pos:end="383:51">args</name><operator pos:start="383:52" pos:end="383:53">-&gt;</operator><name pos:start="383:54" pos:end="383:64">boot_device</name><index pos:start="383:65" pos:end="383:67">[<expr pos:start="383:66" pos:end="383:66"><literal type="number" pos:start="383:66" pos:end="383:66">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:52"><expr pos:start="385:5" pos:end="385:51"><call pos:start="385:5" pos:end="385:51"><name pos:start="385:5" pos:end="385:26">qemu_register_boot_set</name><argument_list pos:start="385:27" pos:end="385:51">(<argument pos:start="385:28" pos:end="385:42"><expr pos:start="385:28" pos:end="385:42"><name pos:start="385:28" pos:end="385:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="385:45" pos:end="385:50"><expr pos:start="385:45" pos:end="385:50"><name pos:start="385:45" pos:end="385:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
