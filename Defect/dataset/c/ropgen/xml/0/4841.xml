<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4841.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">mainstone_common_init</name><parameter_list pos:start="1:34" pos:end="7:80">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:37">int</name></type> <name pos:start="1:39" pos:end="1:46">ram_size</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:64"><decl pos:start="1:49" pos:end="1:64"><type pos:start="1:49" pos:end="1:64"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:64">vga_ram_size</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:32"><decl pos:start="3:17" pos:end="3:32"><type pos:start="3:17" pos:end="3:32"><name pos:start="3:17" pos:end="3:28">DisplayState</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:32">ds</name></decl></parameter>, <parameter pos:start="3:35" pos:end="3:61"><decl pos:start="3:35" pos:end="3:61"><type pos:start="3:35" pos:end="3:61"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:44">char</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:61">kernel_filename</name></decl></parameter>,

                <parameter pos:start="5:17" pos:end="5:42"><decl pos:start="5:17" pos:end="5:42"><type pos:start="5:17" pos:end="5:42"><specifier pos:start="5:17" pos:end="5:21">const</specifier> <name pos:start="5:23" pos:end="5:26">char</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:42">kernel_cmdline</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:71"><decl pos:start="5:45" pos:end="5:71"><type pos:start="5:45" pos:end="5:71"><specifier pos:start="5:45" pos:end="5:49">const</specifier> <name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:71">initrd_filename</name></decl></parameter>,

                <parameter pos:start="7:17" pos:end="7:37"><decl pos:start="7:17" pos:end="7:37"><type pos:start="7:17" pos:end="7:37"><specifier pos:start="7:17" pos:end="7:21">const</specifier> <name pos:start="7:23" pos:end="7:26">char</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:37">cpu_model</name></decl></parameter>, <parameter pos:start="7:40" pos:end="7:67"><decl pos:start="7:40" pos:end="7:67"><type pos:start="7:40" pos:end="7:67"><name pos:start="7:40" pos:end="7:61"><name pos:start="7:40" pos:end="7:43">enum</name> <name pos:start="7:45" pos:end="7:61">mainstone_model_e</name></name></type> <name pos:start="7:63" pos:end="7:67">model</name></decl></parameter>, <parameter pos:start="7:70" pos:end="7:79"><decl pos:start="7:70" pos:end="7:79"><type pos:start="7:70" pos:end="7:79"><name pos:start="7:70" pos:end="7:72">int</name></type> <name pos:start="7:74" pos:end="7:79">arm_id</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="129:1">{<block_content pos:start="11:5" pos:end="127:64">

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:26">mainstone_ram</name> <init pos:start="11:28" pos:end="11:39">= <expr pos:start="11:30" pos:end="11:39"><literal type="number" pos:start="11:30" pos:end="11:39">0x04000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:39"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:26">mainstone_rom</name> <init pos:start="13:28" pos:end="13:39">= <expr pos:start="13:30" pos:end="13:39"><literal type="number" pos:start="13:30" pos:end="13:39">0x00800000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:25">pxa2xx_state_s</name></name> <modifier pos:start="15:27" pos:end="15:27">*</modifier></type><name pos:start="15:28" pos:end="15:30">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">qemu_irq</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:21">mst_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:14"><decl pos:start="19:5" pos:end="19:13"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:13">index</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="25:32"><if pos:start="23:5" pos:end="25:32">if <condition pos:start="23:8" pos:end="23:19">(<expr pos:start="23:9" pos:end="23:18"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:32"><block_content pos:start="25:9" pos:end="25:32">

        <expr_stmt pos:start="25:9" pos:end="25:32"><expr pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:17">cpu_model</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <literal type="string" pos:start="25:21" pos:end="25:31">"pxa270-c5"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:28">/* Setup CPU &amp; memory */</comment>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:72">(<expr pos:start="31:9" pos:end="31:71"><name pos:start="31:9" pos:end="31:16">ram_size</name> <operator pos:start="31:18" pos:end="31:18">&lt;</operator> <name pos:start="31:20" pos:end="31:32">mainstone_ram</name> <operator pos:start="31:34" pos:end="31:34">+</operator> <name pos:start="31:36" pos:end="31:48">mainstone_rom</name> <operator pos:start="31:50" pos:end="31:50">+</operator> <name pos:start="31:52" pos:end="31:71">PXA2XX_INTERNAL_SIZE</name></expr>)</condition> <block pos:start="31:74" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:16">

        <expr_stmt pos:start="33:9" pos:end="35:78"><expr pos:start="33:9" pos:end="35:77"><call pos:start="33:9" pos:end="35:77"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="35:77">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:69"><expr pos:start="33:25" pos:end="33:69"><literal type="string" pos:start="33:25" pos:end="33:69">"This platform requires %i bytes of memory\n"</literal></expr></argument>,

                        <argument pos:start="35:25" pos:end="35:76"><expr pos:start="35:25" pos:end="35:76"><name pos:start="35:25" pos:end="35:37">mainstone_ram</name> <operator pos:start="35:39" pos:end="35:39">+</operator> <name pos:start="35:41" pos:end="35:53">mainstone_rom</name> <operator pos:start="35:55" pos:end="35:55">+</operator> <name pos:start="35:57" pos:end="35:76">PXA2XX_INTERNAL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:16"><expr pos:start="37:9" pos:end="37:15"><call pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:12">exit</name><argument_list pos:start="37:13" pos:end="37:15">(<argument pos:start="37:14" pos:end="37:14"><expr pos:start="37:14" pos:end="37:14"><literal type="number" pos:start="37:14" pos:end="37:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:52"><expr pos:start="43:5" pos:end="43:51"><name pos:start="43:5" pos:end="43:7">cpu</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:51"><name pos:start="43:11" pos:end="43:21">pxa270_init</name><argument_list pos:start="43:22" pos:end="43:51">(<argument pos:start="43:23" pos:end="43:35"><expr pos:start="43:23" pos:end="43:35"><name pos:start="43:23" pos:end="43:35">mainstone_ram</name></expr></argument>, <argument pos:start="43:38" pos:end="43:39"><expr pos:start="43:38" pos:end="43:39"><name pos:start="43:38" pos:end="43:39">ds</name></expr></argument>, <argument pos:start="43:42" pos:end="43:50"><expr pos:start="43:42" pos:end="43:50"><name pos:start="43:42" pos:end="43:50">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="47:64"><expr pos:start="45:5" pos:end="47:63"><call pos:start="45:5" pos:end="47:63"><name pos:start="45:5" pos:end="45:32">cpu_register_physical_memory</name><argument_list pos:start="45:33" pos:end="47:63">(<argument pos:start="45:34" pos:end="45:34"><expr pos:start="45:34" pos:end="45:34"><literal type="number" pos:start="45:34" pos:end="45:34">0</literal></expr></argument>, <argument pos:start="45:37" pos:end="45:49"><expr pos:start="45:37" pos:end="45:49"><name pos:start="45:37" pos:end="45:49">mainstone_rom</name></expr></argument>,

                    <argument pos:start="47:21" pos:end="47:62"><expr pos:start="47:21" pos:end="47:62"><call pos:start="47:21" pos:end="47:49"><name pos:start="47:21" pos:end="47:34">qemu_ram_alloc</name><argument_list pos:start="47:35" pos:end="47:49">(<argument pos:start="47:36" pos:end="47:48"><expr pos:start="47:36" pos:end="47:48"><name pos:start="47:36" pos:end="47:48">mainstone_rom</name></expr></argument>)</argument_list></call> <operator pos:start="47:51" pos:end="47:51">|</operator> <name pos:start="47:53" pos:end="47:62">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:45">/* Setup initial (reset) machine state */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:43"><expr pos:start="53:5" pos:end="53:42"><name pos:start="53:5" pos:end="53:22"><name pos:start="53:5" pos:end="53:7">cpu</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:12">env</name><operator pos:start="53:13" pos:end="53:14">-&gt;</operator><name pos:start="53:15" pos:end="53:18">regs</name><index pos:start="53:19" pos:end="53:22">[<expr pos:start="53:20" pos:end="53:21"><literal type="number" pos:start="53:20" pos:end="53:21">15</literal></expr>]</index></name> <operator pos:start="53:24" pos:end="53:24">=</operator> <name pos:start="53:26" pos:end="53:42">PXA2XX_SDRAM_BASE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:56">/* There are two 32MiB flash devices on the board */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:45"><expr pos:start="59:5" pos:end="59:44"><name pos:start="59:5" pos:end="59:9">index</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <call pos:start="59:13" pos:end="59:44"><name pos:start="59:13" pos:end="59:27">drive_get_index</name><argument_list pos:start="59:28" pos:end="59:44">(<argument pos:start="59:29" pos:end="59:37"><expr pos:start="59:29" pos:end="59:37"><name pos:start="59:29" pos:end="59:37">IF_PFLASH</name></expr></argument>, <argument pos:start="59:40" pos:end="59:40"><expr pos:start="59:40" pos:end="59:40"><literal type="number" pos:start="59:40" pos:end="59:40">0</literal></expr></argument>, <argument pos:start="59:43" pos:end="59:43"><expr pos:start="59:43" pos:end="59:43"><literal type="number" pos:start="59:43" pos:end="59:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="61:20">(<expr pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:13">index</name> <operator pos:start="61:15" pos:end="61:16">==</operator> <operator pos:start="61:18" pos:end="61:18">-</operator><literal type="number" pos:start="61:19" pos:end="61:19">1</literal></expr>)</condition> <block pos:start="61:22" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:16">

        <expr_stmt pos:start="63:9" pos:end="65:40"><expr pos:start="63:9" pos:end="65:39"><call pos:start="63:9" pos:end="65:39"><name pos:start="63:9" pos:end="63:15">fprintf</name><argument_list pos:start="63:16" pos:end="65:39">(<argument pos:start="63:17" pos:end="63:22"><expr pos:start="63:17" pos:end="63:22"><name pos:start="63:17" pos:end="63:22">stderr</name></expr></argument>, <argument pos:start="63:25" pos:end="65:38"><expr pos:start="63:25" pos:end="65:38"><literal type="string" pos:start="63:25" pos:end="63:66">"Two flash images must be given with the "</literal>

                <literal type="string" pos:start="65:17" pos:end="65:38">"'pflash' parameter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:16"><expr pos:start="67:9" pos:end="67:15"><call pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:12">exit</name><argument_list pos:start="67:13" pos:end="67:15">(<argument pos:start="67:14" pos:end="67:14"><expr pos:start="67:14" pos:end="67:14"><literal type="number" pos:start="67:14" pos:end="67:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="81:5"><if pos:start="71:5" pos:end="81:5">if <condition pos:start="71:8" pos:end="75:57">(<expr pos:start="71:9" pos:end="75:56"><operator pos:start="71:9" pos:end="71:9">!</operator><call pos:start="71:10" pos:end="75:56"><name pos:start="71:10" pos:end="71:24">pflash_register</name><argument_list pos:start="71:25" pos:end="75:56">(<argument pos:start="71:26" pos:end="71:36"><expr pos:start="71:26" pos:end="71:36"><name pos:start="71:26" pos:end="71:36">MST_FLASH_0</name></expr></argument>, <argument pos:start="71:39" pos:end="71:74"><expr pos:start="71:39" pos:end="71:74"><name pos:start="71:39" pos:end="71:51">mainstone_ram</name> <operator pos:start="71:53" pos:end="71:53">+</operator> <name pos:start="71:55" pos:end="71:74">PXA2XX_INTERNAL_SIZE</name></expr></argument>,

                         <argument pos:start="73:26" pos:end="73:49"><expr pos:start="73:26" pos:end="73:49"><name pos:start="73:26" pos:end="73:44"><name pos:start="73:26" pos:end="73:37">drives_table</name><index pos:start="73:38" pos:end="73:44">[<expr pos:start="73:39" pos:end="73:43"><name pos:start="73:39" pos:end="73:43">index</name></expr>]</index></name><operator pos:start="73:45" pos:end="73:45">.</operator><name pos:start="73:46" pos:end="73:49">bdrv</name></expr></argument>,

                         <argument pos:start="75:26" pos:end="75:35"><expr pos:start="75:26" pos:end="75:35"><literal type="number" pos:start="75:26" pos:end="75:28">256</literal> <operator pos:start="75:30" pos:end="75:30">*</operator> <literal type="number" pos:start="75:32" pos:end="75:35">1024</literal></expr></argument>, <argument pos:start="75:38" pos:end="75:40"><expr pos:start="75:38" pos:end="75:40"><literal type="number" pos:start="75:38" pos:end="75:40">128</literal></expr></argument>, <argument pos:start="75:43" pos:end="75:43"><expr pos:start="75:43" pos:end="75:43"><literal type="number" pos:start="75:43" pos:end="75:43">4</literal></expr></argument>, <argument pos:start="75:46" pos:end="75:46"><expr pos:start="75:46" pos:end="75:46"><literal type="number" pos:start="75:46" pos:end="75:46">0</literal></expr></argument>, <argument pos:start="75:49" pos:end="75:49"><expr pos:start="75:49" pos:end="75:49"><literal type="number" pos:start="75:49" pos:end="75:49">0</literal></expr></argument>, <argument pos:start="75:52" pos:end="75:52"><expr pos:start="75:52" pos:end="75:52"><literal type="number" pos:start="75:52" pos:end="75:52">0</literal></expr></argument>, <argument pos:start="75:55" pos:end="75:55"><expr pos:start="75:55" pos:end="75:55"><literal type="number" pos:start="75:55" pos:end="75:55">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:59" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:16">

        <expr_stmt pos:start="77:9" pos:end="77:67"><expr pos:start="77:9" pos:end="77:66"><call pos:start="77:9" pos:end="77:66"><name pos:start="77:9" pos:end="77:15">fprintf</name><argument_list pos:start="77:16" pos:end="77:66">(<argument pos:start="77:17" pos:end="77:22"><expr pos:start="77:17" pos:end="77:22"><name pos:start="77:17" pos:end="77:22">stderr</name></expr></argument>, <argument pos:start="77:25" pos:end="77:65"><expr pos:start="77:25" pos:end="77:65"><literal type="string" pos:start="77:25" pos:end="77:65">"qemu: Error registering flash memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:16"><expr pos:start="79:9" pos:end="79:15"><call pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:12">exit</name><argument_list pos:start="79:13" pos:end="79:15">(<argument pos:start="79:14" pos:end="79:14"><expr pos:start="79:14" pos:end="79:14"><literal type="number" pos:start="79:14" pos:end="79:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:45"><expr pos:start="85:5" pos:end="85:44"><name pos:start="85:5" pos:end="85:9">index</name> <operator pos:start="85:11" pos:end="85:11">=</operator> <call pos:start="85:13" pos:end="85:44"><name pos:start="85:13" pos:end="85:27">drive_get_index</name><argument_list pos:start="85:28" pos:end="85:44">(<argument pos:start="85:29" pos:end="85:37"><expr pos:start="85:29" pos:end="85:37"><name pos:start="85:29" pos:end="85:37">IF_PFLASH</name></expr></argument>, <argument pos:start="85:40" pos:end="85:40"><expr pos:start="85:40" pos:end="85:40"><literal type="number" pos:start="85:40" pos:end="85:40">0</literal></expr></argument>, <argument pos:start="85:43" pos:end="85:43"><expr pos:start="85:43" pos:end="85:43"><literal type="number" pos:start="85:43" pos:end="85:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="95:5"><if pos:start="87:5" pos:end="95:5">if <condition pos:start="87:8" pos:end="87:20">(<expr pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:13">index</name> <operator pos:start="87:15" pos:end="87:16">==</operator> <operator pos:start="87:18" pos:end="87:18">-</operator><literal type="number" pos:start="87:19" pos:end="87:19">1</literal></expr>)</condition> <block pos:start="87:22" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:16">

        <expr_stmt pos:start="89:9" pos:end="91:40"><expr pos:start="89:9" pos:end="91:39"><call pos:start="89:9" pos:end="91:39"><name pos:start="89:9" pos:end="89:15">fprintf</name><argument_list pos:start="89:16" pos:end="91:39">(<argument pos:start="89:17" pos:end="89:22"><expr pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:22">stderr</name></expr></argument>, <argument pos:start="89:25" pos:end="91:38"><expr pos:start="89:25" pos:end="91:38"><literal type="string" pos:start="89:25" pos:end="89:66">"Two flash images must be given with the "</literal>

                <literal type="string" pos:start="91:17" pos:end="91:38">"'pflash' parameter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:16"><expr pos:start="93:9" pos:end="93:15"><call pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:12">exit</name><argument_list pos:start="93:13" pos:end="93:15">(<argument pos:start="93:14" pos:end="93:14"><expr pos:start="93:14" pos:end="93:14"><literal type="number" pos:start="93:14" pos:end="93:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="97:5" pos:end="107:5"><if pos:start="97:5" pos:end="107:5">if <condition pos:start="97:8" pos:end="101:57">(<expr pos:start="97:9" pos:end="101:56"><operator pos:start="97:9" pos:end="97:9">!</operator><call pos:start="97:10" pos:end="101:56"><name pos:start="97:10" pos:end="97:24">pflash_register</name><argument_list pos:start="97:25" pos:end="101:56">(<argument pos:start="97:26" pos:end="97:36"><expr pos:start="97:26" pos:end="97:36"><name pos:start="97:26" pos:end="97:36">MST_FLASH_1</name></expr></argument>, <argument pos:start="97:39" pos:end="97:74"><expr pos:start="97:39" pos:end="97:74"><name pos:start="97:39" pos:end="97:51">mainstone_ram</name> <operator pos:start="97:53" pos:end="97:53">+</operator> <name pos:start="97:55" pos:end="97:74">PXA2XX_INTERNAL_SIZE</name></expr></argument>,

                         <argument pos:start="99:26" pos:end="99:49"><expr pos:start="99:26" pos:end="99:49"><name pos:start="99:26" pos:end="99:44"><name pos:start="99:26" pos:end="99:37">drives_table</name><index pos:start="99:38" pos:end="99:44">[<expr pos:start="99:39" pos:end="99:43"><name pos:start="99:39" pos:end="99:43">index</name></expr>]</index></name><operator pos:start="99:45" pos:end="99:45">.</operator><name pos:start="99:46" pos:end="99:49">bdrv</name></expr></argument>,

                         <argument pos:start="101:26" pos:end="101:35"><expr pos:start="101:26" pos:end="101:35"><literal type="number" pos:start="101:26" pos:end="101:28">256</literal> <operator pos:start="101:30" pos:end="101:30">*</operator> <literal type="number" pos:start="101:32" pos:end="101:35">1024</literal></expr></argument>, <argument pos:start="101:38" pos:end="101:40"><expr pos:start="101:38" pos:end="101:40"><literal type="number" pos:start="101:38" pos:end="101:40">128</literal></expr></argument>, <argument pos:start="101:43" pos:end="101:43"><expr pos:start="101:43" pos:end="101:43"><literal type="number" pos:start="101:43" pos:end="101:43">4</literal></expr></argument>, <argument pos:start="101:46" pos:end="101:46"><expr pos:start="101:46" pos:end="101:46"><literal type="number" pos:start="101:46" pos:end="101:46">0</literal></expr></argument>, <argument pos:start="101:49" pos:end="101:49"><expr pos:start="101:49" pos:end="101:49"><literal type="number" pos:start="101:49" pos:end="101:49">0</literal></expr></argument>, <argument pos:start="101:52" pos:end="101:52"><expr pos:start="101:52" pos:end="101:52"><literal type="number" pos:start="101:52" pos:end="101:52">0</literal></expr></argument>, <argument pos:start="101:55" pos:end="101:55"><expr pos:start="101:55" pos:end="101:55"><literal type="number" pos:start="101:55" pos:end="101:55">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:59" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:16">

        <expr_stmt pos:start="103:9" pos:end="103:67"><expr pos:start="103:9" pos:end="103:66"><call pos:start="103:9" pos:end="103:66"><name pos:start="103:9" pos:end="103:15">fprintf</name><argument_list pos:start="103:16" pos:end="103:66">(<argument pos:start="103:17" pos:end="103:22"><expr pos:start="103:17" pos:end="103:22"><name pos:start="103:17" pos:end="103:22">stderr</name></expr></argument>, <argument pos:start="103:25" pos:end="103:65"><expr pos:start="103:25" pos:end="103:65"><literal type="string" pos:start="103:25" pos:end="103:65">"qemu: Error registering flash memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:16"><expr pos:start="105:9" pos:end="105:15"><call pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:12">exit</name><argument_list pos:start="105:13" pos:end="105:15">(<argument pos:start="105:14" pos:end="105:14"><expr pos:start="105:14" pos:end="105:14"><literal type="number" pos:start="105:14" pos:end="105:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:66"><expr pos:start="111:5" pos:end="111:65"><name pos:start="111:5" pos:end="111:11">mst_irq</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="111:65"><name pos:start="111:15" pos:end="111:26">mst_irq_init</name><argument_list pos:start="111:27" pos:end="111:65">(<argument pos:start="111:28" pos:end="111:30"><expr pos:start="111:28" pos:end="111:30"><name pos:start="111:28" pos:end="111:30">cpu</name></expr></argument>, <argument pos:start="111:33" pos:end="111:45"><expr pos:start="111:33" pos:end="111:45"><name pos:start="111:33" pos:end="111:45">MST_FPGA_PHYS</name></expr></argument>, <argument pos:start="111:48" pos:end="111:64"><expr pos:start="111:48" pos:end="111:64"><name pos:start="111:48" pos:end="111:64">PXA2XX_PIC_GPIO_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:21">/* MMC/SD host */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:71"><expr pos:start="117:5" pos:end="117:70"><call pos:start="117:5" pos:end="117:70"><name pos:start="117:5" pos:end="117:24">pxa2xx_mmci_handlers</name><argument_list pos:start="117:25" pos:end="117:70">(<argument pos:start="117:26" pos:end="117:33"><expr pos:start="117:26" pos:end="117:33"><name pos:start="117:26" pos:end="117:33"><name pos:start="117:26" pos:end="117:28">cpu</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:33">mmc</name></name></expr></argument>, <argument pos:start="117:36" pos:end="117:51"><expr pos:start="117:36" pos:end="117:51"><name pos:start="117:36" pos:end="117:51"><name pos:start="117:36" pos:end="117:42">mst_irq</name><index pos:start="117:43" pos:end="117:51">[<expr pos:start="117:44" pos:end="117:50"><name pos:start="117:44" pos:end="117:50">MMC_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="117:54" pos:end="117:69"><expr pos:start="117:54" pos:end="117:69"><name pos:start="117:54" pos:end="117:69"><name pos:start="117:54" pos:end="117:60">mst_irq</name><index pos:start="117:61" pos:end="117:69">[<expr pos:start="117:62" pos:end="117:68"><name pos:start="117:62" pos:end="117:68">MMC_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:70"><expr pos:start="121:5" pos:end="121:69"><call pos:start="121:5" pos:end="121:69"><name pos:start="121:5" pos:end="121:18">smc91c111_init</name><argument_list pos:start="121:19" pos:end="121:69">(<argument pos:start="121:20" pos:end="121:31"><expr pos:start="121:20" pos:end="121:31"><operator pos:start="121:20" pos:end="121:20">&amp;</operator><name pos:start="121:21" pos:end="121:31"><name pos:start="121:21" pos:end="121:28">nd_table</name><index pos:start="121:29" pos:end="121:31">[<expr pos:start="121:30" pos:end="121:30"><literal type="number" pos:start="121:30" pos:end="121:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="121:34" pos:end="121:45"><expr pos:start="121:34" pos:end="121:45"><name pos:start="121:34" pos:end="121:45">MST_ETH_PHYS</name></expr></argument>, <argument pos:start="121:48" pos:end="121:68"><expr pos:start="121:48" pos:end="121:68"><name pos:start="121:48" pos:end="121:68"><name pos:start="121:48" pos:end="121:54">mst_irq</name><index pos:start="121:55" pos:end="121:68">[<expr pos:start="121:56" pos:end="121:67"><name pos:start="121:56" pos:end="121:67">ETHERNET_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="127:64"><expr pos:start="125:5" pos:end="127:63"><call pos:start="125:5" pos:end="127:63"><name pos:start="125:5" pos:end="125:19">arm_load_kernel</name><argument_list pos:start="125:20" pos:end="127:63">(<argument pos:start="125:21" pos:end="125:28"><expr pos:start="125:21" pos:end="125:28"><name pos:start="125:21" pos:end="125:28"><name pos:start="125:21" pos:end="125:23">cpu</name><operator pos:start="125:24" pos:end="125:25">-&gt;</operator><name pos:start="125:26" pos:end="125:28">env</name></name></expr></argument>, <argument pos:start="125:31" pos:end="125:43"><expr pos:start="125:31" pos:end="125:43"><name pos:start="125:31" pos:end="125:43">mainstone_ram</name></expr></argument>, <argument pos:start="125:46" pos:end="125:60"><expr pos:start="125:46" pos:end="125:60"><name pos:start="125:46" pos:end="125:60">kernel_filename</name></expr></argument>, <argument pos:start="125:63" pos:end="125:76"><expr pos:start="125:63" pos:end="125:76"><name pos:start="125:63" pos:end="125:76">kernel_cmdline</name></expr></argument>,

                    <argument pos:start="127:21" pos:end="127:35"><expr pos:start="127:21" pos:end="127:35"><name pos:start="127:21" pos:end="127:35">initrd_filename</name></expr></argument>, <argument pos:start="127:38" pos:end="127:43"><expr pos:start="127:38" pos:end="127:43"><name pos:start="127:38" pos:end="127:43">arm_id</name></expr></argument>, <argument pos:start="127:46" pos:end="127:62"><expr pos:start="127:46" pos:end="127:62"><name pos:start="127:46" pos:end="127:62">PXA2XX_SDRAM_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
