<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20362.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">handle_buffered_iopage</name><parameter_list pos:start="1:34" pos:end="1:52">(<parameter pos:start="1:35" pos:end="1:51"><decl pos:start="1:35" pos:end="1:51"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:44">XenIOState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">state</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:21">

    <decl_stmt pos:start="5:5" pos:end="5:58"><decl pos:start="5:5" pos:end="5:57"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">buffered_iopage_t</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:31">buf_page</name> <init pos:start="5:33" pos:end="5:57">= <expr pos:start="5:35" pos:end="5:57"><name pos:start="5:35" pos:end="5:57"><name pos:start="5:35" pos:end="5:39">state</name><operator pos:start="5:40" pos:end="5:41">-&gt;</operator><name pos:start="5:42" pos:end="5:57">buffered_io_page</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">buf_ioreq_t</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:24">buf_req</name> <init pos:start="7:26" pos:end="7:31">= <expr pos:start="7:28" pos:end="7:31"><name pos:start="7:28" pos:end="7:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ioreq_t</name></type> <name pos:start="9:13" pos:end="9:15">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:11"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">qw</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:18">(<expr pos:start="15:9" pos:end="15:17"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:17">buf_page</name></expr>)</condition> <block pos:start="15:20" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:17">

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><call pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:10">memset</name><argument_list pos:start="23:11" pos:end="23:35">(<argument pos:start="23:12" pos:end="23:15"><expr pos:start="23:12" pos:end="23:15"><operator pos:start="23:12" pos:end="23:12">&amp;</operator><name pos:start="23:13" pos:end="23:15">req</name></expr></argument>, <argument pos:start="23:18" pos:end="23:21"><expr pos:start="23:18" pos:end="23:21"><literal type="number" pos:start="23:18" pos:end="23:21">0x00</literal></expr></argument>, <argument pos:start="23:24" pos:end="23:34"><expr pos:start="23:24" pos:end="23:34"><sizeof pos:start="23:24" pos:end="23:34">sizeof<argument_list pos:start="23:30" pos:end="23:34">(<argument pos:start="23:31" pos:end="23:33"><expr pos:start="23:31" pos:end="23:33"><name pos:start="23:31" pos:end="23:33">req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="27:5" pos:end="101:5">for <control pos:start="27:9" pos:end="27:12">(<init pos:start="27:10" pos:end="27:10">;</init><condition pos:start="27:11" pos:end="27:11">;</condition><incr/>)</control> <block pos:start="27:14" pos:end="101:5">{<block_content pos:start="29:9" pos:end="99:52">

        <decl_stmt pos:start="29:9" pos:end="29:55"><decl pos:start="29:9" pos:end="29:47"><type pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:16">uint32_t</name></type> <name pos:start="29:18" pos:end="29:22">rdptr</name> <init pos:start="29:24" pos:end="29:47">= <expr pos:start="29:26" pos:end="29:47"><name pos:start="29:26" pos:end="29:47"><name pos:start="29:26" pos:end="29:33">buf_page</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:47">read_pointer</name></name></expr></init></decl>, <decl pos:start="29:50" pos:end="29:54"><type ref="prev" pos:start="29:9" pos:end="29:16"/><name pos:start="29:50" pos:end="29:54">wrptr</name></decl>;</decl_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:18"><expr pos:start="33:9" pos:end="33:17"><call pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:15">xen_rmb</name><argument_list pos:start="33:16" pos:end="33:17">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:40"><expr pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:13">wrptr</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <name pos:start="35:17" pos:end="35:39"><name pos:start="35:17" pos:end="35:24">buf_page</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:39">write_pointer</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:18"><expr pos:start="37:9" pos:end="37:17"><call pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:15">xen_rmb</name><argument_list pos:start="37:16" pos:end="37:17">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:44">(<expr pos:start="39:13" pos:end="39:43"><name pos:start="39:13" pos:end="39:17">rdptr</name> <operator pos:start="39:19" pos:end="39:20">!=</operator> <name pos:start="39:22" pos:end="39:43"><name pos:start="39:22" pos:end="39:29">buf_page</name><operator pos:start="39:30" pos:end="39:31">-&gt;</operator><name pos:start="39:32" pos:end="39:43">read_pointer</name></name></expr>)</condition> <block pos:start="39:46" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:21">

            <continue pos:start="41:13" pos:end="41:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:27">(<expr pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:17">rdptr</name> <operator pos:start="45:19" pos:end="45:20">==</operator> <name pos:start="45:22" pos:end="45:26">wrptr</name></expr>)</condition> <block pos:start="45:29" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:18">

            <break pos:start="47:13" pos:end="47:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:70"><expr pos:start="51:9" pos:end="51:69"><name pos:start="51:9" pos:end="51:15">buf_req</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <operator pos:start="51:19" pos:end="51:19">&amp;</operator><name pos:start="51:20" pos:end="51:69"><name pos:start="51:20" pos:end="51:27">buf_page</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:38">buf_ioreq</name><index pos:start="51:39" pos:end="51:69">[<expr pos:start="51:40" pos:end="51:68"><name pos:start="51:40" pos:end="51:44">rdptr</name> <operator pos:start="51:46" pos:end="51:46">%</operator> <name pos:start="51:48" pos:end="51:68">IOREQ_BUFFER_SLOT_NUM</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:40"><expr pos:start="53:9" pos:end="53:39"><name pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:11">req</name><operator pos:start="53:12" pos:end="53:12">.</operator><name pos:start="53:13" pos:end="53:16">size</name></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <literal type="number" pos:start="53:20" pos:end="53:22">1UL</literal> <operator pos:start="53:24" pos:end="53:25">&lt;&lt;</operator> <name pos:start="53:27" pos:end="53:39"><name pos:start="53:27" pos:end="53:33">buf_req</name><operator pos:start="53:34" pos:end="53:35">-&gt;</operator><name pos:start="53:36" pos:end="53:39">size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:22"><expr pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:11">req</name><operator pos:start="55:12" pos:end="55:12">.</operator><name pos:start="55:13" pos:end="55:17">count</name></name> <operator pos:start="55:19" pos:end="55:19">=</operator> <literal type="number" pos:start="55:21" pos:end="55:21">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:11">req</name><operator pos:start="57:12" pos:end="57:12">.</operator><name pos:start="57:13" pos:end="57:16">addr</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:32"><name pos:start="57:20" pos:end="57:26">buf_req</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:32">addr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:11">req</name><operator pos:start="59:12" pos:end="59:12">.</operator><name pos:start="59:13" pos:end="59:16">data</name></name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:32"><name pos:start="59:20" pos:end="59:26">buf_req</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:32">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:38"><expr pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:11">req</name><operator pos:start="61:12" pos:end="61:12">.</operator><name pos:start="61:13" pos:end="61:17">state</name></name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:37">STATE_IOREQ_READY</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:31"><expr pos:start="63:9" pos:end="63:30"><name pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">req</name><operator pos:start="63:12" pos:end="63:12">.</operator><name pos:start="63:13" pos:end="63:15">dir</name></name> <operator pos:start="63:17" pos:end="63:17">=</operator> <name pos:start="63:19" pos:end="63:30"><name pos:start="63:19" pos:end="63:25">buf_req</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:30">dir</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:19"><expr pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:11">req</name><operator pos:start="65:12" pos:end="65:12">.</operator><name pos:start="65:13" pos:end="65:14">df</name></name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:33"><expr pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:11">req</name><operator pos:start="67:12" pos:end="67:12">.</operator><name pos:start="67:13" pos:end="67:16">type</name></name> <operator pos:start="67:18" pos:end="67:18">=</operator> <name pos:start="67:20" pos:end="67:32"><name pos:start="67:20" pos:end="67:26">buf_req</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:32">type</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:28"><expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:11">req</name><operator pos:start="69:12" pos:end="69:12">.</operator><name pos:start="69:13" pos:end="69:23">data_is_ptr</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <literal type="number" pos:start="69:27" pos:end="69:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:18"><expr pos:start="71:9" pos:end="71:17"><call pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:15">xen_rmb</name><argument_list pos:start="71:16" pos:end="71:17">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:29"><expr pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:10">qw</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <operator pos:start="73:14" pos:end="73:14">(</operator><name pos:start="73:15" pos:end="73:22"><name pos:start="73:15" pos:end="73:17">req</name><operator pos:start="73:18" pos:end="73:18">.</operator><name pos:start="73:19" pos:end="73:22">size</name></name> <operator pos:start="73:24" pos:end="73:25">==</operator> <literal type="number" pos:start="73:27" pos:end="73:27">8</literal><operator pos:start="73:28" pos:end="73:28">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="91:9"><if pos:start="75:9" pos:end="91:9">if <condition pos:start="75:12" pos:end="75:15">(<expr pos:start="75:13" pos:end="75:14"><name pos:start="75:13" pos:end="75:14">qw</name></expr>)</condition> <block pos:start="75:17" pos:end="91:9">{<block_content pos:start="77:13" pos:end="89:22">

            <if_stmt pos:start="77:13" pos:end="81:13"><if pos:start="77:13" pos:end="81:13">if <condition pos:start="77:16" pos:end="77:35">(<expr pos:start="77:17" pos:end="77:34"><name pos:start="77:17" pos:end="77:21">rdptr</name> <operator pos:start="77:23" pos:end="77:23">+</operator> <literal type="number" pos:start="77:25" pos:end="77:25">1</literal> <operator pos:start="77:27" pos:end="77:28">==</operator> <name pos:start="77:30" pos:end="77:34">wrptr</name></expr>)</condition> <block pos:start="77:37" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:64">

                <expr_stmt pos:start="79:17" pos:end="79:64"><expr pos:start="79:17" pos:end="79:63"><call pos:start="79:17" pos:end="79:63"><name pos:start="79:17" pos:end="79:24">hw_error</name><argument_list pos:start="79:25" pos:end="79:63">(<argument pos:start="79:26" pos:end="79:62"><expr pos:start="79:26" pos:end="79:62"><literal type="string" pos:start="79:26" pos:end="79:62">"Incomplete quad word buffered ioreq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="83:13" pos:end="85:66"><expr pos:start="83:13" pos:end="85:65"><name pos:start="83:13" pos:end="83:19">buf_req</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <operator pos:start="83:23" pos:end="83:23">&amp;</operator><name pos:start="83:24" pos:end="85:65"><name pos:start="83:24" pos:end="83:31">buf_page</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:42">buf_ioreq</name><index pos:start="83:43" pos:end="85:65">[<expr pos:start="83:44" pos:end="85:64"><operator pos:start="83:44" pos:end="83:44">(</operator><name pos:start="83:45" pos:end="83:49">rdptr</name> <operator pos:start="83:51" pos:end="83:51">+</operator> <literal type="number" pos:start="83:53" pos:end="83:53">1</literal><operator pos:start="83:54" pos:end="83:54">)</operator> <operator pos:start="83:56" pos:end="83:56">%</operator>

                                           <name pos:start="85:44" pos:end="85:64">IOREQ_BUFFER_SLOT_NUM</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:56"><expr pos:start="87:13" pos:end="87:55"><name pos:start="87:13" pos:end="87:20"><name pos:start="87:13" pos:end="87:15">req</name><operator pos:start="87:16" pos:end="87:16">.</operator><name pos:start="87:17" pos:end="87:20">data</name></name> <operator pos:start="87:22" pos:end="87:23">|=</operator> <operator pos:start="87:25" pos:end="87:25">(</operator><operator pos:start="87:26" pos:end="87:26">(</operator><name pos:start="87:27" pos:end="87:34">uint64_t</name><operator pos:start="87:35" pos:end="87:35">)</operator><name pos:start="87:36" pos:end="87:48"><name pos:start="87:36" pos:end="87:42">buf_req</name><operator pos:start="87:43" pos:end="87:44">-&gt;</operator><name pos:start="87:45" pos:end="87:48">data</name></name><operator pos:start="87:49" pos:end="87:49">)</operator> <operator pos:start="87:51" pos:end="87:52">&lt;&lt;</operator> <literal type="number" pos:start="87:54" pos:end="87:55">32</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:22"><expr pos:start="89:13" pos:end="89:21"><call pos:start="89:13" pos:end="89:21"><name pos:start="89:13" pos:end="89:19">xen_rmb</name><argument_list pos:start="89:20" pos:end="89:21">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:34"><expr pos:start="95:9" pos:end="95:33"><call pos:start="95:9" pos:end="95:33"><name pos:start="95:9" pos:end="95:20">handle_ioreq</name><argument_list pos:start="95:21" pos:end="95:33">(<argument pos:start="95:22" pos:end="95:26"><expr pos:start="95:22" pos:end="95:26"><name pos:start="95:22" pos:end="95:26">state</name></expr></argument>, <argument pos:start="95:29" pos:end="95:32"><expr pos:start="95:29" pos:end="95:32"><operator pos:start="95:29" pos:end="95:29">&amp;</operator><name pos:start="95:30" pos:end="95:32">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:52"><expr pos:start="99:9" pos:end="99:51"><call pos:start="99:9" pos:end="99:51"><name pos:start="99:9" pos:end="99:18">atomic_add</name><argument_list pos:start="99:19" pos:end="99:51">(<argument pos:start="99:20" pos:end="99:42"><expr pos:start="99:20" pos:end="99:42"><operator pos:start="99:20" pos:end="99:20">&amp;</operator><name pos:start="99:21" pos:end="99:42"><name pos:start="99:21" pos:end="99:28">buf_page</name><operator pos:start="99:29" pos:end="99:30">-&gt;</operator><name pos:start="99:31" pos:end="99:42">read_pointer</name></name></expr></argument>, <argument pos:start="99:45" pos:end="99:50"><expr pos:start="99:45" pos:end="99:50"><name pos:start="99:45" pos:end="99:46">qw</name> <operator pos:start="99:48" pos:end="99:48">+</operator> <literal type="number" pos:start="99:50" pos:end="99:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="105:5" pos:end="105:21">return <expr pos:start="105:12" pos:end="105:20"><name pos:start="105:12" pos:end="105:20"><name pos:start="105:12" pos:end="105:14">req</name><operator pos:start="105:15" pos:end="105:15">.</operator><name pos:start="105:16" pos:end="105:20">count</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
