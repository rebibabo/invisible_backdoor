<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25323.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">cpu_signal_handler</name><parameter_list pos:start="1:23" pos:end="3:33">(<parameter pos:start="1:24" pos:end="1:38"><decl pos:start="1:24" pos:end="1:38"><type pos:start="1:24" pos:end="1:38"><name pos:start="1:24" pos:end="1:26">int</name></type> <name pos:start="1:28" pos:end="1:38">host_signum</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:51"><decl pos:start="1:41" pos:end="1:51"><type pos:start="1:41" pos:end="1:51"><name pos:start="1:41" pos:end="1:44">void</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">pinfo</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:32"><decl pos:start="3:24" pos:end="3:32"><type pos:start="3:24" pos:end="3:32"><name pos:start="3:24" pos:end="3:27">void</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:32">puc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="53:1">{<block_content pos:start="7:5" pos:end="51:56">

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">siginfo_t</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:19">info</name> <init pos:start="7:21" pos:end="7:27">= <expr pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:27">pinfo</name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="9:1" pos:end="9:55">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:55"><call pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:11">defined</name><argument_list pos:start="9:12" pos:end="9:24">(<argument pos:start="9:13" pos:end="9:23"><expr pos:start="9:13" pos:end="9:23"><name pos:start="9:13" pos:end="9:23">__FreeBSD__</name></expr></argument>)</argument_list></call> <operator pos:start="9:26" pos:end="9:27">||</operator> <call pos:start="9:29" pos:end="9:55"><name pos:start="9:29" pos:end="9:35">defined</name><argument_list pos:start="9:36" pos:end="9:55">(<argument pos:start="9:37" pos:end="9:54"><expr pos:start="9:37" pos:end="9:54"><name pos:start="9:37" pos:end="9:54">__FreeBSD_kernel__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">ucontext_t</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:18">uc</name> <init pos:start="11:20" pos:end="11:24">= <expr pos:start="11:22" pos:end="11:24"><name pos:start="11:22" pos:end="11:24">puc</name></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="13:1" pos:end="13:5">#<cpp:directive pos:start="13:2" pos:end="13:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="15:5" pos:end="18:0"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">ucontext_t</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:18">uc</name> <init pos:start="15:20" pos:end="15:24">= <expr pos:start="15:22" pos:end="15:24"><name pos:start="15:22" pos:end="15:24">puc</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:17">long</name></type> <name pos:start="19:19" pos:end="19:20">pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:16">is_write</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:21"><expr pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:6">pc</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:20"><name pos:start="25:10" pos:end="25:16">IAR_sig</name><argument_list pos:start="25:17" pos:end="25:20">(<argument pos:start="25:18" pos:end="25:19"><expr pos:start="25:18" pos:end="25:19"><name pos:start="25:18" pos:end="25:19">uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="40:0"><expr pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:12">is_write</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="29:1" pos:end="29:5">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:5"><literal type="number" pos:start="29:5" pos:end="29:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="31:5" pos:end="31:22">/* ppc 4xx case */</comment>

    if (DSISR_sig(uc) &amp; 0x00800000) {

        is_write = 1;

    }

<cpp:else pos:start="39:1" pos:end="39:5">#<cpp:directive pos:start="39:2" pos:end="39:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="41:5" pos:end="48:0"><if pos:start="41:5" pos:end="48:0">if <condition pos:start="41:8" pos:end="41:62">(<expr pos:start="41:9" pos:end="41:61"><call pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:16">TRAP_sig</name><argument_list pos:start="41:17" pos:end="41:20">(<argument pos:start="41:18" pos:end="41:19"><expr pos:start="41:18" pos:end="41:19"><name pos:start="41:18" pos:end="41:19">uc</name></expr></argument>)</argument_list></call> <operator pos:start="41:22" pos:end="41:23">!=</operator> <literal type="number" pos:start="41:25" pos:end="41:29">0x400</literal> <operator pos:start="41:31" pos:end="41:32">&amp;&amp;</operator> <operator pos:start="41:34" pos:end="41:34">(</operator><call pos:start="41:35" pos:end="41:47"><name pos:start="41:35" pos:end="41:43">DSISR_sig</name><argument_list pos:start="41:44" pos:end="41:47">(<argument pos:start="41:45" pos:end="41:46"><expr pos:start="41:45" pos:end="41:46"><name pos:start="41:45" pos:end="41:46">uc</name></expr></argument>)</argument_list></call> <operator pos:start="41:49" pos:end="41:49">&amp;</operator> <literal type="number" pos:start="41:51" pos:end="41:60">0x02000000</literal><operator pos:start="41:61" pos:end="41:61">)</operator></expr>)</condition> <block pos:start="41:64" pos:end="48:0">{<block_content pos:start="43:9" pos:end="43:21">

        <expr_stmt pos:start="43:9" pos:end="43:21"><expr pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:16">is_write</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <literal type="number" pos:start="43:20" pos:end="43:20">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

    <return pos:start="49:5" pos:end="51:56">return <expr pos:start="49:12" pos:end="51:55"><call pos:start="49:12" pos:end="51:55"><name pos:start="49:12" pos:end="49:28">handle_cpu_signal</name><argument_list pos:start="49:29" pos:end="51:55">(<argument pos:start="49:30" pos:end="49:31"><expr pos:start="49:30" pos:end="49:31"><name pos:start="49:30" pos:end="49:31">pc</name></expr></argument>, <argument pos:start="49:34" pos:end="49:61"><expr pos:start="49:34" pos:end="49:61"><operator pos:start="49:34" pos:end="49:34">(</operator><name pos:start="49:35" pos:end="49:42">unsigned</name> <name pos:start="49:44" pos:end="49:47">long</name><operator pos:start="49:48" pos:end="49:48">)</operator><name pos:start="49:49" pos:end="49:61"><name pos:start="49:49" pos:end="49:52">info</name><operator pos:start="49:53" pos:end="49:54">-&gt;</operator><name pos:start="49:55" pos:end="49:61">si_addr</name></name></expr></argument>,

                             <argument pos:start="51:30" pos:end="51:37"><expr pos:start="51:30" pos:end="51:37"><name pos:start="51:30" pos:end="51:37">is_write</name></expr></argument>, <argument pos:start="51:40" pos:end="51:54"><expr pos:start="51:40" pos:end="51:54"><operator pos:start="51:40" pos:end="51:40">&amp;</operator><name pos:start="51:41" pos:end="51:54"><name pos:start="51:41" pos:end="51:42">uc</name><operator pos:start="51:43" pos:end="51:44">-&gt;</operator><name pos:start="51:45" pos:end="51:54">uc_sigmask</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
