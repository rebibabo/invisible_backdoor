<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22172.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">gen_flt3_ldst</name> <parameter_list pos:start="1:27" pos:end="3:55">(<parameter pos:start="1:28" pos:end="1:44"><decl pos:start="1:28" pos:end="1:44"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:39">DisasContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">ctx</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:54">uint32_t</name></type> <name pos:start="1:56" pos:end="1:58">opc</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:66"><decl pos:start="1:61" pos:end="1:66"><type pos:start="1:61" pos:end="1:66"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:66">fd</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:33"><decl pos:start="3:28" pos:end="3:33"><type pos:start="3:28" pos:end="3:33"><name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:33">fs</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:43"><decl pos:start="3:36" pos:end="3:43"><type pos:start="3:36" pos:end="3:43"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:43">base</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:54"><decl pos:start="3:46" pos:end="3:54"><type pos:start="3:46" pos:end="3:54"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:54">index</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="129:1">{<block_content pos:start="7:5" pos:end="127:48">

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">opn</name> <init pos:start="7:21" pos:end="7:49">= <expr pos:start="7:23" pos:end="7:49"><literal type="string" pos:start="7:23" pos:end="7:49">"extended float load/store"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">store</name> <init pos:start="9:15" pos:end="9:17">= <expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:47">/* All of those work only on 64bit FPUs. */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:27"><expr pos:start="15:5" pos:end="15:26"><call pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:24">gen_op_cp1_64bitmode</name><argument_list pos:start="15:25" pos:end="15:26">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="39:5"><if pos:start="17:5" pos:end="27:5">if <condition pos:start="17:8" pos:end="17:18">(<expr pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:12">base</name> <operator pos:start="17:14" pos:end="17:15">==</operator> <literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr>)</condition> <block pos:start="17:20" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:39">

        <if_stmt pos:start="19:9" pos:end="25:39"><if pos:start="19:9" pos:end="21:30">if <condition pos:start="19:12" pos:end="19:23">(<expr pos:start="19:13" pos:end="19:22"><name pos:start="19:13" pos:end="19:17">index</name> <operator pos:start="19:19" pos:end="19:20">==</operator> <literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:30"><block_content pos:start="21:13" pos:end="21:30">

            <expr_stmt pos:start="21:13" pos:end="21:30"><expr pos:start="21:13" pos:end="21:29"><call pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:27">gen_op_reset_T0</name><argument_list pos:start="21:28" pos:end="21:29">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="23:9" pos:end="25:39">else<block type="pseudo" pos:start="25:13" pos:end="25:39"><block_content pos:start="25:13" pos:end="25:39">

            <expr_stmt pos:start="25:13" pos:end="25:39"><expr pos:start="25:13" pos:end="25:38"><call pos:start="25:13" pos:end="25:38"><name pos:start="25:13" pos:end="25:27">GEN_LOAD_REG_TN</name><argument_list pos:start="25:28" pos:end="25:38">(<argument pos:start="25:29" pos:end="25:30"><expr pos:start="25:29" pos:end="25:30"><name pos:start="25:29" pos:end="25:30">T0</name></expr></argument>, <argument pos:start="25:33" pos:end="25:37"><expr pos:start="25:33" pos:end="25:37"><name pos:start="25:33" pos:end="25:37">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="27:7" pos:end="31:5">else if <condition pos:start="27:15" pos:end="27:26">(<expr pos:start="27:16" pos:end="27:25"><name pos:start="27:16" pos:end="27:20">index</name> <operator pos:start="27:22" pos:end="27:23">==</operator> <literal type="number" pos:start="27:25" pos:end="27:25">0</literal></expr>)</condition> <block pos:start="27:28" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:34">

        <expr_stmt pos:start="29:9" pos:end="29:34"><expr pos:start="29:9" pos:end="29:33"><call pos:start="29:9" pos:end="29:33"><name pos:start="29:9" pos:end="29:23">GEN_LOAD_REG_TN</name><argument_list pos:start="29:24" pos:end="29:33">(<argument pos:start="29:25" pos:end="29:26"><expr pos:start="29:25" pos:end="29:26"><name pos:start="29:25" pos:end="29:26">T0</name></expr></argument>, <argument pos:start="29:29" pos:end="29:32"><expr pos:start="29:29" pos:end="29:32"><name pos:start="29:29" pos:end="29:32">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="39:5">else <block pos:start="31:12" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:26">

        <expr_stmt pos:start="33:9" pos:end="33:34"><expr pos:start="33:9" pos:end="33:33"><call pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:23">GEN_LOAD_REG_TN</name><argument_list pos:start="33:24" pos:end="33:33">(<argument pos:start="33:25" pos:end="33:26"><expr pos:start="33:25" pos:end="33:26"><name pos:start="33:25" pos:end="33:26">T0</name></expr></argument>, <argument pos:start="33:29" pos:end="33:32"><expr pos:start="33:29" pos:end="33:32"><name pos:start="33:29" pos:end="33:32">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:35"><expr pos:start="35:9" pos:end="35:34"><call pos:start="35:9" pos:end="35:34"><name pos:start="35:9" pos:end="35:23">GEN_LOAD_REG_TN</name><argument_list pos:start="35:24" pos:end="35:34">(<argument pos:start="35:25" pos:end="35:26"><expr pos:start="35:25" pos:end="35:26"><name pos:start="35:25" pos:end="35:26">T1</name></expr></argument>, <argument pos:start="35:29" pos:end="35:33"><expr pos:start="35:29" pos:end="35:33"><name pos:start="35:29" pos:end="35:33">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:26"><expr pos:start="37:9" pos:end="37:25"><call pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:23">gen_op_addr_add</name><argument_list pos:start="37:24" pos:end="37:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="41:5" pos:end="45:7">/* Don't do NOP if destination is zero: we must perform the actual

     * memory access

     */</comment>

    <switch pos:start="47:5" pos:end="123:5">switch <condition pos:start="47:12" pos:end="47:16">(<expr pos:start="47:13" pos:end="47:15"><name pos:start="47:13" pos:end="47:15">opc</name></expr>)</condition> <block pos:start="47:18" pos:end="123:5">{<block_content pos:start="49:5" pos:end="121:15">

    <case pos:start="49:5" pos:end="49:19">case <expr pos:start="49:10" pos:end="49:18"><name pos:start="49:10" pos:end="49:18">OPC_LWXC1</name></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:22"><expr pos:start="51:9" pos:end="51:21"><call pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:15">op_ldst</name><argument_list pos:start="51:16" pos:end="51:21">(<argument pos:start="51:17" pos:end="51:20"><expr pos:start="51:17" pos:end="51:20"><name pos:start="51:17" pos:end="51:20">lwc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:36"><expr pos:start="53:9" pos:end="53:35"><call pos:start="53:9" pos:end="53:35"><name pos:start="53:9" pos:end="53:26">GEN_STORE_FTN_FREG</name><argument_list pos:start="53:27" pos:end="53:35">(<argument pos:start="53:28" pos:end="53:29"><expr pos:start="53:28" pos:end="53:29"><name pos:start="53:28" pos:end="53:29">fd</name></expr></argument>, <argument pos:start="53:32" pos:end="53:34"><expr pos:start="53:32" pos:end="53:34"><name pos:start="53:32" pos:end="53:34">WT0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:22"><expr pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:11">opn</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <literal type="string" pos:start="55:15" pos:end="55:21">"lwxc1"</literal></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:19">case <expr pos:start="59:10" pos:end="59:18"><name pos:start="59:10" pos:end="59:18">OPC_LDXC1</name></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:22"><expr pos:start="61:9" pos:end="61:21"><call pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:15">op_ldst</name><argument_list pos:start="61:16" pos:end="61:21">(<argument pos:start="61:17" pos:end="61:20"><expr pos:start="61:17" pos:end="61:20"><name pos:start="61:17" pos:end="61:20">ldc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:36"><expr pos:start="63:9" pos:end="63:35"><call pos:start="63:9" pos:end="63:35"><name pos:start="63:9" pos:end="63:26">GEN_STORE_FTN_FREG</name><argument_list pos:start="63:27" pos:end="63:35">(<argument pos:start="63:28" pos:end="63:29"><expr pos:start="63:28" pos:end="63:29"><name pos:start="63:28" pos:end="63:29">fd</name></expr></argument>, <argument pos:start="63:32" pos:end="63:34"><expr pos:start="63:32" pos:end="63:34"><name pos:start="63:32" pos:end="63:34">DT0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:11">opn</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <literal type="string" pos:start="65:15" pos:end="65:21">"ldxc1"</literal></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <case pos:start="69:5" pos:end="69:19">case <expr pos:start="69:10" pos:end="69:18"><name pos:start="69:10" pos:end="69:18">OPC_LUXC1</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:23"><expr pos:start="71:9" pos:end="71:22"><call pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:15">op_ldst</name><argument_list pos:start="71:16" pos:end="71:22">(<argument pos:start="71:17" pos:end="71:21"><expr pos:start="71:17" pos:end="71:21"><name pos:start="71:17" pos:end="71:21">luxc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><call pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:26">GEN_STORE_FTN_FREG</name><argument_list pos:start="73:27" pos:end="73:35">(<argument pos:start="73:28" pos:end="73:29"><expr pos:start="73:28" pos:end="73:29"><name pos:start="73:28" pos:end="73:29">fd</name></expr></argument>, <argument pos:start="73:32" pos:end="73:34"><expr pos:start="73:32" pos:end="73:34"><name pos:start="73:32" pos:end="73:34">DT0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:22"><expr pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:11">opn</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <literal type="string" pos:start="75:15" pos:end="75:21">"luxc1"</literal></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:19">case <expr pos:start="79:10" pos:end="79:18"><name pos:start="79:10" pos:end="79:18">OPC_SWXC1</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:35"><expr pos:start="81:9" pos:end="81:34"><call pos:start="81:9" pos:end="81:34"><name pos:start="81:9" pos:end="81:25">GEN_LOAD_FREG_FTN</name><argument_list pos:start="81:26" pos:end="81:34">(<argument pos:start="81:27" pos:end="81:29"><expr pos:start="81:27" pos:end="81:29"><name pos:start="81:27" pos:end="81:29">WT0</name></expr></argument>, <argument pos:start="81:32" pos:end="81:33"><expr pos:start="81:32" pos:end="81:33"><name pos:start="81:32" pos:end="81:33">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:22"><expr pos:start="83:9" pos:end="83:21"><call pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:15">op_ldst</name><argument_list pos:start="83:16" pos:end="83:21">(<argument pos:start="83:17" pos:end="83:20"><expr pos:start="83:17" pos:end="83:20"><name pos:start="83:17" pos:end="83:20">swc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:22"><expr pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:11">opn</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <literal type="string" pos:start="85:15" pos:end="85:21">"swxc1"</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:18"><expr pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:13">store</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <literal type="number" pos:start="87:17" pos:end="87:17">1</literal></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <case pos:start="91:5" pos:end="91:19">case <expr pos:start="91:10" pos:end="91:18"><name pos:start="91:10" pos:end="91:18">OPC_SDXC1</name></expr>:</case>

        <expr_stmt pos:start="93:9" pos:end="93:35"><expr pos:start="93:9" pos:end="93:34"><call pos:start="93:9" pos:end="93:34"><name pos:start="93:9" pos:end="93:25">GEN_LOAD_FREG_FTN</name><argument_list pos:start="93:26" pos:end="93:34">(<argument pos:start="93:27" pos:end="93:29"><expr pos:start="93:27" pos:end="93:29"><name pos:start="93:27" pos:end="93:29">DT0</name></expr></argument>, <argument pos:start="93:32" pos:end="93:33"><expr pos:start="93:32" pos:end="93:33"><name pos:start="93:32" pos:end="93:33">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:22"><expr pos:start="95:9" pos:end="95:21"><call pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:15">op_ldst</name><argument_list pos:start="95:16" pos:end="95:21">(<argument pos:start="95:17" pos:end="95:20"><expr pos:start="95:17" pos:end="95:20"><name pos:start="95:17" pos:end="95:20">sdc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:22"><expr pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:11">opn</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <literal type="string" pos:start="97:15" pos:end="97:21">"sdxc1"</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:18"><expr pos:start="99:9" pos:end="99:17"><name pos:start="99:9" pos:end="99:13">store</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <literal type="number" pos:start="99:17" pos:end="99:17">1</literal></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:19">case <expr pos:start="103:10" pos:end="103:18"><name pos:start="103:10" pos:end="103:18">OPC_SUXC1</name></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:35"><expr pos:start="105:9" pos:end="105:34"><call pos:start="105:9" pos:end="105:34"><name pos:start="105:9" pos:end="105:25">GEN_LOAD_FREG_FTN</name><argument_list pos:start="105:26" pos:end="105:34">(<argument pos:start="105:27" pos:end="105:29"><expr pos:start="105:27" pos:end="105:29"><name pos:start="105:27" pos:end="105:29">DT0</name></expr></argument>, <argument pos:start="105:32" pos:end="105:33"><expr pos:start="105:32" pos:end="105:33"><name pos:start="105:32" pos:end="105:33">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:23"><expr pos:start="107:9" pos:end="107:22"><call pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:15">op_ldst</name><argument_list pos:start="107:16" pos:end="107:22">(<argument pos:start="107:17" pos:end="107:21"><expr pos:start="107:17" pos:end="107:21"><name pos:start="107:17" pos:end="107:21">suxc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:22"><expr pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:11">opn</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <literal type="string" pos:start="109:15" pos:end="109:21">"suxc1"</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:18"><expr pos:start="111:9" pos:end="111:17"><name pos:start="111:9" pos:end="111:13">store</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <literal type="number" pos:start="111:17" pos:end="111:17">1</literal></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <default pos:start="115:5" pos:end="115:12">default:</default>

        <expr_stmt pos:start="117:9" pos:end="117:24"><expr pos:start="117:9" pos:end="117:23"><call pos:start="117:9" pos:end="117:23"><name pos:start="117:9" pos:end="117:18">MIPS_INVAL</name><argument_list pos:start="117:19" pos:end="117:23">(<argument pos:start="117:20" pos:end="117:22"><expr pos:start="117:20" pos:end="117:22"><name pos:start="117:20" pos:end="117:22">opn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:41"><expr pos:start="119:9" pos:end="119:40"><call pos:start="119:9" pos:end="119:40"><name pos:start="119:9" pos:end="119:26">generate_exception</name><argument_list pos:start="119:27" pos:end="119:40">(<argument pos:start="119:28" pos:end="119:30"><expr pos:start="119:28" pos:end="119:30"><name pos:start="119:28" pos:end="119:30">ctx</name></expr></argument>, <argument pos:start="119:33" pos:end="119:39"><expr pos:start="119:33" pos:end="119:39"><name pos:start="119:33" pos:end="119:39">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="121:9" pos:end="121:15">return;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="125:5" pos:end="127:48"><expr pos:start="125:5" pos:end="127:47"><call pos:start="125:5" pos:end="127:47"><name pos:start="125:5" pos:end="125:14">MIPS_DEBUG</name><argument_list pos:start="125:15" pos:end="127:47">(<argument pos:start="125:16" pos:end="125:30"><expr pos:start="125:16" pos:end="125:30"><literal type="string" pos:start="125:16" pos:end="125:30">"%s %s, %s(%s)"</literal></expr></argument>, <argument pos:start="125:33" pos:end="125:35"><expr pos:start="125:33" pos:end="125:35"><name pos:start="125:33" pos:end="125:35">opn</name></expr></argument>, <argument pos:start="125:38" pos:end="125:63"><expr pos:start="125:38" pos:end="125:63"><name pos:start="125:38" pos:end="125:63"><name pos:start="125:38" pos:end="125:46">fregnames</name><index pos:start="125:47" pos:end="125:63">[<expr pos:start="125:48" pos:end="125:62"><ternary pos:start="125:48" pos:end="125:62"><condition pos:start="125:48" pos:end="125:54"><expr pos:start="125:48" pos:end="125:52"><name pos:start="125:48" pos:end="125:52">store</name></expr> ?</condition><then pos:start="125:56" pos:end="125:57"> <expr pos:start="125:56" pos:end="125:57"><name pos:start="125:56" pos:end="125:57">fs</name></expr> </then><else pos:start="125:59" pos:end="125:62">: <expr pos:start="125:61" pos:end="125:62"><name pos:start="125:61" pos:end="125:62">fd</name></expr></else></ternary></expr>]</index></name></expr></argument>,

               <argument pos:start="127:16" pos:end="127:30"><expr pos:start="127:16" pos:end="127:30"><name pos:start="127:16" pos:end="127:30"><name pos:start="127:16" pos:end="127:23">regnames</name><index pos:start="127:24" pos:end="127:30">[<expr pos:start="127:25" pos:end="127:29"><name pos:start="127:25" pos:end="127:29">index</name></expr>]</index></name></expr></argument>, <argument pos:start="127:33" pos:end="127:46"><expr pos:start="127:33" pos:end="127:46"><name pos:start="127:33" pos:end="127:46"><name pos:start="127:33" pos:end="127:40">regnames</name><index pos:start="127:41" pos:end="127:46">[<expr pos:start="127:42" pos:end="127:45"><name pos:start="127:42" pos:end="127:45">base</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
