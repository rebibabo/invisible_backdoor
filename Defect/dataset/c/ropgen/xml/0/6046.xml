<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6046.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">xen_pt_cmd_reg_write</name><parameter_list pos:start="1:32" pos:end="5:52">(<parameter pos:start="1:33" pos:end="1:57"><decl pos:start="1:33" pos:end="1:57"><type pos:start="1:33" pos:end="1:57"><name pos:start="1:33" pos:end="1:54">XenPCIPassthroughState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:78"><decl pos:start="1:60" pos:end="1:78"><type pos:start="1:60" pos:end="1:78"><name pos:start="1:60" pos:end="1:67">XenPTReg</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:78">cfg_entry</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:40">uint16_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:45">val</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:65"><decl pos:start="3:48" pos:end="3:65"><type pos:start="3:48" pos:end="3:65"><name pos:start="3:48" pos:end="3:55">uint16_t</name></type> <name pos:start="3:57" pos:end="3:65">dev_value</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:51"><decl pos:start="5:33" pos:end="5:51"><type pos:start="5:33" pos:end="5:51"><name pos:start="5:33" pos:end="5:40">uint16_t</name></type> <name pos:start="5:42" pos:end="5:51">valid_mask</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="49:1">{<block_content pos:start="9:5" pos:end="47:13">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">XenPTRegInfo</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">reg</name> <init pos:start="9:23" pos:end="9:38">= <expr pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:33">cfg_entry</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">reg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:26">writable_mask</name> <init pos:start="11:28" pos:end="11:30">= <expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:73"><decl pos:start="13:5" pos:end="13:72"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:29">throughable_mask</name> <init pos:start="13:31" pos:end="13:72">= <expr pos:start="13:33" pos:end="13:72"><call pos:start="13:33" pos:end="13:72"><name pos:start="13:33" pos:end="13:52">get_throughable_mask</name><argument_list pos:start="13:53" pos:end="13:72">(<argument pos:start="13:54" pos:end="13:54"><expr pos:start="13:54" pos:end="13:54"><name pos:start="13:54" pos:end="13:54">s</name></expr></argument>, <argument pos:start="13:57" pos:end="13:59"><expr pos:start="13:57" pos:end="13:59"><name pos:start="13:57" pos:end="13:59">reg</name></expr></argument>, <argument pos:start="13:62" pos:end="13:71"><expr pos:start="13:62" pos:end="13:71"><name pos:start="13:62" pos:end="13:71">valid_mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:33">/* modify emulate register */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:47"><expr pos:start="19:5" pos:end="19:46"><name pos:start="19:5" pos:end="19:17">writable_mask</name> <operator pos:start="19:19" pos:end="19:19">=</operator> <operator pos:start="19:21" pos:end="19:21">~</operator><name pos:start="19:22" pos:end="19:33"><name pos:start="19:22" pos:end="19:24">reg</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:33">ro_mask</name></name> <operator pos:start="19:35" pos:end="19:35">&amp;</operator> <name pos:start="19:37" pos:end="19:46">valid_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:79"><expr pos:start="21:5" pos:end="21:78"><name pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:13">cfg_entry</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:19">data</name></name> <operator pos:start="21:21" pos:end="21:21">=</operator> <call pos:start="21:23" pos:end="21:78"><name pos:start="21:23" pos:end="21:40">XEN_PT_MERGE_VALUE</name><argument_list pos:start="21:41" pos:end="21:78">(<argument pos:start="21:42" pos:end="21:45"><expr pos:start="21:42" pos:end="21:45"><operator pos:start="21:42" pos:end="21:42">*</operator><name pos:start="21:43" pos:end="21:45">val</name></expr></argument>, <argument pos:start="21:48" pos:end="21:62"><expr pos:start="21:48" pos:end="21:62"><name pos:start="21:48" pos:end="21:62"><name pos:start="21:48" pos:end="21:56">cfg_entry</name><operator pos:start="21:57" pos:end="21:58">-&gt;</operator><name pos:start="21:59" pos:end="21:62">data</name></name></expr></argument>, <argument pos:start="21:65" pos:end="21:77"><expr pos:start="21:65" pos:end="21:77"><name pos:start="21:65" pos:end="21:77">writable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:57">/* create value for writing to I/O device register */</comment>

    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:40">(<expr pos:start="27:9" pos:end="27:39"><operator pos:start="27:9" pos:end="27:9">*</operator><name pos:start="27:10" pos:end="27:12">val</name> <operator pos:start="27:14" pos:end="27:14">&amp;</operator> <name pos:start="27:16" pos:end="27:39">PCI_COMMAND_INTX_DISABLE</name></expr>)</condition> <block pos:start="27:42" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:53">

        <expr_stmt pos:start="29:9" pos:end="29:53"><expr pos:start="29:9" pos:end="29:52"><name pos:start="29:9" pos:end="29:24">throughable_mask</name> <operator pos:start="29:26" pos:end="29:27">|=</operator> <name pos:start="29:29" pos:end="29:52">PCI_COMMAND_INTX_DISABLE</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="39:5">else <block pos:start="31:12" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:9">

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:27">(<expr pos:start="33:13" pos:end="33:26"><name pos:start="33:13" pos:end="33:26"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:26">machine_irq</name></name></expr>)</condition> <block pos:start="33:29" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:57">

            <expr_stmt pos:start="35:13" pos:end="35:57"><expr pos:start="35:13" pos:end="35:56"><name pos:start="35:13" pos:end="35:28">throughable_mask</name> <operator pos:start="35:30" pos:end="35:31">|=</operator> <name pos:start="35:33" pos:end="35:56">PCI_COMMAND_INTX_DISABLE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:65"><expr pos:start="43:5" pos:end="43:64"><operator pos:start="43:5" pos:end="43:5">*</operator><name pos:start="43:6" pos:end="43:8">val</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <call pos:start="43:12" pos:end="43:64"><name pos:start="43:12" pos:end="43:29">XEN_PT_MERGE_VALUE</name><argument_list pos:start="43:30" pos:end="43:64">(<argument pos:start="43:31" pos:end="43:34"><expr pos:start="43:31" pos:end="43:34"><operator pos:start="43:31" pos:end="43:31">*</operator><name pos:start="43:32" pos:end="43:34">val</name></expr></argument>, <argument pos:start="43:37" pos:end="43:45"><expr pos:start="43:37" pos:end="43:45"><name pos:start="43:37" pos:end="43:45">dev_value</name></expr></argument>, <argument pos:start="43:48" pos:end="43:63"><expr pos:start="43:48" pos:end="43:63"><name pos:start="43:48" pos:end="43:63">throughable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="47:5" pos:end="47:13">return <expr pos:start="47:12" pos:end="47:12"><literal type="number" pos:start="47:12" pos:end="47:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
