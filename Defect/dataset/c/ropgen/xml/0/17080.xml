<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17080.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">aio_set_fd_handler</name><parameter_list pos:start="1:24" pos:end="9:37">(<parameter pos:start="1:25" pos:end="1:39"><decl pos:start="1:25" pos:end="1:39"><type pos:start="1:25" pos:end="1:39"><name pos:start="1:25" pos:end="1:34">AioContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">ctx</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:30"><decl pos:start="3:25" pos:end="3:30"><type pos:start="3:25" pos:end="3:30"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:30">fd</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:42"><decl pos:start="5:25" pos:end="5:42"><type pos:start="5:25" pos:end="5:42"><name pos:start="5:25" pos:end="5:33">IOHandler</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:42">io_read</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:43"><decl pos:start="7:25" pos:end="7:43"><type pos:start="7:25" pos:end="7:43"><name pos:start="7:25" pos:end="7:33">IOHandler</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:43">io_write</name></decl></parameter>,

                        <parameter pos:start="9:25" pos:end="9:36"><decl pos:start="9:25" pos:end="9:36"><type pos:start="9:25" pos:end="9:36"><name pos:start="9:25" pos:end="9:28">void</name> <modifier pos:start="9:30" pos:end="9:30">*</modifier></type><name pos:start="9:31" pos:end="9:36">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="127:1">{<block_content pos:start="15:5" pos:end="125:20">

    <comment type="block" pos:start="13:5" pos:end="13:36">/* fd is a SOCKET in our case */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">AioHandler</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:20">node</name></decl>;</decl_stmt>



    <macro pos:start="19:5" pos:end="19:49"><name pos:start="19:5" pos:end="19:17">QLIST_FOREACH</name><argument_list pos:start="19:18" pos:end="19:49">(<argument pos:start="19:19" pos:end="19:22">node</argument>, <argument pos:start="19:25" pos:end="19:42">&amp;ctx-&gt;aio_handlers</argument>, <argument pos:start="19:45" pos:end="19:48">node</argument>)</argument_list></macro> <block pos:start="19:51" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:9">

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:49">(<expr pos:start="21:13" pos:end="21:48"><name pos:start="21:13" pos:end="21:24"><name pos:start="21:13" pos:end="21:16">node</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:21">pfd</name><operator pos:start="21:22" pos:end="21:22">.</operator><name pos:start="21:23" pos:end="21:24">fd</name></name> <operator pos:start="21:26" pos:end="21:27">==</operator> <name pos:start="21:29" pos:end="21:30">fd</name> <operator pos:start="21:32" pos:end="21:33">&amp;&amp;</operator> <operator pos:start="21:35" pos:end="21:35">!</operator><name pos:start="21:36" pos:end="21:48"><name pos:start="21:36" pos:end="21:39">node</name><operator pos:start="21:40" pos:end="21:41">-&gt;</operator><name pos:start="21:42" pos:end="21:48">deleted</name></name></expr>)</condition> <block pos:start="21:51" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:18">

            <break pos:start="23:13" pos:end="23:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="31:5" pos:end="31:41">/* Are we deleting the fd handler? */</comment>

    <if_stmt pos:start="33:5" pos:end="121:5"><if pos:start="33:5" pos:end="63:5">if <condition pos:start="33:8" pos:end="33:30">(<expr pos:start="33:9" pos:end="33:29"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:16">io_read</name> <operator pos:start="33:18" pos:end="33:19">&amp;&amp;</operator> <operator pos:start="33:21" pos:end="33:21">!</operator><name pos:start="33:22" pos:end="33:29">io_write</name></expr>)</condition> <block pos:start="33:32" pos:end="63:5">{<block_content pos:start="35:9" pos:end="61:9">

        <if_stmt pos:start="35:9" pos:end="61:9"><if pos:start="35:9" pos:end="61:9">if <condition pos:start="35:12" pos:end="35:17">(<expr pos:start="35:13" pos:end="35:16"><name pos:start="35:13" pos:end="35:16">node</name></expr>)</condition> <block pos:start="35:19" pos:end="61:9">{<block_content pos:start="39:13" pos:end="59:13">

            <comment type="block" pos:start="37:13" pos:end="37:68">/* If the lock is held, just mark the node as deleted */</comment>

            <if_stmt pos:start="39:13" pos:end="59:13"><if pos:start="39:13" pos:end="45:13">if <condition pos:start="39:16" pos:end="39:38">(<expr pos:start="39:17" pos:end="39:37"><name pos:start="39:17" pos:end="39:37"><name pos:start="39:17" pos:end="39:19">ctx</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:37">walking_handlers</name></name></expr>)</condition> <block pos:start="39:40" pos:end="45:13">{<block_content pos:start="41:17" pos:end="43:38">

                <expr_stmt pos:start="41:17" pos:end="41:34"><expr pos:start="41:17" pos:end="41:33"><name pos:start="41:17" pos:end="41:29"><name pos:start="41:17" pos:end="41:20">node</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:29">deleted</name></name> <operator pos:start="41:31" pos:end="41:31">=</operator> <literal type="number" pos:start="41:33" pos:end="41:33">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:38"><expr pos:start="43:17" pos:end="43:37"><name pos:start="43:17" pos:end="43:33"><name pos:start="43:17" pos:end="43:20">node</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:25">pfd</name><operator pos:start="43:26" pos:end="43:26">.</operator><name pos:start="43:27" pos:end="43:33">revents</name></name> <operator pos:start="43:35" pos:end="43:35">=</operator> <literal type="number" pos:start="43:37" pos:end="43:37">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="45:15" pos:end="59:13">else <block pos:start="45:20" pos:end="59:13">{<block_content pos:start="55:17" pos:end="57:29">

                <comment type="block" pos:start="47:17" pos:end="53:19">/* Otherwise, delete it for real.  We can't just mark it as

                 * deleted because deleted nodes are only cleaned up after

                 * releasing the walking_handlers lock.

                 */</comment>

                <expr_stmt pos:start="55:17" pos:end="55:41"><expr pos:start="55:17" pos:end="55:40"><call pos:start="55:17" pos:end="55:40"><name pos:start="55:17" pos:end="55:28">QLIST_REMOVE</name><argument_list pos:start="55:29" pos:end="55:40">(<argument pos:start="55:30" pos:end="55:33"><expr pos:start="55:30" pos:end="55:33"><name pos:start="55:30" pos:end="55:33">node</name></expr></argument>, <argument pos:start="55:36" pos:end="55:39"><expr pos:start="55:36" pos:end="55:39"><name pos:start="55:36" pos:end="55:39">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:29"><expr pos:start="57:17" pos:end="57:28"><call pos:start="57:17" pos:end="57:28"><name pos:start="57:17" pos:end="57:22">g_free</name><argument_list pos:start="57:23" pos:end="57:28">(<argument pos:start="57:24" pos:end="57:27"><expr pos:start="57:24" pos:end="57:27"><name pos:start="57:24" pos:end="57:27">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="121:5">else <block pos:start="63:12" pos:end="121:5">{<block_content pos:start="65:9" pos:end="119:55">

        <decl_stmt pos:start="65:9" pos:end="65:21"><decl pos:start="65:9" pos:end="65:20"><type pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:14">HANDLE</name></type> <name pos:start="65:16" pos:end="65:20">event</name></decl>;</decl_stmt>



        <if_stmt pos:start="69:9" pos:end="79:9"><if pos:start="69:9" pos:end="79:9">if <condition pos:start="69:12" pos:end="69:25">(<expr pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:16">node</name> <operator pos:start="69:18" pos:end="69:19">==</operator> <name pos:start="69:21" pos:end="69:24">NULL</name></expr>)</condition> <block pos:start="69:27" pos:end="79:9">{<block_content pos:start="73:13" pos:end="77:62">

            <comment type="block" pos:start="71:13" pos:end="71:60">/* Alloc and insert if it's not already there */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:49"><expr pos:start="73:13" pos:end="73:48"><name pos:start="73:13" pos:end="73:16">node</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:48"><name pos:start="73:20" pos:end="73:28">g_malloc0</name><argument_list pos:start="73:29" pos:end="73:48">(<argument pos:start="73:30" pos:end="73:47"><expr pos:start="73:30" pos:end="73:47"><sizeof pos:start="73:30" pos:end="73:47">sizeof<argument_list pos:start="73:36" pos:end="73:47">(<argument pos:start="73:37" pos:end="73:46"><expr pos:start="73:37" pos:end="73:46"><name pos:start="73:37" pos:end="73:46">AioHandler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:30"><expr pos:start="75:13" pos:end="75:29"><name pos:start="75:13" pos:end="75:24"><name pos:start="75:13" pos:end="75:16">node</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:21">pfd</name><operator pos:start="75:22" pos:end="75:22">.</operator><name pos:start="75:23" pos:end="75:24">fd</name></name> <operator pos:start="75:26" pos:end="75:26">=</operator> <name pos:start="75:28" pos:end="75:29">fd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:62"><expr pos:start="77:13" pos:end="77:61"><call pos:start="77:13" pos:end="77:61"><name pos:start="77:13" pos:end="77:29">QLIST_INSERT_HEAD</name><argument_list pos:start="77:30" pos:end="77:61">(<argument pos:start="77:31" pos:end="77:48"><expr pos:start="77:31" pos:end="77:48"><operator pos:start="77:31" pos:end="77:31">&amp;</operator><name pos:start="77:32" pos:end="77:48"><name pos:start="77:32" pos:end="77:34">ctx</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:48">aio_handlers</name></name></expr></argument>, <argument pos:start="77:51" pos:end="77:54"><expr pos:start="77:51" pos:end="77:54"><name pos:start="77:51" pos:end="77:54">node</name></expr></argument>, <argument pos:start="77:57" pos:end="77:60"><expr pos:start="77:57" pos:end="77:60"><name pos:start="77:57" pos:end="77:60">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:29"><expr pos:start="83:9" pos:end="83:28"><name pos:start="83:9" pos:end="83:24"><name pos:start="83:9" pos:end="83:12">node</name><operator pos:start="83:13" pos:end="83:14">-&gt;</operator><name pos:start="83:15" pos:end="83:17">pfd</name><operator pos:start="83:18" pos:end="83:18">.</operator><name pos:start="83:19" pos:end="83:24">events</name></name> <operator pos:start="83:26" pos:end="83:26">=</operator> <literal type="number" pos:start="83:28" pos:end="83:28">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="89:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:26">(<expr pos:start="85:13" pos:end="85:25"><name pos:start="85:13" pos:end="85:25"><name pos:start="85:13" pos:end="85:16">node</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:25">io_read</name></name></expr>)</condition> <block pos:start="85:28" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:40">

            <expr_stmt pos:start="87:13" pos:end="87:40"><expr pos:start="87:13" pos:end="87:39"><name pos:start="87:13" pos:end="87:28"><name pos:start="87:13" pos:end="87:16">node</name><operator pos:start="87:17" pos:end="87:18">-&gt;</operator><name pos:start="87:19" pos:end="87:21">pfd</name><operator pos:start="87:22" pos:end="87:22">.</operator><name pos:start="87:23" pos:end="87:28">events</name></name> <operator pos:start="87:30" pos:end="87:31">|=</operator> <name pos:start="87:33" pos:end="87:39">G_IO_IN</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:27">(<expr pos:start="91:13" pos:end="91:26"><name pos:start="91:13" pos:end="91:26"><name pos:start="91:13" pos:end="91:16">node</name><operator pos:start="91:17" pos:end="91:18">-&gt;</operator><name pos:start="91:19" pos:end="91:26">io_write</name></name></expr>)</condition> <block pos:start="91:29" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:41">

            <expr_stmt pos:start="93:13" pos:end="93:41"><expr pos:start="93:13" pos:end="93:40"><name pos:start="93:13" pos:end="93:28"><name pos:start="93:13" pos:end="93:16">node</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:21">pfd</name><operator pos:start="93:22" pos:end="93:22">.</operator><name pos:start="93:23" pos:end="93:28">events</name></name> <operator pos:start="93:30" pos:end="93:31">|=</operator> <name pos:start="93:33" pos:end="93:40">G_IO_OUT</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:33"><expr pos:start="99:9" pos:end="99:32"><name pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:12">node</name><operator pos:start="99:13" pos:end="99:14">-&gt;</operator><name pos:start="99:15" pos:end="99:15">e</name></name> <operator pos:start="99:17" pos:end="99:17">=</operator> <operator pos:start="99:19" pos:end="99:19">&amp;</operator><name pos:start="99:20" pos:end="99:32"><name pos:start="99:20" pos:end="99:22">ctx</name><operator pos:start="99:23" pos:end="99:24">-&gt;</operator><name pos:start="99:25" pos:end="99:32">notifier</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="103:9" pos:end="103:52">/* Update handler with latest information */</comment>

        <expr_stmt pos:start="105:9" pos:end="105:30"><expr pos:start="105:9" pos:end="105:29"><name pos:start="105:9" pos:end="105:20"><name pos:start="105:9" pos:end="105:12">node</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:20">opaque</name></name> <operator pos:start="105:22" pos:end="105:22">=</operator> <name pos:start="105:24" pos:end="105:29">opaque</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:32"><expr pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:12">node</name><operator pos:start="107:13" pos:end="107:14">-&gt;</operator><name pos:start="107:15" pos:end="107:21">io_read</name></name> <operator pos:start="107:23" pos:end="107:23">=</operator> <name pos:start="107:25" pos:end="107:31">io_read</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:34"><expr pos:start="109:9" pos:end="109:33"><name pos:start="109:9" pos:end="109:22"><name pos:start="109:9" pos:end="109:12">node</name><operator pos:start="109:13" pos:end="109:14">-&gt;</operator><name pos:start="109:15" pos:end="109:22">io_write</name></name> <operator pos:start="109:24" pos:end="109:24">=</operator> <name pos:start="109:26" pos:end="109:33">io_write</name></expr>;</expr_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:58"><expr pos:start="113:9" pos:end="113:57"><name pos:start="113:9" pos:end="113:13">event</name> <operator pos:start="113:15" pos:end="113:15">=</operator> <call pos:start="113:17" pos:end="113:57"><name pos:start="113:17" pos:end="113:41">event_notifier_get_handle</name><argument_list pos:start="113:42" pos:end="113:57">(<argument pos:start="113:43" pos:end="113:56"><expr pos:start="113:43" pos:end="113:56"><operator pos:start="113:43" pos:end="113:43">&amp;</operator><name pos:start="113:44" pos:end="113:56"><name pos:start="113:44" pos:end="113:46">ctx</name><operator pos:start="113:47" pos:end="113:48">-&gt;</operator><name pos:start="113:49" pos:end="113:56">notifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="119:55"><expr pos:start="115:9" pos:end="119:54"><call pos:start="115:9" pos:end="119:54"><name pos:start="115:9" pos:end="115:22">WSAEventSelect</name><argument_list pos:start="115:23" pos:end="119:54">(<argument pos:start="115:24" pos:end="115:35"><expr pos:start="115:24" pos:end="115:35"><name pos:start="115:24" pos:end="115:35"><name pos:start="115:24" pos:end="115:27">node</name><operator pos:start="115:28" pos:end="115:29">-&gt;</operator><name pos:start="115:30" pos:end="115:32">pfd</name><operator pos:start="115:33" pos:end="115:33">.</operator><name pos:start="115:34" pos:end="115:35">fd</name></name></expr></argument>, <argument pos:start="115:38" pos:end="115:42"><expr pos:start="115:38" pos:end="115:42"><name pos:start="115:38" pos:end="115:42">event</name></expr></argument>,

                       <argument pos:start="117:24" pos:end="119:53"><expr pos:start="117:24" pos:end="119:53"><name pos:start="117:24" pos:end="117:30">FD_READ</name> <operator pos:start="117:32" pos:end="117:32">|</operator> <name pos:start="117:34" pos:end="117:42">FD_ACCEPT</name> <operator pos:start="117:44" pos:end="117:44">|</operator> <name pos:start="117:46" pos:end="117:53">FD_CLOSE</name> <operator pos:start="117:55" pos:end="117:55">|</operator>

                       <name pos:start="119:24" pos:end="119:33">FD_CONNECT</name> <operator pos:start="119:35" pos:end="119:35">|</operator> <name pos:start="119:37" pos:end="119:44">FD_WRITE</name> <operator pos:start="119:46" pos:end="119:46">|</operator> <name pos:start="119:48" pos:end="119:53">FD_OOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:20"><expr pos:start="125:5" pos:end="125:19"><call pos:start="125:5" pos:end="125:19"><name pos:start="125:5" pos:end="125:14">aio_notify</name><argument_list pos:start="125:15" pos:end="125:19">(<argument pos:start="125:16" pos:end="125:18"><expr pos:start="125:16" pos:end="125:18"><name pos:start="125:16" pos:end="125:18">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
