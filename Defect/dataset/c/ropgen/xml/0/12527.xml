<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12527.c" pos:tabs="8"><function pos:start="1:1" pos:end="409:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:27">helper_lcall_protected</name><parameter_list pos:start="1:28" pos:end="3:59">(<parameter pos:start="1:29" pos:end="1:38"><decl pos:start="1:29" pos:end="1:38"><type pos:start="1:29" pos:end="1:38"><name pos:start="1:29" pos:end="1:31">int</name></type> <name pos:start="1:33" pos:end="1:38">new_cs</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:60"><decl pos:start="1:41" pos:end="1:60"><type pos:start="1:41" pos:end="1:60"><name pos:start="1:41" pos:end="1:52">target_ulong</name></type> <name pos:start="1:54" pos:end="1:60">new_eip</name></decl></parameter>, 

                            <parameter pos:start="3:29" pos:end="3:37"><decl pos:start="3:29" pos:end="3:37"><type pos:start="3:29" pos:end="3:37"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:37">shift</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:58"><decl pos:start="3:40" pos:end="3:58"><type pos:start="3:40" pos:end="3:58"><name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:58">next_eip_addend</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="409:1">{<block_content pos:start="7:5" pos:end="408:0">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">new_stack</name></decl>, <decl pos:start="7:20" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:20">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:66"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:15">e1</name></decl>, <decl pos:start="9:18" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:18" pos:end="9:19">e2</name></decl>, <decl pos:start="9:22" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:22" pos:end="9:24">cpl</name></decl>, <decl pos:start="9:27" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:27" pos:end="9:29">dpl</name></decl>, <decl pos:start="9:32" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:32" pos:end="9:34">rpl</name></decl>, <decl pos:start="9:37" pos:end="9:44"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:37" pos:end="9:44">selector</name></decl>, <decl pos:start="9:47" pos:end="9:52"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:47" pos:end="9:52">offset</name></decl>, <decl pos:start="9:55" pos:end="9:65"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:55" pos:end="9:65">param_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:69"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:15">ss</name> <init pos:start="11:17" pos:end="11:19">= <expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr></init></decl>, <decl pos:start="11:22" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:22" pos:end="11:26">ss_e1</name> <init pos:start="11:28" pos:end="11:30">= <expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr></init></decl>, <decl pos:start="11:33" pos:end="11:41"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:33" pos:end="11:37">ss_e2</name> <init pos:start="11:39" pos:end="11:41">= <expr pos:start="11:41" pos:end="11:41"><literal type="number" pos:start="11:41" pos:end="11:41">0</literal></expr></init></decl>, <decl pos:start="11:44" pos:end="11:45"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:44" pos:end="11:45">sp</name></decl>, <decl pos:start="11:48" pos:end="11:51"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:48" pos:end="11:51">type</name></decl>, <decl pos:start="11:54" pos:end="11:59"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:54" pos:end="11:59">ss_dpl</name></decl>, <decl pos:start="11:62" pos:end="11:68"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:62" pos:end="11:68">sp_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:16">val</name></decl>, <decl pos:start="13:19" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:19" pos:end="13:23">limit</name></decl>, <decl pos:start="13:26" pos:end="13:36"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:26" pos:end="13:36">old_sp_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:40"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:20">ssp</name></decl>, <decl pos:start="15:23" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:23" pos:end="15:29">old_ssp</name></decl>, <decl pos:start="15:32" pos:end="15:39"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:32" pos:end="15:39">next_eip</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:42"><expr pos:start="19:5" pos:end="19:41"><name pos:start="19:5" pos:end="19:12">next_eip</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:23"><name pos:start="19:16" pos:end="19:18">env</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:23">eip</name></name> <operator pos:start="19:25" pos:end="19:25">+</operator> <name pos:start="19:27" pos:end="19:41">next_eip_addend</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:74"><expr pos:start="21:5" pos:end="21:73"><call pos:start="21:5" pos:end="21:73"><name pos:start="21:5" pos:end="21:13">LOG_PCALL</name><argument_list pos:start="21:14" pos:end="21:73">(<argument pos:start="21:15" pos:end="21:38"><expr pos:start="21:15" pos:end="21:38"><literal type="string" pos:start="21:15" pos:end="21:38">"lcall %04x:%08x s=%d\n"</literal></expr></argument>, <argument pos:start="21:41" pos:end="21:46"><expr pos:start="21:41" pos:end="21:46"><name pos:start="21:41" pos:end="21:46">new_cs</name></expr></argument>, <argument pos:start="21:49" pos:end="21:65"><expr pos:start="21:49" pos:end="21:65"><operator pos:start="21:49" pos:end="21:49">(</operator><name pos:start="21:50" pos:end="21:57">uint32_t</name><operator pos:start="21:58" pos:end="21:58">)</operator><name pos:start="21:59" pos:end="21:65">new_eip</name></expr></argument>, <argument pos:start="21:68" pos:end="21:72"><expr pos:start="21:68" pos:end="21:72"><name pos:start="21:68" pos:end="21:72">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:25"><expr pos:start="23:5" pos:end="23:24"><call pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:19">LOG_PCALL_STATE</name><argument_list pos:start="23:20" pos:end="23:24">(<argument pos:start="23:21" pos:end="23:23"><expr pos:start="23:21" pos:end="23:23"><name pos:start="23:21" pos:end="23:23">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:43"><if pos:start="25:5" pos:end="27:43">if <condition pos:start="25:8" pos:end="25:31">(<expr pos:start="25:9" pos:end="25:30"><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:15">new_cs</name> <operator pos:start="25:17" pos:end="25:17">&amp;</operator> <literal type="number" pos:start="25:19" pos:end="25:24">0xfffc</literal><operator pos:start="25:25" pos:end="25:25">)</operator> <operator pos:start="25:27" pos:end="25:28">==</operator> <literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:43"><block_content pos:start="27:9" pos:end="27:43">

        <expr_stmt pos:start="27:9" pos:end="27:43"><expr pos:start="27:9" pos:end="27:42"><call pos:start="27:9" pos:end="27:42"><name pos:start="27:9" pos:end="27:27">raise_exception_err</name><argument_list pos:start="27:28" pos:end="27:42">(<argument pos:start="27:29" pos:end="27:38"><expr pos:start="27:29" pos:end="27:38"><name pos:start="27:29" pos:end="27:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="27:41" pos:end="27:41"><expr pos:start="27:41" pos:end="27:41"><literal type="number" pos:start="27:41" pos:end="27:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="31:57"><if pos:start="29:5" pos:end="31:57">if <condition pos:start="29:8" pos:end="29:44">(<expr pos:start="29:9" pos:end="29:43"><call pos:start="29:9" pos:end="29:38"><name pos:start="29:9" pos:end="29:20">load_segment</name><argument_list pos:start="29:21" pos:end="29:38">(<argument pos:start="29:22" pos:end="29:24"><expr pos:start="29:22" pos:end="29:24"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:24">e1</name></expr></argument>, <argument pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><operator pos:start="29:27" pos:end="29:27">&amp;</operator><name pos:start="29:28" pos:end="29:29">e2</name></expr></argument>, <argument pos:start="29:32" pos:end="29:37"><expr pos:start="29:32" pos:end="29:37"><name pos:start="29:32" pos:end="29:37">new_cs</name></expr></argument>)</argument_list></call> <operator pos:start="29:40" pos:end="29:41">!=</operator> <literal type="number" pos:start="29:43" pos:end="29:43">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:57"><block_content pos:start="31:9" pos:end="31:57">

        <expr_stmt pos:start="31:9" pos:end="31:57"><expr pos:start="31:9" pos:end="31:56"><call pos:start="31:9" pos:end="31:56"><name pos:start="31:9" pos:end="31:27">raise_exception_err</name><argument_list pos:start="31:28" pos:end="31:56">(<argument pos:start="31:29" pos:end="31:38"><expr pos:start="31:29" pos:end="31:38"><name pos:start="31:29" pos:end="31:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="31:41" pos:end="31:55"><expr pos:start="31:41" pos:end="31:55"><name pos:start="31:41" pos:end="31:46">new_cs</name> <operator pos:start="31:48" pos:end="31:48">&amp;</operator> <literal type="number" pos:start="31:50" pos:end="31:55">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:36"><expr pos:start="33:5" pos:end="33:35"><name pos:start="33:5" pos:end="33:7">cpl</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <name pos:start="33:11" pos:end="33:21"><name pos:start="33:11" pos:end="33:13">env</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:21">hflags</name></name> <operator pos:start="33:23" pos:end="33:23">&amp;</operator> <name pos:start="33:25" pos:end="33:35">HF_CPL_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:42"><expr pos:start="35:5" pos:end="35:41"><call pos:start="35:5" pos:end="35:41"><name pos:start="35:5" pos:end="35:13">LOG_PCALL</name><argument_list pos:start="35:14" pos:end="35:41">(<argument pos:start="35:15" pos:end="35:32"><expr pos:start="35:15" pos:end="35:32"><literal type="string" pos:start="35:15" pos:end="35:32">"desc=%08x:%08x\n"</literal></expr></argument>, <argument pos:start="35:35" pos:end="35:36"><expr pos:start="35:35" pos:end="35:36"><name pos:start="35:35" pos:end="35:36">e1</name></expr></argument>, <argument pos:start="35:39" pos:end="35:40"><expr pos:start="35:39" pos:end="35:40"><name pos:start="35:39" pos:end="35:40">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="398:0"><if pos:start="37:5" pos:end="149:5">if <condition pos:start="37:8" pos:end="37:25">(<expr pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:10">e2</name> <operator pos:start="37:12" pos:end="37:12">&amp;</operator> <name pos:start="37:14" pos:end="37:24">DESC_S_MASK</name></expr>)</condition> <block pos:start="37:27" pos:end="149:5">{<block_content pos:start="39:9" pos:end="147:9">

        <if_stmt pos:start="39:9" pos:end="41:61"><if pos:start="39:9" pos:end="41:61">if <condition pos:start="39:12" pos:end="39:33">(<expr pos:start="39:13" pos:end="39:32"><operator pos:start="39:13" pos:end="39:13">!</operator><operator pos:start="39:14" pos:end="39:14">(</operator><name pos:start="39:15" pos:end="39:16">e2</name> <operator pos:start="39:18" pos:end="39:18">&amp;</operator> <name pos:start="39:20" pos:end="39:31">DESC_CS_MASK</name><operator pos:start="39:32" pos:end="39:32">)</operator></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:61"><block_content pos:start="41:13" pos:end="41:61">

            <expr_stmt pos:start="41:13" pos:end="41:61"><expr pos:start="41:13" pos:end="41:60"><call pos:start="41:13" pos:end="41:60"><name pos:start="41:13" pos:end="41:31">raise_exception_err</name><argument_list pos:start="41:32" pos:end="41:60">(<argument pos:start="41:33" pos:end="41:42"><expr pos:start="41:33" pos:end="41:42"><name pos:start="41:33" pos:end="41:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="41:45" pos:end="41:59"><expr pos:start="41:45" pos:end="41:59"><name pos:start="41:45" pos:end="41:50">new_cs</name> <operator pos:start="41:52" pos:end="41:52">&amp;</operator> <literal type="number" pos:start="41:54" pos:end="41:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:41"><expr pos:start="43:9" pos:end="43:40"><name pos:start="43:9" pos:end="43:11">dpl</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <operator pos:start="43:15" pos:end="43:15">(</operator><name pos:start="43:16" pos:end="43:17">e2</name> <operator pos:start="43:19" pos:end="43:20">&gt;&gt;</operator> <name pos:start="43:22" pos:end="43:35">DESC_DPL_SHIFT</name><operator pos:start="43:36" pos:end="43:36">)</operator> <operator pos:start="43:38" pos:end="43:38">&amp;</operator> <literal type="number" pos:start="43:40" pos:end="43:40">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="67:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:29">(<expr pos:start="45:13" pos:end="45:28"><name pos:start="45:13" pos:end="45:14">e2</name> <operator pos:start="45:16" pos:end="45:16">&amp;</operator> <name pos:start="45:18" pos:end="45:28">DESC_C_MASK</name></expr>)</condition> <block pos:start="45:31" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:65">

            <comment type="block" pos:start="47:13" pos:end="47:41">/* conforming code segment */</comment>

            <if_stmt pos:start="49:13" pos:end="51:65"><if pos:start="49:13" pos:end="51:65">if <condition pos:start="49:16" pos:end="49:26">(<expr pos:start="49:17" pos:end="49:25"><name pos:start="49:17" pos:end="49:19">dpl</name> <operator pos:start="49:21" pos:end="49:21">&gt;</operator> <name pos:start="49:23" pos:end="49:25">cpl</name></expr>)</condition><block type="pseudo" pos:start="51:17" pos:end="51:65"><block_content pos:start="51:17" pos:end="51:65">

                <expr_stmt pos:start="51:17" pos:end="51:65"><expr pos:start="51:17" pos:end="51:64"><call pos:start="51:17" pos:end="51:64"><name pos:start="51:17" pos:end="51:35">raise_exception_err</name><argument_list pos:start="51:36" pos:end="51:64">(<argument pos:start="51:37" pos:end="51:46"><expr pos:start="51:37" pos:end="51:46"><name pos:start="51:37" pos:end="51:46">EXCP0D_GPF</name></expr></argument>, <argument pos:start="51:49" pos:end="51:63"><expr pos:start="51:49" pos:end="51:63"><name pos:start="51:49" pos:end="51:54">new_cs</name> <operator pos:start="51:56" pos:end="51:56">&amp;</operator> <literal type="number" pos:start="51:58" pos:end="51:63">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="53:11" pos:end="67:9">else <block pos:start="53:16" pos:end="67:9">{<block_content pos:start="57:13" pos:end="65:65">

            <comment type="block" pos:start="55:13" pos:end="55:45">/* non conforming code segment */</comment>

            <expr_stmt pos:start="57:13" pos:end="57:29"><expr pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:15">rpl</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <name pos:start="57:19" pos:end="57:24">new_cs</name> <operator pos:start="57:26" pos:end="57:26">&amp;</operator> <literal type="number" pos:start="57:28" pos:end="57:28">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="61:65"><if pos:start="59:13" pos:end="61:65">if <condition pos:start="59:16" pos:end="59:26">(<expr pos:start="59:17" pos:end="59:25"><name pos:start="59:17" pos:end="59:19">rpl</name> <operator pos:start="59:21" pos:end="59:21">&gt;</operator> <name pos:start="59:23" pos:end="59:25">cpl</name></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:65"><block_content pos:start="61:17" pos:end="61:65">

                <expr_stmt pos:start="61:17" pos:end="61:65"><expr pos:start="61:17" pos:end="61:64"><call pos:start="61:17" pos:end="61:64"><name pos:start="61:17" pos:end="61:35">raise_exception_err</name><argument_list pos:start="61:36" pos:end="61:64">(<argument pos:start="61:37" pos:end="61:46"><expr pos:start="61:37" pos:end="61:46"><name pos:start="61:37" pos:end="61:46">EXCP0D_GPF</name></expr></argument>, <argument pos:start="61:49" pos:end="61:63"><expr pos:start="61:49" pos:end="61:63"><name pos:start="61:49" pos:end="61:54">new_cs</name> <operator pos:start="61:56" pos:end="61:56">&amp;</operator> <literal type="number" pos:start="61:58" pos:end="61:63">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="63:13" pos:end="65:65"><if pos:start="63:13" pos:end="65:65">if <condition pos:start="63:16" pos:end="63:27">(<expr pos:start="63:17" pos:end="63:26"><name pos:start="63:17" pos:end="63:19">dpl</name> <operator pos:start="63:21" pos:end="63:22">!=</operator> <name pos:start="63:24" pos:end="63:26">cpl</name></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:65"><block_content pos:start="65:17" pos:end="65:65">

                <expr_stmt pos:start="65:17" pos:end="65:65"><expr pos:start="65:17" pos:end="65:64"><call pos:start="65:17" pos:end="65:64"><name pos:start="65:17" pos:end="65:35">raise_exception_err</name><argument_list pos:start="65:36" pos:end="65:64">(<argument pos:start="65:37" pos:end="65:46"><expr pos:start="65:37" pos:end="65:46"><name pos:start="65:37" pos:end="65:46">EXCP0D_GPF</name></expr></argument>, <argument pos:start="65:49" pos:end="65:63"><expr pos:start="65:49" pos:end="65:63"><name pos:start="65:49" pos:end="65:54">new_cs</name> <operator pos:start="65:56" pos:end="65:56">&amp;</operator> <literal type="number" pos:start="65:58" pos:end="65:63">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="69:9" pos:end="76:0"><if pos:start="69:9" pos:end="76:0">if <condition pos:start="69:12" pos:end="69:32">(<expr pos:start="69:13" pos:end="69:31"><operator pos:start="69:13" pos:end="69:13">!</operator><operator pos:start="69:14" pos:end="69:14">(</operator><name pos:start="69:15" pos:end="69:16">e2</name> <operator pos:start="69:18" pos:end="69:18">&amp;</operator> <name pos:start="69:20" pos:end="69:30">DESC_P_MASK</name><operator pos:start="69:31" pos:end="69:31">)</operator></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="76:0"><block_content pos:start="71:13" pos:end="76:0">

            <expr_stmt pos:start="71:13" pos:end="76:0"><expr pos:start="71:13" pos:end="71:62"><call pos:start="71:13" pos:end="71:62"><name pos:start="71:13" pos:end="71:31">raise_exception_err</name><argument_list pos:start="71:32" pos:end="71:62">(<argument pos:start="71:33" pos:end="71:44"><expr pos:start="71:33" pos:end="71:44"><name pos:start="71:33" pos:end="71:44">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="71:47" pos:end="71:61"><expr pos:start="71:47" pos:end="71:61"><name pos:start="71:47" pos:end="71:52">new_cs</name> <operator pos:start="71:54" pos:end="71:54">&amp;</operator> <literal type="number" pos:start="71:56" pos:end="71:61">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:ifdef pos:start="75:1" pos:end="75:20">#<cpp:directive pos:start="75:2" pos:end="75:6">ifdef</cpp:directive> <name pos:start="75:8" pos:end="75:20">TARGET_X86_64</name></cpp:ifdef>

        <comment type="block" pos:start="77:9" pos:end="77:53">/* XXX: check 16/32 bit cases in long mode */</comment>

        <if_stmt pos:start="79:9" pos:end="147:9"><if pos:start="79:9" pos:end="103:9">if <condition pos:start="79:12" pos:end="79:23">(<expr pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:17">shift</name> <operator pos:start="79:19" pos:end="79:20">==</operator> <literal type="number" pos:start="79:22" pos:end="79:22">2</literal></expr>)</condition> <block pos:start="79:25" pos:end="103:9">{<block_content pos:start="81:13" pos:end="101:26">

            <decl_stmt pos:start="81:13" pos:end="81:29"><decl pos:start="81:13" pos:end="81:28"><type pos:start="81:13" pos:end="81:24"><name pos:start="81:13" pos:end="81:24">target_ulong</name></type> <name pos:start="81:26" pos:end="81:28">rsp</name></decl>;</decl_stmt>

            <comment type="block" pos:start="83:13" pos:end="83:29">/* 64 bit case */</comment>

            <expr_stmt pos:start="85:13" pos:end="85:22"><expr pos:start="85:13" pos:end="85:21"><name pos:start="85:13" pos:end="85:15">rsp</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:21">ESP</name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:49"><expr pos:start="87:13" pos:end="87:48"><call pos:start="87:13" pos:end="87:48"><name pos:start="87:13" pos:end="87:17">PUSHQ</name><argument_list pos:start="87:18" pos:end="87:48">(<argument pos:start="87:19" pos:end="87:21"><expr pos:start="87:19" pos:end="87:21"><name pos:start="87:19" pos:end="87:21">rsp</name></expr></argument>, <argument pos:start="87:24" pos:end="87:47"><expr pos:start="87:24" pos:end="87:47"><name pos:start="87:24" pos:end="87:38"><name pos:start="87:24" pos:end="87:26">env</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:32">segs</name><index pos:start="87:33" pos:end="87:38">[<expr pos:start="87:34" pos:end="87:37"><name pos:start="87:34" pos:end="87:37">R_CS</name></expr>]</index></name><operator pos:start="87:39" pos:end="87:39">.</operator><name pos:start="87:40" pos:end="87:47">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:33"><expr pos:start="89:13" pos:end="89:32"><call pos:start="89:13" pos:end="89:32"><name pos:start="89:13" pos:end="89:17">PUSHQ</name><argument_list pos:start="89:18" pos:end="89:32">(<argument pos:start="89:19" pos:end="89:21"><expr pos:start="89:19" pos:end="89:21"><name pos:start="89:19" pos:end="89:21">rsp</name></expr></argument>, <argument pos:start="89:24" pos:end="89:31"><expr pos:start="89:24" pos:end="89:31"><name pos:start="89:24" pos:end="89:31">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="91:13" pos:end="91:50">/* from this point, not restartable */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:22"><expr pos:start="93:13" pos:end="93:21"><name pos:start="93:13" pos:end="93:15">ESP</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <name pos:start="93:19" pos:end="93:21">rsp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="99:62"><expr pos:start="95:13" pos:end="99:61"><call pos:start="95:13" pos:end="99:61"><name pos:start="95:13" pos:end="95:34">cpu_x86_load_seg_cache</name><argument_list pos:start="95:35" pos:end="99:61">(<argument pos:start="95:36" pos:end="95:38"><expr pos:start="95:36" pos:end="95:38"><name pos:start="95:36" pos:end="95:38">env</name></expr></argument>, <argument pos:start="95:41" pos:end="95:44"><expr pos:start="95:41" pos:end="95:44"><name pos:start="95:41" pos:end="95:44">R_CS</name></expr></argument>, <argument pos:start="95:47" pos:end="95:69"><expr pos:start="95:47" pos:end="95:69"><operator pos:start="95:47" pos:end="95:47">(</operator><name pos:start="95:48" pos:end="95:53">new_cs</name> <operator pos:start="95:55" pos:end="95:55">&amp;</operator> <literal type="number" pos:start="95:57" pos:end="95:62">0xfffc</literal><operator pos:start="95:63" pos:end="95:63">)</operator> <operator pos:start="95:65" pos:end="95:65">|</operator> <name pos:start="95:67" pos:end="95:69">cpl</name></expr></argument>,

                                   <argument pos:start="97:36" pos:end="97:55"><expr pos:start="97:36" pos:end="97:55"><call pos:start="97:36" pos:end="97:55"><name pos:start="97:36" pos:end="97:47">get_seg_base</name><argument_list pos:start="97:48" pos:end="97:55">(<argument pos:start="97:49" pos:end="97:50"><expr pos:start="97:49" pos:end="97:50"><name pos:start="97:49" pos:end="97:50">e1</name></expr></argument>, <argument pos:start="97:53" pos:end="97:54"><expr pos:start="97:53" pos:end="97:54"><name pos:start="97:53" pos:end="97:54">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="99:36" pos:end="99:56"><expr pos:start="99:36" pos:end="99:56"><call pos:start="99:36" pos:end="99:56"><name pos:start="99:36" pos:end="99:48">get_seg_limit</name><argument_list pos:start="99:49" pos:end="99:56">(<argument pos:start="99:50" pos:end="99:51"><expr pos:start="99:50" pos:end="99:51"><name pos:start="99:50" pos:end="99:51">e1</name></expr></argument>, <argument pos:start="99:54" pos:end="99:55"><expr pos:start="99:54" pos:end="99:55"><name pos:start="99:54" pos:end="99:55">e2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:59" pos:end="99:60"><expr pos:start="99:59" pos:end="99:60"><name pos:start="99:59" pos:end="99:60">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:26"><expr pos:start="101:13" pos:end="101:25"><name pos:start="101:13" pos:end="101:15">EIP</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <name pos:start="101:19" pos:end="101:25">new_eip</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="103:11" pos:end="147:9">else

<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif>

        <block pos:start="107:9" pos:end="147:9">{<block_content pos:start="109:13" pos:end="145:26">

            <expr_stmt pos:start="109:13" pos:end="109:21"><expr pos:start="109:13" pos:end="109:20"><name pos:start="109:13" pos:end="109:14">sp</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <name pos:start="109:18" pos:end="109:20">ESP</name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:57"><expr pos:start="111:13" pos:end="111:56"><name pos:start="111:13" pos:end="111:19">sp_mask</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <call pos:start="111:23" pos:end="111:56"><name pos:start="111:23" pos:end="111:33">get_sp_mask</name><argument_list pos:start="111:34" pos:end="111:56">(<argument pos:start="111:35" pos:end="111:55"><expr pos:start="111:35" pos:end="111:55"><name pos:start="111:35" pos:end="111:49"><name pos:start="111:35" pos:end="111:37">env</name><operator pos:start="111:38" pos:end="111:39">-&gt;</operator><name pos:start="111:40" pos:end="111:43">segs</name><index pos:start="111:44" pos:end="111:49">[<expr pos:start="111:45" pos:end="111:48"><name pos:start="111:45" pos:end="111:48">R_SS</name></expr>]</index></name><operator pos:start="111:50" pos:end="111:50">.</operator><name pos:start="111:51" pos:end="111:55">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:39"><expr pos:start="113:13" pos:end="113:38"><name pos:start="113:13" pos:end="113:15">ssp</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <name pos:start="113:19" pos:end="113:33"><name pos:start="113:19" pos:end="113:21">env</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:27">segs</name><index pos:start="113:28" pos:end="113:33">[<expr pos:start="113:29" pos:end="113:32"><name pos:start="113:29" pos:end="113:32">R_SS</name></expr>]</index></name><operator pos:start="113:34" pos:end="113:34">.</operator><name pos:start="113:35" pos:end="113:38">base</name></expr>;</expr_stmt>

            <if_stmt pos:start="115:13" pos:end="127:13"><if pos:start="115:13" pos:end="121:13">if <condition pos:start="115:16" pos:end="115:22">(<expr pos:start="115:17" pos:end="115:21"><name pos:start="115:17" pos:end="115:21">shift</name></expr>)</condition> <block pos:start="115:24" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:50">

                <expr_stmt pos:start="117:17" pos:end="117:66"><expr pos:start="117:17" pos:end="117:65"><call pos:start="117:17" pos:end="117:65"><name pos:start="117:17" pos:end="117:21">PUSHL</name><argument_list pos:start="117:22" pos:end="117:65">(<argument pos:start="117:23" pos:end="117:25"><expr pos:start="117:23" pos:end="117:25"><name pos:start="117:23" pos:end="117:25">ssp</name></expr></argument>, <argument pos:start="117:28" pos:end="117:29"><expr pos:start="117:28" pos:end="117:29"><name pos:start="117:28" pos:end="117:29">sp</name></expr></argument>, <argument pos:start="117:32" pos:end="117:38"><expr pos:start="117:32" pos:end="117:38"><name pos:start="117:32" pos:end="117:38">sp_mask</name></expr></argument>, <argument pos:start="117:41" pos:end="117:64"><expr pos:start="117:41" pos:end="117:64"><name pos:start="117:41" pos:end="117:55"><name pos:start="117:41" pos:end="117:43">env</name><operator pos:start="117:44" pos:end="117:45">-&gt;</operator><name pos:start="117:46" pos:end="117:49">segs</name><index pos:start="117:50" pos:end="117:55">[<expr pos:start="117:51" pos:end="117:54"><name pos:start="117:51" pos:end="117:54">R_CS</name></expr>]</index></name><operator pos:start="117:56" pos:end="117:56">.</operator><name pos:start="117:57" pos:end="117:64">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:50"><expr pos:start="119:17" pos:end="119:49"><call pos:start="119:17" pos:end="119:49"><name pos:start="119:17" pos:end="119:21">PUSHL</name><argument_list pos:start="119:22" pos:end="119:49">(<argument pos:start="119:23" pos:end="119:25"><expr pos:start="119:23" pos:end="119:25"><name pos:start="119:23" pos:end="119:25">ssp</name></expr></argument>, <argument pos:start="119:28" pos:end="119:29"><expr pos:start="119:28" pos:end="119:29"><name pos:start="119:28" pos:end="119:29">sp</name></expr></argument>, <argument pos:start="119:32" pos:end="119:38"><expr pos:start="119:32" pos:end="119:38"><name pos:start="119:32" pos:end="119:38">sp_mask</name></expr></argument>, <argument pos:start="119:41" pos:end="119:48"><expr pos:start="119:41" pos:end="119:48"><name pos:start="119:41" pos:end="119:48">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="121:15" pos:end="127:13">else <block pos:start="121:20" pos:end="127:13">{<block_content pos:start="123:17" pos:end="125:50">

                <expr_stmt pos:start="123:17" pos:end="123:66"><expr pos:start="123:17" pos:end="123:65"><call pos:start="123:17" pos:end="123:65"><name pos:start="123:17" pos:end="123:21">PUSHW</name><argument_list pos:start="123:22" pos:end="123:65">(<argument pos:start="123:23" pos:end="123:25"><expr pos:start="123:23" pos:end="123:25"><name pos:start="123:23" pos:end="123:25">ssp</name></expr></argument>, <argument pos:start="123:28" pos:end="123:29"><expr pos:start="123:28" pos:end="123:29"><name pos:start="123:28" pos:end="123:29">sp</name></expr></argument>, <argument pos:start="123:32" pos:end="123:38"><expr pos:start="123:32" pos:end="123:38"><name pos:start="123:32" pos:end="123:38">sp_mask</name></expr></argument>, <argument pos:start="123:41" pos:end="123:64"><expr pos:start="123:41" pos:end="123:64"><name pos:start="123:41" pos:end="123:55"><name pos:start="123:41" pos:end="123:43">env</name><operator pos:start="123:44" pos:end="123:45">-&gt;</operator><name pos:start="123:46" pos:end="123:49">segs</name><index pos:start="123:50" pos:end="123:55">[<expr pos:start="123:51" pos:end="123:54"><name pos:start="123:51" pos:end="123:54">R_CS</name></expr>]</index></name><operator pos:start="123:56" pos:end="123:56">.</operator><name pos:start="123:57" pos:end="123:64">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:50"><expr pos:start="125:17" pos:end="125:49"><call pos:start="125:17" pos:end="125:49"><name pos:start="125:17" pos:end="125:21">PUSHW</name><argument_list pos:start="125:22" pos:end="125:49">(<argument pos:start="125:23" pos:end="125:25"><expr pos:start="125:23" pos:end="125:25"><name pos:start="125:23" pos:end="125:25">ssp</name></expr></argument>, <argument pos:start="125:28" pos:end="125:29"><expr pos:start="125:28" pos:end="125:29"><name pos:start="125:28" pos:end="125:29">sp</name></expr></argument>, <argument pos:start="125:32" pos:end="125:38"><expr pos:start="125:32" pos:end="125:38"><name pos:start="125:32" pos:end="125:38">sp_mask</name></expr></argument>, <argument pos:start="125:41" pos:end="125:48"><expr pos:start="125:41" pos:end="125:48"><name pos:start="125:41" pos:end="125:48">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="131:13" pos:end="131:42"><expr pos:start="131:13" pos:end="131:41"><name pos:start="131:13" pos:end="131:17">limit</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <call pos:start="131:21" pos:end="131:41"><name pos:start="131:21" pos:end="131:33">get_seg_limit</name><argument_list pos:start="131:34" pos:end="131:41">(<argument pos:start="131:35" pos:end="131:36"><expr pos:start="131:35" pos:end="131:36"><name pos:start="131:35" pos:end="131:36">e1</name></expr></argument>, <argument pos:start="131:39" pos:end="131:40"><expr pos:start="131:39" pos:end="131:40"><name pos:start="131:39" pos:end="131:40">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="135:65"><if pos:start="133:13" pos:end="135:65">if <condition pos:start="133:16" pos:end="133:32">(<expr pos:start="133:17" pos:end="133:31"><name pos:start="133:17" pos:end="133:23">new_eip</name> <operator pos:start="133:25" pos:end="133:25">&gt;</operator> <name pos:start="133:27" pos:end="133:31">limit</name></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:65"><block_content pos:start="135:17" pos:end="135:65">

                <expr_stmt pos:start="135:17" pos:end="135:65"><expr pos:start="135:17" pos:end="135:64"><call pos:start="135:17" pos:end="135:64"><name pos:start="135:17" pos:end="135:35">raise_exception_err</name><argument_list pos:start="135:36" pos:end="135:64">(<argument pos:start="135:37" pos:end="135:46"><expr pos:start="135:37" pos:end="135:46"><name pos:start="135:37" pos:end="135:46">EXCP0D_GPF</name></expr></argument>, <argument pos:start="135:49" pos:end="135:63"><expr pos:start="135:49" pos:end="135:63"><name pos:start="135:49" pos:end="135:54">new_cs</name> <operator pos:start="135:56" pos:end="135:56">&amp;</operator> <literal type="number" pos:start="135:58" pos:end="135:63">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="137:13" pos:end="137:50">/* from this point, not restartable */</comment>

            <expr_stmt pos:start="139:13" pos:end="139:33"><expr pos:start="139:13" pos:end="139:32"><call pos:start="139:13" pos:end="139:32"><name pos:start="139:13" pos:end="139:19">SET_ESP</name><argument_list pos:start="139:20" pos:end="139:32">(<argument pos:start="139:21" pos:end="139:22"><expr pos:start="139:21" pos:end="139:22"><name pos:start="139:21" pos:end="139:22">sp</name></expr></argument>, <argument pos:start="139:25" pos:end="139:31"><expr pos:start="139:25" pos:end="139:31"><name pos:start="139:25" pos:end="139:31">sp_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="143:68"><expr pos:start="141:13" pos:end="143:67"><call pos:start="141:13" pos:end="143:67"><name pos:start="141:13" pos:end="141:34">cpu_x86_load_seg_cache</name><argument_list pos:start="141:35" pos:end="143:67">(<argument pos:start="141:36" pos:end="141:38"><expr pos:start="141:36" pos:end="141:38"><name pos:start="141:36" pos:end="141:38">env</name></expr></argument>, <argument pos:start="141:41" pos:end="141:44"><expr pos:start="141:41" pos:end="141:44"><name pos:start="141:41" pos:end="141:44">R_CS</name></expr></argument>, <argument pos:start="141:47" pos:end="141:69"><expr pos:start="141:47" pos:end="141:69"><operator pos:start="141:47" pos:end="141:47">(</operator><name pos:start="141:48" pos:end="141:53">new_cs</name> <operator pos:start="141:55" pos:end="141:55">&amp;</operator> <literal type="number" pos:start="141:57" pos:end="141:62">0xfffc</literal><operator pos:start="141:63" pos:end="141:63">)</operator> <operator pos:start="141:65" pos:end="141:65">|</operator> <name pos:start="141:67" pos:end="141:69">cpl</name></expr></argument>,

                                   <argument pos:start="143:36" pos:end="143:55"><expr pos:start="143:36" pos:end="143:55"><call pos:start="143:36" pos:end="143:55"><name pos:start="143:36" pos:end="143:47">get_seg_base</name><argument_list pos:start="143:48" pos:end="143:55">(<argument pos:start="143:49" pos:end="143:50"><expr pos:start="143:49" pos:end="143:50"><name pos:start="143:49" pos:end="143:50">e1</name></expr></argument>, <argument pos:start="143:53" pos:end="143:54"><expr pos:start="143:53" pos:end="143:54"><name pos:start="143:53" pos:end="143:54">e2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="143:58" pos:end="143:62"><expr pos:start="143:58" pos:end="143:62"><name pos:start="143:58" pos:end="143:62">limit</name></expr></argument>, <argument pos:start="143:65" pos:end="143:66"><expr pos:start="143:65" pos:end="143:66"><name pos:start="143:65" pos:end="143:66">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:26"><expr pos:start="145:13" pos:end="145:25"><name pos:start="145:13" pos:end="145:15">EIP</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <name pos:start="145:19" pos:end="145:25">new_eip</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="149:7" pos:end="398:0">else <block pos:start="149:12" pos:end="398:0">{<block_content pos:start="153:9" pos:end="393:21">

        <comment type="block" pos:start="151:9" pos:end="151:29">/* check gate type */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:46"><expr pos:start="153:9" pos:end="153:45"><name pos:start="153:9" pos:end="153:12">type</name> <operator pos:start="153:14" pos:end="153:14">=</operator> <operator pos:start="153:16" pos:end="153:16">(</operator><name pos:start="153:17" pos:end="153:18">e2</name> <operator pos:start="153:20" pos:end="153:21">&gt;&gt;</operator> <name pos:start="153:23" pos:end="153:37">DESC_TYPE_SHIFT</name><operator pos:start="153:38" pos:end="153:38">)</operator> <operator pos:start="153:40" pos:end="153:40">&amp;</operator> <literal type="number" pos:start="153:42" pos:end="153:45">0x1f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:41"><expr pos:start="155:9" pos:end="155:40"><name pos:start="155:9" pos:end="155:11">dpl</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <operator pos:start="155:15" pos:end="155:15">(</operator><name pos:start="155:16" pos:end="155:17">e2</name> <operator pos:start="155:19" pos:end="155:20">&gt;&gt;</operator> <name pos:start="155:22" pos:end="155:35">DESC_DPL_SHIFT</name><operator pos:start="155:36" pos:end="155:36">)</operator> <operator pos:start="155:38" pos:end="155:38">&amp;</operator> <literal type="number" pos:start="155:40" pos:end="155:40">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:25"><expr pos:start="157:9" pos:end="157:24"><name pos:start="157:9" pos:end="157:11">rpl</name> <operator pos:start="157:13" pos:end="157:13">=</operator> <name pos:start="157:15" pos:end="157:20">new_cs</name> <operator pos:start="157:22" pos:end="157:22">&amp;</operator> <literal type="number" pos:start="157:24" pos:end="157:24">3</literal></expr>;</expr_stmt>

        <switch pos:start="159:9" pos:end="189:9">switch<condition pos:start="159:15" pos:end="159:20">(<expr pos:start="159:16" pos:end="159:19"><name pos:start="159:16" pos:end="159:19">type</name></expr>)</condition> <block pos:start="159:22" pos:end="189:9">{<block_content pos:start="161:9" pos:end="187:18">

        <case pos:start="161:9" pos:end="161:15">case <expr pos:start="161:14" pos:end="161:14"><literal type="number" pos:start="161:14" pos:end="161:14">1</literal></expr>:</case> <comment type="block" pos:start="161:17" pos:end="161:39">/* available 286 TSS */</comment>

        <case pos:start="163:9" pos:end="163:15">case <expr pos:start="163:14" pos:end="163:14"><literal type="number" pos:start="163:14" pos:end="163:14">9</literal></expr>:</case> <comment type="block" pos:start="163:17" pos:end="163:39">/* available 386 TSS */</comment>

        <case pos:start="165:9" pos:end="165:15">case <expr pos:start="165:14" pos:end="165:14"><literal type="number" pos:start="165:14" pos:end="165:14">5</literal></expr>:</case> <comment type="block" pos:start="165:17" pos:end="165:31">/* task gate */</comment>

            <if_stmt pos:start="167:13" pos:end="169:65"><if pos:start="167:13" pos:end="169:65">if <condition pos:start="167:16" pos:end="167:39">(<expr pos:start="167:17" pos:end="167:38"><name pos:start="167:17" pos:end="167:19">dpl</name> <operator pos:start="167:21" pos:end="167:21">&lt;</operator> <name pos:start="167:23" pos:end="167:25">cpl</name> <operator pos:start="167:27" pos:end="167:28">||</operator> <name pos:start="167:30" pos:end="167:32">dpl</name> <operator pos:start="167:34" pos:end="167:34">&lt;</operator> <name pos:start="167:36" pos:end="167:38">rpl</name></expr>)</condition><block type="pseudo" pos:start="169:17" pos:end="169:65"><block_content pos:start="169:17" pos:end="169:65">

                <expr_stmt pos:start="169:17" pos:end="169:65"><expr pos:start="169:17" pos:end="169:64"><call pos:start="169:17" pos:end="169:64"><name pos:start="169:17" pos:end="169:35">raise_exception_err</name><argument_list pos:start="169:36" pos:end="169:64">(<argument pos:start="169:37" pos:end="169:46"><expr pos:start="169:37" pos:end="169:46"><name pos:start="169:37" pos:end="169:46">EXCP0D_GPF</name></expr></argument>, <argument pos:start="169:49" pos:end="169:63"><expr pos:start="169:49" pos:end="169:63"><name pos:start="169:49" pos:end="169:54">new_cs</name> <operator pos:start="169:56" pos:end="169:56">&amp;</operator> <literal type="number" pos:start="169:58" pos:end="169:63">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:66"><expr pos:start="171:13" pos:end="171:65"><call pos:start="171:13" pos:end="171:65"><name pos:start="171:13" pos:end="171:22">switch_tss</name><argument_list pos:start="171:23" pos:end="171:65">(<argument pos:start="171:24" pos:end="171:29"><expr pos:start="171:24" pos:end="171:29"><name pos:start="171:24" pos:end="171:29">new_cs</name></expr></argument>, <argument pos:start="171:32" pos:end="171:33"><expr pos:start="171:32" pos:end="171:33"><name pos:start="171:32" pos:end="171:33">e1</name></expr></argument>, <argument pos:start="171:36" pos:end="171:37"><expr pos:start="171:36" pos:end="171:37"><name pos:start="171:36" pos:end="171:37">e2</name></expr></argument>, <argument pos:start="171:40" pos:end="171:54"><expr pos:start="171:40" pos:end="171:54"><name pos:start="171:40" pos:end="171:54">SWITCH_TSS_CALL</name></expr></argument>, <argument pos:start="171:57" pos:end="171:64"><expr pos:start="171:57" pos:end="171:64"><name pos:start="171:57" pos:end="171:64">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:33"><expr pos:start="173:13" pos:end="173:32"><name pos:start="173:13" pos:end="173:17">CC_OP</name> <operator pos:start="173:19" pos:end="173:19">=</operator> <name pos:start="173:21" pos:end="173:32">CC_OP_EFLAGS</name></expr>;</expr_stmt>

            <return pos:start="175:13" pos:end="175:19">return;</return>

        <case pos:start="177:9" pos:end="177:15">case <expr pos:start="177:14" pos:end="177:14"><literal type="number" pos:start="177:14" pos:end="177:14">4</literal></expr>:</case> <comment type="block" pos:start="177:17" pos:end="177:35">/* 286 call gate */</comment>

        <case pos:start="179:9" pos:end="179:16">case <expr pos:start="179:14" pos:end="179:15"><literal type="number" pos:start="179:14" pos:end="179:15">12</literal></expr>:</case> <comment type="block" pos:start="179:18" pos:end="179:36">/* 386 call gate */</comment>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        <default pos:start="183:9" pos:end="183:16">default:</default>

            <expr_stmt pos:start="185:13" pos:end="185:61"><expr pos:start="185:13" pos:end="185:60"><call pos:start="185:13" pos:end="185:60"><name pos:start="185:13" pos:end="185:31">raise_exception_err</name><argument_list pos:start="185:32" pos:end="185:60">(<argument pos:start="185:33" pos:end="185:42"><expr pos:start="185:33" pos:end="185:42"><name pos:start="185:33" pos:end="185:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="185:45" pos:end="185:59"><expr pos:start="185:45" pos:end="185:59"><name pos:start="185:45" pos:end="185:50">new_cs</name> <operator pos:start="185:52" pos:end="185:52">&amp;</operator> <literal type="number" pos:start="185:54" pos:end="185:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="191:9" pos:end="191:26"><expr pos:start="191:9" pos:end="191:25"><name pos:start="191:9" pos:end="191:13">shift</name> <operator pos:start="191:15" pos:end="191:15">=</operator> <name pos:start="191:17" pos:end="191:20">type</name> <operator pos:start="191:22" pos:end="191:23">&gt;&gt;</operator> <literal type="number" pos:start="191:25" pos:end="191:25">3</literal></expr>;</expr_stmt>



        <if_stmt pos:start="195:9" pos:end="197:61"><if pos:start="195:9" pos:end="197:61">if <condition pos:start="195:12" pos:end="195:35">(<expr pos:start="195:13" pos:end="195:34"><name pos:start="195:13" pos:end="195:15">dpl</name> <operator pos:start="195:17" pos:end="195:17">&lt;</operator> <name pos:start="195:19" pos:end="195:21">cpl</name> <operator pos:start="195:23" pos:end="195:24">||</operator> <name pos:start="195:26" pos:end="195:28">dpl</name> <operator pos:start="195:30" pos:end="195:30">&lt;</operator> <name pos:start="195:32" pos:end="195:34">rpl</name></expr>)</condition><block type="pseudo" pos:start="197:13" pos:end="197:61"><block_content pos:start="197:13" pos:end="197:61">

            <expr_stmt pos:start="197:13" pos:end="197:61"><expr pos:start="197:13" pos:end="197:60"><call pos:start="197:13" pos:end="197:60"><name pos:start="197:13" pos:end="197:31">raise_exception_err</name><argument_list pos:start="197:32" pos:end="197:60">(<argument pos:start="197:33" pos:end="197:42"><expr pos:start="197:33" pos:end="197:42"><name pos:start="197:33" pos:end="197:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="197:45" pos:end="197:59"><expr pos:start="197:45" pos:end="197:59"><name pos:start="197:45" pos:end="197:50">new_cs</name> <operator pos:start="197:52" pos:end="197:52">&amp;</operator> <literal type="number" pos:start="197:54" pos:end="197:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="199:9" pos:end="199:29">/* check valid bit */</comment>

        <if_stmt pos:start="201:9" pos:end="203:64"><if pos:start="201:9" pos:end="203:64">if <condition pos:start="201:12" pos:end="201:32">(<expr pos:start="201:13" pos:end="201:31"><operator pos:start="201:13" pos:end="201:13">!</operator><operator pos:start="201:14" pos:end="201:14">(</operator><name pos:start="201:15" pos:end="201:16">e2</name> <operator pos:start="201:18" pos:end="201:18">&amp;</operator> <name pos:start="201:20" pos:end="201:30">DESC_P_MASK</name><operator pos:start="201:31" pos:end="201:31">)</operator></expr>)</condition><block type="pseudo" pos:start="203:13" pos:end="203:64"><block_content pos:start="203:13" pos:end="203:64">

            <expr_stmt pos:start="203:13" pos:end="203:64"><expr pos:start="203:13" pos:end="203:63"><call pos:start="203:13" pos:end="203:63"><name pos:start="203:13" pos:end="203:31">raise_exception_err</name><argument_list pos:start="203:32" pos:end="203:63">(<argument pos:start="203:33" pos:end="203:44"><expr pos:start="203:33" pos:end="203:44"><name pos:start="203:33" pos:end="203:44">EXCP0B_NOSEG</name></expr></argument>,  <argument pos:start="203:48" pos:end="203:62"><expr pos:start="203:48" pos:end="203:62"><name pos:start="203:48" pos:end="203:53">new_cs</name> <operator pos:start="203:55" pos:end="203:55">&amp;</operator> <literal type="number" pos:start="203:57" pos:end="203:62">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:28"><expr pos:start="205:9" pos:end="205:27"><name pos:start="205:9" pos:end="205:16">selector</name> <operator pos:start="205:18" pos:end="205:18">=</operator> <name pos:start="205:20" pos:end="205:21">e1</name> <operator pos:start="205:23" pos:end="205:24">&gt;&gt;</operator> <literal type="number" pos:start="205:26" pos:end="205:27">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:55"><expr pos:start="207:9" pos:end="207:54"><name pos:start="207:9" pos:end="207:14">offset</name> <operator pos:start="207:16" pos:end="207:16">=</operator> <operator pos:start="207:18" pos:end="207:18">(</operator><name pos:start="207:19" pos:end="207:20">e2</name> <operator pos:start="207:22" pos:end="207:22">&amp;</operator> <literal type="number" pos:start="207:24" pos:end="207:33">0xffff0000</literal><operator pos:start="207:34" pos:end="207:34">)</operator> <operator pos:start="207:36" pos:end="207:36">|</operator> <operator pos:start="207:38" pos:end="207:38">(</operator><name pos:start="207:39" pos:end="207:40">e1</name> <operator pos:start="207:42" pos:end="207:42">&amp;</operator> <literal type="number" pos:start="207:44" pos:end="207:53">0x0000ffff</literal><operator pos:start="207:54" pos:end="207:54">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:32"><expr pos:start="209:9" pos:end="209:31"><name pos:start="209:9" pos:end="209:19">param_count</name> <operator pos:start="209:21" pos:end="209:21">=</operator> <name pos:start="209:23" pos:end="209:24">e2</name> <operator pos:start="209:26" pos:end="209:26">&amp;</operator> <literal type="number" pos:start="209:28" pos:end="209:31">0x1f</literal></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="213:47"><if pos:start="211:9" pos:end="213:47">if <condition pos:start="211:12" pos:end="211:37">(<expr pos:start="211:13" pos:end="211:36"><operator pos:start="211:13" pos:end="211:13">(</operator><name pos:start="211:14" pos:end="211:21">selector</name> <operator pos:start="211:23" pos:end="211:23">&amp;</operator> <literal type="number" pos:start="211:25" pos:end="211:30">0xfffc</literal><operator pos:start="211:31" pos:end="211:31">)</operator> <operator pos:start="211:33" pos:end="211:34">==</operator> <literal type="number" pos:start="211:36" pos:end="211:36">0</literal></expr>)</condition><block type="pseudo" pos:start="213:13" pos:end="213:47"><block_content pos:start="213:13" pos:end="213:47">

            <expr_stmt pos:start="213:13" pos:end="213:47"><expr pos:start="213:13" pos:end="213:46"><call pos:start="213:13" pos:end="213:46"><name pos:start="213:13" pos:end="213:31">raise_exception_err</name><argument_list pos:start="213:32" pos:end="213:46">(<argument pos:start="213:33" pos:end="213:42"><expr pos:start="213:33" pos:end="213:42"><name pos:start="213:33" pos:end="213:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="213:45" pos:end="213:45"><expr pos:start="213:45" pos:end="213:45"><literal type="number" pos:start="213:45" pos:end="213:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="217:9" pos:end="219:63"><if pos:start="217:9" pos:end="219:63">if <condition pos:start="217:12" pos:end="217:50">(<expr pos:start="217:13" pos:end="217:49"><call pos:start="217:13" pos:end="217:44"><name pos:start="217:13" pos:end="217:24">load_segment</name><argument_list pos:start="217:25" pos:end="217:44">(<argument pos:start="217:26" pos:end="217:28"><expr pos:start="217:26" pos:end="217:28"><operator pos:start="217:26" pos:end="217:26">&amp;</operator><name pos:start="217:27" pos:end="217:28">e1</name></expr></argument>, <argument pos:start="217:31" pos:end="217:33"><expr pos:start="217:31" pos:end="217:33"><operator pos:start="217:31" pos:end="217:31">&amp;</operator><name pos:start="217:32" pos:end="217:33">e2</name></expr></argument>, <argument pos:start="217:36" pos:end="217:43"><expr pos:start="217:36" pos:end="217:43"><name pos:start="217:36" pos:end="217:43">selector</name></expr></argument>)</argument_list></call> <operator pos:start="217:46" pos:end="217:47">!=</operator> <literal type="number" pos:start="217:49" pos:end="217:49">0</literal></expr>)</condition><block type="pseudo" pos:start="219:13" pos:end="219:63"><block_content pos:start="219:13" pos:end="219:63">

            <expr_stmt pos:start="219:13" pos:end="219:63"><expr pos:start="219:13" pos:end="219:62"><call pos:start="219:13" pos:end="219:62"><name pos:start="219:13" pos:end="219:31">raise_exception_err</name><argument_list pos:start="219:32" pos:end="219:62">(<argument pos:start="219:33" pos:end="219:42"><expr pos:start="219:33" pos:end="219:42"><name pos:start="219:33" pos:end="219:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="219:45" pos:end="219:61"><expr pos:start="219:45" pos:end="219:61"><name pos:start="219:45" pos:end="219:52">selector</name> <operator pos:start="219:54" pos:end="219:54">&amp;</operator> <literal type="number" pos:start="219:56" pos:end="219:61">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="221:9" pos:end="223:63"><if pos:start="221:9" pos:end="223:63">if <condition pos:start="221:12" pos:end="221:58">(<expr pos:start="221:13" pos:end="221:57"><operator pos:start="221:13" pos:end="221:13">!</operator><operator pos:start="221:14" pos:end="221:14">(</operator><name pos:start="221:15" pos:end="221:16">e2</name> <operator pos:start="221:18" pos:end="221:18">&amp;</operator> <name pos:start="221:20" pos:end="221:30">DESC_S_MASK</name><operator pos:start="221:31" pos:end="221:31">)</operator> <operator pos:start="221:33" pos:end="221:34">||</operator> <operator pos:start="221:36" pos:end="221:36">!</operator><operator pos:start="221:37" pos:end="221:37">(</operator><name pos:start="221:38" pos:end="221:39">e2</name> <operator pos:start="221:41" pos:end="221:41">&amp;</operator> <operator pos:start="221:43" pos:end="221:43">(</operator><name pos:start="221:44" pos:end="221:55">DESC_CS_MASK</name><operator pos:start="221:56" pos:end="221:56">)</operator><operator pos:start="221:57" pos:end="221:57">)</operator></expr>)</condition><block type="pseudo" pos:start="223:13" pos:end="223:63"><block_content pos:start="223:13" pos:end="223:63">

            <expr_stmt pos:start="223:13" pos:end="223:63"><expr pos:start="223:13" pos:end="223:62"><call pos:start="223:13" pos:end="223:62"><name pos:start="223:13" pos:end="223:31">raise_exception_err</name><argument_list pos:start="223:32" pos:end="223:62">(<argument pos:start="223:33" pos:end="223:42"><expr pos:start="223:33" pos:end="223:42"><name pos:start="223:33" pos:end="223:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="223:45" pos:end="223:61"><expr pos:start="223:45" pos:end="223:61"><name pos:start="223:45" pos:end="223:52">selector</name> <operator pos:start="223:54" pos:end="223:54">&amp;</operator> <literal type="number" pos:start="223:56" pos:end="223:61">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:41"><expr pos:start="225:9" pos:end="225:40"><name pos:start="225:9" pos:end="225:11">dpl</name> <operator pos:start="225:13" pos:end="225:13">=</operator> <operator pos:start="225:15" pos:end="225:15">(</operator><name pos:start="225:16" pos:end="225:17">e2</name> <operator pos:start="225:19" pos:end="225:20">&gt;&gt;</operator> <name pos:start="225:22" pos:end="225:35">DESC_DPL_SHIFT</name><operator pos:start="225:36" pos:end="225:36">)</operator> <operator pos:start="225:38" pos:end="225:38">&amp;</operator> <literal type="number" pos:start="225:40" pos:end="225:40">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="227:9" pos:end="229:63"><if pos:start="227:9" pos:end="229:63">if <condition pos:start="227:12" pos:end="227:22">(<expr pos:start="227:13" pos:end="227:21"><name pos:start="227:13" pos:end="227:15">dpl</name> <operator pos:start="227:17" pos:end="227:17">&gt;</operator> <name pos:start="227:19" pos:end="227:21">cpl</name></expr>)</condition><block type="pseudo" pos:start="229:13" pos:end="229:63"><block_content pos:start="229:13" pos:end="229:63">

            <expr_stmt pos:start="229:13" pos:end="229:63"><expr pos:start="229:13" pos:end="229:62"><call pos:start="229:13" pos:end="229:62"><name pos:start="229:13" pos:end="229:31">raise_exception_err</name><argument_list pos:start="229:32" pos:end="229:62">(<argument pos:start="229:33" pos:end="229:42"><expr pos:start="229:33" pos:end="229:42"><name pos:start="229:33" pos:end="229:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="229:45" pos:end="229:61"><expr pos:start="229:45" pos:end="229:61"><name pos:start="229:45" pos:end="229:52">selector</name> <operator pos:start="229:54" pos:end="229:54">&amp;</operator> <literal type="number" pos:start="229:56" pos:end="229:61">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="231:9" pos:end="233:65"><if pos:start="231:9" pos:end="233:65">if <condition pos:start="231:12" pos:end="231:32">(<expr pos:start="231:13" pos:end="231:31"><operator pos:start="231:13" pos:end="231:13">!</operator><operator pos:start="231:14" pos:end="231:14">(</operator><name pos:start="231:15" pos:end="231:16">e2</name> <operator pos:start="231:18" pos:end="231:18">&amp;</operator> <name pos:start="231:20" pos:end="231:30">DESC_P_MASK</name><operator pos:start="231:31" pos:end="231:31">)</operator></expr>)</condition><block type="pseudo" pos:start="233:13" pos:end="233:65"><block_content pos:start="233:13" pos:end="233:65">

            <expr_stmt pos:start="233:13" pos:end="233:65"><expr pos:start="233:13" pos:end="233:64"><call pos:start="233:13" pos:end="233:64"><name pos:start="233:13" pos:end="233:31">raise_exception_err</name><argument_list pos:start="233:32" pos:end="233:64">(<argument pos:start="233:33" pos:end="233:44"><expr pos:start="233:33" pos:end="233:44"><name pos:start="233:33" pos:end="233:44">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="233:47" pos:end="233:63"><expr pos:start="233:47" pos:end="233:63"><name pos:start="233:47" pos:end="233:54">selector</name> <operator pos:start="233:56" pos:end="233:56">&amp;</operator> <literal type="number" pos:start="233:58" pos:end="233:63">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="237:9" pos:end="339:9"><if pos:start="237:9" pos:end="325:9">if <condition pos:start="237:12" pos:end="237:45">(<expr pos:start="237:13" pos:end="237:44"><operator pos:start="237:13" pos:end="237:13">!</operator><operator pos:start="237:14" pos:end="237:14">(</operator><name pos:start="237:15" pos:end="237:16">e2</name> <operator pos:start="237:18" pos:end="237:18">&amp;</operator> <name pos:start="237:20" pos:end="237:30">DESC_C_MASK</name><operator pos:start="237:31" pos:end="237:31">)</operator> <operator pos:start="237:33" pos:end="237:34">&amp;&amp;</operator> <name pos:start="237:36" pos:end="237:38">dpl</name> <operator pos:start="237:40" pos:end="237:40">&lt;</operator> <name pos:start="237:42" pos:end="237:44">cpl</name></expr>)</condition> <block pos:start="237:47" pos:end="325:9">{<block_content pos:start="241:13" pos:end="323:26">

            <comment type="block" pos:start="239:13" pos:end="239:36">/* to inner privilege */</comment>

            <expr_stmt pos:start="241:13" pos:end="241:47"><expr pos:start="241:13" pos:end="241:46"><call pos:start="241:13" pos:end="241:46"><name pos:start="241:13" pos:end="241:31">get_ss_esp_from_tss</name><argument_list pos:start="241:32" pos:end="241:46">(<argument pos:start="241:33" pos:end="241:35"><expr pos:start="241:33" pos:end="241:35"><operator pos:start="241:33" pos:end="241:33">&amp;</operator><name pos:start="241:34" pos:end="241:35">ss</name></expr></argument>, <argument pos:start="241:38" pos:end="241:40"><expr pos:start="241:38" pos:end="241:40"><operator pos:start="241:38" pos:end="241:38">&amp;</operator><name pos:start="241:39" pos:end="241:40">sp</name></expr></argument>, <argument pos:start="241:43" pos:end="241:45"><expr pos:start="241:43" pos:end="241:45"><name pos:start="241:43" pos:end="241:45">dpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="245:50"><expr pos:start="243:13" pos:end="245:49"><call pos:start="243:13" pos:end="245:49"><name pos:start="243:13" pos:end="243:21">LOG_PCALL</name><argument_list pos:start="243:22" pos:end="245:49">(<argument pos:start="243:23" pos:end="243:83"><expr pos:start="243:23" pos:end="243:83"><literal type="string" pos:start="243:23" pos:end="243:64">"new ss:esp=%04x:%08x param_count=%d ESP="</literal> <name pos:start="243:66" pos:end="243:78">TARGET_FMT_lx</name> <literal type="string" pos:start="243:80" pos:end="243:83">"\n"</literal></expr></argument>,

                        <argument pos:start="245:25" pos:end="245:26"><expr pos:start="245:25" pos:end="245:26"><name pos:start="245:25" pos:end="245:26">ss</name></expr></argument>, <argument pos:start="245:29" pos:end="245:30"><expr pos:start="245:29" pos:end="245:30"><name pos:start="245:29" pos:end="245:30">sp</name></expr></argument>, <argument pos:start="245:33" pos:end="245:43"><expr pos:start="245:33" pos:end="245:43"><name pos:start="245:33" pos:end="245:43">param_count</name></expr></argument>, <argument pos:start="245:46" pos:end="245:48"><expr pos:start="245:46" pos:end="245:48"><name pos:start="245:46" pos:end="245:48">ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="247:13" pos:end="249:61"><if pos:start="247:13" pos:end="249:61">if <condition pos:start="247:16" pos:end="247:35">(<expr pos:start="247:17" pos:end="247:34"><operator pos:start="247:17" pos:end="247:17">(</operator><name pos:start="247:18" pos:end="247:19">ss</name> <operator pos:start="247:21" pos:end="247:21">&amp;</operator> <literal type="number" pos:start="247:23" pos:end="247:28">0xfffc</literal><operator pos:start="247:29" pos:end="247:29">)</operator> <operator pos:start="247:31" pos:end="247:32">==</operator> <literal type="number" pos:start="247:34" pos:end="247:34">0</literal></expr>)</condition><block type="pseudo" pos:start="249:17" pos:end="249:61"><block_content pos:start="249:17" pos:end="249:61">

                <expr_stmt pos:start="249:17" pos:end="249:61"><expr pos:start="249:17" pos:end="249:60"><call pos:start="249:17" pos:end="249:60"><name pos:start="249:17" pos:end="249:35">raise_exception_err</name><argument_list pos:start="249:36" pos:end="249:60">(<argument pos:start="249:37" pos:end="249:46"><expr pos:start="249:37" pos:end="249:46"><name pos:start="249:37" pos:end="249:46">EXCP0A_TSS</name></expr></argument>, <argument pos:start="249:49" pos:end="249:59"><expr pos:start="249:49" pos:end="249:59"><name pos:start="249:49" pos:end="249:50">ss</name> <operator pos:start="249:52" pos:end="249:52">&amp;</operator> <literal type="number" pos:start="249:54" pos:end="249:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="251:13" pos:end="253:61"><if pos:start="251:13" pos:end="253:61">if <condition pos:start="251:16" pos:end="251:32">(<expr pos:start="251:17" pos:end="251:31"><operator pos:start="251:17" pos:end="251:17">(</operator><name pos:start="251:18" pos:end="251:19">ss</name> <operator pos:start="251:21" pos:end="251:21">&amp;</operator> <literal type="number" pos:start="251:23" pos:end="251:23">3</literal><operator pos:start="251:24" pos:end="251:24">)</operator> <operator pos:start="251:26" pos:end="251:27">!=</operator> <name pos:start="251:29" pos:end="251:31">dpl</name></expr>)</condition><block type="pseudo" pos:start="253:17" pos:end="253:61"><block_content pos:start="253:17" pos:end="253:61">

                <expr_stmt pos:start="253:17" pos:end="253:61"><expr pos:start="253:17" pos:end="253:60"><call pos:start="253:17" pos:end="253:60"><name pos:start="253:17" pos:end="253:35">raise_exception_err</name><argument_list pos:start="253:36" pos:end="253:60">(<argument pos:start="253:37" pos:end="253:46"><expr pos:start="253:37" pos:end="253:46"><name pos:start="253:37" pos:end="253:46">EXCP0A_TSS</name></expr></argument>, <argument pos:start="253:49" pos:end="253:59"><expr pos:start="253:49" pos:end="253:59"><name pos:start="253:49" pos:end="253:50">ss</name> <operator pos:start="253:52" pos:end="253:52">&amp;</operator> <literal type="number" pos:start="253:54" pos:end="253:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="255:13" pos:end="257:61"><if pos:start="255:13" pos:end="257:61">if <condition pos:start="255:16" pos:end="255:54">(<expr pos:start="255:17" pos:end="255:53"><call pos:start="255:17" pos:end="255:48"><name pos:start="255:17" pos:end="255:28">load_segment</name><argument_list pos:start="255:29" pos:end="255:48">(<argument pos:start="255:30" pos:end="255:35"><expr pos:start="255:30" pos:end="255:35"><operator pos:start="255:30" pos:end="255:30">&amp;</operator><name pos:start="255:31" pos:end="255:35">ss_e1</name></expr></argument>, <argument pos:start="255:38" pos:end="255:43"><expr pos:start="255:38" pos:end="255:43"><operator pos:start="255:38" pos:end="255:38">&amp;</operator><name pos:start="255:39" pos:end="255:43">ss_e2</name></expr></argument>, <argument pos:start="255:46" pos:end="255:47"><expr pos:start="255:46" pos:end="255:47"><name pos:start="255:46" pos:end="255:47">ss</name></expr></argument>)</argument_list></call> <operator pos:start="255:50" pos:end="255:51">!=</operator> <literal type="number" pos:start="255:53" pos:end="255:53">0</literal></expr>)</condition><block type="pseudo" pos:start="257:17" pos:end="257:61"><block_content pos:start="257:17" pos:end="257:61">

                <expr_stmt pos:start="257:17" pos:end="257:61"><expr pos:start="257:17" pos:end="257:60"><call pos:start="257:17" pos:end="257:60"><name pos:start="257:17" pos:end="257:35">raise_exception_err</name><argument_list pos:start="257:36" pos:end="257:60">(<argument pos:start="257:37" pos:end="257:46"><expr pos:start="257:37" pos:end="257:46"><name pos:start="257:37" pos:end="257:46">EXCP0A_TSS</name></expr></argument>, <argument pos:start="257:49" pos:end="257:59"><expr pos:start="257:49" pos:end="257:59"><name pos:start="257:49" pos:end="257:50">ss</name> <operator pos:start="257:52" pos:end="257:52">&amp;</operator> <literal type="number" pos:start="257:54" pos:end="257:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:51"><expr pos:start="259:13" pos:end="259:50"><name pos:start="259:13" pos:end="259:18">ss_dpl</name> <operator pos:start="259:20" pos:end="259:20">=</operator> <operator pos:start="259:22" pos:end="259:22">(</operator><name pos:start="259:23" pos:end="259:27">ss_e2</name> <operator pos:start="259:29" pos:end="259:30">&gt;&gt;</operator> <name pos:start="259:32" pos:end="259:45">DESC_DPL_SHIFT</name><operator pos:start="259:46" pos:end="259:46">)</operator> <operator pos:start="259:48" pos:end="259:48">&amp;</operator> <literal type="number" pos:start="259:50" pos:end="259:50">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="261:13" pos:end="263:61"><if pos:start="261:13" pos:end="263:61">if <condition pos:start="261:16" pos:end="261:30">(<expr pos:start="261:17" pos:end="261:29"><name pos:start="261:17" pos:end="261:22">ss_dpl</name> <operator pos:start="261:24" pos:end="261:25">!=</operator> <name pos:start="261:27" pos:end="261:29">dpl</name></expr>)</condition><block type="pseudo" pos:start="263:17" pos:end="263:61"><block_content pos:start="263:17" pos:end="263:61">

                <expr_stmt pos:start="263:17" pos:end="263:61"><expr pos:start="263:17" pos:end="263:60"><call pos:start="263:17" pos:end="263:60"><name pos:start="263:17" pos:end="263:35">raise_exception_err</name><argument_list pos:start="263:36" pos:end="263:60">(<argument pos:start="263:37" pos:end="263:46"><expr pos:start="263:37" pos:end="263:46"><name pos:start="263:37" pos:end="263:46">EXCP0A_TSS</name></expr></argument>, <argument pos:start="263:49" pos:end="263:59"><expr pos:start="263:49" pos:end="263:59"><name pos:start="263:49" pos:end="263:50">ss</name> <operator pos:start="263:52" pos:end="263:52">&amp;</operator> <literal type="number" pos:start="263:54" pos:end="263:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="265:13" pos:end="271:61"><if pos:start="265:13" pos:end="271:61">if <condition pos:start="265:16" pos:end="269:39">(<expr pos:start="265:17" pos:end="269:38"><operator pos:start="265:17" pos:end="265:17">!</operator><operator pos:start="265:18" pos:end="265:18">(</operator><name pos:start="265:19" pos:end="265:23">ss_e2</name> <operator pos:start="265:25" pos:end="265:25">&amp;</operator> <name pos:start="265:27" pos:end="265:37">DESC_S_MASK</name><operator pos:start="265:38" pos:end="265:38">)</operator> <operator pos:start="265:40" pos:end="265:41">||</operator>

                <operator pos:start="267:17" pos:end="267:17">(</operator><name pos:start="267:18" pos:end="267:22">ss_e2</name> <operator pos:start="267:24" pos:end="267:24">&amp;</operator> <name pos:start="267:26" pos:end="267:37">DESC_CS_MASK</name><operator pos:start="267:38" pos:end="267:38">)</operator> <operator pos:start="267:40" pos:end="267:41">||</operator>

                <operator pos:start="269:17" pos:end="269:17">!</operator><operator pos:start="269:18" pos:end="269:18">(</operator><name pos:start="269:19" pos:end="269:23">ss_e2</name> <operator pos:start="269:25" pos:end="269:25">&amp;</operator> <name pos:start="269:27" pos:end="269:37">DESC_W_MASK</name><operator pos:start="269:38" pos:end="269:38">)</operator></expr>)</condition><block type="pseudo" pos:start="271:17" pos:end="271:61"><block_content pos:start="271:17" pos:end="271:61">

                <expr_stmt pos:start="271:17" pos:end="271:61"><expr pos:start="271:17" pos:end="271:60"><call pos:start="271:17" pos:end="271:60"><name pos:start="271:17" pos:end="271:35">raise_exception_err</name><argument_list pos:start="271:36" pos:end="271:60">(<argument pos:start="271:37" pos:end="271:46"><expr pos:start="271:37" pos:end="271:46"><name pos:start="271:37" pos:end="271:46">EXCP0A_TSS</name></expr></argument>, <argument pos:start="271:49" pos:end="271:59"><expr pos:start="271:49" pos:end="271:59"><name pos:start="271:49" pos:end="271:50">ss</name> <operator pos:start="271:52" pos:end="271:52">&amp;</operator> <literal type="number" pos:start="271:54" pos:end="271:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="273:13" pos:end="275:61"><if pos:start="273:13" pos:end="275:61">if <condition pos:start="273:16" pos:end="273:39">(<expr pos:start="273:17" pos:end="273:38"><operator pos:start="273:17" pos:end="273:17">!</operator><operator pos:start="273:18" pos:end="273:18">(</operator><name pos:start="273:19" pos:end="273:23">ss_e2</name> <operator pos:start="273:25" pos:end="273:25">&amp;</operator> <name pos:start="273:27" pos:end="273:37">DESC_P_MASK</name><operator pos:start="273:38" pos:end="273:38">)</operator></expr>)</condition><block type="pseudo" pos:start="275:17" pos:end="275:61"><block_content pos:start="275:17" pos:end="275:61">

                <expr_stmt pos:start="275:17" pos:end="275:61"><expr pos:start="275:17" pos:end="275:60"><call pos:start="275:17" pos:end="275:60"><name pos:start="275:17" pos:end="275:35">raise_exception_err</name><argument_list pos:start="275:36" pos:end="275:60">(<argument pos:start="275:37" pos:end="275:46"><expr pos:start="275:37" pos:end="275:46"><name pos:start="275:37" pos:end="275:46">EXCP0A_TSS</name></expr></argument>, <argument pos:start="275:49" pos:end="275:59"><expr pos:start="275:49" pos:end="275:59"><name pos:start="275:49" pos:end="275:50">ss</name> <operator pos:start="275:52" pos:end="275:52">&amp;</operator> <literal type="number" pos:start="275:54" pos:end="275:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="line" pos:start="279:13" pos:end="279:71">//            push_size = ((param_count * 2) + 8) &lt;&lt; shift;</comment>



            <expr_stmt pos:start="283:13" pos:end="283:61"><expr pos:start="283:13" pos:end="283:60"><name pos:start="283:13" pos:end="283:23">old_sp_mask</name> <operator pos:start="283:25" pos:end="283:25">=</operator> <call pos:start="283:27" pos:end="283:60"><name pos:start="283:27" pos:end="283:37">get_sp_mask</name><argument_list pos:start="283:38" pos:end="283:60">(<argument pos:start="283:39" pos:end="283:59"><expr pos:start="283:39" pos:end="283:59"><name pos:start="283:39" pos:end="283:53"><name pos:start="283:39" pos:end="283:41">env</name><operator pos:start="283:42" pos:end="283:43">-&gt;</operator><name pos:start="283:44" pos:end="283:47">segs</name><index pos:start="283:48" pos:end="283:53">[<expr pos:start="283:49" pos:end="283:52"><name pos:start="283:49" pos:end="283:52">R_SS</name></expr>]</index></name><operator pos:start="283:54" pos:end="283:54">.</operator><name pos:start="283:55" pos:end="283:59">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:43"><expr pos:start="285:13" pos:end="285:42"><name pos:start="285:13" pos:end="285:19">old_ssp</name> <operator pos:start="285:21" pos:end="285:21">=</operator> <name pos:start="285:23" pos:end="285:37"><name pos:start="285:23" pos:end="285:25">env</name><operator pos:start="285:26" pos:end="285:27">-&gt;</operator><name pos:start="285:28" pos:end="285:31">segs</name><index pos:start="285:32" pos:end="285:37">[<expr pos:start="285:33" pos:end="285:36"><name pos:start="285:33" pos:end="285:36">R_SS</name></expr>]</index></name><operator pos:start="285:38" pos:end="285:38">.</operator><name pos:start="285:39" pos:end="285:42">base</name></expr>;</expr_stmt>



            <expr_stmt pos:start="289:13" pos:end="289:41"><expr pos:start="289:13" pos:end="289:40"><name pos:start="289:13" pos:end="289:19">sp_mask</name> <operator pos:start="289:21" pos:end="289:21">=</operator> <call pos:start="289:23" pos:end="289:40"><name pos:start="289:23" pos:end="289:33">get_sp_mask</name><argument_list pos:start="289:34" pos:end="289:40">(<argument pos:start="289:35" pos:end="289:39"><expr pos:start="289:35" pos:end="289:39"><name pos:start="289:35" pos:end="289:39">ss_e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:45"><expr pos:start="291:13" pos:end="291:44"><name pos:start="291:13" pos:end="291:15">ssp</name> <operator pos:start="291:17" pos:end="291:17">=</operator> <call pos:start="291:19" pos:end="291:44"><name pos:start="291:19" pos:end="291:30">get_seg_base</name><argument_list pos:start="291:31" pos:end="291:44">(<argument pos:start="291:32" pos:end="291:36"><expr pos:start="291:32" pos:end="291:36"><name pos:start="291:32" pos:end="291:36">ss_e1</name></expr></argument>, <argument pos:start="291:39" pos:end="291:43"><expr pos:start="291:39" pos:end="291:43"><name pos:start="291:39" pos:end="291:43">ss_e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="293:13" pos:end="321:13"><if pos:start="293:13" pos:end="307:13">if <condition pos:start="293:16" pos:end="293:22">(<expr pos:start="293:17" pos:end="293:21"><name pos:start="293:17" pos:end="293:21">shift</name></expr>)</condition> <block pos:start="293:24" pos:end="307:13">{<block_content pos:start="295:17" pos:end="305:17">

                <expr_stmt pos:start="295:17" pos:end="295:66"><expr pos:start="295:17" pos:end="295:65"><call pos:start="295:17" pos:end="295:65"><name pos:start="295:17" pos:end="295:21">PUSHL</name><argument_list pos:start="295:22" pos:end="295:65">(<argument pos:start="295:23" pos:end="295:25"><expr pos:start="295:23" pos:end="295:25"><name pos:start="295:23" pos:end="295:25">ssp</name></expr></argument>, <argument pos:start="295:28" pos:end="295:29"><expr pos:start="295:28" pos:end="295:29"><name pos:start="295:28" pos:end="295:29">sp</name></expr></argument>, <argument pos:start="295:32" pos:end="295:38"><expr pos:start="295:32" pos:end="295:38"><name pos:start="295:32" pos:end="295:38">sp_mask</name></expr></argument>, <argument pos:start="295:41" pos:end="295:64"><expr pos:start="295:41" pos:end="295:64"><name pos:start="295:41" pos:end="295:55"><name pos:start="295:41" pos:end="295:43">env</name><operator pos:start="295:44" pos:end="295:45">-&gt;</operator><name pos:start="295:46" pos:end="295:49">segs</name><index pos:start="295:50" pos:end="295:55">[<expr pos:start="295:51" pos:end="295:54"><name pos:start="295:51" pos:end="295:54">R_SS</name></expr>]</index></name><operator pos:start="295:56" pos:end="295:56">.</operator><name pos:start="295:57" pos:end="295:64">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="297:17" pos:end="297:45"><expr pos:start="297:17" pos:end="297:44"><call pos:start="297:17" pos:end="297:44"><name pos:start="297:17" pos:end="297:21">PUSHL</name><argument_list pos:start="297:22" pos:end="297:44">(<argument pos:start="297:23" pos:end="297:25"><expr pos:start="297:23" pos:end="297:25"><name pos:start="297:23" pos:end="297:25">ssp</name></expr></argument>, <argument pos:start="297:28" pos:end="297:29"><expr pos:start="297:28" pos:end="297:29"><name pos:start="297:28" pos:end="297:29">sp</name></expr></argument>, <argument pos:start="297:32" pos:end="297:38"><expr pos:start="297:32" pos:end="297:38"><name pos:start="297:32" pos:end="297:38">sp_mask</name></expr></argument>, <argument pos:start="297:41" pos:end="297:43"><expr pos:start="297:41" pos:end="297:43"><name pos:start="297:41" pos:end="297:43">ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="299:17" pos:end="305:17">for<control pos:start="299:20" pos:end="299:53">(<init pos:start="299:21" pos:end="299:40"><expr pos:start="299:21" pos:end="299:39"><name pos:start="299:21" pos:end="299:21">i</name> <operator pos:start="299:23" pos:end="299:23">=</operator> <name pos:start="299:25" pos:end="299:35">param_count</name> <operator pos:start="299:37" pos:end="299:37">-</operator> <literal type="number" pos:start="299:39" pos:end="299:39">1</literal></expr>;</init> <condition pos:start="299:42" pos:end="299:48"><expr pos:start="299:42" pos:end="299:47"><name pos:start="299:42" pos:end="299:42">i</name> <operator pos:start="299:44" pos:end="299:45">&gt;=</operator> <literal type="number" pos:start="299:47" pos:end="299:47">0</literal></expr>;</condition> <incr pos:start="299:50" pos:end="299:52"><expr pos:start="299:50" pos:end="299:52"><name pos:start="299:50" pos:end="299:50">i</name><operator pos:start="299:51" pos:end="299:52">--</operator></expr></incr>)</control> <block pos:start="299:55" pos:end="305:17">{<block_content pos:start="301:21" pos:end="303:49">

                    <expr_stmt pos:start="301:21" pos:end="301:78"><expr pos:start="301:21" pos:end="301:77"><name pos:start="301:21" pos:end="301:23">val</name> <operator pos:start="301:25" pos:end="301:25">=</operator> <call pos:start="301:27" pos:end="301:77"><name pos:start="301:27" pos:end="301:36">ldl_kernel</name><argument_list pos:start="301:37" pos:end="301:77">(<argument pos:start="301:38" pos:end="301:76"><expr pos:start="301:38" pos:end="301:76"><name pos:start="301:38" pos:end="301:44">old_ssp</name> <operator pos:start="301:46" pos:end="301:46">+</operator> <operator pos:start="301:48" pos:end="301:48">(</operator><operator pos:start="301:49" pos:end="301:49">(</operator><name pos:start="301:50" pos:end="301:52">ESP</name> <operator pos:start="301:54" pos:end="301:54">+</operator> <name pos:start="301:56" pos:end="301:56">i</name> <operator pos:start="301:58" pos:end="301:58">*</operator> <literal type="number" pos:start="301:60" pos:end="301:60">4</literal><operator pos:start="301:61" pos:end="301:61">)</operator> <operator pos:start="301:63" pos:end="301:63">&amp;</operator> <name pos:start="301:65" pos:end="301:75">old_sp_mask</name><operator pos:start="301:76" pos:end="301:76">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="303:21" pos:end="303:49"><expr pos:start="303:21" pos:end="303:48"><call pos:start="303:21" pos:end="303:48"><name pos:start="303:21" pos:end="303:25">PUSHL</name><argument_list pos:start="303:26" pos:end="303:48">(<argument pos:start="303:27" pos:end="303:29"><expr pos:start="303:27" pos:end="303:29"><name pos:start="303:27" pos:end="303:29">ssp</name></expr></argument>, <argument pos:start="303:32" pos:end="303:33"><expr pos:start="303:32" pos:end="303:33"><name pos:start="303:32" pos:end="303:33">sp</name></expr></argument>, <argument pos:start="303:36" pos:end="303:42"><expr pos:start="303:36" pos:end="303:42"><name pos:start="303:36" pos:end="303:42">sp_mask</name></expr></argument>, <argument pos:start="303:45" pos:end="303:47"><expr pos:start="303:45" pos:end="303:47"><name pos:start="303:45" pos:end="303:47">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="307:15" pos:end="321:13">else <block pos:start="307:20" pos:end="321:13">{<block_content pos:start="309:17" pos:end="319:17">

                <expr_stmt pos:start="309:17" pos:end="309:66"><expr pos:start="309:17" pos:end="309:65"><call pos:start="309:17" pos:end="309:65"><name pos:start="309:17" pos:end="309:21">PUSHW</name><argument_list pos:start="309:22" pos:end="309:65">(<argument pos:start="309:23" pos:end="309:25"><expr pos:start="309:23" pos:end="309:25"><name pos:start="309:23" pos:end="309:25">ssp</name></expr></argument>, <argument pos:start="309:28" pos:end="309:29"><expr pos:start="309:28" pos:end="309:29"><name pos:start="309:28" pos:end="309:29">sp</name></expr></argument>, <argument pos:start="309:32" pos:end="309:38"><expr pos:start="309:32" pos:end="309:38"><name pos:start="309:32" pos:end="309:38">sp_mask</name></expr></argument>, <argument pos:start="309:41" pos:end="309:64"><expr pos:start="309:41" pos:end="309:64"><name pos:start="309:41" pos:end="309:55"><name pos:start="309:41" pos:end="309:43">env</name><operator pos:start="309:44" pos:end="309:45">-&gt;</operator><name pos:start="309:46" pos:end="309:49">segs</name><index pos:start="309:50" pos:end="309:55">[<expr pos:start="309:51" pos:end="309:54"><name pos:start="309:51" pos:end="309:54">R_SS</name></expr>]</index></name><operator pos:start="309:56" pos:end="309:56">.</operator><name pos:start="309:57" pos:end="309:64">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="311:17" pos:end="311:45"><expr pos:start="311:17" pos:end="311:44"><call pos:start="311:17" pos:end="311:44"><name pos:start="311:17" pos:end="311:21">PUSHW</name><argument_list pos:start="311:22" pos:end="311:44">(<argument pos:start="311:23" pos:end="311:25"><expr pos:start="311:23" pos:end="311:25"><name pos:start="311:23" pos:end="311:25">ssp</name></expr></argument>, <argument pos:start="311:28" pos:end="311:29"><expr pos:start="311:28" pos:end="311:29"><name pos:start="311:28" pos:end="311:29">sp</name></expr></argument>, <argument pos:start="311:32" pos:end="311:38"><expr pos:start="311:32" pos:end="311:38"><name pos:start="311:32" pos:end="311:38">sp_mask</name></expr></argument>, <argument pos:start="311:41" pos:end="311:43"><expr pos:start="311:41" pos:end="311:43"><name pos:start="311:41" pos:end="311:43">ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="313:17" pos:end="319:17">for<control pos:start="313:20" pos:end="313:53">(<init pos:start="313:21" pos:end="313:40"><expr pos:start="313:21" pos:end="313:39"><name pos:start="313:21" pos:end="313:21">i</name> <operator pos:start="313:23" pos:end="313:23">=</operator> <name pos:start="313:25" pos:end="313:35">param_count</name> <operator pos:start="313:37" pos:end="313:37">-</operator> <literal type="number" pos:start="313:39" pos:end="313:39">1</literal></expr>;</init> <condition pos:start="313:42" pos:end="313:48"><expr pos:start="313:42" pos:end="313:47"><name pos:start="313:42" pos:end="313:42">i</name> <operator pos:start="313:44" pos:end="313:45">&gt;=</operator> <literal type="number" pos:start="313:47" pos:end="313:47">0</literal></expr>;</condition> <incr pos:start="313:50" pos:end="313:52"><expr pos:start="313:50" pos:end="313:52"><name pos:start="313:50" pos:end="313:50">i</name><operator pos:start="313:51" pos:end="313:52">--</operator></expr></incr>)</control> <block pos:start="313:55" pos:end="319:17">{<block_content pos:start="315:21" pos:end="317:49">

                    <expr_stmt pos:start="315:21" pos:end="315:79"><expr pos:start="315:21" pos:end="315:78"><name pos:start="315:21" pos:end="315:23">val</name> <operator pos:start="315:25" pos:end="315:25">=</operator> <call pos:start="315:27" pos:end="315:78"><name pos:start="315:27" pos:end="315:37">lduw_kernel</name><argument_list pos:start="315:38" pos:end="315:78">(<argument pos:start="315:39" pos:end="315:77"><expr pos:start="315:39" pos:end="315:77"><name pos:start="315:39" pos:end="315:45">old_ssp</name> <operator pos:start="315:47" pos:end="315:47">+</operator> <operator pos:start="315:49" pos:end="315:49">(</operator><operator pos:start="315:50" pos:end="315:50">(</operator><name pos:start="315:51" pos:end="315:53">ESP</name> <operator pos:start="315:55" pos:end="315:55">+</operator> <name pos:start="315:57" pos:end="315:57">i</name> <operator pos:start="315:59" pos:end="315:59">*</operator> <literal type="number" pos:start="315:61" pos:end="315:61">2</literal><operator pos:start="315:62" pos:end="315:62">)</operator> <operator pos:start="315:64" pos:end="315:64">&amp;</operator> <name pos:start="315:66" pos:end="315:76">old_sp_mask</name><operator pos:start="315:77" pos:end="315:77">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="317:21" pos:end="317:49"><expr pos:start="317:21" pos:end="317:48"><call pos:start="317:21" pos:end="317:48"><name pos:start="317:21" pos:end="317:25">PUSHW</name><argument_list pos:start="317:26" pos:end="317:48">(<argument pos:start="317:27" pos:end="317:29"><expr pos:start="317:27" pos:end="317:29"><name pos:start="317:27" pos:end="317:29">ssp</name></expr></argument>, <argument pos:start="317:32" pos:end="317:33"><expr pos:start="317:32" pos:end="317:33"><name pos:start="317:32" pos:end="317:33">sp</name></expr></argument>, <argument pos:start="317:36" pos:end="317:42"><expr pos:start="317:36" pos:end="317:42"><name pos:start="317:36" pos:end="317:42">sp_mask</name></expr></argument>, <argument pos:start="317:45" pos:end="317:47"><expr pos:start="317:45" pos:end="317:47"><name pos:start="317:45" pos:end="317:47">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:26"><expr pos:start="323:13" pos:end="323:25"><name pos:start="323:13" pos:end="323:21">new_stack</name> <operator pos:start="323:23" pos:end="323:23">=</operator> <literal type="number" pos:start="323:25" pos:end="323:25">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="325:11" pos:end="339:9">else <block pos:start="325:16" pos:end="339:9">{<block_content pos:start="329:13" pos:end="337:26">

            <comment type="block" pos:start="327:13" pos:end="327:35">/* to same privilege */</comment>

            <expr_stmt pos:start="329:13" pos:end="329:21"><expr pos:start="329:13" pos:end="329:20"><name pos:start="329:13" pos:end="329:14">sp</name> <operator pos:start="329:16" pos:end="329:16">=</operator> <name pos:start="329:18" pos:end="329:20">ESP</name></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:57"><expr pos:start="331:13" pos:end="331:56"><name pos:start="331:13" pos:end="331:19">sp_mask</name> <operator pos:start="331:21" pos:end="331:21">=</operator> <call pos:start="331:23" pos:end="331:56"><name pos:start="331:23" pos:end="331:33">get_sp_mask</name><argument_list pos:start="331:34" pos:end="331:56">(<argument pos:start="331:35" pos:end="331:55"><expr pos:start="331:35" pos:end="331:55"><name pos:start="331:35" pos:end="331:49"><name pos:start="331:35" pos:end="331:37">env</name><operator pos:start="331:38" pos:end="331:39">-&gt;</operator><name pos:start="331:40" pos:end="331:43">segs</name><index pos:start="331:44" pos:end="331:49">[<expr pos:start="331:45" pos:end="331:48"><name pos:start="331:45" pos:end="331:48">R_SS</name></expr>]</index></name><operator pos:start="331:50" pos:end="331:50">.</operator><name pos:start="331:51" pos:end="331:55">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:39"><expr pos:start="333:13" pos:end="333:38"><name pos:start="333:13" pos:end="333:15">ssp</name> <operator pos:start="333:17" pos:end="333:17">=</operator> <name pos:start="333:19" pos:end="333:33"><name pos:start="333:19" pos:end="333:21">env</name><operator pos:start="333:22" pos:end="333:23">-&gt;</operator><name pos:start="333:24" pos:end="333:27">segs</name><index pos:start="333:28" pos:end="333:33">[<expr pos:start="333:29" pos:end="333:32"><name pos:start="333:29" pos:end="333:32">R_SS</name></expr>]</index></name><operator pos:start="333:34" pos:end="333:34">.</operator><name pos:start="333:35" pos:end="333:38">base</name></expr>;</expr_stmt>

            <comment type="line" pos:start="335:13" pos:end="335:51">//            push_size = (4 &lt;&lt; shift);</comment>

            <expr_stmt pos:start="337:13" pos:end="337:26"><expr pos:start="337:13" pos:end="337:25"><name pos:start="337:13" pos:end="337:21">new_stack</name> <operator pos:start="337:23" pos:end="337:23">=</operator> <literal type="number" pos:start="337:25" pos:end="337:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="343:9" pos:end="355:9"><if pos:start="343:9" pos:end="349:9">if <condition pos:start="343:12" pos:end="343:18">(<expr pos:start="343:13" pos:end="343:17"><name pos:start="343:13" pos:end="343:17">shift</name></expr>)</condition> <block pos:start="343:20" pos:end="349:9">{<block_content pos:start="345:13" pos:end="347:46">

            <expr_stmt pos:start="345:13" pos:end="345:62"><expr pos:start="345:13" pos:end="345:61"><call pos:start="345:13" pos:end="345:61"><name pos:start="345:13" pos:end="345:17">PUSHL</name><argument_list pos:start="345:18" pos:end="345:61">(<argument pos:start="345:19" pos:end="345:21"><expr pos:start="345:19" pos:end="345:21"><name pos:start="345:19" pos:end="345:21">ssp</name></expr></argument>, <argument pos:start="345:24" pos:end="345:25"><expr pos:start="345:24" pos:end="345:25"><name pos:start="345:24" pos:end="345:25">sp</name></expr></argument>, <argument pos:start="345:28" pos:end="345:34"><expr pos:start="345:28" pos:end="345:34"><name pos:start="345:28" pos:end="345:34">sp_mask</name></expr></argument>, <argument pos:start="345:37" pos:end="345:60"><expr pos:start="345:37" pos:end="345:60"><name pos:start="345:37" pos:end="345:51"><name pos:start="345:37" pos:end="345:39">env</name><operator pos:start="345:40" pos:end="345:41">-&gt;</operator><name pos:start="345:42" pos:end="345:45">segs</name><index pos:start="345:46" pos:end="345:51">[<expr pos:start="345:47" pos:end="345:50"><name pos:start="345:47" pos:end="345:50">R_CS</name></expr>]</index></name><operator pos:start="345:52" pos:end="345:52">.</operator><name pos:start="345:53" pos:end="345:60">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="347:13" pos:end="347:46"><expr pos:start="347:13" pos:end="347:45"><call pos:start="347:13" pos:end="347:45"><name pos:start="347:13" pos:end="347:17">PUSHL</name><argument_list pos:start="347:18" pos:end="347:45">(<argument pos:start="347:19" pos:end="347:21"><expr pos:start="347:19" pos:end="347:21"><name pos:start="347:19" pos:end="347:21">ssp</name></expr></argument>, <argument pos:start="347:24" pos:end="347:25"><expr pos:start="347:24" pos:end="347:25"><name pos:start="347:24" pos:end="347:25">sp</name></expr></argument>, <argument pos:start="347:28" pos:end="347:34"><expr pos:start="347:28" pos:end="347:34"><name pos:start="347:28" pos:end="347:34">sp_mask</name></expr></argument>, <argument pos:start="347:37" pos:end="347:44"><expr pos:start="347:37" pos:end="347:44"><name pos:start="347:37" pos:end="347:44">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="349:11" pos:end="355:9">else <block pos:start="349:16" pos:end="355:9">{<block_content pos:start="351:13" pos:end="353:46">

            <expr_stmt pos:start="351:13" pos:end="351:62"><expr pos:start="351:13" pos:end="351:61"><call pos:start="351:13" pos:end="351:61"><name pos:start="351:13" pos:end="351:17">PUSHW</name><argument_list pos:start="351:18" pos:end="351:61">(<argument pos:start="351:19" pos:end="351:21"><expr pos:start="351:19" pos:end="351:21"><name pos:start="351:19" pos:end="351:21">ssp</name></expr></argument>, <argument pos:start="351:24" pos:end="351:25"><expr pos:start="351:24" pos:end="351:25"><name pos:start="351:24" pos:end="351:25">sp</name></expr></argument>, <argument pos:start="351:28" pos:end="351:34"><expr pos:start="351:28" pos:end="351:34"><name pos:start="351:28" pos:end="351:34">sp_mask</name></expr></argument>, <argument pos:start="351:37" pos:end="351:60"><expr pos:start="351:37" pos:end="351:60"><name pos:start="351:37" pos:end="351:51"><name pos:start="351:37" pos:end="351:39">env</name><operator pos:start="351:40" pos:end="351:41">-&gt;</operator><name pos:start="351:42" pos:end="351:45">segs</name><index pos:start="351:46" pos:end="351:51">[<expr pos:start="351:47" pos:end="351:50"><name pos:start="351:47" pos:end="351:50">R_CS</name></expr>]</index></name><operator pos:start="351:52" pos:end="351:52">.</operator><name pos:start="351:53" pos:end="351:60">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:46"><expr pos:start="353:13" pos:end="353:45"><call pos:start="353:13" pos:end="353:45"><name pos:start="353:13" pos:end="353:17">PUSHW</name><argument_list pos:start="353:18" pos:end="353:45">(<argument pos:start="353:19" pos:end="353:21"><expr pos:start="353:19" pos:end="353:21"><name pos:start="353:19" pos:end="353:21">ssp</name></expr></argument>, <argument pos:start="353:24" pos:end="353:25"><expr pos:start="353:24" pos:end="353:25"><name pos:start="353:24" pos:end="353:25">sp</name></expr></argument>, <argument pos:start="353:28" pos:end="353:34"><expr pos:start="353:28" pos:end="353:34"><name pos:start="353:28" pos:end="353:34">sp_mask</name></expr></argument>, <argument pos:start="353:37" pos:end="353:44"><expr pos:start="353:37" pos:end="353:44"><name pos:start="353:37" pos:end="353:44">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="359:9" pos:end="359:46">/* from this point, not restartable */</comment>



        <if_stmt pos:start="363:9" pos:end="375:9"><if pos:start="363:9" pos:end="375:9">if <condition pos:start="363:12" pos:end="363:22">(<expr pos:start="363:13" pos:end="363:21"><name pos:start="363:13" pos:end="363:21">new_stack</name></expr>)</condition> <block pos:start="363:24" pos:end="375:9">{<block_content pos:start="365:13" pos:end="373:42">

            <expr_stmt pos:start="365:13" pos:end="365:33"><expr pos:start="365:13" pos:end="365:32"><name pos:start="365:13" pos:end="365:14">ss</name> <operator pos:start="365:16" pos:end="365:16">=</operator> <operator pos:start="365:18" pos:end="365:18">(</operator><name pos:start="365:19" pos:end="365:20">ss</name> <operator pos:start="365:22" pos:end="365:22">&amp;</operator> <operator pos:start="365:24" pos:end="365:24">~</operator><literal type="number" pos:start="365:25" pos:end="365:25">3</literal><operator pos:start="365:26" pos:end="365:26">)</operator> <operator pos:start="365:28" pos:end="365:28">|</operator> <name pos:start="365:30" pos:end="365:32">dpl</name></expr>;</expr_stmt>

            <expr_stmt pos:start="367:13" pos:end="373:42"><expr pos:start="367:13" pos:end="373:41"><call pos:start="367:13" pos:end="373:41"><name pos:start="367:13" pos:end="367:34">cpu_x86_load_seg_cache</name><argument_list pos:start="367:35" pos:end="373:41">(<argument pos:start="367:36" pos:end="367:38"><expr pos:start="367:36" pos:end="367:38"><name pos:start="367:36" pos:end="367:38">env</name></expr></argument>, <argument pos:start="367:41" pos:end="367:44"><expr pos:start="367:41" pos:end="367:44"><name pos:start="367:41" pos:end="367:44">R_SS</name></expr></argument>, <argument pos:start="367:47" pos:end="367:48"><expr pos:start="367:47" pos:end="367:48"><name pos:start="367:47" pos:end="367:48">ss</name></expr></argument>,

                                   <argument pos:start="369:36" pos:end="369:38"><expr pos:start="369:36" pos:end="369:38"><name pos:start="369:36" pos:end="369:38">ssp</name></expr></argument>,

                                   <argument pos:start="371:36" pos:end="371:62"><expr pos:start="371:36" pos:end="371:62"><call pos:start="371:36" pos:end="371:62"><name pos:start="371:36" pos:end="371:48">get_seg_limit</name><argument_list pos:start="371:49" pos:end="371:62">(<argument pos:start="371:50" pos:end="371:54"><expr pos:start="371:50" pos:end="371:54"><name pos:start="371:50" pos:end="371:54">ss_e1</name></expr></argument>, <argument pos:start="371:57" pos:end="371:61"><expr pos:start="371:57" pos:end="371:61"><name pos:start="371:57" pos:end="371:61">ss_e2</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="373:36" pos:end="373:40"><expr pos:start="373:36" pos:end="373:40"><name pos:start="373:36" pos:end="373:40">ss_e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="379:9" pos:end="379:41"><expr pos:start="379:9" pos:end="379:40"><name pos:start="379:9" pos:end="379:16">selector</name> <operator pos:start="379:18" pos:end="379:18">=</operator> <operator pos:start="379:20" pos:end="379:20">(</operator><name pos:start="379:21" pos:end="379:28">selector</name> <operator pos:start="379:30" pos:end="379:30">&amp;</operator> <operator pos:start="379:32" pos:end="379:32">~</operator><literal type="number" pos:start="379:33" pos:end="379:33">3</literal><operator pos:start="379:34" pos:end="379:34">)</operator> <operator pos:start="379:36" pos:end="379:36">|</operator> <name pos:start="379:38" pos:end="379:40">dpl</name></expr>;</expr_stmt>

        <expr_stmt pos:start="381:9" pos:end="387:27"><expr pos:start="381:9" pos:end="387:26"><call pos:start="381:9" pos:end="387:26"><name pos:start="381:9" pos:end="381:30">cpu_x86_load_seg_cache</name><argument_list pos:start="381:31" pos:end="387:26">(<argument pos:start="381:32" pos:end="381:34"><expr pos:start="381:32" pos:end="381:34"><name pos:start="381:32" pos:end="381:34">env</name></expr></argument>, <argument pos:start="381:37" pos:end="381:40"><expr pos:start="381:37" pos:end="381:40"><name pos:start="381:37" pos:end="381:40">R_CS</name></expr></argument>, <argument pos:start="381:43" pos:end="381:50"><expr pos:start="381:43" pos:end="381:50"><name pos:start="381:43" pos:end="381:50">selector</name></expr></argument>,

                       <argument pos:start="383:24" pos:end="383:43"><expr pos:start="383:24" pos:end="383:43"><call pos:start="383:24" pos:end="383:43"><name pos:start="383:24" pos:end="383:35">get_seg_base</name><argument_list pos:start="383:36" pos:end="383:43">(<argument pos:start="383:37" pos:end="383:38"><expr pos:start="383:37" pos:end="383:38"><name pos:start="383:37" pos:end="383:38">e1</name></expr></argument>, <argument pos:start="383:41" pos:end="383:42"><expr pos:start="383:41" pos:end="383:42"><name pos:start="383:41" pos:end="383:42">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="385:24" pos:end="385:44"><expr pos:start="385:24" pos:end="385:44"><call pos:start="385:24" pos:end="385:44"><name pos:start="385:24" pos:end="385:36">get_seg_limit</name><argument_list pos:start="385:37" pos:end="385:44">(<argument pos:start="385:38" pos:end="385:39"><expr pos:start="385:38" pos:end="385:39"><name pos:start="385:38" pos:end="385:39">e1</name></expr></argument>, <argument pos:start="385:42" pos:end="385:43"><expr pos:start="385:42" pos:end="385:43"><name pos:start="385:42" pos:end="385:43">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="387:24" pos:end="387:25"><expr pos:start="387:24" pos:end="387:25"><name pos:start="387:24" pos:end="387:25">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:34"><expr pos:start="389:9" pos:end="389:33"><call pos:start="389:9" pos:end="389:33"><name pos:start="389:9" pos:end="389:23">cpu_x86_set_cpl</name><argument_list pos:start="389:24" pos:end="389:33">(<argument pos:start="389:25" pos:end="389:27"><expr pos:start="389:25" pos:end="389:27"><name pos:start="389:25" pos:end="389:27">env</name></expr></argument>, <argument pos:start="389:30" pos:end="389:32"><expr pos:start="389:30" pos:end="389:32"><name pos:start="389:30" pos:end="389:32">dpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="391:9" pos:end="391:29"><expr pos:start="391:9" pos:end="391:28"><call pos:start="391:9" pos:end="391:28"><name pos:start="391:9" pos:end="391:15">SET_ESP</name><argument_list pos:start="391:16" pos:end="391:28">(<argument pos:start="391:17" pos:end="391:18"><expr pos:start="391:17" pos:end="391:18"><name pos:start="391:17" pos:end="391:18">sp</name></expr></argument>, <argument pos:start="391:21" pos:end="391:27"><expr pos:start="391:21" pos:end="391:27"><name pos:start="391:21" pos:end="391:27">sp_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="393:9" pos:end="393:21"><expr pos:start="393:9" pos:end="393:20"><name pos:start="393:9" pos:end="393:11">EIP</name> <operator pos:start="393:13" pos:end="393:13">=</operator> <name pos:start="393:15" pos:end="393:20">offset</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="397:1" pos:end="397:19">#<cpp:directive pos:start="397:2" pos:end="397:6">ifdef</cpp:directive> <name pos:start="397:8" pos:end="397:19">CONFIG_KQEMU</name></cpp:ifdef>

    <if_stmt pos:start="399:5" pos:end="408:0"><if pos:start="399:5" pos:end="408:0">if <condition pos:start="399:8" pos:end="399:25">(<expr pos:start="399:9" pos:end="399:24"><call pos:start="399:9" pos:end="399:24"><name pos:start="399:9" pos:end="399:19">kqemu_is_ok</name><argument_list pos:start="399:20" pos:end="399:24">(<argument pos:start="399:21" pos:end="399:23"><expr pos:start="399:21" pos:end="399:23"><name pos:start="399:21" pos:end="399:23">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="399:27" pos:end="408:0">{<block_content pos:start="401:9" pos:end="403:24">

        <expr_stmt pos:start="401:9" pos:end="401:34"><expr pos:start="401:9" pos:end="401:33"><name pos:start="401:9" pos:end="401:28"><name pos:start="401:9" pos:end="401:11">env</name><operator pos:start="401:12" pos:end="401:13">-&gt;</operator><name pos:start="401:14" pos:end="401:28">exception_index</name></name> <operator pos:start="401:30" pos:end="401:30">=</operator> <operator pos:start="401:32" pos:end="401:32">-</operator><literal type="number" pos:start="401:33" pos:end="401:33">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="403:9" pos:end="403:24"><expr pos:start="403:9" pos:end="403:23"><call pos:start="403:9" pos:end="403:23"><name pos:start="403:9" pos:end="403:21">cpu_loop_exit</name><argument_list pos:start="403:22" pos:end="403:23">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="407:1" pos:end="407:6">#<cpp:directive pos:start="407:2" pos:end="407:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
