<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23360.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">qemu_rdma_post_send_control</name><parameter_list pos:start="1:39" pos:end="3:63">(<parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><name pos:start="1:40" pos:end="1:50">RDMAContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:56">rdma</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:65">uint8_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">buf</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:62"><decl pos:start="3:40" pos:end="3:62"><type pos:start="3:40" pos:end="3:62"><name pos:start="3:40" pos:end="3:56">RDMAControlHeader</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:62">head</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:64"><decl pos:start="9:5" pos:end="9:63"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">RDMAWorkRequestData</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:27">wr</name> <init pos:start="9:29" pos:end="9:63">= <expr pos:start="9:31" pos:end="9:63"><operator pos:start="9:31" pos:end="9:31">&amp;</operator><name pos:start="9:32" pos:end="9:63"><name pos:start="9:32" pos:end="9:35">rdma</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:44">wr_data</name><index pos:start="9:45" pos:end="9:63">[<expr pos:start="9:46" pos:end="9:62"><name pos:start="9:46" pos:end="9:62">RDMA_WRID_CONTROL</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:22">ibv_send_wr</name></name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:30">bad_wr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="21:27"><decl pos:start="13:5" pos:end="21:26"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:18">ibv_sge</name></name></type> <name pos:start="13:20" pos:end="13:22">sge</name> <init pos:start="13:24" pos:end="21:26">= <expr pos:start="13:26" pos:end="21:26"><block pos:start="13:26" pos:end="21:26">{

                           <expr pos:start="15:28" pos:end="15:58"><operator pos:start="15:28" pos:end="15:28">.</operator><name pos:start="15:29" pos:end="15:32">addr</name> <operator pos:start="15:34" pos:end="15:34">=</operator> <operator pos:start="15:36" pos:end="15:36">(</operator><name pos:start="15:37" pos:end="15:44">uint64_t</name><operator pos:start="15:45" pos:end="15:45">)</operator><operator pos:start="15:46" pos:end="15:46">(</operator><name pos:start="15:47" pos:end="15:57"><name pos:start="15:47" pos:end="15:48">wr</name><operator pos:start="15:49" pos:end="15:50">-&gt;</operator><name pos:start="15:51" pos:end="15:57">control</name></name><operator pos:start="15:58" pos:end="15:58">)</operator></expr>,

                           <expr pos:start="17:28" pos:end="17:74"><operator pos:start="17:28" pos:end="17:28">.</operator><name pos:start="17:29" pos:end="17:34">length</name> <operator pos:start="17:36" pos:end="17:36">=</operator> <name pos:start="17:38" pos:end="17:46"><name pos:start="17:38" pos:end="17:41">head</name><operator pos:start="17:42" pos:end="17:43">-&gt;</operator><name pos:start="17:44" pos:end="17:46">len</name></name> <operator pos:start="17:48" pos:end="17:48">+</operator> <sizeof pos:start="17:50" pos:end="17:74">sizeof<argument_list pos:start="17:56" pos:end="17:74">(<argument pos:start="17:57" pos:end="17:73"><expr pos:start="17:57" pos:end="17:73"><name pos:start="17:57" pos:end="17:73">RDMAControlHeader</name></expr></argument>)</argument_list></sizeof></expr>,

                           <expr pos:start="19:28" pos:end="19:55"><operator pos:start="19:28" pos:end="19:28">.</operator><name pos:start="19:29" pos:end="19:32">lkey</name> <operator pos:start="19:34" pos:end="19:34">=</operator> <name pos:start="19:36" pos:end="19:55"><name pos:start="19:36" pos:end="19:37">wr</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:49">control_mr</name><operator pos:start="19:50" pos:end="19:51">-&gt;</operator><name pos:start="19:52" pos:end="19:55">lkey</name></name></expr>,

                         }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="35:34"><decl pos:start="23:5" pos:end="35:33"><type pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:22">ibv_send_wr</name></name></type> <name pos:start="23:24" pos:end="23:30">send_wr</name> <init pos:start="23:32" pos:end="35:33">= <expr pos:start="23:34" pos:end="35:33"><block pos:start="23:34" pos:end="35:33">{

                                   <expr pos:start="25:36" pos:end="25:66"><operator pos:start="25:36" pos:end="25:36">.</operator><name pos:start="25:37" pos:end="25:41">wr_id</name> <operator pos:start="25:43" pos:end="25:43">=</operator> <name pos:start="25:45" pos:end="25:66">RDMA_WRID_SEND_CONTROL</name></expr>,

                                   <expr pos:start="27:36" pos:end="27:56"><operator pos:start="27:36" pos:end="27:36">.</operator><name pos:start="27:37" pos:end="27:42">opcode</name> <operator pos:start="27:44" pos:end="27:44">=</operator> <name pos:start="27:46" pos:end="27:56">IBV_WR_SEND</name></expr>,

                                   <expr pos:start="29:36" pos:end="29:66"><operator pos:start="29:36" pos:end="29:36">.</operator><name pos:start="29:37" pos:end="29:46">send_flags</name> <operator pos:start="29:48" pos:end="29:48">=</operator> <name pos:start="29:50" pos:end="29:66">IBV_SEND_SIGNALED</name></expr>,

                                   <expr pos:start="31:36" pos:end="31:50"><operator pos:start="31:36" pos:end="31:36">.</operator><name pos:start="31:37" pos:end="31:43">sg_list</name> <operator pos:start="31:45" pos:end="31:45">=</operator> <operator pos:start="31:47" pos:end="31:47">&amp;</operator><name pos:start="31:48" pos:end="31:50">sge</name></expr>,

                                   <expr pos:start="33:36" pos:end="33:47"><operator pos:start="33:36" pos:end="33:36">.</operator><name pos:start="33:37" pos:end="33:43">num_sge</name> <operator pos:start="33:45" pos:end="33:45">=</operator> <literal type="number" pos:start="33:47" pos:end="33:47">1</literal></expr>,

                                }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:67"><expr pos:start="39:5" pos:end="39:66"><call pos:start="39:5" pos:end="39:66"><name pos:start="39:5" pos:end="39:13">DDDPRINTF</name><argument_list pos:start="39:14" pos:end="39:66">(<argument pos:start="39:15" pos:end="39:39"><expr pos:start="39:15" pos:end="39:39"><literal type="string" pos:start="39:15" pos:end="39:39">"CONTROL: sending %s..\n"</literal></expr></argument>, <argument pos:start="39:42" pos:end="39:65"><expr pos:start="39:42" pos:end="39:65"><name pos:start="39:42" pos:end="39:65"><name pos:start="39:42" pos:end="39:53">control_desc</name><index pos:start="39:54" pos:end="39:65">[<expr pos:start="39:55" pos:end="39:64"><name pos:start="39:55" pos:end="39:64"><name pos:start="39:55" pos:end="39:58">head</name><operator pos:start="39:59" pos:end="39:60">-&gt;</operator><name pos:start="39:61" pos:end="39:64">type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="57:7">/*

     * We don't actually need to do a memcpy() in here if we used

     * the "sge" properly, but since we're only sending control messages

     * (not RAM in a performance-critical path), then its OK for now.

     *

     * The copy makes the RDMAControlHeader simpler to manipulate

     * for the time being.

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:65"><expr pos:start="59:5" pos:end="59:64"><call pos:start="59:5" pos:end="59:64"><name pos:start="59:5" pos:end="59:10">assert</name><argument_list pos:start="59:11" pos:end="59:64">(<argument pos:start="59:12" pos:end="59:63"><expr pos:start="59:12" pos:end="59:63"><name pos:start="59:12" pos:end="59:20"><name pos:start="59:12" pos:end="59:15">head</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:20">len</name></name> <operator pos:start="59:22" pos:end="59:23">&lt;=</operator> <name pos:start="59:25" pos:end="59:47">RDMA_CONTROL_MAX_BUFFER</name> <operator pos:start="59:49" pos:end="59:49">-</operator> <sizeof pos:start="59:51" pos:end="59:63">sizeof<argument_list pos:start="59:57" pos:end="59:63">(<argument pos:start="59:58" pos:end="59:62"><expr pos:start="59:58" pos:end="59:62"><operator pos:start="59:58" pos:end="59:58">*</operator><name pos:start="59:59" pos:end="59:62">head</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:57"><expr pos:start="61:5" pos:end="61:56"><call pos:start="61:5" pos:end="61:56"><name pos:start="61:5" pos:end="61:10">memcpy</name><argument_list pos:start="61:11" pos:end="61:56">(<argument pos:start="61:12" pos:end="61:22"><expr pos:start="61:12" pos:end="61:22"><name pos:start="61:12" pos:end="61:22"><name pos:start="61:12" pos:end="61:13">wr</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:22">control</name></name></expr></argument>, <argument pos:start="61:25" pos:end="61:28"><expr pos:start="61:25" pos:end="61:28"><name pos:start="61:25" pos:end="61:28">head</name></expr></argument>, <argument pos:start="61:31" pos:end="61:55"><expr pos:start="61:31" pos:end="61:55"><sizeof pos:start="61:31" pos:end="61:55">sizeof<argument_list pos:start="61:37" pos:end="61:55">(<argument pos:start="61:38" pos:end="61:54"><expr pos:start="61:38" pos:end="61:54"><name pos:start="61:38" pos:end="61:54">RDMAControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:45"><expr pos:start="63:5" pos:end="63:44"><call pos:start="63:5" pos:end="63:44"><name pos:start="63:5" pos:end="63:22">control_to_network</name><argument_list pos:start="63:23" pos:end="63:44">(<argument pos:start="63:24" pos:end="63:43"><expr pos:start="63:24" pos:end="63:43"><operator pos:start="63:24" pos:end="63:24">(</operator><name pos:start="63:25" pos:end="63:28">void</name> <operator pos:start="63:30" pos:end="63:30">*</operator><operator pos:start="63:31" pos:end="63:31">)</operator> <name pos:start="63:33" pos:end="63:43"><name pos:start="63:33" pos:end="63:34">wr</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:43">control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:12">(<expr pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:11">buf</name></expr>)</condition> <block pos:start="67:14" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:72">

        <expr_stmt pos:start="69:9" pos:end="69:72"><expr pos:start="69:9" pos:end="69:71"><call pos:start="69:9" pos:end="69:71"><name pos:start="69:9" pos:end="69:14">memcpy</name><argument_list pos:start="69:15" pos:end="69:71">(<argument pos:start="69:16" pos:end="69:54"><expr pos:start="69:16" pos:end="69:54"><name pos:start="69:16" pos:end="69:26"><name pos:start="69:16" pos:end="69:17">wr</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:26">control</name></name> <operator pos:start="69:28" pos:end="69:28">+</operator> <sizeof pos:start="69:30" pos:end="69:54">sizeof<argument_list pos:start="69:36" pos:end="69:54">(<argument pos:start="69:37" pos:end="69:53"><expr pos:start="69:37" pos:end="69:53"><name pos:start="69:37" pos:end="69:53">RDMAControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="69:57" pos:end="69:59"><expr pos:start="69:57" pos:end="69:59"><name pos:start="69:57" pos:end="69:59">buf</name></expr></argument>, <argument pos:start="69:62" pos:end="69:70"><expr pos:start="69:62" pos:end="69:70"><name pos:start="69:62" pos:end="69:70"><name pos:start="69:62" pos:end="69:65">head</name><operator pos:start="69:66" pos:end="69:67">-&gt;</operator><name pos:start="69:68" pos:end="69:70">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>





    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:51">(<expr pos:start="77:9" pos:end="77:50"><call pos:start="77:9" pos:end="77:50"><name pos:start="77:9" pos:end="77:21">ibv_post_send</name><argument_list pos:start="77:22" pos:end="77:50">(<argument pos:start="77:23" pos:end="77:30"><expr pos:start="77:23" pos:end="77:30"><name pos:start="77:23" pos:end="77:30"><name pos:start="77:23" pos:end="77:26">rdma</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:30">qp</name></name></expr></argument>, <argument pos:start="77:33" pos:end="77:40"><expr pos:start="77:33" pos:end="77:40"><operator pos:start="77:33" pos:end="77:33">&amp;</operator><name pos:start="77:34" pos:end="77:40">send_wr</name></expr></argument>, <argument pos:start="77:43" pos:end="77:49"><expr pos:start="77:43" pos:end="77:49"><operator pos:start="77:43" pos:end="77:43">&amp;</operator><name pos:start="77:44" pos:end="77:49">bad_wr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:53" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:18">

        <return pos:start="79:9" pos:end="79:18">return <expr pos:start="79:16" pos:end="79:17"><operator pos:start="79:16" pos:end="79:16">-</operator><literal type="number" pos:start="79:17" pos:end="79:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:16">(<expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">&lt;</operator> <literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>)</condition> <block pos:start="85:18" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:19">

        <expr_stmt pos:start="87:9" pos:end="87:69"><expr pos:start="87:9" pos:end="87:68"><call pos:start="87:9" pos:end="87:68"><name pos:start="87:9" pos:end="87:15">fprintf</name><argument_list pos:start="87:16" pos:end="87:68">(<argument pos:start="87:17" pos:end="87:22"><expr pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:22">stderr</name></expr></argument>, <argument pos:start="87:25" pos:end="87:67"><expr pos:start="87:25" pos:end="87:67"><literal type="string" pos:start="87:25" pos:end="87:67">"Failed to use post IB SEND for control!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:19">return <expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:65"><expr pos:start="95:5" pos:end="95:64"><name pos:start="95:5" pos:end="95:7">ret</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="95:64"><name pos:start="95:11" pos:end="95:34">qemu_rdma_block_for_wrid</name><argument_list pos:start="95:35" pos:end="95:64">(<argument pos:start="95:36" pos:end="95:39"><expr pos:start="95:36" pos:end="95:39"><name pos:start="95:36" pos:end="95:39">rdma</name></expr></argument>, <argument pos:start="95:42" pos:end="95:63"><expr pos:start="95:42" pos:end="95:63"><name pos:start="95:42" pos:end="95:63">RDMA_WRID_SEND_CONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:16">(<expr pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">&lt;</operator> <literal type="number" pos:start="97:15" pos:end="97:15">0</literal></expr>)</condition> <block pos:start="97:18" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:73">

        <expr_stmt pos:start="99:9" pos:end="99:73"><expr pos:start="99:9" pos:end="99:72"><call pos:start="99:9" pos:end="99:72"><name pos:start="99:9" pos:end="99:15">fprintf</name><argument_list pos:start="99:16" pos:end="99:72">(<argument pos:start="99:17" pos:end="99:22"><expr pos:start="99:17" pos:end="99:22"><name pos:start="99:17" pos:end="99:22">stderr</name></expr></argument>, <argument pos:start="99:25" pos:end="99:71"><expr pos:start="99:25" pos:end="99:71"><literal type="string" pos:start="99:25" pos:end="99:71">"rdma migration: send polling control error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="105:5" pos:end="105:15">return <expr pos:start="105:12" pos:end="105:14"><name pos:start="105:12" pos:end="105:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
