<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11946.c" pos:tabs="8"><function pos:start="1:1" pos:end="297:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">clp_service_call</name><parameter_list pos:start="1:21" pos:end="1:46">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:28">S390CPU</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:33">cpu</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:45"><decl pos:start="1:36" pos:end="1:45"><type pos:start="1:36" pos:end="1:45"><name pos:start="1:36" pos:end="1:42">uint8_t</name></type> <name pos:start="1:44" pos:end="1:45">r2</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="297:1">{<block_content pos:start="5:5" pos:end="295:13">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">ClpReqHdr</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:19">reqh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">ClpRspHdr</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:19">resh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">S390PCIBusDevice</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:27">pbdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:20">req_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:20">res_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:28"><name pos:start="15:13" pos:end="15:18">buffer</name><index pos:start="15:19" pos:end="15:28">[<expr pos:start="15:20" pos:end="15:27"><literal type="number" pos:start="15:20" pos:end="15:23">4096</literal> <operator pos:start="15:25" pos:end="15:25">*</operator> <literal type="number" pos:start="15:27" pos:end="15:27">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:14">cc</name> <init pos:start="17:16" pos:end="17:18">= <expr pos:start="17:18" pos:end="17:18"><literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:35"><decl pos:start="19:5" pos:end="19:34"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:17">CPUS390XState</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:22">env</name> <init pos:start="19:24" pos:end="19:34">= <expr pos:start="19:26" pos:end="19:34"><operator pos:start="19:26" pos:end="19:26">&amp;</operator><name pos:start="19:27" pos:end="19:34"><name pos:start="19:27" pos:end="19:29">cpu</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><call pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:25">cpu_synchronize_state</name><argument_list pos:start="25:26" pos:end="25:35">(<argument pos:start="25:27" pos:end="25:34"><expr pos:start="25:27" pos:end="25:34"><call pos:start="25:27" pos:end="25:34"><name pos:start="25:27" pos:end="25:29">CPU</name><argument_list pos:start="25:30" pos:end="25:34">(<argument pos:start="25:31" pos:end="25:33"><expr pos:start="25:31" pos:end="25:33"><name pos:start="25:31" pos:end="25:33">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:40">(<expr pos:start="29:9" pos:end="29:39"><name pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:11">env</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:16">psw</name><operator pos:start="29:17" pos:end="29:17">.</operator><name pos:start="29:18" pos:end="29:21">mask</name></name> <operator pos:start="29:23" pos:end="29:23">&amp;</operator> <name pos:start="29:25" pos:end="29:39">PSW_MASK_PSTATE</name></expr>)</condition> <block pos:start="29:42" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:17">

        <expr_stmt pos:start="31:9" pos:end="31:50"><expr pos:start="31:9" pos:end="31:49"><call pos:start="31:9" pos:end="31:49"><name pos:start="31:9" pos:end="31:25">program_interrupt</name><argument_list pos:start="31:26" pos:end="31:49">(<argument pos:start="31:27" pos:end="31:29"><expr pos:start="31:27" pos:end="31:29"><name pos:start="31:27" pos:end="31:29">env</name></expr></argument>, <argument pos:start="31:32" pos:end="31:45"><expr pos:start="31:32" pos:end="31:45"><name pos:start="31:32" pos:end="31:45">PGM_PRIVILEGED</name></expr></argument>, <argument pos:start="31:48" pos:end="31:48"><expr pos:start="31:48" pos:end="31:48"><literal type="number" pos:start="31:48" pos:end="31:48">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:78">(<expr pos:start="39:9" pos:end="39:77"><call pos:start="39:9" pos:end="39:77"><name pos:start="39:9" pos:end="39:30">s390_cpu_virt_mem_read</name><argument_list pos:start="39:31" pos:end="39:77">(<argument pos:start="39:32" pos:end="39:34"><expr pos:start="39:32" pos:end="39:34"><name pos:start="39:32" pos:end="39:34">cpu</name></expr></argument>, <argument pos:start="39:37" pos:end="39:49"><expr pos:start="39:37" pos:end="39:49"><name pos:start="39:37" pos:end="39:49"><name pos:start="39:37" pos:end="39:39">env</name><operator pos:start="39:40" pos:end="39:41">-&gt;</operator><name pos:start="39:42" pos:end="39:45">regs</name><index pos:start="39:46" pos:end="39:49">[<expr pos:start="39:47" pos:end="39:48"><name pos:start="39:47" pos:end="39:48">r2</name></expr>]</index></name></expr></argument>, <argument pos:start="39:52" pos:end="39:53"><expr pos:start="39:52" pos:end="39:53"><name pos:start="39:52" pos:end="39:53">r2</name></expr></argument>, <argument pos:start="39:56" pos:end="39:61"><expr pos:start="39:56" pos:end="39:61"><name pos:start="39:56" pos:end="39:61">buffer</name></expr></argument>, <argument pos:start="39:64" pos:end="39:76"><expr pos:start="39:64" pos:end="39:76"><sizeof pos:start="39:64" pos:end="39:76">sizeof<argument_list pos:start="39:70" pos:end="39:76">(<argument pos:start="39:71" pos:end="39:75"><expr pos:start="39:71" pos:end="39:75"><operator pos:start="39:71" pos:end="39:71">*</operator><name pos:start="39:72" pos:end="39:75">reqh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:80" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:17">

        <return pos:start="41:9" pos:end="41:17">return <expr pos:start="41:16" pos:end="41:16"><literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:31"><expr pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:8">reqh</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <operator pos:start="45:12" pos:end="45:12">(</operator><name pos:start="45:13" pos:end="45:21">ClpReqHdr</name> <operator pos:start="45:23" pos:end="45:23">*</operator><operator pos:start="45:24" pos:end="45:24">)</operator><name pos:start="45:25" pos:end="45:30">buffer</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:33"><expr pos:start="47:5" pos:end="47:32"><name pos:start="47:5" pos:end="47:11">req_len</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:32"><name pos:start="47:15" pos:end="47:20">lduw_p</name><argument_list pos:start="47:21" pos:end="47:32">(<argument pos:start="47:22" pos:end="47:31"><expr pos:start="47:22" pos:end="47:31"><operator pos:start="47:22" pos:end="47:22">&amp;</operator><name pos:start="47:23" pos:end="47:31"><name pos:start="47:23" pos:end="47:26">reqh</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:31">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:61">(<expr pos:start="49:9" pos:end="49:60"><name pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:15">req_len</name> <argument_list type="generic" pos:start="49:17" pos:end="49:33">&lt; <argument pos:start="49:19" pos:end="49:31"><expr pos:start="49:19" pos:end="49:31"><literal type="number" pos:start="49:19" pos:end="49:20">16</literal> <operator pos:start="49:22" pos:end="49:23">||</operator> <name pos:start="49:25" pos:end="49:31">req_len</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="49:35" pos:end="49:38">8184</literal> <operator pos:start="49:40" pos:end="49:41">||</operator> <operator pos:start="49:43" pos:end="49:43">(</operator><name pos:start="49:44" pos:end="49:50">req_len</name> <operator pos:start="49:52" pos:end="49:52">%</operator> <literal type="number" pos:start="49:54" pos:end="49:54">8</literal> <operator pos:start="49:56" pos:end="49:57">!=</operator> <literal type="number" pos:start="49:59" pos:end="49:59">0</literal><operator pos:start="49:60" pos:end="49:60">)</operator></expr>)</condition> <block pos:start="49:63" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:17">

        <expr_stmt pos:start="51:9" pos:end="51:47"><expr pos:start="51:9" pos:end="51:46"><call pos:start="51:9" pos:end="51:46"><name pos:start="51:9" pos:end="51:25">program_interrupt</name><argument_list pos:start="51:26" pos:end="51:46">(<argument pos:start="51:27" pos:end="51:29"><expr pos:start="51:27" pos:end="51:29"><name pos:start="51:27" pos:end="51:29">env</name></expr></argument>, <argument pos:start="51:32" pos:end="51:42"><expr pos:start="51:32" pos:end="51:42"><name pos:start="51:32" pos:end="51:42">PGM_OPERAND</name></expr></argument>, <argument pos:start="51:45" pos:end="51:45"><expr pos:start="51:45" pos:end="51:45"><literal type="number" pos:start="51:45" pos:end="51:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:17">return <expr pos:start="53:16" pos:end="53:16"><literal type="number" pos:start="53:16" pos:end="53:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="61:56">(<expr pos:start="59:9" pos:end="61:55"><call pos:start="59:9" pos:end="61:55"><name pos:start="59:9" pos:end="59:30">s390_cpu_virt_mem_read</name><argument_list pos:start="59:31" pos:end="61:55">(<argument pos:start="59:32" pos:end="59:34"><expr pos:start="59:32" pos:end="59:34"><name pos:start="59:32" pos:end="59:34">cpu</name></expr></argument>, <argument pos:start="59:37" pos:end="59:49"><expr pos:start="59:37" pos:end="59:49"><name pos:start="59:37" pos:end="59:49"><name pos:start="59:37" pos:end="59:39">env</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:45">regs</name><index pos:start="59:46" pos:end="59:49">[<expr pos:start="59:47" pos:end="59:48"><name pos:start="59:47" pos:end="59:48">r2</name></expr>]</index></name></expr></argument>, <argument pos:start="59:52" pos:end="59:53"><expr pos:start="59:52" pos:end="59:53"><name pos:start="59:52" pos:end="59:53">r2</name></expr></argument>, <argument pos:start="59:56" pos:end="59:61"><expr pos:start="59:56" pos:end="59:61"><name pos:start="59:56" pos:end="59:61">buffer</name></expr></argument>,

                               <argument pos:start="61:32" pos:end="61:54"><expr pos:start="61:32" pos:end="61:54"><name pos:start="61:32" pos:end="61:38">req_len</name> <operator pos:start="61:40" pos:end="61:40">+</operator> <sizeof pos:start="61:42" pos:end="61:54">sizeof<argument_list pos:start="61:48" pos:end="61:54">(<argument pos:start="61:49" pos:end="61:53"><expr pos:start="61:49" pos:end="61:53"><operator pos:start="61:49" pos:end="61:49">*</operator><name pos:start="61:50" pos:end="61:53">resh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:58" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:17">

        <return pos:start="63:9" pos:end="63:17">return <expr pos:start="63:16" pos:end="63:16"><literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:43"><expr pos:start="67:5" pos:end="67:42"><name pos:start="67:5" pos:end="67:8">resh</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <operator pos:start="67:12" pos:end="67:12">(</operator><name pos:start="67:13" pos:end="67:21">ClpRspHdr</name> <operator pos:start="67:23" pos:end="67:23">*</operator><operator pos:start="67:24" pos:end="67:24">)</operator><operator pos:start="67:25" pos:end="67:25">(</operator><name pos:start="67:26" pos:end="67:31">buffer</name> <operator pos:start="67:33" pos:end="67:33">+</operator> <name pos:start="67:35" pos:end="67:41">req_len</name><operator pos:start="67:42" pos:end="67:42">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:33"><expr pos:start="69:5" pos:end="69:32"><name pos:start="69:5" pos:end="69:11">res_len</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:32"><name pos:start="69:15" pos:end="69:20">lduw_p</name><argument_list pos:start="69:21" pos:end="69:32">(<argument pos:start="69:22" pos:end="69:31"><expr pos:start="69:22" pos:end="69:31"><operator pos:start="69:22" pos:end="69:22">&amp;</operator><name pos:start="69:23" pos:end="69:31"><name pos:start="69:23" pos:end="69:26">resh</name><operator pos:start="69:27" pos:end="69:28">-&gt;</operator><name pos:start="69:29" pos:end="69:31">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:60">(<expr pos:start="71:9" pos:end="71:59"><name pos:start="71:9" pos:end="71:32"><name pos:start="71:9" pos:end="71:15">res_len</name> <argument_list type="generic" pos:start="71:17" pos:end="71:32">&lt; <argument pos:start="71:19" pos:end="71:30"><expr pos:start="71:19" pos:end="71:30"><literal type="number" pos:start="71:19" pos:end="71:19">8</literal> <operator pos:start="71:21" pos:end="71:22">||</operator> <name pos:start="71:24" pos:end="71:30">res_len</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="71:34" pos:end="71:37">8176</literal> <operator pos:start="71:39" pos:end="71:40">||</operator> <operator pos:start="71:42" pos:end="71:42">(</operator><name pos:start="71:43" pos:end="71:49">res_len</name> <operator pos:start="71:51" pos:end="71:51">%</operator> <literal type="number" pos:start="71:53" pos:end="71:53">8</literal> <operator pos:start="71:55" pos:end="71:56">!=</operator> <literal type="number" pos:start="71:58" pos:end="71:58">0</literal><operator pos:start="71:59" pos:end="71:59">)</operator></expr>)</condition> <block pos:start="71:62" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:17">

        <expr_stmt pos:start="73:9" pos:end="73:47"><expr pos:start="73:9" pos:end="73:46"><call pos:start="73:9" pos:end="73:46"><name pos:start="73:9" pos:end="73:25">program_interrupt</name><argument_list pos:start="73:26" pos:end="73:46">(<argument pos:start="73:27" pos:end="73:29"><expr pos:start="73:27" pos:end="73:29"><name pos:start="73:27" pos:end="73:29">env</name></expr></argument>, <argument pos:start="73:32" pos:end="73:42"><expr pos:start="73:32" pos:end="73:42"><name pos:start="73:32" pos:end="73:42">PGM_OPERAND</name></expr></argument>, <argument pos:start="73:45" pos:end="73:45"><expr pos:start="73:45" pos:end="73:45"><literal type="number" pos:start="73:45" pos:end="73:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:17">return <expr pos:start="75:16" pos:end="75:16"><literal type="number" pos:start="75:16" pos:end="75:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:35">(<expr pos:start="79:9" pos:end="79:34"><operator pos:start="79:9" pos:end="79:9">(</operator><name pos:start="79:10" pos:end="79:16">req_len</name> <operator pos:start="79:18" pos:end="79:18">+</operator> <name pos:start="79:20" pos:end="79:26">res_len</name><operator pos:start="79:27" pos:end="79:27">)</operator> <operator pos:start="79:29" pos:end="79:29">&gt;</operator> <literal type="number" pos:start="79:31" pos:end="79:34">8192</literal></expr>)</condition> <block pos:start="79:37" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:17">

        <expr_stmt pos:start="81:9" pos:end="81:47"><expr pos:start="81:9" pos:end="81:46"><call pos:start="81:9" pos:end="81:46"><name pos:start="81:9" pos:end="81:25">program_interrupt</name><argument_list pos:start="81:26" pos:end="81:46">(<argument pos:start="81:27" pos:end="81:29"><expr pos:start="81:27" pos:end="81:29"><name pos:start="81:27" pos:end="81:29">env</name></expr></argument>, <argument pos:start="81:32" pos:end="81:42"><expr pos:start="81:32" pos:end="81:42"><name pos:start="81:32" pos:end="81:42">PGM_OPERAND</name></expr></argument>, <argument pos:start="81:45" pos:end="81:45"><expr pos:start="81:45" pos:end="81:45"><literal type="number" pos:start="81:45" pos:end="81:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:17">return <expr pos:start="83:16" pos:end="83:16"><literal type="number" pos:start="83:16" pos:end="83:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="91:50">(<expr pos:start="89:9" pos:end="91:49"><call pos:start="89:9" pos:end="91:49"><name pos:start="89:9" pos:end="89:30">s390_cpu_virt_mem_read</name><argument_list pos:start="89:31" pos:end="91:49">(<argument pos:start="89:32" pos:end="89:34"><expr pos:start="89:32" pos:end="89:34"><name pos:start="89:32" pos:end="89:34">cpu</name></expr></argument>, <argument pos:start="89:37" pos:end="89:49"><expr pos:start="89:37" pos:end="89:49"><name pos:start="89:37" pos:end="89:49"><name pos:start="89:37" pos:end="89:39">env</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:45">regs</name><index pos:start="89:46" pos:end="89:49">[<expr pos:start="89:47" pos:end="89:48"><name pos:start="89:47" pos:end="89:48">r2</name></expr>]</index></name></expr></argument>, <argument pos:start="89:52" pos:end="89:53"><expr pos:start="89:52" pos:end="89:53"><name pos:start="89:52" pos:end="89:53">r2</name></expr></argument>, <argument pos:start="89:56" pos:end="89:61"><expr pos:start="89:56" pos:end="89:61"><name pos:start="89:56" pos:end="89:61">buffer</name></expr></argument>,

                               <argument pos:start="91:32" pos:end="91:48"><expr pos:start="91:32" pos:end="91:48"><name pos:start="91:32" pos:end="91:38">req_len</name> <operator pos:start="91:40" pos:end="91:40">+</operator> <name pos:start="91:42" pos:end="91:48">res_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:52" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:17">

        <return pos:start="93:9" pos:end="93:17">return <expr pos:start="93:16" pos:end="93:16"><literal type="number" pos:start="93:16" pos:end="93:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:22">(<expr pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:15">req_len</name> <operator pos:start="99:17" pos:end="99:18">!=</operator> <literal type="number" pos:start="99:20" pos:end="99:21">32</literal></expr>)</condition> <block pos:start="99:24" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:17">

        <expr_stmt pos:start="101:9" pos:end="101:38"><expr pos:start="101:9" pos:end="101:37"><call pos:start="101:9" pos:end="101:37"><name pos:start="101:9" pos:end="101:13">stw_p</name><argument_list pos:start="101:14" pos:end="101:37">(<argument pos:start="101:15" pos:end="101:24"><expr pos:start="101:15" pos:end="101:24"><operator pos:start="101:15" pos:end="101:15">&amp;</operator><name pos:start="101:16" pos:end="101:24"><name pos:start="101:16" pos:end="101:19">resh</name><operator pos:start="101:20" pos:end="101:21">-&gt;</operator><name pos:start="101:22" pos:end="101:24">rsp</name></name></expr></argument>, <argument pos:start="101:27" pos:end="101:36"><expr pos:start="101:27" pos:end="101:36"><name pos:start="101:27" pos:end="101:36">CLP_RC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:17">goto <name pos:start="103:14" pos:end="103:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="109:5" pos:end="279:5">switch <condition pos:start="109:12" pos:end="109:31">(<expr pos:start="109:13" pos:end="109:30"><call pos:start="109:13" pos:end="109:30"><name pos:start="109:13" pos:end="109:18">lduw_p</name><argument_list pos:start="109:19" pos:end="109:30">(<argument pos:start="109:20" pos:end="109:29"><expr pos:start="109:20" pos:end="109:29"><operator pos:start="109:20" pos:end="109:20">&amp;</operator><name pos:start="109:21" pos:end="109:29"><name pos:start="109:21" pos:end="109:24">reqh</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:29">cmd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:33" pos:end="279:5">{<block_content pos:start="111:5" pos:end="277:14">

    <case pos:start="111:5" pos:end="111:22">case <expr pos:start="111:10" pos:end="111:21"><name pos:start="111:10" pos:end="111:21">CLP_LIST_PCI</name></expr>:</case> <block pos:start="111:24" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:14">

        <decl_stmt pos:start="113:9" pos:end="113:59"><decl pos:start="113:9" pos:end="113:58"><type pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:24">ClpReqRspListPci</name> <modifier pos:start="113:26" pos:end="113:26">*</modifier></type><name pos:start="113:27" pos:end="113:29">rrb</name> <init pos:start="113:31" pos:end="113:58">= <expr pos:start="113:33" pos:end="113:58"><operator pos:start="113:33" pos:end="113:33">(</operator><name pos:start="113:34" pos:end="113:49">ClpReqRspListPci</name> <operator pos:start="113:51" pos:end="113:51">*</operator><operator pos:start="113:52" pos:end="113:52">)</operator><name pos:start="113:53" pos:end="113:58">buffer</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:27"><expr pos:start="115:9" pos:end="115:26"><call pos:start="115:9" pos:end="115:26"><name pos:start="115:9" pos:end="115:16">list_pci</name><argument_list pos:start="115:17" pos:end="115:26">(<argument pos:start="115:18" pos:end="115:20"><expr pos:start="115:18" pos:end="115:20"><name pos:start="115:18" pos:end="115:20">rrb</name></expr></argument>, <argument pos:start="115:23" pos:end="115:25"><expr pos:start="115:23" pos:end="115:25"><operator pos:start="115:23" pos:end="115:23">&amp;</operator><name pos:start="115:24" pos:end="115:25">cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    </block_content>}</block>

    <case pos:start="121:5" pos:end="121:24">case <expr pos:start="121:10" pos:end="121:23"><name pos:start="121:10" pos:end="121:23">CLP_SET_PCI_FN</name></expr>:</case> <block pos:start="121:26" pos:end="179:5">{<block_content pos:start="123:9" pos:end="177:14">

        <decl_stmt pos:start="123:9" pos:end="123:55"><decl pos:start="123:9" pos:end="123:54"><type pos:start="123:9" pos:end="123:22"><name pos:start="123:9" pos:end="123:20">ClpReqSetPci</name> <modifier pos:start="123:22" pos:end="123:22">*</modifier></type><name pos:start="123:23" pos:end="123:31">reqsetpci</name> <init pos:start="123:33" pos:end="123:54">= <expr pos:start="123:35" pos:end="123:54"><operator pos:start="123:35" pos:end="123:35">(</operator><name pos:start="123:36" pos:end="123:47">ClpReqSetPci</name> <operator pos:start="123:49" pos:end="123:49">*</operator><operator pos:start="123:50" pos:end="123:50">)</operator><name pos:start="123:51" pos:end="123:54">reqh</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="125:9" pos:end="125:55"><decl pos:start="125:9" pos:end="125:54"><type pos:start="125:9" pos:end="125:22"><name pos:start="125:9" pos:end="125:20">ClpRspSetPci</name> <modifier pos:start="125:22" pos:end="125:22">*</modifier></type><name pos:start="125:23" pos:end="125:31">ressetpci</name> <init pos:start="125:33" pos:end="125:54">= <expr pos:start="125:35" pos:end="125:54"><operator pos:start="125:35" pos:end="125:35">(</operator><name pos:start="125:36" pos:end="125:47">ClpRspSetPci</name> <operator pos:start="125:49" pos:end="125:49">*</operator><operator pos:start="125:50" pos:end="125:50">)</operator><name pos:start="125:51" pos:end="125:54">resh</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:63"><expr pos:start="129:9" pos:end="129:62"><name pos:start="129:9" pos:end="129:13">pbdev</name> <operator pos:start="129:15" pos:end="129:15">=</operator> <call pos:start="129:17" pos:end="129:62"><name pos:start="129:17" pos:end="129:39">s390_pci_find_dev_by_fh</name><argument_list pos:start="129:40" pos:end="129:62">(<argument pos:start="129:41" pos:end="129:61"><expr pos:start="129:41" pos:end="129:61"><call pos:start="129:41" pos:end="129:61"><name pos:start="129:41" pos:end="129:45">ldl_p</name><argument_list pos:start="129:46" pos:end="129:61">(<argument pos:start="129:47" pos:end="129:60"><expr pos:start="129:47" pos:end="129:60"><operator pos:start="129:47" pos:end="129:47">&amp;</operator><name pos:start="129:48" pos:end="129:60"><name pos:start="129:48" pos:end="129:56">reqsetpci</name><operator pos:start="129:57" pos:end="129:58">-&gt;</operator><name pos:start="129:59" pos:end="129:60">fh</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:19">(<expr pos:start="131:13" pos:end="131:18"><operator pos:start="131:13" pos:end="131:13">!</operator><name pos:start="131:14" pos:end="131:18">pbdev</name></expr>)</condition> <block pos:start="131:21" pos:end="137:9">{<block_content pos:start="133:17" pos:end="135:25">

                <expr_stmt pos:start="133:17" pos:end="133:63"><expr pos:start="133:17" pos:end="133:62"><call pos:start="133:17" pos:end="133:62"><name pos:start="133:17" pos:end="133:21">stw_p</name><argument_list pos:start="133:22" pos:end="133:62">(<argument pos:start="133:23" pos:end="133:41"><expr pos:start="133:23" pos:end="133:41"><operator pos:start="133:23" pos:end="133:23">&amp;</operator><name pos:start="133:24" pos:end="133:41"><name pos:start="133:24" pos:end="133:32">ressetpci</name><operator pos:start="133:33" pos:end="133:34">-&gt;</operator><name pos:start="133:35" pos:end="133:37">hdr</name><operator pos:start="133:38" pos:end="133:38">.</operator><name pos:start="133:39" pos:end="133:41">rsp</name></name></expr></argument>, <argument pos:start="133:44" pos:end="133:61"><expr pos:start="133:44" pos:end="133:61"><name pos:start="133:44" pos:end="133:61">CLP_RC_SETPCIFN_FH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="135:17" pos:end="135:25">goto <name pos:start="135:22" pos:end="135:24">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="141:9" pos:end="175:9">switch <condition pos:start="141:16" pos:end="141:30">(<expr pos:start="141:17" pos:end="141:29"><name pos:start="141:17" pos:end="141:29"><name pos:start="141:17" pos:end="141:25">reqsetpci</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:29">oc</name></name></expr>)</condition> <block pos:start="141:32" pos:end="175:9">{<block_content pos:start="143:9" pos:end="173:18">

        <case pos:start="143:9" pos:end="143:35">case <expr pos:start="143:14" pos:end="143:34"><name pos:start="143:14" pos:end="143:34">CLP_SET_ENABLE_PCI_FN</name></expr>:</case>

            <expr_stmt pos:start="145:13" pos:end="145:40"><expr pos:start="145:13" pos:end="145:39"><name pos:start="145:13" pos:end="145:21"><name pos:start="145:13" pos:end="145:17">pbdev</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:21">fh</name></name> <operator pos:start="145:23" pos:end="145:24">|=</operator> <name pos:start="145:26" pos:end="145:39">FH_MASK_ENABLE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:43"><expr pos:start="147:13" pos:end="147:42"><name pos:start="147:13" pos:end="147:24"><name pos:start="147:13" pos:end="147:17">pbdev</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:24">state</name></name> <operator pos:start="147:26" pos:end="147:26">=</operator> <name pos:start="147:28" pos:end="147:42">ZPCI_FS_ENABLED</name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:45"><expr pos:start="149:13" pos:end="149:44"><call pos:start="149:13" pos:end="149:44"><name pos:start="149:13" pos:end="149:17">stl_p</name><argument_list pos:start="149:18" pos:end="149:44">(<argument pos:start="149:19" pos:end="149:32"><expr pos:start="149:19" pos:end="149:32"><operator pos:start="149:19" pos:end="149:19">&amp;</operator><name pos:start="149:20" pos:end="149:32"><name pos:start="149:20" pos:end="149:28">ressetpci</name><operator pos:start="149:29" pos:end="149:30">-&gt;</operator><name pos:start="149:31" pos:end="149:32">fh</name></name></expr></argument>, <argument pos:start="149:35" pos:end="149:43"><expr pos:start="149:35" pos:end="149:43"><name pos:start="149:35" pos:end="149:43"><name pos:start="149:35" pos:end="149:39">pbdev</name><operator pos:start="149:40" pos:end="149:41">-&gt;</operator><name pos:start="149:42" pos:end="149:43">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:50"><expr pos:start="151:13" pos:end="151:49"><call pos:start="151:13" pos:end="151:49"><name pos:start="151:13" pos:end="151:17">stw_p</name><argument_list pos:start="151:18" pos:end="151:49">(<argument pos:start="151:19" pos:end="151:37"><expr pos:start="151:19" pos:end="151:37"><operator pos:start="151:19" pos:end="151:19">&amp;</operator><name pos:start="151:20" pos:end="151:37"><name pos:start="151:20" pos:end="151:28">ressetpci</name><operator pos:start="151:29" pos:end="151:30">-&gt;</operator><name pos:start="151:31" pos:end="151:33">hdr</name><operator pos:start="151:34" pos:end="151:34">.</operator><name pos:start="151:35" pos:end="151:37">rsp</name></name></expr></argument>, <argument pos:start="151:40" pos:end="151:48"><expr pos:start="151:40" pos:end="151:48"><name pos:start="151:40" pos:end="151:48">CLP_RC_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        <case pos:start="155:9" pos:end="155:36">case <expr pos:start="155:14" pos:end="155:35"><name pos:start="155:14" pos:end="155:35">CLP_SET_DISABLE_PCI_FN</name></expr>:</case>

            <expr_stmt pos:start="157:13" pos:end="157:41"><expr pos:start="157:13" pos:end="157:40"><name pos:start="157:13" pos:end="157:21"><name pos:start="157:13" pos:end="157:17">pbdev</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:21">fh</name></name> <operator pos:start="157:23" pos:end="157:24">&amp;=</operator> <operator pos:start="157:26" pos:end="157:26">~</operator><name pos:start="157:27" pos:end="157:40">FH_MASK_ENABLE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:44"><expr pos:start="159:13" pos:end="159:43"><name pos:start="159:13" pos:end="159:24"><name pos:start="159:13" pos:end="159:17">pbdev</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:24">state</name></name> <operator pos:start="159:26" pos:end="159:26">=</operator> <name pos:start="159:28" pos:end="159:43">ZPCI_FS_DISABLED</name></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:45"><expr pos:start="161:13" pos:end="161:44"><call pos:start="161:13" pos:end="161:44"><name pos:start="161:13" pos:end="161:17">stl_p</name><argument_list pos:start="161:18" pos:end="161:44">(<argument pos:start="161:19" pos:end="161:32"><expr pos:start="161:19" pos:end="161:32"><operator pos:start="161:19" pos:end="161:19">&amp;</operator><name pos:start="161:20" pos:end="161:32"><name pos:start="161:20" pos:end="161:28">ressetpci</name><operator pos:start="161:29" pos:end="161:30">-&gt;</operator><name pos:start="161:31" pos:end="161:32">fh</name></name></expr></argument>, <argument pos:start="161:35" pos:end="161:43"><expr pos:start="161:35" pos:end="161:43"><name pos:start="161:35" pos:end="161:43"><name pos:start="161:35" pos:end="161:39">pbdev</name><operator pos:start="161:40" pos:end="161:41">-&gt;</operator><name pos:start="161:42" pos:end="161:43">fh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:50"><expr pos:start="163:13" pos:end="163:49"><call pos:start="163:13" pos:end="163:49"><name pos:start="163:13" pos:end="163:17">stw_p</name><argument_list pos:start="163:18" pos:end="163:49">(<argument pos:start="163:19" pos:end="163:37"><expr pos:start="163:19" pos:end="163:37"><operator pos:start="163:19" pos:end="163:19">&amp;</operator><name pos:start="163:20" pos:end="163:37"><name pos:start="163:20" pos:end="163:28">ressetpci</name><operator pos:start="163:29" pos:end="163:30">-&gt;</operator><name pos:start="163:31" pos:end="163:33">hdr</name><operator pos:start="163:34" pos:end="163:34">.</operator><name pos:start="163:35" pos:end="163:37">rsp</name></name></expr></argument>, <argument pos:start="163:40" pos:end="163:48"><expr pos:start="163:40" pos:end="163:48"><name pos:start="163:40" pos:end="163:48">CLP_RC_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <default pos:start="167:9" pos:end="167:16">default:</default>

            <expr_stmt pos:start="169:13" pos:end="169:49"><expr pos:start="169:13" pos:end="169:48"><call pos:start="169:13" pos:end="169:48"><name pos:start="169:13" pos:end="169:19">DPRINTF</name><argument_list pos:start="169:20" pos:end="169:48">(<argument pos:start="169:21" pos:end="169:47"><expr pos:start="169:21" pos:end="169:47"><literal type="string" pos:start="169:21" pos:end="169:47">"unknown set pci command\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:61"><expr pos:start="171:13" pos:end="171:60"><call pos:start="171:13" pos:end="171:60"><name pos:start="171:13" pos:end="171:17">stw_p</name><argument_list pos:start="171:18" pos:end="171:60">(<argument pos:start="171:19" pos:end="171:37"><expr pos:start="171:19" pos:end="171:37"><operator pos:start="171:19" pos:end="171:19">&amp;</operator><name pos:start="171:20" pos:end="171:37"><name pos:start="171:20" pos:end="171:28">ressetpci</name><operator pos:start="171:29" pos:end="171:30">-&gt;</operator><name pos:start="171:31" pos:end="171:33">hdr</name><operator pos:start="171:34" pos:end="171:34">.</operator><name pos:start="171:35" pos:end="171:37">rsp</name></name></expr></argument>, <argument pos:start="171:40" pos:end="171:59"><expr pos:start="171:40" pos:end="171:59"><name pos:start="171:40" pos:end="171:59">CLP_RC_SETPCIFN_FHOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="177:9" pos:end="177:14">break;</break>

    </block_content>}</block>

    <case pos:start="181:5" pos:end="181:26">case <expr pos:start="181:10" pos:end="181:25"><name pos:start="181:10" pos:end="181:25">CLP_QUERY_PCI_FN</name></expr>:</case> <block pos:start="181:28" pos:end="245:5">{<block_content pos:start="183:9" pos:end="243:14">

        <decl_stmt pos:start="183:9" pos:end="183:58"><decl pos:start="183:9" pos:end="183:57"><type pos:start="183:9" pos:end="183:24"><name pos:start="183:9" pos:end="183:22">ClpReqQueryPci</name> <modifier pos:start="183:24" pos:end="183:24">*</modifier></type><name pos:start="183:25" pos:end="183:32">reqquery</name> <init pos:start="183:34" pos:end="183:57">= <expr pos:start="183:36" pos:end="183:57"><operator pos:start="183:36" pos:end="183:36">(</operator><name pos:start="183:37" pos:end="183:50">ClpReqQueryPci</name> <operator pos:start="183:52" pos:end="183:52">*</operator><operator pos:start="183:53" pos:end="183:53">)</operator><name pos:start="183:54" pos:end="183:57">reqh</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="185:9" pos:end="185:58"><decl pos:start="185:9" pos:end="185:57"><type pos:start="185:9" pos:end="185:24"><name pos:start="185:9" pos:end="185:22">ClpRspQueryPci</name> <modifier pos:start="185:24" pos:end="185:24">*</modifier></type><name pos:start="185:25" pos:end="185:32">resquery</name> <init pos:start="185:34" pos:end="185:57">= <expr pos:start="185:36" pos:end="185:57"><operator pos:start="185:36" pos:end="185:36">(</operator><name pos:start="185:37" pos:end="185:50">ClpRspQueryPci</name> <operator pos:start="185:52" pos:end="185:52">*</operator><operator pos:start="185:53" pos:end="185:53">)</operator><name pos:start="185:54" pos:end="185:57">resh</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="189:9" pos:end="189:62"><expr pos:start="189:9" pos:end="189:61"><name pos:start="189:9" pos:end="189:13">pbdev</name> <operator pos:start="189:15" pos:end="189:15">=</operator> <call pos:start="189:17" pos:end="189:61"><name pos:start="189:17" pos:end="189:39">s390_pci_find_dev_by_fh</name><argument_list pos:start="189:40" pos:end="189:61">(<argument pos:start="189:41" pos:end="189:60"><expr pos:start="189:41" pos:end="189:60"><call pos:start="189:41" pos:end="189:60"><name pos:start="189:41" pos:end="189:45">ldl_p</name><argument_list pos:start="189:46" pos:end="189:60">(<argument pos:start="189:47" pos:end="189:59"><expr pos:start="189:47" pos:end="189:59"><operator pos:start="189:47" pos:end="189:47">&amp;</operator><name pos:start="189:48" pos:end="189:59"><name pos:start="189:48" pos:end="189:55">reqquery</name><operator pos:start="189:56" pos:end="189:57">-&gt;</operator><name pos:start="189:58" pos:end="189:59">fh</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="199:9"><if pos:start="191:9" pos:end="199:9">if <condition pos:start="191:12" pos:end="191:19">(<expr pos:start="191:13" pos:end="191:18"><operator pos:start="191:13" pos:end="191:13">!</operator><name pos:start="191:14" pos:end="191:18">pbdev</name></expr>)</condition> <block pos:start="191:21" pos:end="199:9">{<block_content pos:start="193:13" pos:end="197:21">

            <expr_stmt pos:start="193:13" pos:end="193:46"><expr pos:start="193:13" pos:end="193:45"><call pos:start="193:13" pos:end="193:45"><name pos:start="193:13" pos:end="193:19">DPRINTF</name><argument_list pos:start="193:20" pos:end="193:45">(<argument pos:start="193:21" pos:end="193:44"><expr pos:start="193:21" pos:end="193:44"><literal type="string" pos:start="193:21" pos:end="193:44">"query pci no pci dev\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:58"><expr pos:start="195:13" pos:end="195:57"><call pos:start="195:13" pos:end="195:57"><name pos:start="195:13" pos:end="195:17">stw_p</name><argument_list pos:start="195:18" pos:end="195:57">(<argument pos:start="195:19" pos:end="195:36"><expr pos:start="195:19" pos:end="195:36"><operator pos:start="195:19" pos:end="195:19">&amp;</operator><name pos:start="195:20" pos:end="195:36"><name pos:start="195:20" pos:end="195:27">resquery</name><operator pos:start="195:28" pos:end="195:29">-&gt;</operator><name pos:start="195:30" pos:end="195:32">hdr</name><operator pos:start="195:33" pos:end="195:33">.</operator><name pos:start="195:34" pos:end="195:36">rsp</name></name></expr></argument>, <argument pos:start="195:39" pos:end="195:56"><expr pos:start="195:39" pos:end="195:56"><name pos:start="195:39" pos:end="195:56">CLP_RC_SETPCIFN_FH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="197:13" pos:end="197:21">goto <name pos:start="197:18" pos:end="197:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <for pos:start="203:9" pos:end="225:9">for <control pos:start="203:13" pos:end="203:43">(<init pos:start="203:14" pos:end="203:19"><expr pos:start="203:14" pos:end="203:18"><name pos:start="203:14" pos:end="203:14">i</name> <operator pos:start="203:16" pos:end="203:16">=</operator> <literal type="number" pos:start="203:18" pos:end="203:18">0</literal></expr>;</init> <condition pos:start="203:21" pos:end="203:38"><expr pos:start="203:21" pos:end="203:37"><name pos:start="203:21" pos:end="203:21">i</name> <operator pos:start="203:23" pos:end="203:23">&lt;</operator> <name pos:start="203:25" pos:end="203:37">PCI_BAR_COUNT</name></expr>;</condition> <incr pos:start="203:40" pos:end="203:42"><expr pos:start="203:40" pos:end="203:42"><name pos:start="203:40" pos:end="203:40">i</name><operator pos:start="203:41" pos:end="203:42">++</operator></expr></incr>)</control> <block pos:start="203:45" pos:end="225:9">{<block_content pos:start="205:13" pos:end="223:43">

            <decl_stmt pos:start="205:13" pos:end="207:46"><decl pos:start="205:13" pos:end="207:45"><type pos:start="205:13" pos:end="205:20"><name pos:start="205:13" pos:end="205:20">uint32_t</name></type> <name pos:start="205:22" pos:end="205:25">data</name> <init pos:start="205:27" pos:end="207:45">= <expr pos:start="205:29" pos:end="207:45"><call pos:start="205:29" pos:end="207:45"><name pos:start="205:29" pos:end="205:40">pci_get_long</name><argument_list pos:start="205:41" pos:end="207:45">(<argument pos:start="205:42" pos:end="207:44"><expr pos:start="205:42" pos:end="207:44"><name pos:start="205:42" pos:end="205:60"><name pos:start="205:42" pos:end="205:46">pbdev</name><operator pos:start="205:47" pos:end="205:48">-&gt;</operator><name pos:start="205:49" pos:end="205:52">pdev</name><operator pos:start="205:53" pos:end="205:54">-&gt;</operator><name pos:start="205:55" pos:end="205:60">config</name></name> <operator pos:start="205:62" pos:end="205:62">+</operator>

                <name pos:start="207:17" pos:end="207:34">PCI_BASE_ADDRESS_0</name> <operator pos:start="207:36" pos:end="207:36">+</operator> <operator pos:start="207:38" pos:end="207:38">(</operator><name pos:start="207:39" pos:end="207:39">i</name> <operator pos:start="207:41" pos:end="207:41">*</operator> <literal type="number" pos:start="207:43" pos:end="207:43">4</literal><operator pos:start="207:44" pos:end="207:44">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="211:13" pos:end="211:43"><expr pos:start="211:13" pos:end="211:42"><call pos:start="211:13" pos:end="211:42"><name pos:start="211:13" pos:end="211:17">stl_p</name><argument_list pos:start="211:18" pos:end="211:42">(<argument pos:start="211:19" pos:end="211:35"><expr pos:start="211:19" pos:end="211:35"><operator pos:start="211:19" pos:end="211:19">&amp;</operator><name pos:start="211:20" pos:end="211:35"><name pos:start="211:20" pos:end="211:27">resquery</name><operator pos:start="211:28" pos:end="211:29">-&gt;</operator><name pos:start="211:30" pos:end="211:32">bar</name><index pos:start="211:33" pos:end="211:35">[<expr pos:start="211:34" pos:end="211:34"><name pos:start="211:34" pos:end="211:34">i</name></expr>]</index></name></expr></argument>, <argument pos:start="211:38" pos:end="211:41"><expr pos:start="211:38" pos:end="211:41"><name pos:start="211:38" pos:end="211:41">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="215:79"><expr pos:start="213:13" pos:end="215:78"><name pos:start="213:13" pos:end="213:33"><name pos:start="213:13" pos:end="213:20">resquery</name><operator pos:start="213:21" pos:end="213:22">-&gt;</operator><name pos:start="213:23" pos:end="213:30">bar_size</name><index pos:start="213:31" pos:end="213:33">[<expr pos:start="213:32" pos:end="213:32"><name pos:start="213:32" pos:end="213:32">i</name></expr>]</index></name> <operator pos:start="213:35" pos:end="213:35">=</operator> <ternary pos:start="213:37" pos:end="215:78"><condition pos:start="213:37" pos:end="213:69"><expr pos:start="213:37" pos:end="213:67"><name pos:start="213:37" pos:end="213:62"><name pos:start="213:37" pos:end="213:41">pbdev</name><operator pos:start="213:42" pos:end="213:43">-&gt;</operator><name pos:start="213:44" pos:end="213:47">pdev</name><operator pos:start="213:48" pos:end="213:49">-&gt;</operator><name pos:start="213:50" pos:end="213:59">io_regions</name><index pos:start="213:60" pos:end="213:62">[<expr pos:start="213:61" pos:end="213:61"><name pos:start="213:61" pos:end="213:61">i</name></expr>]</index></name><operator pos:start="213:63" pos:end="213:63">.</operator><name pos:start="213:64" pos:end="213:67">size</name></expr> ?</condition><then pos:start="215:37" pos:end="215:74">

                                    <expr pos:start="215:37" pos:end="215:74"><call pos:start="215:37" pos:end="215:74"><name pos:start="215:37" pos:end="215:41">ctz64</name><argument_list pos:start="215:42" pos:end="215:74">(<argument pos:start="215:43" pos:end="215:73"><expr pos:start="215:43" pos:end="215:73"><name pos:start="215:43" pos:end="215:68"><name pos:start="215:43" pos:end="215:47">pbdev</name><operator pos:start="215:48" pos:end="215:49">-&gt;</operator><name pos:start="215:50" pos:end="215:53">pdev</name><operator pos:start="215:54" pos:end="215:55">-&gt;</operator><name pos:start="215:56" pos:end="215:65">io_regions</name><index pos:start="215:66" pos:end="215:68">[<expr pos:start="215:67" pos:end="215:67"><name pos:start="215:67" pos:end="215:67">i</name></expr>]</index></name><operator pos:start="215:69" pos:end="215:69">.</operator><name pos:start="215:70" pos:end="215:73">size</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="215:76" pos:end="215:78">: <expr pos:start="215:78" pos:end="215:78"><literal type="number" pos:start="215:78" pos:end="215:78">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="223:43"><expr pos:start="217:13" pos:end="223:42"><call pos:start="217:13" pos:end="223:42"><name pos:start="217:13" pos:end="217:19">DPRINTF</name><argument_list pos:start="217:20" pos:end="223:42">(<argument pos:start="217:21" pos:end="217:71"><expr pos:start="217:21" pos:end="217:71"><literal type="string" pos:start="217:21" pos:end="217:47">"bar %d addr 0x%x size 0x%"</literal> <name pos:start="217:49" pos:end="217:54">PRIx64</name> <literal type="string" pos:start="217:56" pos:end="217:71">"barsize 0x%x\n"</literal></expr></argument>, <argument pos:start="217:74" pos:end="217:74"><expr pos:start="217:74" pos:end="217:74"><name pos:start="217:74" pos:end="217:74">i</name></expr></argument>,

                    <argument pos:start="219:21" pos:end="219:44"><expr pos:start="219:21" pos:end="219:44"><call pos:start="219:21" pos:end="219:44"><name pos:start="219:21" pos:end="219:25">ldl_p</name><argument_list pos:start="219:26" pos:end="219:44">(<argument pos:start="219:27" pos:end="219:43"><expr pos:start="219:27" pos:end="219:43"><operator pos:start="219:27" pos:end="219:27">&amp;</operator><name pos:start="219:28" pos:end="219:43"><name pos:start="219:28" pos:end="219:35">resquery</name><operator pos:start="219:36" pos:end="219:37">-&gt;</operator><name pos:start="219:38" pos:end="219:40">bar</name><index pos:start="219:41" pos:end="219:43">[<expr pos:start="219:42" pos:end="219:42"><name pos:start="219:42" pos:end="219:42">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="221:21" pos:end="221:51"><expr pos:start="221:21" pos:end="221:51"><name pos:start="221:21" pos:end="221:46"><name pos:start="221:21" pos:end="221:25">pbdev</name><operator pos:start="221:26" pos:end="221:27">-&gt;</operator><name pos:start="221:28" pos:end="221:31">pdev</name><operator pos:start="221:32" pos:end="221:33">-&gt;</operator><name pos:start="221:34" pos:end="221:43">io_regions</name><index pos:start="221:44" pos:end="221:46">[<expr pos:start="221:45" pos:end="221:45"><name pos:start="221:45" pos:end="221:45">i</name></expr>]</index></name><operator pos:start="221:47" pos:end="221:47">.</operator><name pos:start="221:48" pos:end="221:51">size</name></expr></argument>,

                    <argument pos:start="223:21" pos:end="223:41"><expr pos:start="223:21" pos:end="223:41"><name pos:start="223:21" pos:end="223:41"><name pos:start="223:21" pos:end="223:28">resquery</name><operator pos:start="223:29" pos:end="223:30">-&gt;</operator><name pos:start="223:31" pos:end="223:38">bar_size</name><index pos:start="223:39" pos:end="223:41">[<expr pos:start="223:40" pos:end="223:40"><name pos:start="223:40" pos:end="223:40">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="229:9" pos:end="229:47"><expr pos:start="229:9" pos:end="229:46"><call pos:start="229:9" pos:end="229:46"><name pos:start="229:9" pos:end="229:13">stq_p</name><argument_list pos:start="229:14" pos:end="229:46">(<argument pos:start="229:15" pos:end="229:29"><expr pos:start="229:15" pos:end="229:29"><operator pos:start="229:15" pos:end="229:15">&amp;</operator><name pos:start="229:16" pos:end="229:29"><name pos:start="229:16" pos:end="229:23">resquery</name><operator pos:start="229:24" pos:end="229:25">-&gt;</operator><name pos:start="229:26" pos:end="229:29">sdma</name></name></expr></argument>, <argument pos:start="229:32" pos:end="229:45"><expr pos:start="229:32" pos:end="229:45"><name pos:start="229:32" pos:end="229:45">ZPCI_SDMA_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:47"><expr pos:start="231:9" pos:end="231:46"><call pos:start="231:9" pos:end="231:46"><name pos:start="231:9" pos:end="231:13">stq_p</name><argument_list pos:start="231:14" pos:end="231:46">(<argument pos:start="231:15" pos:end="231:29"><expr pos:start="231:15" pos:end="231:29"><operator pos:start="231:15" pos:end="231:15">&amp;</operator><name pos:start="231:16" pos:end="231:29"><name pos:start="231:16" pos:end="231:23">resquery</name><operator pos:start="231:24" pos:end="231:25">-&gt;</operator><name pos:start="231:26" pos:end="231:29">edma</name></name></expr></argument>, <argument pos:start="231:32" pos:end="231:45"><expr pos:start="231:32" pos:end="231:45"><name pos:start="231:32" pos:end="231:45">ZPCI_EDMA_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:42"><expr pos:start="233:9" pos:end="233:41"><call pos:start="233:9" pos:end="233:41"><name pos:start="233:9" pos:end="233:13">stl_p</name><argument_list pos:start="233:14" pos:end="233:41">(<argument pos:start="233:15" pos:end="233:28"><expr pos:start="233:15" pos:end="233:28"><operator pos:start="233:15" pos:end="233:15">&amp;</operator><name pos:start="233:16" pos:end="233:28"><name pos:start="233:16" pos:end="233:23">resquery</name><operator pos:start="233:24" pos:end="233:25">-&gt;</operator><name pos:start="233:26" pos:end="233:28">fid</name></name></expr></argument>, <argument pos:start="233:31" pos:end="233:40"><expr pos:start="233:31" pos:end="233:40"><name pos:start="233:31" pos:end="233:40"><name pos:start="233:31" pos:end="233:35">pbdev</name><operator pos:start="233:36" pos:end="233:37">-&gt;</operator><name pos:start="233:38" pos:end="233:40">fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:35"><expr pos:start="235:9" pos:end="235:34"><call pos:start="235:9" pos:end="235:34"><name pos:start="235:9" pos:end="235:13">stw_p</name><argument_list pos:start="235:14" pos:end="235:34">(<argument pos:start="235:15" pos:end="235:30"><expr pos:start="235:15" pos:end="235:30"><operator pos:start="235:15" pos:end="235:15">&amp;</operator><name pos:start="235:16" pos:end="235:30"><name pos:start="235:16" pos:end="235:23">resquery</name><operator pos:start="235:24" pos:end="235:25">-&gt;</operator><name pos:start="235:26" pos:end="235:30">pchid</name></name></expr></argument>, <argument pos:start="235:33" pos:end="235:33"><expr pos:start="235:33" pos:end="235:33"><literal type="number" pos:start="235:33" pos:end="235:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:32"><expr pos:start="237:9" pos:end="237:31"><call pos:start="237:9" pos:end="237:31"><name pos:start="237:9" pos:end="237:13">stw_p</name><argument_list pos:start="237:14" pos:end="237:31">(<argument pos:start="237:15" pos:end="237:27"><expr pos:start="237:15" pos:end="237:27"><operator pos:start="237:15" pos:end="237:15">&amp;</operator><name pos:start="237:16" pos:end="237:27"><name pos:start="237:16" pos:end="237:23">resquery</name><operator pos:start="237:24" pos:end="237:25">-&gt;</operator><name pos:start="237:26" pos:end="237:27">ug</name></name></expr></argument>, <argument pos:start="237:30" pos:end="237:30"><expr pos:start="237:30" pos:end="237:30"><literal type="number" pos:start="237:30" pos:end="237:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:42"><expr pos:start="239:9" pos:end="239:41"><call pos:start="239:9" pos:end="239:41"><name pos:start="239:9" pos:end="239:13">stl_p</name><argument_list pos:start="239:14" pos:end="239:41">(<argument pos:start="239:15" pos:end="239:28"><expr pos:start="239:15" pos:end="239:28"><operator pos:start="239:15" pos:end="239:15">&amp;</operator><name pos:start="239:16" pos:end="239:28"><name pos:start="239:16" pos:end="239:23">resquery</name><operator pos:start="239:24" pos:end="239:25">-&gt;</operator><name pos:start="239:26" pos:end="239:28">uid</name></name></expr></argument>, <argument pos:start="239:31" pos:end="239:40"><expr pos:start="239:31" pos:end="239:40"><name pos:start="239:31" pos:end="239:40"><name pos:start="239:31" pos:end="239:35">pbdev</name><operator pos:start="239:36" pos:end="239:37">-&gt;</operator><name pos:start="239:38" pos:end="239:40">fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:45"><expr pos:start="241:9" pos:end="241:44"><call pos:start="241:9" pos:end="241:44"><name pos:start="241:9" pos:end="241:13">stw_p</name><argument_list pos:start="241:14" pos:end="241:44">(<argument pos:start="241:15" pos:end="241:32"><expr pos:start="241:15" pos:end="241:32"><operator pos:start="241:15" pos:end="241:15">&amp;</operator><name pos:start="241:16" pos:end="241:32"><name pos:start="241:16" pos:end="241:23">resquery</name><operator pos:start="241:24" pos:end="241:25">-&gt;</operator><name pos:start="241:26" pos:end="241:28">hdr</name><operator pos:start="241:29" pos:end="241:29">.</operator><name pos:start="241:30" pos:end="241:32">rsp</name></name></expr></argument>, <argument pos:start="241:35" pos:end="241:43"><expr pos:start="241:35" pos:end="241:43"><name pos:start="241:35" pos:end="241:43">CLP_RC_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="243:9" pos:end="243:14">break;</break>

    </block_content>}</block>

    <case pos:start="247:5" pos:end="247:29">case <expr pos:start="247:10" pos:end="247:28"><name pos:start="247:10" pos:end="247:28">CLP_QUERY_PCI_FNGRP</name></expr>:</case> <block pos:start="247:31" pos:end="269:5">{<block_content pos:start="249:9" pos:end="267:14">

        <decl_stmt pos:start="249:9" pos:end="249:62"><decl pos:start="249:9" pos:end="249:61"><type pos:start="249:9" pos:end="249:27"><name pos:start="249:9" pos:end="249:25">ClpRspQueryPciGrp</name> <modifier pos:start="249:27" pos:end="249:27">*</modifier></type><name pos:start="249:28" pos:end="249:33">resgrp</name> <init pos:start="249:35" pos:end="249:61">= <expr pos:start="249:37" pos:end="249:61"><operator pos:start="249:37" pos:end="249:37">(</operator><name pos:start="249:38" pos:end="249:54">ClpRspQueryPciGrp</name> <operator pos:start="249:56" pos:end="249:56">*</operator><operator pos:start="249:57" pos:end="249:57">)</operator><name pos:start="249:58" pos:end="249:61">resh</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:23"><expr pos:start="251:9" pos:end="251:22"><name pos:start="251:9" pos:end="251:18"><name pos:start="251:9" pos:end="251:14">resgrp</name><operator pos:start="251:15" pos:end="251:16">-&gt;</operator><name pos:start="251:17" pos:end="251:18">fr</name></name> <operator pos:start="251:20" pos:end="251:20">=</operator> <literal type="number" pos:start="251:22" pos:end="251:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:32"><expr pos:start="253:9" pos:end="253:31"><call pos:start="253:9" pos:end="253:31"><name pos:start="253:9" pos:end="253:13">stq_p</name><argument_list pos:start="253:14" pos:end="253:31">(<argument pos:start="253:15" pos:end="253:27"><expr pos:start="253:15" pos:end="253:27"><operator pos:start="253:15" pos:end="253:15">&amp;</operator><name pos:start="253:16" pos:end="253:27"><name pos:start="253:16" pos:end="253:21">resgrp</name><operator pos:start="253:22" pos:end="253:23">-&gt;</operator><name pos:start="253:24" pos:end="253:27">dasm</name></name></expr></argument>, <argument pos:start="253:30" pos:end="253:30"><expr pos:start="253:30" pos:end="253:30"><literal type="number" pos:start="253:30" pos:end="253:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:44"><expr pos:start="255:9" pos:end="255:43"><call pos:start="255:9" pos:end="255:43"><name pos:start="255:9" pos:end="255:13">stq_p</name><argument_list pos:start="255:14" pos:end="255:43">(<argument pos:start="255:15" pos:end="255:27"><expr pos:start="255:15" pos:end="255:27"><operator pos:start="255:15" pos:end="255:15">&amp;</operator><name pos:start="255:16" pos:end="255:27"><name pos:start="255:16" pos:end="255:21">resgrp</name><operator pos:start="255:22" pos:end="255:23">-&gt;</operator><name pos:start="255:24" pos:end="255:27">msia</name></name></expr></argument>, <argument pos:start="255:30" pos:end="255:42"><expr pos:start="255:30" pos:end="255:42"><name pos:start="255:30" pos:end="255:42">ZPCI_MSI_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:31"><expr pos:start="257:9" pos:end="257:30"><call pos:start="257:9" pos:end="257:30"><name pos:start="257:9" pos:end="257:13">stw_p</name><argument_list pos:start="257:14" pos:end="257:30">(<argument pos:start="257:15" pos:end="257:26"><expr pos:start="257:15" pos:end="257:26"><operator pos:start="257:15" pos:end="257:15">&amp;</operator><name pos:start="257:16" pos:end="257:26"><name pos:start="257:16" pos:end="257:21">resgrp</name><operator pos:start="257:22" pos:end="257:23">-&gt;</operator><name pos:start="257:24" pos:end="257:26">mui</name></name></expr></argument>, <argument pos:start="257:29" pos:end="257:29"><expr pos:start="257:29" pos:end="257:29"><literal type="number" pos:start="257:29" pos:end="257:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:31"><expr pos:start="259:9" pos:end="259:30"><call pos:start="259:9" pos:end="259:30"><name pos:start="259:9" pos:end="259:13">stw_p</name><argument_list pos:start="259:14" pos:end="259:30">(<argument pos:start="259:15" pos:end="259:24"><expr pos:start="259:15" pos:end="259:24"><operator pos:start="259:15" pos:end="259:15">&amp;</operator><name pos:start="259:16" pos:end="259:24"><name pos:start="259:16" pos:end="259:21">resgrp</name><operator pos:start="259:22" pos:end="259:23">-&gt;</operator><name pos:start="259:24" pos:end="259:24">i</name></name></expr></argument>, <argument pos:start="259:27" pos:end="259:29"><expr pos:start="259:27" pos:end="259:29"><literal type="number" pos:start="259:27" pos:end="259:29">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:28"><expr pos:start="261:9" pos:end="261:27"><name pos:start="261:9" pos:end="261:23"><name pos:start="261:9" pos:end="261:14">resgrp</name><operator pos:start="261:15" pos:end="261:16">-&gt;</operator><name pos:start="261:17" pos:end="261:23">version</name></name> <operator pos:start="261:25" pos:end="261:25">=</operator> <literal type="number" pos:start="261:27" pos:end="261:27">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="265:9" pos:end="265:43"><expr pos:start="265:9" pos:end="265:42"><call pos:start="265:9" pos:end="265:42"><name pos:start="265:9" pos:end="265:13">stw_p</name><argument_list pos:start="265:14" pos:end="265:42">(<argument pos:start="265:15" pos:end="265:30"><expr pos:start="265:15" pos:end="265:30"><operator pos:start="265:15" pos:end="265:15">&amp;</operator><name pos:start="265:16" pos:end="265:30"><name pos:start="265:16" pos:end="265:21">resgrp</name><operator pos:start="265:22" pos:end="265:23">-&gt;</operator><name pos:start="265:24" pos:end="265:26">hdr</name><operator pos:start="265:27" pos:end="265:27">.</operator><name pos:start="265:28" pos:end="265:30">rsp</name></name></expr></argument>, <argument pos:start="265:33" pos:end="265:41"><expr pos:start="265:33" pos:end="265:41"><name pos:start="265:33" pos:end="265:41">CLP_RC_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="267:9" pos:end="267:14">break;</break>

    </block_content>}</block>

    <default pos:start="271:5" pos:end="271:12">default:</default>

        <expr_stmt pos:start="273:9" pos:end="273:41"><expr pos:start="273:9" pos:end="273:40"><call pos:start="273:9" pos:end="273:40"><name pos:start="273:9" pos:end="273:15">DPRINTF</name><argument_list pos:start="273:16" pos:end="273:40">(<argument pos:start="273:17" pos:end="273:39"><expr pos:start="273:17" pos:end="273:39"><literal type="string" pos:start="273:17" pos:end="273:39">"unknown clp command\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:38"><expr pos:start="275:9" pos:end="275:37"><call pos:start="275:9" pos:end="275:37"><name pos:start="275:9" pos:end="275:13">stw_p</name><argument_list pos:start="275:14" pos:end="275:37">(<argument pos:start="275:15" pos:end="275:24"><expr pos:start="275:15" pos:end="275:24"><operator pos:start="275:15" pos:end="275:15">&amp;</operator><name pos:start="275:16" pos:end="275:24"><name pos:start="275:16" pos:end="275:19">resh</name><operator pos:start="275:20" pos:end="275:21">-&gt;</operator><name pos:start="275:22" pos:end="275:24">rsp</name></name></expr></argument>, <argument pos:start="275:27" pos:end="275:36"><expr pos:start="275:27" pos:end="275:36"><name pos:start="275:27" pos:end="275:36">CLP_RC_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="277:9" pos:end="277:14">break;</break>

    </block_content>}</block></switch>



<label pos:start="283:1" pos:end="283:4"><name pos:start="283:1" pos:end="283:3">out</name>:</label>

    <if_stmt pos:start="285:5" pos:end="291:5"><if pos:start="285:5" pos:end="291:5">if <condition pos:start="285:8" pos:end="287:51">(<expr pos:start="285:9" pos:end="287:50"><call pos:start="285:9" pos:end="287:50"><name pos:start="285:9" pos:end="285:31">s390_cpu_virt_mem_write</name><argument_list pos:start="285:32" pos:end="287:50">(<argument pos:start="285:33" pos:end="285:35"><expr pos:start="285:33" pos:end="285:35"><name pos:start="285:33" pos:end="285:35">cpu</name></expr></argument>, <argument pos:start="285:38" pos:end="285:50"><expr pos:start="285:38" pos:end="285:50"><name pos:start="285:38" pos:end="285:50"><name pos:start="285:38" pos:end="285:40">env</name><operator pos:start="285:41" pos:end="285:42">-&gt;</operator><name pos:start="285:43" pos:end="285:46">regs</name><index pos:start="285:47" pos:end="285:50">[<expr pos:start="285:48" pos:end="285:49"><name pos:start="285:48" pos:end="285:49">r2</name></expr>]</index></name></expr></argument>, <argument pos:start="285:53" pos:end="285:54"><expr pos:start="285:53" pos:end="285:54"><name pos:start="285:53" pos:end="285:54">r2</name></expr></argument>, <argument pos:start="285:57" pos:end="285:62"><expr pos:start="285:57" pos:end="285:62"><name pos:start="285:57" pos:end="285:62">buffer</name></expr></argument>,

                                <argument pos:start="287:33" pos:end="287:49"><expr pos:start="287:33" pos:end="287:49"><name pos:start="287:33" pos:end="287:39">req_len</name> <operator pos:start="287:41" pos:end="287:41">+</operator> <name pos:start="287:43" pos:end="287:49">res_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="287:53" pos:end="291:5">{<block_content pos:start="289:9" pos:end="289:17">

        <return pos:start="289:9" pos:end="289:17">return <expr pos:start="289:16" pos:end="289:16"><literal type="number" pos:start="289:16" pos:end="289:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:19"><expr pos:start="293:5" pos:end="293:18"><call pos:start="293:5" pos:end="293:18"><name pos:start="293:5" pos:end="293:9">setcc</name><argument_list pos:start="293:10" pos:end="293:18">(<argument pos:start="293:11" pos:end="293:13"><expr pos:start="293:11" pos:end="293:13"><name pos:start="293:11" pos:end="293:13">cpu</name></expr></argument>, <argument pos:start="293:16" pos:end="293:17"><expr pos:start="293:16" pos:end="293:17"><name pos:start="293:16" pos:end="293:17">cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="295:5" pos:end="295:13">return <expr pos:start="295:12" pos:end="295:12"><literal type="number" pos:start="295:12" pos:end="295:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
