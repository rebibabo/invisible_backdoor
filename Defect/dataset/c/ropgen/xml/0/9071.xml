<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9071.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">spitz_common_init</name><parameter_list pos:start="1:30" pos:end="7:53">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:33">int</name></type> <name pos:start="1:35" pos:end="1:42">ram_size</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:60">vga_ram_size</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:32"><decl pos:start="3:17" pos:end="3:32"><type pos:start="3:17" pos:end="3:32"><name pos:start="3:17" pos:end="3:28">DisplayState</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:32">ds</name></decl></parameter>, <parameter pos:start="3:35" pos:end="3:61"><decl pos:start="3:35" pos:end="3:61"><type pos:start="3:35" pos:end="3:61"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:44">char</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:61">kernel_filename</name></decl></parameter>,

                <parameter pos:start="5:17" pos:end="5:42"><decl pos:start="5:17" pos:end="5:42"><type pos:start="5:17" pos:end="5:42"><specifier pos:start="5:17" pos:end="5:21">const</specifier> <name pos:start="5:23" pos:end="5:26">char</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:42">kernel_cmdline</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:71"><decl pos:start="5:45" pos:end="5:71"><type pos:start="5:45" pos:end="5:71"><specifier pos:start="5:45" pos:end="5:49">const</specifier> <name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:71">initrd_filename</name></decl></parameter>,

                <parameter pos:start="7:17" pos:end="7:40"><decl pos:start="7:17" pos:end="7:40"><type pos:start="7:17" pos:end="7:40"><name pos:start="7:17" pos:end="7:34"><name pos:start="7:17" pos:end="7:20">enum</name> <name pos:start="7:22" pos:end="7:34">spitz_model_e</name></name></type> <name pos:start="7:36" pos:end="7:40">model</name></decl></parameter>, <parameter pos:start="7:43" pos:end="7:52"><decl pos:start="7:43" pos:end="7:52"><type pos:start="7:43" pos:end="7:52"><name pos:start="7:43" pos:end="7:45">int</name></type> <name pos:start="7:47" pos:end="7:52">arm_id</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="97:1">{<block_content pos:start="11:5" pos:end="95:60">

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:22">spitz_ram</name> <init pos:start="11:24" pos:end="11:35">= <expr pos:start="11:26" pos:end="11:35"><literal type="number" pos:start="11:26" pos:end="11:35">0x04000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:22">spitz_rom</name> <init pos:start="13:24" pos:end="13:35">= <expr pos:start="13:26" pos:end="13:35"><literal type="number" pos:start="13:26" pos:end="13:35">0x00800000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:25">pxa2xx_state_s</name></name> <modifier pos:start="15:27" pos:end="15:27">*</modifier></type><name pos:start="15:28" pos:end="15:30">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:23">scoop_info_s</name></name> <modifier pos:start="17:25" pos:end="17:25">*</modifier></type><name pos:start="17:26" pos:end="17:28">scp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:60"><expr pos:start="21:5" pos:end="21:59"><name pos:start="21:5" pos:end="21:7">cpu</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:59"><name pos:start="21:11" pos:end="21:21">pxa270_init</name><argument_list pos:start="21:22" pos:end="21:59">(<argument pos:start="21:23" pos:end="21:24"><expr pos:start="21:23" pos:end="21:24"><name pos:start="21:23" pos:end="21:24">ds</name></expr></argument>, <argument pos:start="21:27" pos:end="21:58"><expr pos:start="21:27" pos:end="21:58"><ternary pos:start="21:27" pos:end="21:58"><condition pos:start="21:27" pos:end="21:46"><expr pos:start="21:27" pos:end="21:44"><operator pos:start="21:27" pos:end="21:27">(</operator><name pos:start="21:28" pos:end="21:32">model</name> <operator pos:start="21:34" pos:end="21:35">==</operator> <name pos:start="21:37" pos:end="21:43">terrier</name><operator pos:start="21:44" pos:end="21:44">)</operator></expr> ?</condition><then pos:start="21:48" pos:end="21:51"> <expr pos:start="21:48" pos:end="21:51"><literal type="string" pos:start="21:48" pos:end="21:51">"c5"</literal></expr> </then><else pos:start="21:53" pos:end="21:58">: <expr pos:start="21:55" pos:end="21:58"><literal type="string" pos:start="21:55" pos:end="21:58">"c0"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:22">/* Setup memory */</comment>

    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:41">(<expr pos:start="27:9" pos:end="27:40"><name pos:start="27:9" pos:end="27:16">ram_size</name> <operator pos:start="27:18" pos:end="27:18">&lt;</operator> <name pos:start="27:20" pos:end="27:28">spitz_ram</name> <operator pos:start="27:30" pos:end="27:30">+</operator> <name pos:start="27:32" pos:end="27:40">spitz_rom</name></expr>)</condition> <block pos:start="27:43" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:16">

        <expr_stmt pos:start="29:9" pos:end="31:47"><expr pos:start="29:9" pos:end="31:46"><call pos:start="29:9" pos:end="31:46"><name pos:start="29:9" pos:end="29:15">fprintf</name><argument_list pos:start="29:16" pos:end="31:46">(<argument pos:start="29:17" pos:end="29:22"><expr pos:start="29:17" pos:end="29:22"><name pos:start="29:17" pos:end="29:22">stderr</name></expr></argument>, <argument pos:start="29:25" pos:end="29:69"><expr pos:start="29:25" pos:end="29:69"><literal type="string" pos:start="29:25" pos:end="29:69">"This platform requires %i bytes of memory\n"</literal></expr></argument>,

                        <argument pos:start="31:25" pos:end="31:45"><expr pos:start="31:25" pos:end="31:45"><name pos:start="31:25" pos:end="31:33">spitz_ram</name> <operator pos:start="31:35" pos:end="31:35">+</operator> <name pos:start="31:37" pos:end="31:45">spitz_rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:16"><expr pos:start="33:9" pos:end="33:15"><call pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:12">exit</name><argument_list pos:start="33:13" pos:end="33:15">(<argument pos:start="33:14" pos:end="33:14"><expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:73"><expr pos:start="37:5" pos:end="37:72"><call pos:start="37:5" pos:end="37:72"><name pos:start="37:5" pos:end="37:32">cpu_register_physical_memory</name><argument_list pos:start="37:33" pos:end="37:72">(<argument pos:start="37:34" pos:end="37:48"><expr pos:start="37:34" pos:end="37:48"><name pos:start="37:34" pos:end="37:48">PXA2XX_RAM_BASE</name></expr></argument>, <argument pos:start="37:51" pos:end="37:59"><expr pos:start="37:51" pos:end="37:59"><name pos:start="37:51" pos:end="37:59">spitz_ram</name></expr></argument>, <argument pos:start="37:62" pos:end="37:71"><expr pos:start="37:62" pos:end="37:71"><name pos:start="37:62" pos:end="37:71">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:72"><expr pos:start="41:5" pos:end="41:71"><call pos:start="41:5" pos:end="41:71"><name pos:start="41:5" pos:end="41:21">sl_flash_register</name><argument_list pos:start="41:22" pos:end="41:71">(<argument pos:start="41:23" pos:end="41:25"><expr pos:start="41:23" pos:end="41:25"><name pos:start="41:23" pos:end="41:25">cpu</name></expr></argument>, <argument pos:start="41:28" pos:end="41:70"><expr pos:start="41:28" pos:end="41:70"><ternary pos:start="41:28" pos:end="41:70"><condition pos:start="41:28" pos:end="41:45"><expr pos:start="41:28" pos:end="41:43"><operator pos:start="41:28" pos:end="41:28">(</operator><name pos:start="41:29" pos:end="41:33">model</name> <operator pos:start="41:35" pos:end="41:36">==</operator> <name pos:start="41:38" pos:end="41:42">spitz</name><operator pos:start="41:43" pos:end="41:43">)</operator></expr> ?</condition><then pos:start="41:47" pos:end="41:56"> <expr pos:start="41:47" pos:end="41:56"><name pos:start="41:47" pos:end="41:56">FLASH_128M</name></expr> </then><else pos:start="41:58" pos:end="41:70">: <expr pos:start="41:60" pos:end="41:70"><name pos:start="41:60" pos:end="41:70">FLASH_1024M</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:71"><expr pos:start="45:5" pos:end="45:70"><call pos:start="45:5" pos:end="45:70"><name pos:start="45:5" pos:end="45:32">cpu_register_physical_memory</name><argument_list pos:start="45:33" pos:end="45:70">(<argument pos:start="45:34" pos:end="45:34"><expr pos:start="45:34" pos:end="45:34"><literal type="number" pos:start="45:34" pos:end="45:34">0</literal></expr></argument>, <argument pos:start="45:37" pos:end="45:45"><expr pos:start="45:37" pos:end="45:45"><name pos:start="45:37" pos:end="45:45">spitz_rom</name></expr></argument>, <argument pos:start="45:48" pos:end="45:69"><expr pos:start="45:48" pos:end="45:69"><name pos:start="45:48" pos:end="45:56">spitz_ram</name> <operator pos:start="45:58" pos:end="45:58">|</operator> <name pos:start="45:60" pos:end="45:69">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:27">/* Setup peripherals */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:33"><expr pos:start="51:5" pos:end="51:32"><call pos:start="51:5" pos:end="51:32"><name pos:start="51:5" pos:end="51:27">spitz_keyboard_register</name><argument_list pos:start="51:28" pos:end="51:32">(<argument pos:start="51:29" pos:end="51:31"><expr pos:start="51:29" pos:end="51:31"><name pos:start="51:29" pos:end="51:31">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:26"><expr pos:start="55:5" pos:end="55:25"><call pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:20">spitz_ssp_attach</name><argument_list pos:start="55:21" pos:end="55:25">(<argument pos:start="55:22" pos:end="55:24"><expr pos:start="55:22" pos:end="55:24"><name pos:start="55:22" pos:end="55:24">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:58"><expr pos:start="59:5" pos:end="59:57"><name pos:start="59:5" pos:end="59:7">scp</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:57"><name pos:start="59:11" pos:end="59:26">spitz_scoop_init</name><argument_list pos:start="59:27" pos:end="59:57">(<argument pos:start="59:28" pos:end="59:30"><expr pos:start="59:28" pos:end="59:30"><name pos:start="59:28" pos:end="59:30">cpu</name></expr></argument>, <argument pos:start="59:33" pos:end="59:56"><expr pos:start="59:33" pos:end="59:56"><ternary pos:start="59:33" pos:end="59:56"><condition pos:start="59:33" pos:end="59:50"><expr pos:start="59:33" pos:end="59:48"><operator pos:start="59:33" pos:end="59:33">(</operator><name pos:start="59:34" pos:end="59:38">model</name> <operator pos:start="59:40" pos:end="59:41">==</operator> <name pos:start="59:43" pos:end="59:47">akita</name><operator pos:start="59:48" pos:end="59:48">)</operator></expr> ?</condition><then pos:start="59:52" pos:end="59:52"> <expr pos:start="59:52" pos:end="59:52"><literal type="number" pos:start="59:52" pos:end="59:52">1</literal></expr> </then><else pos:start="59:54" pos:end="59:56">: <expr pos:start="59:56" pos:end="59:56"><literal type="number" pos:start="59:56" pos:end="59:56">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:63"><expr pos:start="63:5" pos:end="63:62"><call pos:start="63:5" pos:end="63:62"><name pos:start="63:5" pos:end="63:26">spitz_scoop_gpio_setup</name><argument_list pos:start="63:27" pos:end="63:62">(<argument pos:start="63:28" pos:end="63:30"><expr pos:start="63:28" pos:end="63:30"><name pos:start="63:28" pos:end="63:30">cpu</name></expr></argument>, <argument pos:start="63:33" pos:end="63:35"><expr pos:start="63:33" pos:end="63:35"><name pos:start="63:33" pos:end="63:35">scp</name></expr></argument>, <argument pos:start="63:38" pos:end="63:61"><expr pos:start="63:38" pos:end="63:61"><ternary pos:start="63:38" pos:end="63:61"><condition pos:start="63:38" pos:end="63:55"><expr pos:start="63:38" pos:end="63:53"><operator pos:start="63:38" pos:end="63:38">(</operator><name pos:start="63:39" pos:end="63:43">model</name> <operator pos:start="63:45" pos:end="63:46">==</operator> <name pos:start="63:48" pos:end="63:52">akita</name><operator pos:start="63:53" pos:end="63:53">)</operator></expr> ?</condition><then pos:start="63:57" pos:end="63:57"> <expr pos:start="63:57" pos:end="63:57"><literal type="number" pos:start="63:57" pos:end="63:57">1</literal></expr> </then><else pos:start="63:59" pos:end="63:61">: <expr pos:start="63:61" pos:end="63:61"><literal type="number" pos:start="63:61" pos:end="63:61">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:52"><expr pos:start="67:5" pos:end="67:51"><call pos:start="67:5" pos:end="67:51"><name pos:start="67:5" pos:end="67:20">spitz_gpio_setup</name><argument_list pos:start="67:21" pos:end="67:51">(<argument pos:start="67:22" pos:end="67:24"><expr pos:start="67:22" pos:end="67:24"><name pos:start="67:22" pos:end="67:24">cpu</name></expr></argument>, <argument pos:start="67:27" pos:end="67:50"><expr pos:start="67:27" pos:end="67:50"><ternary pos:start="67:27" pos:end="67:50"><condition pos:start="67:27" pos:end="67:44"><expr pos:start="67:27" pos:end="67:42"><operator pos:start="67:27" pos:end="67:27">(</operator><name pos:start="67:28" pos:end="67:32">model</name> <operator pos:start="67:34" pos:end="67:35">==</operator> <name pos:start="67:37" pos:end="67:41">akita</name><operator pos:start="67:42" pos:end="67:42">)</operator></expr> ?</condition><then pos:start="67:46" pos:end="67:46"> <expr pos:start="67:46" pos:end="67:46"><literal type="number" pos:start="67:46" pos:end="67:46">1</literal></expr> </then><else pos:start="67:48" pos:end="67:50">: <expr pos:start="67:50" pos:end="67:50"><literal type="number" pos:start="67:50" pos:end="67:50">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="81:37"><if pos:start="71:5" pos:end="75:37">if <condition pos:start="71:8" pos:end="71:25">(<expr pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:13">model</name> <operator pos:start="71:15" pos:end="71:16">==</operator> <name pos:start="71:18" pos:end="71:24">terrier</name></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:37"><block_content pos:start="75:9" pos:end="75:37">

        <comment type="block" pos:start="73:9" pos:end="73:71">/* A 6.0 GB microdrive is permanently sitting in CF slot 0.  */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:37"><expr pos:start="75:9" pos:end="75:36"><call pos:start="75:9" pos:end="75:36"><name pos:start="75:9" pos:end="75:31">spitz_microdrive_attach</name><argument_list pos:start="75:32" pos:end="75:36">(<argument pos:start="75:33" pos:end="75:35"><expr pos:start="75:33" pos:end="75:35"><name pos:start="75:33" pos:end="75:35">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="77:5" pos:end="81:37">else if <condition pos:start="77:13" pos:end="77:28">(<expr pos:start="77:14" pos:end="77:27"><name pos:start="77:14" pos:end="77:18">model</name> <operator pos:start="77:20" pos:end="77:21">!=</operator> <name pos:start="77:23" pos:end="77:27">akita</name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:37"><block_content pos:start="81:9" pos:end="81:37">

        <comment type="block" pos:start="79:9" pos:end="79:71">/* A 4.0 GB microdrive is permanently sitting in CF slot 0.  */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:37"><expr pos:start="81:9" pos:end="81:36"><call pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:31">spitz_microdrive_attach</name><argument_list pos:start="81:32" pos:end="81:36">(<argument pos:start="81:33" pos:end="81:35"><expr pos:start="81:33" pos:end="81:35"><name pos:start="81:33" pos:end="81:35">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:45">/* Setup initial (reset) machine state */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:41"><expr pos:start="87:5" pos:end="87:40"><name pos:start="87:5" pos:end="87:22"><name pos:start="87:5" pos:end="87:7">cpu</name><operator pos:start="87:8" pos:end="87:9">-&gt;</operator><name pos:start="87:10" pos:end="87:12">env</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:18">regs</name><index pos:start="87:19" pos:end="87:22">[<expr pos:start="87:20" pos:end="87:21"><literal type="number" pos:start="87:20" pos:end="87:21">15</literal></expr>]</index></name> <operator pos:start="87:24" pos:end="87:24">=</operator> <name pos:start="87:26" pos:end="87:40">PXA2XX_RAM_BASE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="93:62"><expr pos:start="91:5" pos:end="93:61"><call pos:start="91:5" pos:end="93:61"><name pos:start="91:5" pos:end="91:19">arm_load_kernel</name><argument_list pos:start="91:20" pos:end="93:61">(<argument pos:start="91:21" pos:end="91:28"><expr pos:start="91:21" pos:end="91:28"><name pos:start="91:21" pos:end="91:28"><name pos:start="91:21" pos:end="91:23">cpu</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:28">env</name></name></expr></argument>, <argument pos:start="91:31" pos:end="91:38"><expr pos:start="91:31" pos:end="91:38"><name pos:start="91:31" pos:end="91:38">ram_size</name></expr></argument>, <argument pos:start="91:41" pos:end="91:55"><expr pos:start="91:41" pos:end="91:55"><name pos:start="91:41" pos:end="91:55">kernel_filename</name></expr></argument>, <argument pos:start="91:58" pos:end="91:71"><expr pos:start="91:58" pos:end="91:71"><name pos:start="91:58" pos:end="91:71">kernel_cmdline</name></expr></argument>,

                    <argument pos:start="93:21" pos:end="93:35"><expr pos:start="93:21" pos:end="93:35"><name pos:start="93:21" pos:end="93:35">initrd_filename</name></expr></argument>, <argument pos:start="93:38" pos:end="93:43"><expr pos:start="93:38" pos:end="93:43"><name pos:start="93:38" pos:end="93:43">arm_id</name></expr></argument>, <argument pos:start="93:46" pos:end="93:60"><expr pos:start="93:46" pos:end="93:60"><name pos:start="93:46" pos:end="93:60">PXA2XX_RAM_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:60"><expr pos:start="95:5" pos:end="95:59"><call pos:start="95:5" pos:end="95:59"><name pos:start="95:5" pos:end="95:22">sl_bootparam_write</name><argument_list pos:start="95:23" pos:end="95:59">(<argument pos:start="95:24" pos:end="95:58"><expr pos:start="95:24" pos:end="95:58"><name pos:start="95:24" pos:end="95:40">SL_PXA_PARAM_BASE</name> <operator pos:start="95:42" pos:end="95:42">-</operator> <name pos:start="95:44" pos:end="95:58">PXA2XX_RAM_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
