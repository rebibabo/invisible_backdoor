<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18369.c" pos:tabs="8"><function pos:start="1:1" pos:end="285:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">encode_block</name><parameter_list pos:start="1:24" pos:end="1:146">(<parameter pos:start="1:25" pos:end="1:38"><decl pos:start="1:25" pos:end="1:38"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:35">SVQ1Context</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:47">uint8_t</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">src</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:61">uint8_t</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">ref</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:84"><decl pos:start="1:69" pos:end="1:84"><type pos:start="1:69" pos:end="1:84"><name pos:start="1:69" pos:end="1:75">uint8_t</name> <modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:84">decoded</name></decl></parameter>, <parameter pos:start="1:87" pos:end="1:96"><decl pos:start="1:87" pos:end="1:96"><type pos:start="1:87" pos:end="1:96"><name pos:start="1:87" pos:end="1:89">int</name></type> <name pos:start="1:91" pos:end="1:96">stride</name></decl></parameter>, <parameter pos:start="1:99" pos:end="1:107"><decl pos:start="1:99" pos:end="1:107"><type pos:start="1:99" pos:end="1:107"><name pos:start="1:99" pos:end="1:101">int</name></type> <name pos:start="1:103" pos:end="1:107">level</name></decl></parameter>, <parameter pos:start="1:110" pos:end="1:122"><decl pos:start="1:110" pos:end="1:122"><type pos:start="1:110" pos:end="1:122"><name pos:start="1:110" pos:end="1:112">int</name></type> <name pos:start="1:114" pos:end="1:122">threshold</name></decl></parameter>, <parameter pos:start="1:125" pos:end="1:134"><decl pos:start="1:125" pos:end="1:134"><type pos:start="1:125" pos:end="1:134"><name pos:start="1:125" pos:end="1:127">int</name></type> <name pos:start="1:129" pos:end="1:134">lambda</name></decl></parameter>, <parameter pos:start="1:137" pos:end="1:145"><decl pos:start="1:137" pos:end="1:145"><type pos:start="1:137" pos:end="1:145"><name pos:start="1:137" pos:end="1:139">int</name></type> <name pos:start="1:141" pos:end="1:145">intra</name></decl></parameter>)</parameter_list><block pos:start="1:147" pos:end="285:1">{<block_content pos:start="3:5" pos:end="283:22">

    <decl_stmt pos:start="3:5" pos:end="3:68"><decl pos:start="3:5" pos:end="3:13"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:13">count</name></decl>, <decl pos:start="3:16" pos:end="3:16"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:16" pos:end="3:16">y</name></decl>, <decl pos:start="3:19" pos:end="3:19"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:19" pos:end="3:19">x</name></decl>, <decl pos:start="3:22" pos:end="3:22"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:22" pos:end="3:22">i</name></decl>, <decl pos:start="3:25" pos:end="3:25"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:25" pos:end="3:25">j</name></decl>, <decl pos:start="3:28" pos:end="3:32"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:28" pos:end="3:32">split</name></decl>, <decl pos:start="3:35" pos:end="3:43"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:35" pos:end="3:43">best_mean</name></decl>, <decl pos:start="3:46" pos:end="3:55"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:46" pos:end="3:55">best_score</name></decl>, <decl pos:start="3:58" pos:end="3:67"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:58" pos:end="3:67">best_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:19">best_vector</name><index pos:start="5:20" pos:end="5:22">[<expr pos:start="5:21" pos:end="5:21"><literal type="number" pos:start="5:21" pos:end="5:21">6</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:20"><name pos:start="7:9" pos:end="7:17">block_sum</name><index pos:start="7:18" pos:end="7:20">[<expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">7</literal></expr>]</index></name><init pos:start="7:21" pos:end="7:40">= <expr pos:start="7:23" pos:end="7:40"><block pos:start="7:23" pos:end="7:40">{<expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">0</literal></expr>, <expr pos:start="7:27" pos:end="7:27"><literal type="number" pos:start="7:27" pos:end="7:27">0</literal></expr>, <expr pos:start="7:30" pos:end="7:30"><literal type="number" pos:start="7:30" pos:end="7:30">0</literal></expr>, <expr pos:start="7:33" pos:end="7:33"><literal type="number" pos:start="7:33" pos:end="7:33">0</literal></expr>, <expr pos:start="7:36" pos:end="7:36"><literal type="number" pos:start="7:36" pos:end="7:36">0</literal></expr>, <expr pos:start="7:39" pos:end="7:39"><literal type="number" pos:start="7:39" pos:end="7:39">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">w</name><init pos:start="9:10" pos:end="9:28">= <expr pos:start="9:12" pos:end="9:28"><literal type="number" pos:start="9:12" pos:end="9:12">2</literal><operator pos:start="9:13" pos:end="9:14">&lt;&lt;</operator><operator pos:start="9:15" pos:end="9:15">(</operator><operator pos:start="9:16" pos:end="9:16">(</operator><name pos:start="9:17" pos:end="9:21">level</name><operator pos:start="9:22" pos:end="9:22">+</operator><literal type="number" pos:start="9:23" pos:end="9:23">2</literal><operator pos:start="9:24" pos:end="9:24">)</operator><operator pos:start="9:25" pos:end="9:26">&gt;&gt;</operator><literal type="number" pos:start="9:27" pos:end="9:27">1</literal><operator pos:start="9:28" pos:end="9:28">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">h</name><init pos:start="11:10" pos:end="11:28">= <expr pos:start="11:12" pos:end="11:28"><literal type="number" pos:start="11:12" pos:end="11:12">2</literal><operator pos:start="11:13" pos:end="11:14">&lt;&lt;</operator><operator pos:start="11:15" pos:end="11:15">(</operator><operator pos:start="11:16" pos:end="11:16">(</operator><name pos:start="11:17" pos:end="11:21">level</name><operator pos:start="11:22" pos:end="11:22">+</operator><literal type="number" pos:start="11:23" pos:end="11:23">1</literal><operator pos:start="11:24" pos:end="11:24">)</operator><operator pos:start="11:25" pos:end="11:26">&gt;&gt;</operator><literal type="number" pos:start="11:27" pos:end="11:27">1</literal><operator pos:start="11:28" pos:end="11:28">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">size</name><init pos:start="13:13" pos:end="13:16">=<expr pos:start="13:14" pos:end="13:16"><name pos:start="13:14" pos:end="13:14">w</name><operator pos:start="13:15" pos:end="13:15">*</operator><name pos:start="13:16" pos:end="13:16">h</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int16_t</name></type> <name pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:17">block</name><index pos:start="15:18" pos:end="15:20">[<expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">7</literal></expr>]</index><index pos:start="15:21" pos:end="15:25">[<expr pos:start="15:22" pos:end="15:24"><literal type="number" pos:start="15:22" pos:end="15:24">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:18"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:16">int8_t</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:30">codebook_sum</name></decl>, <decl pos:start="17:33" pos:end="17:41"><type ref="prev" pos:start="17:5" pos:end="17:18"><modifier pos:start="17:33" pos:end="17:33">*</modifier></type><name pos:start="17:34" pos:end="17:41">codebook</name></decl>;</decl_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:34"><expr pos:start="19:5" pos:end="19:33"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <call pos:start="19:11" pos:end="19:30"><name pos:start="19:11" pos:end="19:18">uint16_t</name> <argument_list pos:start="19:20" pos:end="19:30">(<argument pos:start="19:21" pos:end="19:29"><expr pos:start="19:21" pos:end="19:29"><operator pos:start="19:21" pos:end="19:21">*</operator><name pos:start="19:22" pos:end="19:29">mean_vlc</name></expr></argument>)</argument_list></call><index pos:start="19:31" pos:end="19:33">[<expr pos:start="19:32" pos:end="19:32"><literal type="number" pos:start="19:32" pos:end="19:32">2</literal></expr>]</index></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:39"><expr pos:start="21:5" pos:end="21:38"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <call pos:start="21:11" pos:end="21:35"><name pos:start="21:11" pos:end="21:17">uint8_t</name> <argument_list pos:start="21:19" pos:end="21:35">(<argument pos:start="21:20" pos:end="21:34"><expr pos:start="21:20" pos:end="21:34"><operator pos:start="21:20" pos:end="21:20">*</operator><name pos:start="21:21" pos:end="21:34">multistage_vlc</name></expr></argument>)</argument_list></call><index pos:start="21:36" pos:end="21:38">[<expr pos:start="21:37" pos:end="21:37"><literal type="number" pos:start="21:37" pos:end="21:37">2</literal></expr>]</index></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:14">best_score</name><operator pos:start="25:15" pos:end="25:15">=</operator><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="27:5" pos:end="27:64">//FIXME optimize, this doenst need to be done multiple times</comment>

    <if_stmt pos:start="29:5" pos:end="81:5"><if pos:start="29:5" pos:end="55:5">if<condition pos:start="29:7" pos:end="29:13">(<expr pos:start="29:8" pos:end="29:12"><name pos:start="29:8" pos:end="29:12">intra</name></expr>)</condition><block pos:start="29:14" pos:end="55:5">{<block_content pos:start="31:9" pos:end="53:9">

        <expr_stmt pos:start="31:9" pos:end="31:53"><expr pos:start="31:9" pos:end="31:52"><name pos:start="31:9" pos:end="31:20">codebook_sum</name><operator pos:start="31:21" pos:end="31:21">=</operator> <name pos:start="31:23" pos:end="31:52"><name pos:start="31:23" pos:end="31:45">svq1_intra_codebook_sum</name><index pos:start="31:46" pos:end="31:52">[<expr pos:start="31:47" pos:end="31:51"><name pos:start="31:47" pos:end="31:51">level</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:16">codebook</name><operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:45"><name pos:start="33:19" pos:end="33:38">svq1_intra_codebooks</name><index pos:start="33:39" pos:end="33:45">[<expr pos:start="33:40" pos:end="33:44"><name pos:start="33:40" pos:end="33:44">level</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:38"><expr pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:16">mean_vlc</name><operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:37">svq1_intra_mean_vlc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:57"><expr pos:start="37:9" pos:end="37:56"><name pos:start="37:9" pos:end="37:22">multistage_vlc</name><operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:56"><name pos:start="37:25" pos:end="37:49">svq1_intra_multistage_vlc</name><index pos:start="37:50" pos:end="37:56">[<expr pos:start="37:51" pos:end="37:55"><name pos:start="37:51" pos:end="37:55">level</name></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="39:9" pos:end="53:9">for<control pos:start="39:12" pos:end="39:26">(<init pos:start="39:13" pos:end="39:16"><expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:13">y</name><operator pos:start="39:14" pos:end="39:14">=</operator><literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>;</init> <condition pos:start="39:18" pos:end="39:21"><expr pos:start="39:18" pos:end="39:20"><name pos:start="39:18" pos:end="39:18">y</name><operator pos:start="39:19" pos:end="39:19">&lt;</operator><name pos:start="39:20" pos:end="39:20">h</name></expr>;</condition> <incr pos:start="39:23" pos:end="39:25"><expr pos:start="39:23" pos:end="39:25"><name pos:start="39:23" pos:end="39:23">y</name><operator pos:start="39:24" pos:end="39:25">++</operator></expr></incr>)</control><block pos:start="39:27" pos:end="53:9">{<block_content pos:start="41:13" pos:end="51:13">

            <for pos:start="41:13" pos:end="51:13">for<control pos:start="41:16" pos:end="41:30">(<init pos:start="41:17" pos:end="41:20"><expr pos:start="41:17" pos:end="41:19"><name pos:start="41:17" pos:end="41:17">x</name><operator pos:start="41:18" pos:end="41:18">=</operator><literal type="number" pos:start="41:19" pos:end="41:19">0</literal></expr>;</init> <condition pos:start="41:22" pos:end="41:25"><expr pos:start="41:22" pos:end="41:24"><name pos:start="41:22" pos:end="41:22">x</name><operator pos:start="41:23" pos:end="41:23">&lt;</operator><name pos:start="41:24" pos:end="41:24">w</name></expr>;</condition> <incr pos:start="41:27" pos:end="41:29"><expr pos:start="41:27" pos:end="41:29"><name pos:start="41:27" pos:end="41:27">x</name><operator pos:start="41:28" pos:end="41:29">++</operator></expr></incr>)</control><block pos:start="41:31" pos:end="51:13">{<block_content pos:start="43:17" pos:end="49:34">

                <decl_stmt pos:start="43:17" pos:end="43:41"><decl pos:start="43:17" pos:end="43:40"><type pos:start="43:17" pos:end="43:19"><name pos:start="43:17" pos:end="43:19">int</name></type> <name pos:start="43:21" pos:end="43:21">v</name><init pos:start="43:22" pos:end="43:40">= <expr pos:start="43:24" pos:end="43:40"><name pos:start="43:24" pos:end="43:40"><name pos:start="43:24" pos:end="43:26">src</name><index pos:start="43:27" pos:end="43:40">[<expr pos:start="43:28" pos:end="43:39"><name pos:start="43:28" pos:end="43:28">x</name> <operator pos:start="43:30" pos:end="43:30">+</operator> <name pos:start="43:32" pos:end="43:32">y</name><operator pos:start="43:33" pos:end="43:33">*</operator><name pos:start="43:34" pos:end="43:39">stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:37"><expr pos:start="45:17" pos:end="45:36"><name pos:start="45:17" pos:end="45:33"><name pos:start="45:17" pos:end="45:21">block</name><index pos:start="45:22" pos:end="45:24">[<expr pos:start="45:23" pos:end="45:23"><literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>]</index><index pos:start="45:25" pos:end="45:33">[<expr pos:start="45:26" pos:end="45:32"><name pos:start="45:26" pos:end="45:26">x</name> <operator pos:start="45:28" pos:end="45:28">+</operator> <name pos:start="45:30" pos:end="45:30">w</name><operator pos:start="45:31" pos:end="45:31">*</operator><name pos:start="45:32" pos:end="45:32">y</name></expr>]</index></name><operator pos:start="45:34" pos:end="45:34">=</operator> <name pos:start="45:36" pos:end="45:36">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:34"><expr pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:26">best_score</name> <operator pos:start="47:28" pos:end="47:29">+=</operator> <name pos:start="47:31" pos:end="47:31">v</name><operator pos:start="47:32" pos:end="47:32">*</operator><name pos:start="47:33" pos:end="47:33">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:34"><expr pos:start="49:17" pos:end="49:33"><name pos:start="49:17" pos:end="49:28"><name pos:start="49:17" pos:end="49:25">block_sum</name><index pos:start="49:26" pos:end="49:28">[<expr pos:start="49:27" pos:end="49:27"><literal type="number" pos:start="49:27" pos:end="49:27">0</literal></expr>]</index></name> <operator pos:start="49:30" pos:end="49:31">+=</operator> <name pos:start="49:33" pos:end="49:33">v</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if><else pos:start="55:6" pos:end="81:5">else<block pos:start="55:10" pos:end="81:5">{<block_content pos:start="57:9" pos:end="79:9">

        <expr_stmt pos:start="57:9" pos:end="57:53"><expr pos:start="57:9" pos:end="57:52"><name pos:start="57:9" pos:end="57:20">codebook_sum</name><operator pos:start="57:21" pos:end="57:21">=</operator> <name pos:start="57:23" pos:end="57:52"><name pos:start="57:23" pos:end="57:45">svq1_inter_codebook_sum</name><index pos:start="57:46" pos:end="57:52">[<expr pos:start="57:47" pos:end="57:51"><name pos:start="57:47" pos:end="57:51">level</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:46"><expr pos:start="59:9" pos:end="59:45"><name pos:start="59:9" pos:end="59:16">codebook</name><operator pos:start="59:17" pos:end="59:17">=</operator> <name pos:start="59:19" pos:end="59:45"><name pos:start="59:19" pos:end="59:38">svq1_inter_codebooks</name><index pos:start="59:39" pos:end="59:45">[<expr pos:start="59:40" pos:end="59:44"><name pos:start="59:40" pos:end="59:44">level</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:44"><expr pos:start="61:9" pos:end="61:43"><name pos:start="61:9" pos:end="61:16">mean_vlc</name><operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:37">svq1_inter_mean_vlc</name> <operator pos:start="61:39" pos:end="61:39">+</operator> <literal type="number" pos:start="61:41" pos:end="61:43">256</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:57"><expr pos:start="63:9" pos:end="63:56"><name pos:start="63:9" pos:end="63:22">multistage_vlc</name><operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:56"><name pos:start="63:25" pos:end="63:49">svq1_inter_multistage_vlc</name><index pos:start="63:50" pos:end="63:56">[<expr pos:start="63:51" pos:end="63:55"><name pos:start="63:51" pos:end="63:55">level</name></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="65:9" pos:end="79:9">for<control pos:start="65:12" pos:end="65:26">(<init pos:start="65:13" pos:end="65:16"><expr pos:start="65:13" pos:end="65:15"><name pos:start="65:13" pos:end="65:13">y</name><operator pos:start="65:14" pos:end="65:14">=</operator><literal type="number" pos:start="65:15" pos:end="65:15">0</literal></expr>;</init> <condition pos:start="65:18" pos:end="65:21"><expr pos:start="65:18" pos:end="65:20"><name pos:start="65:18" pos:end="65:18">y</name><operator pos:start="65:19" pos:end="65:19">&lt;</operator><name pos:start="65:20" pos:end="65:20">h</name></expr>;</condition> <incr pos:start="65:23" pos:end="65:25"><expr pos:start="65:23" pos:end="65:25"><name pos:start="65:23" pos:end="65:23">y</name><operator pos:start="65:24" pos:end="65:25">++</operator></expr></incr>)</control><block pos:start="65:27" pos:end="79:9">{<block_content pos:start="67:13" pos:end="77:13">

            <for pos:start="67:13" pos:end="77:13">for<control pos:start="67:16" pos:end="67:30">(<init pos:start="67:17" pos:end="67:20"><expr pos:start="67:17" pos:end="67:19"><name pos:start="67:17" pos:end="67:17">x</name><operator pos:start="67:18" pos:end="67:18">=</operator><literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>;</init> <condition pos:start="67:22" pos:end="67:25"><expr pos:start="67:22" pos:end="67:24"><name pos:start="67:22" pos:end="67:22">x</name><operator pos:start="67:23" pos:end="67:23">&lt;</operator><name pos:start="67:24" pos:end="67:24">w</name></expr>;</condition> <incr pos:start="67:27" pos:end="67:29"><expr pos:start="67:27" pos:end="67:29"><name pos:start="67:27" pos:end="67:27">x</name><operator pos:start="67:28" pos:end="67:29">++</operator></expr></incr>)</control><block pos:start="67:31" pos:end="77:13">{<block_content pos:start="69:17" pos:end="75:34">

                <decl_stmt pos:start="69:17" pos:end="69:61"><decl pos:start="69:17" pos:end="69:60"><type pos:start="69:17" pos:end="69:19"><name pos:start="69:17" pos:end="69:19">int</name></type> <name pos:start="69:21" pos:end="69:21">v</name><init pos:start="69:22" pos:end="69:60">= <expr pos:start="69:24" pos:end="69:60"><name pos:start="69:24" pos:end="69:40"><name pos:start="69:24" pos:end="69:26">src</name><index pos:start="69:27" pos:end="69:40">[<expr pos:start="69:28" pos:end="69:39"><name pos:start="69:28" pos:end="69:28">x</name> <operator pos:start="69:30" pos:end="69:30">+</operator> <name pos:start="69:32" pos:end="69:32">y</name><operator pos:start="69:33" pos:end="69:33">*</operator><name pos:start="69:34" pos:end="69:39">stride</name></expr>]</index></name> <operator pos:start="69:42" pos:end="69:42">-</operator> <name pos:start="69:44" pos:end="69:60"><name pos:start="69:44" pos:end="69:46">ref</name><index pos:start="69:47" pos:end="69:60">[<expr pos:start="69:48" pos:end="69:59"><name pos:start="69:48" pos:end="69:48">x</name> <operator pos:start="69:50" pos:end="69:50">+</operator> <name pos:start="69:52" pos:end="69:52">y</name><operator pos:start="69:53" pos:end="69:53">*</operator><name pos:start="69:54" pos:end="69:59">stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:37"><expr pos:start="71:17" pos:end="71:36"><name pos:start="71:17" pos:end="71:33"><name pos:start="71:17" pos:end="71:21">block</name><index pos:start="71:22" pos:end="71:24">[<expr pos:start="71:23" pos:end="71:23"><literal type="number" pos:start="71:23" pos:end="71:23">0</literal></expr>]</index><index pos:start="71:25" pos:end="71:33">[<expr pos:start="71:26" pos:end="71:32"><name pos:start="71:26" pos:end="71:26">x</name> <operator pos:start="71:28" pos:end="71:28">+</operator> <name pos:start="71:30" pos:end="71:30">w</name><operator pos:start="71:31" pos:end="71:31">*</operator><name pos:start="71:32" pos:end="71:32">y</name></expr>]</index></name><operator pos:start="71:34" pos:end="71:34">=</operator> <name pos:start="71:36" pos:end="71:36">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:34"><expr pos:start="73:17" pos:end="73:33"><name pos:start="73:17" pos:end="73:26">best_score</name> <operator pos:start="73:28" pos:end="73:29">+=</operator> <name pos:start="73:31" pos:end="73:31">v</name><operator pos:start="73:32" pos:end="73:32">*</operator><name pos:start="73:33" pos:end="73:33">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:34"><expr pos:start="75:17" pos:end="75:33"><name pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:25">block_sum</name><index pos:start="75:26" pos:end="75:28">[<expr pos:start="75:27" pos:end="75:27"><literal type="number" pos:start="75:27" pos:end="75:27">0</literal></expr>]</index></name> <operator pos:start="75:30" pos:end="75:31">+=</operator> <name pos:start="75:33" pos:end="75:33">v</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:17"><expr pos:start="85:5" pos:end="85:16"><name pos:start="85:5" pos:end="85:14">best_count</name><operator pos:start="85:15" pos:end="85:15">=</operator><literal type="number" pos:start="85:16" pos:end="85:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:59"><expr pos:start="87:5" pos:end="87:58"><name pos:start="87:5" pos:end="87:14">best_score</name> <operator pos:start="87:16" pos:end="87:17">-=</operator> <operator pos:start="87:19" pos:end="87:19">(</operator><operator pos:start="87:20" pos:end="87:20">(</operator><name pos:start="87:21" pos:end="87:32"><name pos:start="87:21" pos:end="87:29">block_sum</name><index pos:start="87:30" pos:end="87:32">[<expr pos:start="87:31" pos:end="87:31"><literal type="number" pos:start="87:31" pos:end="87:31">0</literal></expr>]</index></name><operator pos:start="87:33" pos:end="87:33">*</operator><name pos:start="87:34" pos:end="87:45"><name pos:start="87:34" pos:end="87:42">block_sum</name><index pos:start="87:43" pos:end="87:45">[<expr pos:start="87:44" pos:end="87:44"><literal type="number" pos:start="87:44" pos:end="87:44">0</literal></expr>]</index></name><operator pos:start="87:46" pos:end="87:46">)</operator><operator pos:start="87:47" pos:end="87:48">&gt;&gt;</operator><operator pos:start="87:49" pos:end="87:49">(</operator><name pos:start="87:50" pos:end="87:54">level</name><operator pos:start="87:55" pos:end="87:55">+</operator><literal type="number" pos:start="87:56" pos:end="87:56">3</literal><operator pos:start="87:57" pos:end="87:57">)</operator><operator pos:start="87:58" pos:end="87:58">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:55"><expr pos:start="89:5" pos:end="89:54"><name pos:start="89:5" pos:end="89:13">best_mean</name><operator pos:start="89:14" pos:end="89:14">=</operator> <operator pos:start="89:16" pos:end="89:16">(</operator><name pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:25">block_sum</name><index pos:start="89:26" pos:end="89:28">[<expr pos:start="89:27" pos:end="89:27"><literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr>]</index></name> <operator pos:start="89:30" pos:end="89:30">+</operator> <operator pos:start="89:32" pos:end="89:32">(</operator><name pos:start="89:33" pos:end="89:36">size</name><operator pos:start="89:37" pos:end="89:38">&gt;&gt;</operator><literal type="number" pos:start="89:39" pos:end="89:39">1</literal><operator pos:start="89:40" pos:end="89:40">)</operator><operator pos:start="89:41" pos:end="89:41">)</operator> <operator pos:start="89:43" pos:end="89:44">&gt;&gt;</operator> <operator pos:start="89:46" pos:end="89:46">(</operator><name pos:start="89:47" pos:end="89:51">level</name><operator pos:start="89:52" pos:end="89:52">+</operator><literal type="number" pos:start="89:53" pos:end="89:53">3</literal><operator pos:start="89:54" pos:end="89:54">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="179:5"><if pos:start="93:5" pos:end="179:5">if<condition pos:start="93:7" pos:end="93:15">(<expr pos:start="93:8" pos:end="93:14"><name pos:start="93:8" pos:end="93:12">level</name><operator pos:start="93:13" pos:end="93:13">&lt;</operator><literal type="number" pos:start="93:14" pos:end="93:14">4</literal></expr>)</condition><block pos:start="93:16" pos:end="179:5">{<block_content pos:start="95:9" pos:end="177:9">

        <for pos:start="95:9" pos:end="177:9">for<control pos:start="95:12" pos:end="95:38">(<init pos:start="95:13" pos:end="95:20"><expr pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:17">count</name><operator pos:start="95:18" pos:end="95:18">=</operator><literal type="number" pos:start="95:19" pos:end="95:19">1</literal></expr>;</init> <condition pos:start="95:22" pos:end="95:29"><expr pos:start="95:22" pos:end="95:28"><name pos:start="95:22" pos:end="95:26">count</name><operator pos:start="95:27" pos:end="95:27">&lt;</operator><literal type="number" pos:start="95:28" pos:end="95:28">7</literal></expr>;</condition> <incr pos:start="95:31" pos:end="95:37"><expr pos:start="95:31" pos:end="95:37"><name pos:start="95:31" pos:end="95:35">count</name><operator pos:start="95:36" pos:end="95:37">++</operator></expr></incr>)</control><block pos:start="95:39" pos:end="177:9">{<block_content pos:start="97:13" pos:end="175:13">

            <decl_stmt pos:start="97:13" pos:end="97:43"><decl pos:start="97:13" pos:end="97:42"><type pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:15">int</name></type> <name pos:start="97:17" pos:end="97:33">best_vector_score</name><init pos:start="97:34" pos:end="97:42">= <expr pos:start="97:36" pos:end="97:42"><name pos:start="97:36" pos:end="97:42">INT_MAX</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="99:13" pos:end="99:60"><decl pos:start="99:13" pos:end="99:36"><type pos:start="99:13" pos:end="99:15"><name pos:start="99:13" pos:end="99:15">int</name></type> <name pos:start="99:17" pos:end="99:31">best_vector_sum</name><init pos:start="99:32" pos:end="99:36">=<expr pos:start="99:33" pos:end="99:36"><operator pos:start="99:33" pos:end="99:33">-</operator><literal type="number" pos:start="99:34" pos:end="99:36">999</literal></expr></init></decl>, <decl pos:start="99:39" pos:end="99:59"><type ref="prev" pos:start="99:13" pos:end="99:15"/><name pos:start="99:39" pos:end="99:54">best_vector_mean</name><init pos:start="99:55" pos:end="99:59">=<expr pos:start="99:56" pos:end="99:59"><operator pos:start="99:56" pos:end="99:56">-</operator><literal type="number" pos:start="99:57" pos:end="99:59">999</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="101:13" pos:end="101:37"><decl pos:start="101:13" pos:end="101:36"><type pos:start="101:13" pos:end="101:21"><specifier pos:start="101:13" pos:end="101:17">const</specifier> <name pos:start="101:19" pos:end="101:21">int</name></type> <name pos:start="101:23" pos:end="101:27">stage</name><init pos:start="101:28" pos:end="101:36">= <expr pos:start="101:30" pos:end="101:36"><name pos:start="101:30" pos:end="101:34">count</name><operator pos:start="101:35" pos:end="101:35">-</operator><literal type="number" pos:start="101:36" pos:end="101:36">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="103:13" pos:end="103:33"><decl pos:start="103:13" pos:end="103:32"><type pos:start="103:13" pos:end="103:26"><specifier pos:start="103:13" pos:end="103:17">const</specifier> <name pos:start="103:19" pos:end="103:24">int8_t</name> <modifier pos:start="103:26" pos:end="103:26">*</modifier></type><name pos:start="103:27" pos:end="103:32">vector</name></decl>;</decl_stmt>



            <for pos:start="107:13" pos:end="143:13">for<control pos:start="107:16" pos:end="107:31">(<init pos:start="107:17" pos:end="107:20"><expr pos:start="107:17" pos:end="107:19"><name pos:start="107:17" pos:end="107:17">i</name><operator pos:start="107:18" pos:end="107:18">=</operator><literal type="number" pos:start="107:19" pos:end="107:19">0</literal></expr>;</init> <condition pos:start="107:22" pos:end="107:26"><expr pos:start="107:22" pos:end="107:25"><name pos:start="107:22" pos:end="107:22">i</name><operator pos:start="107:23" pos:end="107:23">&lt;</operator><literal type="number" pos:start="107:24" pos:end="107:25">16</literal></expr>;</condition> <incr pos:start="107:28" pos:end="107:30"><expr pos:start="107:28" pos:end="107:30"><name pos:start="107:28" pos:end="107:28">i</name><operator pos:start="107:29" pos:end="107:30">++</operator></expr></incr>)</control><block pos:start="107:32" pos:end="143:13">{<block_content pos:start="109:17" pos:end="141:17">

                <decl_stmt pos:start="109:17" pos:end="109:52"><decl pos:start="109:17" pos:end="109:51"><type pos:start="109:17" pos:end="109:19"><name pos:start="109:17" pos:end="109:19">int</name></type> <name pos:start="109:21" pos:end="109:23">sum</name><init pos:start="109:24" pos:end="109:51">= <expr pos:start="109:26" pos:end="109:51"><name pos:start="109:26" pos:end="109:51"><name pos:start="109:26" pos:end="109:37">codebook_sum</name><index pos:start="109:38" pos:end="109:51">[<expr pos:start="109:39" pos:end="109:50"><name pos:start="109:39" pos:end="109:43">stage</name><operator pos:start="109:44" pos:end="109:44">*</operator><literal type="number" pos:start="109:45" pos:end="109:48">16</literal> <operator pos:start="109:48" pos:end="109:48">+</operator> <name pos:start="109:50" pos:end="109:50">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="111:17" pos:end="111:43"><decl pos:start="111:17" pos:end="111:23"><type pos:start="111:17" pos:end="111:19"><name pos:start="111:17" pos:end="111:19">int</name></type> <name pos:start="111:21" pos:end="111:23">sqr</name></decl>, <decl pos:start="111:26" pos:end="111:29"><type ref="prev" pos:start="111:17" pos:end="111:19"/><name pos:start="111:26" pos:end="111:29">diff</name></decl>, <decl pos:start="111:32" pos:end="111:35"><type ref="prev" pos:start="111:17" pos:end="111:19"/><name pos:start="111:32" pos:end="111:35">mean</name></decl>, <decl pos:start="111:38" pos:end="111:42"><type ref="prev" pos:start="111:17" pos:end="111:19"/><name pos:start="111:38" pos:end="111:42">score</name></decl>;</decl_stmt>



                <expr_stmt pos:start="115:17" pos:end="115:59"><expr pos:start="115:17" pos:end="115:58"><name pos:start="115:17" pos:end="115:22">vector</name> <operator pos:start="115:24" pos:end="115:24">=</operator> <name pos:start="115:26" pos:end="115:33">codebook</name> <operator pos:start="115:35" pos:end="115:35">+</operator> <name pos:start="115:37" pos:end="115:41">stage</name><operator pos:start="115:42" pos:end="115:42">*</operator><name pos:start="115:43" pos:end="115:46">size</name><operator pos:start="115:47" pos:end="115:47">*</operator><literal type="number" pos:start="115:48" pos:end="115:51">16</literal> <operator pos:start="115:51" pos:end="115:51">+</operator> <name pos:start="115:53" pos:end="115:53">i</name><operator pos:start="115:54" pos:end="115:54">*</operator><name pos:start="115:55" pos:end="115:58">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:75"><expr pos:start="117:17" pos:end="117:74"><name pos:start="117:17" pos:end="117:19">sqr</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="117:74"><name pos:start="117:23" pos:end="117:46"><name pos:start="117:23" pos:end="117:23">s</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:28">dsp</name><operator pos:start="117:29" pos:end="117:29">.</operator><name pos:start="117:30" pos:end="117:46">ssd_int8_vs_int16</name></name><argument_list pos:start="117:47" pos:end="117:74">(<argument pos:start="117:48" pos:end="117:53"><expr pos:start="117:48" pos:end="117:53"><name pos:start="117:48" pos:end="117:53">vector</name></expr></argument>, <argument pos:start="117:56" pos:end="117:67"><expr pos:start="117:56" pos:end="117:67"><name pos:start="117:56" pos:end="117:67"><name pos:start="117:56" pos:end="117:60">block</name><index pos:start="117:61" pos:end="117:67">[<expr pos:start="117:62" pos:end="117:66"><name pos:start="117:62" pos:end="117:66">stage</name></expr>]</index></name></expr></argument>, <argument pos:start="117:70" pos:end="117:73"><expr pos:start="117:70" pos:end="117:73"><name pos:start="117:70" pos:end="117:73">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:45"><expr pos:start="119:17" pos:end="119:44"><name pos:start="119:17" pos:end="119:20">diff</name><operator pos:start="119:21" pos:end="119:21">=</operator> <name pos:start="119:23" pos:end="119:38"><name pos:start="119:23" pos:end="119:31">block_sum</name><index pos:start="119:32" pos:end="119:38">[<expr pos:start="119:33" pos:end="119:37"><name pos:start="119:33" pos:end="119:37">stage</name></expr>]</index></name> <operator pos:start="119:40" pos:end="119:40">-</operator> <name pos:start="119:42" pos:end="119:44">sum</name></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:54"><expr pos:start="121:17" pos:end="121:53"><name pos:start="121:17" pos:end="121:20">mean</name><operator pos:start="121:21" pos:end="121:21">=</operator> <operator pos:start="121:23" pos:end="121:23">(</operator><name pos:start="121:24" pos:end="121:27">diff</name> <operator pos:start="121:29" pos:end="121:29">+</operator> <operator pos:start="121:31" pos:end="121:31">(</operator><name pos:start="121:32" pos:end="121:35">size</name><operator pos:start="121:36" pos:end="121:37">&gt;&gt;</operator><literal type="number" pos:start="121:38" pos:end="121:38">1</literal><operator pos:start="121:39" pos:end="121:39">)</operator><operator pos:start="121:40" pos:end="121:40">)</operator> <operator pos:start="121:42" pos:end="121:43">&gt;&gt;</operator> <operator pos:start="121:45" pos:end="121:45">(</operator><name pos:start="121:46" pos:end="121:50">level</name><operator pos:start="121:51" pos:end="121:51">+</operator><literal type="number" pos:start="121:52" pos:end="121:52">3</literal><operator pos:start="121:53" pos:end="121:53">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:47"><expr pos:start="123:17" pos:end="123:46"><call pos:start="123:17" pos:end="123:46"><name pos:start="123:17" pos:end="123:22">assert</name><argument_list pos:start="123:23" pos:end="123:46">(<argument pos:start="123:24" pos:end="123:45"><expr pos:start="123:24" pos:end="123:45"><name pos:start="123:24" pos:end="123:27">mean</name> <operator pos:start="123:29" pos:end="123:29">&gt;</operator><operator pos:start="123:30" pos:end="123:30">-</operator><literal type="number" pos:start="123:31" pos:end="123:33">300</literal> <operator pos:start="123:35" pos:end="123:36">&amp;&amp;</operator> <name pos:start="123:38" pos:end="123:41">mean</name><operator pos:start="123:42" pos:end="123:42">&lt;</operator><literal type="number" pos:start="123:43" pos:end="123:45">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="125:17" pos:end="127:57"><if pos:start="125:17" pos:end="125:54">if<condition pos:start="125:19" pos:end="125:25">(<expr pos:start="125:20" pos:end="125:24"><name pos:start="125:20" pos:end="125:24">intra</name></expr>)</condition><block type="pseudo" pos:start="125:27" pos:end="125:54"><block_content pos:start="125:27" pos:end="125:54"> <expr_stmt pos:start="125:27" pos:end="125:54"><expr pos:start="125:27" pos:end="125:53"><name pos:start="125:27" pos:end="125:30">mean</name><operator pos:start="125:31" pos:end="125:31">=</operator> <call pos:start="125:33" pos:end="125:53"><name pos:start="125:33" pos:end="125:39">av_clip</name><argument_list pos:start="125:40" pos:end="125:53">(<argument pos:start="125:41" pos:end="125:44"><expr pos:start="125:41" pos:end="125:44"><name pos:start="125:41" pos:end="125:44">mean</name></expr></argument>, <argument pos:start="125:47" pos:end="125:47"><expr pos:start="125:47" pos:end="125:47"><literal type="number" pos:start="125:47" pos:end="125:47">0</literal></expr></argument>, <argument pos:start="125:50" pos:end="125:52"><expr pos:start="125:50" pos:end="125:52"><literal type="number" pos:start="125:50" pos:end="125:52">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="127:17" pos:end="127:57">else<block type="pseudo" pos:start="127:27" pos:end="127:57"><block_content pos:start="127:27" pos:end="127:57">      <expr_stmt pos:start="127:27" pos:end="127:57"><expr pos:start="127:27" pos:end="127:56"><name pos:start="127:27" pos:end="127:30">mean</name><operator pos:start="127:31" pos:end="127:31">=</operator> <call pos:start="127:33" pos:end="127:56"><name pos:start="127:33" pos:end="127:39">av_clip</name><argument_list pos:start="127:40" pos:end="127:56">(<argument pos:start="127:41" pos:end="127:44"><expr pos:start="127:41" pos:end="127:44"><name pos:start="127:41" pos:end="127:44">mean</name></expr></argument>, <argument pos:start="127:47" pos:end="127:50"><expr pos:start="127:47" pos:end="127:50"><operator pos:start="127:47" pos:end="127:47">-</operator><literal type="number" pos:start="127:48" pos:end="127:50">256</literal></expr></argument>, <argument pos:start="127:53" pos:end="127:55"><expr pos:start="127:53" pos:end="127:55"><literal type="number" pos:start="127:53" pos:end="127:55">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:63"><expr pos:start="129:17" pos:end="129:62"><name pos:start="129:17" pos:end="129:21">score</name><operator pos:start="129:22" pos:end="129:22">=</operator> <name pos:start="129:24" pos:end="129:26">sqr</name> <operator pos:start="129:28" pos:end="129:28">-</operator> <operator pos:start="129:30" pos:end="129:30">(</operator><operator pos:start="129:31" pos:end="129:31">(</operator><name pos:start="129:32" pos:end="129:35">diff</name><operator pos:start="129:36" pos:end="129:36">*</operator><operator pos:start="129:37" pos:end="129:37">(</operator><name pos:start="129:38" pos:end="129:44">int64_t</name><operator pos:start="129:45" pos:end="129:45">)</operator><name pos:start="129:46" pos:end="129:49">diff</name><operator pos:start="129:50" pos:end="129:50">)</operator><operator pos:start="129:51" pos:end="129:52">&gt;&gt;</operator><operator pos:start="129:53" pos:end="129:53">(</operator><name pos:start="129:54" pos:end="129:58">level</name><operator pos:start="129:59" pos:end="129:59">+</operator><literal type="number" pos:start="129:60" pos:end="129:60">3</literal><operator pos:start="129:61" pos:end="129:61">)</operator><operator pos:start="129:62" pos:end="129:62">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="129:65" pos:end="129:84">//FIXME 64bit slooow</comment>

                <if_stmt pos:start="131:17" pos:end="141:17"><if pos:start="131:17" pos:end="141:17">if<condition pos:start="131:19" pos:end="131:45">(<expr pos:start="131:20" pos:end="131:44"><name pos:start="131:20" pos:end="131:24">score</name> <operator pos:start="131:26" pos:end="131:26">&lt;</operator> <name pos:start="131:28" pos:end="131:44">best_vector_score</name></expr>)</condition><block pos:start="131:46" pos:end="141:17">{<block_content pos:start="133:21" pos:end="139:43">

                    <expr_stmt pos:start="133:21" pos:end="133:45"><expr pos:start="133:21" pos:end="133:44"><name pos:start="133:21" pos:end="133:37">best_vector_score</name><operator pos:start="133:38" pos:end="133:38">=</operator> <name pos:start="133:40" pos:end="133:44">score</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="135:21" pos:end="135:42"><expr pos:start="135:21" pos:end="135:41"><name pos:start="135:21" pos:end="135:38"><name pos:start="135:21" pos:end="135:31">best_vector</name><index pos:start="135:32" pos:end="135:38">[<expr pos:start="135:33" pos:end="135:37"><name pos:start="135:33" pos:end="135:37">stage</name></expr>]</index></name><operator pos:start="135:39" pos:end="135:39">=</operator> <name pos:start="135:41" pos:end="135:41">i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="137:21" pos:end="137:41"><expr pos:start="137:21" pos:end="137:40"><name pos:start="137:21" pos:end="137:35">best_vector_sum</name><operator pos:start="137:36" pos:end="137:36">=</operator> <name pos:start="137:38" pos:end="137:40">sum</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="139:21" pos:end="139:43"><expr pos:start="139:21" pos:end="139:42"><name pos:start="139:21" pos:end="139:36">best_vector_mean</name><operator pos:start="139:37" pos:end="139:37">=</operator> <name pos:start="139:39" pos:end="139:42">mean</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="145:13" pos:end="145:45"><expr pos:start="145:13" pos:end="145:44"><call pos:start="145:13" pos:end="145:44"><name pos:start="145:13" pos:end="145:18">assert</name><argument_list pos:start="145:19" pos:end="145:44">(<argument pos:start="145:20" pos:end="145:43"><expr pos:start="145:20" pos:end="145:43"><name pos:start="145:20" pos:end="145:35">best_vector_mean</name> <operator pos:start="145:37" pos:end="145:38">!=</operator> <operator pos:start="145:40" pos:end="145:40">-</operator><literal type="number" pos:start="145:41" pos:end="145:43">999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:71"><expr pos:start="147:13" pos:end="147:70"><name pos:start="147:13" pos:end="147:18">vector</name><operator pos:start="147:19" pos:end="147:19">=</operator> <name pos:start="147:21" pos:end="147:28">codebook</name> <operator pos:start="147:30" pos:end="147:30">+</operator> <name pos:start="147:32" pos:end="147:36">stage</name><operator pos:start="147:37" pos:end="147:37">*</operator><name pos:start="147:38" pos:end="147:41">size</name><operator pos:start="147:42" pos:end="147:42">*</operator><literal type="number" pos:start="147:43" pos:end="147:46">16</literal> <operator pos:start="147:46" pos:end="147:46">+</operator> <name pos:start="147:48" pos:end="147:65"><name pos:start="147:48" pos:end="147:58">best_vector</name><index pos:start="147:59" pos:end="147:65">[<expr pos:start="147:60" pos:end="147:64"><name pos:start="147:60" pos:end="147:64">stage</name></expr>]</index></name><operator pos:start="147:66" pos:end="147:66">*</operator><name pos:start="147:67" pos:end="147:70">size</name></expr>;</expr_stmt>

            <for pos:start="149:13" pos:end="153:13">for<control pos:start="149:16" pos:end="149:33">(<init pos:start="149:17" pos:end="149:20"><expr pos:start="149:17" pos:end="149:19"><name pos:start="149:17" pos:end="149:17">j</name><operator pos:start="149:18" pos:end="149:18">=</operator><literal type="number" pos:start="149:19" pos:end="149:19">0</literal></expr>;</init> <condition pos:start="149:22" pos:end="149:28"><expr pos:start="149:22" pos:end="149:27"><name pos:start="149:22" pos:end="149:22">j</name><operator pos:start="149:23" pos:end="149:23">&lt;</operator><name pos:start="149:24" pos:end="149:27">size</name></expr>;</condition> <incr pos:start="149:30" pos:end="149:32"><expr pos:start="149:30" pos:end="149:32"><name pos:start="149:30" pos:end="149:30">j</name><operator pos:start="149:31" pos:end="149:32">++</operator></expr></incr>)</control><block pos:start="149:34" pos:end="153:13">{<block_content pos:start="151:17" pos:end="151:64">

                <expr_stmt pos:start="151:17" pos:end="151:64"><expr pos:start="151:17" pos:end="151:63"><name pos:start="151:17" pos:end="151:33"><name pos:start="151:17" pos:end="151:21">block</name><index pos:start="151:22" pos:end="151:30">[<expr pos:start="151:23" pos:end="151:29"><name pos:start="151:23" pos:end="151:27">stage</name><operator pos:start="151:28" pos:end="151:28">+</operator><literal type="number" pos:start="151:29" pos:end="151:29">1</literal></expr>]</index><index pos:start="151:31" pos:end="151:33">[<expr pos:start="151:32" pos:end="151:32"><name pos:start="151:32" pos:end="151:32">j</name></expr>]</index></name> <operator pos:start="151:35" pos:end="151:35">=</operator> <name pos:start="151:37" pos:end="151:51"><name pos:start="151:37" pos:end="151:41">block</name><index pos:start="151:42" pos:end="151:48">[<expr pos:start="151:43" pos:end="151:47"><name pos:start="151:43" pos:end="151:47">stage</name></expr>]</index><index pos:start="151:49" pos:end="151:51">[<expr pos:start="151:50" pos:end="151:50"><name pos:start="151:50" pos:end="151:50">j</name></expr>]</index></name> <operator pos:start="151:53" pos:end="151:53">-</operator> <name pos:start="151:55" pos:end="151:63"><name pos:start="151:55" pos:end="151:60">vector</name><index pos:start="151:61" pos:end="151:63">[<expr pos:start="151:62" pos:end="151:62"><name pos:start="151:62" pos:end="151:62">j</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="155:13" pos:end="155:67"><expr pos:start="155:13" pos:end="155:66"><name pos:start="155:13" pos:end="155:30"><name pos:start="155:13" pos:end="155:21">block_sum</name><index pos:start="155:22" pos:end="155:30">[<expr pos:start="155:23" pos:end="155:29"><name pos:start="155:23" pos:end="155:27">stage</name><operator pos:start="155:28" pos:end="155:28">+</operator><literal type="number" pos:start="155:29" pos:end="155:29">1</literal></expr>]</index></name><operator pos:start="155:31" pos:end="155:31">=</operator> <name pos:start="155:33" pos:end="155:48"><name pos:start="155:33" pos:end="155:41">block_sum</name><index pos:start="155:42" pos:end="155:48">[<expr pos:start="155:43" pos:end="155:47"><name pos:start="155:43" pos:end="155:47">stage</name></expr>]</index></name> <operator pos:start="155:50" pos:end="155:50">-</operator> <name pos:start="155:52" pos:end="155:66">best_vector_sum</name></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="163:57"><expr pos:start="157:13" pos:end="163:56"><name pos:start="157:13" pos:end="157:29">best_vector_score</name> <operator pos:start="157:31" pos:end="157:32">+=</operator>

                <name pos:start="159:17" pos:end="159:22">lambda</name><operator pos:start="159:23" pos:end="159:23">*</operator><operator pos:start="159:24" pos:end="159:24">(</operator><operator pos:start="159:25" pos:end="159:25">+</operator> <literal type="number" pos:start="159:27" pos:end="159:29">1</literal> <operator pos:start="159:29" pos:end="159:29">+</operator> <literal type="number" pos:start="159:31" pos:end="159:31">4</literal><operator pos:start="159:32" pos:end="159:32">*</operator><name pos:start="159:33" pos:end="159:37">count</name>

                        <operator pos:start="161:25" pos:end="161:25">+</operator> <name pos:start="161:27" pos:end="161:52"><name pos:start="161:27" pos:end="161:40">multistage_vlc</name><index pos:start="161:41" pos:end="161:49">[<expr pos:start="161:42" pos:end="161:48"><literal type="number" pos:start="161:42" pos:end="161:43">1</literal><operator pos:start="161:43" pos:end="161:43">+</operator><name pos:start="161:44" pos:end="161:48">count</name></expr>]</index><index pos:start="161:50" pos:end="161:52">[<expr pos:start="161:51" pos:end="161:51"><literal type="number" pos:start="161:51" pos:end="161:51">1</literal></expr>]</index></name>

                        <operator pos:start="163:25" pos:end="163:25">+</operator> <name pos:start="163:27" pos:end="163:55"><name pos:start="163:27" pos:end="163:34">mean_vlc</name><index pos:start="163:35" pos:end="163:52">[<expr pos:start="163:36" pos:end="163:51"><name pos:start="163:36" pos:end="163:51">best_vector_mean</name></expr>]</index><index pos:start="163:53" pos:end="163:55">[<expr pos:start="163:54" pos:end="163:54"><literal type="number" pos:start="163:54" pos:end="163:54">1</literal></expr>]</index></name><operator pos:start="163:56" pos:end="163:56">)</operator></expr>;</expr_stmt>



            <if_stmt pos:start="167:13" pos:end="175:13"><if pos:start="167:13" pos:end="175:13">if<condition pos:start="167:15" pos:end="167:46">(<expr pos:start="167:16" pos:end="167:45"><name pos:start="167:16" pos:end="167:32">best_vector_score</name> <operator pos:start="167:34" pos:end="167:34">&lt;</operator> <name pos:start="167:36" pos:end="167:45">best_score</name></expr>)</condition><block pos:start="167:47" pos:end="175:13">{<block_content pos:start="169:17" pos:end="173:44">

                <expr_stmt pos:start="169:17" pos:end="169:46"><expr pos:start="169:17" pos:end="169:45"><name pos:start="169:17" pos:end="169:26">best_score</name><operator pos:start="169:27" pos:end="169:27">=</operator> <name pos:start="169:29" pos:end="169:45">best_vector_score</name></expr>;</expr_stmt>

                <expr_stmt pos:start="171:17" pos:end="171:34"><expr pos:start="171:17" pos:end="171:33"><name pos:start="171:17" pos:end="171:26">best_count</name><operator pos:start="171:27" pos:end="171:27">=</operator> <name pos:start="171:29" pos:end="171:33">count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="173:17" pos:end="173:44"><expr pos:start="173:17" pos:end="173:43"><name pos:start="173:17" pos:end="173:25">best_mean</name><operator pos:start="173:26" pos:end="173:26">=</operator> <name pos:start="173:28" pos:end="173:43">best_vector_mean</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="183:5" pos:end="183:12"><expr pos:start="183:5" pos:end="183:11"><name pos:start="183:5" pos:end="183:9">split</name><operator pos:start="183:10" pos:end="183:10">=</operator><literal type="number" pos:start="183:11" pos:end="183:11">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="185:5" pos:end="225:5"><if pos:start="185:5" pos:end="225:5">if<condition pos:start="185:7" pos:end="185:39">(<expr pos:start="185:8" pos:end="185:38"><name pos:start="185:8" pos:end="185:17">best_score</name> <operator pos:start="185:19" pos:end="185:19">&gt;</operator> <name pos:start="185:21" pos:end="185:29">threshold</name> <operator pos:start="185:31" pos:end="185:32">&amp;&amp;</operator> <name pos:start="185:34" pos:end="185:38">level</name></expr>)</condition><block pos:start="185:40" pos:end="225:5">{<block_content pos:start="187:9" pos:end="223:9">

        <decl_stmt pos:start="187:9" pos:end="187:20"><decl pos:start="187:9" pos:end="187:19"><type pos:start="187:9" pos:end="187:11"><name pos:start="187:9" pos:end="187:11">int</name></type> <name pos:start="187:13" pos:end="187:17">score</name><init pos:start="187:18" pos:end="187:19">=<expr pos:start="187:19" pos:end="187:19"><literal type="number" pos:start="187:19" pos:end="187:19">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="189:9" pos:end="189:49"><decl pos:start="189:9" pos:end="189:48"><type pos:start="189:9" pos:end="189:11"><name pos:start="189:9" pos:end="189:11">int</name></type> <name pos:start="189:13" pos:end="189:18">offset</name><init pos:start="189:19" pos:end="189:48">= <expr pos:start="189:21" pos:end="189:48"><ternary pos:start="189:21" pos:end="189:48"><condition pos:start="189:21" pos:end="189:31"><expr pos:start="189:21" pos:end="189:29"><operator pos:start="189:21" pos:end="189:21">(</operator><name pos:start="189:22" pos:end="189:26">level</name><operator pos:start="189:27" pos:end="189:27">&amp;</operator><literal type="number" pos:start="189:28" pos:end="189:28">1</literal><operator pos:start="189:29" pos:end="189:29">)</operator></expr> ?</condition><then pos:start="189:33" pos:end="189:42"> <expr pos:start="189:33" pos:end="189:42"><name pos:start="189:33" pos:end="189:38">stride</name><operator pos:start="189:39" pos:end="189:39">*</operator><name pos:start="189:40" pos:end="189:40">h</name><operator pos:start="189:41" pos:end="189:41">/</operator><literal type="number" pos:start="189:42" pos:end="189:42">2</literal></expr> </then><else pos:start="189:44" pos:end="189:48">: <expr pos:start="189:46" pos:end="189:48"><name pos:start="189:46" pos:end="189:46">w</name><operator pos:start="189:47" pos:end="189:47">/</operator><literal type="number" pos:start="189:48" pos:end="189:48">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="191:9" pos:end="191:32"><decl pos:start="191:9" pos:end="191:31"><type pos:start="191:9" pos:end="191:21"><name pos:start="191:9" pos:end="191:21">PutBitContext</name></type> <name pos:start="191:23" pos:end="191:31"><name pos:start="191:23" pos:end="191:28">backup</name><index pos:start="191:29" pos:end="191:31">[<expr pos:start="191:30" pos:end="191:30"><literal type="number" pos:start="191:30" pos:end="191:30">6</literal></expr>]</index></name></decl>;</decl_stmt>



        <for pos:start="195:9" pos:end="199:9">for<control pos:start="195:12" pos:end="195:33">(<init pos:start="195:13" pos:end="195:22"><expr pos:start="195:13" pos:end="195:21"><name pos:start="195:13" pos:end="195:13">i</name><operator pos:start="195:14" pos:end="195:14">=</operator><name pos:start="195:15" pos:end="195:19">level</name><operator pos:start="195:20" pos:end="195:20">-</operator><literal type="number" pos:start="195:21" pos:end="195:21">1</literal></expr>;</init> <condition pos:start="195:24" pos:end="195:28"><expr pos:start="195:24" pos:end="195:27"><name pos:start="195:24" pos:end="195:24">i</name><operator pos:start="195:25" pos:end="195:26">&gt;=</operator><literal type="number" pos:start="195:27" pos:end="195:27">0</literal></expr>;</condition> <incr pos:start="195:30" pos:end="195:32"><expr pos:start="195:30" pos:end="195:32"><name pos:start="195:30" pos:end="195:30">i</name><operator pos:start="195:31" pos:end="195:32">--</operator></expr></incr>)</control><block pos:start="195:34" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:40">

            <expr_stmt pos:start="197:13" pos:end="197:40"><expr pos:start="197:13" pos:end="197:39"><name pos:start="197:13" pos:end="197:21"><name pos:start="197:13" pos:end="197:18">backup</name><index pos:start="197:19" pos:end="197:21">[<expr pos:start="197:20" pos:end="197:20"><name pos:start="197:20" pos:end="197:20">i</name></expr>]</index></name><operator pos:start="197:22" pos:end="197:22">=</operator> <name pos:start="197:24" pos:end="197:39"><name pos:start="197:24" pos:end="197:24">s</name><operator pos:start="197:25" pos:end="197:26">-&gt;</operator><name pos:start="197:27" pos:end="197:36">reorder_pb</name><index pos:start="197:37" pos:end="197:39">[<expr pos:start="197:38" pos:end="197:38"><name pos:start="197:38" pos:end="197:38">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="201:9" pos:end="201:125"><expr pos:start="201:9" pos:end="201:124"><name pos:start="201:9" pos:end="201:13">score</name> <operator pos:start="201:15" pos:end="201:16">+=</operator> <call pos:start="201:18" pos:end="201:124"><name pos:start="201:18" pos:end="201:29">encode_block</name><argument_list pos:start="201:30" pos:end="201:124">(<argument pos:start="201:31" pos:end="201:31"><expr pos:start="201:31" pos:end="201:31"><name pos:start="201:31" pos:end="201:31">s</name></expr></argument>, <argument pos:start="201:34" pos:end="201:36"><expr pos:start="201:34" pos:end="201:36"><name pos:start="201:34" pos:end="201:36">src</name></expr></argument>         , <argument pos:start="201:48" pos:end="201:50"><expr pos:start="201:48" pos:end="201:50"><name pos:start="201:48" pos:end="201:50">ref</name></expr></argument>         , <argument pos:start="201:62" pos:end="201:68"><expr pos:start="201:62" pos:end="201:68"><name pos:start="201:62" pos:end="201:68">decoded</name></expr></argument>         , <argument pos:start="201:80" pos:end="201:85"><expr pos:start="201:80" pos:end="201:85"><name pos:start="201:80" pos:end="201:85">stride</name></expr></argument>, <argument pos:start="201:88" pos:end="201:94"><expr pos:start="201:88" pos:end="201:94"><name pos:start="201:88" pos:end="201:92">level</name><operator pos:start="201:93" pos:end="201:93">-</operator><literal type="number" pos:start="201:94" pos:end="201:94">1</literal></expr></argument>, <argument pos:start="201:97" pos:end="201:108"><expr pos:start="201:97" pos:end="201:108"><name pos:start="201:97" pos:end="201:105">threshold</name><operator pos:start="201:106" pos:end="201:107">&gt;&gt;</operator><literal type="number" pos:start="201:108" pos:end="201:108">1</literal></expr></argument>, <argument pos:start="201:111" pos:end="201:116"><expr pos:start="201:111" pos:end="201:116"><name pos:start="201:111" pos:end="201:116">lambda</name></expr></argument>, <argument pos:start="201:119" pos:end="201:123"><expr pos:start="201:119" pos:end="201:123"><name pos:start="201:119" pos:end="201:123">intra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:125"><expr pos:start="203:9" pos:end="203:124"><name pos:start="203:9" pos:end="203:13">score</name> <operator pos:start="203:15" pos:end="203:16">+=</operator> <call pos:start="203:18" pos:end="203:124"><name pos:start="203:18" pos:end="203:29">encode_block</name><argument_list pos:start="203:30" pos:end="203:124">(<argument pos:start="203:31" pos:end="203:31"><expr pos:start="203:31" pos:end="203:31"><name pos:start="203:31" pos:end="203:31">s</name></expr></argument>, <argument pos:start="203:34" pos:end="203:45"><expr pos:start="203:34" pos:end="203:45"><name pos:start="203:34" pos:end="203:36">src</name> <operator pos:start="203:38" pos:end="203:38">+</operator> <name pos:start="203:40" pos:end="203:45">offset</name></expr></argument>, <argument pos:start="203:48" pos:end="203:59"><expr pos:start="203:48" pos:end="203:59"><name pos:start="203:48" pos:end="203:50">ref</name> <operator pos:start="203:52" pos:end="203:52">+</operator> <name pos:start="203:54" pos:end="203:59">offset</name></expr></argument>, <argument pos:start="203:62" pos:end="203:77"><expr pos:start="203:62" pos:end="203:77"><name pos:start="203:62" pos:end="203:68">decoded</name> <operator pos:start="203:70" pos:end="203:70">+</operator> <name pos:start="203:72" pos:end="203:77">offset</name></expr></argument>, <argument pos:start="203:80" pos:end="203:85"><expr pos:start="203:80" pos:end="203:85"><name pos:start="203:80" pos:end="203:85">stride</name></expr></argument>, <argument pos:start="203:88" pos:end="203:94"><expr pos:start="203:88" pos:end="203:94"><name pos:start="203:88" pos:end="203:92">level</name><operator pos:start="203:93" pos:end="203:93">-</operator><literal type="number" pos:start="203:94" pos:end="203:94">1</literal></expr></argument>, <argument pos:start="203:97" pos:end="203:108"><expr pos:start="203:97" pos:end="203:108"><name pos:start="203:97" pos:end="203:105">threshold</name><operator pos:start="203:106" pos:end="203:107">&gt;&gt;</operator><literal type="number" pos:start="203:108" pos:end="203:108">1</literal></expr></argument>, <argument pos:start="203:111" pos:end="203:116"><expr pos:start="203:111" pos:end="203:116"><name pos:start="203:111" pos:end="203:116">lambda</name></expr></argument>, <argument pos:start="203:119" pos:end="203:123"><expr pos:start="203:119" pos:end="203:123"><name pos:start="203:119" pos:end="203:123">intra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:24"><expr pos:start="205:9" pos:end="205:23"><name pos:start="205:9" pos:end="205:13">score</name> <operator pos:start="205:15" pos:end="205:16">+=</operator> <name pos:start="205:18" pos:end="205:23">lambda</name></expr>;</expr_stmt>



        <if_stmt pos:start="209:9" pos:end="223:9"><if pos:start="209:9" pos:end="215:9">if<condition pos:start="209:11" pos:end="209:30">(<expr pos:start="209:12" pos:end="209:29"><name pos:start="209:12" pos:end="209:16">score</name> <operator pos:start="209:18" pos:end="209:18">&lt;</operator> <name pos:start="209:20" pos:end="209:29">best_score</name></expr>)</condition><block pos:start="209:31" pos:end="215:9">{<block_content pos:start="211:13" pos:end="213:20">

            <expr_stmt pos:start="211:13" pos:end="211:30"><expr pos:start="211:13" pos:end="211:29"><name pos:start="211:13" pos:end="211:22">best_score</name><operator pos:start="211:23" pos:end="211:23">=</operator> <name pos:start="211:25" pos:end="211:29">score</name></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:20"><expr pos:start="213:13" pos:end="213:19"><name pos:start="213:13" pos:end="213:17">split</name><operator pos:start="213:18" pos:end="213:18">=</operator><literal type="number" pos:start="213:19" pos:end="213:19">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="215:10" pos:end="223:9">else<block pos:start="215:14" pos:end="223:9">{<block_content pos:start="217:13" pos:end="221:13">

            <for pos:start="217:13" pos:end="221:13">for<control pos:start="217:16" pos:end="217:37">(<init pos:start="217:17" pos:end="217:26"><expr pos:start="217:17" pos:end="217:25"><name pos:start="217:17" pos:end="217:17">i</name><operator pos:start="217:18" pos:end="217:18">=</operator><name pos:start="217:19" pos:end="217:23">level</name><operator pos:start="217:24" pos:end="217:24">-</operator><literal type="number" pos:start="217:25" pos:end="217:25">1</literal></expr>;</init> <condition pos:start="217:28" pos:end="217:32"><expr pos:start="217:28" pos:end="217:31"><name pos:start="217:28" pos:end="217:28">i</name><operator pos:start="217:29" pos:end="217:30">&gt;=</operator><literal type="number" pos:start="217:31" pos:end="217:31">0</literal></expr>;</condition> <incr pos:start="217:34" pos:end="217:36"><expr pos:start="217:34" pos:end="217:36"><name pos:start="217:34" pos:end="217:34">i</name><operator pos:start="217:35" pos:end="217:36">--</operator></expr></incr>)</control><block pos:start="217:38" pos:end="221:13">{<block_content pos:start="219:17" pos:end="219:44">

                <expr_stmt pos:start="219:17" pos:end="219:44"><expr pos:start="219:17" pos:end="219:43"><name pos:start="219:17" pos:end="219:32"><name pos:start="219:17" pos:end="219:17">s</name><operator pos:start="219:18" pos:end="219:19">-&gt;</operator><name pos:start="219:20" pos:end="219:29">reorder_pb</name><index pos:start="219:30" pos:end="219:32">[<expr pos:start="219:31" pos:end="219:31"><name pos:start="219:31" pos:end="219:31">i</name></expr>]</index></name><operator pos:start="219:33" pos:end="219:33">=</operator> <name pos:start="219:35" pos:end="219:43"><name pos:start="219:35" pos:end="219:40">backup</name><index pos:start="219:41" pos:end="219:43">[<expr pos:start="219:42" pos:end="219:42"><name pos:start="219:42" pos:end="219:42">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="227:5" pos:end="229:50"><if pos:start="227:5" pos:end="229:50">if <condition pos:start="227:8" pos:end="227:18">(<expr pos:start="227:9" pos:end="227:17"><name pos:start="227:9" pos:end="227:13">level</name> <operator pos:start="227:15" pos:end="227:15">&gt;</operator> <literal type="number" pos:start="227:17" pos:end="227:17">0</literal></expr>)</condition><block type="pseudo" pos:start="229:9" pos:end="229:50"><block_content pos:start="229:9" pos:end="229:50">

        <expr_stmt pos:start="229:9" pos:end="229:50"><expr pos:start="229:9" pos:end="229:49"><call pos:start="229:9" pos:end="229:49"><name pos:start="229:9" pos:end="229:16">put_bits</name><argument_list pos:start="229:17" pos:end="229:49">(<argument pos:start="229:18" pos:end="229:38"><expr pos:start="229:18" pos:end="229:38"><operator pos:start="229:18" pos:end="229:18">&amp;</operator><name pos:start="229:19" pos:end="229:38"><name pos:start="229:19" pos:end="229:19">s</name><operator pos:start="229:20" pos:end="229:21">-&gt;</operator><name pos:start="229:22" pos:end="229:31">reorder_pb</name><index pos:start="229:32" pos:end="229:38">[<expr pos:start="229:33" pos:end="229:37"><name pos:start="229:33" pos:end="229:37">level</name></expr>]</index></name></expr></argument>, <argument pos:start="229:41" pos:end="229:41"><expr pos:start="229:41" pos:end="229:41"><literal type="number" pos:start="229:41" pos:end="229:41">1</literal></expr></argument>, <argument pos:start="229:44" pos:end="229:48"><expr pos:start="229:44" pos:end="229:48"><name pos:start="229:44" pos:end="229:48">split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="233:5" pos:end="279:5"><if pos:start="233:5" pos:end="279:5">if<condition pos:start="233:7" pos:end="233:14">(<expr pos:start="233:8" pos:end="233:13"><operator pos:start="233:8" pos:end="233:8">!</operator><name pos:start="233:9" pos:end="233:13">split</name></expr>)</condition><block pos:start="233:15" pos:end="279:5">{<block_content pos:start="235:9" pos:end="277:9">

        <expr_stmt pos:start="235:9" pos:end="235:60"><expr pos:start="235:9" pos:end="235:59"><call pos:start="235:9" pos:end="235:59"><name pos:start="235:9" pos:end="235:14">assert</name><argument_list pos:start="235:15" pos:end="235:59">(<argument pos:start="235:16" pos:end="235:58"><expr pos:start="235:16" pos:end="235:58"><operator pos:start="235:16" pos:end="235:16">(</operator><name pos:start="235:17" pos:end="235:25">best_mean</name> <operator pos:start="235:27" pos:end="235:28">&gt;=</operator> <literal type="number" pos:start="235:30" pos:end="235:30">0</literal> <operator pos:start="235:32" pos:end="235:33">&amp;&amp;</operator> <name pos:start="235:35" pos:end="235:43">best_mean</name><operator pos:start="235:44" pos:end="235:44">&lt;</operator><literal type="number" pos:start="235:45" pos:end="235:47">256</literal><operator pos:start="235:48" pos:end="235:48">)</operator> <operator pos:start="235:50" pos:end="235:51">||</operator> <operator pos:start="235:53" pos:end="235:53">!</operator><name pos:start="235:54" pos:end="235:58">intra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:51"><expr pos:start="237:9" pos:end="237:50"><call pos:start="237:9" pos:end="237:50"><name pos:start="237:9" pos:end="237:14">assert</name><argument_list pos:start="237:15" pos:end="237:50">(<argument pos:start="237:16" pos:end="237:49"><expr pos:start="237:16" pos:end="237:49"><name pos:start="237:16" pos:end="237:24">best_mean</name> <operator pos:start="237:26" pos:end="237:27">&gt;=</operator> <operator pos:start="237:29" pos:end="237:29">-</operator><literal type="number" pos:start="237:30" pos:end="237:32">256</literal> <operator pos:start="237:34" pos:end="237:35">&amp;&amp;</operator> <name pos:start="237:37" pos:end="237:45">best_mean</name><operator pos:start="237:46" pos:end="237:46">&lt;</operator><literal type="number" pos:start="237:47" pos:end="237:49">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:47"><expr pos:start="239:9" pos:end="239:46"><call pos:start="239:9" pos:end="239:46"><name pos:start="239:9" pos:end="239:14">assert</name><argument_list pos:start="239:15" pos:end="239:46">(<argument pos:start="239:16" pos:end="239:45"><expr pos:start="239:16" pos:end="239:45"><name pos:start="239:16" pos:end="239:25">best_count</name> <operator pos:start="239:27" pos:end="239:28">&gt;=</operator><literal type="number" pos:start="239:29" pos:end="239:29">0</literal> <operator pos:start="239:31" pos:end="239:32">&amp;&amp;</operator> <name pos:start="239:34" pos:end="239:43">best_count</name><operator pos:start="239:44" pos:end="239:44">&lt;</operator><literal type="number" pos:start="239:45" pos:end="239:45">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:41"><expr pos:start="241:9" pos:end="241:40"><call pos:start="241:9" pos:end="241:40"><name pos:start="241:9" pos:end="241:14">assert</name><argument_list pos:start="241:15" pos:end="241:40">(<argument pos:start="241:16" pos:end="241:39"><expr pos:start="241:16" pos:end="241:39"><name pos:start="241:16" pos:end="241:20">level</name><operator pos:start="241:21" pos:end="241:21">&lt;</operator><literal type="number" pos:start="241:22" pos:end="241:22">4</literal> <operator pos:start="241:24" pos:end="241:25">||</operator> <name pos:start="241:27" pos:end="241:36">best_count</name><operator pos:start="241:37" pos:end="241:38">==</operator><literal type="number" pos:start="241:39" pos:end="241:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="245:9" pos:end="245:33">/* output the encoding */</comment>

        <expr_stmt pos:start="247:9" pos:end="251:47"><expr pos:start="247:9" pos:end="251:46"><call pos:start="247:9" pos:end="251:46"><name pos:start="247:9" pos:end="247:16">put_bits</name><argument_list pos:start="247:17" pos:end="251:46">(<argument pos:start="247:18" pos:end="247:38"><expr pos:start="247:18" pos:end="247:38"><operator pos:start="247:18" pos:end="247:18">&amp;</operator><name pos:start="247:19" pos:end="247:38"><name pos:start="247:19" pos:end="247:19">s</name><operator pos:start="247:20" pos:end="247:21">-&gt;</operator><name pos:start="247:22" pos:end="247:31">reorder_pb</name><index pos:start="247:32" pos:end="247:38">[<expr pos:start="247:33" pos:end="247:37"><name pos:start="247:33" pos:end="247:37">level</name></expr>]</index></name></expr></argument>,

            <argument pos:start="249:13" pos:end="249:45"><expr pos:start="249:13" pos:end="249:45"><name pos:start="249:13" pos:end="249:45"><name pos:start="249:13" pos:end="249:26">multistage_vlc</name><index pos:start="249:27" pos:end="249:42">[<expr pos:start="249:28" pos:end="249:41"><literal type="number" pos:start="249:28" pos:end="249:30">1</literal> <operator pos:start="249:30" pos:end="249:30">+</operator> <name pos:start="249:32" pos:end="249:41">best_count</name></expr>]</index><index pos:start="249:43" pos:end="249:45">[<expr pos:start="249:44" pos:end="249:44"><literal type="number" pos:start="249:44" pos:end="249:44">1</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="251:13" pos:end="251:45"><expr pos:start="251:13" pos:end="251:45"><name pos:start="251:13" pos:end="251:45"><name pos:start="251:13" pos:end="251:26">multistage_vlc</name><index pos:start="251:27" pos:end="251:42">[<expr pos:start="251:28" pos:end="251:41"><literal type="number" pos:start="251:28" pos:end="251:30">1</literal> <operator pos:start="251:30" pos:end="251:30">+</operator> <name pos:start="251:32" pos:end="251:41">best_count</name></expr>]</index><index pos:start="251:43" pos:end="251:45">[<expr pos:start="251:44" pos:end="251:44"><literal type="number" pos:start="251:44" pos:end="251:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="255:36"><expr pos:start="253:9" pos:end="255:35"><call pos:start="253:9" pos:end="255:35"><name pos:start="253:9" pos:end="253:16">put_bits</name><argument_list pos:start="253:17" pos:end="255:35">(<argument pos:start="253:18" pos:end="253:38"><expr pos:start="253:18" pos:end="253:38"><operator pos:start="253:18" pos:end="253:18">&amp;</operator><name pos:start="253:19" pos:end="253:38"><name pos:start="253:19" pos:end="253:19">s</name><operator pos:start="253:20" pos:end="253:21">-&gt;</operator><name pos:start="253:22" pos:end="253:31">reorder_pb</name><index pos:start="253:32" pos:end="253:38">[<expr pos:start="253:33" pos:end="253:37"><name pos:start="253:33" pos:end="253:37">level</name></expr>]</index></name></expr></argument>, <argument pos:start="253:41" pos:end="253:62"><expr pos:start="253:41" pos:end="253:62"><name pos:start="253:41" pos:end="253:62"><name pos:start="253:41" pos:end="253:48">mean_vlc</name><index pos:start="253:49" pos:end="253:59">[<expr pos:start="253:50" pos:end="253:58"><name pos:start="253:50" pos:end="253:58">best_mean</name></expr>]</index><index pos:start="253:60" pos:end="253:62">[<expr pos:start="253:61" pos:end="253:61"><literal type="number" pos:start="253:61" pos:end="253:61">1</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="255:13" pos:end="255:34"><expr pos:start="255:13" pos:end="255:34"><name pos:start="255:13" pos:end="255:34"><name pos:start="255:13" pos:end="255:20">mean_vlc</name><index pos:start="255:21" pos:end="255:31">[<expr pos:start="255:22" pos:end="255:30"><name pos:start="255:22" pos:end="255:30">best_mean</name></expr>]</index><index pos:start="255:32" pos:end="255:34">[<expr pos:start="255:33" pos:end="255:33"><literal type="number" pos:start="255:33" pos:end="255:33">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="259:9" pos:end="265:9">for <control pos:start="259:13" pos:end="259:40">(<init pos:start="259:14" pos:end="259:19"><expr pos:start="259:14" pos:end="259:18"><name pos:start="259:14" pos:end="259:14">i</name> <operator pos:start="259:16" pos:end="259:16">=</operator> <literal type="number" pos:start="259:18" pos:end="259:18">0</literal></expr>;</init> <condition pos:start="259:21" pos:end="259:35"><expr pos:start="259:21" pos:end="259:34"><name pos:start="259:21" pos:end="259:21">i</name> <operator pos:start="259:23" pos:end="259:23">&lt;</operator> <name pos:start="259:25" pos:end="259:34">best_count</name></expr>;</condition> <incr pos:start="259:37" pos:end="259:39"><expr pos:start="259:37" pos:end="259:39"><name pos:start="259:37" pos:end="259:37">i</name><operator pos:start="259:38" pos:end="259:39">++</operator></expr></incr>)</control><block pos:start="259:41" pos:end="265:9">{<block_content pos:start="261:13" pos:end="263:63">

            <expr_stmt pos:start="261:13" pos:end="261:59"><expr pos:start="261:13" pos:end="261:58"><call pos:start="261:13" pos:end="261:58"><name pos:start="261:13" pos:end="261:18">assert</name><argument_list pos:start="261:19" pos:end="261:58">(<argument pos:start="261:20" pos:end="261:57"><expr pos:start="261:20" pos:end="261:57"><name pos:start="261:20" pos:end="261:33"><name pos:start="261:20" pos:end="261:30">best_vector</name><index pos:start="261:31" pos:end="261:33">[<expr pos:start="261:32" pos:end="261:32"><name pos:start="261:32" pos:end="261:32">i</name></expr>]</index></name><operator pos:start="261:34" pos:end="261:35">&gt;=</operator><literal type="number" pos:start="261:36" pos:end="261:36">0</literal> <operator pos:start="261:38" pos:end="261:39">&amp;&amp;</operator> <name pos:start="261:41" pos:end="261:54"><name pos:start="261:41" pos:end="261:51">best_vector</name><index pos:start="261:52" pos:end="261:54">[<expr pos:start="261:53" pos:end="261:53"><name pos:start="261:53" pos:end="261:53">i</name></expr>]</index></name><operator pos:start="261:55" pos:end="261:55">&lt;</operator><literal type="number" pos:start="261:56" pos:end="261:57">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:63"><expr pos:start="263:13" pos:end="263:62"><call pos:start="263:13" pos:end="263:62"><name pos:start="263:13" pos:end="263:20">put_bits</name><argument_list pos:start="263:21" pos:end="263:62">(<argument pos:start="263:22" pos:end="263:42"><expr pos:start="263:22" pos:end="263:42"><operator pos:start="263:22" pos:end="263:22">&amp;</operator><name pos:start="263:23" pos:end="263:42"><name pos:start="263:23" pos:end="263:23">s</name><operator pos:start="263:24" pos:end="263:25">-&gt;</operator><name pos:start="263:26" pos:end="263:35">reorder_pb</name><index pos:start="263:36" pos:end="263:42">[<expr pos:start="263:37" pos:end="263:41"><name pos:start="263:37" pos:end="263:41">level</name></expr>]</index></name></expr></argument>, <argument pos:start="263:45" pos:end="263:45"><expr pos:start="263:45" pos:end="263:45"><literal type="number" pos:start="263:45" pos:end="263:45">4</literal></expr></argument>, <argument pos:start="263:48" pos:end="263:61"><expr pos:start="263:48" pos:end="263:61"><name pos:start="263:48" pos:end="263:61"><name pos:start="263:48" pos:end="263:58">best_vector</name><index pos:start="263:59" pos:end="263:61">[<expr pos:start="263:60" pos:end="263:60"><name pos:start="263:60" pos:end="263:60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <for pos:start="269:9" pos:end="277:9">for<control pos:start="269:12" pos:end="269:26">(<init pos:start="269:13" pos:end="269:16"><expr pos:start="269:13" pos:end="269:15"><name pos:start="269:13" pos:end="269:13">y</name><operator pos:start="269:14" pos:end="269:14">=</operator><literal type="number" pos:start="269:15" pos:end="269:15">0</literal></expr>;</init> <condition pos:start="269:18" pos:end="269:21"><expr pos:start="269:18" pos:end="269:20"><name pos:start="269:18" pos:end="269:18">y</name><operator pos:start="269:19" pos:end="269:19">&lt;</operator><name pos:start="269:20" pos:end="269:20">h</name></expr>;</condition> <incr pos:start="269:23" pos:end="269:25"><expr pos:start="269:23" pos:end="269:25"><name pos:start="269:23" pos:end="269:23">y</name><operator pos:start="269:24" pos:end="269:25">++</operator></expr></incr>)</control><block pos:start="269:27" pos:end="277:9">{<block_content pos:start="271:13" pos:end="275:13">

            <for pos:start="271:13" pos:end="275:13">for<control pos:start="271:16" pos:end="271:30">(<init pos:start="271:17" pos:end="271:20"><expr pos:start="271:17" pos:end="271:19"><name pos:start="271:17" pos:end="271:17">x</name><operator pos:start="271:18" pos:end="271:18">=</operator><literal type="number" pos:start="271:19" pos:end="271:19">0</literal></expr>;</init> <condition pos:start="271:22" pos:end="271:25"><expr pos:start="271:22" pos:end="271:24"><name pos:start="271:22" pos:end="271:22">x</name><operator pos:start="271:23" pos:end="271:23">&lt;</operator><name pos:start="271:24" pos:end="271:24">w</name></expr>;</condition> <incr pos:start="271:27" pos:end="271:29"><expr pos:start="271:27" pos:end="271:29"><name pos:start="271:27" pos:end="271:27">x</name><operator pos:start="271:28" pos:end="271:29">++</operator></expr></incr>)</control><block pos:start="271:31" pos:end="275:13">{<block_content pos:start="273:17" pos:end="273:98">

                <expr_stmt pos:start="273:17" pos:end="273:98"><expr pos:start="273:17" pos:end="273:97"><name pos:start="273:17" pos:end="273:37"><name pos:start="273:17" pos:end="273:23">decoded</name><index pos:start="273:24" pos:end="273:37">[<expr pos:start="273:25" pos:end="273:36"><name pos:start="273:25" pos:end="273:25">x</name> <operator pos:start="273:27" pos:end="273:27">+</operator> <name pos:start="273:29" pos:end="273:29">y</name><operator pos:start="273:30" pos:end="273:30">*</operator><name pos:start="273:31" pos:end="273:36">stride</name></expr>]</index></name><operator pos:start="273:38" pos:end="273:38">=</operator> <name pos:start="273:40" pos:end="273:56"><name pos:start="273:40" pos:end="273:42">src</name><index pos:start="273:43" pos:end="273:56">[<expr pos:start="273:44" pos:end="273:55"><name pos:start="273:44" pos:end="273:44">x</name> <operator pos:start="273:46" pos:end="273:46">+</operator> <name pos:start="273:48" pos:end="273:48">y</name><operator pos:start="273:49" pos:end="273:49">*</operator><name pos:start="273:50" pos:end="273:55">stride</name></expr>]</index></name> <operator pos:start="273:58" pos:end="273:58">-</operator> <name pos:start="273:60" pos:end="273:85"><name pos:start="273:60" pos:end="273:64">block</name><index pos:start="273:65" pos:end="273:76">[<expr pos:start="273:66" pos:end="273:75"><name pos:start="273:66" pos:end="273:75">best_count</name></expr>]</index><index pos:start="273:77" pos:end="273:85">[<expr pos:start="273:78" pos:end="273:84"><name pos:start="273:78" pos:end="273:78">x</name> <operator pos:start="273:80" pos:end="273:80">+</operator> <name pos:start="273:82" pos:end="273:82">w</name><operator pos:start="273:83" pos:end="273:83">*</operator><name pos:start="273:84" pos:end="273:84">y</name></expr>]</index></name> <operator pos:start="273:87" pos:end="273:87">+</operator> <name pos:start="273:89" pos:end="273:97">best_mean</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <return pos:start="283:5" pos:end="283:22">return <expr pos:start="283:12" pos:end="283:21"><name pos:start="283:12" pos:end="283:21">best_score</name></expr>;</return>

</block_content>}</block></function>
</unit>
