<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16309.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">vfio_err_notifier_handler</name><parameter_list pos:start="1:38" pos:end="1:51">(<parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:44"><name pos:start="1:39" pos:end="1:42">void</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:50">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:38">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">VFIOPCIDevice</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:23">vdev</name> <init pos:start="5:25" pos:end="5:32">= <expr pos:start="5:27" pos:end="5:32"><name pos:start="5:27" pos:end="5:32">opaque</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:60">(<expr pos:start="9:9" pos:end="9:59"><operator pos:start="9:9" pos:end="9:9">!</operator><call pos:start="9:10" pos:end="9:59"><name pos:start="9:10" pos:end="9:38">event_notifier_test_and_clear</name><argument_list pos:start="9:39" pos:end="9:59">(<argument pos:start="9:40" pos:end="9:58"><expr pos:start="9:40" pos:end="9:58"><operator pos:start="9:40" pos:end="9:40">&amp;</operator><name pos:start="9:41" pos:end="9:58"><name pos:start="9:41" pos:end="9:44">vdev</name><operator pos:start="9:45" pos:end="9:46">-&gt;</operator><name pos:start="9:47" pos:end="9:58">err_notifier</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:62" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:15">

        <return pos:start="11:9" pos:end="11:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="17:5" pos:end="31:7">/*

     * TBD. Retrieve the error details and decide what action

     * needs to be taken. One of the actions could be to pass

     * the error to the guest and have the guest driver recover

     * from the error. This requires that PCIe capabilities be

     * exposed to the guest. For now, we just terminate the

     * guest to contain the error.

     */</comment>



    <expr_stmt pos:start="35:5" pos:end="41:55"><expr pos:start="35:5" pos:end="41:54"><call pos:start="35:5" pos:end="41:54"><name pos:start="35:5" pos:end="35:16">error_report</name><argument_list pos:start="35:17" pos:end="41:54">(<argument pos:start="35:18" pos:end="37:75"><expr pos:start="35:18" pos:end="37:75"><literal type="string" pos:start="35:18" pos:end="35:72">"%s(%04x:%02x:%02x.%x) Unrecoverable error detected.  "</literal>

                 <literal type="string" pos:start="37:18" pos:end="37:75">"Please collect any data possible and then kill the guest"</literal></expr></argument>,

                 <argument pos:start="39:18" pos:end="39:25"><expr pos:start="39:18" pos:end="39:25"><name pos:start="39:18" pos:end="39:25">__func__</name></expr></argument>, <argument pos:start="39:28" pos:end="39:44"><expr pos:start="39:28" pos:end="39:44"><name pos:start="39:28" pos:end="39:44"><name pos:start="39:28" pos:end="39:31">vdev</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:37">host</name><operator pos:start="39:38" pos:end="39:38">.</operator><name pos:start="39:39" pos:end="39:44">domain</name></name></expr></argument>, <argument pos:start="39:47" pos:end="39:60"><expr pos:start="39:47" pos:end="39:60"><name pos:start="39:47" pos:end="39:60"><name pos:start="39:47" pos:end="39:50">vdev</name><operator pos:start="39:51" pos:end="39:52">-&gt;</operator><name pos:start="39:53" pos:end="39:56">host</name><operator pos:start="39:57" pos:end="39:57">.</operator><name pos:start="39:58" pos:end="39:60">bus</name></name></expr></argument>,

                 <argument pos:start="41:18" pos:end="41:32"><expr pos:start="41:18" pos:end="41:32"><name pos:start="41:18" pos:end="41:32"><name pos:start="41:18" pos:end="41:21">vdev</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:27">host</name><operator pos:start="41:28" pos:end="41:28">.</operator><name pos:start="41:29" pos:end="41:32">slot</name></name></expr></argument>, <argument pos:start="41:35" pos:end="41:53"><expr pos:start="41:35" pos:end="41:53"><name pos:start="41:35" pos:end="41:53"><name pos:start="41:35" pos:end="41:38">vdev</name><operator pos:start="41:39" pos:end="41:40">-&gt;</operator><name pos:start="41:41" pos:end="41:44">host</name><operator pos:start="41:45" pos:end="41:45">.</operator><name pos:start="41:46" pos:end="41:53">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:38"><expr pos:start="45:5" pos:end="45:37"><call pos:start="45:5" pos:end="45:37"><name pos:start="45:5" pos:end="45:11">vm_stop</name><argument_list pos:start="45:12" pos:end="45:37">(<argument pos:start="45:13" pos:end="45:36"><expr pos:start="45:13" pos:end="45:36"><name pos:start="45:13" pos:end="45:36">RUN_STATE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
