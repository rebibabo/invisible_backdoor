<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14441.c" pos:tabs="8"><function pos:start="1:1" pos:end="313:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">rm_read_audio_stream_info</name><parameter_list pos:start="1:37" pos:end="3:79">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><name pos:start="1:38" pos:end="1:52">AVFormatContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">s</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:72"><decl pos:start="1:58" pos:end="1:72"><type pos:start="1:58" pos:end="1:72"><name pos:start="1:58" pos:end="1:68">AVIOContext</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:72">pb</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:49"><decl pos:start="3:38" pos:end="3:49"><type pos:start="3:38" pos:end="3:49"><name pos:start="3:38" pos:end="3:45">AVStream</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:49">st</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:64"><decl pos:start="3:52" pos:end="3:64"><type pos:start="3:52" pos:end="3:64"><name pos:start="3:52" pos:end="3:59">RMStream</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:64">ast</name></decl></parameter>, <parameter pos:start="3:67" pos:end="3:78"><decl pos:start="3:67" pos:end="3:78"><type pos:start="3:67" pos:end="3:78"><name pos:start="3:67" pos:end="3:69">int</name></type> <name pos:start="3:71" pos:end="3:78">read_all</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="313:1">{<block_content pos:start="7:5" pos:end="311:13">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:17"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:17">[<expr pos:start="7:14" pos:end="7:16"><literal type="number" pos:start="7:14" pos:end="7:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:20">version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:24">/* ra type header */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:28"><expr pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:11">version</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:27"><name pos:start="17:15" pos:end="17:23">avio_rb16</name><argument_list pos:start="17:24" pos:end="17:27">(<argument pos:start="17:25" pos:end="17:26"><expr pos:start="17:25" pos:end="17:26"><name pos:start="17:25" pos:end="17:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="17:30" pos:end="17:42">/* version */</comment>

    <if_stmt pos:start="19:5" pos:end="309:5"><if pos:start="19:5" pos:end="55:5">if <condition pos:start="19:8" pos:end="19:21">(<expr pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:15">version</name> <operator pos:start="19:17" pos:end="19:18">==</operator> <literal type="number" pos:start="19:20" pos:end="19:20">3</literal></expr>)</condition> <block pos:start="19:23" pos:end="55:5">{<block_content pos:start="21:9" pos:end="53:38">

        <decl_stmt pos:start="21:9" pos:end="21:40"><decl pos:start="21:9" pos:end="21:39"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:23">header_size</name> <init pos:start="21:25" pos:end="21:39">= <expr pos:start="21:27" pos:end="21:39"><call pos:start="21:27" pos:end="21:39"><name pos:start="21:27" pos:end="21:35">avio_rb16</name><argument_list pos:start="21:36" pos:end="21:39">(<argument pos:start="21:37" pos:end="21:38"><expr pos:start="21:37" pos:end="21:38"><name pos:start="21:37" pos:end="21:38">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:41"><decl pos:start="23:9" pos:end="23:40"><type pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:15">int64_t</name></type> <name pos:start="23:17" pos:end="23:24">startpos</name> <init pos:start="23:26" pos:end="23:40">= <expr pos:start="23:28" pos:end="23:40"><call pos:start="23:28" pos:end="23:40"><name pos:start="23:28" pos:end="23:36">avio_tell</name><argument_list pos:start="23:37" pos:end="23:40">(<argument pos:start="23:38" pos:end="23:39"><expr pos:start="23:38" pos:end="23:39"><name pos:start="23:38" pos:end="23:39">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:26"><expr pos:start="25:9" pos:end="25:25"><call pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:17">avio_skip</name><argument_list pos:start="25:18" pos:end="25:25">(<argument pos:start="25:19" pos:end="25:20"><expr pos:start="25:19" pos:end="25:20"><name pos:start="25:19" pos:end="25:20">pb</name></expr></argument>, <argument pos:start="25:23" pos:end="25:24"><expr pos:start="25:23" pos:end="25:24"><literal type="number" pos:start="25:23" pos:end="25:24">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:31"><expr pos:start="27:9" pos:end="27:30"><call pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:24">rm_read_metadata</name><argument_list pos:start="27:25" pos:end="27:30">(<argument pos:start="27:26" pos:end="27:26"><expr pos:start="27:26" pos:end="27:26"><name pos:start="27:26" pos:end="27:26">s</name></expr></argument>, <argument pos:start="27:29" pos:end="27:29"><expr pos:start="27:29" pos:end="27:29"><literal type="number" pos:start="27:29" pos:end="27:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="37:9"><if pos:start="29:9" pos:end="37:9">if <condition pos:start="29:12" pos:end="29:58">(<expr pos:start="29:13" pos:end="29:57"><operator pos:start="29:13" pos:end="29:13">(</operator><name pos:start="29:14" pos:end="29:21">startpos</name> <operator pos:start="29:23" pos:end="29:23">+</operator> <name pos:start="29:25" pos:end="29:35">header_size</name><operator pos:start="29:36" pos:end="29:36">)</operator> <operator pos:start="29:38" pos:end="29:39">&gt;=</operator> <call pos:start="29:41" pos:end="29:53"><name pos:start="29:41" pos:end="29:49">avio_tell</name><argument_list pos:start="29:50" pos:end="29:53">(<argument pos:start="29:51" pos:end="29:52"><expr pos:start="29:51" pos:end="29:52"><name pos:start="29:51" pos:end="29:52">pb</name></expr></argument>)</argument_list></call> <operator pos:start="29:55" pos:end="29:55">+</operator> <literal type="number" pos:start="29:57" pos:end="29:57">2</literal></expr>)</condition> <block pos:start="29:60" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:43">

            <comment type="line" pos:start="31:13" pos:end="31:47">// fourcc (should always be "lpcJ")</comment>

            <expr_stmt pos:start="33:13" pos:end="33:24"><expr pos:start="33:13" pos:end="33:23"><call pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:19">avio_r8</name><argument_list pos:start="33:20" pos:end="33:23">(<argument pos:start="33:21" pos:end="33:22"><expr pos:start="33:21" pos:end="33:22"><name pos:start="33:21" pos:end="33:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:43"><expr pos:start="35:13" pos:end="35:42"><call pos:start="35:13" pos:end="35:42"><name pos:start="35:13" pos:end="35:20">get_str8</name><argument_list pos:start="35:21" pos:end="35:42">(<argument pos:start="35:22" pos:end="35:23"><expr pos:start="35:22" pos:end="35:23"><name pos:start="35:22" pos:end="35:23">pb</name></expr></argument>, <argument pos:start="35:26" pos:end="35:28"><expr pos:start="35:26" pos:end="35:28"><name pos:start="35:26" pos:end="35:28">buf</name></expr></argument>, <argument pos:start="35:31" pos:end="35:41"><expr pos:start="35:31" pos:end="35:41"><sizeof pos:start="35:31" pos:end="35:41">sizeof<argument_list pos:start="35:37" pos:end="35:41">(<argument pos:start="35:38" pos:end="35:40"><expr pos:start="35:38" pos:end="35:40"><name pos:start="35:38" pos:end="35:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="39:9" pos:end="39:60">// Skip extra header crap (this should never happen)</comment>

        <if_stmt pos:start="41:9" pos:end="43:66"><if pos:start="41:9" pos:end="43:66">if <condition pos:start="41:12" pos:end="41:53">(<expr pos:start="41:13" pos:end="41:52"><operator pos:start="41:13" pos:end="41:13">(</operator><name pos:start="41:14" pos:end="41:21">startpos</name> <operator pos:start="41:23" pos:end="41:23">+</operator> <name pos:start="41:25" pos:end="41:35">header_size</name><operator pos:start="41:36" pos:end="41:36">)</operator> <operator pos:start="41:38" pos:end="41:38">&gt;</operator> <call pos:start="41:40" pos:end="41:52"><name pos:start="41:40" pos:end="41:48">avio_tell</name><argument_list pos:start="41:49" pos:end="41:52">(<argument pos:start="41:50" pos:end="41:51"><expr pos:start="41:50" pos:end="41:51"><name pos:start="41:50" pos:end="41:51">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:66"><block_content pos:start="43:13" pos:end="43:66">

            <expr_stmt pos:start="43:13" pos:end="43:66"><expr pos:start="43:13" pos:end="43:65"><call pos:start="43:13" pos:end="43:65"><name pos:start="43:13" pos:end="43:21">avio_skip</name><argument_list pos:start="43:22" pos:end="43:65">(<argument pos:start="43:23" pos:end="43:24"><expr pos:start="43:23" pos:end="43:24"><name pos:start="43:23" pos:end="43:24">pb</name></expr></argument>, <argument pos:start="43:27" pos:end="43:64"><expr pos:start="43:27" pos:end="43:64"><name pos:start="43:27" pos:end="43:37">header_size</name> <operator pos:start="43:39" pos:end="43:39">+</operator> <name pos:start="43:41" pos:end="43:48">startpos</name> <operator pos:start="43:50" pos:end="43:50">-</operator> <call pos:start="43:52" pos:end="43:64"><name pos:start="43:52" pos:end="43:60">avio_tell</name><argument_list pos:start="43:61" pos:end="43:64">(<argument pos:start="43:62" pos:end="43:63"><expr pos:start="43:62" pos:end="43:63"><name pos:start="43:62" pos:end="43:63">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:38"><expr pos:start="45:9" pos:end="45:37"><name pos:start="45:9" pos:end="45:30"><name pos:start="45:9" pos:end="45:10">st</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:17">codec</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:30">sample_rate</name></name> <operator pos:start="45:32" pos:end="45:32">=</operator> <literal type="number" pos:start="45:34" pos:end="45:37">8000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:32"><expr pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:10">st</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:17">codec</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:27">channels</name></name> <operator pos:start="47:29" pos:end="47:29">=</operator> <literal type="number" pos:start="47:31" pos:end="47:31">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:51"><expr pos:start="49:9" pos:end="49:50"><name pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:10">st</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:17">codec</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:29">codec_type</name></name> <operator pos:start="49:31" pos:end="49:31">=</operator> <name pos:start="49:33" pos:end="49:50">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:46"><expr pos:start="51:9" pos:end="51:45"><name pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:10">st</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:17">codec</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:27">codec_id</name></name> <operator pos:start="51:29" pos:end="51:29">=</operator> <name pos:start="51:31" pos:end="51:45">CODEC_ID_RA_144</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:38"><expr pos:start="53:9" pos:end="53:37"><name pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:11">ast</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:21">deint_id</name></name> <operator pos:start="53:23" pos:end="53:23">=</operator> <name pos:start="53:25" pos:end="53:37">DEINT_ID_INT0</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="309:5">else <block pos:start="55:12" pos:end="309:5">{<block_content pos:start="57:9" pos:end="307:9">

        <decl_stmt pos:start="57:9" pos:end="57:67"><decl pos:start="57:9" pos:end="57:18"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:18">flavor</name></decl>, <decl pos:start="57:21" pos:end="57:32"><type ref="prev" pos:start="57:9" pos:end="57:11"/><name pos:start="57:21" pos:end="57:32">sub_packet_h</name></decl>, <decl pos:start="57:35" pos:end="57:49"><type ref="prev" pos:start="57:9" pos:end="57:11"/><name pos:start="57:35" pos:end="57:49">coded_framesize</name></decl>, <decl pos:start="57:52" pos:end="57:66"><type ref="prev" pos:start="57:9" pos:end="57:11"/><name pos:start="57:52" pos:end="57:66">sub_packet_size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:29"><decl pos:start="59:9" pos:end="59:28"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:28">codecdata_length</name></decl>;</decl_stmt>

        <comment type="block" pos:start="61:9" pos:end="61:29">/* old version (4) */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:25"><expr pos:start="63:9" pos:end="63:24"><call pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:17">avio_skip</name><argument_list pos:start="63:18" pos:end="63:24">(<argument pos:start="63:19" pos:end="63:20"><expr pos:start="63:19" pos:end="63:20"><name pos:start="63:19" pos:end="63:20">pb</name></expr></argument>, <argument pos:start="63:23" pos:end="63:23"><expr pos:start="63:23" pos:end="63:23"><literal type="number" pos:start="63:23" pos:end="63:23">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="63:27" pos:end="63:38">/* unused */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><call pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:17">avio_rb32</name><argument_list pos:start="65:18" pos:end="65:21">(<argument pos:start="65:19" pos:end="65:20"><expr pos:start="65:19" pos:end="65:20"><name pos:start="65:19" pos:end="65:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="65:24" pos:end="65:33">/* .ra4 */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:22"><expr pos:start="67:9" pos:end="67:21"><call pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:17">avio_rb32</name><argument_list pos:start="67:18" pos:end="67:21">(<argument pos:start="67:19" pos:end="67:20"><expr pos:start="67:19" pos:end="67:20"><name pos:start="67:19" pos:end="67:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="67:24" pos:end="67:38">/* data size */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:22"><expr pos:start="69:9" pos:end="69:21"><call pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:17">avio_rb16</name><argument_list pos:start="69:18" pos:end="69:21">(<argument pos:start="69:19" pos:end="69:20"><expr pos:start="69:19" pos:end="69:20"><name pos:start="69:19" pos:end="69:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="69:24" pos:end="69:37">/* version2 */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:22"><expr pos:start="71:9" pos:end="71:21"><call pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:17">avio_rb32</name><argument_list pos:start="71:18" pos:end="71:21">(<argument pos:start="71:19" pos:end="71:20"><expr pos:start="71:19" pos:end="71:20"><name pos:start="71:19" pos:end="71:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="71:24" pos:end="71:40">/* header size */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:30"><expr pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:14">flavor</name><operator pos:start="73:15" pos:end="73:15">=</operator> <call pos:start="73:17" pos:end="73:29"><name pos:start="73:17" pos:end="73:25">avio_rb16</name><argument_list pos:start="73:26" pos:end="73:29">(<argument pos:start="73:27" pos:end="73:28"><expr pos:start="73:27" pos:end="73:28"><name pos:start="73:27" pos:end="73:28">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="73:32" pos:end="73:60">/* add codec info / flavor */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:63"><expr pos:start="75:9" pos:end="75:62"><name pos:start="75:9" pos:end="75:28"><name pos:start="75:9" pos:end="75:11">ast</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:28">coded_framesize</name></name> <operator pos:start="75:30" pos:end="75:30">=</operator> <name pos:start="75:32" pos:end="75:46">coded_framesize</name> <operator pos:start="75:48" pos:end="75:48">=</operator> <call pos:start="75:50" pos:end="75:62"><name pos:start="75:50" pos:end="75:58">avio_rb32</name><argument_list pos:start="75:59" pos:end="75:62">(<argument pos:start="75:60" pos:end="75:61"><expr pos:start="75:60" pos:end="75:61"><name pos:start="75:60" pos:end="75:61">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="75:65" pos:end="75:86">/* coded frame size */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:22"><expr pos:start="77:9" pos:end="77:21"><call pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:17">avio_rb32</name><argument_list pos:start="77:18" pos:end="77:21">(<argument pos:start="77:19" pos:end="77:20"><expr pos:start="77:19" pos:end="77:20"><name pos:start="77:19" pos:end="77:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="77:24" pos:end="77:32">/* ??? */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:22"><expr pos:start="79:9" pos:end="79:21"><call pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:17">avio_rb32</name><argument_list pos:start="79:18" pos:end="79:21">(<argument pos:start="79:19" pos:end="79:20"><expr pos:start="79:19" pos:end="79:20"><name pos:start="79:19" pos:end="79:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="79:24" pos:end="79:32">/* ??? */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:22"><expr pos:start="81:9" pos:end="81:21"><call pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:17">avio_rb32</name><argument_list pos:start="81:18" pos:end="81:21">(<argument pos:start="81:19" pos:end="81:20"><expr pos:start="81:19" pos:end="81:20"><name pos:start="81:19" pos:end="81:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="81:24" pos:end="81:32">/* ??? */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:57"><expr pos:start="83:9" pos:end="83:56"><name pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:11">ast</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:25">sub_packet_h</name></name> <operator pos:start="83:27" pos:end="83:27">=</operator> <name pos:start="83:29" pos:end="83:40">sub_packet_h</name> <operator pos:start="83:42" pos:end="83:42">=</operator> <call pos:start="83:44" pos:end="83:56"><name pos:start="83:44" pos:end="83:52">avio_rb16</name><argument_list pos:start="83:53" pos:end="83:56">(<argument pos:start="83:54" pos:end="83:55"><expr pos:start="83:54" pos:end="83:55"><name pos:start="83:54" pos:end="83:55">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="83:59" pos:end="83:65">/* 1 */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:46"><expr pos:start="85:9" pos:end="85:45"><name pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:10">st</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:17">codec</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:30">block_align</name></name><operator pos:start="85:31" pos:end="85:31">=</operator> <call pos:start="85:33" pos:end="85:45"><name pos:start="85:33" pos:end="85:41">avio_rb16</name><argument_list pos:start="85:42" pos:end="85:45">(<argument pos:start="85:43" pos:end="85:44"><expr pos:start="85:43" pos:end="85:44"><name pos:start="85:43" pos:end="85:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="85:48" pos:end="85:63">/* frame size */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:63"><expr pos:start="87:9" pos:end="87:62"><name pos:start="87:9" pos:end="87:28"><name pos:start="87:9" pos:end="87:11">ast</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:28">sub_packet_size</name></name> <operator pos:start="87:30" pos:end="87:30">=</operator> <name pos:start="87:32" pos:end="87:46">sub_packet_size</name> <operator pos:start="87:48" pos:end="87:48">=</operator> <call pos:start="87:50" pos:end="87:62"><name pos:start="87:50" pos:end="87:58">avio_rb16</name><argument_list pos:start="87:59" pos:end="87:62">(<argument pos:start="87:60" pos:end="87:61"><expr pos:start="87:60" pos:end="87:61"><name pos:start="87:60" pos:end="87:61">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="87:65" pos:end="87:85">/* sub packet size */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:22"><expr pos:start="89:9" pos:end="89:21"><call pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:17">avio_rb16</name><argument_list pos:start="89:18" pos:end="89:21">(<argument pos:start="89:19" pos:end="89:20"><expr pos:start="89:19" pos:end="89:20"><name pos:start="89:19" pos:end="89:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="89:24" pos:end="89:32">/* ??? */</comment>

        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:25">(<expr pos:start="91:13" pos:end="91:24"><name pos:start="91:13" pos:end="91:19">version</name> <operator pos:start="91:21" pos:end="91:22">==</operator> <literal type="number" pos:start="91:24" pos:end="91:24">5</literal></expr>)</condition> <block pos:start="91:27" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:56">

            <expr_stmt pos:start="93:13" pos:end="93:26"><expr pos:start="93:13" pos:end="93:25"><call pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:21">avio_rb16</name><argument_list pos:start="93:22" pos:end="93:25">(<argument pos:start="93:23" pos:end="93:24"><expr pos:start="93:23" pos:end="93:24"><name pos:start="93:23" pos:end="93:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="93:28" pos:end="93:41"><expr pos:start="93:28" pos:end="93:40"><call pos:start="93:28" pos:end="93:40"><name pos:start="93:28" pos:end="93:36">avio_rb16</name><argument_list pos:start="93:37" pos:end="93:40">(<argument pos:start="93:38" pos:end="93:39"><expr pos:start="93:38" pos:end="93:39"><name pos:start="93:38" pos:end="93:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="93:43" pos:end="93:56"><expr pos:start="93:43" pos:end="93:55"><call pos:start="93:43" pos:end="93:55"><name pos:start="93:43" pos:end="93:51">avio_rb16</name><argument_list pos:start="93:52" pos:end="93:55">(<argument pos:start="93:53" pos:end="93:54"><expr pos:start="93:53" pos:end="93:54"><name pos:start="93:53" pos:end="93:54">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:47"><expr pos:start="97:9" pos:end="97:46"><name pos:start="97:9" pos:end="97:30"><name pos:start="97:9" pos:end="97:10">st</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:17">codec</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:30">sample_rate</name></name> <operator pos:start="97:32" pos:end="97:32">=</operator> <call pos:start="97:34" pos:end="97:46"><name pos:start="97:34" pos:end="97:42">avio_rb16</name><argument_list pos:start="97:43" pos:end="97:46">(<argument pos:start="97:44" pos:end="97:45"><expr pos:start="97:44" pos:end="97:45"><name pos:start="97:44" pos:end="97:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:22"><expr pos:start="99:9" pos:end="99:21"><call pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:17">avio_rb32</name><argument_list pos:start="99:18" pos:end="99:21">(<argument pos:start="99:19" pos:end="99:20"><expr pos:start="99:19" pos:end="99:20"><name pos:start="99:19" pos:end="99:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:44"><expr pos:start="101:9" pos:end="101:43"><name pos:start="101:9" pos:end="101:27"><name pos:start="101:9" pos:end="101:10">st</name><operator pos:start="101:11" pos:end="101:12">-&gt;</operator><name pos:start="101:13" pos:end="101:17">codec</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:27">channels</name></name> <operator pos:start="101:29" pos:end="101:29">=</operator> <call pos:start="101:31" pos:end="101:43"><name pos:start="101:31" pos:end="101:39">avio_rb16</name><argument_list pos:start="101:40" pos:end="101:43">(<argument pos:start="101:41" pos:end="101:42"><expr pos:start="101:41" pos:end="101:42"><name pos:start="101:41" pos:end="101:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="119:9"><if pos:start="103:9" pos:end="111:9">if <condition pos:start="103:12" pos:end="103:25">(<expr pos:start="103:13" pos:end="103:24"><name pos:start="103:13" pos:end="103:19">version</name> <operator pos:start="103:21" pos:end="103:22">==</operator> <literal type="number" pos:start="103:24" pos:end="103:24">5</literal></expr>)</condition> <block pos:start="103:27" pos:end="111:9">{<block_content pos:start="105:13" pos:end="109:23">

            <expr_stmt pos:start="105:13" pos:end="105:42"><expr pos:start="105:13" pos:end="105:41"><name pos:start="105:13" pos:end="105:25"><name pos:start="105:13" pos:end="105:15">ast</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:25">deint_id</name></name> <operator pos:start="105:27" pos:end="105:27">=</operator> <call pos:start="105:29" pos:end="105:41"><name pos:start="105:29" pos:end="105:37">avio_rl32</name><argument_list pos:start="105:38" pos:end="105:41">(<argument pos:start="105:39" pos:end="105:40"><expr pos:start="105:39" pos:end="105:40"><name pos:start="105:39" pos:end="105:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:34"><expr pos:start="107:13" pos:end="107:33"><call pos:start="107:13" pos:end="107:33"><name pos:start="107:13" pos:end="107:21">avio_read</name><argument_list pos:start="107:22" pos:end="107:33">(<argument pos:start="107:23" pos:end="107:24"><expr pos:start="107:23" pos:end="107:24"><name pos:start="107:23" pos:end="107:24">pb</name></expr></argument>, <argument pos:start="107:27" pos:end="107:29"><expr pos:start="107:27" pos:end="107:29"><name pos:start="107:27" pos:end="107:29">buf</name></expr></argument>, <argument pos:start="107:32" pos:end="107:32"><expr pos:start="107:32" pos:end="107:32"><literal type="number" pos:start="107:32" pos:end="107:32">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:23"><expr pos:start="109:13" pos:end="109:22"><name pos:start="109:13" pos:end="109:18"><name pos:start="109:13" pos:end="109:15">buf</name><index pos:start="109:16" pos:end="109:18">[<expr pos:start="109:17" pos:end="109:17"><literal type="number" pos:start="109:17" pos:end="109:17">4</literal></expr>]</index></name> <operator pos:start="109:20" pos:end="109:20">=</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="111:11" pos:end="119:9">else <block pos:start="111:16" pos:end="119:9">{<block_content pos:start="113:13" pos:end="117:43">

            <expr_stmt pos:start="113:13" pos:end="113:43"><expr pos:start="113:13" pos:end="113:42"><call pos:start="113:13" pos:end="113:42"><name pos:start="113:13" pos:end="113:20">get_str8</name><argument_list pos:start="113:21" pos:end="113:42">(<argument pos:start="113:22" pos:end="113:23"><expr pos:start="113:22" pos:end="113:23"><name pos:start="113:22" pos:end="113:23">pb</name></expr></argument>, <argument pos:start="113:26" pos:end="113:28"><expr pos:start="113:26" pos:end="113:28"><name pos:start="113:26" pos:end="113:28">buf</name></expr></argument>, <argument pos:start="113:31" pos:end="113:41"><expr pos:start="113:31" pos:end="113:41"><sizeof pos:start="113:31" pos:end="113:41">sizeof<argument_list pos:start="113:37" pos:end="113:41">(<argument pos:start="113:38" pos:end="113:40"><expr pos:start="113:38" pos:end="113:40"><name pos:start="113:38" pos:end="113:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="113:45" pos:end="113:54">/* desc */</comment>

            <expr_stmt pos:start="115:13" pos:end="115:41"><expr pos:start="115:13" pos:end="115:40"><name pos:start="115:13" pos:end="115:25"><name pos:start="115:13" pos:end="115:15">ast</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:25">deint_id</name></name> <operator pos:start="115:27" pos:end="115:27">=</operator> <call pos:start="115:29" pos:end="115:40"><name pos:start="115:29" pos:end="115:35">AV_RL32</name><argument_list pos:start="115:36" pos:end="115:40">(<argument pos:start="115:37" pos:end="115:39"><expr pos:start="115:37" pos:end="115:39"><name pos:start="115:37" pos:end="115:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:43"><expr pos:start="117:13" pos:end="117:42"><call pos:start="117:13" pos:end="117:42"><name pos:start="117:13" pos:end="117:20">get_str8</name><argument_list pos:start="117:21" pos:end="117:42">(<argument pos:start="117:22" pos:end="117:23"><expr pos:start="117:22" pos:end="117:23"><name pos:start="117:22" pos:end="117:23">pb</name></expr></argument>, <argument pos:start="117:26" pos:end="117:28"><expr pos:start="117:26" pos:end="117:28"><name pos:start="117:26" pos:end="117:28">buf</name></expr></argument>, <argument pos:start="117:31" pos:end="117:41"><expr pos:start="117:31" pos:end="117:41"><sizeof pos:start="117:31" pos:end="117:41">sizeof<argument_list pos:start="117:37" pos:end="117:41">(<argument pos:start="117:38" pos:end="117:40"><expr pos:start="117:38" pos:end="117:40"><name pos:start="117:38" pos:end="117:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="117:45" pos:end="117:54">/* desc */</comment>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:51"><expr pos:start="121:9" pos:end="121:50"><name pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:10">st</name><operator pos:start="121:11" pos:end="121:12">-&gt;</operator><name pos:start="121:13" pos:end="121:17">codec</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:29">codec_type</name></name> <operator pos:start="121:31" pos:end="121:31">=</operator> <name pos:start="121:33" pos:end="121:50">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:45"><expr pos:start="123:9" pos:end="123:44"><name pos:start="123:9" pos:end="123:28"><name pos:start="123:9" pos:end="123:10">st</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:17">codec</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:28">codec_tag</name></name>  <operator pos:start="123:31" pos:end="123:31">=</operator> <call pos:start="123:33" pos:end="123:44"><name pos:start="123:33" pos:end="123:39">AV_RL32</name><argument_list pos:start="123:40" pos:end="123:44">(<argument pos:start="123:41" pos:end="123:43"><expr pos:start="123:41" pos:end="123:43"><name pos:start="123:41" pos:end="123:43">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="127:70"><expr pos:start="125:9" pos:end="127:69"><name pos:start="125:9" pos:end="125:27"><name pos:start="125:9" pos:end="125:10">st</name><operator pos:start="125:11" pos:end="125:12">-&gt;</operator><name pos:start="125:13" pos:end="125:17">codec</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:27">codec_id</name></name>   <operator pos:start="125:31" pos:end="125:31">=</operator> <call pos:start="125:33" pos:end="127:69"><name pos:start="125:33" pos:end="125:47">ff_codec_get_id</name><argument_list pos:start="125:48" pos:end="127:69">(<argument pos:start="125:49" pos:end="125:64"><expr pos:start="125:49" pos:end="125:64"><name pos:start="125:49" pos:end="125:64">ff_rm_codec_tags</name></expr></argument>,

                                                <argument pos:start="127:49" pos:end="127:68"><expr pos:start="127:49" pos:end="127:68"><name pos:start="127:49" pos:end="127:68"><name pos:start="127:49" pos:end="127:50">st</name><operator pos:start="127:51" pos:end="127:52">-&gt;</operator><name pos:start="127:53" pos:end="127:57">codec</name><operator pos:start="127:58" pos:end="127:59">-&gt;</operator><name pos:start="127:60" pos:end="127:68">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="131:9" pos:end="153:9">switch <condition pos:start="131:16" pos:end="131:30">(<expr pos:start="131:17" pos:end="131:29"><name pos:start="131:17" pos:end="131:29"><name pos:start="131:17" pos:end="131:19">ast</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:29">deint_id</name></name></expr>)</condition> <block pos:start="131:32" pos:end="153:9">{<block_content pos:start="133:9" pos:end="151:39">

        <case pos:start="133:9" pos:end="133:27">case <expr pos:start="133:14" pos:end="133:26"><name pos:start="133:14" pos:end="133:26">DEINT_ID_GENR</name></expr>:</case>

        <case pos:start="135:9" pos:end="135:27">case <expr pos:start="135:14" pos:end="135:26"><name pos:start="135:14" pos:end="135:26">DEINT_ID_INT0</name></expr>:</case>

        <case pos:start="137:9" pos:end="137:27">case <expr pos:start="137:14" pos:end="137:26"><name pos:start="137:14" pos:end="137:26">DEINT_ID_INT4</name></expr>:</case>

        <case pos:start="139:9" pos:end="139:27">case <expr pos:start="139:14" pos:end="139:26"><name pos:start="139:14" pos:end="139:26">DEINT_ID_SIPR</name></expr>:</case>

        <case pos:start="141:9" pos:end="141:27">case <expr pos:start="141:14" pos:end="141:26"><name pos:start="141:14" pos:end="141:26">DEINT_ID_VBRS</name></expr>:</case>

        <case pos:start="143:9" pos:end="143:27">case <expr pos:start="143:14" pos:end="143:26"><name pos:start="143:14" pos:end="143:26">DEINT_ID_VBRF</name></expr>:</case>

            <break pos:start="145:13" pos:end="145:18">break;</break>

        <default pos:start="147:9" pos:end="147:16">default:</default>

            <expr_stmt pos:start="149:13" pos:end="149:69"><expr pos:start="149:13" pos:end="149:68"><call pos:start="149:13" pos:end="149:68"><name pos:start="149:13" pos:end="149:18">av_log</name><argument_list pos:start="149:19" pos:end="149:68">(<argument pos:start="149:20" pos:end="149:23"><expr pos:start="149:20" pos:end="149:23"><name pos:start="149:20" pos:end="149:23">NULL</name></expr></argument>,<argument pos:start="149:25" pos:end="149:25"><expr pos:start="149:25" pos:end="149:25"><literal type="number" pos:start="149:25" pos:end="149:25">0</literal></expr></argument>,<argument pos:start="149:27" pos:end="149:52"><expr pos:start="149:27" pos:end="149:52"><literal type="string" pos:start="149:27" pos:end="149:52">"Unknown interleaver %X\n"</literal></expr></argument>, <argument pos:start="149:55" pos:end="149:67"><expr pos:start="149:55" pos:end="149:67"><name pos:start="149:55" pos:end="149:67"><name pos:start="149:55" pos:end="149:57">ast</name><operator pos:start="149:58" pos:end="149:59">-&gt;</operator><name pos:start="149:60" pos:end="149:67">deint_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="151:13" pos:end="151:39">return <expr pos:start="151:20" pos:end="151:38"><name pos:start="151:20" pos:end="151:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></switch>

        <switch pos:start="155:9" pos:end="295:9">switch <condition pos:start="155:16" pos:end="155:36">(<expr pos:start="155:17" pos:end="155:35"><name pos:start="155:17" pos:end="155:35"><name pos:start="155:17" pos:end="155:18">st</name><operator pos:start="155:19" pos:end="155:20">-&gt;</operator><name pos:start="155:21" pos:end="155:25">codec</name><operator pos:start="155:26" pos:end="155:27">-&gt;</operator><name pos:start="155:28" pos:end="155:35">codec_id</name></name></expr>)</condition> <block pos:start="155:38" pos:end="295:9">{<block_content pos:start="157:9" pos:end="293:82">

        <case pos:start="157:9" pos:end="157:26">case <expr pos:start="157:14" pos:end="157:25"><name pos:start="157:14" pos:end="157:25">CODEC_ID_AC3</name></expr>:</case>

            <expr_stmt pos:start="159:13" pos:end="159:51"><expr pos:start="159:13" pos:end="159:50"><name pos:start="159:13" pos:end="159:28"><name pos:start="159:13" pos:end="159:14">st</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:28">need_parsing</name></name> <operator pos:start="159:30" pos:end="159:30">=</operator> <name pos:start="159:32" pos:end="159:50">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

            <break pos:start="161:13" pos:end="161:18">break;</break>

        <case pos:start="163:9" pos:end="163:29">case <expr pos:start="163:14" pos:end="163:28"><name pos:start="163:14" pos:end="163:28">CODEC_ID_RA_288</name></expr>:</case>

            <expr_stmt pos:start="165:13" pos:end="165:41"><expr pos:start="165:13" pos:end="165:40"><name pos:start="165:13" pos:end="165:37"><name pos:start="165:13" pos:end="165:14">st</name><operator pos:start="165:15" pos:end="165:16">-&gt;</operator><name pos:start="165:17" pos:end="165:21">codec</name><operator pos:start="165:22" pos:end="165:23">-&gt;</operator><name pos:start="165:24" pos:end="165:37">extradata_size</name></name><operator pos:start="165:38" pos:end="165:38">=</operator> <literal type="number" pos:start="165:40" pos:end="165:40">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:58"><expr pos:start="167:13" pos:end="167:57"><name pos:start="167:13" pos:end="167:32"><name pos:start="167:13" pos:end="167:15">ast</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:32">audio_framesize</name></name> <operator pos:start="167:34" pos:end="167:34">=</operator> <name pos:start="167:36" pos:end="167:57"><name pos:start="167:36" pos:end="167:37">st</name><operator pos:start="167:38" pos:end="167:39">-&gt;</operator><name pos:start="167:40" pos:end="167:44">codec</name><operator pos:start="167:45" pos:end="167:46">-&gt;</operator><name pos:start="167:47" pos:end="167:57">block_align</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:53"><expr pos:start="169:13" pos:end="169:52"><name pos:start="169:13" pos:end="169:34"><name pos:start="169:13" pos:end="169:14">st</name><operator pos:start="169:15" pos:end="169:16">-&gt;</operator><name pos:start="169:17" pos:end="169:21">codec</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:34">block_align</name></name> <operator pos:start="169:36" pos:end="169:36">=</operator> <name pos:start="169:38" pos:end="169:52">coded_framesize</name></expr>;</expr_stmt>



            <if_stmt pos:start="173:13" pos:end="179:13"><if pos:start="173:13" pos:end="179:13">if<condition pos:start="173:15" pos:end="173:63">(<expr pos:start="173:16" pos:end="173:62"><name pos:start="173:16" pos:end="173:35"><name pos:start="173:16" pos:end="173:18">ast</name><operator pos:start="173:19" pos:end="173:20">-&gt;</operator><name pos:start="173:21" pos:end="173:35">audio_framesize</name></name> <operator pos:start="173:37" pos:end="173:38">&gt;=</operator> <name pos:start="173:40" pos:end="173:47">UINT_MAX</name> <operator pos:start="173:49" pos:end="173:49">/</operator> <name pos:start="173:51" pos:end="173:62">sub_packet_h</name></expr>)</condition><block pos:start="173:64" pos:end="179:13">{<block_content pos:start="175:17" pos:end="177:26">

                <expr_stmt pos:start="175:17" pos:end="175:91"><expr pos:start="175:17" pos:end="175:90"><call pos:start="175:17" pos:end="175:90"><name pos:start="175:17" pos:end="175:22">av_log</name><argument_list pos:start="175:23" pos:end="175:90">(<argument pos:start="175:24" pos:end="175:24"><expr pos:start="175:24" pos:end="175:24"><name pos:start="175:24" pos:end="175:24">s</name></expr></argument>, <argument pos:start="175:27" pos:end="175:38"><expr pos:start="175:27" pos:end="175:38"><name pos:start="175:27" pos:end="175:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="175:41" pos:end="175:89"><expr pos:start="175:41" pos:end="175:89"><literal type="string" pos:start="175:41" pos:end="175:89">"ast-&gt;audio_framesize * sub_packet_h too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="177:17" pos:end="177:26">return <expr pos:start="177:24" pos:end="177:25"><operator pos:start="177:24" pos:end="177:24">-</operator><literal type="number" pos:start="177:25" pos:end="177:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="183:13" pos:end="183:74"><expr pos:start="183:13" pos:end="183:73"><call pos:start="183:13" pos:end="183:73"><name pos:start="183:13" pos:end="183:25">av_new_packet</name><argument_list pos:start="183:26" pos:end="183:73">(<argument pos:start="183:27" pos:end="183:35"><expr pos:start="183:27" pos:end="183:35"><operator pos:start="183:27" pos:end="183:27">&amp;</operator><name pos:start="183:28" pos:end="183:35"><name pos:start="183:28" pos:end="183:30">ast</name><operator pos:start="183:31" pos:end="183:32">-&gt;</operator><name pos:start="183:33" pos:end="183:35">pkt</name></name></expr></argument>, <argument pos:start="183:38" pos:end="183:72"><expr pos:start="183:38" pos:end="183:72"><name pos:start="183:38" pos:end="183:57"><name pos:start="183:38" pos:end="183:40">ast</name><operator pos:start="183:41" pos:end="183:42">-&gt;</operator><name pos:start="183:43" pos:end="183:57">audio_framesize</name></name> <operator pos:start="183:59" pos:end="183:59">*</operator> <name pos:start="183:61" pos:end="183:72">sub_packet_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        <case pos:start="187:9" pos:end="187:27">case <expr pos:start="187:14" pos:end="187:26"><name pos:start="187:14" pos:end="187:26">CODEC_ID_COOK</name></expr>:</case>

        <case pos:start="189:9" pos:end="189:29">case <expr pos:start="189:14" pos:end="189:28"><name pos:start="189:14" pos:end="189:28">CODEC_ID_ATRAC3</name></expr>:</case>

        <case pos:start="191:9" pos:end="191:27">case <expr pos:start="191:14" pos:end="191:26"><name pos:start="191:14" pos:end="191:26">CODEC_ID_SIPR</name></expr>:</case>

            <expr_stmt pos:start="193:13" pos:end="193:26"><expr pos:start="193:13" pos:end="193:25"><call pos:start="193:13" pos:end="193:25"><name pos:start="193:13" pos:end="193:21">avio_rb16</name><argument_list pos:start="193:22" pos:end="193:25">(<argument pos:start="193:23" pos:end="193:24"><expr pos:start="193:23" pos:end="193:24"><name pos:start="193:23" pos:end="193:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="193:28" pos:end="193:39"><expr pos:start="193:28" pos:end="193:38"><call pos:start="193:28" pos:end="193:38"><name pos:start="193:28" pos:end="193:34">avio_r8</name><argument_list pos:start="193:35" pos:end="193:38">(<argument pos:start="193:36" pos:end="193:37"><expr pos:start="193:36" pos:end="193:37"><name pos:start="193:36" pos:end="193:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="195:13" pos:end="197:28"><if pos:start="195:13" pos:end="197:28">if <condition pos:start="195:16" pos:end="195:29">(<expr pos:start="195:17" pos:end="195:28"><name pos:start="195:17" pos:end="195:23">version</name> <operator pos:start="195:25" pos:end="195:26">==</operator> <literal type="number" pos:start="195:28" pos:end="195:28">5</literal></expr>)</condition><block type="pseudo" pos:start="197:17" pos:end="197:28"><block_content pos:start="197:17" pos:end="197:28">

                <expr_stmt pos:start="197:17" pos:end="197:28"><expr pos:start="197:17" pos:end="197:27"><call pos:start="197:17" pos:end="197:27"><name pos:start="197:17" pos:end="197:23">avio_r8</name><argument_list pos:start="197:24" pos:end="197:27">(<argument pos:start="197:25" pos:end="197:26"><expr pos:start="197:25" pos:end="197:26"><name pos:start="197:25" pos:end="197:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:45"><expr pos:start="199:13" pos:end="199:44"><name pos:start="199:13" pos:end="199:28">codecdata_length</name> <operator pos:start="199:30" pos:end="199:30">=</operator> <call pos:start="199:32" pos:end="199:44"><name pos:start="199:32" pos:end="199:40">avio_rb32</name><argument_list pos:start="199:41" pos:end="199:44">(<argument pos:start="199:42" pos:end="199:43"><expr pos:start="199:42" pos:end="199:43"><name pos:start="199:42" pos:end="199:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="201:13" pos:end="207:13"><if pos:start="201:13" pos:end="207:13">if<condition pos:start="201:15" pos:end="201:93">(<expr pos:start="201:16" pos:end="201:92"><name pos:start="201:16" pos:end="201:31">codecdata_length</name> <operator pos:start="201:33" pos:end="201:33">+</operator> <name pos:start="201:35" pos:end="201:62">FF_INPUT_BUFFER_PADDING_SIZE</name> <operator pos:start="201:64" pos:end="201:65">&lt;=</operator> <operator pos:start="201:67" pos:end="201:67">(</operator><name pos:start="201:68" pos:end="201:75">unsigned</name><operator pos:start="201:76" pos:end="201:76">)</operator><name pos:start="201:77" pos:end="201:92">codecdata_length</name></expr>)</condition><block pos:start="201:94" pos:end="207:13">{<block_content pos:start="203:17" pos:end="205:26">

                <expr_stmt pos:start="203:17" pos:end="203:72"><expr pos:start="203:17" pos:end="203:71"><call pos:start="203:17" pos:end="203:71"><name pos:start="203:17" pos:end="203:22">av_log</name><argument_list pos:start="203:23" pos:end="203:71">(<argument pos:start="203:24" pos:end="203:24"><expr pos:start="203:24" pos:end="203:24"><name pos:start="203:24" pos:end="203:24">s</name></expr></argument>, <argument pos:start="203:27" pos:end="203:38"><expr pos:start="203:27" pos:end="203:38"><name pos:start="203:27" pos:end="203:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="203:41" pos:end="203:70"><expr pos:start="203:41" pos:end="203:70"><literal type="string" pos:start="203:41" pos:end="203:70">"codecdata_length too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="205:17" pos:end="205:26">return <expr pos:start="205:24" pos:end="205:25"><operator pos:start="205:24" pos:end="205:24">-</operator><literal type="number" pos:start="205:25" pos:end="205:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="211:13" pos:end="211:58"><expr pos:start="211:13" pos:end="211:57"><name pos:start="211:13" pos:end="211:32"><name pos:start="211:13" pos:end="211:15">ast</name><operator pos:start="211:16" pos:end="211:17">-&gt;</operator><name pos:start="211:18" pos:end="211:32">audio_framesize</name></name> <operator pos:start="211:34" pos:end="211:34">=</operator> <name pos:start="211:36" pos:end="211:57"><name pos:start="211:36" pos:end="211:37">st</name><operator pos:start="211:38" pos:end="211:39">-&gt;</operator><name pos:start="211:40" pos:end="211:44">codec</name><operator pos:start="211:45" pos:end="211:46">-&gt;</operator><name pos:start="211:47" pos:end="211:57">block_align</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="213:13" pos:end="239:13"><if pos:start="213:13" pos:end="227:13">if <condition pos:start="213:16" pos:end="213:53">(<expr pos:start="213:17" pos:end="213:52"><name pos:start="213:17" pos:end="213:35"><name pos:start="213:17" pos:end="213:18">st</name><operator pos:start="213:19" pos:end="213:20">-&gt;</operator><name pos:start="213:21" pos:end="213:25">codec</name><operator pos:start="213:26" pos:end="213:27">-&gt;</operator><name pos:start="213:28" pos:end="213:35">codec_id</name></name> <operator pos:start="213:37" pos:end="213:38">==</operator> <name pos:start="213:40" pos:end="213:52">CODEC_ID_SIPR</name></expr>)</condition> <block pos:start="213:55" pos:end="227:13">{<block_content pos:start="215:17" pos:end="225:68">

                <if_stmt pos:start="215:17" pos:end="223:17"><if pos:start="215:17" pos:end="223:17">if <condition pos:start="215:20" pos:end="215:31">(<expr pos:start="215:21" pos:end="215:30"><name pos:start="215:21" pos:end="215:26">flavor</name> <operator pos:start="215:28" pos:end="215:28">&gt;</operator> <literal type="number" pos:start="215:30" pos:end="215:30">3</literal></expr>)</condition> <block pos:start="215:33" pos:end="223:17">{<block_content pos:start="217:21" pos:end="221:30">

                    <expr_stmt pos:start="217:21" pos:end="219:35"><expr pos:start="217:21" pos:end="219:34"><call pos:start="217:21" pos:end="219:34"><name pos:start="217:21" pos:end="217:26">av_log</name><argument_list pos:start="217:27" pos:end="219:34">(<argument pos:start="217:28" pos:end="217:28"><expr pos:start="217:28" pos:end="217:28"><name pos:start="217:28" pos:end="217:28">s</name></expr></argument>, <argument pos:start="217:31" pos:end="217:42"><expr pos:start="217:31" pos:end="217:42"><name pos:start="217:31" pos:end="217:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="217:45" pos:end="217:71"><expr pos:start="217:45" pos:end="217:71"><literal type="string" pos:start="217:45" pos:end="217:71">"bad SIPR file flavor %d\n"</literal></expr></argument>,

                           <argument pos:start="219:28" pos:end="219:33"><expr pos:start="219:28" pos:end="219:33"><name pos:start="219:28" pos:end="219:33">flavor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="221:21" pos:end="221:30">return <expr pos:start="221:28" pos:end="221:29"><operator pos:start="221:28" pos:end="221:28">-</operator><literal type="number" pos:start="221:29" pos:end="221:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="225:17" pos:end="225:68"><expr pos:start="225:17" pos:end="225:67"><name pos:start="225:17" pos:end="225:38"><name pos:start="225:17" pos:end="225:18">st</name><operator pos:start="225:19" pos:end="225:20">-&gt;</operator><name pos:start="225:21" pos:end="225:25">codec</name><operator pos:start="225:26" pos:end="225:27">-&gt;</operator><name pos:start="225:28" pos:end="225:38">block_align</name></name> <operator pos:start="225:40" pos:end="225:40">=</operator> <name pos:start="225:42" pos:end="225:67"><name pos:start="225:42" pos:end="225:59">ff_sipr_subpk_size</name><index pos:start="225:60" pos:end="225:67">[<expr pos:start="225:61" pos:end="225:66"><name pos:start="225:61" pos:end="225:66">flavor</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="227:15" pos:end="239:13">else <block pos:start="227:20" pos:end="239:13">{<block_content pos:start="229:17" pos:end="237:62">

                <if_stmt pos:start="229:17" pos:end="235:17"><if pos:start="229:17" pos:end="235:17">if<condition pos:start="229:19" pos:end="229:40">(<expr pos:start="229:20" pos:end="229:39"><name pos:start="229:20" pos:end="229:34">sub_packet_size</name> <operator pos:start="229:36" pos:end="229:37">&lt;=</operator> <literal type="number" pos:start="229:39" pos:end="229:39">0</literal></expr>)</condition><block pos:start="229:41" pos:end="235:17">{<block_content pos:start="231:21" pos:end="233:30">

                    <expr_stmt pos:start="231:21" pos:end="231:76"><expr pos:start="231:21" pos:end="231:75"><call pos:start="231:21" pos:end="231:75"><name pos:start="231:21" pos:end="231:26">av_log</name><argument_list pos:start="231:27" pos:end="231:75">(<argument pos:start="231:28" pos:end="231:28"><expr pos:start="231:28" pos:end="231:28"><name pos:start="231:28" pos:end="231:28">s</name></expr></argument>, <argument pos:start="231:31" pos:end="231:42"><expr pos:start="231:31" pos:end="231:42"><name pos:start="231:31" pos:end="231:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="231:45" pos:end="231:74"><expr pos:start="231:45" pos:end="231:74"><literal type="string" pos:start="231:45" pos:end="231:74">"sub_packet_size is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="233:21" pos:end="233:30">return <expr pos:start="233:28" pos:end="233:29"><operator pos:start="233:28" pos:end="233:28">-</operator><literal type="number" pos:start="233:29" pos:end="233:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:62"><expr pos:start="237:17" pos:end="237:61"><name pos:start="237:17" pos:end="237:38"><name pos:start="237:17" pos:end="237:18">st</name><operator pos:start="237:19" pos:end="237:20">-&gt;</operator><name pos:start="237:21" pos:end="237:25">codec</name><operator pos:start="237:26" pos:end="237:27">-&gt;</operator><name pos:start="237:28" pos:end="237:38">block_align</name></name> <operator pos:start="237:40" pos:end="237:40">=</operator> <name pos:start="237:42" pos:end="237:61"><name pos:start="237:42" pos:end="237:44">ast</name><operator pos:start="237:45" pos:end="237:46">-&gt;</operator><name pos:start="237:47" pos:end="237:61">sub_packet_size</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="241:13" pos:end="243:27"><if pos:start="241:13" pos:end="243:27">if <condition pos:start="241:16" pos:end="241:79">(<expr pos:start="241:17" pos:end="241:78"><operator pos:start="241:17" pos:end="241:17">(</operator><name pos:start="241:18" pos:end="241:20">ret</name> <operator pos:start="241:22" pos:end="241:22">=</operator> <call pos:start="241:24" pos:end="241:73"><name pos:start="241:24" pos:end="241:40">rm_read_extradata</name><argument_list pos:start="241:41" pos:end="241:73">(<argument pos:start="241:42" pos:end="241:43"><expr pos:start="241:42" pos:end="241:43"><name pos:start="241:42" pos:end="241:43">pb</name></expr></argument>, <argument pos:start="241:46" pos:end="241:54"><expr pos:start="241:46" pos:end="241:54"><name pos:start="241:46" pos:end="241:54"><name pos:start="241:46" pos:end="241:47">st</name><operator pos:start="241:48" pos:end="241:49">-&gt;</operator><name pos:start="241:50" pos:end="241:54">codec</name></name></expr></argument>, <argument pos:start="241:57" pos:end="241:72"><expr pos:start="241:57" pos:end="241:72"><name pos:start="241:57" pos:end="241:72">codecdata_length</name></expr></argument>)</argument_list></call><operator pos:start="241:74" pos:end="241:74">)</operator> <operator pos:start="241:76" pos:end="241:76">&lt;</operator> <literal type="number" pos:start="241:78" pos:end="241:78">0</literal></expr>)</condition><block type="pseudo" pos:start="243:17" pos:end="243:27"><block_content pos:start="243:17" pos:end="243:27">

                <return pos:start="243:17" pos:end="243:27">return <expr pos:start="243:24" pos:end="243:26"><name pos:start="243:24" pos:end="243:26">ret</name></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="247:13" pos:end="253:13"><if pos:start="247:13" pos:end="253:13">if<condition pos:start="247:15" pos:end="247:63">(<expr pos:start="247:16" pos:end="247:62"><name pos:start="247:16" pos:end="247:35"><name pos:start="247:16" pos:end="247:18">ast</name><operator pos:start="247:19" pos:end="247:20">-&gt;</operator><name pos:start="247:21" pos:end="247:35">audio_framesize</name></name> <operator pos:start="247:37" pos:end="247:38">&gt;=</operator> <name pos:start="247:40" pos:end="247:47">UINT_MAX</name> <operator pos:start="247:49" pos:end="247:49">/</operator> <name pos:start="247:51" pos:end="247:62">sub_packet_h</name></expr>)</condition><block pos:start="247:64" pos:end="253:13">{<block_content pos:start="249:17" pos:end="251:26">

                <expr_stmt pos:start="249:17" pos:end="249:90"><expr pos:start="249:17" pos:end="249:89"><call pos:start="249:17" pos:end="249:89"><name pos:start="249:17" pos:end="249:22">av_log</name><argument_list pos:start="249:23" pos:end="249:89">(<argument pos:start="249:24" pos:end="249:24"><expr pos:start="249:24" pos:end="249:24"><name pos:start="249:24" pos:end="249:24">s</name></expr></argument>, <argument pos:start="249:27" pos:end="249:38"><expr pos:start="249:27" pos:end="249:38"><name pos:start="249:27" pos:end="249:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="249:41" pos:end="249:88"><expr pos:start="249:41" pos:end="249:88"><literal type="string" pos:start="249:41" pos:end="249:88">"rm-&gt;audio_framesize * sub_packet_h too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="251:17" pos:end="251:26">return <expr pos:start="251:24" pos:end="251:25"><operator pos:start="251:24" pos:end="251:24">-</operator><literal type="number" pos:start="251:25" pos:end="251:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="257:13" pos:end="257:74"><expr pos:start="257:13" pos:end="257:73"><call pos:start="257:13" pos:end="257:73"><name pos:start="257:13" pos:end="257:25">av_new_packet</name><argument_list pos:start="257:26" pos:end="257:73">(<argument pos:start="257:27" pos:end="257:35"><expr pos:start="257:27" pos:end="257:35"><operator pos:start="257:27" pos:end="257:27">&amp;</operator><name pos:start="257:28" pos:end="257:35"><name pos:start="257:28" pos:end="257:30">ast</name><operator pos:start="257:31" pos:end="257:32">-&gt;</operator><name pos:start="257:33" pos:end="257:35">pkt</name></name></expr></argument>, <argument pos:start="257:38" pos:end="257:72"><expr pos:start="257:38" pos:end="257:72"><name pos:start="257:38" pos:end="257:57"><name pos:start="257:38" pos:end="257:40">ast</name><operator pos:start="257:41" pos:end="257:42">-&gt;</operator><name pos:start="257:43" pos:end="257:57">audio_framesize</name></name> <operator pos:start="257:59" pos:end="257:59">*</operator> <name pos:start="257:61" pos:end="257:72">sub_packet_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="259:13" pos:end="259:18">break;</break>

        <case pos:start="261:9" pos:end="261:26">case <expr pos:start="261:14" pos:end="261:25"><name pos:start="261:14" pos:end="261:25">CODEC_ID_AAC</name></expr>:</case>

            <expr_stmt pos:start="263:13" pos:end="263:26"><expr pos:start="263:13" pos:end="263:25"><call pos:start="263:13" pos:end="263:25"><name pos:start="263:13" pos:end="263:21">avio_rb16</name><argument_list pos:start="263:22" pos:end="263:25">(<argument pos:start="263:23" pos:end="263:24"><expr pos:start="263:23" pos:end="263:24"><name pos:start="263:23" pos:end="263:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="263:28" pos:end="263:39"><expr pos:start="263:28" pos:end="263:38"><call pos:start="263:28" pos:end="263:38"><name pos:start="263:28" pos:end="263:34">avio_r8</name><argument_list pos:start="263:35" pos:end="263:38">(<argument pos:start="263:36" pos:end="263:37"><expr pos:start="263:36" pos:end="263:37"><name pos:start="263:36" pos:end="263:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="265:13" pos:end="267:28"><if pos:start="265:13" pos:end="267:28">if <condition pos:start="265:16" pos:end="265:29">(<expr pos:start="265:17" pos:end="265:28"><name pos:start="265:17" pos:end="265:23">version</name> <operator pos:start="265:25" pos:end="265:26">==</operator> <literal type="number" pos:start="265:28" pos:end="265:28">5</literal></expr>)</condition><block type="pseudo" pos:start="267:17" pos:end="267:28"><block_content pos:start="267:17" pos:end="267:28">

                <expr_stmt pos:start="267:17" pos:end="267:28"><expr pos:start="267:17" pos:end="267:27"><call pos:start="267:17" pos:end="267:27"><name pos:start="267:17" pos:end="267:23">avio_r8</name><argument_list pos:start="267:24" pos:end="267:27">(<argument pos:start="267:25" pos:end="267:26"><expr pos:start="267:25" pos:end="267:26"><name pos:start="267:25" pos:end="267:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:45"><expr pos:start="269:13" pos:end="269:44"><name pos:start="269:13" pos:end="269:28">codecdata_length</name> <operator pos:start="269:30" pos:end="269:30">=</operator> <call pos:start="269:32" pos:end="269:44"><name pos:start="269:32" pos:end="269:40">avio_rb32</name><argument_list pos:start="269:41" pos:end="269:44">(<argument pos:start="269:42" pos:end="269:43"><expr pos:start="269:42" pos:end="269:43"><name pos:start="269:42" pos:end="269:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="271:13" pos:end="277:13"><if pos:start="271:13" pos:end="277:13">if<condition pos:start="271:15" pos:end="271:93">(<expr pos:start="271:16" pos:end="271:92"><name pos:start="271:16" pos:end="271:31">codecdata_length</name> <operator pos:start="271:33" pos:end="271:33">+</operator> <name pos:start="271:35" pos:end="271:62">FF_INPUT_BUFFER_PADDING_SIZE</name> <operator pos:start="271:64" pos:end="271:65">&lt;=</operator> <operator pos:start="271:67" pos:end="271:67">(</operator><name pos:start="271:68" pos:end="271:75">unsigned</name><operator pos:start="271:76" pos:end="271:76">)</operator><name pos:start="271:77" pos:end="271:92">codecdata_length</name></expr>)</condition><block pos:start="271:94" pos:end="277:13">{<block_content pos:start="273:17" pos:end="275:26">

                <expr_stmt pos:start="273:17" pos:end="273:72"><expr pos:start="273:17" pos:end="273:71"><call pos:start="273:17" pos:end="273:71"><name pos:start="273:17" pos:end="273:22">av_log</name><argument_list pos:start="273:23" pos:end="273:71">(<argument pos:start="273:24" pos:end="273:24"><expr pos:start="273:24" pos:end="273:24"><name pos:start="273:24" pos:end="273:24">s</name></expr></argument>, <argument pos:start="273:27" pos:end="273:38"><expr pos:start="273:27" pos:end="273:38"><name pos:start="273:27" pos:end="273:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="273:41" pos:end="273:70"><expr pos:start="273:41" pos:end="273:70"><literal type="string" pos:start="273:41" pos:end="273:70">"codecdata_length too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="275:17" pos:end="275:26">return <expr pos:start="275:24" pos:end="275:25"><operator pos:start="275:24" pos:end="275:24">-</operator><literal type="number" pos:start="275:25" pos:end="275:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="279:13" pos:end="287:13"><if pos:start="279:13" pos:end="287:13">if <condition pos:start="279:16" pos:end="279:38">(<expr pos:start="279:17" pos:end="279:37"><name pos:start="279:17" pos:end="279:32">codecdata_length</name> <operator pos:start="279:34" pos:end="279:35">&gt;=</operator> <literal type="number" pos:start="279:37" pos:end="279:37">1</literal></expr>)</condition> <block pos:start="279:40" pos:end="287:13">{<block_content pos:start="281:17" pos:end="285:31">

                <expr_stmt pos:start="281:17" pos:end="281:28"><expr pos:start="281:17" pos:end="281:27"><call pos:start="281:17" pos:end="281:27"><name pos:start="281:17" pos:end="281:23">avio_r8</name><argument_list pos:start="281:24" pos:end="281:27">(<argument pos:start="281:25" pos:end="281:26"><expr pos:start="281:25" pos:end="281:26"><name pos:start="281:25" pos:end="281:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="283:17" pos:end="285:31"><if pos:start="283:17" pos:end="285:31">if <condition pos:start="283:20" pos:end="283:87">(<expr pos:start="283:21" pos:end="283:86"><operator pos:start="283:21" pos:end="283:21">(</operator><name pos:start="283:22" pos:end="283:24">ret</name> <operator pos:start="283:26" pos:end="283:26">=</operator> <call pos:start="283:28" pos:end="283:81"><name pos:start="283:28" pos:end="283:44">rm_read_extradata</name><argument_list pos:start="283:45" pos:end="283:81">(<argument pos:start="283:46" pos:end="283:47"><expr pos:start="283:46" pos:end="283:47"><name pos:start="283:46" pos:end="283:47">pb</name></expr></argument>, <argument pos:start="283:50" pos:end="283:58"><expr pos:start="283:50" pos:end="283:58"><name pos:start="283:50" pos:end="283:58"><name pos:start="283:50" pos:end="283:51">st</name><operator pos:start="283:52" pos:end="283:53">-&gt;</operator><name pos:start="283:54" pos:end="283:58">codec</name></name></expr></argument>, <argument pos:start="283:61" pos:end="283:80"><expr pos:start="283:61" pos:end="283:80"><name pos:start="283:61" pos:end="283:76">codecdata_length</name> <operator pos:start="283:78" pos:end="283:78">-</operator> <literal type="number" pos:start="283:80" pos:end="283:80">1</literal></expr></argument>)</argument_list></call><operator pos:start="283:82" pos:end="283:82">)</operator> <operator pos:start="283:84" pos:end="283:84">&lt;</operator> <literal type="number" pos:start="283:86" pos:end="283:86">0</literal></expr>)</condition><block type="pseudo" pos:start="285:21" pos:end="285:31"><block_content pos:start="285:21" pos:end="285:31">

                    <return pos:start="285:21" pos:end="285:31">return <expr pos:start="285:28" pos:end="285:30"><name pos:start="285:28" pos:end="285:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="289:13" pos:end="289:18">break;</break>

        <default pos:start="291:9" pos:end="291:16">default:</default>

            <expr_stmt pos:start="293:13" pos:end="293:82"><expr pos:start="293:13" pos:end="293:81"><call pos:start="293:13" pos:end="293:81"><name pos:start="293:13" pos:end="293:22">av_strlcpy</name><argument_list pos:start="293:23" pos:end="293:81">(<argument pos:start="293:24" pos:end="293:44"><expr pos:start="293:24" pos:end="293:44"><name pos:start="293:24" pos:end="293:44"><name pos:start="293:24" pos:end="293:25">st</name><operator pos:start="293:26" pos:end="293:27">-&gt;</operator><name pos:start="293:28" pos:end="293:32">codec</name><operator pos:start="293:33" pos:end="293:34">-&gt;</operator><name pos:start="293:35" pos:end="293:44">codec_name</name></name></expr></argument>, <argument pos:start="293:47" pos:end="293:49"><expr pos:start="293:47" pos:end="293:49"><name pos:start="293:47" pos:end="293:49">buf</name></expr></argument>, <argument pos:start="293:52" pos:end="293:80"><expr pos:start="293:52" pos:end="293:80"><sizeof pos:start="293:52" pos:end="293:80">sizeof<argument_list pos:start="293:58" pos:end="293:80">(<argument pos:start="293:59" pos:end="293:79"><expr pos:start="293:59" pos:end="293:79"><name pos:start="293:59" pos:end="293:79"><name pos:start="293:59" pos:end="293:60">st</name><operator pos:start="293:61" pos:end="293:62">-&gt;</operator><name pos:start="293:63" pos:end="293:67">codec</name><operator pos:start="293:68" pos:end="293:69">-&gt;</operator><name pos:start="293:70" pos:end="293:79">codec_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <if_stmt pos:start="297:9" pos:end="307:9"><if pos:start="297:9" pos:end="307:9">if <condition pos:start="297:12" pos:end="297:21">(<expr pos:start="297:13" pos:end="297:20"><name pos:start="297:13" pos:end="297:20">read_all</name></expr>)</condition> <block pos:start="297:23" pos:end="307:9">{<block_content pos:start="299:13" pos:end="305:35">

            <expr_stmt pos:start="299:13" pos:end="299:24"><expr pos:start="299:13" pos:end="299:23"><call pos:start="299:13" pos:end="299:23"><name pos:start="299:13" pos:end="299:19">avio_r8</name><argument_list pos:start="299:20" pos:end="299:23">(<argument pos:start="299:21" pos:end="299:22"><expr pos:start="299:21" pos:end="299:22"><name pos:start="299:21" pos:end="299:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:24"><expr pos:start="301:13" pos:end="301:23"><call pos:start="301:13" pos:end="301:23"><name pos:start="301:13" pos:end="301:19">avio_r8</name><argument_list pos:start="301:20" pos:end="301:23">(<argument pos:start="301:21" pos:end="301:22"><expr pos:start="301:21" pos:end="301:22"><name pos:start="301:21" pos:end="301:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:24"><expr pos:start="303:13" pos:end="303:23"><call pos:start="303:13" pos:end="303:23"><name pos:start="303:13" pos:end="303:19">avio_r8</name><argument_list pos:start="303:20" pos:end="303:23">(<argument pos:start="303:21" pos:end="303:22"><expr pos:start="303:21" pos:end="303:22"><name pos:start="303:21" pos:end="303:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:35"><expr pos:start="305:13" pos:end="305:34"><call pos:start="305:13" pos:end="305:34"><name pos:start="305:13" pos:end="305:28">rm_read_metadata</name><argument_list pos:start="305:29" pos:end="305:34">(<argument pos:start="305:30" pos:end="305:30"><expr pos:start="305:30" pos:end="305:30"><name pos:start="305:30" pos:end="305:30">s</name></expr></argument>, <argument pos:start="305:33" pos:end="305:33"><expr pos:start="305:33" pos:end="305:33"><literal type="number" pos:start="305:33" pos:end="305:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="311:5" pos:end="311:13">return <expr pos:start="311:12" pos:end="311:12"><literal type="number" pos:start="311:12" pos:end="311:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
