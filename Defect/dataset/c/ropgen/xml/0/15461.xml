<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15461.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">lsi_scsi_init</name><parameter_list pos:start="1:25" pos:end="1:40">(<parameter pos:start="1:26" pos:end="1:39"><decl pos:start="1:26" pos:end="1:39"><type pos:start="1:26" pos:end="1:36"><name pos:start="1:26" pos:end="1:34">PCIDevice</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:13">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:47"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">LSIState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:47">= <expr pos:start="5:19" pos:end="5:47"><call pos:start="5:19" pos:end="5:47"><name pos:start="5:19" pos:end="5:27">DO_UPCAST</name><argument_list pos:start="5:28" pos:end="5:47">(<argument pos:start="5:29" pos:end="5:36"><expr pos:start="5:29" pos:end="5:36"><name pos:start="5:29" pos:end="5:36">LSIState</name></expr></argument>, <argument pos:start="5:39" pos:end="5:41"><expr pos:start="5:39" pos:end="5:41"><name pos:start="5:39" pos:end="5:41">dev</name></expr></argument>, <argument pos:start="5:44" pos:end="5:46"><expr pos:start="5:44" pos:end="5:46"><name pos:start="5:44" pos:end="5:46">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:21">pci_conf</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:29"><expr pos:start="11:5" pos:end="11:28"><name pos:start="11:5" pos:end="11:12">pci_conf</name> <operator pos:start="11:14" pos:end="11:14">=</operator> <name pos:start="11:16" pos:end="11:28"><name pos:start="11:16" pos:end="11:16">s</name><operator pos:start="11:17" pos:end="11:18">-&gt;</operator><name pos:start="11:19" pos:end="11:21">dev</name><operator pos:start="11:22" pos:end="11:22">.</operator><name pos:start="11:23" pos:end="11:28">config</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:30">/* PCI Vendor ID (word) */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:64"><expr pos:start="17:5" pos:end="17:63"><call pos:start="17:5" pos:end="17:63"><name pos:start="17:5" pos:end="17:28">pci_config_set_vendor_id</name><argument_list pos:start="17:29" pos:end="17:63">(<argument pos:start="17:30" pos:end="17:37"><expr pos:start="17:30" pos:end="17:37"><name pos:start="17:30" pos:end="17:37">pci_conf</name></expr></argument>, <argument pos:start="17:40" pos:end="17:62"><expr pos:start="17:40" pos:end="17:62"><name pos:start="17:40" pos:end="17:62">PCI_VENDOR_ID_LSI_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:30">/* PCI device ID (word) */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:66"><expr pos:start="21:5" pos:end="21:65"><call pos:start="21:5" pos:end="21:65"><name pos:start="21:5" pos:end="21:28">pci_config_set_device_id</name><argument_list pos:start="21:29" pos:end="21:65">(<argument pos:start="21:30" pos:end="21:37"><expr pos:start="21:30" pos:end="21:37"><name pos:start="21:30" pos:end="21:37">pci_conf</name></expr></argument>, <argument pos:start="21:40" pos:end="21:64"><expr pos:start="21:40" pos:end="21:64"><name pos:start="21:40" pos:end="21:64">PCI_DEVICE_ID_LSI_53C895A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:29">/* PCI base class code */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:59"><expr pos:start="25:5" pos:end="25:58"><call pos:start="25:5" pos:end="25:58"><name pos:start="25:5" pos:end="25:24">pci_config_set_class</name><argument_list pos:start="25:25" pos:end="25:58">(<argument pos:start="25:26" pos:end="25:33"><expr pos:start="25:26" pos:end="25:33"><name pos:start="25:26" pos:end="25:33">pci_conf</name></expr></argument>, <argument pos:start="25:36" pos:end="25:57"><expr pos:start="25:36" pos:end="25:57"><name pos:start="25:36" pos:end="25:57">PCI_CLASS_STORAGE_SCSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="27:5" pos:end="27:26">/* PCI subsystem ID */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:38"><expr pos:start="29:5" pos:end="29:37"><name pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:12">pci_conf</name><index pos:start="29:13" pos:end="29:30">[<expr pos:start="29:14" pos:end="29:29"><name pos:start="29:14" pos:end="29:29">PCI_SUBSYSTEM_ID</name></expr>]</index></name> <operator pos:start="29:32" pos:end="29:32">=</operator> <literal type="number" pos:start="29:34" pos:end="29:37">0x00</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:42"><expr pos:start="31:5" pos:end="31:41"><name pos:start="31:5" pos:end="31:34"><name pos:start="31:5" pos:end="31:12">pci_conf</name><index pos:start="31:13" pos:end="31:34">[<expr pos:start="31:14" pos:end="31:33"><name pos:start="31:14" pos:end="31:29">PCI_SUBSYSTEM_ID</name> <operator pos:start="31:31" pos:end="31:31">+</operator> <literal type="number" pos:start="31:33" pos:end="31:33">1</literal></expr>]</index></name> <operator pos:start="31:36" pos:end="31:36">=</operator> <literal type="number" pos:start="31:38" pos:end="31:41">0x10</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="33:5" pos:end="33:33">/* PCI latency timer = 255 */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:39"><expr pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:12">pci_conf</name><index pos:start="35:13" pos:end="35:31">[<expr pos:start="35:14" pos:end="35:30"><name pos:start="35:14" pos:end="35:30">PCI_LATENCY_TIMER</name></expr>]</index></name> <operator pos:start="35:33" pos:end="35:33">=</operator> <literal type="number" pos:start="35:35" pos:end="35:38">0xff</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="37:5" pos:end="37:38">/* TODO: RST# value should be 0 */</comment>

    <comment type="block" pos:start="39:5" pos:end="39:25">/* Interrupt pin 1 */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:39"><expr pos:start="41:5" pos:end="41:38"><name pos:start="41:5" pos:end="41:31"><name pos:start="41:5" pos:end="41:12">pci_conf</name><index pos:start="41:13" pos:end="41:31">[<expr pos:start="41:14" pos:end="41:30"><name pos:start="41:14" pos:end="41:30">PCI_INTERRUPT_PIN</name></expr>]</index></name> <operator pos:start="41:33" pos:end="41:33">=</operator> <literal type="number" pos:start="41:35" pos:end="41:38">0x01</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="49:67"><expr pos:start="45:5" pos:end="49:66"><name pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:19">mmio_io_addr</name></name> <operator pos:start="45:21" pos:end="45:21">=</operator> <call pos:start="45:23" pos:end="49:66"><name pos:start="45:23" pos:end="45:44">cpu_register_io_memory</name><argument_list pos:start="45:45" pos:end="49:66">(<argument pos:start="45:46" pos:end="45:60"><expr pos:start="45:46" pos:end="45:60"><name pos:start="45:46" pos:end="45:60">lsi_mmio_readfn</name></expr></argument>,

                                             <argument pos:start="47:46" pos:end="47:61"><expr pos:start="47:46" pos:end="47:61"><name pos:start="47:46" pos:end="47:61">lsi_mmio_writefn</name></expr></argument>, <argument pos:start="47:64" pos:end="47:64"><expr pos:start="47:64" pos:end="47:64"><name pos:start="47:64" pos:end="47:64">s</name></expr></argument>,

                                             <argument pos:start="49:46" pos:end="49:65"><expr pos:start="49:46" pos:end="49:65"><name pos:start="49:46" pos:end="49:65">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="55:66"><expr pos:start="51:5" pos:end="55:65"><name pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:18">ram_io_addr</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <call pos:start="51:22" pos:end="55:65"><name pos:start="51:22" pos:end="51:43">cpu_register_io_memory</name><argument_list pos:start="51:44" pos:end="55:65">(<argument pos:start="51:45" pos:end="51:58"><expr pos:start="51:45" pos:end="51:58"><name pos:start="51:45" pos:end="51:58">lsi_ram_readfn</name></expr></argument>,

                                            <argument pos:start="53:45" pos:end="53:59"><expr pos:start="53:45" pos:end="53:59"><name pos:start="53:45" pos:end="53:59">lsi_ram_writefn</name></expr></argument>, <argument pos:start="53:62" pos:end="53:62"><expr pos:start="53:62" pos:end="53:62"><name pos:start="53:62" pos:end="53:62">s</name></expr></argument>,

                                            <argument pos:start="55:45" pos:end="55:64"><expr pos:start="55:45" pos:end="55:64"><name pos:start="55:45" pos:end="55:64">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="61:70"><expr pos:start="59:5" pos:end="61:69"><call pos:start="59:5" pos:end="61:69"><name pos:start="59:5" pos:end="59:20">pci_register_bar</name><argument_list pos:start="59:21" pos:end="61:69">(<argument pos:start="59:22" pos:end="59:28"><expr pos:start="59:22" pos:end="59:28"><operator pos:start="59:22" pos:end="59:22">&amp;</operator><name pos:start="59:23" pos:end="59:28"><name pos:start="59:23" pos:end="59:23">s</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:28">dev</name></name></expr></argument>, <argument pos:start="59:31" pos:end="59:31"><expr pos:start="59:31" pos:end="59:31"><literal type="number" pos:start="59:31" pos:end="59:31">0</literal></expr></argument>, <argument pos:start="59:34" pos:end="59:36"><expr pos:start="59:34" pos:end="59:36"><literal type="number" pos:start="59:34" pos:end="59:36">256</literal></expr></argument>,

                           <argument pos:start="61:28" pos:end="61:52"><expr pos:start="61:28" pos:end="61:52"><name pos:start="61:28" pos:end="61:52">PCI_BASE_ADDRESS_SPACE_IO</name></expr></argument>, <argument pos:start="61:55" pos:end="61:68"><expr pos:start="61:55" pos:end="61:68"><name pos:start="61:55" pos:end="61:68">lsi_io_mapfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:67"><expr pos:start="63:5" pos:end="63:66"><call pos:start="63:5" pos:end="63:66"><name pos:start="63:5" pos:end="63:27">pci_register_bar_simple</name><argument_list pos:start="63:28" pos:end="63:66">(<argument pos:start="63:29" pos:end="63:35"><expr pos:start="63:29" pos:end="63:35"><operator pos:start="63:29" pos:end="63:29">&amp;</operator><name pos:start="63:30" pos:end="63:35"><name pos:start="63:30" pos:end="63:30">s</name><operator pos:start="63:31" pos:end="63:32">-&gt;</operator><name pos:start="63:33" pos:end="63:35">dev</name></name></expr></argument>, <argument pos:start="63:38" pos:end="63:38"><expr pos:start="63:38" pos:end="63:38"><literal type="number" pos:start="63:38" pos:end="63:38">1</literal></expr></argument>, <argument pos:start="63:41" pos:end="63:45"><expr pos:start="63:41" pos:end="63:45"><literal type="number" pos:start="63:41" pos:end="63:45">0x400</literal></expr></argument>, <argument pos:start="63:48" pos:end="63:48"><expr pos:start="63:48" pos:end="63:48"><literal type="number" pos:start="63:48" pos:end="63:48">0</literal></expr></argument>, <argument pos:start="63:51" pos:end="63:65"><expr pos:start="63:51" pos:end="63:65"><name pos:start="63:51" pos:end="63:65"><name pos:start="63:51" pos:end="63:51">s</name><operator pos:start="63:52" pos:end="63:53">-&gt;</operator><name pos:start="63:54" pos:end="63:65">mmio_io_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="67:75"><expr pos:start="65:5" pos:end="67:74"><call pos:start="65:5" pos:end="67:74"><name pos:start="65:5" pos:end="65:20">pci_register_bar</name><argument_list pos:start="65:21" pos:end="67:74">(<argument pos:start="65:22" pos:end="65:28"><expr pos:start="65:22" pos:end="65:28"><operator pos:start="65:22" pos:end="65:22">&amp;</operator><name pos:start="65:23" pos:end="65:28"><name pos:start="65:23" pos:end="65:23">s</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:28">dev</name></name></expr></argument>, <argument pos:start="65:31" pos:end="65:31"><expr pos:start="65:31" pos:end="65:31"><literal type="number" pos:start="65:31" pos:end="65:31">2</literal></expr></argument>, <argument pos:start="65:34" pos:end="65:39"><expr pos:start="65:34" pos:end="65:39"><literal type="number" pos:start="65:34" pos:end="65:39">0x2000</literal></expr></argument>,

                           <argument pos:start="67:28" pos:end="67:56"><expr pos:start="67:28" pos:end="67:56"><name pos:start="67:28" pos:end="67:56">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>, <argument pos:start="67:59" pos:end="67:73"><expr pos:start="67:59" pos:end="67:73"><name pos:start="67:59" pos:end="67:73">lsi_ram_mapfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:27"><expr pos:start="69:5" pos:end="69:26"><call pos:start="69:5" pos:end="69:26"><name pos:start="69:5" pos:end="69:15">QTAILQ_INIT</name><argument_list pos:start="69:16" pos:end="69:26">(<argument pos:start="69:17" pos:end="69:25"><expr pos:start="69:17" pos:end="69:25"><operator pos:start="69:17" pos:end="69:17">&amp;</operator><name pos:start="69:18" pos:end="69:25"><name pos:start="69:18" pos:end="69:18">s</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:25">queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:77"><expr pos:start="73:5" pos:end="73:76"><call pos:start="73:5" pos:end="73:76"><name pos:start="73:5" pos:end="73:16">scsi_bus_new</name><argument_list pos:start="73:17" pos:end="73:76">(<argument pos:start="73:18" pos:end="73:24"><expr pos:start="73:18" pos:end="73:24"><operator pos:start="73:18" pos:end="73:18">&amp;</operator><name pos:start="73:19" pos:end="73:24"><name pos:start="73:19" pos:end="73:19">s</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:24">bus</name></name></expr></argument>, <argument pos:start="73:27" pos:end="73:36"><expr pos:start="73:27" pos:end="73:36"><operator pos:start="73:27" pos:end="73:27">&amp;</operator><name pos:start="73:28" pos:end="73:36"><name pos:start="73:28" pos:end="73:30">dev</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:36">qdev</name></name></expr></argument>, <argument pos:start="73:39" pos:end="73:39"><expr pos:start="73:39" pos:end="73:39"><literal type="number" pos:start="73:39" pos:end="73:39">1</literal></expr></argument>, <argument pos:start="73:42" pos:end="73:53"><expr pos:start="73:42" pos:end="73:53"><name pos:start="73:42" pos:end="73:53">LSI_MAX_DEVS</name></expr></argument>, <argument pos:start="73:56" pos:end="73:75"><expr pos:start="73:56" pos:end="73:75"><name pos:start="73:56" pos:end="73:75">lsi_command_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:30">(<expr pos:start="75:9" pos:end="75:29"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:29"><name pos:start="75:10" pos:end="75:12">dev</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:18">qdev</name><operator pos:start="75:19" pos:end="75:19">.</operator><name pos:start="75:20" pos:end="75:29">hotplugged</name></name></expr>)</condition> <block pos:start="75:32" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:55">

        <return pos:start="77:9" pos:end="77:55">return <expr pos:start="77:16" pos:end="77:54"><call pos:start="77:16" pos:end="77:54"><name pos:start="77:16" pos:end="77:45">scsi_bus_legacy_handle_cmdline</name><argument_list pos:start="77:46" pos:end="77:54">(<argument pos:start="77:47" pos:end="77:53"><expr pos:start="77:47" pos:end="77:53"><operator pos:start="77:47" pos:end="77:47">&amp;</operator><name pos:start="77:48" pos:end="77:53"><name pos:start="77:48" pos:end="77:48">s</name><operator pos:start="77:49" pos:end="77:50">-&gt;</operator><name pos:start="77:51" pos:end="77:53">bus</name></name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="81:5" pos:end="81:13">return <expr pos:start="81:12" pos:end="81:12"><literal type="number" pos:start="81:12" pos:end="81:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
