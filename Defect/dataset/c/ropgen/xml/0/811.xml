<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/811.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:29">get_elf_hwcap</name><parameter_list pos:start="1:30" pos:end="1:35">(<parameter pos:start="1:31" pos:end="1:34"><decl pos:start="1:31" pos:end="1:34"><type pos:start="1:31" pos:end="1:34"><name pos:start="1:31" pos:end="1:34">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:18">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">ARMCPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name> <init pos:start="5:17" pos:end="5:37">= <expr pos:start="5:19" pos:end="5:37"><call pos:start="5:19" pos:end="5:37"><name pos:start="5:19" pos:end="5:25">ARM_CPU</name><argument_list pos:start="5:26" pos:end="5:37">(<argument pos:start="5:27" pos:end="5:36"><expr pos:start="5:27" pos:end="5:36"><name pos:start="5:27" pos:end="5:36">thread_cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:19">hwcaps</name> <init pos:start="7:21" pos:end="7:23">= <expr pos:start="7:23" pos:end="7:23"><literal type="number" pos:start="7:23" pos:end="7:23">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:32"><expr pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:10">hwcaps</name> <operator pos:start="11:12" pos:end="11:13">|=</operator> <name pos:start="11:15" pos:end="11:31">ARM_HWCAP_ARM_SWP</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:33"><expr pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:10">hwcaps</name> <operator pos:start="13:12" pos:end="13:13">|=</operator> <name pos:start="13:15" pos:end="13:32">ARM_HWCAP_ARM_HALF</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:10">hwcaps</name> <operator pos:start="15:12" pos:end="15:13">|=</operator> <name pos:start="15:15" pos:end="15:33">ARM_HWCAP_ARM_THUMB</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="26:0"><expr pos:start="17:5" pos:end="17:37"><name pos:start="17:5" pos:end="17:10">hwcaps</name> <operator pos:start="17:12" pos:end="17:13">|=</operator> <name pos:start="17:15" pos:end="17:37">ARM_HWCAP_ARM_FAST_MULT</name></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:38">/* probe for the extra features */</comment>

<cpp:define pos:start="23:1" pos:end="25:75">#<cpp:directive pos:start="23:2" pos:end="23:7">define</cpp:directive> <cpp:macro pos:start="23:9" pos:end="23:32"><name pos:start="23:9" pos:end="23:19">GET_FEATURE</name><parameter_list pos:start="23:20" pos:end="23:32">(<parameter pos:start="23:21" pos:end="23:24"><type pos:start="23:21" pos:end="23:24"><name pos:start="23:21" pos:end="23:24">feat</name></type></parameter>, <parameter pos:start="23:27" pos:end="23:31"><type pos:start="23:27" pos:end="23:31"><name pos:start="23:27" pos:end="23:31">hwcap</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="25:5" pos:end="25:75">do { if (arm_feature(&amp;cpu-&gt;env, feat)) { hwcaps |= hwcap; } } while (0)</cpp:value></cpp:define>

    <comment type="block" pos:start="27:5" pos:end="27:65">/* EDSP is in v5TE and above, but all our v5 CPUs are v5TE */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:52"><expr pos:start="29:5" pos:end="29:51"><call pos:start="29:5" pos:end="29:51"><name pos:start="29:5" pos:end="29:15">GET_FEATURE</name><argument_list pos:start="29:16" pos:end="29:51">(<argument pos:start="29:17" pos:end="29:30"><expr pos:start="29:17" pos:end="29:30"><name pos:start="29:17" pos:end="29:30">ARM_FEATURE_V5</name></expr></argument>, <argument pos:start="29:33" pos:end="29:50"><expr pos:start="29:33" pos:end="29:50"><name pos:start="29:33" pos:end="29:50">ARM_HWCAP_ARM_EDSP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:52"><expr pos:start="31:5" pos:end="31:51"><call pos:start="31:5" pos:end="31:51"><name pos:start="31:5" pos:end="31:15">GET_FEATURE</name><argument_list pos:start="31:16" pos:end="31:51">(<argument pos:start="31:17" pos:end="31:31"><expr pos:start="31:17" pos:end="31:31"><name pos:start="31:17" pos:end="31:31">ARM_FEATURE_VFP</name></expr></argument>, <argument pos:start="31:34" pos:end="31:50"><expr pos:start="31:34" pos:end="31:50"><name pos:start="31:34" pos:end="31:50">ARM_HWCAP_ARM_VFP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:58"><expr pos:start="33:5" pos:end="33:57"><call pos:start="33:5" pos:end="33:57"><name pos:start="33:5" pos:end="33:15">GET_FEATURE</name><argument_list pos:start="33:16" pos:end="33:57">(<argument pos:start="33:17" pos:end="33:34"><expr pos:start="33:17" pos:end="33:34"><name pos:start="33:17" pos:end="33:34">ARM_FEATURE_IWMMXT</name></expr></argument>, <argument pos:start="33:37" pos:end="33:56"><expr pos:start="33:37" pos:end="33:56"><name pos:start="33:37" pos:end="33:56">ARM_HWCAP_ARM_IWMMXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:61"><expr pos:start="35:5" pos:end="35:60"><call pos:start="35:5" pos:end="35:60"><name pos:start="35:5" pos:end="35:15">GET_FEATURE</name><argument_list pos:start="35:16" pos:end="35:60">(<argument pos:start="35:17" pos:end="35:36"><expr pos:start="35:17" pos:end="35:36"><name pos:start="35:17" pos:end="35:36">ARM_FEATURE_THUMB2EE</name></expr></argument>, <argument pos:start="35:39" pos:end="35:59"><expr pos:start="35:39" pos:end="35:59"><name pos:start="35:39" pos:end="35:59">ARM_HWCAP_ARM_THUMBEE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:54"><expr pos:start="37:5" pos:end="37:53"><call pos:start="37:5" pos:end="37:53"><name pos:start="37:5" pos:end="37:15">GET_FEATURE</name><argument_list pos:start="37:16" pos:end="37:53">(<argument pos:start="37:17" pos:end="37:32"><expr pos:start="37:17" pos:end="37:32"><name pos:start="37:17" pos:end="37:32">ARM_FEATURE_NEON</name></expr></argument>, <argument pos:start="37:35" pos:end="37:52"><expr pos:start="37:35" pos:end="37:52"><name pos:start="37:35" pos:end="37:52">ARM_HWCAP_ARM_NEON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:55"><expr pos:start="39:5" pos:end="39:54"><call pos:start="39:5" pos:end="39:54"><name pos:start="39:5" pos:end="39:15">GET_FEATURE</name><argument_list pos:start="39:16" pos:end="39:54">(<argument pos:start="39:17" pos:end="39:32"><expr pos:start="39:17" pos:end="39:32"><name pos:start="39:17" pos:end="39:32">ARM_FEATURE_VFP3</name></expr></argument>, <argument pos:start="39:35" pos:end="39:53"><expr pos:start="39:35" pos:end="39:53"><name pos:start="39:35" pos:end="39:53">ARM_HWCAP_ARM_VFPv3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:52"><expr pos:start="41:5" pos:end="41:51"><call pos:start="41:5" pos:end="41:51"><name pos:start="41:5" pos:end="41:15">GET_FEATURE</name><argument_list pos:start="41:16" pos:end="41:51">(<argument pos:start="41:17" pos:end="41:31"><expr pos:start="41:17" pos:end="41:31"><name pos:start="41:17" pos:end="41:31">ARM_FEATURE_V6K</name></expr></argument>, <argument pos:start="41:34" pos:end="41:50"><expr pos:start="41:34" pos:end="41:50"><name pos:start="41:34" pos:end="41:50">ARM_HWCAP_ARM_TLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:55"><expr pos:start="43:5" pos:end="43:54"><call pos:start="43:5" pos:end="43:54"><name pos:start="43:5" pos:end="43:15">GET_FEATURE</name><argument_list pos:start="43:16" pos:end="43:54">(<argument pos:start="43:17" pos:end="43:32"><expr pos:start="43:17" pos:end="43:32"><name pos:start="43:17" pos:end="43:32">ARM_FEATURE_VFP4</name></expr></argument>, <argument pos:start="43:35" pos:end="43:53"><expr pos:start="43:35" pos:end="43:53"><name pos:start="43:35" pos:end="43:53">ARM_HWCAP_ARM_VFPv4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:58"><expr pos:start="45:5" pos:end="45:57"><call pos:start="45:5" pos:end="45:57"><name pos:start="45:5" pos:end="45:15">GET_FEATURE</name><argument_list pos:start="45:16" pos:end="45:57">(<argument pos:start="45:17" pos:end="45:35"><expr pos:start="45:17" pos:end="45:35"><name pos:start="45:17" pos:end="45:35">ARM_FEATURE_ARM_DIV</name></expr></argument>, <argument pos:start="45:38" pos:end="45:56"><expr pos:start="45:38" pos:end="45:56"><name pos:start="45:38" pos:end="45:56">ARM_HWCAP_ARM_IDIVA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:60"><expr pos:start="47:5" pos:end="47:59"><call pos:start="47:5" pos:end="47:59"><name pos:start="47:5" pos:end="47:15">GET_FEATURE</name><argument_list pos:start="47:16" pos:end="47:59">(<argument pos:start="47:17" pos:end="47:37"><expr pos:start="47:17" pos:end="47:37"><name pos:start="47:17" pos:end="47:37">ARM_FEATURE_THUMB_DIV</name></expr></argument>, <argument pos:start="47:40" pos:end="47:58"><expr pos:start="47:40" pos:end="47:58"><name pos:start="47:40" pos:end="47:58">ARM_HWCAP_ARM_IDIVT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="49:5" pos:end="57:7">/* All QEMU's VFPv3 CPUs have 32 registers, see VFP_DREG in translate.c.

     * Note that the ARM_HWCAP_ARM_VFPv3D16 bit is always the inverse of

     * ARM_HWCAP_ARM_VFPD32 (and so always clear for QEMU); it is unrelated

     * to our VFP_FP16 feature bit.

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:56"><expr pos:start="59:5" pos:end="59:55"><call pos:start="59:5" pos:end="59:55"><name pos:start="59:5" pos:end="59:15">GET_FEATURE</name><argument_list pos:start="59:16" pos:end="59:55">(<argument pos:start="59:17" pos:end="59:32"><expr pos:start="59:17" pos:end="59:32"><name pos:start="59:17" pos:end="59:32">ARM_FEATURE_VFP3</name></expr></argument>, <argument pos:start="59:35" pos:end="59:54"><expr pos:start="59:35" pos:end="59:54"><name pos:start="59:35" pos:end="59:54">ARM_HWCAP_ARM_VFPD32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="64:0"><expr pos:start="61:5" pos:end="61:53"><call pos:start="61:5" pos:end="61:53"><name pos:start="61:5" pos:end="61:15">GET_FEATURE</name><argument_list pos:start="61:16" pos:end="61:53">(<argument pos:start="61:17" pos:end="61:32"><expr pos:start="61:17" pos:end="61:32"><name pos:start="61:17" pos:end="61:32">ARM_FEATURE_LPAE</name></expr></argument>, <argument pos:start="61:35" pos:end="61:52"><expr pos:start="61:35" pos:end="61:52"><name pos:start="61:35" pos:end="61:52">ARM_HWCAP_ARM_LPAE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef pos:start="63:1" pos:end="63:18">#<cpp:directive pos:start="63:2" pos:end="63:6">undef</cpp:directive> <name pos:start="63:8" pos:end="63:18">GET_FEATURE</name></cpp:undef>



    <return pos:start="67:5" pos:end="67:18">return <expr pos:start="67:12" pos:end="67:17"><name pos:start="67:12" pos:end="67:17">hwcaps</name></expr>;</return>

</block_content>}</block></function>
</unit>
