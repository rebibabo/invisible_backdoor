<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14841.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">bdrv_flush_all</name><parameter_list pos:start="1:19" pos:end="1:24">(<parameter pos:start="1:20" pos:end="1:23"><decl pos:start="1:20" pos:end="1:23"><type pos:start="1:20" pos:end="1:23"><name pos:start="1:20" pos:end="1:23">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="5:5" pos:end="35:18">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name> <init pos:start="5:26" pos:end="5:31">= <expr pos:start="5:28" pos:end="5:31"><name pos:start="5:28" pos:end="5:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">result</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="11:5" pos:end="31:5">while <condition pos:start="11:11" pos:end="11:32">(<expr pos:start="11:12" pos:end="11:31"><operator pos:start="11:12" pos:end="11:12">(</operator><name pos:start="11:13" pos:end="11:14">bs</name> <operator pos:start="11:16" pos:end="11:16">=</operator> <call pos:start="11:18" pos:end="11:30"><name pos:start="11:18" pos:end="11:26">bdrv_next</name><argument_list pos:start="11:27" pos:end="11:30">(<argument pos:start="11:28" pos:end="11:29"><expr pos:start="11:28" pos:end="11:29"><name pos:start="11:28" pos:end="11:29">bs</name></expr></argument>)</argument_list></call><operator pos:start="11:31" pos:end="11:31">)</operator></expr>)</condition> <block pos:start="11:34" pos:end="31:5">{<block_content pos:start="13:9" pos:end="29:41">

        <decl_stmt pos:start="13:9" pos:end="13:59"><decl pos:start="13:9" pos:end="13:58"><type pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:18">AioContext</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:31">aio_context</name> <init pos:start="13:33" pos:end="13:58">= <expr pos:start="13:35" pos:end="13:58"><call pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:54">bdrv_get_aio_context</name><argument_list pos:start="13:55" pos:end="13:58">(<argument pos:start="13:56" pos:end="13:57"><expr pos:start="13:56" pos:end="13:57"><name pos:start="13:56" pos:end="13:57">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:16"><decl pos:start="15:9" pos:end="15:15"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:15">ret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="19:9" pos:end="19:41"><expr pos:start="19:9" pos:end="19:40"><call pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:27">aio_context_acquire</name><argument_list pos:start="19:28" pos:end="19:40">(<argument pos:start="19:29" pos:end="19:39"><expr pos:start="19:29" pos:end="19:39"><name pos:start="19:29" pos:end="19:39">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:29"><expr pos:start="21:9" pos:end="21:28"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:28"><name pos:start="21:15" pos:end="21:24">bdrv_flush</name><argument_list pos:start="21:25" pos:end="21:28">(<argument pos:start="21:26" pos:end="21:27"><expr pos:start="21:26" pos:end="21:27"><name pos:start="21:26" pos:end="21:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:31">(<expr pos:start="23:13" pos:end="23:30"><name pos:start="23:13" pos:end="23:15">ret</name> <operator pos:start="23:17" pos:end="23:17">&lt;</operator> <literal type="number" pos:start="23:19" pos:end="23:19">0</literal> <operator pos:start="23:21" pos:end="23:22">&amp;&amp;</operator> <operator pos:start="23:24" pos:end="23:24">!</operator><name pos:start="23:25" pos:end="23:30">result</name></expr>)</condition> <block pos:start="23:33" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:25">

            <expr_stmt pos:start="25:13" pos:end="25:25"><expr pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:18">result</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:24">ret</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:41"><expr pos:start="29:9" pos:end="29:40"><call pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:27">aio_context_release</name><argument_list pos:start="29:28" pos:end="29:40">(<argument pos:start="29:29" pos:end="29:39"><expr pos:start="29:29" pos:end="29:39"><name pos:start="29:29" pos:end="29:39">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="35:5" pos:end="35:18">return <expr pos:start="35:12" pos:end="35:17"><name pos:start="35:12" pos:end="35:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
