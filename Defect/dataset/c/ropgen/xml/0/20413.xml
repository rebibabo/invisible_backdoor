<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20413.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:18"><name pos:start="1:1" pos:end="1:16">sPAPRDRConnector</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:40">spapr_dr_connector_new</name><parameter_list pos:start="1:41" pos:end="5:53">(<parameter pos:start="1:42" pos:end="1:54"><decl pos:start="1:42" pos:end="1:54"><type pos:start="1:42" pos:end="1:54"><name pos:start="1:42" pos:end="1:47">Object</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">owner</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:66"><decl pos:start="3:42" pos:end="3:66"><type pos:start="3:42" pos:end="3:66"><name pos:start="3:42" pos:end="3:61">sPAPRDRConnectorType</name></type> <name pos:start="3:63" pos:end="3:66">type</name></decl></parameter>,

                                         <parameter pos:start="5:42" pos:end="5:52"><decl pos:start="5:42" pos:end="5:52"><type pos:start="5:42" pos:end="5:52"><name pos:start="5:42" pos:end="5:49">uint32_t</name></type> <name pos:start="5:51" pos:end="5:52">id</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="121:1">{<block_content pos:start="9:5" pos:end="119:15">

    <decl_stmt pos:start="9:5" pos:end="11:64"><decl pos:start="9:5" pos:end="11:63"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">sPAPRDRConnector</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">drc</name> <init pos:start="9:27" pos:end="11:63">=

        <expr pos:start="11:9" pos:end="11:63"><call pos:start="11:9" pos:end="11:63"><name pos:start="11:9" pos:end="11:26">SPAPR_DR_CONNECTOR</name><argument_list pos:start="11:27" pos:end="11:63">(<argument pos:start="11:28" pos:end="11:62"><expr pos:start="11:28" pos:end="11:62"><call pos:start="11:28" pos:end="11:62"><name pos:start="11:28" pos:end="11:37">object_new</name><argument_list pos:start="11:38" pos:end="11:62">(<argument pos:start="11:39" pos:end="11:61"><expr pos:start="11:39" pos:end="11:61"><name pos:start="11:39" pos:end="11:61">TYPE_SPAPR_DR_CONNECTOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:19"><expr pos:start="15:5" pos:end="15:18"><call pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:12">g_assert</name><argument_list pos:start="15:13" pos:end="15:18">(<argument pos:start="15:14" pos:end="15:17"><expr pos:start="15:14" pos:end="15:17"><name pos:start="15:14" pos:end="15:17">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:21"><expr pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:7">drc</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:13">type</name></name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:20">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:17"><expr pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:7">drc</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:11">id</name></name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:16">id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:7">drc</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:14">owner</name></name> <operator pos:start="23:16" pos:end="23:16">=</operator> <name pos:start="23:18" pos:end="23:22">owner</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:75"><expr pos:start="25:5" pos:end="25:74"><call pos:start="25:5" pos:end="25:74"><name pos:start="25:5" pos:end="25:29">object_property_add_child</name><argument_list pos:start="25:30" pos:end="25:74">(<argument pos:start="25:31" pos:end="25:35"><expr pos:start="25:31" pos:end="25:35"><name pos:start="25:31" pos:end="25:35">owner</name></expr></argument>, <argument pos:start="25:38" pos:end="25:54"><expr pos:start="25:38" pos:end="25:54"><literal type="string" pos:start="25:38" pos:end="25:54">"dr-connector[*]"</literal></expr></argument>, <argument pos:start="25:57" pos:end="25:67"><expr pos:start="25:57" pos:end="25:67"><call pos:start="25:57" pos:end="25:67"><name pos:start="25:57" pos:end="25:62">OBJECT</name><argument_list pos:start="25:63" pos:end="25:67">(<argument pos:start="25:64" pos:end="25:66"><expr pos:start="25:64" pos:end="25:66"><name pos:start="25:64" pos:end="25:66">drc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:70" pos:end="25:73"><expr pos:start="25:70" pos:end="25:73"><name pos:start="25:70" pos:end="25:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:66"><expr pos:start="27:5" pos:end="27:65"><call pos:start="27:5" pos:end="27:65"><name pos:start="27:5" pos:end="27:28">object_property_set_bool</name><argument_list pos:start="27:29" pos:end="27:65">(<argument pos:start="27:30" pos:end="27:40"><expr pos:start="27:30" pos:end="27:40"><call pos:start="27:30" pos:end="27:40"><name pos:start="27:30" pos:end="27:35">OBJECT</name><argument_list pos:start="27:36" pos:end="27:40">(<argument pos:start="27:37" pos:end="27:39"><expr pos:start="27:37" pos:end="27:39"><name pos:start="27:37" pos:end="27:39">drc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:43" pos:end="27:46"><expr pos:start="27:43" pos:end="27:46"><name pos:start="27:43" pos:end="27:46">true</name></expr></argument>, <argument pos:start="27:49" pos:end="27:58"><expr pos:start="27:49" pos:end="27:58"><literal type="string" pos:start="27:49" pos:end="27:58">"realized"</literal></expr></argument>, <argument pos:start="27:61" pos:end="27:64"><expr pos:start="27:61" pos:end="27:64"><name pos:start="27:61" pos:end="27:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="71:7">/* human-readable name for a DRC to encode into the DT

     * description. this is mainly only used within a guest in place

     * of the unique DRC index.

     *

     * in the case of VIO/PCI devices, it corresponds to a

     * "location code" that maps a logical device/function (DRC index)

     * to a physical (or virtual in the case of VIO) location in the

     * system by chaining together the "location label" for each

     * encapsulating component.

     *

     * since this is more to do with diagnosing physical hardware

     * issues than guest compatibility, we choose location codes/DRC

     * names that adhere to the documented format, but avoid encoding

     * the entire topology information into the label/code, instead

     * just using the location codes based on the labels for the

     * endpoints (VIO/PCI adaptor connectors), which is basically

     * just "C" followed by an integer ID.

     *

     * DRC names as documented by PAPR+ v2.7, 13.5.2.4

     * location codes as documented by PAPR+ v2.7, 12.3.1.5

     */</comment>

    <switch pos:start="73:5" pos:end="105:5">switch <condition pos:start="73:12" pos:end="73:22">(<expr pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:15">drc</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:21">type</name></name></expr>)</condition> <block pos:start="73:24" pos:end="105:5">{<block_content pos:start="75:5" pos:end="103:24">

    <case pos:start="75:5" pos:end="75:37">case <expr pos:start="75:10" pos:end="75:36"><name pos:start="75:10" pos:end="75:36">SPAPR_DR_CONNECTOR_TYPE_CPU</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:50"><expr pos:start="77:9" pos:end="77:49"><name pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:11">drc</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:17">name</name></name> <operator pos:start="77:19" pos:end="77:19">=</operator> <call pos:start="77:21" pos:end="77:49"><name pos:start="77:21" pos:end="77:35">g_strdup_printf</name><argument_list pos:start="77:36" pos:end="77:49">(<argument pos:start="77:37" pos:end="77:44"><expr pos:start="77:37" pos:end="77:44"><literal type="string" pos:start="77:37" pos:end="77:44">"CPU %d"</literal></expr></argument>, <argument pos:start="77:47" pos:end="77:48"><expr pos:start="77:47" pos:end="77:48"><name pos:start="77:47" pos:end="77:48">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <case pos:start="81:5" pos:end="81:37">case <expr pos:start="81:10" pos:end="81:36"><name pos:start="81:10" pos:end="81:36">SPAPR_DR_CONNECTOR_TYPE_PHB</name></expr>:</case>

        <expr_stmt pos:start="83:9" pos:end="83:50"><expr pos:start="83:9" pos:end="83:49"><name pos:start="83:9" pos:end="83:17"><name pos:start="83:9" pos:end="83:11">drc</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:17">name</name></name> <operator pos:start="83:19" pos:end="83:19">=</operator> <call pos:start="83:21" pos:end="83:49"><name pos:start="83:21" pos:end="83:35">g_strdup_printf</name><argument_list pos:start="83:36" pos:end="83:49">(<argument pos:start="83:37" pos:end="83:44"><expr pos:start="83:37" pos:end="83:44"><literal type="string" pos:start="83:37" pos:end="83:44">"PHB %d"</literal></expr></argument>, <argument pos:start="83:47" pos:end="83:48"><expr pos:start="83:47" pos:end="83:48"><name pos:start="83:47" pos:end="83:48">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:37">case <expr pos:start="87:10" pos:end="87:36"><name pos:start="87:10" pos:end="87:36">SPAPR_DR_CONNECTOR_TYPE_VIO</name></expr>:</case>

    <case pos:start="89:5" pos:end="89:37">case <expr pos:start="89:10" pos:end="89:36"><name pos:start="89:10" pos:end="89:36">SPAPR_DR_CONNECTOR_TYPE_PCI</name></expr>:</case>

        <expr_stmt pos:start="91:9" pos:end="91:47"><expr pos:start="91:9" pos:end="91:46"><name pos:start="91:9" pos:end="91:17"><name pos:start="91:9" pos:end="91:11">drc</name><operator pos:start="91:12" pos:end="91:13">-&gt;</operator><name pos:start="91:14" pos:end="91:17">name</name></name> <operator pos:start="91:19" pos:end="91:19">=</operator> <call pos:start="91:21" pos:end="91:46"><name pos:start="91:21" pos:end="91:35">g_strdup_printf</name><argument_list pos:start="91:36" pos:end="91:46">(<argument pos:start="91:37" pos:end="91:41"><expr pos:start="91:37" pos:end="91:41"><literal type="string" pos:start="91:37" pos:end="91:41">"C%d"</literal></expr></argument>, <argument pos:start="91:44" pos:end="91:45"><expr pos:start="91:44" pos:end="91:45"><name pos:start="91:44" pos:end="91:45">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <case pos:start="95:5" pos:end="95:37">case <expr pos:start="95:10" pos:end="95:36"><name pos:start="95:10" pos:end="95:36">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr>:</case>

        <expr_stmt pos:start="97:9" pos:end="97:50"><expr pos:start="97:9" pos:end="97:49"><name pos:start="97:9" pos:end="97:17"><name pos:start="97:9" pos:end="97:11">drc</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:17">name</name></name> <operator pos:start="97:19" pos:end="97:19">=</operator> <call pos:start="97:21" pos:end="97:49"><name pos:start="97:21" pos:end="97:35">g_strdup_printf</name><argument_list pos:start="97:36" pos:end="97:49">(<argument pos:start="97:37" pos:end="97:44"><expr pos:start="97:37" pos:end="97:44"><literal type="string" pos:start="97:37" pos:end="97:44">"LMB %d"</literal></expr></argument>, <argument pos:start="97:47" pos:end="97:48"><expr pos:start="97:47" pos:end="97:48"><name pos:start="97:47" pos:end="97:48">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <default pos:start="101:5" pos:end="101:12">default:</default>

        <expr_stmt pos:start="103:9" pos:end="103:24"><expr pos:start="103:9" pos:end="103:23"><call pos:start="103:9" pos:end="103:23"><name pos:start="103:9" pos:end="103:16">g_assert</name><argument_list pos:start="103:17" pos:end="103:23">(<argument pos:start="103:18" pos:end="103:22"><expr pos:start="103:18" pos:end="103:22"><name pos:start="103:18" pos:end="103:22">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <comment type="block" pos:start="109:5" pos:end="109:65">/* PCI slot always start in a USABLE state, and stay there */</comment>

    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:49">(<expr pos:start="111:9" pos:end="111:48"><name pos:start="111:9" pos:end="111:17"><name pos:start="111:9" pos:end="111:11">drc</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:17">type</name></name> <operator pos:start="111:19" pos:end="111:20">==</operator> <name pos:start="111:22" pos:end="111:48">SPAPR_DR_CONNECTOR_TYPE_PCI</name></expr>)</condition> <block pos:start="111:51" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:65">

        <expr_stmt pos:start="113:9" pos:end="113:65"><expr pos:start="113:9" pos:end="113:64"><name pos:start="113:9" pos:end="113:29"><name pos:start="113:9" pos:end="113:11">drc</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:29">allocation_state</name></name> <operator pos:start="113:31" pos:end="113:31">=</operator> <name pos:start="113:33" pos:end="113:64">SPAPR_DR_ALLOCATION_STATE_USABLE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="119:5" pos:end="119:15">return <expr pos:start="119:12" pos:end="119:14"><name pos:start="119:12" pos:end="119:14">drc</name></expr>;</return>

</block_content>}</block></function>
</unit>
