<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14264.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:46"><name pos:start="1:1" pos:end="1:10">build_srat</name><argument_list pos:start="1:11" pos:end="1:46">(<argument pos:start="1:12" pos:end="1:29">GArray *table_data</argument>, <argument pos:start="1:32" pos:end="1:45">GArray *linker</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="183:1">{<block_content pos:start="5:5" pos:end="181:56">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:37"><name pos:start="5:5" pos:end="5:35">AcpiSystemResourceAffinityTable</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:41">srat</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:31"><name pos:start="7:5" pos:end="7:29">AcpiSratProcessorAffinity</name> <modifier pos:start="7:31" pos:end="7:31">*</modifier></type><name pos:start="7:32" pos:end="7:35">core</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:26">AcpiSratMemoryAffinity</name> <modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:35">numamem</name></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:20">curnode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">srat_start</name></decl>, <decl pos:start="17:21" pos:end="17:30"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:21" pos:end="17:30">numa_start</name></decl>, <decl pos:start="17:33" pos:end="17:37"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:33" pos:end="17:37">slots</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:42"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:20">mem_len</name></decl>, <decl pos:start="19:23" pos:end="19:30"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:23" pos:end="19:30">mem_base</name></decl>, <decl pos:start="19:33" pos:end="19:41"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:33" pos:end="19:41">next_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:58"><decl pos:start="21:5" pos:end="21:57"><type pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:18">PCMachineState</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:24">pcms</name> <init pos:start="21:26" pos:end="21:57">= <expr pos:start="21:28" pos:end="21:57"><call pos:start="21:28" pos:end="21:57"><name pos:start="21:28" pos:end="21:37">PC_MACHINE</name><argument_list pos:start="21:38" pos:end="21:57">(<argument pos:start="21:39" pos:end="21:56"><expr pos:start="21:39" pos:end="21:56"><call pos:start="21:39" pos:end="21:56"><name pos:start="21:39" pos:end="21:54">qdev_get_machine</name><argument_list pos:start="21:55" pos:end="21:56">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="27:38"><decl pos:start="23:5" pos:end="27:37"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">ram_addr_t</name></type> <name pos:start="23:16" pos:end="23:46">hotplugabble_address_space_size</name> <init pos:start="23:48" pos:end="27:37">=

        <expr pos:start="25:9" pos:end="27:37"><call pos:start="25:9" pos:end="27:37"><name pos:start="25:9" pos:end="25:31">object_property_get_int</name><argument_list pos:start="25:32" pos:end="27:37">(<argument pos:start="25:33" pos:end="25:44"><expr pos:start="25:33" pos:end="25:44"><call pos:start="25:33" pos:end="25:44"><name pos:start="25:33" pos:end="25:38">OBJECT</name><argument_list pos:start="25:39" pos:end="25:44">(<argument pos:start="25:40" pos:end="25:43"><expr pos:start="25:40" pos:end="25:43"><name pos:start="25:40" pos:end="25:43">pcms</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:47" pos:end="25:74"><expr pos:start="25:47" pos:end="25:74"><name pos:start="25:47" pos:end="25:74">PC_MACHINE_MEMHP_REGION_SIZE</name></expr></argument>,

                                <argument pos:start="27:33" pos:end="27:36"><expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:14">srat_start</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <name pos:start="31:18" pos:end="31:32"><name pos:start="31:18" pos:end="31:27">table_data</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:32">len</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:52"><expr pos:start="35:5" pos:end="35:51"><name pos:start="35:5" pos:end="35:8">srat</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <call pos:start="35:12" pos:end="35:51"><name pos:start="35:12" pos:end="35:25">acpi_data_push</name><argument_list pos:start="35:26" pos:end="35:51">(<argument pos:start="35:27" pos:end="35:36"><expr pos:start="35:27" pos:end="35:36"><name pos:start="35:27" pos:end="35:36">table_data</name></expr></argument>, <argument pos:start="35:39" pos:end="35:50"><expr pos:start="35:39" pos:end="35:50"><sizeof pos:start="35:39" pos:end="35:44">sizeof <name/></sizeof>*<name pos:start="35:47" pos:end="35:50">srat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:8">srat</name><operator pos:start="37:9" pos:end="37:10">-&gt;</operator><name pos:start="37:11" pos:end="37:19">reserved1</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:36"><name pos:start="37:23" pos:end="37:33">cpu_to_le32</name><argument_list pos:start="37:34" pos:end="37:36">(<argument pos:start="37:35" pos:end="37:35"><expr pos:start="37:35" pos:end="37:35"><literal type="number" pos:start="37:35" pos:end="37:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:8">core</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <operator pos:start="39:12" pos:end="39:12">(</operator><name pos:start="39:13" pos:end="39:16">void</name> <operator pos:start="39:18" pos:end="39:18">*</operator><operator pos:start="39:19" pos:end="39:19">)</operator><operator pos:start="39:20" pos:end="39:20">(</operator><name pos:start="39:21" pos:end="39:24">srat</name> <operator pos:start="39:26" pos:end="39:26">+</operator> <literal type="number" pos:start="39:28" pos:end="39:28">1</literal><operator pos:start="39:29" pos:end="39:29">)</operator></expr>;</expr_stmt>



    <for pos:start="43:5" pos:end="63:5">for <control pos:start="43:9" pos:end="43:45">(<init pos:start="43:10" pos:end="43:15"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>;</init> <condition pos:start="43:17" pos:end="43:40"><expr pos:start="43:17" pos:end="43:39"><name pos:start="43:17" pos:end="43:17">i</name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <name pos:start="43:21" pos:end="43:39"><name pos:start="43:21" pos:end="43:24">pcms</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:39">apic_id_limit</name></name></expr>;</condition> <incr pos:start="43:42" pos:end="43:44"><expr pos:start="43:42" pos:end="43:44"><operator pos:start="43:42" pos:end="43:43">++</operator><name pos:start="43:44" pos:end="43:44">i</name></expr></incr>)</control> <block pos:start="43:47" pos:end="63:5">{<block_content pos:start="45:9" pos:end="61:37">

        <expr_stmt pos:start="45:9" pos:end="45:56"><expr pos:start="45:9" pos:end="45:55"><name pos:start="45:9" pos:end="45:12">core</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:55"><name pos:start="45:16" pos:end="45:29">acpi_data_push</name><argument_list pos:start="45:30" pos:end="45:55">(<argument pos:start="45:31" pos:end="45:40"><expr pos:start="45:31" pos:end="45:40"><name pos:start="45:31" pos:end="45:40">table_data</name></expr></argument>, <argument pos:start="45:43" pos:end="45:54"><expr pos:start="45:43" pos:end="45:54"><sizeof pos:start="45:43" pos:end="45:48">sizeof <name/></sizeof>*<name pos:start="45:51" pos:end="45:54">core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:41"><expr pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:12">core</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:18">type</name></name> <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:40">ACPI_SRAT_PROCESSOR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:37"><expr pos:start="49:9" pos:end="49:36"><name pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:12">core</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:20">length</name></name> <operator pos:start="49:22" pos:end="49:22">=</operator> <sizeof pos:start="49:24" pos:end="49:36">sizeof<argument_list pos:start="49:30" pos:end="49:36">(<argument pos:start="49:31" pos:end="49:35"><expr pos:start="49:31" pos:end="49:35"><operator pos:start="49:31" pos:end="49:31">*</operator><name pos:start="49:32" pos:end="49:35">core</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:32"><expr pos:start="51:9" pos:end="51:31"><name pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:12">core</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:27">local_apic_id</name></name> <operator pos:start="51:29" pos:end="51:29">=</operator> <name pos:start="51:31" pos:end="51:31">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:36"><expr pos:start="53:9" pos:end="53:35"><name pos:start="53:9" pos:end="53:15">curnode</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <name pos:start="53:19" pos:end="53:35"><name pos:start="53:19" pos:end="53:22">pcms</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:32">node_cpu</name><index pos:start="53:33" pos:end="53:35">[<expr pos:start="53:34" pos:end="53:34"><name pos:start="53:34" pos:end="53:34">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:12">core</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:26">proximity_lo</name></name> <operator pos:start="55:28" pos:end="55:28">=</operator> <name pos:start="55:30" pos:end="55:36">curnode</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:41"><expr pos:start="57:9" pos:end="57:40"><call pos:start="57:9" pos:end="57:40"><name pos:start="57:9" pos:end="57:14">memset</name><argument_list pos:start="57:15" pos:end="57:40">(<argument pos:start="57:16" pos:end="57:33"><expr pos:start="57:16" pos:end="57:33"><name pos:start="57:16" pos:end="57:33"><name pos:start="57:16" pos:end="57:19">core</name><operator pos:start="57:20" pos:end="57:21">-&gt;</operator><name pos:start="57:22" pos:end="57:33">proximity_hi</name></name></expr></argument>, <argument pos:start="57:36" pos:end="57:36"><expr pos:start="57:36" pos:end="57:36"><literal type="number" pos:start="57:36" pos:end="57:36">0</literal></expr></argument>, <argument pos:start="57:39" pos:end="57:39"><expr pos:start="57:39" pos:end="57:39"><literal type="number" pos:start="57:39" pos:end="57:39">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:12">core</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:29">local_sapic_eid</name></name> <operator pos:start="59:31" pos:end="59:31">=</operator> <literal type="number" pos:start="59:33" pos:end="59:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:37"><expr pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:12">core</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:19">flags</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <call pos:start="61:23" pos:end="61:36"><name pos:start="61:23" pos:end="61:33">cpu_to_le32</name><argument_list pos:start="61:34" pos:end="61:36">(<argument pos:start="61:35" pos:end="61:35"><expr pos:start="61:35" pos:end="61:35"><literal type="number" pos:start="61:35" pos:end="61:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>





    <comment type="block" pos:start="69:5" pos:end="73:7">/* the memory map is a bit tricky, it contains at least one hole

     * from 640k-1M and possibly another one from 3.5G-4G.

     */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:18"><expr pos:start="75:5" pos:end="75:17"><name pos:start="75:5" pos:end="75:13">next_base</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <literal type="number" pos:start="75:17" pos:end="75:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:33"><expr pos:start="77:5" pos:end="77:32"><name pos:start="77:5" pos:end="77:14">numa_start</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <name pos:start="77:18" pos:end="77:32"><name pos:start="77:18" pos:end="77:27">table_data</name><operator pos:start="77:28" pos:end="77:29">-&gt;</operator><name pos:start="77:30" pos:end="77:32">len</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:58"><expr pos:start="81:5" pos:end="81:57"><name pos:start="81:5" pos:end="81:11">numamem</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:57"><name pos:start="81:15" pos:end="81:28">acpi_data_push</name><argument_list pos:start="81:29" pos:end="81:57">(<argument pos:start="81:30" pos:end="81:39"><expr pos:start="81:30" pos:end="81:39"><name pos:start="81:30" pos:end="81:39">table_data</name></expr></argument>, <argument pos:start="81:42" pos:end="81:56"><expr pos:start="81:42" pos:end="81:56"><sizeof pos:start="81:42" pos:end="81:47">sizeof <name/></sizeof>*<name pos:start="81:50" pos:end="81:56">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:74"><expr pos:start="83:5" pos:end="83:73"><call pos:start="83:5" pos:end="83:73"><name pos:start="83:5" pos:end="83:26">acpi_build_srat_memory</name><argument_list pos:start="83:27" pos:end="83:73">(<argument pos:start="83:28" pos:end="83:34"><expr pos:start="83:28" pos:end="83:34"><name pos:start="83:28" pos:end="83:34">numamem</name></expr></argument>, <argument pos:start="83:37" pos:end="83:37"><expr pos:start="83:37" pos:end="83:37"><literal type="number" pos:start="83:37" pos:end="83:37">0</literal></expr></argument>, <argument pos:start="83:40" pos:end="83:47"><expr pos:start="83:40" pos:end="83:47"><literal type="number" pos:start="83:40" pos:end="83:42">640</literal><operator pos:start="83:43" pos:end="83:43">*</operator><literal type="number" pos:start="83:44" pos:end="83:47">1024</literal></expr></argument>, <argument pos:start="83:50" pos:end="83:50"><expr pos:start="83:50" pos:end="83:50"><literal type="number" pos:start="83:50" pos:end="83:50">0</literal></expr></argument>, <argument pos:start="83:53" pos:end="83:72"><expr pos:start="83:53" pos:end="83:72"><name pos:start="83:53" pos:end="83:72">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:28"><expr pos:start="85:5" pos:end="85:27"><name pos:start="85:5" pos:end="85:13">next_base</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <literal type="number" pos:start="85:17" pos:end="85:20">1024</literal> <operator pos:start="85:22" pos:end="85:22">*</operator> <literal type="number" pos:start="85:24" pos:end="85:27">1024</literal></expr>;</expr_stmt>

    <for pos:start="87:5" pos:end="135:5">for <control pos:start="87:9" pos:end="87:46">(<init pos:start="87:10" pos:end="87:15"><expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:10">i</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">1</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:41"><expr pos:start="87:17" pos:end="87:40"><name pos:start="87:17" pos:end="87:17">i</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <name pos:start="87:21" pos:end="87:36"><name pos:start="87:21" pos:end="87:24">pcms</name><operator pos:start="87:25" pos:end="87:26">-&gt;</operator><name pos:start="87:27" pos:end="87:36">numa_nodes</name></name> <operator pos:start="87:38" pos:end="87:38">+</operator> <literal type="number" pos:start="87:40" pos:end="87:40">1</literal></expr>;</condition> <incr pos:start="87:43" pos:end="87:45"><expr pos:start="87:43" pos:end="87:45"><operator pos:start="87:43" pos:end="87:44">++</operator><name pos:start="87:45" pos:end="87:45">i</name></expr></incr>)</control> <block pos:start="87:48" pos:end="135:5">{<block_content pos:start="89:9" pos:end="133:53">

        <expr_stmt pos:start="89:9" pos:end="89:29"><expr pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:16">mem_base</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <name pos:start="89:20" pos:end="89:28">next_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:40"><expr pos:start="91:9" pos:end="91:39"><name pos:start="91:9" pos:end="91:15">mem_len</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <name pos:start="91:19" pos:end="91:39"><name pos:start="91:19" pos:end="91:22">pcms</name><operator pos:start="91:23" pos:end="91:24">-&gt;</operator><name pos:start="91:25" pos:end="91:32">node_mem</name><index pos:start="91:33" pos:end="91:39">[<expr pos:start="91:34" pos:end="91:38"><name pos:start="91:34" pos:end="91:34">i</name> <operator pos:start="91:36" pos:end="91:36">-</operator> <literal type="number" pos:start="91:38" pos:end="91:38">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="97:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:19">(<expr pos:start="93:13" pos:end="93:18"><name pos:start="93:13" pos:end="93:13">i</name> <operator pos:start="93:15" pos:end="93:16">==</operator> <literal type="number" pos:start="93:18" pos:end="93:18">1</literal></expr>)</condition> <block pos:start="93:21" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:35">

            <expr_stmt pos:start="95:13" pos:end="95:35"><expr pos:start="95:13" pos:end="95:34"><name pos:start="95:13" pos:end="95:19">mem_len</name> <operator pos:start="95:21" pos:end="95:22">-=</operator> <literal type="number" pos:start="95:24" pos:end="95:27">1024</literal> <operator pos:start="95:29" pos:end="95:29">*</operator> <literal type="number" pos:start="95:31" pos:end="95:34">1024</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:39"><expr pos:start="99:9" pos:end="99:38"><name pos:start="99:9" pos:end="99:17">next_base</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <name pos:start="99:21" pos:end="99:28">mem_base</name> <operator pos:start="99:30" pos:end="99:30">+</operator> <name pos:start="99:32" pos:end="99:38">mem_len</name></expr>;</expr_stmt>



        <comment type="block" pos:start="103:9" pos:end="103:39">/* Cut out the ACPI_PCI hole */</comment>

        <if_stmt pos:start="105:9" pos:end="127:9"><if pos:start="105:9" pos:end="127:9">if <condition pos:start="105:12" pos:end="107:48">(<expr pos:start="105:13" pos:end="107:47"><name pos:start="105:13" pos:end="105:20">mem_base</name> <operator pos:start="105:22" pos:end="105:23">&lt;=</operator> <name pos:start="105:25" pos:end="105:47"><name pos:start="105:25" pos:end="105:28">pcms</name><operator pos:start="105:29" pos:end="105:30">-&gt;</operator><name pos:start="105:31" pos:end="105:47">below_4g_mem_size</name></name> <operator pos:start="105:49" pos:end="105:50">&amp;&amp;</operator>

            <name pos:start="107:13" pos:end="107:21">next_base</name> <operator pos:start="107:23" pos:end="107:23">&gt;</operator> <name pos:start="107:25" pos:end="107:47"><name pos:start="107:25" pos:end="107:28">pcms</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:47">below_4g_mem_size</name></name></expr>)</condition> <block pos:start="107:50" pos:end="127:9">{<block_content pos:start="109:13" pos:end="125:64">

            <expr_stmt pos:start="109:13" pos:end="109:59"><expr pos:start="109:13" pos:end="109:58"><name pos:start="109:13" pos:end="109:19">mem_len</name> <operator pos:start="109:21" pos:end="109:22">-=</operator> <name pos:start="109:24" pos:end="109:32">next_base</name> <operator pos:start="109:34" pos:end="109:34">-</operator> <name pos:start="109:36" pos:end="109:58"><name pos:start="109:36" pos:end="109:39">pcms</name><operator pos:start="109:40" pos:end="109:41">-&gt;</operator><name pos:start="109:42" pos:end="109:58">below_4g_mem_size</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="111:13" pos:end="119:13"><if pos:start="111:13" pos:end="119:13">if <condition pos:start="111:16" pos:end="111:28">(<expr pos:start="111:17" pos:end="111:27"><name pos:start="111:17" pos:end="111:23">mem_len</name> <operator pos:start="111:25" pos:end="111:25">&gt;</operator> <literal type="number" pos:start="111:27" pos:end="111:27">0</literal></expr>)</condition> <block pos:start="111:30" pos:end="119:13">{<block_content pos:start="113:17" pos:end="117:61">

                <expr_stmt pos:start="113:17" pos:end="113:70"><expr pos:start="113:17" pos:end="113:69"><name pos:start="113:17" pos:end="113:23">numamem</name> <operator pos:start="113:25" pos:end="113:25">=</operator> <call pos:start="113:27" pos:end="113:69"><name pos:start="113:27" pos:end="113:40">acpi_data_push</name><argument_list pos:start="113:41" pos:end="113:69">(<argument pos:start="113:42" pos:end="113:51"><expr pos:start="113:42" pos:end="113:51"><name pos:start="113:42" pos:end="113:51">table_data</name></expr></argument>, <argument pos:start="113:54" pos:end="113:68"><expr pos:start="113:54" pos:end="113:68"><sizeof pos:start="113:54" pos:end="113:59">sizeof <name/></sizeof>*<name pos:start="113:62" pos:end="113:68">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="117:61"><expr pos:start="115:17" pos:end="117:60"><call pos:start="115:17" pos:end="117:60"><name pos:start="115:17" pos:end="115:38">acpi_build_srat_memory</name><argument_list pos:start="115:39" pos:end="117:60">(<argument pos:start="115:40" pos:end="115:46"><expr pos:start="115:40" pos:end="115:46"><name pos:start="115:40" pos:end="115:46">numamem</name></expr></argument>, <argument pos:start="115:49" pos:end="115:56"><expr pos:start="115:49" pos:end="115:56"><name pos:start="115:49" pos:end="115:56">mem_base</name></expr></argument>, <argument pos:start="115:59" pos:end="115:65"><expr pos:start="115:59" pos:end="115:65"><name pos:start="115:59" pos:end="115:65">mem_len</name></expr></argument>, <argument pos:start="115:68" pos:end="115:72"><expr pos:start="115:68" pos:end="115:72"><name pos:start="115:68" pos:end="115:68">i</name> <operator pos:start="115:70" pos:end="115:70">-</operator> <literal type="number" pos:start="115:72" pos:end="115:72">1</literal></expr></argument>,

                                       <argument pos:start="117:40" pos:end="117:59"><expr pos:start="117:40" pos:end="117:59"><name pos:start="117:40" pos:end="117:59">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:34"><expr pos:start="121:13" pos:end="121:33"><name pos:start="121:13" pos:end="121:20">mem_base</name> <operator pos:start="121:22" pos:end="121:22">=</operator> <literal type="number" pos:start="121:24" pos:end="121:27">1ULL</literal> <operator pos:start="121:29" pos:end="121:30">&lt;&lt;</operator> <literal type="number" pos:start="121:32" pos:end="121:33">32</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:58"><expr pos:start="123:13" pos:end="123:57"><name pos:start="123:13" pos:end="123:19">mem_len</name> <operator pos:start="123:21" pos:end="123:21">=</operator> <name pos:start="123:23" pos:end="123:31">next_base</name> <operator pos:start="123:33" pos:end="123:33">-</operator> <name pos:start="123:35" pos:end="123:57"><name pos:start="123:35" pos:end="123:38">pcms</name><operator pos:start="123:39" pos:end="123:40">-&gt;</operator><name pos:start="123:41" pos:end="123:57">below_4g_mem_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:64"><expr pos:start="125:13" pos:end="125:63"><name pos:start="125:13" pos:end="125:21">next_base</name> <operator pos:start="125:23" pos:end="125:24">+=</operator> <operator pos:start="125:26" pos:end="125:26">(</operator><literal type="number" pos:start="125:27" pos:end="125:30">1ULL</literal> <operator pos:start="125:32" pos:end="125:33">&lt;&lt;</operator> <literal type="number" pos:start="125:35" pos:end="125:36">32</literal><operator pos:start="125:37" pos:end="125:37">)</operator> <operator pos:start="125:39" pos:end="125:39">-</operator> <name pos:start="125:41" pos:end="125:63"><name pos:start="125:41" pos:end="125:44">pcms</name><operator pos:start="125:45" pos:end="125:46">-&gt;</operator><name pos:start="125:47" pos:end="125:63">below_4g_mem_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:62"><expr pos:start="129:9" pos:end="129:61"><name pos:start="129:9" pos:end="129:15">numamem</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <call pos:start="129:19" pos:end="129:61"><name pos:start="129:19" pos:end="129:32">acpi_data_push</name><argument_list pos:start="129:33" pos:end="129:61">(<argument pos:start="129:34" pos:end="129:43"><expr pos:start="129:34" pos:end="129:43"><name pos:start="129:34" pos:end="129:43">table_data</name></expr></argument>, <argument pos:start="129:46" pos:end="129:60"><expr pos:start="129:46" pos:end="129:60"><sizeof pos:start="129:46" pos:end="129:51">sizeof <name/></sizeof>*<name pos:start="129:54" pos:end="129:60">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="133:53"><expr pos:start="131:9" pos:end="133:52"><call pos:start="131:9" pos:end="133:52"><name pos:start="131:9" pos:end="131:30">acpi_build_srat_memory</name><argument_list pos:start="131:31" pos:end="133:52">(<argument pos:start="131:32" pos:end="131:38"><expr pos:start="131:32" pos:end="131:38"><name pos:start="131:32" pos:end="131:38">numamem</name></expr></argument>, <argument pos:start="131:41" pos:end="131:48"><expr pos:start="131:41" pos:end="131:48"><name pos:start="131:41" pos:end="131:48">mem_base</name></expr></argument>, <argument pos:start="131:51" pos:end="131:57"><expr pos:start="131:51" pos:end="131:57"><name pos:start="131:51" pos:end="131:57">mem_len</name></expr></argument>, <argument pos:start="131:60" pos:end="131:64"><expr pos:start="131:60" pos:end="131:64"><name pos:start="131:60" pos:end="131:60">i</name> <operator pos:start="131:62" pos:end="131:62">-</operator> <literal type="number" pos:start="131:64" pos:end="131:64">1</literal></expr></argument>,

                               <argument pos:start="133:32" pos:end="133:51"><expr pos:start="133:32" pos:end="133:51"><name pos:start="133:32" pos:end="133:51">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="137:5" pos:end="137:61"><expr pos:start="137:5" pos:end="137:60"><name pos:start="137:5" pos:end="137:9">slots</name> <operator pos:start="137:11" pos:end="137:11">=</operator> <operator pos:start="137:13" pos:end="137:13">(</operator><name pos:start="137:14" pos:end="137:28"><name pos:start="137:14" pos:end="137:23">table_data</name><operator pos:start="137:24" pos:end="137:25">-&gt;</operator><name pos:start="137:26" pos:end="137:28">len</name></name> <operator pos:start="137:30" pos:end="137:30">-</operator> <name pos:start="137:32" pos:end="137:41">numa_start</name><operator pos:start="137:42" pos:end="137:42">)</operator> <operator pos:start="137:44" pos:end="137:44">/</operator> <sizeof pos:start="137:46" pos:end="137:51">sizeof <name/></sizeof>*<name pos:start="137:54" pos:end="137:60">numamem</name></expr>;</expr_stmt>

    <for pos:start="139:5" pos:end="145:5">for <control pos:start="139:9" pos:end="139:49">(<init pos:start="139:10" pos:end="139:10">;</init> <condition pos:start="139:12" pos:end="139:40"><expr pos:start="139:12" pos:end="139:39"><name pos:start="139:12" pos:end="139:16">slots</name> <operator pos:start="139:18" pos:end="139:18">&lt;</operator> <name pos:start="139:20" pos:end="139:35"><name pos:start="139:20" pos:end="139:23">pcms</name><operator pos:start="139:24" pos:end="139:25">-&gt;</operator><name pos:start="139:26" pos:end="139:35">numa_nodes</name></name> <operator pos:start="139:37" pos:end="139:37">+</operator> <literal type="number" pos:start="139:39" pos:end="139:39">2</literal></expr>;</condition> <incr pos:start="139:42" pos:end="139:48"><expr pos:start="139:42" pos:end="139:48"><name pos:start="139:42" pos:end="139:46">slots</name><operator pos:start="139:47" pos:end="139:48">++</operator></expr></incr>)</control> <block pos:start="139:51" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:71">

        <expr_stmt pos:start="141:9" pos:end="141:62"><expr pos:start="141:9" pos:end="141:61"><name pos:start="141:9" pos:end="141:15">numamem</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <call pos:start="141:19" pos:end="141:61"><name pos:start="141:19" pos:end="141:32">acpi_data_push</name><argument_list pos:start="141:33" pos:end="141:61">(<argument pos:start="141:34" pos:end="141:43"><expr pos:start="141:34" pos:end="141:43"><name pos:start="141:34" pos:end="141:43">table_data</name></expr></argument>, <argument pos:start="141:46" pos:end="141:60"><expr pos:start="141:46" pos:end="141:60"><sizeof pos:start="141:46" pos:end="141:51">sizeof <name/></sizeof>*<name pos:start="141:54" pos:end="141:60">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:71"><expr pos:start="143:9" pos:end="143:70"><call pos:start="143:9" pos:end="143:70"><name pos:start="143:9" pos:end="143:30">acpi_build_srat_memory</name><argument_list pos:start="143:31" pos:end="143:70">(<argument pos:start="143:32" pos:end="143:38"><expr pos:start="143:32" pos:end="143:38"><name pos:start="143:32" pos:end="143:38">numamem</name></expr></argument>, <argument pos:start="143:41" pos:end="143:41"><expr pos:start="143:41" pos:end="143:41"><literal type="number" pos:start="143:41" pos:end="143:41">0</literal></expr></argument>, <argument pos:start="143:44" pos:end="143:44"><expr pos:start="143:44" pos:end="143:44"><literal type="number" pos:start="143:44" pos:end="143:44">0</literal></expr></argument>, <argument pos:start="143:47" pos:end="143:47"><expr pos:start="143:47" pos:end="143:47"><literal type="number" pos:start="143:47" pos:end="143:47">0</literal></expr></argument>, <argument pos:start="143:50" pos:end="143:69"><expr pos:start="143:50" pos:end="143:69"><name pos:start="143:50" pos:end="143:69">MEM_AFFINITY_NOFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="149:5" pos:end="157:7">/*

     * Entry is required for Windows to enable memory hotplug in OS.

     * Memory devices may override proximity set by this entry,

     * providing _PXM method if necessary.

     */</comment>

    <if_stmt pos:start="159:5" pos:end="171:5"><if pos:start="159:5" pos:end="171:5">if <condition pos:start="159:8" pos:end="159:40">(<expr pos:start="159:9" pos:end="159:39"><name pos:start="159:9" pos:end="159:39">hotplugabble_address_space_size</name></expr>)</condition> <block pos:start="159:42" pos:end="171:5">{<block_content pos:start="161:9" pos:end="169:53">

        <expr_stmt pos:start="161:9" pos:end="161:62"><expr pos:start="161:9" pos:end="161:61"><name pos:start="161:9" pos:end="161:15">numamem</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <call pos:start="161:19" pos:end="161:61"><name pos:start="161:19" pos:end="161:32">acpi_data_push</name><argument_list pos:start="161:33" pos:end="161:61">(<argument pos:start="161:34" pos:end="161:43"><expr pos:start="161:34" pos:end="161:43"><name pos:start="161:34" pos:end="161:43">table_data</name></expr></argument>, <argument pos:start="161:46" pos:end="161:60"><expr pos:start="161:46" pos:end="161:60"><sizeof pos:start="161:46" pos:end="161:51">sizeof <name/></sizeof>*<name pos:start="161:54" pos:end="161:60">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="169:53"><expr pos:start="163:9" pos:end="169:52"><call pos:start="163:9" pos:end="169:52"><name pos:start="163:9" pos:end="163:30">acpi_build_srat_memory</name><argument_list pos:start="163:31" pos:end="169:52">(<argument pos:start="163:32" pos:end="163:38"><expr pos:start="163:32" pos:end="163:38"><name pos:start="163:32" pos:end="163:38">numamem</name></expr></argument>, <argument pos:start="163:41" pos:end="163:65"><expr pos:start="163:41" pos:end="163:65"><name pos:start="163:41" pos:end="163:65"><name pos:start="163:41" pos:end="163:44">pcms</name><operator pos:start="163:45" pos:end="163:46">-&gt;</operator><name pos:start="163:47" pos:end="163:60">hotplug_memory</name><operator pos:start="163:61" pos:end="163:61">.</operator><name pos:start="163:62" pos:end="163:65">base</name></name></expr></argument>,

                               <argument pos:start="165:32" pos:end="165:62"><expr pos:start="165:32" pos:end="165:62"><name pos:start="165:32" pos:end="165:62">hotplugabble_address_space_size</name></expr></argument>, <argument pos:start="165:65" pos:end="165:65"><expr pos:start="165:65" pos:end="165:65"><literal type="number" pos:start="165:65" pos:end="165:65">0</literal></expr></argument>,

                               <argument pos:start="167:32" pos:end="169:51"><expr pos:start="167:32" pos:end="169:51"><name pos:start="167:32" pos:end="167:56">MEM_AFFINITY_HOTPLUGGABLE</name> <operator pos:start="167:58" pos:end="167:58">|</operator>

                               <name pos:start="169:32" pos:end="169:51">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="181:56"><expr pos:start="175:5" pos:end="181:55"><call pos:start="175:5" pos:end="181:55"><name pos:start="175:5" pos:end="175:16">build_header</name><argument_list pos:start="175:17" pos:end="181:55">(<argument pos:start="175:18" pos:end="175:23"><expr pos:start="175:18" pos:end="175:23"><name pos:start="175:18" pos:end="175:23">linker</name></expr></argument>, <argument pos:start="175:26" pos:end="175:35"><expr pos:start="175:26" pos:end="175:35"><name pos:start="175:26" pos:end="175:35">table_data</name></expr></argument>,

                 <argument pos:start="177:18" pos:end="177:56"><expr pos:start="177:18" pos:end="177:56"><operator pos:start="177:18" pos:end="177:18">(</operator><name pos:start="177:19" pos:end="177:22">void</name> <operator pos:start="177:24" pos:end="177:24">*</operator><operator pos:start="177:25" pos:end="177:25">)</operator><operator pos:start="177:26" pos:end="177:26">(</operator><name pos:start="177:27" pos:end="177:42"><name pos:start="177:27" pos:end="177:36">table_data</name><operator pos:start="177:37" pos:end="177:38">-&gt;</operator><name pos:start="177:39" pos:end="177:42">data</name></name> <operator pos:start="177:44" pos:end="177:44">+</operator> <name pos:start="177:46" pos:end="177:55">srat_start</name><operator pos:start="177:56" pos:end="177:56">)</operator></expr></argument>,

                 <argument pos:start="179:18" pos:end="179:23"><expr pos:start="179:18" pos:end="179:23"><literal type="string" pos:start="179:18" pos:end="179:23">"SRAT"</literal></expr></argument>,

                 <argument pos:start="181:18" pos:end="181:45"><expr pos:start="181:18" pos:end="181:45"><name pos:start="181:18" pos:end="181:32"><name pos:start="181:18" pos:end="181:27">table_data</name><operator pos:start="181:28" pos:end="181:29">-&gt;</operator><name pos:start="181:30" pos:end="181:32">len</name></name> <operator pos:start="181:34" pos:end="181:34">-</operator> <name pos:start="181:36" pos:end="181:45">srat_start</name></expr></argument>, <argument pos:start="181:48" pos:end="181:48"><expr pos:start="181:48" pos:end="181:48"><literal type="number" pos:start="181:48" pos:end="181:48">1</literal></expr></argument>, <argument pos:start="181:51" pos:end="181:54"><expr pos:start="181:51" pos:end="181:54"><name pos:start="181:51" pos:end="181:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
