<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12993.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">check_bits_for_superframe</name><parameter_list pos:start="1:37" pos:end="3:56">(<parameter pos:start="1:38" pos:end="1:59"><decl pos:start="1:38" pos:end="1:59"><type pos:start="1:38" pos:end="1:59"><name pos:start="1:38" pos:end="1:50">GetBitContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:59">orig_gb</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:55"><decl pos:start="3:38" pos:end="3:55"><type pos:start="3:38" pos:end="3:55"><name pos:start="3:38" pos:end="3:52">WMAVoiceContext</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:55">s</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="133:1">{<block_content pos:start="7:5" pos:end="131:13">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">GetBitContext</name></type> <name pos:start="7:19" pos:end="7:22">s_gb</name></decl>, <decl pos:start="7:25" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:17"><modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:27">gb</name> <init pos:start="7:29" pos:end="7:35">= <expr pos:start="7:31" pos:end="7:35"><operator pos:start="7:31" pos:end="7:31">&amp;</operator><name pos:start="7:32" pos:end="7:35">s_gb</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name></decl>, <decl pos:start="9:12" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:20">need_bits</name></decl>, <decl pos:start="9:23" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:28">bd_idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:34"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:32"><name pos:start="11:11" pos:end="11:16">struct</name> <name pos:start="11:18" pos:end="11:32">frame_type_desc</name></name> <modifier pos:start="11:34" pos:end="11:34">*</modifier></type><name pos:start="11:35" pos:end="11:44">frame_desc</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:27">/* initialize a copy */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:62"><expr pos:start="17:5" pos:end="17:61"><call pos:start="17:5" pos:end="17:61"><name pos:start="17:5" pos:end="17:17">init_get_bits</name><argument_list pos:start="17:18" pos:end="17:61">(<argument pos:start="17:19" pos:end="17:20"><expr pos:start="17:19" pos:end="17:20"><name pos:start="17:19" pos:end="17:20">gb</name></expr></argument>, <argument pos:start="17:23" pos:end="17:37"><expr pos:start="17:23" pos:end="17:37"><name pos:start="17:23" pos:end="17:37"><name pos:start="17:23" pos:end="17:29">orig_gb</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:37">buffer</name></name></expr></argument>, <argument pos:start="17:40" pos:end="17:60"><expr pos:start="17:40" pos:end="17:60"><name pos:start="17:40" pos:end="17:60"><name pos:start="17:40" pos:end="17:46">orig_gb</name><operator pos:start="17:47" pos:end="17:48">-&gt;</operator><name pos:start="17:49" pos:end="17:60">size_in_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:48"><expr pos:start="19:5" pos:end="19:47"><call pos:start="19:5" pos:end="19:47"><name pos:start="19:5" pos:end="19:18">skip_bits_long</name><argument_list pos:start="19:19" pos:end="19:47">(<argument pos:start="19:20" pos:end="19:21"><expr pos:start="19:20" pos:end="19:21"><name pos:start="19:20" pos:end="19:21">gb</name></expr></argument>, <argument pos:start="19:24" pos:end="19:46"><expr pos:start="19:24" pos:end="19:46"><call pos:start="19:24" pos:end="19:46"><name pos:start="19:24" pos:end="19:37">get_bits_count</name><argument_list pos:start="19:38" pos:end="19:46">(<argument pos:start="19:39" pos:end="19:45"><expr pos:start="19:39" pos:end="19:45"><name pos:start="19:39" pos:end="19:45">orig_gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:60"><expr pos:start="21:5" pos:end="21:59"><call pos:start="21:5" pos:end="21:59"><name pos:start="21:5" pos:end="21:14">av_assert1</name><argument_list pos:start="21:15" pos:end="21:59">(<argument pos:start="21:16" pos:end="21:58"><expr pos:start="21:16" pos:end="21:58"><call pos:start="21:16" pos:end="21:32"><name pos:start="21:16" pos:end="21:28">get_bits_left</name><argument_list pos:start="21:29" pos:end="21:32">(<argument pos:start="21:30" pos:end="21:31"><expr pos:start="21:30" pos:end="21:31"><name pos:start="21:30" pos:end="21:31">gb</name></expr></argument>)</argument_list></call> <operator pos:start="21:34" pos:end="21:35">==</operator> <call pos:start="21:37" pos:end="21:58"><name pos:start="21:37" pos:end="21:49">get_bits_left</name><argument_list pos:start="21:50" pos:end="21:58">(<argument pos:start="21:51" pos:end="21:57"><expr pos:start="21:51" pos:end="21:57"><name pos:start="21:51" pos:end="21:57">orig_gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:27">/* superframe header */</comment>

    <if_stmt pos:start="27:5" pos:end="29:17"><if pos:start="27:5" pos:end="29:17">if <condition pos:start="27:8" pos:end="27:31">(<expr pos:start="27:9" pos:end="27:30"><call pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:21">get_bits_left</name><argument_list pos:start="27:22" pos:end="27:25">(<argument pos:start="27:23" pos:end="27:24"><expr pos:start="27:23" pos:end="27:24"><name pos:start="27:23" pos:end="27:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="27:27" pos:end="27:27">&lt;</operator> <literal type="number" pos:start="27:29" pos:end="27:30">14</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:17"><block_content pos:start="29:9" pos:end="29:17">

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="33:31"><if pos:start="31:5" pos:end="33:31">if <condition pos:start="31:8" pos:end="31:23">(<expr pos:start="31:9" pos:end="31:22"><operator pos:start="31:9" pos:end="31:9">!</operator><call pos:start="31:10" pos:end="31:22"><name pos:start="31:10" pos:end="31:18">get_bits1</name><argument_list pos:start="31:19" pos:end="31:22">(<argument pos:start="31:20" pos:end="31:21"><expr pos:start="31:20" pos:end="31:21"><name pos:start="31:20" pos:end="31:21">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:31"><block_content pos:start="33:9" pos:end="33:31">

        <return pos:start="33:9" pos:end="33:31">return <expr pos:start="33:16" pos:end="33:30"><call pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:22">AVERROR</name><argument_list pos:start="33:23" pos:end="33:30">(<argument pos:start="33:24" pos:end="33:29"><expr pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:29">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>           <comment type="line" pos:start="33:43" pos:end="33:74">// WMAPro-in-WMAVoice superframe</comment>

    <if_stmt pos:start="35:5" pos:end="35:41"><if pos:start="35:5" pos:end="35:41">if <condition pos:start="35:8" pos:end="35:22">(<expr pos:start="35:9" pos:end="35:21"><call pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:17">get_bits1</name><argument_list pos:start="35:18" pos:end="35:21">(<argument pos:start="35:19" pos:end="35:20"><expr pos:start="35:19" pos:end="35:20"><name pos:start="35:19" pos:end="35:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="35:24" pos:end="35:41"><block_content pos:start="35:24" pos:end="35:41"> <expr_stmt pos:start="35:24" pos:end="35:41"><expr pos:start="35:24" pos:end="35:40"><call pos:start="35:24" pos:end="35:40"><name pos:start="35:24" pos:end="35:32">skip_bits</name><argument_list pos:start="35:33" pos:end="35:40">(<argument pos:start="35:34" pos:end="35:35"><expr pos:start="35:34" pos:end="35:35"><name pos:start="35:34" pos:end="35:35">gb</name></expr></argument>, <argument pos:start="35:38" pos:end="35:39"><expr pos:start="35:38" pos:end="35:39"><literal type="number" pos:start="35:38" pos:end="35:39">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="35:43" pos:end="35:77">// number of  samples in superframe</comment>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:29">(<expr pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:28">has_residual_lsps</name></name></expr>)</condition> <block pos:start="37:31" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:50">           <comment type="line" pos:start="37:43" pos:end="37:75">// residual LSPs (for all frames)</comment>

        <if_stmt pos:start="39:9" pos:end="41:21"><if pos:start="39:9" pos:end="41:21">if <condition pos:start="39:12" pos:end="39:54">(<expr pos:start="39:13" pos:end="39:53"><call pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:25">get_bits_left</name><argument_list pos:start="39:26" pos:end="39:29">(<argument pos:start="39:27" pos:end="39:28"><expr pos:start="39:27" pos:end="39:28"><name pos:start="39:27" pos:end="39:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="39:31" pos:end="39:31">&lt;</operator> <name pos:start="39:33" pos:end="39:53"><name pos:start="39:33" pos:end="39:33">s</name><operator pos:start="39:34" pos:end="39:35">-&gt;</operator><name pos:start="39:36" pos:end="39:53">sframe_lsp_bitsize</name></name></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:21"><block_content pos:start="41:13" pos:end="41:21">

            <return pos:start="41:13" pos:end="41:21">return <expr pos:start="41:20" pos:end="41:20"><literal type="number" pos:start="41:20" pos:end="41:20">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:50"><expr pos:start="43:9" pos:end="43:49"><call pos:start="43:9" pos:end="43:49"><name pos:start="43:9" pos:end="43:22">skip_bits_long</name><argument_list pos:start="43:23" pos:end="43:49">(<argument pos:start="43:24" pos:end="43:25"><expr pos:start="43:24" pos:end="43:25"><name pos:start="43:24" pos:end="43:25">gb</name></expr></argument>, <argument pos:start="43:28" pos:end="43:48"><expr pos:start="43:28" pos:end="43:48"><name pos:start="43:28" pos:end="43:48"><name pos:start="43:28" pos:end="43:28">s</name><operator pos:start="43:29" pos:end="43:30">-&gt;</operator><name pos:start="43:31" pos:end="43:48">sframe_lsp_bitsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:16">/* frames */</comment>

    <for pos:start="51:5" pos:end="127:5">for <control pos:start="51:9" pos:end="51:36">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">n</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:31"><expr pos:start="51:17" pos:end="51:30"><name pos:start="51:17" pos:end="51:17">n</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <name pos:start="51:21" pos:end="51:30">MAX_FRAMES</name></expr>;</condition> <incr pos:start="51:33" pos:end="51:35"><expr pos:start="51:33" pos:end="51:35"><name pos:start="51:33" pos:end="51:33">n</name><operator pos:start="51:34" pos:end="51:35">++</operator></expr></incr>)</control> <block pos:start="51:38" pos:end="127:5">{<block_content pos:start="53:9" pos:end="125:38">

        <decl_stmt pos:start="53:9" pos:end="53:30"><decl pos:start="53:9" pos:end="53:29"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:25">aw_idx_is_ext</name> <init pos:start="53:27" pos:end="53:29">= <expr pos:start="53:29" pos:end="53:29"><literal type="number" pos:start="53:29" pos:end="53:29">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:34">(<expr pos:start="57:13" pos:end="57:33"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:33"><name pos:start="57:14" pos:end="57:14">s</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:33">has_residual_lsps</name></name></expr>)</condition> <block pos:start="57:36" pos:end="63:9">{<block_content pos:start="59:12" pos:end="61:52">     <comment type="line" pos:start="57:42" pos:end="57:72">// independent LSPs (per-frame)</comment>

           <if_stmt pos:start="59:12" pos:end="59:66"><if pos:start="59:12" pos:end="59:66">if <condition pos:start="59:15" pos:end="59:56">(<expr pos:start="59:16" pos:end="59:55"><call pos:start="59:16" pos:end="59:32"><name pos:start="59:16" pos:end="59:28">get_bits_left</name><argument_list pos:start="59:29" pos:end="59:32">(<argument pos:start="59:30" pos:end="59:31"><expr pos:start="59:30" pos:end="59:31"><name pos:start="59:30" pos:end="59:31">gb</name></expr></argument>)</argument_list></call> <operator pos:start="59:34" pos:end="59:34">&lt;</operator> <name pos:start="59:36" pos:end="59:55"><name pos:start="59:36" pos:end="59:36">s</name><operator pos:start="59:37" pos:end="59:38">-&gt;</operator><name pos:start="59:39" pos:end="59:55">frame_lsp_bitsize</name></name></expr>)</condition><block type="pseudo" pos:start="59:58" pos:end="59:66"><block_content pos:start="59:58" pos:end="59:66"> <return pos:start="59:58" pos:end="59:66">return <expr pos:start="59:65" pos:end="59:65"><literal type="number" pos:start="59:65" pos:end="59:65">1</literal></expr>;</return></block_content></block></if></if_stmt>

           <expr_stmt pos:start="61:12" pos:end="61:52"><expr pos:start="61:12" pos:end="61:51"><call pos:start="61:12" pos:end="61:51"><name pos:start="61:12" pos:end="61:25">skip_bits_long</name><argument_list pos:start="61:26" pos:end="61:51">(<argument pos:start="61:27" pos:end="61:28"><expr pos:start="61:27" pos:end="61:28"><name pos:start="61:27" pos:end="61:28">gb</name></expr></argument>, <argument pos:start="61:31" pos:end="61:50"><expr pos:start="61:31" pos:end="61:50"><name pos:start="61:31" pos:end="61:50"><name pos:start="61:31" pos:end="61:31">s</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:50">frame_lsp_bitsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:71"><expr pos:start="65:9" pos:end="65:70"><name pos:start="65:9" pos:end="65:14">bd_idx</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <name pos:start="65:18" pos:end="65:70"><name pos:start="65:18" pos:end="65:18">s</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:28">vbm_tree</name><index pos:start="65:29" pos:end="65:70">[<expr pos:start="65:30" pos:end="65:69"><call pos:start="65:30" pos:end="65:69"><name pos:start="65:30" pos:end="65:37">get_vlc2</name><argument_list pos:start="65:38" pos:end="65:69">(<argument pos:start="65:39" pos:end="65:40"><expr pos:start="65:39" pos:end="65:40"><name pos:start="65:39" pos:end="65:40">gb</name></expr></argument>, <argument pos:start="65:43" pos:end="65:62"><expr pos:start="65:43" pos:end="65:62"><name pos:start="65:43" pos:end="65:62"><name pos:start="65:43" pos:end="65:56">frame_type_vlc</name><operator pos:start="65:57" pos:end="65:57">.</operator><name pos:start="65:58" pos:end="65:62">table</name></name></expr></argument>, <argument pos:start="65:65" pos:end="65:65"><expr pos:start="65:65" pos:end="65:65"><literal type="number" pos:start="65:65" pos:end="65:65">6</literal></expr></argument>, <argument pos:start="65:68" pos:end="65:68"><expr pos:start="65:68" pos:end="65:68"><literal type="number" pos:start="65:68" pos:end="65:68">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="69:39"><if pos:start="67:9" pos:end="69:39">if <condition pos:start="67:12" pos:end="67:23">(<expr pos:start="67:13" pos:end="67:22"><name pos:start="67:13" pos:end="67:18">bd_idx</name> <operator pos:start="67:20" pos:end="67:20">&lt;</operator> <literal type="number" pos:start="67:22" pos:end="67:22">0</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:39"><block_content pos:start="69:13" pos:end="69:39">

            <return pos:start="69:13" pos:end="69:39">return <expr pos:start="69:20" pos:end="69:38"><name pos:start="69:20" pos:end="69:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="69:41" pos:end="69:70">// invalid frame type VLC code</comment>

        <expr_stmt pos:start="71:9" pos:end="71:42"><expr pos:start="71:9" pos:end="71:41"><name pos:start="71:9" pos:end="71:18">frame_desc</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <operator pos:start="71:22" pos:end="71:22">&amp;</operator><name pos:start="71:23" pos:end="71:41"><name pos:start="71:23" pos:end="71:33">frame_descs</name><index pos:start="71:34" pos:end="71:41">[<expr pos:start="71:35" pos:end="71:40"><name pos:start="71:35" pos:end="71:40">bd_idx</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="81:9"><if pos:start="73:9" pos:end="81:9">if <condition pos:start="73:12" pos:end="73:56">(<expr pos:start="73:13" pos:end="73:55"><name pos:start="73:13" pos:end="73:32"><name pos:start="73:13" pos:end="73:22">frame_desc</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:32">acb_type</name></name> <operator pos:start="73:34" pos:end="73:35">==</operator> <name pos:start="73:37" pos:end="73:55">ACB_TYPE_ASYMMETRIC</name></expr>)</condition> <block pos:start="73:58" pos:end="81:9">{<block_content pos:start="75:13" pos:end="79:47">

            <if_stmt pos:start="75:13" pos:end="77:25"><if pos:start="75:13" pos:end="77:25">if <condition pos:start="75:16" pos:end="75:51">(<expr pos:start="75:17" pos:end="75:50"><call pos:start="75:17" pos:end="75:33"><name pos:start="75:17" pos:end="75:29">get_bits_left</name><argument_list pos:start="75:30" pos:end="75:33">(<argument pos:start="75:31" pos:end="75:32"><expr pos:start="75:31" pos:end="75:32"><name pos:start="75:31" pos:end="75:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="75:35" pos:end="75:35">&lt;</operator> <name pos:start="75:37" pos:end="75:50"><name pos:start="75:37" pos:end="75:37">s</name><operator pos:start="75:38" pos:end="75:39">-&gt;</operator><name pos:start="75:40" pos:end="75:50">pitch_nbits</name></name></expr>)</condition><block type="pseudo" pos:start="77:17" pos:end="77:25"><block_content pos:start="77:17" pos:end="77:25">

                <return pos:start="77:17" pos:end="77:25">return <expr pos:start="77:24" pos:end="77:24"><literal type="number" pos:start="77:24" pos:end="77:24">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:47"><expr pos:start="79:13" pos:end="79:46"><call pos:start="79:13" pos:end="79:46"><name pos:start="79:13" pos:end="79:26">skip_bits_long</name><argument_list pos:start="79:27" pos:end="79:46">(<argument pos:start="79:28" pos:end="79:29"><expr pos:start="79:28" pos:end="79:29"><name pos:start="79:28" pos:end="79:29">gb</name></expr></argument>, <argument pos:start="79:32" pos:end="79:45"><expr pos:start="79:32" pos:end="79:45"><name pos:start="79:32" pos:end="79:45"><name pos:start="79:32" pos:end="79:32">s</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:45">pitch_nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="83:9" pos:end="99:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:53">(<expr pos:start="83:13" pos:end="83:52"><name pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:22">frame_desc</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:32">fcb_type</name></name> <operator pos:start="83:34" pos:end="83:35">==</operator> <name pos:start="83:37" pos:end="83:52">FCB_TYPE_SILENCE</name></expr>)</condition> <block pos:start="83:55" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:29">

            <expr_stmt pos:start="85:13" pos:end="85:29"><expr pos:start="85:13" pos:end="85:28"><call pos:start="85:13" pos:end="85:28"><name pos:start="85:13" pos:end="85:21">skip_bits</name><argument_list pos:start="85:22" pos:end="85:28">(<argument pos:start="85:23" pos:end="85:24"><expr pos:start="85:23" pos:end="85:24"><name pos:start="85:23" pos:end="85:24">gb</name></expr></argument>, <argument pos:start="85:27" pos:end="85:27"><expr pos:start="85:27" pos:end="85:27"><literal type="number" pos:start="85:27" pos:end="85:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="87:11" pos:end="99:9">else if <condition pos:start="87:19" pos:end="87:62">(<expr pos:start="87:20" pos:end="87:61"><name pos:start="87:20" pos:end="87:39"><name pos:start="87:20" pos:end="87:29">frame_desc</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:39">fcb_type</name></name> <operator pos:start="87:41" pos:end="87:42">==</operator> <name pos:start="87:44" pos:end="87:61">FCB_TYPE_AW_PULSES</name></expr>)</condition> <block pos:start="87:64" pos:end="99:9">{<block_content pos:start="89:13" pos:end="97:13">

            <decl_stmt pos:start="89:13" pos:end="89:38"><decl pos:start="89:13" pos:end="89:37"><type pos:start="89:13" pos:end="89:15"><name pos:start="89:13" pos:end="89:15">int</name></type> <name pos:start="89:17" pos:end="89:19">tmp</name> <init pos:start="89:21" pos:end="89:37">= <expr pos:start="89:23" pos:end="89:37"><call pos:start="89:23" pos:end="89:37"><name pos:start="89:23" pos:end="89:30">get_bits</name><argument_list pos:start="89:31" pos:end="89:37">(<argument pos:start="89:32" pos:end="89:33"><expr pos:start="89:32" pos:end="89:33"><name pos:start="89:32" pos:end="89:33">gb</name></expr></argument>, <argument pos:start="89:36" pos:end="89:36"><expr pos:start="89:36" pos:end="89:36"><literal type="number" pos:start="89:36" pos:end="89:36">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="91:13" pos:end="97:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:28">(<expr pos:start="91:17" pos:end="91:27"><name pos:start="91:17" pos:end="91:19">tmp</name> <operator pos:start="91:21" pos:end="91:22">&gt;=</operator> <literal type="number" pos:start="91:24" pos:end="91:27">0x36</literal></expr>)</condition> <block pos:start="91:30" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:34">

                <expr_stmt pos:start="93:17" pos:end="93:33"><expr pos:start="93:17" pos:end="93:32"><call pos:start="93:17" pos:end="93:32"><name pos:start="93:17" pos:end="93:25">skip_bits</name><argument_list pos:start="93:26" pos:end="93:32">(<argument pos:start="93:27" pos:end="93:28"><expr pos:start="93:27" pos:end="93:28"><name pos:start="93:27" pos:end="93:28">gb</name></expr></argument>, <argument pos:start="93:31" pos:end="93:31"><expr pos:start="93:31" pos:end="93:31"><literal type="number" pos:start="93:31" pos:end="93:31">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:34"><expr pos:start="95:17" pos:end="95:33"><name pos:start="95:17" pos:end="95:29">aw_idx_is_ext</name> <operator pos:start="95:31" pos:end="95:31">=</operator> <literal type="number" pos:start="95:33" pos:end="95:33">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="103:9" pos:end="103:20">/* blocks */</comment>

        <if_stmt pos:start="105:9" pos:end="117:26"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:53">(<expr pos:start="105:13" pos:end="105:52"><name pos:start="105:13" pos:end="105:32"><name pos:start="105:13" pos:end="105:22">frame_desc</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:32">acb_type</name></name> <operator pos:start="105:34" pos:end="105:35">==</operator> <name pos:start="105:37" pos:end="105:52">ACB_TYPE_HAMMING</name></expr>)</condition> <block pos:start="105:55" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:72">

            <expr_stmt pos:start="107:13" pos:end="109:72"><expr pos:start="107:13" pos:end="109:71"><name pos:start="107:13" pos:end="107:21">need_bits</name> <operator pos:start="107:23" pos:end="107:23">=</operator> <name pos:start="107:25" pos:end="107:44"><name pos:start="107:25" pos:end="107:25">s</name><operator pos:start="107:26" pos:end="107:27">-&gt;</operator><name pos:start="107:28" pos:end="107:44">block_pitch_nbits</name></name> <operator pos:start="107:46" pos:end="107:46">+</operator>

                <operator pos:start="109:17" pos:end="109:17">(</operator><name pos:start="109:18" pos:end="109:37"><name pos:start="109:18" pos:end="109:27">frame_desc</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:37">n_blocks</name></name> <operator pos:start="109:39" pos:end="109:39">-</operator> <literal type="number" pos:start="109:41" pos:end="109:41">1</literal><operator pos:start="109:42" pos:end="109:42">)</operator> <operator pos:start="109:44" pos:end="109:44">*</operator> <name pos:start="109:46" pos:end="109:71"><name pos:start="109:46" pos:end="109:46">s</name><operator pos:start="109:47" pos:end="109:48">-&gt;</operator><name pos:start="109:49" pos:end="109:71">block_delta_pitch_nbits</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="111:11" pos:end="115:9">else if <condition pos:start="111:19" pos:end="111:62">(<expr pos:start="111:20" pos:end="111:61"><name pos:start="111:20" pos:end="111:39"><name pos:start="111:20" pos:end="111:29">frame_desc</name><operator pos:start="111:30" pos:end="111:31">-&gt;</operator><name pos:start="111:32" pos:end="111:39">fcb_type</name></name> <operator pos:start="111:41" pos:end="111:42">==</operator> <name pos:start="111:44" pos:end="111:61">FCB_TYPE_AW_PULSES</name></expr>)</condition> <block pos:start="111:64" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:43">

            <expr_stmt pos:start="113:13" pos:end="113:43"><expr pos:start="113:13" pos:end="113:42"><name pos:start="113:13" pos:end="113:21">need_bits</name> <operator pos:start="113:23" pos:end="113:23">=</operator> <literal type="number" pos:start="113:25" pos:end="113:25">2</literal> <operator pos:start="113:27" pos:end="113:27">*</operator> <operator pos:start="113:29" pos:end="113:29">!</operator><name pos:start="113:30" pos:end="113:42">aw_idx_is_ext</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="115:11" pos:end="117:26">else<block type="pseudo" pos:start="117:13" pos:end="117:26"><block_content pos:start="117:13" pos:end="117:26">

            <expr_stmt pos:start="117:13" pos:end="117:26"><expr pos:start="117:13" pos:end="117:25"><name pos:start="117:13" pos:end="117:21">need_bits</name> <operator pos:start="117:23" pos:end="117:23">=</operator> <literal type="number" pos:start="117:25" pos:end="117:25">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:44"><expr pos:start="119:9" pos:end="119:43"><name pos:start="119:9" pos:end="119:17">need_bits</name> <operator pos:start="119:19" pos:end="119:20">+=</operator> <name pos:start="119:22" pos:end="119:43"><name pos:start="119:22" pos:end="119:31">frame_desc</name><operator pos:start="119:32" pos:end="119:33">-&gt;</operator><name pos:start="119:34" pos:end="119:43">frame_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="123:21"><if pos:start="121:9" pos:end="123:21">if <condition pos:start="121:12" pos:end="121:42">(<expr pos:start="121:13" pos:end="121:41"><call pos:start="121:13" pos:end="121:29"><name pos:start="121:13" pos:end="121:25">get_bits_left</name><argument_list pos:start="121:26" pos:end="121:29">(<argument pos:start="121:27" pos:end="121:28"><expr pos:start="121:27" pos:end="121:28"><name pos:start="121:27" pos:end="121:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="121:31" pos:end="121:31">&lt;</operator> <name pos:start="121:33" pos:end="121:41">need_bits</name></expr>)</condition><block type="pseudo" pos:start="123:13" pos:end="123:21"><block_content pos:start="123:13" pos:end="123:21">

            <return pos:start="123:13" pos:end="123:21">return <expr pos:start="123:20" pos:end="123:20"><literal type="number" pos:start="123:20" pos:end="123:20">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:38"><expr pos:start="125:9" pos:end="125:37"><call pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:22">skip_bits_long</name><argument_list pos:start="125:23" pos:end="125:37">(<argument pos:start="125:24" pos:end="125:25"><expr pos:start="125:24" pos:end="125:25"><name pos:start="125:24" pos:end="125:25">gb</name></expr></argument>, <argument pos:start="125:28" pos:end="125:36"><expr pos:start="125:28" pos:end="125:36"><name pos:start="125:28" pos:end="125:36">need_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="131:5" pos:end="131:13">return <expr pos:start="131:12" pos:end="131:12"><literal type="number" pos:start="131:12" pos:end="131:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
