<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12469.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">float64</name></type> <name pos:start="1:16" pos:end="1:34">roundAndPackFloat64</name><parameter_list pos:start="1:35" pos:end="1:85">( <parameter pos:start="1:37" pos:end="1:46"><decl pos:start="1:37" pos:end="1:46"><type pos:start="1:37" pos:end="1:46"><name pos:start="1:37" pos:end="1:40">flag</name></type> <name pos:start="1:42" pos:end="1:46">zSign</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:53">int16</name></type> <name pos:start="1:55" pos:end="1:58">zExp</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:84"><decl pos:start="1:61" pos:end="1:84"><type pos:start="1:61" pos:end="1:84"><name pos:start="1:61" pos:end="1:66">bits64</name> <name pos:start="1:68" pos:end="1:71">zSig</name></type> <name pos:start="1:73" pos:end="1:84">STATUS_PARAM</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="97:44">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">int8</name></type> <name pos:start="5:10" pos:end="5:21">roundingMode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">flag</name></type> <name pos:start="7:10" pos:end="7:25">roundNearestEven</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:9">int16</name></type> <name pos:start="9:11" pos:end="9:24">roundIncrement</name></decl>, <decl pos:start="9:27" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:9"/><name pos:start="9:27" pos:end="9:35">roundBits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">flag</name></type> <name pos:start="11:10" pos:end="11:15">isTiny</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:47"><expr pos:start="15:5" pos:end="15:46"><name pos:start="15:5" pos:end="15:16">roundingMode</name> <operator pos:start="15:18" pos:end="15:18">=</operator> <call pos:start="15:20" pos:end="15:46"><name pos:start="15:20" pos:end="15:25">STATUS</name><argument_list pos:start="15:26" pos:end="15:46">(<argument pos:start="15:27" pos:end="15:45"><expr pos:start="15:27" pos:end="15:45"><name pos:start="15:27" pos:end="15:45">float_rounding_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:68"><expr pos:start="17:5" pos:end="17:67"><name pos:start="17:5" pos:end="17:20">roundNearestEven</name> <operator pos:start="17:22" pos:end="17:22">=</operator> <operator pos:start="17:24" pos:end="17:24">(</operator> <name pos:start="17:26" pos:end="17:37">roundingMode</name> <operator pos:start="17:39" pos:end="17:40">==</operator> <name pos:start="17:42" pos:end="17:65">float_round_nearest_even</name> <operator pos:start="17:67" pos:end="17:67">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:27"><expr pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:18">roundIncrement</name> <operator pos:start="19:20" pos:end="19:20">=</operator> <literal type="number" pos:start="19:22" pos:end="19:26">0x200</literal></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="47:5"><if pos:start="21:5" pos:end="47:5">if <condition pos:start="21:8" pos:end="21:29">( <expr pos:start="21:10" pos:end="21:27"><operator pos:start="21:10" pos:end="21:10">!</operator> <name pos:start="21:12" pos:end="21:27">roundNearestEven</name></expr> )</condition> <block pos:start="21:31" pos:end="47:5">{<block_content pos:start="23:9" pos:end="45:9">

        <if_stmt pos:start="23:9" pos:end="45:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:50">( <expr pos:start="23:14" pos:end="23:48"><name pos:start="23:14" pos:end="23:25">roundingMode</name> <operator pos:start="23:27" pos:end="23:28">==</operator> <name pos:start="23:30" pos:end="23:48">float_round_to_zero</name></expr> )</condition> <block pos:start="23:52" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:31">

            <expr_stmt pos:start="25:13" pos:end="25:31"><expr pos:start="25:13" pos:end="25:30"><name pos:start="25:13" pos:end="25:26">roundIncrement</name> <operator pos:start="25:28" pos:end="25:28">=</operator> <literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="29:9" pos:end="45:9">else <block pos:start="29:14" pos:end="45:9">{<block_content pos:start="31:13" pos:end="43:13">

            <expr_stmt pos:start="31:13" pos:end="31:35"><expr pos:start="31:13" pos:end="31:34"><name pos:start="31:13" pos:end="31:26">roundIncrement</name> <operator pos:start="31:28" pos:end="31:28">=</operator> <literal type="number" pos:start="31:30" pos:end="31:34">0x3FF</literal></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="43:13"><if pos:start="33:13" pos:end="37:13">if <condition pos:start="33:16" pos:end="33:24">( <expr pos:start="33:18" pos:end="33:22"><name pos:start="33:18" pos:end="33:22">zSign</name></expr> )</condition> <block pos:start="33:26" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:73">

                <if_stmt pos:start="35:17" pos:end="35:73"><if pos:start="35:17" pos:end="35:73">if <condition pos:start="35:20" pos:end="35:53">( <expr pos:start="35:22" pos:end="35:51"><name pos:start="35:22" pos:end="35:33">roundingMode</name> <operator pos:start="35:35" pos:end="35:36">==</operator> <name pos:start="35:38" pos:end="35:51">float_round_up</name></expr> )</condition><block type="pseudo" pos:start="35:55" pos:end="35:73"><block_content pos:start="35:55" pos:end="35:73"> <expr_stmt pos:start="35:55" pos:end="35:73"><expr pos:start="35:55" pos:end="35:72"><name pos:start="35:55" pos:end="35:68">roundIncrement</name> <operator pos:start="35:70" pos:end="35:70">=</operator> <literal type="number" pos:start="35:72" pos:end="35:72">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if>

            <else pos:start="39:13" pos:end="43:13">else <block pos:start="39:18" pos:end="43:13">{<block_content pos:start="41:17" pos:end="41:75">

                <if_stmt pos:start="41:17" pos:end="41:75"><if pos:start="41:17" pos:end="41:75">if <condition pos:start="41:20" pos:end="41:55">( <expr pos:start="41:22" pos:end="41:53"><name pos:start="41:22" pos:end="41:33">roundingMode</name> <operator pos:start="41:35" pos:end="41:36">==</operator> <name pos:start="41:38" pos:end="41:53">float_round_down</name></expr> )</condition><block type="pseudo" pos:start="41:57" pos:end="41:75"><block_content pos:start="41:57" pos:end="41:75"> <expr_stmt pos:start="41:57" pos:end="41:75"><expr pos:start="41:57" pos:end="41:74"><name pos:start="41:57" pos:end="41:70">roundIncrement</name> <operator pos:start="41:72" pos:end="41:72">=</operator> <literal type="number" pos:start="41:74" pos:end="41:74">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:29"><expr pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:13">roundBits</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <name pos:start="49:17" pos:end="49:20">zSig</name> <operator pos:start="49:22" pos:end="49:22">&amp;</operator> <literal type="number" pos:start="49:24" pos:end="49:28">0x3FF</literal></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="87:5"><if pos:start="51:5" pos:end="87:5">if <condition pos:start="51:8" pos:end="51:33">( <expr pos:start="51:10" pos:end="51:31"><literal type="number" pos:start="51:10" pos:end="51:14">0x7FD</literal> <operator pos:start="51:16" pos:end="51:17">&lt;=</operator> <operator pos:start="51:19" pos:end="51:19">(</operator><name pos:start="51:20" pos:end="51:25">bits16</name><operator pos:start="51:26" pos:end="51:26">)</operator> <name pos:start="51:28" pos:end="51:31">zExp</name></expr> )</condition> <block pos:start="51:35" pos:end="87:5">{<block_content pos:start="53:9" pos:end="85:9">

        <if_stmt pos:start="53:9" pos:end="65:9"><if pos:start="53:9" pos:end="65:9">if <condition pos:start="53:12" pos:end="59:12">(    <expr pos:start="53:17" pos:end="57:66"><operator pos:start="53:17" pos:end="53:17">(</operator> <literal type="number" pos:start="53:19" pos:end="53:23">0x7FD</literal> <operator pos:start="53:25" pos:end="53:25">&lt;</operator> <name pos:start="53:27" pos:end="53:30">zExp</name> <operator pos:start="53:32" pos:end="53:32">)</operator>

             <operator pos:start="55:14" pos:end="55:15">||</operator> <operator pos:start="55:17" pos:end="55:17">(</operator>    <operator pos:start="55:22" pos:end="55:22">(</operator> <name pos:start="55:24" pos:end="55:27">zExp</name> <operator pos:start="55:29" pos:end="55:30">==</operator> <literal type="number" pos:start="55:32" pos:end="55:36">0x7FD</literal> <operator pos:start="55:38" pos:end="55:38">)</operator>

                  <operator pos:start="57:19" pos:end="57:20">&amp;&amp;</operator> <operator pos:start="57:22" pos:end="57:22">(</operator> <operator pos:start="57:24" pos:end="57:24">(</operator><name pos:start="57:25" pos:end="57:31">sbits64</name><operator pos:start="57:32" pos:end="57:32">)</operator> <operator pos:start="57:34" pos:end="57:34">(</operator> <name pos:start="57:36" pos:end="57:39">zSig</name> <operator pos:start="57:41" pos:end="57:41">+</operator> <name pos:start="57:43" pos:end="57:56">roundIncrement</name> <operator pos:start="57:58" pos:end="57:58">)</operator> <operator pos:start="57:60" pos:end="57:60">&lt;</operator> <literal type="number" pos:start="57:62" pos:end="57:62">0</literal> <operator pos:start="57:64" pos:end="57:64">)</operator> <operator pos:start="57:66" pos:end="57:66">)</operator></expr>

           )</condition> <block pos:start="59:14" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:76">

            <macro pos:start="61:13" pos:end="61:77"><name pos:start="61:13" pos:end="61:23">float_raise</name><argument_list pos:start="61:24" pos:end="61:77">( <argument pos:start="61:26" pos:end="61:76">float_flag_overflow | float_flag_inexact STATUS_VAR</argument>)</argument_list></macro><empty_stmt pos:start="61:78" pos:end="61:78">;</empty_stmt>

            <return pos:start="63:13" pos:end="63:76">return <expr pos:start="63:20" pos:end="63:75"><call pos:start="63:20" pos:end="63:49"><name pos:start="63:20" pos:end="63:30">packFloat64</name><argument_list pos:start="63:31" pos:end="63:49">( <argument pos:start="63:33" pos:end="63:37"><expr pos:start="63:33" pos:end="63:37"><name pos:start="63:33" pos:end="63:37">zSign</name></expr></argument>, <argument pos:start="63:40" pos:end="63:44"><expr pos:start="63:40" pos:end="63:44"><literal type="number" pos:start="63:40" pos:end="63:44">0x7FF</literal></expr></argument>, <argument pos:start="63:47" pos:end="63:47"><expr pos:start="63:47" pos:end="63:47"><literal type="number" pos:start="63:47" pos:end="63:47">0</literal></expr></argument> )</argument_list></call> <operator pos:start="63:51" pos:end="63:51">-</operator> <operator pos:start="63:53" pos:end="63:53">(</operator> <name pos:start="63:55" pos:end="63:68">roundIncrement</name> <operator pos:start="63:70" pos:end="63:71">==</operator> <literal type="number" pos:start="63:73" pos:end="63:73">0</literal> <operator pos:start="63:75" pos:end="63:75">)</operator></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="85:9"><if pos:start="67:9" pos:end="85:9">if <condition pos:start="67:12" pos:end="67:23">( <expr pos:start="67:14" pos:end="67:21"><name pos:start="67:14" pos:end="67:17">zExp</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <literal type="number" pos:start="67:21" pos:end="67:21">0</literal></expr> )</condition> <block pos:start="67:25" pos:end="85:9">{<block_content pos:start="69:13" pos:end="83:85">

            <expr_stmt pos:start="69:13" pos:end="75:75"><expr pos:start="69:13" pos:end="75:74"><name pos:start="69:13" pos:end="69:18">isTiny</name> <operator pos:start="69:20" pos:end="69:20">=</operator>

                   <operator pos:start="71:20" pos:end="71:20">(</operator> <call pos:start="71:22" pos:end="71:50"><name pos:start="71:22" pos:end="71:27">STATUS</name><argument_list pos:start="71:28" pos:end="71:50">(<argument pos:start="71:29" pos:end="71:49"><expr pos:start="71:29" pos:end="71:49"><name pos:start="71:29" pos:end="71:49">float_detect_tininess</name></expr></argument>)</argument_list></call> <operator pos:start="71:52" pos:end="71:53">==</operator> <name pos:start="71:55" pos:end="71:84">float_tininess_before_rounding</name> <operator pos:start="71:86" pos:end="71:86">)</operator>

                <operator pos:start="73:17" pos:end="73:18">||</operator> <operator pos:start="73:20" pos:end="73:20">(</operator> <name pos:start="73:22" pos:end="73:25">zExp</name> <operator pos:start="73:27" pos:end="73:27">&lt;</operator> <operator pos:start="73:29" pos:end="73:29">-</operator><literal type="number" pos:start="73:30" pos:end="73:30">1</literal> <operator pos:start="73:32" pos:end="73:32">)</operator>

                <operator pos:start="75:17" pos:end="75:18">||</operator> <operator pos:start="75:20" pos:end="75:20">(</operator> <name pos:start="75:22" pos:end="75:25">zSig</name> <operator pos:start="75:27" pos:end="75:27">+</operator> <name pos:start="75:29" pos:end="75:42">roundIncrement</name> <operator pos:start="75:44" pos:end="75:44">&lt;</operator> <call pos:start="75:46" pos:end="75:72"><name pos:start="75:46" pos:end="75:50">LIT64</name><argument_list pos:start="75:51" pos:end="75:72">( <argument pos:start="75:53" pos:end="75:70"><expr pos:start="75:53" pos:end="75:70"><literal type="number" pos:start="75:53" pos:end="75:70">0x8000000000000000</literal></expr></argument> )</argument_list></call> <operator pos:start="75:74" pos:end="75:74">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:55"><expr pos:start="77:13" pos:end="77:54"><call pos:start="77:13" pos:end="77:54"><name pos:start="77:13" pos:end="77:31">shift64RightJamming</name><argument_list pos:start="77:32" pos:end="77:54">( <argument pos:start="77:34" pos:end="77:37"><expr pos:start="77:34" pos:end="77:37"><name pos:start="77:34" pos:end="77:37">zSig</name></expr></argument>, <argument pos:start="77:40" pos:end="77:45"><expr pos:start="77:40" pos:end="77:45"><operator pos:start="77:40" pos:end="77:40">-</operator> <name pos:start="77:42" pos:end="77:45">zExp</name></expr></argument>, <argument pos:start="77:48" pos:end="77:52"><expr pos:start="77:48" pos:end="77:52"><operator pos:start="77:48" pos:end="77:48">&amp;</operator><name pos:start="77:49" pos:end="77:52">zSig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:21"><expr pos:start="79:13" pos:end="79:20"><name pos:start="79:13" pos:end="79:16">zExp</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <literal type="number" pos:start="79:20" pos:end="79:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:37"><expr pos:start="81:13" pos:end="81:36"><name pos:start="81:13" pos:end="81:21">roundBits</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <name pos:start="81:25" pos:end="81:28">zSig</name> <operator pos:start="81:30" pos:end="81:30">&amp;</operator> <literal type="number" pos:start="81:32" pos:end="81:36">0x3FF</literal></expr>;</expr_stmt>

            <if_stmt pos:start="83:13" pos:end="83:85"><if pos:start="83:13" pos:end="83:85">if <condition pos:start="83:16" pos:end="83:38">( <expr pos:start="83:18" pos:end="83:36"><name pos:start="83:18" pos:end="83:23">isTiny</name> <operator pos:start="83:25" pos:end="83:26">&amp;&amp;</operator> <name pos:start="83:28" pos:end="83:36">roundBits</name></expr> )</condition><block type="pseudo" pos:start="83:40" pos:end="83:85"><block_content pos:start="83:40" pos:end="83:85"> <macro pos:start="83:40" pos:end="83:84"><name pos:start="83:40" pos:end="83:50">float_raise</name><argument_list pos:start="83:51" pos:end="83:84">( <argument pos:start="83:53" pos:end="83:83">float_flag_underflow STATUS_VAR</argument>)</argument_list></macro><empty_stmt pos:start="83:85" pos:end="83:85">;</empty_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="89:5" pos:end="89:73"><if pos:start="89:5" pos:end="89:73">if <condition pos:start="89:8" pos:end="89:20">( <expr pos:start="89:10" pos:end="89:18"><name pos:start="89:10" pos:end="89:18">roundBits</name></expr> )</condition><block type="pseudo" pos:start="89:22" pos:end="89:73"><block_content pos:start="89:22" pos:end="89:73"> <expr_stmt pos:start="89:22" pos:end="89:73"><expr pos:start="89:22" pos:end="89:72"><call pos:start="89:22" pos:end="89:50"><name pos:start="89:22" pos:end="89:27">STATUS</name><argument_list pos:start="89:28" pos:end="89:50">(<argument pos:start="89:29" pos:end="89:49"><expr pos:start="89:29" pos:end="89:49"><name pos:start="89:29" pos:end="89:49">float_exception_flags</name></expr></argument>)</argument_list></call> <operator pos:start="89:52" pos:end="89:53">|=</operator> <name pos:start="89:55" pos:end="89:72">float_flag_inexact</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:41"><expr pos:start="91:5" pos:end="91:40"><name pos:start="91:5" pos:end="91:8">zSig</name> <operator pos:start="91:10" pos:end="91:10">=</operator> <operator pos:start="91:12" pos:end="91:12">(</operator> <name pos:start="91:14" pos:end="91:17">zSig</name> <operator pos:start="91:19" pos:end="91:19">+</operator> <name pos:start="91:21" pos:end="91:34">roundIncrement</name> <operator pos:start="91:36" pos:end="91:36">)</operator><operator pos:start="91:37" pos:end="91:38">&gt;&gt;</operator><literal type="number" pos:start="91:39" pos:end="91:40">10</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:68"><expr pos:start="93:5" pos:end="93:67"><name pos:start="93:5" pos:end="93:8">zSig</name> <operator pos:start="93:10" pos:end="93:11">&amp;=</operator> <operator pos:start="93:13" pos:end="93:13">~</operator> <operator pos:start="93:15" pos:end="93:15">(</operator> <operator pos:start="93:17" pos:end="93:17">(</operator> <operator pos:start="93:19" pos:end="93:19">(</operator> <name pos:start="93:21" pos:end="93:29">roundBits</name> <operator pos:start="93:31" pos:end="93:31">^</operator> <literal type="number" pos:start="93:33" pos:end="93:37">0x200</literal> <operator pos:start="93:39" pos:end="93:39">)</operator> <operator pos:start="93:41" pos:end="93:42">==</operator> <literal type="number" pos:start="93:44" pos:end="93:44">0</literal> <operator pos:start="93:46" pos:end="93:46">)</operator> <operator pos:start="93:48" pos:end="93:48">&amp;</operator> <name pos:start="93:50" pos:end="93:65">roundNearestEven</name> <operator pos:start="93:67" pos:end="93:67">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="95:30"><if pos:start="95:5" pos:end="95:30">if <condition pos:start="95:8" pos:end="95:20">( <expr pos:start="95:10" pos:end="95:18"><name pos:start="95:10" pos:end="95:13">zSig</name> <operator pos:start="95:15" pos:end="95:16">==</operator> <literal type="number" pos:start="95:18" pos:end="95:18">0</literal></expr> )</condition><block type="pseudo" pos:start="95:22" pos:end="95:30"><block_content pos:start="95:22" pos:end="95:30"> <expr_stmt pos:start="95:22" pos:end="95:30"><expr pos:start="95:22" pos:end="95:29"><name pos:start="95:22" pos:end="95:25">zExp</name> <operator pos:start="95:27" pos:end="95:27">=</operator> <literal type="number" pos:start="95:29" pos:end="95:29">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="97:5" pos:end="97:44">return <expr pos:start="97:12" pos:end="97:43"><call pos:start="97:12" pos:end="97:43"><name pos:start="97:12" pos:end="97:22">packFloat64</name><argument_list pos:start="97:23" pos:end="97:43">( <argument pos:start="97:25" pos:end="97:29"><expr pos:start="97:25" pos:end="97:29"><name pos:start="97:25" pos:end="97:29">zSign</name></expr></argument>, <argument pos:start="97:32" pos:end="97:35"><expr pos:start="97:32" pos:end="97:35"><name pos:start="97:32" pos:end="97:35">zExp</name></expr></argument>, <argument pos:start="97:38" pos:end="97:41"><expr pos:start="97:38" pos:end="97:41"><name pos:start="97:38" pos:end="97:41">zSig</name></expr></argument> )</argument_list></call></expr>;</return>



</block_content>}</block></function>
</unit>
