<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7101.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:28">pci_bridge_write_config</name><parameter_list pos:start="1:29" pos:end="3:69">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:38">PCIDevice</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">d</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:45"><decl pos:start="3:30" pos:end="3:45"><type pos:start="3:30" pos:end="3:45"><name pos:start="3:30" pos:end="3:37">uint32_t</name></type> <name pos:start="3:39" pos:end="3:45">address</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:59"><decl pos:start="3:48" pos:end="3:59"><type pos:start="3:48" pos:end="3:59"><name pos:start="3:48" pos:end="3:55">uint32_t</name></type> <name pos:start="3:57" pos:end="3:59">val</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:68"><decl pos:start="3:62" pos:end="3:68"><type pos:start="3:62" pos:end="3:68"><name pos:start="3:62" pos:end="3:64">int</name></type> <name pos:start="3:66" pos:end="3:68">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="57:1">{<block_content pos:start="7:5" pos:end="55:5">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">PCIBridge</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">s</name> <init pos:start="7:18" pos:end="7:32">= <expr pos:start="7:20" pos:end="7:32"><call pos:start="7:20" pos:end="7:32"><name pos:start="7:20" pos:end="7:29">PCI_BRIDGE</name><argument_list pos:start="7:30" pos:end="7:32">(<argument pos:start="7:31" pos:end="7:31"><expr pos:start="7:31" pos:end="7:31"><name pos:start="7:31" pos:end="7:31">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:67"><decl pos:start="9:5" pos:end="9:66"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:19">oldctl</name> <init pos:start="9:21" pos:end="9:66">= <expr pos:start="9:23" pos:end="9:66"><call pos:start="9:23" pos:end="9:66"><name pos:start="9:23" pos:end="9:34">pci_get_word</name><argument_list pos:start="9:35" pos:end="9:66">(<argument pos:start="9:36" pos:end="9:65"><expr pos:start="9:36" pos:end="9:65"><name pos:start="9:36" pos:end="9:44"><name pos:start="9:36" pos:end="9:36">d</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:44">config</name></name> <operator pos:start="9:46" pos:end="9:46">+</operator> <name pos:start="9:48" pos:end="9:65">PCI_BRIDGE_CONTROL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:19">newctl</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:51"><expr pos:start="15:5" pos:end="15:50"><call pos:start="15:5" pos:end="15:50"><name pos:start="15:5" pos:end="15:28">pci_default_write_config</name><argument_list pos:start="15:29" pos:end="15:50">(<argument pos:start="15:30" pos:end="15:30"><expr pos:start="15:30" pos:end="15:30"><name pos:start="15:30" pos:end="15:30">d</name></expr></argument>, <argument pos:start="15:33" pos:end="15:39"><expr pos:start="15:33" pos:end="15:39"><name pos:start="15:33" pos:end="15:39">address</name></expr></argument>, <argument pos:start="15:42" pos:end="15:44"><expr pos:start="15:42" pos:end="15:44"><name pos:start="15:42" pos:end="15:44">val</name></expr></argument>, <argument pos:start="15:47" pos:end="15:49"><expr pos:start="15:47" pos:end="15:49"><name pos:start="15:47" pos:end="15:49">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="43:5"><if pos:start="19:5" pos:end="43:5">if <condition pos:start="19:8" pos:end="39:60">(<expr pos:start="19:9" pos:end="39:59"><call pos:start="19:9" pos:end="19:52"><name pos:start="19:9" pos:end="19:22">ranges_overlap</name><argument_list pos:start="19:23" pos:end="19:52">(<argument pos:start="19:24" pos:end="19:30"><expr pos:start="19:24" pos:end="19:30"><name pos:start="19:24" pos:end="19:30">address</name></expr></argument>, <argument pos:start="19:33" pos:end="19:35"><expr pos:start="19:33" pos:end="19:35"><name pos:start="19:33" pos:end="19:35">len</name></expr></argument>, <argument pos:start="19:38" pos:end="19:48"><expr pos:start="19:38" pos:end="19:48"><name pos:start="19:38" pos:end="19:48">PCI_COMMAND</name></expr></argument>, <argument pos:start="19:51" pos:end="19:51"><expr pos:start="19:51" pos:end="19:51"><literal type="number" pos:start="19:51" pos:end="19:51">2</literal></expr></argument>)</argument_list></call> <operator pos:start="19:54" pos:end="19:55">||</operator>



        <comment type="block" pos:start="23:9" pos:end="23:27">/* io base/limit */</comment>

        <call pos:start="25:9" pos:end="25:52"><name pos:start="25:9" pos:end="25:22">ranges_overlap</name><argument_list pos:start="25:23" pos:end="25:52">(<argument pos:start="25:24" pos:end="25:30"><expr pos:start="25:24" pos:end="25:30"><name pos:start="25:24" pos:end="25:30">address</name></expr></argument>, <argument pos:start="25:33" pos:end="25:35"><expr pos:start="25:33" pos:end="25:35"><name pos:start="25:33" pos:end="25:35">len</name></expr></argument>, <argument pos:start="25:38" pos:end="25:48"><expr pos:start="25:38" pos:end="25:48"><name pos:start="25:38" pos:end="25:48">PCI_IO_BASE</name></expr></argument>, <argument pos:start="25:51" pos:end="25:51"><expr pos:start="25:51" pos:end="25:51"><literal type="number" pos:start="25:51" pos:end="25:51">2</literal></expr></argument>)</argument_list></call> <operator pos:start="25:54" pos:end="25:55">||</operator>



        <comment type="block" pos:start="29:9" pos:end="31:36">/* memory base/limit, prefetchable base/limit and

           io base/limit upper 16 */</comment>

        <call pos:start="33:9" pos:end="33:57"><name pos:start="33:9" pos:end="33:22">ranges_overlap</name><argument_list pos:start="33:23" pos:end="33:57">(<argument pos:start="33:24" pos:end="33:30"><expr pos:start="33:24" pos:end="33:30"><name pos:start="33:24" pos:end="33:30">address</name></expr></argument>, <argument pos:start="33:33" pos:end="33:35"><expr pos:start="33:33" pos:end="33:35"><name pos:start="33:33" pos:end="33:35">len</name></expr></argument>, <argument pos:start="33:38" pos:end="33:52"><expr pos:start="33:38" pos:end="33:52"><name pos:start="33:38" pos:end="33:52">PCI_MEMORY_BASE</name></expr></argument>, <argument pos:start="33:55" pos:end="33:56"><expr pos:start="33:55" pos:end="33:56"><literal type="number" pos:start="33:55" pos:end="33:56">20</literal></expr></argument>)</argument_list></call> <operator pos:start="33:59" pos:end="33:60">||</operator>



        <comment type="block" pos:start="37:9" pos:end="37:24">/* vga enable */</comment>

        <call pos:start="39:9" pos:end="39:59"><name pos:start="39:9" pos:end="39:22">ranges_overlap</name><argument_list pos:start="39:23" pos:end="39:59">(<argument pos:start="39:24" pos:end="39:30"><expr pos:start="39:24" pos:end="39:30"><name pos:start="39:24" pos:end="39:30">address</name></expr></argument>, <argument pos:start="39:33" pos:end="39:35"><expr pos:start="39:33" pos:end="39:35"><name pos:start="39:33" pos:end="39:35">len</name></expr></argument>, <argument pos:start="39:38" pos:end="39:55"><expr pos:start="39:38" pos:end="39:55"><name pos:start="39:38" pos:end="39:55">PCI_BRIDGE_CONTROL</name></expr></argument>, <argument pos:start="39:58" pos:end="39:58"><expr pos:start="39:58" pos:end="39:58"><literal type="number" pos:start="39:58" pos:end="39:58">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:62" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:38">

        <expr_stmt pos:start="41:9" pos:end="41:38"><expr pos:start="41:9" pos:end="41:37"><call pos:start="41:9" pos:end="41:37"><name pos:start="41:9" pos:end="41:34">pci_bridge_update_mappings</name><argument_list pos:start="41:35" pos:end="41:37">(<argument pos:start="41:36" pos:end="41:36"><expr pos:start="41:36" pos:end="41:36"><name pos:start="41:36" pos:end="41:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:58"><expr pos:start="47:5" pos:end="47:57"><name pos:start="47:5" pos:end="47:10">newctl</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <call pos:start="47:14" pos:end="47:57"><name pos:start="47:14" pos:end="47:25">pci_get_word</name><argument_list pos:start="47:26" pos:end="47:57">(<argument pos:start="47:27" pos:end="47:56"><expr pos:start="47:27" pos:end="47:56"><name pos:start="47:27" pos:end="47:35"><name pos:start="47:27" pos:end="47:27">d</name><operator pos:start="47:28" pos:end="47:29">-&gt;</operator><name pos:start="47:30" pos:end="47:35">config</name></name> <operator pos:start="47:37" pos:end="47:37">+</operator> <name pos:start="47:39" pos:end="47:56">PCI_BRIDGE_CONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:52">(<expr pos:start="49:9" pos:end="49:51"><operator pos:start="49:9" pos:end="49:9">~</operator><name pos:start="49:10" pos:end="49:15">oldctl</name> <operator pos:start="49:17" pos:end="49:17">&amp;</operator> <name pos:start="49:19" pos:end="49:24">newctl</name> <operator pos:start="49:26" pos:end="49:26">&amp;</operator> <name pos:start="49:28" pos:end="49:51">PCI_BRIDGE_CTL_BUS_RESET</name></expr>)</condition> <block pos:start="49:54" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:35">

        <comment type="block" pos:start="51:9" pos:end="51:51">/* Trigger hot reset on 0-&gt;1 transition. */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:35"><expr pos:start="53:9" pos:end="53:34"><call pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:21">pci_bus_reset</name><argument_list pos:start="53:22" pos:end="53:34">(<argument pos:start="53:23" pos:end="53:33"><expr pos:start="53:23" pos:end="53:33"><operator pos:start="53:23" pos:end="53:23">&amp;</operator><name pos:start="53:24" pos:end="53:33"><name pos:start="53:24" pos:end="53:24">s</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:33">sec_bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
