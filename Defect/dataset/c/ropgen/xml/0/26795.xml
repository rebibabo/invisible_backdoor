<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26795.c" pos:tabs="8"><function pos:start="1:1" pos:end="409:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:13">bdrv_open</name><parameter_list pos:start="1:14" pos:end="5:45">(<parameter pos:start="1:15" pos:end="1:36"><decl pos:start="1:15" pos:end="1:36"><type pos:start="1:15" pos:end="1:36"><name pos:start="1:15" pos:end="1:30">BlockDriverState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier><modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">pbs</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:58"><decl pos:start="1:39" pos:end="1:58"><type pos:start="1:39" pos:end="1:58"><specifier pos:start="1:39" pos:end="1:43">const</specifier> <name pos:start="1:45" pos:end="1:48">char</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:58">filename</name></decl></parameter>,

              <parameter pos:start="3:15" pos:end="3:35"><decl pos:start="3:15" pos:end="3:35"><type pos:start="3:15" pos:end="3:35"><specifier pos:start="3:15" pos:end="3:19">const</specifier> <name pos:start="3:21" pos:end="3:24">char</name> <modifier pos:start="3:26" pos:end="3:26">*</modifier></type><name pos:start="3:27" pos:end="3:35">reference</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:51"><decl pos:start="3:38" pos:end="3:51"><type pos:start="3:38" pos:end="3:51"><name pos:start="3:38" pos:end="3:42">QDict</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:51">options</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:62"><decl pos:start="3:54" pos:end="3:62"><type pos:start="3:54" pos:end="3:62"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:62">flags</name></decl></parameter>,

              <parameter pos:start="5:15" pos:end="5:30"><decl pos:start="5:15" pos:end="5:30"><type pos:start="5:15" pos:end="5:30"><name pos:start="5:15" pos:end="5:25">BlockDriver</name> <modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:30">drv</name></decl></parameter>, <parameter pos:start="5:33" pos:end="5:44"><decl pos:start="5:33" pos:end="5:44"><type pos:start="5:33" pos:end="5:44"><name pos:start="5:33" pos:end="5:37">Error</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier><modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:44">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="409:1">{<block_content pos:start="9:5" pos:end="407:15">

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:26">file</name> <init pos:start="11:28" pos:end="11:33">= <expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">NULL</name></expr></init></decl>, <decl pos:start="11:36" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:22"><modifier pos:start="11:36" pos:end="11:36">*</modifier></type><name pos:start="11:37" pos:end="11:38">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:23">drvname</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:22">snapshot_flags</name> <init pos:start="17:24" pos:end="17:26">= <expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:16"><expr pos:start="21:5" pos:end="21:15"><call pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:15">(<argument pos:start="21:12" pos:end="21:14"><expr pos:start="21:12" pos:end="21:14"><name pos:start="21:12" pos:end="21:14">pbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="71:5"><if pos:start="25:5" pos:end="71:5">if <condition pos:start="25:8" pos:end="25:18">(<expr pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:17">reference</name></expr>)</condition> <block pos:start="25:20" pos:end="71:5">{<block_content pos:start="27:9" pos:end="69:17">

        <decl_stmt pos:start="27:9" pos:end="27:71"><decl pos:start="27:9" pos:end="27:70"><type pos:start="27:9" pos:end="27:12"><name pos:start="27:9" pos:end="27:12">bool</name></type> <name pos:start="27:14" pos:end="27:30">options_non_empty</name> <init pos:start="27:32" pos:end="27:70">= <expr pos:start="27:34" pos:end="27:70"><ternary pos:start="27:34" pos:end="27:70"><condition pos:start="27:34" pos:end="27:42"><expr pos:start="27:34" pos:end="27:40"><name pos:start="27:34" pos:end="27:40">options</name></expr> ?</condition><then pos:start="27:44" pos:end="27:62"> <expr pos:start="27:44" pos:end="27:62"><call pos:start="27:44" pos:end="27:62"><name pos:start="27:44" pos:end="27:53">qdict_size</name><argument_list pos:start="27:54" pos:end="27:62">(<argument pos:start="27:55" pos:end="27:61"><expr pos:start="27:55" pos:end="27:61"><name pos:start="27:55" pos:end="27:61">options</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="27:64" pos:end="27:70">: <expr pos:start="27:66" pos:end="27:70"><name pos:start="27:66" pos:end="27:70">false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:25"><expr pos:start="29:9" pos:end="29:24"><call pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:15">QDECREF</name><argument_list pos:start="29:16" pos:end="29:24">(<argument pos:start="29:17" pos:end="29:23"><expr pos:start="29:17" pos:end="29:23"><name pos:start="29:17" pos:end="29:23">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="33:17">(<expr pos:start="33:13" pos:end="33:16"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:16">pbs</name></expr>)</condition> <block pos:start="33:19" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:27">

            <expr_stmt pos:start="35:13" pos:end="37:47"><expr pos:start="35:13" pos:end="37:46"><call pos:start="35:13" pos:end="37:46"><name pos:start="35:13" pos:end="35:22">error_setg</name><argument_list pos:start="35:23" pos:end="37:46">(<argument pos:start="35:24" pos:end="35:27"><expr pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">errp</name></expr></argument>, <argument pos:start="35:30" pos:end="37:45"><expr pos:start="35:30" pos:end="37:45"><literal type="string" pos:start="35:30" pos:end="35:77">"Cannot reuse an existing BDS when referencing "</literal>

                       <literal type="string" pos:start="37:24" pos:end="37:45">"another block device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:27">return <expr pos:start="39:20" pos:end="39:26"><operator pos:start="39:20" pos:end="39:20">-</operator><name pos:start="39:21" pos:end="39:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:42">(<expr pos:start="45:13" pos:end="45:41"><name pos:start="45:13" pos:end="45:20">filename</name> <operator pos:start="45:22" pos:end="45:23">||</operator> <name pos:start="45:25" pos:end="45:41">options_non_empty</name></expr>)</condition> <block pos:start="45:44" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:27">

            <expr_stmt pos:start="47:13" pos:end="49:63"><expr pos:start="47:13" pos:end="49:62"><call pos:start="47:13" pos:end="49:62"><name pos:start="47:13" pos:end="47:22">error_setg</name><argument_list pos:start="47:23" pos:end="49:62">(<argument pos:start="47:24" pos:end="47:27"><expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">errp</name></expr></argument>, <argument pos:start="47:30" pos:end="49:61"><expr pos:start="47:30" pos:end="49:61"><literal type="string" pos:start="47:30" pos:end="47:78">"Cannot reference an existing block device with "</literal>

                       <literal type="string" pos:start="49:24" pos:end="49:61">"additional options or a new filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:27">return <expr pos:start="51:20" pos:end="51:26"><operator pos:start="51:20" pos:end="51:20">-</operator><name pos:start="51:21" pos:end="51:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:56"><expr pos:start="57:9" pos:end="57:55"><name pos:start="57:9" pos:end="57:10">bs</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <call pos:start="57:14" pos:end="57:55"><name pos:start="57:14" pos:end="57:27">bdrv_lookup_bs</name><argument_list pos:start="57:28" pos:end="57:55">(<argument pos:start="57:29" pos:end="57:37"><expr pos:start="57:29" pos:end="57:37"><name pos:start="57:29" pos:end="57:37">reference</name></expr></argument>, <argument pos:start="57:40" pos:end="57:48"><expr pos:start="57:40" pos:end="57:48"><name pos:start="57:40" pos:end="57:48">reference</name></expr></argument>, <argument pos:start="57:51" pos:end="57:54"><expr pos:start="57:51" pos:end="57:54"><name pos:start="57:51" pos:end="57:54">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:16">(<expr pos:start="59:13" pos:end="59:15"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:15">bs</name></expr>)</condition> <block pos:start="59:18" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:27">

            <return pos:start="61:13" pos:end="61:27">return <expr pos:start="61:20" pos:end="61:26"><operator pos:start="61:20" pos:end="61:20">-</operator><name pos:start="61:21" pos:end="61:26">ENODEV</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:21"><expr pos:start="65:9" pos:end="65:20"><call pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:16">bdrv_ref</name><argument_list pos:start="65:17" pos:end="65:20">(<argument pos:start="65:18" pos:end="65:19"><expr pos:start="65:18" pos:end="65:19"><name pos:start="65:18" pos:end="65:19">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:18"><expr pos:start="67:9" pos:end="67:17"><operator pos:start="67:9" pos:end="67:9">*</operator><name pos:start="67:10" pos:end="67:12">pbs</name> <operator pos:start="67:14" pos:end="67:14">=</operator> <name pos:start="67:16" pos:end="67:17">bs</name></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:17">return <expr pos:start="69:16" pos:end="69:16"><literal type="number" pos:start="69:16" pos:end="69:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:13">(<expr pos:start="75:9" pos:end="75:12"><operator pos:start="75:9" pos:end="75:9">*</operator><name pos:start="75:10" pos:end="75:12">pbs</name></expr>)</condition> <block pos:start="75:15" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:18">

        <expr_stmt pos:start="77:9" pos:end="77:18"><expr pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:10">bs</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <operator pos:start="77:14" pos:end="77:14">*</operator><name pos:start="77:15" pos:end="77:17">pbs</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="79:7" pos:end="83:5">else <block pos:start="79:12" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:24">

        <expr_stmt pos:start="81:9" pos:end="81:24"><expr pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:10">bs</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <call pos:start="81:14" pos:end="81:23"><name pos:start="81:14" pos:end="81:21">bdrv_new</name><argument_list pos:start="81:22" pos:end="81:23">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:44">/* NULL means an empty set of options */</comment>

    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:24">(<expr pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:15">options</name> <operator pos:start="89:17" pos:end="89:18">==</operator> <name pos:start="89:20" pos:end="89:23">NULL</name></expr>)</condition> <block pos:start="89:26" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:30">

        <expr_stmt pos:start="91:9" pos:end="91:30"><expr pos:start="91:9" pos:end="91:29"><name pos:start="91:9" pos:end="91:15">options</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="91:29"><name pos:start="91:19" pos:end="91:27">qdict_new</name><argument_list pos:start="91:28" pos:end="91:29">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:73"><expr pos:start="97:5" pos:end="97:72"><name pos:start="97:5" pos:end="97:7">ret</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="97:72"><name pos:start="97:11" pos:end="97:27">bdrv_fill_options</name><argument_list pos:start="97:28" pos:end="97:72">(<argument pos:start="97:29" pos:end="97:36"><expr pos:start="97:29" pos:end="97:36"><operator pos:start="97:29" pos:end="97:29">&amp;</operator><name pos:start="97:30" pos:end="97:36">options</name></expr></argument>, <argument pos:start="97:39" pos:end="97:47"><expr pos:start="97:39" pos:end="97:47"><operator pos:start="97:39" pos:end="97:39">&amp;</operator><name pos:start="97:40" pos:end="97:47">filename</name></expr></argument>, <argument pos:start="97:50" pos:end="97:54"><expr pos:start="97:50" pos:end="97:54"><name pos:start="97:50" pos:end="97:54">flags</name></expr></argument>, <argument pos:start="97:57" pos:end="97:59"><expr pos:start="97:57" pos:end="97:59"><name pos:start="97:57" pos:end="97:59">drv</name></expr></argument>, <argument pos:start="97:62" pos:end="97:71"><expr pos:start="97:62" pos:end="97:71"><operator pos:start="97:62" pos:end="97:62">&amp;</operator><name pos:start="97:63" pos:end="97:71">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="103:5"><if pos:start="99:5" pos:end="103:5">if <condition pos:start="99:8" pos:end="99:18">(<expr pos:start="99:9" pos:end="99:17"><name pos:start="99:9" pos:end="99:17">local_err</name></expr>)</condition> <block pos:start="99:20" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:18">

        <goto pos:start="101:9" pos:end="101:18">goto <name pos:start="101:14" pos:end="101:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:44">/* Find the right image format driver */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:15"><expr pos:start="109:5" pos:end="109:14"><name pos:start="109:5" pos:end="109:7">drv</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <name pos:start="109:11" pos:end="109:14">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:51"><expr pos:start="111:5" pos:end="111:50"><name pos:start="111:5" pos:end="111:11">drvname</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="111:50"><name pos:start="111:15" pos:end="111:31">qdict_get_try_str</name><argument_list pos:start="111:32" pos:end="111:50">(<argument pos:start="111:33" pos:end="111:39"><expr pos:start="111:33" pos:end="111:39"><name pos:start="111:33" pos:end="111:39">options</name></expr></argument>, <argument pos:start="111:42" pos:end="111:49"><expr pos:start="111:42" pos:end="111:49"><literal type="string" pos:start="111:42" pos:end="111:49">"driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="129:5"><if pos:start="113:5" pos:end="129:5">if <condition pos:start="113:8" pos:end="113:16">(<expr pos:start="113:9" pos:end="113:15"><name pos:start="113:9" pos:end="113:15">drvname</name></expr>)</condition> <block pos:start="113:18" pos:end="129:5">{<block_content pos:start="115:9" pos:end="127:9">

        <expr_stmt pos:start="115:9" pos:end="115:40"><expr pos:start="115:9" pos:end="115:39"><name pos:start="115:9" pos:end="115:11">drv</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="115:39"><name pos:start="115:15" pos:end="115:30">bdrv_find_format</name><argument_list pos:start="115:31" pos:end="115:39">(<argument pos:start="115:32" pos:end="115:38"><expr pos:start="115:32" pos:end="115:38"><name pos:start="115:32" pos:end="115:38">drvname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:37"><expr pos:start="117:9" pos:end="117:36"><call pos:start="117:9" pos:end="117:36"><name pos:start="117:9" pos:end="117:17">qdict_del</name><argument_list pos:start="117:18" pos:end="117:36">(<argument pos:start="117:19" pos:end="117:25"><expr pos:start="117:19" pos:end="117:25"><name pos:start="117:19" pos:end="117:25">options</name></expr></argument>, <argument pos:start="117:28" pos:end="117:35"><expr pos:start="117:28" pos:end="117:35"><literal type="string" pos:start="117:28" pos:end="117:35">"driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="127:9"><if pos:start="119:9" pos:end="127:9">if <condition pos:start="119:12" pos:end="119:17">(<expr pos:start="119:13" pos:end="119:16"><operator pos:start="119:13" pos:end="119:13">!</operator><name pos:start="119:14" pos:end="119:16">drv</name></expr>)</condition> <block pos:start="119:19" pos:end="127:9">{<block_content pos:start="121:13" pos:end="125:22">

            <expr_stmt pos:start="121:13" pos:end="121:62"><expr pos:start="121:13" pos:end="121:61"><call pos:start="121:13" pos:end="121:61"><name pos:start="121:13" pos:end="121:22">error_setg</name><argument_list pos:start="121:23" pos:end="121:61">(<argument pos:start="121:24" pos:end="121:27"><expr pos:start="121:24" pos:end="121:27"><name pos:start="121:24" pos:end="121:27">errp</name></expr></argument>, <argument pos:start="121:30" pos:end="121:51"><expr pos:start="121:30" pos:end="121:51"><literal type="string" pos:start="121:30" pos:end="121:51">"Unknown driver: '%s'"</literal></expr></argument>, <argument pos:start="121:54" pos:end="121:60"><expr pos:start="121:54" pos:end="121:60"><name pos:start="121:54" pos:end="121:60">drvname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:26"><expr pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <operator pos:start="123:19" pos:end="123:19">-</operator><name pos:start="123:20" pos:end="123:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="125:13" pos:end="125:22">goto <name pos:start="125:18" pos:end="125:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:50"><expr pos:start="133:5" pos:end="133:49"><call pos:start="133:5" pos:end="133:49"><name pos:start="133:5" pos:end="133:10">assert</name><argument_list pos:start="133:11" pos:end="133:49">(<argument pos:start="133:12" pos:end="133:48"><expr pos:start="133:12" pos:end="133:48"><name pos:start="133:12" pos:end="133:18">drvname</name> <operator pos:start="133:20" pos:end="133:21">||</operator> <operator pos:start="133:23" pos:end="133:23">!</operator><operator pos:start="133:24" pos:end="133:24">(</operator><name pos:start="133:25" pos:end="133:29">flags</name> <operator pos:start="133:31" pos:end="133:31">&amp;</operator> <name pos:start="133:33" pos:end="133:47">BDRV_O_PROTOCOL</name><operator pos:start="133:48" pos:end="133:48">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="135:5" pos:end="143:5"><if pos:start="135:5" pos:end="143:5">if <condition pos:start="135:8" pos:end="135:36">(<expr pos:start="135:9" pos:end="135:35"><name pos:start="135:9" pos:end="135:11">drv</name> <operator pos:start="135:13" pos:end="135:14">&amp;&amp;</operator> <operator pos:start="135:16" pos:end="135:16">!</operator><name pos:start="135:17" pos:end="135:35"><name pos:start="135:17" pos:end="135:19">drv</name><operator pos:start="135:20" pos:end="135:21">-&gt;</operator><name pos:start="135:22" pos:end="135:35">bdrv_file_open</name></name></expr>)</condition> <block pos:start="135:38" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:34">

        <comment type="block" pos:start="137:9" pos:end="139:56">/* If the user explicitly wants a format driver here, we'll need to add

         * another layer for the protocol in bs-&gt;file */</comment>

        <expr_stmt pos:start="141:9" pos:end="141:34"><expr pos:start="141:9" pos:end="141:33"><name pos:start="141:9" pos:end="141:13">flags</name> <operator pos:start="141:15" pos:end="141:16">&amp;=</operator> <operator pos:start="141:18" pos:end="141:18">~</operator><name pos:start="141:19" pos:end="141:33">BDRV_O_PROTOCOL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:26"><expr pos:start="147:5" pos:end="147:25"><name pos:start="147:5" pos:end="147:15"><name pos:start="147:5" pos:end="147:6">bs</name><operator pos:start="147:7" pos:end="147:8">-&gt;</operator><name pos:start="147:9" pos:end="147:15">options</name></name> <operator pos:start="147:17" pos:end="147:17">=</operator> <name pos:start="147:19" pos:end="147:25">options</name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:43"><expr pos:start="149:5" pos:end="149:42"><name pos:start="149:5" pos:end="149:11">options</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <call pos:start="149:15" pos:end="149:42"><name pos:start="149:15" pos:end="149:33">qdict_clone_shallow</name><argument_list pos:start="149:34" pos:end="149:42">(<argument pos:start="149:35" pos:end="149:41"><expr pos:start="149:35" pos:end="149:41"><name pos:start="149:35" pos:end="149:41">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:46">/* Open image file without format layer */</comment>

    <if_stmt pos:start="155:5" pos:end="187:5"><if pos:start="155:5" pos:end="187:5">if <condition pos:start="155:8" pos:end="155:39">(<expr pos:start="155:9" pos:end="155:38"><operator pos:start="155:9" pos:end="155:9">(</operator><name pos:start="155:10" pos:end="155:14">flags</name> <operator pos:start="155:16" pos:end="155:16">&amp;</operator> <name pos:start="155:18" pos:end="155:32">BDRV_O_PROTOCOL</name><operator pos:start="155:33" pos:end="155:33">)</operator> <operator pos:start="155:35" pos:end="155:36">==</operator> <literal type="number" pos:start="155:38" pos:end="155:38">0</literal></expr>)</condition> <block pos:start="155:41" pos:end="187:5">{<block_content pos:start="157:9" pos:end="185:9">

        <if_stmt pos:start="157:9" pos:end="161:9"><if pos:start="157:9" pos:end="161:9">if <condition pos:start="157:12" pos:end="157:32">(<expr pos:start="157:13" pos:end="157:31"><name pos:start="157:13" pos:end="157:17">flags</name> <operator pos:start="157:19" pos:end="157:19">&amp;</operator> <name pos:start="157:21" pos:end="157:31">BDRV_O_RDWR</name></expr>)</condition> <block pos:start="157:34" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:39">

            <expr_stmt pos:start="159:13" pos:end="159:39"><expr pos:start="159:13" pos:end="159:38"><name pos:start="159:13" pos:end="159:17">flags</name> <operator pos:start="159:19" pos:end="159:20">|=</operator> <name pos:start="159:22" pos:end="159:38">BDRV_O_ALLOW_RDWR</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="163:9" pos:end="169:9"><if pos:start="163:9" pos:end="169:9">if <condition pos:start="163:12" pos:end="163:36">(<expr pos:start="163:13" pos:end="163:35"><name pos:start="163:13" pos:end="163:17">flags</name> <operator pos:start="163:19" pos:end="163:19">&amp;</operator> <name pos:start="163:21" pos:end="163:35">BDRV_O_SNAPSHOT</name></expr>)</condition> <block pos:start="163:38" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:46">

            <expr_stmt pos:start="165:13" pos:end="165:61"><expr pos:start="165:13" pos:end="165:60"><name pos:start="165:13" pos:end="165:26">snapshot_flags</name> <operator pos:start="165:28" pos:end="165:28">=</operator> <call pos:start="165:30" pos:end="165:60"><name pos:start="165:30" pos:end="165:53">bdrv_temp_snapshot_flags</name><argument_list pos:start="165:54" pos:end="165:60">(<argument pos:start="165:55" pos:end="165:59"><expr pos:start="165:55" pos:end="165:59"><name pos:start="165:55" pos:end="165:59">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:46"><expr pos:start="167:13" pos:end="167:45"><name pos:start="167:13" pos:end="167:17">flags</name> <operator pos:start="167:19" pos:end="167:19">=</operator> <call pos:start="167:21" pos:end="167:45"><name pos:start="167:21" pos:end="167:38">bdrv_backing_flags</name><argument_list pos:start="167:39" pos:end="167:45">(<argument pos:start="167:40" pos:end="167:44"><expr pos:start="167:40" pos:end="167:44"><name pos:start="167:40" pos:end="167:44">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="173:9" pos:end="173:29"><expr pos:start="173:9" pos:end="173:28"><call pos:start="173:9" pos:end="173:28"><name pos:start="173:9" pos:end="173:14">assert</name><argument_list pos:start="173:15" pos:end="173:28">(<argument pos:start="173:16" pos:end="173:27"><expr pos:start="173:16" pos:end="173:27"><name pos:start="173:16" pos:end="173:19">file</name> <operator pos:start="173:21" pos:end="173:22">==</operator> <name pos:start="173:24" pos:end="173:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="179:48"><expr pos:start="175:9" pos:end="179:47"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="179:47"><name pos:start="175:15" pos:end="175:29">bdrv_open_image</name><argument_list pos:start="175:30" pos:end="179:47">(<argument pos:start="175:31" pos:end="175:35"><expr pos:start="175:31" pos:end="175:35"><operator pos:start="175:31" pos:end="175:31">&amp;</operator><name pos:start="175:32" pos:end="175:35">file</name></expr></argument>, <argument pos:start="175:38" pos:end="175:45"><expr pos:start="175:38" pos:end="175:45"><name pos:start="175:38" pos:end="175:45">filename</name></expr></argument>, <argument pos:start="175:48" pos:end="175:54"><expr pos:start="175:48" pos:end="175:54"><name pos:start="175:48" pos:end="175:54">options</name></expr></argument>, <argument pos:start="175:57" pos:end="175:62"><expr pos:start="175:57" pos:end="175:62"><literal type="string" pos:start="175:57" pos:end="175:62">"file"</literal></expr></argument>,

                              <argument pos:start="177:31" pos:end="177:57"><expr pos:start="177:31" pos:end="177:57"><call pos:start="177:31" pos:end="177:57"><name pos:start="177:31" pos:end="177:50">bdrv_inherited_flags</name><argument_list pos:start="177:51" pos:end="177:57">(<argument pos:start="177:52" pos:end="177:56"><expr pos:start="177:52" pos:end="177:56"><name pos:start="177:52" pos:end="177:56">flags</name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="179:31" pos:end="179:34"><expr pos:start="179:31" pos:end="179:34"><name pos:start="179:31" pos:end="179:34">true</name></expr></argument>, <argument pos:start="179:37" pos:end="179:46"><expr pos:start="179:37" pos:end="179:46"><operator pos:start="179:37" pos:end="179:37">&amp;</operator><name pos:start="179:38" pos:end="179:46">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="185:9"><if pos:start="181:9" pos:end="185:9">if <condition pos:start="181:12" pos:end="181:20">(<expr pos:start="181:13" pos:end="181:19"><name pos:start="181:13" pos:end="181:15">ret</name> <operator pos:start="181:17" pos:end="181:17">&lt;</operator> <literal type="number" pos:start="181:19" pos:end="181:19">0</literal></expr>)</condition> <block pos:start="181:22" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:22">

            <goto pos:start="183:13" pos:end="183:22">goto <name pos:start="183:18" pos:end="183:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="191:5" pos:end="191:30">/* Image format probing */</comment>

    <expr_stmt pos:start="193:5" pos:end="193:22"><expr pos:start="193:5" pos:end="193:21"><name pos:start="193:5" pos:end="193:14"><name pos:start="193:5" pos:end="193:6">bs</name><operator pos:start="193:7" pos:end="193:8">-&gt;</operator><name pos:start="193:9" pos:end="193:14">probed</name></name> <operator pos:start="193:16" pos:end="193:16">=</operator> <operator pos:start="193:18" pos:end="193:18">!</operator><name pos:start="193:19" pos:end="193:21">drv</name></expr>;</expr_stmt>

    <if_stmt pos:start="195:5" pos:end="213:5"><if pos:start="195:5" pos:end="205:5">if <condition pos:start="195:8" pos:end="195:21">(<expr pos:start="195:9" pos:end="195:20"><operator pos:start="195:9" pos:end="195:9">!</operator><name pos:start="195:10" pos:end="195:12">drv</name> <operator pos:start="195:14" pos:end="195:15">&amp;&amp;</operator> <name pos:start="195:17" pos:end="195:20">file</name></expr>)</condition> <block pos:start="195:23" pos:end="205:5">{<block_content pos:start="197:9" pos:end="203:9">

        <expr_stmt pos:start="197:9" pos:end="197:66"><expr pos:start="197:9" pos:end="197:65"><name pos:start="197:9" pos:end="197:11">ret</name> <operator pos:start="197:13" pos:end="197:13">=</operator> <call pos:start="197:15" pos:end="197:65"><name pos:start="197:15" pos:end="197:31">find_image_format</name><argument_list pos:start="197:32" pos:end="197:65">(<argument pos:start="197:33" pos:end="197:36"><expr pos:start="197:33" pos:end="197:36"><name pos:start="197:33" pos:end="197:36">file</name></expr></argument>, <argument pos:start="197:39" pos:end="197:46"><expr pos:start="197:39" pos:end="197:46"><name pos:start="197:39" pos:end="197:46">filename</name></expr></argument>, <argument pos:start="197:49" pos:end="197:52"><expr pos:start="197:49" pos:end="197:52"><operator pos:start="197:49" pos:end="197:49">&amp;</operator><name pos:start="197:50" pos:end="197:52">drv</name></expr></argument>, <argument pos:start="197:55" pos:end="197:64"><expr pos:start="197:55" pos:end="197:64"><operator pos:start="197:55" pos:end="197:55">&amp;</operator><name pos:start="197:56" pos:end="197:64">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="199:9" pos:end="203:9"><if pos:start="199:9" pos:end="203:9">if <condition pos:start="199:12" pos:end="199:20">(<expr pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:15">ret</name> <operator pos:start="199:17" pos:end="199:17">&lt;</operator> <literal type="number" pos:start="199:19" pos:end="199:19">0</literal></expr>)</condition> <block pos:start="199:22" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:22">

            <goto pos:start="201:13" pos:end="201:22">goto <name pos:start="201:18" pos:end="201:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="205:7" pos:end="213:5">else if <condition pos:start="205:15" pos:end="205:20">(<expr pos:start="205:16" pos:end="205:19"><operator pos:start="205:16" pos:end="205:16">!</operator><name pos:start="205:17" pos:end="205:19">drv</name></expr>)</condition> <block pos:start="205:22" pos:end="213:5">{<block_content pos:start="207:9" pos:end="211:18">

        <expr_stmt pos:start="207:9" pos:end="207:63"><expr pos:start="207:9" pos:end="207:62"><call pos:start="207:9" pos:end="207:62"><name pos:start="207:9" pos:end="207:18">error_setg</name><argument_list pos:start="207:19" pos:end="207:62">(<argument pos:start="207:20" pos:end="207:23"><expr pos:start="207:20" pos:end="207:23"><name pos:start="207:20" pos:end="207:23">errp</name></expr></argument>, <argument pos:start="207:26" pos:end="207:61"><expr pos:start="207:26" pos:end="207:61"><literal type="string" pos:start="207:26" pos:end="207:61">"Must specify either driver or file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:22"><expr pos:start="209:9" pos:end="209:21"><name pos:start="209:9" pos:end="209:11">ret</name> <operator pos:start="209:13" pos:end="209:13">=</operator> <operator pos:start="209:15" pos:end="209:15">-</operator><name pos:start="209:16" pos:end="209:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="211:9" pos:end="211:18">goto <name pos:start="211:14" pos:end="211:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="217:5" pos:end="217:24">/* Open the image */</comment>

    <expr_stmt pos:start="219:5" pos:end="219:70"><expr pos:start="219:5" pos:end="219:69"><name pos:start="219:5" pos:end="219:7">ret</name> <operator pos:start="219:9" pos:end="219:9">=</operator> <call pos:start="219:11" pos:end="219:69"><name pos:start="219:11" pos:end="219:26">bdrv_open_common</name><argument_list pos:start="219:27" pos:end="219:69">(<argument pos:start="219:28" pos:end="219:29"><expr pos:start="219:28" pos:end="219:29"><name pos:start="219:28" pos:end="219:29">bs</name></expr></argument>, <argument pos:start="219:32" pos:end="219:35"><expr pos:start="219:32" pos:end="219:35"><name pos:start="219:32" pos:end="219:35">file</name></expr></argument>, <argument pos:start="219:38" pos:end="219:44"><expr pos:start="219:38" pos:end="219:44"><name pos:start="219:38" pos:end="219:44">options</name></expr></argument>, <argument pos:start="219:47" pos:end="219:51"><expr pos:start="219:47" pos:end="219:51"><name pos:start="219:47" pos:end="219:51">flags</name></expr></argument>, <argument pos:start="219:54" pos:end="219:56"><expr pos:start="219:54" pos:end="219:56"><name pos:start="219:54" pos:end="219:56">drv</name></expr></argument>, <argument pos:start="219:59" pos:end="219:68"><expr pos:start="219:59" pos:end="219:68"><operator pos:start="219:59" pos:end="219:59">&amp;</operator><name pos:start="219:60" pos:end="219:68">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="221:5" pos:end="225:5"><if pos:start="221:5" pos:end="225:5">if <condition pos:start="221:8" pos:end="221:16">(<expr pos:start="221:9" pos:end="221:15"><name pos:start="221:9" pos:end="221:11">ret</name> <operator pos:start="221:13" pos:end="221:13">&lt;</operator> <literal type="number" pos:start="221:15" pos:end="221:15">0</literal></expr>)</condition> <block pos:start="221:18" pos:end="225:5">{<block_content pos:start="223:9" pos:end="223:18">

        <goto pos:start="223:9" pos:end="223:18">goto <name pos:start="223:14" pos:end="223:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="229:5" pos:end="235:5"><if pos:start="229:5" pos:end="235:5">if <condition pos:start="229:8" pos:end="229:35">(<expr pos:start="229:9" pos:end="229:34"><name pos:start="229:9" pos:end="229:12">file</name> <operator pos:start="229:14" pos:end="229:15">&amp;&amp;</operator> <operator pos:start="229:17" pos:end="229:17">(</operator><name pos:start="229:18" pos:end="229:25"><name pos:start="229:18" pos:end="229:19">bs</name><operator pos:start="229:20" pos:end="229:21">-&gt;</operator><name pos:start="229:22" pos:end="229:25">file</name></name> <operator pos:start="229:27" pos:end="229:28">!=</operator> <name pos:start="229:30" pos:end="229:33">file</name><operator pos:start="229:34" pos:end="229:34">)</operator></expr>)</condition> <block pos:start="229:37" pos:end="235:5">{<block_content pos:start="231:9" pos:end="233:20">

        <expr_stmt pos:start="231:9" pos:end="231:25"><expr pos:start="231:9" pos:end="231:24"><call pos:start="231:9" pos:end="231:24"><name pos:start="231:9" pos:end="231:18">bdrv_unref</name><argument_list pos:start="231:19" pos:end="231:24">(<argument pos:start="231:20" pos:end="231:23"><expr pos:start="231:20" pos:end="231:23"><name pos:start="231:20" pos:end="231:23">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:20"><expr pos:start="233:9" pos:end="233:19"><name pos:start="233:9" pos:end="233:12">file</name> <operator pos:start="233:14" pos:end="233:14">=</operator> <name pos:start="233:16" pos:end="233:19">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="239:5" pos:end="239:44">/* If there is a backing file, use it */</comment>

    <if_stmt pos:start="241:5" pos:end="257:5"><if pos:start="241:5" pos:end="257:5">if <condition pos:start="241:8" pos:end="241:41">(<expr pos:start="241:9" pos:end="241:40"><operator pos:start="241:9" pos:end="241:9">(</operator><name pos:start="241:10" pos:end="241:14">flags</name> <operator pos:start="241:16" pos:end="241:16">&amp;</operator> <name pos:start="241:18" pos:end="241:34">BDRV_O_NO_BACKING</name><operator pos:start="241:35" pos:end="241:35">)</operator> <operator pos:start="241:37" pos:end="241:38">==</operator> <literal type="number" pos:start="241:40" pos:end="241:40">0</literal></expr>)</condition> <block pos:start="241:43" pos:end="257:5">{<block_content pos:start="243:9" pos:end="255:9">

        <decl_stmt pos:start="243:9" pos:end="243:31"><decl pos:start="243:9" pos:end="243:30"><type pos:start="243:9" pos:end="243:15"><name pos:start="243:9" pos:end="243:13">QDict</name> <modifier pos:start="243:15" pos:end="243:15">*</modifier></type><name pos:start="243:16" pos:end="243:30">backing_options</name></decl>;</decl_stmt>



        <expr_stmt pos:start="247:9" pos:end="247:70"><expr pos:start="247:9" pos:end="247:69"><call pos:start="247:9" pos:end="247:69"><name pos:start="247:9" pos:end="247:30">qdict_extract_subqdict</name><argument_list pos:start="247:31" pos:end="247:69">(<argument pos:start="247:32" pos:end="247:38"><expr pos:start="247:32" pos:end="247:38"><name pos:start="247:32" pos:end="247:38">options</name></expr></argument>, <argument pos:start="247:41" pos:end="247:56"><expr pos:start="247:41" pos:end="247:56"><operator pos:start="247:41" pos:end="247:41">&amp;</operator><name pos:start="247:42" pos:end="247:56">backing_options</name></expr></argument>, <argument pos:start="247:59" pos:end="247:68"><expr pos:start="247:59" pos:end="247:68"><literal type="string" pos:start="247:59" pos:end="247:68">"backing."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:70"><expr pos:start="249:9" pos:end="249:69"><name pos:start="249:9" pos:end="249:11">ret</name> <operator pos:start="249:13" pos:end="249:13">=</operator> <call pos:start="249:15" pos:end="249:69"><name pos:start="249:15" pos:end="249:36">bdrv_open_backing_file</name><argument_list pos:start="249:37" pos:end="249:69">(<argument pos:start="249:38" pos:end="249:39"><expr pos:start="249:38" pos:end="249:39"><name pos:start="249:38" pos:end="249:39">bs</name></expr></argument>, <argument pos:start="249:42" pos:end="249:56"><expr pos:start="249:42" pos:end="249:56"><name pos:start="249:42" pos:end="249:56">backing_options</name></expr></argument>, <argument pos:start="249:59" pos:end="249:68"><expr pos:start="249:59" pos:end="249:68"><operator pos:start="249:59" pos:end="249:59">&amp;</operator><name pos:start="249:60" pos:end="249:68">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="251:9" pos:end="255:9"><if pos:start="251:9" pos:end="255:9">if <condition pos:start="251:12" pos:end="251:20">(<expr pos:start="251:13" pos:end="251:19"><name pos:start="251:13" pos:end="251:15">ret</name> <operator pos:start="251:17" pos:end="251:17">&lt;</operator> <literal type="number" pos:start="251:19" pos:end="251:19">0</literal></expr>)</condition> <block pos:start="251:22" pos:end="255:9">{<block_content pos:start="253:13" pos:end="253:32">

            <goto pos:start="253:13" pos:end="253:32">goto <name pos:start="253:18" pos:end="253:31">close_and_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="261:5" pos:end="261:30"><expr pos:start="261:5" pos:end="261:29"><call pos:start="261:5" pos:end="261:29"><name pos:start="261:5" pos:end="261:25">bdrv_refresh_filename</name><argument_list pos:start="261:26" pos:end="261:29">(<argument pos:start="261:27" pos:end="261:28"><expr pos:start="261:27" pos:end="261:28"><name pos:start="261:27" pos:end="261:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="265:5" pos:end="267:40">/* For snapshot=on, create a temporary qcow2 overlay. bs points to the

     * temporary snapshot afterwards. */</comment>

    <if_stmt pos:start="269:5" pos:end="279:5"><if pos:start="269:5" pos:end="279:5">if <condition pos:start="269:8" pos:end="269:23">(<expr pos:start="269:9" pos:end="269:22"><name pos:start="269:9" pos:end="269:22">snapshot_flags</name></expr>)</condition> <block pos:start="269:25" pos:end="279:5">{<block_content pos:start="271:9" pos:end="277:9">

        <expr_stmt pos:start="271:9" pos:end="271:72"><expr pos:start="271:9" pos:end="271:71"><name pos:start="271:9" pos:end="271:11">ret</name> <operator pos:start="271:13" pos:end="271:13">=</operator> <call pos:start="271:15" pos:end="271:71"><name pos:start="271:15" pos:end="271:39">bdrv_append_temp_snapshot</name><argument_list pos:start="271:40" pos:end="271:71">(<argument pos:start="271:41" pos:end="271:42"><expr pos:start="271:41" pos:end="271:42"><name pos:start="271:41" pos:end="271:42">bs</name></expr></argument>, <argument pos:start="271:45" pos:end="271:58"><expr pos:start="271:45" pos:end="271:58"><name pos:start="271:45" pos:end="271:58">snapshot_flags</name></expr></argument>, <argument pos:start="271:61" pos:end="271:70"><expr pos:start="271:61" pos:end="271:70"><operator pos:start="271:61" pos:end="271:61">&amp;</operator><name pos:start="271:62" pos:end="271:70">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="273:9" pos:end="277:9"><if pos:start="273:9" pos:end="277:9">if <condition pos:start="273:12" pos:end="273:22">(<expr pos:start="273:13" pos:end="273:21"><name pos:start="273:13" pos:end="273:21">local_err</name></expr>)</condition> <block pos:start="273:24" pos:end="277:9">{<block_content pos:start="275:13" pos:end="275:32">

            <goto pos:start="275:13" pos:end="275:32">goto <name pos:start="275:18" pos:end="275:31">close_and_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="283:5" pos:end="283:48">/* Check if any unknown options were used */</comment>

    <if_stmt pos:start="285:5" pos:end="311:5"><if pos:start="285:5" pos:end="311:5">if <condition pos:start="285:8" pos:end="285:46">(<expr pos:start="285:9" pos:end="285:45"><name pos:start="285:9" pos:end="285:15">options</name> <operator pos:start="285:17" pos:end="285:18">&amp;&amp;</operator> <operator pos:start="285:20" pos:end="285:20">(</operator><call pos:start="285:21" pos:end="285:39"><name pos:start="285:21" pos:end="285:30">qdict_size</name><argument_list pos:start="285:31" pos:end="285:39">(<argument pos:start="285:32" pos:end="285:38"><expr pos:start="285:32" pos:end="285:38"><name pos:start="285:32" pos:end="285:38">options</name></expr></argument>)</argument_list></call> <operator pos:start="285:41" pos:end="285:42">!=</operator> <literal type="number" pos:start="285:44" pos:end="285:44">0</literal><operator pos:start="285:45" pos:end="285:45">)</operator></expr>)</condition> <block pos:start="285:48" pos:end="311:5">{<block_content pos:start="287:9" pos:end="309:28">

        <decl_stmt pos:start="287:9" pos:end="287:55"><decl pos:start="287:9" pos:end="287:54"><type pos:start="287:9" pos:end="287:26"><specifier pos:start="287:9" pos:end="287:13">const</specifier> <name pos:start="287:15" pos:end="287:24">QDictEntry</name> <modifier pos:start="287:26" pos:end="287:26">*</modifier></type><name pos:start="287:27" pos:end="287:31">entry</name> <init pos:start="287:33" pos:end="287:54">= <expr pos:start="287:35" pos:end="287:54"><call pos:start="287:35" pos:end="287:54"><name pos:start="287:35" pos:end="287:45">qdict_first</name><argument_list pos:start="287:46" pos:end="287:54">(<argument pos:start="287:47" pos:end="287:53"><expr pos:start="287:47" pos:end="287:53"><name pos:start="287:47" pos:end="287:53">options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="289:9" pos:end="303:9"><if pos:start="289:9" pos:end="295:9">if <condition pos:start="289:12" pos:end="289:36">(<expr pos:start="289:13" pos:end="289:35"><name pos:start="289:13" pos:end="289:17">flags</name> <operator pos:start="289:19" pos:end="289:19">&amp;</operator> <name pos:start="289:21" pos:end="289:35">BDRV_O_PROTOCOL</name></expr>)</condition> <block pos:start="289:38" pos:end="295:9">{<block_content pos:start="291:13" pos:end="293:61">

            <expr_stmt pos:start="291:13" pos:end="293:61"><expr pos:start="291:13" pos:end="293:60"><call pos:start="291:13" pos:end="293:60"><name pos:start="291:13" pos:end="291:22">error_setg</name><argument_list pos:start="291:23" pos:end="293:60">(<argument pos:start="291:24" pos:end="291:27"><expr pos:start="291:24" pos:end="291:27"><name pos:start="291:24" pos:end="291:27">errp</name></expr></argument>, <argument pos:start="291:30" pos:end="293:29"><expr pos:start="291:30" pos:end="293:29"><literal type="string" pos:start="291:30" pos:end="291:78">"Block protocol '%s' doesn't support the option "</literal>

                       <literal type="string" pos:start="293:24" pos:end="293:29">"'%s'"</literal></expr></argument>, <argument pos:start="293:32" pos:end="293:47"><expr pos:start="293:32" pos:end="293:47"><name pos:start="293:32" pos:end="293:47"><name pos:start="293:32" pos:end="293:34">drv</name><operator pos:start="293:35" pos:end="293:36">-&gt;</operator><name pos:start="293:37" pos:end="293:47">format_name</name></name></expr></argument>, <argument pos:start="293:50" pos:end="293:59"><expr pos:start="293:50" pos:end="293:59"><name pos:start="293:50" pos:end="293:59"><name pos:start="293:50" pos:end="293:54">entry</name><operator pos:start="293:55" pos:end="293:56">-&gt;</operator><name pos:start="293:57" pos:end="293:59">key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="295:11" pos:end="303:9">else <block pos:start="295:16" pos:end="303:9">{<block_content pos:start="297:13" pos:end="301:61">

            <expr_stmt pos:start="297:13" pos:end="301:61"><expr pos:start="297:13" pos:end="301:60"><call pos:start="297:13" pos:end="301:60"><name pos:start="297:13" pos:end="297:22">error_setg</name><argument_list pos:start="297:23" pos:end="301:60">(<argument pos:start="297:24" pos:end="297:27"><expr pos:start="297:24" pos:end="297:27"><name pos:start="297:24" pos:end="297:27">errp</name></expr></argument>, <argument pos:start="297:30" pos:end="299:48"><expr pos:start="297:30" pos:end="299:48"><literal type="string" pos:start="297:30" pos:end="297:77">"Block format '%s' used by device '%s' doesn't "</literal>

                       <literal type="string" pos:start="299:24" pos:end="299:48">"support the option '%s'"</literal></expr></argument>, <argument pos:start="299:51" pos:end="299:66"><expr pos:start="299:51" pos:end="299:66"><name pos:start="299:51" pos:end="299:66"><name pos:start="299:51" pos:end="299:53">drv</name><operator pos:start="299:54" pos:end="299:55">-&gt;</operator><name pos:start="299:56" pos:end="299:66">format_name</name></name></expr></argument>,

                       <argument pos:start="301:24" pos:end="301:47"><expr pos:start="301:24" pos:end="301:47"><call pos:start="301:24" pos:end="301:47"><name pos:start="301:24" pos:end="301:43">bdrv_get_device_name</name><argument_list pos:start="301:44" pos:end="301:47">(<argument pos:start="301:45" pos:end="301:46"><expr pos:start="301:45" pos:end="301:46"><name pos:start="301:45" pos:end="301:46">bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="301:50" pos:end="301:59"><expr pos:start="301:50" pos:end="301:59"><name pos:start="301:50" pos:end="301:59"><name pos:start="301:50" pos:end="301:54">entry</name><operator pos:start="301:55" pos:end="301:56">-&gt;</operator><name pos:start="301:57" pos:end="301:59">key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="307:9" pos:end="307:22"><expr pos:start="307:9" pos:end="307:21"><name pos:start="307:9" pos:end="307:11">ret</name> <operator pos:start="307:13" pos:end="307:13">=</operator> <operator pos:start="307:15" pos:end="307:15">-</operator><name pos:start="307:16" pos:end="307:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="309:9" pos:end="309:28">goto <name pos:start="309:14" pos:end="309:27">close_and_fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="315:5" pos:end="337:5"><if pos:start="315:5" pos:end="323:5">if <condition pos:start="315:8" pos:end="315:31">(<expr pos:start="315:9" pos:end="315:30"><operator pos:start="315:9" pos:end="315:9">!</operator><call pos:start="315:10" pos:end="315:30"><name pos:start="315:10" pos:end="315:26">bdrv_key_required</name><argument_list pos:start="315:27" pos:end="315:30">(<argument pos:start="315:28" pos:end="315:29"><expr pos:start="315:28" pos:end="315:29"><name pos:start="315:28" pos:end="315:29">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="315:33" pos:end="323:5">{<block_content pos:start="317:9" pos:end="321:9">

        <if_stmt pos:start="317:9" pos:end="321:9"><if pos:start="317:9" pos:end="321:9">if <condition pos:start="317:12" pos:end="317:20">(<expr pos:start="317:13" pos:end="317:19"><name pos:start="317:13" pos:end="317:19"><name pos:start="317:13" pos:end="317:14">bs</name><operator pos:start="317:15" pos:end="317:16">-&gt;</operator><name pos:start="317:17" pos:end="317:19">blk</name></name></expr>)</condition> <block pos:start="317:22" pos:end="321:9">{<block_content pos:start="319:13" pos:end="319:51">

            <expr_stmt pos:start="319:13" pos:end="319:51"><expr pos:start="319:13" pos:end="319:50"><call pos:start="319:13" pos:end="319:50"><name pos:start="319:13" pos:end="319:35">blk_dev_change_media_cb</name><argument_list pos:start="319:36" pos:end="319:50">(<argument pos:start="319:37" pos:end="319:43"><expr pos:start="319:37" pos:end="319:43"><name pos:start="319:37" pos:end="319:43"><name pos:start="319:37" pos:end="319:38">bs</name><operator pos:start="319:39" pos:end="319:40">-&gt;</operator><name pos:start="319:41" pos:end="319:43">blk</name></name></expr></argument>, <argument pos:start="319:46" pos:end="319:49"><expr pos:start="319:46" pos:end="319:49"><name pos:start="319:46" pos:end="319:49">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="323:7" pos:end="337:5">else if <condition pos:start="323:15" pos:end="327:52">(<expr pos:start="323:16" pos:end="327:51"><operator pos:start="323:16" pos:end="323:16">!</operator><call pos:start="323:17" pos:end="323:51"><name pos:start="323:17" pos:end="323:30">runstate_check</name><argument_list pos:start="323:31" pos:end="323:51">(<argument pos:start="323:32" pos:end="323:50"><expr pos:start="323:32" pos:end="323:50"><name pos:start="323:32" pos:end="323:50">RUN_STATE_PRELAUNCH</name></expr></argument>)</argument_list></call>

               <operator pos:start="325:16" pos:end="325:17">&amp;&amp;</operator> <operator pos:start="325:19" pos:end="325:19">!</operator><call pos:start="325:20" pos:end="325:54"><name pos:start="325:20" pos:end="325:33">runstate_check</name><argument_list pos:start="325:34" pos:end="325:54">(<argument pos:start="325:35" pos:end="325:53"><expr pos:start="325:35" pos:end="325:53"><name pos:start="325:35" pos:end="325:53">RUN_STATE_INMIGRATE</name></expr></argument>)</argument_list></call>

               <operator pos:start="327:16" pos:end="327:17">&amp;&amp;</operator> <operator pos:start="327:19" pos:end="327:19">!</operator><call pos:start="327:20" pos:end="327:51"><name pos:start="327:20" pos:end="327:33">runstate_check</name><argument_list pos:start="327:34" pos:end="327:51">(<argument pos:start="327:35" pos:end="327:50"><expr pos:start="327:35" pos:end="327:50"><name pos:start="327:35" pos:end="327:50">RUN_STATE_PAUSED</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="327:54" pos:end="337:5">{<block_content pos:start="329:9" pos:end="335:28"> <comment type="block" pos:start="327:56" pos:end="327:65">/* HACK */</comment>

        <expr_stmt pos:start="329:9" pos:end="331:75"><expr pos:start="329:9" pos:end="331:74"><call pos:start="329:9" pos:end="331:74"><name pos:start="329:9" pos:end="329:18">error_setg</name><argument_list pos:start="329:19" pos:end="331:74">(<argument pos:start="329:20" pos:end="329:23"><expr pos:start="329:20" pos:end="329:23"><name pos:start="329:20" pos:end="329:23">errp</name></expr></argument>,

                   <argument pos:start="331:20" pos:end="331:73"><expr pos:start="331:20" pos:end="331:73"><literal type="string" pos:start="331:20" pos:end="331:73">"Guest must be stopped for opening of encrypted image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:21"><expr pos:start="333:9" pos:end="333:20"><name pos:start="333:9" pos:end="333:11">ret</name> <operator pos:start="333:13" pos:end="333:13">=</operator> <operator pos:start="333:15" pos:end="333:15">-</operator><name pos:start="333:16" pos:end="333:20">EBUSY</name></expr>;</expr_stmt>

        <goto pos:start="335:9" pos:end="335:28">goto <name pos:start="335:14" pos:end="335:27">close_and_fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="341:5" pos:end="341:21"><expr pos:start="341:5" pos:end="341:20"><call pos:start="341:5" pos:end="341:20"><name pos:start="341:5" pos:end="341:11">QDECREF</name><argument_list pos:start="341:12" pos:end="341:20">(<argument pos:start="341:13" pos:end="341:19"><expr pos:start="341:13" pos:end="341:19"><name pos:start="341:13" pos:end="341:19">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="343:5" pos:end="343:14"><expr pos:start="343:5" pos:end="343:13"><operator pos:start="343:5" pos:end="343:5">*</operator><name pos:start="343:6" pos:end="343:8">pbs</name> <operator pos:start="343:10" pos:end="343:10">=</operator> <name pos:start="343:12" pos:end="343:13">bs</name></expr>;</expr_stmt>

    <return pos:start="345:5" pos:end="345:13">return <expr pos:start="345:12" pos:end="345:12"><literal type="number" pos:start="345:12" pos:end="345:12">0</literal></expr>;</return>



<label pos:start="349:1" pos:end="349:5"><name pos:start="349:1" pos:end="349:4">fail</name>:</label>

    <if_stmt pos:start="351:5" pos:end="355:5"><if pos:start="351:5" pos:end="355:5">if <condition pos:start="351:8" pos:end="351:21">(<expr pos:start="351:9" pos:end="351:20"><name pos:start="351:9" pos:end="351:12">file</name> <operator pos:start="351:14" pos:end="351:15">!=</operator> <name pos:start="351:17" pos:end="351:20">NULL</name></expr>)</condition> <block pos:start="351:23" pos:end="355:5">{<block_content pos:start="353:9" pos:end="353:25">

        <expr_stmt pos:start="353:9" pos:end="353:25"><expr pos:start="353:9" pos:end="353:24"><call pos:start="353:9" pos:end="353:24"><name pos:start="353:9" pos:end="353:18">bdrv_unref</name><argument_list pos:start="353:19" pos:end="353:24">(<argument pos:start="353:20" pos:end="353:23"><expr pos:start="353:20" pos:end="353:23"><name pos:start="353:20" pos:end="353:23">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:25"><expr pos:start="357:5" pos:end="357:24"><call pos:start="357:5" pos:end="357:24"><name pos:start="357:5" pos:end="357:11">QDECREF</name><argument_list pos:start="357:12" pos:end="357:24">(<argument pos:start="357:13" pos:end="357:23"><expr pos:start="357:13" pos:end="357:23"><name pos:start="357:13" pos:end="357:23"><name pos:start="357:13" pos:end="357:14">bs</name><operator pos:start="357:15" pos:end="357:16">-&gt;</operator><name pos:start="357:17" pos:end="357:23">options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:21"><expr pos:start="359:5" pos:end="359:20"><call pos:start="359:5" pos:end="359:20"><name pos:start="359:5" pos:end="359:11">QDECREF</name><argument_list pos:start="359:12" pos:end="359:20">(<argument pos:start="359:13" pos:end="359:19"><expr pos:start="359:13" pos:end="359:19"><name pos:start="359:13" pos:end="359:19">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="361:5" pos:end="361:23"><expr pos:start="361:5" pos:end="361:22"><name pos:start="361:5" pos:end="361:15"><name pos:start="361:5" pos:end="361:6">bs</name><operator pos:start="361:7" pos:end="361:8">-&gt;</operator><name pos:start="361:9" pos:end="361:15">options</name></name> <operator pos:start="361:17" pos:end="361:17">=</operator> <name pos:start="361:19" pos:end="361:22">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="363:5" pos:end="373:5"><if pos:start="363:5" pos:end="373:5">if <condition pos:start="363:8" pos:end="363:14">(<expr pos:start="363:9" pos:end="363:13"><operator pos:start="363:9" pos:end="363:9">!</operator><operator pos:start="363:10" pos:end="363:10">*</operator><name pos:start="363:11" pos:end="363:13">pbs</name></expr>)</condition> <block pos:start="363:16" pos:end="373:5">{<block_content pos:start="371:9" pos:end="371:23">

        <comment type="block" pos:start="365:9" pos:end="369:54">/* If *pbs is NULL, a new BDS has been created in this function and

           needs to be freed now. Otherwise, it does not need to be closed,

           since it has not really been opened yet. */</comment>

        <expr_stmt pos:start="371:9" pos:end="371:23"><expr pos:start="371:9" pos:end="371:22"><call pos:start="371:9" pos:end="371:22"><name pos:start="371:9" pos:end="371:18">bdrv_unref</name><argument_list pos:start="371:19" pos:end="371:22">(<argument pos:start="371:20" pos:end="371:21"><expr pos:start="371:20" pos:end="371:21"><name pos:start="371:20" pos:end="371:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="375:5" pos:end="379:5"><if pos:start="375:5" pos:end="379:5">if <condition pos:start="375:8" pos:end="375:18">(<expr pos:start="375:9" pos:end="375:17"><name pos:start="375:9" pos:end="375:17">local_err</name></expr>)</condition> <block pos:start="375:20" pos:end="379:5">{<block_content pos:start="377:9" pos:end="377:41">

        <expr_stmt pos:start="377:9" pos:end="377:41"><expr pos:start="377:9" pos:end="377:40"><call pos:start="377:9" pos:end="377:40"><name pos:start="377:9" pos:end="377:23">error_propagate</name><argument_list pos:start="377:24" pos:end="377:40">(<argument pos:start="377:25" pos:end="377:28"><expr pos:start="377:25" pos:end="377:28"><name pos:start="377:25" pos:end="377:28">errp</name></expr></argument>, <argument pos:start="377:31" pos:end="377:39"><expr pos:start="377:31" pos:end="377:39"><name pos:start="377:31" pos:end="377:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="381:5" pos:end="381:15">return <expr pos:start="381:12" pos:end="381:14"><name pos:start="381:12" pos:end="381:14">ret</name></expr>;</return>



<label pos:start="385:1" pos:end="385:15"><name pos:start="385:1" pos:end="385:14">close_and_fail</name>:</label>

    <comment type="block" pos:start="387:5" pos:end="387:64">/* See fail path, but now the BDS has to be always closed */</comment>

    <if_stmt pos:start="389:5" pos:end="397:5"><if pos:start="389:5" pos:end="393:5">if <condition pos:start="389:8" pos:end="389:13">(<expr pos:start="389:9" pos:end="389:12"><operator pos:start="389:9" pos:end="389:9">*</operator><name pos:start="389:10" pos:end="389:12">pbs</name></expr>)</condition> <block pos:start="389:15" pos:end="393:5">{<block_content pos:start="391:9" pos:end="391:23">

        <expr_stmt pos:start="391:9" pos:end="391:23"><expr pos:start="391:9" pos:end="391:22"><call pos:start="391:9" pos:end="391:22"><name pos:start="391:9" pos:end="391:18">bdrv_close</name><argument_list pos:start="391:19" pos:end="391:22">(<argument pos:start="391:20" pos:end="391:21"><expr pos:start="391:20" pos:end="391:21"><name pos:start="391:20" pos:end="391:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="393:7" pos:end="397:5">else <block pos:start="393:12" pos:end="397:5">{<block_content pos:start="395:9" pos:end="395:23">

        <expr_stmt pos:start="395:9" pos:end="395:23"><expr pos:start="395:9" pos:end="395:22"><call pos:start="395:9" pos:end="395:22"><name pos:start="395:9" pos:end="395:18">bdrv_unref</name><argument_list pos:start="395:19" pos:end="395:22">(<argument pos:start="395:20" pos:end="395:21"><expr pos:start="395:20" pos:end="395:21"><name pos:start="395:20" pos:end="395:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:21"><expr pos:start="399:5" pos:end="399:20"><call pos:start="399:5" pos:end="399:20"><name pos:start="399:5" pos:end="399:11">QDECREF</name><argument_list pos:start="399:12" pos:end="399:20">(<argument pos:start="399:13" pos:end="399:19"><expr pos:start="399:13" pos:end="399:19"><name pos:start="399:13" pos:end="399:19">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="401:5" pos:end="405:5"><if pos:start="401:5" pos:end="405:5">if <condition pos:start="401:8" pos:end="401:18">(<expr pos:start="401:9" pos:end="401:17"><name pos:start="401:9" pos:end="401:17">local_err</name></expr>)</condition> <block pos:start="401:20" pos:end="405:5">{<block_content pos:start="403:9" pos:end="403:41">

        <expr_stmt pos:start="403:9" pos:end="403:41"><expr pos:start="403:9" pos:end="403:40"><call pos:start="403:9" pos:end="403:40"><name pos:start="403:9" pos:end="403:23">error_propagate</name><argument_list pos:start="403:24" pos:end="403:40">(<argument pos:start="403:25" pos:end="403:28"><expr pos:start="403:25" pos:end="403:28"><name pos:start="403:25" pos:end="403:28">errp</name></expr></argument>, <argument pos:start="403:31" pos:end="403:39"><expr pos:start="403:31" pos:end="403:39"><name pos:start="403:31" pos:end="403:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="407:5" pos:end="407:15">return <expr pos:start="407:12" pos:end="407:14"><name pos:start="407:12" pos:end="407:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
