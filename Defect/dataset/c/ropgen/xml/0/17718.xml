<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17718.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">mem_info_32</name><parameter_list pos:start="1:24" pos:end="1:52">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:31">Monitor</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">mon</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:46">CPUState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:5">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">l1</name></decl>, <decl pos:start="5:13" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:14">l2</name></decl>, <decl pos:start="5:17" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:20">prot</name></decl>, <decl pos:start="5:23" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:23" pos:end="5:31">last_prot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">pgd</name></decl>, <decl pos:start="7:19" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:19" pos:end="7:21">pde</name></decl>, <decl pos:start="7:24" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:24" pos:end="7:26">pte</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">target_phys_addr_t</name></type> <name pos:start="9:24" pos:end="9:28">start</name></decl>, <decl pos:start="9:31" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:22"/><name pos:start="9:31" pos:end="9:33">end</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:30"><expr pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:7">pgd</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <name pos:start="13:11" pos:end="13:20"><name pos:start="13:11" pos:end="13:13">env</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:17">cr</name><index pos:start="13:18" pos:end="13:20">[<expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">3</literal></expr>]</index></name> <operator pos:start="13:22" pos:end="13:22">&amp;</operator> <operator pos:start="13:24" pos:end="13:24">~</operator><literal type="number" pos:start="13:25" pos:end="13:29">0xfff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:18"><expr pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:13">last_prot</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <literal type="number" pos:start="15:17" pos:end="15:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:15"><expr pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:9">start</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <operator pos:start="17:13" pos:end="17:13">-</operator><literal type="number" pos:start="17:14" pos:end="17:14">1</literal></expr>;</expr_stmt>

    <for pos:start="19:5" pos:end="69:5">for<control pos:start="19:8" pos:end="19:32">(<init pos:start="19:9" pos:end="19:15"><expr pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:10">l1</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:26"><expr pos:start="19:17" pos:end="19:25"><name pos:start="19:17" pos:end="19:18">l1</name> <operator pos:start="19:20" pos:end="19:20">&lt;</operator> <literal type="number" pos:start="19:22" pos:end="19:25">1024</literal></expr>;</condition> <incr pos:start="19:28" pos:end="19:31"><expr pos:start="19:28" pos:end="19:31"><name pos:start="19:28" pos:end="19:29">l1</name><operator pos:start="19:30" pos:end="19:31">++</operator></expr></incr>)</control> <block pos:start="19:34" pos:end="69:5">{<block_content pos:start="21:9" pos:end="67:9">

        <expr_stmt pos:start="21:9" pos:end="21:56"><expr pos:start="21:9" pos:end="21:55"><call pos:start="21:9" pos:end="21:55"><name pos:start="21:9" pos:end="21:32">cpu_physical_memory_read</name><argument_list pos:start="21:33" pos:end="21:55">(<argument pos:start="21:34" pos:end="21:45"><expr pos:start="21:34" pos:end="21:45"><name pos:start="21:34" pos:end="21:36">pgd</name> <operator pos:start="21:38" pos:end="21:38">+</operator> <name pos:start="21:40" pos:end="21:41">l1</name> <operator pos:start="21:43" pos:end="21:43">*</operator> <literal type="number" pos:start="21:45" pos:end="21:45">4</literal></expr></argument>, <argument pos:start="21:48" pos:end="21:51"><expr pos:start="21:48" pos:end="21:51"><operator pos:start="21:48" pos:end="21:48">&amp;</operator><name pos:start="21:49" pos:end="21:51">pde</name></expr></argument>, <argument pos:start="21:54" pos:end="21:54"><expr pos:start="21:54" pos:end="21:54"><literal type="number" pos:start="21:54" pos:end="21:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:31"><expr pos:start="23:9" pos:end="23:30"><name pos:start="23:9" pos:end="23:11">pde</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:30"><name pos:start="23:15" pos:end="23:25">le32_to_cpu</name><argument_list pos:start="23:26" pos:end="23:30">(<argument pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:29">pde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:23"><expr pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:11">end</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:16">l1</name> <operator pos:start="25:18" pos:end="25:19">&lt;&lt;</operator> <literal type="number" pos:start="25:21" pos:end="25:22">22</literal></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="67:9"><if pos:start="27:9" pos:end="61:9">if <condition pos:start="27:12" pos:end="27:34">(<expr pos:start="27:13" pos:end="27:33"><name pos:start="27:13" pos:end="27:15">pde</name> <operator pos:start="27:17" pos:end="27:17">&amp;</operator> <name pos:start="27:19" pos:end="27:33">PG_PRESENT_MASK</name></expr>)</condition> <block pos:start="27:36" pos:end="61:9">{<block_content pos:start="29:13" pos:end="59:13">

            <if_stmt pos:start="29:13" pos:end="59:13"><if pos:start="29:13" pos:end="35:13">if <condition pos:start="29:16" pos:end="29:67">(<expr pos:start="29:17" pos:end="29:66"><operator pos:start="29:17" pos:end="29:17">(</operator><name pos:start="29:18" pos:end="29:20">pde</name> <operator pos:start="29:22" pos:end="29:22">&amp;</operator> <name pos:start="29:24" pos:end="29:34">PG_PSE_MASK</name><operator pos:start="29:35" pos:end="29:35">)</operator> <operator pos:start="29:37" pos:end="29:38">&amp;&amp;</operator> <operator pos:start="29:40" pos:end="29:40">(</operator><name pos:start="29:41" pos:end="29:50"><name pos:start="29:41" pos:end="29:43">env</name><operator pos:start="29:44" pos:end="29:45">-&gt;</operator><name pos:start="29:46" pos:end="29:47">cr</name><index pos:start="29:48" pos:end="29:50">[<expr pos:start="29:49" pos:end="29:49"><literal type="number" pos:start="29:49" pos:end="29:49">4</literal></expr>]</index></name> <operator pos:start="29:52" pos:end="29:52">&amp;</operator> <name pos:start="29:54" pos:end="29:65">CR4_PSE_MASK</name><operator pos:start="29:66" pos:end="29:66">)</operator></expr>)</condition> <block pos:start="29:69" pos:end="35:13">{<block_content pos:start="31:17" pos:end="33:62">

                <expr_stmt pos:start="31:17" pos:end="31:75"><expr pos:start="31:17" pos:end="31:74"><name pos:start="31:17" pos:end="31:20">prot</name> <operator pos:start="31:22" pos:end="31:22">=</operator> <name pos:start="31:24" pos:end="31:26">pde</name> <operator pos:start="31:28" pos:end="31:28">&amp;</operator> <operator pos:start="31:30" pos:end="31:30">(</operator><name pos:start="31:31" pos:end="31:42">PG_USER_MASK</name> <operator pos:start="31:44" pos:end="31:44">|</operator> <name pos:start="31:46" pos:end="31:55">PG_RW_MASK</name> <operator pos:start="31:57" pos:end="31:57">|</operator> <name pos:start="31:59" pos:end="31:73">PG_PRESENT_MASK</name><operator pos:start="31:74" pos:end="31:74">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:62"><expr pos:start="33:17" pos:end="33:61"><call pos:start="33:17" pos:end="33:61"><name pos:start="33:17" pos:end="33:25">mem_print</name><argument_list pos:start="33:26" pos:end="33:61">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">mon</name></expr></argument>, <argument pos:start="33:32" pos:end="33:37"><expr pos:start="33:32" pos:end="33:37"><operator pos:start="33:32" pos:end="33:32">&amp;</operator><name pos:start="33:33" pos:end="33:37">start</name></expr></argument>, <argument pos:start="33:40" pos:end="33:49"><expr pos:start="33:40" pos:end="33:49"><operator pos:start="33:40" pos:end="33:40">&amp;</operator><name pos:start="33:41" pos:end="33:49">last_prot</name></expr></argument>, <argument pos:start="33:52" pos:end="33:54"><expr pos:start="33:52" pos:end="33:54"><name pos:start="33:52" pos:end="33:54">end</name></expr></argument>, <argument pos:start="33:57" pos:end="33:60"><expr pos:start="33:57" pos:end="33:60"><name pos:start="33:57" pos:end="33:60">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="35:15" pos:end="59:13">else <block pos:start="35:20" pos:end="59:13">{<block_content pos:start="37:17" pos:end="57:17">

                <for pos:start="37:17" pos:end="57:17">for<control pos:start="37:20" pos:end="37:44">(<init pos:start="37:21" pos:end="37:27"><expr pos:start="37:21" pos:end="37:26"><name pos:start="37:21" pos:end="37:22">l2</name> <operator pos:start="37:24" pos:end="37:24">=</operator> <literal type="number" pos:start="37:26" pos:end="37:26">0</literal></expr>;</init> <condition pos:start="37:29" pos:end="37:38"><expr pos:start="37:29" pos:end="37:37"><name pos:start="37:29" pos:end="37:30">l2</name> <operator pos:start="37:32" pos:end="37:32">&lt;</operator> <literal type="number" pos:start="37:34" pos:end="37:37">1024</literal></expr>;</condition> <incr pos:start="37:40" pos:end="37:43"><expr pos:start="37:40" pos:end="37:43"><name pos:start="37:40" pos:end="37:41">l2</name><operator pos:start="37:42" pos:end="37:43">++</operator></expr></incr>)</control> <block pos:start="37:46" pos:end="57:17">{<block_content pos:start="39:21" pos:end="55:66">

                    <expr_stmt pos:start="39:21" pos:end="39:79"><expr pos:start="39:21" pos:end="39:78"><call pos:start="39:21" pos:end="39:78"><name pos:start="39:21" pos:end="39:44">cpu_physical_memory_read</name><argument_list pos:start="39:45" pos:end="39:78">(<argument pos:start="39:46" pos:end="39:68"><expr pos:start="39:46" pos:end="39:68"><operator pos:start="39:46" pos:end="39:46">(</operator><name pos:start="39:47" pos:end="39:49">pde</name> <operator pos:start="39:51" pos:end="39:51">&amp;</operator> <operator pos:start="39:53" pos:end="39:53">~</operator><literal type="number" pos:start="39:54" pos:end="39:58">0xfff</literal><operator pos:start="39:59" pos:end="39:59">)</operator> <operator pos:start="39:61" pos:end="39:61">+</operator> <name pos:start="39:63" pos:end="39:64">l2</name> <operator pos:start="39:66" pos:end="39:66">*</operator> <literal type="number" pos:start="39:68" pos:end="39:68">4</literal></expr></argument>, <argument pos:start="39:71" pos:end="39:74"><expr pos:start="39:71" pos:end="39:74"><operator pos:start="39:71" pos:end="39:71">&amp;</operator><name pos:start="39:72" pos:end="39:74">pte</name></expr></argument>, <argument pos:start="39:77" pos:end="39:77"><expr pos:start="39:77" pos:end="39:77"><literal type="number" pos:start="39:77" pos:end="39:77">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="41:21" pos:end="41:43"><expr pos:start="41:21" pos:end="41:42"><name pos:start="41:21" pos:end="41:23">pte</name> <operator pos:start="41:25" pos:end="41:25">=</operator> <call pos:start="41:27" pos:end="41:42"><name pos:start="41:27" pos:end="41:37">le32_to_cpu</name><argument_list pos:start="41:38" pos:end="41:42">(<argument pos:start="41:39" pos:end="41:41"><expr pos:start="41:39" pos:end="41:41"><name pos:start="41:39" pos:end="41:41">pte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="43:21" pos:end="43:50"><expr pos:start="43:21" pos:end="43:49"><name pos:start="43:21" pos:end="43:23">end</name> <operator pos:start="43:25" pos:end="43:25">=</operator> <operator pos:start="43:27" pos:end="43:27">(</operator><name pos:start="43:28" pos:end="43:29">l1</name> <operator pos:start="43:31" pos:end="43:32">&lt;&lt;</operator> <literal type="number" pos:start="43:34" pos:end="43:35">22</literal><operator pos:start="43:36" pos:end="43:36">)</operator> <operator pos:start="43:38" pos:end="43:38">+</operator> <operator pos:start="43:40" pos:end="43:40">(</operator><name pos:start="43:41" pos:end="43:42">l2</name> <operator pos:start="43:44" pos:end="43:45">&lt;&lt;</operator> <literal type="number" pos:start="43:47" pos:end="43:48">12</literal><operator pos:start="43:49" pos:end="43:49">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="45:21" pos:end="53:21"><if pos:start="45:21" pos:end="49:21">if <condition pos:start="45:24" pos:end="45:46">(<expr pos:start="45:25" pos:end="45:45"><name pos:start="45:25" pos:end="45:27">pte</name> <operator pos:start="45:29" pos:end="45:29">&amp;</operator> <name pos:start="45:31" pos:end="45:45">PG_PRESENT_MASK</name></expr>)</condition> <block pos:start="45:48" pos:end="49:21">{<block_content pos:start="47:25" pos:end="47:83">

                        <expr_stmt pos:start="47:25" pos:end="47:83"><expr pos:start="47:25" pos:end="47:82"><name pos:start="47:25" pos:end="47:28">prot</name> <operator pos:start="47:30" pos:end="47:30">=</operator> <name pos:start="47:32" pos:end="47:34">pte</name> <operator pos:start="47:36" pos:end="47:36">&amp;</operator> <operator pos:start="47:38" pos:end="47:38">(</operator><name pos:start="47:39" pos:end="47:50">PG_USER_MASK</name> <operator pos:start="47:52" pos:end="47:52">|</operator> <name pos:start="47:54" pos:end="47:63">PG_RW_MASK</name> <operator pos:start="47:65" pos:end="47:65">|</operator> <name pos:start="47:67" pos:end="47:81">PG_PRESENT_MASK</name><operator pos:start="47:82" pos:end="47:82">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="49:23" pos:end="53:21">else <block pos:start="49:28" pos:end="53:21">{<block_content pos:start="51:25" pos:end="51:33">

                        <expr_stmt pos:start="51:25" pos:end="51:33"><expr pos:start="51:25" pos:end="51:32"><name pos:start="51:25" pos:end="51:28">prot</name> <operator pos:start="51:30" pos:end="51:30">=</operator> <literal type="number" pos:start="51:32" pos:end="51:32">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="55:21" pos:end="55:66"><expr pos:start="55:21" pos:end="55:65"><call pos:start="55:21" pos:end="55:65"><name pos:start="55:21" pos:end="55:29">mem_print</name><argument_list pos:start="55:30" pos:end="55:65">(<argument pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:33">mon</name></expr></argument>, <argument pos:start="55:36" pos:end="55:41"><expr pos:start="55:36" pos:end="55:41"><operator pos:start="55:36" pos:end="55:36">&amp;</operator><name pos:start="55:37" pos:end="55:41">start</name></expr></argument>, <argument pos:start="55:44" pos:end="55:53"><expr pos:start="55:44" pos:end="55:53"><operator pos:start="55:44" pos:end="55:44">&amp;</operator><name pos:start="55:45" pos:end="55:53">last_prot</name></expr></argument>, <argument pos:start="55:56" pos:end="55:58"><expr pos:start="55:56" pos:end="55:58"><name pos:start="55:56" pos:end="55:58">end</name></expr></argument>, <argument pos:start="55:61" pos:end="55:64"><expr pos:start="55:61" pos:end="55:64"><name pos:start="55:61" pos:end="55:64">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="61:11" pos:end="67:9">else <block pos:start="61:16" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:58">

            <expr_stmt pos:start="63:13" pos:end="63:21"><expr pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:16">prot</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <literal type="number" pos:start="63:20" pos:end="63:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:58"><expr pos:start="65:13" pos:end="65:57"><call pos:start="65:13" pos:end="65:57"><name pos:start="65:13" pos:end="65:21">mem_print</name><argument_list pos:start="65:22" pos:end="65:57">(<argument pos:start="65:23" pos:end="65:25"><expr pos:start="65:23" pos:end="65:25"><name pos:start="65:23" pos:end="65:25">mon</name></expr></argument>, <argument pos:start="65:28" pos:end="65:33"><expr pos:start="65:28" pos:end="65:33"><operator pos:start="65:28" pos:end="65:28">&amp;</operator><name pos:start="65:29" pos:end="65:33">start</name></expr></argument>, <argument pos:start="65:36" pos:end="65:45"><expr pos:start="65:36" pos:end="65:45"><operator pos:start="65:36" pos:end="65:36">&amp;</operator><name pos:start="65:37" pos:end="65:45">last_prot</name></expr></argument>, <argument pos:start="65:48" pos:end="65:50"><expr pos:start="65:48" pos:end="65:50"><name pos:start="65:48" pos:end="65:50">end</name></expr></argument>, <argument pos:start="65:53" pos:end="65:56"><expr pos:start="65:53" pos:end="65:56"><name pos:start="65:53" pos:end="65:56">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
