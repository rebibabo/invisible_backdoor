<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10625.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">read_filter_params</name><parameter_list pos:start="1:30" pos:end="3:72">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:46">MLPDecodeContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">m</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:69"><decl pos:start="1:52" pos:end="1:69"><type pos:start="1:52" pos:end="1:69"><name pos:start="1:52" pos:end="1:64">GetBitContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">gbp</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:50"><decl pos:start="3:31" pos:end="3:50"><type pos:start="3:31" pos:end="3:50"><name pos:start="3:31" pos:end="3:38">unsigned</name> <name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:50">channel</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:71"><decl pos:start="3:53" pos:end="3:71"><type pos:start="3:53" pos:end="3:71"><name pos:start="3:53" pos:end="3:60">unsigned</name> <name pos:start="3:62" pos:end="3:64">int</name></type> <name pos:start="3:66" pos:end="3:71">filter</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:13">

    <decl_stmt pos:start="7:5" pos:end="7:73"><decl pos:start="7:5" pos:end="7:72"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">FilterParams</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">fp</name> <init pos:start="7:22" pos:end="7:72">= <expr pos:start="7:24" pos:end="7:72"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:50"><name pos:start="7:25" pos:end="7:25">m</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:41">channel_params</name><index pos:start="7:42" pos:end="7:50">[<expr pos:start="7:43" pos:end="7:49"><name pos:start="7:43" pos:end="7:49">channel</name></expr>]</index></name><operator pos:start="7:51" pos:end="7:51">.</operator><name pos:start="7:52" pos:end="7:72"><name pos:start="7:52" pos:end="7:64">filter_params</name><index pos:start="7:65" pos:end="7:72">[<expr pos:start="7:66" pos:end="7:71"><name pos:start="7:66" pos:end="7:71">filter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:65"><decl pos:start="9:5" pos:end="9:64"><type pos:start="9:5" pos:end="9:13"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">int</name></type> <name pos:start="9:15" pos:end="9:23">max_order</name> <init pos:start="9:25" pos:end="9:64">= <expr pos:start="9:27" pos:end="9:64"><ternary pos:start="9:27" pos:end="9:64"><condition pos:start="9:27" pos:end="9:34"><expr pos:start="9:27" pos:end="9:32"><name pos:start="9:27" pos:end="9:32">filter</name></expr> ?</condition><then pos:start="9:36" pos:end="9:48"> <expr pos:start="9:36" pos:end="9:48"><name pos:start="9:36" pos:end="9:48">MAX_IIR_ORDER</name></expr> </then><else pos:start="9:50" pos:end="9:64">: <expr pos:start="9:52" pos:end="9:64"><name pos:start="9:52" pos:end="9:64">MAX_FIR_ORDER</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:14"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name></type> <name pos:start="11:16" pos:end="11:20">fchar</name> <init pos:start="11:22" pos:end="11:41">= <expr pos:start="11:24" pos:end="11:41"><ternary pos:start="11:24" pos:end="11:41"><condition pos:start="11:24" pos:end="11:31"><expr pos:start="11:24" pos:end="11:29"><name pos:start="11:24" pos:end="11:29">filter</name></expr> ?</condition><then pos:start="11:33" pos:end="11:35"> <expr pos:start="11:33" pos:end="11:35"><literal type="char" pos:start="11:33" pos:end="11:35">'I'</literal></expr> </then><else pos:start="11:37" pos:end="11:41">: <expr pos:start="11:39" pos:end="11:41"><literal type="char" pos:start="11:39" pos:end="11:41">'F'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:16"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:16">order</name></decl>;</decl_stmt>



    <comment type="line" pos:start="17:5" pos:end="17:38">// Filter is 0 for FIR, 1 for IIR.</comment>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><call pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:22">(<argument pos:start="19:12" pos:end="19:21"><expr pos:start="19:12" pos:end="19:21"><name pos:start="19:12" pos:end="19:17">filter</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <literal type="number" pos:start="19:21" pos:end="19:21">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:41"><expr pos:start="23:5" pos:end="23:40"><name pos:start="23:5" pos:end="23:38"><name pos:start="23:5" pos:end="23:5">m</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:21">filter_changed</name><index pos:start="23:22" pos:end="23:30">[<expr pos:start="23:23" pos:end="23:29"><name pos:start="23:23" pos:end="23:29">channel</name></expr>]</index><index pos:start="23:31" pos:end="23:38">[<expr pos:start="23:32" pos:end="23:37"><name pos:start="23:32" pos:end="23:37">filter</name></expr>]</index></name><operator pos:start="23:39" pos:end="23:40">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:9">order</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:28"><name pos:start="27:13" pos:end="27:20">get_bits</name><argument_list pos:start="27:21" pos:end="27:28">(<argument pos:start="27:22" pos:end="27:24"><expr pos:start="27:22" pos:end="27:24"><name pos:start="27:22" pos:end="27:24">gbp</name></expr></argument>, <argument pos:start="27:27" pos:end="27:27"><expr pos:start="27:27" pos:end="27:27"><literal type="number" pos:start="27:27" pos:end="27:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if <condition pos:start="29:8" pos:end="29:26">(<expr pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:13">order</name> <operator pos:start="29:15" pos:end="29:15">&gt;</operator> <name pos:start="29:17" pos:end="29:25">max_order</name></expr>)</condition> <block pos:start="29:28" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:18">

        <expr_stmt pos:start="31:9" pos:end="35:40"><expr pos:start="31:9" pos:end="35:39"><call pos:start="31:9" pos:end="35:39"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="35:39">(<argument pos:start="31:16" pos:end="31:23"><expr pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:16">m</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:23">avctx</name></name></expr></argument>, <argument pos:start="31:26" pos:end="31:37"><expr pos:start="31:26" pos:end="31:37"><name pos:start="31:26" pos:end="31:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="33:16" pos:end="33:67"><expr pos:start="33:16" pos:end="33:67"><literal type="string" pos:start="33:16" pos:end="33:67">"%cIR filter order %d is greater than maximum %d.\n"</literal></expr></argument>,

               <argument pos:start="35:16" pos:end="35:20"><expr pos:start="35:16" pos:end="35:20"><name pos:start="35:16" pos:end="35:20">fchar</name></expr></argument>, <argument pos:start="35:23" pos:end="35:27"><expr pos:start="35:23" pos:end="35:27"><name pos:start="35:23" pos:end="35:27">order</name></expr></argument>, <argument pos:start="35:30" pos:end="35:38"><expr pos:start="35:30" pos:end="35:38"><name pos:start="35:30" pos:end="35:38">max_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:6">fp</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:13">order</name></name> <operator pos:start="41:15" pos:end="41:15">=</operator> <name pos:start="41:17" pos:end="41:21">order</name></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="125:5"><if pos:start="45:5" pos:end="125:5">if <condition pos:start="45:8" pos:end="45:18">(<expr pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:13">order</name> <operator pos:start="45:15" pos:end="45:15">&gt;</operator> <literal type="number" pos:start="45:17" pos:end="45:17">0</literal></expr>)</condition> <block pos:start="45:20" pos:end="125:5">{<block_content pos:start="47:9" pos:end="123:9">

        <decl_stmt pos:start="47:9" pos:end="47:36"><decl pos:start="47:9" pos:end="47:22"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:22">coeff_bits</name></decl>, <decl pos:start="47:25" pos:end="47:35"><type ref="prev" pos:start="47:9" pos:end="47:11"/><name pos:start="47:25" pos:end="47:35">coeff_shift</name></decl>;</decl_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:37"><expr pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:17"><name pos:start="51:9" pos:end="51:10">fp</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:17">shift</name></name> <operator pos:start="51:19" pos:end="51:19">=</operator> <call pos:start="51:21" pos:end="51:36"><name pos:start="51:21" pos:end="51:28">get_bits</name><argument_list pos:start="51:29" pos:end="51:36">(<argument pos:start="51:30" pos:end="51:32"><expr pos:start="51:30" pos:end="51:32"><name pos:start="51:30" pos:end="51:32">gbp</name></expr></argument>, <argument pos:start="51:35" pos:end="51:35"><expr pos:start="51:35" pos:end="51:35"><literal type="number" pos:start="51:35" pos:end="51:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:18">coeff_bits</name>  <operator pos:start="55:21" pos:end="55:21">=</operator> <call pos:start="55:23" pos:end="55:38"><name pos:start="55:23" pos:end="55:30">get_bits</name><argument_list pos:start="55:31" pos:end="55:38">(<argument pos:start="55:32" pos:end="55:34"><expr pos:start="55:32" pos:end="55:34"><name pos:start="55:32" pos:end="55:34">gbp</name></expr></argument>, <argument pos:start="55:37" pos:end="55:37"><expr pos:start="55:37" pos:end="55:37"><literal type="number" pos:start="55:37" pos:end="55:37">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:39"><expr pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:19">coeff_shift</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:38"><name pos:start="57:23" pos:end="57:30">get_bits</name><argument_list pos:start="57:31" pos:end="57:38">(<argument pos:start="57:32" pos:end="57:34"><expr pos:start="57:32" pos:end="57:34"><name pos:start="57:32" pos:end="57:34">gbp</name></expr></argument>, <argument pos:start="57:37" pos:end="57:37"><expr pos:start="57:37" pos:end="57:37"><literal type="number" pos:start="57:37" pos:end="57:37">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="69:9"><if pos:start="59:9" pos:end="69:9">if <condition pos:start="59:12" pos:end="59:46">(<expr pos:start="59:13" pos:end="59:45"><name pos:start="59:13" pos:end="59:42"><name pos:start="59:13" pos:end="59:22">coeff_bits</name> <argument_list type="generic" pos:start="59:24" pos:end="59:42">&lt; <argument pos:start="59:26" pos:end="59:40"><expr pos:start="59:26" pos:end="59:40"><literal type="number" pos:start="59:26" pos:end="59:26">1</literal> <operator pos:start="59:28" pos:end="59:29">||</operator> <name pos:start="59:31" pos:end="59:40">coeff_bits</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="59:44" pos:end="59:45">16</literal></expr>)</condition> <block pos:start="59:48" pos:end="69:9">{<block_content pos:start="61:13" pos:end="67:22">

            <expr_stmt pos:start="61:13" pos:end="65:26"><expr pos:start="61:13" pos:end="65:25"><call pos:start="61:13" pos:end="65:25"><name pos:start="61:13" pos:end="61:18">av_log</name><argument_list pos:start="61:19" pos:end="65:25">(<argument pos:start="61:20" pos:end="61:27"><expr pos:start="61:20" pos:end="61:27"><name pos:start="61:20" pos:end="61:27"><name pos:start="61:20" pos:end="61:20">m</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:27">avctx</name></name></expr></argument>, <argument pos:start="61:30" pos:end="61:41"><expr pos:start="61:30" pos:end="61:41"><name pos:start="61:30" pos:end="61:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:71"><expr pos:start="63:20" pos:end="63:71"><literal type="string" pos:start="63:20" pos:end="63:71">"%cIR filter coeff_bits must be between 1 and 16.\n"</literal></expr></argument>,

                   <argument pos:start="65:20" pos:end="65:24"><expr pos:start="65:20" pos:end="65:24"><name pos:start="65:20" pos:end="65:24">fchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:22">return <expr pos:start="67:20" pos:end="67:21"><operator pos:start="67:20" pos:end="67:20">-</operator><literal type="number" pos:start="67:21" pos:end="67:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="81:9"><if pos:start="71:9" pos:end="81:9">if <condition pos:start="71:12" pos:end="71:42">(<expr pos:start="71:13" pos:end="71:41"><name pos:start="71:13" pos:end="71:22">coeff_bits</name> <operator pos:start="71:24" pos:end="71:24">+</operator> <name pos:start="71:26" pos:end="71:36">coeff_shift</name> <operator pos:start="71:38" pos:end="71:38">&gt;</operator> <literal type="number" pos:start="71:40" pos:end="71:41">16</literal></expr>)</condition> <block pos:start="71:44" pos:end="81:9">{<block_content pos:start="73:13" pos:end="79:22">

            <expr_stmt pos:start="73:13" pos:end="77:26"><expr pos:start="73:13" pos:end="77:25"><call pos:start="73:13" pos:end="77:25"><name pos:start="73:13" pos:end="73:18">av_log</name><argument_list pos:start="73:19" pos:end="77:25">(<argument pos:start="73:20" pos:end="73:27"><expr pos:start="73:20" pos:end="73:27"><name pos:start="73:20" pos:end="73:27"><name pos:start="73:20" pos:end="73:20">m</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:27">avctx</name></name></expr></argument>, <argument pos:start="73:30" pos:end="73:41"><expr pos:start="73:30" pos:end="73:41"><name pos:start="73:30" pos:end="73:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:92"><expr pos:start="75:20" pos:end="75:92"><literal type="string" pos:start="75:20" pos:end="75:92">"Sum of coeff_bits and coeff_shift for %cIR filter must be 16 or less.\n"</literal></expr></argument>,

                   <argument pos:start="77:20" pos:end="77:24"><expr pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:24">fchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:22">return <expr pos:start="79:20" pos:end="79:21"><operator pos:start="79:20" pos:end="79:20">-</operator><literal type="number" pos:start="79:21" pos:end="79:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <for pos:start="85:9" pos:end="87:69">for <control pos:start="85:13" pos:end="85:35">(<init pos:start="85:14" pos:end="85:19"><expr pos:start="85:14" pos:end="85:18"><name pos:start="85:14" pos:end="85:14">i</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <literal type="number" pos:start="85:18" pos:end="85:18">0</literal></expr>;</init> <condition pos:start="85:21" pos:end="85:30"><expr pos:start="85:21" pos:end="85:29"><name pos:start="85:21" pos:end="85:21">i</name> <operator pos:start="85:23" pos:end="85:23">&lt;</operator> <name pos:start="85:25" pos:end="85:29">order</name></expr>;</condition> <incr pos:start="85:32" pos:end="85:34"><expr pos:start="85:32" pos:end="85:34"><name pos:start="85:32" pos:end="85:32">i</name><operator pos:start="85:33" pos:end="85:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="87:13" pos:end="87:69"><block_content pos:start="87:13" pos:end="87:69">

            <expr_stmt pos:start="87:13" pos:end="87:69"><expr pos:start="87:13" pos:end="87:68"><name pos:start="87:13" pos:end="87:24"><name pos:start="87:13" pos:end="87:14">fp</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:21">coeff</name><index pos:start="87:22" pos:end="87:24">[<expr pos:start="87:23" pos:end="87:23"><name pos:start="87:23" pos:end="87:23">i</name></expr>]</index></name> <operator pos:start="87:26" pos:end="87:26">=</operator> <call pos:start="87:28" pos:end="87:53"><name pos:start="87:28" pos:end="87:36">get_sbits</name><argument_list pos:start="87:37" pos:end="87:53">(<argument pos:start="87:38" pos:end="87:40"><expr pos:start="87:38" pos:end="87:40"><name pos:start="87:38" pos:end="87:40">gbp</name></expr></argument>, <argument pos:start="87:43" pos:end="87:52"><expr pos:start="87:43" pos:end="87:52"><name pos:start="87:43" pos:end="87:52">coeff_bits</name></expr></argument>)</argument_list></call> <operator pos:start="87:55" pos:end="87:56">&lt;&lt;</operator> <name pos:start="87:58" pos:end="87:68">coeff_shift</name></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="91:9" pos:end="123:9"><if pos:start="91:9" pos:end="123:9">if <condition pos:start="91:12" pos:end="91:27">(<expr pos:start="91:13" pos:end="91:26"><call pos:start="91:13" pos:end="91:26"><name pos:start="91:13" pos:end="91:21">get_bits1</name><argument_list pos:start="91:22" pos:end="91:26">(<argument pos:start="91:23" pos:end="91:25"><expr pos:start="91:23" pos:end="91:25"><name pos:start="91:23" pos:end="91:25">gbp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:29" pos:end="123:9">{<block_content pos:start="93:13" pos:end="121:73">

            <decl_stmt pos:start="93:13" pos:end="93:40"><decl pos:start="93:13" pos:end="93:26"><type pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">int</name></type> <name pos:start="93:17" pos:end="93:26">state_bits</name></decl>, <decl pos:start="93:29" pos:end="93:39"><type ref="prev" pos:start="93:13" pos:end="93:15"/><name pos:start="93:29" pos:end="93:39">state_shift</name></decl>;</decl_stmt>



            <if_stmt pos:start="97:13" pos:end="105:13"><if pos:start="97:13" pos:end="105:13">if <condition pos:start="97:16" pos:end="97:30">(<expr pos:start="97:17" pos:end="97:29"><name pos:start="97:17" pos:end="97:22">filter</name> <operator pos:start="97:24" pos:end="97:25">==</operator> <name pos:start="97:27" pos:end="97:29">FIR</name></expr>)</condition> <block pos:start="97:32" pos:end="105:13">{<block_content pos:start="99:17" pos:end="103:26">

                <expr_stmt pos:start="99:17" pos:end="101:65"><expr pos:start="99:17" pos:end="101:64"><call pos:start="99:17" pos:end="101:64"><name pos:start="99:17" pos:end="99:22">av_log</name><argument_list pos:start="99:23" pos:end="101:64">(<argument pos:start="99:24" pos:end="99:31"><expr pos:start="99:24" pos:end="99:31"><name pos:start="99:24" pos:end="99:31"><name pos:start="99:24" pos:end="99:24">m</name><operator pos:start="99:25" pos:end="99:26">-&gt;</operator><name pos:start="99:27" pos:end="99:31">avctx</name></name></expr></argument>, <argument pos:start="99:34" pos:end="99:45"><expr pos:start="99:34" pos:end="99:45"><name pos:start="99:34" pos:end="99:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="101:24" pos:end="101:63"><expr pos:start="101:24" pos:end="101:63"><literal type="string" pos:start="101:24" pos:end="101:63">"FIR filter has state data specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="103:17" pos:end="103:26">return <expr pos:start="103:24" pos:end="103:25"><operator pos:start="103:24" pos:end="103:24">-</operator><literal type="number" pos:start="103:25" pos:end="103:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:43"><expr pos:start="109:13" pos:end="109:42"><name pos:start="109:13" pos:end="109:22">state_bits</name>  <operator pos:start="109:25" pos:end="109:25">=</operator> <call pos:start="109:27" pos:end="109:42"><name pos:start="109:27" pos:end="109:34">get_bits</name><argument_list pos:start="109:35" pos:end="109:42">(<argument pos:start="109:36" pos:end="109:38"><expr pos:start="109:36" pos:end="109:38"><name pos:start="109:36" pos:end="109:38">gbp</name></expr></argument>, <argument pos:start="109:41" pos:end="109:41"><expr pos:start="109:41" pos:end="109:41"><literal type="number" pos:start="109:41" pos:end="109:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:43"><expr pos:start="111:13" pos:end="111:42"><name pos:start="111:13" pos:end="111:23">state_shift</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <call pos:start="111:27" pos:end="111:42"><name pos:start="111:27" pos:end="111:34">get_bits</name><argument_list pos:start="111:35" pos:end="111:42">(<argument pos:start="111:36" pos:end="111:38"><expr pos:start="111:36" pos:end="111:38"><name pos:start="111:36" pos:end="111:38">gbp</name></expr></argument>, <argument pos:start="111:41" pos:end="111:41"><expr pos:start="111:41" pos:end="111:41"><literal type="number" pos:start="111:41" pos:end="111:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="115:13" pos:end="115:53">/* TODO: Check validity of state data. */</comment>



            <for pos:start="119:13" pos:end="121:73">for <control pos:start="119:17" pos:end="119:39">(<init pos:start="119:18" pos:end="119:23"><expr pos:start="119:18" pos:end="119:22"><name pos:start="119:18" pos:end="119:18">i</name> <operator pos:start="119:20" pos:end="119:20">=</operator> <literal type="number" pos:start="119:22" pos:end="119:22">0</literal></expr>;</init> <condition pos:start="119:25" pos:end="119:34"><expr pos:start="119:25" pos:end="119:33"><name pos:start="119:25" pos:end="119:25">i</name> <operator pos:start="119:27" pos:end="119:27">&lt;</operator> <name pos:start="119:29" pos:end="119:33">order</name></expr>;</condition> <incr pos:start="119:36" pos:end="119:38"><expr pos:start="119:36" pos:end="119:38"><name pos:start="119:36" pos:end="119:36">i</name><operator pos:start="119:37" pos:end="119:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="121:17" pos:end="121:73"><block_content pos:start="121:17" pos:end="121:73">

                <expr_stmt pos:start="121:17" pos:end="121:73"><expr pos:start="121:17" pos:end="121:72"><name pos:start="121:17" pos:end="121:28"><name pos:start="121:17" pos:end="121:18">fp</name><operator pos:start="121:19" pos:end="121:20">-&gt;</operator><name pos:start="121:21" pos:end="121:25">state</name><index pos:start="121:26" pos:end="121:28">[<expr pos:start="121:27" pos:end="121:27"><name pos:start="121:27" pos:end="121:27">i</name></expr>]</index></name> <operator pos:start="121:30" pos:end="121:30">=</operator> <call pos:start="121:32" pos:end="121:57"><name pos:start="121:32" pos:end="121:40">get_sbits</name><argument_list pos:start="121:41" pos:end="121:57">(<argument pos:start="121:42" pos:end="121:44"><expr pos:start="121:42" pos:end="121:44"><name pos:start="121:42" pos:end="121:44">gbp</name></expr></argument>, <argument pos:start="121:47" pos:end="121:56"><expr pos:start="121:47" pos:end="121:56"><name pos:start="121:47" pos:end="121:56">state_bits</name></expr></argument>)</argument_list></call> <operator pos:start="121:59" pos:end="121:60">&lt;&lt;</operator> <name pos:start="121:62" pos:end="121:72">state_shift</name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="129:5" pos:end="129:13">return <expr pos:start="129:12" pos:end="129:12"><literal type="number" pos:start="129:12" pos:end="129:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
