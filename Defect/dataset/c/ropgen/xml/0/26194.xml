<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26194.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">pc_cmos_init_late</name><parameter_list pos:start="1:30" pos:end="1:43">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:36"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:53">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:25">pc_cmos_init_late_arg</name> <modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:30">arg</name> <init pos:start="5:32" pos:end="5:39">= <expr pos:start="5:34" pos:end="5:39"><name pos:start="5:34" pos:end="5:39">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">ISADevice</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">s</name> <init pos:start="7:18" pos:end="7:33">= <expr pos:start="7:20" pos:end="7:33"><name pos:start="7:20" pos:end="7:33"><name pos:start="7:20" pos:end="7:22">arg</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:33">rtc_state</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int16_t</name></type> <name pos:start="9:13" pos:end="9:21">cylinders</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">int8_t</name></type> <name pos:start="11:12" pos:end="11:16">heads</name></decl>, <decl pos:start="11:19" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:10"/><name pos:start="11:19" pos:end="11:25">sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:16"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:16">trans</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">Object</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:21">container</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:17">CheckFdcState</name></type> <name pos:start="19:19" pos:end="19:23">state</name> <init pos:start="19:25" pos:end="19:31">= <expr pos:start="19:27" pos:end="19:31"><block pos:start="19:27" pos:end="19:31">{ <expr pos:start="19:29" pos:end="19:29"><literal type="number" pos:start="19:29" pos:end="19:29">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:12"><expr pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:7">val</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <literal type="number" pos:start="23:11" pos:end="23:11">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="27:60">(<expr pos:start="25:9" pos:end="27:59"><call pos:start="25:9" pos:end="27:54"><name pos:start="25:9" pos:end="25:24">ide_get_geometry</name><argument_list pos:start="25:25" pos:end="27:54">(<argument pos:start="25:26" pos:end="25:39"><expr pos:start="25:26" pos:end="25:39"><name pos:start="25:26" pos:end="25:39"><name pos:start="25:26" pos:end="25:28">arg</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:36">idebus</name><index pos:start="25:37" pos:end="25:39">[<expr pos:start="25:38" pos:end="25:38"><literal type="number" pos:start="25:38" pos:end="25:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="25:42" pos:end="25:42"><expr pos:start="25:42" pos:end="25:42"><literal type="number" pos:start="25:42" pos:end="25:42">0</literal></expr></argument>,

                         <argument pos:start="27:26" pos:end="27:35"><expr pos:start="27:26" pos:end="27:35"><operator pos:start="27:26" pos:end="27:26">&amp;</operator><name pos:start="27:27" pos:end="27:35">cylinders</name></expr></argument>, <argument pos:start="27:38" pos:end="27:43"><expr pos:start="27:38" pos:end="27:43"><operator pos:start="27:38" pos:end="27:38">&amp;</operator><name pos:start="27:39" pos:end="27:43">heads</name></expr></argument>, <argument pos:start="27:46" pos:end="27:53"><expr pos:start="27:46" pos:end="27:53"><operator pos:start="27:46" pos:end="27:46">&amp;</operator><name pos:start="27:47" pos:end="27:53">sectors</name></expr></argument>)</argument_list></call> <operator pos:start="27:56" pos:end="27:57">&gt;=</operator> <literal type="number" pos:start="27:59" pos:end="27:59">0</literal></expr>)</condition> <block pos:start="27:62" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:20">

        <expr_stmt pos:start="29:9" pos:end="29:63"><expr pos:start="29:9" pos:end="29:62"><call pos:start="29:9" pos:end="29:62"><name pos:start="29:9" pos:end="29:20">cmos_init_hd</name><argument_list pos:start="29:21" pos:end="29:62">(<argument pos:start="29:22" pos:end="29:22"><expr pos:start="29:22" pos:end="29:22"><name pos:start="29:22" pos:end="29:22">s</name></expr></argument>, <argument pos:start="29:25" pos:end="29:28"><expr pos:start="29:25" pos:end="29:28"><literal type="number" pos:start="29:25" pos:end="29:28">0x19</literal></expr></argument>, <argument pos:start="29:31" pos:end="29:34"><expr pos:start="29:31" pos:end="29:34"><literal type="number" pos:start="29:31" pos:end="29:34">0x1b</literal></expr></argument>, <argument pos:start="29:37" pos:end="29:45"><expr pos:start="29:37" pos:end="29:45"><name pos:start="29:37" pos:end="29:45">cylinders</name></expr></argument>, <argument pos:start="29:48" pos:end="29:52"><expr pos:start="29:48" pos:end="29:52"><name pos:start="29:48" pos:end="29:52">heads</name></expr></argument>, <argument pos:start="29:55" pos:end="29:61"><expr pos:start="29:55" pos:end="29:61"><name pos:start="29:55" pos:end="29:61">sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:20"><expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:11">val</name> <operator pos:start="31:13" pos:end="31:14">|=</operator> <literal type="number" pos:start="31:16" pos:end="31:19">0xf0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="37:60">(<expr pos:start="35:9" pos:end="37:59"><call pos:start="35:9" pos:end="37:54"><name pos:start="35:9" pos:end="35:24">ide_get_geometry</name><argument_list pos:start="35:25" pos:end="37:54">(<argument pos:start="35:26" pos:end="35:39"><expr pos:start="35:26" pos:end="35:39"><name pos:start="35:26" pos:end="35:39"><name pos:start="35:26" pos:end="35:28">arg</name><operator pos:start="35:29" pos:end="35:30">-&gt;</operator><name pos:start="35:31" pos:end="35:36">idebus</name><index pos:start="35:37" pos:end="35:39">[<expr pos:start="35:38" pos:end="35:38"><literal type="number" pos:start="35:38" pos:end="35:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="35:42" pos:end="35:42"><expr pos:start="35:42" pos:end="35:42"><literal type="number" pos:start="35:42" pos:end="35:42">1</literal></expr></argument>,

                         <argument pos:start="37:26" pos:end="37:35"><expr pos:start="37:26" pos:end="37:35"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:35">cylinders</name></expr></argument>, <argument pos:start="37:38" pos:end="37:43"><expr pos:start="37:38" pos:end="37:43"><operator pos:start="37:38" pos:end="37:38">&amp;</operator><name pos:start="37:39" pos:end="37:43">heads</name></expr></argument>, <argument pos:start="37:46" pos:end="37:53"><expr pos:start="37:46" pos:end="37:53"><operator pos:start="37:46" pos:end="37:46">&amp;</operator><name pos:start="37:47" pos:end="37:53">sectors</name></expr></argument>)</argument_list></call> <operator pos:start="37:56" pos:end="37:57">&gt;=</operator> <literal type="number" pos:start="37:59" pos:end="37:59">0</literal></expr>)</condition> <block pos:start="37:62" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:20">

        <expr_stmt pos:start="39:9" pos:end="39:63"><expr pos:start="39:9" pos:end="39:62"><call pos:start="39:9" pos:end="39:62"><name pos:start="39:9" pos:end="39:20">cmos_init_hd</name><argument_list pos:start="39:21" pos:end="39:62">(<argument pos:start="39:22" pos:end="39:22"><expr pos:start="39:22" pos:end="39:22"><name pos:start="39:22" pos:end="39:22">s</name></expr></argument>, <argument pos:start="39:25" pos:end="39:28"><expr pos:start="39:25" pos:end="39:28"><literal type="number" pos:start="39:25" pos:end="39:28">0x1a</literal></expr></argument>, <argument pos:start="39:31" pos:end="39:34"><expr pos:start="39:31" pos:end="39:34"><literal type="number" pos:start="39:31" pos:end="39:34">0x24</literal></expr></argument>, <argument pos:start="39:37" pos:end="39:45"><expr pos:start="39:37" pos:end="39:45"><name pos:start="39:37" pos:end="39:45">cylinders</name></expr></argument>, <argument pos:start="39:48" pos:end="39:52"><expr pos:start="39:48" pos:end="39:52"><name pos:start="39:48" pos:end="39:52">heads</name></expr></argument>, <argument pos:start="39:55" pos:end="39:61"><expr pos:start="39:55" pos:end="39:61"><name pos:start="39:55" pos:end="39:61">sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:20"><expr pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:11">val</name> <operator pos:start="41:13" pos:end="41:14">|=</operator> <literal type="number" pos:start="41:16" pos:end="41:19">0x0f</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:33"><expr pos:start="45:5" pos:end="45:32"><call pos:start="45:5" pos:end="45:32"><name pos:start="45:5" pos:end="45:18">rtc_set_memory</name><argument_list pos:start="45:19" pos:end="45:32">(<argument pos:start="45:20" pos:end="45:20"><expr pos:start="45:20" pos:end="45:20"><name pos:start="45:20" pos:end="45:20">s</name></expr></argument>, <argument pos:start="45:23" pos:end="45:26"><expr pos:start="45:23" pos:end="45:26"><literal type="number" pos:start="45:23" pos:end="45:26">0x12</literal></expr></argument>, <argument pos:start="45:29" pos:end="45:31"><expr pos:start="45:29" pos:end="45:31"><name pos:start="45:29" pos:end="45:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:12"><expr pos:start="49:5" pos:end="49:11"><name pos:start="49:5" pos:end="49:7">val</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <literal type="number" pos:start="49:11" pos:end="49:11">0</literal></expr>;</expr_stmt>

    <for pos:start="51:5" pos:end="73:5">for <control pos:start="51:9" pos:end="51:27">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">i</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:21"><name pos:start="51:17" pos:end="51:17">i</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <literal type="number" pos:start="51:21" pos:end="51:21">4</literal></expr>;</condition> <incr pos:start="51:24" pos:end="51:26"><expr pos:start="51:24" pos:end="51:26"><name pos:start="51:24" pos:end="51:24">i</name><operator pos:start="51:25" pos:end="51:26">++</operator></expr></incr>)</control> <block pos:start="51:29" pos:end="73:5">{<block_content pos:start="61:9" pos:end="71:9">

        <comment type="block" pos:start="53:9" pos:end="59:65">/* NOTE: ide_get_geometry() returns the physical

           geometry.  It is always such that: 1 &lt;= sects &lt;= 63, 1

           &lt;= heads &lt;= 16, 1 &lt;= cylinders &lt;= 16383. The BIOS

           geometry can be different if a translation is done. */</comment>

        <if_stmt pos:start="61:9" pos:end="71:9"><if pos:start="61:9" pos:end="71:9">if <condition pos:start="61:12" pos:end="63:64">(<expr pos:start="61:13" pos:end="63:63"><call pos:start="61:13" pos:end="63:58"><name pos:start="61:13" pos:end="61:28">ide_get_geometry</name><argument_list pos:start="61:29" pos:end="63:58">(<argument pos:start="61:30" pos:end="61:47"><expr pos:start="61:30" pos:end="61:47"><name pos:start="61:30" pos:end="61:47"><name pos:start="61:30" pos:end="61:32">arg</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:40">idebus</name><index pos:start="61:41" pos:end="61:47">[<expr pos:start="61:42" pos:end="61:46"><name pos:start="61:42" pos:end="61:42">i</name> <operator pos:start="61:44" pos:end="61:44">/</operator> <literal type="number" pos:start="61:46" pos:end="61:46">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="61:50" pos:end="61:54"><expr pos:start="61:50" pos:end="61:54"><name pos:start="61:50" pos:end="61:50">i</name> <operator pos:start="61:52" pos:end="61:52">%</operator> <literal type="number" pos:start="61:54" pos:end="61:54">2</literal></expr></argument>,

                             <argument pos:start="63:30" pos:end="63:39"><expr pos:start="63:30" pos:end="63:39"><operator pos:start="63:30" pos:end="63:30">&amp;</operator><name pos:start="63:31" pos:end="63:39">cylinders</name></expr></argument>, <argument pos:start="63:42" pos:end="63:47"><expr pos:start="63:42" pos:end="63:47"><operator pos:start="63:42" pos:end="63:42">&amp;</operator><name pos:start="63:43" pos:end="63:47">heads</name></expr></argument>, <argument pos:start="63:50" pos:end="63:57"><expr pos:start="63:50" pos:end="63:57"><operator pos:start="63:50" pos:end="63:50">&amp;</operator><name pos:start="63:51" pos:end="63:57">sectors</name></expr></argument>)</argument_list></call> <operator pos:start="63:60" pos:end="63:61">&gt;=</operator> <literal type="number" pos:start="63:63" pos:end="63:63">0</literal></expr>)</condition> <block pos:start="63:66" pos:end="71:9">{<block_content pos:start="65:13" pos:end="69:36">

            <expr_stmt pos:start="65:13" pos:end="65:74"><expr pos:start="65:13" pos:end="65:73"><name pos:start="65:13" pos:end="65:17">trans</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <call pos:start="65:21" pos:end="65:69"><name pos:start="65:21" pos:end="65:42">ide_get_bios_chs_trans</name><argument_list pos:start="65:43" pos:end="65:69">(<argument pos:start="65:44" pos:end="65:61"><expr pos:start="65:44" pos:end="65:61"><name pos:start="65:44" pos:end="65:61"><name pos:start="65:44" pos:end="65:46">arg</name><operator pos:start="65:47" pos:end="65:48">-&gt;</operator><name pos:start="65:49" pos:end="65:54">idebus</name><index pos:start="65:55" pos:end="65:61">[<expr pos:start="65:56" pos:end="65:60"><name pos:start="65:56" pos:end="65:56">i</name> <operator pos:start="65:58" pos:end="65:58">/</operator> <literal type="number" pos:start="65:60" pos:end="65:60">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="65:64" pos:end="65:68"><expr pos:start="65:64" pos:end="65:68"><name pos:start="65:64" pos:end="65:64">i</name> <operator pos:start="65:66" pos:end="65:66">%</operator> <literal type="number" pos:start="65:68" pos:end="65:68">2</literal></expr></argument>)</argument_list></call> <operator pos:start="65:71" pos:end="65:71">-</operator> <literal type="number" pos:start="65:73" pos:end="65:73">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:38"><expr pos:start="67:13" pos:end="67:37"><call pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:18">assert</name><argument_list pos:start="67:19" pos:end="67:37">(<argument pos:start="67:20" pos:end="67:36"><expr pos:start="67:20" pos:end="67:36"><operator pos:start="67:20" pos:end="67:20">(</operator><name pos:start="67:21" pos:end="67:25">trans</name> <operator pos:start="67:27" pos:end="67:27">&amp;</operator> <operator pos:start="67:29" pos:end="67:29">~</operator><literal type="number" pos:start="67:30" pos:end="67:30">3</literal><operator pos:start="67:31" pos:end="67:31">)</operator> <operator pos:start="67:33" pos:end="67:34">==</operator> <literal type="number" pos:start="67:36" pos:end="67:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:36"><expr pos:start="69:13" pos:end="69:35"><name pos:start="69:13" pos:end="69:15">val</name> <operator pos:start="69:17" pos:end="69:18">|=</operator> <name pos:start="69:20" pos:end="69:24">trans</name> <operator pos:start="69:26" pos:end="69:27">&lt;&lt;</operator> <operator pos:start="69:29" pos:end="69:29">(</operator><name pos:start="69:30" pos:end="69:30">i</name> <operator pos:start="69:32" pos:end="69:32">*</operator> <literal type="number" pos:start="69:34" pos:end="69:34">2</literal><operator pos:start="69:35" pos:end="69:35">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="75:5" pos:end="75:33"><expr pos:start="75:5" pos:end="75:32"><call pos:start="75:5" pos:end="75:32"><name pos:start="75:5" pos:end="75:18">rtc_set_memory</name><argument_list pos:start="75:19" pos:end="75:32">(<argument pos:start="75:20" pos:end="75:20"><expr pos:start="75:20" pos:end="75:20"><name pos:start="75:20" pos:end="75:20">s</name></expr></argument>, <argument pos:start="75:23" pos:end="75:26"><expr pos:start="75:23" pos:end="75:26"><literal type="number" pos:start="75:23" pos:end="75:26">0x39</literal></expr></argument>, <argument pos:start="75:29" pos:end="75:31"><expr pos:start="75:29" pos:end="75:31"><name pos:start="75:29" pos:end="75:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="85:7">/*

     * Locate the FDC at IO address 0x3f0, and configure the CMOS registers

     * accordingly.

     */</comment>

    <for pos:start="87:5" pos:end="93:5">for <control pos:start="87:9" pos:end="87:56">(<init pos:start="87:10" pos:end="87:15"><expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:10">i</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:51"><expr pos:start="87:17" pos:end="87:50"><name pos:start="87:17" pos:end="87:17">i</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <call pos:start="87:21" pos:end="87:50"><name pos:start="87:21" pos:end="87:30">ARRAY_SIZE</name><argument_list pos:start="87:31" pos:end="87:50">(<argument pos:start="87:32" pos:end="87:49"><expr pos:start="87:32" pos:end="87:49"><name pos:start="87:32" pos:end="87:49">fdc_container_path</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="87:53" pos:end="87:55"><expr pos:start="87:53" pos:end="87:55"><name pos:start="87:53" pos:end="87:53">i</name><operator pos:start="87:54" pos:end="87:55">++</operator></expr></incr>)</control> <block pos:start="87:58" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:59">

        <expr_stmt pos:start="89:9" pos:end="89:77"><expr pos:start="89:9" pos:end="89:76"><name pos:start="89:9" pos:end="89:17">container</name> <operator pos:start="89:19" pos:end="89:19">=</operator> <call pos:start="89:21" pos:end="89:76"><name pos:start="89:21" pos:end="89:33">container_get</name><argument_list pos:start="89:34" pos:end="89:76">(<argument pos:start="89:35" pos:end="89:52"><expr pos:start="89:35" pos:end="89:52"><call pos:start="89:35" pos:end="89:52"><name pos:start="89:35" pos:end="89:50">qdev_get_machine</name><argument_list pos:start="89:51" pos:end="89:52">()</argument_list></call></expr></argument>, <argument pos:start="89:55" pos:end="89:75"><expr pos:start="89:55" pos:end="89:75"><name pos:start="89:55" pos:end="89:75"><name pos:start="89:55" pos:end="89:72">fdc_container_path</name><index pos:start="89:73" pos:end="89:75">[<expr pos:start="89:74" pos:end="89:74"><name pos:start="89:74" pos:end="89:74">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:59"><expr pos:start="91:9" pos:end="91:58"><call pos:start="91:9" pos:end="91:58"><name pos:start="91:9" pos:end="91:28">object_child_foreach</name><argument_list pos:start="91:29" pos:end="91:58">(<argument pos:start="91:30" pos:end="91:38"><expr pos:start="91:30" pos:end="91:38"><name pos:start="91:30" pos:end="91:38">container</name></expr></argument>, <argument pos:start="91:41" pos:end="91:49"><expr pos:start="91:41" pos:end="91:49"><name pos:start="91:41" pos:end="91:49">check_fdc</name></expr></argument>, <argument pos:start="91:52" pos:end="91:57"><expr pos:start="91:52" pos:end="91:57"><operator pos:start="91:52" pos:end="91:52">&amp;</operator><name pos:start="91:53" pos:end="91:57">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="97:5" pos:end="107:5"><if pos:start="97:5" pos:end="107:5">if <condition pos:start="97:8" pos:end="97:23">(<expr pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:13">state</name><operator pos:start="97:14" pos:end="97:14">.</operator><name pos:start="97:15" pos:end="97:22">multiple</name></name></expr>)</condition> <block pos:start="97:25" pos:end="107:5">{<block_content pos:start="99:9" pos:end="105:36">

        <expr_stmt pos:start="99:9" pos:end="105:36"><expr pos:start="99:9" pos:end="105:35"><call pos:start="99:9" pos:end="105:35"><name pos:start="99:9" pos:end="99:20">error_report</name><argument_list pos:start="99:21" pos:end="105:35">(<argument pos:start="99:22" pos:end="105:34"><expr pos:start="99:22" pos:end="105:34"><literal type="string" pos:start="99:22" pos:end="99:70">"warning: multiple floppy disk controllers with "</literal>

                     <literal type="string" pos:start="101:22" pos:end="101:54">"iobase=0x3f0 have been found;\n"</literal>

                     <literal type="string" pos:start="103:22" pos:end="103:77">"the one being picked for CMOS setup might not reflect "</literal>

                     <literal type="string" pos:start="105:22" pos:end="105:34">"your intent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:41"><expr pos:start="109:5" pos:end="109:40"><call pos:start="109:5" pos:end="109:40"><name pos:start="109:5" pos:end="109:23">pc_cmos_init_floppy</name><argument_list pos:start="109:24" pos:end="109:40">(<argument pos:start="109:25" pos:end="109:25"><expr pos:start="109:25" pos:end="109:25"><name pos:start="109:25" pos:end="109:25">s</name></expr></argument>, <argument pos:start="109:28" pos:end="109:39"><expr pos:start="109:28" pos:end="109:39"><name pos:start="109:28" pos:end="109:39"><name pos:start="109:28" pos:end="109:32">state</name><operator pos:start="109:33" pos:end="109:33">.</operator><name pos:start="109:34" pos:end="109:39">floppy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:53"><expr pos:start="113:5" pos:end="113:52"><call pos:start="113:5" pos:end="113:52"><name pos:start="113:5" pos:end="113:25">qemu_unregister_reset</name><argument_list pos:start="113:26" pos:end="113:52">(<argument pos:start="113:27" pos:end="113:43"><expr pos:start="113:27" pos:end="113:43"><name pos:start="113:27" pos:end="113:43">pc_cmos_init_late</name></expr></argument>, <argument pos:start="113:46" pos:end="113:51"><expr pos:start="113:46" pos:end="113:51"><name pos:start="113:46" pos:end="113:51">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
