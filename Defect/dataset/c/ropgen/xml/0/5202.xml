<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5202.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">vtd_handle_gcmd_qie</name><parameter_list pos:start="1:32" pos:end="1:60">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:47">IntelIOMMUState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:59"><decl pos:start="1:53" pos:end="1:59"><type pos:start="1:53" pos:end="1:59"><name pos:start="1:53" pos:end="1:56">bool</name></type> <name pos:start="1:58" pos:end="1:59">en</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:5">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:20">iqa_val</name> <init pos:start="5:22" pos:end="5:56">= <expr pos:start="5:24" pos:end="5:56"><call pos:start="5:24" pos:end="5:56"><name pos:start="5:24" pos:end="5:39">vtd_get_quad_raw</name><argument_list pos:start="5:40" pos:end="5:56">(<argument pos:start="5:41" pos:end="5:41"><expr pos:start="5:41" pos:end="5:41"><name pos:start="5:41" pos:end="5:41">s</name></expr></argument>, <argument pos:start="5:44" pos:end="5:55"><expr pos:start="5:44" pos:end="5:55"><name pos:start="5:44" pos:end="5:55">DMAR_IQA_REG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:32"><expr pos:start="9:5" pos:end="9:31"><call pos:start="9:5" pos:end="9:31"><name pos:start="9:5" pos:end="9:27">trace_vtd_inv_qi_enable</name><argument_list pos:start="9:28" pos:end="9:31">(<argument pos:start="9:29" pos:end="9:30"><expr pos:start="9:29" pos:end="9:30"><name pos:start="9:29" pos:end="9:30">en</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="13:5" pos:end="75:5"><if pos:start="13:5" pos:end="53:5">if <condition pos:start="13:8" pos:end="13:11">(<expr pos:start="13:9" pos:end="13:10"><name pos:start="13:9" pos:end="13:10">en</name></expr>)</condition> <block pos:start="13:13" pos:end="53:5">{<block_content pos:start="15:9" pos:end="51:9">

        <expr_stmt pos:start="15:9" pos:end="15:67"><expr pos:start="15:9" pos:end="15:66"><name pos:start="15:9" pos:end="15:13"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:13">iq</name></name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:23">iqa_val</name> <operator pos:start="15:25" pos:end="15:25">&amp;</operator> <call pos:start="15:27" pos:end="15:66"><name pos:start="15:27" pos:end="15:42">VTD_IQA_IQA_MASK</name><argument_list pos:start="15:43" pos:end="15:66">(<argument pos:start="15:44" pos:end="15:65"><expr pos:start="15:44" pos:end="15:65"><name pos:start="15:44" pos:end="15:65">VTD_HOST_ADDRESS_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="17:9" pos:end="17:29">/* 2^(x+8) entries */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:57"><expr pos:start="19:9" pos:end="19:56"><name pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:18">iq_size</name></name> <operator pos:start="19:20" pos:end="19:20">=</operator> <literal type="number" pos:start="19:22" pos:end="19:24">1UL</literal> <operator pos:start="19:26" pos:end="19:27">&lt;&lt;</operator> <operator pos:start="19:29" pos:end="19:29">(</operator><operator pos:start="19:30" pos:end="19:30">(</operator><name pos:start="19:31" pos:end="19:37">iqa_val</name> <operator pos:start="19:39" pos:end="19:39">&amp;</operator> <name pos:start="19:41" pos:end="19:50">VTD_IQA_QS</name><operator pos:start="19:51" pos:end="19:51">)</operator> <operator pos:start="19:53" pos:end="19:53">+</operator> <literal type="number" pos:start="19:55" pos:end="19:55">8</literal><operator pos:start="19:56" pos:end="19:56">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:29"><expr pos:start="21:9" pos:end="21:28"><name pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:21">qi_enabled</name></name> <operator pos:start="21:23" pos:end="21:23">=</operator> <name pos:start="21:25" pos:end="21:28">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:50"><expr pos:start="23:9" pos:end="23:49"><call pos:start="23:9" pos:end="23:49"><name pos:start="23:9" pos:end="23:30">trace_vtd_inv_qi_setup</name><argument_list pos:start="23:31" pos:end="23:49">(<argument pos:start="23:32" pos:end="23:36"><expr pos:start="23:32" pos:end="23:36"><name pos:start="23:32" pos:end="23:36"><name pos:start="23:32" pos:end="23:32">s</name><operator pos:start="23:33" pos:end="23:34">-&gt;</operator><name pos:start="23:35" pos:end="23:36">iq</name></name></expr></argument>, <argument pos:start="23:39" pos:end="23:48"><expr pos:start="23:39" pos:end="23:48"><name pos:start="23:39" pos:end="23:48"><name pos:start="23:39" pos:end="23:39">s</name><operator pos:start="23:40" pos:end="23:41">-&gt;</operator><name pos:start="23:42" pos:end="23:48">iq_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="25:9" pos:end="25:40">/* Ok - report back to driver */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:68"><expr pos:start="27:9" pos:end="27:67"><call pos:start="27:9" pos:end="27:67"><name pos:start="27:9" pos:end="27:31">vtd_set_clear_mask_long</name><argument_list pos:start="27:32" pos:end="27:67">(<argument pos:start="27:33" pos:end="27:33"><expr pos:start="27:33" pos:end="27:33"><name pos:start="27:33" pos:end="27:33">s</name></expr></argument>, <argument pos:start="27:36" pos:end="27:48"><expr pos:start="27:36" pos:end="27:48"><name pos:start="27:36" pos:end="27:48">DMAR_GSTS_REG</name></expr></argument>, <argument pos:start="27:51" pos:end="27:51"><expr pos:start="27:51" pos:end="27:51"><literal type="number" pos:start="27:51" pos:end="27:51">0</literal></expr></argument>, <argument pos:start="27:54" pos:end="27:66"><expr pos:start="27:54" pos:end="27:66"><name pos:start="27:54" pos:end="27:66">VTD_GSTS_QIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="31:9" pos:end="51:9"><if pos:start="31:9" pos:end="51:9">if <condition pos:start="31:12" pos:end="31:28">(<expr pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:22"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:22">iq_tail</name></name> <operator pos:start="31:24" pos:end="31:25">!=</operator> <literal type="number" pos:start="31:27" pos:end="31:27">0</literal></expr>)</condition> <block pos:start="31:30" pos:end="51:9">{<block_content pos:start="43:13" pos:end="49:13">

            <comment type="block" pos:start="33:13" pos:end="41:15">/*

             * This is a spec violation but Windows guests are known to set up

             * Queued Invalidation this way so we allow the write and process

             * Invalidation Descriptors right away.

             */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:55"><expr pos:start="43:13" pos:end="43:54"><call pos:start="43:13" pos:end="43:54"><name pos:start="43:13" pos:end="43:42">trace_vtd_warn_invalid_qi_tail</name><argument_list pos:start="43:43" pos:end="43:54">(<argument pos:start="43:44" pos:end="43:53"><expr pos:start="43:44" pos:end="43:53"><name pos:start="43:44" pos:end="43:53"><name pos:start="43:44" pos:end="43:44">s</name><operator pos:start="43:45" pos:end="43:46">-&gt;</operator><name pos:start="43:47" pos:end="43:53">iq_tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="49:13"><if pos:start="45:13" pos:end="49:13">if <condition pos:start="45:16" pos:end="45:69">(<expr pos:start="45:17" pos:end="45:68"><operator pos:start="45:17" pos:end="45:17">!</operator><operator pos:start="45:18" pos:end="45:18">(</operator><call pos:start="45:19" pos:end="45:52"><name pos:start="45:19" pos:end="45:34">vtd_get_long_raw</name><argument_list pos:start="45:35" pos:end="45:52">(<argument pos:start="45:36" pos:end="45:36"><expr pos:start="45:36" pos:end="45:36"><name pos:start="45:36" pos:end="45:36">s</name></expr></argument>, <argument pos:start="45:39" pos:end="45:51"><expr pos:start="45:39" pos:end="45:51"><name pos:start="45:39" pos:end="45:51">DMAR_FSTS_REG</name></expr></argument>)</argument_list></call> <operator pos:start="45:54" pos:end="45:54">&amp;</operator> <name pos:start="45:56" pos:end="45:67">VTD_FSTS_IQE</name><operator pos:start="45:68" pos:end="45:68">)</operator></expr>)</condition> <block pos:start="45:71" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:38">

                <expr_stmt pos:start="47:17" pos:end="47:38"><expr pos:start="47:17" pos:end="47:37"><call pos:start="47:17" pos:end="47:37"><name pos:start="47:17" pos:end="47:34">vtd_fetch_inv_desc</name><argument_list pos:start="47:35" pos:end="47:37">(<argument pos:start="47:36" pos:end="47:36"><expr pos:start="47:36" pos:end="47:36"><name pos:start="47:36" pos:end="47:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="75:5">else <block pos:start="53:12" pos:end="75:5">{<block_content pos:start="55:9" pos:end="73:9">

        <if_stmt pos:start="55:9" pos:end="73:9"><if pos:start="55:9" pos:end="69:9">if <condition pos:start="55:12" pos:end="55:44">(<expr pos:start="55:13" pos:end="55:43"><call pos:start="55:13" pos:end="55:43"><name pos:start="55:13" pos:end="55:40">vtd_queued_inv_disable_check</name><argument_list pos:start="55:41" pos:end="55:43">(<argument pos:start="55:42" pos:end="55:42"><expr pos:start="55:42" pos:end="55:42"><name pos:start="55:42" pos:end="55:42">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:46" pos:end="69:9">{<block_content pos:start="59:13" pos:end="67:72">

            <comment type="block" pos:start="57:13" pos:end="57:45">/* disable Queued Invalidation */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:49"><expr pos:start="59:13" pos:end="59:48"><call pos:start="59:13" pos:end="59:48"><name pos:start="59:13" pos:end="59:28">vtd_set_quad_raw</name><argument_list pos:start="59:29" pos:end="59:48">(<argument pos:start="59:30" pos:end="59:30"><expr pos:start="59:30" pos:end="59:30"><name pos:start="59:30" pos:end="59:30">s</name></expr></argument>, <argument pos:start="59:33" pos:end="59:44"><expr pos:start="59:33" pos:end="59:44"><name pos:start="59:33" pos:end="59:44">DMAR_IQH_REG</name></expr></argument>, <argument pos:start="59:47" pos:end="59:47"><expr pos:start="59:47" pos:end="59:47"><literal type="number" pos:start="59:47" pos:end="59:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:27"><expr pos:start="61:13" pos:end="61:26"><name pos:start="61:13" pos:end="61:22"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:22">iq_head</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <literal type="number" pos:start="61:26" pos:end="61:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:34"><expr pos:start="63:13" pos:end="63:33"><name pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:25">qi_enabled</name></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <name pos:start="63:29" pos:end="63:33">false</name></expr>;</expr_stmt>

            <comment type="block" pos:start="65:13" pos:end="65:44">/* Ok - report back to driver */</comment>

            <expr_stmt pos:start="67:13" pos:end="67:72"><expr pos:start="67:13" pos:end="67:71"><call pos:start="67:13" pos:end="67:71"><name pos:start="67:13" pos:end="67:35">vtd_set_clear_mask_long</name><argument_list pos:start="67:36" pos:end="67:71">(<argument pos:start="67:37" pos:end="67:37"><expr pos:start="67:37" pos:end="67:37"><name pos:start="67:37" pos:end="67:37">s</name></expr></argument>, <argument pos:start="67:40" pos:end="67:52"><expr pos:start="67:40" pos:end="67:52"><name pos:start="67:40" pos:end="67:52">DMAR_GSTS_REG</name></expr></argument>, <argument pos:start="67:55" pos:end="67:67"><expr pos:start="67:55" pos:end="67:67"><name pos:start="67:55" pos:end="67:67">VTD_GSTS_QIES</name></expr></argument>, <argument pos:start="67:70" pos:end="67:70"><expr pos:start="67:70" pos:end="67:70"><literal type="number" pos:start="67:70" pos:end="67:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="69:11" pos:end="73:9">else <block pos:start="69:16" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:83">

            <expr_stmt pos:start="71:13" pos:end="71:83"><expr pos:start="71:13" pos:end="71:82"><call pos:start="71:13" pos:end="71:82"><name pos:start="71:13" pos:end="71:36">trace_vtd_err_qi_disable</name><argument_list pos:start="71:37" pos:end="71:82">(<argument pos:start="71:38" pos:end="71:47"><expr pos:start="71:38" pos:end="71:47"><name pos:start="71:38" pos:end="71:47"><name pos:start="71:38" pos:end="71:38">s</name><operator pos:start="71:39" pos:end="71:40">-&gt;</operator><name pos:start="71:41" pos:end="71:47">iq_head</name></name></expr></argument>, <argument pos:start="71:50" pos:end="71:59"><expr pos:start="71:50" pos:end="71:59"><name pos:start="71:50" pos:end="71:59"><name pos:start="71:50" pos:end="71:50">s</name><operator pos:start="71:51" pos:end="71:52">-&gt;</operator><name pos:start="71:53" pos:end="71:59">iq_tail</name></name></expr></argument>, <argument pos:start="71:62" pos:end="71:81"><expr pos:start="71:62" pos:end="71:81"><name pos:start="71:62" pos:end="71:81"><name pos:start="71:62" pos:end="71:62">s</name><operator pos:start="71:63" pos:end="71:64">-&gt;</operator><name pos:start="71:65" pos:end="71:81">iq_last_desc_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
