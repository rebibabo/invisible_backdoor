<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18851.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">ff_huff_gen_len_table</name><parameter_list pos:start="1:26" pos:end="1:89">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:33">uint8_t</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">dst</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:61"><decl pos:start="1:41" pos:end="1:61"><type pos:start="1:41" pos:end="1:61"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:54">uint64_t</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">stats</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:77">stats_size</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:88"><decl pos:start="1:80" pos:end="1:88"><type pos:start="1:80" pos:end="1:88"><name pos:start="1:80" pos:end="1:82">int</name></type> <name pos:start="1:84" pos:end="1:88">skip0</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:15">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:58"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">HeapElem</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">h</name>  <init pos:start="5:18" pos:end="5:58">= <expr pos:start="5:20" pos:end="5:58"><call pos:start="5:20" pos:end="5:58"><name pos:start="5:20" pos:end="5:34">av_malloc_array</name><argument_list pos:start="5:35" pos:end="5:58">(<argument pos:start="5:36" pos:end="5:45"><expr pos:start="5:36" pos:end="5:45"><sizeof pos:start="5:36" pos:end="5:45">sizeof<argument_list pos:start="5:42" pos:end="5:45">(<argument pos:start="5:43" pos:end="5:44"><expr pos:start="5:43" pos:end="5:44"><operator pos:start="5:43" pos:end="5:43">*</operator><name pos:start="5:44" pos:end="5:44">h</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="5:48" pos:end="5:57"><expr pos:start="5:48" pos:end="5:57"><name pos:start="5:48" pos:end="5:57">stats_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:7">int</name> <modifier pos:start="7:9" pos:end="7:9">*</modifier></type><name pos:start="7:10" pos:end="7:11">up</name>      <init pos:start="7:18" pos:end="7:63">= <expr pos:start="7:20" pos:end="7:63"><call pos:start="7:20" pos:end="7:63"><name pos:start="7:20" pos:end="7:34">av_malloc_array</name><argument_list pos:start="7:35" pos:end="7:63">(<argument pos:start="7:36" pos:end="7:50"><expr pos:start="7:36" pos:end="7:50"><sizeof pos:start="7:36" pos:end="7:46">sizeof<argument_list pos:start="7:42" pos:end="7:46">(<argument pos:start="7:43" pos:end="7:45"><expr pos:start="7:43" pos:end="7:45"><operator pos:start="7:43" pos:end="7:43">*</operator><name pos:start="7:44" pos:end="7:45">up</name></expr></argument>)</argument_list></sizeof> <operator pos:start="7:48" pos:end="7:48">*</operator> <literal type="number" pos:start="7:50" pos:end="7:50">2</literal></expr></argument>, <argument pos:start="7:53" pos:end="7:62"><expr pos:start="7:53" pos:end="7:62"><name pos:start="7:53" pos:end="7:62">stats_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:65"><decl pos:start="9:5" pos:end="9:64"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">len</name> <init pos:start="9:18" pos:end="9:64">= <expr pos:start="9:20" pos:end="9:64"><call pos:start="9:20" pos:end="9:64"><name pos:start="9:20" pos:end="9:34">av_malloc_array</name><argument_list pos:start="9:35" pos:end="9:64">(<argument pos:start="9:36" pos:end="9:51"><expr pos:start="9:36" pos:end="9:51"><sizeof pos:start="9:36" pos:end="9:47">sizeof<argument_list pos:start="9:42" pos:end="9:47">(<argument pos:start="9:43" pos:end="9:46"><expr pos:start="9:43" pos:end="9:46"><operator pos:start="9:43" pos:end="9:43">*</operator><name pos:start="9:44" pos:end="9:46">len</name></expr></argument>)</argument_list></sizeof> <operator pos:start="9:49" pos:end="9:49">*</operator> <literal type="number" pos:start="9:51" pos:end="9:51">2</literal></expr></argument>, <argument pos:start="9:54" pos:end="9:63"><expr pos:start="9:54" pos:end="9:63"><name pos:start="9:54" pos:end="9:63">stats_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:61"><decl pos:start="11:5" pos:end="11:60"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint16_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">map</name><init pos:start="11:18" pos:end="11:60">= <expr pos:start="11:20" pos:end="11:60"><call pos:start="11:20" pos:end="11:60"><name pos:start="11:20" pos:end="11:34">av_malloc_array</name><argument_list pos:start="11:35" pos:end="11:60">(<argument pos:start="11:36" pos:end="11:47"><expr pos:start="11:36" pos:end="11:47"><sizeof pos:start="11:36" pos:end="11:47">sizeof<argument_list pos:start="11:42" pos:end="11:47">(<argument pos:start="11:43" pos:end="11:46"><expr pos:start="11:43" pos:end="11:46"><operator pos:start="11:43" pos:end="11:43">*</operator><name pos:start="11:44" pos:end="11:46">map</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="11:50" pos:end="11:59"><expr pos:start="11:50" pos:end="11:59"><name pos:start="11:50" pos:end="11:59">stats_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">offset</name></decl>, <decl pos:start="13:17" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:17" pos:end="13:17">i</name></decl>, <decl pos:start="13:20" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:20" pos:end="13:23">next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">size</name> <init pos:start="15:14" pos:end="15:16">= <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name> <init pos:start="17:13" pos:end="17:15">= <expr pos:start="17:15" pos:end="17:15"><literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:26">(<expr pos:start="21:9" pos:end="21:25"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:10">h</name> <operator pos:start="21:12" pos:end="21:13">||</operator> <operator pos:start="21:15" pos:end="21:15">!</operator><name pos:start="21:16" pos:end="21:17">up</name> <operator pos:start="21:19" pos:end="21:20">||</operator> <operator pos:start="21:22" pos:end="21:22">!</operator><name pos:start="21:23" pos:end="21:25">len</name></expr>)</condition> <block pos:start="21:28" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:17">

        <expr_stmt pos:start="23:9" pos:end="23:30"><expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:29"><name pos:start="23:15" pos:end="23:21">AVERROR</name><argument_list pos:start="23:22" pos:end="23:29">(<argument pos:start="23:23" pos:end="23:28"><expr pos:start="23:23" pos:end="23:28"><name pos:start="23:23" pos:end="23:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="25:9" pos:end="25:17">goto <name pos:start="25:14" pos:end="25:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="31:5" pos:end="39:5">for <control pos:start="31:9" pos:end="31:34">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:29"><expr pos:start="31:17" pos:end="31:28"><name pos:start="31:17" pos:end="31:17">i</name><operator pos:start="31:18" pos:end="31:18">&lt;</operator><name pos:start="31:19" pos:end="31:28">stats_size</name></expr>;</condition> <incr pos:start="31:31" pos:end="31:33"><expr pos:start="31:31" pos:end="31:33"><name pos:start="31:31" pos:end="31:31">i</name><operator pos:start="31:32" pos:end="31:33">++</operator></expr></incr>)</control> <block pos:start="31:36" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:28">

        <expr_stmt pos:start="33:9" pos:end="33:21"><expr pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:11">dst</name><index pos:start="33:12" pos:end="33:14">[<expr pos:start="33:13" pos:end="33:13"><name pos:start="33:13" pos:end="33:13">i</name></expr>]</index></name> <operator pos:start="33:16" pos:end="33:16">=</operator> <literal type="number" pos:start="33:18" pos:end="33:20">255</literal></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="37:28"><if pos:start="35:9" pos:end="37:28">if <condition pos:start="35:12" pos:end="35:31">(<expr pos:start="35:13" pos:end="35:30"><name pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:17">stats</name><index pos:start="35:18" pos:end="35:20">[<expr pos:start="35:19" pos:end="35:19"><name pos:start="35:19" pos:end="35:19">i</name></expr>]</index></name> <operator pos:start="35:22" pos:end="35:23">||</operator> <operator pos:start="35:25" pos:end="35:25">!</operator><name pos:start="35:26" pos:end="35:30">skip0</name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:28"><block_content pos:start="37:13" pos:end="37:28">

            <expr_stmt pos:start="37:13" pos:end="37:28"><expr pos:start="37:13" pos:end="37:27"><name pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:15">map</name><index pos:start="37:16" pos:end="37:23">[<expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:20">size</name><operator pos:start="37:21" pos:end="37:22">++</operator></expr>]</index></name> <operator pos:start="37:25" pos:end="37:25">=</operator> <name pos:start="37:27" pos:end="37:27">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="43:5" pos:end="99:5">for <control pos:start="43:9" pos:end="43:36">(<init pos:start="43:10" pos:end="43:20"><expr pos:start="43:10" pos:end="43:19"><name pos:start="43:10" pos:end="43:15">offset</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <literal type="number" pos:start="43:19" pos:end="43:19">1</literal></expr>;</init> <condition pos:start="43:22" pos:end="43:22">;</condition> <incr pos:start="43:24" pos:end="43:35"><expr pos:start="43:24" pos:end="43:35"><name pos:start="43:24" pos:end="43:29">offset</name> <operator pos:start="43:31" pos:end="43:33">&lt;&lt;=</operator> <literal type="number" pos:start="43:35" pos:end="43:35">1</literal></expr></incr>)</control> <block pos:start="43:38" pos:end="99:5">{<block_content pos:start="45:9" pos:end="97:27">

        <for pos:start="45:9" pos:end="51:9">for <control pos:start="45:13" pos:end="45:32">(<init pos:start="45:14" pos:end="45:17"><expr pos:start="45:14" pos:end="45:16"><name pos:start="45:14" pos:end="45:14">i</name><operator pos:start="45:15" pos:end="45:15">=</operator><literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>;</init> <condition pos:start="45:19" pos:end="45:27"><expr pos:start="45:19" pos:end="45:26"><name pos:start="45:19" pos:end="45:19">i</name> <operator pos:start="45:21" pos:end="45:21">&lt;</operator> <name pos:start="45:23" pos:end="45:26">size</name></expr>;</condition> <incr pos:start="45:29" pos:end="45:31"><expr pos:start="45:29" pos:end="45:31"><name pos:start="45:29" pos:end="45:29">i</name><operator pos:start="45:30" pos:end="45:31">++</operator></expr></incr>)</control> <block pos:start="45:34" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:54">

            <expr_stmt pos:start="47:13" pos:end="47:26"><expr pos:start="47:13" pos:end="47:25"><name pos:start="47:13" pos:end="47:16"><name pos:start="47:13" pos:end="47:13">h</name><index pos:start="47:14" pos:end="47:16">[<expr pos:start="47:15" pos:end="47:15"><name pos:start="47:15" pos:end="47:15">i</name></expr>]</index></name><operator pos:start="47:17" pos:end="47:17">.</operator><name pos:start="47:18" pos:end="47:21">name</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:25">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:54"><expr pos:start="49:13" pos:end="49:53"><name pos:start="49:13" pos:end="49:16"><name pos:start="49:13" pos:end="49:13">h</name><index pos:start="49:14" pos:end="49:16">[<expr pos:start="49:15" pos:end="49:15"><name pos:start="49:15" pos:end="49:15">i</name></expr>]</index></name><operator pos:start="49:17" pos:end="49:17">.</operator><name pos:start="49:18" pos:end="49:20">val</name> <operator pos:start="49:22" pos:end="49:22">=</operator> <operator pos:start="49:24" pos:end="49:24">(</operator><name pos:start="49:25" pos:end="49:37"><name pos:start="49:25" pos:end="49:29">stats</name><index pos:start="49:30" pos:end="49:37">[<expr pos:start="49:31" pos:end="49:36"><name pos:start="49:31" pos:end="49:36"><name pos:start="49:31" pos:end="49:33">map</name><index pos:start="49:34" pos:end="49:36">[<expr pos:start="49:35" pos:end="49:35"><name pos:start="49:35" pos:end="49:35">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="49:39" pos:end="49:40">&lt;&lt;</operator> <literal type="number" pos:start="49:42" pos:end="49:43">14</literal><operator pos:start="49:44" pos:end="49:44">)</operator> <operator pos:start="49:46" pos:end="49:46">+</operator> <name pos:start="49:48" pos:end="49:53">offset</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="53:9" pos:end="55:34">for <control pos:start="53:13" pos:end="53:43">(<init pos:start="53:14" pos:end="53:30"><expr pos:start="53:14" pos:end="53:29"><name pos:start="53:14" pos:end="53:14">i</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <name pos:start="53:18" pos:end="53:21">size</name> <operator pos:start="53:23" pos:end="53:23">/</operator> <literal type="number" pos:start="53:25" pos:end="53:27">2</literal> <operator pos:start="53:27" pos:end="53:27">-</operator> <literal type="number" pos:start="53:29" pos:end="53:29">1</literal></expr>;</init> <condition pos:start="53:32" pos:end="53:38"><expr pos:start="53:32" pos:end="53:37"><name pos:start="53:32" pos:end="53:32">i</name> <operator pos:start="53:34" pos:end="53:35">&gt;=</operator> <literal type="number" pos:start="53:37" pos:end="53:37">0</literal></expr>;</condition> <incr pos:start="53:40" pos:end="53:42"><expr pos:start="53:40" pos:end="53:42"><name pos:start="53:40" pos:end="53:40">i</name><operator pos:start="53:41" pos:end="53:42">--</operator></expr></incr>)</control><block type="pseudo" pos:start="55:13" pos:end="55:34"><block_content pos:start="55:13" pos:end="55:34">

            <expr_stmt pos:start="55:13" pos:end="55:34"><expr pos:start="55:13" pos:end="55:33"><call pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:21">heap_sift</name><argument_list pos:start="55:22" pos:end="55:33">(<argument pos:start="55:23" pos:end="55:23"><expr pos:start="55:23" pos:end="55:23"><name pos:start="55:23" pos:end="55:23">h</name></expr></argument>, <argument pos:start="55:26" pos:end="55:26"><expr pos:start="55:26" pos:end="55:26"><name pos:start="55:26" pos:end="55:26">i</name></expr></argument>, <argument pos:start="55:29" pos:end="55:32"><expr pos:start="55:29" pos:end="55:32"><name pos:start="55:29" pos:end="55:32">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="59:9" pos:end="79:9">for <control pos:start="59:13" pos:end="59:54">(<init pos:start="59:14" pos:end="59:25"><expr pos:start="59:14" pos:end="59:24"><name pos:start="59:14" pos:end="59:17">next</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:24">size</name></expr>;</init> <condition pos:start="59:27" pos:end="59:46"><expr pos:start="59:27" pos:end="59:45"><name pos:start="59:27" pos:end="59:30">next</name> <operator pos:start="59:32" pos:end="59:32">&lt;</operator> <name pos:start="59:34" pos:end="59:37">size</name> <operator pos:start="59:39" pos:end="59:39">*</operator> <literal type="number" pos:start="59:41" pos:end="59:43">2</literal> <operator pos:start="59:43" pos:end="59:43">-</operator> <literal type="number" pos:start="59:45" pos:end="59:45">1</literal></expr>;</condition> <incr pos:start="59:48" pos:end="59:53"><expr pos:start="59:48" pos:end="59:53"><name pos:start="59:48" pos:end="59:51">next</name><operator pos:start="59:52" pos:end="59:53">++</operator></expr></incr>)</control> <block pos:start="59:56" pos:end="79:9">{<block_content pos:start="63:13" pos:end="77:34">

            <comment type="line" pos:start="61:13" pos:end="61:74">// merge the two smallest entries, and put it back in the heap</comment>

            <decl_stmt pos:start="63:13" pos:end="63:38"><decl pos:start="63:13" pos:end="63:37"><type pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:20">uint64_t</name></type> <name pos:start="63:22" pos:end="63:26">min1v</name> <init pos:start="63:28" pos:end="63:37">= <expr pos:start="63:30" pos:end="63:37"><name pos:start="63:30" pos:end="63:33"><name pos:start="63:30" pos:end="63:30">h</name><index pos:start="63:31" pos:end="63:33">[<expr pos:start="63:32" pos:end="63:32"><literal type="number" pos:start="63:32" pos:end="63:32">0</literal></expr>]</index></name><operator pos:start="63:34" pos:end="63:34">.</operator><name pos:start="63:35" pos:end="63:37">val</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:33"><expr pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:25"><name pos:start="65:13" pos:end="65:14">up</name><index pos:start="65:15" pos:end="65:25">[<expr pos:start="65:16" pos:end="65:24"><name pos:start="65:16" pos:end="65:19"><name pos:start="65:16" pos:end="65:16">h</name><index pos:start="65:17" pos:end="65:19">[<expr pos:start="65:18" pos:end="65:18"><literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>]</index></name><operator pos:start="65:20" pos:end="65:20">.</operator><name pos:start="65:21" pos:end="65:24">name</name></expr>]</index></name> <operator pos:start="65:27" pos:end="65:27">=</operator> <name pos:start="65:29" pos:end="65:32">next</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:33"><expr pos:start="67:13" pos:end="67:32"><name pos:start="67:13" pos:end="67:16"><name pos:start="67:13" pos:end="67:13">h</name><index pos:start="67:14" pos:end="67:16">[<expr pos:start="67:15" pos:end="67:15"><literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>]</index></name><operator pos:start="67:17" pos:end="67:17">.</operator><name pos:start="67:18" pos:end="67:20">val</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <name pos:start="67:24" pos:end="67:32">INT64_MAX</name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:34"><expr pos:start="69:13" pos:end="69:33"><call pos:start="69:13" pos:end="69:33"><name pos:start="69:13" pos:end="69:21">heap_sift</name><argument_list pos:start="69:22" pos:end="69:33">(<argument pos:start="69:23" pos:end="69:23"><expr pos:start="69:23" pos:end="69:23"><name pos:start="69:23" pos:end="69:23">h</name></expr></argument>, <argument pos:start="69:26" pos:end="69:26"><expr pos:start="69:26" pos:end="69:26"><literal type="number" pos:start="69:26" pos:end="69:26">0</literal></expr></argument>, <argument pos:start="69:29" pos:end="69:32"><expr pos:start="69:29" pos:end="69:32"><name pos:start="69:29" pos:end="69:32">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:33"><expr pos:start="71:13" pos:end="71:32"><name pos:start="71:13" pos:end="71:25"><name pos:start="71:13" pos:end="71:14">up</name><index pos:start="71:15" pos:end="71:25">[<expr pos:start="71:16" pos:end="71:24"><name pos:start="71:16" pos:end="71:19"><name pos:start="71:16" pos:end="71:16">h</name><index pos:start="71:17" pos:end="71:19">[<expr pos:start="71:18" pos:end="71:18"><literal type="number" pos:start="71:18" pos:end="71:18">0</literal></expr>]</index></name><operator pos:start="71:20" pos:end="71:20">.</operator><name pos:start="71:21" pos:end="71:24">name</name></expr>]</index></name> <operator pos:start="71:27" pos:end="71:27">=</operator> <name pos:start="71:29" pos:end="71:32">next</name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:29"><expr pos:start="73:13" pos:end="73:28"><name pos:start="73:13" pos:end="73:16"><name pos:start="73:13" pos:end="73:13">h</name><index pos:start="73:14" pos:end="73:16">[<expr pos:start="73:15" pos:end="73:15"><literal type="number" pos:start="73:15" pos:end="73:15">0</literal></expr>]</index></name><operator pos:start="73:17" pos:end="73:17">.</operator><name pos:start="73:18" pos:end="73:21">name</name> <operator pos:start="73:23" pos:end="73:23">=</operator> <name pos:start="73:25" pos:end="73:28">next</name></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:30"><expr pos:start="75:13" pos:end="75:29"><name pos:start="75:13" pos:end="75:16"><name pos:start="75:13" pos:end="75:13">h</name><index pos:start="75:14" pos:end="75:16">[<expr pos:start="75:15" pos:end="75:15"><literal type="number" pos:start="75:15" pos:end="75:15">0</literal></expr>]</index></name><operator pos:start="75:17" pos:end="75:17">.</operator><name pos:start="75:18" pos:end="75:20">val</name> <operator pos:start="75:22" pos:end="75:23">+=</operator> <name pos:start="75:25" pos:end="75:29">min1v</name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:34"><expr pos:start="77:13" pos:end="77:33"><call pos:start="77:13" pos:end="77:33"><name pos:start="77:13" pos:end="77:21">heap_sift</name><argument_list pos:start="77:22" pos:end="77:33">(<argument pos:start="77:23" pos:end="77:23"><expr pos:start="77:23" pos:end="77:23"><name pos:start="77:23" pos:end="77:23">h</name></expr></argument>, <argument pos:start="77:26" pos:end="77:26"><expr pos:start="77:26" pos:end="77:26"><literal type="number" pos:start="77:26" pos:end="77:26">0</literal></expr></argument>, <argument pos:start="77:29" pos:end="77:32"><expr pos:start="77:29" pos:end="77:32"><name pos:start="77:29" pos:end="77:32">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="83:9" pos:end="83:30"><expr pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:11">len</name><index pos:start="83:12" pos:end="83:25">[<expr pos:start="83:13" pos:end="83:24"><literal type="number" pos:start="83:13" pos:end="83:13">2</literal> <operator pos:start="83:15" pos:end="83:15">*</operator> <name pos:start="83:17" pos:end="83:20">size</name> <operator pos:start="83:22" pos:end="83:22">-</operator> <literal type="number" pos:start="83:24" pos:end="83:24">2</literal></expr>]</index></name> <operator pos:start="83:27" pos:end="83:27">=</operator> <literal type="number" pos:start="83:29" pos:end="83:29">0</literal></expr>;</expr_stmt>

        <for pos:start="85:9" pos:end="87:36">for <control pos:start="85:13" pos:end="85:46">(<init pos:start="85:14" pos:end="85:30"><expr pos:start="85:14" pos:end="85:29"><name pos:start="85:14" pos:end="85:14">i</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <literal type="number" pos:start="85:18" pos:end="85:18">2</literal> <operator pos:start="85:20" pos:end="85:20">*</operator> <name pos:start="85:22" pos:end="85:25">size</name> <operator pos:start="85:27" pos:end="85:27">-</operator> <literal type="number" pos:start="85:29" pos:end="85:29">3</literal></expr>;</init> <condition pos:start="85:32" pos:end="85:41"><expr pos:start="85:32" pos:end="85:40"><name pos:start="85:32" pos:end="85:32">i</name> <operator pos:start="85:34" pos:end="85:35">&gt;=</operator> <name pos:start="85:37" pos:end="85:40">size</name></expr>;</condition> <incr pos:start="85:43" pos:end="85:45"><expr pos:start="85:43" pos:end="85:45"><name pos:start="85:43" pos:end="85:43">i</name><operator pos:start="85:44" pos:end="85:45">--</operator></expr></incr>)</control><block type="pseudo" pos:start="87:13" pos:end="87:36"><block_content pos:start="87:13" pos:end="87:36">

            <expr_stmt pos:start="87:13" pos:end="87:36"><expr pos:start="87:13" pos:end="87:35"><name pos:start="87:13" pos:end="87:18"><name pos:start="87:13" pos:end="87:15">len</name><index pos:start="87:16" pos:end="87:18">[<expr pos:start="87:17" pos:end="87:17"><name pos:start="87:17" pos:end="87:17">i</name></expr>]</index></name> <operator pos:start="87:20" pos:end="87:20">=</operator> <name pos:start="87:22" pos:end="87:31"><name pos:start="87:22" pos:end="87:24">len</name><index pos:start="87:25" pos:end="87:31">[<expr pos:start="87:26" pos:end="87:30"><name pos:start="87:26" pos:end="87:30"><name pos:start="87:26" pos:end="87:27">up</name><index pos:start="87:28" pos:end="87:30">[<expr pos:start="87:29" pos:end="87:29"><name pos:start="87:29" pos:end="87:29">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="87:33" pos:end="87:33">+</operator> <literal type="number" pos:start="87:35" pos:end="87:35">1</literal></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="89:9" pos:end="95:9">for <control pos:start="89:13" pos:end="89:34">(<init pos:start="89:14" pos:end="89:19"><expr pos:start="89:14" pos:end="89:18"><name pos:start="89:14" pos:end="89:14">i</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="number" pos:start="89:18" pos:end="89:18">0</literal></expr>;</init> <condition pos:start="89:21" pos:end="89:29"><expr pos:start="89:21" pos:end="89:28"><name pos:start="89:21" pos:end="89:21">i</name> <operator pos:start="89:23" pos:end="89:23">&lt;</operator> <name pos:start="89:25" pos:end="89:28">size</name></expr>;</condition> <incr pos:start="89:31" pos:end="89:33"><expr pos:start="89:31" pos:end="89:33"><name pos:start="89:31" pos:end="89:31">i</name><operator pos:start="89:32" pos:end="89:33">++</operator></expr></incr>)</control> <block pos:start="89:36" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:41">

            <expr_stmt pos:start="91:13" pos:end="91:41"><expr pos:start="91:13" pos:end="91:40"><name pos:start="91:13" pos:end="91:23"><name pos:start="91:13" pos:end="91:15">dst</name><index pos:start="91:16" pos:end="91:23">[<expr pos:start="91:17" pos:end="91:22"><name pos:start="91:17" pos:end="91:22"><name pos:start="91:17" pos:end="91:19">map</name><index pos:start="91:20" pos:end="91:22">[<expr pos:start="91:21" pos:end="91:21"><name pos:start="91:21" pos:end="91:21">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="91:25" pos:end="91:25">=</operator> <name pos:start="91:27" pos:end="91:36"><name pos:start="91:27" pos:end="91:29">len</name><index pos:start="91:30" pos:end="91:36">[<expr pos:start="91:31" pos:end="91:35"><name pos:start="91:31" pos:end="91:35"><name pos:start="91:31" pos:end="91:32">up</name><index pos:start="91:33" pos:end="91:35">[<expr pos:start="91:34" pos:end="91:34"><name pos:start="91:34" pos:end="91:34">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="91:38" pos:end="91:38">+</operator> <literal type="number" pos:start="91:40" pos:end="91:40">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="93:41"><if pos:start="93:13" pos:end="93:41">if <condition pos:start="93:16" pos:end="93:34">(<expr pos:start="93:17" pos:end="93:33"><name pos:start="93:17" pos:end="93:27"><name pos:start="93:17" pos:end="93:19">dst</name><index pos:start="93:20" pos:end="93:27">[<expr pos:start="93:21" pos:end="93:26"><name pos:start="93:21" pos:end="93:26"><name pos:start="93:21" pos:end="93:23">map</name><index pos:start="93:24" pos:end="93:26">[<expr pos:start="93:25" pos:end="93:25"><name pos:start="93:25" pos:end="93:25">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="93:29" pos:end="93:30">&gt;=</operator> <literal type="number" pos:start="93:32" pos:end="93:33">32</literal></expr>)</condition><block type="pseudo" pos:start="93:36" pos:end="93:41"><block_content pos:start="93:36" pos:end="93:41"> <break pos:start="93:36" pos:end="93:41">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="97:9" pos:end="97:27"><if pos:start="97:9" pos:end="97:27">if <condition pos:start="97:12" pos:end="97:20">(<expr pos:start="97:13" pos:end="97:19"><name pos:start="97:13" pos:end="97:13">i</name><operator pos:start="97:14" pos:end="97:15">==</operator><name pos:start="97:16" pos:end="97:19">size</name></expr>)</condition><block type="pseudo" pos:start="97:22" pos:end="97:27"><block_content pos:start="97:22" pos:end="97:27"> <break pos:start="97:22" pos:end="97:27">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>

<label pos:start="101:1" pos:end="101:4"><name pos:start="101:1" pos:end="101:3">end</name>:</label>

    <expr_stmt pos:start="103:5" pos:end="103:15"><expr pos:start="103:5" pos:end="103:14"><call pos:start="103:5" pos:end="103:14"><name pos:start="103:5" pos:end="103:11">av_free</name><argument_list pos:start="103:12" pos:end="103:14">(<argument pos:start="103:13" pos:end="103:13"><expr pos:start="103:13" pos:end="103:13"><name pos:start="103:13" pos:end="103:13">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:16"><expr pos:start="105:5" pos:end="105:15"><call pos:start="105:5" pos:end="105:15"><name pos:start="105:5" pos:end="105:11">av_free</name><argument_list pos:start="105:12" pos:end="105:15">(<argument pos:start="105:13" pos:end="105:14"><expr pos:start="105:13" pos:end="105:14"><name pos:start="105:13" pos:end="105:14">up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:17"><expr pos:start="107:5" pos:end="107:16"><call pos:start="107:5" pos:end="107:16"><name pos:start="107:5" pos:end="107:11">av_free</name><argument_list pos:start="107:12" pos:end="107:16">(<argument pos:start="107:13" pos:end="107:15"><expr pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:15">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:17"><expr pos:start="109:5" pos:end="109:16"><call pos:start="109:5" pos:end="109:16"><name pos:start="109:5" pos:end="109:11">av_free</name><argument_list pos:start="109:12" pos:end="109:16">(<argument pos:start="109:13" pos:end="109:15"><expr pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="111:5" pos:end="111:15">return <expr pos:start="111:12" pos:end="111:14"><name pos:start="111:12" pos:end="111:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
