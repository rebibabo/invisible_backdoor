<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19105.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:27"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name> <name pos:start="1:16" pos:end="1:27">coroutine_fn</name></type> <name pos:start="1:29" pos:end="1:58">bdrv_co_get_block_status_above</name><parameter_list pos:start="1:59" pos:end="13:32">(<parameter pos:start="1:60" pos:end="1:79"><decl pos:start="1:60" pos:end="1:79"><type pos:start="1:60" pos:end="1:79"><name pos:start="1:60" pos:end="1:75">BlockDriverState</name> <modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:79">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:30"><decl pos:start="3:9" pos:end="3:30"><type pos:start="3:9" pos:end="3:30"><name pos:start="3:9" pos:end="3:24">BlockDriverState</name> <modifier pos:start="3:26" pos:end="3:26">*</modifier></type><name pos:start="3:27" pos:end="3:30">base</name></decl></parameter>,

        <parameter pos:start="5:9" pos:end="5:22"><decl pos:start="5:9" pos:end="5:22"><type pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:12">bool</name></type> <name pos:start="5:14" pos:end="5:22">want_zero</name></decl></parameter>,

        <parameter pos:start="7:9" pos:end="7:26"><decl pos:start="7:9" pos:end="7:26"><type pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:15">int64_t</name></type> <name pos:start="7:17" pos:end="7:26">sector_num</name></decl></parameter>,

        <parameter pos:start="9:9" pos:end="9:22"><decl pos:start="9:9" pos:end="9:22"><type pos:start="9:9" pos:end="9:22"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:22">nb_sectors</name></decl></parameter>,

        <parameter pos:start="11:9" pos:end="11:17"><decl pos:start="11:9" pos:end="11:17"><type pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:11">int</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:17">pnum</name></decl></parameter>,

        <parameter pos:start="13:9" pos:end="13:31"><decl pos:start="13:9" pos:end="13:31"><type pos:start="13:9" pos:end="13:31"><name pos:start="13:9" pos:end="13:24">BlockDriverState</name> <modifier pos:start="13:26" pos:end="13:26">*</modifier><modifier pos:start="13:27" pos:end="13:27">*</modifier></type><name pos:start="13:28" pos:end="13:31">file</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="75:1">{<block_content pos:start="17:5" pos:end="73:15">

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">BlockDriverState</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:23">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:15">ret</name> <init pos:start="19:17" pos:end="19:19">= <expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:14">first</name> <init pos:start="21:16" pos:end="21:21">= <expr pos:start="21:18" pos:end="21:21"><name pos:start="21:18" pos:end="21:21">true</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:23"><expr pos:start="25:5" pos:end="25:22"><call pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:22">(<argument pos:start="25:12" pos:end="25:21"><expr pos:start="25:12" pos:end="25:21"><name pos:start="25:12" pos:end="25:13">bs</name> <operator pos:start="25:15" pos:end="25:16">!=</operator> <name pos:start="25:18" pos:end="25:21">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="27:5" pos:end="71:5">for <control pos:start="27:9" pos:end="27:46">(<init pos:start="27:10" pos:end="27:16"><expr pos:start="27:10" pos:end="27:15"><name pos:start="27:10" pos:end="27:10">p</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:15">bs</name></expr>;</init> <condition pos:start="27:18" pos:end="27:27"><expr pos:start="27:18" pos:end="27:26"><name pos:start="27:18" pos:end="27:18">p</name> <operator pos:start="27:20" pos:end="27:21">!=</operator> <name pos:start="27:23" pos:end="27:26">base</name></expr>;</condition> <incr pos:start="27:29" pos:end="27:45"><expr pos:start="27:29" pos:end="27:45"><name pos:start="27:29" pos:end="27:29">p</name> <operator pos:start="27:31" pos:end="27:31">=</operator> <call pos:start="27:33" pos:end="27:45"><name pos:start="27:33" pos:end="27:42">backing_bs</name><argument_list pos:start="27:43" pos:end="27:45">(<argument pos:start="27:44" pos:end="27:44"><expr pos:start="27:44" pos:end="27:44"><name pos:start="27:44" pos:end="27:44">p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="27:48" pos:end="71:5">{<block_content pos:start="29:9" pos:end="69:22">

        <expr_stmt pos:start="29:9" pos:end="31:51"><expr pos:start="29:9" pos:end="31:50"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="31:50"><name pos:start="29:15" pos:end="29:38">bdrv_co_get_block_status</name><argument_list pos:start="29:39" pos:end="31:50">(<argument pos:start="29:40" pos:end="29:40"><expr pos:start="29:40" pos:end="29:40"><name pos:start="29:40" pos:end="29:40">p</name></expr></argument>, <argument pos:start="29:43" pos:end="29:51"><expr pos:start="29:43" pos:end="29:51"><name pos:start="29:43" pos:end="29:51">want_zero</name></expr></argument>, <argument pos:start="29:54" pos:end="29:63"><expr pos:start="29:54" pos:end="29:63"><name pos:start="29:54" pos:end="29:63">sector_num</name></expr></argument>, <argument pos:start="29:66" pos:end="29:75"><expr pos:start="29:66" pos:end="29:75"><name pos:start="29:66" pos:end="29:75">nb_sectors</name></expr></argument>,

                                       <argument pos:start="31:40" pos:end="31:43"><expr pos:start="31:40" pos:end="31:43"><name pos:start="31:40" pos:end="31:43">pnum</name></expr></argument>, <argument pos:start="31:46" pos:end="31:49"><expr pos:start="31:46" pos:end="31:49"><name pos:start="31:46" pos:end="31:49">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:17">&lt;</operator> <literal type="number" pos:start="33:19" pos:end="33:19">0</literal></expr>)</condition> <block pos:start="33:22" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:18">

            <break pos:start="35:13" pos:end="35:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="55:9"><if pos:start="39:9" pos:end="55:9">if <condition pos:start="39:12" pos:end="39:68">(<expr pos:start="39:13" pos:end="39:67"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">&amp;</operator> <name pos:start="39:19" pos:end="39:33">BDRV_BLOCK_ZERO</name> <operator pos:start="39:35" pos:end="39:36">&amp;&amp;</operator> <name pos:start="39:38" pos:end="39:40">ret</name> <operator pos:start="39:42" pos:end="39:42">&amp;</operator> <name pos:start="39:44" pos:end="39:57">BDRV_BLOCK_EOF</name> <operator pos:start="39:59" pos:end="39:60">&amp;&amp;</operator> <operator pos:start="39:62" pos:end="39:62">!</operator><name pos:start="39:63" pos:end="39:67">first</name></expr>)</condition> <block pos:start="39:70" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:31">

            <comment type="block" pos:start="41:13" pos:end="51:15">/*

             * Reading beyond the end of the file continues to read

             * zeroes, but we can only widen the result to the

             * unallocated length we learned from an earlier

             * iteration.

             */</comment>

            <expr_stmt pos:start="53:13" pos:end="53:31"><expr pos:start="53:13" pos:end="53:30"><operator pos:start="53:13" pos:end="53:13">*</operator><name pos:start="53:14" pos:end="53:17">pnum</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:30">nb_sectors</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:54">(<expr pos:start="57:13" pos:end="57:53"><name pos:start="57:13" pos:end="57:15">ret</name> <operator pos:start="57:17" pos:end="57:17">&amp;</operator> <operator pos:start="57:19" pos:end="57:19">(</operator><name pos:start="57:20" pos:end="57:34">BDRV_BLOCK_ZERO</name> <operator pos:start="57:36" pos:end="57:36">|</operator> <name pos:start="57:38" pos:end="57:52">BDRV_BLOCK_DATA</name><operator pos:start="57:53" pos:end="57:53">)</operator></expr>)</condition> <block pos:start="57:56" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:18">

            <break pos:start="59:13" pos:end="59:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="63:9" pos:end="65:58">/* [sector_num, pnum] unallocated on this layer, which could be only

         * the first part of [sector_num, nb_sectors].  */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:44"><expr pos:start="67:9" pos:end="67:43"><name pos:start="67:9" pos:end="67:18">nb_sectors</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <call pos:start="67:22" pos:end="67:43"><name pos:start="67:22" pos:end="67:24">MIN</name><argument_list pos:start="67:25" pos:end="67:43">(<argument pos:start="67:26" pos:end="67:35"><expr pos:start="67:26" pos:end="67:35"><name pos:start="67:26" pos:end="67:35">nb_sectors</name></expr></argument>, <argument pos:start="67:38" pos:end="67:42"><expr pos:start="67:38" pos:end="67:42"><operator pos:start="67:38" pos:end="67:38">*</operator><name pos:start="67:39" pos:end="67:42">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:22"><expr pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:13">first</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <name pos:start="69:17" pos:end="69:21">false</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="73:5" pos:end="73:15">return <expr pos:start="73:12" pos:end="73:14"><name pos:start="73:12" pos:end="73:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
