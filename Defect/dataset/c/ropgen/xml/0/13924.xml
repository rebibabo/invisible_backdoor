<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13924.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:39">dvbsub_parse_object_segment</name><parameter_list pos:start="1:40" pos:end="3:73">(<parameter pos:start="1:41" pos:end="1:61"><decl pos:start="1:41" pos:end="1:61"><type pos:start="1:41" pos:end="1:61"><name pos:start="1:41" pos:end="1:54">AVCodecContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">avctx</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:58"><decl pos:start="3:41" pos:end="3:58"><type pos:start="3:41" pos:end="3:58"><specifier pos:start="3:41" pos:end="3:45">const</specifier> <name pos:start="3:47" pos:end="3:53">uint8_t</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:58">buf</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:72"><decl pos:start="3:61" pos:end="3:72"><type pos:start="3:61" pos:end="3:72"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:72">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="115:1">{<block_content pos:start="7:5" pos:end="111:5">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">DVBSubContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">ctx</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:30">avctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:26">buf_end</name> <init pos:start="11:28" pos:end="11:43">= <expr pos:start="11:30" pos:end="11:43"><name pos:start="11:30" pos:end="11:32">buf</name> <operator pos:start="11:34" pos:end="11:34">+</operator> <name pos:start="11:36" pos:end="11:43">buf_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:24">block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">object_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">DVBSubObject</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">object</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:23">DVBSubObjectDisplay</name> <modifier pos:start="19:25" pos:end="19:25">*</modifier></type><name pos:start="19:26" pos:end="19:32">display</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:21">top_field_len</name></decl>, <decl pos:start="21:24" pos:end="21:39"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:24" pos:end="21:39">bottom_field_len</name></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="25:43"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:21">coding_method</name></decl>, <decl pos:start="25:24" pos:end="25:42"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:24" pos:end="25:42">non_modifying_color</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:29"><expr pos:start="29:5" pos:end="29:28"><name pos:start="29:5" pos:end="29:13">object_id</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:28"><name pos:start="29:17" pos:end="29:23">AV_RB16</name><argument_list pos:start="29:24" pos:end="29:28">(<argument pos:start="29:25" pos:end="29:27"><expr pos:start="29:25" pos:end="29:27"><name pos:start="29:25" pos:end="29:27">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:13"><expr pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:7">buf</name> <operator pos:start="31:9" pos:end="31:10">+=</operator> <literal type="number" pos:start="31:12" pos:end="31:12">2</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:10">object</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="35:39"><name pos:start="35:14" pos:end="35:23">get_object</name><argument_list pos:start="35:24" pos:end="35:39">(<argument pos:start="35:25" pos:end="35:27"><expr pos:start="35:25" pos:end="35:27"><name pos:start="35:25" pos:end="35:27">ctx</name></expr></argument>, <argument pos:start="35:30" pos:end="35:38"><expr pos:start="35:30" pos:end="35:38"><name pos:start="35:30" pos:end="35:38">object_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="41:15"><if pos:start="39:5" pos:end="41:15">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:15">object</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:15"><block_content pos:start="41:9" pos:end="41:15">

        <return pos:start="41:9" pos:end="41:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:38"><expr pos:start="45:5" pos:end="45:37"><name pos:start="45:5" pos:end="45:17">coding_method</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <operator pos:start="45:21" pos:end="45:21">(</operator><operator pos:start="45:22" pos:end="45:22">(</operator><operator pos:start="45:23" pos:end="45:23">*</operator><name pos:start="45:24" pos:end="45:26">buf</name><operator pos:start="45:27" pos:end="45:27">)</operator> <operator pos:start="45:29" pos:end="45:30">&gt;&gt;</operator> <literal type="number" pos:start="45:32" pos:end="45:32">2</literal><operator pos:start="45:33" pos:end="45:33">)</operator> <operator pos:start="45:35" pos:end="45:35">&amp;</operator> <literal type="number" pos:start="45:37" pos:end="45:37">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:46"><expr pos:start="47:5" pos:end="47:45"><name pos:start="47:5" pos:end="47:23">non_modifying_color</name> <operator pos:start="47:25" pos:end="47:25">=</operator> <operator pos:start="47:27" pos:end="47:27">(</operator><operator pos:start="47:28" pos:end="47:28">(</operator><operator pos:start="47:29" pos:end="47:29">*</operator><name pos:start="47:30" pos:end="47:32">buf</name><operator pos:start="47:33" pos:end="47:34">++</operator><operator pos:start="47:35" pos:end="47:35">)</operator> <operator pos:start="47:37" pos:end="47:38">&gt;&gt;</operator> <literal type="number" pos:start="47:40" pos:end="47:40">1</literal><operator pos:start="47:41" pos:end="47:41">)</operator> <operator pos:start="47:43" pos:end="47:43">&amp;</operator> <literal type="number" pos:start="47:45" pos:end="47:45">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="111:5"><if pos:start="51:5" pos:end="107:5">if <condition pos:start="51:8" pos:end="51:27">(<expr pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:21">coding_method</name> <operator pos:start="51:23" pos:end="51:24">==</operator> <literal type="number" pos:start="51:26" pos:end="51:26">0</literal></expr>)</condition> <block pos:start="51:29" pos:end="107:5">{<block_content pos:start="53:9" pos:end="99:9">

        <expr_stmt pos:start="53:9" pos:end="53:37"><expr pos:start="53:9" pos:end="53:36"><name pos:start="53:9" pos:end="53:21">top_field_len</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <call pos:start="53:25" pos:end="53:36"><name pos:start="53:25" pos:end="53:31">AV_RB16</name><argument_list pos:start="53:32" pos:end="53:36">(<argument pos:start="53:33" pos:end="53:35"><expr pos:start="53:33" pos:end="53:35"><name pos:start="53:33" pos:end="53:35">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:17"><expr pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:11">buf</name> <operator pos:start="55:13" pos:end="55:14">+=</operator> <literal type="number" pos:start="55:16" pos:end="55:16">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:40"><expr pos:start="57:9" pos:end="57:39"><name pos:start="57:9" pos:end="57:24">bottom_field_len</name> <operator pos:start="57:26" pos:end="57:26">=</operator> <call pos:start="57:28" pos:end="57:39"><name pos:start="57:28" pos:end="57:34">AV_RB16</name><argument_list pos:start="57:35" pos:end="57:39">(<argument pos:start="57:36" pos:end="57:38"><expr pos:start="57:36" pos:end="57:38"><name pos:start="57:36" pos:end="57:38">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:17"><expr pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:11">buf</name> <operator pos:start="59:13" pos:end="59:14">+=</operator> <literal type="number" pos:start="59:16" pos:end="59:16">2</literal></expr>;</expr_stmt>



        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:61">(<expr pos:start="63:13" pos:end="63:60"><name pos:start="63:13" pos:end="63:15">buf</name> <operator pos:start="63:17" pos:end="63:17">+</operator> <name pos:start="63:19" pos:end="63:31">top_field_len</name> <operator pos:start="63:33" pos:end="63:33">+</operator> <name pos:start="63:35" pos:end="63:50">bottom_field_len</name> <operator pos:start="63:52" pos:end="63:52">&gt;</operator> <name pos:start="63:54" pos:end="63:60">buf_end</name></expr>)</condition> <block pos:start="63:63" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:19">

            <expr_stmt pos:start="65:13" pos:end="65:71"><expr pos:start="65:13" pos:end="65:70"><call pos:start="65:13" pos:end="65:70"><name pos:start="65:13" pos:end="65:18">av_log</name><argument_list pos:start="65:19" pos:end="65:70">(<argument pos:start="65:20" pos:end="65:24"><expr pos:start="65:20" pos:end="65:24"><name pos:start="65:20" pos:end="65:24">avctx</name></expr></argument>, <argument pos:start="65:27" pos:end="65:38"><expr pos:start="65:27" pos:end="65:38"><name pos:start="65:27" pos:end="65:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:41" pos:end="65:69"><expr pos:start="65:41" pos:end="65:69"><literal type="string" pos:start="65:41" pos:end="65:69">"Field data size too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <for pos:start="73:9" pos:end="99:9">for <control pos:start="73:13" pos:end="73:90">(<init pos:start="73:14" pos:end="73:44"><expr pos:start="73:14" pos:end="73:43"><name pos:start="73:14" pos:end="73:20">display</name> <operator pos:start="73:22" pos:end="73:22">=</operator> <name pos:start="73:24" pos:end="73:43"><name pos:start="73:24" pos:end="73:29">object</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:43">display_list</name></name></expr>;</init> <condition pos:start="73:46" pos:end="73:53"><expr pos:start="73:46" pos:end="73:52"><name pos:start="73:46" pos:end="73:52">display</name></expr>;</condition> <incr pos:start="73:55" pos:end="73:89"><expr pos:start="73:55" pos:end="73:89"><name pos:start="73:55" pos:end="73:61">display</name> <operator pos:start="73:63" pos:end="73:63">=</operator> <name pos:start="73:65" pos:end="73:89"><name pos:start="73:65" pos:end="73:71">display</name><operator pos:start="73:72" pos:end="73:73">-&gt;</operator><name pos:start="73:74" pos:end="73:89">object_list_next</name></name></expr></incr>)</control> <block pos:start="73:92" pos:end="99:9">{<block_content pos:start="75:13" pos:end="97:65">

            <expr_stmt pos:start="75:13" pos:end="75:24"><expr pos:start="75:13" pos:end="75:23"><name pos:start="75:13" pos:end="75:17">block</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:23">buf</name></expr>;</expr_stmt>



            <expr_stmt pos:start="79:13" pos:end="81:65"><expr pos:start="79:13" pos:end="81:64"><call pos:start="79:13" pos:end="81:64"><name pos:start="79:13" pos:end="79:41">dvbsub_parse_pixel_data_block</name><argument_list pos:start="79:42" pos:end="81:64">(<argument pos:start="79:43" pos:end="79:47"><expr pos:start="79:43" pos:end="79:47"><name pos:start="79:43" pos:end="79:47">avctx</name></expr></argument>, <argument pos:start="79:50" pos:end="79:56"><expr pos:start="79:50" pos:end="79:56"><name pos:start="79:50" pos:end="79:56">display</name></expr></argument>, <argument pos:start="79:59" pos:end="79:63"><expr pos:start="79:59" pos:end="79:63"><name pos:start="79:59" pos:end="79:63">block</name></expr></argument>, <argument pos:start="79:66" pos:end="79:78"><expr pos:start="79:66" pos:end="79:78"><name pos:start="79:66" pos:end="79:78">top_field_len</name></expr></argument>, <argument pos:start="79:81" pos:end="79:81"><expr pos:start="79:81" pos:end="79:81"><literal type="number" pos:start="79:81" pos:end="79:81">0</literal></expr></argument>,

                                            <argument pos:start="81:45" pos:end="81:63"><expr pos:start="81:45" pos:end="81:63"><name pos:start="81:45" pos:end="81:63">non_modifying_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="85:13" pos:end="91:49"><if pos:start="85:13" pos:end="87:44">if <condition pos:start="85:16" pos:end="85:37">(<expr pos:start="85:17" pos:end="85:36"><name pos:start="85:17" pos:end="85:32">bottom_field_len</name> <operator pos:start="85:34" pos:end="85:34">&gt;</operator> <literal type="number" pos:start="85:36" pos:end="85:36">0</literal></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="87:44"><block_content pos:start="87:17" pos:end="87:44">

                <expr_stmt pos:start="87:17" pos:end="87:44"><expr pos:start="87:17" pos:end="87:43"><name pos:start="87:17" pos:end="87:21">block</name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:27">buf</name> <operator pos:start="87:29" pos:end="87:29">+</operator> <name pos:start="87:31" pos:end="87:43">top_field_len</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="89:13" pos:end="91:49">else<block type="pseudo" pos:start="91:17" pos:end="91:49"><block_content pos:start="91:17" pos:end="91:49">

                <expr_stmt pos:start="91:17" pos:end="91:49"><expr pos:start="91:17" pos:end="91:48"><name pos:start="91:17" pos:end="91:32">bottom_field_len</name> <operator pos:start="91:34" pos:end="91:34">=</operator> <name pos:start="91:36" pos:end="91:48">top_field_len</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="95:13" pos:end="97:65"><expr pos:start="95:13" pos:end="97:64"><call pos:start="95:13" pos:end="97:64"><name pos:start="95:13" pos:end="95:41">dvbsub_parse_pixel_data_block</name><argument_list pos:start="95:42" pos:end="97:64">(<argument pos:start="95:43" pos:end="95:47"><expr pos:start="95:43" pos:end="95:47"><name pos:start="95:43" pos:end="95:47">avctx</name></expr></argument>, <argument pos:start="95:50" pos:end="95:56"><expr pos:start="95:50" pos:end="95:56"><name pos:start="95:50" pos:end="95:56">display</name></expr></argument>, <argument pos:start="95:59" pos:end="95:63"><expr pos:start="95:59" pos:end="95:63"><name pos:start="95:59" pos:end="95:63">block</name></expr></argument>, <argument pos:start="95:66" pos:end="95:81"><expr pos:start="95:66" pos:end="95:81"><name pos:start="95:66" pos:end="95:81">bottom_field_len</name></expr></argument>, <argument pos:start="95:84" pos:end="95:84"><expr pos:start="95:84" pos:end="95:84"><literal type="number" pos:start="95:84" pos:end="95:84">1</literal></expr></argument>,

                                            <argument pos:start="97:45" pos:end="97:63"><expr pos:start="97:45" pos:end="97:63"><name pos:start="97:45" pos:end="97:63">non_modifying_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



<comment type="block" pos:start="103:1" pos:end="103:38">/*  } else if (coding_method == 1) {*/</comment>



    </block_content>}</block></if> <else pos:start="107:7" pos:end="111:5">else <block pos:start="107:12" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:81">

        <expr_stmt pos:start="109:9" pos:end="109:81"><expr pos:start="109:9" pos:end="109:80"><call pos:start="109:9" pos:end="109:80"><name pos:start="109:9" pos:end="109:14">av_log</name><argument_list pos:start="109:15" pos:end="109:80">(<argument pos:start="109:16" pos:end="109:20"><expr pos:start="109:16" pos:end="109:20"><name pos:start="109:16" pos:end="109:20">avctx</name></expr></argument>, <argument pos:start="109:23" pos:end="109:34"><expr pos:start="109:23" pos:end="109:34"><name pos:start="109:23" pos:end="109:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:37" pos:end="109:64"><expr pos:start="109:37" pos:end="109:64"><literal type="string" pos:start="109:37" pos:end="109:64">"Unknown object coding %d\n"</literal></expr></argument>, <argument pos:start="109:67" pos:end="109:79"><expr pos:start="109:67" pos:end="109:79"><name pos:start="109:67" pos:end="109:79">coding_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



</block_content>}</block></function>
</unit>
