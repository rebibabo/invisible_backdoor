<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20565.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:33">ff_wmv2_decode_picture_header</name><parameter_list pos:start="1:34" pos:end="1:53">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:48">MpegEncContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type> <name pos:start="1:52" pos:end="1:52">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:15">Wmv2Context</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier> <specifier pos:start="5:19" pos:end="5:23">const</specifier></type> <name pos:start="5:25" pos:end="5:25">w</name><init pos:start="5:26" pos:end="5:42">= <expr pos:start="5:28" pos:end="5:42"><operator pos:start="5:28" pos:end="5:28">(</operator><name pos:start="5:29" pos:end="5:39">Wmv2Context</name><operator pos:start="5:40" pos:end="5:40">*</operator><operator pos:start="5:41" pos:end="5:41">)</operator><name pos:start="5:42" pos:end="5:42">s</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="30:0"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">code</name></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:5">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:5"><literal type="number" pos:start="11:5" pos:end="11:5">0</literal></expr></cpp:if>

{

int i;

for(i=0; i&lt;s-&gt;gb.size*8; i++)

    printf("%d", get_bits1(&amp;s-&gt;gb));

<comment type="line" pos:start="21:1" pos:end="21:24">//    get_bits1(&amp;s-&gt;gb);</comment>

printf("END\n");

return -1;

}

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="31:5" pos:end="33:29"><if pos:start="31:5" pos:end="33:29">if<condition pos:start="31:7" pos:end="31:28">(<expr pos:start="31:8" pos:end="31:27"><name pos:start="31:8" pos:end="31:24"><name pos:start="31:8" pos:end="31:8">s</name><operator pos:start="31:9" pos:end="31:10">-&gt;</operator><name pos:start="31:11" pos:end="31:24">picture_number</name></name><operator pos:start="31:25" pos:end="31:26">==</operator><literal type="number" pos:start="31:27" pos:end="31:27">0</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:29"><block_content pos:start="33:9" pos:end="33:29">

        <expr_stmt pos:start="33:9" pos:end="33:29"><expr pos:start="33:9" pos:end="33:28"><call pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:25">decode_ext_header</name><argument_list pos:start="33:26" pos:end="33:28">(<argument pos:start="33:27" pos:end="33:27"><expr pos:start="33:27" pos:end="33:27"><name pos:start="33:27" pos:end="33:27">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:41"><expr pos:start="37:5" pos:end="37:40"><name pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:16">pict_type</name></name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:36"><name pos:start="37:20" pos:end="37:28">get_bits1</name><argument_list pos:start="37:29" pos:end="37:36">(<argument pos:start="37:30" pos:end="37:35"><expr pos:start="37:30" pos:end="37:35"><operator pos:start="37:30" pos:end="37:30">&amp;</operator><name pos:start="37:31" pos:end="37:35"><name pos:start="37:31" pos:end="37:31">s</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:35">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="37:38" pos:end="37:38">+</operator> <literal type="number" pos:start="37:40" pos:end="37:40">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if<condition pos:start="39:7" pos:end="39:30">(<expr pos:start="39:8" pos:end="39:29"><name pos:start="39:8" pos:end="39:19"><name pos:start="39:8" pos:end="39:8">s</name><operator pos:start="39:9" pos:end="39:10">-&gt;</operator><name pos:start="39:11" pos:end="39:19">pict_type</name></name> <operator pos:start="39:21" pos:end="39:22">==</operator> <name pos:start="39:24" pos:end="39:29">I_TYPE</name></expr>)</condition><block pos:start="39:31" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:57">

        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:12">code</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:34"><name pos:start="41:16" pos:end="41:23">get_bits</name><argument_list pos:start="41:24" pos:end="41:34">(<argument pos:start="41:25" pos:end="41:30"><expr pos:start="41:25" pos:end="41:30"><operator pos:start="41:25" pos:end="41:25">&amp;</operator><name pos:start="41:26" pos:end="41:30"><name pos:start="41:26" pos:end="41:26">s</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:30">gb</name></name></expr></argument>, <argument pos:start="41:33" pos:end="41:33"><expr pos:start="41:33" pos:end="41:33"><literal type="number" pos:start="41:33" pos:end="41:33">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:57"><expr pos:start="43:9" pos:end="43:56"><call pos:start="43:9" pos:end="43:56"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:56">(<argument pos:start="43:16" pos:end="43:23"><expr pos:start="43:16" pos:end="43:23"><name pos:start="43:16" pos:end="43:23"><name pos:start="43:16" pos:end="43:16">s</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:23">avctx</name></name></expr></argument>, <argument pos:start="43:26" pos:end="43:37"><expr pos:start="43:26" pos:end="43:37"><name pos:start="43:26" pos:end="43:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="43:40" pos:end="43:49"><expr pos:start="43:40" pos:end="43:49"><literal type="string" pos:start="43:40" pos:end="43:49">"I7:%X/\n"</literal></expr></argument>, <argument pos:start="43:52" pos:end="43:55"><expr pos:start="43:52" pos:end="43:55"><name pos:start="43:52" pos:end="43:55">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:54"><expr pos:start="47:5" pos:end="47:53"><name pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:20">chroma_qscale</name></name><operator pos:start="47:21" pos:end="47:21">=</operator> <name pos:start="47:23" pos:end="47:31"><name pos:start="47:23" pos:end="47:23">s</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:31">qscale</name></name> <operator pos:start="47:33" pos:end="47:33">=</operator> <call pos:start="47:35" pos:end="47:53"><name pos:start="47:35" pos:end="47:42">get_bits</name><argument_list pos:start="47:43" pos:end="47:53">(<argument pos:start="47:44" pos:end="47:49"><expr pos:start="47:44" pos:end="47:49"><operator pos:start="47:44" pos:end="47:44">&amp;</operator><name pos:start="47:45" pos:end="47:49"><name pos:start="47:45" pos:end="47:45">s</name><operator pos:start="47:46" pos:end="47:47">-&gt;</operator><name pos:start="47:48" pos:end="47:49">gb</name></name></expr></argument>, <argument pos:start="47:52" pos:end="47:52"><expr pos:start="47:52" pos:end="47:52"><literal type="number" pos:start="47:52" pos:end="47:52">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="51:17"><if pos:start="49:5" pos:end="51:17">if<condition pos:start="49:7" pos:end="49:21">(<expr pos:start="49:8" pos:end="49:20"><name pos:start="49:8" pos:end="49:16"><name pos:start="49:8" pos:end="49:8">s</name><operator pos:start="49:9" pos:end="49:10">-&gt;</operator><name pos:start="49:11" pos:end="49:16">qscale</name></name> <operator pos:start="49:18" pos:end="49:18">&lt;</operator> <literal type="number" pos:start="49:20" pos:end="49:20">0</literal></expr>)</condition><block type="pseudo" pos:start="51:8" pos:end="51:17"><block_content pos:start="51:8" pos:end="51:17">

       <return pos:start="51:8" pos:end="51:17">return <expr pos:start="51:15" pos:end="51:16"><operator pos:start="51:15" pos:end="51:15">-</operator><literal type="number" pos:start="51:16" pos:end="51:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="55:5" pos:end="55:13">return <expr pos:start="55:12" pos:end="55:12"><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
