<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22992.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">asf_get_packet</name><parameter_list pos:start="1:26" pos:end="1:45">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:43"><name pos:start="1:27" pos:end="1:41">AVFormatContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">ASFContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">asf</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">ByteIOContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">pb</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:30"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:30">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:26">packet_length</name></decl>, <decl pos:start="9:29" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:29" pos:end="9:35">padsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">rsize</name> <init pos:start="11:15" pos:end="11:17">= <expr pos:start="11:17" pos:end="11:17"><literal type="number" pos:start="11:17" pos:end="11:17">9</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">c</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:21"><expr pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:5">c</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <call pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:16">get_byte</name><argument_list pos:start="17:17" pos:end="17:20">(<argument pos:start="17:18" pos:end="17:19"><expr pos:start="17:18" pos:end="17:19"><name pos:start="17:18" pos:end="17:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:9">c</name> <operator pos:start="19:11" pos:end="19:12">!=</operator> <literal type="number" pos:start="19:14" pos:end="19:17">0x82</literal></expr>)</condition> <block pos:start="19:20" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:94">

        <if_stmt pos:start="21:9" pos:end="23:94"><if pos:start="21:9" pos:end="23:94">if <condition pos:start="21:12" pos:end="21:26">(<expr pos:start="21:13" pos:end="21:25"><operator pos:start="21:13" pos:end="21:13">!</operator><call pos:start="21:14" pos:end="21:25"><name pos:start="21:14" pos:end="21:21">url_feof</name><argument_list pos:start="21:22" pos:end="21:25">(<argument pos:start="21:23" pos:end="21:24"><expr pos:start="21:23" pos:end="21:24"><name pos:start="21:23" pos:end="21:24">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:94"><block_content pos:start="23:13" pos:end="23:94">

            <expr_stmt pos:start="23:13" pos:end="23:94"><expr pos:start="23:13" pos:end="23:93"><call pos:start="23:13" pos:end="23:93"><name pos:start="23:13" pos:end="23:18">av_log</name><argument_list pos:start="23:19" pos:end="23:93">(<argument pos:start="23:20" pos:end="23:20"><expr pos:start="23:20" pos:end="23:20"><name pos:start="23:20" pos:end="23:20">s</name></expr></argument>, <argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:37" pos:end="23:74"><expr pos:start="23:37" pos:end="23:74"><literal type="string" pos:start="23:37" pos:end="23:64">"ff asf bad header %x  at:%"</literal><name pos:start="23:65" pos:end="23:70">PRId64</name><literal type="string" pos:start="23:71" pos:end="23:74">"\n"</literal></expr></argument>, <argument pos:start="23:77" pos:end="23:77"><expr pos:start="23:77" pos:end="23:77"><name pos:start="23:77" pos:end="23:77">c</name></expr></argument>, <argument pos:start="23:80" pos:end="23:92"><expr pos:start="23:80" pos:end="23:92"><call pos:start="23:80" pos:end="23:92"><name pos:start="23:80" pos:end="23:88">url_ftell</name><argument_list pos:start="23:89" pos:end="23:92">(<argument pos:start="23:90" pos:end="23:91"><expr pos:start="23:90" pos:end="23:91"><name pos:start="23:90" pos:end="23:91">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="49:5"><if pos:start="27:5" pos:end="49:5">if <condition pos:start="27:8" pos:end="27:24">(<expr pos:start="27:9" pos:end="27:23"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:10">c</name> <operator pos:start="27:12" pos:end="27:12">&amp;</operator> <literal type="number" pos:start="27:14" pos:end="27:17">0x0f</literal><operator pos:start="27:18" pos:end="27:18">)</operator> <operator pos:start="27:20" pos:end="27:21">==</operator> <literal type="number" pos:start="27:23" pos:end="27:23">2</literal></expr>)</condition> <block pos:start="27:26" pos:end="49:5">{<block_content pos:start="29:9" pos:end="39:17"> <comment type="line" pos:start="27:28" pos:end="27:49">// always true for now</comment>

        <if_stmt pos:start="29:9" pos:end="37:9"><if pos:start="29:9" pos:end="37:9">if <condition pos:start="29:12" pos:end="29:30">(<expr pos:start="29:13" pos:end="29:29"><call pos:start="29:13" pos:end="29:24"><name pos:start="29:13" pos:end="29:20">get_le16</name><argument_list pos:start="29:21" pos:end="29:24">(<argument pos:start="29:22" pos:end="29:23"><expr pos:start="29:22" pos:end="29:23"><name pos:start="29:22" pos:end="29:23">pb</name></expr></argument>)</argument_list></call> <operator pos:start="29:26" pos:end="29:27">!=</operator> <literal type="number" pos:start="29:29" pos:end="29:29">0</literal></expr>)</condition> <block pos:start="29:32" pos:end="37:9">{<block_content pos:start="31:13" pos:end="35:30">

            <if_stmt pos:start="31:13" pos:end="33:65"><if pos:start="31:13" pos:end="33:65">if <condition pos:start="31:16" pos:end="31:30">(<expr pos:start="31:17" pos:end="31:29"><operator pos:start="31:17" pos:end="31:17">!</operator><call pos:start="31:18" pos:end="31:29"><name pos:start="31:18" pos:end="31:25">url_feof</name><argument_list pos:start="31:26" pos:end="31:29">(<argument pos:start="31:27" pos:end="31:28"><expr pos:start="31:27" pos:end="31:28"><name pos:start="31:27" pos:end="31:28">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="33:17" pos:end="33:65"><block_content pos:start="33:17" pos:end="33:65">

                <expr_stmt pos:start="33:17" pos:end="33:65"><expr pos:start="33:17" pos:end="33:64"><call pos:start="33:17" pos:end="33:64"><name pos:start="33:17" pos:end="33:22">av_log</name><argument_list pos:start="33:23" pos:end="33:64">(<argument pos:start="33:24" pos:end="33:24"><expr pos:start="33:24" pos:end="33:24"><name pos:start="33:24" pos:end="33:24">s</name></expr></argument>, <argument pos:start="33:27" pos:end="33:38"><expr pos:start="33:27" pos:end="33:38"><name pos:start="33:27" pos:end="33:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:41" pos:end="33:63"><expr pos:start="33:41" pos:end="33:63"><literal type="string" pos:start="33:41" pos:end="33:63">"ff asf bad non zero\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return pos:start="35:13" pos:end="35:30">return <expr pos:start="35:20" pos:end="35:29"><name pos:start="35:20" pos:end="35:29">AVERROR_IO</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:17"><expr pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:13">rsize</name><operator pos:start="39:14" pos:end="39:15">+=</operator><literal type="number" pos:start="39:16" pos:end="39:16">2</literal></expr>;</expr_stmt>

<comment type="block" pos:start="41:1" pos:end="47:28">/*    }else{

        if (!url_feof(pb))

            printf("ff asf bad header %x  at:%"PRId64"\n", c, url_ftell(pb));

        return AVERROR_IO;*/</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:37"><expr pos:start="53:5" pos:end="53:36"><name pos:start="53:5" pos:end="53:21"><name pos:start="53:5" pos:end="53:7">asf</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:21">packet_flags</name></name> <operator pos:start="53:23" pos:end="53:23">=</operator> <call pos:start="53:25" pos:end="53:36"><name pos:start="53:25" pos:end="53:32">get_byte</name><argument_list pos:start="53:33" pos:end="53:36">(<argument pos:start="53:34" pos:end="53:35"><expr pos:start="53:34" pos:end="53:35"><name pos:start="53:34" pos:end="53:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:40"><expr pos:start="55:5" pos:end="55:39"><name pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:7">asf</name><operator pos:start="55:8" pos:end="55:9">-&gt;</operator><name pos:start="55:10" pos:end="55:24">packet_property</name></name> <operator pos:start="55:26" pos:end="55:26">=</operator> <call pos:start="55:28" pos:end="55:39"><name pos:start="55:28" pos:end="55:35">get_byte</name><argument_list pos:start="55:36" pos:end="55:39">(<argument pos:start="55:37" pos:end="55:38"><expr pos:start="55:37" pos:end="55:38"><name pos:start="55:37" pos:end="55:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:70"><expr pos:start="59:5" pos:end="59:69"><call pos:start="59:5" pos:end="59:69"><name pos:start="59:5" pos:end="59:12">DO_2BITS</name><argument_list pos:start="59:13" pos:end="59:69">(<argument pos:start="59:14" pos:end="59:35"><expr pos:start="59:14" pos:end="59:35"><name pos:start="59:14" pos:end="59:30"><name pos:start="59:14" pos:end="59:16">asf</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:30">packet_flags</name></name> <operator pos:start="59:32" pos:end="59:33">&gt;&gt;</operator> <literal type="number" pos:start="59:35" pos:end="59:35">5</literal></expr></argument>, <argument pos:start="59:38" pos:end="59:50"><expr pos:start="59:38" pos:end="59:50"><name pos:start="59:38" pos:end="59:50">packet_length</name></expr></argument>, <argument pos:start="59:53" pos:end="59:68"><expr pos:start="59:53" pos:end="59:68"><name pos:start="59:53" pos:end="59:68"><name pos:start="59:53" pos:end="59:55">asf</name><operator pos:start="59:56" pos:end="59:57">-&gt;</operator><name pos:start="59:58" pos:end="59:68">packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:49"><expr pos:start="61:5" pos:end="61:48"><call pos:start="61:5" pos:end="61:48"><name pos:start="61:5" pos:end="61:12">DO_2BITS</name><argument_list pos:start="61:13" pos:end="61:48">(<argument pos:start="61:14" pos:end="61:35"><expr pos:start="61:14" pos:end="61:35"><name pos:start="61:14" pos:end="61:30"><name pos:start="61:14" pos:end="61:16">asf</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:30">packet_flags</name></name> <operator pos:start="61:32" pos:end="61:33">&gt;&gt;</operator> <literal type="number" pos:start="61:35" pos:end="61:35">1</literal></expr></argument>, <argument pos:start="61:38" pos:end="61:44"><expr pos:start="61:38" pos:end="61:44"><name pos:start="61:38" pos:end="61:44">padsize</name></expr></argument>, <argument pos:start="61:47" pos:end="61:47"><expr pos:start="61:47" pos:end="61:47"><literal type="number" pos:start="61:47" pos:end="61:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="61:51" pos:end="61:69">// sequence ignored</comment>

    <expr_stmt pos:start="63:5" pos:end="63:49"><expr pos:start="63:5" pos:end="63:48"><call pos:start="63:5" pos:end="63:48"><name pos:start="63:5" pos:end="63:12">DO_2BITS</name><argument_list pos:start="63:13" pos:end="63:48">(<argument pos:start="63:14" pos:end="63:35"><expr pos:start="63:14" pos:end="63:35"><name pos:start="63:14" pos:end="63:30"><name pos:start="63:14" pos:end="63:16">asf</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:30">packet_flags</name></name> <operator pos:start="63:32" pos:end="63:33">&gt;&gt;</operator> <literal type="number" pos:start="63:35" pos:end="63:35">3</literal></expr></argument>, <argument pos:start="63:38" pos:end="63:44"><expr pos:start="63:38" pos:end="63:44"><name pos:start="63:38" pos:end="63:44">padsize</name></expr></argument>, <argument pos:start="63:47" pos:end="63:47"><expr pos:start="63:47" pos:end="63:47"><literal type="number" pos:start="63:47" pos:end="63:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="63:51" pos:end="63:67">// padding length</comment>



    <comment type="line" pos:start="67:5" pos:end="67:63">//the following checks prevent overflows and infinite loops</comment>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if<condition pos:start="69:7" pos:end="69:33">(<expr pos:start="69:8" pos:end="69:32"><name pos:start="69:8" pos:end="69:20">packet_length</name> <operator pos:start="69:22" pos:end="69:23">&gt;=</operator> <operator pos:start="69:25" pos:end="69:25">(</operator><literal type="number" pos:start="69:26" pos:end="69:27">1U</literal><operator pos:start="69:28" pos:end="69:29">&lt;&lt;</operator><literal type="number" pos:start="69:30" pos:end="69:31">29</literal><operator pos:start="69:32" pos:end="69:32">)</operator></expr>)</condition><block pos:start="69:34" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:18">

        <expr_stmt pos:start="71:9" pos:end="71:105"><expr pos:start="71:9" pos:end="71:104"><call pos:start="71:9" pos:end="71:104"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="71:104">(<argument pos:start="71:16" pos:end="71:16"><expr pos:start="71:16" pos:end="71:16"><name pos:start="71:16" pos:end="71:16">s</name></expr></argument>, <argument pos:start="71:19" pos:end="71:30"><expr pos:start="71:19" pos:end="71:30"><name pos:start="71:19" pos:end="71:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:33" pos:end="71:73"><expr pos:start="71:33" pos:end="71:73"><literal type="string" pos:start="71:33" pos:end="71:63">"invalid packet_length %d at:%"</literal><name pos:start="71:64" pos:end="71:69">PRId64</name><literal type="string" pos:start="71:70" pos:end="71:73">"\n"</literal></expr></argument>, <argument pos:start="71:76" pos:end="71:88"><expr pos:start="71:76" pos:end="71:88"><name pos:start="71:76" pos:end="71:88">packet_length</name></expr></argument>, <argument pos:start="71:91" pos:end="71:103"><expr pos:start="71:91" pos:end="71:103"><call pos:start="71:91" pos:end="71:103"><name pos:start="71:91" pos:end="71:99">url_ftell</name><argument_list pos:start="71:100" pos:end="71:103">(<argument pos:start="71:101" pos:end="71:102"><expr pos:start="71:101" pos:end="71:102"><name pos:start="71:101" pos:end="71:102">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:18">return <expr pos:start="73:16" pos:end="73:17"><operator pos:start="73:16" pos:end="73:16">-</operator><literal type="number" pos:start="73:17" pos:end="73:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if<condition pos:start="77:7" pos:end="77:27">(<expr pos:start="77:8" pos:end="77:26"><name pos:start="77:8" pos:end="77:14">padsize</name> <operator pos:start="77:16" pos:end="77:17">&gt;=</operator> <operator pos:start="77:19" pos:end="77:19">(</operator><literal type="number" pos:start="77:20" pos:end="77:21">1U</literal><operator pos:start="77:22" pos:end="77:23">&lt;&lt;</operator><literal type="number" pos:start="77:24" pos:end="77:25">29</literal><operator pos:start="77:26" pos:end="77:26">)</operator></expr>)</condition><block pos:start="77:28" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:18">

        <expr_stmt pos:start="79:9" pos:end="79:93"><expr pos:start="79:9" pos:end="79:92"><call pos:start="79:9" pos:end="79:92"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:92">(<argument pos:start="79:16" pos:end="79:16"><expr pos:start="79:16" pos:end="79:16"><name pos:start="79:16" pos:end="79:16">s</name></expr></argument>, <argument pos:start="79:19" pos:end="79:30"><expr pos:start="79:19" pos:end="79:30"><name pos:start="79:19" pos:end="79:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:33" pos:end="79:67"><expr pos:start="79:33" pos:end="79:67"><literal type="string" pos:start="79:33" pos:end="79:57">"invalid padsize %d at:%"</literal><name pos:start="79:58" pos:end="79:63">PRId64</name><literal type="string" pos:start="79:64" pos:end="79:67">"\n"</literal></expr></argument>, <argument pos:start="79:70" pos:end="79:76"><expr pos:start="79:70" pos:end="79:76"><name pos:start="79:70" pos:end="79:76">padsize</name></expr></argument>, <argument pos:start="79:79" pos:end="79:91"><expr pos:start="79:79" pos:end="79:91"><call pos:start="79:79" pos:end="79:91"><name pos:start="79:79" pos:end="79:87">url_ftell</name><argument_list pos:start="79:88" pos:end="79:91">(<argument pos:start="79:89" pos:end="79:90"><expr pos:start="79:89" pos:end="79:90"><name pos:start="79:89" pos:end="79:90">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:18">return <expr pos:start="81:16" pos:end="81:17"><operator pos:start="81:16" pos:end="81:16">-</operator><literal type="number" pos:start="81:17" pos:end="81:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:41"><expr pos:start="87:5" pos:end="87:40"><name pos:start="87:5" pos:end="87:25"><name pos:start="87:5" pos:end="87:7">asf</name><operator pos:start="87:8" pos:end="87:9">-&gt;</operator><name pos:start="87:10" pos:end="87:25">packet_timestamp</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <call pos:start="87:29" pos:end="87:40"><name pos:start="87:29" pos:end="87:36">get_le32</name><argument_list pos:start="87:37" pos:end="87:40">(<argument pos:start="87:38" pos:end="87:39"><expr pos:start="87:38" pos:end="87:39"><name pos:start="87:38" pos:end="87:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:17"><expr pos:start="89:5" pos:end="89:16"><call pos:start="89:5" pos:end="89:16"><name pos:start="89:5" pos:end="89:12">get_le16</name><argument_list pos:start="89:13" pos:end="89:16">(<argument pos:start="89:14" pos:end="89:15"><expr pos:start="89:14" pos:end="89:15"><name pos:start="89:14" pos:end="89:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="89:19" pos:end="89:32">/* duration */</comment>

    <comment type="line" pos:start="91:5" pos:end="91:59">// rsize has at least 11 bytes which have to be present</comment>



    <if_stmt pos:start="95:5" pos:end="107:5"><if pos:start="95:5" pos:end="101:5">if <condition pos:start="95:8" pos:end="95:33">(<expr pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:25"><name pos:start="95:9" pos:end="95:11">asf</name><operator pos:start="95:12" pos:end="95:13">-&gt;</operator><name pos:start="95:14" pos:end="95:25">packet_flags</name></name> <operator pos:start="95:27" pos:end="95:27">&amp;</operator> <literal type="number" pos:start="95:29" pos:end="95:32">0x01</literal></expr>)</condition> <block pos:start="95:35" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:62">

        <expr_stmt pos:start="97:9" pos:end="97:47"><expr pos:start="97:9" pos:end="97:46"><name pos:start="97:9" pos:end="97:31"><name pos:start="97:9" pos:end="97:11">asf</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:31">packet_segsizetype</name></name> <operator pos:start="97:33" pos:end="97:33">=</operator> <call pos:start="97:35" pos:end="97:46"><name pos:start="97:35" pos:end="97:42">get_byte</name><argument_list pos:start="97:43" pos:end="97:46">(<argument pos:start="97:44" pos:end="97:45"><expr pos:start="97:44" pos:end="97:45"><name pos:start="97:44" pos:end="97:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="97:49" pos:end="97:56"><expr pos:start="97:49" pos:end="97:55"><name pos:start="97:49" pos:end="97:53">rsize</name><operator pos:start="97:54" pos:end="97:55">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:62"><expr pos:start="99:9" pos:end="99:61"><name pos:start="99:9" pos:end="99:28"><name pos:start="99:9" pos:end="99:11">asf</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:28">packet_segments</name></name> <operator pos:start="99:30" pos:end="99:30">=</operator> <name pos:start="99:32" pos:end="99:54"><name pos:start="99:32" pos:end="99:34">asf</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:54">packet_segsizetype</name></name> <operator pos:start="99:56" pos:end="99:56">&amp;</operator> <literal type="number" pos:start="99:58" pos:end="99:61">0x3f</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="101:7" pos:end="107:5">else <block pos:start="101:12" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:39">

        <expr_stmt pos:start="103:9" pos:end="103:33"><expr pos:start="103:9" pos:end="103:32"><name pos:start="103:9" pos:end="103:28"><name pos:start="103:9" pos:end="103:11">asf</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:28">packet_segments</name></name> <operator pos:start="103:30" pos:end="103:30">=</operator> <literal type="number" pos:start="103:32" pos:end="103:32">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:39"><expr pos:start="105:9" pos:end="105:38"><name pos:start="105:9" pos:end="105:31"><name pos:start="105:9" pos:end="105:11">asf</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:31">packet_segsizetype</name></name> <operator pos:start="105:33" pos:end="105:33">=</operator> <literal type="number" pos:start="105:35" pos:end="105:38">0x80</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:60"><expr pos:start="109:5" pos:end="109:59"><name pos:start="109:5" pos:end="109:25"><name pos:start="109:5" pos:end="109:7">asf</name><operator pos:start="109:8" pos:end="109:9">-&gt;</operator><name pos:start="109:10" pos:end="109:25">packet_size_left</name></name> <operator pos:start="109:27" pos:end="109:27">=</operator> <name pos:start="109:29" pos:end="109:41">packet_length</name> <operator pos:start="109:43" pos:end="109:43">-</operator> <name pos:start="109:45" pos:end="109:51">padsize</name> <operator pos:start="109:53" pos:end="109:53">-</operator> <name pos:start="109:55" pos:end="109:59">rsize</name></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="113:56"><if pos:start="111:5" pos:end="113:56">if <condition pos:start="111:8" pos:end="111:45">(<expr pos:start="111:9" pos:end="111:44"><name pos:start="111:9" pos:end="111:21">packet_length</name> <operator pos:start="111:23" pos:end="111:23">&lt;</operator> <name pos:start="111:25" pos:end="111:44"><name pos:start="111:25" pos:end="111:27">asf</name><operator pos:start="111:28" pos:end="111:29">-&gt;</operator><name pos:start="111:30" pos:end="111:32">hdr</name><operator pos:start="111:33" pos:end="111:33">.</operator><name pos:start="111:34" pos:end="111:44">min_pktsize</name></name></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:56"><block_content pos:start="113:9" pos:end="113:56">

        <expr_stmt pos:start="113:9" pos:end="113:56"><expr pos:start="113:9" pos:end="113:55"><name pos:start="113:9" pos:end="113:15">padsize</name> <operator pos:start="113:17" pos:end="113:18">+=</operator> <name pos:start="113:20" pos:end="113:39"><name pos:start="113:20" pos:end="113:22">asf</name><operator pos:start="113:23" pos:end="113:24">-&gt;</operator><name pos:start="113:25" pos:end="113:27">hdr</name><operator pos:start="113:28" pos:end="113:28">.</operator><name pos:start="113:29" pos:end="113:39">min_pktsize</name></name> <operator pos:start="113:41" pos:end="113:41">-</operator> <name pos:start="113:43" pos:end="113:55">packet_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="118:0"><expr pos:start="115:5" pos:end="115:33"><name pos:start="115:5" pos:end="115:23"><name pos:start="115:5" pos:end="115:7">asf</name><operator pos:start="115:8" pos:end="115:9">-&gt;</operator><name pos:start="115:10" pos:end="115:23">packet_padsize</name></name> <operator pos:start="115:25" pos:end="115:25">=</operator> <name pos:start="115:27" pos:end="115:33">padsize</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="117:1" pos:end="117:12">#<cpp:directive pos:start="117:2" pos:end="117:6">ifdef</cpp:directive> <name pos:start="117:8" pos:end="117:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="119:5" pos:end="122:0"><expr pos:start="119:5" pos:end="119:113"><call pos:start="119:5" pos:end="119:113"><name pos:start="119:5" pos:end="119:10">printf</name><argument_list pos:start="119:11" pos:end="119:113">(<argument pos:start="119:12" pos:end="119:50"><expr pos:start="119:12" pos:end="119:50"><literal type="string" pos:start="119:12" pos:end="119:50">"packet: size=%d padsize=%d  left=%d\n"</literal></expr></argument>, <argument pos:start="119:53" pos:end="119:68"><expr pos:start="119:53" pos:end="119:68"><name pos:start="119:53" pos:end="119:68"><name pos:start="119:53" pos:end="119:55">asf</name><operator pos:start="119:56" pos:end="119:57">-&gt;</operator><name pos:start="119:58" pos:end="119:68">packet_size</name></name></expr></argument>, <argument pos:start="119:71" pos:end="119:89"><expr pos:start="119:71" pos:end="119:89"><name pos:start="119:71" pos:end="119:89"><name pos:start="119:71" pos:end="119:73">asf</name><operator pos:start="119:74" pos:end="119:75">-&gt;</operator><name pos:start="119:76" pos:end="119:89">packet_padsize</name></name></expr></argument>, <argument pos:start="119:92" pos:end="119:112"><expr pos:start="119:92" pos:end="119:112"><name pos:start="119:92" pos:end="119:112"><name pos:start="119:92" pos:end="119:94">asf</name><operator pos:start="119:95" pos:end="119:96">-&gt;</operator><name pos:start="119:97" pos:end="119:112">packet_size_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>

    <return pos:start="123:5" pos:end="123:13">return <expr pos:start="123:12" pos:end="123:12"><literal type="number" pos:start="123:12" pos:end="123:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
