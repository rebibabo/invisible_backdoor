<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20416.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:33">mpeg4_is_resync</name><parameter_list pos:start="1:34" pos:end="1:52">(<parameter pos:start="1:35" pos:end="1:51"><decl pos:start="1:35" pos:end="1:51"><type pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:48">MpegEncContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>)</parameter_list><block pos:start="1:53" pos:end="65:1">{<block_content pos:start="3:5" pos:end="63:13">

    <decl_stmt pos:start="3:5" pos:end="3:49"><decl pos:start="3:5" pos:end="3:48"><type pos:start="3:5" pos:end="3:13"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:13">int</name></type> <name pos:start="3:15" pos:end="3:24">bits_count</name><init pos:start="3:25" pos:end="3:48">= <expr pos:start="3:27" pos:end="3:48"><call pos:start="3:27" pos:end="3:48"><name pos:start="3:27" pos:end="3:40">get_bits_count</name><argument_list pos:start="3:41" pos:end="3:48">(<argument pos:start="3:42" pos:end="3:47"><expr pos:start="3:42" pos:end="3:47"><operator pos:start="3:42" pos:end="3:42">&amp;</operator><name pos:start="3:43" pos:end="3:47"><name pos:start="3:43" pos:end="3:43">s</name><operator pos:start="3:44" pos:end="3:45">-&gt;</operator><name pos:start="3:46" pos:end="3:47">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    

    <if_stmt pos:start="7:5" pos:end="11:5"><if pos:start="7:5" pos:end="11:5">if<condition pos:start="7:7" pos:end="7:44">(<expr pos:start="7:8" pos:end="7:43"><name pos:start="7:8" pos:end="7:25"><name pos:start="7:8" pos:end="7:8">s</name><operator pos:start="7:9" pos:end="7:10">-&gt;</operator><name pos:start="7:11" pos:end="7:25">workaround_bugs</name></name><operator pos:start="7:26" pos:end="7:26">&amp;</operator><name pos:start="7:27" pos:end="7:43">FF_BUG_NO_PADDING</name></expr>)</condition><block pos:start="7:45" pos:end="11:5">{<block_content pos:start="9:9" pos:end="9:17">

        <return pos:start="9:9" pos:end="9:17">return <expr pos:start="9:16" pos:end="9:16"><literal type="number" pos:start="9:16" pos:end="9:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="15:5" pos:end="61:5"><if pos:start="15:5" pos:end="27:5">if<condition pos:start="15:7" pos:end="15:38">(<expr pos:start="15:8" pos:end="15:37"><name pos:start="15:8" pos:end="15:17">bits_count</name> <operator pos:start="15:19" pos:end="15:19">+</operator> <literal type="number" pos:start="15:21" pos:end="15:21">8</literal> <operator pos:start="15:23" pos:end="15:24">&gt;=</operator> <name pos:start="15:26" pos:end="15:35"><name pos:start="15:26" pos:end="15:26">s</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:30">gb</name><operator pos:start="15:31" pos:end="15:31">.</operator><name pos:start="15:32" pos:end="15:35">size</name></name><operator pos:start="15:36" pos:end="15:36">*</operator><literal type="number" pos:start="15:37" pos:end="15:37">8</literal></expr>)</condition><block pos:start="15:39" pos:end="27:5">{<block_content pos:start="17:9" pos:end="25:21">

        <decl_stmt pos:start="17:9" pos:end="17:36"><decl pos:start="17:9" pos:end="17:35"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:13">v</name><init pos:start="17:14" pos:end="17:35">= <expr pos:start="17:16" pos:end="17:35"><call pos:start="17:16" pos:end="17:35"><name pos:start="17:16" pos:end="17:24">show_bits</name><argument_list pos:start="17:25" pos:end="17:35">(<argument pos:start="17:26" pos:end="17:31"><expr pos:start="17:26" pos:end="17:31"><operator pos:start="17:26" pos:end="17:26">&amp;</operator><name pos:start="17:27" pos:end="17:31"><name pos:start="17:27" pos:end="17:27">s</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:31">gb</name></name></expr></argument>, <argument pos:start="17:34" pos:end="17:34"><expr pos:start="17:34" pos:end="17:34"><literal type="number" pos:start="17:34" pos:end="17:34">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:39"><expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:9">v</name><operator pos:start="19:10" pos:end="19:11">|=</operator> <literal type="number" pos:start="19:13" pos:end="19:16">0x7F</literal> <operator pos:start="19:18" pos:end="19:19">&gt;&gt;</operator> <operator pos:start="19:21" pos:end="19:21">(</operator><literal type="number" pos:start="19:22" pos:end="19:23">7</literal><operator pos:start="19:23" pos:end="19:23">-</operator><operator pos:start="19:24" pos:end="19:24">(</operator><name pos:start="19:25" pos:end="19:34">bits_count</name><operator pos:start="19:35" pos:end="19:35">&amp;</operator><literal type="number" pos:start="19:36" pos:end="19:36">7</literal><operator pos:start="19:37" pos:end="19:37">)</operator><operator pos:start="19:38" pos:end="19:38">)</operator></expr>;</expr_stmt>

                

        <if_stmt pos:start="23:9" pos:end="25:21"><if pos:start="23:9" pos:end="25:21">if<condition pos:start="23:11" pos:end="23:19">(<expr pos:start="23:12" pos:end="23:18"><name pos:start="23:12" pos:end="23:12">v</name><operator pos:start="23:13" pos:end="23:14">==</operator><literal type="number" pos:start="23:15" pos:end="23:18">0x7F</literal></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:21"><block_content pos:start="25:13" pos:end="25:21">

            <return pos:start="25:13" pos:end="25:21">return <expr pos:start="25:20" pos:end="25:20"><literal type="number" pos:start="25:20" pos:end="25:20">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if><else pos:start="27:6" pos:end="61:5">else<block pos:start="27:10" pos:end="61:5">{<block_content pos:start="29:9" pos:end="59:9">

        <if_stmt pos:start="29:9" pos:end="59:9"><if pos:start="29:9" pos:end="59:9">if<condition pos:start="29:11" pos:end="29:73">(<expr pos:start="29:12" pos:end="29:72"><call pos:start="29:12" pos:end="29:32"><name pos:start="29:12" pos:end="29:20">show_bits</name><argument_list pos:start="29:21" pos:end="29:32">(<argument pos:start="29:22" pos:end="29:27"><expr pos:start="29:22" pos:end="29:27"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:27"><name pos:start="29:23" pos:end="29:23">s</name><operator pos:start="29:24" pos:end="29:25">-&gt;</operator><name pos:start="29:26" pos:end="29:27">gb</name></name></expr></argument>, <argument pos:start="29:30" pos:end="29:31"><expr pos:start="29:30" pos:end="29:31"><literal type="number" pos:start="29:30" pos:end="29:31">16</literal></expr></argument>)</argument_list></call> <operator pos:start="29:34" pos:end="29:35">==</operator> <name pos:start="29:37" pos:end="29:72"><name pos:start="29:37" pos:end="29:58">ff_mpeg4_resync_prefix</name><index pos:start="29:59" pos:end="29:72">[<expr pos:start="29:60" pos:end="29:71"><name pos:start="29:60" pos:end="29:69">bits_count</name><operator pos:start="29:70" pos:end="29:70">&amp;</operator><literal type="number" pos:start="29:71" pos:end="29:71">7</literal></expr>]</index></name></expr>)</condition><block pos:start="29:74" pos:end="59:9">{<block_content pos:start="31:13" pos:end="57:25">

            <decl_stmt pos:start="31:13" pos:end="31:20"><decl pos:start="31:13" pos:end="31:19"><type pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">int</name></type> <name pos:start="31:17" pos:end="31:19">len</name></decl>;</decl_stmt>

            <decl_stmt pos:start="33:13" pos:end="33:36"><decl pos:start="33:13" pos:end="33:35"><type pos:start="33:13" pos:end="33:25"><name pos:start="33:13" pos:end="33:25">GetBitContext</name></type> <name pos:start="33:27" pos:end="33:28">gb</name><init pos:start="33:29" pos:end="33:35">= <expr pos:start="33:31" pos:end="33:35"><name pos:start="33:31" pos:end="33:35"><name pos:start="33:31" pos:end="33:31">s</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:35">gb</name></name></expr></init></decl>;</decl_stmt>

        

            <expr_stmt pos:start="37:13" pos:end="37:33"><expr pos:start="37:13" pos:end="37:32"><call pos:start="37:13" pos:end="37:32"><name pos:start="37:13" pos:end="37:21">skip_bits</name><argument_list pos:start="37:22" pos:end="37:32">(<argument pos:start="37:23" pos:end="37:28"><expr pos:start="37:23" pos:end="37:28"><operator pos:start="37:23" pos:end="37:23">&amp;</operator><name pos:start="37:24" pos:end="37:28"><name pos:start="37:24" pos:end="37:24">s</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:28">gb</name></name></expr></argument>, <argument pos:start="37:31" pos:end="37:31"><expr pos:start="37:31" pos:end="37:31"><literal type="number" pos:start="37:31" pos:end="37:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:35"><expr pos:start="39:13" pos:end="39:34"><call pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:26">align_get_bits</name><argument_list pos:start="39:27" pos:end="39:34">(<argument pos:start="39:28" pos:end="39:33"><expr pos:start="39:28" pos:end="39:33"><operator pos:start="39:28" pos:end="39:28">&amp;</operator><name pos:start="39:29" pos:end="39:33"><name pos:start="39:29" pos:end="39:29">s</name><operator pos:start="39:30" pos:end="39:31">-&gt;</operator><name pos:start="39:32" pos:end="39:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

            <for pos:start="43:13" pos:end="47:13">for<control pos:start="43:16" pos:end="43:37">(<init pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:21"><name pos:start="43:17" pos:end="43:19">len</name><operator pos:start="43:20" pos:end="43:20">=</operator><literal type="number" pos:start="43:21" pos:end="43:21">0</literal></expr>;</init> <condition pos:start="43:24" pos:end="43:30"><expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:26">len</name><operator pos:start="43:27" pos:end="43:27">&lt;</operator><literal type="number" pos:start="43:28" pos:end="43:29">32</literal></expr>;</condition> <incr pos:start="43:32" pos:end="43:36"><expr pos:start="43:32" pos:end="43:36"><name pos:start="43:32" pos:end="43:34">len</name><operator pos:start="43:35" pos:end="43:36">++</operator></expr></incr>)</control><block pos:start="43:38" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:44">

                <if_stmt pos:start="45:17" pos:end="45:44"><if pos:start="45:17" pos:end="45:44">if<condition pos:start="45:19" pos:end="45:37">(<expr pos:start="45:20" pos:end="45:36"><call pos:start="45:20" pos:end="45:36"><name pos:start="45:20" pos:end="45:28">get_bits1</name><argument_list pos:start="45:29" pos:end="45:36">(<argument pos:start="45:30" pos:end="45:35"><expr pos:start="45:30" pos:end="45:35"><operator pos:start="45:30" pos:end="45:30">&amp;</operator><name pos:start="45:31" pos:end="45:35"><name pos:start="45:31" pos:end="45:31">s</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:35">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="45:39" pos:end="45:44"><block_content pos:start="45:39" pos:end="45:44"> <break pos:start="45:39" pos:end="45:44">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="51:13" pos:end="51:22"><expr pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:17"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:17">gb</name></name><operator pos:start="51:18" pos:end="51:18">=</operator> <name pos:start="51:20" pos:end="51:21">gb</name></expr>;</expr_stmt>



            <if_stmt pos:start="55:13" pos:end="57:25"><if pos:start="55:13" pos:end="57:25">if<condition pos:start="55:15" pos:end="55:63">(<expr pos:start="55:16" pos:end="55:62"><name pos:start="55:16" pos:end="55:18">len</name><operator pos:start="55:19" pos:end="55:20">&gt;=</operator><call pos:start="55:21" pos:end="55:62"><name pos:start="55:21" pos:end="55:59">ff_mpeg4_get_video_packet_prefix_length</name><argument_list pos:start="55:60" pos:end="55:62">(<argument pos:start="55:61" pos:end="55:61"><expr pos:start="55:61" pos:end="55:61"><name pos:start="55:61" pos:end="55:61">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:25"><block_content pos:start="57:17" pos:end="57:25">

                <return pos:start="57:17" pos:end="57:25">return <expr pos:start="57:24" pos:end="57:24"><literal type="number" pos:start="57:24" pos:end="57:24">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="63:5" pos:end="63:13">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
