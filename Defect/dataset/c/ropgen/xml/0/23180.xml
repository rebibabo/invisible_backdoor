<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23180.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">tcg_out_movi</name><parameter_list pos:start="1:25" pos:end="3:47">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">TCGContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:47">TCGType</name></type> <name pos:start="1:49" pos:end="1:52">type</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:63"><decl pos:start="1:55" pos:end="1:63"><type pos:start="1:55" pos:end="1:63"><name pos:start="1:55" pos:end="1:60">TCGReg</name></type> <name pos:start="1:62" pos:end="1:63">rd</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:46"><decl pos:start="3:26" pos:end="3:46"><type pos:start="3:26" pos:end="3:46"><name pos:start="3:26" pos:end="3:40">tcg_target_long</name></type> <name pos:start="3:42" pos:end="3:46">value</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="45:1">{<block_content pos:start="7:5" pos:end="43:20">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:15">AArch64Insn</name></type> <name pos:start="7:17" pos:end="7:20">insn</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:29">(<expr pos:start="11:9" pos:end="11:28"><name pos:start="11:9" pos:end="11:12">type</name> <operator pos:start="11:14" pos:end="11:15">==</operator> <name pos:start="11:17" pos:end="11:28">TCG_TYPE_I32</name></expr>)</condition> <block pos:start="11:31" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:32">

        <expr_stmt pos:start="13:9" pos:end="13:32"><expr pos:start="13:9" pos:end="13:31"><name pos:start="13:9" pos:end="13:13">value</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <operator pos:start="13:17" pos:end="13:17">(</operator><name pos:start="13:18" pos:end="13:25">uint32_t</name><operator pos:start="13:26" pos:end="13:26">)</operator><name pos:start="13:27" pos:end="13:31">value</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="29:60">/* count trailing zeros in 16 bit steps, mapping 64 to 0. Emit the

       first MOVZ with the half-word immediate skipping the zeros, with a shift

       (LSL) equal to this number. Then all next instructions use MOVKs.

       Zero the processed half-word in the value, continue until empty.

       We build the final result 16bits at a time with up to 4 instructions,

       but do not emit instructions for 16bit zero holes. */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:22"><expr pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:8">insn</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <name pos:start="31:12" pos:end="31:21">I3405_MOVZ</name></expr>;</expr_stmt>

    <do pos:start="33:5" pos:end="43:20">do <block pos:start="33:8" pos:end="43:5">{<block_content pos:start="35:9" pos:end="41:26">

        <decl_stmt pos:start="35:9" pos:end="35:51"><decl pos:start="35:9" pos:end="35:50"><type pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:16">unsigned</name></type> <name pos:start="35:18" pos:end="35:22">shift</name> <init pos:start="35:24" pos:end="35:50">= <expr pos:start="35:26" pos:end="35:50"><call pos:start="35:26" pos:end="35:37"><name pos:start="35:26" pos:end="35:30">ctz64</name><argument_list pos:start="35:31" pos:end="35:37">(<argument pos:start="35:32" pos:end="35:36"><expr pos:start="35:32" pos:end="35:36"><name pos:start="35:32" pos:end="35:36">value</name></expr></argument>)</argument_list></call> <operator pos:start="35:39" pos:end="35:39">&amp;</operator> <operator pos:start="35:41" pos:end="35:41">(</operator><literal type="number" pos:start="35:42" pos:end="35:43">63</literal> <operator pos:start="35:45" pos:end="35:45">&amp;</operator> <operator pos:start="35:47" pos:end="35:47">-</operator><literal type="number" pos:start="35:48" pos:end="35:49">16</literal><operator pos:start="35:50" pos:end="35:50">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:75"><expr pos:start="37:9" pos:end="37:74"><call pos:start="37:9" pos:end="37:74"><name pos:start="37:9" pos:end="37:25">tcg_out_insn_3405</name><argument_list pos:start="37:26" pos:end="37:74">(<argument pos:start="37:27" pos:end="37:27"><expr pos:start="37:27" pos:end="37:27"><name pos:start="37:27" pos:end="37:27">s</name></expr></argument>, <argument pos:start="37:30" pos:end="37:33"><expr pos:start="37:30" pos:end="37:33"><name pos:start="37:30" pos:end="37:33">insn</name></expr></argument>, <argument pos:start="37:36" pos:end="37:46"><expr pos:start="37:36" pos:end="37:46"><name pos:start="37:36" pos:end="37:40">shift</name> <operator pos:start="37:42" pos:end="37:43">&gt;=</operator> <literal type="number" pos:start="37:45" pos:end="37:46">32</literal></expr></argument>, <argument pos:start="37:49" pos:end="37:50"><expr pos:start="37:49" pos:end="37:50"><name pos:start="37:49" pos:end="37:50">rd</name></expr></argument>, <argument pos:start="37:53" pos:end="37:66"><expr pos:start="37:53" pos:end="37:66"><name pos:start="37:53" pos:end="37:57">value</name> <operator pos:start="37:59" pos:end="37:60">&gt;&gt;</operator> <name pos:start="37:62" pos:end="37:66">shift</name></expr></argument>, <argument pos:start="37:69" pos:end="37:73"><expr pos:start="37:69" pos:end="37:73"><name pos:start="37:69" pos:end="37:73">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:38"><expr pos:start="39:9" pos:end="39:37"><name pos:start="39:9" pos:end="39:13">value</name> <operator pos:start="39:15" pos:end="39:16">&amp;=</operator> <operator pos:start="39:18" pos:end="39:18">~</operator><operator pos:start="39:19" pos:end="39:19">(</operator><literal type="number" pos:start="39:20" pos:end="39:27">0xffffUL</literal> <operator pos:start="39:29" pos:end="39:30">&lt;&lt;</operator> <name pos:start="39:32" pos:end="39:36">shift</name><operator pos:start="39:37" pos:end="39:37">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:26"><expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:12">insn</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <name pos:start="41:16" pos:end="41:25">I3405_MOVK</name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="43:13" pos:end="43:19">(<expr pos:start="43:14" pos:end="43:18"><name pos:start="43:14" pos:end="43:18">value</name></expr>)</condition>;</do>

</block_content>}</block></function>
</unit>
