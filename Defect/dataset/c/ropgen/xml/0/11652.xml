<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11652.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:45">avcodec_decode_audio3</name><parameter_list pos:start="1:46" pos:end="5:62">(<parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:60">AVCodecContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:67">avctx</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:85"><decl pos:start="1:70" pos:end="1:85"><type pos:start="1:70" pos:end="1:85"><name pos:start="1:70" pos:end="1:76">int16_t</name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type><name pos:start="1:79" pos:end="1:85">samples</name></decl></parameter>,

                                              <parameter pos:start="3:47" pos:end="3:65"><decl pos:start="3:47" pos:end="3:65"><type pos:start="3:47" pos:end="3:65"><name pos:start="3:47" pos:end="3:49">int</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:65">frame_size_ptr</name></decl></parameter>,

                                              <parameter pos:start="5:47" pos:end="5:61"><decl pos:start="5:47" pos:end="5:61"><type pos:start="5:47" pos:end="5:61"><name pos:start="5:47" pos:end="5:54">AVPacket</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:61">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="87:1">{<block_content pos:start="9:5" pos:end="85:15">

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">AVFrame</name></type> <name pos:start="9:13" pos:end="9:17">frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:22">got_frame</name> <init pos:start="11:24" pos:end="11:26">= <expr pos:start="11:26" pos:end="11:26"><literal type="number" pos:start="11:26" pos:end="11:26">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="27:5"><if pos:start="15:5" pos:end="27:5">if <condition pos:start="15:8" pos:end="15:56">(<expr pos:start="15:9" pos:end="15:55"><name pos:start="15:9" pos:end="15:25"><name pos:start="15:9" pos:end="15:13">avctx</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:25">get_buffer</name></name> <operator pos:start="15:27" pos:end="15:28">!=</operator> <name pos:start="15:30" pos:end="15:55">avcodec_default_get_buffer</name></expr>)</condition> <block pos:start="15:58" pos:end="27:5">{<block_content pos:start="17:9" pos:end="25:55">

        <expr_stmt pos:start="17:9" pos:end="19:118"><expr pos:start="17:9" pos:end="19:117"><call pos:start="17:9" pos:end="19:117"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="19:117">(<argument pos:start="17:16" pos:end="17:20"><expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">avctx</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><name pos:start="17:23" pos:end="17:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:37" pos:end="19:116"><expr pos:start="17:37" pos:end="19:116"><literal type="string" pos:start="17:37" pos:end="17:70">"Custom get_buffer() for use with"</literal>

                                    <literal type="string" pos:start="19:37" pos:end="19:116">"avcodec_decode_audio3() detected. Overriding with avcodec_default_get_buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="23:65"><expr pos:start="21:9" pos:end="23:64"><call pos:start="21:9" pos:end="23:64"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="23:64">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:37" pos:end="23:63"><expr pos:start="21:37" pos:end="23:63"><literal type="string" pos:start="21:37" pos:end="21:70">"Please port your application to "</literal>

                                    <literal type="string" pos:start="23:37" pos:end="23:63">"avcodec_decode_audio4()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:55"><expr pos:start="25:9" pos:end="25:54"><name pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:13">avctx</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:25">get_buffer</name></name> <operator pos:start="25:27" pos:end="25:27">=</operator> <name pos:start="25:29" pos:end="25:54">avcodec_default_get_buffer</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:66"><expr pos:start="31:5" pos:end="31:65"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:65"><name pos:start="31:11" pos:end="31:31">avcodec_decode_audio4</name><argument_list pos:start="31:32" pos:end="31:65">(<argument pos:start="31:33" pos:end="31:37"><expr pos:start="31:33" pos:end="31:37"><name pos:start="31:33" pos:end="31:37">avctx</name></expr></argument>, <argument pos:start="31:40" pos:end="31:45"><expr pos:start="31:40" pos:end="31:45"><operator pos:start="31:40" pos:end="31:40">&amp;</operator><name pos:start="31:41" pos:end="31:45">frame</name></expr></argument>, <argument pos:start="31:48" pos:end="31:57"><expr pos:start="31:48" pos:end="31:57"><operator pos:start="31:48" pos:end="31:48">&amp;</operator><name pos:start="31:49" pos:end="31:57">got_frame</name></expr></argument>, <argument pos:start="31:60" pos:end="31:64"><expr pos:start="31:60" pos:end="31:64"><name pos:start="31:60" pos:end="31:64">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="83:5"><if pos:start="35:5" pos:end="79:5">if <condition pos:start="35:8" pos:end="35:30">(<expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:14">&gt;=</operator> <literal type="number" pos:start="35:16" pos:end="35:16">0</literal> <operator pos:start="35:18" pos:end="35:19">&amp;&amp;</operator> <name pos:start="35:21" pos:end="35:29">got_frame</name></expr>)</condition> <block pos:start="35:32" pos:end="79:5">{<block_content pos:start="37:9" pos:end="77:36">

        <decl_stmt pos:start="37:9" pos:end="37:27"><decl pos:start="37:9" pos:end="37:14"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:14">ch</name></decl>, <decl pos:start="37:17" pos:end="37:26"><type ref="prev" pos:start="37:9" pos:end="37:11"/><name pos:start="37:17" pos:end="37:26">plane_size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:67"><decl pos:start="39:9" pos:end="39:66"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:18">planar</name>    <init pos:start="39:23" pos:end="39:66">= <expr pos:start="39:25" pos:end="39:66"><call pos:start="39:25" pos:end="39:66"><name pos:start="39:25" pos:end="39:47">av_sample_fmt_is_planar</name><argument_list pos:start="39:48" pos:end="39:66">(<argument pos:start="39:49" pos:end="39:65"><expr pos:start="39:49" pos:end="39:65"><name pos:start="39:49" pos:end="39:65"><name pos:start="39:49" pos:end="39:53">avctx</name><operator pos:start="39:54" pos:end="39:55">-&gt;</operator><name pos:start="39:56" pos:end="39:65">sample_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="45:73"><decl pos:start="41:9" pos:end="45:72"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:21">data_size</name> <init pos:start="41:23" pos:end="45:72">= <expr pos:start="41:25" pos:end="45:72"><call pos:start="41:25" pos:end="45:72"><name pos:start="41:25" pos:end="41:50">av_samples_get_buffer_size</name><argument_list pos:start="41:51" pos:end="45:72">(<argument pos:start="41:52" pos:end="41:62"><expr pos:start="41:52" pos:end="41:62"><operator pos:start="41:52" pos:end="41:52">&amp;</operator><name pos:start="41:53" pos:end="41:62">plane_size</name></expr></argument>, <argument pos:start="41:65" pos:end="41:79"><expr pos:start="41:65" pos:end="41:79"><name pos:start="41:65" pos:end="41:79"><name pos:start="41:65" pos:end="41:69">avctx</name><operator pos:start="41:70" pos:end="41:71">-&gt;</operator><name pos:start="41:72" pos:end="41:79">channels</name></name></expr></argument>,

                                                   <argument pos:start="43:52" pos:end="43:67"><expr pos:start="43:52" pos:end="43:67"><name pos:start="43:52" pos:end="43:67"><name pos:start="43:52" pos:end="43:56">frame</name><operator pos:start="43:57" pos:end="43:57">.</operator><name pos:start="43:58" pos:end="43:67">nb_samples</name></name></expr></argument>,

                                                   <argument pos:start="45:52" pos:end="45:68"><expr pos:start="45:52" pos:end="45:68"><name pos:start="45:52" pos:end="45:68"><name pos:start="45:52" pos:end="45:56">avctx</name><operator pos:start="45:57" pos:end="45:58">-&gt;</operator><name pos:start="45:59" pos:end="45:68">sample_fmt</name></name></expr></argument>, <argument pos:start="45:71" pos:end="45:71"><expr pos:start="45:71" pos:end="45:71"><literal type="number" pos:start="45:71" pos:end="45:71">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:40">(<expr pos:start="47:13" pos:end="47:39"><operator pos:start="47:13" pos:end="47:13">*</operator><name pos:start="47:14" pos:end="47:27">frame_size_ptr</name> <operator pos:start="47:29" pos:end="47:29">&lt;</operator> <name pos:start="47:31" pos:end="47:39">data_size</name></expr>)</condition> <block pos:start="47:42" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:35">

            <expr_stmt pos:start="49:13" pos:end="51:101"><expr pos:start="49:13" pos:end="51:100"><call pos:start="49:13" pos:end="51:100"><name pos:start="49:13" pos:end="49:18">av_log</name><argument_list pos:start="49:19" pos:end="51:100">(<argument pos:start="49:20" pos:end="49:24"><expr pos:start="49:20" pos:end="49:24"><name pos:start="49:20" pos:end="49:24">avctx</name></expr></argument>, <argument pos:start="49:27" pos:end="49:38"><expr pos:start="49:27" pos:end="49:38"><name pos:start="49:27" pos:end="49:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:41" pos:end="51:71"><expr pos:start="49:41" pos:end="51:71"><literal type="string" pos:start="49:41" pos:end="49:78">"output buffer size is too small for "</literal>

                                        <literal type="string" pos:start="51:41" pos:end="51:71">"the current frame (%d &lt; %d)\n"</literal></expr></argument>, <argument pos:start="51:74" pos:end="51:88"><expr pos:start="51:74" pos:end="51:88"><operator pos:start="51:74" pos:end="51:74">*</operator><name pos:start="51:75" pos:end="51:88">frame_size_ptr</name></expr></argument>, <argument pos:start="51:91" pos:end="51:99"><expr pos:start="51:91" pos:end="51:99"><name pos:start="51:91" pos:end="51:99">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:35">return <expr pos:start="53:20" pos:end="53:34"><call pos:start="53:20" pos:end="53:34"><name pos:start="53:20" pos:end="53:26">AVERROR</name><argument_list pos:start="53:27" pos:end="53:34">(<argument pos:start="53:28" pos:end="53:33"><expr pos:start="53:28" pos:end="53:33"><name pos:start="53:28" pos:end="53:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:60"><expr pos:start="59:9" pos:end="59:59"><call pos:start="59:9" pos:end="59:59"><name pos:start="59:9" pos:end="59:14">memcpy</name><argument_list pos:start="59:15" pos:end="59:59">(<argument pos:start="59:16" pos:end="59:22"><expr pos:start="59:16" pos:end="59:22"><name pos:start="59:16" pos:end="59:22">samples</name></expr></argument>, <argument pos:start="59:25" pos:end="59:46"><expr pos:start="59:25" pos:end="59:46"><name pos:start="59:25" pos:end="59:46"><name pos:start="59:25" pos:end="59:29">frame</name><operator pos:start="59:30" pos:end="59:30">.</operator><name pos:start="59:31" pos:end="59:43">extended_data</name><index pos:start="59:44" pos:end="59:46">[<expr pos:start="59:45" pos:end="59:45"><literal type="number" pos:start="59:45" pos:end="59:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:49" pos:end="59:58"><expr pos:start="59:49" pos:end="59:58"><name pos:start="59:49" pos:end="59:58">plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="63:9" pos:end="75:9"><if pos:start="63:9" pos:end="75:9">if <condition pos:start="63:12" pos:end="63:42">(<expr pos:start="63:13" pos:end="63:41"><name pos:start="63:13" pos:end="63:18">planar</name> <operator pos:start="63:20" pos:end="63:21">&amp;&amp;</operator> <name pos:start="63:23" pos:end="63:37"><name pos:start="63:23" pos:end="63:27">avctx</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:37">channels</name></name> <operator pos:start="63:39" pos:end="63:39">&gt;</operator> <literal type="number" pos:start="63:41" pos:end="63:41">1</literal></expr>)</condition> <block pos:start="63:44" pos:end="75:9">{<block_content pos:start="65:13" pos:end="73:13">

            <decl_stmt pos:start="65:13" pos:end="65:61"><decl pos:start="65:13" pos:end="65:60"><type pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:19">uint8_t</name> <modifier pos:start="65:21" pos:end="65:21">*</modifier></type><name pos:start="65:22" pos:end="65:24">out</name> <init pos:start="65:26" pos:end="65:60">= <expr pos:start="65:28" pos:end="65:60"><operator pos:start="65:28" pos:end="65:28">(</operator><operator pos:start="65:29" pos:end="65:29">(</operator><name pos:start="65:30" pos:end="65:36">uint8_t</name> <operator pos:start="65:38" pos:end="65:38">*</operator><operator pos:start="65:39" pos:end="65:39">)</operator><name pos:start="65:40" pos:end="65:46">samples</name><operator pos:start="65:47" pos:end="65:47">)</operator> <operator pos:start="65:49" pos:end="65:49">+</operator> <name pos:start="65:51" pos:end="65:60">plane_size</name></expr></init></decl>;</decl_stmt>

            <for pos:start="67:13" pos:end="73:13">for <control pos:start="67:17" pos:end="67:52">(<init pos:start="67:18" pos:end="67:24"><expr pos:start="67:18" pos:end="67:23"><name pos:start="67:18" pos:end="67:19">ch</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <literal type="number" pos:start="67:23" pos:end="67:23">1</literal></expr>;</init> <condition pos:start="67:26" pos:end="67:46"><expr pos:start="67:26" pos:end="67:45"><name pos:start="67:26" pos:end="67:27">ch</name> <operator pos:start="67:29" pos:end="67:29">&lt;</operator> <name pos:start="67:31" pos:end="67:45"><name pos:start="67:31" pos:end="67:35">avctx</name><operator pos:start="67:36" pos:end="67:37">-&gt;</operator><name pos:start="67:38" pos:end="67:45">channels</name></name></expr>;</condition> <incr pos:start="67:48" pos:end="67:51"><expr pos:start="67:48" pos:end="67:51"><name pos:start="67:48" pos:end="67:49">ch</name><operator pos:start="67:50" pos:end="67:51">++</operator></expr></incr>)</control> <block pos:start="67:54" pos:end="73:13">{<block_content pos:start="69:17" pos:end="71:34">

                <expr_stmt pos:start="69:17" pos:end="69:65"><expr pos:start="69:17" pos:end="69:64"><call pos:start="69:17" pos:end="69:64"><name pos:start="69:17" pos:end="69:22">memcpy</name><argument_list pos:start="69:23" pos:end="69:64">(<argument pos:start="69:24" pos:end="69:26"><expr pos:start="69:24" pos:end="69:26"><name pos:start="69:24" pos:end="69:26">out</name></expr></argument>, <argument pos:start="69:29" pos:end="69:51"><expr pos:start="69:29" pos:end="69:51"><name pos:start="69:29" pos:end="69:51"><name pos:start="69:29" pos:end="69:33">frame</name><operator pos:start="69:34" pos:end="69:34">.</operator><name pos:start="69:35" pos:end="69:47">extended_data</name><index pos:start="69:48" pos:end="69:51">[<expr pos:start="69:49" pos:end="69:50"><name pos:start="69:49" pos:end="69:50">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="69:54" pos:end="69:63"><expr pos:start="69:54" pos:end="69:63"><name pos:start="69:54" pos:end="69:63">plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:34"><expr pos:start="71:17" pos:end="71:33"><name pos:start="71:17" pos:end="71:19">out</name> <operator pos:start="71:21" pos:end="71:22">+=</operator> <name pos:start="71:24" pos:end="71:33">plane_size</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:36"><expr pos:start="77:9" pos:end="77:35"><operator pos:start="77:9" pos:end="77:9">*</operator><name pos:start="77:10" pos:end="77:23">frame_size_ptr</name> <operator pos:start="77:25" pos:end="77:25">=</operator> <name pos:start="77:27" pos:end="77:35">data_size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="79:7" pos:end="83:5">else <block pos:start="79:12" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:28">

        <expr_stmt pos:start="81:9" pos:end="81:28"><expr pos:start="81:9" pos:end="81:27"><operator pos:start="81:9" pos:end="81:9">*</operator><name pos:start="81:10" pos:end="81:23">frame_size_ptr</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <literal type="number" pos:start="81:27" pos:end="81:27">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="85:5" pos:end="85:15">return <expr pos:start="85:12" pos:end="85:14"><name pos:start="85:12" pos:end="85:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
