<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15642.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:42">spapr_phb_remove_pci_device_cb</name><parameter_list pos:start="1:43" pos:end="1:74">(<parameter pos:start="1:44" pos:end="1:59"><decl pos:start="1:44" pos:end="1:59"><type pos:start="1:44" pos:end="1:59"><name pos:start="1:44" pos:end="1:54">DeviceState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">dev</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:65">void</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:73">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="29:1">{<block_content pos:start="25:5" pos:end="27:33">

    <comment type="block" pos:start="5:5" pos:end="23:7">/* some version guests do not wait for completion of a device

     * cleanup (generally done asynchronously by the kernel) before

     * signaling to QEMU that the device is safe, but instead sleep

     * for some 'safe' period of time. unfortunately on a busy host

     * this sleep isn't guaranteed to be long enough, resulting in

     * bad things like IRQ lines being left asserted during final

     * device removal. to deal with this we call reset just prior

     * to finalizing the device, which will put the device back into

     * an 'idle' state, as the device cleanup code expects.

     */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><call pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:20">pci_device_reset</name><argument_list pos:start="25:21" pos:end="25:37">(<argument pos:start="25:22" pos:end="25:36"><expr pos:start="25:22" pos:end="25:36"><call pos:start="25:22" pos:end="25:36"><name pos:start="25:22" pos:end="25:31">PCI_DEVICE</name><argument_list pos:start="25:32" pos:end="25:36">(<argument pos:start="25:33" pos:end="25:35"><expr pos:start="25:33" pos:end="25:35"><name pos:start="25:33" pos:end="25:35">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><call pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:19">object_unparent</name><argument_list pos:start="27:20" pos:end="27:32">(<argument pos:start="27:21" pos:end="27:31"><expr pos:start="27:21" pos:end="27:31"><call pos:start="27:21" pos:end="27:31"><name pos:start="27:21" pos:end="27:26">OBJECT</name><argument_list pos:start="27:27" pos:end="27:31">(<argument pos:start="27:28" pos:end="27:30"><expr pos:start="27:28" pos:end="27:30"><name pos:start="27:28" pos:end="27:30">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
