<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13496.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">virtqueue_pop</name><parameter_list pos:start="1:18" pos:end="1:56">(<parameter pos:start="1:19" pos:end="1:31"><decl pos:start="1:19" pos:end="1:31"><type pos:start="1:19" pos:end="1:31"><name pos:start="1:19" pos:end="1:27">VirtQueue</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:31">vq</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:55"><decl pos:start="1:34" pos:end="1:55"><type pos:start="1:34" pos:end="1:55"><name pos:start="1:34" pos:end="1:49">VirtQueueElement</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">elem</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="139:1">{<block_content pos:start="5:5" pos:end="137:40">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:18">i</name></decl>, <decl pos:start="5:21" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:21" pos:end="5:24">head</name></decl>, <decl pos:start="5:27" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:27" pos:end="5:29">max</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">hwaddr</name></type> <name pos:start="7:12" pos:end="7:18">desc_pa</name> <init pos:start="7:20" pos:end="7:35">= <expr pos:start="7:22" pos:end="7:35"><name pos:start="7:22" pos:end="7:35"><name pos:start="7:22" pos:end="7:23">vq</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:30">vring</name><operator pos:start="7:31" pos:end="7:31">.</operator><name pos:start="7:32" pos:end="7:35">desc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">VirtIODevice</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:22">vdev</name> <init pos:start="9:24" pos:end="9:33">= <expr pos:start="9:26" pos:end="9:33"><name pos:start="9:26" pos:end="9:33"><name pos:start="9:26" pos:end="9:27">vq</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:33">vdev</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:17"><if pos:start="13:5" pos:end="15:17">if <condition pos:start="13:8" pos:end="13:53">(<expr pos:start="13:9" pos:end="13:52"><operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="13:52"><name pos:start="13:10" pos:end="13:28">virtqueue_num_heads</name><argument_list pos:start="13:29" pos:end="13:52">(<argument pos:start="13:30" pos:end="13:31"><expr pos:start="13:30" pos:end="13:31"><name pos:start="13:30" pos:end="13:31">vq</name></expr></argument>, <argument pos:start="13:34" pos:end="13:51"><expr pos:start="13:34" pos:end="13:51"><name pos:start="13:34" pos:end="13:51"><name pos:start="13:34" pos:end="13:35">vq</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:51">last_avail_idx</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:17"><block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:66">/* When we start there are none of either input nor output. */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:37"><expr pos:start="21:5" pos:end="21:36"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:8">elem</name><operator pos:start="21:9" pos:end="21:10">-&gt;</operator><name pos:start="21:11" pos:end="21:17">out_num</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <name pos:start="21:21" pos:end="21:32"><name pos:start="21:21" pos:end="21:24">elem</name><operator pos:start="21:25" pos:end="21:26">-&gt;</operator><name pos:start="21:27" pos:end="21:32">in_num</name></name> <operator pos:start="21:34" pos:end="21:34">=</operator> <literal type="number" pos:start="21:36" pos:end="21:36">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:24"><expr pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:7">max</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <name pos:start="25:11" pos:end="25:23"><name pos:start="25:11" pos:end="25:12">vq</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:19">vring</name><operator pos:start="25:20" pos:end="25:20">.</operator><name pos:start="25:21" pos:end="25:23">num</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:60"><expr pos:start="29:5" pos:end="29:59"><name pos:start="29:5" pos:end="29:5">i</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <name pos:start="29:9" pos:end="29:12">head</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:59"><name pos:start="29:16" pos:end="29:33">virtqueue_get_head</name><argument_list pos:start="29:34" pos:end="29:59">(<argument pos:start="29:35" pos:end="29:36"><expr pos:start="29:35" pos:end="29:36"><name pos:start="29:35" pos:end="29:36">vq</name></expr></argument>, <argument pos:start="29:39" pos:end="29:58"><expr pos:start="29:39" pos:end="29:58"><name pos:start="29:39" pos:end="29:56"><name pos:start="29:39" pos:end="29:40">vq</name><operator pos:start="29:41" pos:end="29:42">-&gt;</operator><name pos:start="29:43" pos:end="29:56">last_avail_idx</name></name><operator pos:start="29:57" pos:end="29:58">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:63">(<expr pos:start="31:9" pos:end="31:62"><call pos:start="31:9" pos:end="31:62"><name pos:start="31:9" pos:end="31:31">virtio_vdev_has_feature</name><argument_list pos:start="31:32" pos:end="31:62">(<argument pos:start="31:33" pos:end="31:36"><expr pos:start="31:33" pos:end="31:36"><name pos:start="31:33" pos:end="31:36">vdev</name></expr></argument>, <argument pos:start="31:39" pos:end="31:61"><expr pos:start="31:39" pos:end="31:61"><name pos:start="31:39" pos:end="31:61">VIRTIO_RING_F_EVENT_IDX</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:65" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:54">

        <expr_stmt pos:start="33:9" pos:end="33:54"><expr pos:start="33:9" pos:end="33:53"><call pos:start="33:9" pos:end="33:53"><name pos:start="33:9" pos:end="33:29">vring_set_avail_event</name><argument_list pos:start="33:30" pos:end="33:53">(<argument pos:start="33:31" pos:end="33:32"><expr pos:start="33:31" pos:end="33:32"><name pos:start="33:31" pos:end="33:32">vq</name></expr></argument>, <argument pos:start="33:35" pos:end="33:52"><expr pos:start="33:35" pos:end="33:52"><name pos:start="33:35" pos:end="33:52"><name pos:start="33:35" pos:end="33:36">vq</name><operator pos:start="33:37" pos:end="33:38">-&gt;</operator><name pos:start="33:39" pos:end="33:52">last_avail_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="59:5"><if pos:start="39:5" pos:end="59:5">if <condition pos:start="39:8" pos:end="39:67">(<expr pos:start="39:9" pos:end="39:66"><call pos:start="39:9" pos:end="39:42"><name pos:start="39:9" pos:end="39:24">vring_desc_flags</name><argument_list pos:start="39:25" pos:end="39:42">(<argument pos:start="39:26" pos:end="39:29"><expr pos:start="39:26" pos:end="39:29"><name pos:start="39:26" pos:end="39:29">vdev</name></expr></argument>, <argument pos:start="39:32" pos:end="39:38"><expr pos:start="39:32" pos:end="39:38"><name pos:start="39:32" pos:end="39:38">desc_pa</name></expr></argument>, <argument pos:start="39:41" pos:end="39:41"><expr pos:start="39:41" pos:end="39:41"><name pos:start="39:41" pos:end="39:41">i</name></expr></argument>)</argument_list></call> <operator pos:start="39:44" pos:end="39:44">&amp;</operator> <name pos:start="39:46" pos:end="39:66">VRING_DESC_F_INDIRECT</name></expr>)</condition> <block pos:start="39:69" pos:end="59:5">{<block_content pos:start="41:9" pos:end="57:14">

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:65">(<expr pos:start="41:13" pos:end="41:64"><call pos:start="41:13" pos:end="41:44"><name pos:start="41:13" pos:end="41:26">vring_desc_len</name><argument_list pos:start="41:27" pos:end="41:44">(<argument pos:start="41:28" pos:end="41:31"><expr pos:start="41:28" pos:end="41:31"><name pos:start="41:28" pos:end="41:31">vdev</name></expr></argument>, <argument pos:start="41:34" pos:end="41:40"><expr pos:start="41:34" pos:end="41:40"><name pos:start="41:34" pos:end="41:40">desc_pa</name></expr></argument>, <argument pos:start="41:43" pos:end="41:43"><expr pos:start="41:43" pos:end="41:43"><name pos:start="41:43" pos:end="41:43">i</name></expr></argument>)</argument_list></call> <operator pos:start="41:46" pos:end="41:46">%</operator> <sizeof pos:start="41:48" pos:end="41:64">sizeof<argument_list pos:start="41:54" pos:end="41:64">(<argument pos:start="41:55" pos:end="41:63"><expr pos:start="41:55" pos:end="41:63"><name pos:start="41:55" pos:end="41:63">VRingDesc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="41:67" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:20">

            <expr_stmt pos:start="43:13" pos:end="43:67"><expr pos:start="43:13" pos:end="43:66"><call pos:start="43:13" pos:end="43:66"><name pos:start="43:13" pos:end="43:24">error_report</name><argument_list pos:start="43:25" pos:end="43:66">(<argument pos:start="43:26" pos:end="43:65"><expr pos:start="43:26" pos:end="43:65"><literal type="string" pos:start="43:26" pos:end="43:65">"Invalid size for indirect buffer table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:20"><expr pos:start="45:13" pos:end="45:19"><call pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:16">exit</name><argument_list pos:start="45:17" pos:end="45:19">(<argument pos:start="45:18" pos:end="45:18"><expr pos:start="45:18" pos:end="45:18"><literal type="number" pos:start="45:18" pos:end="45:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="51:9" pos:end="51:53">/* loop over the indirect descriptor table */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:67"><expr pos:start="53:9" pos:end="53:66"><name pos:start="53:9" pos:end="53:11">max</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:46"><name pos:start="53:15" pos:end="53:28">vring_desc_len</name><argument_list pos:start="53:29" pos:end="53:46">(<argument pos:start="53:30" pos:end="53:33"><expr pos:start="53:30" pos:end="53:33"><name pos:start="53:30" pos:end="53:33">vdev</name></expr></argument>, <argument pos:start="53:36" pos:end="53:42"><expr pos:start="53:36" pos:end="53:42"><name pos:start="53:36" pos:end="53:42">desc_pa</name></expr></argument>, <argument pos:start="53:45" pos:end="53:45"><expr pos:start="53:45" pos:end="53:45"><name pos:start="53:45" pos:end="53:45">i</name></expr></argument>)</argument_list></call> <operator pos:start="53:48" pos:end="53:48">/</operator> <sizeof pos:start="53:50" pos:end="53:66">sizeof<argument_list pos:start="53:56" pos:end="53:66">(<argument pos:start="53:57" pos:end="53:65"><expr pos:start="53:57" pos:end="53:65"><name pos:start="53:57" pos:end="53:65">VRingDesc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:52"><expr pos:start="55:9" pos:end="55:51"><name pos:start="55:9" pos:end="55:15">desc_pa</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:51"><name pos:start="55:19" pos:end="55:33">vring_desc_addr</name><argument_list pos:start="55:34" pos:end="55:51">(<argument pos:start="55:35" pos:end="55:38"><expr pos:start="55:35" pos:end="55:38"><name pos:start="55:35" pos:end="55:38">vdev</name></expr></argument>, <argument pos:start="55:41" pos:end="55:47"><expr pos:start="55:41" pos:end="55:47"><name pos:start="55:41" pos:end="55:47">desc_pa</name></expr></argument>, <argument pos:start="55:50" pos:end="55:50"><expr pos:start="55:50" pos:end="55:50"><name pos:start="55:50" pos:end="55:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:14"><expr pos:start="57:9" pos:end="57:13"><name pos:start="57:9" pos:end="57:9">i</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <literal type="number" pos:start="57:13" pos:end="57:13">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:37">/* Collect all the descriptors */</comment>

    <do pos:start="65:5" pos:end="117:70">do <block pos:start="65:8" pos:end="117:5">{<block_content pos:start="67:9" pos:end="115:9">

        <decl_stmt pos:start="67:9" pos:end="67:25"><decl pos:start="67:9" pos:end="67:24"><type pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:14">struct</name> <name pos:start="67:16" pos:end="67:20">iovec</name></name> <modifier pos:start="67:22" pos:end="67:22">*</modifier></type><name pos:start="67:23" pos:end="67:24">sg</name></decl>;</decl_stmt>



        <if_stmt pos:start="71:9" pos:end="99:9"><if pos:start="71:9" pos:end="85:9">if <condition pos:start="71:12" pos:end="71:68">(<expr pos:start="71:13" pos:end="71:67"><call pos:start="71:13" pos:end="71:46"><name pos:start="71:13" pos:end="71:28">vring_desc_flags</name><argument_list pos:start="71:29" pos:end="71:46">(<argument pos:start="71:30" pos:end="71:33"><expr pos:start="71:30" pos:end="71:33"><name pos:start="71:30" pos:end="71:33">vdev</name></expr></argument>, <argument pos:start="71:36" pos:end="71:42"><expr pos:start="71:36" pos:end="71:42"><name pos:start="71:36" pos:end="71:42">desc_pa</name></expr></argument>, <argument pos:start="71:45" pos:end="71:45"><expr pos:start="71:45" pos:end="71:45"><name pos:start="71:45" pos:end="71:45">i</name></expr></argument>)</argument_list></call> <operator pos:start="71:48" pos:end="71:48">&amp;</operator> <name pos:start="71:50" pos:end="71:67">VRING_DESC_F_WRITE</name></expr>)</condition> <block pos:start="71:70" pos:end="85:9">{<block_content pos:start="73:13" pos:end="83:46">

            <if_stmt pos:start="73:13" pos:end="79:13"><if pos:start="73:13" pos:end="79:13">if <condition pos:start="73:16" pos:end="73:56">(<expr pos:start="73:17" pos:end="73:55"><name pos:start="73:17" pos:end="73:28"><name pos:start="73:17" pos:end="73:20">elem</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:28">in_num</name></name> <operator pos:start="73:30" pos:end="73:31">&gt;=</operator> <call pos:start="73:33" pos:end="73:55"><name pos:start="73:33" pos:end="73:42">ARRAY_SIZE</name><argument_list pos:start="73:43" pos:end="73:55">(<argument pos:start="73:44" pos:end="73:54"><expr pos:start="73:44" pos:end="73:54"><name pos:start="73:44" pos:end="73:54"><name pos:start="73:44" pos:end="73:47">elem</name><operator pos:start="73:48" pos:end="73:49">-&gt;</operator><name pos:start="73:50" pos:end="73:54">in_sg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:58" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:24">

                <expr_stmt pos:start="75:17" pos:end="75:77"><expr pos:start="75:17" pos:end="75:76"><call pos:start="75:17" pos:end="75:76"><name pos:start="75:17" pos:end="75:28">error_report</name><argument_list pos:start="75:29" pos:end="75:76">(<argument pos:start="75:30" pos:end="75:75"><expr pos:start="75:30" pos:end="75:75"><literal type="string" pos:start="75:30" pos:end="75:75">"Too many write descriptors in indirect table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:24"><expr pos:start="77:17" pos:end="77:23"><call pos:start="77:17" pos:end="77:23"><name pos:start="77:17" pos:end="77:20">exit</name><argument_list pos:start="77:21" pos:end="77:23">(<argument pos:start="77:22" pos:end="77:22"><expr pos:start="77:22" pos:end="77:22"><literal type="number" pos:start="77:22" pos:end="77:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:76"><expr pos:start="81:13" pos:end="81:75"><name pos:start="81:13" pos:end="81:39"><name pos:start="81:13" pos:end="81:16">elem</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:25">in_addr</name><index pos:start="81:26" pos:end="81:39">[<expr pos:start="81:27" pos:end="81:38"><name pos:start="81:27" pos:end="81:38"><name pos:start="81:27" pos:end="81:30">elem</name><operator pos:start="81:31" pos:end="81:32">-&gt;</operator><name pos:start="81:33" pos:end="81:38">in_num</name></name></expr>]</index></name> <operator pos:start="81:41" pos:end="81:41">=</operator> <call pos:start="81:43" pos:end="81:75"><name pos:start="81:43" pos:end="81:57">vring_desc_addr</name><argument_list pos:start="81:58" pos:end="81:75">(<argument pos:start="81:59" pos:end="81:62"><expr pos:start="81:59" pos:end="81:62"><name pos:start="81:59" pos:end="81:62">vdev</name></expr></argument>, <argument pos:start="81:65" pos:end="81:71"><expr pos:start="81:65" pos:end="81:71"><name pos:start="81:65" pos:end="81:71">desc_pa</name></expr></argument>, <argument pos:start="81:74" pos:end="81:74"><expr pos:start="81:74" pos:end="81:74"><name pos:start="81:74" pos:end="81:74">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:46"><expr pos:start="83:13" pos:end="83:45"><name pos:start="83:13" pos:end="83:14">sg</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <operator pos:start="83:18" pos:end="83:18">&amp;</operator><name pos:start="83:19" pos:end="83:45"><name pos:start="83:19" pos:end="83:22">elem</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:29">in_sg</name><index pos:start="83:30" pos:end="83:45">[<expr pos:start="83:31" pos:end="83:44"><name pos:start="83:31" pos:end="83:42"><name pos:start="83:31" pos:end="83:34">elem</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:42">in_num</name></name><operator pos:start="83:43" pos:end="83:44">++</operator></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="85:11" pos:end="99:9">else <block pos:start="85:16" pos:end="99:9">{<block_content pos:start="87:13" pos:end="97:48">

            <if_stmt pos:start="87:13" pos:end="93:13"><if pos:start="87:13" pos:end="93:13">if <condition pos:start="87:16" pos:end="87:58">(<expr pos:start="87:17" pos:end="87:57"><name pos:start="87:17" pos:end="87:29"><name pos:start="87:17" pos:end="87:20">elem</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:29">out_num</name></name> <operator pos:start="87:31" pos:end="87:32">&gt;=</operator> <call pos:start="87:34" pos:end="87:57"><name pos:start="87:34" pos:end="87:43">ARRAY_SIZE</name><argument_list pos:start="87:44" pos:end="87:57">(<argument pos:start="87:45" pos:end="87:56"><expr pos:start="87:45" pos:end="87:56"><name pos:start="87:45" pos:end="87:56"><name pos:start="87:45" pos:end="87:48">elem</name><operator pos:start="87:49" pos:end="87:50">-&gt;</operator><name pos:start="87:51" pos:end="87:56">out_sg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:60" pos:end="93:13">{<block_content pos:start="89:17" pos:end="91:24">

                <expr_stmt pos:start="89:17" pos:end="89:76"><expr pos:start="89:17" pos:end="89:75"><call pos:start="89:17" pos:end="89:75"><name pos:start="89:17" pos:end="89:28">error_report</name><argument_list pos:start="89:29" pos:end="89:75">(<argument pos:start="89:30" pos:end="89:74"><expr pos:start="89:30" pos:end="89:74"><literal type="string" pos:start="89:30" pos:end="89:74">"Too many read descriptors in indirect table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:24"><expr pos:start="91:17" pos:end="91:23"><call pos:start="91:17" pos:end="91:23"><name pos:start="91:17" pos:end="91:20">exit</name><argument_list pos:start="91:21" pos:end="91:23">(<argument pos:start="91:22" pos:end="91:22"><expr pos:start="91:22" pos:end="91:22"><literal type="number" pos:start="91:22" pos:end="91:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:78"><expr pos:start="95:13" pos:end="95:77"><name pos:start="95:13" pos:end="95:41"><name pos:start="95:13" pos:end="95:16">elem</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:26">out_addr</name><index pos:start="95:27" pos:end="95:41">[<expr pos:start="95:28" pos:end="95:40"><name pos:start="95:28" pos:end="95:40"><name pos:start="95:28" pos:end="95:31">elem</name><operator pos:start="95:32" pos:end="95:33">-&gt;</operator><name pos:start="95:34" pos:end="95:40">out_num</name></name></expr>]</index></name> <operator pos:start="95:43" pos:end="95:43">=</operator> <call pos:start="95:45" pos:end="95:77"><name pos:start="95:45" pos:end="95:59">vring_desc_addr</name><argument_list pos:start="95:60" pos:end="95:77">(<argument pos:start="95:61" pos:end="95:64"><expr pos:start="95:61" pos:end="95:64"><name pos:start="95:61" pos:end="95:64">vdev</name></expr></argument>, <argument pos:start="95:67" pos:end="95:73"><expr pos:start="95:67" pos:end="95:73"><name pos:start="95:67" pos:end="95:73">desc_pa</name></expr></argument>, <argument pos:start="95:76" pos:end="95:76"><expr pos:start="95:76" pos:end="95:76"><name pos:start="95:76" pos:end="95:76">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:48"><expr pos:start="97:13" pos:end="97:47"><name pos:start="97:13" pos:end="97:14">sg</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <operator pos:start="97:18" pos:end="97:18">&amp;</operator><name pos:start="97:19" pos:end="97:47"><name pos:start="97:19" pos:end="97:22">elem</name><operator pos:start="97:23" pos:end="97:24">-&gt;</operator><name pos:start="97:25" pos:end="97:30">out_sg</name><index pos:start="97:31" pos:end="97:47">[<expr pos:start="97:32" pos:end="97:46"><name pos:start="97:32" pos:end="97:44"><name pos:start="97:32" pos:end="97:35">elem</name><operator pos:start="97:36" pos:end="97:37">-&gt;</operator><name pos:start="97:38" pos:end="97:44">out_num</name></name><operator pos:start="97:45" pos:end="97:46">++</operator></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:55"><expr pos:start="103:9" pos:end="103:54"><name pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:10">sg</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:19">iov_len</name></name> <operator pos:start="103:21" pos:end="103:21">=</operator> <call pos:start="103:23" pos:end="103:54"><name pos:start="103:23" pos:end="103:36">vring_desc_len</name><argument_list pos:start="103:37" pos:end="103:54">(<argument pos:start="103:38" pos:end="103:41"><expr pos:start="103:38" pos:end="103:41"><name pos:start="103:38" pos:end="103:41">vdev</name></expr></argument>, <argument pos:start="103:44" pos:end="103:50"><expr pos:start="103:44" pos:end="103:50"><name pos:start="103:44" pos:end="103:50">desc_pa</name></expr></argument>, <argument pos:start="103:53" pos:end="103:53"><expr pos:start="103:53" pos:end="103:53"><name pos:start="103:53" pos:end="103:53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="107:9" pos:end="107:68">/* If we've got too many, that implies a descriptor loop. */</comment>

        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:49">(<expr pos:start="109:13" pos:end="109:48"><operator pos:start="109:13" pos:end="109:13">(</operator><name pos:start="109:14" pos:end="109:25"><name pos:start="109:14" pos:end="109:17">elem</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:25">in_num</name></name> <operator pos:start="109:27" pos:end="109:27">+</operator> <name pos:start="109:29" pos:end="109:41"><name pos:start="109:29" pos:end="109:32">elem</name><operator pos:start="109:33" pos:end="109:34">-&gt;</operator><name pos:start="109:35" pos:end="109:41">out_num</name></name><operator pos:start="109:42" pos:end="109:42">)</operator> <operator pos:start="109:44" pos:end="109:44">&gt;</operator> <name pos:start="109:46" pos:end="109:48">max</name></expr>)</condition> <block pos:start="109:51" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:20">

            <expr_stmt pos:start="111:13" pos:end="111:46"><expr pos:start="111:13" pos:end="111:45"><call pos:start="111:13" pos:end="111:45"><name pos:start="111:13" pos:end="111:24">error_report</name><argument_list pos:start="111:25" pos:end="111:45">(<argument pos:start="111:26" pos:end="111:44"><expr pos:start="111:26" pos:end="111:44"><literal type="string" pos:start="111:26" pos:end="111:44">"Looped descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:20"><expr pos:start="113:13" pos:end="113:19"><call pos:start="113:13" pos:end="113:19"><name pos:start="113:13" pos:end="113:16">exit</name><argument_list pos:start="113:17" pos:end="113:19">(<argument pos:start="113:18" pos:end="113:18"><expr pos:start="113:18" pos:end="113:18"><literal type="number" pos:start="113:18" pos:end="113:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="117:13" pos:end="117:69">(<expr pos:start="117:14" pos:end="117:68"><operator pos:start="117:14" pos:end="117:14">(</operator><name pos:start="117:15" pos:end="117:15">i</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <call pos:start="117:19" pos:end="117:60"><name pos:start="117:19" pos:end="117:37">virtqueue_next_desc</name><argument_list pos:start="117:38" pos:end="117:60">(<argument pos:start="117:39" pos:end="117:42"><expr pos:start="117:39" pos:end="117:42"><name pos:start="117:39" pos:end="117:42">vdev</name></expr></argument>, <argument pos:start="117:45" pos:end="117:51"><expr pos:start="117:45" pos:end="117:51"><name pos:start="117:45" pos:end="117:51">desc_pa</name></expr></argument>, <argument pos:start="117:54" pos:end="117:54"><expr pos:start="117:54" pos:end="117:54"><name pos:start="117:54" pos:end="117:54">i</name></expr></argument>, <argument pos:start="117:57" pos:end="117:59"><expr pos:start="117:57" pos:end="117:59"><name pos:start="117:57" pos:end="117:59">max</name></expr></argument>)</argument_list></call><operator pos:start="117:61" pos:end="117:61">)</operator> <operator pos:start="117:63" pos:end="117:64">!=</operator> <name pos:start="117:66" pos:end="117:68">max</name></expr>)</condition>;</do>



    <comment type="block" pos:start="121:5" pos:end="121:40">/* Now map what we have collected */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:24"><expr pos:start="123:5" pos:end="123:23"><call pos:start="123:5" pos:end="123:23"><name pos:start="123:5" pos:end="123:17">virtqueue_map</name><argument_list pos:start="123:18" pos:end="123:23">(<argument pos:start="123:19" pos:end="123:22"><expr pos:start="123:19" pos:end="123:22"><name pos:start="123:19" pos:end="123:22">elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:23"><expr pos:start="127:5" pos:end="127:22"><name pos:start="127:5" pos:end="127:15"><name pos:start="127:5" pos:end="127:8">elem</name><operator pos:start="127:9" pos:end="127:10">-&gt;</operator><name pos:start="127:11" pos:end="127:15">index</name></name> <operator pos:start="127:17" pos:end="127:17">=</operator> <name pos:start="127:19" pos:end="127:22">head</name></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:16"><expr pos:start="131:5" pos:end="131:15"><name pos:start="131:5" pos:end="131:13"><name pos:start="131:5" pos:end="131:6">vq</name><operator pos:start="131:7" pos:end="131:8">-&gt;</operator><name pos:start="131:9" pos:end="131:13">inuse</name></name><operator pos:start="131:14" pos:end="131:15">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:63"><expr pos:start="135:5" pos:end="135:62"><call pos:start="135:5" pos:end="135:62"><name pos:start="135:5" pos:end="135:23">trace_virtqueue_pop</name><argument_list pos:start="135:24" pos:end="135:62">(<argument pos:start="135:25" pos:end="135:26"><expr pos:start="135:25" pos:end="135:26"><name pos:start="135:25" pos:end="135:26">vq</name></expr></argument>, <argument pos:start="135:29" pos:end="135:32"><expr pos:start="135:29" pos:end="135:32"><name pos:start="135:29" pos:end="135:32">elem</name></expr></argument>, <argument pos:start="135:35" pos:end="135:46"><expr pos:start="135:35" pos:end="135:46"><name pos:start="135:35" pos:end="135:46"><name pos:start="135:35" pos:end="135:38">elem</name><operator pos:start="135:39" pos:end="135:40">-&gt;</operator><name pos:start="135:41" pos:end="135:46">in_num</name></name></expr></argument>, <argument pos:start="135:49" pos:end="135:61"><expr pos:start="135:49" pos:end="135:61"><name pos:start="135:49" pos:end="135:61"><name pos:start="135:49" pos:end="135:52">elem</name><operator pos:start="135:53" pos:end="135:54">-&gt;</operator><name pos:start="135:55" pos:end="135:61">out_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="137:5" pos:end="137:40">return <expr pos:start="137:12" pos:end="137:39"><name pos:start="137:12" pos:end="137:23"><name pos:start="137:12" pos:end="137:15">elem</name><operator pos:start="137:16" pos:end="137:17">-&gt;</operator><name pos:start="137:18" pos:end="137:23">in_num</name></name> <operator pos:start="137:25" pos:end="137:25">+</operator> <name pos:start="137:27" pos:end="137:39"><name pos:start="137:27" pos:end="137:30">elem</name><operator pos:start="137:31" pos:end="137:32">-&gt;</operator><name pos:start="137:33" pos:end="137:39">out_num</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
