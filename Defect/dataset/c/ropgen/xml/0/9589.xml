<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9589.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:13">mmap_frag</name><parameter_list pos:start="1:14" pos:end="5:65">(<parameter pos:start="1:15" pos:end="1:38"><decl pos:start="1:15" pos:end="1:38"><type pos:start="1:15" pos:end="1:38"><name pos:start="1:15" pos:end="1:22">unsigned</name> <name pos:start="1:24" pos:end="1:27">long</name></type> <name pos:start="1:29" pos:end="1:38">host_start</name></decl></parameter>,

               <parameter pos:start="3:16" pos:end="3:34"><decl pos:start="3:16" pos:end="3:34"><type pos:start="3:16" pos:end="3:34"><name pos:start="3:16" pos:end="3:23">unsigned</name> <name pos:start="3:25" pos:end="3:28">long</name></type> <name pos:start="3:30" pos:end="3:34">start</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:53"><decl pos:start="3:37" pos:end="3:53"><type pos:start="3:37" pos:end="3:53"><name pos:start="3:37" pos:end="3:44">unsigned</name> <name pos:start="3:46" pos:end="3:49">long</name></type> <name pos:start="3:51" pos:end="3:53">end</name></decl></parameter>,

               <parameter pos:start="5:16" pos:end="5:23"><decl pos:start="5:16" pos:end="5:23"><type pos:start="5:16" pos:end="5:23"><name pos:start="5:16" pos:end="5:18">int</name></type> <name pos:start="5:20" pos:end="5:23">prot</name></decl></parameter>, <parameter pos:start="5:26" pos:end="5:34"><decl pos:start="5:26" pos:end="5:34"><type pos:start="5:26" pos:end="5:34"><name pos:start="5:26" pos:end="5:28">int</name></type> <name pos:start="5:30" pos:end="5:34">flags</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:42"><decl pos:start="5:37" pos:end="5:42"><type pos:start="5:37" pos:end="5:42"><name pos:start="5:37" pos:end="5:39">int</name></type> <name pos:start="5:41" pos:end="5:42">fd</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:64"><decl pos:start="5:45" pos:end="5:64"><type pos:start="5:45" pos:end="5:64"><name pos:start="5:45" pos:end="5:52">unsigned</name> <name pos:start="5:54" pos:end="5:57">long</name></type> <name pos:start="5:59" pos:end="5:64">offset</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="109:1">{<block_content pos:start="9:5" pos:end="107:13">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">long</name></type> <name pos:start="9:19" pos:end="9:26">host_end</name></decl>, <decl pos:start="9:29" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:17"/><name pos:start="9:29" pos:end="9:31">ret</name></decl>, <decl pos:start="9:34" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:17"/><name pos:start="9:34" pos:end="9:37">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">prot1</name></decl>, <decl pos:start="11:16" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:16" pos:end="11:23">prot_new</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:48"><expr pos:start="15:5" pos:end="15:47"><name pos:start="15:5" pos:end="15:12">host_end</name> <operator pos:start="15:14" pos:end="15:14">=</operator> <name pos:start="15:16" pos:end="15:25">host_start</name> <operator pos:start="15:27" pos:end="15:27">+</operator> <name pos:start="15:29" pos:end="15:47">qemu_host_page_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:68">/* get the protection of the target pages outside the mapping */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:14"><expr pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:9">prot1</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <literal type="number" pos:start="21:13" pos:end="21:13">0</literal></expr>;</expr_stmt>

    <for pos:start="23:5" pos:end="29:5">for<control pos:start="23:8" pos:end="23:51">(<init pos:start="23:9" pos:end="23:26"><expr pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:12">addr</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:25">host_start</name></expr>;</init> <condition pos:start="23:28" pos:end="23:43"><expr pos:start="23:28" pos:end="23:42"><name pos:start="23:28" pos:end="23:31">addr</name> <operator pos:start="23:33" pos:end="23:33">&lt;</operator> <name pos:start="23:35" pos:end="23:42">host_end</name></expr>;</condition> <incr pos:start="23:45" pos:end="23:50"><expr pos:start="23:45" pos:end="23:50"><name pos:start="23:45" pos:end="23:48">addr</name><operator pos:start="23:49" pos:end="23:50">++</operator></expr></incr>)</control> <block pos:start="23:53" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:42">

        <if_stmt pos:start="25:9" pos:end="27:42"><if pos:start="25:9" pos:end="27:42">if <condition pos:start="25:12" pos:end="25:40">(<expr pos:start="25:13" pos:end="25:39"><name pos:start="25:13" pos:end="25:16">addr</name> <operator pos:start="25:18" pos:end="25:18">&lt;</operator> <name pos:start="25:20" pos:end="25:24">start</name> <operator pos:start="25:26" pos:end="25:27">||</operator> <name pos:start="25:29" pos:end="25:32">addr</name> <operator pos:start="25:34" pos:end="25:35">&gt;=</operator> <name pos:start="25:37" pos:end="25:39">end</name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:42"><block_content pos:start="27:13" pos:end="27:42">

            <expr_stmt pos:start="27:13" pos:end="27:42"><expr pos:start="27:13" pos:end="27:41"><name pos:start="27:13" pos:end="27:17">prot1</name> <operator pos:start="27:19" pos:end="27:20">|=</operator> <call pos:start="27:22" pos:end="27:41"><name pos:start="27:22" pos:end="27:35">page_get_flags</name><argument_list pos:start="27:36" pos:end="27:41">(<argument pos:start="27:37" pos:end="27:40"><expr pos:start="27:37" pos:end="27:40"><name pos:start="27:37" pos:end="27:40">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="33:5" pos:end="45:5"><if pos:start="33:5" pos:end="45:5">if <condition pos:start="33:8" pos:end="33:19">(<expr pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:13">prot1</name> <operator pos:start="33:15" pos:end="33:16">==</operator> <literal type="number" pos:start="33:18" pos:end="33:18">0</literal></expr>)</condition> <block pos:start="33:21" pos:end="45:5">{<block_content pos:start="37:9" pos:end="43:23">

        <comment type="block" pos:start="35:9" pos:end="35:51">/* no page was there, so we allocate one */</comment>

        <expr_stmt pos:start="37:9" pos:end="39:55"><expr pos:start="37:9" pos:end="39:54"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <operator pos:start="37:15" pos:end="37:15">(</operator><name pos:start="37:16" pos:end="37:19">long</name><operator pos:start="37:20" pos:end="37:20">)</operator><call pos:start="37:21" pos:end="39:54"><name pos:start="37:21" pos:end="37:24">mmap</name><argument_list pos:start="37:25" pos:end="39:54">(<argument pos:start="37:26" pos:end="37:43"><expr pos:start="37:26" pos:end="37:43"><operator pos:start="37:26" pos:end="37:26">(</operator><name pos:start="37:27" pos:end="37:30">void</name> <operator pos:start="37:32" pos:end="37:32">*</operator><operator pos:start="37:33" pos:end="37:33">)</operator><name pos:start="37:34" pos:end="37:43">host_start</name></expr></argument>, <argument pos:start="37:46" pos:end="37:64"><expr pos:start="37:46" pos:end="37:64"><name pos:start="37:46" pos:end="37:64">qemu_host_page_size</name></expr></argument>, <argument pos:start="37:67" pos:end="37:70"><expr pos:start="37:67" pos:end="37:70"><name pos:start="37:67" pos:end="37:70">prot</name></expr></argument>,

                         <argument pos:start="39:26" pos:end="39:46"><expr pos:start="39:26" pos:end="39:46"><name pos:start="39:26" pos:end="39:30">flags</name> <operator pos:start="39:32" pos:end="39:32">|</operator> <name pos:start="39:34" pos:end="39:46">MAP_ANONYMOUS</name></expr></argument>, <argument pos:start="39:49" pos:end="39:50"><expr pos:start="39:49" pos:end="39:50"><operator pos:start="39:49" pos:end="39:49">-</operator><literal type="number" pos:start="39:50" pos:end="39:50">1</literal></expr></argument>, <argument pos:start="39:53" pos:end="39:53"><expr pos:start="39:53" pos:end="39:53"><literal type="number" pos:start="39:53" pos:end="39:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:23"><if pos:start="41:9" pos:end="43:23">if <condition pos:start="41:12" pos:end="41:22">(<expr pos:start="41:13" pos:end="41:21"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:18">==</operator> <operator pos:start="41:20" pos:end="41:20">-</operator><literal type="number" pos:start="41:21" pos:end="41:21">1</literal></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:23"><block_content pos:start="43:13" pos:end="43:23">

            <return pos:start="43:13" pos:end="43:23">return <expr pos:start="43:20" pos:end="43:22"><name pos:start="43:20" pos:end="43:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:23"><expr pos:start="47:5" pos:end="47:22"><name pos:start="47:5" pos:end="47:9">prot1</name> <operator pos:start="47:11" pos:end="47:12">&amp;=</operator> <name pos:start="47:14" pos:end="47:22">PAGE_BITS</name></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:28"><expr pos:start="51:5" pos:end="51:27"><name pos:start="51:5" pos:end="51:12">prot_new</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <name pos:start="51:16" pos:end="51:19">prot</name> <operator pos:start="51:21" pos:end="51:21">|</operator> <name pos:start="51:23" pos:end="51:27">prot1</name></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="105:5"><if pos:start="53:5" pos:end="95:5">if <condition pos:start="53:8" pos:end="53:33">(<expr pos:start="53:9" pos:end="53:32"><operator pos:start="53:9" pos:end="53:9">!</operator><operator pos:start="53:10" pos:end="53:10">(</operator><name pos:start="53:11" pos:end="53:15">flags</name> <operator pos:start="53:17" pos:end="53:17">&amp;</operator> <name pos:start="53:19" pos:end="53:31">MAP_ANONYMOUS</name><operator pos:start="53:32" pos:end="53:32">)</operator></expr>)</condition> <block pos:start="53:35" pos:end="95:5">{<block_content pos:start="61:9" pos:end="93:72">

        <comment type="block" pos:start="55:9" pos:end="57:51">/* msync() won't work here, so we return an error if write is

           possible while it is a shared mapping */</comment>

<cpp:ifndef pos:start="59:1" pos:end="59:17">#<cpp:directive pos:start="59:2" pos:end="59:7">ifndef</cpp:directive> <name pos:start="59:9" pos:end="59:17">__APPLE__</name></cpp:ifndef>

        <if_stmt pos:start="61:9" pos:end="79:82"><if pos:start="61:9" pos:end="79:82">if <condition pos:start="61:12" pos:end="79:81">(<decl_stmt pos:start="61:13" pos:end="64:0"><expr pos:start="61:13" pos:end="64:0"><operator pos:start="61:13" pos:end="61:13">(</operator><name pos:start="61:14" pos:end="61:18">flags</name> <operator pos:start="61:20" pos:end="61:20">&amp;</operator> <name pos:start="61:22" pos:end="61:29">MAP_TYPE</name><operator pos:start="61:30" pos:end="61:30">)</operator> <operator pos:start="61:32" pos:end="61:33">==</operator> <name pos:start="61:35" pos:end="61:44">MAP_SHARED</name> <operator pos:start="61:46" pos:end="64:0">&amp;&amp;</operator></expr></decl_stmt>

<cpp:else pos:start="63:1" pos:end="63:5">#<cpp:directive pos:start="63:2" pos:end="63:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="65:9" pos:end="71:27"><if pos:start="65:9" pos:end="71:27">if <condition pos:start="65:12" pos:end="69:32">(<expr pos:start="65:13" pos:end="69:31"><operator pos:start="65:13" pos:end="65:13">(</operator><name pos:start="65:14" pos:end="65:18">flags</name> <operator pos:start="65:20" pos:end="65:20">&amp;</operator>  <name pos:start="65:23" pos:end="65:32">MAP_SHARED</name><operator pos:start="65:33" pos:end="65:33">)</operator> <operator pos:start="65:35" pos:end="68:0">&amp;&amp;</operator>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

            <operator pos:start="69:13" pos:end="69:13">(</operator><name pos:start="69:14" pos:end="69:17">prot</name> <operator pos:start="69:19" pos:end="69:19">&amp;</operator> <name pos:start="69:21" pos:end="69:30">PROT_WRITE</name><operator pos:start="69:31" pos:end="69:31">)</operator></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:27"><block_content pos:start="71:13" pos:end="71:27">

            <return pos:start="71:13" pos:end="71:27">return <expr pos:start="71:20" pos:end="71:26"><operator pos:start="71:20" pos:end="71:20">-</operator><name pos:start="71:21" pos:end="71:26">EINVAL</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="75:9" pos:end="75:50">/* adjust protection to be able to read */</comment>

        if <expr pos:start="77:12" pos:end="79:81"><operator pos:start="77:12" pos:end="77:12">(</operator><operator pos:start="77:13" pos:end="77:13">!</operator><operator pos:start="77:14" pos:end="77:14">(</operator><name pos:start="77:15" pos:end="77:19">prot1</name> <operator pos:start="77:21" pos:end="77:21">&amp;</operator> <name pos:start="77:23" pos:end="77:32">PROT_WRITE</name><operator pos:start="77:33" pos:end="77:33">)</operator><operator pos:start="77:34" pos:end="77:34">)</operator>

            <call pos:start="79:13" pos:end="79:81"><name pos:start="79:13" pos:end="79:20">mprotect</name><argument_list pos:start="79:21" pos:end="79:81">(<argument pos:start="79:22" pos:end="79:39"><expr pos:start="79:22" pos:end="79:39"><operator pos:start="79:22" pos:end="79:22">(</operator><name pos:start="79:23" pos:end="79:26">void</name> <operator pos:start="79:28" pos:end="79:28">*</operator><operator pos:start="79:29" pos:end="79:29">)</operator><name pos:start="79:30" pos:end="79:39">host_start</name></expr></argument>, <argument pos:start="79:42" pos:end="79:60"><expr pos:start="79:42" pos:end="79:60"><name pos:start="79:42" pos:end="79:60">qemu_host_page_size</name></expr></argument>, <argument pos:start="79:63" pos:end="79:80"><expr pos:start="79:63" pos:end="79:80"><name pos:start="79:63" pos:end="79:67">prot1</name> <operator pos:start="79:69" pos:end="79:69">|</operator> <name pos:start="79:71" pos:end="79:80">PROT_WRITE</name></expr></argument>)</argument_list></call></expr></condition><empty_stmt pos:start="79:82" pos:end="79:82">;</empty_stmt></if></if_stmt>



        <comment type="block" pos:start="83:9" pos:end="83:46">/* read the corresponding file data */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:54"><expr pos:start="85:9" pos:end="85:53"><call pos:start="85:9" pos:end="85:53"><name pos:start="85:9" pos:end="85:13">pread</name><argument_list pos:start="85:14" pos:end="85:53">(<argument pos:start="85:15" pos:end="85:16"><expr pos:start="85:15" pos:end="85:16"><name pos:start="85:15" pos:end="85:16">fd</name></expr></argument>, <argument pos:start="85:19" pos:end="85:31"><expr pos:start="85:19" pos:end="85:31"><operator pos:start="85:19" pos:end="85:19">(</operator><name pos:start="85:20" pos:end="85:23">void</name> <operator pos:start="85:25" pos:end="85:25">*</operator><operator pos:start="85:26" pos:end="85:26">)</operator><name pos:start="85:27" pos:end="85:31">start</name></expr></argument>, <argument pos:start="85:34" pos:end="85:44"><expr pos:start="85:34" pos:end="85:44"><name pos:start="85:34" pos:end="85:36">end</name> <operator pos:start="85:38" pos:end="85:38">-</operator> <name pos:start="85:40" pos:end="85:44">start</name></expr></argument>, <argument pos:start="85:47" pos:end="85:52"><expr pos:start="85:47" pos:end="85:52"><name pos:start="85:47" pos:end="85:52">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="89:9" pos:end="89:34">/* put final protection */</comment>

        <if_stmt pos:start="91:9" pos:end="93:72"><if pos:start="91:9" pos:end="93:72">if <condition pos:start="91:12" pos:end="91:45">(<expr pos:start="91:13" pos:end="91:44"><name pos:start="91:13" pos:end="91:20">prot_new</name> <operator pos:start="91:22" pos:end="91:23">!=</operator> <operator pos:start="91:25" pos:end="91:25">(</operator><name pos:start="91:26" pos:end="91:30">prot1</name> <operator pos:start="91:32" pos:end="91:32">|</operator> <name pos:start="91:34" pos:end="91:43">PROT_WRITE</name><operator pos:start="91:44" pos:end="91:44">)</operator></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:72"><block_content pos:start="93:13" pos:end="93:72">

            <expr_stmt pos:start="93:13" pos:end="93:72"><expr pos:start="93:13" pos:end="93:71"><call pos:start="93:13" pos:end="93:71"><name pos:start="93:13" pos:end="93:20">mprotect</name><argument_list pos:start="93:21" pos:end="93:71">(<argument pos:start="93:22" pos:end="93:39"><expr pos:start="93:22" pos:end="93:39"><operator pos:start="93:22" pos:end="93:22">(</operator><name pos:start="93:23" pos:end="93:26">void</name> <operator pos:start="93:28" pos:end="93:28">*</operator><operator pos:start="93:29" pos:end="93:29">)</operator><name pos:start="93:30" pos:end="93:39">host_start</name></expr></argument>, <argument pos:start="93:42" pos:end="93:60"><expr pos:start="93:42" pos:end="93:60"><name pos:start="93:42" pos:end="93:60">qemu_host_page_size</name></expr></argument>, <argument pos:start="93:63" pos:end="93:70"><expr pos:start="93:63" pos:end="93:70"><name pos:start="93:63" pos:end="93:70">prot_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="105:5">else <block pos:start="95:12" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:9">

        <comment type="block" pos:start="97:9" pos:end="97:40">/* just update the protection */</comment>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:30">(<expr pos:start="99:13" pos:end="99:29"><name pos:start="99:13" pos:end="99:20">prot_new</name> <operator pos:start="99:22" pos:end="99:23">!=</operator> <name pos:start="99:25" pos:end="99:29">prot1</name></expr>)</condition> <block pos:start="99:32" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:72">

            <expr_stmt pos:start="101:13" pos:end="101:72"><expr pos:start="101:13" pos:end="101:71"><call pos:start="101:13" pos:end="101:71"><name pos:start="101:13" pos:end="101:20">mprotect</name><argument_list pos:start="101:21" pos:end="101:71">(<argument pos:start="101:22" pos:end="101:39"><expr pos:start="101:22" pos:end="101:39"><operator pos:start="101:22" pos:end="101:22">(</operator><name pos:start="101:23" pos:end="101:26">void</name> <operator pos:start="101:28" pos:end="101:28">*</operator><operator pos:start="101:29" pos:end="101:29">)</operator><name pos:start="101:30" pos:end="101:39">host_start</name></expr></argument>, <argument pos:start="101:42" pos:end="101:60"><expr pos:start="101:42" pos:end="101:60"><name pos:start="101:42" pos:end="101:60">qemu_host_page_size</name></expr></argument>, <argument pos:start="101:63" pos:end="101:70"><expr pos:start="101:63" pos:end="101:70"><name pos:start="101:63" pos:end="101:70">prot_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="107:5" pos:end="107:13">return <expr pos:start="107:12" pos:end="107:12"><literal type="number" pos:start="107:12" pos:end="107:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
