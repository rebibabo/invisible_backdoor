<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5293.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">IOMMUTLBEntry</name></type> <name pos:start="1:22" pos:end="1:46">spapr_tce_translate_iommu</name><parameter_list pos:start="1:47" pos:end="1:80">(<parameter pos:start="1:48" pos:end="1:66"><decl pos:start="1:48" pos:end="1:66"><type pos:start="1:48" pos:end="1:66"><name pos:start="1:48" pos:end="1:59">MemoryRegion</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:66">iommu</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:79"><decl pos:start="1:69" pos:end="1:79"><type pos:start="1:69" pos:end="1:79"><name pos:start="1:69" pos:end="1:74">hwaddr</name></type> <name pos:start="1:76" pos:end="1:79">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:6">

    <decl_stmt pos:start="5:5" pos:end="5:68"><decl pos:start="5:5" pos:end="5:67"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">sPAPRTCETable</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:23">tcet</name> <init pos:start="5:25" pos:end="5:67">= <expr pos:start="5:27" pos:end="5:67"><call pos:start="5:27" pos:end="5:67"><name pos:start="5:27" pos:end="5:38">container_of</name><argument_list pos:start="5:39" pos:end="5:67">(<argument pos:start="5:40" pos:end="5:44"><expr pos:start="5:40" pos:end="5:44"><name pos:start="5:40" pos:end="5:44">iommu</name></expr></argument>, <argument pos:start="5:47" pos:end="5:59"><expr pos:start="5:47" pos:end="5:59"><name pos:start="5:47" pos:end="5:59">sPAPRTCETable</name></expr></argument>, <argument pos:start="5:62" pos:end="5:66"><expr pos:start="5:62" pos:end="5:66"><name pos:start="5:62" pos:end="5:66">iommu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:16">tce</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="11:1" pos:end="11:16">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:16">DEBUG_TCE</name></cpp:ifdef>

    <expr_stmt pos:start="13:5" pos:end="18:0"><expr pos:start="13:5" pos:end="15:49"><call pos:start="13:5" pos:end="15:49"><name pos:start="13:5" pos:end="13:11">fprintf</name><argument_list pos:start="13:12" pos:end="15:49">(<argument pos:start="13:13" pos:end="13:18"><expr pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:18">stderr</name></expr></argument>, <argument pos:start="13:21" pos:end="15:29"><expr pos:start="13:21" pos:end="15:29"><literal type="string" pos:start="13:21" pos:end="13:51">"spapr_tce_translate liobn=0x%"</literal> <name pos:start="13:53" pos:end="13:58">PRIx32</name> <literal type="string" pos:start="13:60" pos:end="13:69">" addr=0x"</literal>

            <name pos:start="15:13" pos:end="15:24">DMA_ADDR_FMT</name> <literal type="string" pos:start="15:26" pos:end="15:29">"\n"</literal></expr></argument>, <argument pos:start="15:32" pos:end="15:42"><expr pos:start="15:32" pos:end="15:42"><name pos:start="15:32" pos:end="15:42"><name pos:start="15:32" pos:end="15:35">tcet</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:42">liobn</name></name></expr></argument>, <argument pos:start="15:45" pos:end="15:48"><expr pos:start="15:45" pos:end="15:48"><name pos:start="15:45" pos:end="15:48">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="21:5" pos:end="37:5"><if pos:start="21:5" pos:end="37:5">if <condition pos:start="21:8" pos:end="21:21">(<expr pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:12">tcet</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:20">bypass</name></name></expr>)</condition> <block pos:start="21:23" pos:end="37:5">{<block_content pos:start="23:9" pos:end="35:10">

        <return pos:start="23:9" pos:end="35:10">return <expr pos:start="23:16" pos:end="35:9"><operator pos:start="23:16" pos:end="23:16">(</operator><name pos:start="23:17" pos:end="23:29">IOMMUTLBEntry</name><operator pos:start="23:30" pos:end="23:30">)</operator> <block pos:start="23:32" pos:end="35:9">{

            <expr pos:start="25:13" pos:end="25:46"><operator pos:start="25:13" pos:end="25:13">.</operator><name pos:start="25:14" pos:end="25:22">target_as</name> <operator pos:start="25:24" pos:end="25:24">=</operator> <operator pos:start="25:26" pos:end="25:26">&amp;</operator><name pos:start="25:27" pos:end="25:46">address_space_memory</name></expr>,

            <expr pos:start="27:13" pos:end="27:21"><operator pos:start="27:13" pos:end="27:13">.</operator><name pos:start="27:14" pos:end="27:17">iova</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr>,

            <expr pos:start="29:13" pos:end="29:32"><operator pos:start="29:13" pos:end="29:13">.</operator><name pos:start="29:14" pos:end="29:28">translated_addr</name> <operator pos:start="29:30" pos:end="29:30">=</operator> <literal type="number" pos:start="29:32" pos:end="29:32">0</literal></expr>,

            <expr pos:start="31:13" pos:end="31:35"><operator pos:start="31:13" pos:end="31:13">.</operator><name pos:start="31:14" pos:end="31:22">addr_mask</name> <operator pos:start="31:24" pos:end="31:24">=</operator> <operator pos:start="31:26" pos:end="31:26">~</operator><operator pos:start="31:27" pos:end="31:27">(</operator><name pos:start="31:28" pos:end="31:33">hwaddr</name><operator pos:start="31:34" pos:end="31:34">)</operator><literal type="number" pos:start="31:35" pos:end="31:35">0</literal></expr>,

            <expr pos:start="33:13" pos:end="33:28"><operator pos:start="33:13" pos:end="33:13">.</operator><name pos:start="33:14" pos:end="33:17">perm</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:28">IOMMU_RW</name></expr>,

        }</block></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:34">/* Check if we are in bound */</comment>

    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:34">(<expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:12">addr</name> <operator pos:start="43:14" pos:end="43:15">&gt;=</operator> <name pos:start="43:17" pos:end="43:33"><name pos:start="43:17" pos:end="43:20">tcet</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:33">window_size</name></name></expr>)</condition> <block pos:start="43:36" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:54">

<cpp:ifdef pos:start="45:1" pos:end="45:16">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:16">DEBUG_TCE</name></cpp:ifdef>

        <expr_stmt pos:start="47:9" pos:end="50:0"><expr pos:start="47:9" pos:end="47:62"><call pos:start="47:9" pos:end="47:62"><name pos:start="47:9" pos:end="47:15">fprintf</name><argument_list pos:start="47:16" pos:end="47:62">(<argument pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:22">stderr</name></expr></argument>, <argument pos:start="47:25" pos:end="47:61"><expr pos:start="47:25" pos:end="47:61"><literal type="string" pos:start="47:25" pos:end="47:61">"spapr_tce_translate out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

        <return pos:start="51:9" pos:end="51:54">return <expr pos:start="51:16" pos:end="51:53"><operator pos:start="51:16" pos:end="51:16">(</operator><name pos:start="51:17" pos:end="51:29">IOMMUTLBEntry</name><operator pos:start="51:30" pos:end="51:30">)</operator> <block pos:start="51:32" pos:end="51:53">{ <expr pos:start="51:34" pos:end="51:51"><operator pos:start="51:34" pos:end="51:34">.</operator><name pos:start="51:35" pos:end="51:38">perm</name> <operator pos:start="51:40" pos:end="51:40">=</operator> <name pos:start="51:42" pos:end="51:51">IOMMU_NONE</name></expr> }</block></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="62:0"><expr pos:start="57:5" pos:end="57:55"><name pos:start="57:5" pos:end="57:7">tce</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <name pos:start="57:11" pos:end="57:51"><name pos:start="57:11" pos:end="57:14">tcet</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:21">table</name><index pos:start="57:22" pos:end="57:51">[<expr pos:start="57:23" pos:end="57:50"><name pos:start="57:23" pos:end="57:26">addr</name> <operator pos:start="57:28" pos:end="57:29">&gt;&gt;</operator> <name pos:start="57:31" pos:end="57:50">SPAPR_TCE_PAGE_SHIFT</name></expr>]</index></name><operator pos:start="57:52" pos:end="57:52">.</operator><name pos:start="57:53" pos:end="57:55">tce</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="61:1" pos:end="61:16">#<cpp:directive pos:start="61:2" pos:end="61:6">ifdef</cpp:directive> <name pos:start="61:8" pos:end="61:16">DEBUG_TCE</name></cpp:ifdef>

    <expr_stmt pos:start="63:5" pos:end="68:0"><expr pos:start="63:5" pos:end="65:66"><call pos:start="63:5" pos:end="65:66"><name pos:start="63:5" pos:end="63:11">fprintf</name><argument_list pos:start="63:12" pos:end="65:66">(<argument pos:start="63:13" pos:end="63:18"><expr pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:18">stderr</name></expr></argument>, <argument pos:start="63:21" pos:end="63:55"><expr pos:start="63:21" pos:end="63:55"><literal type="string" pos:start="63:21" pos:end="63:55">" -&gt;  *paddr=0x%llx, *len=0x%llx\n"</literal></expr></argument>,

            <argument pos:start="65:13" pos:end="65:40"><expr pos:start="65:13" pos:end="65:40"><operator pos:start="65:13" pos:end="65:13">(</operator><name pos:start="65:14" pos:end="65:16">tce</name> <operator pos:start="65:18" pos:end="65:18">&amp;</operator> <operator pos:start="65:20" pos:end="65:20">~</operator><name pos:start="65:21" pos:end="65:39">SPAPR_TCE_PAGE_MASK</name><operator pos:start="65:40" pos:end="65:40">)</operator></expr></argument>, <argument pos:start="65:43" pos:end="65:65"><expr pos:start="65:43" pos:end="65:65"><name pos:start="65:43" pos:end="65:61">SPAPR_TCE_PAGE_MASK</name> <operator pos:start="65:63" pos:end="65:63">+</operator> <literal type="number" pos:start="65:65" pos:end="65:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>



    <return pos:start="71:5" pos:end="83:6">return <expr pos:start="71:12" pos:end="83:5"><operator pos:start="71:12" pos:end="71:12">(</operator><name pos:start="71:13" pos:end="71:25">IOMMUTLBEntry</name><operator pos:start="71:26" pos:end="71:26">)</operator> <block pos:start="71:28" pos:end="83:5">{

        <expr pos:start="73:9" pos:end="73:42"><operator pos:start="73:9" pos:end="73:9">.</operator><name pos:start="73:10" pos:end="73:18">target_as</name> <operator pos:start="73:20" pos:end="73:20">=</operator> <operator pos:start="73:22" pos:end="73:22">&amp;</operator><name pos:start="73:23" pos:end="73:42">address_space_memory</name></expr>,

        <expr pos:start="75:9" pos:end="75:43"><operator pos:start="75:9" pos:end="75:9">.</operator><name pos:start="75:10" pos:end="75:13">iova</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <name pos:start="75:17" pos:end="75:20">addr</name> <operator pos:start="75:22" pos:end="75:22">&amp;</operator> <operator pos:start="75:24" pos:end="75:24">~</operator><name pos:start="75:25" pos:end="75:43">SPAPR_TCE_PAGE_MASK</name></expr>,

        <expr pos:start="77:9" pos:end="77:53"><operator pos:start="77:9" pos:end="77:9">.</operator><name pos:start="77:10" pos:end="77:24">translated_addr</name> <operator pos:start="77:26" pos:end="77:26">=</operator> <name pos:start="77:28" pos:end="77:30">tce</name> <operator pos:start="77:32" pos:end="77:32">&amp;</operator> <operator pos:start="77:34" pos:end="77:34">~</operator><name pos:start="77:35" pos:end="77:53">SPAPR_TCE_PAGE_MASK</name></expr>,

        <expr pos:start="79:9" pos:end="79:40"><operator pos:start="79:9" pos:end="79:9">.</operator><name pos:start="79:10" pos:end="79:18">addr_mask</name> <operator pos:start="79:20" pos:end="79:20">=</operator> <name pos:start="79:22" pos:end="79:40">SPAPR_TCE_PAGE_MASK</name></expr>,

        <expr pos:start="81:9" pos:end="81:19"><operator pos:start="81:9" pos:end="81:9">.</operator><name pos:start="81:10" pos:end="81:13">perm</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <name pos:start="81:17" pos:end="81:19">tce</name></expr>,

    }</block></expr>;</return>

</block_content>}</block></function>
</unit>
