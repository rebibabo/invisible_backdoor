<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10126.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:33">buffered_file_thread</name><parameter_list pos:start="1:34" pos:end="1:47">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:40"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="199:1">{<block_content pos:start="5:5" pos:end="197:16">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MigrationState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:24">initial_time</name> <init pos:start="7:26" pos:end="7:54">= <expr pos:start="7:28" pos:end="7:54"><call pos:start="7:28" pos:end="7:54"><name pos:start="7:28" pos:end="7:44">qemu_get_clock_ms</name><argument_list pos:start="7:45" pos:end="7:54">(<argument pos:start="7:46" pos:end="7:53"><expr pos:start="7:46" pos:end="7:53"><name pos:start="7:46" pos:end="7:53">rt_clock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:22">sleep_time</name> <init pos:start="9:24" pos:end="9:26">= <expr pos:start="9:26" pos:end="9:26"><literal type="number" pos:start="9:26" pos:end="9:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:20">max_size</name> <init pos:start="11:22" pos:end="11:24">= <expr pos:start="11:24" pos:end="11:24"><literal type="number" pos:start="11:24" pos:end="11:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:19">last_round</name> <init pos:start="13:21" pos:end="13:27">= <expr pos:start="13:23" pos:end="13:27"><name pos:start="13:23" pos:end="13:27">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:31"><expr pos:start="19:5" pos:end="19:30"><call pos:start="19:5" pos:end="19:30"><name pos:start="19:5" pos:end="19:28">qemu_mutex_lock_iothread</name><argument_list pos:start="19:29" pos:end="19:30">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:34"><expr pos:start="21:5" pos:end="21:33"><call pos:start="21:5" pos:end="21:33"><name pos:start="21:5" pos:end="21:11">DPRINTF</name><argument_list pos:start="21:12" pos:end="21:33">(<argument pos:start="21:13" pos:end="21:32"><expr pos:start="21:13" pos:end="21:32"><literal type="string" pos:start="21:13" pos:end="21:32">"beginning savevm\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:55"><expr pos:start="23:5" pos:end="23:54"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:54"><name pos:start="23:11" pos:end="23:33">qemu_savevm_state_begin</name><argument_list pos:start="23:34" pos:end="23:54">(<argument pos:start="23:35" pos:end="23:41"><expr pos:start="23:35" pos:end="23:41"><name pos:start="23:35" pos:end="23:41"><name pos:start="23:35" pos:end="23:35">s</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:41">file</name></name></expr></argument>, <argument pos:start="23:44" pos:end="23:53"><expr pos:start="23:44" pos:end="23:53"><operator pos:start="23:44" pos:end="23:44">&amp;</operator><name pos:start="23:45" pos:end="23:53"><name pos:start="23:45" pos:end="23:45">s</name><operator pos:start="23:46" pos:end="23:47">-&gt;</operator><name pos:start="23:48" pos:end="23:53">params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><call pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:30">qemu_mutex_unlock_iothread</name><argument_list pos:start="25:31" pos:end="25:32">()</argument_list></call></expr>;</expr_stmt>



    <while pos:start="29:5" pos:end="185:5">while <condition pos:start="29:11" pos:end="29:20">(<expr pos:start="29:12" pos:end="29:19"><name pos:start="29:12" pos:end="29:14">ret</name> <operator pos:start="29:16" pos:end="29:17">&gt;=</operator> <literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr>)</condition> <block pos:start="29:22" pos:end="185:5">{<block_content pos:start="31:9" pos:end="183:43">

        <decl_stmt pos:start="31:9" pos:end="31:29"><decl pos:start="31:9" pos:end="31:28"><type pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:15">int64_t</name></type> <name pos:start="31:17" pos:end="31:28">current_time</name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:30"><decl pos:start="33:9" pos:end="33:29"><type pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:16">uint64_t</name></type> <name pos:start="33:18" pos:end="33:29">pending_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:35"><expr pos:start="37:9" pos:end="37:34"><call pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:32">qemu_mutex_lock_iothread</name><argument_list pos:start="37:33" pos:end="37:34">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:41">(<expr pos:start="39:13" pos:end="39:40"><name pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:20">state</name></name> <operator pos:start="39:22" pos:end="39:23">!=</operator> <name pos:start="39:25" pos:end="39:40">MIG_STATE_ACTIVE</name></expr>)</condition> <block pos:start="39:43" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:18">

            <expr_stmt pos:start="41:13" pos:end="41:73"><expr pos:start="41:13" pos:end="41:72"><call pos:start="41:13" pos:end="41:72"><name pos:start="41:13" pos:end="41:19">DPRINTF</name><argument_list pos:start="41:20" pos:end="41:72">(<argument pos:start="41:21" pos:end="41:71"><expr pos:start="41:21" pos:end="41:71"><literal type="string" pos:start="41:21" pos:end="41:71">"put_ready returning because of non-active state\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:41"><expr pos:start="43:13" pos:end="43:40"><call pos:start="43:13" pos:end="43:40"><name pos:start="43:13" pos:end="43:38">qemu_mutex_unlock_iothread</name><argument_list pos:start="43:39" pos:end="43:40">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="45:13" pos:end="45:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:24">(<expr pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:23">complete</name></name></expr>)</condition> <block pos:start="49:26" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:18">

            <expr_stmt pos:start="51:13" pos:end="51:41"><expr pos:start="51:13" pos:end="51:40"><call pos:start="51:13" pos:end="51:40"><name pos:start="51:13" pos:end="51:38">qemu_mutex_unlock_iothread</name><argument_list pos:start="51:39" pos:end="51:40">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="53:13" pos:end="53:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="127:9"><if pos:start="57:9" pos:end="127:9">if <condition pos:start="57:12" pos:end="57:42">(<expr pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:25"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:25">bytes_xfer</name></name> <operator pos:start="57:27" pos:end="57:27">&lt;</operator> <name pos:start="57:29" pos:end="57:41"><name pos:start="57:29" pos:end="57:29">s</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:41">xfer_limit</name></name></expr>)</condition> <block pos:start="57:44" pos:end="127:9">{<block_content pos:start="59:13" pos:end="125:13">

            <expr_stmt pos:start="59:13" pos:end="59:33"><expr pos:start="59:13" pos:end="59:32"><call pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:19">DPRINTF</name><argument_list pos:start="59:20" pos:end="59:32">(<argument pos:start="59:21" pos:end="59:31"><expr pos:start="59:21" pos:end="59:31"><literal type="string" pos:start="59:21" pos:end="59:31">"iterate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:72"><expr pos:start="61:13" pos:end="61:71"><name pos:start="61:13" pos:end="61:24">pending_size</name> <operator pos:start="61:26" pos:end="61:26">=</operator> <call pos:start="61:28" pos:end="61:71"><name pos:start="61:28" pos:end="61:52">qemu_savevm_state_pending</name><argument_list pos:start="61:53" pos:end="61:71">(<argument pos:start="61:54" pos:end="61:60"><expr pos:start="61:54" pos:end="61:60"><name pos:start="61:54" pos:end="61:60"><name pos:start="61:54" pos:end="61:54">s</name><operator pos:start="61:55" pos:end="61:56">-&gt;</operator><name pos:start="61:57" pos:end="61:60">file</name></name></expr></argument>, <argument pos:start="61:63" pos:end="61:70"><expr pos:start="61:63" pos:end="61:70"><name pos:start="61:63" pos:end="61:70">max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:74"><expr pos:start="63:13" pos:end="63:73"><call pos:start="63:13" pos:end="63:73"><name pos:start="63:13" pos:end="63:19">DPRINTF</name><argument_list pos:start="63:20" pos:end="63:73">(<argument pos:start="63:21" pos:end="63:48"><expr pos:start="63:21" pos:end="63:48"><literal type="string" pos:start="63:21" pos:end="63:48">"pending size %lu max %lu\n"</literal></expr></argument>, <argument pos:start="63:51" pos:end="63:62"><expr pos:start="63:51" pos:end="63:62"><name pos:start="63:51" pos:end="63:62">pending_size</name></expr></argument>, <argument pos:start="63:65" pos:end="63:72"><expr pos:start="63:65" pos:end="63:72"><name pos:start="63:65" pos:end="63:72">max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="65:13" pos:end="125:13"><if pos:start="65:13" pos:end="77:13">if <condition pos:start="65:16" pos:end="65:57">(<expr pos:start="65:17" pos:end="65:56"><name pos:start="65:17" pos:end="65:28">pending_size</name> <operator pos:start="65:30" pos:end="65:31">&amp;&amp;</operator> <name pos:start="65:33" pos:end="65:44">pending_size</name> <operator pos:start="65:46" pos:end="65:47">&gt;=</operator> <name pos:start="65:49" pos:end="65:56">max_size</name></expr>)</condition> <block pos:start="65:59" pos:end="77:13">{<block_content pos:start="67:17" pos:end="75:17">

                <expr_stmt pos:start="67:17" pos:end="67:57"><expr pos:start="67:17" pos:end="67:56"><name pos:start="67:17" pos:end="67:19">ret</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:56"><name pos:start="67:23" pos:end="67:47">qemu_savevm_state_iterate</name><argument_list pos:start="67:48" pos:end="67:56">(<argument pos:start="67:49" pos:end="67:55"><expr pos:start="67:49" pos:end="67:55"><name pos:start="67:49" pos:end="67:55"><name pos:start="67:49" pos:end="67:49">s</name><operator pos:start="67:50" pos:end="67:51">-&gt;</operator><name pos:start="67:52" pos:end="67:55">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="69:17" pos:end="75:17"><if pos:start="69:17" pos:end="75:17">if <condition pos:start="69:20" pos:end="69:28">(<expr pos:start="69:21" pos:end="69:27"><name pos:start="69:21" pos:end="69:23">ret</name> <operator pos:start="69:25" pos:end="69:25">&lt;</operator> <literal type="number" pos:start="69:27" pos:end="69:27">0</literal></expr>)</condition> <block pos:start="69:30" pos:end="75:17">{<block_content pos:start="71:21" pos:end="73:26">

                    <expr_stmt pos:start="71:21" pos:end="71:49"><expr pos:start="71:21" pos:end="71:48"><call pos:start="71:21" pos:end="71:48"><name pos:start="71:21" pos:end="71:46">qemu_mutex_unlock_iothread</name><argument_list pos:start="71:47" pos:end="71:48">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="73:21" pos:end="73:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="77:15" pos:end="125:13">else <block pos:start="77:20" pos:end="125:13">{<block_content pos:start="79:17" pos:end="123:34">

                <decl_stmt pos:start="79:17" pos:end="79:59"><decl pos:start="79:17" pos:end="79:58"><type pos:start="79:17" pos:end="79:19"><name pos:start="79:17" pos:end="79:19">int</name></type> <name pos:start="79:21" pos:end="79:34">old_vm_running</name> <init pos:start="79:36" pos:end="79:58">= <expr pos:start="79:38" pos:end="79:58"><call pos:start="79:38" pos:end="79:58"><name pos:start="79:38" pos:end="79:56">runstate_is_running</name><argument_list pos:start="79:57" pos:end="79:58">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="81:17" pos:end="81:45"><decl pos:start="81:17" pos:end="81:34"><type pos:start="81:17" pos:end="81:23"><name pos:start="81:17" pos:end="81:23">int64_t</name></type> <name pos:start="81:25" pos:end="81:34">start_time</name></decl>, <decl pos:start="81:37" pos:end="81:44"><type ref="prev" pos:start="81:17" pos:end="81:23"/><name pos:start="81:37" pos:end="81:44">end_time</name></decl>;</decl_stmt>



                <expr_stmt pos:start="85:17" pos:end="85:44"><expr pos:start="85:17" pos:end="85:43"><call pos:start="85:17" pos:end="85:43"><name pos:start="85:17" pos:end="85:23">DPRINTF</name><argument_list pos:start="85:24" pos:end="85:43">(<argument pos:start="85:25" pos:end="85:42"><expr pos:start="85:25" pos:end="85:42"><literal type="string" pos:start="85:25" pos:end="85:42">"done iterating\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:57"><expr pos:start="87:17" pos:end="87:56"><name pos:start="87:17" pos:end="87:26">start_time</name> <operator pos:start="87:28" pos:end="87:28">=</operator> <call pos:start="87:30" pos:end="87:56"><name pos:start="87:30" pos:end="87:46">qemu_get_clock_ms</name><argument_list pos:start="87:47" pos:end="87:56">(<argument pos:start="87:48" pos:end="87:55"><expr pos:start="87:48" pos:end="87:55"><name pos:start="87:48" pos:end="87:55">rt_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:69"><expr pos:start="89:17" pos:end="89:68"><call pos:start="89:17" pos:end="89:68"><name pos:start="89:17" pos:end="89:42">qemu_system_wakeup_request</name><argument_list pos:start="89:43" pos:end="89:68">(<argument pos:start="89:44" pos:end="89:67"><expr pos:start="89:44" pos:end="89:67"><name pos:start="89:44" pos:end="89:67">QEMU_WAKEUP_REASON_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:62"><expr pos:start="91:17" pos:end="91:61"><call pos:start="91:17" pos:end="91:61"><name pos:start="91:17" pos:end="91:35">vm_stop_force_state</name><argument_list pos:start="91:36" pos:end="91:61">(<argument pos:start="91:37" pos:end="91:60"><expr pos:start="91:37" pos:end="91:60"><name pos:start="91:37" pos:end="91:60">RUN_STATE_FINISH_MIGRATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:58"><expr pos:start="93:17" pos:end="93:57"><name pos:start="93:17" pos:end="93:19">ret</name> <operator pos:start="93:21" pos:end="93:21">=</operator> <call pos:start="93:23" pos:end="93:57"><name pos:start="93:23" pos:end="93:48">qemu_savevm_state_complete</name><argument_list pos:start="93:49" pos:end="93:57">(<argument pos:start="93:50" pos:end="93:56"><expr pos:start="93:50" pos:end="93:56"><name pos:start="93:50" pos:end="93:56"><name pos:start="93:50" pos:end="93:50">s</name><operator pos:start="93:51" pos:end="93:52">-&gt;</operator><name pos:start="93:53" pos:end="93:56">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="95:17" pos:end="105:17"><if pos:start="95:17" pos:end="101:17">if <condition pos:start="95:20" pos:end="95:28">(<expr pos:start="95:21" pos:end="95:27"><name pos:start="95:21" pos:end="95:23">ret</name> <operator pos:start="95:25" pos:end="95:25">&lt;</operator> <literal type="number" pos:start="95:27" pos:end="95:27">0</literal></expr>)</condition> <block pos:start="95:30" pos:end="101:17">{<block_content pos:start="97:21" pos:end="99:26">

                    <expr_stmt pos:start="97:21" pos:end="97:49"><expr pos:start="97:21" pos:end="97:48"><call pos:start="97:21" pos:end="97:48"><name pos:start="97:21" pos:end="97:46">qemu_mutex_unlock_iothread</name><argument_list pos:start="97:47" pos:end="97:48">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="99:21" pos:end="99:26">break;</break>

                </block_content>}</block></if> <else pos:start="101:19" pos:end="105:17">else <block pos:start="101:24" pos:end="105:17">{<block_content pos:start="103:21" pos:end="103:44">

                    <expr_stmt pos:start="103:21" pos:end="103:44"><expr pos:start="103:21" pos:end="103:43"><call pos:start="103:21" pos:end="103:43"><name pos:start="103:21" pos:end="103:40">migrate_fd_completed</name><argument_list pos:start="103:41" pos:end="103:43">(<argument pos:start="103:42" pos:end="103:42"><expr pos:start="103:42" pos:end="103:42"><name pos:start="103:42" pos:end="103:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:55"><expr pos:start="107:17" pos:end="107:54"><name pos:start="107:17" pos:end="107:24">end_time</name> <operator pos:start="107:26" pos:end="107:26">=</operator> <call pos:start="107:28" pos:end="107:54"><name pos:start="107:28" pos:end="107:44">qemu_get_clock_ms</name><argument_list pos:start="107:45" pos:end="107:54">(<argument pos:start="107:46" pos:end="107:53"><expr pos:start="107:46" pos:end="107:53"><name pos:start="107:46" pos:end="107:53">rt_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:57"><expr pos:start="109:17" pos:end="109:56"><name pos:start="109:17" pos:end="109:29"><name pos:start="109:17" pos:end="109:17">s</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:29">total_time</name></name> <operator pos:start="109:31" pos:end="109:31">=</operator> <name pos:start="109:33" pos:end="109:40">end_time</name> <operator pos:start="109:42" pos:end="109:42">-</operator> <name pos:start="109:44" pos:end="109:56"><name pos:start="109:44" pos:end="109:44">s</name><operator pos:start="109:45" pos:end="109:46">-&gt;</operator><name pos:start="109:47" pos:end="109:56">total_time</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:52"><expr pos:start="111:17" pos:end="111:51"><name pos:start="111:17" pos:end="111:27"><name pos:start="111:17" pos:end="111:17">s</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:27">downtime</name></name> <operator pos:start="111:29" pos:end="111:29">=</operator> <name pos:start="111:31" pos:end="111:38">end_time</name> <operator pos:start="111:40" pos:end="111:40">-</operator> <name pos:start="111:42" pos:end="111:51">start_time</name></expr>;</expr_stmt>

                <if_stmt pos:start="113:17" pos:end="121:17"><if pos:start="113:17" pos:end="121:17">if <condition pos:start="113:20" pos:end="113:52">(<expr pos:start="113:21" pos:end="113:51"><name pos:start="113:21" pos:end="113:28"><name pos:start="113:21" pos:end="113:21">s</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:28">state</name></name> <operator pos:start="113:30" pos:end="113:31">!=</operator> <name pos:start="113:33" pos:end="113:51">MIG_STATE_COMPLETED</name></expr>)</condition> <block pos:start="113:54" pos:end="121:17">{<block_content pos:start="115:21" pos:end="119:21">

                    <if_stmt pos:start="115:21" pos:end="119:21"><if pos:start="115:21" pos:end="119:21">if <condition pos:start="115:24" pos:end="115:39">(<expr pos:start="115:25" pos:end="115:38"><name pos:start="115:25" pos:end="115:38">old_vm_running</name></expr>)</condition> <block pos:start="115:41" pos:end="119:21">{<block_content pos:start="117:25" pos:end="117:35">

                        <expr_stmt pos:start="117:25" pos:end="117:35"><expr pos:start="117:25" pos:end="117:34"><call pos:start="117:25" pos:end="117:34"><name pos:start="117:25" pos:end="117:32">vm_start</name><argument_list pos:start="117:33" pos:end="117:34">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:34"><expr pos:start="123:17" pos:end="123:33"><name pos:start="123:17" pos:end="123:26">last_round</name> <operator pos:start="123:28" pos:end="123:28">=</operator> <name pos:start="123:30" pos:end="123:33">true</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:37"><expr pos:start="129:9" pos:end="129:36"><call pos:start="129:9" pos:end="129:36"><name pos:start="129:9" pos:end="129:34">qemu_mutex_unlock_iothread</name><argument_list pos:start="129:35" pos:end="129:36">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:51"><expr pos:start="131:9" pos:end="131:50"><name pos:start="131:9" pos:end="131:20">current_time</name> <operator pos:start="131:22" pos:end="131:22">=</operator> <call pos:start="131:24" pos:end="131:50"><name pos:start="131:24" pos:end="131:40">qemu_get_clock_ms</name><argument_list pos:start="131:41" pos:end="131:50">(<argument pos:start="131:42" pos:end="131:49"><expr pos:start="131:42" pos:end="131:49"><name pos:start="131:42" pos:end="131:49">rt_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="169:9"><if pos:start="133:9" pos:end="169:9">if <condition pos:start="133:12" pos:end="133:56">(<expr pos:start="133:13" pos:end="133:55"><name pos:start="133:13" pos:end="133:24">current_time</name> <operator pos:start="133:26" pos:end="133:27">&gt;=</operator> <name pos:start="133:29" pos:end="133:40">initial_time</name> <operator pos:start="133:42" pos:end="133:42">+</operator> <name pos:start="133:44" pos:end="133:55">BUFFER_DELAY</name></expr>)</condition> <block pos:start="133:58" pos:end="169:9">{<block_content pos:start="135:13" pos:end="167:40">

            <decl_stmt pos:start="135:13" pos:end="135:55"><decl pos:start="135:13" pos:end="135:54"><type pos:start="135:13" pos:end="135:20"><name pos:start="135:13" pos:end="135:20">uint64_t</name></type> <name pos:start="135:22" pos:end="135:38">transferred_bytes</name> <init pos:start="135:40" pos:end="135:54">= <expr pos:start="135:42" pos:end="135:54"><name pos:start="135:42" pos:end="135:54"><name pos:start="135:42" pos:end="135:42">s</name><operator pos:start="135:43" pos:end="135:44">-&gt;</operator><name pos:start="135:45" pos:end="135:54">bytes_xfer</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="137:13" pos:end="137:75"><decl pos:start="137:13" pos:end="137:74"><type pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:20">uint64_t</name></type> <name pos:start="137:22" pos:end="137:31">time_spent</name> <init pos:start="137:33" pos:end="137:74">= <expr pos:start="137:35" pos:end="137:74"><name pos:start="137:35" pos:end="137:46">current_time</name> <operator pos:start="137:48" pos:end="137:48">-</operator> <name pos:start="137:50" pos:end="137:61">initial_time</name> <operator pos:start="137:63" pos:end="137:63">-</operator> <name pos:start="137:65" pos:end="137:74">sleep_time</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="139:13" pos:end="139:62"><decl pos:start="139:13" pos:end="139:61"><type pos:start="139:13" pos:end="139:18"><name pos:start="139:13" pos:end="139:18">double</name></type> <name pos:start="139:20" pos:end="139:28">bandwidth</name> <init pos:start="139:30" pos:end="139:61">= <expr pos:start="139:32" pos:end="139:61"><name pos:start="139:32" pos:end="139:48">transferred_bytes</name> <operator pos:start="139:50" pos:end="139:50">/</operator> <name pos:start="139:52" pos:end="139:61">time_spent</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:68"><expr pos:start="141:13" pos:end="141:67"><name pos:start="141:13" pos:end="141:20">max_size</name> <operator pos:start="141:22" pos:end="141:22">=</operator> <name pos:start="141:24" pos:end="141:32">bandwidth</name> <operator pos:start="141:34" pos:end="141:34">*</operator> <call pos:start="141:36" pos:end="141:57"><name pos:start="141:36" pos:end="141:55">migrate_max_downtime</name><argument_list pos:start="141:56" pos:end="141:57">()</argument_list></call> <operator pos:start="141:59" pos:end="141:59">/</operator> <literal type="number" pos:start="141:61" pos:end="141:67">1000000</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="145:13" pos:end="149:72"><expr pos:start="145:13" pos:end="149:71"><call pos:start="145:13" pos:end="149:71"><name pos:start="145:13" pos:end="145:19">DPRINTF</name><argument_list pos:start="145:20" pos:end="149:71">(<argument pos:start="145:21" pos:end="147:58"><expr pos:start="145:21" pos:end="147:58"><literal type="string" pos:start="145:21" pos:end="145:35">"transferred %"</literal> <name pos:start="145:37" pos:end="145:42">PRIu64</name> <literal type="string" pos:start="145:44" pos:end="145:58">" time_spent %"</literal> <name pos:start="145:60" pos:end="145:65">PRIu64</name>

                    <literal type="string" pos:start="147:21" pos:end="147:46">" bandwidth %g max_size %"</literal> <name pos:start="147:48" pos:end="147:53">PRId64</name> <literal type="string" pos:start="147:55" pos:end="147:58">"\n"</literal></expr></argument>,

                    <argument pos:start="149:21" pos:end="149:37"><expr pos:start="149:21" pos:end="149:37"><name pos:start="149:21" pos:end="149:37">transferred_bytes</name></expr></argument>, <argument pos:start="149:40" pos:end="149:49"><expr pos:start="149:40" pos:end="149:49"><name pos:start="149:40" pos:end="149:49">time_spent</name></expr></argument>, <argument pos:start="149:52" pos:end="149:60"><expr pos:start="149:52" pos:end="149:60"><name pos:start="149:52" pos:end="149:60">bandwidth</name></expr></argument>, <argument pos:start="149:63" pos:end="149:70"><expr pos:start="149:63" pos:end="149:70"><name pos:start="149:63" pos:end="149:70">max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="151:13" pos:end="153:65">/* if we haven't sent anything, we don't want to recalculate

               10000 is a small enough number for our purposes */</comment>

            <if_stmt pos:start="155:13" pos:end="159:13"><if pos:start="155:13" pos:end="159:13">if <condition pos:start="155:16" pos:end="155:65">(<expr pos:start="155:17" pos:end="155:64"><name pos:start="155:17" pos:end="155:35"><name pos:start="155:17" pos:end="155:17">s</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:35">dirty_bytes_rate</name></name> <operator pos:start="155:37" pos:end="155:38">&amp;&amp;</operator> <name pos:start="155:40" pos:end="155:56">transferred_bytes</name> <operator pos:start="155:58" pos:end="155:58">&gt;</operator> <literal type="number" pos:start="155:60" pos:end="155:64">10000</literal></expr>)</condition> <block pos:start="155:67" pos:end="159:13">{<block_content pos:start="157:17" pos:end="157:71">

                <expr_stmt pos:start="157:17" pos:end="157:71"><expr pos:start="157:17" pos:end="157:70"><name pos:start="157:17" pos:end="157:36"><name pos:start="157:17" pos:end="157:17">s</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:36">expected_downtime</name></name> <operator pos:start="157:38" pos:end="157:38">=</operator> <name pos:start="157:40" pos:end="157:58"><name pos:start="157:40" pos:end="157:40">s</name><operator pos:start="157:41" pos:end="157:42">-&gt;</operator><name pos:start="157:43" pos:end="157:58">dirty_bytes_rate</name></name> <operator pos:start="157:60" pos:end="157:60">/</operator> <name pos:start="157:62" pos:end="157:70">bandwidth</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="163:13" pos:end="163:30"><expr pos:start="163:13" pos:end="163:29"><name pos:start="163:13" pos:end="163:25"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:25">bytes_xfer</name></name> <operator pos:start="163:27" pos:end="163:27">=</operator> <literal type="number" pos:start="163:29" pos:end="163:29">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:27"><expr pos:start="165:13" pos:end="165:26"><name pos:start="165:13" pos:end="165:22">sleep_time</name> <operator pos:start="165:24" pos:end="165:24">=</operator> <literal type="number" pos:start="165:26" pos:end="165:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:40"><expr pos:start="167:13" pos:end="167:39"><name pos:start="167:13" pos:end="167:24">initial_time</name> <operator pos:start="167:26" pos:end="167:26">=</operator> <name pos:start="167:28" pos:end="167:39">current_time</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="171:9" pos:end="179:9"><if pos:start="171:9" pos:end="179:9">if <condition pos:start="171:12" pos:end="171:60">(<expr pos:start="171:13" pos:end="171:59"><operator pos:start="171:13" pos:end="171:13">!</operator><name pos:start="171:14" pos:end="171:23">last_round</name> <operator pos:start="171:25" pos:end="171:26">&amp;&amp;</operator> <operator pos:start="171:28" pos:end="171:28">(</operator><name pos:start="171:29" pos:end="171:41"><name pos:start="171:29" pos:end="171:29">s</name><operator pos:start="171:30" pos:end="171:31">-&gt;</operator><name pos:start="171:32" pos:end="171:41">bytes_xfer</name></name> <operator pos:start="171:43" pos:end="171:44">&gt;=</operator> <name pos:start="171:46" pos:end="171:58"><name pos:start="171:46" pos:end="171:46">s</name><operator pos:start="171:47" pos:end="171:48">-&gt;</operator><name pos:start="171:49" pos:end="171:58">xfer_limit</name></name><operator pos:start="171:59" pos:end="171:59">)</operator></expr>)</condition> <block pos:start="171:62" pos:end="179:9">{<block_content pos:start="175:13" pos:end="177:69">

            <comment type="block" pos:start="173:13" pos:end="173:45">/* usleep expects microseconds */</comment>

            <expr_stmt pos:start="175:13" pos:end="175:72"><expr pos:start="175:13" pos:end="175:71"><call pos:start="175:13" pos:end="175:71"><name pos:start="175:13" pos:end="175:20">g_usleep</name><argument_list pos:start="175:21" pos:end="175:71">(<argument pos:start="175:22" pos:end="175:70"><expr pos:start="175:22" pos:end="175:70"><operator pos:start="175:22" pos:end="175:22">(</operator><name pos:start="175:23" pos:end="175:34">initial_time</name> <operator pos:start="175:36" pos:end="175:36">+</operator> <name pos:start="175:38" pos:end="175:49">BUFFER_DELAY</name> <operator pos:start="175:51" pos:end="175:51">-</operator> <name pos:start="175:53" pos:end="175:64">current_time</name><operator pos:start="175:65" pos:end="175:65">)</operator><operator pos:start="175:66" pos:end="175:66">*</operator><literal type="number" pos:start="175:67" pos:end="175:70">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:69"><expr pos:start="177:13" pos:end="177:68"><name pos:start="177:13" pos:end="177:22">sleep_time</name> <operator pos:start="177:24" pos:end="177:25">+=</operator> <call pos:start="177:27" pos:end="177:53"><name pos:start="177:27" pos:end="177:43">qemu_get_clock_ms</name><argument_list pos:start="177:44" pos:end="177:53">(<argument pos:start="177:45" pos:end="177:52"><expr pos:start="177:45" pos:end="177:52"><name pos:start="177:45" pos:end="177:52">rt_clock</name></expr></argument>)</argument_list></call> <operator pos:start="177:55" pos:end="177:55">-</operator> <name pos:start="177:57" pos:end="177:68">current_time</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:26"><expr pos:start="181:9" pos:end="181:25"><call pos:start="181:9" pos:end="181:25"><name pos:start="181:9" pos:end="181:22">buffered_flush</name><argument_list pos:start="181:23" pos:end="181:25">(<argument pos:start="181:24" pos:end="181:24"><expr pos:start="181:24" pos:end="181:24"><name pos:start="181:24" pos:end="181:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:43"><expr pos:start="183:9" pos:end="183:42"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <call pos:start="183:15" pos:end="183:42"><name pos:start="183:15" pos:end="183:33">qemu_file_get_error</name><argument_list pos:start="183:34" pos:end="183:42">(<argument pos:start="183:35" pos:end="183:41"><expr pos:start="183:35" pos:end="183:41"><name pos:start="183:35" pos:end="183:41"><name pos:start="183:35" pos:end="183:35">s</name><operator pos:start="183:36" pos:end="183:37">-&gt;</operator><name pos:start="183:38" pos:end="183:41">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="189:5" pos:end="193:5"><if pos:start="189:5" pos:end="193:5">if <condition pos:start="189:8" pos:end="189:16">(<expr pos:start="189:9" pos:end="189:15"><name pos:start="189:9" pos:end="189:11">ret</name> <operator pos:start="189:13" pos:end="189:13">&lt;</operator> <literal type="number" pos:start="189:15" pos:end="189:15">0</literal></expr>)</condition> <block pos:start="189:18" pos:end="193:5">{<block_content pos:start="191:9" pos:end="191:28">

        <expr_stmt pos:start="191:9" pos:end="191:28"><expr pos:start="191:9" pos:end="191:27"><call pos:start="191:9" pos:end="191:27"><name pos:start="191:9" pos:end="191:24">migrate_fd_error</name><argument_list pos:start="191:25" pos:end="191:27">(<argument pos:start="191:26" pos:end="191:26"><expr pos:start="191:26" pos:end="191:26"><name pos:start="191:26" pos:end="191:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:22"><expr pos:start="195:5" pos:end="195:21"><call pos:start="195:5" pos:end="195:21"><name pos:start="195:5" pos:end="195:10">g_free</name><argument_list pos:start="195:11" pos:end="195:21">(<argument pos:start="195:12" pos:end="195:20"><expr pos:start="195:12" pos:end="195:20"><name pos:start="195:12" pos:end="195:20"><name pos:start="195:12" pos:end="195:12">s</name><operator pos:start="195:13" pos:end="195:14">-&gt;</operator><name pos:start="195:15" pos:end="195:20">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="197:5" pos:end="197:16">return <expr pos:start="197:12" pos:end="197:15"><name pos:start="197:12" pos:end="197:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
