<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26097.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">ff_rle_encode</name><parameter_list pos:start="1:18" pos:end="3:69">(<parameter pos:start="1:19" pos:end="1:33"><decl pos:start="1:19" pos:end="1:33"><type pos:start="1:19" pos:end="1:33"><name pos:start="1:19" pos:end="1:25">uint8_t</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:33">outbuf</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:47">out_size</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:67"><decl pos:start="1:50" pos:end="1:67"><type pos:start="1:50" pos:end="1:67"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:62">uint8_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">ptr</name></decl></parameter> , <parameter pos:start="1:71" pos:end="1:77"><decl pos:start="1:71" pos:end="1:77"><type pos:start="1:71" pos:end="1:77"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:77">bpp</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:84"><decl pos:start="1:80" pos:end="1:84"><type pos:start="1:80" pos:end="1:84"><name pos:start="1:80" pos:end="1:82">int</name></type> <name pos:start="1:84" pos:end="1:84">w</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:29"><decl pos:start="3:19" pos:end="3:29"><type pos:start="3:19" pos:end="3:29"><name pos:start="3:19" pos:end="3:21">int</name></type> <name pos:start="3:23" pos:end="3:29">add_rep</name></decl></parameter>, <parameter pos:start="3:32" pos:end="3:42"><decl pos:start="3:32" pos:end="3:42"><type pos:start="3:32" pos:end="3:42"><name pos:start="3:32" pos:end="3:34">int</name></type> <name pos:start="3:36" pos:end="3:42">xor_rep</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:55"><decl pos:start="3:45" pos:end="3:55"><type pos:start="3:45" pos:end="3:55"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:55">add_raw</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:68"><decl pos:start="3:58" pos:end="3:68"><type pos:start="3:58" pos:end="3:68"><name pos:start="3:58" pos:end="3:60">int</name></type> <name pos:start="3:62" pos:end="3:68">xor_raw</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:24">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">count</name></decl>, <decl pos:start="7:16" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:16">x</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">out</name> <init pos:start="9:18" pos:end="9:25">= <expr pos:start="9:20" pos:end="9:25"><name pos:start="9:20" pos:end="9:25">outbuf</name></expr></init></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="49:5">for<control pos:start="13:8" pos:end="13:33">(<init pos:start="13:9" pos:end="13:14"><expr pos:start="13:9" pos:end="13:13"><name pos:start="13:9" pos:end="13:9">x</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <literal type="number" pos:start="13:13" pos:end="13:13">0</literal></expr>;</init> <condition pos:start="13:16" pos:end="13:21"><expr pos:start="13:16" pos:end="13:20"><name pos:start="13:16" pos:end="13:16">x</name> <operator pos:start="13:18" pos:end="13:18">&lt;</operator> <name pos:start="13:20" pos:end="13:20">w</name></expr>;</condition> <incr pos:start="13:23" pos:end="13:32"><expr pos:start="13:23" pos:end="13:32"><name pos:start="13:23" pos:end="13:23">x</name> <operator pos:start="13:25" pos:end="13:26">+=</operator> <name pos:start="13:28" pos:end="13:32">count</name></expr></incr>)</control> <block pos:start="13:35" pos:end="49:5">{<block_content pos:start="17:9" pos:end="47:27">

        <comment type="block" pos:start="15:9" pos:end="15:66">/* see if we can encode the next set of pixels with RLE */</comment>

        <if_stmt pos:start="17:9" pos:end="43:9"><if pos:start="17:9" pos:end="27:9">if<condition pos:start="17:11" pos:end="17:56">(<expr pos:start="17:12" pos:end="17:55"><operator pos:start="17:12" pos:end="17:12">(</operator><name pos:start="17:13" pos:end="17:17">count</name> <operator pos:start="17:19" pos:end="17:19">=</operator> <call pos:start="17:21" pos:end="17:50"><name pos:start="17:21" pos:end="17:32">count_pixels</name><argument_list pos:start="17:33" pos:end="17:50">(<argument pos:start="17:34" pos:end="17:36"><expr pos:start="17:34" pos:end="17:36"><name pos:start="17:34" pos:end="17:36">ptr</name></expr></argument>, <argument pos:start="17:39" pos:end="17:41"><expr pos:start="17:39" pos:end="17:41"><name pos:start="17:39" pos:end="17:39">w</name><operator pos:start="17:40" pos:end="17:40">-</operator><name pos:start="17:41" pos:end="17:41">x</name></expr></argument>, <argument pos:start="17:44" pos:end="17:46"><expr pos:start="17:44" pos:end="17:46"><name pos:start="17:44" pos:end="17:46">bpp</name></expr></argument>, <argument pos:start="17:49" pos:end="17:49"><expr pos:start="17:49" pos:end="17:49"><literal type="number" pos:start="17:49" pos:end="17:49">1</literal></expr></argument>)</argument_list></call><operator pos:start="17:51" pos:end="17:51">)</operator> <operator pos:start="17:53" pos:end="17:53">&gt;</operator> <literal type="number" pos:start="17:55" pos:end="17:55">1</literal></expr>)</condition> <block pos:start="17:58" pos:end="27:9">{<block_content pos:start="19:13" pos:end="25:23">

            <if_stmt pos:start="19:13" pos:end="19:60"><if pos:start="19:13" pos:end="19:60">if<condition pos:start="19:15" pos:end="19:49">(<expr pos:start="19:16" pos:end="19:48"><name pos:start="19:16" pos:end="19:18">out</name> <operator pos:start="19:20" pos:end="19:20">+</operator> <name pos:start="19:22" pos:end="19:24">bpp</name> <operator pos:start="19:26" pos:end="19:26">+</operator> <literal type="number" pos:start="19:28" pos:end="19:28">1</literal> <operator pos:start="19:30" pos:end="19:30">&gt;</operator> <name pos:start="19:32" pos:end="19:37">outbuf</name> <operator pos:start="19:39" pos:end="19:39">+</operator> <name pos:start="19:41" pos:end="19:48">out_size</name></expr>)</condition><block type="pseudo" pos:start="19:51" pos:end="19:60"><block_content pos:start="19:51" pos:end="19:60"> <return pos:start="19:51" pos:end="19:60">return <expr pos:start="19:58" pos:end="19:59"><operator pos:start="19:58" pos:end="19:58">-</operator><literal type="number" pos:start="19:59" pos:end="19:59">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:49"><expr pos:start="21:13" pos:end="21:48"><operator pos:start="21:13" pos:end="21:13">*</operator><name pos:start="21:14" pos:end="21:16">out</name><operator pos:start="21:17" pos:end="21:18">++</operator> <operator pos:start="21:20" pos:end="21:20">=</operator> <operator pos:start="21:22" pos:end="21:22">(</operator><name pos:start="21:23" pos:end="21:27">count</name> <operator pos:start="21:29" pos:end="21:29">^</operator> <name pos:start="21:31" pos:end="21:37">xor_rep</name><operator pos:start="21:38" pos:end="21:38">)</operator> <operator pos:start="21:40" pos:end="21:40">+</operator> <name pos:start="21:42" pos:end="21:48">add_rep</name></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:34"><expr pos:start="23:13" pos:end="23:33"><call pos:start="23:13" pos:end="23:33"><name pos:start="23:13" pos:end="23:18">memcpy</name><argument_list pos:start="23:19" pos:end="23:33">(<argument pos:start="23:20" pos:end="23:22"><expr pos:start="23:20" pos:end="23:22"><name pos:start="23:20" pos:end="23:22">out</name></expr></argument>, <argument pos:start="23:25" pos:end="23:27"><expr pos:start="23:25" pos:end="23:27"><name pos:start="23:25" pos:end="23:27">ptr</name></expr></argument>, <argument pos:start="23:30" pos:end="23:32"><expr pos:start="23:30" pos:end="23:32"><name pos:start="23:30" pos:end="23:32">bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:23"><expr pos:start="25:13" pos:end="25:22"><name pos:start="25:13" pos:end="25:15">out</name> <operator pos:start="25:17" pos:end="25:18">+=</operator> <name pos:start="25:20" pos:end="25:22">bpp</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="27:11" pos:end="43:9">else <block pos:start="27:16" pos:end="43:9">{<block_content pos:start="31:13" pos:end="41:31">

            <comment type="block" pos:start="29:13" pos:end="29:43">/* fall back on uncompressed */</comment>

            <expr_stmt pos:start="31:13" pos:end="31:51"><expr pos:start="31:13" pos:end="31:50"><name pos:start="31:13" pos:end="31:17">count</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <call pos:start="31:21" pos:end="31:50"><name pos:start="31:21" pos:end="31:32">count_pixels</name><argument_list pos:start="31:33" pos:end="31:50">(<argument pos:start="31:34" pos:end="31:36"><expr pos:start="31:34" pos:end="31:36"><name pos:start="31:34" pos:end="31:36">ptr</name></expr></argument>, <argument pos:start="31:39" pos:end="31:41"><expr pos:start="31:39" pos:end="31:41"><name pos:start="31:39" pos:end="31:39">w</name><operator pos:start="31:40" pos:end="31:40">-</operator><name pos:start="31:41" pos:end="31:41">x</name></expr></argument>, <argument pos:start="31:44" pos:end="31:46"><expr pos:start="31:44" pos:end="31:46"><name pos:start="31:44" pos:end="31:46">bpp</name></expr></argument>, <argument pos:start="31:49" pos:end="31:49"><expr pos:start="31:49" pos:end="31:49"><literal type="number" pos:start="31:49" pos:end="31:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:49"><expr pos:start="33:13" pos:end="33:48"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:16">out</name><operator pos:start="33:17" pos:end="33:18">++</operator> <operator pos:start="33:20" pos:end="33:20">=</operator> <operator pos:start="33:22" pos:end="33:22">(</operator><name pos:start="33:23" pos:end="33:27">count</name> <operator pos:start="33:29" pos:end="33:29">^</operator> <name pos:start="33:31" pos:end="33:37">xor_raw</name><operator pos:start="33:38" pos:end="33:38">)</operator> <operator pos:start="33:40" pos:end="33:40">+</operator> <name pos:start="33:42" pos:end="33:48">add_raw</name></expr>;</expr_stmt>



            <if_stmt pos:start="37:13" pos:end="37:62"><if pos:start="37:13" pos:end="37:62">if<condition pos:start="37:15" pos:end="37:51">(<expr pos:start="37:16" pos:end="37:50"><name pos:start="37:16" pos:end="37:18">out</name> <operator pos:start="37:20" pos:end="37:20">+</operator> <name pos:start="37:22" pos:end="37:24">bpp</name><operator pos:start="37:25" pos:end="37:25">*</operator><name pos:start="37:26" pos:end="37:30">count</name> <operator pos:start="37:32" pos:end="37:32">&gt;</operator> <name pos:start="37:34" pos:end="37:39">outbuf</name> <operator pos:start="37:41" pos:end="37:41">+</operator> <name pos:start="37:43" pos:end="37:50">out_size</name></expr>)</condition><block type="pseudo" pos:start="37:53" pos:end="37:62"><block_content pos:start="37:53" pos:end="37:62"> <return pos:start="37:53" pos:end="37:62">return <expr pos:start="37:60" pos:end="37:61"><operator pos:start="37:60" pos:end="37:60">-</operator><literal type="number" pos:start="37:61" pos:end="37:61">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:42"><expr pos:start="39:13" pos:end="39:41"><call pos:start="39:13" pos:end="39:41"><name pos:start="39:13" pos:end="39:18">memcpy</name><argument_list pos:start="39:19" pos:end="39:41">(<argument pos:start="39:20" pos:end="39:22"><expr pos:start="39:20" pos:end="39:22"><name pos:start="39:20" pos:end="39:22">out</name></expr></argument>, <argument pos:start="39:25" pos:end="39:27"><expr pos:start="39:25" pos:end="39:27"><name pos:start="39:25" pos:end="39:27">ptr</name></expr></argument>, <argument pos:start="39:30" pos:end="39:40"><expr pos:start="39:30" pos:end="39:40"><name pos:start="39:30" pos:end="39:32">bpp</name> <operator pos:start="39:34" pos:end="39:34">*</operator> <name pos:start="39:36" pos:end="39:40">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:31"><expr pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:15">out</name> <operator pos:start="41:17" pos:end="41:18">+=</operator> <name pos:start="41:20" pos:end="41:22">bpp</name> <operator pos:start="41:24" pos:end="41:24">*</operator> <name pos:start="41:26" pos:end="41:30">count</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:27"><expr pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:11">ptr</name> <operator pos:start="47:13" pos:end="47:14">+=</operator> <name pos:start="47:16" pos:end="47:20">count</name> <operator pos:start="47:22" pos:end="47:22">*</operator> <name pos:start="47:24" pos:end="47:26">bpp</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="53:5" pos:end="53:24">return <expr pos:start="53:12" pos:end="53:23"><name pos:start="53:12" pos:end="53:14">out</name> <operator pos:start="53:16" pos:end="53:16">-</operator> <name pos:start="53:18" pos:end="53:23">outbuf</name></expr>;</return>

</block_content>}</block></function>
</unit>
