<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18650.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">flac_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:65">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><name pos:start="3:30" pos:end="3:32">int</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:47">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:64"><decl pos:start="3:50" pos:end="3:64"><type pos:start="3:50" pos:end="3:64"><name pos:start="3:50" pos:end="3:57">AVPacket</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:64">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="163:1">{<block_content pos:start="7:5" pos:end="161:22">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">frame</name>     <init pos:start="7:24" pos:end="7:29">= <expr pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:29">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">ThreadFrame</name></type> <name pos:start="9:17" pos:end="9:22">tframe</name> <init pos:start="9:24" pos:end="9:38">= <expr pos:start="9:26" pos:end="9:38"><block pos:start="9:26" pos:end="9:38">{ <expr pos:start="9:28" pos:end="9:36"><operator pos:start="9:28" pos:end="9:28">.</operator><name pos:start="9:29" pos:end="9:29">f</name> <operator pos:start="9:31" pos:end="9:31">=</operator> <name pos:start="9:33" pos:end="9:36">data</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">buf</name> <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">buf_size</name> <init pos:start="13:18" pos:end="13:30">= <expr pos:start="13:20" pos:end="13:30"><name pos:start="13:20" pos:end="13:30"><name pos:start="13:20" pos:end="13:24">avpkt</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">FLACContext</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:18">s</name> <init pos:start="15:20" pos:end="15:37">= <expr pos:start="15:22" pos:end="15:37"><name pos:start="15:22" pos:end="15:37"><name pos:start="15:22" pos:end="15:26">avctx</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">bytes_read</name> <init pos:start="17:20" pos:end="17:22">= <expr pos:start="17:22" pos:end="17:22"><literal type="number" pos:start="17:22" pos:end="17:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><operator pos:start="23:5" pos:end="23:5">*</operator><name pos:start="23:6" pos:end="23:18">got_frame_ptr</name> <operator pos:start="23:20" pos:end="23:20">=</operator> <literal type="number" pos:start="23:22" pos:end="23:22">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:30">(<expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:24">max_framesize</name></name> <operator pos:start="27:26" pos:end="27:27">==</operator> <literal type="number" pos:start="27:29" pos:end="27:29">0</literal></expr>)</condition> <block pos:start="27:32" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:62">

        <expr_stmt pos:start="29:9" pos:end="33:62"><expr pos:start="29:9" pos:end="33:61"><name pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:24">max_framesize</name></name> <operator pos:start="29:26" pos:end="29:26">=</operator>

            <call pos:start="31:13" pos:end="33:61"><name pos:start="31:13" pos:end="31:38">ff_flac_get_max_frame_size</name><argument_list pos:start="31:39" pos:end="33:61">(<argument pos:start="31:40" pos:end="31:95"><expr pos:start="31:40" pos:end="31:95"><ternary pos:start="31:40" pos:end="31:95"><condition pos:start="31:40" pos:end="31:57"><expr pos:start="31:40" pos:end="31:55"><name pos:start="31:40" pos:end="31:55"><name pos:start="31:40" pos:end="31:40">s</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:55">max_blocksize</name></name></expr> ?</condition><then pos:start="31:59" pos:end="31:74"> <expr pos:start="31:59" pos:end="31:74"><name pos:start="31:59" pos:end="31:74"><name pos:start="31:59" pos:end="31:59">s</name><operator pos:start="31:60" pos:end="31:61">-&gt;</operator><name pos:start="31:62" pos:end="31:74">max_blocksize</name></name></expr> </then><else pos:start="31:76" pos:end="31:95">: <expr pos:start="31:78" pos:end="31:95"><name pos:start="31:78" pos:end="31:95">FLAC_MAX_BLOCKSIZE</name></expr></else></ternary></expr></argument>,

                                       <argument pos:start="33:40" pos:end="33:56"><expr pos:start="33:40" pos:end="33:56"><name pos:start="33:40" pos:end="33:56">FLAC_MAX_CHANNELS</name></expr></argument>, <argument pos:start="33:59" pos:end="33:60"><expr pos:start="33:59" pos:end="33:60"><literal type="number" pos:start="33:59" pos:end="33:60">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:52">(<expr pos:start="39:9" pos:end="39:51"><name pos:start="39:9" pos:end="39:16">buf_size</name> <operator pos:start="39:18" pos:end="39:18">&gt;</operator> <literal type="number" pos:start="39:20" pos:end="39:20">5</literal> <operator pos:start="39:22" pos:end="39:23">&amp;&amp;</operator> <operator pos:start="39:25" pos:end="39:25">!</operator><call pos:start="39:26" pos:end="39:51"><name pos:start="39:26" pos:end="39:31">memcmp</name><argument_list pos:start="39:32" pos:end="39:51">(<argument pos:start="39:33" pos:end="39:35"><expr pos:start="39:33" pos:end="39:35"><name pos:start="39:33" pos:end="39:35">buf</name></expr></argument>, <argument pos:start="39:38" pos:end="39:47"><expr pos:start="39:38" pos:end="39:47"><literal type="string" pos:start="39:38" pos:end="39:47">"\177FLAC"</literal></expr></argument>, <argument pos:start="39:50" pos:end="39:50"><expr pos:start="39:50" pos:end="39:50"><literal type="number" pos:start="39:50" pos:end="39:50">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:54" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:24">

        <expr_stmt pos:start="41:9" pos:end="41:73"><expr pos:start="41:9" pos:end="41:72"><call pos:start="41:9" pos:end="41:72"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:72">(<argument pos:start="41:16" pos:end="41:23"><expr pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:16">s</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:23">avctx</name></name></expr></argument>, <argument pos:start="41:26" pos:end="41:37"><expr pos:start="41:26" pos:end="41:37"><name pos:start="41:26" pos:end="41:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="41:40" pos:end="41:71"><expr pos:start="41:40" pos:end="41:71"><literal type="string" pos:start="41:40" pos:end="41:71">"skiping flac header packet 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:24">return <expr pos:start="43:16" pos:end="43:23"><name pos:start="43:16" pos:end="43:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:75">(<expr pos:start="49:9" pos:end="49:74"><name pos:start="49:9" pos:end="49:16">buf_size</name> <operator pos:start="49:18" pos:end="49:18">&gt;</operator> <literal type="number" pos:start="49:20" pos:end="49:20">0</literal> <operator pos:start="49:22" pos:end="49:23">&amp;&amp;</operator> <operator pos:start="49:25" pos:end="49:25">(</operator><operator pos:start="49:26" pos:end="49:26">*</operator><name pos:start="49:27" pos:end="49:29">buf</name> <operator pos:start="49:31" pos:end="49:31">&amp;</operator> <literal type="number" pos:start="49:33" pos:end="49:36">0x7F</literal><operator pos:start="49:37" pos:end="49:37">)</operator> <operator pos:start="49:39" pos:end="49:40">==</operator> <name pos:start="49:42" pos:end="49:74">FLAC_METADATA_TYPE_VORBIS_COMMENT</name></expr>)</condition> <block pos:start="49:77" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:24">

        <expr_stmt pos:start="51:9" pos:end="51:67"><expr pos:start="51:9" pos:end="51:66"><call pos:start="51:9" pos:end="51:66"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:66">(<argument pos:start="51:16" pos:end="51:23"><expr pos:start="51:16" pos:end="51:23"><name pos:start="51:16" pos:end="51:23"><name pos:start="51:16" pos:end="51:16">s</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:23">avctx</name></name></expr></argument>, <argument pos:start="51:26" pos:end="51:37"><expr pos:start="51:26" pos:end="51:37"><name pos:start="51:26" pos:end="51:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="51:40" pos:end="51:65"><expr pos:start="51:40" pos:end="51:65"><literal type="string" pos:start="51:40" pos:end="51:65">"skiping vorbis comment\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:24">return <expr pos:start="53:16" pos:end="53:23"><name pos:start="53:16" pos:end="53:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="63:42">/* check that there is at least the smallest decodable amount of data.

       this amount corresponds to the smallest valid FLAC frame possible.

       FF F8 69 02 00 00 9A 00 00 34 46 */</comment>

    <if_stmt pos:start="65:5" pos:end="67:24"><if pos:start="65:5" pos:end="67:24">if <condition pos:start="65:8" pos:end="65:39">(<expr pos:start="65:9" pos:end="65:38"><name pos:start="65:9" pos:end="65:16">buf_size</name> <operator pos:start="65:18" pos:end="65:18">&lt;</operator> <name pos:start="65:20" pos:end="65:38">FLAC_MIN_FRAME_SIZE</name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:24"><block_content pos:start="67:9" pos:end="67:24">

        <return pos:start="67:9" pos:end="67:24">return <expr pos:start="67:16" pos:end="67:23"><name pos:start="67:16" pos:end="67:23">buf_size</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:33">/* check for inline header */</comment>

    <if_stmt pos:start="73:5" pos:end="85:5"><if pos:start="73:5" pos:end="85:5">if <condition pos:start="73:8" pos:end="73:49">(<expr pos:start="73:9" pos:end="73:48"><call pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:15">AV_RB32</name><argument_list pos:start="73:16" pos:end="73:20">(<argument pos:start="73:17" pos:end="73:19"><expr pos:start="73:17" pos:end="73:19"><name pos:start="73:17" pos:end="73:19">buf</name></expr></argument>)</argument_list></call> <operator pos:start="73:22" pos:end="73:23">==</operator> <call pos:start="73:25" pos:end="73:48"><name pos:start="73:25" pos:end="73:31">MKBETAG</name><argument_list pos:start="73:32" pos:end="73:48">(<argument pos:start="73:33" pos:end="73:35"><expr pos:start="73:33" pos:end="73:35"><literal type="char" pos:start="73:33" pos:end="73:35">'f'</literal></expr></argument>,<argument pos:start="73:37" pos:end="73:39"><expr pos:start="73:37" pos:end="73:39"><literal type="char" pos:start="73:37" pos:end="73:39">'L'</literal></expr></argument>,<argument pos:start="73:41" pos:end="73:43"><expr pos:start="73:41" pos:end="73:43"><literal type="char" pos:start="73:41" pos:end="73:43">'a'</literal></expr></argument>,<argument pos:start="73:45" pos:end="73:47"><expr pos:start="73:45" pos:end="73:47"><literal type="char" pos:start="73:45" pos:end="73:47">'C'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:51" pos:end="85:5">{<block_content pos:start="75:9" pos:end="83:48">

        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:77">(<expr pos:start="75:13" pos:end="75:76"><operator pos:start="75:13" pos:end="75:13">!</operator><name pos:start="75:14" pos:end="75:30"><name pos:start="75:14" pos:end="75:14">s</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:30">got_streaminfo</name></name> <operator pos:start="75:32" pos:end="75:33">&amp;&amp;</operator> <operator pos:start="75:35" pos:end="75:35">(</operator><name pos:start="75:36" pos:end="75:38">ret</name> <operator pos:start="75:40" pos:end="75:40">=</operator> <call pos:start="75:42" pos:end="75:75"><name pos:start="75:42" pos:end="75:57">parse_streaminfo</name><argument_list pos:start="75:58" pos:end="75:75">(<argument pos:start="75:59" pos:end="75:59"><expr pos:start="75:59" pos:end="75:59"><name pos:start="75:59" pos:end="75:59">s</name></expr></argument>, <argument pos:start="75:62" pos:end="75:64"><expr pos:start="75:62" pos:end="75:64"><name pos:start="75:62" pos:end="75:64">buf</name></expr></argument>, <argument pos:start="75:67" pos:end="75:74"><expr pos:start="75:67" pos:end="75:74"><name pos:start="75:67" pos:end="75:74">buf_size</name></expr></argument>)</argument_list></call><operator pos:start="75:76" pos:end="75:76">)</operator></expr>)</condition> <block pos:start="75:79" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:23">

            <expr_stmt pos:start="77:13" pos:end="77:63"><expr pos:start="77:13" pos:end="77:62"><call pos:start="77:13" pos:end="77:62"><name pos:start="77:13" pos:end="77:18">av_log</name><argument_list pos:start="77:19" pos:end="77:62">(<argument pos:start="77:20" pos:end="77:27"><expr pos:start="77:20" pos:end="77:27"><name pos:start="77:20" pos:end="77:27"><name pos:start="77:20" pos:end="77:20">s</name><operator pos:start="77:21" pos:end="77:22">-&gt;</operator><name pos:start="77:23" pos:end="77:27">avctx</name></name></expr></argument>, <argument pos:start="77:30" pos:end="77:41"><expr pos:start="77:30" pos:end="77:41"><name pos:start="77:30" pos:end="77:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:44" pos:end="77:61"><expr pos:start="77:44" pos:end="77:61"><literal type="string" pos:start="77:44" pos:end="77:61">"invalid header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:23">return <expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="83:9" pos:end="83:48">return <expr pos:start="83:16" pos:end="83:47"><call pos:start="83:16" pos:end="83:47"><name pos:start="83:16" pos:end="83:32">get_metadata_size</name><argument_list pos:start="83:33" pos:end="83:47">(<argument pos:start="83:34" pos:end="83:36"><expr pos:start="83:34" pos:end="83:36"><name pos:start="83:34" pos:end="83:36">buf</name></expr></argument>, <argument pos:start="83:39" pos:end="83:46"><expr pos:start="83:39" pos:end="83:46"><name pos:start="83:39" pos:end="83:46">buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:22">/* decode frame */</comment>

    <if_stmt pos:start="91:5" pos:end="93:19"><if pos:start="91:5" pos:end="93:19">if <condition pos:start="91:8" pos:end="91:58">(<expr pos:start="91:9" pos:end="91:57"><operator pos:start="91:9" pos:end="91:9">(</operator><name pos:start="91:10" pos:end="91:12">ret</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:52"><name pos:start="91:16" pos:end="91:29">init_get_bits8</name><argument_list pos:start="91:30" pos:end="91:52">(<argument pos:start="91:31" pos:end="91:36"><expr pos:start="91:31" pos:end="91:36"><operator pos:start="91:31" pos:end="91:31">&amp;</operator><name pos:start="91:32" pos:end="91:36"><name pos:start="91:32" pos:end="91:32">s</name><operator pos:start="91:33" pos:end="91:34">-&gt;</operator><name pos:start="91:35" pos:end="91:36">gb</name></name></expr></argument>, <argument pos:start="91:39" pos:end="91:41"><expr pos:start="91:39" pos:end="91:41"><name pos:start="91:39" pos:end="91:41">buf</name></expr></argument>, <argument pos:start="91:44" pos:end="91:51"><expr pos:start="91:44" pos:end="91:51"><name pos:start="91:44" pos:end="91:51">buf_size</name></expr></argument>)</argument_list></call><operator pos:start="91:53" pos:end="91:53">)</operator> <operator pos:start="91:55" pos:end="91:55">&lt;</operator> <literal type="number" pos:start="91:57" pos:end="91:57">0</literal></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:19"><block_content pos:start="93:9" pos:end="93:19">

        <return pos:start="93:9" pos:end="93:19">return <expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="95:5" pos:end="101:5"><if pos:start="95:5" pos:end="101:5">if <condition pos:start="95:8" pos:end="95:36">(<expr pos:start="95:9" pos:end="95:35"><operator pos:start="95:9" pos:end="95:9">(</operator><name pos:start="95:10" pos:end="95:12">ret</name> <operator pos:start="95:14" pos:end="95:14">=</operator> <call pos:start="95:16" pos:end="95:30"><name pos:start="95:16" pos:end="95:27">decode_frame</name><argument_list pos:start="95:28" pos:end="95:30">(<argument pos:start="95:29" pos:end="95:29"><expr pos:start="95:29" pos:end="95:29"><name pos:start="95:29" pos:end="95:29">s</name></expr></argument>)</argument_list></call><operator pos:start="95:31" pos:end="95:31">)</operator> <operator pos:start="95:33" pos:end="95:33">&lt;</operator> <literal type="number" pos:start="95:35" pos:end="95:35">0</literal></expr>)</condition> <block pos:start="95:38" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:19">

        <expr_stmt pos:start="97:9" pos:end="97:66"><expr pos:start="97:9" pos:end="97:65"><call pos:start="97:9" pos:end="97:65"><name pos:start="97:9" pos:end="97:14">av_log</name><argument_list pos:start="97:15" pos:end="97:65">(<argument pos:start="97:16" pos:end="97:23"><expr pos:start="97:16" pos:end="97:23"><name pos:start="97:16" pos:end="97:23"><name pos:start="97:16" pos:end="97:16">s</name><operator pos:start="97:17" pos:end="97:18">-&gt;</operator><name pos:start="97:19" pos:end="97:23">avctx</name></name></expr></argument>, <argument pos:start="97:26" pos:end="97:37"><expr pos:start="97:26" pos:end="97:37"><name pos:start="97:26" pos:end="97:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:40" pos:end="97:64"><expr pos:start="97:40" pos:end="97:64"><literal type="string" pos:start="97:40" pos:end="97:64">"decode_frame() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="99:9" pos:end="99:19">return <expr pos:start="99:16" pos:end="99:18"><name pos:start="99:16" pos:end="99:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:42"><expr pos:start="103:5" pos:end="103:41"><name pos:start="103:5" pos:end="103:14">bytes_read</name> <operator pos:start="103:16" pos:end="103:16">=</operator> <call pos:start="103:18" pos:end="103:39"><name pos:start="103:18" pos:end="103:31">get_bits_count</name><argument_list pos:start="103:32" pos:end="103:39">(<argument pos:start="103:33" pos:end="103:38"><expr pos:start="103:33" pos:end="103:38"><operator pos:start="103:33" pos:end="103:33">&amp;</operator><name pos:start="103:34" pos:end="103:38"><name pos:start="103:34" pos:end="103:34">s</name><operator pos:start="103:35" pos:end="103:36">-&gt;</operator><name pos:start="103:37" pos:end="103:38">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="103:40" pos:end="103:40">/</operator><literal type="number" pos:start="103:41" pos:end="103:41">8</literal></expr>;</expr_stmt>



    <if_stmt pos:start="107:5" pos:end="119:5"><if pos:start="107:5" pos:end="119:5">if <condition pos:start="107:8" pos:end="111:35">(<expr pos:start="107:9" pos:end="111:34"><operator pos:start="107:9" pos:end="107:9">(</operator><name pos:start="107:10" pos:end="107:34"><name pos:start="107:10" pos:end="107:10">s</name><operator pos:start="107:11" pos:end="107:12">-&gt;</operator><name pos:start="107:13" pos:end="107:17">avctx</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:34">err_recognition</name></name> <operator pos:start="107:36" pos:end="107:36">&amp;</operator> <name pos:start="107:38" pos:end="107:51">AV_EF_CRCCHECK</name><operator pos:start="107:52" pos:end="107:52">)</operator> <operator pos:start="107:54" pos:end="107:55">&amp;&amp;</operator>

        <call pos:start="109:9" pos:end="111:34"><name pos:start="109:9" pos:end="109:14">av_crc</name><argument_list pos:start="109:15" pos:end="111:34">(<argument pos:start="109:16" pos:end="109:47"><expr pos:start="109:16" pos:end="109:47"><call pos:start="109:16" pos:end="109:47"><name pos:start="109:16" pos:end="109:31">av_crc_get_table</name><argument_list pos:start="109:32" pos:end="109:47">(<argument pos:start="109:33" pos:end="109:46"><expr pos:start="109:33" pos:end="109:46"><name pos:start="109:33" pos:end="109:46">AV_CRC_16_ANSI</name></expr></argument>)</argument_list></call></expr></argument>,

               <argument pos:start="111:16" pos:end="111:16"><expr pos:start="111:16" pos:end="111:16"><literal type="number" pos:start="111:16" pos:end="111:16">0</literal></expr></argument>, <argument pos:start="111:19" pos:end="111:21"><expr pos:start="111:19" pos:end="111:21"><name pos:start="111:19" pos:end="111:21">buf</name></expr></argument>, <argument pos:start="111:24" pos:end="111:33"><expr pos:start="111:24" pos:end="111:33"><name pos:start="111:24" pos:end="111:33">bytes_read</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:37" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:39">

        <expr_stmt pos:start="113:9" pos:end="113:83"><expr pos:start="113:9" pos:end="113:82"><call pos:start="113:9" pos:end="113:82"><name pos:start="113:9" pos:end="113:14">av_log</name><argument_list pos:start="113:15" pos:end="113:82">(<argument pos:start="113:16" pos:end="113:23"><expr pos:start="113:16" pos:end="113:23"><name pos:start="113:16" pos:end="113:23"><name pos:start="113:16" pos:end="113:16">s</name><operator pos:start="113:17" pos:end="113:18">-&gt;</operator><name pos:start="113:19" pos:end="113:23">avctx</name></name></expr></argument>, <argument pos:start="113:26" pos:end="113:37"><expr pos:start="113:26" pos:end="113:37"><name pos:start="113:26" pos:end="113:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:40" pos:end="113:69"><expr pos:start="113:40" pos:end="113:69"><literal type="string" pos:start="113:40" pos:end="113:59">"CRC error at PTS %"</literal><name pos:start="113:60" pos:end="113:65">PRId64</name><literal type="string" pos:start="113:66" pos:end="113:69">"\n"</literal></expr></argument>, <argument pos:start="113:72" pos:end="113:81"><expr pos:start="113:72" pos:end="113:81"><name pos:start="113:72" pos:end="113:81"><name pos:start="113:72" pos:end="113:76">avpkt</name><operator pos:start="113:77" pos:end="113:78">-&gt;</operator><name pos:start="113:79" pos:end="113:81">pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="117:39"><if pos:start="115:9" pos:end="117:39">if <condition pos:start="115:12" pos:end="115:54">(<expr pos:start="115:13" pos:end="115:53"><name pos:start="115:13" pos:end="115:37"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:20">avctx</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:37">err_recognition</name></name> <operator pos:start="115:39" pos:end="115:39">&amp;</operator> <name pos:start="115:41" pos:end="115:53">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:39"><block_content pos:start="117:13" pos:end="117:39">

            <return pos:start="117:13" pos:end="117:39">return <expr pos:start="117:20" pos:end="117:38"><name pos:start="117:20" pos:end="117:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:27">/* get output buffer */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:37"><expr pos:start="125:5" pos:end="125:36"><name pos:start="125:5" pos:end="125:21"><name pos:start="125:5" pos:end="125:9">frame</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:21">nb_samples</name></name> <operator pos:start="125:23" pos:end="125:23">=</operator> <name pos:start="125:25" pos:end="125:36"><name pos:start="125:25" pos:end="125:25">s</name><operator pos:start="125:26" pos:end="125:27">-&gt;</operator><name pos:start="125:28" pos:end="125:36">blocksize</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="129:19"><if pos:start="127:5" pos:end="129:19">if <condition pos:start="127:8" pos:end="127:60">(<expr pos:start="127:9" pos:end="127:59"><operator pos:start="127:9" pos:end="127:9">(</operator><name pos:start="127:10" pos:end="127:12">ret</name> <operator pos:start="127:14" pos:end="127:14">=</operator> <call pos:start="127:16" pos:end="127:54"><name pos:start="127:16" pos:end="127:35">ff_thread_get_buffer</name><argument_list pos:start="127:36" pos:end="127:54">(<argument pos:start="127:37" pos:end="127:41"><expr pos:start="127:37" pos:end="127:41"><name pos:start="127:37" pos:end="127:41">avctx</name></expr></argument>, <argument pos:start="127:44" pos:end="127:50"><expr pos:start="127:44" pos:end="127:50"><operator pos:start="127:44" pos:end="127:44">&amp;</operator><name pos:start="127:45" pos:end="127:50">tframe</name></expr></argument>, <argument pos:start="127:53" pos:end="127:53"><expr pos:start="127:53" pos:end="127:53"><literal type="number" pos:start="127:53" pos:end="127:53">0</literal></expr></argument>)</argument_list></call><operator pos:start="127:55" pos:end="127:55">)</operator> <operator pos:start="127:57" pos:end="127:57">&lt;</operator> <literal type="number" pos:start="127:59" pos:end="127:59">0</literal></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:19"><block_content pos:start="129:9" pos:end="129:19">

        <return pos:start="129:9" pos:end="129:19">return <expr pos:start="129:16" pos:end="129:18"><name pos:start="129:16" pos:end="129:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="135:66"><expr pos:start="133:5" pos:end="135:65"><name pos:start="133:5" pos:end="133:34"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:10">dsp</name><operator pos:start="133:11" pos:end="133:11">.</operator><name pos:start="133:12" pos:end="133:22">decorrelate</name><index pos:start="133:23" pos:end="133:34">[<expr pos:start="133:24" pos:end="133:33"><name pos:start="133:24" pos:end="133:33"><name pos:start="133:24" pos:end="133:24">s</name><operator pos:start="133:25" pos:end="133:26">-&gt;</operator><name pos:start="133:27" pos:end="133:33">ch_mode</name></name></expr>]</index></name><operator pos:start="133:35" pos:end="133:35">(</operator><name pos:start="133:36" pos:end="133:46"><name pos:start="133:36" pos:end="133:40">frame</name><operator pos:start="133:41" pos:end="133:42">-&gt;</operator><name pos:start="133:43" pos:end="133:46">data</name></name><operator pos:start="133:47" pos:end="133:47">,</operator> <name pos:start="133:49" pos:end="133:58"><name pos:start="133:49" pos:end="133:49">s</name><operator pos:start="133:50" pos:end="133:51">-&gt;</operator><name pos:start="133:52" pos:end="133:58">decoded</name></name><operator pos:start="133:59" pos:end="133:59">,</operator> <name pos:start="133:61" pos:end="133:71"><name pos:start="133:61" pos:end="133:61">s</name><operator pos:start="133:62" pos:end="133:63">-&gt;</operator><name pos:start="133:64" pos:end="133:71">channels</name></name><operator pos:start="133:72" pos:end="133:72">,</operator>

                                   <name pos:start="135:36" pos:end="135:47"><name pos:start="135:36" pos:end="135:36">s</name><operator pos:start="135:37" pos:end="135:38">-&gt;</operator><name pos:start="135:39" pos:end="135:47">blocksize</name></name><operator pos:start="135:48" pos:end="135:48">,</operator> <name pos:start="135:50" pos:end="135:64"><name pos:start="135:50" pos:end="135:50">s</name><operator pos:start="135:51" pos:end="135:52">-&gt;</operator><name pos:start="135:53" pos:end="135:64">sample_shift</name></name><operator pos:start="135:65" pos:end="135:65">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:30">(<expr pos:start="139:9" pos:end="139:29"><name pos:start="139:9" pos:end="139:18">bytes_read</name> <operator pos:start="139:20" pos:end="139:20">&gt;</operator> <name pos:start="139:22" pos:end="139:29">buf_size</name></expr>)</condition> <block pos:start="139:32" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:35">

        <expr_stmt pos:start="141:9" pos:end="141:80"><expr pos:start="141:9" pos:end="141:79"><call pos:start="141:9" pos:end="141:79"><name pos:start="141:9" pos:end="141:14">av_log</name><argument_list pos:start="141:15" pos:end="141:79">(<argument pos:start="141:16" pos:end="141:23"><expr pos:start="141:16" pos:end="141:23"><name pos:start="141:16" pos:end="141:23"><name pos:start="141:16" pos:end="141:16">s</name><operator pos:start="141:17" pos:end="141:18">-&gt;</operator><name pos:start="141:19" pos:end="141:23">avctx</name></name></expr></argument>, <argument pos:start="141:26" pos:end="141:37"><expr pos:start="141:26" pos:end="141:37"><name pos:start="141:26" pos:end="141:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="141:40" pos:end="141:55"><expr pos:start="141:40" pos:end="141:55"><literal type="string" pos:start="141:40" pos:end="141:55">"overread: %d\n"</literal></expr></argument>, <argument pos:start="141:58" pos:end="141:78"><expr pos:start="141:58" pos:end="141:78"><name pos:start="141:58" pos:end="141:67">bytes_read</name> <operator pos:start="141:69" pos:end="141:69">-</operator> <name pos:start="141:71" pos:end="141:78">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:35">return <expr pos:start="143:16" pos:end="143:34"><name pos:start="143:16" pos:end="143:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="147:5" pos:end="153:5"><if pos:start="147:5" pos:end="153:5">if <condition pos:start="147:8" pos:end="147:30">(<expr pos:start="147:9" pos:end="147:29"><name pos:start="147:9" pos:end="147:18">bytes_read</name> <operator pos:start="147:20" pos:end="147:20">&lt;</operator> <name pos:start="147:22" pos:end="147:29">buf_size</name></expr>)</condition> <block pos:start="147:32" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:48">

        <expr_stmt pos:start="149:9" pos:end="151:48"><expr pos:start="149:9" pos:end="151:47"><call pos:start="149:9" pos:end="151:47"><name pos:start="149:9" pos:end="149:14">av_log</name><argument_list pos:start="149:15" pos:end="151:47">(<argument pos:start="149:16" pos:end="149:23"><expr pos:start="149:16" pos:end="149:23"><name pos:start="149:16" pos:end="149:23"><name pos:start="149:16" pos:end="149:16">s</name><operator pos:start="149:17" pos:end="149:18">-&gt;</operator><name pos:start="149:19" pos:end="149:23">avctx</name></name></expr></argument>, <argument pos:start="149:26" pos:end="149:37"><expr pos:start="149:26" pos:end="149:37"><name pos:start="149:26" pos:end="149:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="149:40" pos:end="149:70"><expr pos:start="149:40" pos:end="149:70"><literal type="string" pos:start="149:40" pos:end="149:70">"underread: %d orig size: %d\n"</literal></expr></argument>,

               <argument pos:start="151:16" pos:end="151:36"><expr pos:start="151:16" pos:end="151:36"><name pos:start="151:16" pos:end="151:23">buf_size</name> <operator pos:start="151:25" pos:end="151:25">-</operator> <name pos:start="151:27" pos:end="151:36">bytes_read</name></expr></argument>, <argument pos:start="151:39" pos:end="151:46"><expr pos:start="151:39" pos:end="151:46"><name pos:start="151:39" pos:end="151:46">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:23"><expr pos:start="157:5" pos:end="157:22"><operator pos:start="157:5" pos:end="157:5">*</operator><name pos:start="157:6" pos:end="157:18">got_frame_ptr</name> <operator pos:start="157:20" pos:end="157:20">=</operator> <literal type="number" pos:start="157:22" pos:end="157:22">1</literal></expr>;</expr_stmt>



    <return pos:start="161:5" pos:end="161:22">return <expr pos:start="161:12" pos:end="161:21"><name pos:start="161:12" pos:end="161:21">bytes_read</name></expr>;</return>

</block_content>}</block></function>
</unit>
