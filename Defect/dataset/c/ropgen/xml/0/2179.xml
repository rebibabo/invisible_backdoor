<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2179.c" pos:tabs="8"><function pos:start="1:1" pos:end="493:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">disas_coproc_insn</name><parameter_list pos:start="1:29" pos:end="1:60">(<parameter pos:start="1:30" pos:end="1:44"><decl pos:start="1:30" pos:end="1:44"><type pos:start="1:30" pos:end="1:44"><name pos:start="1:30" pos:end="1:41">DisasContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:54">uint32_t</name></type> <name pos:start="1:56" pos:end="1:59">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="493:1">{<block_content pos:start="5:5" pos:end="491:13">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">cpnum</name></decl>, <decl pos:start="5:16" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:19">is64</name></decl>, <decl pos:start="5:22" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:24">crn</name></decl>, <decl pos:start="5:27" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:27" pos:end="5:29">crm</name></decl>, <decl pos:start="5:32" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:32" pos:end="5:35">opc1</name></decl>, <decl pos:start="5:38" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:38" pos:end="5:41">opc2</name></decl>, <decl pos:start="5:44" pos:end="5:49"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:44" pos:end="5:49">isread</name></decl>, <decl pos:start="5:52" pos:end="5:53"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:52" pos:end="5:53">rt</name></decl>, <decl pos:start="5:56" pos:end="5:58"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:56" pos:end="5:58">rt2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:24"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:22">ARMCPRegInfo</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:26">ri</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:30"><expr pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:9">cpnum</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <operator pos:start="11:13" pos:end="11:13">(</operator><name pos:start="11:14" pos:end="11:17">insn</name> <operator pos:start="11:19" pos:end="11:20">&gt;&gt;</operator> <literal type="number" pos:start="11:22" pos:end="11:22">8</literal><operator pos:start="11:23" pos:end="11:23">)</operator> <operator pos:start="11:25" pos:end="11:25">&amp;</operator> <literal type="number" pos:start="11:27" pos:end="11:29">0xf</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:72">/* First check for coprocessor space used for XScale/iwMMXt insns */</comment>

    <if_stmt pos:start="17:5" pos:end="37:5"><if pos:start="17:5" pos:end="37:5">if <condition pos:start="17:8" pos:end="17:61">(<expr pos:start="17:9" pos:end="17:60"><call pos:start="17:9" pos:end="17:45"><name pos:start="17:9" pos:end="17:22">arm_dc_feature</name><argument_list pos:start="17:23" pos:end="17:45">(<argument pos:start="17:24" pos:end="17:24"><expr pos:start="17:24" pos:end="17:24"><name pos:start="17:24" pos:end="17:24">s</name></expr></argument>, <argument pos:start="17:27" pos:end="17:44"><expr pos:start="17:27" pos:end="17:44"><name pos:start="17:27" pos:end="17:44">ARM_FEATURE_XSCALE</name></expr></argument>)</argument_list></call> <operator pos:start="17:47" pos:end="17:48">&amp;&amp;</operator> <operator pos:start="17:50" pos:end="17:50">(</operator><name pos:start="17:51" pos:end="17:55">cpnum</name> <operator pos:start="17:57" pos:end="17:57">&lt;</operator> <literal type="number" pos:start="17:59" pos:end="17:59">2</literal><operator pos:start="17:60" pos:end="17:60">)</operator></expr>)</condition> <block pos:start="17:63" pos:end="37:5">{<block_content pos:start="19:9" pos:end="35:17">

        <if_stmt pos:start="19:9" pos:end="23:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:50">(<expr pos:start="19:13" pos:end="19:49"><call pos:start="19:13" pos:end="19:44"><name pos:start="19:13" pos:end="19:21">extract32</name><argument_list pos:start="19:22" pos:end="19:44">(<argument pos:start="19:23" pos:end="19:33"><expr pos:start="19:23" pos:end="19:33"><name pos:start="19:23" pos:end="19:33"><name pos:start="19:23" pos:end="19:23">s</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:33">c15_cpar</name></name></expr></argument>, <argument pos:start="19:36" pos:end="19:40"><expr pos:start="19:36" pos:end="19:40"><name pos:start="19:36" pos:end="19:40">cpnum</name></expr></argument>, <argument pos:start="19:43" pos:end="19:43"><expr pos:start="19:43" pos:end="19:43"><literal type="number" pos:start="19:43" pos:end="19:43">1</literal></expr></argument>)</argument_list></call> <operator pos:start="19:46" pos:end="19:47">==</operator> <literal type="number" pos:start="19:49" pos:end="19:49">0</literal></expr>)</condition> <block pos:start="19:52" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:21">

            <return pos:start="21:13" pos:end="21:21">return <expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="25:9" pos:end="33:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:50">(<expr pos:start="25:13" pos:end="25:49"><call pos:start="25:13" pos:end="25:49"><name pos:start="25:13" pos:end="25:26">arm_dc_feature</name><argument_list pos:start="25:27" pos:end="25:49">(<argument pos:start="25:28" pos:end="25:28"><expr pos:start="25:28" pos:end="25:28"><name pos:start="25:28" pos:end="25:28">s</name></expr></argument>, <argument pos:start="25:31" pos:end="25:48"><expr pos:start="25:31" pos:end="25:48"><name pos:start="25:31" pos:end="25:48">ARM_FEATURE_IWMMXT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:52" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:46">

            <return pos:start="27:13" pos:end="27:46">return <expr pos:start="27:20" pos:end="27:45"><call pos:start="27:20" pos:end="27:45"><name pos:start="27:20" pos:end="27:36">disas_iwmmxt_insn</name><argument_list pos:start="27:37" pos:end="27:45">(<argument pos:start="27:38" pos:end="27:38"><expr pos:start="27:38" pos:end="27:38"><name pos:start="27:38" pos:end="27:38">s</name></expr></argument>, <argument pos:start="27:41" pos:end="27:44"><expr pos:start="27:41" pos:end="27:44"><name pos:start="27:41" pos:end="27:44">insn</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="29:11" pos:end="33:9">else if <condition pos:start="29:19" pos:end="29:57">(<expr pos:start="29:20" pos:end="29:56"><call pos:start="29:20" pos:end="29:56"><name pos:start="29:20" pos:end="29:33">arm_dc_feature</name><argument_list pos:start="29:34" pos:end="29:56">(<argument pos:start="29:35" pos:end="29:35"><expr pos:start="29:35" pos:end="29:35"><name pos:start="29:35" pos:end="29:35">s</name></expr></argument>, <argument pos:start="29:38" pos:end="29:55"><expr pos:start="29:38" pos:end="29:55"><name pos:start="29:38" pos:end="29:55">ARM_FEATURE_XSCALE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:59" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:43">

            <return pos:start="31:13" pos:end="31:43">return <expr pos:start="31:20" pos:end="31:42"><call pos:start="31:20" pos:end="31:42"><name pos:start="31:20" pos:end="31:33">disas_dsp_insn</name><argument_list pos:start="31:34" pos:end="31:42">(<argument pos:start="31:35" pos:end="31:35"><expr pos:start="31:35" pos:end="31:35"><name pos:start="31:35" pos:end="31:35">s</name></expr></argument>, <argument pos:start="31:38" pos:end="31:41"><expr pos:start="31:38" pos:end="31:41"><name pos:start="31:38" pos:end="31:41">insn</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:54">/* Otherwise treat as a generic register access */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:35"><expr pos:start="43:5" pos:end="43:34"><name pos:start="43:5" pos:end="43:8">is64</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <operator pos:start="43:12" pos:end="43:12">(</operator><name pos:start="43:13" pos:end="43:16">insn</name> <operator pos:start="43:18" pos:end="43:18">&amp;</operator> <operator pos:start="43:20" pos:end="43:20">(</operator><literal type="number" pos:start="43:21" pos:end="43:21">1</literal> <operator pos:start="43:23" pos:end="43:24">&lt;&lt;</operator> <literal type="number" pos:start="43:26" pos:end="43:27">25</literal><operator pos:start="43:28" pos:end="43:28">)</operator><operator pos:start="43:29" pos:end="43:29">)</operator> <operator pos:start="43:31" pos:end="43:32">==</operator> <literal type="number" pos:start="43:34" pos:end="43:34">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:42">(<expr pos:start="45:9" pos:end="45:41"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:13">is64</name> <operator pos:start="45:15" pos:end="45:16">&amp;&amp;</operator> <operator pos:start="45:18" pos:end="45:18">(</operator><operator pos:start="45:19" pos:end="45:19">(</operator><name pos:start="45:20" pos:end="45:23">insn</name> <operator pos:start="45:25" pos:end="45:25">&amp;</operator> <operator pos:start="45:27" pos:end="45:27">(</operator><literal type="number" pos:start="45:28" pos:end="45:28">1</literal> <operator pos:start="45:30" pos:end="45:31">&lt;&lt;</operator> <literal type="number" pos:start="45:33" pos:end="45:33">4</literal><operator pos:start="45:34" pos:end="45:34">)</operator><operator pos:start="45:35" pos:end="45:35">)</operator> <operator pos:start="45:37" pos:end="45:38">==</operator> <literal type="number" pos:start="45:40" pos:end="45:40">0</literal><operator pos:start="45:41" pos:end="45:41">)</operator></expr>)</condition> <block pos:start="45:44" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:17">

        <comment type="block" pos:start="47:9" pos:end="47:17">/* cdp */</comment>

        <return pos:start="49:9" pos:end="49:17">return <expr pos:start="49:16" pos:end="49:16"><literal type="number" pos:start="49:16" pos:end="49:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:21"><expr pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:7">crm</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <name pos:start="55:11" pos:end="55:14">insn</name> <operator pos:start="55:16" pos:end="55:16">&amp;</operator> <literal type="number" pos:start="55:18" pos:end="55:20">0xf</literal></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="77:5"><if pos:start="57:5" pos:end="67:5">if <condition pos:start="57:8" pos:end="57:13">(<expr pos:start="57:9" pos:end="57:12"><name pos:start="57:9" pos:end="57:12">is64</name></expr>)</condition> <block pos:start="57:15" pos:end="67:5">{<block_content pos:start="59:9" pos:end="65:33">

        <expr_stmt pos:start="59:9" pos:end="59:16"><expr pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:11">crn</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:33"><expr pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:12">opc1</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <operator pos:start="61:16" pos:end="61:16">(</operator><name pos:start="61:17" pos:end="61:20">insn</name> <operator pos:start="61:22" pos:end="61:23">&gt;&gt;</operator> <literal type="number" pos:start="61:25" pos:end="61:25">4</literal><operator pos:start="61:26" pos:end="61:26">)</operator> <operator pos:start="61:28" pos:end="61:28">&amp;</operator> <literal type="number" pos:start="61:30" pos:end="61:32">0xf</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:17"><expr pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:12">opc2</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:33"><expr pos:start="65:9" pos:end="65:32"><name pos:start="65:9" pos:end="65:11">rt2</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">(</operator><name pos:start="65:16" pos:end="65:19">insn</name> <operator pos:start="65:21" pos:end="65:22">&gt;&gt;</operator> <literal type="number" pos:start="65:24" pos:end="65:25">16</literal><operator pos:start="65:26" pos:end="65:26">)</operator> <operator pos:start="65:28" pos:end="65:28">&amp;</operator> <literal type="number" pos:start="65:30" pos:end="65:32">0xf</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="77:5">else <block pos:start="67:12" pos:end="77:5">{<block_content pos:start="69:9" pos:end="75:16">

        <expr_stmt pos:start="69:9" pos:end="69:33"><expr pos:start="69:9" pos:end="69:32"><name pos:start="69:9" pos:end="69:11">crn</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <operator pos:start="69:15" pos:end="69:15">(</operator><name pos:start="69:16" pos:end="69:19">insn</name> <operator pos:start="69:21" pos:end="69:22">&gt;&gt;</operator> <literal type="number" pos:start="69:24" pos:end="69:25">16</literal><operator pos:start="69:26" pos:end="69:26">)</operator> <operator pos:start="69:28" pos:end="69:28">&amp;</operator> <literal type="number" pos:start="69:30" pos:end="69:32">0xf</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:32"><expr pos:start="71:9" pos:end="71:31"><name pos:start="71:9" pos:end="71:12">opc1</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <operator pos:start="71:16" pos:end="71:16">(</operator><name pos:start="71:17" pos:end="71:20">insn</name> <operator pos:start="71:22" pos:end="71:23">&gt;&gt;</operator> <literal type="number" pos:start="71:25" pos:end="71:26">21</literal><operator pos:start="71:27" pos:end="71:27">)</operator> <operator pos:start="71:29" pos:end="71:29">&amp;</operator> <literal type="number" pos:start="71:31" pos:end="71:31">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:31"><expr pos:start="73:9" pos:end="73:30"><name pos:start="73:9" pos:end="73:12">opc2</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <operator pos:start="73:16" pos:end="73:16">(</operator><name pos:start="73:17" pos:end="73:20">insn</name> <operator pos:start="73:22" pos:end="73:23">&gt;&gt;</operator> <literal type="number" pos:start="73:25" pos:end="73:25">5</literal><operator pos:start="73:26" pos:end="73:26">)</operator> <operator pos:start="73:28" pos:end="73:28">&amp;</operator> <literal type="number" pos:start="73:30" pos:end="73:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:16"><expr pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:11">rt2</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <literal type="number" pos:start="75:15" pos:end="75:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:30"><expr pos:start="79:5" pos:end="79:29"><name pos:start="79:5" pos:end="79:10">isread</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <operator pos:start="79:14" pos:end="79:14">(</operator><name pos:start="79:15" pos:end="79:18">insn</name> <operator pos:start="79:20" pos:end="79:21">&gt;&gt;</operator> <literal type="number" pos:start="79:23" pos:end="79:24">20</literal><operator pos:start="79:25" pos:end="79:25">)</operator> <operator pos:start="79:27" pos:end="79:27">&amp;</operator> <literal type="number" pos:start="79:29" pos:end="79:29">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:28"><expr pos:start="81:5" pos:end="81:27"><name pos:start="81:5" pos:end="81:6">rt</name> <operator pos:start="81:8" pos:end="81:8">=</operator> <operator pos:start="81:10" pos:end="81:10">(</operator><name pos:start="81:11" pos:end="81:14">insn</name> <operator pos:start="81:16" pos:end="81:17">&gt;&gt;</operator> <literal type="number" pos:start="81:19" pos:end="81:20">12</literal><operator pos:start="81:21" pos:end="81:21">)</operator> <operator pos:start="81:23" pos:end="81:23">&amp;</operator> <literal type="number" pos:start="81:25" pos:end="81:27">0xf</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="87:69"><expr pos:start="85:5" pos:end="87:68"><name pos:start="85:5" pos:end="85:6">ri</name> <operator pos:start="85:8" pos:end="85:8">=</operator> <call pos:start="85:10" pos:end="87:68"><name pos:start="85:10" pos:end="85:27">get_arm_cp_reginfo</name><argument_list pos:start="85:28" pos:end="87:68">(<argument pos:start="85:29" pos:end="85:38"><expr pos:start="85:29" pos:end="85:38"><name pos:start="85:29" pos:end="85:38"><name pos:start="85:29" pos:end="85:29">s</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:38">cp_regs</name></name></expr></argument>,

            <argument pos:start="87:13" pos:end="87:67"><expr pos:start="87:13" pos:end="87:67"><call pos:start="87:13" pos:end="87:67"><name pos:start="87:13" pos:end="87:25">ENCODE_CP_REG</name><argument_list pos:start="87:26" pos:end="87:67">(<argument pos:start="87:27" pos:end="87:31"><expr pos:start="87:27" pos:end="87:31"><name pos:start="87:27" pos:end="87:31">cpnum</name></expr></argument>, <argument pos:start="87:34" pos:end="87:37"><expr pos:start="87:34" pos:end="87:37"><name pos:start="87:34" pos:end="87:37">is64</name></expr></argument>, <argument pos:start="87:40" pos:end="87:44"><expr pos:start="87:40" pos:end="87:44"><name pos:start="87:40" pos:end="87:44"><name pos:start="87:40" pos:end="87:40">s</name><operator pos:start="87:41" pos:end="87:42">-&gt;</operator><name pos:start="87:43" pos:end="87:44">ns</name></name></expr></argument>, <argument pos:start="87:47" pos:end="87:49"><expr pos:start="87:47" pos:end="87:49"><name pos:start="87:47" pos:end="87:49">crn</name></expr></argument>, <argument pos:start="87:52" pos:end="87:54"><expr pos:start="87:52" pos:end="87:54"><name pos:start="87:52" pos:end="87:54">crm</name></expr></argument>, <argument pos:start="87:57" pos:end="87:60"><expr pos:start="87:57" pos:end="87:60"><name pos:start="87:57" pos:end="87:60">opc1</name></expr></argument>, <argument pos:start="87:63" pos:end="87:66"><expr pos:start="87:63" pos:end="87:66"><name pos:start="87:63" pos:end="87:66">opc2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="453:5"><if pos:start="89:5" pos:end="453:5">if <condition pos:start="89:8" pos:end="89:11">(<expr pos:start="89:9" pos:end="89:10"><name pos:start="89:9" pos:end="89:10">ri</name></expr>)</condition> <block pos:start="89:13" pos:end="453:5">{<block_content pos:start="93:9" pos:end="451:17">

        <comment type="block" pos:start="91:9" pos:end="91:38">/* Check access permissions */</comment>

        <if_stmt pos:start="93:9" pos:end="97:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:53">(<expr pos:start="93:13" pos:end="93:52"><operator pos:start="93:13" pos:end="93:13">!</operator><call pos:start="93:14" pos:end="93:52"><name pos:start="93:14" pos:end="93:25">cp_access_ok</name><argument_list pos:start="93:26" pos:end="93:52">(<argument pos:start="93:27" pos:end="93:39"><expr pos:start="93:27" pos:end="93:39"><name pos:start="93:27" pos:end="93:39"><name pos:start="93:27" pos:end="93:27">s</name><operator pos:start="93:28" pos:end="93:29">-&gt;</operator><name pos:start="93:30" pos:end="93:39">current_el</name></name></expr></argument>, <argument pos:start="93:42" pos:end="93:43"><expr pos:start="93:42" pos:end="93:43"><name pos:start="93:42" pos:end="93:43">ri</name></expr></argument>, <argument pos:start="93:46" pos:end="93:51"><expr pos:start="93:46" pos:end="93:51"><name pos:start="93:46" pos:end="93:51">isread</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:55" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:21">

            <return pos:start="95:13" pos:end="95:21">return <expr pos:start="95:20" pos:end="95:20"><literal type="number" pos:start="95:20" pos:end="95:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="101:9" pos:end="211:9"><if pos:start="101:9" pos:end="211:9">if <condition pos:start="101:12" pos:end="103:66">(<expr pos:start="101:13" pos:end="103:65"><name pos:start="101:13" pos:end="101:24"><name pos:start="101:13" pos:end="101:14">ri</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:24">accessfn</name></name> <operator pos:start="101:26" pos:end="101:27">||</operator>

            <operator pos:start="103:13" pos:end="103:13">(</operator><call pos:start="103:14" pos:end="103:50"><name pos:start="103:14" pos:end="103:27">arm_dc_feature</name><argument_list pos:start="103:28" pos:end="103:50">(<argument pos:start="103:29" pos:end="103:29"><expr pos:start="103:29" pos:end="103:29"><name pos:start="103:29" pos:end="103:29">s</name></expr></argument>, <argument pos:start="103:32" pos:end="103:49"><expr pos:start="103:32" pos:end="103:49"><name pos:start="103:32" pos:end="103:49">ARM_FEATURE_XSCALE</name></expr></argument>)</argument_list></call> <operator pos:start="103:52" pos:end="103:53">&amp;&amp;</operator> <name pos:start="103:55" pos:end="103:59">cpnum</name> <operator pos:start="103:61" pos:end="103:61">&lt;</operator> <literal type="number" pos:start="103:63" pos:end="103:64">14</literal><operator pos:start="103:65" pos:end="103:65">)</operator></expr>)</condition> <block pos:start="103:68" pos:end="211:9">{<block_content pos:start="115:13" pos:end="209:39">

            <comment type="block" pos:start="105:13" pos:end="113:15">/* Emit code to perform further access permissions checks at

             * runtime; this may result in an exception.

             * Note that on XScale all cp0..c13 registers do an access check

             * call in order to handle c15_cpar.

             */</comment>

            <decl_stmt pos:start="115:13" pos:end="115:28"><decl pos:start="115:13" pos:end="115:27"><type pos:start="115:13" pos:end="115:20"><name pos:start="115:13" pos:end="115:20">TCGv_ptr</name></type> <name pos:start="115:22" pos:end="115:27">tmpptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="117:13" pos:end="117:29"><decl pos:start="117:13" pos:end="117:28"><type pos:start="117:13" pos:end="117:20"><name pos:start="117:13" pos:end="117:20">TCGv_i32</name></type> <name pos:start="117:22" pos:end="117:28">tcg_syn</name></decl>;</decl_stmt>

            <decl_stmt pos:start="119:13" pos:end="119:30"><decl pos:start="119:13" pos:end="119:29"><type pos:start="119:13" pos:end="119:20"><name pos:start="119:13" pos:end="119:20">uint32_t</name></type> <name pos:start="119:22" pos:end="119:29">syndrome</name></decl>;</decl_stmt>



            <comment type="block" pos:start="123:13" pos:end="137:15">/* Note that since we are an implementation which takes an

             * exception on a trapped conditional instruction only if the

             * instruction passes its condition code check, we can take

             * advantage of the clause in the ARM ARM that allows us to set

             * the COND field in the instruction to 0xE in all cases.

             * We could fish the actual condition out of the insn (ARM)

             * or the condexec bits (Thumb) but it isn't necessary.

             */</comment>

            <switch pos:start="139:13" pos:end="195:13">switch <condition pos:start="139:20" pos:end="139:26">(<expr pos:start="139:21" pos:end="139:25"><name pos:start="139:21" pos:end="139:25">cpnum</name></expr>)</condition> <block pos:start="139:28" pos:end="195:13">{<block_content pos:start="141:13" pos:end="193:22">

            <case pos:start="141:13" pos:end="141:20">case <expr pos:start="141:18" pos:end="141:19"><literal type="number" pos:start="141:18" pos:end="141:19">14</literal></expr>:</case>

                <if_stmt pos:start="143:17" pos:end="155:17"><if pos:start="143:17" pos:end="149:17">if <condition pos:start="143:20" pos:end="143:25">(<expr pos:start="143:21" pos:end="143:24"><name pos:start="143:21" pos:end="143:24">is64</name></expr>)</condition> <block pos:start="143:27" pos:end="149:17">{<block_content pos:start="145:21" pos:end="147:67">

                    <expr_stmt pos:start="145:21" pos:end="147:67"><expr pos:start="145:21" pos:end="147:66"><name pos:start="145:21" pos:end="145:28">syndrome</name> <operator pos:start="145:30" pos:end="145:30">=</operator> <call pos:start="145:32" pos:end="147:66"><name pos:start="145:32" pos:end="145:48">syn_cp14_rrt_trap</name><argument_list pos:start="145:49" pos:end="147:66">(<argument pos:start="145:50" pos:end="145:50"><expr pos:start="145:50" pos:end="145:50"><literal type="number" pos:start="145:50" pos:end="145:50">1</literal></expr></argument>, <argument pos:start="145:53" pos:end="145:55"><expr pos:start="145:53" pos:end="145:55"><literal type="number" pos:start="145:53" pos:end="145:55">0xe</literal></expr></argument>, <argument pos:start="145:58" pos:end="145:61"><expr pos:start="145:58" pos:end="145:61"><name pos:start="145:58" pos:end="145:61">opc1</name></expr></argument>, <argument pos:start="145:64" pos:end="145:66"><expr pos:start="145:64" pos:end="145:66"><name pos:start="145:64" pos:end="145:66">crm</name></expr></argument>, <argument pos:start="145:69" pos:end="145:70"><expr pos:start="145:69" pos:end="145:70"><name pos:start="145:69" pos:end="145:70">rt</name></expr></argument>, <argument pos:start="145:73" pos:end="145:75"><expr pos:start="145:73" pos:end="145:75"><name pos:start="145:73" pos:end="145:75">rt2</name></expr></argument>,

                                                 <argument pos:start="147:50" pos:end="147:55"><expr pos:start="147:50" pos:end="147:55"><name pos:start="147:50" pos:end="147:55">isread</name></expr></argument>, <argument pos:start="147:58" pos:end="147:65"><expr pos:start="147:58" pos:end="147:65"><name pos:start="147:58" pos:end="147:65"><name pos:start="147:58" pos:end="147:58">s</name><operator pos:start="147:59" pos:end="147:60">-&gt;</operator><name pos:start="147:61" pos:end="147:65">thumb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="149:19" pos:end="155:17">else <block pos:start="149:24" pos:end="155:17">{<block_content pos:start="151:21" pos:end="153:70">

                    <expr_stmt pos:start="151:21" pos:end="153:70"><expr pos:start="151:21" pos:end="153:69"><name pos:start="151:21" pos:end="151:28">syndrome</name> <operator pos:start="151:30" pos:end="151:30">=</operator> <call pos:start="151:32" pos:end="153:69"><name pos:start="151:32" pos:end="151:47">syn_cp14_rt_trap</name><argument_list pos:start="151:48" pos:end="153:69">(<argument pos:start="151:49" pos:end="151:49"><expr pos:start="151:49" pos:end="151:49"><literal type="number" pos:start="151:49" pos:end="151:49">1</literal></expr></argument>, <argument pos:start="151:52" pos:end="151:54"><expr pos:start="151:52" pos:end="151:54"><literal type="number" pos:start="151:52" pos:end="151:54">0xe</literal></expr></argument>, <argument pos:start="151:57" pos:end="151:60"><expr pos:start="151:57" pos:end="151:60"><name pos:start="151:57" pos:end="151:60">opc1</name></expr></argument>, <argument pos:start="151:63" pos:end="151:66"><expr pos:start="151:63" pos:end="151:66"><name pos:start="151:63" pos:end="151:66">opc2</name></expr></argument>, <argument pos:start="151:69" pos:end="151:71"><expr pos:start="151:69" pos:end="151:71"><name pos:start="151:69" pos:end="151:71">crn</name></expr></argument>, <argument pos:start="151:74" pos:end="151:76"><expr pos:start="151:74" pos:end="151:76"><name pos:start="151:74" pos:end="151:76">crm</name></expr></argument>,

                                                <argument pos:start="153:49" pos:end="153:50"><expr pos:start="153:49" pos:end="153:50"><name pos:start="153:49" pos:end="153:50">rt</name></expr></argument>, <argument pos:start="153:53" pos:end="153:58"><expr pos:start="153:53" pos:end="153:58"><name pos:start="153:53" pos:end="153:58">isread</name></expr></argument>, <argument pos:start="153:61" pos:end="153:68"><expr pos:start="153:61" pos:end="153:68"><name pos:start="153:61" pos:end="153:68"><name pos:start="153:61" pos:end="153:61">s</name><operator pos:start="153:62" pos:end="153:63">-&gt;</operator><name pos:start="153:64" pos:end="153:68">thumb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="157:17" pos:end="157:22">break;</break>

            <case pos:start="159:13" pos:end="159:20">case <expr pos:start="159:18" pos:end="159:19"><literal type="number" pos:start="159:18" pos:end="159:19">15</literal></expr>:</case>

                <if_stmt pos:start="161:17" pos:end="173:17"><if pos:start="161:17" pos:end="167:17">if <condition pos:start="161:20" pos:end="161:25">(<expr pos:start="161:21" pos:end="161:24"><name pos:start="161:21" pos:end="161:24">is64</name></expr>)</condition> <block pos:start="161:27" pos:end="167:17">{<block_content pos:start="163:21" pos:end="165:67">

                    <expr_stmt pos:start="163:21" pos:end="165:67"><expr pos:start="163:21" pos:end="165:66"><name pos:start="163:21" pos:end="163:28">syndrome</name> <operator pos:start="163:30" pos:end="163:30">=</operator> <call pos:start="163:32" pos:end="165:66"><name pos:start="163:32" pos:end="163:48">syn_cp15_rrt_trap</name><argument_list pos:start="163:49" pos:end="165:66">(<argument pos:start="163:50" pos:end="163:50"><expr pos:start="163:50" pos:end="163:50"><literal type="number" pos:start="163:50" pos:end="163:50">1</literal></expr></argument>, <argument pos:start="163:53" pos:end="163:55"><expr pos:start="163:53" pos:end="163:55"><literal type="number" pos:start="163:53" pos:end="163:55">0xe</literal></expr></argument>, <argument pos:start="163:58" pos:end="163:61"><expr pos:start="163:58" pos:end="163:61"><name pos:start="163:58" pos:end="163:61">opc1</name></expr></argument>, <argument pos:start="163:64" pos:end="163:66"><expr pos:start="163:64" pos:end="163:66"><name pos:start="163:64" pos:end="163:66">crm</name></expr></argument>, <argument pos:start="163:69" pos:end="163:70"><expr pos:start="163:69" pos:end="163:70"><name pos:start="163:69" pos:end="163:70">rt</name></expr></argument>, <argument pos:start="163:73" pos:end="163:75"><expr pos:start="163:73" pos:end="163:75"><name pos:start="163:73" pos:end="163:75">rt2</name></expr></argument>,

                                                 <argument pos:start="165:50" pos:end="165:55"><expr pos:start="165:50" pos:end="165:55"><name pos:start="165:50" pos:end="165:55">isread</name></expr></argument>, <argument pos:start="165:58" pos:end="165:65"><expr pos:start="165:58" pos:end="165:65"><name pos:start="165:58" pos:end="165:65"><name pos:start="165:58" pos:end="165:58">s</name><operator pos:start="165:59" pos:end="165:60">-&gt;</operator><name pos:start="165:61" pos:end="165:65">thumb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="167:19" pos:end="173:17">else <block pos:start="167:24" pos:end="173:17">{<block_content pos:start="169:21" pos:end="171:70">

                    <expr_stmt pos:start="169:21" pos:end="171:70"><expr pos:start="169:21" pos:end="171:69"><name pos:start="169:21" pos:end="169:28">syndrome</name> <operator pos:start="169:30" pos:end="169:30">=</operator> <call pos:start="169:32" pos:end="171:69"><name pos:start="169:32" pos:end="169:47">syn_cp15_rt_trap</name><argument_list pos:start="169:48" pos:end="171:69">(<argument pos:start="169:49" pos:end="169:49"><expr pos:start="169:49" pos:end="169:49"><literal type="number" pos:start="169:49" pos:end="169:49">1</literal></expr></argument>, <argument pos:start="169:52" pos:end="169:54"><expr pos:start="169:52" pos:end="169:54"><literal type="number" pos:start="169:52" pos:end="169:54">0xe</literal></expr></argument>, <argument pos:start="169:57" pos:end="169:60"><expr pos:start="169:57" pos:end="169:60"><name pos:start="169:57" pos:end="169:60">opc1</name></expr></argument>, <argument pos:start="169:63" pos:end="169:66"><expr pos:start="169:63" pos:end="169:66"><name pos:start="169:63" pos:end="169:66">opc2</name></expr></argument>, <argument pos:start="169:69" pos:end="169:71"><expr pos:start="169:69" pos:end="169:71"><name pos:start="169:69" pos:end="169:71">crn</name></expr></argument>, <argument pos:start="169:74" pos:end="169:76"><expr pos:start="169:74" pos:end="169:76"><name pos:start="169:74" pos:end="169:76">crm</name></expr></argument>,

                                                <argument pos:start="171:49" pos:end="171:50"><expr pos:start="171:49" pos:end="171:50"><name pos:start="171:49" pos:end="171:50">rt</name></expr></argument>, <argument pos:start="171:53" pos:end="171:58"><expr pos:start="171:53" pos:end="171:58"><name pos:start="171:53" pos:end="171:58">isread</name></expr></argument>, <argument pos:start="171:61" pos:end="171:68"><expr pos:start="171:61" pos:end="171:68"><name pos:start="171:61" pos:end="171:68"><name pos:start="171:61" pos:end="171:61">s</name><operator pos:start="171:62" pos:end="171:63">-&gt;</operator><name pos:start="171:64" pos:end="171:68">thumb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="175:17" pos:end="175:22">break;</break>

            <default pos:start="177:13" pos:end="177:20">default:</default>

                <comment type="block" pos:start="179:17" pos:end="187:19">/* ARMv8 defines that only coprocessors 14 and 15 exist,

                 * so this can only happen if this is an ARMv7 or earlier CPU,

                 * in which case the syndrome information won't actually be

                 * guest visible.

                 */</comment>

                <expr_stmt pos:start="189:17" pos:end="189:59"><expr pos:start="189:17" pos:end="189:58"><call pos:start="189:17" pos:end="189:58"><name pos:start="189:17" pos:end="189:22">assert</name><argument_list pos:start="189:23" pos:end="189:58">(<argument pos:start="189:24" pos:end="189:57"><expr pos:start="189:24" pos:end="189:57"><operator pos:start="189:24" pos:end="189:24">!</operator><call pos:start="189:25" pos:end="189:57"><name pos:start="189:25" pos:end="189:38">arm_dc_feature</name><argument_list pos:start="189:39" pos:end="189:57">(<argument pos:start="189:40" pos:end="189:40"><expr pos:start="189:40" pos:end="189:40"><name pos:start="189:40" pos:end="189:40">s</name></expr></argument>, <argument pos:start="189:43" pos:end="189:56"><expr pos:start="189:43" pos:end="189:56"><name pos:start="189:43" pos:end="189:56">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="191:17" pos:end="191:47"><expr pos:start="191:17" pos:end="191:46"><name pos:start="191:17" pos:end="191:24">syndrome</name> <operator pos:start="191:26" pos:end="191:26">=</operator> <call pos:start="191:28" pos:end="191:46"><name pos:start="191:28" pos:end="191:44">syn_uncategorized</name><argument_list pos:start="191:45" pos:end="191:46">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="193:17" pos:end="193:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="199:13" pos:end="199:36"><expr pos:start="199:13" pos:end="199:35"><call pos:start="199:13" pos:end="199:35"><name pos:start="199:13" pos:end="199:25">gen_set_pc_im</name><argument_list pos:start="199:26" pos:end="199:35">(<argument pos:start="199:27" pos:end="199:27"><expr pos:start="199:27" pos:end="199:27"><name pos:start="199:27" pos:end="199:27">s</name></expr></argument>, <argument pos:start="199:30" pos:end="199:34"><expr pos:start="199:30" pos:end="199:34"><name pos:start="199:30" pos:end="199:34"><name pos:start="199:30" pos:end="199:30">s</name><operator pos:start="199:31" pos:end="199:32">-&gt;</operator><name pos:start="199:33" pos:end="199:34">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:39"><expr pos:start="201:13" pos:end="201:38"><name pos:start="201:13" pos:end="201:18">tmpptr</name> <operator pos:start="201:20" pos:end="201:20">=</operator> <call pos:start="201:22" pos:end="201:38"><name pos:start="201:22" pos:end="201:34">tcg_const_ptr</name><argument_list pos:start="201:35" pos:end="201:38">(<argument pos:start="201:36" pos:end="201:37"><expr pos:start="201:36" pos:end="201:37"><name pos:start="201:36" pos:end="201:37">ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:46"><expr pos:start="203:13" pos:end="203:45"><name pos:start="203:13" pos:end="203:19">tcg_syn</name> <operator pos:start="203:21" pos:end="203:21">=</operator> <call pos:start="203:23" pos:end="203:45"><name pos:start="203:23" pos:end="203:35">tcg_const_i32</name><argument_list pos:start="203:36" pos:end="203:45">(<argument pos:start="203:37" pos:end="203:44"><expr pos:start="203:37" pos:end="203:44"><name pos:start="203:37" pos:end="203:44">syndrome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:69"><expr pos:start="205:13" pos:end="205:68"><call pos:start="205:13" pos:end="205:68"><name pos:start="205:13" pos:end="205:42">gen_helper_access_check_cp_reg</name><argument_list pos:start="205:43" pos:end="205:68">(<argument pos:start="205:44" pos:end="205:50"><expr pos:start="205:44" pos:end="205:50"><name pos:start="205:44" pos:end="205:50">cpu_env</name></expr></argument>, <argument pos:start="205:53" pos:end="205:58"><expr pos:start="205:53" pos:end="205:58"><name pos:start="205:53" pos:end="205:58">tmpptr</name></expr></argument>, <argument pos:start="205:61" pos:end="205:67"><expr pos:start="205:61" pos:end="205:67"><name pos:start="205:61" pos:end="205:67">tcg_syn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:38"><expr pos:start="207:13" pos:end="207:37"><call pos:start="207:13" pos:end="207:37"><name pos:start="207:13" pos:end="207:29">tcg_temp_free_ptr</name><argument_list pos:start="207:30" pos:end="207:37">(<argument pos:start="207:31" pos:end="207:36"><expr pos:start="207:31" pos:end="207:36"><name pos:start="207:31" pos:end="207:36">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:39"><expr pos:start="209:13" pos:end="209:38"><call pos:start="209:13" pos:end="209:38"><name pos:start="209:13" pos:end="209:29">tcg_temp_free_i32</name><argument_list pos:start="209:30" pos:end="209:38">(<argument pos:start="209:31" pos:end="209:37"><expr pos:start="209:31" pos:end="209:37"><name pos:start="209:31" pos:end="209:37">tcg_syn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="215:9" pos:end="215:40">/* Handle special cases first */</comment>

        <switch pos:start="217:9" pos:end="241:9">switch <condition pos:start="217:16" pos:end="217:65">(<expr pos:start="217:17" pos:end="217:64"><name pos:start="217:17" pos:end="217:24"><name pos:start="217:17" pos:end="217:18">ri</name><operator pos:start="217:19" pos:end="217:20">-&gt;</operator><name pos:start="217:21" pos:end="217:24">type</name></name> <operator pos:start="217:26" pos:end="217:26">&amp;</operator> <operator pos:start="217:28" pos:end="217:28">~</operator><operator pos:start="217:29" pos:end="217:29">(</operator><name pos:start="217:30" pos:end="217:45">ARM_CP_FLAG_MASK</name> <operator pos:start="217:47" pos:end="217:47">&amp;</operator> <operator pos:start="217:49" pos:end="217:49">~</operator><name pos:start="217:50" pos:end="217:63">ARM_CP_SPECIAL</name><operator pos:start="217:64" pos:end="217:64">)</operator></expr>)</condition> <block pos:start="217:67" pos:end="241:9">{<block_content pos:start="219:9" pos:end="239:18">

        <case pos:start="219:9" pos:end="219:24">case <expr pos:start="219:14" pos:end="219:23"><name pos:start="219:14" pos:end="219:23">ARM_CP_NOP</name></expr>:</case>

            <return pos:start="221:13" pos:end="221:21">return <expr pos:start="221:20" pos:end="221:20"><literal type="number" pos:start="221:20" pos:end="221:20">0</literal></expr>;</return>

        <case pos:start="223:9" pos:end="223:24">case <expr pos:start="223:14" pos:end="223:23"><name pos:start="223:14" pos:end="223:23">ARM_CP_WFI</name></expr>:</case>

            <if_stmt pos:start="225:13" pos:end="229:13"><if pos:start="225:13" pos:end="229:13">if <condition pos:start="225:16" pos:end="225:23">(<expr pos:start="225:17" pos:end="225:22"><name pos:start="225:17" pos:end="225:22">isread</name></expr>)</condition> <block pos:start="225:25" pos:end="229:13">{<block_content pos:start="227:17" pos:end="227:25">

                <return pos:start="227:17" pos:end="227:25">return <expr pos:start="227:24" pos:end="227:24"><literal type="number" pos:start="227:24" pos:end="227:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:36"><expr pos:start="231:13" pos:end="231:35"><call pos:start="231:13" pos:end="231:35"><name pos:start="231:13" pos:end="231:25">gen_set_pc_im</name><argument_list pos:start="231:26" pos:end="231:35">(<argument pos:start="231:27" pos:end="231:27"><expr pos:start="231:27" pos:end="231:27"><name pos:start="231:27" pos:end="231:27">s</name></expr></argument>, <argument pos:start="231:30" pos:end="231:34"><expr pos:start="231:30" pos:end="231:34"><name pos:start="231:30" pos:end="231:34"><name pos:start="231:30" pos:end="231:30">s</name><operator pos:start="231:31" pos:end="231:32">-&gt;</operator><name pos:start="231:33" pos:end="231:34">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:34"><expr pos:start="233:13" pos:end="233:33"><name pos:start="233:13" pos:end="233:21"><name pos:start="233:13" pos:end="233:13">s</name><operator pos:start="233:14" pos:end="233:15">-&gt;</operator><name pos:start="233:16" pos:end="233:21">is_jmp</name></name> <operator pos:start="233:23" pos:end="233:23">=</operator> <name pos:start="233:25" pos:end="233:33">DISAS_WFI</name></expr>;</expr_stmt>

            <return pos:start="235:13" pos:end="235:21">return <expr pos:start="235:20" pos:end="235:20"><literal type="number" pos:start="235:20" pos:end="235:20">0</literal></expr>;</return>

        <default pos:start="237:9" pos:end="237:16">default:</default>

            <break pos:start="239:13" pos:end="239:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="245:9" pos:end="249:9"><if pos:start="245:9" pos:end="249:9">if <condition pos:start="245:12" pos:end="245:49">(<expr pos:start="245:13" pos:end="245:48"><name pos:start="245:13" pos:end="245:22">use_icount</name> <operator pos:start="245:24" pos:end="245:25">&amp;&amp;</operator> <operator pos:start="245:27" pos:end="245:27">(</operator><name pos:start="245:28" pos:end="245:35"><name pos:start="245:28" pos:end="245:29">ri</name><operator pos:start="245:30" pos:end="245:31">-&gt;</operator><name pos:start="245:32" pos:end="245:35">type</name></name> <operator pos:start="245:37" pos:end="245:37">&amp;</operator> <name pos:start="245:39" pos:end="245:47">ARM_CP_IO</name><operator pos:start="245:48" pos:end="245:48">)</operator></expr>)</condition> <block pos:start="245:51" pos:end="249:9">{<block_content pos:start="247:13" pos:end="247:27">

            <expr_stmt pos:start="247:13" pos:end="247:27"><expr pos:start="247:13" pos:end="247:26"><call pos:start="247:13" pos:end="247:26"><name pos:start="247:13" pos:end="247:24">gen_io_start</name><argument_list pos:start="247:25" pos:end="247:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="253:9" pos:end="423:9"><if pos:start="253:9" pos:end="349:9">if <condition pos:start="253:12" pos:end="253:19">(<expr pos:start="253:13" pos:end="253:18"><name pos:start="253:13" pos:end="253:18">isread</name></expr>)</condition> <block pos:start="253:21" pos:end="349:9">{<block_content pos:start="257:13" pos:end="347:13">

            <comment type="block" pos:start="255:13" pos:end="255:22">/* Read */</comment>

            <if_stmt pos:start="257:13" pos:end="347:13"><if pos:start="257:13" pos:end="303:13">if <condition pos:start="257:16" pos:end="257:21">(<expr pos:start="257:17" pos:end="257:20"><name pos:start="257:17" pos:end="257:20">is64</name></expr>)</condition> <block pos:start="257:23" pos:end="303:13">{<block_content pos:start="259:17" pos:end="301:39">

                <decl_stmt pos:start="259:17" pos:end="259:31"><decl pos:start="259:17" pos:end="259:30"><type pos:start="259:17" pos:end="259:24"><name pos:start="259:17" pos:end="259:24">TCGv_i64</name></type> <name pos:start="259:26" pos:end="259:30">tmp64</name></decl>;</decl_stmt>

                <decl_stmt pos:start="261:17" pos:end="261:29"><decl pos:start="261:17" pos:end="261:28"><type pos:start="261:17" pos:end="261:24"><name pos:start="261:17" pos:end="261:24">TCGv_i32</name></type> <name pos:start="261:26" pos:end="261:28">tmp</name></decl>;</decl_stmt>

                <if_stmt pos:start="263:17" pos:end="285:17"><if pos:start="263:17" pos:end="267:17">if <condition pos:start="263:20" pos:end="263:44">(<expr pos:start="263:21" pos:end="263:43"><name pos:start="263:21" pos:end="263:28"><name pos:start="263:21" pos:end="263:22">ri</name><operator pos:start="263:23" pos:end="263:24">-&gt;</operator><name pos:start="263:25" pos:end="263:28">type</name></name> <operator pos:start="263:30" pos:end="263:30">&amp;</operator> <name pos:start="263:32" pos:end="263:43">ARM_CP_CONST</name></expr>)</condition> <block pos:start="263:46" pos:end="267:17">{<block_content pos:start="265:21" pos:end="265:58">

                    <expr_stmt pos:start="265:21" pos:end="265:58"><expr pos:start="265:21" pos:end="265:57"><name pos:start="265:21" pos:end="265:25">tmp64</name> <operator pos:start="265:27" pos:end="265:27">=</operator> <call pos:start="265:29" pos:end="265:57"><name pos:start="265:29" pos:end="265:41">tcg_const_i64</name><argument_list pos:start="265:42" pos:end="265:57">(<argument pos:start="265:43" pos:end="265:56"><expr pos:start="265:43" pos:end="265:56"><name pos:start="265:43" pos:end="265:56"><name pos:start="265:43" pos:end="265:44">ri</name><operator pos:start="265:45" pos:end="265:46">-&gt;</operator><name pos:start="265:47" pos:end="265:56">resetvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="267:19" pos:end="279:17">else if <condition pos:start="267:27" pos:end="267:38">(<expr pos:start="267:28" pos:end="267:37"><name pos:start="267:28" pos:end="267:37"><name pos:start="267:28" pos:end="267:29">ri</name><operator pos:start="267:30" pos:end="267:31">-&gt;</operator><name pos:start="267:32" pos:end="267:37">readfn</name></name></expr>)</condition> <block pos:start="267:40" pos:end="279:17">{<block_content pos:start="269:21" pos:end="277:46">

                    <decl_stmt pos:start="269:21" pos:end="269:36"><decl pos:start="269:21" pos:end="269:35"><type pos:start="269:21" pos:end="269:28"><name pos:start="269:21" pos:end="269:28">TCGv_ptr</name></type> <name pos:start="269:30" pos:end="269:35">tmpptr</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="271:21" pos:end="271:47"><expr pos:start="271:21" pos:end="271:46"><name pos:start="271:21" pos:end="271:25">tmp64</name> <operator pos:start="271:27" pos:end="271:27">=</operator> <call pos:start="271:29" pos:end="271:46"><name pos:start="271:29" pos:end="271:44">tcg_temp_new_i64</name><argument_list pos:start="271:45" pos:end="271:46">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="273:21" pos:end="273:47"><expr pos:start="273:21" pos:end="273:46"><name pos:start="273:21" pos:end="273:26">tmpptr</name> <operator pos:start="273:28" pos:end="273:28">=</operator> <call pos:start="273:30" pos:end="273:46"><name pos:start="273:30" pos:end="273:42">tcg_const_ptr</name><argument_list pos:start="273:43" pos:end="273:46">(<argument pos:start="273:44" pos:end="273:45"><expr pos:start="273:44" pos:end="273:45"><name pos:start="273:44" pos:end="273:45">ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="275:21" pos:end="275:68"><expr pos:start="275:21" pos:end="275:67"><call pos:start="275:21" pos:end="275:67"><name pos:start="275:21" pos:end="275:43">gen_helper_get_cp_reg64</name><argument_list pos:start="275:44" pos:end="275:67">(<argument pos:start="275:45" pos:end="275:49"><expr pos:start="275:45" pos:end="275:49"><name pos:start="275:45" pos:end="275:49">tmp64</name></expr></argument>, <argument pos:start="275:52" pos:end="275:58"><expr pos:start="275:52" pos:end="275:58"><name pos:start="275:52" pos:end="275:58">cpu_env</name></expr></argument>, <argument pos:start="275:61" pos:end="275:66"><expr pos:start="275:61" pos:end="275:66"><name pos:start="275:61" pos:end="275:66">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="277:21" pos:end="277:46"><expr pos:start="277:21" pos:end="277:45"><call pos:start="277:21" pos:end="277:45"><name pos:start="277:21" pos:end="277:37">tcg_temp_free_ptr</name><argument_list pos:start="277:38" pos:end="277:45">(<argument pos:start="277:39" pos:end="277:44"><expr pos:start="277:39" pos:end="277:44"><name pos:start="277:39" pos:end="277:44">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="279:19" pos:end="285:17">else <block pos:start="279:24" pos:end="285:17">{<block_content pos:start="281:21" pos:end="283:68">

                    <expr_stmt pos:start="281:21" pos:end="281:47"><expr pos:start="281:21" pos:end="281:46"><name pos:start="281:21" pos:end="281:25">tmp64</name> <operator pos:start="281:27" pos:end="281:27">=</operator> <call pos:start="281:29" pos:end="281:46"><name pos:start="281:29" pos:end="281:44">tcg_temp_new_i64</name><argument_list pos:start="281:45" pos:end="281:46">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="283:21" pos:end="283:68"><expr pos:start="283:21" pos:end="283:67"><call pos:start="283:21" pos:end="283:67"><name pos:start="283:21" pos:end="283:34">tcg_gen_ld_i64</name><argument_list pos:start="283:35" pos:end="283:67">(<argument pos:start="283:36" pos:end="283:40"><expr pos:start="283:36" pos:end="283:40"><name pos:start="283:36" pos:end="283:40">tmp64</name></expr></argument>, <argument pos:start="283:43" pos:end="283:49"><expr pos:start="283:43" pos:end="283:49"><name pos:start="283:43" pos:end="283:49">cpu_env</name></expr></argument>, <argument pos:start="283:52" pos:end="283:66"><expr pos:start="283:52" pos:end="283:66"><name pos:start="283:52" pos:end="283:66"><name pos:start="283:52" pos:end="283:53">ri</name><operator pos:start="283:54" pos:end="283:55">-&gt;</operator><name pos:start="283:56" pos:end="283:66">fieldoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="287:17" pos:end="287:41"><expr pos:start="287:17" pos:end="287:40"><name pos:start="287:17" pos:end="287:19">tmp</name> <operator pos:start="287:21" pos:end="287:21">=</operator> <call pos:start="287:23" pos:end="287:40"><name pos:start="287:23" pos:end="287:38">tcg_temp_new_i32</name><argument_list pos:start="287:39" pos:end="287:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="289:17" pos:end="289:50"><expr pos:start="289:17" pos:end="289:49"><call pos:start="289:17" pos:end="289:49"><name pos:start="289:17" pos:end="289:37">tcg_gen_trunc_i64_i32</name><argument_list pos:start="289:38" pos:end="289:49">(<argument pos:start="289:39" pos:end="289:41"><expr pos:start="289:39" pos:end="289:41"><name pos:start="289:39" pos:end="289:41">tmp</name></expr></argument>, <argument pos:start="289:44" pos:end="289:48"><expr pos:start="289:44" pos:end="289:48"><name pos:start="289:44" pos:end="289:48">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="291:17" pos:end="291:38"><expr pos:start="291:17" pos:end="291:37"><call pos:start="291:17" pos:end="291:37"><name pos:start="291:17" pos:end="291:25">store_reg</name><argument_list pos:start="291:26" pos:end="291:37">(<argument pos:start="291:27" pos:end="291:27"><expr pos:start="291:27" pos:end="291:27"><name pos:start="291:27" pos:end="291:27">s</name></expr></argument>, <argument pos:start="291:30" pos:end="291:31"><expr pos:start="291:30" pos:end="291:31"><name pos:start="291:30" pos:end="291:31">rt</name></expr></argument>, <argument pos:start="291:34" pos:end="291:36"><expr pos:start="291:34" pos:end="291:36"><name pos:start="291:34" pos:end="291:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="293:17" pos:end="293:51"><expr pos:start="293:17" pos:end="293:50"><call pos:start="293:17" pos:end="293:50"><name pos:start="293:17" pos:end="293:32">tcg_gen_shri_i64</name><argument_list pos:start="293:33" pos:end="293:50">(<argument pos:start="293:34" pos:end="293:38"><expr pos:start="293:34" pos:end="293:38"><name pos:start="293:34" pos:end="293:38">tmp64</name></expr></argument>, <argument pos:start="293:41" pos:end="293:45"><expr pos:start="293:41" pos:end="293:45"><name pos:start="293:41" pos:end="293:45">tmp64</name></expr></argument>, <argument pos:start="293:48" pos:end="293:49"><expr pos:start="293:48" pos:end="293:49"><literal type="number" pos:start="293:48" pos:end="293:49">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="295:17" pos:end="295:41"><expr pos:start="295:17" pos:end="295:40"><name pos:start="295:17" pos:end="295:19">tmp</name> <operator pos:start="295:21" pos:end="295:21">=</operator> <call pos:start="295:23" pos:end="295:40"><name pos:start="295:23" pos:end="295:38">tcg_temp_new_i32</name><argument_list pos:start="295:39" pos:end="295:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="297:17" pos:end="297:50"><expr pos:start="297:17" pos:end="297:49"><call pos:start="297:17" pos:end="297:49"><name pos:start="297:17" pos:end="297:37">tcg_gen_trunc_i64_i32</name><argument_list pos:start="297:38" pos:end="297:49">(<argument pos:start="297:39" pos:end="297:41"><expr pos:start="297:39" pos:end="297:41"><name pos:start="297:39" pos:end="297:41">tmp</name></expr></argument>, <argument pos:start="297:44" pos:end="297:48"><expr pos:start="297:44" pos:end="297:48"><name pos:start="297:44" pos:end="297:48">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="299:17" pos:end="299:41"><expr pos:start="299:17" pos:end="299:40"><call pos:start="299:17" pos:end="299:40"><name pos:start="299:17" pos:end="299:33">tcg_temp_free_i64</name><argument_list pos:start="299:34" pos:end="299:40">(<argument pos:start="299:35" pos:end="299:39"><expr pos:start="299:35" pos:end="299:39"><name pos:start="299:35" pos:end="299:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="301:17" pos:end="301:39"><expr pos:start="301:17" pos:end="301:38"><call pos:start="301:17" pos:end="301:38"><name pos:start="301:17" pos:end="301:25">store_reg</name><argument_list pos:start="301:26" pos:end="301:38">(<argument pos:start="301:27" pos:end="301:27"><expr pos:start="301:27" pos:end="301:27"><name pos:start="301:27" pos:end="301:27">s</name></expr></argument>, <argument pos:start="301:30" pos:end="301:32"><expr pos:start="301:30" pos:end="301:32"><name pos:start="301:30" pos:end="301:32">rt2</name></expr></argument>, <argument pos:start="301:35" pos:end="301:37"><expr pos:start="301:35" pos:end="301:37"><name pos:start="301:35" pos:end="301:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="303:15" pos:end="347:13">else <block pos:start="303:20" pos:end="347:13">{<block_content pos:start="305:17" pos:end="345:17">

                <decl_stmt pos:start="305:17" pos:end="305:29"><decl pos:start="305:17" pos:end="305:28"><type pos:start="305:17" pos:end="305:24"><name pos:start="305:17" pos:end="305:24">TCGv_i32</name></type> <name pos:start="305:26" pos:end="305:28">tmp</name></decl>;</decl_stmt>

                <if_stmt pos:start="307:17" pos:end="327:17"><if pos:start="307:17" pos:end="311:17">if <condition pos:start="307:20" pos:end="307:44">(<expr pos:start="307:21" pos:end="307:43"><name pos:start="307:21" pos:end="307:28"><name pos:start="307:21" pos:end="307:22">ri</name><operator pos:start="307:23" pos:end="307:24">-&gt;</operator><name pos:start="307:25" pos:end="307:28">type</name></name> <operator pos:start="307:30" pos:end="307:30">&amp;</operator> <name pos:start="307:32" pos:end="307:43">ARM_CP_CONST</name></expr>)</condition> <block pos:start="307:46" pos:end="311:17">{<block_content pos:start="309:21" pos:end="309:56">

                    <expr_stmt pos:start="309:21" pos:end="309:56"><expr pos:start="309:21" pos:end="309:55"><name pos:start="309:21" pos:end="309:23">tmp</name> <operator pos:start="309:25" pos:end="309:25">=</operator> <call pos:start="309:27" pos:end="309:55"><name pos:start="309:27" pos:end="309:39">tcg_const_i32</name><argument_list pos:start="309:40" pos:end="309:55">(<argument pos:start="309:41" pos:end="309:54"><expr pos:start="309:41" pos:end="309:54"><name pos:start="309:41" pos:end="309:54"><name pos:start="309:41" pos:end="309:42">ri</name><operator pos:start="309:43" pos:end="309:44">-&gt;</operator><name pos:start="309:45" pos:end="309:54">resetvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="311:19" pos:end="323:17">else if <condition pos:start="311:27" pos:end="311:38">(<expr pos:start="311:28" pos:end="311:37"><name pos:start="311:28" pos:end="311:37"><name pos:start="311:28" pos:end="311:29">ri</name><operator pos:start="311:30" pos:end="311:31">-&gt;</operator><name pos:start="311:32" pos:end="311:37">readfn</name></name></expr>)</condition> <block pos:start="311:40" pos:end="323:17">{<block_content pos:start="313:21" pos:end="321:46">

                    <decl_stmt pos:start="313:21" pos:end="313:36"><decl pos:start="313:21" pos:end="313:35"><type pos:start="313:21" pos:end="313:28"><name pos:start="313:21" pos:end="313:28">TCGv_ptr</name></type> <name pos:start="313:30" pos:end="313:35">tmpptr</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="315:21" pos:end="315:45"><expr pos:start="315:21" pos:end="315:44"><name pos:start="315:21" pos:end="315:23">tmp</name> <operator pos:start="315:25" pos:end="315:25">=</operator> <call pos:start="315:27" pos:end="315:44"><name pos:start="315:27" pos:end="315:42">tcg_temp_new_i32</name><argument_list pos:start="315:43" pos:end="315:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="317:21" pos:end="317:47"><expr pos:start="317:21" pos:end="317:46"><name pos:start="317:21" pos:end="317:26">tmpptr</name> <operator pos:start="317:28" pos:end="317:28">=</operator> <call pos:start="317:30" pos:end="317:46"><name pos:start="317:30" pos:end="317:42">tcg_const_ptr</name><argument_list pos:start="317:43" pos:end="317:46">(<argument pos:start="317:44" pos:end="317:45"><expr pos:start="317:44" pos:end="317:45"><name pos:start="317:44" pos:end="317:45">ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="319:21" pos:end="319:64"><expr pos:start="319:21" pos:end="319:63"><call pos:start="319:21" pos:end="319:63"><name pos:start="319:21" pos:end="319:41">gen_helper_get_cp_reg</name><argument_list pos:start="319:42" pos:end="319:63">(<argument pos:start="319:43" pos:end="319:45"><expr pos:start="319:43" pos:end="319:45"><name pos:start="319:43" pos:end="319:45">tmp</name></expr></argument>, <argument pos:start="319:48" pos:end="319:54"><expr pos:start="319:48" pos:end="319:54"><name pos:start="319:48" pos:end="319:54">cpu_env</name></expr></argument>, <argument pos:start="319:57" pos:end="319:62"><expr pos:start="319:57" pos:end="319:62"><name pos:start="319:57" pos:end="319:62">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="321:21" pos:end="321:46"><expr pos:start="321:21" pos:end="321:45"><call pos:start="321:21" pos:end="321:45"><name pos:start="321:21" pos:end="321:37">tcg_temp_free_ptr</name><argument_list pos:start="321:38" pos:end="321:45">(<argument pos:start="321:39" pos:end="321:44"><expr pos:start="321:39" pos:end="321:44"><name pos:start="321:39" pos:end="321:44">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="323:19" pos:end="327:17">else <block pos:start="323:24" pos:end="327:17">{<block_content pos:start="325:21" pos:end="325:59">

                    <expr_stmt pos:start="325:21" pos:end="325:59"><expr pos:start="325:21" pos:end="325:58"><name pos:start="325:21" pos:end="325:23">tmp</name> <operator pos:start="325:25" pos:end="325:25">=</operator> <call pos:start="325:27" pos:end="325:58"><name pos:start="325:27" pos:end="325:41">load_cpu_offset</name><argument_list pos:start="325:42" pos:end="325:58">(<argument pos:start="325:43" pos:end="325:57"><expr pos:start="325:43" pos:end="325:57"><name pos:start="325:43" pos:end="325:57"><name pos:start="325:43" pos:end="325:44">ri</name><operator pos:start="325:45" pos:end="325:46">-&gt;</operator><name pos:start="325:47" pos:end="325:57">fieldoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="329:17" pos:end="345:17"><if pos:start="329:17" pos:end="341:17">if <condition pos:start="329:20" pos:end="329:29">(<expr pos:start="329:21" pos:end="329:28"><name pos:start="329:21" pos:end="329:22">rt</name> <operator pos:start="329:24" pos:end="329:25">==</operator> <literal type="number" pos:start="329:27" pos:end="329:28">15</literal></expr>)</condition> <block pos:start="329:31" pos:end="341:17">{<block_content pos:start="337:21" pos:end="339:43">

                    <comment type="block" pos:start="331:21" pos:end="335:23">/* Destination register of r15 for 32 bit loads sets

                     * the condition codes from the high 4 bits of the value

                     */</comment>

                    <expr_stmt pos:start="337:21" pos:end="337:38"><expr pos:start="337:21" pos:end="337:37"><call pos:start="337:21" pos:end="337:37"><name pos:start="337:21" pos:end="337:32">gen_set_nzcv</name><argument_list pos:start="337:33" pos:end="337:37">(<argument pos:start="337:34" pos:end="337:36"><expr pos:start="337:34" pos:end="337:36"><name pos:start="337:34" pos:end="337:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="339:21" pos:end="339:43"><expr pos:start="339:21" pos:end="339:42"><call pos:start="339:21" pos:end="339:42"><name pos:start="339:21" pos:end="339:37">tcg_temp_free_i32</name><argument_list pos:start="339:38" pos:end="339:42">(<argument pos:start="339:39" pos:end="339:41"><expr pos:start="339:39" pos:end="339:41"><name pos:start="339:39" pos:end="339:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="341:19" pos:end="345:17">else <block pos:start="341:24" pos:end="345:17">{<block_content pos:start="343:21" pos:end="343:42">

                    <expr_stmt pos:start="343:21" pos:end="343:42"><expr pos:start="343:21" pos:end="343:41"><call pos:start="343:21" pos:end="343:41"><name pos:start="343:21" pos:end="343:29">store_reg</name><argument_list pos:start="343:30" pos:end="343:41">(<argument pos:start="343:31" pos:end="343:31"><expr pos:start="343:31" pos:end="343:31"><name pos:start="343:31" pos:end="343:31">s</name></expr></argument>, <argument pos:start="343:34" pos:end="343:35"><expr pos:start="343:34" pos:end="343:35"><name pos:start="343:34" pos:end="343:35">rt</name></expr></argument>, <argument pos:start="343:38" pos:end="343:40"><expr pos:start="343:38" pos:end="343:40"><name pos:start="343:38" pos:end="343:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="349:11" pos:end="423:9">else <block pos:start="349:16" pos:end="423:9">{<block_content pos:start="353:13" pos:end="421:13">

            <comment type="block" pos:start="351:13" pos:end="351:23">/* Write */</comment>

            <if_stmt pos:start="353:13" pos:end="359:13"><if pos:start="353:13" pos:end="359:13">if <condition pos:start="353:16" pos:end="353:40">(<expr pos:start="353:17" pos:end="353:39"><name pos:start="353:17" pos:end="353:24"><name pos:start="353:17" pos:end="353:18">ri</name><operator pos:start="353:19" pos:end="353:20">-&gt;</operator><name pos:start="353:21" pos:end="353:24">type</name></name> <operator pos:start="353:26" pos:end="353:26">&amp;</operator> <name pos:start="353:28" pos:end="353:39">ARM_CP_CONST</name></expr>)</condition> <block pos:start="353:42" pos:end="359:13">{<block_content pos:start="357:17" pos:end="357:25">

                <comment type="block" pos:start="355:17" pos:end="355:73">/* If not forbidden by access permissions, treat as WI */</comment>

                <return pos:start="357:17" pos:end="357:25">return <expr pos:start="357:24" pos:end="357:24"><literal type="number" pos:start="357:24" pos:end="357:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="363:13" pos:end="421:13"><if pos:start="363:13" pos:end="395:13">if <condition pos:start="363:16" pos:end="363:21">(<expr pos:start="363:17" pos:end="363:20"><name pos:start="363:17" pos:end="363:20">is64</name></expr>)</condition> <block pos:start="363:23" pos:end="395:13">{<block_content pos:start="365:17" pos:end="393:41">

                <decl_stmt pos:start="365:17" pos:end="365:38"><decl pos:start="365:17" pos:end="365:30"><type pos:start="365:17" pos:end="365:24"><name pos:start="365:17" pos:end="365:24">TCGv_i32</name></type> <name pos:start="365:26" pos:end="365:30">tmplo</name></decl>, <decl pos:start="365:33" pos:end="365:37"><type ref="prev" pos:start="365:17" pos:end="365:24"/><name pos:start="365:33" pos:end="365:37">tmphi</name></decl>;</decl_stmt>

                <decl_stmt pos:start="367:17" pos:end="367:52"><decl pos:start="367:17" pos:end="367:51"><type pos:start="367:17" pos:end="367:24"><name pos:start="367:17" pos:end="367:24">TCGv_i64</name></type> <name pos:start="367:26" pos:end="367:30">tmp64</name> <init pos:start="367:32" pos:end="367:51">= <expr pos:start="367:34" pos:end="367:51"><call pos:start="367:34" pos:end="367:51"><name pos:start="367:34" pos:end="367:49">tcg_temp_new_i64</name><argument_list pos:start="367:50" pos:end="367:51">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="369:17" pos:end="369:40"><expr pos:start="369:17" pos:end="369:39"><name pos:start="369:17" pos:end="369:21">tmplo</name> <operator pos:start="369:23" pos:end="369:23">=</operator> <call pos:start="369:25" pos:end="369:39"><name pos:start="369:25" pos:end="369:32">load_reg</name><argument_list pos:start="369:33" pos:end="369:39">(<argument pos:start="369:34" pos:end="369:34"><expr pos:start="369:34" pos:end="369:34"><name pos:start="369:34" pos:end="369:34">s</name></expr></argument>, <argument pos:start="369:37" pos:end="369:38"><expr pos:start="369:37" pos:end="369:38"><name pos:start="369:37" pos:end="369:38">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="371:17" pos:end="371:41"><expr pos:start="371:17" pos:end="371:40"><name pos:start="371:17" pos:end="371:21">tmphi</name> <operator pos:start="371:23" pos:end="371:23">=</operator> <call pos:start="371:25" pos:end="371:40"><name pos:start="371:25" pos:end="371:32">load_reg</name><argument_list pos:start="371:33" pos:end="371:40">(<argument pos:start="371:34" pos:end="371:34"><expr pos:start="371:34" pos:end="371:34"><name pos:start="371:34" pos:end="371:34">s</name></expr></argument>, <argument pos:start="371:37" pos:end="371:39"><expr pos:start="371:37" pos:end="371:39"><name pos:start="371:37" pos:end="371:39">rt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="373:17" pos:end="373:60"><expr pos:start="373:17" pos:end="373:59"><call pos:start="373:17" pos:end="373:59"><name pos:start="373:17" pos:end="373:38">tcg_gen_concat_i32_i64</name><argument_list pos:start="373:39" pos:end="373:59">(<argument pos:start="373:40" pos:end="373:44"><expr pos:start="373:40" pos:end="373:44"><name pos:start="373:40" pos:end="373:44">tmp64</name></expr></argument>, <argument pos:start="373:47" pos:end="373:51"><expr pos:start="373:47" pos:end="373:51"><name pos:start="373:47" pos:end="373:51">tmplo</name></expr></argument>, <argument pos:start="373:54" pos:end="373:58"><expr pos:start="373:54" pos:end="373:58"><name pos:start="373:54" pos:end="373:58">tmphi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:41"><expr pos:start="375:17" pos:end="375:40"><call pos:start="375:17" pos:end="375:40"><name pos:start="375:17" pos:end="375:33">tcg_temp_free_i32</name><argument_list pos:start="375:34" pos:end="375:40">(<argument pos:start="375:35" pos:end="375:39"><expr pos:start="375:35" pos:end="375:39"><name pos:start="375:35" pos:end="375:39">tmplo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:41"><expr pos:start="377:17" pos:end="377:40"><call pos:start="377:17" pos:end="377:40"><name pos:start="377:17" pos:end="377:33">tcg_temp_free_i32</name><argument_list pos:start="377:34" pos:end="377:40">(<argument pos:start="377:35" pos:end="377:39"><expr pos:start="377:35" pos:end="377:39"><name pos:start="377:35" pos:end="377:39">tmphi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="379:17" pos:end="391:17"><if pos:start="379:17" pos:end="387:17">if <condition pos:start="379:20" pos:end="379:32">(<expr pos:start="379:21" pos:end="379:31"><name pos:start="379:21" pos:end="379:31"><name pos:start="379:21" pos:end="379:22">ri</name><operator pos:start="379:23" pos:end="379:24">-&gt;</operator><name pos:start="379:25" pos:end="379:31">writefn</name></name></expr>)</condition> <block pos:start="379:34" pos:end="387:17">{<block_content pos:start="381:21" pos:end="385:46">

                    <decl_stmt pos:start="381:21" pos:end="381:56"><decl pos:start="381:21" pos:end="381:55"><type pos:start="381:21" pos:end="381:28"><name pos:start="381:21" pos:end="381:28">TCGv_ptr</name></type> <name pos:start="381:30" pos:end="381:35">tmpptr</name> <init pos:start="381:37" pos:end="381:55">= <expr pos:start="381:39" pos:end="381:55"><call pos:start="381:39" pos:end="381:55"><name pos:start="381:39" pos:end="381:51">tcg_const_ptr</name><argument_list pos:start="381:52" pos:end="381:55">(<argument pos:start="381:53" pos:end="381:54"><expr pos:start="381:53" pos:end="381:54"><name pos:start="381:53" pos:end="381:54">ri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="383:21" pos:end="383:68"><expr pos:start="383:21" pos:end="383:67"><call pos:start="383:21" pos:end="383:67"><name pos:start="383:21" pos:end="383:43">gen_helper_set_cp_reg64</name><argument_list pos:start="383:44" pos:end="383:67">(<argument pos:start="383:45" pos:end="383:51"><expr pos:start="383:45" pos:end="383:51"><name pos:start="383:45" pos:end="383:51">cpu_env</name></expr></argument>, <argument pos:start="383:54" pos:end="383:59"><expr pos:start="383:54" pos:end="383:59"><name pos:start="383:54" pos:end="383:59">tmpptr</name></expr></argument>, <argument pos:start="383:62" pos:end="383:66"><expr pos:start="383:62" pos:end="383:66"><name pos:start="383:62" pos:end="383:66">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="385:21" pos:end="385:46"><expr pos:start="385:21" pos:end="385:45"><call pos:start="385:21" pos:end="385:45"><name pos:start="385:21" pos:end="385:37">tcg_temp_free_ptr</name><argument_list pos:start="385:38" pos:end="385:45">(<argument pos:start="385:39" pos:end="385:44"><expr pos:start="385:39" pos:end="385:44"><name pos:start="385:39" pos:end="385:44">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="387:19" pos:end="391:17">else <block pos:start="387:24" pos:end="391:17">{<block_content pos:start="389:21" pos:end="389:68">

                    <expr_stmt pos:start="389:21" pos:end="389:68"><expr pos:start="389:21" pos:end="389:67"><call pos:start="389:21" pos:end="389:67"><name pos:start="389:21" pos:end="389:34">tcg_gen_st_i64</name><argument_list pos:start="389:35" pos:end="389:67">(<argument pos:start="389:36" pos:end="389:40"><expr pos:start="389:36" pos:end="389:40"><name pos:start="389:36" pos:end="389:40">tmp64</name></expr></argument>, <argument pos:start="389:43" pos:end="389:49"><expr pos:start="389:43" pos:end="389:49"><name pos:start="389:43" pos:end="389:49">cpu_env</name></expr></argument>, <argument pos:start="389:52" pos:end="389:66"><expr pos:start="389:52" pos:end="389:66"><name pos:start="389:52" pos:end="389:66"><name pos:start="389:52" pos:end="389:53">ri</name><operator pos:start="389:54" pos:end="389:55">-&gt;</operator><name pos:start="389:56" pos:end="389:66">fieldoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="393:17" pos:end="393:41"><expr pos:start="393:17" pos:end="393:40"><call pos:start="393:17" pos:end="393:40"><name pos:start="393:17" pos:end="393:33">tcg_temp_free_i64</name><argument_list pos:start="393:34" pos:end="393:40">(<argument pos:start="393:35" pos:end="393:39"><expr pos:start="393:35" pos:end="393:39"><name pos:start="393:35" pos:end="393:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="395:15" pos:end="421:13">else <block pos:start="395:20" pos:end="421:13">{<block_content pos:start="397:17" pos:end="419:17">

                <if_stmt pos:start="397:17" pos:end="419:17"><if pos:start="397:17" pos:end="413:17">if <condition pos:start="397:20" pos:end="397:32">(<expr pos:start="397:21" pos:end="397:31"><name pos:start="397:21" pos:end="397:31"><name pos:start="397:21" pos:end="397:22">ri</name><operator pos:start="397:23" pos:end="397:24">-&gt;</operator><name pos:start="397:25" pos:end="397:31">writefn</name></name></expr>)</condition> <block pos:start="397:34" pos:end="413:17">{<block_content pos:start="399:21" pos:end="411:43">

                    <decl_stmt pos:start="399:21" pos:end="399:33"><decl pos:start="399:21" pos:end="399:32"><type pos:start="399:21" pos:end="399:28"><name pos:start="399:21" pos:end="399:28">TCGv_i32</name></type> <name pos:start="399:30" pos:end="399:32">tmp</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="401:21" pos:end="401:36"><decl pos:start="401:21" pos:end="401:35"><type pos:start="401:21" pos:end="401:28"><name pos:start="401:21" pos:end="401:28">TCGv_ptr</name></type> <name pos:start="401:30" pos:end="401:35">tmpptr</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="403:21" pos:end="403:42"><expr pos:start="403:21" pos:end="403:41"><name pos:start="403:21" pos:end="403:23">tmp</name> <operator pos:start="403:25" pos:end="403:25">=</operator> <call pos:start="403:27" pos:end="403:41"><name pos:start="403:27" pos:end="403:34">load_reg</name><argument_list pos:start="403:35" pos:end="403:41">(<argument pos:start="403:36" pos:end="403:36"><expr pos:start="403:36" pos:end="403:36"><name pos:start="403:36" pos:end="403:36">s</name></expr></argument>, <argument pos:start="403:39" pos:end="403:40"><expr pos:start="403:39" pos:end="403:40"><name pos:start="403:39" pos:end="403:40">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="405:21" pos:end="405:47"><expr pos:start="405:21" pos:end="405:46"><name pos:start="405:21" pos:end="405:26">tmpptr</name> <operator pos:start="405:28" pos:end="405:28">=</operator> <call pos:start="405:30" pos:end="405:46"><name pos:start="405:30" pos:end="405:42">tcg_const_ptr</name><argument_list pos:start="405:43" pos:end="405:46">(<argument pos:start="405:44" pos:end="405:45"><expr pos:start="405:44" pos:end="405:45"><name pos:start="405:44" pos:end="405:45">ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="407:21" pos:end="407:64"><expr pos:start="407:21" pos:end="407:63"><call pos:start="407:21" pos:end="407:63"><name pos:start="407:21" pos:end="407:41">gen_helper_set_cp_reg</name><argument_list pos:start="407:42" pos:end="407:63">(<argument pos:start="407:43" pos:end="407:49"><expr pos:start="407:43" pos:end="407:49"><name pos:start="407:43" pos:end="407:49">cpu_env</name></expr></argument>, <argument pos:start="407:52" pos:end="407:57"><expr pos:start="407:52" pos:end="407:57"><name pos:start="407:52" pos:end="407:57">tmpptr</name></expr></argument>, <argument pos:start="407:60" pos:end="407:62"><expr pos:start="407:60" pos:end="407:62"><name pos:start="407:60" pos:end="407:62">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="409:21" pos:end="409:46"><expr pos:start="409:21" pos:end="409:45"><call pos:start="409:21" pos:end="409:45"><name pos:start="409:21" pos:end="409:37">tcg_temp_free_ptr</name><argument_list pos:start="409:38" pos:end="409:45">(<argument pos:start="409:39" pos:end="409:44"><expr pos:start="409:39" pos:end="409:44"><name pos:start="409:39" pos:end="409:44">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="411:21" pos:end="411:43"><expr pos:start="411:21" pos:end="411:42"><call pos:start="411:21" pos:end="411:42"><name pos:start="411:21" pos:end="411:37">tcg_temp_free_i32</name><argument_list pos:start="411:38" pos:end="411:42">(<argument pos:start="411:39" pos:end="411:41"><expr pos:start="411:39" pos:end="411:41"><name pos:start="411:39" pos:end="411:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="413:19" pos:end="419:17">else <block pos:start="413:24" pos:end="419:17">{<block_content pos:start="415:21" pos:end="417:59">

                    <decl_stmt pos:start="415:21" pos:end="415:51"><decl pos:start="415:21" pos:end="415:50"><type pos:start="415:21" pos:end="415:28"><name pos:start="415:21" pos:end="415:28">TCGv_i32</name></type> <name pos:start="415:30" pos:end="415:32">tmp</name> <init pos:start="415:34" pos:end="415:50">= <expr pos:start="415:36" pos:end="415:50"><call pos:start="415:36" pos:end="415:50"><name pos:start="415:36" pos:end="415:43">load_reg</name><argument_list pos:start="415:44" pos:end="415:50">(<argument pos:start="415:45" pos:end="415:45"><expr pos:start="415:45" pos:end="415:45"><name pos:start="415:45" pos:end="415:45">s</name></expr></argument>, <argument pos:start="415:48" pos:end="415:49"><expr pos:start="415:48" pos:end="415:49"><name pos:start="415:48" pos:end="415:49">rt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="417:21" pos:end="417:59"><expr pos:start="417:21" pos:end="417:58"><call pos:start="417:21" pos:end="417:58"><name pos:start="417:21" pos:end="417:36">store_cpu_offset</name><argument_list pos:start="417:37" pos:end="417:58">(<argument pos:start="417:38" pos:end="417:40"><expr pos:start="417:38" pos:end="417:40"><name pos:start="417:38" pos:end="417:40">tmp</name></expr></argument>, <argument pos:start="417:43" pos:end="417:57"><expr pos:start="417:43" pos:end="417:57"><name pos:start="417:43" pos:end="417:57"><name pos:start="417:43" pos:end="417:44">ri</name><operator pos:start="417:45" pos:end="417:46">-&gt;</operator><name pos:start="417:47" pos:end="417:57">fieldoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="427:9" pos:end="447:9"><if pos:start="427:9" pos:end="435:9">if <condition pos:start="427:12" pos:end="427:49">(<expr pos:start="427:13" pos:end="427:48"><name pos:start="427:13" pos:end="427:22">use_icount</name> <operator pos:start="427:24" pos:end="427:25">&amp;&amp;</operator> <operator pos:start="427:27" pos:end="427:27">(</operator><name pos:start="427:28" pos:end="427:35"><name pos:start="427:28" pos:end="427:29">ri</name><operator pos:start="427:30" pos:end="427:31">-&gt;</operator><name pos:start="427:32" pos:end="427:35">type</name></name> <operator pos:start="427:37" pos:end="427:37">&amp;</operator> <name pos:start="427:39" pos:end="427:47">ARM_CP_IO</name><operator pos:start="427:48" pos:end="427:48">)</operator></expr>)</condition> <block pos:start="427:51" pos:end="435:9">{<block_content pos:start="431:13" pos:end="433:29">

            <comment type="block" pos:start="429:13" pos:end="429:77">/* I/O operations must end the TB here (whether read or write) */</comment>

            <expr_stmt pos:start="431:13" pos:end="431:25"><expr pos:start="431:13" pos:end="431:24"><call pos:start="431:13" pos:end="431:24"><name pos:start="431:13" pos:end="431:22">gen_io_end</name><argument_list pos:start="431:23" pos:end="431:24">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="433:13" pos:end="433:29"><expr pos:start="433:13" pos:end="433:28"><call pos:start="433:13" pos:end="433:28"><name pos:start="433:13" pos:end="433:25">gen_lookup_tb</name><argument_list pos:start="433:26" pos:end="433:28">(<argument pos:start="433:27" pos:end="433:27"><expr pos:start="433:27" pos:end="433:27"><name pos:start="433:27" pos:end="433:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="435:11" pos:end="447:9">else if <condition pos:start="435:19" pos:end="435:67">(<expr pos:start="435:20" pos:end="435:66"><operator pos:start="435:20" pos:end="435:20">!</operator><name pos:start="435:21" pos:end="435:26">isread</name> <operator pos:start="435:28" pos:end="435:29">&amp;&amp;</operator> <operator pos:start="435:31" pos:end="435:31">!</operator><operator pos:start="435:32" pos:end="435:32">(</operator><name pos:start="435:33" pos:end="435:40"><name pos:start="435:33" pos:end="435:34">ri</name><operator pos:start="435:35" pos:end="435:36">-&gt;</operator><name pos:start="435:37" pos:end="435:40">type</name></name> <operator pos:start="435:42" pos:end="435:42">&amp;</operator> <name pos:start="435:44" pos:end="435:65">ARM_CP_SUPPRESS_TB_END</name><operator pos:start="435:66" pos:end="435:66">)</operator></expr>)</condition> <block pos:start="435:69" pos:end="447:9">{<block_content pos:start="445:13" pos:end="445:29">

            <comment type="block" pos:start="437:13" pos:end="443:15">/* We default to ending the TB on a coprocessor register write,

             * but allow this to be suppressed by the register definition

             * (usually only necessary to work around guest bugs).

             */</comment>

            <expr_stmt pos:start="445:13" pos:end="445:29"><expr pos:start="445:13" pos:end="445:28"><call pos:start="445:13" pos:end="445:28"><name pos:start="445:13" pos:end="445:25">gen_lookup_tb</name><argument_list pos:start="445:26" pos:end="445:28">(<argument pos:start="445:27" pos:end="445:27"><expr pos:start="445:27" pos:end="445:27"><name pos:start="445:27" pos:end="445:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="451:9" pos:end="451:17">return <expr pos:start="451:16" pos:end="451:16"><literal type="number" pos:start="451:16" pos:end="451:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="457:5" pos:end="461:7">/* Unknown register; this might be a guest error or a QEMU

     * unimplemented feature.

     */</comment>

    <if_stmt pos:start="463:5" pos:end="487:5"><if pos:start="463:5" pos:end="475:5">if <condition pos:start="463:8" pos:end="463:13">(<expr pos:start="463:9" pos:end="463:12"><name pos:start="463:9" pos:end="463:12">is64</name></expr>)</condition> <block pos:start="463:15" pos:end="475:5">{<block_content pos:start="465:9" pos:end="473:55">

        <expr_stmt pos:start="465:9" pos:end="473:55"><expr pos:start="465:9" pos:end="473:54"><call pos:start="465:9" pos:end="473:54"><name pos:start="465:9" pos:end="465:21">qemu_log_mask</name><argument_list pos:start="465:22" pos:end="473:54">(<argument pos:start="465:23" pos:end="465:31"><expr pos:start="465:23" pos:end="465:31"><name pos:start="465:23" pos:end="465:31">LOG_UNIMP</name></expr></argument>, <argument pos:start="465:34" pos:end="469:30"><expr pos:start="465:34" pos:end="469:30"><literal type="string" pos:start="465:34" pos:end="465:68">"%s access to unsupported AArch32 "</literal>

                      <literal type="string" pos:start="467:23" pos:end="467:69">"64 bit system register cp:%d opc1: %d crm:%d "</literal>

                      <literal type="string" pos:start="469:23" pos:end="469:30">"(%s)\n"</literal></expr></argument>,

                      <argument pos:start="471:23" pos:end="471:47"><expr pos:start="471:23" pos:end="471:47"><ternary pos:start="471:23" pos:end="471:47"><condition pos:start="471:23" pos:end="471:30"><expr pos:start="471:23" pos:end="471:28"><name pos:start="471:23" pos:end="471:28">isread</name></expr> ?</condition><then pos:start="471:32" pos:end="471:37"> <expr pos:start="471:32" pos:end="471:37"><literal type="string" pos:start="471:32" pos:end="471:37">"read"</literal></expr> </then><else pos:start="471:39" pos:end="471:47">: <expr pos:start="471:41" pos:end="471:47"><literal type="string" pos:start="471:41" pos:end="471:47">"write"</literal></expr></else></ternary></expr></argument>, <argument pos:start="471:50" pos:end="471:54"><expr pos:start="471:50" pos:end="471:54"><name pos:start="471:50" pos:end="471:54">cpnum</name></expr></argument>, <argument pos:start="471:57" pos:end="471:60"><expr pos:start="471:57" pos:end="471:60"><name pos:start="471:57" pos:end="471:60">opc1</name></expr></argument>, <argument pos:start="471:63" pos:end="471:65"><expr pos:start="471:63" pos:end="471:65"><name pos:start="471:63" pos:end="471:65">crm</name></expr></argument>,

                      <argument pos:start="473:23" pos:end="473:53"><expr pos:start="473:23" pos:end="473:53"><ternary pos:start="473:23" pos:end="473:53"><condition pos:start="473:23" pos:end="473:29"><expr pos:start="473:23" pos:end="473:27"><name pos:start="473:23" pos:end="473:27"><name pos:start="473:23" pos:end="473:23">s</name><operator pos:start="473:24" pos:end="473:25">-&gt;</operator><name pos:start="473:26" pos:end="473:27">ns</name></name></expr> ?</condition><then pos:start="473:31" pos:end="473:42"> <expr pos:start="473:31" pos:end="473:42"><literal type="string" pos:start="473:31" pos:end="473:42">"non-secure"</literal></expr> </then><else pos:start="473:44" pos:end="473:53">: <expr pos:start="473:46" pos:end="473:53"><literal type="string" pos:start="473:46" pos:end="473:53">"secure"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="475:7" pos:end="487:5">else <block pos:start="475:12" pos:end="487:5">{<block_content pos:start="477:9" pos:end="485:55">

        <expr_stmt pos:start="477:9" pos:end="485:55"><expr pos:start="477:9" pos:end="485:54"><call pos:start="477:9" pos:end="485:54"><name pos:start="477:9" pos:end="477:21">qemu_log_mask</name><argument_list pos:start="477:22" pos:end="485:54">(<argument pos:start="477:23" pos:end="477:31"><expr pos:start="477:23" pos:end="477:31"><name pos:start="477:23" pos:end="477:31">LOG_UNIMP</name></expr></argument>, <argument pos:start="477:34" pos:end="481:30"><expr pos:start="477:34" pos:end="481:30"><literal type="string" pos:start="477:34" pos:end="477:68">"%s access to unsupported AArch32 "</literal>

                      <literal type="string" pos:start="479:23" pos:end="479:76">"system register cp:%d opc1:%d crn:%d crm:%d opc2:%d "</literal>

                      <literal type="string" pos:start="481:23" pos:end="481:30">"(%s)\n"</literal></expr></argument>,

                      <argument pos:start="483:23" pos:end="483:47"><expr pos:start="483:23" pos:end="483:47"><ternary pos:start="483:23" pos:end="483:47"><condition pos:start="483:23" pos:end="483:30"><expr pos:start="483:23" pos:end="483:28"><name pos:start="483:23" pos:end="483:28">isread</name></expr> ?</condition><then pos:start="483:32" pos:end="483:37"> <expr pos:start="483:32" pos:end="483:37"><literal type="string" pos:start="483:32" pos:end="483:37">"read"</literal></expr> </then><else pos:start="483:39" pos:end="483:47">: <expr pos:start="483:41" pos:end="483:47"><literal type="string" pos:start="483:41" pos:end="483:47">"write"</literal></expr></else></ternary></expr></argument>, <argument pos:start="483:50" pos:end="483:54"><expr pos:start="483:50" pos:end="483:54"><name pos:start="483:50" pos:end="483:54">cpnum</name></expr></argument>, <argument pos:start="483:57" pos:end="483:60"><expr pos:start="483:57" pos:end="483:60"><name pos:start="483:57" pos:end="483:60">opc1</name></expr></argument>, <argument pos:start="483:63" pos:end="483:65"><expr pos:start="483:63" pos:end="483:65"><name pos:start="483:63" pos:end="483:65">crn</name></expr></argument>, <argument pos:start="483:68" pos:end="483:70"><expr pos:start="483:68" pos:end="483:70"><name pos:start="483:68" pos:end="483:70">crm</name></expr></argument>, <argument pos:start="483:73" pos:end="483:76"><expr pos:start="483:73" pos:end="483:76"><name pos:start="483:73" pos:end="483:76">opc2</name></expr></argument>,

                      <argument pos:start="485:23" pos:end="485:53"><expr pos:start="485:23" pos:end="485:53"><ternary pos:start="485:23" pos:end="485:53"><condition pos:start="485:23" pos:end="485:29"><expr pos:start="485:23" pos:end="485:27"><name pos:start="485:23" pos:end="485:27"><name pos:start="485:23" pos:end="485:23">s</name><operator pos:start="485:24" pos:end="485:25">-&gt;</operator><name pos:start="485:26" pos:end="485:27">ns</name></name></expr> ?</condition><then pos:start="485:31" pos:end="485:42"> <expr pos:start="485:31" pos:end="485:42"><literal type="string" pos:start="485:31" pos:end="485:42">"non-secure"</literal></expr> </then><else pos:start="485:44" pos:end="485:53">: <expr pos:start="485:46" pos:end="485:53"><literal type="string" pos:start="485:46" pos:end="485:53">"secure"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="491:5" pos:end="491:13">return <expr pos:start="491:12" pos:end="491:12"><literal type="number" pos:start="491:12" pos:end="491:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
