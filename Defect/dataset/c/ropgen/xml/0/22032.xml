<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22032.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">atrac3_decode_frame</name><parameter_list pos:start="1:31" pos:end="5:28">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>,

            <parameter pos:start="3:13" pos:end="3:22"><decl pos:start="3:13" pos:end="3:22"><type pos:start="3:13" pos:end="3:22"><name pos:start="3:13" pos:end="3:16">void</name> <modifier pos:start="3:18" pos:end="3:18">*</modifier></type><name pos:start="3:19" pos:end="3:22">data</name></decl></parameter>, <parameter pos:start="3:25" pos:end="3:38"><decl pos:start="3:25" pos:end="3:38"><type pos:start="3:25" pos:end="3:38"><name pos:start="3:25" pos:end="3:27">int</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:38">data_size</name></decl></parameter>,

            <parameter pos:start="5:13" pos:end="5:27"><decl pos:start="5:13" pos:end="5:27"><type pos:start="5:13" pos:end="5:27"><name pos:start="5:13" pos:end="5:20">AVPacket</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:27">avpkt</name></decl></parameter>)</parameter_list> <block pos:start="5:30" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:30">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">ATRAC3Context</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">q</name> <init pos:start="11:22" pos:end="11:39">= <expr pos:start="11:24" pos:end="11:39"><name pos:start="11:24" pos:end="11:39"><name pos:start="11:24" pos:end="11:28">avctx</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">result</name> <init pos:start="13:16" pos:end="13:18">= <expr pos:start="13:18" pos:end="13:18"><literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:18"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name><modifier pos:start="15:18" pos:end="15:18">*</modifier></type> <name pos:start="15:20" pos:end="15:26">databuf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">float</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:18">samples</name> <init pos:start="17:20" pos:end="17:25">= <expr pos:start="17:22" pos:end="17:25"><name pos:start="17:22" pos:end="17:25">data</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:38">(<expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:16">buf_size</name> <operator pos:start="21:18" pos:end="21:18">&lt;</operator> <name pos:start="21:20" pos:end="21:37"><name pos:start="21:20" pos:end="21:24">avctx</name><operator pos:start="21:25" pos:end="21:26">-&gt;</operator><name pos:start="21:27" pos:end="21:37">block_align</name></name></expr>)</condition> <block pos:start="21:40" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:24">

        <expr_stmt pos:start="23:9" pos:end="25:74"><expr pos:start="23:9" pos:end="25:73"><call pos:start="23:9" pos:end="25:73"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="25:73">(<argument pos:start="23:16" pos:end="23:20"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">avctx</name></expr></argument>, <argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="25:16" pos:end="25:62"><expr pos:start="25:16" pos:end="25:62"><literal type="string" pos:start="25:16" pos:end="25:62">"Frame too small (%d bytes). Truncated file?\n"</literal></expr></argument>, <argument pos:start="25:65" pos:end="25:72"><expr pos:start="25:65" pos:end="25:72"><name pos:start="25:65" pos:end="25:72">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:23"><expr pos:start="27:9" pos:end="27:22"><operator pos:start="27:9" pos:end="27:9">*</operator><name pos:start="27:10" pos:end="27:18">data_size</name> <operator pos:start="27:20" pos:end="27:20">=</operator> <literal type="number" pos:start="27:22" pos:end="27:22">0</literal></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:24">return <expr pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:68">/* Check if we need to descramble and what buffer to pass on. */</comment>

    <if_stmt pos:start="37:5" pos:end="47:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:28">(<expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:9">q</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:27">scrambled_stream</name></name></expr>)</condition> <block pos:start="37:30" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:42">

        <expr_stmt pos:start="39:9" pos:end="39:71"><expr pos:start="39:9" pos:end="39:70"><call pos:start="39:9" pos:end="39:70"><name pos:start="39:9" pos:end="39:20">decode_bytes</name><argument_list pos:start="39:21" pos:end="39:70">(<argument pos:start="39:22" pos:end="39:24"><expr pos:start="39:22" pos:end="39:24"><name pos:start="39:22" pos:end="39:24">buf</name></expr></argument>, <argument pos:start="39:27" pos:end="39:49"><expr pos:start="39:27" pos:end="39:49"><name pos:start="39:27" pos:end="39:49"><name pos:start="39:27" pos:end="39:27">q</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:49">decoded_bytes_buffer</name></name></expr></argument>, <argument pos:start="39:52" pos:end="39:69"><expr pos:start="39:52" pos:end="39:69"><name pos:start="39:52" pos:end="39:69"><name pos:start="39:52" pos:end="39:56">avctx</name><operator pos:start="39:57" pos:end="39:58">-&gt;</operator><name pos:start="39:59" pos:end="39:69">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:42"><expr pos:start="41:9" pos:end="41:41"><name pos:start="41:9" pos:end="41:15">databuf</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:41"><name pos:start="41:19" pos:end="41:19">q</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:41">decoded_bytes_buffer</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="47:5">else <block pos:start="43:12" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:22">

        <expr_stmt pos:start="45:9" pos:end="45:22"><expr pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:15">databuf</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <name pos:start="45:19" pos:end="45:21">buf</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:82"><expr pos:start="51:5" pos:end="51:81"><name pos:start="51:5" pos:end="51:10">result</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <call pos:start="51:14" pos:end="51:81"><name pos:start="51:14" pos:end="51:24">decodeFrame</name><argument_list pos:start="51:25" pos:end="51:81">(<argument pos:start="51:26" pos:end="51:26"><expr pos:start="51:26" pos:end="51:26"><name pos:start="51:26" pos:end="51:26">q</name></expr></argument>, <argument pos:start="51:29" pos:end="51:35"><expr pos:start="51:29" pos:end="51:35"><name pos:start="51:29" pos:end="51:35">databuf</name></expr></argument>, <argument pos:start="51:38" pos:end="51:80"><expr pos:start="51:38" pos:end="51:80"><ternary pos:start="51:38" pos:end="51:80"><condition pos:start="51:38" pos:end="51:55"><expr pos:start="51:38" pos:end="51:53"><name pos:start="51:38" pos:end="51:48"><name pos:start="51:38" pos:end="51:38">q</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:48">channels</name></name> <operator pos:start="51:50" pos:end="51:51">==</operator> <literal type="number" pos:start="51:53" pos:end="51:53">2</literal></expr> ?</condition><then pos:start="51:57" pos:end="51:69"> <expr pos:start="51:57" pos:end="51:69"><name pos:start="51:57" pos:end="51:69"><name pos:start="51:57" pos:end="51:57">q</name><operator pos:start="51:58" pos:end="51:59">-&gt;</operator><name pos:start="51:60" pos:end="51:69">outSamples</name></name></expr> </then><else pos:start="51:71" pos:end="51:80">: <expr pos:start="51:73" pos:end="51:80"><operator pos:start="51:73" pos:end="51:73">&amp;</operator><name pos:start="51:74" pos:end="51:80">samples</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:20">(<expr pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:14">result</name> <operator pos:start="55:16" pos:end="55:17">!=</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition> <block pos:start="55:22" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:18">

        <expr_stmt pos:start="57:9" pos:end="57:60"><expr pos:start="57:9" pos:end="57:59"><call pos:start="57:9" pos:end="57:59"><name pos:start="57:9" pos:end="57:14">av_log</name><argument_list pos:start="57:15" pos:end="57:59">(<argument pos:start="57:16" pos:end="57:19"><expr pos:start="57:16" pos:end="57:19"><name pos:start="57:16" pos:end="57:19">NULL</name></expr></argument>,<argument pos:start="57:21" pos:end="57:32"><expr pos:start="57:21" pos:end="57:32"><name pos:start="57:21" pos:end="57:32">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="57:34" pos:end="57:58"><expr pos:start="57:34" pos:end="57:58"><literal type="string" pos:start="57:34" pos:end="57:58">"Frame decoding error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:18">return <expr pos:start="59:16" pos:end="59:17"><operator pos:start="59:16" pos:end="59:16">-</operator><literal type="number" pos:start="59:17" pos:end="59:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:20">/* interleave */</comment>

    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:25">(<expr pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:9">q</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:19">channels</name></name> <operator pos:start="67:21" pos:end="67:22">==</operator> <literal type="number" pos:start="67:24" pos:end="67:24">2</literal></expr>)</condition> <block pos:start="67:27" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:46">

        <expr_stmt pos:start="69:9" pos:end="71:46"><expr pos:start="69:9" pos:end="71:45"><call pos:start="69:9" pos:end="71:45"><name pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:9">q</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:19">fmt_conv</name><operator pos:start="69:20" pos:end="69:20">.</operator><name pos:start="69:21" pos:end="69:36">float_interleave</name></name><argument_list pos:start="69:37" pos:end="71:45">(<argument pos:start="69:38" pos:end="69:44"><expr pos:start="69:38" pos:end="69:44"><name pos:start="69:38" pos:end="69:44">samples</name></expr></argument>, <argument pos:start="69:47" pos:end="69:75"><expr pos:start="69:47" pos:end="69:75"><operator pos:start="69:47" pos:end="69:47">(</operator><specifier pos:start="69:48" pos:end="69:52">const</specifier> <name pos:start="69:54" pos:end="69:58">float</name> <operator pos:start="69:60" pos:end="69:60">*</operator><operator pos:start="69:61" pos:end="69:61">*</operator><operator pos:start="69:62" pos:end="69:62">)</operator><name pos:start="69:63" pos:end="69:75"><name pos:start="69:63" pos:end="69:63">q</name><operator pos:start="69:64" pos:end="69:65">-&gt;</operator><name pos:start="69:66" pos:end="69:75">outSamples</name></name></expr></argument>,

                                     <argument pos:start="71:38" pos:end="71:41"><expr pos:start="71:38" pos:end="71:41"><literal type="number" pos:start="71:38" pos:end="71:41">1024</literal></expr></argument>, <argument pos:start="71:44" pos:end="71:44"><expr pos:start="71:44" pos:end="71:44"><literal type="number" pos:start="71:44" pos:end="71:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:81"><expr pos:start="75:5" pos:end="75:80"><operator pos:start="75:5" pos:end="75:5">*</operator><name pos:start="75:6" pos:end="75:14">data_size</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="number" pos:start="75:18" pos:end="75:21">1024</literal> <operator pos:start="75:23" pos:end="75:23">*</operator> <name pos:start="75:25" pos:end="75:35"><name pos:start="75:25" pos:end="75:25">q</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:35">channels</name></name> <operator pos:start="75:37" pos:end="75:37">*</operator> <call pos:start="75:39" pos:end="75:80"><name pos:start="75:39" pos:end="75:61">av_get_bytes_per_sample</name><argument_list pos:start="75:62" pos:end="75:80">(<argument pos:start="75:63" pos:end="75:79"><expr pos:start="75:63" pos:end="75:79"><name pos:start="75:63" pos:end="75:79"><name pos:start="75:63" pos:end="75:67">avctx</name><operator pos:start="75:68" pos:end="75:69">-&gt;</operator><name pos:start="75:70" pos:end="75:79">sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="79:5" pos:end="79:30">return <expr pos:start="79:12" pos:end="79:29"><name pos:start="79:12" pos:end="79:29"><name pos:start="79:12" pos:end="79:16">avctx</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:29">block_align</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
