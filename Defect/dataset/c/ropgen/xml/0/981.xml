<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/981.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:28">lm32_debug_excp_handler</name><parameter_list pos:start="1:29" pos:end="1:42">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:39"><name pos:start="1:30" pos:end="1:37">CPUState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">cs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:5">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">LM32CPU</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">cpu</name> <init pos:start="5:18" pos:end="5:31">= <expr pos:start="5:20" pos:end="5:31"><call pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:27">LM32_CPU</name><argument_list pos:start="5:28" pos:end="5:31">(<argument pos:start="5:29" pos:end="5:30"><expr pos:start="5:29" pos:end="5:30"><name pos:start="5:29" pos:end="5:30">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">CPULM32State</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">env</name> <init pos:start="7:23" pos:end="7:33">= <expr pos:start="7:25" pos:end="7:33"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:33"><name pos:start="7:26" pos:end="7:28">cpu</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:33">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">CPUBreakpoint</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">bp</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="49:5"><if pos:start="13:5" pos:end="31:5">if <condition pos:start="13:8" pos:end="13:27">(<expr pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:10">cs</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:26">watchpoint_hit</name></name></expr>)</condition> <block pos:start="13:29" pos:end="31:5">{<block_content pos:start="15:9" pos:end="29:9">

        <if_stmt pos:start="15:9" pos:end="29:9"><if pos:start="15:9" pos:end="29:9">if <condition pos:start="15:12" pos:end="15:47">(<expr pos:start="15:13" pos:end="15:46"><name pos:start="15:13" pos:end="15:37"><name pos:start="15:13" pos:end="15:14">cs</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:30">watchpoint_hit</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:37">flags</name></name> <operator pos:start="15:39" pos:end="15:39">&amp;</operator> <name pos:start="15:41" pos:end="15:46">BP_CPU</name></expr>)</condition> <block pos:start="15:49" pos:end="29:9">{<block_content pos:start="17:13" pos:end="27:13">

            <expr_stmt pos:start="17:13" pos:end="17:38"><expr pos:start="17:13" pos:end="17:37"><name pos:start="17:13" pos:end="17:30"><name pos:start="17:13" pos:end="17:14">cs</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:30">watchpoint_hit</name></name> <operator pos:start="17:32" pos:end="17:32">=</operator> <name pos:start="17:34" pos:end="17:37">NULL</name></expr>;</expr_stmt>

            <if_stmt pos:start="19:13" pos:end="27:13"><if pos:start="19:13" pos:end="23:13">if <condition pos:start="19:16" pos:end="19:39">(<expr pos:start="19:17" pos:end="19:38"><call pos:start="19:17" pos:end="19:38"><name pos:start="19:17" pos:end="19:33">check_watchpoints</name><argument_list pos:start="19:34" pos:end="19:38">(<argument pos:start="19:35" pos:end="19:37"><expr pos:start="19:35" pos:end="19:37"><name pos:start="19:35" pos:end="19:37">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:41" pos:end="23:13">{<block_content pos:start="21:17" pos:end="21:54">

                <expr_stmt pos:start="21:17" pos:end="21:54"><expr pos:start="21:17" pos:end="21:53"><call pos:start="21:17" pos:end="21:53"><name pos:start="21:17" pos:end="21:31">raise_exception</name><argument_list pos:start="21:32" pos:end="21:53">(<argument pos:start="21:33" pos:end="21:35"><expr pos:start="21:33" pos:end="21:35"><name pos:start="21:33" pos:end="21:35">env</name></expr></argument>, <argument pos:start="21:38" pos:end="21:52"><expr pos:start="21:38" pos:end="21:52"><name pos:start="21:38" pos:end="21:52">EXCP_WATCHPOINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="23:15" pos:end="27:13">else <block pos:start="23:20" pos:end="27:13">{<block_content pos:start="25:17" pos:end="25:49">

                <expr_stmt pos:start="25:17" pos:end="25:49"><expr pos:start="25:17" pos:end="25:48"><call pos:start="25:17" pos:end="25:48"><name pos:start="25:17" pos:end="25:38">cpu_resume_from_signal</name><argument_list pos:start="25:39" pos:end="25:48">(<argument pos:start="25:40" pos:end="25:41"><expr pos:start="25:40" pos:end="25:41"><name pos:start="25:40" pos:end="25:41">cs</name></expr></argument>, <argument pos:start="25:44" pos:end="25:47"><expr pos:start="25:44" pos:end="25:47"><name pos:start="25:44" pos:end="25:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="49:5">else <block pos:start="31:12" pos:end="49:5">{<block_content pos:start="33:9" pos:end="47:9">

        <macro pos:start="33:9" pos:end="33:51"><name pos:start="33:9" pos:end="33:22">QTAILQ_FOREACH</name><argument_list pos:start="33:23" pos:end="33:51">(<argument pos:start="33:24" pos:end="33:25">bp</argument>, <argument pos:start="33:28" pos:end="33:43">&amp;cs-&gt;breakpoints</argument>, <argument pos:start="33:46" pos:end="33:50">entry</argument>)</argument_list></macro> <block pos:start="33:53" pos:end="47:9">{<block_content pos:start="35:13" pos:end="45:13">

            <if_stmt pos:start="35:13" pos:end="45:13"><if pos:start="35:13" pos:end="45:13">if <condition pos:start="35:16" pos:end="35:34">(<expr pos:start="35:17" pos:end="35:33"><name pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:18">bp</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:22">pc</name></name> <operator pos:start="35:24" pos:end="35:25">==</operator> <name pos:start="35:27" pos:end="35:33"><name pos:start="35:27" pos:end="35:29">env</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:33">pc</name></name></expr>)</condition> <block pos:start="35:36" pos:end="45:13">{<block_content pos:start="37:17" pos:end="43:22">

                <if_stmt pos:start="37:17" pos:end="41:17"><if pos:start="37:17" pos:end="41:17">if <condition pos:start="37:20" pos:end="37:39">(<expr pos:start="37:21" pos:end="37:38"><name pos:start="37:21" pos:end="37:29"><name pos:start="37:21" pos:end="37:22">bp</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:29">flags</name></name> <operator pos:start="37:31" pos:end="37:31">&amp;</operator> <name pos:start="37:33" pos:end="37:38">BP_CPU</name></expr>)</condition> <block pos:start="37:41" pos:end="41:17">{<block_content pos:start="39:21" pos:end="39:58">

                    <expr_stmt pos:start="39:21" pos:end="39:58"><expr pos:start="39:21" pos:end="39:57"><call pos:start="39:21" pos:end="39:57"><name pos:start="39:21" pos:end="39:35">raise_exception</name><argument_list pos:start="39:36" pos:end="39:57">(<argument pos:start="39:37" pos:end="39:39"><expr pos:start="39:37" pos:end="39:39"><name pos:start="39:37" pos:end="39:39">env</name></expr></argument>, <argument pos:start="39:42" pos:end="39:56"><expr pos:start="39:42" pos:end="39:56"><name pos:start="39:42" pos:end="39:56">EXCP_BREAKPOINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="43:17" pos:end="43:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
