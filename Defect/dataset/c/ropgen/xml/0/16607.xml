<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16607.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">qemu_start_warp_timer</name><parameter_list pos:start="1:27" pos:end="1:32">(<parameter pos:start="1:28" pos:end="1:31"><decl pos:start="1:28" pos:end="1:31"><type pos:start="1:28" pos:end="1:31"><name pos:start="1:28" pos:end="1:31">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="163:1">{<block_content pos:start="5:5" pos:end="161:5">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:17">clock</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:20">deadline</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:20">(<expr pos:start="11:9" pos:end="11:19"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:19">use_icount</name></expr>)</condition> <block pos:start="11:22" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:15">

        <return pos:start="13:9" pos:end="13:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="23:7">/* Nothing to do if the VM is stopped: QEMU_CLOCK_VIRTUAL timers

     * do not fire, so computing the deadline does not make sense.

     */</comment>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:31">(<expr pos:start="25:9" pos:end="25:30"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:30"><name pos:start="25:10" pos:end="25:28">runstate_is_running</name><argument_list pos:start="25:29" pos:end="25:30">()</argument_list></call></expr>)</condition> <block pos:start="25:33" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:15">

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:60">/* warp clock deterministically in record/replay mode */</comment>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:56">(<expr pos:start="35:9" pos:end="35:55"><operator pos:start="35:9" pos:end="35:9">!</operator><call pos:start="35:10" pos:end="35:55"><name pos:start="35:10" pos:end="35:26">replay_checkpoint</name><argument_list pos:start="35:27" pos:end="35:55">(<argument pos:start="35:28" pos:end="35:54"><expr pos:start="35:28" pos:end="35:54"><name pos:start="35:28" pos:end="35:54">CHECKPOINT_CLOCK_WARP_START</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:58" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:15">

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:32">(<expr pos:start="43:9" pos:end="43:31"><operator pos:start="43:9" pos:end="43:9">!</operator><call pos:start="43:10" pos:end="43:31"><name pos:start="43:10" pos:end="43:29">all_cpu_threads_idle</name><argument_list pos:start="43:30" pos:end="43:31">()</argument_list></call></expr>)</condition> <block pos:start="43:34" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:15">

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:24">(<expr pos:start="51:9" pos:end="51:23"><call pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:21">qtest_enabled</name><argument_list pos:start="51:22" pos:end="51:23">()</argument_list></call></expr>)</condition> <block pos:start="51:26" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:15">

        <comment type="block" pos:start="53:9" pos:end="53:59">/* When testing, qtest commands advance icount.  */</comment>

        <return pos:start="55:9" pos:end="55:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:65">/* We want to use the earliest deadline from ALL vm_clocks */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:53"><expr pos:start="63:5" pos:end="63:52"><name pos:start="63:5" pos:end="63:9">clock</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:52"><name pos:start="63:13" pos:end="63:29">qemu_clock_get_ns</name><argument_list pos:start="63:30" pos:end="63:52">(<argument pos:start="63:31" pos:end="63:51"><expr pos:start="63:31" pos:end="63:51"><name pos:start="63:31" pos:end="63:51">QEMU_CLOCK_VIRTUAL_RT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:62"><expr pos:start="65:5" pos:end="65:61"><name pos:start="65:5" pos:end="65:12">deadline</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="65:61"><name pos:start="65:16" pos:end="65:41">qemu_clock_deadline_ns_all</name><argument_list pos:start="65:42" pos:end="65:61">(<argument pos:start="65:43" pos:end="65:60"><expr pos:start="65:43" pos:end="65:60"><name pos:start="65:43" pos:end="65:60">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="81:5"><if pos:start="67:5" pos:end="81:5">if <condition pos:start="67:8" pos:end="67:21">(<expr pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:16">deadline</name> <operator pos:start="67:18" pos:end="67:18">&lt;</operator> <literal type="number" pos:start="67:20" pos:end="67:20">0</literal></expr>)</condition> <block pos:start="67:23" pos:end="81:5">{<block_content pos:start="69:9" pos:end="79:15">

        <decl_stmt pos:start="69:9" pos:end="69:29"><decl pos:start="69:9" pos:end="69:28"><type pos:start="69:9" pos:end="69:19"><specifier pos:start="69:9" pos:end="69:14">static</specifier> <name pos:start="69:16" pos:end="69:19">bool</name></type> <name pos:start="69:21" pos:end="69:28">notified</name></decl>;</decl_stmt>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:39">(<expr pos:start="71:13" pos:end="71:38"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:25">icount_sleep</name> <operator pos:start="71:27" pos:end="71:28">&amp;&amp;</operator> <operator pos:start="71:30" pos:end="71:30">!</operator><name pos:start="71:31" pos:end="71:38">notified</name></expr>)</condition> <block pos:start="71:41" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:28">

            <expr_stmt pos:start="73:13" pos:end="73:80"><expr pos:start="73:13" pos:end="73:79"><call pos:start="73:13" pos:end="73:79"><name pos:start="73:13" pos:end="73:24">error_report</name><argument_list pos:start="73:25" pos:end="73:79">(<argument pos:start="73:26" pos:end="73:78"><expr pos:start="73:26" pos:end="73:78"><literal type="string" pos:start="73:26" pos:end="73:78">"WARNING: icount sleep disabled and no active timers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:28"><expr pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:20">notified</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <name pos:start="75:24" pos:end="75:27">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="79:9" pos:end="79:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="161:5"><if pos:start="85:5" pos:end="157:5">if <condition pos:start="85:8" pos:end="85:21">(<expr pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:16">deadline</name> <operator pos:start="85:18" pos:end="85:18">&gt;</operator> <literal type="number" pos:start="85:20" pos:end="85:20">0</literal></expr>)</condition> <block pos:start="85:23" pos:end="157:5">{<block_content pos:start="101:9" pos:end="155:9">

        <comment type="block" pos:start="87:9" pos:end="99:11">/*

         * Ensure QEMU_CLOCK_VIRTUAL proceeds even when the virtual CPU goes to

         * sleep.  Otherwise, the CPU might be waiting for a future timer

         * interrupt to wake it up, but the interrupt never comes because

         * the vCPU isn't running any insns and thus doesn't advance the

         * QEMU_CLOCK_VIRTUAL.

         */</comment>

        <if_stmt pos:start="101:9" pos:end="155:9"><if pos:start="101:9" pos:end="125:9">if <condition pos:start="101:12" pos:end="101:26">(<expr pos:start="101:13" pos:end="101:25"><operator pos:start="101:13" pos:end="101:13">!</operator><name pos:start="101:14" pos:end="101:25">icount_sleep</name></expr>)</condition> <block pos:start="101:28" pos:end="125:9">{<block_content pos:start="117:13" pos:end="123:50">

            <comment type="block" pos:start="103:13" pos:end="115:15">/*

             * We never let VCPUs sleep in no sleep icount mode.

             * If there is a pending QEMU_CLOCK_VIRTUAL timer we just advance

             * to the next QEMU_CLOCK_VIRTUAL event and notify it.

             * It is useful when we want a deterministic execution time,

             * isolated from host latencies.

             */</comment>

            <expr_stmt pos:start="117:13" pos:end="117:64"><expr pos:start="117:13" pos:end="117:63"><call pos:start="117:13" pos:end="117:63"><name pos:start="117:13" pos:end="117:31">seqlock_write_begin</name><argument_list pos:start="117:32" pos:end="117:63">(<argument pos:start="117:33" pos:end="117:62"><expr pos:start="117:33" pos:end="117:62"><operator pos:start="117:33" pos:end="117:33">&amp;</operator><name pos:start="117:34" pos:end="117:62"><name pos:start="117:34" pos:end="117:45">timers_state</name><operator pos:start="117:46" pos:end="117:46">.</operator><name pos:start="117:47" pos:end="117:62">vm_clock_seqlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:54"><expr pos:start="119:13" pos:end="119:53"><name pos:start="119:13" pos:end="119:41"><name pos:start="119:13" pos:end="119:24">timers_state</name><operator pos:start="119:25" pos:end="119:25">.</operator><name pos:start="119:26" pos:end="119:41">qemu_icount_bias</name></name> <operator pos:start="119:43" pos:end="119:44">+=</operator> <name pos:start="119:46" pos:end="119:53">deadline</name></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:62"><expr pos:start="121:13" pos:end="121:61"><call pos:start="121:13" pos:end="121:61"><name pos:start="121:13" pos:end="121:29">seqlock_write_end</name><argument_list pos:start="121:30" pos:end="121:61">(<argument pos:start="121:31" pos:end="121:60"><expr pos:start="121:31" pos:end="121:60"><operator pos:start="121:31" pos:end="121:31">&amp;</operator><name pos:start="121:32" pos:end="121:60"><name pos:start="121:32" pos:end="121:43">timers_state</name><operator pos:start="121:44" pos:end="121:44">.</operator><name pos:start="121:45" pos:end="121:60">vm_clock_seqlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:50"><expr pos:start="123:13" pos:end="123:49"><call pos:start="123:13" pos:end="123:49"><name pos:start="123:13" pos:end="123:29">qemu_clock_notify</name><argument_list pos:start="123:30" pos:end="123:49">(<argument pos:start="123:31" pos:end="123:48"><expr pos:start="123:31" pos:end="123:48"><name pos:start="123:31" pos:end="123:48">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="125:11" pos:end="155:9">else <block pos:start="125:16" pos:end="155:9">{<block_content pos:start="143:13" pos:end="153:70">

            <comment type="block" pos:start="127:13" pos:end="141:15">/*

             * We do stop VCPUs and only advance QEMU_CLOCK_VIRTUAL after some

             * "real" time, (related to the time left until the next event) has

             * passed. The QEMU_CLOCK_VIRTUAL_RT clock will do this.

             * This avoids that the warps are visible externally; for example,

             * you will not be sending network packets continuously instead of

             * every 100ms.

             */</comment>

            <expr_stmt pos:start="143:13" pos:end="143:64"><expr pos:start="143:13" pos:end="143:63"><call pos:start="143:13" pos:end="143:63"><name pos:start="143:13" pos:end="143:31">seqlock_write_begin</name><argument_list pos:start="143:32" pos:end="143:63">(<argument pos:start="143:33" pos:end="143:62"><expr pos:start="143:33" pos:end="143:62"><operator pos:start="143:33" pos:end="143:33">&amp;</operator><name pos:start="143:34" pos:end="143:62"><name pos:start="143:34" pos:end="143:45">timers_state</name><operator pos:start="143:46" pos:end="143:46">.</operator><name pos:start="143:47" pos:end="143:62">vm_clock_seqlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="149:13"><if pos:start="145:13" pos:end="149:13">if <condition pos:start="145:16" pos:end="145:73">(<expr pos:start="145:17" pos:end="145:72"><name pos:start="145:17" pos:end="145:35">vm_clock_warp_start</name> <operator pos:start="145:37" pos:end="145:38">==</operator> <operator pos:start="145:40" pos:end="145:40">-</operator><literal type="number" pos:start="145:41" pos:end="145:41">1</literal> <operator pos:start="145:43" pos:end="145:44">||</operator> <name pos:start="145:46" pos:end="145:64">vm_clock_warp_start</name> <operator pos:start="145:66" pos:end="145:66">&gt;</operator> <name pos:start="145:68" pos:end="145:72">clock</name></expr>)</condition> <block pos:start="145:75" pos:end="149:13">{<block_content pos:start="147:17" pos:end="147:44">

                <expr_stmt pos:start="147:17" pos:end="147:44"><expr pos:start="147:17" pos:end="147:43"><name pos:start="147:17" pos:end="147:35">vm_clock_warp_start</name> <operator pos:start="147:37" pos:end="147:37">=</operator> <name pos:start="147:39" pos:end="147:43">clock</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:62"><expr pos:start="151:13" pos:end="151:61"><call pos:start="151:13" pos:end="151:61"><name pos:start="151:13" pos:end="151:29">seqlock_write_end</name><argument_list pos:start="151:30" pos:end="151:61">(<argument pos:start="151:31" pos:end="151:60"><expr pos:start="151:31" pos:end="151:60"><operator pos:start="151:31" pos:end="151:31">&amp;</operator><name pos:start="151:32" pos:end="151:60"><name pos:start="151:32" pos:end="151:43">timers_state</name><operator pos:start="151:44" pos:end="151:44">.</operator><name pos:start="151:45" pos:end="151:60">vm_clock_seqlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:70"><expr pos:start="153:13" pos:end="153:69"><call pos:start="153:13" pos:end="153:69"><name pos:start="153:13" pos:end="153:32">timer_mod_anticipate</name><argument_list pos:start="153:33" pos:end="153:69">(<argument pos:start="153:34" pos:end="153:50"><expr pos:start="153:34" pos:end="153:50"><name pos:start="153:34" pos:end="153:50">icount_warp_timer</name></expr></argument>, <argument pos:start="153:53" pos:end="153:68"><expr pos:start="153:53" pos:end="153:68"><name pos:start="153:53" pos:end="153:57">clock</name> <operator pos:start="153:59" pos:end="153:59">+</operator> <name pos:start="153:61" pos:end="153:68">deadline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="157:7" pos:end="161:5">else if <condition pos:start="157:15" pos:end="157:29">(<expr pos:start="157:16" pos:end="157:28"><name pos:start="157:16" pos:end="157:23">deadline</name> <operator pos:start="157:25" pos:end="157:26">==</operator> <literal type="number" pos:start="157:28" pos:end="157:28">0</literal></expr>)</condition> <block pos:start="157:31" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:46">

        <expr_stmt pos:start="159:9" pos:end="159:46"><expr pos:start="159:9" pos:end="159:45"><call pos:start="159:9" pos:end="159:45"><name pos:start="159:9" pos:end="159:25">qemu_clock_notify</name><argument_list pos:start="159:26" pos:end="159:45">(<argument pos:start="159:27" pos:end="159:44"><expr pos:start="159:27" pos:end="159:44"><name pos:start="159:27" pos:end="159:44">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
