<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8398.c" pos:tabs="8"><function pos:start="1:1" pos:end="711:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">ppc_core99_init</name><parameter_list pos:start="1:28" pos:end="1:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:40">MachineState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:49">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="711:1">{<block_content pos:start="5:5" pos:end="709:52">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:40">machine</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:58">= <expr pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:41">machine</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:50"><decl pos:start="15:5" pos:end="15:49"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">boot_device</name> <init pos:start="15:29" pos:end="15:49">= <expr pos:start="15:31" pos:end="15:49"><name pos:start="15:31" pos:end="15:49"><name pos:start="15:31" pos:end="15:37">machine</name><operator pos:start="15:38" pos:end="15:39">-&gt;</operator><name pos:start="15:40" pos:end="15:49">boot_order</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:14">PowerPCCPU</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:19">cpu</name> <init pos:start="17:21" pos:end="17:26">= <expr pos:start="17:23" pos:end="17:26"><name pos:start="17:23" pos:end="17:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">CPUPPCState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">env</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:34"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">qemu_irq</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:17">pic</name></decl>, <decl pos:start="23:20" pos:end="23:33"><type ref="prev" pos:start="23:5" pos:end="23:14"><modifier pos:start="23:20" pos:end="23:20">*</modifier><modifier pos:start="23:21" pos:end="23:21">*</modifier></type><name pos:start="23:22" pos:end="23:33">openpic_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:47"><decl pos:start="25:5" pos:end="25:46"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:21">isa</name> <init pos:start="25:23" pos:end="25:46">= <expr pos:start="25:25" pos:end="25:46"><call pos:start="25:25" pos:end="25:46"><name pos:start="25:25" pos:end="25:29">g_new</name><argument_list pos:start="25:30" pos:end="25:46">(<argument pos:start="25:31" pos:end="25:42"><expr pos:start="25:31" pos:end="25:42"><name pos:start="25:31" pos:end="25:42">MemoryRegion</name></expr></argument>, <argument pos:start="25:45" pos:end="25:45"><expr pos:start="25:45" pos:end="25:45"><literal type="number" pos:start="25:45" pos:end="25:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:55"><decl pos:start="27:5" pos:end="27:54"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">MemoryRegion</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:29">unin_memory</name> <init pos:start="27:31" pos:end="27:54">= <expr pos:start="27:33" pos:end="27:54"><call pos:start="27:33" pos:end="27:54"><name pos:start="27:33" pos:end="27:37">g_new</name><argument_list pos:start="27:38" pos:end="27:54">(<argument pos:start="27:39" pos:end="27:50"><expr pos:start="27:39" pos:end="27:50"><name pos:start="27:39" pos:end="27:50">MemoryRegion</name></expr></argument>, <argument pos:start="27:53" pos:end="27:53"><expr pos:start="27:53" pos:end="27:53"><literal type="number" pos:start="27:53" pos:end="27:53">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:56"><decl pos:start="29:5" pos:end="29:55"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:30">unin2_memory</name> <init pos:start="29:32" pos:end="29:55">= <expr pos:start="29:34" pos:end="29:55"><call pos:start="29:34" pos:end="29:55"><name pos:start="29:34" pos:end="29:38">g_new</name><argument_list pos:start="29:39" pos:end="29:55">(<argument pos:start="29:40" pos:end="29:51"><expr pos:start="29:40" pos:end="29:51"><name pos:start="29:40" pos:end="29:51">MemoryRegion</name></expr></argument>, <argument pos:start="29:54" pos:end="29:54"><expr pos:start="29:54" pos:end="29:54"><literal type="number" pos:start="29:54" pos:end="29:54">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:28"><decl pos:start="31:5" pos:end="31:18"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:18">linux_boot</name></decl>, <decl pos:start="31:21" pos:end="31:21"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:21" pos:end="31:21">i</name></decl>, <decl pos:start="31:24" pos:end="31:24"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:24" pos:end="31:24">j</name></decl>, <decl pos:start="31:27" pos:end="31:27"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:27" pos:end="31:27">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:79"><decl pos:start="33:5" pos:end="33:46"><type pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:16">MemoryRegion</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:21">ram</name> <init pos:start="33:23" pos:end="33:46">= <expr pos:start="33:25" pos:end="33:46"><call pos:start="33:25" pos:end="33:46"><name pos:start="33:25" pos:end="33:29">g_new</name><argument_list pos:start="33:30" pos:end="33:46">(<argument pos:start="33:31" pos:end="33:42"><expr pos:start="33:31" pos:end="33:42"><name pos:start="33:31" pos:end="33:42">MemoryRegion</name></expr></argument>, <argument pos:start="33:45" pos:end="33:45"><expr pos:start="33:45" pos:end="33:45"><literal type="number" pos:start="33:45" pos:end="33:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl pos:start="33:49" pos:end="33:78"><type ref="prev" pos:start="33:5" pos:end="33:18"><modifier pos:start="33:49" pos:end="33:49">*</modifier></type><name pos:start="33:50" pos:end="33:53">bios</name> <init pos:start="33:55" pos:end="33:78">= <expr pos:start="33:57" pos:end="33:78"><call pos:start="33:57" pos:end="33:78"><name pos:start="33:57" pos:end="33:61">g_new</name><argument_list pos:start="33:62" pos:end="33:78">(<argument pos:start="33:63" pos:end="33:74"><expr pos:start="33:63" pos:end="33:74"><name pos:start="33:63" pos:end="33:74">MemoryRegion</name></expr></argument>, <argument pos:start="33:77" pos:end="33:77"><expr pos:start="33:77" pos:end="33:77"><literal type="number" pos:start="33:77" pos:end="33:77">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:54"><decl pos:start="35:5" pos:end="35:22"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:10">hwaddr</name></type> <name pos:start="35:12" pos:end="35:22">kernel_base</name></decl>, <decl pos:start="35:25" pos:end="35:35"><type ref="prev" pos:start="35:5" pos:end="35:10"/><name pos:start="35:25" pos:end="35:35">initrd_base</name></decl>, <decl pos:start="35:38" pos:end="35:53"><type ref="prev" pos:start="35:5" pos:end="35:10"/><name pos:start="35:38" pos:end="35:49">cmdline_base</name> <init pos:start="35:51" pos:end="35:53">= <expr pos:start="35:53" pos:end="35:53"><literal type="number" pos:start="35:53" pos:end="35:53">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:34"><decl pos:start="37:5" pos:end="37:20"><type pos:start="37:5" pos:end="37:8"><name pos:start="37:5" pos:end="37:8">long</name></type> <name pos:start="37:10" pos:end="37:20">kernel_size</name></decl>, <decl pos:start="37:23" pos:end="37:33"><type ref="prev" pos:start="37:5" pos:end="37:8"/><name pos:start="37:23" pos:end="37:33">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:20"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:10">PCIBus</name> <modifier pos:start="39:12" pos:end="39:12">*</modifier></type><name pos:start="39:13" pos:end="39:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:21"><decl pos:start="41:5" pos:end="41:20"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:13">PCIDevice</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:20">macio</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:29"><decl pos:start="43:5" pos:end="43:28"><type pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:17">MACIOIDEState</name> <modifier pos:start="43:19" pos:end="43:19">*</modifier></type><name pos:start="43:20" pos:end="43:28">macio_ide</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:22"><decl pos:start="45:5" pos:end="45:21"><type pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:12">BusState</name> <modifier pos:start="45:14" pos:end="45:14">*</modifier></type><name pos:start="45:15" pos:end="45:21">adb_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:25"><decl pos:start="47:5" pos:end="47:24"><type pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:19">MacIONVRAMState</name> <modifier pos:start="47:21" pos:end="47:21">*</modifier></type><name pos:start="47:22" pos:end="47:24">nvr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:18"><decl pos:start="49:5" pos:end="49:17"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:17">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:37"><decl pos:start="51:5" pos:end="51:25"><type pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:16">MemoryRegion</name> <modifier pos:start="51:18" pos:end="51:18">*</modifier></type><name pos:start="51:19" pos:end="51:25">pic_mem</name></decl>, <decl pos:start="51:28" pos:end="51:36"><type ref="prev" pos:start="51:5" pos:end="51:18"><modifier pos:start="51:28" pos:end="51:28">*</modifier></type><name pos:start="51:29" pos:end="51:36">escc_mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:52"><decl pos:start="53:5" pos:end="53:51"><type pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:16">MemoryRegion</name> <modifier pos:start="53:18" pos:end="53:18">*</modifier></type><name pos:start="53:19" pos:end="53:26">escc_bar</name> <init pos:start="53:28" pos:end="53:51">= <expr pos:start="53:30" pos:end="53:51"><call pos:start="53:30" pos:end="53:51"><name pos:start="53:30" pos:end="53:34">g_new</name><argument_list pos:start="53:35" pos:end="53:51">(<argument pos:start="53:36" pos:end="53:47"><expr pos:start="53:36" pos:end="53:47"><name pos:start="53:36" pos:end="53:47">MemoryRegion</name></expr></argument>, <argument pos:start="53:50" pos:end="53:50"><expr pos:start="53:50" pos:end="53:50"><literal type="number" pos:start="53:50" pos:end="53:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:24"><decl pos:start="55:5" pos:end="55:23"><type pos:start="55:5" pos:end="55:7"><name pos:start="55:5" pos:end="55:7">int</name></type> <name pos:start="55:9" pos:end="55:23">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:46"><decl pos:start="57:5" pos:end="57:45"><type pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:13">DriveInfo</name> <modifier pos:start="57:15" pos:end="57:15">*</modifier></type><name pos:start="57:16" pos:end="57:45"><name pos:start="57:16" pos:end="57:17">hd</name><index pos:start="57:18" pos:end="57:45">[<expr pos:start="57:19" pos:end="57:44"><name pos:start="57:19" pos:end="57:29">MAX_IDE_BUS</name> <operator pos:start="57:31" pos:end="57:31">*</operator> <name pos:start="57:33" pos:end="57:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:17"><decl pos:start="59:5" pos:end="59:16"><type pos:start="59:5" pos:end="59:10"><name pos:start="59:5" pos:end="59:8">void</name> <modifier pos:start="59:10" pos:end="59:10">*</modifier></type><name pos:start="59:11" pos:end="59:16">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:21"><decl pos:start="61:5" pos:end="61:20"><type pos:start="61:5" pos:end="61:7"><name pos:start="61:5" pos:end="61:7">int</name></type> <name pos:start="61:9" pos:end="61:20">machine_arch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:20"><decl pos:start="63:5" pos:end="63:19"><type pos:start="63:5" pos:end="63:18"><name pos:start="63:5" pos:end="63:16">SysBusDevice</name> <modifier pos:start="63:18" pos:end="63:18">*</modifier></type><name pos:start="63:19" pos:end="63:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:21"><decl pos:start="65:5" pos:end="65:20"><type pos:start="65:5" pos:end="65:17"><name pos:start="65:5" pos:end="65:15">DeviceState</name> <modifier pos:start="65:17" pos:end="65:17">*</modifier></type><name pos:start="65:18" pos:end="65:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:31"><decl pos:start="67:5" pos:end="67:30"><type pos:start="67:5" pos:end="67:9"><name pos:start="67:5" pos:end="67:7">int</name> <modifier pos:start="67:9" pos:end="67:9">*</modifier></type><name pos:start="67:10" pos:end="67:14">token</name> <init pos:start="67:16" pos:end="67:30">= <expr pos:start="67:18" pos:end="67:30"><call pos:start="67:18" pos:end="67:30"><name pos:start="67:18" pos:end="67:22">g_new</name><argument_list pos:start="67:23" pos:end="67:30">(<argument pos:start="67:24" pos:end="67:26"><expr pos:start="67:24" pos:end="67:26"><name pos:start="67:24" pos:end="67:26">int</name></expr></argument>, <argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><literal type="number" pos:start="67:29" pos:end="67:29">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="69:5" pos:end="69:35"><decl pos:start="69:5" pos:end="69:34"><type pos:start="69:5" pos:end="69:10"><name pos:start="69:5" pos:end="69:10">hwaddr</name></type> <name pos:start="69:12" pos:end="69:21">nvram_addr</name> <init pos:start="69:23" pos:end="69:34">= <expr pos:start="69:25" pos:end="69:34"><literal type="number" pos:start="69:25" pos:end="69:34">0xFFF04000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="71:5" pos:end="71:20"><decl pos:start="71:5" pos:end="71:19"><type pos:start="71:5" pos:end="71:12"><name pos:start="71:5" pos:end="71:12">uint64_t</name></type> <name pos:start="71:14" pos:end="71:19">tbfreq</name></decl>;</decl_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:43"><expr pos:start="75:5" pos:end="75:42"><name pos:start="75:5" pos:end="75:14">linux_boot</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <operator pos:start="75:18" pos:end="75:18">(</operator><name pos:start="75:19" pos:end="75:33">kernel_filename</name> <operator pos:start="75:35" pos:end="75:36">!=</operator> <name pos:start="75:38" pos:end="75:41">NULL</name><operator pos:start="75:42" pos:end="75:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:19">/* init CPUs */</comment>

    <if_stmt pos:start="81:5" pos:end="88:0"><if pos:start="81:5" pos:end="88:0">if <condition pos:start="81:8" pos:end="84:0">(<expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:17">cpu_model</name> <operator pos:start="81:19" pos:end="81:20">==</operator> <name pos:start="81:22" pos:end="81:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="88:0"><block_content pos:start="85:9" pos:end="88:0">

<cpp:ifdef pos:start="83:1" pos:end="83:19">#<cpp:directive pos:start="83:2" pos:end="83:6">ifdef</cpp:directive> <name pos:start="83:8" pos:end="83:19">TARGET_PPC64</name></cpp:ifdef>

        <expr_stmt pos:start="85:9" pos:end="88:0"><expr pos:start="85:9" pos:end="85:27"><name pos:start="85:9" pos:end="85:17">cpu_model</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <literal type="string" pos:start="85:21" pos:end="85:27">"970fx"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else pos:start="87:1" pos:end="87:5">#<cpp:directive pos:start="87:2" pos:end="87:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="89:9" pos:end="92:0"><expr pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:17">cpu_model</name> <operator pos:start="89:19" pos:end="89:19">=</operator> <literal type="string" pos:start="89:21" pos:end="89:24">"G4"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

    <for pos:start="93:5" pos:end="115:5">for <control pos:start="93:9" pos:end="93:34">(<init pos:start="93:10" pos:end="93:15"><expr pos:start="93:10" pos:end="93:14"><name pos:start="93:10" pos:end="93:10">i</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <literal type="number" pos:start="93:14" pos:end="93:14">0</literal></expr>;</init> <condition pos:start="93:17" pos:end="93:29"><expr pos:start="93:17" pos:end="93:28"><name pos:start="93:17" pos:end="93:17">i</name> <operator pos:start="93:19" pos:end="93:19">&lt;</operator> <name pos:start="93:21" pos:end="93:28">smp_cpus</name></expr>;</condition> <incr pos:start="93:31" pos:end="93:33"><expr pos:start="93:31" pos:end="93:33"><name pos:start="93:31" pos:end="93:31">i</name><operator pos:start="93:32" pos:end="93:33">++</operator></expr></incr>)</control> <block pos:start="93:36" pos:end="115:5">{<block_content pos:start="95:9" pos:end="113:51">

        <expr_stmt pos:start="95:9" pos:end="95:38"><expr pos:start="95:9" pos:end="95:37"><name pos:start="95:9" pos:end="95:11">cpu</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="95:37"><name pos:start="95:15" pos:end="95:26">cpu_ppc_init</name><argument_list pos:start="95:27" pos:end="95:37">(<argument pos:start="95:28" pos:end="95:36"><expr pos:start="95:28" pos:end="95:36"><name pos:start="95:28" pos:end="95:36">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:24">(<expr pos:start="97:13" pos:end="97:23"><name pos:start="97:13" pos:end="97:15">cpu</name> <operator pos:start="97:17" pos:end="97:18">==</operator> <name pos:start="97:20" pos:end="97:23">NULL</name></expr>)</condition> <block pos:start="97:26" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:20">

            <expr_stmt pos:start="99:13" pos:end="99:71"><expr pos:start="99:13" pos:end="99:70"><call pos:start="99:13" pos:end="99:70"><name pos:start="99:13" pos:end="99:19">fprintf</name><argument_list pos:start="99:20" pos:end="99:70">(<argument pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:26">stderr</name></expr></argument>, <argument pos:start="99:29" pos:end="99:69"><expr pos:start="99:29" pos:end="99:69"><literal type="string" pos:start="99:29" pos:end="99:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:20"><expr pos:start="101:13" pos:end="101:19"><call pos:start="101:13" pos:end="101:19"><name pos:start="101:13" pos:end="101:16">exit</name><argument_list pos:start="101:17" pos:end="101:19">(<argument pos:start="101:18" pos:end="101:18"><expr pos:start="101:18" pos:end="101:18"><literal type="number" pos:start="101:18" pos:end="101:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:24"><expr pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:11">env</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <operator pos:start="105:15" pos:end="105:15">&amp;</operator><name pos:start="105:16" pos:end="105:23"><name pos:start="105:16" pos:end="105:18">cpu</name><operator pos:start="105:19" pos:end="105:20">-&gt;</operator><name pos:start="105:21" pos:end="105:23">env</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="109:9" pos:end="109:48">/* Set time-base frequency to 100 Mhz */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:37"><expr pos:start="111:9" pos:end="111:36"><call pos:start="111:9" pos:end="111:36"><name pos:start="111:9" pos:end="111:23">cpu_ppc_tb_init</name><argument_list pos:start="111:24" pos:end="111:36">(<argument pos:start="111:25" pos:end="111:27"><expr pos:start="111:25" pos:end="111:27"><name pos:start="111:25" pos:end="111:27">env</name></expr></argument>, <argument pos:start="111:30" pos:end="111:35"><expr pos:start="111:30" pos:end="111:35"><name pos:start="111:30" pos:end="111:35">TBFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:51"><expr pos:start="113:9" pos:end="113:50"><call pos:start="113:9" pos:end="113:50"><name pos:start="113:9" pos:end="113:27">qemu_register_reset</name><argument_list pos:start="113:28" pos:end="113:50">(<argument pos:start="113:29" pos:end="113:44"><expr pos:start="113:29" pos:end="113:44"><name pos:start="113:29" pos:end="113:44">ppc_core99_reset</name></expr></argument>, <argument pos:start="113:47" pos:end="113:49"><expr pos:start="113:47" pos:end="113:49"><name pos:start="113:47" pos:end="113:49">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="119:5" pos:end="119:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:80"><expr pos:start="121:5" pos:end="121:79"><call pos:start="121:5" pos:end="121:79"><name pos:start="121:5" pos:end="121:40">memory_region_allocate_system_memory</name><argument_list pos:start="121:41" pos:end="121:79">(<argument pos:start="121:42" pos:end="121:44"><expr pos:start="121:42" pos:end="121:44"><name pos:start="121:42" pos:end="121:44">ram</name></expr></argument>, <argument pos:start="121:47" pos:end="121:50"><expr pos:start="121:47" pos:end="121:50"><name pos:start="121:47" pos:end="121:50">NULL</name></expr></argument>, <argument pos:start="121:53" pos:end="121:68"><expr pos:start="121:53" pos:end="121:68"><literal type="string" pos:start="121:53" pos:end="121:68">"ppc_core99.ram"</literal></expr></argument>, <argument pos:start="121:71" pos:end="121:78"><expr pos:start="121:71" pos:end="121:78"><name pos:start="121:71" pos:end="121:78">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:61"><expr pos:start="123:5" pos:end="123:60"><call pos:start="123:5" pos:end="123:60"><name pos:start="123:5" pos:end="123:31">memory_region_add_subregion</name><argument_list pos:start="123:32" pos:end="123:60">(<argument pos:start="123:33" pos:end="123:51"><expr pos:start="123:33" pos:end="123:51"><call pos:start="123:33" pos:end="123:51"><name pos:start="123:33" pos:end="123:49">get_system_memory</name><argument_list pos:start="123:50" pos:end="123:51">()</argument_list></call></expr></argument>, <argument pos:start="123:54" pos:end="123:54"><expr pos:start="123:54" pos:end="123:54"><literal type="number" pos:start="123:54" pos:end="123:54">0</literal></expr></argument>, <argument pos:start="123:57" pos:end="123:59"><expr pos:start="123:57" pos:end="123:59"><name pos:start="123:57" pos:end="123:59">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="129:5" pos:end="131:41"><expr pos:start="129:5" pos:end="131:40"><call pos:start="129:5" pos:end="131:40"><name pos:start="129:5" pos:end="129:26">memory_region_init_ram</name><argument_list pos:start="129:27" pos:end="131:40">(<argument pos:start="129:28" pos:end="129:31"><expr pos:start="129:28" pos:end="129:31"><name pos:start="129:28" pos:end="129:31">bios</name></expr></argument>, <argument pos:start="129:34" pos:end="129:37"><expr pos:start="129:34" pos:end="129:37"><name pos:start="129:34" pos:end="129:37">NULL</name></expr></argument>, <argument pos:start="129:40" pos:end="129:56"><expr pos:start="129:40" pos:end="129:56"><literal type="string" pos:start="129:40" pos:end="129:56">"ppc_core99.bios"</literal></expr></argument>, <argument pos:start="129:59" pos:end="129:67"><expr pos:start="129:59" pos:end="129:67"><name pos:start="129:59" pos:end="129:67">BIOS_SIZE</name></expr></argument>,

                           <argument pos:start="131:28" pos:end="131:39"><expr pos:start="131:28" pos:end="131:39"><operator pos:start="131:28" pos:end="131:28">&amp;</operator><name pos:start="131:29" pos:end="131:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:38"><expr pos:start="133:5" pos:end="133:37"><call pos:start="133:5" pos:end="133:37"><name pos:start="133:5" pos:end="133:31">vmstate_register_ram_global</name><argument_list pos:start="133:32" pos:end="133:37">(<argument pos:start="133:33" pos:end="133:36"><expr pos:start="133:33" pos:end="133:36"><name pos:start="133:33" pos:end="133:36">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="137:5" pos:end="139:34"><if pos:start="137:5" pos:end="139:34">if <condition pos:start="137:8" pos:end="137:26">(<expr pos:start="137:9" pos:end="137:25"><name pos:start="137:9" pos:end="137:17">bios_name</name> <operator pos:start="137:19" pos:end="137:20">==</operator> <name pos:start="137:22" pos:end="137:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="139:9" pos:end="139:34"><block_content pos:start="139:9" pos:end="139:34">

        <expr_stmt pos:start="139:9" pos:end="139:34"><expr pos:start="139:9" pos:end="139:33"><name pos:start="139:9" pos:end="139:17">bios_name</name> <operator pos:start="139:19" pos:end="139:19">=</operator> <name pos:start="139:21" pos:end="139:33">PROM_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:62"><expr pos:start="141:5" pos:end="141:61"><name pos:start="141:5" pos:end="141:12">filename</name> <operator pos:start="141:14" pos:end="141:14">=</operator> <call pos:start="141:16" pos:end="141:61"><name pos:start="141:16" pos:end="141:29">qemu_find_file</name><argument_list pos:start="141:30" pos:end="141:61">(<argument pos:start="141:31" pos:end="141:49"><expr pos:start="141:31" pos:end="141:49"><name pos:start="141:31" pos:end="141:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="141:52" pos:end="141:60"><expr pos:start="141:52" pos:end="141:60"><name pos:start="141:52" pos:end="141:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:43"><expr pos:start="143:5" pos:end="143:42"><call pos:start="143:5" pos:end="143:42"><name pos:start="143:5" pos:end="143:30">memory_region_set_readonly</name><argument_list pos:start="143:31" pos:end="143:42">(<argument pos:start="143:32" pos:end="143:35"><expr pos:start="143:32" pos:end="143:35"><name pos:start="143:32" pos:end="143:35">bios</name></expr></argument>, <argument pos:start="143:38" pos:end="143:41"><expr pos:start="143:38" pos:end="143:41"><name pos:start="143:38" pos:end="143:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:70"><expr pos:start="145:5" pos:end="145:69"><call pos:start="145:5" pos:end="145:69"><name pos:start="145:5" pos:end="145:31">memory_region_add_subregion</name><argument_list pos:start="145:32" pos:end="145:69">(<argument pos:start="145:33" pos:end="145:51"><expr pos:start="145:33" pos:end="145:51"><call pos:start="145:33" pos:end="145:51"><name pos:start="145:33" pos:end="145:49">get_system_memory</name><argument_list pos:start="145:50" pos:end="145:51">()</argument_list></call></expr></argument>, <argument pos:start="145:54" pos:end="145:62"><expr pos:start="145:54" pos:end="145:62"><name pos:start="145:54" pos:end="145:62">PROM_ADDR</name></expr></argument>, <argument pos:start="145:65" pos:end="145:68"><expr pos:start="145:65" pos:end="145:68"><name pos:start="145:65" pos:end="145:68">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="149:5" pos:end="149:29">/* Load OpenBIOS (ELF) */</comment>

    <if_stmt pos:start="151:5" pos:end="165:5"><if pos:start="151:5" pos:end="161:5">if <condition pos:start="151:8" pos:end="151:17">(<expr pos:start="151:9" pos:end="151:16"><name pos:start="151:9" pos:end="151:16">filename</name></expr>)</condition> <block pos:start="151:19" pos:end="161:5">{<block_content pos:start="153:9" pos:end="159:25">

        <expr_stmt pos:start="153:9" pos:end="155:60"><expr pos:start="153:9" pos:end="155:59"><name pos:start="153:9" pos:end="153:17">bios_size</name> <operator pos:start="153:19" pos:end="153:19">=</operator> <call pos:start="153:21" pos:end="155:59"><name pos:start="153:21" pos:end="153:28">load_elf</name><argument_list pos:start="153:29" pos:end="155:59">(<argument pos:start="153:30" pos:end="153:37"><expr pos:start="153:30" pos:end="153:37"><name pos:start="153:30" pos:end="153:37">filename</name></expr></argument>, <argument pos:start="153:40" pos:end="153:43"><expr pos:start="153:40" pos:end="153:43"><name pos:start="153:40" pos:end="153:43">NULL</name></expr></argument>, <argument pos:start="153:46" pos:end="153:49"><expr pos:start="153:46" pos:end="153:49"><name pos:start="153:46" pos:end="153:49">NULL</name></expr></argument>, <argument pos:start="153:52" pos:end="153:55"><expr pos:start="153:52" pos:end="153:55"><name pos:start="153:52" pos:end="153:55">NULL</name></expr></argument>,

                             <argument pos:start="155:30" pos:end="155:33"><expr pos:start="155:30" pos:end="155:33"><name pos:start="155:30" pos:end="155:33">NULL</name></expr></argument>, <argument pos:start="155:36" pos:end="155:39"><expr pos:start="155:36" pos:end="155:39"><name pos:start="155:36" pos:end="155:39">NULL</name></expr></argument>, <argument pos:start="155:42" pos:end="155:42"><expr pos:start="155:42" pos:end="155:42"><literal type="number" pos:start="155:42" pos:end="155:42">1</literal></expr></argument>, <argument pos:start="155:45" pos:end="155:55"><expr pos:start="155:45" pos:end="155:55"><name pos:start="155:45" pos:end="155:55">ELF_MACHINE</name></expr></argument>, <argument pos:start="155:58" pos:end="155:58"><expr pos:start="155:58" pos:end="155:58"><literal type="number" pos:start="155:58" pos:end="155:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:25"><expr pos:start="159:9" pos:end="159:24"><call pos:start="159:9" pos:end="159:24"><name pos:start="159:9" pos:end="159:14">g_free</name><argument_list pos:start="159:15" pos:end="159:24">(<argument pos:start="159:16" pos:end="159:23"><expr pos:start="159:16" pos:end="159:23"><name pos:start="159:16" pos:end="159:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="161:7" pos:end="165:5">else <block pos:start="161:12" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:23">

        <expr_stmt pos:start="163:9" pos:end="163:23"><expr pos:start="163:9" pos:end="163:22"><name pos:start="163:9" pos:end="163:17">bios_size</name> <operator pos:start="163:19" pos:end="163:19">=</operator> <operator pos:start="163:21" pos:end="163:21">-</operator><literal type="number" pos:start="163:22" pos:end="163:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="167:5" pos:end="173:5"><if pos:start="167:5" pos:end="173:5">if <condition pos:start="167:8" pos:end="167:47">(<expr pos:start="167:9" pos:end="167:46"><name pos:start="167:9" pos:end="167:36"><name pos:start="167:9" pos:end="167:17">bios_size</name> <argument_list type="generic" pos:start="167:19" pos:end="167:36">&lt; <argument pos:start="167:21" pos:end="167:34"><expr pos:start="167:21" pos:end="167:34"><literal type="number" pos:start="167:21" pos:end="167:21">0</literal> <operator pos:start="167:23" pos:end="167:24">||</operator> <name pos:start="167:26" pos:end="167:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="167:38" pos:end="167:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="167:49" pos:end="173:5">{<block_content pos:start="169:9" pos:end="171:16">

        <expr_stmt pos:start="169:9" pos:end="169:72"><expr pos:start="169:9" pos:end="169:71"><call pos:start="169:9" pos:end="169:71"><name pos:start="169:9" pos:end="169:16">hw_error</name><argument_list pos:start="169:17" pos:end="169:71">(<argument pos:start="169:18" pos:end="169:59"><expr pos:start="169:18" pos:end="169:59"><literal type="string" pos:start="169:18" pos:end="169:59">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>, <argument pos:start="169:62" pos:end="169:70"><expr pos:start="169:62" pos:end="169:70"><name pos:start="169:62" pos:end="169:70">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:16"><expr pos:start="171:9" pos:end="171:15"><call pos:start="171:9" pos:end="171:15"><name pos:start="171:9" pos:end="171:12">exit</name><argument_list pos:start="171:13" pos:end="171:15">(<argument pos:start="171:14" pos:end="171:14"><expr pos:start="171:14" pos:end="171:14"><literal type="number" pos:start="171:14" pos:end="171:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="177:5" pos:end="299:5"><if pos:start="177:5" pos:end="261:5">if <condition pos:start="177:8" pos:end="177:19">(<expr pos:start="177:9" pos:end="177:18"><name pos:start="177:9" pos:end="177:18">linux_boot</name></expr>)</condition> <block pos:start="177:21" pos:end="261:5">{<block_content pos:start="179:9" pos:end="259:30">

        <decl_stmt pos:start="179:9" pos:end="179:29"><decl pos:start="179:9" pos:end="179:28"><type pos:start="179:9" pos:end="179:16"><name pos:start="179:9" pos:end="179:16">uint64_t</name></type> <name pos:start="179:18" pos:end="179:24">lowaddr</name> <init pos:start="179:26" pos:end="179:28">= <expr pos:start="179:28" pos:end="179:28"><literal type="number" pos:start="179:28" pos:end="179:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="181:9" pos:end="186:0"><decl pos:start="181:9" pos:end="181:24"><type pos:start="181:9" pos:end="181:11"><name pos:start="181:9" pos:end="181:11">int</name></type> <name pos:start="181:13" pos:end="181:24">bswap_needed</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="185:1" pos:end="185:19">#<cpp:directive pos:start="185:2" pos:end="185:6">ifdef</cpp:directive> <name pos:start="185:8" pos:end="185:19">BSWAP_NEEDED</name></cpp:ifdef>

        <expr_stmt pos:start="187:9" pos:end="190:0"><expr pos:start="187:9" pos:end="187:24"><name pos:start="187:9" pos:end="187:20">bswap_needed</name> <operator pos:start="187:22" pos:end="187:22">=</operator> <literal type="number" pos:start="187:24" pos:end="187:24">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="189:1" pos:end="189:5">#<cpp:directive pos:start="189:2" pos:end="189:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="191:9" pos:end="194:0"><expr pos:start="191:9" pos:end="191:24"><name pos:start="191:9" pos:end="191:20">bswap_needed</name> <operator pos:start="191:22" pos:end="191:22">=</operator> <literal type="number" pos:start="191:24" pos:end="191:24">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="195:9" pos:end="195:39"><expr pos:start="195:9" pos:end="195:38"><name pos:start="195:9" pos:end="195:19">kernel_base</name> <operator pos:start="195:21" pos:end="195:21">=</operator> <name pos:start="195:23" pos:end="195:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>



        <expr_stmt pos:start="199:9" pos:end="201:72"><expr pos:start="199:9" pos:end="201:71"><name pos:start="199:9" pos:end="199:19">kernel_size</name> <operator pos:start="199:21" pos:end="199:21">=</operator> <call pos:start="199:23" pos:end="201:71"><name pos:start="199:23" pos:end="199:30">load_elf</name><argument_list pos:start="199:31" pos:end="201:71">(<argument pos:start="199:32" pos:end="199:46"><expr pos:start="199:32" pos:end="199:46"><name pos:start="199:32" pos:end="199:46">kernel_filename</name></expr></argument>, <argument pos:start="199:49" pos:end="199:72"><expr pos:start="199:49" pos:end="199:72"><name pos:start="199:49" pos:end="199:72">translate_kernel_address</name></expr></argument>, <argument pos:start="199:75" pos:end="199:78"><expr pos:start="199:75" pos:end="199:78"><name pos:start="199:75" pos:end="199:78">NULL</name></expr></argument>,

                               <argument pos:start="201:32" pos:end="201:35"><expr pos:start="201:32" pos:end="201:35"><name pos:start="201:32" pos:end="201:35">NULL</name></expr></argument>, <argument pos:start="201:38" pos:end="201:45"><expr pos:start="201:38" pos:end="201:45"><operator pos:start="201:38" pos:end="201:38">&amp;</operator><name pos:start="201:39" pos:end="201:45">lowaddr</name></expr></argument>, <argument pos:start="201:48" pos:end="201:51"><expr pos:start="201:48" pos:end="201:51"><name pos:start="201:48" pos:end="201:51">NULL</name></expr></argument>, <argument pos:start="201:54" pos:end="201:54"><expr pos:start="201:54" pos:end="201:54"><literal type="number" pos:start="201:54" pos:end="201:54">1</literal></expr></argument>, <argument pos:start="201:57" pos:end="201:67"><expr pos:start="201:57" pos:end="201:67"><name pos:start="201:57" pos:end="201:67">ELF_MACHINE</name></expr></argument>, <argument pos:start="201:70" pos:end="201:70"><expr pos:start="201:70" pos:end="201:70"><literal type="number" pos:start="201:70" pos:end="201:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="203:9" pos:end="209:54"><if pos:start="203:9" pos:end="209:54">if <condition pos:start="203:12" pos:end="203:28">(<expr pos:start="203:13" pos:end="203:27"><name pos:start="203:13" pos:end="203:23">kernel_size</name> <operator pos:start="203:25" pos:end="203:25">&lt;</operator> <literal type="number" pos:start="203:27" pos:end="203:27">0</literal></expr>)</condition><block type="pseudo" pos:start="205:13" pos:end="209:54"><block_content pos:start="205:13" pos:end="209:54">

            <expr_stmt pos:start="205:13" pos:end="209:54"><expr pos:start="205:13" pos:end="209:53"><name pos:start="205:13" pos:end="205:23">kernel_size</name> <operator pos:start="205:25" pos:end="205:25">=</operator> <call pos:start="205:27" pos:end="209:53"><name pos:start="205:27" pos:end="205:35">load_aout</name><argument_list pos:start="205:36" pos:end="209:53">(<argument pos:start="205:37" pos:end="205:51"><expr pos:start="205:37" pos:end="205:51"><name pos:start="205:37" pos:end="205:51">kernel_filename</name></expr></argument>, <argument pos:start="205:54" pos:end="205:64"><expr pos:start="205:54" pos:end="205:64"><name pos:start="205:54" pos:end="205:64">kernel_base</name></expr></argument>,

                                    <argument pos:start="207:37" pos:end="207:58"><expr pos:start="207:37" pos:end="207:58"><name pos:start="207:37" pos:end="207:44">ram_size</name> <operator pos:start="207:46" pos:end="207:46">-</operator> <name pos:start="207:48" pos:end="207:58">kernel_base</name></expr></argument>, <argument pos:start="207:61" pos:end="207:72"><expr pos:start="207:61" pos:end="207:72"><name pos:start="207:61" pos:end="207:72">bswap_needed</name></expr></argument>,

                                    <argument pos:start="209:37" pos:end="209:52"><expr pos:start="209:37" pos:end="209:52"><name pos:start="209:37" pos:end="209:52">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="211:9" pos:end="217:70"><if pos:start="211:9" pos:end="217:70">if <condition pos:start="211:12" pos:end="211:28">(<expr pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:23">kernel_size</name> <operator pos:start="211:25" pos:end="211:25">&lt;</operator> <literal type="number" pos:start="211:27" pos:end="211:27">0</literal></expr>)</condition><block type="pseudo" pos:start="213:13" pos:end="217:70"><block_content pos:start="213:13" pos:end="217:70">

            <expr_stmt pos:start="213:13" pos:end="217:70"><expr pos:start="213:13" pos:end="217:69"><name pos:start="213:13" pos:end="213:23">kernel_size</name> <operator pos:start="213:25" pos:end="213:25">=</operator> <call pos:start="213:27" pos:end="217:69"><name pos:start="213:27" pos:end="213:45">load_image_targphys</name><argument_list pos:start="213:46" pos:end="217:69">(<argument pos:start="213:47" pos:end="213:61"><expr pos:start="213:47" pos:end="213:61"><name pos:start="213:47" pos:end="213:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="215:47" pos:end="215:57"><expr pos:start="215:47" pos:end="215:57"><name pos:start="215:47" pos:end="215:57">kernel_base</name></expr></argument>,

                                              <argument pos:start="217:47" pos:end="217:68"><expr pos:start="217:47" pos:end="217:68"><name pos:start="217:47" pos:end="217:54">ram_size</name> <operator pos:start="217:56" pos:end="217:56">-</operator> <name pos:start="217:58" pos:end="217:68">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="219:9" pos:end="225:9"><if pos:start="219:9" pos:end="225:9">if <condition pos:start="219:12" pos:end="219:28">(<expr pos:start="219:13" pos:end="219:27"><name pos:start="219:13" pos:end="219:23">kernel_size</name> <operator pos:start="219:25" pos:end="219:25">&lt;</operator> <literal type="number" pos:start="219:27" pos:end="219:27">0</literal></expr>)</condition> <block pos:start="219:30" pos:end="225:9">{<block_content pos:start="221:13" pos:end="223:20">

            <expr_stmt pos:start="221:13" pos:end="221:76"><expr pos:start="221:13" pos:end="221:75"><call pos:start="221:13" pos:end="221:75"><name pos:start="221:13" pos:end="221:20">hw_error</name><argument_list pos:start="221:21" pos:end="221:75">(<argument pos:start="221:22" pos:end="221:57"><expr pos:start="221:22" pos:end="221:57"><literal type="string" pos:start="221:22" pos:end="221:57">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="221:60" pos:end="221:74"><expr pos:start="221:60" pos:end="221:74"><name pos:start="221:60" pos:end="221:74">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:20"><expr pos:start="223:13" pos:end="223:19"><call pos:start="223:13" pos:end="223:19"><name pos:start="223:13" pos:end="223:16">exit</name><argument_list pos:start="223:17" pos:end="223:19">(<argument pos:start="223:18" pos:end="223:18"><expr pos:start="223:18" pos:end="223:18"><literal type="number" pos:start="223:18" pos:end="223:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="227:9" pos:end="227:25">/* load initrd */</comment>

        <if_stmt pos:start="229:9" pos:end="257:9"><if pos:start="229:9" pos:end="249:9">if <condition pos:start="229:12" pos:end="229:28">(<expr pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:27">initrd_filename</name></expr>)</condition> <block pos:start="229:30" pos:end="249:9">{<block_content pos:start="231:13" pos:end="247:65">

            <expr_stmt pos:start="231:13" pos:end="231:77"><expr pos:start="231:13" pos:end="231:76"><name pos:start="231:13" pos:end="231:23">initrd_base</name> <operator pos:start="231:25" pos:end="231:25">=</operator> <call pos:start="231:27" pos:end="231:76"><name pos:start="231:27" pos:end="231:36">round_page</name><argument_list pos:start="231:37" pos:end="231:76">(<argument pos:start="231:38" pos:end="231:75"><expr pos:start="231:38" pos:end="231:75"><name pos:start="231:38" pos:end="231:48">kernel_base</name> <operator pos:start="231:50" pos:end="231:50">+</operator> <name pos:start="231:52" pos:end="231:62">kernel_size</name> <operator pos:start="231:64" pos:end="231:64">+</operator> <name pos:start="231:66" pos:end="231:75">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="235:70"><expr pos:start="233:13" pos:end="235:69"><name pos:start="233:13" pos:end="233:23">initrd_size</name> <operator pos:start="233:25" pos:end="233:25">=</operator> <call pos:start="233:27" pos:end="235:69"><name pos:start="233:27" pos:end="233:45">load_image_targphys</name><argument_list pos:start="233:46" pos:end="235:69">(<argument pos:start="233:47" pos:end="233:61"><expr pos:start="233:47" pos:end="233:61"><name pos:start="233:47" pos:end="233:61">initrd_filename</name></expr></argument>, <argument pos:start="233:64" pos:end="233:74"><expr pos:start="233:64" pos:end="233:74"><name pos:start="233:64" pos:end="233:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="235:47" pos:end="235:68"><expr pos:start="235:47" pos:end="235:68"><name pos:start="235:47" pos:end="235:54">ram_size</name> <operator pos:start="235:56" pos:end="235:56">-</operator> <name pos:start="235:58" pos:end="235:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="237:13" pos:end="245:13"><if pos:start="237:13" pos:end="245:13">if <condition pos:start="237:16" pos:end="237:32">(<expr pos:start="237:17" pos:end="237:31"><name pos:start="237:17" pos:end="237:27">initrd_size</name> <operator pos:start="237:29" pos:end="237:29">&lt;</operator> <literal type="number" pos:start="237:31" pos:end="237:31">0</literal></expr>)</condition> <block pos:start="237:34" pos:end="245:13">{<block_content pos:start="239:17" pos:end="243:24">

                <expr_stmt pos:start="239:17" pos:end="241:42"><expr pos:start="239:17" pos:end="241:41"><call pos:start="239:17" pos:end="241:41"><name pos:start="239:17" pos:end="239:24">hw_error</name><argument_list pos:start="239:25" pos:end="241:41">(<argument pos:start="239:26" pos:end="239:71"><expr pos:start="239:26" pos:end="239:71"><literal type="string" pos:start="239:26" pos:end="239:71">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                         <argument pos:start="241:26" pos:end="241:40"><expr pos:start="241:26" pos:end="241:40"><name pos:start="241:26" pos:end="241:40">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:24"><expr pos:start="243:17" pos:end="243:23"><call pos:start="243:17" pos:end="243:23"><name pos:start="243:17" pos:end="243:20">exit</name><argument_list pos:start="243:21" pos:end="243:23">(<argument pos:start="243:22" pos:end="243:22"><expr pos:start="243:22" pos:end="243:22"><literal type="number" pos:start="243:22" pos:end="243:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:65"><expr pos:start="247:13" pos:end="247:64"><name pos:start="247:13" pos:end="247:24">cmdline_base</name> <operator pos:start="247:26" pos:end="247:26">=</operator> <call pos:start="247:28" pos:end="247:64"><name pos:start="247:28" pos:end="247:37">round_page</name><argument_list pos:start="247:38" pos:end="247:64">(<argument pos:start="247:39" pos:end="247:63"><expr pos:start="247:39" pos:end="247:63"><name pos:start="247:39" pos:end="247:49">initrd_base</name> <operator pos:start="247:51" pos:end="247:51">+</operator> <name pos:start="247:53" pos:end="247:63">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="249:11" pos:end="257:9">else <block pos:start="249:16" pos:end="257:9">{<block_content pos:start="251:13" pos:end="255:78">

            <expr_stmt pos:start="251:13" pos:end="251:28"><expr pos:start="251:13" pos:end="251:27"><name pos:start="251:13" pos:end="251:23">initrd_base</name> <operator pos:start="251:25" pos:end="251:25">=</operator> <literal type="number" pos:start="251:27" pos:end="251:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:28"><expr pos:start="253:13" pos:end="253:27"><name pos:start="253:13" pos:end="253:23">initrd_size</name> <operator pos:start="253:25" pos:end="253:25">=</operator> <literal type="number" pos:start="253:27" pos:end="253:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:78"><expr pos:start="255:13" pos:end="255:77"><name pos:start="255:13" pos:end="255:24">cmdline_base</name> <operator pos:start="255:26" pos:end="255:26">=</operator> <call pos:start="255:28" pos:end="255:77"><name pos:start="255:28" pos:end="255:37">round_page</name><argument_list pos:start="255:38" pos:end="255:77">(<argument pos:start="255:39" pos:end="255:76"><expr pos:start="255:39" pos:end="255:76"><name pos:start="255:39" pos:end="255:49">kernel_base</name> <operator pos:start="255:51" pos:end="255:51">+</operator> <name pos:start="255:53" pos:end="255:63">kernel_size</name> <operator pos:start="255:65" pos:end="255:65">+</operator> <name pos:start="255:67" pos:end="255:76">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:30"><expr pos:start="259:9" pos:end="259:29"><name pos:start="259:9" pos:end="259:23">ppc_boot_device</name> <operator pos:start="259:25" pos:end="259:25">=</operator> <literal type="char" pos:start="259:27" pos:end="259:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="261:7" pos:end="299:5">else <block pos:start="261:12" pos:end="299:5">{<block_content pos:start="263:9" pos:end="297:9">

        <expr_stmt pos:start="263:9" pos:end="263:24"><expr pos:start="263:9" pos:end="263:23"><name pos:start="263:9" pos:end="263:19">kernel_base</name> <operator pos:start="263:21" pos:end="263:21">=</operator> <literal type="number" pos:start="263:23" pos:end="263:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:24"><expr pos:start="265:9" pos:end="265:23"><name pos:start="265:9" pos:end="265:19">kernel_size</name> <operator pos:start="265:21" pos:end="265:21">=</operator> <literal type="number" pos:start="265:23" pos:end="265:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:24"><expr pos:start="267:9" pos:end="267:23"><name pos:start="267:9" pos:end="267:19">initrd_base</name> <operator pos:start="267:21" pos:end="267:21">=</operator> <literal type="number" pos:start="267:23" pos:end="267:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:24"><expr pos:start="269:9" pos:end="269:23"><name pos:start="269:9" pos:end="269:19">initrd_size</name> <operator pos:start="269:21" pos:end="269:21">=</operator> <literal type="number" pos:start="269:23" pos:end="269:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:31"><expr pos:start="271:9" pos:end="271:30"><name pos:start="271:9" pos:end="271:23">ppc_boot_device</name> <operator pos:start="271:25" pos:end="271:25">=</operator> <literal type="char" pos:start="271:27" pos:end="271:30">'\0'</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="273:9" pos:end="277:11">/* We consider that NewWorld PowerMac never have any floppy drive

         * For now, OHW cannot boot from the network.

         */</comment>

        <for pos:start="279:9" pos:end="289:9">for <control pos:start="279:13" pos:end="279:48">(<init pos:start="279:14" pos:end="279:19"><expr pos:start="279:14" pos:end="279:18"><name pos:start="279:14" pos:end="279:14">i</name> <operator pos:start="279:16" pos:end="279:16">=</operator> <literal type="number" pos:start="279:18" pos:end="279:18">0</literal></expr>;</init> <condition pos:start="279:21" pos:end="279:43"><expr pos:start="279:21" pos:end="279:42"><name pos:start="279:21" pos:end="279:34"><name pos:start="279:21" pos:end="279:31">boot_device</name><index pos:start="279:32" pos:end="279:34">[<expr pos:start="279:33" pos:end="279:33"><name pos:start="279:33" pos:end="279:33">i</name></expr>]</index></name> <operator pos:start="279:36" pos:end="279:37">!=</operator> <literal type="char" pos:start="279:39" pos:end="279:42">'\0'</literal></expr>;</condition> <incr pos:start="279:45" pos:end="279:47"><expr pos:start="279:45" pos:end="279:47"><name pos:start="279:45" pos:end="279:45">i</name><operator pos:start="279:46" pos:end="279:47">++</operator></expr></incr>)</control> <block pos:start="279:50" pos:end="289:9">{<block_content pos:start="281:13" pos:end="287:13">

            <if_stmt pos:start="281:13" pos:end="287:13"><if pos:start="281:13" pos:end="287:13">if <condition pos:start="281:16" pos:end="281:63">(<expr pos:start="281:17" pos:end="281:62"><name pos:start="281:17" pos:end="281:30"><name pos:start="281:17" pos:end="281:27">boot_device</name><index pos:start="281:28" pos:end="281:30">[<expr pos:start="281:29" pos:end="281:29"><name pos:start="281:29" pos:end="281:29">i</name></expr>]</index></name> <operator pos:start="281:32" pos:end="281:33">&gt;=</operator> <literal type="char" pos:start="281:35" pos:end="281:37">'c'</literal> <operator pos:start="281:39" pos:end="281:40">&amp;&amp;</operator> <name pos:start="281:42" pos:end="281:55"><name pos:start="281:42" pos:end="281:52">boot_device</name><index pos:start="281:53" pos:end="281:55">[<expr pos:start="281:54" pos:end="281:54"><name pos:start="281:54" pos:end="281:54">i</name></expr>]</index></name> <operator pos:start="281:57" pos:end="281:58">&lt;=</operator> <literal type="char" pos:start="281:60" pos:end="281:62">'f'</literal></expr>)</condition> <block pos:start="281:65" pos:end="287:13">{<block_content pos:start="283:17" pos:end="285:22">

                <expr_stmt pos:start="283:17" pos:end="283:49"><expr pos:start="283:17" pos:end="283:48"><name pos:start="283:17" pos:end="283:31">ppc_boot_device</name> <operator pos:start="283:33" pos:end="283:33">=</operator> <name pos:start="283:35" pos:end="283:48"><name pos:start="283:35" pos:end="283:45">boot_device</name><index pos:start="283:46" pos:end="283:48">[<expr pos:start="283:47" pos:end="283:47"><name pos:start="283:47" pos:end="283:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="285:17" pos:end="285:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="291:9" pos:end="297:9"><if pos:start="291:9" pos:end="297:9">if <condition pos:start="291:12" pos:end="291:36">(<expr pos:start="291:13" pos:end="291:35"><name pos:start="291:13" pos:end="291:27">ppc_boot_device</name> <operator pos:start="291:29" pos:end="291:30">==</operator> <literal type="char" pos:start="291:32" pos:end="291:35">'\0'</literal></expr>)</condition> <block pos:start="291:38" pos:end="297:9">{<block_content pos:start="293:13" pos:end="295:20">

            <expr_stmt pos:start="293:13" pos:end="293:72"><expr pos:start="293:13" pos:end="293:71"><call pos:start="293:13" pos:end="293:71"><name pos:start="293:13" pos:end="293:19">fprintf</name><argument_list pos:start="293:20" pos:end="293:71">(<argument pos:start="293:21" pos:end="293:26"><expr pos:start="293:21" pos:end="293:26"><name pos:start="293:21" pos:end="293:26">stderr</name></expr></argument>, <argument pos:start="293:29" pos:end="293:70"><expr pos:start="293:29" pos:end="293:70"><literal type="string" pos:start="293:29" pos:end="293:70">"No valid boot device for Mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:20"><expr pos:start="295:13" pos:end="295:19"><call pos:start="295:13" pos:end="295:19"><name pos:start="295:13" pos:end="295:16">exit</name><argument_list pos:start="295:17" pos:end="295:19">(<argument pos:start="295:18" pos:end="295:18"><expr pos:start="295:18" pos:end="295:18"><literal type="number" pos:start="295:18" pos:end="295:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="303:5" pos:end="303:39">/* Register 8 MB of ISA IO space */</comment>

    <expr_stmt pos:start="305:5" pos:end="307:61"><expr pos:start="305:5" pos:end="307:60"><call pos:start="305:5" pos:end="307:60"><name pos:start="305:5" pos:end="305:28">memory_region_init_alias</name><argument_list pos:start="305:29" pos:end="307:60">(<argument pos:start="305:30" pos:end="305:32"><expr pos:start="305:30" pos:end="305:32"><name pos:start="305:30" pos:end="305:32">isa</name></expr></argument>, <argument pos:start="305:35" pos:end="305:38"><expr pos:start="305:35" pos:end="305:38"><name pos:start="305:35" pos:end="305:38">NULL</name></expr></argument>, <argument pos:start="305:41" pos:end="305:50"><expr pos:start="305:41" pos:end="305:50"><literal type="string" pos:start="305:41" pos:end="305:50">"isa_mmio"</literal></expr></argument>,

                             <argument pos:start="307:30" pos:end="307:44"><expr pos:start="307:30" pos:end="307:44"><call pos:start="307:30" pos:end="307:44"><name pos:start="307:30" pos:end="307:42">get_system_io</name><argument_list pos:start="307:43" pos:end="307:44">()</argument_list></call></expr></argument>, <argument pos:start="307:47" pos:end="307:47"><expr pos:start="307:47" pos:end="307:47"><literal type="number" pos:start="307:47" pos:end="307:47">0</literal></expr></argument>, <argument pos:start="307:50" pos:end="307:59"><expr pos:start="307:50" pos:end="307:59"><literal type="number" pos:start="307:50" pos:end="307:59">0x00800000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="309:5" pos:end="309:70"><expr pos:start="309:5" pos:end="309:69"><call pos:start="309:5" pos:end="309:69"><name pos:start="309:5" pos:end="309:31">memory_region_add_subregion</name><argument_list pos:start="309:32" pos:end="309:69">(<argument pos:start="309:33" pos:end="309:51"><expr pos:start="309:33" pos:end="309:51"><call pos:start="309:33" pos:end="309:51"><name pos:start="309:33" pos:end="309:49">get_system_memory</name><argument_list pos:start="309:50" pos:end="309:51">()</argument_list></call></expr></argument>, <argument pos:start="309:54" pos:end="309:63"><expr pos:start="309:54" pos:end="309:63"><literal type="number" pos:start="309:54" pos:end="309:63">0xf2000000</literal></expr></argument>, <argument pos:start="309:66" pos:end="309:68"><expr pos:start="309:66" pos:end="309:68"><name pos:start="309:66" pos:end="309:68">isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="313:5" pos:end="313:48">/* UniN init: XXX should be a real device */</comment>

    <expr_stmt pos:start="315:5" pos:end="315:79"><expr pos:start="315:5" pos:end="315:78"><call pos:start="315:5" pos:end="315:78"><name pos:start="315:5" pos:end="315:25">memory_region_init_io</name><argument_list pos:start="315:26" pos:end="315:78">(<argument pos:start="315:27" pos:end="315:37"><expr pos:start="315:27" pos:end="315:37"><name pos:start="315:27" pos:end="315:37">unin_memory</name></expr></argument>, <argument pos:start="315:40" pos:end="315:43"><expr pos:start="315:40" pos:end="315:43"><name pos:start="315:40" pos:end="315:43">NULL</name></expr></argument>, <argument pos:start="315:46" pos:end="315:54"><expr pos:start="315:46" pos:end="315:54"><operator pos:start="315:46" pos:end="315:46">&amp;</operator><name pos:start="315:47" pos:end="315:54">unin_ops</name></expr></argument>, <argument pos:start="315:57" pos:end="315:61"><expr pos:start="315:57" pos:end="315:61"><name pos:start="315:57" pos:end="315:61">token</name></expr></argument>, <argument pos:start="315:64" pos:end="315:69"><expr pos:start="315:64" pos:end="315:69"><literal type="string" pos:start="315:64" pos:end="315:69">"unin"</literal></expr></argument>, <argument pos:start="315:72" pos:end="315:77"><expr pos:start="315:72" pos:end="315:77"><literal type="number" pos:start="315:72" pos:end="315:77">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="317:5" pos:end="317:78"><expr pos:start="317:5" pos:end="317:77"><call pos:start="317:5" pos:end="317:77"><name pos:start="317:5" pos:end="317:31">memory_region_add_subregion</name><argument_list pos:start="317:32" pos:end="317:77">(<argument pos:start="317:33" pos:end="317:51"><expr pos:start="317:33" pos:end="317:51"><call pos:start="317:33" pos:end="317:51"><name pos:start="317:33" pos:end="317:49">get_system_memory</name><argument_list pos:start="317:50" pos:end="317:51">()</argument_list></call></expr></argument>, <argument pos:start="317:54" pos:end="317:63"><expr pos:start="317:54" pos:end="317:63"><literal type="number" pos:start="317:54" pos:end="317:63">0xf8000000</literal></expr></argument>, <argument pos:start="317:66" pos:end="317:76"><expr pos:start="317:66" pos:end="317:76"><name pos:start="317:66" pos:end="317:76">unin_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="321:5" pos:end="321:80"><expr pos:start="321:5" pos:end="321:79"><call pos:start="321:5" pos:end="321:79"><name pos:start="321:5" pos:end="321:25">memory_region_init_io</name><argument_list pos:start="321:26" pos:end="321:79">(<argument pos:start="321:27" pos:end="321:38"><expr pos:start="321:27" pos:end="321:38"><name pos:start="321:27" pos:end="321:38">unin2_memory</name></expr></argument>, <argument pos:start="321:41" pos:end="321:44"><expr pos:start="321:41" pos:end="321:44"><name pos:start="321:41" pos:end="321:44">NULL</name></expr></argument>, <argument pos:start="321:47" pos:end="321:55"><expr pos:start="321:47" pos:end="321:55"><operator pos:start="321:47" pos:end="321:47">&amp;</operator><name pos:start="321:48" pos:end="321:55">unin_ops</name></expr></argument>, <argument pos:start="321:58" pos:end="321:62"><expr pos:start="321:58" pos:end="321:62"><name pos:start="321:58" pos:end="321:62">token</name></expr></argument>, <argument pos:start="321:65" pos:end="321:70"><expr pos:start="321:65" pos:end="321:70"><literal type="string" pos:start="321:65" pos:end="321:70">"unin"</literal></expr></argument>, <argument pos:start="321:73" pos:end="321:78"><expr pos:start="321:73" pos:end="321:78"><literal type="number" pos:start="321:73" pos:end="321:78">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:79"><expr pos:start="323:5" pos:end="323:78"><call pos:start="323:5" pos:end="323:78"><name pos:start="323:5" pos:end="323:31">memory_region_add_subregion</name><argument_list pos:start="323:32" pos:end="323:78">(<argument pos:start="323:33" pos:end="323:51"><expr pos:start="323:33" pos:end="323:51"><call pos:start="323:33" pos:end="323:51"><name pos:start="323:33" pos:end="323:49">get_system_memory</name><argument_list pos:start="323:50" pos:end="323:51">()</argument_list></call></expr></argument>, <argument pos:start="323:54" pos:end="323:63"><expr pos:start="323:54" pos:end="323:63"><literal type="number" pos:start="323:54" pos:end="323:63">0xf3000000</literal></expr></argument>, <argument pos:start="323:66" pos:end="323:77"><expr pos:start="323:66" pos:end="323:77"><name pos:start="323:66" pos:end="323:77">unin2_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="327:5" pos:end="327:60"><expr pos:start="327:5" pos:end="327:59"><name pos:start="327:5" pos:end="327:16">openpic_irqs</name> <operator pos:start="327:18" pos:end="327:18">=</operator> <call pos:start="327:20" pos:end="327:59"><name pos:start="327:20" pos:end="327:28">g_malloc0</name><argument_list pos:start="327:29" pos:end="327:59">(<argument pos:start="327:30" pos:end="327:58"><expr pos:start="327:30" pos:end="327:58"><name pos:start="327:30" pos:end="327:37">smp_cpus</name> <operator pos:start="327:39" pos:end="327:39">*</operator> <sizeof pos:start="327:41" pos:end="327:58">sizeof<argument_list pos:start="327:47" pos:end="327:58">(<argument pos:start="327:48" pos:end="327:57"><expr pos:start="327:48" pos:end="327:57"><name pos:start="327:48" pos:end="327:55">qemu_irq</name> <operator pos:start="327:57" pos:end="327:57">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="329:5" pos:end="331:67"><expr pos:start="329:5" pos:end="331:66"><name pos:start="329:5" pos:end="329:19"><name pos:start="329:5" pos:end="329:16">openpic_irqs</name><index pos:start="329:17" pos:end="329:19">[<expr pos:start="329:18" pos:end="329:18"><literal type="number" pos:start="329:18" pos:end="329:18">0</literal></expr>]</index></name> <operator pos:start="329:21" pos:end="329:21">=</operator>

        <call pos:start="331:9" pos:end="331:66"><name pos:start="331:9" pos:end="331:17">g_malloc0</name><argument_list pos:start="331:18" pos:end="331:66">(<argument pos:start="331:19" pos:end="331:65"><expr pos:start="331:19" pos:end="331:65"><name pos:start="331:19" pos:end="331:26">smp_cpus</name> <operator pos:start="331:28" pos:end="331:28">*</operator> <sizeof pos:start="331:30" pos:end="331:45">sizeof<argument_list pos:start="331:36" pos:end="331:45">(<argument pos:start="331:37" pos:end="331:44"><expr pos:start="331:37" pos:end="331:44"><name pos:start="331:37" pos:end="331:44">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="331:47" pos:end="331:47">*</operator> <name pos:start="331:49" pos:end="331:65">OPENPIC_OUTPUT_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="333:5" pos:end="411:5">for <control pos:start="333:9" pos:end="333:34">(<init pos:start="333:10" pos:end="333:15"><expr pos:start="333:10" pos:end="333:14"><name pos:start="333:10" pos:end="333:10">i</name> <operator pos:start="333:12" pos:end="333:12">=</operator> <literal type="number" pos:start="333:14" pos:end="333:14">0</literal></expr>;</init> <condition pos:start="333:17" pos:end="333:29"><expr pos:start="333:17" pos:end="333:28"><name pos:start="333:17" pos:end="333:17">i</name> <operator pos:start="333:19" pos:end="333:19">&lt;</operator> <name pos:start="333:21" pos:end="333:28">smp_cpus</name></expr>;</condition> <incr pos:start="333:31" pos:end="333:33"><expr pos:start="333:31" pos:end="333:33"><name pos:start="333:31" pos:end="333:31">i</name><operator pos:start="333:32" pos:end="333:33">++</operator></expr></incr>)</control> <block pos:start="333:36" pos:end="411:5">{<block_content pos:start="341:9" pos:end="409:9">

        <comment type="block" pos:start="335:9" pos:end="339:11">/* Mac99 IRQ connection between OpenPIC outputs pins

         * and PowerPC input pins

         */</comment>

        <switch pos:start="341:9" pos:end="409:9">switch <condition pos:start="341:16" pos:end="341:31">(<expr pos:start="341:17" pos:end="341:30"><call pos:start="341:17" pos:end="341:30"><name pos:start="341:17" pos:end="341:25">PPC_INPUT</name><argument_list pos:start="341:26" pos:end="341:30">(<argument pos:start="341:27" pos:end="341:29"><expr pos:start="341:27" pos:end="341:29"><name pos:start="341:27" pos:end="341:29">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="341:33" pos:end="409:9">{<block_content pos:start="343:9" pos:end="407:20">

        <case pos:start="343:9" pos:end="343:33">case <expr pos:start="343:14" pos:end="343:32"><name pos:start="343:14" pos:end="343:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>

            <expr_stmt pos:start="345:13" pos:end="345:72"><expr pos:start="345:13" pos:end="345:71"><name pos:start="345:13" pos:end="345:27"><name pos:start="345:13" pos:end="345:24">openpic_irqs</name><index pos:start="345:25" pos:end="345:27">[<expr pos:start="345:26" pos:end="345:26"><name pos:start="345:26" pos:end="345:26">i</name></expr>]</index></name> <operator pos:start="345:29" pos:end="345:29">=</operator> <name pos:start="345:31" pos:end="345:45"><name pos:start="345:31" pos:end="345:42">openpic_irqs</name><index pos:start="345:43" pos:end="345:45">[<expr pos:start="345:44" pos:end="345:44"><literal type="number" pos:start="345:44" pos:end="345:44">0</literal></expr>]</index></name> <operator pos:start="345:47" pos:end="345:47">+</operator> <operator pos:start="345:49" pos:end="345:49">(</operator><name pos:start="345:50" pos:end="345:50">i</name> <operator pos:start="345:52" pos:end="345:52">*</operator> <name pos:start="345:54" pos:end="345:70">OPENPIC_OUTPUT_NB</name><operator pos:start="345:71" pos:end="345:71">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="347:13" pos:end="349:64"><expr pos:start="347:13" pos:end="349:63"><name pos:start="347:13" pos:end="347:47"><name pos:start="347:13" pos:end="347:24">openpic_irqs</name><index pos:start="347:25" pos:end="347:27">[<expr pos:start="347:26" pos:end="347:26"><name pos:start="347:26" pos:end="347:26">i</name></expr>]</index><index pos:start="347:28" pos:end="347:47">[<expr pos:start="347:29" pos:end="347:46"><name pos:start="347:29" pos:end="347:46">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="347:49" pos:end="347:49">=</operator>

                <operator pos:start="349:17" pos:end="349:17">(</operator><operator pos:start="349:18" pos:end="349:18">(</operator><name pos:start="349:19" pos:end="349:26">qemu_irq</name> <operator pos:start="349:28" pos:end="349:28">*</operator><operator pos:start="349:29" pos:end="349:29">)</operator><name pos:start="349:30" pos:end="349:44"><name pos:start="349:30" pos:end="349:32">env</name><operator pos:start="349:33" pos:end="349:34">-&gt;</operator><name pos:start="349:35" pos:end="349:44">irq_inputs</name></name><operator pos:start="349:45" pos:end="349:45">)</operator><index pos:start="349:46" pos:end="349:63">[<expr pos:start="349:47" pos:end="349:62"><name pos:start="349:47" pos:end="349:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="353:64"><expr pos:start="351:13" pos:end="353:63"><name pos:start="351:13" pos:end="351:48"><name pos:start="351:13" pos:end="351:24">openpic_irqs</name><index pos:start="351:25" pos:end="351:27">[<expr pos:start="351:26" pos:end="351:26"><name pos:start="351:26" pos:end="351:26">i</name></expr>]</index><index pos:start="351:28" pos:end="351:48">[<expr pos:start="351:29" pos:end="351:47"><name pos:start="351:29" pos:end="351:47">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="351:50" pos:end="351:50">=</operator>

                <operator pos:start="353:17" pos:end="353:17">(</operator><operator pos:start="353:18" pos:end="353:18">(</operator><name pos:start="353:19" pos:end="353:26">qemu_irq</name> <operator pos:start="353:28" pos:end="353:28">*</operator><operator pos:start="353:29" pos:end="353:29">)</operator><name pos:start="353:30" pos:end="353:44"><name pos:start="353:30" pos:end="353:32">env</name><operator pos:start="353:33" pos:end="353:34">-&gt;</operator><name pos:start="353:35" pos:end="353:44">irq_inputs</name></name><operator pos:start="353:45" pos:end="353:45">)</operator><index pos:start="353:46" pos:end="353:63">[<expr pos:start="353:47" pos:end="353:62"><name pos:start="353:47" pos:end="353:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="357:64"><expr pos:start="355:13" pos:end="357:63"><name pos:start="355:13" pos:end="355:47"><name pos:start="355:13" pos:end="355:24">openpic_irqs</name><index pos:start="355:25" pos:end="355:27">[<expr pos:start="355:26" pos:end="355:26"><name pos:start="355:26" pos:end="355:26">i</name></expr>]</index><index pos:start="355:28" pos:end="355:47">[<expr pos:start="355:29" pos:end="355:46"><name pos:start="355:29" pos:end="355:46">OPENPIC_OUTPUT_MCK</name></expr>]</index></name> <operator pos:start="355:49" pos:end="355:49">=</operator>

                <operator pos:start="357:17" pos:end="357:17">(</operator><operator pos:start="357:18" pos:end="357:18">(</operator><name pos:start="357:19" pos:end="357:26">qemu_irq</name> <operator pos:start="357:28" pos:end="357:28">*</operator><operator pos:start="357:29" pos:end="357:29">)</operator><name pos:start="357:30" pos:end="357:44"><name pos:start="357:30" pos:end="357:32">env</name><operator pos:start="357:33" pos:end="357:34">-&gt;</operator><name pos:start="357:35" pos:end="357:44">irq_inputs</name></name><operator pos:start="357:45" pos:end="357:45">)</operator><index pos:start="357:46" pos:end="357:63">[<expr pos:start="357:47" pos:end="357:62"><name pos:start="357:47" pos:end="357:62">PPC6xx_INPUT_MCP</name></expr>]</index></expr>;</expr_stmt>

            <comment type="block" pos:start="359:13" pos:end="359:33">/* Not connected ? */</comment>

            <expr_stmt pos:start="361:13" pos:end="361:57"><expr pos:start="361:13" pos:end="361:56"><name pos:start="361:13" pos:end="361:49"><name pos:start="361:13" pos:end="361:24">openpic_irqs</name><index pos:start="361:25" pos:end="361:27">[<expr pos:start="361:26" pos:end="361:26"><name pos:start="361:26" pos:end="361:26">i</name></expr>]</index><index pos:start="361:28" pos:end="361:49">[<expr pos:start="361:29" pos:end="361:48"><name pos:start="361:29" pos:end="361:48">OPENPIC_OUTPUT_DEBUG</name></expr>]</index></name> <operator pos:start="361:51" pos:end="361:51">=</operator> <name pos:start="361:53" pos:end="361:56">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="363:13" pos:end="363:28">/* Check this */</comment>

            <expr_stmt pos:start="365:13" pos:end="367:67"><expr pos:start="365:13" pos:end="367:66"><name pos:start="365:13" pos:end="365:49"><name pos:start="365:13" pos:end="365:24">openpic_irqs</name><index pos:start="365:25" pos:end="365:27">[<expr pos:start="365:26" pos:end="365:26"><name pos:start="365:26" pos:end="365:26">i</name></expr>]</index><index pos:start="365:28" pos:end="365:49">[<expr pos:start="365:29" pos:end="365:48"><name pos:start="365:29" pos:end="365:48">OPENPIC_OUTPUT_RESET</name></expr>]</index></name> <operator pos:start="365:51" pos:end="365:51">=</operator>

                <operator pos:start="367:17" pos:end="367:17">(</operator><operator pos:start="367:18" pos:end="367:18">(</operator><name pos:start="367:19" pos:end="367:26">qemu_irq</name> <operator pos:start="367:28" pos:end="367:28">*</operator><operator pos:start="367:29" pos:end="367:29">)</operator><name pos:start="367:30" pos:end="367:44"><name pos:start="367:30" pos:end="367:32">env</name><operator pos:start="367:33" pos:end="367:34">-&gt;</operator><name pos:start="367:35" pos:end="367:44">irq_inputs</name></name><operator pos:start="367:45" pos:end="367:45">)</operator><index pos:start="367:46" pos:end="367:66">[<expr pos:start="367:47" pos:end="367:65"><name pos:start="367:47" pos:end="367:65">PPC6xx_INPUT_HRESET</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="369:13" pos:end="372:0">break;</break>

<cpp:if pos:start="371:1" pos:end="371:25">#<cpp:directive pos:start="371:2" pos:end="371:3">if</cpp:directive> <expr pos:start="371:5" pos:end="371:25"><call pos:start="371:5" pos:end="371:25"><name pos:start="371:5" pos:end="371:11">defined</name><argument_list pos:start="371:12" pos:end="371:25">(<argument pos:start="371:13" pos:end="371:24"><expr pos:start="371:13" pos:end="371:24"><name pos:start="371:13" pos:end="371:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="373:9" pos:end="373:33">case <expr pos:start="373:14" pos:end="373:32"><name pos:start="373:14" pos:end="373:32">PPC_FLAGS_INPUT_970</name></expr>:</case>

            <expr_stmt pos:start="375:13" pos:end="375:72"><expr pos:start="375:13" pos:end="375:71"><name pos:start="375:13" pos:end="375:27"><name pos:start="375:13" pos:end="375:24">openpic_irqs</name><index pos:start="375:25" pos:end="375:27">[<expr pos:start="375:26" pos:end="375:26"><name pos:start="375:26" pos:end="375:26">i</name></expr>]</index></name> <operator pos:start="375:29" pos:end="375:29">=</operator> <name pos:start="375:31" pos:end="375:45"><name pos:start="375:31" pos:end="375:42">openpic_irqs</name><index pos:start="375:43" pos:end="375:45">[<expr pos:start="375:44" pos:end="375:44"><literal type="number" pos:start="375:44" pos:end="375:44">0</literal></expr>]</index></name> <operator pos:start="375:47" pos:end="375:47">+</operator> <operator pos:start="375:49" pos:end="375:49">(</operator><name pos:start="375:50" pos:end="375:50">i</name> <operator pos:start="375:52" pos:end="375:52">*</operator> <name pos:start="375:54" pos:end="375:70">OPENPIC_OUTPUT_NB</name><operator pos:start="375:71" pos:end="375:71">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="377:13" pos:end="379:64"><expr pos:start="377:13" pos:end="379:63"><name pos:start="377:13" pos:end="377:47"><name pos:start="377:13" pos:end="377:24">openpic_irqs</name><index pos:start="377:25" pos:end="377:27">[<expr pos:start="377:26" pos:end="377:26"><name pos:start="377:26" pos:end="377:26">i</name></expr>]</index><index pos:start="377:28" pos:end="377:47">[<expr pos:start="377:29" pos:end="377:46"><name pos:start="377:29" pos:end="377:46">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="377:49" pos:end="377:49">=</operator>

                <operator pos:start="379:17" pos:end="379:17">(</operator><operator pos:start="379:18" pos:end="379:18">(</operator><name pos:start="379:19" pos:end="379:26">qemu_irq</name> <operator pos:start="379:28" pos:end="379:28">*</operator><operator pos:start="379:29" pos:end="379:29">)</operator><name pos:start="379:30" pos:end="379:44"><name pos:start="379:30" pos:end="379:32">env</name><operator pos:start="379:33" pos:end="379:34">-&gt;</operator><name pos:start="379:35" pos:end="379:44">irq_inputs</name></name><operator pos:start="379:45" pos:end="379:45">)</operator><index pos:start="379:46" pos:end="379:63">[<expr pos:start="379:47" pos:end="379:62"><name pos:start="379:47" pos:end="379:62">PPC970_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="381:13" pos:end="383:64"><expr pos:start="381:13" pos:end="383:63"><name pos:start="381:13" pos:end="381:48"><name pos:start="381:13" pos:end="381:24">openpic_irqs</name><index pos:start="381:25" pos:end="381:27">[<expr pos:start="381:26" pos:end="381:26"><name pos:start="381:26" pos:end="381:26">i</name></expr>]</index><index pos:start="381:28" pos:end="381:48">[<expr pos:start="381:29" pos:end="381:47"><name pos:start="381:29" pos:end="381:47">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="381:50" pos:end="381:50">=</operator>

                <operator pos:start="383:17" pos:end="383:17">(</operator><operator pos:start="383:18" pos:end="383:18">(</operator><name pos:start="383:19" pos:end="383:26">qemu_irq</name> <operator pos:start="383:28" pos:end="383:28">*</operator><operator pos:start="383:29" pos:end="383:29">)</operator><name pos:start="383:30" pos:end="383:44"><name pos:start="383:30" pos:end="383:32">env</name><operator pos:start="383:33" pos:end="383:34">-&gt;</operator><name pos:start="383:35" pos:end="383:44">irq_inputs</name></name><operator pos:start="383:45" pos:end="383:45">)</operator><index pos:start="383:46" pos:end="383:63">[<expr pos:start="383:47" pos:end="383:62"><name pos:start="383:47" pos:end="383:62">PPC970_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="385:13" pos:end="387:64"><expr pos:start="385:13" pos:end="387:63"><name pos:start="385:13" pos:end="385:47"><name pos:start="385:13" pos:end="385:24">openpic_irqs</name><index pos:start="385:25" pos:end="385:27">[<expr pos:start="385:26" pos:end="385:26"><name pos:start="385:26" pos:end="385:26">i</name></expr>]</index><index pos:start="385:28" pos:end="385:47">[<expr pos:start="385:29" pos:end="385:46"><name pos:start="385:29" pos:end="385:46">OPENPIC_OUTPUT_MCK</name></expr>]</index></name> <operator pos:start="385:49" pos:end="385:49">=</operator>

                <operator pos:start="387:17" pos:end="387:17">(</operator><operator pos:start="387:18" pos:end="387:18">(</operator><name pos:start="387:19" pos:end="387:26">qemu_irq</name> <operator pos:start="387:28" pos:end="387:28">*</operator><operator pos:start="387:29" pos:end="387:29">)</operator><name pos:start="387:30" pos:end="387:44"><name pos:start="387:30" pos:end="387:32">env</name><operator pos:start="387:33" pos:end="387:34">-&gt;</operator><name pos:start="387:35" pos:end="387:44">irq_inputs</name></name><operator pos:start="387:45" pos:end="387:45">)</operator><index pos:start="387:46" pos:end="387:63">[<expr pos:start="387:47" pos:end="387:62"><name pos:start="387:47" pos:end="387:62">PPC970_INPUT_MCP</name></expr>]</index></expr>;</expr_stmt>

            <comment type="block" pos:start="389:13" pos:end="389:33">/* Not connected ? */</comment>

            <expr_stmt pos:start="391:13" pos:end="391:57"><expr pos:start="391:13" pos:end="391:56"><name pos:start="391:13" pos:end="391:49"><name pos:start="391:13" pos:end="391:24">openpic_irqs</name><index pos:start="391:25" pos:end="391:27">[<expr pos:start="391:26" pos:end="391:26"><name pos:start="391:26" pos:end="391:26">i</name></expr>]</index><index pos:start="391:28" pos:end="391:49">[<expr pos:start="391:29" pos:end="391:48"><name pos:start="391:29" pos:end="391:48">OPENPIC_OUTPUT_DEBUG</name></expr>]</index></name> <operator pos:start="391:51" pos:end="391:51">=</operator> <name pos:start="391:53" pos:end="391:56">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="393:13" pos:end="393:28">/* Check this */</comment>

            <expr_stmt pos:start="395:13" pos:end="397:67"><expr pos:start="395:13" pos:end="397:66"><name pos:start="395:13" pos:end="395:49"><name pos:start="395:13" pos:end="395:24">openpic_irqs</name><index pos:start="395:25" pos:end="395:27">[<expr pos:start="395:26" pos:end="395:26"><name pos:start="395:26" pos:end="395:26">i</name></expr>]</index><index pos:start="395:28" pos:end="395:49">[<expr pos:start="395:29" pos:end="395:48"><name pos:start="395:29" pos:end="395:48">OPENPIC_OUTPUT_RESET</name></expr>]</index></name> <operator pos:start="395:51" pos:end="395:51">=</operator>

                <operator pos:start="397:17" pos:end="397:17">(</operator><operator pos:start="397:18" pos:end="397:18">(</operator><name pos:start="397:19" pos:end="397:26">qemu_irq</name> <operator pos:start="397:28" pos:end="397:28">*</operator><operator pos:start="397:29" pos:end="397:29">)</operator><name pos:start="397:30" pos:end="397:44"><name pos:start="397:30" pos:end="397:32">env</name><operator pos:start="397:33" pos:end="397:34">-&gt;</operator><name pos:start="397:35" pos:end="397:44">irq_inputs</name></name><operator pos:start="397:45" pos:end="397:45">)</operator><index pos:start="397:46" pos:end="397:66">[<expr pos:start="397:47" pos:end="397:65"><name pos:start="397:47" pos:end="397:65">PPC970_INPUT_HRESET</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="399:13" pos:end="402:0">break;</break>

<cpp:endif pos:start="401:1" pos:end="401:6">#<cpp:directive pos:start="401:2" pos:end="401:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="401:8" pos:end="401:34">/* defined(TARGET_PPC64) */</comment>

        <default pos:start="403:9" pos:end="403:16">default:</default>

            <expr_stmt pos:start="405:13" pos:end="405:67"><expr pos:start="405:13" pos:end="405:66"><call pos:start="405:13" pos:end="405:66"><name pos:start="405:13" pos:end="405:20">hw_error</name><argument_list pos:start="405:21" pos:end="405:66">(<argument pos:start="405:22" pos:end="405:65"><expr pos:start="405:22" pos:end="405:65"><literal type="string" pos:start="405:22" pos:end="405:65">"Bus model not supported on mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="407:13" pos:end="407:20"><expr pos:start="407:13" pos:end="407:19"><call pos:start="407:13" pos:end="407:19"><name pos:start="407:13" pos:end="407:16">exit</name><argument_list pos:start="407:17" pos:end="407:19">(<argument pos:start="407:18" pos:end="407:18"><expr pos:start="407:18" pos:end="407:18"><literal type="number" pos:start="407:18" pos:end="407:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <expr_stmt pos:start="415:5" pos:end="415:31"><expr pos:start="415:5" pos:end="415:30"><name pos:start="415:5" pos:end="415:7">pic</name> <operator pos:start="415:9" pos:end="415:9">=</operator> <call pos:start="415:11" pos:end="415:30"><name pos:start="415:11" pos:end="415:16">g_new0</name><argument_list pos:start="415:17" pos:end="415:30">(<argument pos:start="415:18" pos:end="415:25"><expr pos:start="415:18" pos:end="415:25"><name pos:start="415:18" pos:end="415:25">qemu_irq</name></expr></argument>, <argument pos:start="415:28" pos:end="415:29"><expr pos:start="415:28" pos:end="415:29"><literal type="number" pos:start="415:28" pos:end="415:29">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="419:5" pos:end="419:42"><expr pos:start="419:5" pos:end="419:41"><name pos:start="419:5" pos:end="419:7">dev</name> <operator pos:start="419:9" pos:end="419:9">=</operator> <call pos:start="419:11" pos:end="419:41"><name pos:start="419:11" pos:end="419:21">qdev_create</name><argument_list pos:start="419:22" pos:end="419:41">(<argument pos:start="419:23" pos:end="419:26"><expr pos:start="419:23" pos:end="419:26"><name pos:start="419:23" pos:end="419:26">NULL</name></expr></argument>, <argument pos:start="419:29" pos:end="419:40"><expr pos:start="419:29" pos:end="419:40"><name pos:start="419:29" pos:end="419:40">TYPE_OPENPIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="421:5" pos:end="421:60"><expr pos:start="421:5" pos:end="421:59"><call pos:start="421:5" pos:end="421:59"><name pos:start="421:5" pos:end="421:24">qdev_prop_set_uint32</name><argument_list pos:start="421:25" pos:end="421:59">(<argument pos:start="421:26" pos:end="421:28"><expr pos:start="421:26" pos:end="421:28"><name pos:start="421:26" pos:end="421:28">dev</name></expr></argument>, <argument pos:start="421:31" pos:end="421:37"><expr pos:start="421:31" pos:end="421:37"><literal type="string" pos:start="421:31" pos:end="421:37">"model"</literal></expr></argument>, <argument pos:start="421:40" pos:end="421:58"><expr pos:start="421:40" pos:end="421:58"><name pos:start="421:40" pos:end="421:58">OPENPIC_MODEL_RAVEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:26"><expr pos:start="423:5" pos:end="423:25"><call pos:start="423:5" pos:end="423:25"><name pos:start="423:5" pos:end="423:20">qdev_init_nofail</name><argument_list pos:start="423:21" pos:end="423:25">(<argument pos:start="423:22" pos:end="423:24"><expr pos:start="423:22" pos:end="423:24"><name pos:start="423:22" pos:end="423:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:28"><expr pos:start="425:5" pos:end="425:27"><name pos:start="425:5" pos:end="425:5">s</name> <operator pos:start="425:7" pos:end="425:7">=</operator> <call pos:start="425:9" pos:end="425:27"><name pos:start="425:9" pos:end="425:22">SYS_BUS_DEVICE</name><argument_list pos:start="425:23" pos:end="425:27">(<argument pos:start="425:24" pos:end="425:26"><expr pos:start="425:24" pos:end="425:26"><name pos:start="425:24" pos:end="425:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:32"><expr pos:start="427:5" pos:end="427:31"><name pos:start="427:5" pos:end="427:11">pic_mem</name> <operator pos:start="427:13" pos:end="427:13">=</operator> <name pos:start="427:15" pos:end="427:24"><name pos:start="427:15" pos:end="427:15">s</name><operator pos:start="427:16" pos:end="427:17">-&gt;</operator><name pos:start="427:18" pos:end="427:21">mmio</name><index pos:start="427:22" pos:end="427:24">[<expr pos:start="427:23" pos:end="427:23"><literal type="number" pos:start="427:23" pos:end="427:23">0</literal></expr>]</index></name><operator pos:start="427:25" pos:end="427:25">.</operator><name pos:start="427:26" pos:end="427:31">memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:10"><expr pos:start="429:5" pos:end="429:9"><name pos:start="429:5" pos:end="429:5">k</name> <operator pos:start="429:7" pos:end="429:7">=</operator> <literal type="number" pos:start="429:9" pos:end="429:9">0</literal></expr>;</expr_stmt>

    <for pos:start="431:5" pos:end="439:5">for <control pos:start="431:9" pos:end="431:34">(<init pos:start="431:10" pos:end="431:15"><expr pos:start="431:10" pos:end="431:14"><name pos:start="431:10" pos:end="431:10">i</name> <operator pos:start="431:12" pos:end="431:12">=</operator> <literal type="number" pos:start="431:14" pos:end="431:14">0</literal></expr>;</init> <condition pos:start="431:17" pos:end="431:29"><expr pos:start="431:17" pos:end="431:28"><name pos:start="431:17" pos:end="431:17">i</name> <operator pos:start="431:19" pos:end="431:19">&lt;</operator> <name pos:start="431:21" pos:end="431:28">smp_cpus</name></expr>;</condition> <incr pos:start="431:31" pos:end="431:33"><expr pos:start="431:31" pos:end="431:33"><name pos:start="431:31" pos:end="431:31">i</name><operator pos:start="431:32" pos:end="431:33">++</operator></expr></incr>)</control> <block pos:start="431:36" pos:end="439:5">{<block_content pos:start="433:9" pos:end="437:9">

        <for pos:start="433:9" pos:end="437:9">for <control pos:start="433:13" pos:end="433:47">(<init pos:start="433:14" pos:end="433:19"><expr pos:start="433:14" pos:end="433:18"><name pos:start="433:14" pos:end="433:14">j</name> <operator pos:start="433:16" pos:end="433:16">=</operator> <literal type="number" pos:start="433:18" pos:end="433:18">0</literal></expr>;</init> <condition pos:start="433:21" pos:end="433:42"><expr pos:start="433:21" pos:end="433:41"><name pos:start="433:21" pos:end="433:21">j</name> <operator pos:start="433:23" pos:end="433:23">&lt;</operator> <name pos:start="433:25" pos:end="433:41">OPENPIC_OUTPUT_NB</name></expr>;</condition> <incr pos:start="433:44" pos:end="433:46"><expr pos:start="433:44" pos:end="433:46"><name pos:start="433:44" pos:end="433:44">j</name><operator pos:start="433:45" pos:end="433:46">++</operator></expr></incr>)</control> <block pos:start="433:49" pos:end="437:9">{<block_content pos:start="435:13" pos:end="435:59">

            <expr_stmt pos:start="435:13" pos:end="435:59"><expr pos:start="435:13" pos:end="435:58"><call pos:start="435:13" pos:end="435:58"><name pos:start="435:13" pos:end="435:30">sysbus_connect_irq</name><argument_list pos:start="435:31" pos:end="435:58">(<argument pos:start="435:32" pos:end="435:32"><expr pos:start="435:32" pos:end="435:32"><name pos:start="435:32" pos:end="435:32">s</name></expr></argument>, <argument pos:start="435:35" pos:end="435:37"><expr pos:start="435:35" pos:end="435:37"><name pos:start="435:35" pos:end="435:35">k</name><operator pos:start="435:36" pos:end="435:37">++</operator></expr></argument>, <argument pos:start="435:40" pos:end="435:57"><expr pos:start="435:40" pos:end="435:57"><name pos:start="435:40" pos:end="435:57"><name pos:start="435:40" pos:end="435:51">openpic_irqs</name><index pos:start="435:52" pos:end="435:54">[<expr pos:start="435:53" pos:end="435:53"><name pos:start="435:53" pos:end="435:53">i</name></expr>]</index><index pos:start="435:55" pos:end="435:57">[<expr pos:start="435:56" pos:end="435:56"><name pos:start="435:56" pos:end="435:56">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <for pos:start="443:5" pos:end="447:5">for <control pos:start="443:9" pos:end="443:28">(<init pos:start="443:10" pos:end="443:15"><expr pos:start="443:10" pos:end="443:14"><name pos:start="443:10" pos:end="443:10">i</name> <operator pos:start="443:12" pos:end="443:12">=</operator> <literal type="number" pos:start="443:14" pos:end="443:14">0</literal></expr>;</init> <condition pos:start="443:17" pos:end="443:23"><expr pos:start="443:17" pos:end="443:22"><name pos:start="443:17" pos:end="443:17">i</name> <operator pos:start="443:19" pos:end="443:19">&lt;</operator> <literal type="number" pos:start="443:21" pos:end="443:22">64</literal></expr>;</condition> <incr pos:start="443:25" pos:end="443:27"><expr pos:start="443:25" pos:end="443:27"><name pos:start="443:25" pos:end="443:25">i</name><operator pos:start="443:26" pos:end="443:27">++</operator></expr></incr>)</control> <block pos:start="443:30" pos:end="447:5">{<block_content pos:start="445:9" pos:end="445:42">

        <expr_stmt pos:start="445:9" pos:end="445:42"><expr pos:start="445:9" pos:end="445:41"><name pos:start="445:9" pos:end="445:14"><name pos:start="445:9" pos:end="445:11">pic</name><index pos:start="445:12" pos:end="445:14">[<expr pos:start="445:13" pos:end="445:13"><name pos:start="445:13" pos:end="445:13">i</name></expr>]</index></name> <operator pos:start="445:16" pos:end="445:16">=</operator> <call pos:start="445:18" pos:end="445:41"><name pos:start="445:18" pos:end="445:33">qdev_get_gpio_in</name><argument_list pos:start="445:34" pos:end="445:41">(<argument pos:start="445:35" pos:end="445:37"><expr pos:start="445:35" pos:end="445:37"><name pos:start="445:35" pos:end="445:37">dev</name></expr></argument>, <argument pos:start="445:40" pos:end="445:40"><expr pos:start="445:40" pos:end="445:40"><name pos:start="445:40" pos:end="445:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="451:5" pos:end="467:5"><if pos:start="451:5" pos:end="461:5">if <condition pos:start="451:8" pos:end="451:46">(<expr pos:start="451:9" pos:end="451:45"><call pos:start="451:9" pos:end="451:22"><name pos:start="451:9" pos:end="451:17">PPC_INPUT</name><argument_list pos:start="451:18" pos:end="451:22">(<argument pos:start="451:19" pos:end="451:21"><expr pos:start="451:19" pos:end="451:21"><name pos:start="451:19" pos:end="451:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="451:24" pos:end="451:25">==</operator> <name pos:start="451:27" pos:end="451:45">PPC_FLAGS_INPUT_970</name></expr>)</condition> <block pos:start="451:48" pos:end="461:5">{<block_content pos:start="455:9" pos:end="459:43">

        <comment type="block" pos:start="453:9" pos:end="453:31">/* 970 gets a U3 bus */</comment>

        <expr_stmt pos:start="455:9" pos:end="455:78"><expr pos:start="455:9" pos:end="455:77"><name pos:start="455:9" pos:end="455:15">pci_bus</name> <operator pos:start="455:17" pos:end="455:17">=</operator> <call pos:start="455:19" pos:end="455:77"><name pos:start="455:19" pos:end="455:34">pci_pmac_u3_init</name><argument_list pos:start="455:35" pos:end="455:77">(<argument pos:start="455:36" pos:end="455:38"><expr pos:start="455:36" pos:end="455:38"><name pos:start="455:36" pos:end="455:38">pic</name></expr></argument>, <argument pos:start="455:41" pos:end="455:59"><expr pos:start="455:41" pos:end="455:59"><call pos:start="455:41" pos:end="455:59"><name pos:start="455:41" pos:end="455:57">get_system_memory</name><argument_list pos:start="455:58" pos:end="455:59">()</argument_list></call></expr></argument>, <argument pos:start="455:62" pos:end="455:76"><expr pos:start="455:62" pos:end="455:76"><call pos:start="455:62" pos:end="455:76"><name pos:start="455:62" pos:end="455:74">get_system_io</name><argument_list pos:start="455:75" pos:end="455:76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="457:9" pos:end="457:37"><expr pos:start="457:9" pos:end="457:36"><name pos:start="457:9" pos:end="457:20">machine_arch</name> <operator pos:start="457:22" pos:end="457:22">=</operator> <name pos:start="457:24" pos:end="457:36">ARCH_MAC99_U3</name></expr>;</expr_stmt>

        <expr_stmt pos:start="459:9" pos:end="459:43"><expr pos:start="459:9" pos:end="459:42"><name pos:start="459:9" pos:end="459:20"><name pos:start="459:9" pos:end="459:15">machine</name><operator pos:start="459:16" pos:end="459:17">-&gt;</operator><name pos:start="459:18" pos:end="459:20">usb</name></name> <operator pos:start="459:22" pos:end="459:23">|=</operator> <call pos:start="459:25" pos:end="459:42"><name pos:start="459:25" pos:end="459:40">defaults_enabled</name><argument_list pos:start="459:41" pos:end="459:42">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="461:7" pos:end="467:5">else <block pos:start="461:12" pos:end="467:5">{<block_content pos:start="463:9" pos:end="465:34">

        <expr_stmt pos:start="463:9" pos:end="463:75"><expr pos:start="463:9" pos:end="463:74"><name pos:start="463:9" pos:end="463:15">pci_bus</name> <operator pos:start="463:17" pos:end="463:17">=</operator> <call pos:start="463:19" pos:end="463:74"><name pos:start="463:19" pos:end="463:31">pci_pmac_init</name><argument_list pos:start="463:32" pos:end="463:74">(<argument pos:start="463:33" pos:end="463:35"><expr pos:start="463:33" pos:end="463:35"><name pos:start="463:33" pos:end="463:35">pic</name></expr></argument>, <argument pos:start="463:38" pos:end="463:56"><expr pos:start="463:38" pos:end="463:56"><call pos:start="463:38" pos:end="463:56"><name pos:start="463:38" pos:end="463:54">get_system_memory</name><argument_list pos:start="463:55" pos:end="463:56">()</argument_list></call></expr></argument>, <argument pos:start="463:59" pos:end="463:73"><expr pos:start="463:59" pos:end="463:73"><call pos:start="463:59" pos:end="463:73"><name pos:start="463:59" pos:end="463:71">get_system_io</name><argument_list pos:start="463:72" pos:end="463:73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="465:9" pos:end="465:34"><expr pos:start="465:9" pos:end="465:33"><name pos:start="465:9" pos:end="465:20">machine_arch</name> <operator pos:start="465:22" pos:end="465:22">=</operator> <name pos:start="465:24" pos:end="465:33">ARCH_MAC99</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="471:5" pos:end="471:28">/* Timebase Frequency */</comment>

    <if_stmt pos:start="473:5" pos:end="481:5"><if pos:start="473:5" pos:end="477:5">if <condition pos:start="473:8" pos:end="473:22">(<expr pos:start="473:9" pos:end="473:21"><call pos:start="473:9" pos:end="473:21"><name pos:start="473:9" pos:end="473:19">kvm_enabled</name><argument_list pos:start="473:20" pos:end="473:21">()</argument_list></call></expr>)</condition> <block pos:start="473:24" pos:end="477:5">{<block_content pos:start="475:9" pos:end="475:37">

        <expr_stmt pos:start="475:9" pos:end="475:37"><expr pos:start="475:9" pos:end="475:36"><name pos:start="475:9" pos:end="475:14">tbfreq</name> <operator pos:start="475:16" pos:end="475:16">=</operator> <call pos:start="475:18" pos:end="475:36"><name pos:start="475:18" pos:end="475:34">kvmppc_get_tbfreq</name><argument_list pos:start="475:35" pos:end="475:36">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="477:7" pos:end="481:5">else <block pos:start="477:12" pos:end="481:5">{<block_content pos:start="479:9" pos:end="479:24">

        <expr_stmt pos:start="479:9" pos:end="479:24"><expr pos:start="479:9" pos:end="479:23"><name pos:start="479:9" pos:end="479:14">tbfreq</name> <operator pos:start="479:16" pos:end="479:16">=</operator> <name pos:start="479:18" pos:end="479:23">TBFREQ</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="485:5" pos:end="485:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="487:5" pos:end="489:70"><expr pos:start="487:5" pos:end="489:69"><name pos:start="487:5" pos:end="487:12">escc_mem</name> <operator pos:start="487:14" pos:end="487:14">=</operator> <call pos:start="487:16" pos:end="489:69"><name pos:start="487:16" pos:end="487:24">escc_init</name><argument_list pos:start="487:25" pos:end="489:69">(<argument pos:start="487:26" pos:end="487:26"><expr pos:start="487:26" pos:end="487:26"><literal type="number" pos:start="487:26" pos:end="487:26">0</literal></expr></argument>, <argument pos:start="487:29" pos:end="487:37"><expr pos:start="487:29" pos:end="487:37"><name pos:start="487:29" pos:end="487:37"><name pos:start="487:29" pos:end="487:31">pic</name><index pos:start="487:32" pos:end="487:37">[<expr pos:start="487:33" pos:end="487:36"><literal type="number" pos:start="487:33" pos:end="487:36">0x25</literal></expr>]</index></name></expr></argument>, <argument pos:start="487:40" pos:end="487:48"><expr pos:start="487:40" pos:end="487:48"><name pos:start="487:40" pos:end="487:48"><name pos:start="487:40" pos:end="487:42">pic</name><index pos:start="487:43" pos:end="487:48">[<expr pos:start="487:44" pos:end="487:47"><literal type="number" pos:start="487:44" pos:end="487:47">0x24</literal></expr>]</index></name></expr></argument>,

                         <argument pos:start="489:26" pos:end="489:38"><expr pos:start="489:26" pos:end="489:38"><name pos:start="489:26" pos:end="489:38"><name pos:start="489:26" pos:end="489:35">serial_hds</name><index pos:start="489:36" pos:end="489:38">[<expr pos:start="489:37" pos:end="489:37"><literal type="number" pos:start="489:37" pos:end="489:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="489:41" pos:end="489:53"><expr pos:start="489:41" pos:end="489:53"><name pos:start="489:41" pos:end="489:53"><name pos:start="489:41" pos:end="489:50">serial_hds</name><index pos:start="489:51" pos:end="489:53">[<expr pos:start="489:52" pos:end="489:52"><literal type="number" pos:start="489:52" pos:end="489:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="489:56" pos:end="489:65"><expr pos:start="489:56" pos:end="489:65"><name pos:start="489:56" pos:end="489:65">ESCC_CLOCK</name></expr></argument>, <argument pos:start="489:68" pos:end="489:68"><expr pos:start="489:68" pos:end="489:68"><literal type="number" pos:start="489:68" pos:end="489:68">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="491:5" pos:end="493:72"><expr pos:start="491:5" pos:end="493:71"><call pos:start="491:5" pos:end="493:71"><name pos:start="491:5" pos:end="491:28">memory_region_init_alias</name><argument_list pos:start="491:29" pos:end="493:71">(<argument pos:start="491:30" pos:end="491:37"><expr pos:start="491:30" pos:end="491:37"><name pos:start="491:30" pos:end="491:37">escc_bar</name></expr></argument>, <argument pos:start="491:40" pos:end="491:43"><expr pos:start="491:40" pos:end="491:43"><name pos:start="491:40" pos:end="491:43">NULL</name></expr></argument>, <argument pos:start="491:46" pos:end="491:55"><expr pos:start="491:46" pos:end="491:55"><literal type="string" pos:start="491:46" pos:end="491:55">"escc-bar"</literal></expr></argument>,

                             <argument pos:start="493:30" pos:end="493:37"><expr pos:start="493:30" pos:end="493:37"><name pos:start="493:30" pos:end="493:37">escc_mem</name></expr></argument>, <argument pos:start="493:40" pos:end="493:40"><expr pos:start="493:40" pos:end="493:40"><literal type="number" pos:start="493:40" pos:end="493:40">0</literal></expr></argument>, <argument pos:start="493:43" pos:end="493:70"><expr pos:start="493:43" pos:end="493:70"><call pos:start="493:43" pos:end="493:70"><name pos:start="493:43" pos:end="493:60">memory_region_size</name><argument_list pos:start="493:61" pos:end="493:70">(<argument pos:start="493:62" pos:end="493:69"><expr pos:start="493:62" pos:end="493:69"><name pos:start="493:62" pos:end="493:69">escc_mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="497:5" pos:end="497:57"><expr pos:start="497:5" pos:end="497:56"><name pos:start="497:5" pos:end="497:9">macio</name> <operator pos:start="497:11" pos:end="497:11">=</operator> <call pos:start="497:13" pos:end="497:56"><name pos:start="497:13" pos:end="497:22">pci_create</name><argument_list pos:start="497:23" pos:end="497:56">(<argument pos:start="497:24" pos:end="497:30"><expr pos:start="497:24" pos:end="497:30"><name pos:start="497:24" pos:end="497:30">pci_bus</name></expr></argument>, <argument pos:start="497:33" pos:end="497:34"><expr pos:start="497:33" pos:end="497:34"><operator pos:start="497:33" pos:end="497:33">-</operator><literal type="number" pos:start="497:34" pos:end="497:34">1</literal></expr></argument>, <argument pos:start="497:37" pos:end="497:55"><expr pos:start="497:37" pos:end="497:55"><name pos:start="497:37" pos:end="497:55">TYPE_NEWWORLD_MACIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="499:5" pos:end="499:24"><expr pos:start="499:5" pos:end="499:23"><name pos:start="499:5" pos:end="499:7">dev</name> <operator pos:start="499:9" pos:end="499:9">=</operator> <call pos:start="499:11" pos:end="499:23"><name pos:start="499:11" pos:end="499:16">DEVICE</name><argument_list pos:start="499:17" pos:end="499:23">(<argument pos:start="499:18" pos:end="499:22"><expr pos:start="499:18" pos:end="499:22"><name pos:start="499:18" pos:end="499:22">macio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="501:5" pos:end="501:45"><expr pos:start="501:5" pos:end="501:44"><call pos:start="501:5" pos:end="501:44"><name pos:start="501:5" pos:end="501:25">qdev_connect_gpio_out</name><argument_list pos:start="501:26" pos:end="501:44">(<argument pos:start="501:27" pos:end="501:29"><expr pos:start="501:27" pos:end="501:29"><name pos:start="501:27" pos:end="501:29">dev</name></expr></argument>, <argument pos:start="501:32" pos:end="501:32"><expr pos:start="501:32" pos:end="501:32"><literal type="number" pos:start="501:32" pos:end="501:32">0</literal></expr></argument>, <argument pos:start="501:35" pos:end="501:43"><expr pos:start="501:35" pos:end="501:43"><name pos:start="501:35" pos:end="501:43"><name pos:start="501:35" pos:end="501:37">pic</name><index pos:start="501:38" pos:end="501:43">[<expr pos:start="501:39" pos:end="501:42"><literal type="number" pos:start="501:39" pos:end="501:42">0x19</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="501:47" pos:end="501:56">/* CUDA */</comment>

    <expr_stmt pos:start="503:5" pos:end="503:45"><expr pos:start="503:5" pos:end="503:44"><call pos:start="503:5" pos:end="503:44"><name pos:start="503:5" pos:end="503:25">qdev_connect_gpio_out</name><argument_list pos:start="503:26" pos:end="503:44">(<argument pos:start="503:27" pos:end="503:29"><expr pos:start="503:27" pos:end="503:29"><name pos:start="503:27" pos:end="503:29">dev</name></expr></argument>, <argument pos:start="503:32" pos:end="503:32"><expr pos:start="503:32" pos:end="503:32"><literal type="number" pos:start="503:32" pos:end="503:32">1</literal></expr></argument>, <argument pos:start="503:35" pos:end="503:43"><expr pos:start="503:35" pos:end="503:43"><name pos:start="503:35" pos:end="503:43"><name pos:start="503:35" pos:end="503:37">pic</name><index pos:start="503:38" pos:end="503:43">[<expr pos:start="503:39" pos:end="503:42"><literal type="number" pos:start="503:39" pos:end="503:42">0x0d</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="503:47" pos:end="503:55">/* IDE */</comment>

    <expr_stmt pos:start="505:5" pos:end="505:45"><expr pos:start="505:5" pos:end="505:44"><call pos:start="505:5" pos:end="505:44"><name pos:start="505:5" pos:end="505:25">qdev_connect_gpio_out</name><argument_list pos:start="505:26" pos:end="505:44">(<argument pos:start="505:27" pos:end="505:29"><expr pos:start="505:27" pos:end="505:29"><name pos:start="505:27" pos:end="505:29">dev</name></expr></argument>, <argument pos:start="505:32" pos:end="505:32"><expr pos:start="505:32" pos:end="505:32"><literal type="number" pos:start="505:32" pos:end="505:32">2</literal></expr></argument>, <argument pos:start="505:35" pos:end="505:43"><expr pos:start="505:35" pos:end="505:43"><name pos:start="505:35" pos:end="505:43"><name pos:start="505:35" pos:end="505:37">pic</name><index pos:start="505:38" pos:end="505:43">[<expr pos:start="505:39" pos:end="505:42"><literal type="number" pos:start="505:39" pos:end="505:42">0x02</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="505:47" pos:end="505:59">/* IDE DMA */</comment>

    <expr_stmt pos:start="507:5" pos:end="507:45"><expr pos:start="507:5" pos:end="507:44"><call pos:start="507:5" pos:end="507:44"><name pos:start="507:5" pos:end="507:25">qdev_connect_gpio_out</name><argument_list pos:start="507:26" pos:end="507:44">(<argument pos:start="507:27" pos:end="507:29"><expr pos:start="507:27" pos:end="507:29"><name pos:start="507:27" pos:end="507:29">dev</name></expr></argument>, <argument pos:start="507:32" pos:end="507:32"><expr pos:start="507:32" pos:end="507:32"><literal type="number" pos:start="507:32" pos:end="507:32">3</literal></expr></argument>, <argument pos:start="507:35" pos:end="507:43"><expr pos:start="507:35" pos:end="507:43"><name pos:start="507:35" pos:end="507:43"><name pos:start="507:35" pos:end="507:37">pic</name><index pos:start="507:38" pos:end="507:43">[<expr pos:start="507:39" pos:end="507:42"><literal type="number" pos:start="507:39" pos:end="507:42">0x0e</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="507:47" pos:end="507:55">/* IDE */</comment>

    <expr_stmt pos:start="509:5" pos:end="509:45"><expr pos:start="509:5" pos:end="509:44"><call pos:start="509:5" pos:end="509:44"><name pos:start="509:5" pos:end="509:25">qdev_connect_gpio_out</name><argument_list pos:start="509:26" pos:end="509:44">(<argument pos:start="509:27" pos:end="509:29"><expr pos:start="509:27" pos:end="509:29"><name pos:start="509:27" pos:end="509:29">dev</name></expr></argument>, <argument pos:start="509:32" pos:end="509:32"><expr pos:start="509:32" pos:end="509:32"><literal type="number" pos:start="509:32" pos:end="509:32">4</literal></expr></argument>, <argument pos:start="509:35" pos:end="509:43"><expr pos:start="509:35" pos:end="509:43"><name pos:start="509:35" pos:end="509:43"><name pos:start="509:35" pos:end="509:37">pic</name><index pos:start="509:38" pos:end="509:43">[<expr pos:start="509:39" pos:end="509:42"><literal type="number" pos:start="509:39" pos:end="509:42">0x03</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="509:47" pos:end="509:59">/* IDE DMA */</comment>

    <expr_stmt pos:start="511:5" pos:end="511:51"><expr pos:start="511:5" pos:end="511:50"><call pos:start="511:5" pos:end="511:50"><name pos:start="511:5" pos:end="511:24">qdev_prop_set_uint64</name><argument_list pos:start="511:25" pos:end="511:50">(<argument pos:start="511:26" pos:end="511:28"><expr pos:start="511:26" pos:end="511:28"><name pos:start="511:26" pos:end="511:28">dev</name></expr></argument>, <argument pos:start="511:31" pos:end="511:41"><expr pos:start="511:31" pos:end="511:41"><literal type="string" pos:start="511:31" pos:end="511:41">"frequency"</literal></expr></argument>, <argument pos:start="511:44" pos:end="511:49"><expr pos:start="511:44" pos:end="511:49"><name pos:start="511:44" pos:end="511:49">tbfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="513:5" pos:end="513:41"><expr pos:start="513:5" pos:end="513:40"><call pos:start="513:5" pos:end="513:40"><name pos:start="513:5" pos:end="513:14">macio_init</name><argument_list pos:start="513:15" pos:end="513:40">(<argument pos:start="513:16" pos:end="513:20"><expr pos:start="513:16" pos:end="513:20"><name pos:start="513:16" pos:end="513:20">macio</name></expr></argument>, <argument pos:start="513:23" pos:end="513:29"><expr pos:start="513:23" pos:end="513:29"><name pos:start="513:23" pos:end="513:29">pic_mem</name></expr></argument>, <argument pos:start="513:32" pos:end="513:39"><expr pos:start="513:32" pos:end="513:39"><name pos:start="513:32" pos:end="513:39">escc_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="517:5" pos:end="517:60">/* We only emulate 2 out of 3 IDE controllers for now */</comment>

    <expr_stmt pos:start="519:5" pos:end="519:38"><expr pos:start="519:5" pos:end="519:37"><call pos:start="519:5" pos:end="519:37"><name pos:start="519:5" pos:end="519:17">ide_drive_get</name><argument_list pos:start="519:18" pos:end="519:37">(<argument pos:start="519:19" pos:end="519:20"><expr pos:start="519:19" pos:end="519:20"><name pos:start="519:19" pos:end="519:20">hd</name></expr></argument>, <argument pos:start="519:23" pos:end="519:36"><expr pos:start="519:23" pos:end="519:36"><call pos:start="519:23" pos:end="519:36"><name pos:start="519:23" pos:end="519:32">ARRAY_SIZE</name><argument_list pos:start="519:33" pos:end="519:36">(<argument pos:start="519:34" pos:end="519:35"><expr pos:start="519:34" pos:end="519:35"><name pos:start="519:34" pos:end="519:35">hd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="523:5" pos:end="525:67"><expr pos:start="523:5" pos:end="525:66"><name pos:start="523:5" pos:end="523:13">macio_ide</name> <operator pos:start="523:15" pos:end="523:15">=</operator> <call pos:start="523:17" pos:end="525:66"><name pos:start="523:17" pos:end="523:25">MACIO_IDE</name><argument_list pos:start="523:26" pos:end="525:66">(<argument pos:start="523:27" pos:end="525:65"><expr pos:start="523:27" pos:end="525:65"><call pos:start="523:27" pos:end="525:65"><name pos:start="523:27" pos:end="523:55">object_resolve_path_component</name><argument_list pos:start="523:56" pos:end="525:65">(<argument pos:start="523:57" pos:end="523:69"><expr pos:start="523:57" pos:end="523:69"><call pos:start="523:57" pos:end="523:69"><name pos:start="523:57" pos:end="523:62">OBJECT</name><argument_list pos:start="523:63" pos:end="523:69">(<argument pos:start="523:64" pos:end="523:68"><expr pos:start="523:64" pos:end="523:68"><name pos:start="523:64" pos:end="523:68">macio</name></expr></argument>)</argument_list></call></expr></argument>,

                                                        <argument pos:start="525:57" pos:end="525:64"><expr pos:start="525:57" pos:end="525:64"><literal type="string" pos:start="525:57" pos:end="525:64">"ide[0]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="527:5" pos:end="527:41"><expr pos:start="527:5" pos:end="527:40"><call pos:start="527:5" pos:end="527:40"><name pos:start="527:5" pos:end="527:25">macio_ide_init_drives</name><argument_list pos:start="527:26" pos:end="527:40">(<argument pos:start="527:27" pos:end="527:35"><expr pos:start="527:27" pos:end="527:35"><name pos:start="527:27" pos:end="527:35">macio_ide</name></expr></argument>, <argument pos:start="527:38" pos:end="527:39"><expr pos:start="527:38" pos:end="527:39"><name pos:start="527:38" pos:end="527:39">hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="531:5" pos:end="533:67"><expr pos:start="531:5" pos:end="533:66"><name pos:start="531:5" pos:end="531:13">macio_ide</name> <operator pos:start="531:15" pos:end="531:15">=</operator> <call pos:start="531:17" pos:end="533:66"><name pos:start="531:17" pos:end="531:25">MACIO_IDE</name><argument_list pos:start="531:26" pos:end="533:66">(<argument pos:start="531:27" pos:end="533:65"><expr pos:start="531:27" pos:end="533:65"><call pos:start="531:27" pos:end="533:65"><name pos:start="531:27" pos:end="531:55">object_resolve_path_component</name><argument_list pos:start="531:56" pos:end="533:65">(<argument pos:start="531:57" pos:end="531:69"><expr pos:start="531:57" pos:end="531:69"><call pos:start="531:57" pos:end="531:69"><name pos:start="531:57" pos:end="531:62">OBJECT</name><argument_list pos:start="531:63" pos:end="531:69">(<argument pos:start="531:64" pos:end="531:68"><expr pos:start="531:64" pos:end="531:68"><name pos:start="531:64" pos:end="531:68">macio</name></expr></argument>)</argument_list></call></expr></argument>,

                                                        <argument pos:start="533:57" pos:end="533:64"><expr pos:start="533:57" pos:end="533:64"><literal type="string" pos:start="533:57" pos:end="533:64">"ide[1]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="535:5" pos:end="535:56"><expr pos:start="535:5" pos:end="535:55"><call pos:start="535:5" pos:end="535:55"><name pos:start="535:5" pos:end="535:25">macio_ide_init_drives</name><argument_list pos:start="535:26" pos:end="535:55">(<argument pos:start="535:27" pos:end="535:35"><expr pos:start="535:27" pos:end="535:35"><name pos:start="535:27" pos:end="535:35">macio_ide</name></expr></argument>, <argument pos:start="535:38" pos:end="535:54"><expr pos:start="535:38" pos:end="535:54"><operator pos:start="535:38" pos:end="535:38">&amp;</operator><name pos:start="535:39" pos:end="535:54"><name pos:start="535:39" pos:end="535:40">hd</name><index pos:start="535:41" pos:end="535:54">[<expr pos:start="535:42" pos:end="535:53"><name pos:start="535:42" pos:end="535:53">MAX_IDE_DEVS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="539:5" pos:end="539:71"><expr pos:start="539:5" pos:end="539:70"><name pos:start="539:5" pos:end="539:7">dev</name> <operator pos:start="539:9" pos:end="539:9">=</operator> <call pos:start="539:11" pos:end="539:70"><name pos:start="539:11" pos:end="539:16">DEVICE</name><argument_list pos:start="539:17" pos:end="539:70">(<argument pos:start="539:18" pos:end="539:69"><expr pos:start="539:18" pos:end="539:69"><call pos:start="539:18" pos:end="539:69"><name pos:start="539:18" pos:end="539:46">object_resolve_path_component</name><argument_list pos:start="539:47" pos:end="539:69">(<argument pos:start="539:48" pos:end="539:60"><expr pos:start="539:48" pos:end="539:60"><call pos:start="539:48" pos:end="539:60"><name pos:start="539:48" pos:end="539:53">OBJECT</name><argument_list pos:start="539:54" pos:end="539:60">(<argument pos:start="539:55" pos:end="539:59"><expr pos:start="539:55" pos:end="539:59"><name pos:start="539:55" pos:end="539:59">macio</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="539:63" pos:end="539:68"><expr pos:start="539:63" pos:end="539:68"><literal type="string" pos:start="539:63" pos:end="539:68">"cuda"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="541:5" pos:end="541:47"><expr pos:start="541:5" pos:end="541:46"><name pos:start="541:5" pos:end="541:11">adb_bus</name> <operator pos:start="541:13" pos:end="541:13">=</operator> <call pos:start="541:15" pos:end="541:46"><name pos:start="541:15" pos:end="541:32">qdev_get_child_bus</name><argument_list pos:start="541:33" pos:end="541:46">(<argument pos:start="541:34" pos:end="541:36"><expr pos:start="541:34" pos:end="541:36"><name pos:start="541:34" pos:end="541:36">dev</name></expr></argument>, <argument pos:start="541:39" pos:end="541:45"><expr pos:start="541:39" pos:end="541:45"><literal type="string" pos:start="541:39" pos:end="541:45">"adb.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="543:5" pos:end="543:50"><expr pos:start="543:5" pos:end="543:49"><name pos:start="543:5" pos:end="543:7">dev</name> <operator pos:start="543:9" pos:end="543:9">=</operator> <call pos:start="543:11" pos:end="543:49"><name pos:start="543:11" pos:end="543:21">qdev_create</name><argument_list pos:start="543:22" pos:end="543:49">(<argument pos:start="543:23" pos:end="543:29"><expr pos:start="543:23" pos:end="543:29"><name pos:start="543:23" pos:end="543:29">adb_bus</name></expr></argument>, <argument pos:start="543:32" pos:end="543:48"><expr pos:start="543:32" pos:end="543:48"><name pos:start="543:32" pos:end="543:48">TYPE_ADB_KEYBOARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="545:5" pos:end="545:26"><expr pos:start="545:5" pos:end="545:25"><call pos:start="545:5" pos:end="545:25"><name pos:start="545:5" pos:end="545:20">qdev_init_nofail</name><argument_list pos:start="545:21" pos:end="545:25">(<argument pos:start="545:22" pos:end="545:24"><expr pos:start="545:22" pos:end="545:24"><name pos:start="545:22" pos:end="545:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="547:5" pos:end="547:47"><expr pos:start="547:5" pos:end="547:46"><name pos:start="547:5" pos:end="547:7">dev</name> <operator pos:start="547:9" pos:end="547:9">=</operator> <call pos:start="547:11" pos:end="547:46"><name pos:start="547:11" pos:end="547:21">qdev_create</name><argument_list pos:start="547:22" pos:end="547:46">(<argument pos:start="547:23" pos:end="547:29"><expr pos:start="547:23" pos:end="547:29"><name pos:start="547:23" pos:end="547:29">adb_bus</name></expr></argument>, <argument pos:start="547:32" pos:end="547:45"><expr pos:start="547:32" pos:end="547:45"><name pos:start="547:32" pos:end="547:45">TYPE_ADB_MOUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="549:5" pos:end="549:26"><expr pos:start="549:5" pos:end="549:25"><call pos:start="549:5" pos:end="549:25"><name pos:start="549:5" pos:end="549:20">qdev_init_nofail</name><argument_list pos:start="549:21" pos:end="549:25">(<argument pos:start="549:22" pos:end="549:24"><expr pos:start="549:22" pos:end="549:24"><name pos:start="549:22" pos:end="549:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="553:5" pos:end="575:5"><if pos:start="553:5" pos:end="575:5">if <condition pos:start="553:8" pos:end="553:21">(<expr pos:start="553:9" pos:end="553:20"><name pos:start="553:9" pos:end="553:20"><name pos:start="553:9" pos:end="553:15">machine</name><operator pos:start="553:16" pos:end="553:17">-&gt;</operator><name pos:start="553:18" pos:end="553:20">usb</name></name></expr>)</condition> <block pos:start="553:23" pos:end="575:5">{<block_content pos:start="555:9" pos:end="573:9">

        <expr_stmt pos:start="555:9" pos:end="555:51"><expr pos:start="555:9" pos:end="555:50"><call pos:start="555:9" pos:end="555:50"><name pos:start="555:9" pos:end="555:25">pci_create_simple</name><argument_list pos:start="555:26" pos:end="555:50">(<argument pos:start="555:27" pos:end="555:33"><expr pos:start="555:27" pos:end="555:33"><name pos:start="555:27" pos:end="555:33">pci_bus</name></expr></argument>, <argument pos:start="555:36" pos:end="555:37"><expr pos:start="555:36" pos:end="555:37"><operator pos:start="555:36" pos:end="555:36">-</operator><literal type="number" pos:start="555:37" pos:end="555:37">1</literal></expr></argument>, <argument pos:start="555:40" pos:end="555:49"><expr pos:start="555:40" pos:end="555:49"><literal type="string" pos:start="555:40" pos:end="555:49">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="559:9" pos:end="561:19">/* U3 needs to use USB for input because Linux doesn't support via-cuda

        on PPC64 */</comment>

        <if_stmt pos:start="563:9" pos:end="573:9"><if pos:start="563:9" pos:end="573:9">if <condition pos:start="563:12" pos:end="563:42">(<expr pos:start="563:13" pos:end="563:41"><name pos:start="563:13" pos:end="563:24">machine_arch</name> <operator pos:start="563:26" pos:end="563:27">==</operator> <name pos:start="563:29" pos:end="563:41">ARCH_MAC99_U3</name></expr>)</condition> <block pos:start="563:44" pos:end="573:9">{<block_content pos:start="565:13" pos:end="571:52">

            <decl_stmt pos:start="565:13" pos:end="565:47"><decl pos:start="565:13" pos:end="565:46"><type pos:start="565:13" pos:end="565:20"><name pos:start="565:13" pos:end="565:18">USBBus</name> <modifier pos:start="565:20" pos:end="565:20">*</modifier></type><name pos:start="565:21" pos:end="565:27">usb_bus</name> <init pos:start="565:29" pos:end="565:46">= <expr pos:start="565:31" pos:end="565:46"><call pos:start="565:31" pos:end="565:46"><name pos:start="565:31" pos:end="565:42">usb_bus_find</name><argument_list pos:start="565:43" pos:end="565:46">(<argument pos:start="565:44" pos:end="565:45"><expr pos:start="565:44" pos:end="565:45"><operator pos:start="565:44" pos:end="565:44">-</operator><literal type="number" pos:start="565:45" pos:end="565:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="569:13" pos:end="569:50"><expr pos:start="569:13" pos:end="569:49"><call pos:start="569:13" pos:end="569:49"><name pos:start="569:13" pos:end="569:29">usb_create_simple</name><argument_list pos:start="569:30" pos:end="569:49">(<argument pos:start="569:31" pos:end="569:37"><expr pos:start="569:31" pos:end="569:37"><name pos:start="569:31" pos:end="569:37">usb_bus</name></expr></argument>, <argument pos:start="569:40" pos:end="569:48"><expr pos:start="569:40" pos:end="569:48"><literal type="string" pos:start="569:40" pos:end="569:48">"usb-kbd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="571:13" pos:end="571:52"><expr pos:start="571:13" pos:end="571:51"><call pos:start="571:13" pos:end="571:51"><name pos:start="571:13" pos:end="571:29">usb_create_simple</name><argument_list pos:start="571:30" pos:end="571:51">(<argument pos:start="571:31" pos:end="571:37"><expr pos:start="571:31" pos:end="571:37"><name pos:start="571:31" pos:end="571:37">usb_bus</name></expr></argument>, <argument pos:start="571:40" pos:end="571:50"><expr pos:start="571:40" pos:end="571:50"><literal type="string" pos:start="571:40" pos:end="571:50">"usb-mouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="579:5" pos:end="579:26"><expr pos:start="579:5" pos:end="579:25"><call pos:start="579:5" pos:end="579:25"><name pos:start="579:5" pos:end="579:16">pci_vga_init</name><argument_list pos:start="579:17" pos:end="579:25">(<argument pos:start="579:18" pos:end="579:24"><expr pos:start="579:18" pos:end="579:24"><name pos:start="579:18" pos:end="579:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="583:5" pos:end="587:5"><if pos:start="583:5" pos:end="587:5">if <condition pos:start="583:8" pos:end="583:73">(<expr pos:start="583:9" pos:end="583:72"><name pos:start="583:9" pos:end="583:21">graphic_depth</name> <operator pos:start="583:23" pos:end="583:24">!=</operator> <literal type="number" pos:start="583:26" pos:end="583:27">15</literal> <operator pos:start="583:29" pos:end="583:30">&amp;&amp;</operator> <name pos:start="583:32" pos:end="583:44">graphic_depth</name> <operator pos:start="583:46" pos:end="583:47">!=</operator> <literal type="number" pos:start="583:49" pos:end="583:50">32</literal> <operator pos:start="583:52" pos:end="583:53">&amp;&amp;</operator> <name pos:start="583:55" pos:end="583:67">graphic_depth</name> <operator pos:start="583:69" pos:end="583:70">!=</operator> <literal type="number" pos:start="583:72" pos:end="583:72">8</literal></expr>)</condition> <block pos:start="583:75" pos:end="587:5">{<block_content pos:start="585:9" pos:end="585:27">

        <expr_stmt pos:start="585:9" pos:end="585:27"><expr pos:start="585:9" pos:end="585:26"><name pos:start="585:9" pos:end="585:21">graphic_depth</name> <operator pos:start="585:23" pos:end="585:23">=</operator> <literal type="number" pos:start="585:25" pos:end="585:26">15</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="591:5" pos:end="602:0">for <control pos:start="591:9" pos:end="591:33">(<init pos:start="591:10" pos:end="591:15"><expr pos:start="591:10" pos:end="591:14"><name pos:start="591:10" pos:end="591:10">i</name> <operator pos:start="591:12" pos:end="591:12">=</operator> <literal type="number" pos:start="591:14" pos:end="591:14">0</literal></expr>;</init> <condition pos:start="591:17" pos:end="591:28"><expr pos:start="591:17" pos:end="591:27"><name pos:start="591:17" pos:end="591:17">i</name> <operator pos:start="591:19" pos:end="591:19">&lt;</operator> <name pos:start="591:21" pos:end="591:27">nb_nics</name></expr>;</condition> <incr pos:start="591:30" pos:end="591:32"><expr pos:start="591:30" pos:end="591:32"><name pos:start="591:30" pos:end="591:30">i</name><operator pos:start="591:31" pos:end="591:32">++</operator></expr></incr>)</control> <block pos:start="591:35" pos:end="602:0">{<block_content pos:start="593:9" pos:end="593:69">

        <expr_stmt pos:start="593:9" pos:end="593:69"><expr pos:start="593:9" pos:end="593:68"><call pos:start="593:9" pos:end="593:68"><name pos:start="593:9" pos:end="593:27">pci_nic_init_nofail</name><argument_list pos:start="593:28" pos:end="593:68">(<argument pos:start="593:29" pos:end="593:40"><expr pos:start="593:29" pos:end="593:40"><operator pos:start="593:29" pos:end="593:29">&amp;</operator><name pos:start="593:30" pos:end="593:40"><name pos:start="593:30" pos:end="593:37">nd_table</name><index pos:start="593:38" pos:end="593:40">[<expr pos:start="593:39" pos:end="593:39"><name pos:start="593:39" pos:end="593:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="593:43" pos:end="593:49"><expr pos:start="593:43" pos:end="593:49"><name pos:start="593:43" pos:end="593:49">pci_bus</name></expr></argument>, <argument pos:start="593:52" pos:end="593:61"><expr pos:start="593:52" pos:end="593:61"><literal type="string" pos:start="593:52" pos:end="593:61">"ne2k_pci"</literal></expr></argument>, <argument pos:start="593:64" pos:end="593:67"><expr pos:start="593:64" pos:end="593:67"><name pos:start="593:64" pos:end="593:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="599:5" pos:end="599:63">/* The NewWorld NVRAM is not located in the MacIO device */</comment>

<cpp:ifdef pos:start="601:1" pos:end="601:17">#<cpp:directive pos:start="601:2" pos:end="601:6">ifdef</cpp:directive> <name pos:start="601:8" pos:end="601:17">CONFIG_KVM</name></cpp:ifdef>

    <if_stmt pos:start="603:5" pos:end="614:0"><if pos:start="603:5" pos:end="614:0">if <condition pos:start="603:8" pos:end="603:46">(<expr pos:start="603:9" pos:end="603:45"><call pos:start="603:9" pos:end="603:21"><name pos:start="603:9" pos:end="603:19">kvm_enabled</name><argument_list pos:start="603:20" pos:end="603:21">()</argument_list></call> <operator pos:start="603:23" pos:end="603:24">&amp;&amp;</operator> <call pos:start="603:26" pos:end="603:38"><name pos:start="603:26" pos:end="603:36">getpagesize</name><argument_list pos:start="603:37" pos:end="603:38">()</argument_list></call> <operator pos:start="603:40" pos:end="603:40">&gt;</operator> <literal type="number" pos:start="603:42" pos:end="603:45">4096</literal></expr>)</condition> <block pos:start="603:48" pos:end="614:0">{<block_content pos:start="609:9" pos:end="609:32">

        <comment type="block" pos:start="605:9" pos:end="607:53">/* We can't combine read-write and read-only in a single page, so

           move the NVRAM out of ROM again for KVM */</comment>

        <expr_stmt pos:start="609:9" pos:end="609:32"><expr pos:start="609:9" pos:end="609:31"><name pos:start="609:9" pos:end="609:18">nvram_addr</name> <operator pos:start="609:20" pos:end="609:20">=</operator> <literal type="number" pos:start="609:22" pos:end="609:31">0xFFE00000</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="613:1" pos:end="613:6">#<cpp:directive pos:start="613:2" pos:end="613:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="615:5" pos:end="615:46"><expr pos:start="615:5" pos:end="615:45"><name pos:start="615:5" pos:end="615:7">dev</name> <operator pos:start="615:9" pos:end="615:9">=</operator> <call pos:start="615:11" pos:end="615:45"><name pos:start="615:11" pos:end="615:21">qdev_create</name><argument_list pos:start="615:22" pos:end="615:45">(<argument pos:start="615:23" pos:end="615:26"><expr pos:start="615:23" pos:end="615:26"><name pos:start="615:23" pos:end="615:26">NULL</name></expr></argument>, <argument pos:start="615:29" pos:end="615:44"><expr pos:start="615:29" pos:end="615:44"><name pos:start="615:29" pos:end="615:44">TYPE_MACIO_NVRAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="617:5" pos:end="617:46"><expr pos:start="617:5" pos:end="617:45"><call pos:start="617:5" pos:end="617:45"><name pos:start="617:5" pos:end="617:24">qdev_prop_set_uint32</name><argument_list pos:start="617:25" pos:end="617:45">(<argument pos:start="617:26" pos:end="617:28"><expr pos:start="617:26" pos:end="617:28"><name pos:start="617:26" pos:end="617:28">dev</name></expr></argument>, <argument pos:start="617:31" pos:end="617:36"><expr pos:start="617:31" pos:end="617:36"><literal type="string" pos:start="617:31" pos:end="617:36">"size"</literal></expr></argument>, <argument pos:start="617:39" pos:end="617:44"><expr pos:start="617:39" pos:end="617:44"><literal type="number" pos:start="617:39" pos:end="617:44">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="619:5" pos:end="619:45"><expr pos:start="619:5" pos:end="619:44"><call pos:start="619:5" pos:end="619:44"><name pos:start="619:5" pos:end="619:24">qdev_prop_set_uint32</name><argument_list pos:start="619:25" pos:end="619:44">(<argument pos:start="619:26" pos:end="619:28"><expr pos:start="619:26" pos:end="619:28"><name pos:start="619:26" pos:end="619:28">dev</name></expr></argument>, <argument pos:start="619:31" pos:end="619:40"><expr pos:start="619:31" pos:end="619:40"><literal type="string" pos:start="619:31" pos:end="619:40">"it_shift"</literal></expr></argument>, <argument pos:start="619:43" pos:end="619:43"><expr pos:start="619:43" pos:end="619:43"><literal type="number" pos:start="619:43" pos:end="619:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="621:5" pos:end="621:26"><expr pos:start="621:5" pos:end="621:25"><call pos:start="621:5" pos:end="621:25"><name pos:start="621:5" pos:end="621:20">qdev_init_nofail</name><argument_list pos:start="621:21" pos:end="621:25">(<argument pos:start="621:22" pos:end="621:24"><expr pos:start="621:22" pos:end="621:24"><name pos:start="621:22" pos:end="621:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="623:5" pos:end="623:56"><expr pos:start="623:5" pos:end="623:55"><call pos:start="623:5" pos:end="623:55"><name pos:start="623:5" pos:end="623:19">sysbus_mmio_map</name><argument_list pos:start="623:20" pos:end="623:55">(<argument pos:start="623:21" pos:end="623:39"><expr pos:start="623:21" pos:end="623:39"><call pos:start="623:21" pos:end="623:39"><name pos:start="623:21" pos:end="623:34">SYS_BUS_DEVICE</name><argument_list pos:start="623:35" pos:end="623:39">(<argument pos:start="623:36" pos:end="623:38"><expr pos:start="623:36" pos:end="623:38"><name pos:start="623:36" pos:end="623:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="623:42" pos:end="623:42"><expr pos:start="623:42" pos:end="623:42"><literal type="number" pos:start="623:42" pos:end="623:42">0</literal></expr></argument>, <argument pos:start="623:45" pos:end="623:54"><expr pos:start="623:45" pos:end="623:54"><name pos:start="623:45" pos:end="623:54">nvram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="625:5" pos:end="625:27"><expr pos:start="625:5" pos:end="625:26"><name pos:start="625:5" pos:end="625:7">nvr</name> <operator pos:start="625:9" pos:end="625:9">=</operator> <call pos:start="625:11" pos:end="625:26"><name pos:start="625:11" pos:end="625:21">MACIO_NVRAM</name><argument_list pos:start="625:22" pos:end="625:26">(<argument pos:start="625:23" pos:end="625:25"><expr pos:start="625:23" pos:end="625:25"><name pos:start="625:23" pos:end="625:25">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="627:5" pos:end="627:45"><expr pos:start="627:5" pos:end="627:44"><call pos:start="627:5" pos:end="627:44"><name pos:start="627:5" pos:end="627:31">pmac_format_nvram_partition</name><argument_list pos:start="627:32" pos:end="627:44">(<argument pos:start="627:33" pos:end="627:35"><expr pos:start="627:33" pos:end="627:35"><name pos:start="627:33" pos:end="627:35">nvr</name></expr></argument>, <argument pos:start="627:38" pos:end="627:43"><expr pos:start="627:38" pos:end="627:43"><literal type="number" pos:start="627:38" pos:end="627:43">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="629:5" pos:end="629:42">/* No PCI init: the BIOS will do it */</comment>



    <expr_stmt pos:start="633:5" pos:end="633:53"><expr pos:start="633:5" pos:end="633:52"><name pos:start="633:5" pos:end="633:10">fw_cfg</name> <operator pos:start="633:12" pos:end="633:12">=</operator> <call pos:start="633:14" pos:end="633:52"><name pos:start="633:14" pos:end="633:28">fw_cfg_init_mem</name><argument_list pos:start="633:29" pos:end="633:52">(<argument pos:start="633:30" pos:end="633:37"><expr pos:start="633:30" pos:end="633:37"><name pos:start="633:30" pos:end="633:37">CFG_ADDR</name></expr></argument>, <argument pos:start="633:40" pos:end="633:51"><expr pos:start="633:40" pos:end="633:51"><name pos:start="633:40" pos:end="633:47">CFG_ADDR</name> <operator pos:start="633:49" pos:end="633:49">+</operator> <literal type="number" pos:start="633:51" pos:end="633:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="635:5" pos:end="635:64"><expr pos:start="635:5" pos:end="635:63"><call pos:start="635:5" pos:end="635:63"><name pos:start="635:5" pos:end="635:18">fw_cfg_add_i16</name><argument_list pos:start="635:19" pos:end="635:63">(<argument pos:start="635:20" pos:end="635:25"><expr pos:start="635:20" pos:end="635:25"><name pos:start="635:20" pos:end="635:25">fw_cfg</name></expr></argument>, <argument pos:start="635:28" pos:end="635:42"><expr pos:start="635:28" pos:end="635:42"><name pos:start="635:28" pos:end="635:42">FW_CFG_MAX_CPUS</name></expr></argument>, <argument pos:start="635:45" pos:end="635:62"><expr pos:start="635:45" pos:end="635:62"><operator pos:start="635:45" pos:end="635:45">(</operator><name pos:start="635:46" pos:end="635:53">uint16_t</name><operator pos:start="635:54" pos:end="635:54">)</operator><name pos:start="635:55" pos:end="635:62">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="637:5" pos:end="637:41"><expr pos:start="637:5" pos:end="637:40"><call pos:start="637:5" pos:end="637:40"><name pos:start="637:5" pos:end="637:18">fw_cfg_add_i32</name><argument_list pos:start="637:19" pos:end="637:40">(<argument pos:start="637:20" pos:end="637:25"><expr pos:start="637:20" pos:end="637:25"><name pos:start="637:20" pos:end="637:25">fw_cfg</name></expr></argument>, <argument pos:start="637:28" pos:end="637:36"><expr pos:start="637:28" pos:end="637:36"><name pos:start="637:28" pos:end="637:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="637:39" pos:end="637:39"><expr pos:start="637:39" pos:end="637:39"><literal type="number" pos:start="637:39" pos:end="637:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="639:5" pos:end="639:64"><expr pos:start="639:5" pos:end="639:63"><call pos:start="639:5" pos:end="639:63"><name pos:start="639:5" pos:end="639:18">fw_cfg_add_i64</name><argument_list pos:start="639:19" pos:end="639:63">(<argument pos:start="639:20" pos:end="639:25"><expr pos:start="639:20" pos:end="639:25"><name pos:start="639:20" pos:end="639:25">fw_cfg</name></expr></argument>, <argument pos:start="639:28" pos:end="639:42"><expr pos:start="639:28" pos:end="639:42"><name pos:start="639:28" pos:end="639:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="639:45" pos:end="639:62"><expr pos:start="639:45" pos:end="639:62"><operator pos:start="639:45" pos:end="639:45">(</operator><name pos:start="639:46" pos:end="639:53">uint64_t</name><operator pos:start="639:54" pos:end="639:54">)</operator><name pos:start="639:55" pos:end="639:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="641:5" pos:end="641:60"><expr pos:start="641:5" pos:end="641:59"><call pos:start="641:5" pos:end="641:59"><name pos:start="641:5" pos:end="641:18">fw_cfg_add_i16</name><argument_list pos:start="641:19" pos:end="641:59">(<argument pos:start="641:20" pos:end="641:25"><expr pos:start="641:20" pos:end="641:25"><name pos:start="641:20" pos:end="641:25">fw_cfg</name></expr></argument>, <argument pos:start="641:28" pos:end="641:44"><expr pos:start="641:28" pos:end="641:44"><name pos:start="641:28" pos:end="641:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="641:47" pos:end="641:58"><expr pos:start="641:47" pos:end="641:58"><name pos:start="641:47" pos:end="641:58">machine_arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="643:5" pos:end="643:60"><expr pos:start="643:5" pos:end="643:59"><call pos:start="643:5" pos:end="643:59"><name pos:start="643:5" pos:end="643:18">fw_cfg_add_i32</name><argument_list pos:start="643:19" pos:end="643:59">(<argument pos:start="643:20" pos:end="643:25"><expr pos:start="643:20" pos:end="643:25"><name pos:start="643:20" pos:end="643:25">fw_cfg</name></expr></argument>, <argument pos:start="643:28" pos:end="643:45"><expr pos:start="643:28" pos:end="643:45"><name pos:start="643:28" pos:end="643:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="643:48" pos:end="643:58"><expr pos:start="643:48" pos:end="643:58"><name pos:start="643:48" pos:end="643:58">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="645:5" pos:end="645:60"><expr pos:start="645:5" pos:end="645:59"><call pos:start="645:5" pos:end="645:59"><name pos:start="645:5" pos:end="645:18">fw_cfg_add_i32</name><argument_list pos:start="645:19" pos:end="645:59">(<argument pos:start="645:20" pos:end="645:25"><expr pos:start="645:20" pos:end="645:25"><name pos:start="645:20" pos:end="645:25">fw_cfg</name></expr></argument>, <argument pos:start="645:28" pos:end="645:45"><expr pos:start="645:28" pos:end="645:45"><name pos:start="645:28" pos:end="645:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="645:48" pos:end="645:58"><expr pos:start="645:48" pos:end="645:58"><name pos:start="645:48" pos:end="645:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="647:5" pos:end="657:5"><if pos:start="647:5" pos:end="653:5">if <condition pos:start="647:8" pos:end="647:23">(<expr pos:start="647:9" pos:end="647:22"><name pos:start="647:9" pos:end="647:22">kernel_cmdline</name></expr>)</condition> <block pos:start="647:25" pos:end="653:5">{<block_content pos:start="649:9" pos:end="651:84">

        <expr_stmt pos:start="649:9" pos:end="649:68"><expr pos:start="649:9" pos:end="649:67"><call pos:start="649:9" pos:end="649:67"><name pos:start="649:9" pos:end="649:22">fw_cfg_add_i32</name><argument_list pos:start="649:23" pos:end="649:67">(<argument pos:start="649:24" pos:end="649:29"><expr pos:start="649:24" pos:end="649:29"><name pos:start="649:24" pos:end="649:29">fw_cfg</name></expr></argument>, <argument pos:start="649:32" pos:end="649:52"><expr pos:start="649:32" pos:end="649:52"><name pos:start="649:32" pos:end="649:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="649:55" pos:end="649:66"><expr pos:start="649:55" pos:end="649:66"><name pos:start="649:55" pos:end="649:66">cmdline_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="651:9" pos:end="651:84"><expr pos:start="651:9" pos:end="651:83"><call pos:start="651:9" pos:end="651:83"><name pos:start="651:9" pos:end="651:24">pstrcpy_targphys</name><argument_list pos:start="651:25" pos:end="651:83">(<argument pos:start="651:26" pos:end="651:34"><expr pos:start="651:26" pos:end="651:34"><literal type="string" pos:start="651:26" pos:end="651:34">"cmdline"</literal></expr></argument>, <argument pos:start="651:37" pos:end="651:48"><expr pos:start="651:37" pos:end="651:48"><name pos:start="651:37" pos:end="651:48">cmdline_base</name></expr></argument>, <argument pos:start="651:51" pos:end="651:66"><expr pos:start="651:51" pos:end="651:66"><name pos:start="651:51" pos:end="651:66">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="651:69" pos:end="651:82"><expr pos:start="651:69" pos:end="651:82"><name pos:start="651:69" pos:end="651:82">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="653:7" pos:end="657:5">else <block pos:start="653:12" pos:end="657:5">{<block_content pos:start="655:9" pos:end="655:57">

        <expr_stmt pos:start="655:9" pos:end="655:57"><expr pos:start="655:9" pos:end="655:56"><call pos:start="655:9" pos:end="655:56"><name pos:start="655:9" pos:end="655:22">fw_cfg_add_i32</name><argument_list pos:start="655:23" pos:end="655:56">(<argument pos:start="655:24" pos:end="655:29"><expr pos:start="655:24" pos:end="655:29"><name pos:start="655:24" pos:end="655:29">fw_cfg</name></expr></argument>, <argument pos:start="655:32" pos:end="655:52"><expr pos:start="655:32" pos:end="655:52"><name pos:start="655:32" pos:end="655:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="655:55" pos:end="655:55"><expr pos:start="655:55" pos:end="655:55"><literal type="number" pos:start="655:55" pos:end="655:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="659:5" pos:end="659:60"><expr pos:start="659:5" pos:end="659:59"><call pos:start="659:5" pos:end="659:59"><name pos:start="659:5" pos:end="659:18">fw_cfg_add_i32</name><argument_list pos:start="659:19" pos:end="659:59">(<argument pos:start="659:20" pos:end="659:25"><expr pos:start="659:20" pos:end="659:25"><name pos:start="659:20" pos:end="659:25">fw_cfg</name></expr></argument>, <argument pos:start="659:28" pos:end="659:45"><expr pos:start="659:28" pos:end="659:45"><name pos:start="659:28" pos:end="659:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="659:48" pos:end="659:58"><expr pos:start="659:48" pos:end="659:58"><name pos:start="659:48" pos:end="659:58">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="661:5" pos:end="661:60"><expr pos:start="661:5" pos:end="661:59"><call pos:start="661:5" pos:end="661:59"><name pos:start="661:5" pos:end="661:18">fw_cfg_add_i32</name><argument_list pos:start="661:19" pos:end="661:59">(<argument pos:start="661:20" pos:end="661:25"><expr pos:start="661:20" pos:end="661:25"><name pos:start="661:20" pos:end="661:25">fw_cfg</name></expr></argument>, <argument pos:start="661:28" pos:end="661:45"><expr pos:start="661:28" pos:end="661:45"><name pos:start="661:28" pos:end="661:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="661:48" pos:end="661:58"><expr pos:start="661:48" pos:end="661:58"><name pos:start="661:48" pos:end="661:58">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="663:5" pos:end="663:64"><expr pos:start="663:5" pos:end="663:63"><call pos:start="663:5" pos:end="663:63"><name pos:start="663:5" pos:end="663:18">fw_cfg_add_i16</name><argument_list pos:start="663:19" pos:end="663:63">(<argument pos:start="663:20" pos:end="663:25"><expr pos:start="663:20" pos:end="663:25"><name pos:start="663:20" pos:end="663:25">fw_cfg</name></expr></argument>, <argument pos:start="663:28" pos:end="663:45"><expr pos:start="663:28" pos:end="663:45"><name pos:start="663:28" pos:end="663:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="663:48" pos:end="663:62"><expr pos:start="663:48" pos:end="663:62"><name pos:start="663:48" pos:end="663:62">ppc_boot_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="667:5" pos:end="667:60"><expr pos:start="667:5" pos:end="667:59"><call pos:start="667:5" pos:end="667:59"><name pos:start="667:5" pos:end="667:18">fw_cfg_add_i16</name><argument_list pos:start="667:19" pos:end="667:59">(<argument pos:start="667:20" pos:end="667:25"><expr pos:start="667:20" pos:end="667:25"><name pos:start="667:20" pos:end="667:25">fw_cfg</name></expr></argument>, <argument pos:start="667:28" pos:end="667:43"><expr pos:start="667:28" pos:end="667:43"><name pos:start="667:28" pos:end="667:43">FW_CFG_PPC_WIDTH</name></expr></argument>, <argument pos:start="667:46" pos:end="667:58"><expr pos:start="667:46" pos:end="667:58"><name pos:start="667:46" pos:end="667:58">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="669:5" pos:end="669:62"><expr pos:start="669:5" pos:end="669:61"><call pos:start="669:5" pos:end="669:61"><name pos:start="669:5" pos:end="669:18">fw_cfg_add_i16</name><argument_list pos:start="669:19" pos:end="669:61">(<argument pos:start="669:20" pos:end="669:25"><expr pos:start="669:20" pos:end="669:25"><name pos:start="669:20" pos:end="669:25">fw_cfg</name></expr></argument>, <argument pos:start="669:28" pos:end="669:44"><expr pos:start="669:28" pos:end="669:44"><name pos:start="669:28" pos:end="669:44">FW_CFG_PPC_HEIGHT</name></expr></argument>, <argument pos:start="669:47" pos:end="669:60"><expr pos:start="669:47" pos:end="669:60"><name pos:start="669:47" pos:end="669:60">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="671:5" pos:end="671:60"><expr pos:start="671:5" pos:end="671:59"><call pos:start="671:5" pos:end="671:59"><name pos:start="671:5" pos:end="671:18">fw_cfg_add_i16</name><argument_list pos:start="671:19" pos:end="671:59">(<argument pos:start="671:20" pos:end="671:25"><expr pos:start="671:20" pos:end="671:25"><name pos:start="671:20" pos:end="671:25">fw_cfg</name></expr></argument>, <argument pos:start="671:28" pos:end="671:43"><expr pos:start="671:28" pos:end="671:43"><name pos:start="671:28" pos:end="671:43">FW_CFG_PPC_DEPTH</name></expr></argument>, <argument pos:start="671:46" pos:end="671:58"><expr pos:start="671:46" pos:end="671:58"><name pos:start="671:46" pos:end="671:58">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="675:5" pos:end="675:61"><expr pos:start="675:5" pos:end="675:60"><call pos:start="675:5" pos:end="675:60"><name pos:start="675:5" pos:end="675:18">fw_cfg_add_i32</name><argument_list pos:start="675:19" pos:end="675:60">(<argument pos:start="675:20" pos:end="675:25"><expr pos:start="675:20" pos:end="675:25"><name pos:start="675:20" pos:end="675:25">fw_cfg</name></expr></argument>, <argument pos:start="675:28" pos:end="675:44"><expr pos:start="675:28" pos:end="675:44"><name pos:start="675:28" pos:end="675:44">FW_CFG_PPC_IS_KVM</name></expr></argument>, <argument pos:start="675:47" pos:end="675:59"><expr pos:start="675:47" pos:end="675:59"><call pos:start="675:47" pos:end="675:59"><name pos:start="675:47" pos:end="675:57">kvm_enabled</name><argument_list pos:start="675:58" pos:end="675:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="677:5" pos:end="695:5"><if pos:start="677:5" pos:end="695:5">if <condition pos:start="677:8" pos:end="677:22">(<expr pos:start="677:9" pos:end="677:21"><call pos:start="677:9" pos:end="677:21"><name pos:start="677:9" pos:end="677:19">kvm_enabled</name><argument_list pos:start="677:20" pos:end="677:21">()</argument_list></call></expr>)</condition> <block pos:start="677:24" pos:end="695:5">{<block_content pos:start="681:9" pos:end="694:0">

<cpp:ifdef pos:start="679:1" pos:end="679:17">#<cpp:directive pos:start="679:2" pos:end="679:6">ifdef</cpp:directive> <name pos:start="679:8" pos:end="679:17">CONFIG_KVM</name></cpp:ifdef>

        <decl_stmt pos:start="681:9" pos:end="681:27"><decl pos:start="681:9" pos:end="681:26"><type pos:start="681:9" pos:end="681:17"><name pos:start="681:9" pos:end="681:15">uint8_t</name> <modifier pos:start="681:17" pos:end="681:17">*</modifier></type><name pos:start="681:18" pos:end="681:26">hypercall</name></decl>;</decl_stmt>



        <expr_stmt pos:start="685:9" pos:end="685:33"><expr pos:start="685:9" pos:end="685:32"><name pos:start="685:9" pos:end="685:17">hypercall</name> <operator pos:start="685:19" pos:end="685:19">=</operator> <call pos:start="685:21" pos:end="685:32"><name pos:start="685:21" pos:end="685:28">g_malloc</name><argument_list pos:start="685:29" pos:end="685:32">(<argument pos:start="685:30" pos:end="685:31"><expr pos:start="685:30" pos:end="685:31"><literal type="number" pos:start="685:30" pos:end="685:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="687:9" pos:end="687:49"><expr pos:start="687:9" pos:end="687:48"><call pos:start="687:9" pos:end="687:48"><name pos:start="687:9" pos:end="687:28">kvmppc_get_hypercall</name><argument_list pos:start="687:29" pos:end="687:48">(<argument pos:start="687:30" pos:end="687:32"><expr pos:start="687:30" pos:end="687:32"><name pos:start="687:30" pos:end="687:32">env</name></expr></argument>, <argument pos:start="687:35" pos:end="687:43"><expr pos:start="687:35" pos:end="687:43"><name pos:start="687:35" pos:end="687:43">hypercall</name></expr></argument>, <argument pos:start="687:46" pos:end="687:47"><expr pos:start="687:46" pos:end="687:47"><literal type="number" pos:start="687:46" pos:end="687:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="689:9" pos:end="689:67"><expr pos:start="689:9" pos:end="689:66"><call pos:start="689:9" pos:end="689:66"><name pos:start="689:9" pos:end="689:24">fw_cfg_add_bytes</name><argument_list pos:start="689:25" pos:end="689:66">(<argument pos:start="689:26" pos:end="689:31"><expr pos:start="689:26" pos:end="689:31"><name pos:start="689:26" pos:end="689:31">fw_cfg</name></expr></argument>, <argument pos:start="689:34" pos:end="689:50"><expr pos:start="689:34" pos:end="689:50"><name pos:start="689:34" pos:end="689:50">FW_CFG_PPC_KVM_HC</name></expr></argument>, <argument pos:start="689:53" pos:end="689:61"><expr pos:start="689:53" pos:end="689:61"><name pos:start="689:53" pos:end="689:61">hypercall</name></expr></argument>, <argument pos:start="689:64" pos:end="689:65"><expr pos:start="689:64" pos:end="689:65"><literal type="number" pos:start="689:64" pos:end="689:65">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="691:9" pos:end="694:0"><expr pos:start="691:9" pos:end="691:60"><call pos:start="691:9" pos:end="691:60"><name pos:start="691:9" pos:end="691:22">fw_cfg_add_i32</name><argument_list pos:start="691:23" pos:end="691:60">(<argument pos:start="691:24" pos:end="691:29"><expr pos:start="691:24" pos:end="691:29"><name pos:start="691:24" pos:end="691:29">fw_cfg</name></expr></argument>, <argument pos:start="691:32" pos:end="691:49"><expr pos:start="691:32" pos:end="691:49"><name pos:start="691:32" pos:end="691:49">FW_CFG_PPC_KVM_PID</name></expr></argument>, <argument pos:start="691:52" pos:end="691:59"><expr pos:start="691:52" pos:end="691:59"><call pos:start="691:52" pos:end="691:59"><name pos:start="691:52" pos:end="691:57">getpid</name><argument_list pos:start="691:58" pos:end="691:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="693:1" pos:end="693:6">#<cpp:directive pos:start="693:2" pos:end="693:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="697:5" pos:end="697:54"><expr pos:start="697:5" pos:end="697:53"><call pos:start="697:5" pos:end="697:53"><name pos:start="697:5" pos:end="697:18">fw_cfg_add_i32</name><argument_list pos:start="697:19" pos:end="697:53">(<argument pos:start="697:20" pos:end="697:25"><expr pos:start="697:20" pos:end="697:25"><name pos:start="697:20" pos:end="697:25">fw_cfg</name></expr></argument>, <argument pos:start="697:28" pos:end="697:44"><expr pos:start="697:28" pos:end="697:44"><name pos:start="697:28" pos:end="697:44">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="697:47" pos:end="697:52"><expr pos:start="697:47" pos:end="697:52"><name pos:start="697:47" pos:end="697:52">tbfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="699:5" pos:end="699:78">/* Mac OS X requires a "known good" clock-frequency value; pass it one. */</comment>

    <expr_stmt pos:start="701:5" pos:end="701:60"><expr pos:start="701:5" pos:end="701:59"><call pos:start="701:5" pos:end="701:59"><name pos:start="701:5" pos:end="701:18">fw_cfg_add_i32</name><argument_list pos:start="701:19" pos:end="701:59">(<argument pos:start="701:20" pos:end="701:25"><expr pos:start="701:20" pos:end="701:25"><name pos:start="701:20" pos:end="701:25">fw_cfg</name></expr></argument>, <argument pos:start="701:28" pos:end="701:47"><expr pos:start="701:28" pos:end="701:47"><name pos:start="701:28" pos:end="701:47">FW_CFG_PPC_CLOCKFREQ</name></expr></argument>, <argument pos:start="701:50" pos:end="701:58"><expr pos:start="701:50" pos:end="701:58"><name pos:start="701:50" pos:end="701:58">CLOCKFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="703:5" pos:end="703:56"><expr pos:start="703:5" pos:end="703:55"><call pos:start="703:5" pos:end="703:55"><name pos:start="703:5" pos:end="703:18">fw_cfg_add_i32</name><argument_list pos:start="703:19" pos:end="703:55">(<argument pos:start="703:20" pos:end="703:25"><expr pos:start="703:20" pos:end="703:25"><name pos:start="703:20" pos:end="703:25">fw_cfg</name></expr></argument>, <argument pos:start="703:28" pos:end="703:45"><expr pos:start="703:28" pos:end="703:45"><name pos:start="703:28" pos:end="703:45">FW_CFG_PPC_BUSFREQ</name></expr></argument>, <argument pos:start="703:48" pos:end="703:54"><expr pos:start="703:48" pos:end="703:54"><name pos:start="703:48" pos:end="703:54">BUSFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="705:5" pos:end="705:62"><expr pos:start="705:5" pos:end="705:61"><call pos:start="705:5" pos:end="705:61"><name pos:start="705:5" pos:end="705:18">fw_cfg_add_i32</name><argument_list pos:start="705:19" pos:end="705:61">(<argument pos:start="705:20" pos:end="705:25"><expr pos:start="705:20" pos:end="705:25"><name pos:start="705:20" pos:end="705:25">fw_cfg</name></expr></argument>, <argument pos:start="705:28" pos:end="705:48"><expr pos:start="705:28" pos:end="705:48"><name pos:start="705:28" pos:end="705:48">FW_CFG_PPC_NVRAM_ADDR</name></expr></argument>, <argument pos:start="705:51" pos:end="705:60"><expr pos:start="705:51" pos:end="705:60"><name pos:start="705:51" pos:end="705:60">nvram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="709:5" pos:end="709:52"><expr pos:start="709:5" pos:end="709:51"><call pos:start="709:5" pos:end="709:51"><name pos:start="709:5" pos:end="709:26">qemu_register_boot_set</name><argument_list pos:start="709:27" pos:end="709:51">(<argument pos:start="709:28" pos:end="709:42"><expr pos:start="709:28" pos:end="709:42"><name pos:start="709:28" pos:end="709:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="709:45" pos:end="709:50"><expr pos:start="709:45" pos:end="709:50"><name pos:start="709:45" pos:end="709:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
