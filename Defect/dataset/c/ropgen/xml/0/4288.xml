<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4288.c" pos:tabs="8"><function pos:start="1:1" pos:end="253:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">vdi_create</name><parameter_list pos:start="1:22" pos:end="1:73">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:42">filename</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:52">QemuOpts</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">opts</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:65">Error</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="253:1">{<block_content pos:start="5:5" pos:end="251:18">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">result</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:18">bytes</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:19">blocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:21">block_size</name> <init pos:start="13:23" pos:end="13:44">= <expr pos:start="13:25" pos:end="13:44"><name pos:start="13:25" pos:end="13:44">DEFAULT_CLUSTER_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:42"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:23">image_type</name> <init pos:start="15:25" pos:end="15:42">= <expr pos:start="15:27" pos:end="15:42"><name pos:start="15:27" pos:end="15:42">VDI_TYPE_DYNAMIC</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:13">VdiHeader</name></type> <name pos:start="17:15" pos:end="17:20">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:12"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type> <name pos:start="19:12" pos:end="19:12">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">size_t</name></type> <name pos:start="21:12" pos:end="21:20">bmap_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:14">nocow</name> <init pos:start="23:16" pos:end="23:22">= <expr pos:start="23:18" pos:end="23:22"><name pos:start="23:18" pos:end="23:22">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:17"><expr pos:start="27:5" pos:end="27:16"><call pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:10">logout</name><argument_list pos:start="27:11" pos:end="27:16">(<argument pos:start="27:12" pos:end="27:15"><expr pos:start="27:12" pos:end="27:15"><literal type="string" pos:start="27:12" pos:end="27:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:27">/* Read out options. */</comment>

    <expr_stmt pos:start="33:5" pos:end="36:0"><expr pos:start="33:5" pos:end="33:58"><name pos:start="33:5" pos:end="33:9">bytes</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <call pos:start="33:13" pos:end="33:58"><name pos:start="33:13" pos:end="33:33">qemu_opt_get_size_del</name><argument_list pos:start="33:34" pos:end="33:58">(<argument pos:start="33:35" pos:end="33:38"><expr pos:start="33:35" pos:end="33:38"><name pos:start="33:35" pos:end="33:38">opts</name></expr></argument>, <argument pos:start="33:41" pos:end="33:54"><expr pos:start="33:41" pos:end="33:54"><name pos:start="33:41" pos:end="33:54">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="33:57" pos:end="33:57"><expr pos:start="33:57" pos:end="33:57"><literal type="number" pos:start="33:57" pos:end="33:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="35:1" pos:end="35:34">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:34"><call pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:11">defined</name><argument_list pos:start="35:12" pos:end="35:34">(<argument pos:start="35:13" pos:end="35:33"><expr pos:start="35:13" pos:end="35:33"><name pos:start="35:13" pos:end="35:33">CONFIG_VDI_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="37:5" pos:end="37:59">/* TODO: Additional checks (SECTOR_SIZE * 2^n, ...). */</comment>

    <expr_stmt pos:start="39:5" pos:end="48:0"><expr pos:start="39:5" pos:end="43:60"><name pos:start="39:5" pos:end="39:14">block_size</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="43:60"><name pos:start="39:18" pos:end="39:38">qemu_opt_get_size_del</name><argument_list pos:start="39:39" pos:end="43:60">(<argument pos:start="39:40" pos:end="39:43"><expr pos:start="39:40" pos:end="39:43"><name pos:start="39:40" pos:end="39:43">opts</name></expr></argument>,

                                       <argument pos:start="41:40" pos:end="41:61"><expr pos:start="41:40" pos:end="41:61"><name pos:start="41:40" pos:end="41:61">BLOCK_OPT_CLUSTER_SIZE</name></expr></argument>,

                                       <argument pos:start="43:40" pos:end="43:59"><expr pos:start="43:40" pos:end="43:59"><name pos:start="43:40" pos:end="43:59">DEFAULT_CLUSTER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="47:1" pos:end="47:36">#<cpp:directive pos:start="47:2" pos:end="47:3">if</cpp:directive> <expr pos:start="47:5" pos:end="47:36"><call pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:11">defined</name><argument_list pos:start="47:12" pos:end="47:36">(<argument pos:start="47:13" pos:end="47:35"><expr pos:start="47:13" pos:end="47:35"><name pos:start="47:13" pos:end="47:35">CONFIG_VDI_STATIC_IMAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="49:5" pos:end="56:0"><if pos:start="49:5" pos:end="56:0">if <condition pos:start="49:8" pos:end="49:61">(<expr pos:start="49:9" pos:end="49:60"><call pos:start="49:9" pos:end="49:60"><name pos:start="49:9" pos:end="49:29">qemu_opt_get_bool_del</name><argument_list pos:start="49:30" pos:end="49:60">(<argument pos:start="49:31" pos:end="49:34"><expr pos:start="49:31" pos:end="49:34"><name pos:start="49:31" pos:end="49:34">opts</name></expr></argument>, <argument pos:start="49:37" pos:end="49:52"><expr pos:start="49:37" pos:end="49:52"><name pos:start="49:37" pos:end="49:52">BLOCK_OPT_STATIC</name></expr></argument>, <argument pos:start="49:55" pos:end="49:59"><expr pos:start="49:55" pos:end="49:59"><name pos:start="49:55" pos:end="49:59">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:63" pos:end="56:0">{<block_content pos:start="51:9" pos:end="51:37">

        <expr_stmt pos:start="51:9" pos:end="51:37"><expr pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:18">image_type</name> <operator pos:start="51:20" pos:end="51:20">=</operator> <name pos:start="51:22" pos:end="51:36">VDI_TYPE_STATIC</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="57:5" pos:end="57:64"><expr pos:start="57:5" pos:end="57:63"><name pos:start="57:5" pos:end="57:9">nocow</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <call pos:start="57:13" pos:end="57:63"><name pos:start="57:13" pos:end="57:33">qemu_opt_get_bool_del</name><argument_list pos:start="57:34" pos:end="57:63">(<argument pos:start="57:35" pos:end="57:38"><expr pos:start="57:35" pos:end="57:38"><name pos:start="57:35" pos:end="57:38">opts</name></expr></argument>, <argument pos:start="57:41" pos:end="57:55"><expr pos:start="57:41" pos:end="57:55"><name pos:start="57:41" pos:end="57:55">BLOCK_OPT_NOCOW</name></expr></argument>, <argument pos:start="57:58" pos:end="57:62"><expr pos:start="57:58" pos:end="57:62"><name pos:start="57:58" pos:end="57:62">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="73:5"><if pos:start="61:5" pos:end="73:5">if <condition pos:start="61:8" pos:end="61:34">(<expr pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:13">bytes</name> <operator pos:start="61:15" pos:end="61:15">&gt;</operator> <name pos:start="61:17" pos:end="61:33">VDI_DISK_SIZE_MAX</name></expr>)</condition> <block pos:start="61:36" pos:end="73:5">{<block_content pos:start="63:9" pos:end="71:18">

        <expr_stmt pos:start="63:9" pos:end="63:26"><expr pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:14">result</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <operator pos:start="63:18" pos:end="63:18">-</operator><name pos:start="63:19" pos:end="63:25">ENOTSUP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="69:52"><expr pos:start="65:9" pos:end="69:51"><call pos:start="65:9" pos:end="69:51"><name pos:start="65:9" pos:end="65:18">error_setg</name><argument_list pos:start="65:19" pos:end="69:51">(<argument pos:start="65:20" pos:end="65:23"><expr pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:23">errp</name></expr></argument>, <argument pos:start="65:26" pos:end="67:61"><expr pos:start="65:26" pos:end="67:61"><literal type="string" pos:start="65:26" pos:end="65:66">"Unsupported VDI image size (size is 0x%"</literal> <name pos:start="65:68" pos:end="65:73">PRIx64</name>

                          <literal type="string" pos:start="67:27" pos:end="67:50">", max supported is 0x%"</literal> <name pos:start="67:52" pos:end="67:57">PRIx64</name> <literal type="string" pos:start="67:59" pos:end="67:61">")"</literal></expr></argument>,

                          <argument pos:start="69:27" pos:end="69:31"><expr pos:start="69:27" pos:end="69:31"><name pos:start="69:27" pos:end="69:31">bytes</name></expr></argument>, <argument pos:start="69:34" pos:end="69:50"><expr pos:start="69:34" pos:end="69:50"><name pos:start="69:34" pos:end="69:50">VDI_DISK_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:18">goto <name pos:start="71:14" pos:end="71:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="81:25"><expr pos:start="77:5" pos:end="81:24"><name pos:start="77:5" pos:end="77:6">fd</name> <operator pos:start="77:8" pos:end="77:8">=</operator> <call pos:start="77:10" pos:end="81:24"><name pos:start="77:10" pos:end="77:18">qemu_open</name><argument_list pos:start="77:19" pos:end="81:24">(<argument pos:start="77:20" pos:end="77:27"><expr pos:start="77:20" pos:end="77:27"><name pos:start="77:20" pos:end="77:27">filename</name></expr></argument>,

                   <argument pos:start="79:20" pos:end="79:72"><expr pos:start="79:20" pos:end="79:72"><name pos:start="79:20" pos:end="79:27">O_WRONLY</name> <operator pos:start="79:29" pos:end="79:29">|</operator> <name pos:start="79:31" pos:end="79:37">O_CREAT</name> <operator pos:start="79:39" pos:end="79:39">|</operator> <name pos:start="79:41" pos:end="79:47">O_TRUNC</name> <operator pos:start="79:49" pos:end="79:49">|</operator> <name pos:start="79:51" pos:end="79:58">O_BINARY</name> <operator pos:start="79:60" pos:end="79:60">|</operator> <name pos:start="79:62" pos:end="79:72">O_LARGEFILE</name></expr></argument>,

                   <argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><literal type="number" pos:start="81:20" pos:end="81:23">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:15">(<expr pos:start="83:9" pos:end="83:14"><name pos:start="83:9" pos:end="83:10">fd</name> <operator pos:start="83:12" pos:end="83:12">&lt;</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>)</condition> <block pos:start="83:17" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:18">

        <expr_stmt pos:start="85:9" pos:end="85:24"><expr pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:14">result</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <operator pos:start="85:18" pos:end="85:18">-</operator><name pos:start="85:19" pos:end="85:23">errno</name></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:18">goto <name pos:start="87:14" pos:end="87:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="93:5" pos:end="119:5"><if pos:start="93:5" pos:end="119:5">if <condition pos:start="93:8" pos:end="93:14">(<expr pos:start="93:9" pos:end="93:13"><name pos:start="93:9" pos:end="93:13">nocow</name></expr>)</condition> <block pos:start="93:16" pos:end="119:5">{<block_content pos:start="107:9" pos:end="118:0">

<cpp:ifdef pos:start="95:1" pos:end="95:16">#<cpp:directive pos:start="95:2" pos:end="95:6">ifdef</cpp:directive> <name pos:start="95:8" pos:end="95:16">__linux__</name></cpp:ifdef>

        <comment type="block" pos:start="97:9" pos:end="105:11">/* Set NOCOW flag to solve performance issue on fs like btrfs.

         * This is an optimisation. The FS_IOC_SETFLAGS ioctl return value will

         * be ignored since any failure of this operation should not block the

         * left work.

         */</comment>

        <decl_stmt pos:start="107:9" pos:end="107:17"><decl pos:start="107:9" pos:end="107:16"><type pos:start="107:9" pos:end="107:11"><name pos:start="107:9" pos:end="107:11">int</name></type> <name pos:start="107:13" pos:end="107:16">attr</name></decl>;</decl_stmt>

        <if_stmt pos:start="109:9" pos:end="118:0"><if pos:start="109:9" pos:end="118:0">if <condition pos:start="109:12" pos:end="109:51">(<expr pos:start="109:13" pos:end="109:50"><call pos:start="109:13" pos:end="109:45"><name pos:start="109:13" pos:end="109:17">ioctl</name><argument_list pos:start="109:18" pos:end="109:45">(<argument pos:start="109:19" pos:end="109:20"><expr pos:start="109:19" pos:end="109:20"><name pos:start="109:19" pos:end="109:20">fd</name></expr></argument>, <argument pos:start="109:23" pos:end="109:37"><expr pos:start="109:23" pos:end="109:37"><name pos:start="109:23" pos:end="109:37">FS_IOC_GETFLAGS</name></expr></argument>, <argument pos:start="109:40" pos:end="109:44"><expr pos:start="109:40" pos:end="109:44"><operator pos:start="109:40" pos:end="109:40">&amp;</operator><name pos:start="109:41" pos:end="109:44">attr</name></expr></argument>)</argument_list></call> <operator pos:start="109:47" pos:end="109:48">==</operator> <literal type="number" pos:start="109:50" pos:end="109:50">0</literal></expr>)</condition> <block pos:start="109:53" pos:end="118:0">{<block_content pos:start="111:13" pos:end="113:46">

            <expr_stmt pos:start="111:13" pos:end="111:32"><expr pos:start="111:13" pos:end="111:31"><name pos:start="111:13" pos:end="111:16">attr</name> <operator pos:start="111:18" pos:end="111:19">|=</operator> <name pos:start="111:21" pos:end="111:31">FS_NOCOW_FL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:46"><expr pos:start="113:13" pos:end="113:45"><call pos:start="113:13" pos:end="113:45"><name pos:start="113:13" pos:end="113:17">ioctl</name><argument_list pos:start="113:18" pos:end="113:45">(<argument pos:start="113:19" pos:end="113:20"><expr pos:start="113:19" pos:end="113:20"><name pos:start="113:19" pos:end="113:20">fd</name></expr></argument>, <argument pos:start="113:23" pos:end="113:37"><expr pos:start="113:23" pos:end="113:37"><name pos:start="113:23" pos:end="113:37">FS_IOC_SETFLAGS</name></expr></argument>, <argument pos:start="113:40" pos:end="113:44"><expr pos:start="113:40" pos:end="113:44"><operator pos:start="113:40" pos:end="113:40">&amp;</operator><name pos:start="113:41" pos:end="113:44">attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="123:5" pos:end="125:29">/* We need enough blocks to store the given disk size,

       so always round up. */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:51"><expr pos:start="127:5" pos:end="127:50"><name pos:start="127:5" pos:end="127:10">blocks</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <operator pos:start="127:14" pos:end="127:14">(</operator><name pos:start="127:15" pos:end="127:19">bytes</name> <operator pos:start="127:21" pos:end="127:21">+</operator> <name pos:start="127:23" pos:end="127:32">block_size</name> <operator pos:start="127:34" pos:end="127:34">-</operator> <literal type="number" pos:start="127:36" pos:end="127:36">1</literal><operator pos:start="127:37" pos:end="127:37">)</operator> <operator pos:start="127:39" pos:end="127:39">/</operator> <name pos:start="127:41" pos:end="127:50">block_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:42"><expr pos:start="131:5" pos:end="131:41"><name pos:start="131:5" pos:end="131:13">bmap_size</name> <operator pos:start="131:15" pos:end="131:15">=</operator> <name pos:start="131:17" pos:end="131:22">blocks</name> <operator pos:start="131:24" pos:end="131:24">*</operator> <sizeof pos:start="131:26" pos:end="131:41">sizeof<argument_list pos:start="131:32" pos:end="131:41">(<argument pos:start="131:33" pos:end="131:40"><expr pos:start="131:33" pos:end="131:40"><name pos:start="131:33" pos:end="131:40">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:68"><expr pos:start="133:5" pos:end="133:67"><name pos:start="133:5" pos:end="133:13">bmap_size</name> <operator pos:start="133:15" pos:end="133:15">=</operator> <operator pos:start="133:17" pos:end="133:17">(</operator><operator pos:start="133:18" pos:end="133:18">(</operator><name pos:start="133:19" pos:end="133:27">bmap_size</name> <operator pos:start="133:29" pos:end="133:29">+</operator> <name pos:start="133:31" pos:end="133:41">SECTOR_SIZE</name> <operator pos:start="133:43" pos:end="133:43">-</operator> <literal type="number" pos:start="133:45" pos:end="133:45">1</literal><operator pos:start="133:46" pos:end="133:46">)</operator> <operator pos:start="133:48" pos:end="133:48">&amp;</operator> <operator pos:start="133:50" pos:end="133:50">~</operator><operator pos:start="133:51" pos:end="133:51">(</operator><name pos:start="133:52" pos:end="133:62">SECTOR_SIZE</name> <operator pos:start="133:64" pos:end="133:64">-</operator><literal type="number" pos:start="133:65" pos:end="133:65">1</literal><operator pos:start="133:66" pos:end="133:66">)</operator><operator pos:start="133:67" pos:end="133:67">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:39"><expr pos:start="137:5" pos:end="137:38"><call pos:start="137:5" pos:end="137:38"><name pos:start="137:5" pos:end="137:10">memset</name><argument_list pos:start="137:11" pos:end="137:38">(<argument pos:start="137:12" pos:end="137:18"><expr pos:start="137:12" pos:end="137:18"><operator pos:start="137:12" pos:end="137:12">&amp;</operator><name pos:start="137:13" pos:end="137:18">header</name></expr></argument>, <argument pos:start="137:21" pos:end="137:21"><expr pos:start="137:21" pos:end="137:21"><literal type="number" pos:start="137:21" pos:end="137:21">0</literal></expr></argument>, <argument pos:start="137:24" pos:end="137:37"><expr pos:start="137:24" pos:end="137:37"><sizeof pos:start="137:24" pos:end="137:37">sizeof<argument_list pos:start="137:30" pos:end="137:37">(<argument pos:start="137:31" pos:end="137:36"><expr pos:start="137:31" pos:end="137:36"><name pos:start="137:31" pos:end="137:36">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:56"><expr pos:start="139:5" pos:end="139:55"><call pos:start="139:5" pos:end="139:55"><name pos:start="139:5" pos:end="139:11">pstrcpy</name><argument_list pos:start="139:12" pos:end="139:55">(<argument pos:start="139:13" pos:end="139:23"><expr pos:start="139:13" pos:end="139:23"><name pos:start="139:13" pos:end="139:23"><name pos:start="139:13" pos:end="139:18">header</name><operator pos:start="139:19" pos:end="139:19">.</operator><name pos:start="139:20" pos:end="139:23">text</name></name></expr></argument>, <argument pos:start="139:26" pos:end="139:44"><expr pos:start="139:26" pos:end="139:44"><sizeof pos:start="139:26" pos:end="139:44">sizeof<argument_list pos:start="139:32" pos:end="139:44">(<argument pos:start="139:33" pos:end="139:43"><expr pos:start="139:33" pos:end="139:43"><name pos:start="139:33" pos:end="139:43"><name pos:start="139:33" pos:end="139:38">header</name><operator pos:start="139:39" pos:end="139:39">.</operator><name pos:start="139:40" pos:end="139:43">text</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="139:47" pos:end="139:54"><expr pos:start="139:47" pos:end="139:54"><name pos:start="139:47" pos:end="139:54">VDI_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:37"><expr pos:start="141:5" pos:end="141:36"><name pos:start="141:5" pos:end="141:20"><name pos:start="141:5" pos:end="141:10">header</name><operator pos:start="141:11" pos:end="141:11">.</operator><name pos:start="141:12" pos:end="141:20">signature</name></name> <operator pos:start="141:22" pos:end="141:22">=</operator> <name pos:start="141:24" pos:end="141:36">VDI_SIGNATURE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:37"><expr pos:start="143:5" pos:end="143:36"><name pos:start="143:5" pos:end="143:18"><name pos:start="143:5" pos:end="143:10">header</name><operator pos:start="143:11" pos:end="143:11">.</operator><name pos:start="143:12" pos:end="143:18">version</name></name> <operator pos:start="143:20" pos:end="143:20">=</operator> <name pos:start="143:22" pos:end="143:36">VDI_VERSION_1_1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:31"><expr pos:start="145:5" pos:end="145:30"><name pos:start="145:5" pos:end="145:22"><name pos:start="145:5" pos:end="145:10">header</name><operator pos:start="145:11" pos:end="145:11">.</operator><name pos:start="145:12" pos:end="145:22">header_size</name></name> <operator pos:start="145:24" pos:end="145:24">=</operator> <literal type="number" pos:start="145:26" pos:end="145:30">0x180</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:35"><expr pos:start="147:5" pos:end="147:34"><name pos:start="147:5" pos:end="147:21"><name pos:start="147:5" pos:end="147:10">header</name><operator pos:start="147:11" pos:end="147:11">.</operator><name pos:start="147:12" pos:end="147:21">image_type</name></name> <operator pos:start="147:23" pos:end="147:23">=</operator> <name pos:start="147:25" pos:end="147:34">image_type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:31"><expr pos:start="149:5" pos:end="149:30"><name pos:start="149:5" pos:end="149:22"><name pos:start="149:5" pos:end="149:10">header</name><operator pos:start="149:11" pos:end="149:11">.</operator><name pos:start="149:12" pos:end="149:22">offset_bmap</name></name> <operator pos:start="149:24" pos:end="149:24">=</operator> <literal type="number" pos:start="149:26" pos:end="149:30">0x200</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:43"><expr pos:start="151:5" pos:end="151:42"><name pos:start="151:5" pos:end="151:22"><name pos:start="151:5" pos:end="151:10">header</name><operator pos:start="151:11" pos:end="151:11">.</operator><name pos:start="151:12" pos:end="151:22">offset_data</name></name> <operator pos:start="151:24" pos:end="151:24">=</operator> <literal type="number" pos:start="151:26" pos:end="151:32">0x200</literal> <operator pos:start="151:32" pos:end="151:32">+</operator> <name pos:start="151:34" pos:end="151:42">bmap_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:37"><expr pos:start="153:5" pos:end="153:36"><name pos:start="153:5" pos:end="153:22"><name pos:start="153:5" pos:end="153:10">header</name><operator pos:start="153:11" pos:end="153:11">.</operator><name pos:start="153:12" pos:end="153:22">sector_size</name></name> <operator pos:start="153:24" pos:end="153:24">=</operator> <name pos:start="153:26" pos:end="153:36">SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:29"><expr pos:start="155:5" pos:end="155:28"><name pos:start="155:5" pos:end="155:20"><name pos:start="155:5" pos:end="155:10">header</name><operator pos:start="155:11" pos:end="155:11">.</operator><name pos:start="155:12" pos:end="155:20">disk_size</name></name> <operator pos:start="155:22" pos:end="155:22">=</operator> <name pos:start="155:24" pos:end="155:28">bytes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:35"><expr pos:start="157:5" pos:end="157:34"><name pos:start="157:5" pos:end="157:21"><name pos:start="157:5" pos:end="157:10">header</name><operator pos:start="157:11" pos:end="157:11">.</operator><name pos:start="157:12" pos:end="157:21">block_size</name></name> <operator pos:start="157:23" pos:end="157:23">=</operator> <name pos:start="157:25" pos:end="157:34">block_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:36"><expr pos:start="159:5" pos:end="159:35"><name pos:start="159:5" pos:end="159:26"><name pos:start="159:5" pos:end="159:10">header</name><operator pos:start="159:11" pos:end="159:11">.</operator><name pos:start="159:12" pos:end="159:26">blocks_in_image</name></name> <operator pos:start="159:28" pos:end="159:28">=</operator> <name pos:start="159:30" pos:end="159:35">blocks</name></expr>;</expr_stmt>

    <if_stmt pos:start="161:5" pos:end="165:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:38">(<expr pos:start="161:9" pos:end="161:37"><name pos:start="161:9" pos:end="161:18">image_type</name> <operator pos:start="161:20" pos:end="161:21">==</operator> <name pos:start="161:23" pos:end="161:37">VDI_TYPE_STATIC</name></expr>)</condition> <block pos:start="161:40" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:41">

        <expr_stmt pos:start="163:9" pos:end="163:41"><expr pos:start="163:9" pos:end="163:40"><name pos:start="163:9" pos:end="163:31"><name pos:start="163:9" pos:end="163:14">header</name><operator pos:start="163:15" pos:end="163:15">.</operator><name pos:start="163:16" pos:end="163:31">blocks_allocated</name></name> <operator pos:start="163:33" pos:end="163:33">=</operator> <name pos:start="163:35" pos:end="163:40">blocks</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:37"><expr pos:start="167:5" pos:end="167:36"><call pos:start="167:5" pos:end="167:36"><name pos:start="167:5" pos:end="167:17">uuid_generate</name><argument_list pos:start="167:18" pos:end="167:36">(<argument pos:start="167:19" pos:end="167:35"><expr pos:start="167:19" pos:end="167:35"><name pos:start="167:19" pos:end="167:35"><name pos:start="167:19" pos:end="167:24">header</name><operator pos:start="167:25" pos:end="167:25">.</operator><name pos:start="167:26" pos:end="167:35">uuid_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="174:0"><expr pos:start="169:5" pos:end="169:40"><call pos:start="169:5" pos:end="169:40"><name pos:start="169:5" pos:end="169:17">uuid_generate</name><argument_list pos:start="169:18" pos:end="169:40">(<argument pos:start="169:19" pos:end="169:39"><expr pos:start="169:19" pos:end="169:39"><name pos:start="169:19" pos:end="169:39"><name pos:start="169:19" pos:end="169:24">header</name><operator pos:start="169:25" pos:end="169:25">.</operator><name pos:start="169:26" pos:end="169:39">uuid_last_snap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="171:5" pos:end="171:78">/* There is no need to set header.uuid_link or header.uuid_parent here. */</comment>

<cpp:if pos:start="173:1" pos:end="173:29">#<cpp:directive pos:start="173:2" pos:end="173:3">if</cpp:directive> <expr pos:start="173:5" pos:end="173:29"><call pos:start="173:5" pos:end="173:29"><name pos:start="173:5" pos:end="173:11">defined</name><argument_list pos:start="173:12" pos:end="173:29">(<argument pos:start="173:13" pos:end="173:28"><expr pos:start="173:13" pos:end="173:28"><name pos:start="173:13" pos:end="173:28">CONFIG_VDI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="175:5" pos:end="178:0"><expr pos:start="175:5" pos:end="175:29"><call pos:start="175:5" pos:end="175:29"><name pos:start="175:5" pos:end="175:20">vdi_header_print</name><argument_list pos:start="175:21" pos:end="175:29">(<argument pos:start="175:22" pos:end="175:28"><expr pos:start="175:22" pos:end="175:28"><operator pos:start="175:22" pos:end="175:22">&amp;</operator><name pos:start="175:23" pos:end="175:28">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="177:1" pos:end="177:6">#<cpp:directive pos:start="177:2" pos:end="177:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="179:5" pos:end="179:30"><expr pos:start="179:5" pos:end="179:29"><call pos:start="179:5" pos:end="179:29"><name pos:start="179:5" pos:end="179:20">vdi_header_to_le</name><argument_list pos:start="179:21" pos:end="179:29">(<argument pos:start="179:22" pos:end="179:28"><expr pos:start="179:22" pos:end="179:28"><operator pos:start="179:22" pos:end="179:22">&amp;</operator><name pos:start="179:23" pos:end="179:28">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="181:5" pos:end="187:5"><if pos:start="181:5" pos:end="187:5">if <condition pos:start="181:8" pos:end="181:47">(<expr pos:start="181:9" pos:end="181:46"><call pos:start="181:9" pos:end="181:42"><name pos:start="181:9" pos:end="181:13">write</name><argument_list pos:start="181:14" pos:end="181:42">(<argument pos:start="181:15" pos:end="181:16"><expr pos:start="181:15" pos:end="181:16"><name pos:start="181:15" pos:end="181:16">fd</name></expr></argument>, <argument pos:start="181:19" pos:end="181:25"><expr pos:start="181:19" pos:end="181:25"><operator pos:start="181:19" pos:end="181:19">&amp;</operator><name pos:start="181:20" pos:end="181:25">header</name></expr></argument>, <argument pos:start="181:28" pos:end="181:41"><expr pos:start="181:28" pos:end="181:41"><sizeof pos:start="181:28" pos:end="181:41">sizeof<argument_list pos:start="181:34" pos:end="181:41">(<argument pos:start="181:35" pos:end="181:40"><expr pos:start="181:35" pos:end="181:40"><name pos:start="181:35" pos:end="181:40">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="181:44" pos:end="181:44">&lt;</operator> <literal type="number" pos:start="181:46" pos:end="181:46">0</literal></expr>)</condition> <block pos:start="181:49" pos:end="187:5">{<block_content pos:start="183:9" pos:end="185:28">

        <expr_stmt pos:start="183:9" pos:end="183:24"><expr pos:start="183:9" pos:end="183:23"><name pos:start="183:9" pos:end="183:14">result</name> <operator pos:start="183:16" pos:end="183:16">=</operator> <operator pos:start="183:18" pos:end="183:18">-</operator><name pos:start="183:19" pos:end="183:23">errno</name></expr>;</expr_stmt>

        <goto pos:start="185:9" pos:end="185:28">goto <name pos:start="185:14" pos:end="185:27">close_and_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="191:5" pos:end="221:5"><if pos:start="191:5" pos:end="221:5">if <condition pos:start="191:8" pos:end="191:22">(<expr pos:start="191:9" pos:end="191:21"><name pos:start="191:9" pos:end="191:17">bmap_size</name> <operator pos:start="191:19" pos:end="191:19">&gt;</operator> <literal type="number" pos:start="191:21" pos:end="191:21">0</literal></expr>)</condition> <block pos:start="191:24" pos:end="221:5">{<block_content pos:start="193:9" pos:end="219:21">

        <decl_stmt pos:start="193:9" pos:end="193:46"><decl pos:start="193:9" pos:end="193:45"><type pos:start="193:9" pos:end="193:18"><name pos:start="193:9" pos:end="193:16">uint32_t</name> <modifier pos:start="193:18" pos:end="193:18">*</modifier></type><name pos:start="193:19" pos:end="193:22">bmap</name> <init pos:start="193:24" pos:end="193:45">= <expr pos:start="193:26" pos:end="193:45"><call pos:start="193:26" pos:end="193:45"><name pos:start="193:26" pos:end="193:34">g_malloc0</name><argument_list pos:start="193:35" pos:end="193:45">(<argument pos:start="193:36" pos:end="193:44"><expr pos:start="193:36" pos:end="193:44"><name pos:start="193:36" pos:end="193:44">bmap_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for pos:start="195:9" pos:end="207:9">for <control pos:start="195:13" pos:end="195:36">(<init pos:start="195:14" pos:end="195:19"><expr pos:start="195:14" pos:end="195:18"><name pos:start="195:14" pos:end="195:14">i</name> <operator pos:start="195:16" pos:end="195:16">=</operator> <literal type="number" pos:start="195:18" pos:end="195:18">0</literal></expr>;</init> <condition pos:start="195:21" pos:end="195:31"><expr pos:start="195:21" pos:end="195:30"><name pos:start="195:21" pos:end="195:21">i</name> <operator pos:start="195:23" pos:end="195:23">&lt;</operator> <name pos:start="195:25" pos:end="195:30">blocks</name></expr>;</condition> <incr pos:start="195:33" pos:end="195:35"><expr pos:start="195:33" pos:end="195:35"><name pos:start="195:33" pos:end="195:33">i</name><operator pos:start="195:34" pos:end="195:35">++</operator></expr></incr>)</control> <block pos:start="195:38" pos:end="207:9">{<block_content pos:start="197:13" pos:end="205:13">

            <if_stmt pos:start="197:13" pos:end="205:13"><if pos:start="197:13" pos:end="201:13">if <condition pos:start="197:16" pos:end="197:46">(<expr pos:start="197:17" pos:end="197:45"><name pos:start="197:17" pos:end="197:26">image_type</name> <operator pos:start="197:28" pos:end="197:29">==</operator> <name pos:start="197:31" pos:end="197:45">VDI_TYPE_STATIC</name></expr>)</condition> <block pos:start="197:48" pos:end="201:13">{<block_content pos:start="199:17" pos:end="199:28">

                <expr_stmt pos:start="199:17" pos:end="199:28"><expr pos:start="199:17" pos:end="199:27"><name pos:start="199:17" pos:end="199:23"><name pos:start="199:17" pos:end="199:20">bmap</name><index pos:start="199:21" pos:end="199:23">[<expr pos:start="199:22" pos:end="199:22"><name pos:start="199:22" pos:end="199:22">i</name></expr>]</index></name> <operator pos:start="199:25" pos:end="199:25">=</operator> <name pos:start="199:27" pos:end="199:27">i</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="201:15" pos:end="205:13">else <block pos:start="201:20" pos:end="205:13">{<block_content pos:start="203:17" pos:end="203:42">

                <expr_stmt pos:start="203:17" pos:end="203:42"><expr pos:start="203:17" pos:end="203:41"><name pos:start="203:17" pos:end="203:23"><name pos:start="203:17" pos:end="203:20">bmap</name><index pos:start="203:21" pos:end="203:23">[<expr pos:start="203:22" pos:end="203:22"><name pos:start="203:22" pos:end="203:22">i</name></expr>]</index></name> <operator pos:start="203:25" pos:end="203:25">=</operator> <name pos:start="203:27" pos:end="203:41">VDI_UNALLOCATED</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="209:9" pos:end="217:9"><if pos:start="209:9" pos:end="217:9">if <condition pos:start="209:12" pos:end="209:43">(<expr pos:start="209:13" pos:end="209:42"><call pos:start="209:13" pos:end="209:38"><name pos:start="209:13" pos:end="209:17">write</name><argument_list pos:start="209:18" pos:end="209:38">(<argument pos:start="209:19" pos:end="209:20"><expr pos:start="209:19" pos:end="209:20"><name pos:start="209:19" pos:end="209:20">fd</name></expr></argument>, <argument pos:start="209:23" pos:end="209:26"><expr pos:start="209:23" pos:end="209:26"><name pos:start="209:23" pos:end="209:26">bmap</name></expr></argument>, <argument pos:start="209:29" pos:end="209:37"><expr pos:start="209:29" pos:end="209:37"><name pos:start="209:29" pos:end="209:37">bmap_size</name></expr></argument>)</argument_list></call> <operator pos:start="209:40" pos:end="209:40">&lt;</operator> <literal type="number" pos:start="209:42" pos:end="209:42">0</literal></expr>)</condition> <block pos:start="209:45" pos:end="217:9">{<block_content pos:start="211:13" pos:end="215:32">

            <expr_stmt pos:start="211:13" pos:end="211:28"><expr pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:18">result</name> <operator pos:start="211:20" pos:end="211:20">=</operator> <operator pos:start="211:22" pos:end="211:22">-</operator><name pos:start="211:23" pos:end="211:27">errno</name></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:25"><expr pos:start="213:13" pos:end="213:24"><call pos:start="213:13" pos:end="213:24"><name pos:start="213:13" pos:end="213:18">g_free</name><argument_list pos:start="213:19" pos:end="213:24">(<argument pos:start="213:20" pos:end="213:23"><expr pos:start="213:20" pos:end="213:23"><name pos:start="213:20" pos:end="213:23">bmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="215:13" pos:end="215:32">goto <name pos:start="215:18" pos:end="215:31">close_and_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:21"><expr pos:start="219:9" pos:end="219:20"><call pos:start="219:9" pos:end="219:20"><name pos:start="219:9" pos:end="219:14">g_free</name><argument_list pos:start="219:15" pos:end="219:20">(<argument pos:start="219:16" pos:end="219:19"><expr pos:start="219:16" pos:end="219:19"><name pos:start="219:16" pos:end="219:19">bmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="225:5" pos:end="235:5"><if pos:start="225:5" pos:end="235:5">if <condition pos:start="225:8" pos:end="225:38">(<expr pos:start="225:9" pos:end="225:37"><name pos:start="225:9" pos:end="225:18">image_type</name> <operator pos:start="225:20" pos:end="225:21">==</operator> <name pos:start="225:23" pos:end="225:37">VDI_TYPE_STATIC</name></expr>)</condition> <block pos:start="225:40" pos:end="235:5">{<block_content pos:start="227:9" pos:end="233:9">

        <if_stmt pos:start="227:9" pos:end="233:9"><if pos:start="227:9" pos:end="233:9">if <condition pos:start="227:12" pos:end="227:76">(<expr pos:start="227:13" pos:end="227:75"><call pos:start="227:13" pos:end="227:75"><name pos:start="227:13" pos:end="227:21">ftruncate</name><argument_list pos:start="227:22" pos:end="227:75">(<argument pos:start="227:23" pos:end="227:24"><expr pos:start="227:23" pos:end="227:24"><name pos:start="227:23" pos:end="227:24">fd</name></expr></argument>, <argument pos:start="227:27" pos:end="227:74"><expr pos:start="227:27" pos:end="227:74"><sizeof pos:start="227:27" pos:end="227:40">sizeof<argument_list pos:start="227:33" pos:end="227:40">(<argument pos:start="227:34" pos:end="227:39"><expr pos:start="227:34" pos:end="227:39"><name pos:start="227:34" pos:end="227:39">header</name></expr></argument>)</argument_list></sizeof> <operator pos:start="227:42" pos:end="227:42">+</operator> <name pos:start="227:44" pos:end="227:52">bmap_size</name> <operator pos:start="227:54" pos:end="227:54">+</operator> <name pos:start="227:56" pos:end="227:61">blocks</name> <operator pos:start="227:63" pos:end="227:63">*</operator> <name pos:start="227:65" pos:end="227:74">block_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="227:78" pos:end="233:9">{<block_content pos:start="229:13" pos:end="231:32">

            <expr_stmt pos:start="229:13" pos:end="229:28"><expr pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:18">result</name> <operator pos:start="229:20" pos:end="229:20">=</operator> <operator pos:start="229:22" pos:end="229:22">-</operator><name pos:start="229:23" pos:end="229:27">errno</name></expr>;</expr_stmt>

            <goto pos:start="231:13" pos:end="231:32">goto <name pos:start="231:18" pos:end="231:31">close_and_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="239:1" pos:end="239:15"><name pos:start="239:1" pos:end="239:14">close_and_exit</name>:</label>

    <if_stmt pos:start="241:5" pos:end="245:5"><if pos:start="241:5" pos:end="245:5">if <condition pos:start="241:8" pos:end="241:35">(<expr pos:start="241:9" pos:end="241:34"><operator pos:start="241:9" pos:end="241:9">(</operator><call pos:start="241:10" pos:end="241:18"><name pos:start="241:10" pos:end="241:14">close</name><argument_list pos:start="241:15" pos:end="241:18">(<argument pos:start="241:16" pos:end="241:17"><expr pos:start="241:16" pos:end="241:17"><name pos:start="241:16" pos:end="241:17">fd</name></expr></argument>)</argument_list></call> <operator pos:start="241:20" pos:end="241:20">&lt;</operator> <literal type="number" pos:start="241:22" pos:end="241:22">0</literal><operator pos:start="241:23" pos:end="241:23">)</operator> <operator pos:start="241:25" pos:end="241:26">&amp;&amp;</operator> <operator pos:start="241:28" pos:end="241:28">!</operator><name pos:start="241:29" pos:end="241:34">result</name></expr>)</condition> <block pos:start="241:37" pos:end="245:5">{<block_content pos:start="243:9" pos:end="243:24">

        <expr_stmt pos:start="243:9" pos:end="243:24"><expr pos:start="243:9" pos:end="243:23"><name pos:start="243:9" pos:end="243:14">result</name> <operator pos:start="243:16" pos:end="243:16">=</operator> <operator pos:start="243:18" pos:end="243:18">-</operator><name pos:start="243:19" pos:end="243:23">errno</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="249:1" pos:end="249:5"><name pos:start="249:1" pos:end="249:4">exit</name>:</label>

    <return pos:start="251:5" pos:end="251:18">return <expr pos:start="251:12" pos:end="251:17"><name pos:start="251:12" pos:end="251:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
