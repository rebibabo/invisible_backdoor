<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25012.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">check_directory_consistency</name><parameter_list pos:start="1:39" pos:end="3:42">(<parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><name pos:start="1:40" pos:end="1:53">BDRVVVFATState</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">s</name></decl></parameter>,

	<parameter pos:start="3:9" pos:end="3:23"><decl pos:start="3:9" pos:end="3:23"><type pos:start="3:9" pos:end="3:23"><name pos:start="3:9" pos:end="3:11">int</name></type> <name pos:start="3:13" pos:end="3:23">cluster_num</name></decl></parameter>, <parameter pos:start="3:26" pos:end="3:41"><decl pos:start="3:26" pos:end="3:41"><type pos:start="3:26" pos:end="3:41"><specifier pos:start="3:26" pos:end="3:30">const</specifier> <name pos:start="3:32" pos:end="3:35">char</name><modifier pos:start="3:36" pos:end="3:36">*</modifier></type> <name pos:start="3:38" pos:end="3:41">path</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="243:1">{<block_content pos:start="7:5" pos:end="241:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:55"><decl pos:start="9:5" pos:end="9:54"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name><modifier pos:start="9:18" pos:end="9:18">*</modifier></type> <name pos:start="9:20" pos:end="9:26">cluster</name> <init pos:start="9:28" pos:end="9:54">= <expr pos:start="9:30" pos:end="9:54"><call pos:start="9:30" pos:end="9:54"><name pos:start="9:30" pos:end="9:37">g_malloc</name><argument_list pos:start="9:38" pos:end="9:54">(<argument pos:start="9:39" pos:end="9:53"><expr pos:start="9:39" pos:end="9:53"><name pos:start="9:39" pos:end="9:53"><name pos:start="9:39" pos:end="9:39">s</name><operator pos:start="9:40" pos:end="9:41">-&gt;</operator><name pos:start="9:42" pos:end="9:53">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:49"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:14">direntry_t</name><modifier pos:start="11:15" pos:end="11:15">*</modifier></type> <name pos:start="11:17" pos:end="11:26">direntries</name> <init pos:start="11:28" pos:end="11:49">= <expr pos:start="11:30" pos:end="11:49"><operator pos:start="11:30" pos:end="11:30">(</operator><name pos:start="11:31" pos:end="11:40">direntry_t</name><operator pos:start="11:41" pos:end="11:41">*</operator><operator pos:start="11:42" pos:end="11:42">)</operator><name pos:start="11:43" pos:end="11:49">cluster</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:66"><decl pos:start="13:5" pos:end="13:65"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:13">mapping_t</name><modifier pos:start="13:14" pos:end="13:14">*</modifier></type> <name pos:start="13:16" pos:end="13:22">mapping</name> <init pos:start="13:24" pos:end="13:65">= <expr pos:start="13:26" pos:end="13:65"><call pos:start="13:26" pos:end="13:65"><name pos:start="13:26" pos:end="13:49">find_mapping_for_cluster</name><argument_list pos:start="13:50" pos:end="13:65">(<argument pos:start="13:51" pos:end="13:51"><expr pos:start="13:51" pos:end="13:51"><name pos:start="13:51" pos:end="13:51">s</name></expr></argument>, <argument pos:start="13:54" pos:end="13:64"><expr pos:start="13:54" pos:end="13:64"><name pos:start="13:54" pos:end="13:64">cluster_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:18">long_file_name</name></type> <name pos:start="17:20" pos:end="17:22">lfn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:16">path_len</name> <init pos:start="19:18" pos:end="19:31">= <expr pos:start="19:20" pos:end="19:31"><call pos:start="19:20" pos:end="19:31"><name pos:start="19:20" pos:end="19:25">strlen</name><argument_list pos:start="19:26" pos:end="19:31">(<argument pos:start="19:27" pos:end="19:30"><expr pos:start="19:27" pos:end="19:30"><name pos:start="19:27" pos:end="19:30">path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">char</name></type> <name pos:start="21:10" pos:end="21:24"><name pos:start="21:10" pos:end="21:14">path2</name><index pos:start="21:15" pos:end="21:24">[<expr pos:start="21:16" pos:end="21:23"><name pos:start="21:16" pos:end="21:23">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><call pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:31">(<argument pos:start="25:12" pos:end="25:30"><expr pos:start="25:12" pos:end="25:30"><name pos:start="25:12" pos:end="25:19">path_len</name> <operator pos:start="25:21" pos:end="25:21">&lt;</operator> <name pos:start="25:23" pos:end="25:30">PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="25:34" pos:end="25:61">/* len was tested before! */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:40"><expr pos:start="27:5" pos:end="27:39"><call pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:11">pstrcpy</name><argument_list pos:start="27:12" pos:end="27:39">(<argument pos:start="27:13" pos:end="27:17"><expr pos:start="27:13" pos:end="27:17"><name pos:start="27:13" pos:end="27:17">path2</name></expr></argument>, <argument pos:start="27:20" pos:end="27:32"><expr pos:start="27:20" pos:end="27:32"><sizeof pos:start="27:20" pos:end="27:32">sizeof<argument_list pos:start="27:26" pos:end="27:32">(<argument pos:start="27:27" pos:end="27:31"><expr pos:start="27:27" pos:end="27:31"><name pos:start="27:27" pos:end="27:31">path2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="27:35" pos:end="27:38"><expr pos:start="27:35" pos:end="27:38"><name pos:start="27:35" pos:end="27:38">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:26"><expr pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:9">path2</name><index pos:start="29:10" pos:end="29:19">[<expr pos:start="29:11" pos:end="29:18"><name pos:start="29:11" pos:end="29:18">path_len</name></expr>]</index></name> <operator pos:start="29:21" pos:end="29:21">=</operator> <literal type="char" pos:start="29:23" pos:end="29:25">'/'</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:31"><expr pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:9">path2</name><index pos:start="31:10" pos:end="31:23">[<expr pos:start="31:11" pos:end="31:22"><name pos:start="31:11" pos:end="31:18">path_len</name> <operator pos:start="31:20" pos:end="31:20">+</operator> <literal type="number" pos:start="31:22" pos:end="31:22">1</literal></expr>]</index></name> <operator pos:start="31:25" pos:end="31:25">=</operator> <literal type="char" pos:start="31:27" pos:end="31:30">'\0'</literal></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="61:55"><if pos:start="35:5" pos:end="57:5">if <condition pos:start="35:8" pos:end="35:16">(<expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:15">mapping</name></expr>)</condition> <block pos:start="35:18" pos:end="57:5">{<block_content pos:start="37:9" pos:end="55:60">

	<decl_stmt pos:start="37:9" pos:end="37:59"><decl pos:start="37:9" pos:end="37:58"><type pos:start="37:9" pos:end="37:19"><specifier pos:start="37:9" pos:end="37:13">const</specifier> <name pos:start="37:15" pos:end="37:18">char</name><modifier pos:start="37:19" pos:end="37:19">*</modifier></type> <name pos:start="37:21" pos:end="37:28">basename</name> <init pos:start="37:30" pos:end="37:58">= <expr pos:start="37:32" pos:end="37:58"><call pos:start="37:32" pos:end="37:58"><name pos:start="37:32" pos:end="37:43">get_basename</name><argument_list pos:start="37:44" pos:end="37:58">(<argument pos:start="37:45" pos:end="37:57"><expr pos:start="37:45" pos:end="37:57"><name pos:start="37:45" pos:end="37:57"><name pos:start="37:45" pos:end="37:51">mapping</name><operator pos:start="37:52" pos:end="37:53">-&gt;</operator><name pos:start="37:54" pos:end="37:57">path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="39:9" pos:end="39:51"><decl pos:start="39:9" pos:end="39:50"><type pos:start="39:9" pos:end="39:19"><specifier pos:start="39:9" pos:end="39:13">const</specifier> <name pos:start="39:15" pos:end="39:18">char</name><modifier pos:start="39:19" pos:end="39:19">*</modifier></type> <name pos:start="39:21" pos:end="39:29">basename2</name> <init pos:start="39:31" pos:end="39:50">= <expr pos:start="39:33" pos:end="39:50"><call pos:start="39:33" pos:end="39:50"><name pos:start="39:33" pos:end="39:44">get_basename</name><argument_list pos:start="39:45" pos:end="39:50">(<argument pos:start="39:46" pos:end="39:49"><expr pos:start="39:46" pos:end="39:49"><name pos:start="39:46" pos:end="39:49">path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



	<expr_stmt pos:start="43:9" pos:end="43:47"><expr pos:start="43:9" pos:end="43:46"><call pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:14">assert</name><argument_list pos:start="43:15" pos:end="43:46">(<argument pos:start="43:16" pos:end="43:45"><expr pos:start="43:16" pos:end="43:45"><name pos:start="43:16" pos:end="43:28"><name pos:start="43:16" pos:end="43:22">mapping</name><operator pos:start="43:23" pos:end="43:24">-&gt;</operator><name pos:start="43:25" pos:end="43:28">mode</name></name> <operator pos:start="43:30" pos:end="43:30">&amp;</operator> <name pos:start="43:32" pos:end="43:45">MODE_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="47:9" pos:end="47:45"><expr pos:start="47:9" pos:end="47:44"><call pos:start="47:9" pos:end="47:44"><name pos:start="47:9" pos:end="47:14">assert</name><argument_list pos:start="47:15" pos:end="47:44">(<argument pos:start="47:16" pos:end="47:43"><expr pos:start="47:16" pos:end="47:43"><name pos:start="47:16" pos:end="47:28"><name pos:start="47:16" pos:end="47:22">mapping</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:28">mode</name></name> <operator pos:start="47:30" pos:end="47:30">&amp;</operator> <name pos:start="47:32" pos:end="47:43">MODE_DELETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="49:9" pos:end="49:39"><expr pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:15">mapping</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:21">mode</name></name> <operator pos:start="49:23" pos:end="49:24">&amp;=</operator> <operator pos:start="49:26" pos:end="49:26">~</operator><name pos:start="49:27" pos:end="49:38">MODE_DELETED</name></expr>;</expr_stmt>



	<if_stmt pos:start="53:9" pos:end="55:60"><if pos:start="53:9" pos:end="55:60">if <condition pos:start="53:12" pos:end="53:40">(<expr pos:start="53:13" pos:end="53:39"><call pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:18">strcmp</name><argument_list pos:start="53:19" pos:end="53:39">(<argument pos:start="53:20" pos:end="53:27"><expr pos:start="53:20" pos:end="53:27"><name pos:start="53:20" pos:end="53:27">basename</name></expr></argument>, <argument pos:start="53:30" pos:end="53:38"><expr pos:start="53:30" pos:end="53:38"><name pos:start="53:30" pos:end="53:38">basename2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:60"><block_content pos:start="55:13" pos:end="55:60">

	    <expr_stmt pos:start="55:13" pos:end="55:60"><expr pos:start="55:13" pos:end="55:59"><call pos:start="55:13" pos:end="55:59"><name pos:start="55:13" pos:end="55:27">schedule_rename</name><argument_list pos:start="55:28" pos:end="55:59">(<argument pos:start="55:29" pos:end="55:29"><expr pos:start="55:29" pos:end="55:29"><name pos:start="55:29" pos:end="55:29">s</name></expr></argument>, <argument pos:start="55:32" pos:end="55:42"><expr pos:start="55:32" pos:end="55:42"><name pos:start="55:32" pos:end="55:42">cluster_num</name></expr></argument>, <argument pos:start="55:45" pos:end="55:58"><expr pos:start="55:45" pos:end="55:58"><call pos:start="55:45" pos:end="55:58"><name pos:start="55:45" pos:end="55:52">g_strdup</name><argument_list pos:start="55:53" pos:end="55:58">(<argument pos:start="55:54" pos:end="55:57"><expr pos:start="55:54" pos:end="55:57"><name pos:start="55:54" pos:end="55:57">path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="61:55">else<block type="pseudo" pos:start="61:9" pos:end="61:55"><block_content pos:start="61:9" pos:end="61:55">

	<comment type="block" pos:start="59:9" pos:end="59:27">/* new directory */</comment>

	<expr_stmt pos:start="61:9" pos:end="61:55"><expr pos:start="61:9" pos:end="61:54"><call pos:start="61:9" pos:end="61:54"><name pos:start="61:9" pos:end="61:22">schedule_mkdir</name><argument_list pos:start="61:23" pos:end="61:54">(<argument pos:start="61:24" pos:end="61:24"><expr pos:start="61:24" pos:end="61:24"><name pos:start="61:24" pos:end="61:24">s</name></expr></argument>, <argument pos:start="61:27" pos:end="61:37"><expr pos:start="61:27" pos:end="61:37"><name pos:start="61:27" pos:end="61:37">cluster_num</name></expr></argument>, <argument pos:start="61:40" pos:end="61:53"><expr pos:start="61:40" pos:end="61:53"><call pos:start="61:40" pos:end="61:53"><name pos:start="61:40" pos:end="61:47">g_strdup</name><argument_list pos:start="61:48" pos:end="61:53">(<argument pos:start="61:49" pos:end="61:52"><expr pos:start="61:49" pos:end="61:52"><name pos:start="61:49" pos:end="61:52">path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:19"><expr pos:start="65:5" pos:end="65:18"><call pos:start="65:5" pos:end="65:18"><name pos:start="65:5" pos:end="65:12">lfn_init</name><argument_list pos:start="65:13" pos:end="65:18">(<argument pos:start="65:14" pos:end="65:17"><expr pos:start="65:14" pos:end="65:17"><operator pos:start="65:14" pos:end="65:14">&amp;</operator><name pos:start="65:15" pos:end="65:17">lfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="67:5" pos:end="235:38">do <block pos:start="67:8" pos:end="235:5">{<block_content pos:start="69:9" pos:end="233:55">

	<decl_stmt pos:start="69:9" pos:end="69:14"><decl pos:start="69:9" pos:end="69:13"><type pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">int</name></type> <name pos:start="69:13" pos:end="69:13">i</name></decl>;</decl_stmt>

	<decl_stmt pos:start="71:9" pos:end="71:23"><decl pos:start="71:9" pos:end="71:22"><type pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">int</name></type> <name pos:start="71:13" pos:end="71:18">subret</name> <init pos:start="71:20" pos:end="71:22">= <expr pos:start="71:22" pos:end="71:22"><literal type="number" pos:start="71:22" pos:end="71:22">0</literal></expr></init></decl>;</decl_stmt>



	<expr_stmt pos:start="75:9" pos:end="75:14"><expr pos:start="75:9" pos:end="75:13"><name pos:start="75:9" pos:end="75:11">ret</name><operator pos:start="75:12" pos:end="75:13">++</operator></expr>;</expr_stmt>



	<if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:53">(<expr pos:start="79:13" pos:end="79:52"><name pos:start="79:13" pos:end="79:41"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:28">used_clusters</name><index pos:start="79:29" pos:end="79:41">[<expr pos:start="79:30" pos:end="79:40"><name pos:start="79:30" pos:end="79:40">cluster_num</name></expr>]</index></name> <operator pos:start="79:43" pos:end="79:43">&amp;</operator> <name pos:start="79:45" pos:end="79:52">USED_ANY</name></expr>)</condition> <block pos:start="79:55" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:21">

	    <expr_stmt pos:start="81:13" pos:end="81:82"><expr pos:start="81:13" pos:end="81:81"><call pos:start="81:13" pos:end="81:81"><name pos:start="81:13" pos:end="81:19">fprintf</name><argument_list pos:start="81:20" pos:end="81:81">(<argument pos:start="81:21" pos:end="81:26"><expr pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:26">stderr</name></expr></argument>, <argument pos:start="81:29" pos:end="81:62"><expr pos:start="81:29" pos:end="81:62"><literal type="string" pos:start="81:29" pos:end="81:62">"cluster %d used more than once\n"</literal></expr></argument>, <argument pos:start="81:65" pos:end="81:80"><expr pos:start="81:65" pos:end="81:80"><operator pos:start="81:65" pos:end="81:65">(</operator><name pos:start="81:66" pos:end="81:68">int</name><operator pos:start="81:69" pos:end="81:69">)</operator><name pos:start="81:70" pos:end="81:80">cluster_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="83:13" pos:end="83:21">return <expr pos:start="83:20" pos:end="83:20"><literal type="number" pos:start="83:20" pos:end="83:20">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="87:9" pos:end="87:55"><expr pos:start="87:9" pos:end="87:54"><name pos:start="87:9" pos:end="87:37"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:24">used_clusters</name><index pos:start="87:25" pos:end="87:37">[<expr pos:start="87:26" pos:end="87:36"><name pos:start="87:26" pos:end="87:36">cluster_num</name></expr>]</index></name> <operator pos:start="87:39" pos:end="87:39">=</operator> <name pos:start="87:41" pos:end="87:54">USED_DIRECTORY</name></expr>;</expr_stmt>



<expr_stmt pos:start="91:1" pos:end="91:110"><expr pos:start="91:1" pos:end="91:109"><call pos:start="91:1" pos:end="91:109"><name pos:start="91:1" pos:end="91:4">DLOG</name><argument_list pos:start="91:5" pos:end="91:109">(<argument pos:start="91:6" pos:end="91:108"><expr pos:start="91:6" pos:end="91:108"><call pos:start="91:6" pos:end="91:108"><name pos:start="91:6" pos:end="91:12">fprintf</name><argument_list pos:start="91:13" pos:end="91:108">(<argument pos:start="91:14" pos:end="91:19"><expr pos:start="91:14" pos:end="91:19"><name pos:start="91:14" pos:end="91:19">stderr</name></expr></argument>, <argument pos:start="91:22" pos:end="91:52"><expr pos:start="91:22" pos:end="91:52"><literal type="string" pos:start="91:22" pos:end="91:52">"read cluster %d (sector %d)\n"</literal></expr></argument>, <argument pos:start="91:55" pos:end="91:70"><expr pos:start="91:55" pos:end="91:70"><operator pos:start="91:55" pos:end="91:55">(</operator><name pos:start="91:56" pos:end="91:58">int</name><operator pos:start="91:59" pos:end="91:59">)</operator><name pos:start="91:60" pos:end="91:70">cluster_num</name></expr></argument>, <argument pos:start="91:73" pos:end="91:107"><expr pos:start="91:73" pos:end="91:107"><operator pos:start="91:73" pos:end="91:73">(</operator><name pos:start="91:74" pos:end="91:76">int</name><operator pos:start="91:77" pos:end="91:77">)</operator><call pos:start="91:78" pos:end="91:107"><name pos:start="91:78" pos:end="91:91">cluster2sector</name><argument_list pos:start="91:92" pos:end="91:107">(<argument pos:start="91:93" pos:end="91:93"><expr pos:start="91:93" pos:end="91:93"><name pos:start="91:93" pos:end="91:93">s</name></expr></argument>, <argument pos:start="91:96" pos:end="91:106"><expr pos:start="91:96" pos:end="91:106"><name pos:start="91:96" pos:end="91:106">cluster_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="93:9" pos:end="95:40"><expr pos:start="93:9" pos:end="95:39"><name pos:start="93:9" pos:end="93:14">subret</name> <operator pos:start="93:16" pos:end="93:16">=</operator> <call pos:start="93:18" pos:end="95:39"><name pos:start="93:18" pos:end="93:27">vvfat_read</name><argument_list pos:start="93:28" pos:end="95:39">(<argument pos:start="93:29" pos:end="93:33"><expr pos:start="93:29" pos:end="93:33"><name pos:start="93:29" pos:end="93:33"><name pos:start="93:29" pos:end="93:29">s</name><operator pos:start="93:30" pos:end="93:31">-&gt;</operator><name pos:start="93:32" pos:end="93:33">bs</name></name></expr></argument>, <argument pos:start="93:36" pos:end="93:65"><expr pos:start="93:36" pos:end="93:65"><call pos:start="93:36" pos:end="93:65"><name pos:start="93:36" pos:end="93:49">cluster2sector</name><argument_list pos:start="93:50" pos:end="93:65">(<argument pos:start="93:51" pos:end="93:51"><expr pos:start="93:51" pos:end="93:51"><name pos:start="93:51" pos:end="93:51">s</name></expr></argument>, <argument pos:start="93:54" pos:end="93:64"><expr pos:start="93:54" pos:end="93:64"><name pos:start="93:54" pos:end="93:64">cluster_num</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:68" pos:end="93:74"><expr pos:start="93:68" pos:end="93:74"><name pos:start="93:68" pos:end="93:74">cluster</name></expr></argument>,

		<argument pos:start="95:17" pos:end="95:38"><expr pos:start="95:17" pos:end="95:38"><name pos:start="95:17" pos:end="95:38"><name pos:start="95:17" pos:end="95:17">s</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:38">sectors_per_cluster</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="97:9" pos:end="107:9"><if pos:start="97:9" pos:end="107:9">if <condition pos:start="97:12" pos:end="97:19">(<expr pos:start="97:13" pos:end="97:18"><name pos:start="97:13" pos:end="97:18">subret</name></expr>)</condition> <block pos:start="97:21" pos:end="107:9">{<block_content pos:start="99:13" pos:end="105:21">

	    <expr_stmt pos:start="99:13" pos:end="99:59"><expr pos:start="99:13" pos:end="99:58"><call pos:start="99:13" pos:end="99:58"><name pos:start="99:13" pos:end="99:19">fprintf</name><argument_list pos:start="99:20" pos:end="99:58">(<argument pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:26">stderr</name></expr></argument>, <argument pos:start="99:29" pos:end="99:57"><expr pos:start="99:29" pos:end="99:57"><literal type="string" pos:start="99:29" pos:end="99:57">"Error fetching direntries\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<label pos:start="101:9" pos:end="101:13"><name pos:start="101:9" pos:end="101:12">fail</name>:</label>

	    <expr_stmt pos:start="103:13" pos:end="103:26"><expr pos:start="103:13" pos:end="103:25"><call pos:start="103:13" pos:end="103:25"><name pos:start="103:13" pos:end="103:16">free</name><argument_list pos:start="103:17" pos:end="103:25">(<argument pos:start="103:18" pos:end="103:24"><expr pos:start="103:18" pos:end="103:24"><name pos:start="103:18" pos:end="103:24">cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="105:13" pos:end="105:21">return <expr pos:start="105:20" pos:end="105:20"><literal type="number" pos:start="105:20" pos:end="105:20">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<for pos:start="111:9" pos:end="229:9">for <control pos:start="111:13" pos:end="111:59">(<init pos:start="111:14" pos:end="111:19"><expr pos:start="111:14" pos:end="111:18"><name pos:start="111:14" pos:end="111:14">i</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <literal type="number" pos:start="111:18" pos:end="111:18">0</literal></expr>;</init> <condition pos:start="111:21" pos:end="111:54"><expr pos:start="111:21" pos:end="111:53"><name pos:start="111:21" pos:end="111:21">i</name> <operator pos:start="111:23" pos:end="111:23">&lt;</operator> <literal type="number" pos:start="111:25" pos:end="111:28">0x10</literal> <operator pos:start="111:30" pos:end="111:30">*</operator> <name pos:start="111:32" pos:end="111:53"><name pos:start="111:32" pos:end="111:32">s</name><operator pos:start="111:33" pos:end="111:34">-&gt;</operator><name pos:start="111:35" pos:end="111:53">sectors_per_cluster</name></name></expr>;</condition> <incr pos:start="111:56" pos:end="111:58"><expr pos:start="111:56" pos:end="111:58"><name pos:start="111:56" pos:end="111:56">i</name><operator pos:start="111:57" pos:end="111:58">++</operator></expr></incr>)</control> <block pos:start="111:61" pos:end="229:9">{<block_content pos:start="113:13" pos:end="227:33">

	    <decl_stmt pos:start="113:13" pos:end="113:34"><decl pos:start="113:13" pos:end="113:33"><type pos:start="113:13" pos:end="113:15"><name pos:start="113:13" pos:end="113:15">int</name></type> <name pos:start="113:17" pos:end="113:29">cluster_count</name> <init pos:start="113:31" pos:end="113:33">= <expr pos:start="113:33" pos:end="113:33"><literal type="number" pos:start="113:33" pos:end="113:33">0</literal></expr></init></decl>;</decl_stmt>



<macro pos:start="117:1" pos:end="117:81"><name pos:start="117:1" pos:end="117:4">DLOG</name><argument_list pos:start="117:5" pos:end="117:81">(<argument pos:start="117:6" pos:end="117:80">fprintf(stderr, <literal type="string" pos:start="117:22" pos:end="117:44">"check direntry %d: \n"</literal>, i); print_direntry(direntries + i)</argument>)</argument_list></macro><empty_stmt pos:start="117:82" pos:end="117:82">;</empty_stmt>

	    <if_stmt pos:start="119:13" pos:end="123:25"><if pos:start="119:13" pos:end="123:25">if <condition pos:start="119:16" pos:end="121:44">(<expr pos:start="119:17" pos:end="121:43"><call pos:start="119:17" pos:end="119:47"><name pos:start="119:17" pos:end="119:31">is_volume_label</name><argument_list pos:start="119:32" pos:end="119:47">(<argument pos:start="119:33" pos:end="119:46"><expr pos:start="119:33" pos:end="119:46"><name pos:start="119:33" pos:end="119:42">direntries</name> <operator pos:start="119:44" pos:end="119:44">+</operator> <name pos:start="119:46" pos:end="119:46">i</name></expr></argument>)</argument_list></call> <operator pos:start="119:49" pos:end="119:50">||</operator> <call pos:start="119:52" pos:end="119:73"><name pos:start="119:52" pos:end="119:57">is_dot</name><argument_list pos:start="119:58" pos:end="119:73">(<argument pos:start="119:59" pos:end="119:72"><expr pos:start="119:59" pos:end="119:72"><name pos:start="119:59" pos:end="119:68">direntries</name> <operator pos:start="119:70" pos:end="119:70">+</operator> <name pos:start="119:72" pos:end="119:72">i</name></expr></argument>)</argument_list></call> <operator pos:start="119:75" pos:end="119:76">||</operator>

		    <call pos:start="121:21" pos:end="121:43"><name pos:start="121:21" pos:end="121:27">is_free</name><argument_list pos:start="121:28" pos:end="121:43">(<argument pos:start="121:29" pos:end="121:42"><expr pos:start="121:29" pos:end="121:42"><name pos:start="121:29" pos:end="121:38">direntries</name> <operator pos:start="121:40" pos:end="121:40">+</operator> <name pos:start="121:42" pos:end="121:42">i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="123:17" pos:end="123:25"><block_content pos:start="123:17" pos:end="123:25">

		<continue pos:start="123:17" pos:end="123:25">continue;</continue></block_content></block></if></if_stmt>



	    <expr_stmt pos:start="127:13" pos:end="127:59"><expr pos:start="127:13" pos:end="127:58"><name pos:start="127:13" pos:end="127:18">subret</name> <operator pos:start="127:20" pos:end="127:20">=</operator> <call pos:start="127:22" pos:end="127:58"><name pos:start="127:22" pos:end="127:36">parse_long_name</name><argument_list pos:start="127:37" pos:end="127:58">(<argument pos:start="127:38" pos:end="127:41"><expr pos:start="127:38" pos:end="127:41"><operator pos:start="127:38" pos:end="127:38">&amp;</operator><name pos:start="127:39" pos:end="127:41">lfn</name></expr></argument>, <argument pos:start="127:44" pos:end="127:57"><expr pos:start="127:44" pos:end="127:57"><name pos:start="127:44" pos:end="127:53">direntries</name> <operator pos:start="127:55" pos:end="127:55">+</operator> <name pos:start="127:57" pos:end="127:57">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="129:13" pos:end="135:13"><if pos:start="129:13" pos:end="135:13">if <condition pos:start="129:16" pos:end="129:27">(<expr pos:start="129:17" pos:end="129:26"><name pos:start="129:17" pos:end="129:22">subret</name> <operator pos:start="129:24" pos:end="129:24">&lt;</operator> <literal type="number" pos:start="129:26" pos:end="129:26">0</literal></expr>)</condition> <block pos:start="129:29" pos:end="135:13">{<block_content pos:start="131:17" pos:end="133:26">

		<expr_stmt pos:start="131:17" pos:end="131:56"><expr pos:start="131:17" pos:end="131:55"><call pos:start="131:17" pos:end="131:55"><name pos:start="131:17" pos:end="131:23">fprintf</name><argument_list pos:start="131:24" pos:end="131:55">(<argument pos:start="131:25" pos:end="131:30"><expr pos:start="131:25" pos:end="131:30"><name pos:start="131:25" pos:end="131:30">stderr</name></expr></argument>, <argument pos:start="131:33" pos:end="131:54"><expr pos:start="131:33" pos:end="131:54"><literal type="string" pos:start="131:33" pos:end="131:54">"Error in long name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<goto pos:start="133:17" pos:end="133:26">goto <name pos:start="133:22" pos:end="133:25">fail</name>;</goto>

	    </block_content>}</block></if></if_stmt>

	    <if_stmt pos:start="137:13" pos:end="139:25"><if pos:start="137:13" pos:end="139:25">if <condition pos:start="137:16" pos:end="137:55">(<expr pos:start="137:17" pos:end="137:54"><name pos:start="137:17" pos:end="137:22">subret</name> <operator pos:start="137:24" pos:end="137:25">==</operator> <literal type="number" pos:start="137:27" pos:end="137:27">0</literal> <operator pos:start="137:29" pos:end="137:30">||</operator> <call pos:start="137:32" pos:end="137:54"><name pos:start="137:32" pos:end="137:38">is_free</name><argument_list pos:start="137:39" pos:end="137:54">(<argument pos:start="137:40" pos:end="137:53"><expr pos:start="137:40" pos:end="137:53"><name pos:start="137:40" pos:end="137:49">direntries</name> <operator pos:start="137:51" pos:end="137:51">+</operator> <name pos:start="137:53" pos:end="137:53">i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="139:17" pos:end="139:25"><block_content pos:start="139:17" pos:end="139:25">

		<continue pos:start="139:17" pos:end="139:25">continue;</continue></block_content></block></if></if_stmt>



	    <if_stmt pos:start="143:13" pos:end="161:13"><if pos:start="143:13" pos:end="161:13">if <condition pos:start="143:16" pos:end="143:57">(<expr pos:start="143:17" pos:end="143:56"><call pos:start="143:17" pos:end="143:40"><name pos:start="143:17" pos:end="143:26">fat_chksum</name><argument_list pos:start="143:27" pos:end="143:40">(<argument pos:start="143:28" pos:end="143:39"><expr pos:start="143:28" pos:end="143:39"><name pos:start="143:28" pos:end="143:37">direntries</name><operator pos:start="143:38" pos:end="143:38">+</operator><name pos:start="143:39" pos:end="143:39">i</name></expr></argument>)</argument_list></call> <operator pos:start="143:42" pos:end="143:43">!=</operator> <name pos:start="143:45" pos:end="143:56"><name pos:start="143:45" pos:end="143:47">lfn</name><operator pos:start="143:48" pos:end="143:48">.</operator><name pos:start="143:49" pos:end="143:56">checksum</name></name></expr>)</condition> <block pos:start="143:59" pos:end="161:13">{<block_content pos:start="145:17" pos:end="159:29">

		<expr_stmt pos:start="145:17" pos:end="145:67"><expr pos:start="145:17" pos:end="145:66"><name pos:start="145:17" pos:end="145:22">subret</name> <operator pos:start="145:24" pos:end="145:24">=</operator> <call pos:start="145:26" pos:end="145:66"><name pos:start="145:26" pos:end="145:41">parse_short_name</name><argument_list pos:start="145:42" pos:end="145:66">(<argument pos:start="145:43" pos:end="145:43"><expr pos:start="145:43" pos:end="145:43"><name pos:start="145:43" pos:end="145:43">s</name></expr></argument>, <argument pos:start="145:46" pos:end="145:49"><expr pos:start="145:46" pos:end="145:49"><operator pos:start="145:46" pos:end="145:46">&amp;</operator><name pos:start="145:47" pos:end="145:49">lfn</name></expr></argument>, <argument pos:start="145:52" pos:end="145:65"><expr pos:start="145:52" pos:end="145:65"><name pos:start="145:52" pos:end="145:61">direntries</name> <operator pos:start="145:63" pos:end="145:63">+</operator> <name pos:start="145:65" pos:end="145:65">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="147:17" pos:end="153:17"><if pos:start="147:17" pos:end="153:17">if <condition pos:start="147:20" pos:end="147:31">(<expr pos:start="147:21" pos:end="147:30"><name pos:start="147:21" pos:end="147:26">subret</name> <operator pos:start="147:28" pos:end="147:28">&lt;</operator> <literal type="number" pos:start="147:30" pos:end="147:30">0</literal></expr>)</condition> <block pos:start="147:33" pos:end="153:17">{<block_content pos:start="149:21" pos:end="151:30">

		    <expr_stmt pos:start="149:21" pos:end="149:74"><expr pos:start="149:21" pos:end="149:73"><call pos:start="149:21" pos:end="149:73"><name pos:start="149:21" pos:end="149:27">fprintf</name><argument_list pos:start="149:28" pos:end="149:73">(<argument pos:start="149:29" pos:end="149:34"><expr pos:start="149:29" pos:end="149:34"><name pos:start="149:29" pos:end="149:34">stderr</name></expr></argument>, <argument pos:start="149:37" pos:end="149:64"><expr pos:start="149:37" pos:end="149:64"><literal type="string" pos:start="149:37" pos:end="149:64">"Error in short name (%d)\n"</literal></expr></argument>, <argument pos:start="149:67" pos:end="149:72"><expr pos:start="149:67" pos:end="149:72"><name pos:start="149:67" pos:end="149:72">subret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <goto pos:start="151:21" pos:end="151:30">goto <name pos:start="151:26" pos:end="151:29">fail</name>;</goto>

		</block_content>}</block></if></if_stmt>

		<if_stmt pos:start="155:17" pos:end="159:29"><if pos:start="155:17" pos:end="159:29">if <condition pos:start="155:20" pos:end="157:58">(<expr pos:start="155:21" pos:end="157:57"><name pos:start="155:21" pos:end="155:26">subret</name> <operator pos:start="155:28" pos:end="155:28">&gt;</operator> <literal type="number" pos:start="155:30" pos:end="155:30">0</literal> <operator pos:start="155:32" pos:end="155:33">||</operator> <operator pos:start="155:35" pos:end="155:35">!</operator><call pos:start="155:36" pos:end="155:63"><name pos:start="155:36" pos:end="155:41">strcmp</name><argument_list pos:start="155:42" pos:end="155:63">(<argument pos:start="155:43" pos:end="155:57"><expr pos:start="155:43" pos:end="155:57"><operator pos:start="155:43" pos:end="155:43">(</operator><name pos:start="155:44" pos:end="155:47">char</name><operator pos:start="155:48" pos:end="155:48">*</operator><operator pos:start="155:49" pos:end="155:49">)</operator><name pos:start="155:50" pos:end="155:57"><name pos:start="155:50" pos:end="155:52">lfn</name><operator pos:start="155:53" pos:end="155:53">.</operator><name pos:start="155:54" pos:end="155:57">name</name></name></expr></argument>, <argument pos:start="155:60" pos:end="155:62"><expr pos:start="155:60" pos:end="155:62"><literal type="string" pos:start="155:60" pos:end="155:62">"."</literal></expr></argument>)</argument_list></call>

			<operator pos:start="157:25" pos:end="157:26">||</operator> <operator pos:start="157:28" pos:end="157:28">!</operator><call pos:start="157:29" pos:end="157:57"><name pos:start="157:29" pos:end="157:34">strcmp</name><argument_list pos:start="157:35" pos:end="157:57">(<argument pos:start="157:36" pos:end="157:50"><expr pos:start="157:36" pos:end="157:50"><operator pos:start="157:36" pos:end="157:36">(</operator><name pos:start="157:37" pos:end="157:40">char</name><operator pos:start="157:41" pos:end="157:41">*</operator><operator pos:start="157:42" pos:end="157:42">)</operator><name pos:start="157:43" pos:end="157:50"><name pos:start="157:43" pos:end="157:45">lfn</name><operator pos:start="157:46" pos:end="157:46">.</operator><name pos:start="157:47" pos:end="157:50">name</name></name></expr></argument>, <argument pos:start="157:53" pos:end="157:56"><expr pos:start="157:53" pos:end="157:56"><literal type="string" pos:start="157:53" pos:end="157:56">".."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="159:21" pos:end="159:29"><block_content pos:start="159:21" pos:end="159:29">

		    <continue pos:start="159:21" pos:end="159:29">continue;</continue></block_content></block></if></if_stmt>

	    </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="163:13" pos:end="163:33"><expr pos:start="163:13" pos:end="163:32"><name pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:15">lfn</name><operator pos:start="163:16" pos:end="163:16">.</operator><name pos:start="163:17" pos:end="163:24">checksum</name></name> <operator pos:start="163:26" pos:end="163:26">=</operator> <literal type="number" pos:start="163:28" pos:end="163:32">0x100</literal></expr>;</expr_stmt> <comment type="block" pos:start="163:35" pos:end="163:66">/* cannot use long name twice */</comment>



	    <if_stmt pos:start="167:13" pos:end="173:13"><if pos:start="167:13" pos:end="173:13">if <condition pos:start="167:16" pos:end="167:51">(<expr pos:start="167:17" pos:end="167:50"><name pos:start="167:17" pos:end="167:24">path_len</name> <operator pos:start="167:26" pos:end="167:26">+</operator> <literal type="number" pos:start="167:28" pos:end="167:30">1</literal> <operator pos:start="167:30" pos:end="167:30">+</operator> <name pos:start="167:32" pos:end="167:38"><name pos:start="167:32" pos:end="167:34">lfn</name><operator pos:start="167:35" pos:end="167:35">.</operator><name pos:start="167:36" pos:end="167:38">len</name></name> <operator pos:start="167:40" pos:end="167:41">&gt;=</operator> <name pos:start="167:43" pos:end="167:50">PATH_MAX</name></expr>)</condition> <block pos:start="167:53" pos:end="173:13">{<block_content pos:start="169:17" pos:end="171:26">

		<expr_stmt pos:start="169:17" pos:end="169:74"><expr pos:start="169:17" pos:end="169:73"><call pos:start="169:17" pos:end="169:73"><name pos:start="169:17" pos:end="169:23">fprintf</name><argument_list pos:start="169:24" pos:end="169:73">(<argument pos:start="169:25" pos:end="169:30"><expr pos:start="169:25" pos:end="169:30"><name pos:start="169:25" pos:end="169:30">stderr</name></expr></argument>, <argument pos:start="169:33" pos:end="169:56"><expr pos:start="169:33" pos:end="169:56"><literal type="string" pos:start="169:33" pos:end="169:56">"Name too long: %s/%s\n"</literal></expr></argument>, <argument pos:start="169:59" pos:end="169:62"><expr pos:start="169:59" pos:end="169:62"><name pos:start="169:59" pos:end="169:62">path</name></expr></argument>, <argument pos:start="169:65" pos:end="169:72"><expr pos:start="169:65" pos:end="169:72"><name pos:start="169:65" pos:end="169:72"><name pos:start="169:65" pos:end="169:67">lfn</name><operator pos:start="169:68" pos:end="169:68">.</operator><name pos:start="169:69" pos:end="169:72">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<goto pos:start="171:17" pos:end="171:26">goto <name pos:start="171:22" pos:end="171:25">fail</name>;</goto>

	    </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="175:13" pos:end="177:37"><expr pos:start="175:13" pos:end="177:36"><call pos:start="175:13" pos:end="177:36"><name pos:start="175:13" pos:end="175:19">pstrcpy</name><argument_list pos:start="175:20" pos:end="177:36">(<argument pos:start="175:21" pos:end="175:40"><expr pos:start="175:21" pos:end="175:40"><name pos:start="175:21" pos:end="175:25">path2</name> <operator pos:start="175:27" pos:end="175:27">+</operator> <name pos:start="175:29" pos:end="175:36">path_len</name> <operator pos:start="175:38" pos:end="175:38">+</operator> <literal type="number" pos:start="175:40" pos:end="175:40">1</literal></expr></argument>, <argument pos:start="175:43" pos:end="175:70"><expr pos:start="175:43" pos:end="175:70"><sizeof pos:start="175:43" pos:end="175:55">sizeof<argument_list pos:start="175:49" pos:end="175:55">(<argument pos:start="175:50" pos:end="175:54"><expr pos:start="175:50" pos:end="175:54"><name pos:start="175:50" pos:end="175:54">path2</name></expr></argument>)</argument_list></sizeof> <operator pos:start="175:57" pos:end="175:57">-</operator> <name pos:start="175:59" pos:end="175:66">path_len</name> <operator pos:start="175:68" pos:end="175:68">-</operator> <literal type="number" pos:start="175:70" pos:end="175:70">1</literal></expr></argument>,

                    <argument pos:start="177:21" pos:end="177:35"><expr pos:start="177:21" pos:end="177:35"><operator pos:start="177:21" pos:end="177:21">(</operator><name pos:start="177:22" pos:end="177:25">char</name><operator pos:start="177:26" pos:end="177:26">*</operator><operator pos:start="177:27" pos:end="177:27">)</operator><name pos:start="177:28" pos:end="177:35"><name pos:start="177:28" pos:end="177:30">lfn</name><operator pos:start="177:31" pos:end="177:31">.</operator><name pos:start="177:32" pos:end="177:35">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	    <if_stmt pos:start="181:13" pos:end="223:24"><if pos:start="181:13" pos:end="203:13">if <condition pos:start="181:16" pos:end="181:45">(<expr pos:start="181:17" pos:end="181:44"><call pos:start="181:17" pos:end="181:44"><name pos:start="181:17" pos:end="181:28">is_directory</name><argument_list pos:start="181:29" pos:end="181:44">(<argument pos:start="181:30" pos:end="181:43"><expr pos:start="181:30" pos:end="181:43"><name pos:start="181:30" pos:end="181:39">direntries</name> <operator pos:start="181:41" pos:end="181:41">+</operator> <name pos:start="181:43" pos:end="181:43">i</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="181:47" pos:end="203:13">{<block_content pos:start="183:17" pos:end="201:17">

		<if_stmt pos:start="183:17" pos:end="189:17"><if pos:start="183:17" pos:end="189:17">if <condition pos:start="183:20" pos:end="183:59">(<expr pos:start="183:21" pos:end="183:58"><call pos:start="183:21" pos:end="183:53"><name pos:start="183:21" pos:end="183:37">begin_of_direntry</name><argument_list pos:start="183:38" pos:end="183:53">(<argument pos:start="183:39" pos:end="183:52"><expr pos:start="183:39" pos:end="183:52"><name pos:start="183:39" pos:end="183:48">direntries</name> <operator pos:start="183:50" pos:end="183:50">+</operator> <name pos:start="183:52" pos:end="183:52">i</name></expr></argument>)</argument_list></call> <operator pos:start="183:55" pos:end="183:56">==</operator> <literal type="number" pos:start="183:58" pos:end="183:58">0</literal></expr>)</condition> <block pos:start="183:61" pos:end="189:17">{<block_content pos:start="185:21" pos:end="187:30">

		    <macro pos:start="185:21" pos:end="185:117"><name pos:start="185:21" pos:end="185:24">DLOG</name><argument_list pos:start="185:25" pos:end="185:117">(<argument pos:start="185:26" pos:end="185:116">fprintf(stderr, <literal type="string" pos:start="185:42" pos:end="185:76">"invalid begin for directory: %s\n"</literal>, path2); print_direntry(direntries + i)</argument>)</argument_list></macro><empty_stmt pos:start="185:118" pos:end="185:118">;</empty_stmt>

		    <goto pos:start="187:21" pos:end="187:30">goto <name pos:start="187:26" pos:end="187:29">fail</name>;</goto>

		</block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="191:17" pos:end="193:66"><expr pos:start="191:17" pos:end="193:65"><name pos:start="191:17" pos:end="191:29">cluster_count</name> <operator pos:start="191:31" pos:end="191:31">=</operator> <call pos:start="191:33" pos:end="193:65"><name pos:start="191:33" pos:end="191:59">check_directory_consistency</name><argument_list pos:start="191:60" pos:end="193:65">(<argument pos:start="191:61" pos:end="191:61"><expr pos:start="191:61" pos:end="191:61"><name pos:start="191:61" pos:end="191:61">s</name></expr></argument>,

			<argument pos:start="193:25" pos:end="193:57"><expr pos:start="193:25" pos:end="193:57"><call pos:start="193:25" pos:end="193:57"><name pos:start="193:25" pos:end="193:41">begin_of_direntry</name><argument_list pos:start="193:42" pos:end="193:57">(<argument pos:start="193:43" pos:end="193:56"><expr pos:start="193:43" pos:end="193:56"><name pos:start="193:43" pos:end="193:52">direntries</name> <operator pos:start="193:54" pos:end="193:54">+</operator> <name pos:start="193:56" pos:end="193:56">i</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="193:60" pos:end="193:64"><expr pos:start="193:60" pos:end="193:64"><name pos:start="193:60" pos:end="193:64">path2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="195:17" pos:end="201:17"><if pos:start="195:17" pos:end="201:17">if <condition pos:start="195:20" pos:end="195:39">(<expr pos:start="195:21" pos:end="195:38"><name pos:start="195:21" pos:end="195:33">cluster_count</name> <operator pos:start="195:35" pos:end="195:36">==</operator> <literal type="number" pos:start="195:38" pos:end="195:38">0</literal></expr>)</condition> <block pos:start="195:41" pos:end="201:17">{<block_content pos:start="197:21" pos:end="199:30">

		    <macro pos:start="197:21" pos:end="197:110"><name pos:start="197:21" pos:end="197:24">DLOG</name><argument_list pos:start="197:25" pos:end="197:110">(<argument pos:start="197:26" pos:end="197:109">fprintf(stderr, <literal type="string" pos:start="197:42" pos:end="197:69">"problem in directory %s:\n"</literal>, path2); print_direntry(direntries + i)</argument>)</argument_list></macro><empty_stmt pos:start="197:111" pos:end="197:111">;</empty_stmt>

		    <goto pos:start="199:21" pos:end="199:30">goto <name pos:start="199:26" pos:end="199:29">fail</name>;</goto>

		</block_content>}</block></if></if_stmt>

	    </block_content>}</block></if> <if type="elseif" pos:start="203:15" pos:end="221:13">else if <condition pos:start="203:23" pos:end="203:47">(<expr pos:start="203:24" pos:end="203:46"><call pos:start="203:24" pos:end="203:46"><name pos:start="203:24" pos:end="203:30">is_file</name><argument_list pos:start="203:31" pos:end="203:46">(<argument pos:start="203:32" pos:end="203:45"><expr pos:start="203:32" pos:end="203:45"><name pos:start="203:32" pos:end="203:41">direntries</name> <operator pos:start="203:43" pos:end="203:43">+</operator> <name pos:start="203:45" pos:end="203:45">i</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="203:49" pos:end="221:13">{<block_content pos:start="207:17" pos:end="219:17">

		<comment type="block" pos:start="205:17" pos:end="205:46">/* check file size with FAT */</comment>

		<expr_stmt pos:start="207:17" pos:end="207:89"><expr pos:start="207:17" pos:end="207:88"><name pos:start="207:17" pos:end="207:29">cluster_count</name> <operator pos:start="207:31" pos:end="207:31">=</operator> <call pos:start="207:33" pos:end="207:88"><name pos:start="207:33" pos:end="207:62">get_cluster_count_for_direntry</name><argument_list pos:start="207:63" pos:end="207:88">(<argument pos:start="207:64" pos:end="207:64"><expr pos:start="207:64" pos:end="207:64"><name pos:start="207:64" pos:end="207:64">s</name></expr></argument>, <argument pos:start="207:67" pos:end="207:80"><expr pos:start="207:67" pos:end="207:80"><name pos:start="207:67" pos:end="207:76">direntries</name> <operator pos:start="207:78" pos:end="207:78">+</operator> <name pos:start="207:80" pos:end="207:80">i</name></expr></argument>, <argument pos:start="207:83" pos:end="207:87"><expr pos:start="207:83" pos:end="207:87"><name pos:start="207:83" pos:end="207:87">path2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="209:17" pos:end="219:17"><if pos:start="209:17" pos:end="219:17">if <condition pos:start="209:20" pos:end="213:48">(<expr pos:start="209:21" pos:end="213:47"><name pos:start="209:21" pos:end="209:33">cluster_count</name> <operator pos:start="209:35" pos:end="209:36">!=</operator>

			<operator pos:start="211:25" pos:end="211:25">(</operator><call pos:start="211:26" pos:end="211:56"><name pos:start="211:26" pos:end="211:36">le32_to_cpu</name><argument_list pos:start="211:37" pos:end="211:56">(<argument pos:start="211:38" pos:end="211:55"><expr pos:start="211:38" pos:end="211:55"><name pos:start="211:38" pos:end="211:50"><name pos:start="211:38" pos:end="211:47">direntries</name><index pos:start="211:48" pos:end="211:50">[<expr pos:start="211:49" pos:end="211:49"><name pos:start="211:49" pos:end="211:49">i</name></expr>]</index></name><operator pos:start="211:51" pos:end="211:51">.</operator><name pos:start="211:52" pos:end="211:55">size</name></expr></argument>)</argument_list></call> <operator pos:start="211:58" pos:end="211:58">+</operator> <name pos:start="211:60" pos:end="211:74"><name pos:start="211:60" pos:end="211:60">s</name><operator pos:start="211:61" pos:end="211:62">-&gt;</operator><name pos:start="211:63" pos:end="211:74">cluster_size</name></name>

			 <operator pos:start="213:26" pos:end="213:26">-</operator> <literal type="number" pos:start="213:28" pos:end="213:28">1</literal><operator pos:start="213:29" pos:end="213:29">)</operator> <operator pos:start="213:31" pos:end="213:31">/</operator> <name pos:start="213:33" pos:end="213:47"><name pos:start="213:33" pos:end="213:33">s</name><operator pos:start="213:34" pos:end="213:35">-&gt;</operator><name pos:start="213:36" pos:end="213:47">cluster_size</name></name></expr>)</condition> <block pos:start="213:50" pos:end="219:17">{<block_content pos:start="215:21" pos:end="217:30">

		    <expr_stmt pos:start="215:21" pos:end="215:70"><expr pos:start="215:21" pos:end="215:69"><call pos:start="215:21" pos:end="215:69"><name pos:start="215:21" pos:end="215:24">DLOG</name><argument_list pos:start="215:25" pos:end="215:69">(<argument pos:start="215:26" pos:end="215:68"><expr pos:start="215:26" pos:end="215:68"><call pos:start="215:26" pos:end="215:68"><name pos:start="215:26" pos:end="215:32">fprintf</name><argument_list pos:start="215:33" pos:end="215:68">(<argument pos:start="215:34" pos:end="215:39"><expr pos:start="215:34" pos:end="215:39"><name pos:start="215:34" pos:end="215:39">stderr</name></expr></argument>, <argument pos:start="215:42" pos:end="215:67"><expr pos:start="215:42" pos:end="215:67"><literal type="string" pos:start="215:42" pos:end="215:67">"Cluster count mismatch\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <goto pos:start="217:21" pos:end="217:30">goto <name pos:start="217:26" pos:end="217:29">fail</name>;</goto>

		</block_content>}</block></if></if_stmt>

	    </block_content>}</block></if> <else pos:start="221:15" pos:end="223:24">else<block type="pseudo" pos:start="223:17" pos:end="223:24"><block_content pos:start="223:17" pos:end="223:24">

                <expr_stmt pos:start="223:17" pos:end="223:24"><expr pos:start="223:17" pos:end="223:23"><call pos:start="223:17" pos:end="223:23"><name pos:start="223:17" pos:end="223:21">abort</name><argument_list pos:start="223:22" pos:end="223:23">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block" pos:start="223:26" pos:end="223:49">/* cluster_count = 0; */</comment>



	    <expr_stmt pos:start="227:13" pos:end="227:33"><expr pos:start="227:13" pos:end="227:32"><name pos:start="227:13" pos:end="227:15">ret</name> <operator pos:start="227:17" pos:end="227:18">+=</operator> <name pos:start="227:20" pos:end="227:32">cluster_count</name></expr>;</expr_stmt>

	</block_content>}</block></for>



	<expr_stmt pos:start="233:9" pos:end="233:55"><expr pos:start="233:9" pos:end="233:54"><name pos:start="233:9" pos:end="233:19">cluster_num</name> <operator pos:start="233:21" pos:end="233:21">=</operator> <call pos:start="233:23" pos:end="233:54"><name pos:start="233:23" pos:end="233:38">modified_fat_get</name><argument_list pos:start="233:39" pos:end="233:54">(<argument pos:start="233:40" pos:end="233:40"><expr pos:start="233:40" pos:end="233:40"><name pos:start="233:40" pos:end="233:40">s</name></expr></argument>, <argument pos:start="233:43" pos:end="233:53"><expr pos:start="233:43" pos:end="233:53"><name pos:start="233:43" pos:end="233:53">cluster_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while<condition pos:start="235:12" pos:end="235:37">(<expr pos:start="235:13" pos:end="235:36"><operator pos:start="235:13" pos:end="235:13">!</operator><call pos:start="235:14" pos:end="235:36"><name pos:start="235:14" pos:end="235:20">fat_eof</name><argument_list pos:start="235:21" pos:end="235:36">(<argument pos:start="235:22" pos:end="235:22"><expr pos:start="235:22" pos:end="235:22"><name pos:start="235:22" pos:end="235:22">s</name></expr></argument>, <argument pos:start="235:25" pos:end="235:35"><expr pos:start="235:25" pos:end="235:35"><name pos:start="235:25" pos:end="235:35">cluster_num</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>



    <expr_stmt pos:start="239:5" pos:end="239:18"><expr pos:start="239:5" pos:end="239:17"><call pos:start="239:5" pos:end="239:17"><name pos:start="239:5" pos:end="239:8">free</name><argument_list pos:start="239:9" pos:end="239:17">(<argument pos:start="239:10" pos:end="239:16"><expr pos:start="239:10" pos:end="239:16"><name pos:start="239:10" pos:end="239:16">cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="241:5" pos:end="241:15">return <expr pos:start="241:12" pos:end="241:14"><name pos:start="241:12" pos:end="241:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
