<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26526.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">AVOption</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:23">av_set_string</name><parameter_list pos:start="1:24" pos:end="1:69">(<parameter pos:start="1:25" pos:end="1:33"><decl pos:start="1:25" pos:end="1:33"><type pos:start="1:25" pos:end="1:33"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:33">obj</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:45">char</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">name</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><specifier pos:start="1:54" pos:end="1:58">const</specifier> <name pos:start="1:60" pos:end="1:63">char</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">val</name></decl></parameter>)</parameter_list><block pos:start="1:70" pos:end="75:1">{<block_content pos:start="3:5" pos:end="73:13">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:14"><name pos:start="3:5" pos:end="3:12">AVOption</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:15">o</name><init pos:start="3:16" pos:end="3:36">= <expr pos:start="3:18" pos:end="3:36"><call pos:start="3:18" pos:end="3:36"><name pos:start="3:18" pos:end="3:25">find_opt</name><argument_list pos:start="3:26" pos:end="3:36">(<argument pos:start="3:27" pos:end="3:29"><expr pos:start="3:27" pos:end="3:29"><name pos:start="3:27" pos:end="3:29">obj</name></expr></argument>, <argument pos:start="3:32" pos:end="3:35"><expr pos:start="3:32" pos:end="3:35"><name pos:start="3:32" pos:end="3:35">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="5:5" pos:end="7:20"><if pos:start="5:5" pos:end="7:20">if<condition pos:start="5:7" pos:end="5:34">(<expr pos:start="5:8" pos:end="5:33"><operator pos:start="5:8" pos:end="5:8">!</operator><name pos:start="5:9" pos:end="5:9">o</name> <operator pos:start="5:11" pos:end="5:12">||</operator> <operator pos:start="5:14" pos:end="5:14">!</operator><name pos:start="5:15" pos:end="5:17">val</name> <operator pos:start="5:19" pos:end="5:20">||</operator> <name pos:start="5:22" pos:end="5:30"><name pos:start="5:22" pos:end="5:22">o</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:30">offset</name></name><operator pos:start="5:31" pos:end="5:32">&lt;=</operator><literal type="number" pos:start="5:33" pos:end="5:33">0</literal></expr>)</condition><block type="pseudo" pos:start="7:9" pos:end="7:20"><block_content pos:start="7:9" pos:end="7:20"> 

        <return pos:start="7:9" pos:end="7:20">return <expr pos:start="7:16" pos:end="7:19"><name pos:start="7:16" pos:end="7:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="9:5" pos:end="67:5"><if pos:start="9:5" pos:end="67:5">if<condition pos:start="9:7" pos:end="9:37">(<expr pos:start="9:8" pos:end="9:36"><name pos:start="9:8" pos:end="9:14"><name pos:start="9:8" pos:end="9:8">o</name><operator pos:start="9:9" pos:end="9:10">-&gt;</operator><name pos:start="9:11" pos:end="9:14">type</name></name> <operator pos:start="9:16" pos:end="9:17">!=</operator> <name pos:start="9:19" pos:end="9:36">FF_OPT_TYPE_STRING</name></expr>)</condition><block pos:start="9:38" pos:end="67:5">{<block_content pos:start="11:9" pos:end="65:20">

        <decl_stmt pos:start="11:9" pos:end="11:26"><decl pos:start="11:9" pos:end="11:18"><type pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:14">double</name></type> <name pos:start="11:16" pos:end="11:16">d</name><init pos:start="11:17" pos:end="11:18">=<expr pos:start="11:18" pos:end="11:18"><literal type="number" pos:start="11:18" pos:end="11:18">0</literal></expr></init></decl>, <decl pos:start="11:21" pos:end="11:25"><type ref="prev" pos:start="11:9" pos:end="11:14"/><name pos:start="11:21" pos:end="11:25">tmp_d</name></decl>;</decl_stmt>

        <for pos:start="13:9" pos:end="63:9">for<control pos:start="13:12" pos:end="13:15">(<init pos:start="13:13" pos:end="13:13">;</init><condition pos:start="13:14" pos:end="13:14">;</condition><incr/>)</control><block pos:start="13:16" pos:end="63:9">{<block_content pos:start="15:13" pos:end="61:57">

            <decl_stmt pos:start="15:13" pos:end="15:18"><decl pos:start="15:13" pos:end="15:17"><type pos:start="15:13" pos:end="15:15"><name pos:start="15:13" pos:end="15:15">int</name></type> <name pos:start="15:17" pos:end="15:17">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="17:13" pos:end="17:33"><decl pos:start="17:13" pos:end="17:25"><type pos:start="17:13" pos:end="17:16"><name pos:start="17:13" pos:end="17:16">char</name></type> <name pos:start="17:18" pos:end="17:25"><name pos:start="17:18" pos:end="17:20">buf</name><index pos:start="17:21" pos:end="17:25">[<expr pos:start="17:22" pos:end="17:24"><literal type="number" pos:start="17:22" pos:end="17:24">256</literal></expr>]</index></name></decl>, <decl pos:start="17:28" pos:end="17:32"><type ref="prev" pos:start="17:13" pos:end="17:16"><modifier pos:start="17:28" pos:end="17:28">*</modifier></type><name pos:start="17:29" pos:end="17:32">tail</name></decl>;</decl_stmt>



            <for pos:start="21:13" pos:end="23:31">for<control pos:start="21:16" pos:end="21:67">(<init pos:start="21:17" pos:end="21:20"><expr pos:start="21:17" pos:end="21:19"><name pos:start="21:17" pos:end="21:17">i</name><operator pos:start="21:18" pos:end="21:18">=</operator><literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>;</init> <condition pos:start="21:22" pos:end="21:62"><expr pos:start="21:22" pos:end="21:61"><name pos:start="21:22" pos:end="21:22">i</name><operator pos:start="21:23" pos:end="21:23">&lt;</operator><sizeof pos:start="21:24" pos:end="21:34">sizeof<argument_list pos:start="21:30" pos:end="21:34">(<argument pos:start="21:31" pos:end="21:33"><expr pos:start="21:31" pos:end="21:33"><name pos:start="21:31" pos:end="21:33">buf</name></expr></argument>)</argument_list></sizeof><operator pos:start="21:35" pos:end="21:35">-</operator><literal type="number" pos:start="21:36" pos:end="21:36">1</literal> <operator pos:start="21:38" pos:end="21:39">&amp;&amp;</operator> <name pos:start="21:41" pos:end="21:46"><name pos:start="21:41" pos:end="21:43">val</name><index pos:start="21:44" pos:end="21:46">[<expr pos:start="21:45" pos:end="21:45"><name pos:start="21:45" pos:end="21:45">i</name></expr>]</index></name> <operator pos:start="21:48" pos:end="21:49">&amp;&amp;</operator> <name pos:start="21:51" pos:end="21:56"><name pos:start="21:51" pos:end="21:53">val</name><index pos:start="21:54" pos:end="21:56">[<expr pos:start="21:55" pos:end="21:55"><name pos:start="21:55" pos:end="21:55">i</name></expr>]</index></name><operator pos:start="21:57" pos:end="21:58">!=</operator><literal type="char" pos:start="21:59" pos:end="21:61">'+'</literal></expr>;</condition> <incr pos:start="21:64" pos:end="21:66"><expr pos:start="21:64" pos:end="21:66"><name pos:start="21:64" pos:end="21:64">i</name><operator pos:start="21:65" pos:end="21:66">++</operator></expr></incr>)</control><block type="pseudo" pos:start="23:17" pos:end="23:31"><block_content pos:start="23:17" pos:end="23:31">

                <expr_stmt pos:start="23:17" pos:end="23:31"><expr pos:start="23:17" pos:end="23:30"><name pos:start="23:17" pos:end="23:22"><name pos:start="23:17" pos:end="23:19">buf</name><index pos:start="23:20" pos:end="23:22">[<expr pos:start="23:21" pos:end="23:21"><name pos:start="23:21" pos:end="23:21">i</name></expr>]</index></name><operator pos:start="23:23" pos:end="23:23">=</operator> <name pos:start="23:25" pos:end="23:30"><name pos:start="23:25" pos:end="23:27">val</name><index pos:start="23:28" pos:end="23:30">[<expr pos:start="23:29" pos:end="23:29"><name pos:start="23:29" pos:end="23:29">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="25:13" pos:end="25:21"><expr pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:18"><name pos:start="25:13" pos:end="25:15">buf</name><index pos:start="25:16" pos:end="25:18">[<expr pos:start="25:17" pos:end="25:17"><name pos:start="25:17" pos:end="25:17">i</name></expr>]</index></name><operator pos:start="25:19" pos:end="25:19">=</operator><literal type="number" pos:start="25:20" pos:end="25:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:20"><expr pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:15">val</name><operator pos:start="27:16" pos:end="27:17">+=</operator> <name pos:start="27:19" pos:end="27:19">i</name></expr>;</expr_stmt>

            

            <expr_stmt pos:start="31:13" pos:end="31:44"><expr pos:start="31:13" pos:end="31:43"><name pos:start="31:13" pos:end="31:17">tmp_d</name><operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:43"><name pos:start="31:20" pos:end="31:31">av_parse_num</name><argument_list pos:start="31:32" pos:end="31:43">(<argument pos:start="31:33" pos:end="31:35"><expr pos:start="31:33" pos:end="31:35"><name pos:start="31:33" pos:end="31:35">buf</name></expr></argument>, <argument pos:start="31:38" pos:end="31:42"><expr pos:start="31:38" pos:end="31:42"><operator pos:start="31:38" pos:end="31:38">&amp;</operator><name pos:start="31:39" pos:end="31:42">tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="53:13"><if pos:start="33:13" pos:end="35:26">if<condition pos:start="33:15" pos:end="33:26">(<expr pos:start="33:16" pos:end="33:25"><name pos:start="33:16" pos:end="33:19">tail</name> <operator pos:start="33:21" pos:end="33:21">&gt;</operator> <name pos:start="33:23" pos:end="33:25">buf</name></expr>)</condition><block type="pseudo" pos:start="35:17" pos:end="35:26"><block_content pos:start="35:17" pos:end="35:26">

                <expr_stmt pos:start="35:17" pos:end="35:26"><expr pos:start="35:17" pos:end="35:25"><name pos:start="35:17" pos:end="35:17">d</name><operator pos:start="35:18" pos:end="35:19">+=</operator> <name pos:start="35:21" pos:end="35:25">tmp_d</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="37:13" pos:end="53:13">else<block pos:start="37:17" pos:end="53:13">{<block_content pos:start="39:17" pos:end="51:33">

                <decl_stmt pos:start="39:17" pos:end="39:54"><decl pos:start="39:17" pos:end="39:53"><type pos:start="39:17" pos:end="39:26"><name pos:start="39:17" pos:end="39:24">AVOption</name> <modifier pos:start="39:26" pos:end="39:26">*</modifier></type><name pos:start="39:27" pos:end="39:33">o_named</name><init pos:start="39:34" pos:end="39:53">= <expr pos:start="39:36" pos:end="39:53"><call pos:start="39:36" pos:end="39:53"><name pos:start="39:36" pos:end="39:43">find_opt</name><argument_list pos:start="39:44" pos:end="39:53">(<argument pos:start="39:45" pos:end="39:47"><expr pos:start="39:45" pos:end="39:47"><name pos:start="39:45" pos:end="39:47">obj</name></expr></argument>, <argument pos:start="39:50" pos:end="39:52"><expr pos:start="39:50" pos:end="39:52"><name pos:start="39:50" pos:end="39:52">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="41:17" pos:end="51:33"><if pos:start="41:17" pos:end="43:45">if<condition pos:start="41:19" pos:end="41:65">(<expr pos:start="41:20" pos:end="41:64"><name pos:start="41:20" pos:end="41:26">o_named</name> <operator pos:start="41:28" pos:end="41:29">&amp;&amp;</operator> <name pos:start="41:31" pos:end="41:43"><name pos:start="41:31" pos:end="41:37">o_named</name><operator pos:start="41:38" pos:end="41:39">-&gt;</operator><name pos:start="41:40" pos:end="41:43">type</name></name> <operator pos:start="41:45" pos:end="41:46">==</operator> <name pos:start="41:48" pos:end="41:64">FF_OPT_TYPE_CONST</name></expr>)</condition><block type="pseudo" pos:start="43:21" pos:end="43:45"><block_content pos:start="43:21" pos:end="43:45"> 

                    <expr_stmt pos:start="43:21" pos:end="43:45"><expr pos:start="43:21" pos:end="43:44"><name pos:start="43:21" pos:end="43:21">d</name><operator pos:start="43:22" pos:end="43:23">+=</operator> <name pos:start="43:25" pos:end="43:44"><name pos:start="43:25" pos:end="43:31">o_named</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:44">default_val</name></name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="45:17" pos:end="45:68">else if<condition pos:start="45:24" pos:end="45:48">(<expr pos:start="45:25" pos:end="45:47"><operator pos:start="45:25" pos:end="45:25">!</operator><call pos:start="45:26" pos:end="45:47"><name pos:start="45:26" pos:end="45:31">strcmp</name><argument_list pos:start="45:32" pos:end="45:47">(<argument pos:start="45:33" pos:end="45:35"><expr pos:start="45:33" pos:end="45:35"><name pos:start="45:33" pos:end="45:35">buf</name></expr></argument>, <argument pos:start="45:38" pos:end="45:46"><expr pos:start="45:38" pos:end="45:46"><literal type="string" pos:start="45:38" pos:end="45:46">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="45:50" pos:end="45:68"><block_content pos:start="45:50" pos:end="45:68"> <expr_stmt pos:start="45:50" pos:end="45:68"><expr pos:start="45:50" pos:end="45:67"><name pos:start="45:50" pos:end="45:50">d</name><operator pos:start="45:51" pos:end="45:52">+=</operator> <name pos:start="45:54" pos:end="45:67"><name pos:start="45:54" pos:end="45:54">o</name><operator pos:start="45:55" pos:end="45:56">-&gt;</operator><name pos:start="45:57" pos:end="45:67">default_val</name></name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="47:17" pos:end="47:60">else if<condition pos:start="47:24" pos:end="47:48">(<expr pos:start="47:25" pos:end="47:47"><operator pos:start="47:25" pos:end="47:25">!</operator><call pos:start="47:26" pos:end="47:47"><name pos:start="47:26" pos:end="47:31">strcmp</name><argument_list pos:start="47:32" pos:end="47:47">(<argument pos:start="47:33" pos:end="47:35"><expr pos:start="47:33" pos:end="47:35"><name pos:start="47:33" pos:end="47:35">buf</name></expr></argument>, <argument pos:start="47:38" pos:end="47:42"><expr pos:start="47:38" pos:end="47:42"><literal type="string" pos:start="47:38" pos:end="47:42">"max"</literal></expr></argument>    )</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:50" pos:end="47:60"><block_content pos:start="47:50" pos:end="47:60"> <expr_stmt pos:start="47:50" pos:end="47:60"><expr pos:start="47:50" pos:end="47:59"><name pos:start="47:50" pos:end="47:50">d</name><operator pos:start="47:51" pos:end="47:52">+=</operator> <name pos:start="47:54" pos:end="47:59"><name pos:start="47:54" pos:end="47:54">o</name><operator pos:start="47:55" pos:end="47:56">-&gt;</operator><name pos:start="47:57" pos:end="47:59">max</name></name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="49:17" pos:end="49:60">else if<condition pos:start="49:24" pos:end="49:48">(<expr pos:start="49:25" pos:end="49:47"><operator pos:start="49:25" pos:end="49:25">!</operator><call pos:start="49:26" pos:end="49:47"><name pos:start="49:26" pos:end="49:31">strcmp</name><argument_list pos:start="49:32" pos:end="49:47">(<argument pos:start="49:33" pos:end="49:35"><expr pos:start="49:33" pos:end="49:35"><name pos:start="49:33" pos:end="49:35">buf</name></expr></argument>, <argument pos:start="49:38" pos:end="49:42"><expr pos:start="49:38" pos:end="49:42"><literal type="string" pos:start="49:38" pos:end="49:42">"min"</literal></expr></argument>    )</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:50" pos:end="49:60"><block_content pos:start="49:50" pos:end="49:60"> <expr_stmt pos:start="49:50" pos:end="49:60"><expr pos:start="49:50" pos:end="49:59"><name pos:start="49:50" pos:end="49:50">d</name><operator pos:start="49:51" pos:end="49:52">+=</operator> <name pos:start="49:54" pos:end="49:59"><name pos:start="49:54" pos:end="49:54">o</name><operator pos:start="49:55" pos:end="49:56">-&gt;</operator><name pos:start="49:57" pos:end="49:59">min</name></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="51:17" pos:end="51:33">else<block type="pseudo" pos:start="51:22" pos:end="51:33"><block_content pos:start="51:22" pos:end="51:33"> <return pos:start="51:22" pos:end="51:33">return <expr pos:start="51:29" pos:end="51:32"><name pos:start="51:29" pos:end="51:32">NULL</name></expr>;</return></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="57:13" pos:end="57:34"><if pos:start="57:13" pos:end="57:34">if<condition pos:start="57:15" pos:end="57:27">(<expr pos:start="57:16" pos:end="57:26"><operator pos:start="57:16" pos:end="57:16">*</operator><name pos:start="57:17" pos:end="57:19">val</name> <operator pos:start="57:21" pos:end="57:22">==</operator> <literal type="char" pos:start="57:24" pos:end="57:26">'+'</literal></expr>)</condition><block type="pseudo" pos:start="57:29" pos:end="57:34"><block_content pos:start="57:29" pos:end="57:34"> <expr_stmt pos:start="57:29" pos:end="57:34"><expr pos:start="57:29" pos:end="57:33"><name pos:start="57:29" pos:end="57:31">val</name><operator pos:start="57:32" pos:end="57:33">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="59:13" pos:end="61:57"><if pos:start="59:13" pos:end="61:57">if<condition pos:start="59:15" pos:end="59:21">(<expr pos:start="59:16" pos:end="59:20"><operator pos:start="59:16" pos:end="59:16">!</operator><operator pos:start="59:17" pos:end="59:17">*</operator><name pos:start="59:18" pos:end="59:20">val</name></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:57"><block_content pos:start="61:17" pos:end="61:57">

                <return pos:start="61:17" pos:end="61:57">return <expr pos:start="61:24" pos:end="61:56"><call pos:start="61:24" pos:end="61:56"><name pos:start="61:24" pos:end="61:36">av_set_number</name><argument_list pos:start="61:37" pos:end="61:56">(<argument pos:start="61:38" pos:end="61:40"><expr pos:start="61:38" pos:end="61:40"><name pos:start="61:38" pos:end="61:40">obj</name></expr></argument>, <argument pos:start="61:43" pos:end="61:46"><expr pos:start="61:43" pos:end="61:46"><name pos:start="61:43" pos:end="61:46">name</name></expr></argument>, <argument pos:start="61:49" pos:end="61:49"><expr pos:start="61:49" pos:end="61:49"><name pos:start="61:49" pos:end="61:49">d</name></expr></argument>, <argument pos:start="61:52" pos:end="61:52"><expr pos:start="61:52" pos:end="61:52"><literal type="number" pos:start="61:52" pos:end="61:52">1</literal></expr></argument>, <argument pos:start="61:55" pos:end="61:55"><expr pos:start="61:55" pos:end="61:55"><literal type="number" pos:start="61:55" pos:end="61:55">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <return pos:start="65:9" pos:end="65:20">return <expr pos:start="65:16" pos:end="65:19"><name pos:start="65:16" pos:end="65:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    

    <expr_stmt pos:start="71:5" pos:end="71:58"><expr pos:start="71:5" pos:end="71:57"><call pos:start="71:5" pos:end="71:57"><name pos:start="71:5" pos:end="71:10">memcpy</name><argument_list pos:start="71:11" pos:end="71:57">(<argument pos:start="71:12" pos:end="71:38"><expr pos:start="71:12" pos:end="71:38"><operator pos:start="71:12" pos:end="71:12">(</operator><operator pos:start="71:13" pos:end="71:13">(</operator><name pos:start="71:14" pos:end="71:20">uint8_t</name><operator pos:start="71:21" pos:end="71:21">*</operator><operator pos:start="71:22" pos:end="71:22">)</operator><name pos:start="71:23" pos:end="71:25">obj</name><operator pos:start="71:26" pos:end="71:26">)</operator> <operator pos:start="71:28" pos:end="71:28">+</operator> <name pos:start="71:30" pos:end="71:38"><name pos:start="71:30" pos:end="71:30">o</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:38">offset</name></name></expr></argument>, <argument pos:start="71:41" pos:end="71:43"><expr pos:start="71:41" pos:end="71:43"><name pos:start="71:41" pos:end="71:43">val</name></expr></argument>, <argument pos:start="71:46" pos:end="71:56"><expr pos:start="71:46" pos:end="71:56"><sizeof pos:start="71:46" pos:end="71:56">sizeof<argument_list pos:start="71:52" pos:end="71:56">(<argument pos:start="71:53" pos:end="71:55"><expr pos:start="71:53" pos:end="71:55"><name pos:start="71:53" pos:end="71:55">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="73:5" pos:end="73:13">return <expr pos:start="73:12" pos:end="73:12"><name pos:start="73:12" pos:end="73:12">o</name></expr>;</return>

</block_content>}</block></function>
</unit>
