<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7810.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">virtio_blk_set_status</name><parameter_list pos:start="1:34" pos:end="1:69">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:46">VirtIODevice</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">vdev</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:68"><decl pos:start="1:55" pos:end="1:68"><type pos:start="1:55" pos:end="1:68"><name pos:start="1:55" pos:end="1:61">uint8_t</name></type> <name pos:start="1:63" pos:end="1:68">status</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:5">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">VirtIOBlock</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:37">= <expr pos:start="5:22" pos:end="5:37"><call pos:start="5:22" pos:end="5:37"><name pos:start="5:22" pos:end="5:31">VIRTIO_BLK</name><argument_list pos:start="5:32" pos:end="5:37">(<argument pos:start="5:33" pos:end="5:36"><expr pos:start="5:33" pos:end="5:36"><name pos:start="5:33" pos:end="5:36">vdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:21">features</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="13:64">(<expr pos:start="11:9" pos:end="13:63"><name pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:20">dataplane</name></name> <operator pos:start="11:22" pos:end="11:23">&amp;&amp;</operator> <operator pos:start="11:25" pos:end="11:25">!</operator><operator pos:start="11:26" pos:end="11:26">(</operator><name pos:start="11:27" pos:end="11:32">status</name> <operator pos:start="11:34" pos:end="11:34">&amp;</operator> <operator pos:start="11:36" pos:end="11:36">(</operator><name pos:start="11:37" pos:end="11:58">VIRTIO_CONFIG_S_DRIVER</name> <operator pos:start="11:60" pos:end="11:60">|</operator>

                                    <name pos:start="13:37" pos:end="13:61">VIRTIO_CONFIG_S_DRIVER_OK</name><operator pos:start="13:62" pos:end="13:62">)</operator><operator pos:start="13:63" pos:end="13:63">)</operator></expr>)</condition> <block pos:start="13:66" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:49">

        <expr_stmt pos:start="15:9" pos:end="15:49"><expr pos:start="15:9" pos:end="15:48"><call pos:start="15:9" pos:end="15:48"><name pos:start="15:9" pos:end="15:34">virtio_blk_data_plane_stop</name><argument_list pos:start="15:35" pos:end="15:48">(<argument pos:start="15:36" pos:end="15:47"><expr pos:start="15:36" pos:end="15:47"><name pos:start="15:36" pos:end="15:47"><name pos:start="15:36" pos:end="15:36">s</name><operator pos:start="15:37" pos:end="15:38">-&gt;</operator><name pos:start="15:39" pos:end="15:47">dataplane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:46">(<expr pos:start="21:9" pos:end="21:45"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:16">status</name> <operator pos:start="21:18" pos:end="21:18">&amp;</operator> <name pos:start="21:20" pos:end="21:44">VIRTIO_CONFIG_S_DRIVER_OK</name><operator pos:start="21:45" pos:end="21:45">)</operator></expr>)</condition> <block pos:start="21:48" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:36"><expr pos:start="29:5" pos:end="29:35"><name pos:start="29:5" pos:end="29:12">features</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <name pos:start="29:16" pos:end="29:35"><name pos:start="29:16" pos:end="29:19">vdev</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:35">guest_features</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="61:7">/* A guest that supports VIRTIO_BLK_F_CONFIG_WCE must be able to send

     * cache flushes.  Thus, the "auto writethrough" behavior is never

     * necessary for guests that support the VIRTIO_BLK_F_CONFIG_WCE feature.

     * Leaving it enabled would break the following sequence:

     *

     *     Guest started with "-drive cache=writethrough"

     *     Guest sets status to 0

     *     Guest sets DRIVER bit in status field

     *     Guest reads host features (WCE=0, CONFIG_WCE=1)

     *     Guest writes guest features (WCE=0, CONFIG_WCE=1)

     *     Guest writes 1 to the WCE configuration field (writeback mode)

     *     Guest sets DRIVER_OK bit in status field

     *

     * s-&gt;bs would erroneously be placed in writethrough mode.

     */</comment>

    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="73:5">if <condition pos:start="63:8" pos:end="63:53">(<expr pos:start="63:9" pos:end="63:52"><operator pos:start="63:9" pos:end="63:9">!</operator><operator pos:start="63:10" pos:end="63:10">(</operator><name pos:start="63:11" pos:end="63:18">features</name> <operator pos:start="63:20" pos:end="63:20">&amp;</operator> <operator pos:start="63:22" pos:end="63:22">(</operator><literal type="number" pos:start="63:23" pos:end="63:23">1</literal> <operator pos:start="63:25" pos:end="63:26">&lt;&lt;</operator> <name pos:start="63:28" pos:end="63:50">VIRTIO_BLK_F_CONFIG_WCE</name><operator pos:start="63:51" pos:end="63:51">)</operator><operator pos:start="63:52" pos:end="63:52">)</operator></expr>)</condition> <block pos:start="63:55" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:57">

        <expr_stmt pos:start="65:9" pos:end="65:57"><expr pos:start="65:9" pos:end="65:56"><call pos:start="65:9" pos:end="65:56"><name pos:start="65:9" pos:end="65:27">aio_context_acquire</name><argument_list pos:start="65:28" pos:end="65:56">(<argument pos:start="65:29" pos:end="65:55"><expr pos:start="65:29" pos:end="65:55"><call pos:start="65:29" pos:end="65:55"><name pos:start="65:29" pos:end="65:48">bdrv_get_aio_context</name><argument_list pos:start="65:49" pos:end="65:55">(<argument pos:start="65:50" pos:end="65:54"><expr pos:start="65:50" pos:end="65:54"><name pos:start="65:50" pos:end="65:54"><name pos:start="65:50" pos:end="65:50">s</name><operator pos:start="65:51" pos:end="65:52">-&gt;</operator><name pos:start="65:53" pos:end="65:54">bs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="69:76"><expr pos:start="67:9" pos:end="69:75"><call pos:start="67:9" pos:end="69:75"><name pos:start="67:9" pos:end="67:35">bdrv_set_enable_write_cache</name><argument_list pos:start="67:36" pos:end="69:75">(<argument pos:start="67:37" pos:end="67:41"><expr pos:start="67:37" pos:end="67:41"><name pos:start="67:37" pos:end="67:41"><name pos:start="67:37" pos:end="67:37">s</name><operator pos:start="67:38" pos:end="67:39">-&gt;</operator><name pos:start="67:40" pos:end="67:41">bs</name></name></expr></argument>,

                                    <argument pos:start="69:37" pos:end="69:74"><expr pos:start="69:37" pos:end="69:74"><operator pos:start="69:37" pos:end="69:37">!</operator><operator pos:start="69:38" pos:end="69:38">!</operator><operator pos:start="69:39" pos:end="69:39">(</operator><name pos:start="69:40" pos:end="69:47">features</name> <operator pos:start="69:49" pos:end="69:49">&amp;</operator> <operator pos:start="69:51" pos:end="69:51">(</operator><literal type="number" pos:start="69:52" pos:end="69:52">1</literal> <operator pos:start="69:54" pos:end="69:55">&lt;&lt;</operator> <name pos:start="69:57" pos:end="69:72">VIRTIO_BLK_F_WCE</name><operator pos:start="69:73" pos:end="69:73">)</operator><operator pos:start="69:74" pos:end="69:74">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:57"><expr pos:start="71:9" pos:end="71:56"><call pos:start="71:9" pos:end="71:56"><name pos:start="71:9" pos:end="71:27">aio_context_release</name><argument_list pos:start="71:28" pos:end="71:56">(<argument pos:start="71:29" pos:end="71:55"><expr pos:start="71:29" pos:end="71:55"><call pos:start="71:29" pos:end="71:55"><name pos:start="71:29" pos:end="71:48">bdrv_get_aio_context</name><argument_list pos:start="71:49" pos:end="71:55">(<argument pos:start="71:50" pos:end="71:54"><expr pos:start="71:50" pos:end="71:54"><name pos:start="71:50" pos:end="71:54"><name pos:start="71:50" pos:end="71:50">s</name><operator pos:start="71:51" pos:end="71:52">-&gt;</operator><name pos:start="71:53" pos:end="71:54">bs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
