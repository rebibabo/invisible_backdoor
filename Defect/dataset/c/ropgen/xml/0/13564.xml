<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13564.c" pos:tabs="8"><function pos:start="1:1" pos:end="25:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">test_validate_fail_struct</name><parameter_list pos:start="1:38" pos:end="3:58">(<parameter pos:start="1:39" pos:end="1:64"><decl pos:start="1:39" pos:end="1:64"><type pos:start="1:39" pos:end="1:64"><name pos:start="1:39" pos:end="1:58">TestInputVisitorData</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">data</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:57"><decl pos:start="3:40" pos:end="3:57"><type pos:start="3:40" pos:end="3:57"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:49">void</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:57">unused</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="25:1">{<block_content pos:start="7:5" pos:end="23:17">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">TestStruct</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">p</name> <init pos:start="7:19" pos:end="7:24">= <expr pos:start="7:21" pos:end="7:24"><name pos:start="7:21" pos:end="7:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">Visitor</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:14">v</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:102"><expr pos:start="15:5" pos:end="15:101"><name pos:start="15:5" pos:end="15:5">v</name> <operator pos:start="15:7" pos:end="15:7">=</operator> <call pos:start="15:9" pos:end="15:101"><name pos:start="15:9" pos:end="15:26">validate_test_init</name><argument_list pos:start="15:27" pos:end="15:101">(<argument pos:start="15:28" pos:end="15:31"><expr pos:start="15:28" pos:end="15:31"><name pos:start="15:28" pos:end="15:31">data</name></expr></argument>, <argument pos:start="15:34" pos:end="15:100"><expr pos:start="15:34" pos:end="15:100"><literal type="string" pos:start="15:34" pos:end="15:100">"{ 'integer': -42, 'boolean': true, 'string': 'foo', 'extra': 42 }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:45"><expr pos:start="19:5" pos:end="19:44"><call pos:start="19:5" pos:end="19:44"><name pos:start="19:5" pos:end="19:25">visit_type_TestStruct</name><argument_list pos:start="19:26" pos:end="19:44">(<argument pos:start="19:27" pos:end="19:27"><expr pos:start="19:27" pos:end="19:27"><name pos:start="19:27" pos:end="19:27">v</name></expr></argument>, <argument pos:start="19:30" pos:end="19:33"><expr pos:start="19:30" pos:end="19:33"><name pos:start="19:30" pos:end="19:33">NULL</name></expr></argument>, <argument pos:start="19:36" pos:end="19:37"><expr pos:start="19:36" pos:end="19:37"><operator pos:start="19:36" pos:end="19:36">&amp;</operator><name pos:start="19:37" pos:end="19:37">p</name></expr></argument>, <argument pos:start="19:40" pos:end="19:43"><expr pos:start="19:40" pos:end="19:43"><operator pos:start="19:40" pos:end="19:40">&amp;</operator><name pos:start="19:41" pos:end="19:43">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:30"><expr pos:start="21:5" pos:end="21:29"><call pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:23">error_free_or_abort</name><argument_list pos:start="21:24" pos:end="21:29">(<argument pos:start="21:25" pos:end="21:28"><expr pos:start="21:25" pos:end="21:28"><operator pos:start="21:25" pos:end="21:25">&amp;</operator><name pos:start="21:26" pos:end="21:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:17"><expr pos:start="23:5" pos:end="23:16"><call pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">g_assert</name><argument_list pos:start="23:13" pos:end="23:16">(<argument pos:start="23:14" pos:end="23:15"><expr pos:start="23:14" pos:end="23:15"><operator pos:start="23:14" pos:end="23:14">!</operator><name pos:start="23:15" pos:end="23:15">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
