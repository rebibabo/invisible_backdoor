<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9708.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:18"><name pos:start="1:1" pos:end="1:16">BlockDriverState</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:26">bdrv_new</name><parameter_list pos:start="1:27" pos:end="1:65">(<parameter pos:start="1:28" pos:end="1:50"><decl pos:start="1:28" pos:end="1:50"><type pos:start="1:28" pos:end="1:50"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:50">device_name</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:57">Error</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier><modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:14">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:57">(<expr pos:start="11:9" pos:end="11:56"><operator pos:start="11:9" pos:end="11:9">*</operator><name pos:start="11:10" pos:end="11:20">device_name</name> <operator pos:start="11:22" pos:end="11:23">&amp;&amp;</operator> <operator pos:start="11:25" pos:end="11:25">!</operator><call pos:start="11:26" pos:end="11:56"><name pos:start="11:26" pos:end="11:43">bdrv_is_valid_name</name><argument_list pos:start="11:44" pos:end="11:56">(<argument pos:start="11:45" pos:end="11:55"><expr pos:start="11:45" pos:end="11:55"><name pos:start="11:45" pos:end="11:55">device_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:59" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:20">

        <expr_stmt pos:start="13:9" pos:end="13:48"><expr pos:start="13:9" pos:end="13:47"><call pos:start="13:9" pos:end="13:47"><name pos:start="13:9" pos:end="13:18">error_setg</name><argument_list pos:start="13:19" pos:end="13:47">(<argument pos:start="13:20" pos:end="13:23"><expr pos:start="13:20" pos:end="13:23"><name pos:start="13:20" pos:end="13:23">errp</name></expr></argument>, <argument pos:start="13:26" pos:end="13:46"><expr pos:start="13:26" pos:end="13:46"><literal type="string" pos:start="13:26" pos:end="13:46">"Invalid device name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:20">return <expr pos:start="15:16" pos:end="15:19"><name pos:start="15:16" pos:end="15:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:31">(<expr pos:start="21:9" pos:end="21:30"><call pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:17">bdrv_find</name><argument_list pos:start="21:18" pos:end="21:30">(<argument pos:start="21:19" pos:end="21:29"><expr pos:start="21:19" pos:end="21:29"><name pos:start="21:19" pos:end="21:29">device_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:33" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:20">

        <expr_stmt pos:start="23:9" pos:end="25:32"><expr pos:start="23:9" pos:end="25:31"><call pos:start="23:9" pos:end="25:31"><name pos:start="23:9" pos:end="23:18">error_setg</name><argument_list pos:start="23:19" pos:end="25:31">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">errp</name></expr></argument>, <argument pos:start="23:26" pos:end="23:61"><expr pos:start="23:26" pos:end="23:61"><literal type="string" pos:start="23:26" pos:end="23:61">"Device with id '%s' already exists"</literal></expr></argument>,

                   <argument pos:start="25:20" pos:end="25:30"><expr pos:start="25:20" pos:end="25:30"><name pos:start="25:20" pos:end="25:30">device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:20">return <expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="41:5"><if pos:start="31:5" pos:end="41:5">if <condition pos:start="31:8" pos:end="31:36">(<expr pos:start="31:9" pos:end="31:35"><call pos:start="31:9" pos:end="31:35"><name pos:start="31:9" pos:end="31:22">bdrv_find_node</name><argument_list pos:start="31:23" pos:end="31:35">(<argument pos:start="31:24" pos:end="31:34"><expr pos:start="31:24" pos:end="31:34"><name pos:start="31:24" pos:end="31:34">device_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:38" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:20">

        <expr_stmt pos:start="33:9" pos:end="37:32"><expr pos:start="33:9" pos:end="37:31"><call pos:start="33:9" pos:end="37:31"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="37:31">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>,

                   <argument pos:start="35:20" pos:end="35:74"><expr pos:start="35:20" pos:end="35:74"><literal type="string" pos:start="35:20" pos:end="35:74">"Device name '%s' conflicts with an existing node name"</literal></expr></argument>,

                   <argument pos:start="37:20" pos:end="37:30"><expr pos:start="37:20" pos:end="37:30"><name pos:start="37:20" pos:end="37:30">device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:20">return <expr pos:start="39:16" pos:end="39:19"><name pos:start="39:16" pos:end="39:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:37"><expr pos:start="45:5" pos:end="45:36"><name pos:start="45:5" pos:end="45:6">bs</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <call pos:start="45:10" pos:end="45:36"><name pos:start="45:10" pos:end="45:15">g_new0</name><argument_list pos:start="45:16" pos:end="45:36">(<argument pos:start="45:17" pos:end="45:32"><expr pos:start="45:17" pos:end="45:32"><name pos:start="45:17" pos:end="45:32">BlockDriverState</name></expr></argument>, <argument pos:start="45:35" pos:end="45:35"><expr pos:start="45:35" pos:end="45:35"><literal type="number" pos:start="45:35" pos:end="45:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><call pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:14">QLIST_INIT</name><argument_list pos:start="47:15" pos:end="47:34">(<argument pos:start="47:16" pos:end="47:33"><expr pos:start="47:16" pos:end="47:33"><operator pos:start="47:16" pos:end="47:16">&amp;</operator><name pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:18">bs</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:33">dirty_bitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:67"><expr pos:start="49:5" pos:end="49:66"><call pos:start="49:5" pos:end="49:66"><name pos:start="49:5" pos:end="49:11">pstrcpy</name><argument_list pos:start="49:12" pos:end="49:66">(<argument pos:start="49:13" pos:end="49:27"><expr pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:14">bs</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:27">device_name</name></name></expr></argument>, <argument pos:start="49:30" pos:end="49:52"><expr pos:start="49:30" pos:end="49:52"><sizeof pos:start="49:30" pos:end="49:52">sizeof<argument_list pos:start="49:36" pos:end="49:52">(<argument pos:start="49:37" pos:end="49:51"><expr pos:start="49:37" pos:end="49:51"><name pos:start="49:37" pos:end="49:51"><name pos:start="49:37" pos:end="49:38">bs</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:51">device_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="49:55" pos:end="49:65"><expr pos:start="49:55" pos:end="49:65"><name pos:start="49:55" pos:end="49:65">device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:31">(<expr pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:19">device_name</name><index pos:start="51:20" pos:end="51:22">[<expr pos:start="51:21" pos:end="51:21"><literal type="number" pos:start="51:21" pos:end="51:21">0</literal></expr>]</index></name> <operator pos:start="51:24" pos:end="51:25">!=</operator> <literal type="char" pos:start="51:27" pos:end="51:30">'\0'</literal></expr>)</condition> <block pos:start="51:33" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:58">

        <expr_stmt pos:start="53:9" pos:end="53:58"><expr pos:start="53:9" pos:end="53:57"><call pos:start="53:9" pos:end="53:57"><name pos:start="53:9" pos:end="53:26">QTAILQ_INSERT_TAIL</name><argument_list pos:start="53:27" pos:end="53:57">(<argument pos:start="53:28" pos:end="53:39"><expr pos:start="53:28" pos:end="53:39"><operator pos:start="53:28" pos:end="53:28">&amp;</operator><name pos:start="53:29" pos:end="53:39">bdrv_states</name></expr></argument>, <argument pos:start="53:42" pos:end="53:43"><expr pos:start="53:42" pos:end="53:43"><name pos:start="53:42" pos:end="53:43">bs</name></expr></argument>, <argument pos:start="53:46" pos:end="53:56"><expr pos:start="53:46" pos:end="53:56"><name pos:start="53:46" pos:end="53:56">device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="57:5" pos:end="61:5">for <control pos:start="57:9" pos:end="57:43">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:38"><expr pos:start="57:17" pos:end="57:37"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:37">BLOCK_OP_TYPE_MAX</name></expr>;</condition> <incr pos:start="57:40" pos:end="57:42"><expr pos:start="57:40" pos:end="57:42"><name pos:start="57:40" pos:end="57:40">i</name><operator pos:start="57:41" pos:end="57:42">++</operator></expr></incr>)</control> <block pos:start="57:45" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:40">

        <expr_stmt pos:start="59:9" pos:end="59:40"><expr pos:start="59:9" pos:end="59:39"><call pos:start="59:9" pos:end="59:39"><name pos:start="59:9" pos:end="59:18">QLIST_INIT</name><argument_list pos:start="59:19" pos:end="59:39">(<argument pos:start="59:20" pos:end="59:38"><expr pos:start="59:20" pos:end="59:38"><operator pos:start="59:20" pos:end="59:20">&amp;</operator><name pos:start="59:21" pos:end="59:38"><name pos:start="59:21" pos:end="59:22">bs</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:35">op_blockers</name><index pos:start="59:36" pos:end="59:38">[<expr pos:start="59:37" pos:end="59:37"><name pos:start="59:37" pos:end="59:37">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="63:5" pos:end="63:30"><expr pos:start="63:5" pos:end="63:29"><call pos:start="63:5" pos:end="63:29"><name pos:start="63:5" pos:end="63:25">bdrv_iostatus_disable</name><argument_list pos:start="63:26" pos:end="63:29">(<argument pos:start="63:27" pos:end="63:28"><expr pos:start="63:27" pos:end="63:28"><name pos:start="63:27" pos:end="63:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:45"><expr pos:start="65:5" pos:end="65:44"><call pos:start="65:5" pos:end="65:44"><name pos:start="65:5" pos:end="65:22">notifier_list_init</name><argument_list pos:start="65:23" pos:end="65:44">(<argument pos:start="65:24" pos:end="65:43"><expr pos:start="65:24" pos:end="65:43"><operator pos:start="65:24" pos:end="65:24">&amp;</operator><name pos:start="65:25" pos:end="65:43"><name pos:start="65:25" pos:end="65:26">bs</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:43">close_notifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:64"><expr pos:start="67:5" pos:end="67:63"><call pos:start="67:5" pos:end="67:63"><name pos:start="67:5" pos:end="67:34">notifier_with_return_list_init</name><argument_list pos:start="67:35" pos:end="67:63">(<argument pos:start="67:36" pos:end="67:62"><expr pos:start="67:36" pos:end="67:62"><operator pos:start="67:36" pos:end="67:36">&amp;</operator><name pos:start="67:37" pos:end="67:62"><name pos:start="67:37" pos:end="67:38">bs</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:62">before_write_notifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:47"><expr pos:start="69:5" pos:end="69:46"><call pos:start="69:5" pos:end="69:46"><name pos:start="69:5" pos:end="69:22">qemu_co_queue_init</name><argument_list pos:start="69:23" pos:end="69:46">(<argument pos:start="69:24" pos:end="69:45"><expr pos:start="69:24" pos:end="69:45"><operator pos:start="69:24" pos:end="69:24">&amp;</operator><name pos:start="69:25" pos:end="69:45"><name pos:start="69:25" pos:end="69:26">bs</name><operator pos:start="69:27" pos:end="69:28">-&gt;</operator><name pos:start="69:29" pos:end="69:42">throttled_reqs</name><index pos:start="69:43" pos:end="69:45">[<expr pos:start="69:44" pos:end="69:44"><literal type="number" pos:start="69:44" pos:end="69:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:47"><expr pos:start="71:5" pos:end="71:46"><call pos:start="71:5" pos:end="71:46"><name pos:start="71:5" pos:end="71:22">qemu_co_queue_init</name><argument_list pos:start="71:23" pos:end="71:46">(<argument pos:start="71:24" pos:end="71:45"><expr pos:start="71:24" pos:end="71:45"><operator pos:start="71:24" pos:end="71:24">&amp;</operator><name pos:start="71:25" pos:end="71:45"><name pos:start="71:25" pos:end="71:26">bs</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:42">throttled_reqs</name><index pos:start="71:43" pos:end="71:45">[<expr pos:start="71:44" pos:end="71:44"><literal type="number" pos:start="71:44" pos:end="71:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:19"><expr pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:14"><name pos:start="73:5" pos:end="73:6">bs</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:14">refcnt</name></name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:45"><expr pos:start="75:5" pos:end="75:44"><name pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:6">bs</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:19">aio_context</name></name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="75:44"><name pos:start="75:23" pos:end="75:42">qemu_get_aio_context</name><argument_list pos:start="75:43" pos:end="75:44">()</argument_list></call></expr>;</expr_stmt>



    <return pos:start="79:5" pos:end="79:14">return <expr pos:start="79:12" pos:end="79:13"><name pos:start="79:12" pos:end="79:13">bs</name></expr>;</return>

</block_content>}</block></function>
</unit>
