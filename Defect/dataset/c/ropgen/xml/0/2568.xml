<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2568.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">kvm_arch_on_sigbus_vcpu</name><parameter_list pos:start="1:28" pos:end="1:64">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:36">CPUState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">env</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:51"><decl pos:start="1:44" pos:end="1:51"><type pos:start="1:44" pos:end="1:51"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:51">code</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="7:5" pos:end="95:13">

<cpp:ifdef pos:start="5:1" pos:end="5:18">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:18">KVM_CAP_MCE</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:15">vaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ram_addr_t</name></type> <name pos:start="9:16" pos:end="9:23">ram_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:22">target_phys_addr_t</name></type> <name pos:start="11:24" pos:end="11:28">paddr</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="93:5"><if pos:start="15:5" pos:end="73:5">if <condition pos:start="15:8" pos:end="19:38">(<expr pos:start="15:9" pos:end="19:37"><operator pos:start="15:9" pos:end="15:9">(</operator><name pos:start="15:10" pos:end="15:21"><name pos:start="15:10" pos:end="15:12">env</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:21">mcg_cap</name></name> <operator pos:start="15:23" pos:end="15:23">&amp;</operator> <name pos:start="15:25" pos:end="15:33">MCG_SER_P</name><operator pos:start="15:34" pos:end="15:34">)</operator> <operator pos:start="15:36" pos:end="15:37">&amp;&amp;</operator> <name pos:start="15:39" pos:end="15:42">addr</name>

        <operator pos:start="17:9" pos:end="17:10">&amp;&amp;</operator> <operator pos:start="17:12" pos:end="17:12">(</operator><name pos:start="17:13" pos:end="17:16">code</name> <operator pos:start="17:18" pos:end="17:19">==</operator> <name pos:start="17:21" pos:end="17:33">BUS_MCEERR_AR</name>

            <operator pos:start="19:13" pos:end="19:14">||</operator> <name pos:start="19:16" pos:end="19:19">code</name> <operator pos:start="19:21" pos:end="19:22">==</operator> <name pos:start="19:24" pos:end="19:36">BUS_MCEERR_AO</name><operator pos:start="19:37" pos:end="19:37">)</operator></expr>)</condition> <block pos:start="19:40" pos:end="73:5">{<block_content pos:start="21:9" pos:end="71:9">

        <expr_stmt pos:start="21:9" pos:end="21:29"><expr pos:start="21:9" pos:end="21:28"><name pos:start="21:9" pos:end="21:13">vaddr</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <operator pos:start="21:17" pos:end="21:17">(</operator><name pos:start="21:18" pos:end="21:21">void</name> <operator pos:start="21:23" pos:end="21:23">*</operator><operator pos:start="21:24" pos:end="21:24">)</operator><name pos:start="21:25" pos:end="21:28">addr</name></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="43:9"><if pos:start="23:9" pos:end="43:9">if <condition pos:start="23:12" pos:end="25:81">(<expr pos:start="23:13" pos:end="25:80"><call pos:start="23:13" pos:end="23:53"><name pos:start="23:13" pos:end="23:35">qemu_ram_addr_from_host</name><argument_list pos:start="23:36" pos:end="23:53">(<argument pos:start="23:37" pos:end="23:41"><expr pos:start="23:37" pos:end="23:41"><name pos:start="23:37" pos:end="23:41">vaddr</name></expr></argument>, <argument pos:start="23:44" pos:end="23:52"><expr pos:start="23:44" pos:end="23:52"><operator pos:start="23:44" pos:end="23:44">&amp;</operator><name pos:start="23:45" pos:end="23:52">ram_addr</name></expr></argument>)</argument_list></call> <operator pos:start="23:55" pos:end="23:56">||</operator>

            <operator pos:start="25:13" pos:end="25:13">!</operator><call pos:start="25:14" pos:end="25:80"><name pos:start="25:14" pos:end="25:46">kvm_physical_memory_addr_from_ram</name><argument_list pos:start="25:47" pos:end="25:80">(<argument pos:start="25:48" pos:end="25:61"><expr pos:start="25:48" pos:end="25:61"><name pos:start="25:48" pos:end="25:61"><name pos:start="25:48" pos:end="25:50">env</name><operator pos:start="25:51" pos:end="25:52">-&gt;</operator><name pos:start="25:53" pos:end="25:61">kvm_state</name></name></expr></argument>, <argument pos:start="25:64" pos:end="25:71"><expr pos:start="25:64" pos:end="25:71"><name pos:start="25:64" pos:end="25:71">ram_addr</name></expr></argument>, <argument pos:start="25:74" pos:end="25:79"><expr pos:start="25:74" pos:end="25:79"><operator pos:start="25:74" pos:end="25:74">&amp;</operator><name pos:start="25:75" pos:end="25:79">paddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:83" pos:end="43:9">{<block_content pos:start="27:13" pos:end="41:13">

            <expr_stmt pos:start="27:13" pos:end="29:62"><expr pos:start="27:13" pos:end="29:61"><call pos:start="27:13" pos:end="29:61"><name pos:start="27:13" pos:end="27:19">fprintf</name><argument_list pos:start="27:20" pos:end="29:61">(<argument pos:start="27:21" pos:end="27:26"><expr pos:start="27:21" pos:end="27:26"><name pos:start="27:21" pos:end="27:26">stderr</name></expr></argument>, <argument pos:start="27:29" pos:end="29:60"><expr pos:start="27:29" pos:end="29:60"><literal type="string" pos:start="27:29" pos:end="27:71">"Hardware memory error for memory used by "</literal>

                    <literal type="string" pos:start="29:21" pos:end="29:60">"QEMU itself instead of guest system!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="31:13" pos:end="31:46">/* Hope we are lucky for AO MCE */</comment>

            <if_stmt pos:start="33:13" pos:end="41:13"><if pos:start="33:13" pos:end="37:13">if <condition pos:start="33:16" pos:end="33:38">(<expr pos:start="33:17" pos:end="33:37"><name pos:start="33:17" pos:end="33:20">code</name> <operator pos:start="33:22" pos:end="33:23">==</operator> <name pos:start="33:25" pos:end="33:37">BUS_MCEERR_AO</name></expr>)</condition> <block pos:start="33:40" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:25">

                <return pos:start="35:17" pos:end="35:25">return <expr pos:start="35:24" pos:end="35:24"><literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr>;</return>

            </block_content>}</block></if> <else pos:start="37:15" pos:end="41:13">else <block pos:start="37:20" pos:end="41:13">{<block_content pos:start="39:17" pos:end="39:40">

                <expr_stmt pos:start="39:17" pos:end="39:40"><expr pos:start="39:17" pos:end="39:39"><call pos:start="39:17" pos:end="39:39"><name pos:start="39:17" pos:end="39:37">hardware_memory_error</name><argument_list pos:start="39:38" pos:end="39:39">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="47:9" pos:end="71:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:34">(<expr pos:start="47:13" pos:end="47:33"><name pos:start="47:13" pos:end="47:16">code</name> <operator pos:start="47:18" pos:end="47:19">==</operator> <name pos:start="47:21" pos:end="47:33">BUS_MCEERR_AR</name></expr>)</condition> <block pos:start="47:36" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:50">

            <comment type="block" pos:start="49:13" pos:end="49:64">/* Fake an Intel architectural Data Load SRAR UCR */</comment>

            <expr_stmt pos:start="51:13" pos:end="51:50"><expr pos:start="51:13" pos:end="51:49"><call pos:start="51:13" pos:end="51:49"><name pos:start="51:13" pos:end="51:37">kvm_mce_inj_srar_dataload</name><argument_list pos:start="51:38" pos:end="51:49">(<argument pos:start="51:39" pos:end="51:41"><expr pos:start="51:39" pos:end="51:41"><name pos:start="51:39" pos:end="51:41">env</name></expr></argument>, <argument pos:start="51:44" pos:end="51:48"><expr pos:start="51:44" pos:end="51:48"><name pos:start="51:44" pos:end="51:48">paddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="53:11" pos:end="71:9">else <block pos:start="53:16" pos:end="71:9">{<block_content pos:start="63:13" pos:end="69:13">

            <comment type="block" pos:start="55:13" pos:end="61:15">/*

             * If there is an MCE excpetion being processed, ignore

             * this SRAO MCE

             */</comment>

            <if_stmt pos:start="63:13" pos:end="69:13"><if pos:start="63:13" pos:end="69:13">if <condition pos:start="63:16" pos:end="63:42">(<expr pos:start="63:17" pos:end="63:41"><operator pos:start="63:17" pos:end="63:17">!</operator><call pos:start="63:18" pos:end="63:41"><name pos:start="63:18" pos:end="63:36">kvm_mce_in_progress</name><argument_list pos:start="63:37" pos:end="63:41">(<argument pos:start="63:38" pos:end="63:40"><expr pos:start="63:38" pos:end="63:40"><name pos:start="63:38" pos:end="63:40">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:44" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:54">

                <comment type="block" pos:start="65:17" pos:end="65:70">/* Fake an Intel architectural Memory scrubbing UCR */</comment>

                <expr_stmt pos:start="67:17" pos:end="67:54"><expr pos:start="67:17" pos:end="67:53"><call pos:start="67:17" pos:end="67:53"><name pos:start="67:17" pos:end="67:41">kvm_mce_inj_srao_memscrub</name><argument_list pos:start="67:42" pos:end="67:53">(<argument pos:start="67:43" pos:end="67:45"><expr pos:start="67:43" pos:end="67:45"><name pos:start="67:43" pos:end="67:45">env</name></expr></argument>, <argument pos:start="67:48" pos:end="67:52"><expr pos:start="67:48" pos:end="67:52"><name pos:start="67:48" pos:end="67:52">paddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="93:5">else

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="75:8" pos:end="75:24">/* KVM_CAP_MCE */</comment>

    <block pos:start="77:5" pos:end="93:5">{<block_content pos:start="79:9" pos:end="91:9">

        <if_stmt pos:start="79:9" pos:end="91:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:34">(<expr pos:start="79:13" pos:end="79:33"><name pos:start="79:13" pos:end="79:16">code</name> <operator pos:start="79:18" pos:end="79:19">==</operator> <name pos:start="79:21" pos:end="79:33">BUS_MCEERR_AO</name></expr>)</condition> <block pos:start="79:36" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:21">

            <return pos:start="81:13" pos:end="81:21">return <expr pos:start="81:20" pos:end="81:20"><literal type="number" pos:start="81:20" pos:end="81:20">0</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="83:11" pos:end="87:9">else if <condition pos:start="83:19" pos:end="83:41">(<expr pos:start="83:20" pos:end="83:40"><name pos:start="83:20" pos:end="83:23">code</name> <operator pos:start="83:25" pos:end="83:26">==</operator> <name pos:start="83:28" pos:end="83:40">BUS_MCEERR_AR</name></expr>)</condition> <block pos:start="83:43" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:36">

            <expr_stmt pos:start="85:13" pos:end="85:36"><expr pos:start="85:13" pos:end="85:35"><call pos:start="85:13" pos:end="85:35"><name pos:start="85:13" pos:end="85:33">hardware_memory_error</name><argument_list pos:start="85:34" pos:end="85:35">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="91:9">else <block pos:start="87:16" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:21">

            <return pos:start="89:13" pos:end="89:21">return <expr pos:start="89:20" pos:end="89:20"><literal type="number" pos:start="89:20" pos:end="89:20">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
