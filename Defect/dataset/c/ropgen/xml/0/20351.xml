<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20351.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">decode_packet</name><parameter_list pos:start="1:25" pos:end="1:52">(<parameter pos:start="1:26" pos:end="1:39"><decl pos:start="1:26" pos:end="1:39"><type pos:start="1:26" pos:end="1:39"><name pos:start="1:26" pos:end="1:28">int</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:39">got_frame</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:51"><decl pos:start="1:42" pos:end="1:51"><type pos:start="1:42" pos:end="1:51"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:51">cached</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:19">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">decoded</name> <init pos:start="7:17" pos:end="7:26">= <expr pos:start="7:19" pos:end="7:26"><name pos:start="7:19" pos:end="7:26"><name pos:start="7:19" pos:end="7:21">pkt</name><operator pos:start="7:22" pos:end="7:22">.</operator><name pos:start="7:23" pos:end="7:26">size</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:19"><expr pos:start="11:5" pos:end="11:18"><operator pos:start="11:5" pos:end="11:5">*</operator><name pos:start="11:6" pos:end="11:14">got_frame</name> <operator pos:start="11:16" pos:end="11:16">=</operator> <literal type="number" pos:start="11:18" pos:end="11:18">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="149:5"><if pos:start="15:5" pos:end="89:5">if <condition pos:start="15:8" pos:end="15:45">(<expr pos:start="15:9" pos:end="15:44"><name pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:11">pkt</name><operator pos:start="15:12" pos:end="15:12">.</operator><name pos:start="15:13" pos:end="15:24">stream_index</name></name> <operator pos:start="15:26" pos:end="15:27">==</operator> <name pos:start="15:29" pos:end="15:44">video_stream_idx</name></expr>)</condition> <block pos:start="15:47" pos:end="89:5">{<block_content pos:start="19:9" pos:end="87:9">

        <comment type="block" pos:start="17:9" pos:end="17:32">/* decode video frame */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:75"><expr pos:start="19:9" pos:end="19:74"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:74"><name pos:start="19:15" pos:end="19:35">avcodec_decode_video2</name><argument_list pos:start="19:36" pos:end="19:74">(<argument pos:start="19:37" pos:end="19:49"><expr pos:start="19:37" pos:end="19:49"><name pos:start="19:37" pos:end="19:49">video_dec_ctx</name></expr></argument>, <argument pos:start="19:52" pos:end="19:56"><expr pos:start="19:52" pos:end="19:56"><name pos:start="19:52" pos:end="19:56">frame</name></expr></argument>, <argument pos:start="19:59" pos:end="19:67"><expr pos:start="19:59" pos:end="19:67"><name pos:start="19:59" pos:end="19:67">got_frame</name></expr></argument>, <argument pos:start="19:70" pos:end="19:73"><expr pos:start="19:70" pos:end="19:73"><operator pos:start="19:70" pos:end="19:70">&amp;</operator><name pos:start="19:71" pos:end="19:73">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:20">(<expr pos:start="21:13" pos:end="21:19"><name pos:start="21:13" pos:end="21:15">ret</name> <operator pos:start="21:17" pos:end="21:17">&lt;</operator> <literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>)</condition> <block pos:start="21:22" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:23">

            <expr_stmt pos:start="23:13" pos:end="23:82"><expr pos:start="23:13" pos:end="23:81"><call pos:start="23:13" pos:end="23:81"><name pos:start="23:13" pos:end="23:19">fprintf</name><argument_list pos:start="23:20" pos:end="23:81">(<argument pos:start="23:21" pos:end="23:26"><expr pos:start="23:21" pos:end="23:26"><name pos:start="23:21" pos:end="23:26">stderr</name></expr></argument>, <argument pos:start="23:29" pos:end="23:63"><expr pos:start="23:29" pos:end="23:63"><literal type="string" pos:start="23:29" pos:end="23:63">"Error decoding video frame (%s)\n"</literal></expr></argument>, <argument pos:start="23:66" pos:end="23:80"><expr pos:start="23:66" pos:end="23:80"><call pos:start="23:66" pos:end="23:80"><name pos:start="23:66" pos:end="23:75">av_err2str</name><argument_list pos:start="23:76" pos:end="23:80">(<argument pos:start="23:77" pos:end="23:79"><expr pos:start="23:77" pos:end="23:79"><name pos:start="23:77" pos:end="23:79">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="25:13" pos:end="25:23">return <expr pos:start="25:20" pos:end="25:22"><name pos:start="25:20" pos:end="25:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="55:9"><if pos:start="29:9" pos:end="55:9">if <condition pos:start="29:12" pos:end="31:46">(<expr pos:start="29:13" pos:end="31:45"><name pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:25">video_dec_ctx</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:32">width</name></name> <operator pos:start="29:34" pos:end="29:35">!=</operator> <name pos:start="29:37" pos:end="29:41">width</name> <operator pos:start="29:43" pos:end="29:44">||</operator> <name pos:start="29:46" pos:end="29:66"><name pos:start="29:46" pos:end="29:58">video_dec_ctx</name><operator pos:start="29:59" pos:end="29:60">-&gt;</operator><name pos:start="29:61" pos:end="29:66">height</name></name> <operator pos:start="29:68" pos:end="29:69">!=</operator> <name pos:start="29:71" pos:end="29:76">height</name> <operator pos:start="29:78" pos:end="29:79">||</operator>

            <name pos:start="31:13" pos:end="31:34"><name pos:start="31:13" pos:end="31:25">video_dec_ctx</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:34">pix_fmt</name></name> <operator pos:start="31:36" pos:end="31:37">!=</operator> <name pos:start="31:39" pos:end="31:45">pix_fmt</name></expr>)</condition> <block pos:start="31:48" pos:end="55:9">{<block_content pos:start="37:13" pos:end="53:22">

            <comment type="block" pos:start="33:13" pos:end="35:73">/* To handle this change, one could call av_image_alloc again and

             * decode the following frames into another rawvideo file. */</comment>

            <expr_stmt pos:start="37:13" pos:end="51:65"><expr pos:start="37:13" pos:end="51:64"><call pos:start="37:13" pos:end="51:64"><name pos:start="37:13" pos:end="37:19">fprintf</name><argument_list pos:start="37:20" pos:end="51:64">(<argument pos:start="37:21" pos:end="37:26"><expr pos:start="37:21" pos:end="37:26"><name pos:start="37:21" pos:end="37:26">stderr</name></expr></argument>, <argument pos:start="37:29" pos:end="45:65"><expr pos:start="37:29" pos:end="45:65"><literal type="string" pos:start="37:29" pos:end="37:79">"Error: Width, height and pixel format have to be "</literal>

                    <literal type="string" pos:start="39:21" pos:end="39:76">"constant in a rawvideo file, but the width, height or "</literal>

                    <literal type="string" pos:start="41:21" pos:end="41:64">"pixel format of the input video changed:\n"</literal>

                    <literal type="string" pos:start="43:21" pos:end="43:65">"old: width = %d, height = %d, format = %s\n"</literal>

                    <literal type="string" pos:start="45:21" pos:end="45:65">"new: width = %d, height = %d, format = %s\n"</literal></expr></argument>,

                    <argument pos:start="47:21" pos:end="47:25"><expr pos:start="47:21" pos:end="47:25"><name pos:start="47:21" pos:end="47:25">width</name></expr></argument>, <argument pos:start="47:28" pos:end="47:33"><expr pos:start="47:28" pos:end="47:33"><name pos:start="47:28" pos:end="47:33">height</name></expr></argument>, <argument pos:start="47:36" pos:end="47:63"><expr pos:start="47:36" pos:end="47:63"><call pos:start="47:36" pos:end="47:63"><name pos:start="47:36" pos:end="47:54">av_get_pix_fmt_name</name><argument_list pos:start="47:55" pos:end="47:63">(<argument pos:start="47:56" pos:end="47:62"><expr pos:start="47:56" pos:end="47:62"><name pos:start="47:56" pos:end="47:62">pix_fmt</name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="49:21" pos:end="49:40"><expr pos:start="49:21" pos:end="49:40"><name pos:start="49:21" pos:end="49:40"><name pos:start="49:21" pos:end="49:33">video_dec_ctx</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:40">width</name></name></expr></argument>, <argument pos:start="49:43" pos:end="49:63"><expr pos:start="49:43" pos:end="49:63"><name pos:start="49:43" pos:end="49:63"><name pos:start="49:43" pos:end="49:55">video_dec_ctx</name><operator pos:start="49:56" pos:end="49:57">-&gt;</operator><name pos:start="49:58" pos:end="49:63">height</name></name></expr></argument>,

                    <argument pos:start="51:21" pos:end="51:63"><expr pos:start="51:21" pos:end="51:63"><call pos:start="51:21" pos:end="51:63"><name pos:start="51:21" pos:end="51:39">av_get_pix_fmt_name</name><argument_list pos:start="51:40" pos:end="51:63">(<argument pos:start="51:41" pos:end="51:62"><expr pos:start="51:41" pos:end="51:62"><name pos:start="51:41" pos:end="51:62"><name pos:start="51:41" pos:end="51:53">video_dec_ctx</name><operator pos:start="51:54" pos:end="51:55">-&gt;</operator><name pos:start="51:56" pos:end="51:62">pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:22">return <expr pos:start="53:20" pos:end="53:21"><operator pos:start="53:20" pos:end="53:20">-</operator><literal type="number" pos:start="53:21" pos:end="53:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="59:9" pos:end="87:9"><if pos:start="59:9" pos:end="87:9">if <condition pos:start="59:12" pos:end="59:23">(<expr pos:start="59:13" pos:end="59:22"><operator pos:start="59:13" pos:end="59:13">*</operator><name pos:start="59:14" pos:end="59:22">got_frame</name></expr>)</condition> <block pos:start="59:25" pos:end="87:9">{<block_content pos:start="61:13" pos:end="85:76">

            <expr_stmt pos:start="61:13" pos:end="67:73"><expr pos:start="61:13" pos:end="67:72"><call pos:start="61:13" pos:end="67:72"><name pos:start="61:13" pos:end="61:18">printf</name><argument_list pos:start="61:19" pos:end="67:72">(<argument pos:start="61:20" pos:end="61:59"><expr pos:start="61:20" pos:end="61:59"><literal type="string" pos:start="61:20" pos:end="61:59">"video_frame%s n:%d coded_n:%d pts:%s\n"</literal></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:43"><expr pos:start="63:20" pos:end="63:43"><ternary pos:start="63:20" pos:end="63:43"><condition pos:start="63:20" pos:end="63:27"><expr pos:start="63:20" pos:end="63:25"><name pos:start="63:20" pos:end="63:25">cached</name></expr> ?</condition><then pos:start="63:29" pos:end="63:38"> <expr pos:start="63:29" pos:end="63:38"><literal type="string" pos:start="63:29" pos:end="63:38">"(cached)"</literal></expr> </then><else pos:start="63:40" pos:end="63:43">: <expr pos:start="63:42" pos:end="63:43"><literal type="string" pos:start="63:42" pos:end="63:43">""</literal></expr></else></ternary></expr></argument>,

                   <argument pos:start="65:20" pos:end="65:38"><expr pos:start="65:20" pos:end="65:38"><name pos:start="65:20" pos:end="65:36">video_frame_count</name><operator pos:start="65:37" pos:end="65:38">++</operator></expr></argument>, <argument pos:start="65:41" pos:end="65:67"><expr pos:start="65:41" pos:end="65:67"><name pos:start="65:41" pos:end="65:67"><name pos:start="65:41" pos:end="65:45">frame</name><operator pos:start="65:46" pos:end="65:47">-&gt;</operator><name pos:start="65:48" pos:end="65:67">coded_picture_number</name></name></expr></argument>,

                   <argument pos:start="67:20" pos:end="67:71"><expr pos:start="67:20" pos:end="67:71"><call pos:start="67:20" pos:end="67:71"><name pos:start="67:20" pos:end="67:32">av_ts2timestr</name><argument_list pos:start="67:33" pos:end="67:71">(<argument pos:start="67:34" pos:end="67:43"><expr pos:start="67:34" pos:end="67:43"><name pos:start="67:34" pos:end="67:43"><name pos:start="67:34" pos:end="67:38">frame</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:43">pts</name></name></expr></argument>, <argument pos:start="67:46" pos:end="67:70"><expr pos:start="67:46" pos:end="67:70"><operator pos:start="67:46" pos:end="67:46">&amp;</operator><name pos:start="67:47" pos:end="67:70"><name pos:start="67:47" pos:end="67:59">video_dec_ctx</name><operator pos:start="67:60" pos:end="67:61">-&gt;</operator><name pos:start="67:62" pos:end="67:70">time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="71:13" pos:end="73:74">/* copy decoded frame to destination buffer:

             * this is required since rawvideo expects non aligned data */</comment>

            <expr_stmt pos:start="75:13" pos:end="79:50"><expr pos:start="75:13" pos:end="79:49"><call pos:start="75:13" pos:end="79:49"><name pos:start="75:13" pos:end="75:25">av_image_copy</name><argument_list pos:start="75:26" pos:end="79:49">(<argument pos:start="75:27" pos:end="75:40"><expr pos:start="75:27" pos:end="75:40"><name pos:start="75:27" pos:end="75:40">video_dst_data</name></expr></argument>, <argument pos:start="75:43" pos:end="75:60"><expr pos:start="75:43" pos:end="75:60"><name pos:start="75:43" pos:end="75:60">video_dst_linesize</name></expr></argument>,

                          <argument pos:start="77:27" pos:end="77:57"><expr pos:start="77:27" pos:end="77:57"><operator pos:start="77:27" pos:end="77:27">(</operator><specifier pos:start="77:28" pos:end="77:32">const</specifier> <name pos:start="77:34" pos:end="77:40">uint8_t</name> <operator pos:start="77:42" pos:end="77:42">*</operator><operator pos:start="77:43" pos:end="77:43">*</operator><operator pos:start="77:44" pos:end="77:44">)</operator><operator pos:start="77:45" pos:end="77:45">(</operator><name pos:start="77:46" pos:end="77:56"><name pos:start="77:46" pos:end="77:50">frame</name><operator pos:start="77:51" pos:end="77:52">-&gt;</operator><name pos:start="77:53" pos:end="77:56">data</name></name><operator pos:start="77:57" pos:end="77:57">)</operator></expr></argument>, <argument pos:start="77:60" pos:end="77:74"><expr pos:start="77:60" pos:end="77:74"><name pos:start="77:60" pos:end="77:74"><name pos:start="77:60" pos:end="77:64">frame</name><operator pos:start="77:65" pos:end="77:66">-&gt;</operator><name pos:start="77:67" pos:end="77:74">linesize</name></name></expr></argument>,

                          <argument pos:start="79:27" pos:end="79:33"><expr pos:start="79:27" pos:end="79:33"><name pos:start="79:27" pos:end="79:33">pix_fmt</name></expr></argument>, <argument pos:start="79:36" pos:end="79:40"><expr pos:start="79:36" pos:end="79:40"><name pos:start="79:36" pos:end="79:40">width</name></expr></argument>, <argument pos:start="79:43" pos:end="79:48"><expr pos:start="79:43" pos:end="79:48"><name pos:start="79:43" pos:end="79:48">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="83:13" pos:end="83:40">/* write to rawvideo file */</comment>

            <expr_stmt pos:start="85:13" pos:end="85:76"><expr pos:start="85:13" pos:end="85:75"><call pos:start="85:13" pos:end="85:75"><name pos:start="85:13" pos:end="85:18">fwrite</name><argument_list pos:start="85:19" pos:end="85:75">(<argument pos:start="85:20" pos:end="85:36"><expr pos:start="85:20" pos:end="85:36"><name pos:start="85:20" pos:end="85:36"><name pos:start="85:20" pos:end="85:33">video_dst_data</name><index pos:start="85:34" pos:end="85:36">[<expr pos:start="85:35" pos:end="85:35"><literal type="number" pos:start="85:35" pos:end="85:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="85:39" pos:end="85:39"><expr pos:start="85:39" pos:end="85:39"><literal type="number" pos:start="85:39" pos:end="85:39">1</literal></expr></argument>, <argument pos:start="85:42" pos:end="85:58"><expr pos:start="85:42" pos:end="85:58"><name pos:start="85:42" pos:end="85:58">video_dst_bufsize</name></expr></argument>, <argument pos:start="85:61" pos:end="85:74"><expr pos:start="85:61" pos:end="85:74"><name pos:start="85:61" pos:end="85:74">video_dst_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="89:7" pos:end="149:5">else if <condition pos:start="89:15" pos:end="89:52">(<expr pos:start="89:16" pos:end="89:51"><name pos:start="89:16" pos:end="89:31"><name pos:start="89:16" pos:end="89:18">pkt</name><operator pos:start="89:19" pos:end="89:19">.</operator><name pos:start="89:20" pos:end="89:31">stream_index</name></name> <operator pos:start="89:33" pos:end="89:34">==</operator> <name pos:start="89:36" pos:end="89:51">audio_stream_idx</name></expr>)</condition> <block pos:start="89:54" pos:end="149:5">{<block_content pos:start="93:9" pos:end="147:9">

        <comment type="block" pos:start="91:9" pos:end="91:32">/* decode audio frame */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:75"><expr pos:start="93:9" pos:end="93:74"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:74"><name pos:start="93:15" pos:end="93:35">avcodec_decode_audio4</name><argument_list pos:start="93:36" pos:end="93:74">(<argument pos:start="93:37" pos:end="93:49"><expr pos:start="93:37" pos:end="93:49"><name pos:start="93:37" pos:end="93:49">audio_dec_ctx</name></expr></argument>, <argument pos:start="93:52" pos:end="93:56"><expr pos:start="93:52" pos:end="93:56"><name pos:start="93:52" pos:end="93:56">frame</name></expr></argument>, <argument pos:start="93:59" pos:end="93:67"><expr pos:start="93:59" pos:end="93:67"><name pos:start="93:59" pos:end="93:67">got_frame</name></expr></argument>, <argument pos:start="93:70" pos:end="93:73"><expr pos:start="93:70" pos:end="93:73"><operator pos:start="93:70" pos:end="93:70">&amp;</operator><name pos:start="93:71" pos:end="93:73">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="101:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:20">(<expr pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:15">ret</name> <operator pos:start="95:17" pos:end="95:17">&lt;</operator> <literal type="number" pos:start="95:19" pos:end="95:19">0</literal></expr>)</condition> <block pos:start="95:22" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:23">

            <expr_stmt pos:start="97:13" pos:end="97:82"><expr pos:start="97:13" pos:end="97:81"><call pos:start="97:13" pos:end="97:81"><name pos:start="97:13" pos:end="97:19">fprintf</name><argument_list pos:start="97:20" pos:end="97:81">(<argument pos:start="97:21" pos:end="97:26"><expr pos:start="97:21" pos:end="97:26"><name pos:start="97:21" pos:end="97:26">stderr</name></expr></argument>, <argument pos:start="97:29" pos:end="97:63"><expr pos:start="97:29" pos:end="97:63"><literal type="string" pos:start="97:29" pos:end="97:63">"Error decoding audio frame (%s)\n"</literal></expr></argument>, <argument pos:start="97:66" pos:end="97:80"><expr pos:start="97:66" pos:end="97:80"><call pos:start="97:66" pos:end="97:80"><name pos:start="97:66" pos:end="97:75">av_err2str</name><argument_list pos:start="97:76" pos:end="97:80">(<argument pos:start="97:77" pos:end="97:79"><expr pos:start="97:77" pos:end="97:79"><name pos:start="97:77" pos:end="97:79">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="99:13" pos:end="99:23">return <expr pos:start="99:20" pos:end="99:22"><name pos:start="99:20" pos:end="99:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="103:9" pos:end="109:61">/* Some audio decoders decode only part of the packet, and have to be

         * called again with the remainder of the packet data.

         * Sample: fate-suite/lossless-audio/luckynight-partial.shn

         * Also, some decoders might over-read the packet. */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:39"><expr pos:start="111:9" pos:end="111:38"><name pos:start="111:9" pos:end="111:15">decoded</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="111:38"><name pos:start="111:19" pos:end="111:23">FFMIN</name><argument_list pos:start="111:24" pos:end="111:38">(<argument pos:start="111:25" pos:end="111:27"><expr pos:start="111:25" pos:end="111:27"><name pos:start="111:25" pos:end="111:27">ret</name></expr></argument>, <argument pos:start="111:30" pos:end="111:37"><expr pos:start="111:30" pos:end="111:37"><name pos:start="111:30" pos:end="111:37"><name pos:start="111:30" pos:end="111:32">pkt</name><operator pos:start="111:33" pos:end="111:33">.</operator><name pos:start="111:34" pos:end="111:37">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="115:9" pos:end="147:9"><if pos:start="115:9" pos:end="147:9">if <condition pos:start="115:12" pos:end="115:23">(<expr pos:start="115:13" pos:end="115:22"><operator pos:start="115:13" pos:end="115:13">*</operator><name pos:start="115:14" pos:end="115:22">got_frame</name></expr>)</condition> <block pos:start="115:25" pos:end="147:9">{<block_content pos:start="117:13" pos:end="145:82">

            <decl_stmt pos:start="117:13" pos:end="117:98"><decl pos:start="117:13" pos:end="117:97"><type pos:start="117:13" pos:end="117:18"><name pos:start="117:13" pos:end="117:18">size_t</name></type> <name pos:start="117:20" pos:end="117:36">unpadded_linesize</name> <init pos:start="117:38" pos:end="117:97">= <expr pos:start="117:40" pos:end="117:97"><name pos:start="117:40" pos:end="117:56"><name pos:start="117:40" pos:end="117:44">frame</name><operator pos:start="117:45" pos:end="117:46">-&gt;</operator><name pos:start="117:47" pos:end="117:56">nb_samples</name></name> <operator pos:start="117:58" pos:end="117:58">*</operator> <call pos:start="117:60" pos:end="117:97"><name pos:start="117:60" pos:end="117:82">av_get_bytes_per_sample</name><argument_list pos:start="117:83" pos:end="117:97">(<argument pos:start="117:84" pos:end="117:96"><expr pos:start="117:84" pos:end="117:96"><name pos:start="117:84" pos:end="117:96"><name pos:start="117:84" pos:end="117:88">frame</name><operator pos:start="117:89" pos:end="117:90">-&gt;</operator><name pos:start="117:91" pos:end="117:96">format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="119:13" pos:end="125:73"><expr pos:start="119:13" pos:end="125:72"><call pos:start="119:13" pos:end="125:72"><name pos:start="119:13" pos:end="119:18">printf</name><argument_list pos:start="119:19" pos:end="125:72">(<argument pos:start="119:20" pos:end="119:62"><expr pos:start="119:20" pos:end="119:62"><literal type="string" pos:start="119:20" pos:end="119:62">"audio_frame%s n:%d nb_samples:%d pts:%s\n"</literal></expr></argument>,

                   <argument pos:start="121:20" pos:end="121:43"><expr pos:start="121:20" pos:end="121:43"><ternary pos:start="121:20" pos:end="121:43"><condition pos:start="121:20" pos:end="121:27"><expr pos:start="121:20" pos:end="121:25"><name pos:start="121:20" pos:end="121:25">cached</name></expr> ?</condition><then pos:start="121:29" pos:end="121:38"> <expr pos:start="121:29" pos:end="121:38"><literal type="string" pos:start="121:29" pos:end="121:38">"(cached)"</literal></expr> </then><else pos:start="121:40" pos:end="121:43">: <expr pos:start="121:42" pos:end="121:43"><literal type="string" pos:start="121:42" pos:end="121:43">""</literal></expr></else></ternary></expr></argument>,

                   <argument pos:start="123:20" pos:end="123:38"><expr pos:start="123:20" pos:end="123:38"><name pos:start="123:20" pos:end="123:36">audio_frame_count</name><operator pos:start="123:37" pos:end="123:38">++</operator></expr></argument>, <argument pos:start="123:41" pos:end="123:57"><expr pos:start="123:41" pos:end="123:57"><name pos:start="123:41" pos:end="123:57"><name pos:start="123:41" pos:end="123:45">frame</name><operator pos:start="123:46" pos:end="123:47">-&gt;</operator><name pos:start="123:48" pos:end="123:57">nb_samples</name></name></expr></argument>,

                   <argument pos:start="125:20" pos:end="125:71"><expr pos:start="125:20" pos:end="125:71"><call pos:start="125:20" pos:end="125:71"><name pos:start="125:20" pos:end="125:32">av_ts2timestr</name><argument_list pos:start="125:33" pos:end="125:71">(<argument pos:start="125:34" pos:end="125:43"><expr pos:start="125:34" pos:end="125:43"><name pos:start="125:34" pos:end="125:43"><name pos:start="125:34" pos:end="125:38">frame</name><operator pos:start="125:39" pos:end="125:40">-&gt;</operator><name pos:start="125:41" pos:end="125:43">pts</name></name></expr></argument>, <argument pos:start="125:46" pos:end="125:70"><expr pos:start="125:46" pos:end="125:70"><operator pos:start="125:46" pos:end="125:46">&amp;</operator><name pos:start="125:47" pos:end="125:70"><name pos:start="125:47" pos:end="125:59">audio_dec_ctx</name><operator pos:start="125:60" pos:end="125:61">-&gt;</operator><name pos:start="125:62" pos:end="125:70">time_base</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="129:13" pos:end="143:33">/* Write the raw audio data samples of the first plane. This works

             * fine for packed formats (e.g. AV_SAMPLE_FMT_S16). However,

             * most audio decoders output planar audio, which uses a separate

             * plane of audio samples for each channel (e.g. AV_SAMPLE_FMT_S16P).

             * In other words, this code will write only the first audio channel

             * in these cases.

             * You should use libswresample or libavfilter to convert the frame

             * to packed data. */</comment>

            <expr_stmt pos:start="145:13" pos:end="145:82"><expr pos:start="145:13" pos:end="145:81"><call pos:start="145:13" pos:end="145:81"><name pos:start="145:13" pos:end="145:18">fwrite</name><argument_list pos:start="145:19" pos:end="145:81">(<argument pos:start="145:20" pos:end="145:42"><expr pos:start="145:20" pos:end="145:42"><name pos:start="145:20" pos:end="145:42"><name pos:start="145:20" pos:end="145:24">frame</name><operator pos:start="145:25" pos:end="145:26">-&gt;</operator><name pos:start="145:27" pos:end="145:39">extended_data</name><index pos:start="145:40" pos:end="145:42">[<expr pos:start="145:41" pos:end="145:41"><literal type="number" pos:start="145:41" pos:end="145:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="145:45" pos:end="145:45"><expr pos:start="145:45" pos:end="145:45"><literal type="number" pos:start="145:45" pos:end="145:45">1</literal></expr></argument>, <argument pos:start="145:48" pos:end="145:64"><expr pos:start="145:48" pos:end="145:64"><name pos:start="145:48" pos:end="145:64">unpadded_linesize</name></expr></argument>, <argument pos:start="145:67" pos:end="145:80"><expr pos:start="145:67" pos:end="145:80"><name pos:start="145:67" pos:end="145:80">audio_dst_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="153:5" pos:end="155:57">/* If we use the new API with reference counting, we own the data and need

     * to de-reference it when we don't use it anymore */</comment>

    <if_stmt pos:start="157:5" pos:end="159:30"><if pos:start="157:5" pos:end="159:30">if <condition pos:start="157:8" pos:end="157:61">(<expr pos:start="157:9" pos:end="157:60"><operator pos:start="157:9" pos:end="157:9">*</operator><name pos:start="157:10" pos:end="157:18">got_frame</name> <operator pos:start="157:20" pos:end="157:21">&amp;&amp;</operator> <name pos:start="157:23" pos:end="157:30">api_mode</name> <operator pos:start="157:32" pos:end="157:33">==</operator> <name pos:start="157:35" pos:end="157:60">API_MODE_NEW_API_REF_COUNT</name></expr>)</condition><block type="pseudo" pos:start="159:9" pos:end="159:30"><block_content pos:start="159:9" pos:end="159:30">

        <expr_stmt pos:start="159:9" pos:end="159:30"><expr pos:start="159:9" pos:end="159:29"><call pos:start="159:9" pos:end="159:29"><name pos:start="159:9" pos:end="159:22">av_frame_unref</name><argument_list pos:start="159:23" pos:end="159:29">(<argument pos:start="159:24" pos:end="159:28"><expr pos:start="159:24" pos:end="159:28"><name pos:start="159:24" pos:end="159:28">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="163:5" pos:end="163:19">return <expr pos:start="163:12" pos:end="163:18"><name pos:start="163:12" pos:end="163:18">decoded</name></expr>;</return>

</block_content>}</block></function>
</unit>
