<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25308.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">av_opt_is_set_to_default</name><parameter_list pos:start="1:29" pos:end="1:58">(<parameter pos:start="1:30" pos:end="1:38"><decl pos:start="1:30" pos:end="1:38"><type pos:start="1:30" pos:end="1:38"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">obj</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:54">AVOption</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">o</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="179:1">{<block_content pos:start="5:5" pos:end="177:32">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:15">i64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">double</name></type> <name pos:start="7:12" pos:end="7:12">d</name></decl>, <decl pos:start="7:15" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:10"/><name pos:start="7:15" pos:end="7:16">d2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:9">float</name></type> <name pos:start="9:11" pos:end="9:11">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">AVRational</name></type> <name pos:start="11:16" pos:end="11:16">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:14">w</name></decl>, <decl pos:start="13:17" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:17" pos:end="13:17">h</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">str</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:13">dst</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:31"><if pos:start="21:5" pos:end="23:31">if <condition pos:start="21:8" pos:end="21:19">(<expr pos:start="21:9" pos:end="21:18"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:10">o</name> <operator pos:start="21:12" pos:end="21:13">||</operator> <operator pos:start="21:15" pos:end="21:15">!</operator><name pos:start="21:16" pos:end="21:18">obj</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:31"><block_content pos:start="23:9" pos:end="23:31">

        <return pos:start="23:9" pos:end="23:31">return <expr pos:start="23:16" pos:end="23:30"><call pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">AVERROR</name><argument_list pos:start="23:23" pos:end="23:30">(<argument pos:start="23:24" pos:end="23:29"><expr pos:start="23:24" pos:end="23:29"><name pos:start="23:24" pos:end="23:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:7">dst</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <operator pos:start="27:11" pos:end="27:11">(</operator><operator pos:start="27:12" pos:end="27:12">(</operator><name pos:start="27:13" pos:end="27:19">uint8_t</name><operator pos:start="27:20" pos:end="27:20">*</operator><operator pos:start="27:21" pos:end="27:21">)</operator><name pos:start="27:22" pos:end="27:24">obj</name><operator pos:start="27:25" pos:end="27:25">)</operator> <operator pos:start="27:27" pos:end="27:27">+</operator> <name pos:start="27:29" pos:end="27:37"><name pos:start="27:29" pos:end="27:29">o</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:37">offset</name></name></expr>;</expr_stmt>



    <switch pos:start="31:5" pos:end="175:5">switch <condition pos:start="31:12" pos:end="31:20">(<expr pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:13">o</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:19">type</name></name></expr>)</condition> <block pos:start="31:22" pos:end="175:5">{<block_content pos:start="33:5" pos:end="173:14">

    <case pos:start="33:5" pos:end="33:27">case <expr pos:start="33:10" pos:end="33:26"><name pos:start="33:10" pos:end="33:26">AV_OPT_TYPE_CONST</name></expr>:</case>

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">1</literal></expr>;</return>

    <case pos:start="37:5" pos:end="37:27">case <expr pos:start="37:10" pos:end="37:26"><name pos:start="37:10" pos:end="37:26">AV_OPT_TYPE_FLAGS</name></expr>:</case>

    <case pos:start="39:5" pos:end="39:31">case <expr pos:start="39:10" pos:end="39:30"><name pos:start="39:10" pos:end="39:30">AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

    <case pos:start="41:5" pos:end="41:32">case <expr pos:start="41:10" pos:end="41:31"><name pos:start="41:10" pos:end="41:31">AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

    <case pos:start="43:5" pos:end="43:25">case <expr pos:start="43:10" pos:end="43:24"><name pos:start="43:10" pos:end="43:24">AV_OPT_TYPE_INT</name></expr>:</case>

    <case pos:start="45:5" pos:end="45:36">case <expr pos:start="45:10" pos:end="45:35"><name pos:start="45:10" pos:end="45:35">AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>:</case>

    <case pos:start="47:5" pos:end="47:30">case <expr pos:start="47:10" pos:end="47:29"><name pos:start="47:10" pos:end="47:29">AV_OPT_TYPE_DURATION</name></expr>:</case>

    <case pos:start="49:5" pos:end="49:27">case <expr pos:start="49:10" pos:end="49:26"><name pos:start="49:10" pos:end="49:26">AV_OPT_TYPE_INT64</name></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:46"><expr pos:start="51:9" pos:end="51:45"><call pos:start="51:9" pos:end="51:45"><name pos:start="51:9" pos:end="51:19">read_number</name><argument_list pos:start="51:20" pos:end="51:45">(<argument pos:start="51:21" pos:end="51:21"><expr pos:start="51:21" pos:end="51:21"><name pos:start="51:21" pos:end="51:21">o</name></expr></argument>, <argument pos:start="51:24" pos:end="51:26"><expr pos:start="51:24" pos:end="51:26"><name pos:start="51:24" pos:end="51:26">dst</name></expr></argument>, <argument pos:start="51:29" pos:end="51:32"><expr pos:start="51:29" pos:end="51:32"><name pos:start="51:29" pos:end="51:32">NULL</name></expr></argument>, <argument pos:start="51:35" pos:end="51:38"><expr pos:start="51:35" pos:end="51:38"><name pos:start="51:35" pos:end="51:38">NULL</name></expr></argument>, <argument pos:start="51:41" pos:end="51:44"><expr pos:start="51:41" pos:end="51:44"><operator pos:start="51:41" pos:end="51:41">&amp;</operator><name pos:start="51:42" pos:end="51:44">i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:41">return <expr pos:start="53:16" pos:end="53:40"><name pos:start="53:16" pos:end="53:33"><name pos:start="53:16" pos:end="53:16">o</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:29">default_val</name><operator pos:start="53:30" pos:end="53:30">.</operator><name pos:start="53:31" pos:end="53:33">i64</name></name> <operator pos:start="53:35" pos:end="53:36">==</operator> <name pos:start="53:38" pos:end="53:40">i64</name></expr>;</return>

    <case pos:start="55:5" pos:end="55:28">case <expr pos:start="55:10" pos:end="55:27"><name pos:start="55:10" pos:end="55:27">AV_OPT_TYPE_STRING</name></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:28"><expr pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:11">str</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <operator pos:start="57:15" pos:end="57:15">*</operator><operator pos:start="57:16" pos:end="57:16">(</operator><name pos:start="57:17" pos:end="57:20">char</name> <operator pos:start="57:22" pos:end="57:22">*</operator><operator pos:start="57:23" pos:end="57:23">*</operator><operator pos:start="57:24" pos:end="57:24">)</operator><name pos:start="57:25" pos:end="57:27">dst</name></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="61:21"><if pos:start="59:9" pos:end="61:21">if <condition pos:start="59:12" pos:end="59:38">(<expr pos:start="59:13" pos:end="59:37"><name pos:start="59:13" pos:end="59:15">str</name> <operator pos:start="59:17" pos:end="59:18">==</operator> <name pos:start="59:20" pos:end="59:37"><name pos:start="59:20" pos:end="59:20">o</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:33">default_val</name><operator pos:start="59:34" pos:end="59:34">.</operator><name pos:start="59:35" pos:end="59:37">str</name></name></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:21"><block_content pos:start="61:13" pos:end="61:21"> <comment type="line" pos:start="59:40" pos:end="59:48">//2 NULLs</comment>

            <return pos:start="61:13" pos:end="61:21">return <expr pos:start="61:20" pos:end="61:20"><literal type="number" pos:start="61:20" pos:end="61:20">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="65:21"><if pos:start="63:9" pos:end="65:21">if <condition pos:start="63:12" pos:end="63:40">(<expr pos:start="63:13" pos:end="63:39"><operator pos:start="63:13" pos:end="63:13">!</operator><name pos:start="63:14" pos:end="63:16">str</name> <operator pos:start="63:18" pos:end="63:19">||</operator> <operator pos:start="63:21" pos:end="63:21">!</operator><name pos:start="63:22" pos:end="63:39"><name pos:start="63:22" pos:end="63:22">o</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:35">default_val</name><operator pos:start="63:36" pos:end="63:36">.</operator><name pos:start="63:37" pos:end="63:39">str</name></name></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:21"><block_content pos:start="65:13" pos:end="65:21"> <comment type="line" pos:start="63:42" pos:end="63:49">//1 NULL</comment>

            <return pos:start="65:13" pos:end="65:21">return <expr pos:start="65:20" pos:end="65:20"><literal type="number" pos:start="65:20" pos:end="65:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <return pos:start="67:9" pos:end="67:48">return <expr pos:start="67:16" pos:end="67:47"><operator pos:start="67:16" pos:end="67:16">!</operator><call pos:start="67:17" pos:end="67:47"><name pos:start="67:17" pos:end="67:22">strcmp</name><argument_list pos:start="67:23" pos:end="67:47">(<argument pos:start="67:24" pos:end="67:26"><expr pos:start="67:24" pos:end="67:26"><name pos:start="67:24" pos:end="67:26">str</name></expr></argument>, <argument pos:start="67:29" pos:end="67:46"><expr pos:start="67:29" pos:end="67:46"><name pos:start="67:29" pos:end="67:46"><name pos:start="67:29" pos:end="67:29">o</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:42">default_val</name><operator pos:start="67:43" pos:end="67:43">.</operator><name pos:start="67:44" pos:end="67:46">str</name></name></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="69:5" pos:end="69:28">case <expr pos:start="69:10" pos:end="69:27"><name pos:start="69:10" pos:end="69:27">AV_OPT_TYPE_DOUBLE</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:44"><expr pos:start="71:9" pos:end="71:43"><call pos:start="71:9" pos:end="71:43"><name pos:start="71:9" pos:end="71:19">read_number</name><argument_list pos:start="71:20" pos:end="71:43">(<argument pos:start="71:21" pos:end="71:21"><expr pos:start="71:21" pos:end="71:21"><name pos:start="71:21" pos:end="71:21">o</name></expr></argument>, <argument pos:start="71:24" pos:end="71:26"><expr pos:start="71:24" pos:end="71:26"><name pos:start="71:24" pos:end="71:26">dst</name></expr></argument>, <argument pos:start="71:29" pos:end="71:30"><expr pos:start="71:29" pos:end="71:30"><operator pos:start="71:29" pos:end="71:29">&amp;</operator><name pos:start="71:30" pos:end="71:30">d</name></expr></argument>, <argument pos:start="71:33" pos:end="71:36"><expr pos:start="71:33" pos:end="71:36"><name pos:start="71:33" pos:end="71:36">NULL</name></expr></argument>, <argument pos:start="71:39" pos:end="71:42"><expr pos:start="71:39" pos:end="71:42"><name pos:start="71:39" pos:end="71:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:39">return <expr pos:start="73:16" pos:end="73:38"><name pos:start="73:16" pos:end="73:33"><name pos:start="73:16" pos:end="73:16">o</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:29">default_val</name><operator pos:start="73:30" pos:end="73:30">.</operator><name pos:start="73:31" pos:end="73:33">dbl</name></name> <operator pos:start="73:35" pos:end="73:36">==</operator> <name pos:start="73:38" pos:end="73:38">d</name></expr>;</return>

    <case pos:start="75:5" pos:end="75:27">case <expr pos:start="75:10" pos:end="75:26"><name pos:start="75:10" pos:end="75:26">AV_OPT_TYPE_FLOAT</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:44"><expr pos:start="77:9" pos:end="77:43"><call pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:19">read_number</name><argument_list pos:start="77:20" pos:end="77:43">(<argument pos:start="77:21" pos:end="77:21"><expr pos:start="77:21" pos:end="77:21"><name pos:start="77:21" pos:end="77:21">o</name></expr></argument>, <argument pos:start="77:24" pos:end="77:26"><expr pos:start="77:24" pos:end="77:26"><name pos:start="77:24" pos:end="77:26">dst</name></expr></argument>, <argument pos:start="77:29" pos:end="77:30"><expr pos:start="77:29" pos:end="77:30"><operator pos:start="77:29" pos:end="77:29">&amp;</operator><name pos:start="77:30" pos:end="77:30">d</name></expr></argument>, <argument pos:start="77:33" pos:end="77:36"><expr pos:start="77:33" pos:end="77:36"><name pos:start="77:33" pos:end="77:36">NULL</name></expr></argument>, <argument pos:start="77:39" pos:end="77:42"><expr pos:start="77:39" pos:end="77:42"><name pos:start="77:39" pos:end="77:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:9">f</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <name pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:13">o</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:26">default_val</name><operator pos:start="79:27" pos:end="79:27">.</operator><name pos:start="79:28" pos:end="79:30">dbl</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:15"><expr pos:start="81:9" pos:end="81:14"><name pos:start="81:9" pos:end="81:10">d2</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:14">f</name></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:23">return <expr pos:start="83:16" pos:end="83:22"><name pos:start="83:16" pos:end="83:17">d2</name> <operator pos:start="83:19" pos:end="83:20">==</operator> <name pos:start="83:22" pos:end="83:22">d</name></expr>;</return>

    <case pos:start="85:5" pos:end="85:30">case <expr pos:start="85:10" pos:end="85:29"><name pos:start="85:10" pos:end="85:29">AV_OPT_TYPE_RATIONAL</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:48"><expr pos:start="87:9" pos:end="87:47"><name pos:start="87:9" pos:end="87:9">q</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="87:47"><name pos:start="87:13" pos:end="87:18">av_d2q</name><argument_list pos:start="87:19" pos:end="87:47">(<argument pos:start="87:20" pos:end="87:37"><expr pos:start="87:20" pos:end="87:37"><name pos:start="87:20" pos:end="87:37"><name pos:start="87:20" pos:end="87:20">o</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:33">default_val</name><operator pos:start="87:34" pos:end="87:34">.</operator><name pos:start="87:35" pos:end="87:37">dbl</name></name></expr></argument>, <argument pos:start="87:40" pos:end="87:46"><expr pos:start="87:40" pos:end="87:46"><name pos:start="87:40" pos:end="87:46">INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:47">return <expr pos:start="89:16" pos:end="89:46"><operator pos:start="89:16" pos:end="89:16">!</operator><call pos:start="89:17" pos:end="89:46"><name pos:start="89:17" pos:end="89:24">av_cmp_q</name><argument_list pos:start="89:25" pos:end="89:46">(<argument pos:start="89:26" pos:end="89:42"><expr pos:start="89:26" pos:end="89:42"><operator pos:start="89:26" pos:end="89:26">*</operator><operator pos:start="89:27" pos:end="89:27">(</operator><name pos:start="89:28" pos:end="89:37">AVRational</name><operator pos:start="89:38" pos:end="89:38">*</operator><operator pos:start="89:39" pos:end="89:39">)</operator><name pos:start="89:40" pos:end="89:42">dst</name></expr></argument>, <argument pos:start="89:45" pos:end="89:45"><expr pos:start="89:45" pos:end="89:45"><name pos:start="89:45" pos:end="89:45">q</name></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="91:5" pos:end="91:28">case <expr pos:start="91:10" pos:end="91:27"><name pos:start="91:10" pos:end="91:27">AV_OPT_TYPE_BINARY</name></expr>:</case> <block pos:start="91:30" pos:end="127:5">{<block_content pos:start="93:9" pos:end="125:19">

        <struct pos:start="93:9" pos:end="99:20">struct <block pos:start="93:16" pos:end="99:9">{

            <decl_stmt pos:start="95:13" pos:end="95:26"><decl pos:start="95:13" pos:end="95:25"><type pos:start="95:13" pos:end="95:21"><name pos:start="95:13" pos:end="95:19">uint8_t</name> <modifier pos:start="95:21" pos:end="95:21">*</modifier></type><name pos:start="95:22" pos:end="95:25">data</name></decl>;</decl_stmt>

            <decl_stmt pos:start="97:13" pos:end="97:21"><decl pos:start="97:13" pos:end="97:20"><type pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:15">int</name></type> <name pos:start="97:17" pos:end="97:20">size</name></decl>;</decl_stmt>

        }</block> <decl pos:start="99:11" pos:end="99:19"><name pos:start="99:11" pos:end="99:13">tmp</name> <init pos:start="99:15" pos:end="99:19">= <expr pos:start="99:17" pos:end="99:19"><block pos:start="99:17" pos:end="99:19">{<expr pos:start="99:18" pos:end="99:18"><literal type="number" pos:start="99:18" pos:end="99:18">0</literal></expr>}</block></expr></init></decl>;</struct>

        <decl_stmt pos:start="101:9" pos:end="101:50"><decl pos:start="101:9" pos:end="101:49"><type pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:11">int</name></type> <name pos:start="101:13" pos:end="101:20">opt_size</name> <init pos:start="101:22" pos:end="101:49">= <expr pos:start="101:24" pos:end="101:49"><operator pos:start="101:24" pos:end="101:24">*</operator><operator pos:start="101:25" pos:end="101:25">(</operator><name pos:start="101:26" pos:end="101:28">int</name> <operator pos:start="101:30" pos:end="101:30">*</operator><operator pos:start="101:31" pos:end="101:31">)</operator><operator pos:start="101:32" pos:end="101:32">(</operator><operator pos:start="101:33" pos:end="101:33">(</operator><name pos:start="101:34" pos:end="101:37">void</name> <operator pos:start="101:39" pos:end="101:39">*</operator><operator pos:start="101:40" pos:end="101:40">*</operator><operator pos:start="101:41" pos:end="101:41">)</operator><name pos:start="101:42" pos:end="101:44">dst</name> <operator pos:start="101:46" pos:end="101:46">+</operator> <literal type="number" pos:start="101:48" pos:end="101:48">1</literal><operator pos:start="101:49" pos:end="101:49">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="103:9" pos:end="103:38"><decl pos:start="103:9" pos:end="103:37"><type pos:start="103:9" pos:end="103:14"><name pos:start="103:9" pos:end="103:12">void</name> <modifier pos:start="103:14" pos:end="103:14">*</modifier></type><name pos:start="103:15" pos:end="103:21">opt_ptr</name> <init pos:start="103:23" pos:end="103:37">= <expr pos:start="103:25" pos:end="103:37"><operator pos:start="103:25" pos:end="103:25">*</operator><operator pos:start="103:26" pos:end="103:26">(</operator><name pos:start="103:27" pos:end="103:30">void</name> <operator pos:start="103:32" pos:end="103:32">*</operator><operator pos:start="103:33" pos:end="103:33">*</operator><operator pos:start="103:34" pos:end="103:34">)</operator><name pos:start="103:35" pos:end="103:37">dst</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="105:9" pos:end="107:21"><if pos:start="105:9" pos:end="107:21">if <condition pos:start="105:12" pos:end="105:77">(<expr pos:start="105:13" pos:end="105:76"><operator pos:start="105:13" pos:end="105:13">!</operator><name pos:start="105:14" pos:end="105:20">opt_ptr</name> <operator pos:start="105:22" pos:end="105:23">&amp;&amp;</operator> <operator pos:start="105:25" pos:end="105:25">(</operator><operator pos:start="105:26" pos:end="105:26">!</operator><name pos:start="105:27" pos:end="105:44"><name pos:start="105:27" pos:end="105:27">o</name><operator pos:start="105:28" pos:end="105:29">-&gt;</operator><name pos:start="105:30" pos:end="105:40">default_val</name><operator pos:start="105:41" pos:end="105:41">.</operator><name pos:start="105:42" pos:end="105:44">str</name></name> <operator pos:start="105:46" pos:end="105:47">||</operator> <operator pos:start="105:49" pos:end="105:49">!</operator><call pos:start="105:50" pos:end="105:75"><name pos:start="105:50" pos:end="105:55">strlen</name><argument_list pos:start="105:56" pos:end="105:75">(<argument pos:start="105:57" pos:end="105:74"><expr pos:start="105:57" pos:end="105:74"><name pos:start="105:57" pos:end="105:74"><name pos:start="105:57" pos:end="105:57">o</name><operator pos:start="105:58" pos:end="105:59">-&gt;</operator><name pos:start="105:60" pos:end="105:70">default_val</name><operator pos:start="105:71" pos:end="105:71">.</operator><name pos:start="105:72" pos:end="105:74">str</name></name></expr></argument>)</argument_list></call><operator pos:start="105:76" pos:end="105:76">)</operator></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:21"><block_content pos:start="107:13" pos:end="107:21">

            <return pos:start="107:13" pos:end="107:21">return <expr pos:start="107:20" pos:end="107:20"><literal type="number" pos:start="107:20" pos:end="107:20">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="109:9" pos:end="111:21"><if pos:start="109:9" pos:end="111:21">if <condition pos:start="109:12" pos:end="109:73">(<expr pos:start="109:13" pos:end="109:72"><name pos:start="109:13" pos:end="109:19">opt_ptr</name> <operator pos:start="109:21" pos:end="109:22">&amp;&amp;</operator> <name pos:start="109:24" pos:end="109:41"><name pos:start="109:24" pos:end="109:24">o</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:37">default_val</name><operator pos:start="109:38" pos:end="109:38">.</operator><name pos:start="109:39" pos:end="109:41">str</name></name> <operator pos:start="109:43" pos:end="109:44">&amp;&amp;</operator> <operator pos:start="109:46" pos:end="109:46">!</operator><call pos:start="109:47" pos:end="109:72"><name pos:start="109:47" pos:end="109:52">strlen</name><argument_list pos:start="109:53" pos:end="109:72">(<argument pos:start="109:54" pos:end="109:71"><expr pos:start="109:54" pos:end="109:71"><name pos:start="109:54" pos:end="109:71"><name pos:start="109:54" pos:end="109:54">o</name><operator pos:start="109:55" pos:end="109:56">-&gt;</operator><name pos:start="109:57" pos:end="109:67">default_val</name><operator pos:start="109:68" pos:end="109:68">.</operator><name pos:start="109:69" pos:end="109:71">str</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:21"><block_content pos:start="111:13" pos:end="111:21">

            <return pos:start="111:13" pos:end="111:21">return <expr pos:start="111:20" pos:end="111:20"><literal type="number" pos:start="111:20" pos:end="111:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="113:9" pos:end="115:21"><if pos:start="113:9" pos:end="115:21">if <condition pos:start="113:12" pos:end="113:55">(<expr pos:start="113:13" pos:end="113:54"><name pos:start="113:13" pos:end="113:20">opt_size</name> <operator pos:start="113:22" pos:end="113:23">!=</operator> <call pos:start="113:25" pos:end="113:50"><name pos:start="113:25" pos:end="113:30">strlen</name><argument_list pos:start="113:31" pos:end="113:50">(<argument pos:start="113:32" pos:end="113:49"><expr pos:start="113:32" pos:end="113:49"><name pos:start="113:32" pos:end="113:49"><name pos:start="113:32" pos:end="113:32">o</name><operator pos:start="113:33" pos:end="113:34">-&gt;</operator><name pos:start="113:35" pos:end="113:45">default_val</name><operator pos:start="113:46" pos:end="113:46">.</operator><name pos:start="113:47" pos:end="113:49">str</name></name></expr></argument>)</argument_list></call> <operator pos:start="113:52" pos:end="113:52">/</operator> <literal type="number" pos:start="113:54" pos:end="113:54">2</literal></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:21"><block_content pos:start="115:13" pos:end="115:21">

            <return pos:start="115:13" pos:end="115:21">return <expr pos:start="115:20" pos:end="115:20"><literal type="number" pos:start="115:20" pos:end="115:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:75"><expr pos:start="117:9" pos:end="117:74"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <call pos:start="117:15" pos:end="117:74"><name pos:start="117:15" pos:end="117:31">set_string_binary</name><argument_list pos:start="117:32" pos:end="117:74">(<argument pos:start="117:33" pos:end="117:36"><expr pos:start="117:33" pos:end="117:36"><name pos:start="117:33" pos:end="117:36">NULL</name></expr></argument>, <argument pos:start="117:39" pos:end="117:42"><expr pos:start="117:39" pos:end="117:42"><name pos:start="117:39" pos:end="117:42">NULL</name></expr></argument>, <argument pos:start="117:45" pos:end="117:62"><expr pos:start="117:45" pos:end="117:62"><name pos:start="117:45" pos:end="117:62"><name pos:start="117:45" pos:end="117:45">o</name><operator pos:start="117:46" pos:end="117:47">-&gt;</operator><name pos:start="117:48" pos:end="117:58">default_val</name><operator pos:start="117:59" pos:end="117:59">.</operator><name pos:start="117:60" pos:end="117:62">str</name></name></expr></argument>, <argument pos:start="117:65" pos:end="117:73"><expr pos:start="117:65" pos:end="117:73"><operator pos:start="117:65" pos:end="117:65">&amp;</operator><name pos:start="117:66" pos:end="117:73"><name pos:start="117:66" pos:end="117:68">tmp</name><operator pos:start="117:69" pos:end="117:69">.</operator><name pos:start="117:70" pos:end="117:73">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="121:55"><if pos:start="119:9" pos:end="121:55">if <condition pos:start="119:12" pos:end="119:17">(<expr pos:start="119:13" pos:end="119:16"><operator pos:start="119:13" pos:end="119:13">!</operator><name pos:start="119:14" pos:end="119:16">ret</name></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:55"><block_content pos:start="121:13" pos:end="121:55">

            <expr_stmt pos:start="121:13" pos:end="121:55"><expr pos:start="121:13" pos:end="121:54"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <operator pos:start="121:19" pos:end="121:19">!</operator><call pos:start="121:20" pos:end="121:54"><name pos:start="121:20" pos:end="121:25">memcmp</name><argument_list pos:start="121:26" pos:end="121:54">(<argument pos:start="121:27" pos:end="121:33"><expr pos:start="121:27" pos:end="121:33"><name pos:start="121:27" pos:end="121:33">opt_ptr</name></expr></argument>, <argument pos:start="121:36" pos:end="121:43"><expr pos:start="121:36" pos:end="121:43"><name pos:start="121:36" pos:end="121:43"><name pos:start="121:36" pos:end="121:38">tmp</name><operator pos:start="121:39" pos:end="121:39">.</operator><name pos:start="121:40" pos:end="121:43">data</name></name></expr></argument>, <argument pos:start="121:46" pos:end="121:53"><expr pos:start="121:46" pos:end="121:53"><name pos:start="121:46" pos:end="121:53"><name pos:start="121:46" pos:end="121:48">tmp</name><operator pos:start="121:49" pos:end="121:49">.</operator><name pos:start="121:50" pos:end="121:53">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:26"><expr pos:start="123:9" pos:end="123:25"><call pos:start="123:9" pos:end="123:25"><name pos:start="123:9" pos:end="123:15">av_free</name><argument_list pos:start="123:16" pos:end="123:25">(<argument pos:start="123:17" pos:end="123:24"><expr pos:start="123:17" pos:end="123:24"><name pos:start="123:17" pos:end="123:24"><name pos:start="123:17" pos:end="123:19">tmp</name><operator pos:start="123:20" pos:end="123:20">.</operator><name pos:start="123:21" pos:end="123:24">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="125:9" pos:end="125:19">return <expr pos:start="125:16" pos:end="125:18"><name pos:start="125:16" pos:end="125:18">ret</name></expr>;</return>

    </block_content>}</block>

    <case pos:start="129:5" pos:end="129:26">case <expr pos:start="129:10" pos:end="129:25"><name pos:start="129:10" pos:end="129:25">AV_OPT_TYPE_DICT</name></expr>:</case>

        <comment type="block" pos:start="131:9" pos:end="131:87">/* Binary and dict have not default support yet. Any pointer is not default. */</comment>

        <return pos:start="133:9" pos:end="133:33">return <expr pos:start="133:16" pos:end="133:32"><operator pos:start="133:16" pos:end="133:16">!</operator><operator pos:start="133:17" pos:end="133:17">!</operator><operator pos:start="133:18" pos:end="133:18">(</operator><operator pos:start="133:19" pos:end="133:19">*</operator><operator pos:start="133:20" pos:end="133:20">(</operator><name pos:start="133:21" pos:end="133:24">void</name> <operator pos:start="133:26" pos:end="133:26">*</operator><operator pos:start="133:27" pos:end="133:27">*</operator><operator pos:start="133:28" pos:end="133:28">)</operator><name pos:start="133:29" pos:end="133:31">dst</name><operator pos:start="133:32" pos:end="133:32">)</operator></expr>;</return>

    <case pos:start="135:5" pos:end="135:32">case <expr pos:start="135:10" pos:end="135:31"><name pos:start="135:10" pos:end="135:31">AV_OPT_TYPE_IMAGE_SIZE</name></expr>:</case>

        <if_stmt pos:start="137:9" pos:end="143:23"><if pos:start="137:9" pos:end="139:22">if <condition pos:start="137:12" pos:end="137:71">(<expr pos:start="137:13" pos:end="137:70"><operator pos:start="137:13" pos:end="137:13">!</operator><name pos:start="137:14" pos:end="137:31"><name pos:start="137:14" pos:end="137:14">o</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:27">default_val</name><operator pos:start="137:28" pos:end="137:28">.</operator><name pos:start="137:29" pos:end="137:31">str</name></name> <operator pos:start="137:33" pos:end="137:34">||</operator> <operator pos:start="137:36" pos:end="137:36">!</operator><call pos:start="137:37" pos:end="137:70"><name pos:start="137:37" pos:end="137:42">strcmp</name><argument_list pos:start="137:43" pos:end="137:70">(<argument pos:start="137:44" pos:end="137:61"><expr pos:start="137:44" pos:end="137:61"><name pos:start="137:44" pos:end="137:61"><name pos:start="137:44" pos:end="137:44">o</name><operator pos:start="137:45" pos:end="137:46">-&gt;</operator><name pos:start="137:47" pos:end="137:57">default_val</name><operator pos:start="137:58" pos:end="137:58">.</operator><name pos:start="137:59" pos:end="137:61">str</name></name></expr></argument>, <argument pos:start="137:64" pos:end="137:69"><expr pos:start="137:64" pos:end="137:69"><literal type="string" pos:start="137:64" pos:end="137:69">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="139:13" pos:end="139:22"><block_content pos:start="139:13" pos:end="139:22">

            <expr_stmt pos:start="139:13" pos:end="139:22"><expr pos:start="139:13" pos:end="139:21"><name pos:start="139:13" pos:end="139:13">w</name> <operator pos:start="139:15" pos:end="139:15">=</operator> <name pos:start="139:17" pos:end="139:17">h</name> <operator pos:start="139:19" pos:end="139:19">=</operator> <literal type="number" pos:start="139:21" pos:end="139:21">0</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="141:9" pos:end="143:23">else if <condition pos:start="141:17" pos:end="141:77">(<expr pos:start="141:18" pos:end="141:76"><operator pos:start="141:18" pos:end="141:18">(</operator><name pos:start="141:19" pos:end="141:21">ret</name> <operator pos:start="141:23" pos:end="141:23">=</operator> <call pos:start="141:25" pos:end="141:71"><name pos:start="141:25" pos:end="141:43">av_parse_video_size</name><argument_list pos:start="141:44" pos:end="141:71">(<argument pos:start="141:45" pos:end="141:46"><expr pos:start="141:45" pos:end="141:46"><operator pos:start="141:45" pos:end="141:45">&amp;</operator><name pos:start="141:46" pos:end="141:46">w</name></expr></argument>, <argument pos:start="141:49" pos:end="141:50"><expr pos:start="141:49" pos:end="141:50"><operator pos:start="141:49" pos:end="141:49">&amp;</operator><name pos:start="141:50" pos:end="141:50">h</name></expr></argument>, <argument pos:start="141:53" pos:end="141:70"><expr pos:start="141:53" pos:end="141:70"><name pos:start="141:53" pos:end="141:70"><name pos:start="141:53" pos:end="141:53">o</name><operator pos:start="141:54" pos:end="141:55">-&gt;</operator><name pos:start="141:56" pos:end="141:66">default_val</name><operator pos:start="141:67" pos:end="141:67">.</operator><name pos:start="141:68" pos:end="141:70">str</name></name></expr></argument>)</argument_list></call><operator pos:start="141:72" pos:end="141:72">)</operator> <operator pos:start="141:74" pos:end="141:74">&lt;</operator> <literal type="number" pos:start="141:76" pos:end="141:76">0</literal></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:23"><block_content pos:start="143:13" pos:end="143:23">

            <return pos:start="143:13" pos:end="143:23">return <expr pos:start="143:20" pos:end="143:22"><name pos:start="143:20" pos:end="143:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <return pos:start="145:9" pos:end="145:60">return <expr pos:start="145:16" pos:end="145:59"><operator pos:start="145:16" pos:end="145:16">(</operator><name pos:start="145:17" pos:end="145:17">w</name> <operator pos:start="145:19" pos:end="145:20">==</operator> <operator pos:start="145:22" pos:end="145:22">*</operator><operator pos:start="145:23" pos:end="145:23">(</operator><name pos:start="145:24" pos:end="145:26">int</name> <operator pos:start="145:28" pos:end="145:28">*</operator><operator pos:start="145:29" pos:end="145:29">)</operator><name pos:start="145:30" pos:end="145:32">dst</name><operator pos:start="145:33" pos:end="145:33">)</operator> <operator pos:start="145:35" pos:end="145:36">&amp;&amp;</operator> <operator pos:start="145:38" pos:end="145:38">(</operator><name pos:start="145:39" pos:end="145:39">h</name> <operator pos:start="145:41" pos:end="145:42">==</operator> <operator pos:start="145:44" pos:end="145:44">*</operator><operator pos:start="145:45" pos:end="145:45">(</operator><operator pos:start="145:46" pos:end="145:46">(</operator><name pos:start="145:47" pos:end="145:49">int</name> <operator pos:start="145:51" pos:end="145:51">*</operator><operator pos:start="145:52" pos:end="145:52">)</operator><name pos:start="145:53" pos:end="145:55">dst</name><operator pos:start="145:56" pos:end="145:56">+</operator><literal type="number" pos:start="145:57" pos:end="145:57">1</literal><operator pos:start="145:58" pos:end="145:58">)</operator><operator pos:start="145:59" pos:end="145:59">)</operator></expr>;</return>

    <case pos:start="147:5" pos:end="147:32">case <expr pos:start="147:10" pos:end="147:31"><name pos:start="147:10" pos:end="147:31">AV_OPT_TYPE_VIDEO_RATE</name></expr>:</case>

        <expr_stmt pos:start="149:9" pos:end="149:31"><expr pos:start="149:9" pos:end="149:30"><name pos:start="149:9" pos:end="149:9">q</name> <operator pos:start="149:11" pos:end="149:11">=</operator> <operator pos:start="149:13" pos:end="149:13">(</operator><name pos:start="149:14" pos:end="149:23">AVRational</name><operator pos:start="149:24" pos:end="149:24">)</operator><block pos:start="149:25" pos:end="149:30">{<expr pos:start="149:26" pos:end="149:26"><literal type="number" pos:start="149:26" pos:end="149:26">0</literal></expr>, <expr pos:start="149:29" pos:end="149:29"><literal type="number" pos:start="149:29" pos:end="149:29">0</literal></expr>}</block></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="153:56"><if pos:start="151:9" pos:end="153:56">if <condition pos:start="151:12" pos:end="151:31">(<expr pos:start="151:13" pos:end="151:30"><name pos:start="151:13" pos:end="151:30"><name pos:start="151:13" pos:end="151:13">o</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:26">default_val</name><operator pos:start="151:27" pos:end="151:27">.</operator><name pos:start="151:28" pos:end="151:30">str</name></name></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:56"><block_content pos:start="153:13" pos:end="153:56">

            <expr_stmt pos:start="153:13" pos:end="153:56"><expr pos:start="153:13" pos:end="153:55"><call pos:start="153:13" pos:end="153:55"><name pos:start="153:13" pos:end="153:31">av_parse_video_rate</name><argument_list pos:start="153:32" pos:end="153:55">(<argument pos:start="153:33" pos:end="153:34"><expr pos:start="153:33" pos:end="153:34"><operator pos:start="153:33" pos:end="153:33">&amp;</operator><name pos:start="153:34" pos:end="153:34">q</name></expr></argument>, <argument pos:start="153:37" pos:end="153:54"><expr pos:start="153:37" pos:end="153:54"><name pos:start="153:37" pos:end="153:54"><name pos:start="153:37" pos:end="153:37">o</name><operator pos:start="153:38" pos:end="153:39">-&gt;</operator><name pos:start="153:40" pos:end="153:50">default_val</name><operator pos:start="153:51" pos:end="153:51">.</operator><name pos:start="153:52" pos:end="153:54">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="155:9" pos:end="155:47">return <expr pos:start="155:16" pos:end="155:46"><operator pos:start="155:16" pos:end="155:16">!</operator><call pos:start="155:17" pos:end="155:46"><name pos:start="155:17" pos:end="155:24">av_cmp_q</name><argument_list pos:start="155:25" pos:end="155:46">(<argument pos:start="155:26" pos:end="155:42"><expr pos:start="155:26" pos:end="155:42"><operator pos:start="155:26" pos:end="155:26">*</operator><operator pos:start="155:27" pos:end="155:27">(</operator><name pos:start="155:28" pos:end="155:37">AVRational</name><operator pos:start="155:38" pos:end="155:38">*</operator><operator pos:start="155:39" pos:end="155:39">)</operator><name pos:start="155:40" pos:end="155:42">dst</name></expr></argument>, <argument pos:start="155:45" pos:end="155:45"><expr pos:start="155:45" pos:end="155:45"><name pos:start="155:45" pos:end="155:45">q</name></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="157:5" pos:end="157:27">case <expr pos:start="157:10" pos:end="157:26"><name pos:start="157:10" pos:end="157:26">AV_OPT_TYPE_COLOR</name></expr>:</case> <block pos:start="157:29" pos:end="167:5">{<block_content pos:start="159:9" pos:end="165:50">

        <decl_stmt pos:start="159:9" pos:end="159:40"><decl pos:start="159:9" pos:end="159:39"><type pos:start="159:9" pos:end="159:15"><name pos:start="159:9" pos:end="159:15">uint8_t</name></type> <name pos:start="159:17" pos:end="159:24"><name pos:start="159:17" pos:end="159:21">color</name><index pos:start="159:22" pos:end="159:24">[<expr pos:start="159:23" pos:end="159:23"><literal type="number" pos:start="159:23" pos:end="159:23">4</literal></expr>]</index></name> <init pos:start="159:26" pos:end="159:39">= <expr pos:start="159:28" pos:end="159:39"><block pos:start="159:28" pos:end="159:39">{<expr pos:start="159:29" pos:end="159:29"><literal type="number" pos:start="159:29" pos:end="159:29">0</literal></expr>, <expr pos:start="159:32" pos:end="159:32"><literal type="number" pos:start="159:32" pos:end="159:32">0</literal></expr>, <expr pos:start="159:35" pos:end="159:35"><literal type="number" pos:start="159:35" pos:end="159:35">0</literal></expr>, <expr pos:start="159:38" pos:end="159:38"><literal type="number" pos:start="159:38" pos:end="159:38">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="161:9" pos:end="163:64"><if pos:start="161:9" pos:end="163:64">if <condition pos:start="161:12" pos:end="161:31">(<expr pos:start="161:13" pos:end="161:30"><name pos:start="161:13" pos:end="161:30"><name pos:start="161:13" pos:end="161:13">o</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:26">default_val</name><operator pos:start="161:27" pos:end="161:27">.</operator><name pos:start="161:28" pos:end="161:30">str</name></name></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:64"><block_content pos:start="163:13" pos:end="163:64">

            <expr_stmt pos:start="163:13" pos:end="163:64"><expr pos:start="163:13" pos:end="163:63"><call pos:start="163:13" pos:end="163:63"><name pos:start="163:13" pos:end="163:26">av_parse_color</name><argument_list pos:start="163:27" pos:end="163:63">(<argument pos:start="163:28" pos:end="163:32"><expr pos:start="163:28" pos:end="163:32"><name pos:start="163:28" pos:end="163:32">color</name></expr></argument>, <argument pos:start="163:35" pos:end="163:52"><expr pos:start="163:35" pos:end="163:52"><name pos:start="163:35" pos:end="163:52"><name pos:start="163:35" pos:end="163:35">o</name><operator pos:start="163:36" pos:end="163:37">-&gt;</operator><name pos:start="163:38" pos:end="163:48">default_val</name><operator pos:start="163:49" pos:end="163:49">.</operator><name pos:start="163:50" pos:end="163:52">str</name></name></expr></argument>, <argument pos:start="163:55" pos:end="163:56"><expr pos:start="163:55" pos:end="163:56"><operator pos:start="163:55" pos:end="163:55">-</operator><literal type="number" pos:start="163:56" pos:end="163:56">1</literal></expr></argument>, <argument pos:start="163:59" pos:end="163:62"><expr pos:start="163:59" pos:end="163:62"><name pos:start="163:59" pos:end="163:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="165:9" pos:end="165:50">return <expr pos:start="165:16" pos:end="165:49"><operator pos:start="165:16" pos:end="165:16">!</operator><call pos:start="165:17" pos:end="165:49"><name pos:start="165:17" pos:end="165:22">memcmp</name><argument_list pos:start="165:23" pos:end="165:49">(<argument pos:start="165:24" pos:end="165:28"><expr pos:start="165:24" pos:end="165:28"><name pos:start="165:24" pos:end="165:28">color</name></expr></argument>, <argument pos:start="165:31" pos:end="165:33"><expr pos:start="165:31" pos:end="165:33"><name pos:start="165:31" pos:end="165:33">dst</name></expr></argument>, <argument pos:start="165:36" pos:end="165:48"><expr pos:start="165:36" pos:end="165:48"><sizeof pos:start="165:36" pos:end="165:48">sizeof<argument_list pos:start="165:42" pos:end="165:48">(<argument pos:start="165:43" pos:end="165:47"><expr pos:start="165:43" pos:end="165:47"><name pos:start="165:43" pos:end="165:47">color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block>

    <default pos:start="169:5" pos:end="169:12">default:</default>

        <expr_stmt pos:start="171:9" pos:end="171:106"><expr pos:start="171:9" pos:end="171:105"><call pos:start="171:9" pos:end="171:105"><name pos:start="171:9" pos:end="171:14">av_log</name><argument_list pos:start="171:15" pos:end="171:105">(<argument pos:start="171:16" pos:end="171:18"><expr pos:start="171:16" pos:end="171:18"><name pos:start="171:16" pos:end="171:18">obj</name></expr></argument>, <argument pos:start="171:21" pos:end="171:34"><expr pos:start="171:21" pos:end="171:34"><name pos:start="171:21" pos:end="171:34">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="171:37" pos:end="171:86"><expr pos:start="171:37" pos:end="171:86"><literal type="string" pos:start="171:37" pos:end="171:86">"Not supported option type: %d, option name: %s\n"</literal></expr></argument>, <argument pos:start="171:89" pos:end="171:95"><expr pos:start="171:89" pos:end="171:95"><name pos:start="171:89" pos:end="171:95"><name pos:start="171:89" pos:end="171:89">o</name><operator pos:start="171:90" pos:end="171:91">-&gt;</operator><name pos:start="171:92" pos:end="171:95">type</name></name></expr></argument>, <argument pos:start="171:98" pos:end="171:104"><expr pos:start="171:98" pos:end="171:104"><name pos:start="171:98" pos:end="171:104"><name pos:start="171:98" pos:end="171:98">o</name><operator pos:start="171:99" pos:end="171:100">-&gt;</operator><name pos:start="171:101" pos:end="171:104">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="173:9" pos:end="173:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="177:5" pos:end="177:32">return <expr pos:start="177:12" pos:end="177:31"><name pos:start="177:12" pos:end="177:31">AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></function>
</unit>
