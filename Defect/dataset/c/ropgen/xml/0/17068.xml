<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17068.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">cpu_post_load</name><parameter_list pos:start="1:25" pos:end="1:54">(<parameter pos:start="1:26" pos:end="1:37"><decl pos:start="1:26" pos:end="1:37"><type pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:29">void</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:37">opaque</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:53"><decl pos:start="1:40" pos:end="1:53"><type pos:start="1:40" pos:end="1:53"><name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:53">version_id</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">ARMCPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">v</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="25:7">/* Update the values list from the incoming migration data.

     * Anything in the incoming data which we don't know about is

     * a migration failure; anything we know about but the incoming

     * data doesn't specify retains its current (reset) value.

     * The indexes list remains untouched -- we only inspect the

     * incoming migration index list so we can match the values array

     * entries with the right slots in our own values array.

     */</comment>



    <for pos:start="29:5" pos:end="55:5">for <control pos:start="29:9" pos:end="31:54">(<init pos:start="29:10" pos:end="29:22"><expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:10">i</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr><operator pos:start="29:15" pos:end="29:15">,</operator> <expr pos:start="29:17" pos:end="29:21"><name pos:start="29:17" pos:end="29:17">v</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr>;</init> <condition pos:start="29:24" pos:end="31:49"><expr pos:start="29:24" pos:end="31:48"><name pos:start="29:24" pos:end="29:24">i</name> <operator pos:start="29:26" pos:end="29:26">&lt;</operator> <name pos:start="29:28" pos:end="29:47"><name pos:start="29:28" pos:end="29:30">cpu</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:47">cpreg_array_len</name></name>

             <operator pos:start="31:14" pos:end="31:15">&amp;&amp;</operator> <name pos:start="31:17" pos:end="31:17">v</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:48"><name pos:start="31:21" pos:end="31:23">cpu</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:48">cpreg_vmstate_array_len</name></name></expr>;</condition> <incr pos:start="31:51" pos:end="31:53"><expr pos:start="31:51" pos:end="31:53"><name pos:start="31:51" pos:end="31:51">i</name><operator pos:start="31:52" pos:end="31:53">++</operator></expr></incr>)</control> <block pos:start="31:56" pos:end="55:5">{<block_content pos:start="33:9" pos:end="53:12">

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:66">(<expr pos:start="33:13" pos:end="33:65"><name pos:start="33:13" pos:end="33:41"><name pos:start="33:13" pos:end="33:15">cpu</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:38">cpreg_vmstate_indexes</name><index pos:start="33:39" pos:end="33:41">[<expr pos:start="33:40" pos:end="33:40"><name pos:start="33:40" pos:end="33:40">v</name></expr>]</index></name> <operator pos:start="33:43" pos:end="33:43">&gt;</operator> <name pos:start="33:45" pos:end="33:65"><name pos:start="33:45" pos:end="33:47">cpu</name><operator pos:start="33:48" pos:end="33:49">-&gt;</operator><name pos:start="33:50" pos:end="33:62">cpreg_indexes</name><index pos:start="33:63" pos:end="33:65">[<expr pos:start="33:64" pos:end="33:64"><name pos:start="33:64" pos:end="33:64">i</name></expr>]</index></name></expr>)</condition> <block pos:start="33:68" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:21">

            <comment type="block" pos:start="35:13" pos:end="35:65">/* register in our list but not incoming : skip it */</comment>

            <continue pos:start="37:13" pos:end="37:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:66">(<expr pos:start="41:13" pos:end="41:65"><name pos:start="41:13" pos:end="41:41"><name pos:start="41:13" pos:end="41:15">cpu</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:38">cpreg_vmstate_indexes</name><index pos:start="41:39" pos:end="41:41">[<expr pos:start="41:40" pos:end="41:40"><name pos:start="41:40" pos:end="41:40">v</name></expr>]</index></name> <operator pos:start="41:43" pos:end="41:43">&lt;</operator> <name pos:start="41:45" pos:end="41:65"><name pos:start="41:45" pos:end="41:47">cpu</name><operator pos:start="41:48" pos:end="41:49">-&gt;</operator><name pos:start="41:50" pos:end="41:62">cpreg_indexes</name><index pos:start="41:63" pos:end="41:65">[<expr pos:start="41:64" pos:end="41:64"><name pos:start="41:64" pos:end="41:64">i</name></expr>]</index></name></expr>)</condition> <block pos:start="41:68" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:22">

            <comment type="block" pos:start="43:13" pos:end="43:69">/* register in their list but not ours: fail migration */</comment>

            <return pos:start="45:13" pos:end="45:22">return <expr pos:start="45:20" pos:end="45:21"><operator pos:start="45:20" pos:end="45:20">-</operator><literal type="number" pos:start="45:21" pos:end="45:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="49:9" pos:end="49:52">/* matching register, copy the value over */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:60"><expr pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:11">cpu</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:25">cpreg_values</name><index pos:start="51:26" pos:end="51:28">[<expr pos:start="51:27" pos:end="51:27"><name pos:start="51:27" pos:end="51:27">i</name></expr>]</index></name> <operator pos:start="51:30" pos:end="51:30">=</operator> <name pos:start="51:32" pos:end="51:59"><name pos:start="51:32" pos:end="51:34">cpu</name><operator pos:start="51:35" pos:end="51:36">-&gt;</operator><name pos:start="51:37" pos:end="51:56">cpreg_vmstate_values</name><index pos:start="51:57" pos:end="51:59">[<expr pos:start="51:58" pos:end="51:58"><name pos:start="51:58" pos:end="51:58">v</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:12"><expr pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:9">v</name><operator pos:start="53:10" pos:end="53:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="59:5" pos:end="85:5"><if pos:start="59:5" pos:end="77:5">if <condition pos:start="59:8" pos:end="59:22">(<expr pos:start="59:9" pos:end="59:21"><call pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:19">kvm_enabled</name><argument_list pos:start="59:20" pos:end="59:21">()</argument_list></call></expr>)</condition> <block pos:start="59:24" pos:end="77:5">{<block_content pos:start="61:9" pos:end="75:36">

        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:41">(<expr pos:start="61:13" pos:end="61:40"><operator pos:start="61:13" pos:end="61:13">!</operator><call pos:start="61:14" pos:end="61:40"><name pos:start="61:14" pos:end="61:35">write_list_to_kvmstate</name><argument_list pos:start="61:36" pos:end="61:40">(<argument pos:start="61:37" pos:end="61:39"><expr pos:start="61:37" pos:end="61:39"><name pos:start="61:37" pos:end="61:39">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:43" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:22">

            <return pos:start="63:13" pos:end="63:22">return <expr pos:start="63:20" pos:end="63:21"><operator pos:start="63:20" pos:end="63:20">-</operator><literal type="number" pos:start="63:21" pos:end="63:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="67:9" pos:end="73:11">/* Note that it's OK for the TCG side not to know about

         * every register in the list; KVM is authoritative if

         * we're using it.

         */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:36"><expr pos:start="75:9" pos:end="75:35"><call pos:start="75:9" pos:end="75:35"><name pos:start="75:9" pos:end="75:30">write_list_to_cpustate</name><argument_list pos:start="75:31" pos:end="75:35">(<argument pos:start="75:32" pos:end="75:34"><expr pos:start="75:32" pos:end="75:34"><name pos:start="75:32" pos:end="75:34">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="85:5">else <block pos:start="77:12" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:9">

        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:41">(<expr pos:start="79:13" pos:end="79:40"><operator pos:start="79:13" pos:end="79:13">!</operator><call pos:start="79:14" pos:end="79:40"><name pos:start="79:14" pos:end="79:35">write_list_to_cpustate</name><argument_list pos:start="79:36" pos:end="79:40">(<argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:39">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:43" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:22">

            <return pos:start="81:13" pos:end="81:22">return <expr pos:start="81:20" pos:end="81:21"><operator pos:start="81:20" pos:end="81:20">-</operator><literal type="number" pos:start="81:21" pos:end="81:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:34"><expr pos:start="89:5" pos:end="89:33"><call pos:start="89:5" pos:end="89:33"><name pos:start="89:5" pos:end="89:28">hw_breakpoint_update_all</name><argument_list pos:start="89:29" pos:end="89:33">(<argument pos:start="89:30" pos:end="89:32"><expr pos:start="89:30" pos:end="89:32"><name pos:start="89:30" pos:end="89:32">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:34"><expr pos:start="91:5" pos:end="91:33"><call pos:start="91:5" pos:end="91:33"><name pos:start="91:5" pos:end="91:28">hw_watchpoint_update_all</name><argument_list pos:start="91:29" pos:end="91:33">(<argument pos:start="91:30" pos:end="91:32"><expr pos:start="91:30" pos:end="91:32"><name pos:start="91:30" pos:end="91:32">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
