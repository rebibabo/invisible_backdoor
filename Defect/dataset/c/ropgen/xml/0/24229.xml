<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24229.c" pos:tabs="8"><function pos:start="1:1" pos:end="591:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">inline</specifier> <specifier pos:start="1:8" pos:end="1:13">static</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:33">hcscale</name>)<parameter_list pos:start="1:35" pos:end="9:72">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:45">SwsContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">c</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:58">uint16_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">dst</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:78"><decl pos:start="1:66" pos:end="1:78"><type pos:start="1:66" pos:end="1:78"><name pos:start="1:66" pos:end="1:69">long</name></type> <name pos:start="1:71" pos:end="1:78">dstWidth</name></decl></parameter>, <parameter pos:start="1:81" pos:end="1:93"><decl pos:start="1:81" pos:end="1:93"><type pos:start="1:81" pos:end="1:93"><name pos:start="1:81" pos:end="1:87">uint8_t</name> <modifier pos:start="1:89" pos:end="1:89">*</modifier></type><name pos:start="1:90" pos:end="1:93">src1</name></decl></parameter>, <parameter pos:start="1:96" pos:end="1:108"><decl pos:start="1:96" pos:end="1:108"><type pos:start="1:96" pos:end="1:108"><name pos:start="1:96" pos:end="1:102">uint8_t</name> <modifier pos:start="1:104" pos:end="1:104">*</modifier></type><name pos:start="1:105" pos:end="1:108">src2</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:43"><decl pos:start="3:36" pos:end="3:43"><type pos:start="3:36" pos:end="3:43"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:43">srcW</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:53"><decl pos:start="3:46" pos:end="3:53"><type pos:start="3:46" pos:end="3:53"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:53">xInc</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:64"><decl pos:start="3:56" pos:end="3:64"><type pos:start="3:56" pos:end="3:64"><name pos:start="3:56" pos:end="3:58">int</name></type> <name pos:start="3:60" pos:end="3:64">flags</name></decl></parameter>, <parameter pos:start="3:67" pos:end="3:83"><decl pos:start="3:67" pos:end="3:83"><type pos:start="3:67" pos:end="3:83"><name pos:start="3:67" pos:end="3:69">int</name></type> <name pos:start="3:71" pos:end="3:83">canMMX2BeUsed</name></decl></parameter>, <parameter pos:start="3:86" pos:end="3:104"><decl pos:start="3:86" pos:end="3:104"><type pos:start="3:86" pos:end="3:104"><name pos:start="3:86" pos:end="3:92">int16_t</name> <modifier pos:start="3:94" pos:end="3:94">*</modifier></type><name pos:start="3:95" pos:end="3:104">hChrFilter</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:57"><decl pos:start="5:36" pos:end="5:57"><type pos:start="5:36" pos:end="5:57"><name pos:start="5:36" pos:end="5:42">int16_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:57">hChrFilterPos</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:77"><decl pos:start="5:60" pos:end="5:77"><type pos:start="5:60" pos:end="5:77"><name pos:start="5:60" pos:end="5:62">int</name></type> <name pos:start="5:64" pos:end="5:77">hChrFilterSize</name></decl></parameter>, <parameter pos:start="5:80" pos:end="5:96"><decl pos:start="5:80" pos:end="5:96"><type pos:start="5:80" pos:end="5:96"><name pos:start="5:80" pos:end="5:83">void</name> <modifier pos:start="5:85" pos:end="5:85">*</modifier></type><name pos:start="5:86" pos:end="5:96">funnyUVCode</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:48"><decl pos:start="7:36" pos:end="7:48"><type pos:start="7:36" pos:end="7:48"><name pos:start="7:36" pos:end="7:38">int</name></type> <name pos:start="7:40" pos:end="7:48">srcFormat</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:75"><decl pos:start="7:51" pos:end="7:75"><type pos:start="7:51" pos:end="7:75"><name pos:start="7:51" pos:end="7:57">uint8_t</name> <modifier pos:start="7:59" pos:end="7:59">*</modifier></type><name pos:start="7:60" pos:end="7:75">formatConvBuffer</name></decl></parameter>, <parameter pos:start="7:78" pos:end="7:96"><decl pos:start="7:78" pos:end="7:96"><type pos:start="7:78" pos:end="7:96"><name pos:start="7:78" pos:end="7:84">int16_t</name> <modifier pos:start="7:86" pos:end="7:86">*</modifier></type><name pos:start="7:87" pos:end="7:96">mmx2Filter</name></decl></parameter>,

                                   <parameter pos:start="9:36" pos:end="9:57"><decl pos:start="9:36" pos:end="9:57"><type pos:start="9:36" pos:end="9:57"><name pos:start="9:36" pos:end="9:42">int32_t</name> <modifier pos:start="9:44" pos:end="9:44">*</modifier></type><name pos:start="9:45" pos:end="9:57">mmx2FilterPos</name></decl></parameter>, <parameter pos:start="9:60" pos:end="9:71"><decl pos:start="9:60" pos:end="9:71"><type pos:start="9:60" pos:end="9:71"><name pos:start="9:60" pos:end="9:66">uint8_t</name> <modifier pos:start="9:68" pos:end="9:68">*</modifier></type><name pos:start="9:69" pos:end="9:71">pal</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="591:1">{<block_content pos:start="13:5" pos:end="589:5">

    <if_stmt pos:start="13:5" pos:end="240:0"><if pos:start="13:5" pos:end="23:5">if <condition pos:start="13:8" pos:end="13:35">(<expr pos:start="13:9" pos:end="13:34"><name pos:start="13:9" pos:end="13:17">srcFormat</name><operator pos:start="13:18" pos:end="13:19">==</operator><name pos:start="13:20" pos:end="13:34">PIX_FMT_YUYV422</name></expr>)</condition>

    <block pos:start="15:5" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:36">

        <expr_stmt pos:start="17:9" pos:end="17:84"><expr pos:start="17:9" pos:end="17:83"><call pos:start="17:9" pos:end="17:83"><call pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:14">RENAME</name><argument_list pos:start="17:15" pos:end="17:24">(<argument pos:start="17:16" pos:end="17:23"><expr pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:23">yuy2ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="17:25" pos:end="17:83">(<argument pos:start="17:26" pos:end="17:41"><expr pos:start="17:26" pos:end="17:41"><name pos:start="17:26" pos:end="17:41">formatConvBuffer</name></expr></argument>, <argument pos:start="17:44" pos:end="17:64"><expr pos:start="17:44" pos:end="17:64"><name pos:start="17:44" pos:end="17:59">formatConvBuffer</name><operator pos:start="17:60" pos:end="17:60">+</operator><name pos:start="17:61" pos:end="17:64">VOFW</name></expr></argument>, <argument pos:start="17:67" pos:end="17:70"><expr pos:start="17:67" pos:end="17:70"><name pos:start="17:67" pos:end="17:70">src1</name></expr></argument>, <argument pos:start="17:73" pos:end="17:76"><expr pos:start="17:73" pos:end="17:76"><name pos:start="17:73" pos:end="17:76">src2</name></expr></argument>, <argument pos:start="17:79" pos:end="17:82"><expr pos:start="17:79" pos:end="17:82"><name pos:start="17:79" pos:end="17:82">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:31"><expr pos:start="19:9" pos:end="19:30"><name pos:start="19:9" pos:end="19:12">src1</name><operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:36"><expr pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:12">src2</name><operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:30">formatConvBuffer</name><operator pos:start="21:31" pos:end="21:31">+</operator><name pos:start="21:32" pos:end="21:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="25:5" pos:end="35:5">else if <condition pos:start="25:13" pos:end="25:40">(<expr pos:start="25:14" pos:end="25:39"><name pos:start="25:14" pos:end="25:22">srcFormat</name><operator pos:start="25:23" pos:end="25:24">==</operator><name pos:start="25:25" pos:end="25:39">PIX_FMT_UYVY422</name></expr>)</condition>

    <block pos:start="27:5" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:36">

        <expr_stmt pos:start="29:9" pos:end="29:84"><expr pos:start="29:9" pos:end="29:83"><call pos:start="29:9" pos:end="29:83"><call pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:14">RENAME</name><argument_list pos:start="29:15" pos:end="29:24">(<argument pos:start="29:16" pos:end="29:23"><expr pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:23">uyvyToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="29:25" pos:end="29:83">(<argument pos:start="29:26" pos:end="29:41"><expr pos:start="29:26" pos:end="29:41"><name pos:start="29:26" pos:end="29:41">formatConvBuffer</name></expr></argument>, <argument pos:start="29:44" pos:end="29:64"><expr pos:start="29:44" pos:end="29:64"><name pos:start="29:44" pos:end="29:59">formatConvBuffer</name><operator pos:start="29:60" pos:end="29:60">+</operator><name pos:start="29:61" pos:end="29:64">VOFW</name></expr></argument>, <argument pos:start="29:67" pos:end="29:70"><expr pos:start="29:67" pos:end="29:70"><name pos:start="29:67" pos:end="29:70">src1</name></expr></argument>, <argument pos:start="29:73" pos:end="29:76"><expr pos:start="29:73" pos:end="29:76"><name pos:start="29:73" pos:end="29:76">src2</name></expr></argument>, <argument pos:start="29:79" pos:end="29:82"><expr pos:start="29:79" pos:end="29:82"><name pos:start="29:79" pos:end="29:82">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:31"><expr pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:12">src1</name><operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:36"><expr pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:12">src2</name><operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:30">formatConvBuffer</name><operator pos:start="33:31" pos:end="33:31">+</operator><name pos:start="33:32" pos:end="33:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="37:5" pos:end="53:5">else if <condition pos:start="37:13" pos:end="37:38">(<expr pos:start="37:14" pos:end="37:37"><name pos:start="37:14" pos:end="37:22">srcFormat</name><operator pos:start="37:23" pos:end="37:24">==</operator><name pos:start="37:25" pos:end="37:37">PIX_FMT_RGB32</name></expr>)</condition>

    <block pos:start="39:5" pos:end="53:5">{<block_content pos:start="41:9" pos:end="51:36">

        <if_stmt pos:start="41:9" pos:end="47:89"><if pos:start="41:9" pos:end="43:94">if<condition pos:start="41:11" pos:end="41:31">(<expr pos:start="41:12" pos:end="41:30"><name pos:start="41:12" pos:end="41:30"><name pos:start="41:12" pos:end="41:12">c</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:30">chrSrcHSubSample</name></name></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:94"><block_content pos:start="43:13" pos:end="43:94">

            <expr_stmt pos:start="43:13" pos:end="43:94"><expr pos:start="43:13" pos:end="43:93"><call pos:start="43:13" pos:end="43:93"><call pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:18">RENAME</name><argument_list pos:start="43:19" pos:end="43:34">(<argument pos:start="43:20" pos:end="43:33"><expr pos:start="43:20" pos:end="43:33"><name pos:start="43:20" pos:end="43:33">bgr32ToUV_half</name></expr></argument>)</argument_list></call><argument_list pos:start="43:35" pos:end="43:93">(<argument pos:start="43:36" pos:end="43:51"><expr pos:start="43:36" pos:end="43:51"><name pos:start="43:36" pos:end="43:51">formatConvBuffer</name></expr></argument>, <argument pos:start="43:54" pos:end="43:74"><expr pos:start="43:54" pos:end="43:74"><name pos:start="43:54" pos:end="43:69">formatConvBuffer</name><operator pos:start="43:70" pos:end="43:70">+</operator><name pos:start="43:71" pos:end="43:74">VOFW</name></expr></argument>, <argument pos:start="43:77" pos:end="43:80"><expr pos:start="43:77" pos:end="43:80"><name pos:start="43:77" pos:end="43:80">src1</name></expr></argument>, <argument pos:start="43:83" pos:end="43:86"><expr pos:start="43:83" pos:end="43:86"><name pos:start="43:83" pos:end="43:86">src2</name></expr></argument>, <argument pos:start="43:89" pos:end="43:92"><expr pos:start="43:89" pos:end="43:92"><name pos:start="43:89" pos:end="43:92">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="45:9" pos:end="47:89">else<block type="pseudo" pos:start="47:13" pos:end="47:89"><block_content pos:start="47:13" pos:end="47:89">

            <expr_stmt pos:start="47:13" pos:end="47:89"><expr pos:start="47:13" pos:end="47:88"><call pos:start="47:13" pos:end="47:88"><call pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:18">RENAME</name><argument_list pos:start="47:19" pos:end="47:29">(<argument pos:start="47:20" pos:end="47:28"><expr pos:start="47:20" pos:end="47:28"><name pos:start="47:20" pos:end="47:28">bgr32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="47:30" pos:end="47:88">(<argument pos:start="47:31" pos:end="47:46"><expr pos:start="47:31" pos:end="47:46"><name pos:start="47:31" pos:end="47:46">formatConvBuffer</name></expr></argument>, <argument pos:start="47:49" pos:end="47:69"><expr pos:start="47:49" pos:end="47:69"><name pos:start="47:49" pos:end="47:64">formatConvBuffer</name><operator pos:start="47:65" pos:end="47:65">+</operator><name pos:start="47:66" pos:end="47:69">VOFW</name></expr></argument>, <argument pos:start="47:72" pos:end="47:75"><expr pos:start="47:72" pos:end="47:75"><name pos:start="47:72" pos:end="47:75">src1</name></expr></argument>, <argument pos:start="47:78" pos:end="47:81"><expr pos:start="47:78" pos:end="47:81"><name pos:start="47:78" pos:end="47:81">src2</name></expr></argument>, <argument pos:start="47:84" pos:end="47:87"><expr pos:start="47:84" pos:end="47:87"><name pos:start="47:84" pos:end="47:87">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:31"><expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:12">src1</name><operator pos:start="49:13" pos:end="49:13">=</operator> <name pos:start="49:15" pos:end="49:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:36"><expr pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:12">src2</name><operator pos:start="51:13" pos:end="51:13">=</operator> <name pos:start="51:15" pos:end="51:30">formatConvBuffer</name><operator pos:start="51:31" pos:end="51:31">+</operator><name pos:start="51:32" pos:end="51:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="55:5" pos:end="71:5">else if <condition pos:start="55:13" pos:end="55:40">(<expr pos:start="55:14" pos:end="55:39"><name pos:start="55:14" pos:end="55:22">srcFormat</name><operator pos:start="55:23" pos:end="55:24">==</operator><name pos:start="55:25" pos:end="55:39">PIX_FMT_RGB32_1</name></expr>)</condition>

    <block pos:start="57:5" pos:end="71:5">{<block_content pos:start="59:9" pos:end="69:36">

        <if_stmt pos:start="59:9" pos:end="65:111"><if pos:start="59:9" pos:end="61:116">if<condition pos:start="59:11" pos:end="59:31">(<expr pos:start="59:12" pos:end="59:30"><name pos:start="59:12" pos:end="59:30"><name pos:start="59:12" pos:end="59:12">c</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:30">chrSrcHSubSample</name></name></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:116"><block_content pos:start="61:13" pos:end="61:116">

            <expr_stmt pos:start="61:13" pos:end="61:116"><expr pos:start="61:13" pos:end="61:115"><call pos:start="61:13" pos:end="61:115"><call pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:18">RENAME</name><argument_list pos:start="61:19" pos:end="61:34">(<argument pos:start="61:20" pos:end="61:33"><expr pos:start="61:20" pos:end="61:33"><name pos:start="61:20" pos:end="61:33">bgr32ToUV_half</name></expr></argument>)</argument_list></call><argument_list pos:start="61:35" pos:end="61:115">(<argument pos:start="61:36" pos:end="61:51"><expr pos:start="61:36" pos:end="61:51"><name pos:start="61:36" pos:end="61:51">formatConvBuffer</name></expr></argument>, <argument pos:start="61:54" pos:end="61:74"><expr pos:start="61:54" pos:end="61:74"><name pos:start="61:54" pos:end="61:69">formatConvBuffer</name><operator pos:start="61:70" pos:end="61:70">+</operator><name pos:start="61:71" pos:end="61:74">VOFW</name></expr></argument>, <argument pos:start="61:77" pos:end="61:91"><expr pos:start="61:77" pos:end="61:91"><name pos:start="61:77" pos:end="61:80">src1</name><operator pos:start="61:81" pos:end="61:81">+</operator><name pos:start="61:82" pos:end="61:91">ALT32_CORR</name></expr></argument>, <argument pos:start="61:94" pos:end="61:108"><expr pos:start="61:94" pos:end="61:108"><name pos:start="61:94" pos:end="61:97">src2</name><operator pos:start="61:98" pos:end="61:98">+</operator><name pos:start="61:99" pos:end="61:108">ALT32_CORR</name></expr></argument>, <argument pos:start="61:111" pos:end="61:114"><expr pos:start="61:111" pos:end="61:114"><name pos:start="61:111" pos:end="61:114">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="63:9" pos:end="65:111">else<block type="pseudo" pos:start="65:13" pos:end="65:111"><block_content pos:start="65:13" pos:end="65:111">

            <expr_stmt pos:start="65:13" pos:end="65:111"><expr pos:start="65:13" pos:end="65:110"><call pos:start="65:13" pos:end="65:110"><call pos:start="65:13" pos:end="65:29"><name pos:start="65:13" pos:end="65:18">RENAME</name><argument_list pos:start="65:19" pos:end="65:29">(<argument pos:start="65:20" pos:end="65:28"><expr pos:start="65:20" pos:end="65:28"><name pos:start="65:20" pos:end="65:28">bgr32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="65:30" pos:end="65:110">(<argument pos:start="65:31" pos:end="65:46"><expr pos:start="65:31" pos:end="65:46"><name pos:start="65:31" pos:end="65:46">formatConvBuffer</name></expr></argument>, <argument pos:start="65:49" pos:end="65:69"><expr pos:start="65:49" pos:end="65:69"><name pos:start="65:49" pos:end="65:64">formatConvBuffer</name><operator pos:start="65:65" pos:end="65:65">+</operator><name pos:start="65:66" pos:end="65:69">VOFW</name></expr></argument>, <argument pos:start="65:72" pos:end="65:86"><expr pos:start="65:72" pos:end="65:86"><name pos:start="65:72" pos:end="65:75">src1</name><operator pos:start="65:76" pos:end="65:76">+</operator><name pos:start="65:77" pos:end="65:86">ALT32_CORR</name></expr></argument>, <argument pos:start="65:89" pos:end="65:103"><expr pos:start="65:89" pos:end="65:103"><name pos:start="65:89" pos:end="65:92">src2</name><operator pos:start="65:93" pos:end="65:93">+</operator><name pos:start="65:94" pos:end="65:103">ALT32_CORR</name></expr></argument>, <argument pos:start="65:106" pos:end="65:109"><expr pos:start="65:106" pos:end="65:109"><name pos:start="65:106" pos:end="65:109">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:31"><expr pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:12">src1</name><operator pos:start="67:13" pos:end="67:13">=</operator> <name pos:start="67:15" pos:end="67:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:36"><expr pos:start="69:9" pos:end="69:35"><name pos:start="69:9" pos:end="69:12">src2</name><operator pos:start="69:13" pos:end="69:13">=</operator> <name pos:start="69:15" pos:end="69:30">formatConvBuffer</name><operator pos:start="69:31" pos:end="69:31">+</operator><name pos:start="69:32" pos:end="69:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="73:5" pos:end="89:5">else if <condition pos:start="73:13" pos:end="73:38">(<expr pos:start="73:14" pos:end="73:37"><name pos:start="73:14" pos:end="73:22">srcFormat</name><operator pos:start="73:23" pos:end="73:24">==</operator><name pos:start="73:25" pos:end="73:37">PIX_FMT_BGR24</name></expr>)</condition>

    <block pos:start="75:5" pos:end="89:5">{<block_content pos:start="77:9" pos:end="87:36">

        <if_stmt pos:start="77:9" pos:end="83:89"><if pos:start="77:9" pos:end="79:94">if<condition pos:start="77:11" pos:end="77:31">(<expr pos:start="77:12" pos:end="77:30"><name pos:start="77:12" pos:end="77:30"><name pos:start="77:12" pos:end="77:12">c</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:30">chrSrcHSubSample</name></name></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:94"><block_content pos:start="79:13" pos:end="79:94">

            <expr_stmt pos:start="79:13" pos:end="79:94"><expr pos:start="79:13" pos:end="79:93"><call pos:start="79:13" pos:end="79:93"><call pos:start="79:13" pos:end="79:34"><name pos:start="79:13" pos:end="79:18">RENAME</name><argument_list pos:start="79:19" pos:end="79:34">(<argument pos:start="79:20" pos:end="79:33"><expr pos:start="79:20" pos:end="79:33"><name pos:start="79:20" pos:end="79:33">bgr24ToUV_half</name></expr></argument>)</argument_list></call><argument_list pos:start="79:35" pos:end="79:93">(<argument pos:start="79:36" pos:end="79:51"><expr pos:start="79:36" pos:end="79:51"><name pos:start="79:36" pos:end="79:51">formatConvBuffer</name></expr></argument>, <argument pos:start="79:54" pos:end="79:74"><expr pos:start="79:54" pos:end="79:74"><name pos:start="79:54" pos:end="79:69">formatConvBuffer</name><operator pos:start="79:70" pos:end="79:70">+</operator><name pos:start="79:71" pos:end="79:74">VOFW</name></expr></argument>, <argument pos:start="79:77" pos:end="79:80"><expr pos:start="79:77" pos:end="79:80"><name pos:start="79:77" pos:end="79:80">src1</name></expr></argument>, <argument pos:start="79:83" pos:end="79:86"><expr pos:start="79:83" pos:end="79:86"><name pos:start="79:83" pos:end="79:86">src2</name></expr></argument>, <argument pos:start="79:89" pos:end="79:92"><expr pos:start="79:89" pos:end="79:92"><name pos:start="79:89" pos:end="79:92">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="81:9" pos:end="83:89">else<block type="pseudo" pos:start="83:13" pos:end="83:89"><block_content pos:start="83:13" pos:end="83:89">

            <expr_stmt pos:start="83:13" pos:end="83:89"><expr pos:start="83:13" pos:end="83:88"><call pos:start="83:13" pos:end="83:88"><call pos:start="83:13" pos:end="83:29"><name pos:start="83:13" pos:end="83:18">RENAME</name><argument_list pos:start="83:19" pos:end="83:29">(<argument pos:start="83:20" pos:end="83:28"><expr pos:start="83:20" pos:end="83:28"><name pos:start="83:20" pos:end="83:28">bgr24ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="83:30" pos:end="83:88">(<argument pos:start="83:31" pos:end="83:46"><expr pos:start="83:31" pos:end="83:46"><name pos:start="83:31" pos:end="83:46">formatConvBuffer</name></expr></argument>, <argument pos:start="83:49" pos:end="83:69"><expr pos:start="83:49" pos:end="83:69"><name pos:start="83:49" pos:end="83:64">formatConvBuffer</name><operator pos:start="83:65" pos:end="83:65">+</operator><name pos:start="83:66" pos:end="83:69">VOFW</name></expr></argument>, <argument pos:start="83:72" pos:end="83:75"><expr pos:start="83:72" pos:end="83:75"><name pos:start="83:72" pos:end="83:75">src1</name></expr></argument>, <argument pos:start="83:78" pos:end="83:81"><expr pos:start="83:78" pos:end="83:81"><name pos:start="83:78" pos:end="83:81">src2</name></expr></argument>, <argument pos:start="83:84" pos:end="83:87"><expr pos:start="83:84" pos:end="83:87"><name pos:start="83:84" pos:end="83:87">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:31"><expr pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:12">src1</name><operator pos:start="85:13" pos:end="85:13">=</operator> <name pos:start="85:15" pos:end="85:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:36"><expr pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:12">src2</name><operator pos:start="87:13" pos:end="87:13">=</operator> <name pos:start="87:15" pos:end="87:30">formatConvBuffer</name><operator pos:start="87:31" pos:end="87:31">+</operator><name pos:start="87:32" pos:end="87:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="91:5" pos:end="107:5">else if <condition pos:start="91:13" pos:end="91:39">(<expr pos:start="91:14" pos:end="91:38"><name pos:start="91:14" pos:end="91:22">srcFormat</name><operator pos:start="91:23" pos:end="91:24">==</operator><name pos:start="91:25" pos:end="91:38">PIX_FMT_BGR565</name></expr>)</condition>

    <block pos:start="93:5" pos:end="107:5">{<block_content pos:start="95:9" pos:end="105:36">

        <if_stmt pos:start="95:9" pos:end="101:89"><if pos:start="95:9" pos:end="97:94">if<condition pos:start="95:11" pos:end="95:31">(<expr pos:start="95:12" pos:end="95:30"><name pos:start="95:12" pos:end="95:30"><name pos:start="95:12" pos:end="95:12">c</name><operator pos:start="95:13" pos:end="95:14">-&gt;</operator><name pos:start="95:15" pos:end="95:30">chrSrcHSubSample</name></name></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:94"><block_content pos:start="97:13" pos:end="97:94">

            <expr_stmt pos:start="97:13" pos:end="97:94"><expr pos:start="97:13" pos:end="97:93"><call pos:start="97:13" pos:end="97:93"><call pos:start="97:13" pos:end="97:34"><name pos:start="97:13" pos:end="97:18">RENAME</name><argument_list pos:start="97:19" pos:end="97:34">(<argument pos:start="97:20" pos:end="97:33"><expr pos:start="97:20" pos:end="97:33"><name pos:start="97:20" pos:end="97:33">bgr16ToUV_half</name></expr></argument>)</argument_list></call><argument_list pos:start="97:35" pos:end="97:93">(<argument pos:start="97:36" pos:end="97:51"><expr pos:start="97:36" pos:end="97:51"><name pos:start="97:36" pos:end="97:51">formatConvBuffer</name></expr></argument>, <argument pos:start="97:54" pos:end="97:74"><expr pos:start="97:54" pos:end="97:74"><name pos:start="97:54" pos:end="97:69">formatConvBuffer</name><operator pos:start="97:70" pos:end="97:70">+</operator><name pos:start="97:71" pos:end="97:74">VOFW</name></expr></argument>, <argument pos:start="97:77" pos:end="97:80"><expr pos:start="97:77" pos:end="97:80"><name pos:start="97:77" pos:end="97:80">src1</name></expr></argument>, <argument pos:start="97:83" pos:end="97:86"><expr pos:start="97:83" pos:end="97:86"><name pos:start="97:83" pos:end="97:86">src2</name></expr></argument>, <argument pos:start="97:89" pos:end="97:92"><expr pos:start="97:89" pos:end="97:92"><name pos:start="97:89" pos:end="97:92">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="99:9" pos:end="101:89">else<block type="pseudo" pos:start="101:13" pos:end="101:89"><block_content pos:start="101:13" pos:end="101:89">

            <expr_stmt pos:start="101:13" pos:end="101:89"><expr pos:start="101:13" pos:end="101:88"><call pos:start="101:13" pos:end="101:88"><call pos:start="101:13" pos:end="101:29"><name pos:start="101:13" pos:end="101:18">RENAME</name><argument_list pos:start="101:19" pos:end="101:29">(<argument pos:start="101:20" pos:end="101:28"><expr pos:start="101:20" pos:end="101:28"><name pos:start="101:20" pos:end="101:28">bgr16ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="101:30" pos:end="101:88">(<argument pos:start="101:31" pos:end="101:46"><expr pos:start="101:31" pos:end="101:46"><name pos:start="101:31" pos:end="101:46">formatConvBuffer</name></expr></argument>, <argument pos:start="101:49" pos:end="101:69"><expr pos:start="101:49" pos:end="101:69"><name pos:start="101:49" pos:end="101:64">formatConvBuffer</name><operator pos:start="101:65" pos:end="101:65">+</operator><name pos:start="101:66" pos:end="101:69">VOFW</name></expr></argument>, <argument pos:start="101:72" pos:end="101:75"><expr pos:start="101:72" pos:end="101:75"><name pos:start="101:72" pos:end="101:75">src1</name></expr></argument>, <argument pos:start="101:78" pos:end="101:81"><expr pos:start="101:78" pos:end="101:81"><name pos:start="101:78" pos:end="101:81">src2</name></expr></argument>, <argument pos:start="101:84" pos:end="101:87"><expr pos:start="101:84" pos:end="101:87"><name pos:start="101:84" pos:end="101:87">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:31"><expr pos:start="103:9" pos:end="103:30"><name pos:start="103:9" pos:end="103:12">src1</name><operator pos:start="103:13" pos:end="103:13">=</operator> <name pos:start="103:15" pos:end="103:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:36"><expr pos:start="105:9" pos:end="105:35"><name pos:start="105:9" pos:end="105:12">src2</name><operator pos:start="105:13" pos:end="105:13">=</operator> <name pos:start="105:15" pos:end="105:30">formatConvBuffer</name><operator pos:start="105:31" pos:end="105:31">+</operator><name pos:start="105:32" pos:end="105:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="109:5" pos:end="125:5">else if <condition pos:start="109:13" pos:end="109:39">(<expr pos:start="109:14" pos:end="109:38"><name pos:start="109:14" pos:end="109:22">srcFormat</name><operator pos:start="109:23" pos:end="109:24">==</operator><name pos:start="109:25" pos:end="109:38">PIX_FMT_BGR555</name></expr>)</condition>

    <block pos:start="111:5" pos:end="125:5">{<block_content pos:start="113:9" pos:end="123:36">

        <if_stmt pos:start="113:9" pos:end="119:89"><if pos:start="113:9" pos:end="115:94">if<condition pos:start="113:11" pos:end="113:31">(<expr pos:start="113:12" pos:end="113:30"><name pos:start="113:12" pos:end="113:30"><name pos:start="113:12" pos:end="113:12">c</name><operator pos:start="113:13" pos:end="113:14">-&gt;</operator><name pos:start="113:15" pos:end="113:30">chrSrcHSubSample</name></name></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:94"><block_content pos:start="115:13" pos:end="115:94">

            <expr_stmt pos:start="115:13" pos:end="115:94"><expr pos:start="115:13" pos:end="115:93"><call pos:start="115:13" pos:end="115:93"><call pos:start="115:13" pos:end="115:34"><name pos:start="115:13" pos:end="115:18">RENAME</name><argument_list pos:start="115:19" pos:end="115:34">(<argument pos:start="115:20" pos:end="115:33"><expr pos:start="115:20" pos:end="115:33"><name pos:start="115:20" pos:end="115:33">bgr15ToUV_half</name></expr></argument>)</argument_list></call><argument_list pos:start="115:35" pos:end="115:93">(<argument pos:start="115:36" pos:end="115:51"><expr pos:start="115:36" pos:end="115:51"><name pos:start="115:36" pos:end="115:51">formatConvBuffer</name></expr></argument>, <argument pos:start="115:54" pos:end="115:74"><expr pos:start="115:54" pos:end="115:74"><name pos:start="115:54" pos:end="115:69">formatConvBuffer</name><operator pos:start="115:70" pos:end="115:70">+</operator><name pos:start="115:71" pos:end="115:74">VOFW</name></expr></argument>, <argument pos:start="115:77" pos:end="115:80"><expr pos:start="115:77" pos:end="115:80"><name pos:start="115:77" pos:end="115:80">src1</name></expr></argument>, <argument pos:start="115:83" pos:end="115:86"><expr pos:start="115:83" pos:end="115:86"><name pos:start="115:83" pos:end="115:86">src2</name></expr></argument>, <argument pos:start="115:89" pos:end="115:92"><expr pos:start="115:89" pos:end="115:92"><name pos:start="115:89" pos:end="115:92">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="117:9" pos:end="119:89">else<block type="pseudo" pos:start="119:13" pos:end="119:89"><block_content pos:start="119:13" pos:end="119:89">

            <expr_stmt pos:start="119:13" pos:end="119:89"><expr pos:start="119:13" pos:end="119:88"><call pos:start="119:13" pos:end="119:88"><call pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:18">RENAME</name><argument_list pos:start="119:19" pos:end="119:29">(<argument pos:start="119:20" pos:end="119:28"><expr pos:start="119:20" pos:end="119:28"><name pos:start="119:20" pos:end="119:28">bgr15ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="119:30" pos:end="119:88">(<argument pos:start="119:31" pos:end="119:46"><expr pos:start="119:31" pos:end="119:46"><name pos:start="119:31" pos:end="119:46">formatConvBuffer</name></expr></argument>, <argument pos:start="119:49" pos:end="119:69"><expr pos:start="119:49" pos:end="119:69"><name pos:start="119:49" pos:end="119:64">formatConvBuffer</name><operator pos:start="119:65" pos:end="119:65">+</operator><name pos:start="119:66" pos:end="119:69">VOFW</name></expr></argument>, <argument pos:start="119:72" pos:end="119:75"><expr pos:start="119:72" pos:end="119:75"><name pos:start="119:72" pos:end="119:75">src1</name></expr></argument>, <argument pos:start="119:78" pos:end="119:81"><expr pos:start="119:78" pos:end="119:81"><name pos:start="119:78" pos:end="119:81">src2</name></expr></argument>, <argument pos:start="119:84" pos:end="119:87"><expr pos:start="119:84" pos:end="119:87"><name pos:start="119:84" pos:end="119:87">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:31"><expr pos:start="121:9" pos:end="121:30"><name pos:start="121:9" pos:end="121:12">src1</name><operator pos:start="121:13" pos:end="121:13">=</operator> <name pos:start="121:15" pos:end="121:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:36"><expr pos:start="123:9" pos:end="123:35"><name pos:start="123:9" pos:end="123:12">src2</name><operator pos:start="123:13" pos:end="123:13">=</operator> <name pos:start="123:15" pos:end="123:30">formatConvBuffer</name><operator pos:start="123:31" pos:end="123:31">+</operator><name pos:start="123:32" pos:end="123:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="127:5" pos:end="143:5">else if <condition pos:start="127:13" pos:end="127:38">(<expr pos:start="127:14" pos:end="127:37"><name pos:start="127:14" pos:end="127:22">srcFormat</name><operator pos:start="127:23" pos:end="127:24">==</operator><name pos:start="127:25" pos:end="127:37">PIX_FMT_BGR32</name></expr>)</condition>

    <block pos:start="129:5" pos:end="143:5">{<block_content pos:start="131:9" pos:end="141:36">

        <if_stmt pos:start="131:9" pos:end="137:89"><if pos:start="131:9" pos:end="133:94">if<condition pos:start="131:11" pos:end="131:31">(<expr pos:start="131:12" pos:end="131:30"><name pos:start="131:12" pos:end="131:30"><name pos:start="131:12" pos:end="131:12">c</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:30">chrSrcHSubSample</name></name></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:94"><block_content pos:start="133:13" pos:end="133:94">

            <expr_stmt pos:start="133:13" pos:end="133:94"><expr pos:start="133:13" pos:end="133:93"><call pos:start="133:13" pos:end="133:93"><call pos:start="133:13" pos:end="133:34"><name pos:start="133:13" pos:end="133:18">RENAME</name><argument_list pos:start="133:19" pos:end="133:34">(<argument pos:start="133:20" pos:end="133:33"><expr pos:start="133:20" pos:end="133:33"><name pos:start="133:20" pos:end="133:33">rgb32ToUV_half</name></expr></argument>)</argument_list></call><argument_list pos:start="133:35" pos:end="133:93">(<argument pos:start="133:36" pos:end="133:51"><expr pos:start="133:36" pos:end="133:51"><name pos:start="133:36" pos:end="133:51">formatConvBuffer</name></expr></argument>, <argument pos:start="133:54" pos:end="133:74"><expr pos:start="133:54" pos:end="133:74"><name pos:start="133:54" pos:end="133:69">formatConvBuffer</name><operator pos:start="133:70" pos:end="133:70">+</operator><name pos:start="133:71" pos:end="133:74">VOFW</name></expr></argument>, <argument pos:start="133:77" pos:end="133:80"><expr pos:start="133:77" pos:end="133:80"><name pos:start="133:77" pos:end="133:80">src1</name></expr></argument>, <argument pos:start="133:83" pos:end="133:86"><expr pos:start="133:83" pos:end="133:86"><name pos:start="133:83" pos:end="133:86">src2</name></expr></argument>, <argument pos:start="133:89" pos:end="133:92"><expr pos:start="133:89" pos:end="133:92"><name pos:start="133:89" pos:end="133:92">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="135:9" pos:end="137:89">else<block type="pseudo" pos:start="137:13" pos:end="137:89"><block_content pos:start="137:13" pos:end="137:89">

            <expr_stmt pos:start="137:13" pos:end="137:89"><expr pos:start="137:13" pos:end="137:88"><call pos:start="137:13" pos:end="137:88"><call pos:start="137:13" pos:end="137:29"><name pos:start="137:13" pos:end="137:18">RENAME</name><argument_list pos:start="137:19" pos:end="137:29">(<argument pos:start="137:20" pos:end="137:28"><expr pos:start="137:20" pos:end="137:28"><name pos:start="137:20" pos:end="137:28">rgb32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="137:30" pos:end="137:88">(<argument pos:start="137:31" pos:end="137:46"><expr pos:start="137:31" pos:end="137:46"><name pos:start="137:31" pos:end="137:46">formatConvBuffer</name></expr></argument>, <argument pos:start="137:49" pos:end="137:69"><expr pos:start="137:49" pos:end="137:69"><name pos:start="137:49" pos:end="137:64">formatConvBuffer</name><operator pos:start="137:65" pos:end="137:65">+</operator><name pos:start="137:66" pos:end="137:69">VOFW</name></expr></argument>, <argument pos:start="137:72" pos:end="137:75"><expr pos:start="137:72" pos:end="137:75"><name pos:start="137:72" pos:end="137:75">src1</name></expr></argument>, <argument pos:start="137:78" pos:end="137:81"><expr pos:start="137:78" pos:end="137:81"><name pos:start="137:78" pos:end="137:81">src2</name></expr></argument>, <argument pos:start="137:84" pos:end="137:87"><expr pos:start="137:84" pos:end="137:87"><name pos:start="137:84" pos:end="137:87">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:31"><expr pos:start="139:9" pos:end="139:30"><name pos:start="139:9" pos:end="139:12">src1</name><operator pos:start="139:13" pos:end="139:13">=</operator> <name pos:start="139:15" pos:end="139:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:36"><expr pos:start="141:9" pos:end="141:35"><name pos:start="141:9" pos:end="141:12">src2</name><operator pos:start="141:13" pos:end="141:13">=</operator> <name pos:start="141:15" pos:end="141:30">formatConvBuffer</name><operator pos:start="141:31" pos:end="141:31">+</operator><name pos:start="141:32" pos:end="141:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="145:5" pos:end="161:5">else if <condition pos:start="145:13" pos:end="145:40">(<expr pos:start="145:14" pos:end="145:39"><name pos:start="145:14" pos:end="145:22">srcFormat</name><operator pos:start="145:23" pos:end="145:24">==</operator><name pos:start="145:25" pos:end="145:39">PIX_FMT_BGR32_1</name></expr>)</condition>

    <block pos:start="147:5" pos:end="161:5">{<block_content pos:start="149:9" pos:end="159:36">

        <if_stmt pos:start="149:9" pos:end="155:111"><if pos:start="149:9" pos:end="151:116">if<condition pos:start="149:11" pos:end="149:31">(<expr pos:start="149:12" pos:end="149:30"><name pos:start="149:12" pos:end="149:30"><name pos:start="149:12" pos:end="149:12">c</name><operator pos:start="149:13" pos:end="149:14">-&gt;</operator><name pos:start="149:15" pos:end="149:30">chrSrcHSubSample</name></name></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:116"><block_content pos:start="151:13" pos:end="151:116">

            <expr_stmt pos:start="151:13" pos:end="151:116"><expr pos:start="151:13" pos:end="151:115"><call pos:start="151:13" pos:end="151:115"><call pos:start="151:13" pos:end="151:34"><name pos:start="151:13" pos:end="151:18">RENAME</name><argument_list pos:start="151:19" pos:end="151:34">(<argument pos:start="151:20" pos:end="151:33"><expr pos:start="151:20" pos:end="151:33"><name pos:start="151:20" pos:end="151:33">rgb32ToUV_half</name></expr></argument>)</argument_list></call><argument_list pos:start="151:35" pos:end="151:115">(<argument pos:start="151:36" pos:end="151:51"><expr pos:start="151:36" pos:end="151:51"><name pos:start="151:36" pos:end="151:51">formatConvBuffer</name></expr></argument>, <argument pos:start="151:54" pos:end="151:74"><expr pos:start="151:54" pos:end="151:74"><name pos:start="151:54" pos:end="151:69">formatConvBuffer</name><operator pos:start="151:70" pos:end="151:70">+</operator><name pos:start="151:71" pos:end="151:74">VOFW</name></expr></argument>, <argument pos:start="151:77" pos:end="151:91"><expr pos:start="151:77" pos:end="151:91"><name pos:start="151:77" pos:end="151:80">src1</name><operator pos:start="151:81" pos:end="151:81">+</operator><name pos:start="151:82" pos:end="151:91">ALT32_CORR</name></expr></argument>, <argument pos:start="151:94" pos:end="151:108"><expr pos:start="151:94" pos:end="151:108"><name pos:start="151:94" pos:end="151:97">src2</name><operator pos:start="151:98" pos:end="151:98">+</operator><name pos:start="151:99" pos:end="151:108">ALT32_CORR</name></expr></argument>, <argument pos:start="151:111" pos:end="151:114"><expr pos:start="151:111" pos:end="151:114"><name pos:start="151:111" pos:end="151:114">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="153:9" pos:end="155:111">else<block type="pseudo" pos:start="155:13" pos:end="155:111"><block_content pos:start="155:13" pos:end="155:111">

            <expr_stmt pos:start="155:13" pos:end="155:111"><expr pos:start="155:13" pos:end="155:110"><call pos:start="155:13" pos:end="155:110"><call pos:start="155:13" pos:end="155:29"><name pos:start="155:13" pos:end="155:18">RENAME</name><argument_list pos:start="155:19" pos:end="155:29">(<argument pos:start="155:20" pos:end="155:28"><expr pos:start="155:20" pos:end="155:28"><name pos:start="155:20" pos:end="155:28">rgb32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="155:30" pos:end="155:110">(<argument pos:start="155:31" pos:end="155:46"><expr pos:start="155:31" pos:end="155:46"><name pos:start="155:31" pos:end="155:46">formatConvBuffer</name></expr></argument>, <argument pos:start="155:49" pos:end="155:69"><expr pos:start="155:49" pos:end="155:69"><name pos:start="155:49" pos:end="155:64">formatConvBuffer</name><operator pos:start="155:65" pos:end="155:65">+</operator><name pos:start="155:66" pos:end="155:69">VOFW</name></expr></argument>, <argument pos:start="155:72" pos:end="155:86"><expr pos:start="155:72" pos:end="155:86"><name pos:start="155:72" pos:end="155:75">src1</name><operator pos:start="155:76" pos:end="155:76">+</operator><name pos:start="155:77" pos:end="155:86">ALT32_CORR</name></expr></argument>, <argument pos:start="155:89" pos:end="155:103"><expr pos:start="155:89" pos:end="155:103"><name pos:start="155:89" pos:end="155:92">src2</name><operator pos:start="155:93" pos:end="155:93">+</operator><name pos:start="155:94" pos:end="155:103">ALT32_CORR</name></expr></argument>, <argument pos:start="155:106" pos:end="155:109"><expr pos:start="155:106" pos:end="155:109"><name pos:start="155:106" pos:end="155:109">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:31"><expr pos:start="157:9" pos:end="157:30"><name pos:start="157:9" pos:end="157:12">src1</name><operator pos:start="157:13" pos:end="157:13">=</operator> <name pos:start="157:15" pos:end="157:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:36"><expr pos:start="159:9" pos:end="159:35"><name pos:start="159:9" pos:end="159:12">src2</name><operator pos:start="159:13" pos:end="159:13">=</operator> <name pos:start="159:15" pos:end="159:30">formatConvBuffer</name><operator pos:start="159:31" pos:end="159:31">+</operator><name pos:start="159:32" pos:end="159:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="163:5" pos:end="179:5">else if <condition pos:start="163:13" pos:end="163:38">(<expr pos:start="163:14" pos:end="163:37"><name pos:start="163:14" pos:end="163:22">srcFormat</name><operator pos:start="163:23" pos:end="163:24">==</operator><name pos:start="163:25" pos:end="163:37">PIX_FMT_RGB24</name></expr>)</condition>

    <block pos:start="165:5" pos:end="179:5">{<block_content pos:start="167:9" pos:end="177:36">

        <if_stmt pos:start="167:9" pos:end="173:89"><if pos:start="167:9" pos:end="169:94">if<condition pos:start="167:11" pos:end="167:31">(<expr pos:start="167:12" pos:end="167:30"><name pos:start="167:12" pos:end="167:30"><name pos:start="167:12" pos:end="167:12">c</name><operator pos:start="167:13" pos:end="167:14">-&gt;</operator><name pos:start="167:15" pos:end="167:30">chrSrcHSubSample</name></name></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:94"><block_content pos:start="169:13" pos:end="169:94">

            <expr_stmt pos:start="169:13" pos:end="169:94"><expr pos:start="169:13" pos:end="169:93"><call pos:start="169:13" pos:end="169:93"><call pos:start="169:13" pos:end="169:34"><name pos:start="169:13" pos:end="169:18">RENAME</name><argument_list pos:start="169:19" pos:end="169:34">(<argument pos:start="169:20" pos:end="169:33"><expr pos:start="169:20" pos:end="169:33"><name pos:start="169:20" pos:end="169:33">rgb24ToUV_half</name></expr></argument>)</argument_list></call><argument_list pos:start="169:35" pos:end="169:93">(<argument pos:start="169:36" pos:end="169:51"><expr pos:start="169:36" pos:end="169:51"><name pos:start="169:36" pos:end="169:51">formatConvBuffer</name></expr></argument>, <argument pos:start="169:54" pos:end="169:74"><expr pos:start="169:54" pos:end="169:74"><name pos:start="169:54" pos:end="169:69">formatConvBuffer</name><operator pos:start="169:70" pos:end="169:70">+</operator><name pos:start="169:71" pos:end="169:74">VOFW</name></expr></argument>, <argument pos:start="169:77" pos:end="169:80"><expr pos:start="169:77" pos:end="169:80"><name pos:start="169:77" pos:end="169:80">src1</name></expr></argument>, <argument pos:start="169:83" pos:end="169:86"><expr pos:start="169:83" pos:end="169:86"><name pos:start="169:83" pos:end="169:86">src2</name></expr></argument>, <argument pos:start="169:89" pos:end="169:92"><expr pos:start="169:89" pos:end="169:92"><name pos:start="169:89" pos:end="169:92">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="171:9" pos:end="173:89">else<block type="pseudo" pos:start="173:13" pos:end="173:89"><block_content pos:start="173:13" pos:end="173:89">

            <expr_stmt pos:start="173:13" pos:end="173:89"><expr pos:start="173:13" pos:end="173:88"><call pos:start="173:13" pos:end="173:88"><call pos:start="173:13" pos:end="173:29"><name pos:start="173:13" pos:end="173:18">RENAME</name><argument_list pos:start="173:19" pos:end="173:29">(<argument pos:start="173:20" pos:end="173:28"><expr pos:start="173:20" pos:end="173:28"><name pos:start="173:20" pos:end="173:28">rgb24ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="173:30" pos:end="173:88">(<argument pos:start="173:31" pos:end="173:46"><expr pos:start="173:31" pos:end="173:46"><name pos:start="173:31" pos:end="173:46">formatConvBuffer</name></expr></argument>, <argument pos:start="173:49" pos:end="173:69"><expr pos:start="173:49" pos:end="173:69"><name pos:start="173:49" pos:end="173:64">formatConvBuffer</name><operator pos:start="173:65" pos:end="173:65">+</operator><name pos:start="173:66" pos:end="173:69">VOFW</name></expr></argument>, <argument pos:start="173:72" pos:end="173:75"><expr pos:start="173:72" pos:end="173:75"><name pos:start="173:72" pos:end="173:75">src1</name></expr></argument>, <argument pos:start="173:78" pos:end="173:81"><expr pos:start="173:78" pos:end="173:81"><name pos:start="173:78" pos:end="173:81">src2</name></expr></argument>, <argument pos:start="173:84" pos:end="173:87"><expr pos:start="173:84" pos:end="173:87"><name pos:start="173:84" pos:end="173:87">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:31"><expr pos:start="175:9" pos:end="175:30"><name pos:start="175:9" pos:end="175:12">src1</name><operator pos:start="175:13" pos:end="175:13">=</operator> <name pos:start="175:15" pos:end="175:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:36"><expr pos:start="177:9" pos:end="177:35"><name pos:start="177:9" pos:end="177:12">src2</name><operator pos:start="177:13" pos:end="177:13">=</operator> <name pos:start="177:15" pos:end="177:30">formatConvBuffer</name><operator pos:start="177:31" pos:end="177:31">+</operator><name pos:start="177:32" pos:end="177:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="181:5" pos:end="197:5">else if <condition pos:start="181:13" pos:end="181:39">(<expr pos:start="181:14" pos:end="181:38"><name pos:start="181:14" pos:end="181:22">srcFormat</name><operator pos:start="181:23" pos:end="181:24">==</operator><name pos:start="181:25" pos:end="181:38">PIX_FMT_RGB565</name></expr>)</condition>

    <block pos:start="183:5" pos:end="197:5">{<block_content pos:start="185:9" pos:end="195:36">

        <if_stmt pos:start="185:9" pos:end="191:89"><if pos:start="185:9" pos:end="187:94">if<condition pos:start="185:11" pos:end="185:31">(<expr pos:start="185:12" pos:end="185:30"><name pos:start="185:12" pos:end="185:30"><name pos:start="185:12" pos:end="185:12">c</name><operator pos:start="185:13" pos:end="185:14">-&gt;</operator><name pos:start="185:15" pos:end="185:30">chrSrcHSubSample</name></name></expr>)</condition><block type="pseudo" pos:start="187:13" pos:end="187:94"><block_content pos:start="187:13" pos:end="187:94">

            <expr_stmt pos:start="187:13" pos:end="187:94"><expr pos:start="187:13" pos:end="187:93"><call pos:start="187:13" pos:end="187:93"><call pos:start="187:13" pos:end="187:34"><name pos:start="187:13" pos:end="187:18">RENAME</name><argument_list pos:start="187:19" pos:end="187:34">(<argument pos:start="187:20" pos:end="187:33"><expr pos:start="187:20" pos:end="187:33"><name pos:start="187:20" pos:end="187:33">rgb16ToUV_half</name></expr></argument>)</argument_list></call><argument_list pos:start="187:35" pos:end="187:93">(<argument pos:start="187:36" pos:end="187:51"><expr pos:start="187:36" pos:end="187:51"><name pos:start="187:36" pos:end="187:51">formatConvBuffer</name></expr></argument>, <argument pos:start="187:54" pos:end="187:74"><expr pos:start="187:54" pos:end="187:74"><name pos:start="187:54" pos:end="187:69">formatConvBuffer</name><operator pos:start="187:70" pos:end="187:70">+</operator><name pos:start="187:71" pos:end="187:74">VOFW</name></expr></argument>, <argument pos:start="187:77" pos:end="187:80"><expr pos:start="187:77" pos:end="187:80"><name pos:start="187:77" pos:end="187:80">src1</name></expr></argument>, <argument pos:start="187:83" pos:end="187:86"><expr pos:start="187:83" pos:end="187:86"><name pos:start="187:83" pos:end="187:86">src2</name></expr></argument>, <argument pos:start="187:89" pos:end="187:92"><expr pos:start="187:89" pos:end="187:92"><name pos:start="187:89" pos:end="187:92">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="189:9" pos:end="191:89">else<block type="pseudo" pos:start="191:13" pos:end="191:89"><block_content pos:start="191:13" pos:end="191:89">

            <expr_stmt pos:start="191:13" pos:end="191:89"><expr pos:start="191:13" pos:end="191:88"><call pos:start="191:13" pos:end="191:88"><call pos:start="191:13" pos:end="191:29"><name pos:start="191:13" pos:end="191:18">RENAME</name><argument_list pos:start="191:19" pos:end="191:29">(<argument pos:start="191:20" pos:end="191:28"><expr pos:start="191:20" pos:end="191:28"><name pos:start="191:20" pos:end="191:28">rgb16ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="191:30" pos:end="191:88">(<argument pos:start="191:31" pos:end="191:46"><expr pos:start="191:31" pos:end="191:46"><name pos:start="191:31" pos:end="191:46">formatConvBuffer</name></expr></argument>, <argument pos:start="191:49" pos:end="191:69"><expr pos:start="191:49" pos:end="191:69"><name pos:start="191:49" pos:end="191:64">formatConvBuffer</name><operator pos:start="191:65" pos:end="191:65">+</operator><name pos:start="191:66" pos:end="191:69">VOFW</name></expr></argument>, <argument pos:start="191:72" pos:end="191:75"><expr pos:start="191:72" pos:end="191:75"><name pos:start="191:72" pos:end="191:75">src1</name></expr></argument>, <argument pos:start="191:78" pos:end="191:81"><expr pos:start="191:78" pos:end="191:81"><name pos:start="191:78" pos:end="191:81">src2</name></expr></argument>, <argument pos:start="191:84" pos:end="191:87"><expr pos:start="191:84" pos:end="191:87"><name pos:start="191:84" pos:end="191:87">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:31"><expr pos:start="193:9" pos:end="193:30"><name pos:start="193:9" pos:end="193:12">src1</name><operator pos:start="193:13" pos:end="193:13">=</operator> <name pos:start="193:15" pos:end="193:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:36"><expr pos:start="195:9" pos:end="195:35"><name pos:start="195:9" pos:end="195:12">src2</name><operator pos:start="195:13" pos:end="195:13">=</operator> <name pos:start="195:15" pos:end="195:30">formatConvBuffer</name><operator pos:start="195:31" pos:end="195:31">+</operator><name pos:start="195:32" pos:end="195:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="199:5" pos:end="215:5">else if <condition pos:start="199:13" pos:end="199:39">(<expr pos:start="199:14" pos:end="199:38"><name pos:start="199:14" pos:end="199:22">srcFormat</name><operator pos:start="199:23" pos:end="199:24">==</operator><name pos:start="199:25" pos:end="199:38">PIX_FMT_RGB555</name></expr>)</condition>

    <block pos:start="201:5" pos:end="215:5">{<block_content pos:start="203:9" pos:end="213:36">

        <if_stmt pos:start="203:9" pos:end="209:89"><if pos:start="203:9" pos:end="205:94">if<condition pos:start="203:11" pos:end="203:31">(<expr pos:start="203:12" pos:end="203:30"><name pos:start="203:12" pos:end="203:30"><name pos:start="203:12" pos:end="203:12">c</name><operator pos:start="203:13" pos:end="203:14">-&gt;</operator><name pos:start="203:15" pos:end="203:30">chrSrcHSubSample</name></name></expr>)</condition><block type="pseudo" pos:start="205:13" pos:end="205:94"><block_content pos:start="205:13" pos:end="205:94">

            <expr_stmt pos:start="205:13" pos:end="205:94"><expr pos:start="205:13" pos:end="205:93"><call pos:start="205:13" pos:end="205:93"><call pos:start="205:13" pos:end="205:34"><name pos:start="205:13" pos:end="205:18">RENAME</name><argument_list pos:start="205:19" pos:end="205:34">(<argument pos:start="205:20" pos:end="205:33"><expr pos:start="205:20" pos:end="205:33"><name pos:start="205:20" pos:end="205:33">rgb15ToUV_half</name></expr></argument>)</argument_list></call><argument_list pos:start="205:35" pos:end="205:93">(<argument pos:start="205:36" pos:end="205:51"><expr pos:start="205:36" pos:end="205:51"><name pos:start="205:36" pos:end="205:51">formatConvBuffer</name></expr></argument>, <argument pos:start="205:54" pos:end="205:74"><expr pos:start="205:54" pos:end="205:74"><name pos:start="205:54" pos:end="205:69">formatConvBuffer</name><operator pos:start="205:70" pos:end="205:70">+</operator><name pos:start="205:71" pos:end="205:74">VOFW</name></expr></argument>, <argument pos:start="205:77" pos:end="205:80"><expr pos:start="205:77" pos:end="205:80"><name pos:start="205:77" pos:end="205:80">src1</name></expr></argument>, <argument pos:start="205:83" pos:end="205:86"><expr pos:start="205:83" pos:end="205:86"><name pos:start="205:83" pos:end="205:86">src2</name></expr></argument>, <argument pos:start="205:89" pos:end="205:92"><expr pos:start="205:89" pos:end="205:92"><name pos:start="205:89" pos:end="205:92">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="207:9" pos:end="209:89">else<block type="pseudo" pos:start="209:13" pos:end="209:89"><block_content pos:start="209:13" pos:end="209:89">

            <expr_stmt pos:start="209:13" pos:end="209:89"><expr pos:start="209:13" pos:end="209:88"><call pos:start="209:13" pos:end="209:88"><call pos:start="209:13" pos:end="209:29"><name pos:start="209:13" pos:end="209:18">RENAME</name><argument_list pos:start="209:19" pos:end="209:29">(<argument pos:start="209:20" pos:end="209:28"><expr pos:start="209:20" pos:end="209:28"><name pos:start="209:20" pos:end="209:28">rgb15ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="209:30" pos:end="209:88">(<argument pos:start="209:31" pos:end="209:46"><expr pos:start="209:31" pos:end="209:46"><name pos:start="209:31" pos:end="209:46">formatConvBuffer</name></expr></argument>, <argument pos:start="209:49" pos:end="209:69"><expr pos:start="209:49" pos:end="209:69"><name pos:start="209:49" pos:end="209:64">formatConvBuffer</name><operator pos:start="209:65" pos:end="209:65">+</operator><name pos:start="209:66" pos:end="209:69">VOFW</name></expr></argument>, <argument pos:start="209:72" pos:end="209:75"><expr pos:start="209:72" pos:end="209:75"><name pos:start="209:72" pos:end="209:75">src1</name></expr></argument>, <argument pos:start="209:78" pos:end="209:81"><expr pos:start="209:78" pos:end="209:81"><name pos:start="209:78" pos:end="209:81">src2</name></expr></argument>, <argument pos:start="209:84" pos:end="209:87"><expr pos:start="209:84" pos:end="209:87"><name pos:start="209:84" pos:end="209:87">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:31"><expr pos:start="211:9" pos:end="211:30"><name pos:start="211:9" pos:end="211:12">src1</name><operator pos:start="211:13" pos:end="211:13">=</operator> <name pos:start="211:15" pos:end="211:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:36"><expr pos:start="213:9" pos:end="213:35"><name pos:start="213:9" pos:end="213:12">src2</name><operator pos:start="213:13" pos:end="213:13">=</operator> <name pos:start="213:15" pos:end="213:30">formatConvBuffer</name><operator pos:start="213:31" pos:end="213:31">+</operator><name pos:start="213:32" pos:end="213:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="217:5" pos:end="223:5">else if <condition pos:start="217:13" pos:end="217:84">(<expr pos:start="217:14" pos:end="217:83"><call pos:start="217:14" pos:end="217:30"><name pos:start="217:14" pos:end="217:19">isGray</name><argument_list pos:start="217:20" pos:end="217:30">(<argument pos:start="217:21" pos:end="217:29"><expr pos:start="217:21" pos:end="217:29"><name pos:start="217:21" pos:end="217:29">srcFormat</name></expr></argument>)</argument_list></call> <operator pos:start="217:32" pos:end="217:33">||</operator> <name pos:start="217:35" pos:end="217:43">srcFormat</name><operator pos:start="217:44" pos:end="217:45">==</operator><name pos:start="217:46" pos:end="217:62">PIX_FMT_MONOBLACK</name> <operator pos:start="217:64" pos:end="217:65">||</operator> <name pos:start="217:67" pos:end="217:83">PIX_FMT_MONOWHITE</name></expr>)</condition>

    <block pos:start="219:5" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:15">

        <return pos:start="221:9" pos:end="221:15">return;</return>

    </block_content>}</block></if>

    <if type="elseif" pos:start="225:5" pos:end="240:0">else if <condition pos:start="225:13" pos:end="225:156">(<expr pos:start="225:14" pos:end="225:155"><name pos:start="225:14" pos:end="225:22">srcFormat</name><operator pos:start="225:23" pos:end="225:24">==</operator><name pos:start="225:25" pos:end="225:36">PIX_FMT_RGB8</name> <operator pos:start="225:38" pos:end="225:39">||</operator> <name pos:start="225:41" pos:end="225:49">srcFormat</name><operator pos:start="225:50" pos:end="225:51">==</operator><name pos:start="225:52" pos:end="225:63">PIX_FMT_BGR8</name> <operator pos:start="225:65" pos:end="225:66">||</operator> <name pos:start="225:68" pos:end="225:76">srcFormat</name><operator pos:start="225:77" pos:end="225:78">==</operator><name pos:start="225:79" pos:end="225:90">PIX_FMT_PAL8</name> <operator pos:start="225:92" pos:end="225:93">||</operator> <name pos:start="225:95" pos:end="225:103">srcFormat</name><operator pos:start="225:104" pos:end="225:105">==</operator><name pos:start="225:106" pos:end="225:122">PIX_FMT_BGR4_BYTE</name>  <operator pos:start="225:125" pos:end="225:126">||</operator> <name pos:start="225:128" pos:end="225:136">srcFormat</name><operator pos:start="225:137" pos:end="225:138">==</operator><name pos:start="225:139" pos:end="225:155">PIX_FMT_RGB4_BYTE</name></expr>)</condition>

    <block pos:start="227:5" pos:end="240:0">{<block_content pos:start="229:9" pos:end="233:36">

        <expr_stmt pos:start="229:9" pos:end="229:99"><expr pos:start="229:9" pos:end="229:98"><call pos:start="229:9" pos:end="229:98"><call pos:start="229:9" pos:end="229:23"><name pos:start="229:9" pos:end="229:14">RENAME</name><argument_list pos:start="229:15" pos:end="229:23">(<argument pos:start="229:16" pos:end="229:22"><expr pos:start="229:16" pos:end="229:22"><name pos:start="229:16" pos:end="229:22">palToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="229:24" pos:end="229:98">(<argument pos:start="229:25" pos:end="229:40"><expr pos:start="229:25" pos:end="229:40"><name pos:start="229:25" pos:end="229:40">formatConvBuffer</name></expr></argument>, <argument pos:start="229:43" pos:end="229:63"><expr pos:start="229:43" pos:end="229:63"><name pos:start="229:43" pos:end="229:58">formatConvBuffer</name><operator pos:start="229:59" pos:end="229:59">+</operator><name pos:start="229:60" pos:end="229:63">VOFW</name></expr></argument>, <argument pos:start="229:66" pos:end="229:69"><expr pos:start="229:66" pos:end="229:69"><name pos:start="229:66" pos:end="229:69">src1</name></expr></argument>, <argument pos:start="229:72" pos:end="229:75"><expr pos:start="229:72" pos:end="229:75"><name pos:start="229:72" pos:end="229:75">src2</name></expr></argument>, <argument pos:start="229:78" pos:end="229:81"><expr pos:start="229:78" pos:end="229:81"><name pos:start="229:78" pos:end="229:81">srcW</name></expr></argument>, <argument pos:start="229:84" pos:end="229:97"><expr pos:start="229:84" pos:end="229:97"><operator pos:start="229:84" pos:end="229:84">(</operator><name pos:start="229:85" pos:end="229:92">uint32_t</name><operator pos:start="229:93" pos:end="229:93">*</operator><operator pos:start="229:94" pos:end="229:94">)</operator><name pos:start="229:95" pos:end="229:97">pal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:31"><expr pos:start="231:9" pos:end="231:30"><name pos:start="231:9" pos:end="231:12">src1</name><operator pos:start="231:13" pos:end="231:13">=</operator> <name pos:start="231:15" pos:end="231:30">formatConvBuffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:36"><expr pos:start="233:9" pos:end="233:35"><name pos:start="233:9" pos:end="233:12">src2</name><operator pos:start="233:13" pos:end="233:13">=</operator> <name pos:start="233:15" pos:end="233:30">formatConvBuffer</name><operator pos:start="233:31" pos:end="233:31">+</operator><name pos:start="233:32" pos:end="233:35">VOFW</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="239:1" pos:end="239:15">#<cpp:directive pos:start="239:2" pos:end="239:6">ifdef</cpp:directive> <name pos:start="239:8" pos:end="239:15">HAVE_MMX</name></cpp:ifdef>

    <comment type="line" pos:start="241:5" pos:end="241:96">// Use the new MMX scaler if the MMX2 one can't be used (it is faster than the x86 ASM one).</comment>

    <if_stmt pos:start="243:5" pos:end="557:5"><if pos:start="243:5" pos:end="557:5">if <condition pos:start="243:8" pos:end="246:0">(<expr pos:start="243:9" pos:end="243:54"><operator pos:start="243:9" pos:end="243:9">!</operator><operator pos:start="243:10" pos:end="243:10">(</operator><name pos:start="243:11" pos:end="243:15">flags</name><operator pos:start="243:16" pos:end="243:16">&amp;</operator><name pos:start="243:17" pos:end="243:33">SWS_FAST_BILINEAR</name><operator pos:start="243:34" pos:end="243:34">)</operator> <operator pos:start="243:36" pos:end="243:37">||</operator> <operator pos:start="243:39" pos:end="243:39">(</operator><operator pos:start="243:40" pos:end="243:40">!</operator><name pos:start="243:41" pos:end="243:53">canMMX2BeUsed</name><operator pos:start="243:54" pos:end="243:54">)</operator></expr>)</condition><block type="pseudo" pos:start="247:5" pos:end="557:5"><block_content pos:start="247:5" pos:end="557:5">

<cpp:else pos:start="245:1" pos:end="245:5">#<cpp:directive pos:start="245:2" pos:end="245:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="247:5" pos:end="557:5"><if pos:start="247:5" pos:end="257:5">if <condition pos:start="247:8" pos:end="250:0">(<expr pos:start="247:9" pos:end="247:34"><operator pos:start="247:9" pos:end="247:9">!</operator><operator pos:start="247:10" pos:end="247:10">(</operator><name pos:start="247:11" pos:end="247:15">flags</name><operator pos:start="247:16" pos:end="247:16">&amp;</operator><name pos:start="247:17" pos:end="247:33">SWS_FAST_BILINEAR</name><operator pos:start="247:34" pos:end="247:34">)</operator></expr>)</condition>

<cpp:endif pos:start="249:1" pos:end="249:6">#<cpp:directive pos:start="249:2" pos:end="249:6">endif</cpp:directive></cpp:endif>

    <block pos:start="251:5" pos:end="257:5">{<block_content pos:start="253:9" pos:end="255:104">

        <function_decl pos:start="253:9" pos:end="253:104"><type pos:start="253:9" pos:end="253:14"><name pos:start="253:9" pos:end="253:14">RENAME</name></type>(<name pos:start="253:16" pos:end="253:21">hScale</name>)<parameter_list pos:start="253:23" pos:end="253:103">(<parameter pos:start="253:24" pos:end="253:26"><decl pos:start="253:24" pos:end="253:26"><type pos:start="253:24" pos:end="253:26"><name pos:start="253:24" pos:end="253:26">dst</name></type></decl></parameter>     , <parameter pos:start="253:34" pos:end="253:41"><decl pos:start="253:34" pos:end="253:41"><type pos:start="253:34" pos:end="253:41"><name pos:start="253:34" pos:end="253:41">dstWidth</name></type></decl></parameter>, <parameter pos:start="253:44" pos:end="253:47"><decl pos:start="253:44" pos:end="253:47"><type pos:start="253:44" pos:end="253:47"><name pos:start="253:44" pos:end="253:47">src1</name></type></decl></parameter>, <parameter pos:start="253:50" pos:end="253:53"><decl pos:start="253:50" pos:end="253:53"><type pos:start="253:50" pos:end="253:53"><name pos:start="253:50" pos:end="253:53">srcW</name></type></decl></parameter>, <parameter pos:start="253:56" pos:end="253:59"><decl pos:start="253:56" pos:end="253:59"><type pos:start="253:56" pos:end="253:59"><name pos:start="253:56" pos:end="253:59">xInc</name></type></decl></parameter>, <parameter pos:start="253:62" pos:end="253:71"><decl pos:start="253:62" pos:end="253:71"><type pos:start="253:62" pos:end="253:71"><name pos:start="253:62" pos:end="253:71">hChrFilter</name></type></decl></parameter>, <parameter pos:start="253:74" pos:end="253:86"><decl pos:start="253:74" pos:end="253:86"><type pos:start="253:74" pos:end="253:86"><name pos:start="253:74" pos:end="253:86">hChrFilterPos</name></type></decl></parameter>, <parameter pos:start="253:89" pos:end="253:102"><decl pos:start="253:89" pos:end="253:102"><type pos:start="253:89" pos:end="253:102"><name pos:start="253:89" pos:end="253:102">hChrFilterSize</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt pos:start="255:9" pos:end="255:104"><expr pos:start="255:9" pos:end="255:103"><call pos:start="255:9" pos:end="255:103"><call pos:start="255:9" pos:end="255:22"><name pos:start="255:9" pos:end="255:14">RENAME</name><argument_list pos:start="255:15" pos:end="255:22">(<argument pos:start="255:16" pos:end="255:21"><expr pos:start="255:16" pos:end="255:21"><name pos:start="255:16" pos:end="255:21">hScale</name></expr></argument>)</argument_list></call><argument_list pos:start="255:23" pos:end="255:103">(<argument pos:start="255:24" pos:end="255:31"><expr pos:start="255:24" pos:end="255:31"><name pos:start="255:24" pos:end="255:26">dst</name><operator pos:start="255:27" pos:end="255:27">+</operator><name pos:start="255:28" pos:end="255:31">VOFW</name></expr></argument>, <argument pos:start="255:34" pos:end="255:41"><expr pos:start="255:34" pos:end="255:41"><name pos:start="255:34" pos:end="255:41">dstWidth</name></expr></argument>, <argument pos:start="255:44" pos:end="255:47"><expr pos:start="255:44" pos:end="255:47"><name pos:start="255:44" pos:end="255:47">src2</name></expr></argument>, <argument pos:start="255:50" pos:end="255:53"><expr pos:start="255:50" pos:end="255:53"><name pos:start="255:50" pos:end="255:53">srcW</name></expr></argument>, <argument pos:start="255:56" pos:end="255:59"><expr pos:start="255:56" pos:end="255:59"><name pos:start="255:56" pos:end="255:59">xInc</name></expr></argument>, <argument pos:start="255:62" pos:end="255:71"><expr pos:start="255:62" pos:end="255:71"><name pos:start="255:62" pos:end="255:71">hChrFilter</name></expr></argument>, <argument pos:start="255:74" pos:end="255:86"><expr pos:start="255:74" pos:end="255:86"><name pos:start="255:74" pos:end="255:86">hChrFilterPos</name></expr></argument>, <argument pos:start="255:89" pos:end="255:102"><expr pos:start="255:89" pos:end="255:102"><name pos:start="255:89" pos:end="255:102">hChrFilterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="259:5" pos:end="557:5">else <comment type="line" pos:start="259:10" pos:end="259:50">// fast bilinear upscale / crap downscale</comment>

    <block pos:start="261:5" pos:end="557:5">{<block_content pos:start="267:9" pos:end="556:0">

<cpp:if pos:start="263:1" pos:end="263:21">#<cpp:directive pos:start="263:2" pos:end="263:3">if</cpp:directive> <expr pos:start="263:5" pos:end="263:21"><call pos:start="263:5" pos:end="263:21"><name pos:start="263:5" pos:end="263:11">defined</name><argument_list pos:start="263:12" pos:end="263:21">(<argument pos:start="263:13" pos:end="263:20"><expr pos:start="263:13" pos:end="263:20"><name pos:start="263:13" pos:end="263:20">ARCH_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef pos:start="265:1" pos:end="265:16">#<cpp:directive pos:start="265:2" pos:end="265:6">ifdef</cpp:directive> <name pos:start="265:8" pos:end="265:16">HAVE_MMX2</name></cpp:ifdef>

        <decl_stmt pos:start="267:9" pos:end="270:0"><decl pos:start="267:9" pos:end="267:13"><type pos:start="267:9" pos:end="267:11"><name pos:start="267:9" pos:end="267:11">int</name></type> <name pos:start="267:13" pos:end="267:13">i</name></decl>;</decl_stmt>

<cpp:if pos:start="269:1" pos:end="269:16">#<cpp:directive pos:start="269:2" pos:end="269:3">if</cpp:directive> <expr pos:start="269:5" pos:end="269:16"><call pos:start="269:5" pos:end="269:16"><name pos:start="269:5" pos:end="269:11">defined</name><argument_list pos:start="269:12" pos:end="269:16">(<argument pos:start="269:13" pos:end="269:15"><expr pos:start="269:13" pos:end="269:15"><name pos:start="269:13" pos:end="269:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <decl_stmt pos:start="271:9" pos:end="274:0"><decl pos:start="271:9" pos:end="271:52"><type pos:start="271:9" pos:end="271:24"><name pos:start="271:9" pos:end="271:16">uint64_t</name> <name pos:start="271:18" pos:end="271:24">ebxsave</name></type> <name pos:start="271:26" pos:end="271:38">__attribute__</name><argument_list pos:start="271:39" pos:end="271:52">(<argument pos:start="271:40" pos:end="271:51"><expr pos:start="271:40" pos:end="271:51"><operator pos:start="271:40" pos:end="271:40">(</operator><call pos:start="271:41" pos:end="271:50"><name pos:start="271:41" pos:end="271:47">aligned</name><argument_list pos:start="271:48" pos:end="271:50">(<argument pos:start="271:49" pos:end="271:49"><expr pos:start="271:49" pos:end="271:49"><literal type="number" pos:start="271:49" pos:end="271:49">8</literal></expr></argument>)</argument_list></call><operator pos:start="271:51" pos:end="271:51">)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif pos:start="273:1" pos:end="273:6">#<cpp:directive pos:start="273:2" pos:end="273:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="275:9" pos:end="526:0"><if pos:start="275:9" pos:end="421:9">if <condition pos:start="275:12" pos:end="275:26">(<expr pos:start="275:13" pos:end="275:25"><name pos:start="275:13" pos:end="275:25">canMMX2BeUsed</name></expr>)</condition>

        <block pos:start="277:9" pos:end="421:9">{<block_content pos:start="279:13" pos:end="419:13">

            <asm pos:start="279:13" pos:end="407:14">asm <specifier pos:start="279:17" pos:end="279:24">volatile</specifier>(

<cpp:if pos:start="281:1" pos:end="281:16">#<cpp:directive pos:start="281:2" pos:end="281:3">if</cpp:directive> <expr pos:start="281:5" pos:end="281:16"><call pos:start="281:5" pos:end="281:16"><name pos:start="281:5" pos:end="281:11">defined</name><argument_list pos:start="281:12" pos:end="281:16">(<argument pos:start="281:13" pos:end="281:15"><expr pos:start="281:13" pos:end="281:15"><name pos:start="281:13" pos:end="281:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "mov          %%"REG_b", %6         \n\t"

<cpp:endif pos:start="285:1" pos:end="285:6">#<cpp:directive pos:start="285:2" pos:end="285:6">endif</cpp:directive></cpp:endif>

            "pxor             %%mm7, %%mm7      \n\t"

            "mov                 %0, %%"REG_c"  \n\t"

            "mov                 %1, %%"REG_D"  \n\t"

            "mov                 %2, %%"REG_d"  \n\t"

            "mov                 %3, %%"REG_b"  \n\t"

            "xor          %%"REG_a", %%"REG_a"  \n\t" <comment type="line" pos:start="297:55" pos:end="297:58">// i</comment>

            PREFETCH"   (%%"REG_c")             \n\t"

            PREFETCH" 32(%%"REG_c")             \n\t"

            PREFETCH" 64(%%"REG_c")             \n\t"



<cpp:ifdef pos:start="307:1" pos:end="307:18">#<cpp:directive pos:start="307:2" pos:end="307:6">ifdef</cpp:directive> <name pos:start="307:8" pos:end="307:18">ARCH_X86_64</name></cpp:ifdef>



<cpp:define pos:start="311:1" pos:end="327:5">#<cpp:directive pos:start="311:2" pos:end="311:7">define</cpp:directive> <cpp:macro pos:start="311:9" pos:end="311:21"><name pos:start="311:9" pos:end="311:21">FUNNY_UV_CODE</name></cpp:macro> \

            <cpp:value pos:start="313:13" pos:end="327:5">"movl       (%%"REG_b"), %%esi      \n\t"\

            "call               *%4             \n\t"\

            "movl (%%"REG_b", %%"REG_a"), %%esi \n\t"\

            "add          %%"REG_S", %%"REG_c"  \n\t"\

            "add          %%"REG_a", %%"REG_D"  \n\t"\

            "xor          %%"REG_a", %%"REG_a"  \n\t"\



#else</cpp:value></cpp:define>



<cpp:define pos:start="331:1" pos:end="345:6">#<cpp:directive pos:start="331:2" pos:end="331:7">define</cpp:directive> <cpp:macro pos:start="331:9" pos:end="331:21"><name pos:start="331:9" pos:end="331:21">FUNNY_UV_CODE</name></cpp:macro> \

            <cpp:value pos:start="333:13" pos:end="345:6">"movl       (%%"REG_b"), %%esi      \n\t"\

            "call               *%4             \n\t"\

            "addl (%%"REG_b", %%"REG_a"), %%"REG_c" \n\t"\

            "add          %%"REG_a", %%"REG_D"  \n\t"\

            "xor          %%"REG_a", %%"REG_a"  \n\t"\



#endif</cpp:value></cpp:define> <comment type="block" pos:start="345:8" pos:end="345:24">/* ARCH_X86_64 */</comment>



FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE

            "xor          %%"REG_a", %%"REG_a"  \n\t" <comment type="line" pos:start="357:55" pos:end="357:58">// i</comment>

            "mov                 %5, %%"REG_c"  \n\t" <comment type="line" pos:start="359:55" pos:end="359:60">// src</comment>

            "mov                 %1, %%"REG_D"  \n\t" <comment type="line" pos:start="361:55" pos:end="361:61">// buf1</comment>

            "add              $"AV_STRINGIFY(VOF)", %%"REG_D"  \n\t"

            PREFETCH"   (%%"REG_c")             \n\t"

            PREFETCH" 32(%%"REG_c")             \n\t"

            PREFETCH" 64(%%"REG_c")             \n\t"



FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE



<cpp:if pos:start="383:1" pos:end="383:16">#<cpp:directive pos:start="383:2" pos:end="383:3">if</cpp:directive> <expr pos:start="383:5" pos:end="383:16"><call pos:start="383:5" pos:end="383:16"><name pos:start="383:5" pos:end="383:11">defined</name><argument_list pos:start="383:12" pos:end="383:16">(<argument pos:start="383:13" pos:end="383:15"><expr pos:start="383:13" pos:end="383:15"><name pos:start="383:13" pos:end="383:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            "mov %6, %%"REG_b"    \n\t"

<cpp:endif pos:start="387:1" pos:end="387:6">#<cpp:directive pos:start="387:2" pos:end="387:6">endif</cpp:directive></cpp:endif>

            :: "m" (src1), "m" (dst), "m" (mmx2Filter), "m" (mmx2FilterPos),

            "m" (funnyUVCode), "m" (src2)

<cpp:if pos:start="393:1" pos:end="393:16">#<cpp:directive pos:start="393:2" pos:end="393:3">if</cpp:directive> <expr pos:start="393:5" pos:end="393:16"><call pos:start="393:5" pos:end="393:16"><name pos:start="393:5" pos:end="393:11">defined</name><argument_list pos:start="393:12" pos:end="393:16">(<argument pos:start="393:13" pos:end="393:15"><expr pos:start="393:13" pos:end="393:15"><name pos:start="393:13" pos:end="393:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

            ,"m" (ebxsave)

<cpp:endif pos:start="397:1" pos:end="397:6">#<cpp:directive pos:start="397:2" pos:end="397:6">endif</cpp:directive></cpp:endif>

            : "%"REG_a, "%"REG_c, "%"REG_d, "%"REG_S, "%"REG_D

<cpp:if pos:start="401:1" pos:end="401:17">#<cpp:directive pos:start="401:2" pos:end="401:3">if</cpp:directive> <expr pos:start="401:5" pos:end="401:17"><operator pos:start="401:5" pos:end="401:5">!</operator><call pos:start="401:6" pos:end="401:17"><name pos:start="401:6" pos:end="401:12">defined</name><argument_list pos:start="401:13" pos:end="401:17">(<argument pos:start="401:14" pos:end="401:16"><expr pos:start="401:14" pos:end="401:16"><name pos:start="401:14" pos:end="401:16">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

             ,"%"REG_b

<cpp:endif pos:start="405:1" pos:end="405:6">#<cpp:directive pos:start="405:2" pos:end="405:6">endif</cpp:directive></cpp:endif>

            );</asm>

            <for pos:start="409:13" pos:end="419:13">for <control pos:start="409:17" pos:end="409:58">(<init pos:start="409:18" pos:end="409:30"><expr pos:start="409:18" pos:end="409:29"><name pos:start="409:18" pos:end="409:18">i</name><operator pos:start="409:19" pos:end="409:19">=</operator><name pos:start="409:20" pos:end="409:27">dstWidth</name><operator pos:start="409:28" pos:end="409:28">-</operator><literal type="number" pos:start="409:29" pos:end="409:29">1</literal></expr>;</init> <condition pos:start="409:32" pos:end="409:53"><expr pos:start="409:32" pos:end="409:52"><operator pos:start="409:32" pos:end="409:32">(</operator><name pos:start="409:33" pos:end="409:33">i</name><operator pos:start="409:34" pos:end="409:34">*</operator><name pos:start="409:35" pos:end="409:38">xInc</name><operator pos:start="409:39" pos:end="409:39">)</operator><operator pos:start="409:40" pos:end="409:41">&gt;&gt;</operator><literal type="number" pos:start="409:42" pos:end="409:43">16</literal> <operator pos:start="409:45" pos:end="409:46">&gt;=</operator><name pos:start="409:47" pos:end="409:50">srcW</name><operator pos:start="409:51" pos:end="409:51">-</operator><literal type="number" pos:start="409:52" pos:end="409:52">1</literal></expr>;</condition> <incr pos:start="409:55" pos:end="409:57"><expr pos:start="409:55" pos:end="409:57"><name pos:start="409:55" pos:end="409:55">i</name><operator pos:start="409:56" pos:end="409:57">--</operator></expr></incr>)</control>

            <block pos:start="411:13" pos:end="419:13">{<block_content pos:start="415:17" pos:end="417:47">

                <comment type="line" pos:start="413:17" pos:end="413:58">//printf("%d %d %d\n", dstWidth, i, srcW);</comment>

                <expr_stmt pos:start="415:17" pos:end="415:42"><expr pos:start="415:17" pos:end="415:41"><name pos:start="415:17" pos:end="415:22"><name pos:start="415:17" pos:end="415:19">dst</name><index pos:start="415:20" pos:end="415:22">[<expr pos:start="415:21" pos:end="415:21"><name pos:start="415:21" pos:end="415:21">i</name></expr>]</index></name> <operator pos:start="415:24" pos:end="415:24">=</operator> <name pos:start="415:26" pos:end="415:37"><name pos:start="415:26" pos:end="415:29">src1</name><index pos:start="415:30" pos:end="415:37">[<expr pos:start="415:31" pos:end="415:36"><name pos:start="415:31" pos:end="415:34">srcW</name><operator pos:start="415:35" pos:end="415:35">-</operator><literal type="number" pos:start="415:36" pos:end="415:36">1</literal></expr>]</index></name><operator pos:start="415:38" pos:end="415:38">*</operator><literal type="number" pos:start="415:39" pos:end="415:41">128</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="417:17" pos:end="417:47"><expr pos:start="417:17" pos:end="417:46"><name pos:start="417:17" pos:end="417:27"><name pos:start="417:17" pos:end="417:19">dst</name><index pos:start="417:20" pos:end="417:27">[<expr pos:start="417:21" pos:end="417:26"><name pos:start="417:21" pos:end="417:21">i</name><operator pos:start="417:22" pos:end="417:22">+</operator><name pos:start="417:23" pos:end="417:26">VOFW</name></expr>]</index></name> <operator pos:start="417:29" pos:end="417:29">=</operator> <name pos:start="417:31" pos:end="417:42"><name pos:start="417:31" pos:end="417:34">src2</name><index pos:start="417:35" pos:end="417:42">[<expr pos:start="417:36" pos:end="417:41"><name pos:start="417:36" pos:end="417:39">srcW</name><operator pos:start="417:40" pos:end="417:40">-</operator><literal type="number" pos:start="417:41" pos:end="417:41">1</literal></expr>]</index></name><operator pos:start="417:43" pos:end="417:43">*</operator><literal type="number" pos:start="417:44" pos:end="417:46">128</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if>

        <else pos:start="423:9" pos:end="526:0">else

        <block pos:start="425:9" pos:end="526:0">{<block_content pos:start="429:13" pos:end="520:0">

<cpp:endif pos:start="427:1" pos:end="427:6">#<cpp:directive pos:start="427:2" pos:end="427:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="427:8" pos:end="427:22">/* HAVE_MMX2 */</comment>

            <decl_stmt pos:start="429:13" pos:end="429:50"><decl pos:start="429:13" pos:end="429:49"><type pos:start="429:13" pos:end="429:16"><name pos:start="429:13" pos:end="429:16">long</name></type> <name pos:start="429:18" pos:end="429:27">xInc_shr16</name> <init pos:start="429:29" pos:end="429:49">= <expr pos:start="429:31" pos:end="429:49"><operator pos:start="429:31" pos:end="429:31">(</operator><name pos:start="429:32" pos:end="429:35">long</name><operator pos:start="429:36" pos:end="429:36">)</operator> <operator pos:start="429:38" pos:end="429:38">(</operator><name pos:start="429:39" pos:end="429:42">xInc</name> <operator pos:start="429:44" pos:end="429:45">&gt;&gt;</operator> <literal type="number" pos:start="429:47" pos:end="429:48">16</literal><operator pos:start="429:49" pos:end="429:49">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="431:13" pos:end="431:47"><decl pos:start="431:13" pos:end="431:46"><type pos:start="431:13" pos:end="431:20"><name pos:start="431:13" pos:end="431:20">uint16_t</name></type> <name pos:start="431:22" pos:end="431:30">xInc_mask</name> <init pos:start="431:32" pos:end="431:46">= <expr pos:start="431:34" pos:end="431:46"><name pos:start="431:34" pos:end="431:37">xInc</name> <operator pos:start="431:39" pos:end="431:39">&amp;</operator> <literal type="number" pos:start="431:41" pos:end="431:46">0xffff</literal></expr></init></decl>;</decl_stmt>

            <asm pos:start="433:13" pos:end="520:0">asm <specifier pos:start="433:17" pos:end="433:24">volatile</specifier>(

            "xor %%"REG_a", %%"REG_a"               \n\t" <comment type="line" pos:start="435:59" pos:end="435:62">// i</comment>

            "xor %%"REG_d", %%"REG_d"               \n\t" <comment type="line" pos:start="437:59" pos:end="437:63">// xx</comment>

            "xorl    %%ecx, %%ecx                   \n\t" <comment type="line" pos:start="439:59" pos:end="439:69">// 2*xalpha</comment>

            ASMALIGN(4)

            "1:                                     \n\t"

            "mov        %0, %%"REG_S"               \n\t"

            "movzbl  (%%"REG_S", %%"REG_d"), %%edi  \n\t" <comment type="line" pos:start="447:59" pos:end="447:67">//src[xx]</comment>

            "movzbl 1(%%"REG_S", %%"REG_d"), %%esi  \n\t" <comment type="line" pos:start="449:59" pos:end="449:69">//src[xx+1]</comment>

            "subl    %%edi, %%esi                   \n\t" <comment type="line" pos:start="451:59" pos:end="451:79">//src[xx+1] - src[xx]</comment>

            "imull   %%ecx, %%esi                   \n\t" <comment type="line" pos:start="453:59" pos:end="453:90">//(src[xx+1] - src[xx])*2*xalpha</comment>

            "shll      $16, %%edi                   \n\t"

            "addl    %%edi, %%esi                   \n\t" <comment type="line" pos:start="457:59" pos:end="457:101">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

            "mov        %1, %%"REG_D"               \n\t"

            "shrl       $9, %%esi                   \n\t"

            "movw     %%si, (%%"REG_D", %%"REG_a", 2)   \n\t"



            "movzbl    (%5, %%"REG_d"), %%edi       \n\t" <comment type="line" pos:start="467:59" pos:end="467:67">//src[xx]</comment>

            "movzbl   1(%5, %%"REG_d"), %%esi       \n\t" <comment type="line" pos:start="469:59" pos:end="469:69">//src[xx+1]</comment>

            "subl    %%edi, %%esi                   \n\t" <comment type="line" pos:start="471:59" pos:end="471:79">//src[xx+1] - src[xx]</comment>

            "imull   %%ecx, %%esi                   \n\t" <comment type="line" pos:start="473:59" pos:end="473:90">//(src[xx+1] - src[xx])*2*xalpha</comment>

            "shll      $16, %%edi                   \n\t"

            "addl    %%edi, %%esi                   \n\t" <comment type="line" pos:start="477:59" pos:end="477:101">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

            "mov        %1, %%"REG_D"               \n\t"

            "shrl       $9, %%esi                   \n\t"

            "movw     %%si, "AV_STRINGIFY(VOF)"(%%"REG_D", %%"REG_a", 2)   \n\t"



            "addw       %4, %%cx                    \n\t" <comment type="line" pos:start="487:59" pos:end="487:81">//2*xalpha += xInc&amp;0xFF</comment>

            "adc        %3, %%"REG_d"               \n\t" <comment type="line" pos:start="489:59" pos:end="489:80">//xx+= xInc&gt;&gt;8 + carry</comment>

            "add        $1, %%"REG_a"               \n\t"

            "cmp        %2, %%"REG_a"               \n\t"

            " jb        1b                          \n\t"



<comment type="block" pos:start="499:1" pos:end="501:41">/* GCC 3.3 makes MPlayer crash on IA-32 machines when using "g" operand here,

   which is needed to support GCC 4.0. */</comment>

<cpp:if pos:start="503:1" pos:end="503:86">#<cpp:directive pos:start="503:2" pos:end="503:3">if</cpp:directive> <expr pos:start="503:5" pos:end="503:86"><call pos:start="503:5" pos:end="503:24"><name pos:start="503:5" pos:end="503:11">defined</name><argument_list pos:start="503:12" pos:end="503:24">(<argument pos:start="503:13" pos:end="503:23"><expr pos:start="503:13" pos:end="503:23"><name pos:start="503:13" pos:end="503:23">ARCH_X86_64</name></expr></argument>)</argument_list></call> <operator pos:start="503:26" pos:end="503:27">&amp;&amp;</operator> <operator pos:start="503:29" pos:end="503:29">(</operator><operator pos:start="503:30" pos:end="503:30">(</operator><name pos:start="503:31" pos:end="503:38">__GNUC__</name> <operator pos:start="503:40" pos:end="503:40">&gt;</operator> <literal type="number" pos:start="503:42" pos:end="503:42">3</literal><operator pos:start="503:43" pos:end="503:43">)</operator> <operator pos:start="503:45" pos:end="503:46">||</operator> <operator pos:start="503:48" pos:end="503:48">(</operator><name pos:start="503:49" pos:end="503:56">__GNUC__</name> <operator pos:start="503:58" pos:end="503:59">==</operator> <literal type="number" pos:start="503:61" pos:end="503:61">3</literal> <operator pos:start="503:63" pos:end="503:64">&amp;&amp;</operator> <name pos:start="503:66" pos:end="503:79">__GNUC_MINOR__</name> <operator pos:start="503:81" pos:end="503:82">&gt;=</operator> <literal type="number" pos:start="503:84" pos:end="503:84">4</literal><operator pos:start="503:85" pos:end="503:85">)</operator><operator pos:start="503:86" pos:end="503:86">)</operator></expr></cpp:if>

            :: "m" (src1), "m" (dst), "g" ((long)dstWidth), "m" (xInc_shr16), "m" (xInc_mask),

<cpp:else pos:start="507:1" pos:end="507:5">#<cpp:directive pos:start="507:2" pos:end="507:5">else</cpp:directive></cpp:else>

            :: "m" (src1), "m" (dst), "m" ((long)dstWidth), "m" (xInc_shr16), "m" (xInc_mask),

<cpp:endif pos:start="511:1" pos:end="511:6">#<cpp:directive pos:start="511:2" pos:end="511:6">endif</cpp:directive></cpp:endif>

            "r" (src2)

            : "%"REG_a, "%"REG_d, "%ecx", "%"REG_D, "%esi"

            );</asm>

<cpp:ifdef pos:start="519:1" pos:end="519:16">#<cpp:directive pos:start="519:2" pos:end="519:6">ifdef</cpp:directive> <name pos:start="519:8" pos:end="519:16">HAVE_MMX2</name></cpp:ifdef>

        </block_content>}</block></else></if_stmt> <comment type="line" pos:start="521:11" pos:end="521:33">//if MMX2 can't be used</comment>

<cpp:endif pos:start="523:1" pos:end="523:6">#<cpp:directive pos:start="523:2" pos:end="523:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="525:1" pos:end="525:5">#<cpp:directive pos:start="525:2" pos:end="525:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="527:9" pos:end="527:14"><decl pos:start="527:9" pos:end="527:13"><type pos:start="527:9" pos:end="527:11"><name pos:start="527:9" pos:end="527:11">int</name></type> <name pos:start="527:13" pos:end="527:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="529:9" pos:end="529:28"><decl pos:start="529:9" pos:end="529:27"><type pos:start="529:9" pos:end="529:20"><name pos:start="529:9" pos:end="529:16">unsigned</name> <name pos:start="529:18" pos:end="529:20">int</name></type> <name pos:start="529:22" pos:end="529:25">xpos</name><init pos:start="529:26" pos:end="529:27">=<expr pos:start="529:27" pos:end="529:27"><literal type="number" pos:start="529:27" pos:end="529:27">0</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="531:9" pos:end="556:0">for <control pos:start="531:13" pos:end="531:32">(<init pos:start="531:14" pos:end="531:17"><expr pos:start="531:14" pos:end="531:16"><name pos:start="531:14" pos:end="531:14">i</name><operator pos:start="531:15" pos:end="531:15">=</operator><literal type="number" pos:start="531:16" pos:end="531:16">0</literal></expr>;</init><condition pos:start="531:18" pos:end="531:28"><expr pos:start="531:18" pos:end="531:27"><name pos:start="531:18" pos:end="531:18">i</name><operator pos:start="531:19" pos:end="531:19">&lt;</operator><name pos:start="531:20" pos:end="531:27">dstWidth</name></expr>;</condition><incr pos:start="531:29" pos:end="531:31"><expr pos:start="531:29" pos:end="531:31"><name pos:start="531:29" pos:end="531:29">i</name><operator pos:start="531:30" pos:end="531:31">++</operator></expr></incr>)</control>

        <block pos:start="533:9" pos:end="556:0">{<block_content pos:start="535:13" pos:end="551:23">

            <decl_stmt pos:start="535:13" pos:end="535:46"><decl pos:start="535:13" pos:end="535:45"><type pos:start="535:13" pos:end="535:33"><specifier pos:start="535:13" pos:end="535:20">register</specifier> <name pos:start="535:22" pos:end="535:29">unsigned</name> <name pos:start="535:31" pos:end="535:33">int</name></type> <name pos:start="535:35" pos:end="535:36">xx</name><init pos:start="535:37" pos:end="535:45">=<expr pos:start="535:38" pos:end="535:45"><name pos:start="535:38" pos:end="535:41">xpos</name><operator pos:start="535:42" pos:end="535:43">&gt;&gt;</operator><literal type="number" pos:start="535:44" pos:end="535:45">16</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="537:13" pos:end="537:58"><decl pos:start="537:13" pos:end="537:57"><type pos:start="537:13" pos:end="537:33"><specifier pos:start="537:13" pos:end="537:20">register</specifier> <name pos:start="537:22" pos:end="537:29">unsigned</name> <name pos:start="537:31" pos:end="537:33">int</name></type> <name pos:start="537:35" pos:end="537:40">xalpha</name><init pos:start="537:41" pos:end="537:57">=<expr pos:start="537:42" pos:end="537:57"><operator pos:start="537:42" pos:end="537:42">(</operator><name pos:start="537:43" pos:end="537:46">xpos</name><operator pos:start="537:47" pos:end="537:47">&amp;</operator><literal type="number" pos:start="537:48" pos:end="537:53">0xFFFF</literal><operator pos:start="537:54" pos:end="537:54">)</operator><operator pos:start="537:55" pos:end="537:56">&gt;&gt;</operator><literal type="number" pos:start="537:57" pos:end="537:57">9</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="539:13" pos:end="539:61"><expr pos:start="539:13" pos:end="539:60"><name pos:start="539:13" pos:end="539:18"><name pos:start="539:13" pos:end="539:15">dst</name><index pos:start="539:16" pos:end="539:18">[<expr pos:start="539:17" pos:end="539:17"><name pos:start="539:17" pos:end="539:17">i</name></expr>]</index></name><operator pos:start="539:19" pos:end="539:19">=</operator><operator pos:start="539:20" pos:end="539:20">(</operator><name pos:start="539:21" pos:end="539:28"><name pos:start="539:21" pos:end="539:24">src1</name><index pos:start="539:25" pos:end="539:28">[<expr pos:start="539:26" pos:end="539:27"><name pos:start="539:26" pos:end="539:27">xx</name></expr>]</index></name><operator pos:start="539:29" pos:end="539:29">*</operator><operator pos:start="539:30" pos:end="539:30">(</operator><name pos:start="539:31" pos:end="539:36">xalpha</name><operator pos:start="539:37" pos:end="539:37">^</operator><literal type="number" pos:start="539:38" pos:end="539:40">127</literal><operator pos:start="539:41" pos:end="539:41">)</operator><operator pos:start="539:42" pos:end="539:42">+</operator><name pos:start="539:43" pos:end="539:52"><name pos:start="539:43" pos:end="539:46">src1</name><index pos:start="539:47" pos:end="539:52">[<expr pos:start="539:48" pos:end="539:51"><name pos:start="539:48" pos:end="539:49">xx</name><operator pos:start="539:50" pos:end="539:50">+</operator><literal type="number" pos:start="539:51" pos:end="539:51">1</literal></expr>]</index></name><operator pos:start="539:53" pos:end="539:53">*</operator><name pos:start="539:54" pos:end="539:59">xalpha</name><operator pos:start="539:60" pos:end="539:60">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="541:13" pos:end="541:66"><expr pos:start="541:13" pos:end="541:65"><name pos:start="541:13" pos:end="541:23"><name pos:start="541:13" pos:end="541:15">dst</name><index pos:start="541:16" pos:end="541:23">[<expr pos:start="541:17" pos:end="541:22"><name pos:start="541:17" pos:end="541:17">i</name><operator pos:start="541:18" pos:end="541:18">+</operator><name pos:start="541:19" pos:end="541:22">VOFW</name></expr>]</index></name><operator pos:start="541:24" pos:end="541:24">=</operator><operator pos:start="541:25" pos:end="541:25">(</operator><name pos:start="541:26" pos:end="541:33"><name pos:start="541:26" pos:end="541:29">src2</name><index pos:start="541:30" pos:end="541:33">[<expr pos:start="541:31" pos:end="541:32"><name pos:start="541:31" pos:end="541:32">xx</name></expr>]</index></name><operator pos:start="541:34" pos:end="541:34">*</operator><operator pos:start="541:35" pos:end="541:35">(</operator><name pos:start="541:36" pos:end="541:41">xalpha</name><operator pos:start="541:42" pos:end="541:42">^</operator><literal type="number" pos:start="541:43" pos:end="541:45">127</literal><operator pos:start="541:46" pos:end="541:46">)</operator><operator pos:start="541:47" pos:end="541:47">+</operator><name pos:start="541:48" pos:end="541:57"><name pos:start="541:48" pos:end="541:51">src2</name><index pos:start="541:52" pos:end="541:57">[<expr pos:start="541:53" pos:end="541:56"><name pos:start="541:53" pos:end="541:54">xx</name><operator pos:start="541:55" pos:end="541:55">+</operator><literal type="number" pos:start="541:56" pos:end="541:56">1</literal></expr>]</index></name><operator pos:start="541:58" pos:end="541:58">*</operator><name pos:start="541:59" pos:end="541:64">xalpha</name><operator pos:start="541:65" pos:end="541:65">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="543:13" pos:end="549:14">/* slower

            dst[i]= (src1[xx]&lt;&lt;7) + (src1[xx+1] - src1[xx])*xalpha;

            dst[i+VOFW]=(src2[xx]&lt;&lt;7) + (src2[xx+1] - src2[xx])*xalpha;

            */</comment>

            <expr_stmt pos:start="551:13" pos:end="551:23"><expr pos:start="551:13" pos:end="551:22"><name pos:start="551:13" pos:end="551:16">xpos</name><operator pos:start="551:17" pos:end="551:18">+=</operator><name pos:start="551:19" pos:end="551:22">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

<cpp:endif pos:start="555:1" pos:end="555:6">#<cpp:directive pos:start="555:2" pos:end="555:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="555:8" pos:end="555:30">/* defined(ARCH_X86) */</comment>

    </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="559:5" pos:end="589:5"><if pos:start="559:5" pos:end="589:5">if<condition pos:start="559:7" pos:end="559:83">(<expr pos:start="559:8" pos:end="559:82"><name pos:start="559:8" pos:end="559:18"><name pos:start="559:8" pos:end="559:8">c</name><operator pos:start="559:9" pos:end="559:10">-&gt;</operator><name pos:start="559:11" pos:end="559:18">srcRange</name></name> <operator pos:start="559:20" pos:end="559:21">!=</operator> <name pos:start="559:23" pos:end="559:33"><name pos:start="559:23" pos:end="559:23">c</name><operator pos:start="559:24" pos:end="559:25">-&gt;</operator><name pos:start="559:26" pos:end="559:33">dstRange</name></name> <operator pos:start="559:35" pos:end="559:36">&amp;&amp;</operator> <operator pos:start="559:38" pos:end="559:38">!</operator><operator pos:start="559:39" pos:end="559:39">(</operator><call pos:start="559:40" pos:end="559:58"><name pos:start="559:40" pos:end="559:44">isRGB</name><argument_list pos:start="559:45" pos:end="559:58">(<argument pos:start="559:46" pos:end="559:57"><expr pos:start="559:46" pos:end="559:57"><name pos:start="559:46" pos:end="559:57"><name pos:start="559:46" pos:end="559:46">c</name><operator pos:start="559:47" pos:end="559:48">-&gt;</operator><name pos:start="559:49" pos:end="559:57">dstFormat</name></name></expr></argument>)</argument_list></call> <operator pos:start="559:60" pos:end="559:61">||</operator> <call pos:start="559:63" pos:end="559:81"><name pos:start="559:63" pos:end="559:67">isBGR</name><argument_list pos:start="559:68" pos:end="559:81">(<argument pos:start="559:69" pos:end="559:80"><expr pos:start="559:69" pos:end="559:80"><name pos:start="559:69" pos:end="559:80"><name pos:start="559:69" pos:end="559:69">c</name><operator pos:start="559:70" pos:end="559:71">-&gt;</operator><name pos:start="559:72" pos:end="559:80">dstFormat</name></name></expr></argument>)</argument_list></call><operator pos:start="559:82" pos:end="559:82">)</operator></expr>)</condition><block pos:start="559:84" pos:end="589:5">{<block_content pos:start="561:9" pos:end="587:9">

        <decl_stmt pos:start="561:9" pos:end="561:14"><decl pos:start="561:9" pos:end="561:13"><type pos:start="561:9" pos:end="561:11"><name pos:start="561:9" pos:end="561:11">int</name></type> <name pos:start="561:13" pos:end="561:13">i</name></decl>;</decl_stmt>

        <comment type="line" pos:start="563:9" pos:end="563:75">//FIXME all pal and rgb srcFormats could do this convertion as well</comment>

        <comment type="line" pos:start="565:9" pos:end="565:86">//FIXME all scalers more complex than bilinear could do half of this transform</comment>

        <if_stmt pos:start="567:9" pos:end="587:9"><if pos:start="567:9" pos:end="577:9">if<condition pos:start="567:11" pos:end="567:23">(<expr pos:start="567:12" pos:end="567:22"><name pos:start="567:12" pos:end="567:22"><name pos:start="567:12" pos:end="567:12">c</name><operator pos:start="567:13" pos:end="567:14">-&gt;</operator><name pos:start="567:15" pos:end="567:22">srcRange</name></name></expr>)</condition><block pos:start="567:24" pos:end="577:9">{<block_content pos:start="569:13" pos:end="575:13">

            <for pos:start="569:13" pos:end="575:13">for <control pos:start="569:17" pos:end="569:38">(<init pos:start="569:18" pos:end="569:21"><expr pos:start="569:18" pos:end="569:20"><name pos:start="569:18" pos:end="569:18">i</name><operator pos:start="569:19" pos:end="569:19">=</operator><literal type="number" pos:start="569:20" pos:end="569:20">0</literal></expr>;</init> <condition pos:start="569:23" pos:end="569:33"><expr pos:start="569:23" pos:end="569:32"><name pos:start="569:23" pos:end="569:23">i</name><operator pos:start="569:24" pos:end="569:24">&lt;</operator><name pos:start="569:25" pos:end="569:32">dstWidth</name></expr>;</condition> <incr pos:start="569:35" pos:end="569:37"><expr pos:start="569:35" pos:end="569:37"><name pos:start="569:35" pos:end="569:35">i</name><operator pos:start="569:36" pos:end="569:37">++</operator></expr></incr>)</control><block pos:start="569:39" pos:end="575:13">{<block_content pos:start="571:17" pos:end="573:62">

                <expr_stmt pos:start="571:17" pos:end="571:62"><expr pos:start="571:17" pos:end="571:61"><name pos:start="571:17" pos:end="571:27"><name pos:start="571:17" pos:end="571:19">dst</name><index pos:start="571:20" pos:end="571:27">[<expr pos:start="571:21" pos:end="571:21"><name pos:start="571:21" pos:end="571:21">i</name></expr>     ]</index></name><operator pos:start="571:28" pos:end="571:28">=</operator> <operator pos:start="571:30" pos:end="571:30">(</operator><name pos:start="571:31" pos:end="571:41"><name pos:start="571:31" pos:end="571:33">dst</name><index pos:start="571:34" pos:end="571:41">[<expr pos:start="571:35" pos:end="571:35"><name pos:start="571:35" pos:end="571:35">i</name></expr>     ]</index></name><operator pos:start="571:42" pos:end="571:42">*</operator><literal type="number" pos:start="571:43" pos:end="571:48">1799</literal> <operator pos:start="571:48" pos:end="571:48">+</operator> <literal type="number" pos:start="571:50" pos:end="571:56">4081085</literal><operator pos:start="571:57" pos:end="571:57">)</operator><operator pos:start="571:58" pos:end="571:59">&gt;&gt;</operator><literal type="number" pos:start="571:60" pos:end="571:61">11</literal></expr>;</expr_stmt> <comment type="line" pos:start="571:64" pos:end="571:69">//1469</comment>

                <expr_stmt pos:start="573:17" pos:end="573:62"><expr pos:start="573:17" pos:end="573:61"><name pos:start="573:17" pos:end="573:27"><name pos:start="573:17" pos:end="573:19">dst</name><index pos:start="573:20" pos:end="573:27">[<expr pos:start="573:21" pos:end="573:26"><name pos:start="573:21" pos:end="573:21">i</name><operator pos:start="573:22" pos:end="573:22">+</operator><name pos:start="573:23" pos:end="573:26">VOFW</name></expr>]</index></name><operator pos:start="573:28" pos:end="573:28">=</operator> <operator pos:start="573:30" pos:end="573:30">(</operator><name pos:start="573:31" pos:end="573:41"><name pos:start="573:31" pos:end="573:33">dst</name><index pos:start="573:34" pos:end="573:41">[<expr pos:start="573:35" pos:end="573:40"><name pos:start="573:35" pos:end="573:35">i</name><operator pos:start="573:36" pos:end="573:36">+</operator><name pos:start="573:37" pos:end="573:40">VOFW</name></expr>]</index></name><operator pos:start="573:42" pos:end="573:42">*</operator><literal type="number" pos:start="573:43" pos:end="573:48">1799</literal> <operator pos:start="573:48" pos:end="573:48">+</operator> <literal type="number" pos:start="573:50" pos:end="573:56">4081085</literal><operator pos:start="573:57" pos:end="573:57">)</operator><operator pos:start="573:58" pos:end="573:59">&gt;&gt;</operator><literal type="number" pos:start="573:60" pos:end="573:61">11</literal></expr>;</expr_stmt> <comment type="line" pos:start="573:64" pos:end="573:69">//1469</comment>

            </block_content>}</block></for>

        </block_content>}</block></if><else pos:start="577:10" pos:end="587:9">else<block pos:start="577:14" pos:end="587:9">{<block_content pos:start="579:13" pos:end="585:13">

            <for pos:start="579:13" pos:end="585:13">for <control pos:start="579:17" pos:end="579:38">(<init pos:start="579:18" pos:end="579:21"><expr pos:start="579:18" pos:end="579:20"><name pos:start="579:18" pos:end="579:18">i</name><operator pos:start="579:19" pos:end="579:19">=</operator><literal type="number" pos:start="579:20" pos:end="579:20">0</literal></expr>;</init> <condition pos:start="579:23" pos:end="579:33"><expr pos:start="579:23" pos:end="579:32"><name pos:start="579:23" pos:end="579:23">i</name><operator pos:start="579:24" pos:end="579:24">&lt;</operator><name pos:start="579:25" pos:end="579:32">dstWidth</name></expr>;</condition> <incr pos:start="579:35" pos:end="579:37"><expr pos:start="579:35" pos:end="579:37"><name pos:start="579:35" pos:end="579:35">i</name><operator pos:start="579:36" pos:end="579:37">++</operator></expr></incr>)</control><block pos:start="579:39" pos:end="585:13">{<block_content pos:start="581:17" pos:end="583:75">

                <expr_stmt pos:start="581:17" pos:end="581:75"><expr pos:start="581:17" pos:end="581:74"><name pos:start="581:17" pos:end="581:27"><name pos:start="581:17" pos:end="581:19">dst</name><index pos:start="581:20" pos:end="581:27">[<expr pos:start="581:21" pos:end="581:21"><name pos:start="581:21" pos:end="581:21">i</name></expr>     ]</index></name><operator pos:start="581:28" pos:end="581:28">=</operator> <operator pos:start="581:30" pos:end="581:30">(</operator><call pos:start="581:31" pos:end="581:54"><name pos:start="581:31" pos:end="581:35">FFMIN</name><argument_list pos:start="581:36" pos:end="581:54">(<argument pos:start="581:37" pos:end="581:47"><expr pos:start="581:37" pos:end="581:47"><name pos:start="581:37" pos:end="581:47"><name pos:start="581:37" pos:end="581:39">dst</name><index pos:start="581:40" pos:end="581:47">[<expr pos:start="581:41" pos:end="581:41"><name pos:start="581:41" pos:end="581:41">i</name></expr>     ]</index></name></expr></argument>,<argument pos:start="581:49" pos:end="581:53"><expr pos:start="581:49" pos:end="581:53"><literal type="number" pos:start="581:49" pos:end="581:53">30775</literal></expr></argument>)</argument_list></call><operator pos:start="581:55" pos:end="581:55">*</operator><literal type="number" pos:start="581:56" pos:end="581:61">4663</literal> <operator pos:start="581:61" pos:end="581:61">-</operator> <literal type="number" pos:start="581:63" pos:end="581:69">9289992</literal><operator pos:start="581:70" pos:end="581:70">)</operator><operator pos:start="581:71" pos:end="581:72">&gt;&gt;</operator><literal type="number" pos:start="581:73" pos:end="581:74">12</literal></expr>;</expr_stmt> <comment type="line" pos:start="581:77" pos:end="581:82">//-264</comment>

                <expr_stmt pos:start="583:17" pos:end="583:75"><expr pos:start="583:17" pos:end="583:74"><name pos:start="583:17" pos:end="583:27"><name pos:start="583:17" pos:end="583:19">dst</name><index pos:start="583:20" pos:end="583:27">[<expr pos:start="583:21" pos:end="583:26"><name pos:start="583:21" pos:end="583:21">i</name><operator pos:start="583:22" pos:end="583:22">+</operator><name pos:start="583:23" pos:end="583:26">VOFW</name></expr>]</index></name><operator pos:start="583:28" pos:end="583:28">=</operator> <operator pos:start="583:30" pos:end="583:30">(</operator><call pos:start="583:31" pos:end="583:54"><name pos:start="583:31" pos:end="583:35">FFMIN</name><argument_list pos:start="583:36" pos:end="583:54">(<argument pos:start="583:37" pos:end="583:47"><expr pos:start="583:37" pos:end="583:47"><name pos:start="583:37" pos:end="583:47"><name pos:start="583:37" pos:end="583:39">dst</name><index pos:start="583:40" pos:end="583:47">[<expr pos:start="583:41" pos:end="583:46"><name pos:start="583:41" pos:end="583:41">i</name><operator pos:start="583:42" pos:end="583:42">+</operator><name pos:start="583:43" pos:end="583:46">VOFW</name></expr>]</index></name></expr></argument>,<argument pos:start="583:49" pos:end="583:53"><expr pos:start="583:49" pos:end="583:53"><literal type="number" pos:start="583:49" pos:end="583:53">30775</literal></expr></argument>)</argument_list></call><operator pos:start="583:55" pos:end="583:55">*</operator><literal type="number" pos:start="583:56" pos:end="583:61">4663</literal> <operator pos:start="583:61" pos:end="583:61">-</operator> <literal type="number" pos:start="583:63" pos:end="583:69">9289992</literal><operator pos:start="583:70" pos:end="583:70">)</operator><operator pos:start="583:71" pos:end="583:72">&gt;&gt;</operator><literal type="number" pos:start="583:73" pos:end="583:74">12</literal></expr>;</expr_stmt> <comment type="line" pos:start="583:77" pos:end="583:82">//-264</comment>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
