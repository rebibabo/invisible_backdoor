<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4898.c" pos:tabs="8"><function pos:start="1:1" pos:end="237:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">do_fork</name><parameter_list pos:start="1:19" pos:end="5:42">(<parameter pos:start="1:20" pos:end="1:36"><decl pos:start="1:20" pos:end="1:36"><type pos:start="1:20" pos:end="1:36"><name pos:start="1:20" pos:end="1:31">CPUArchState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:56"><decl pos:start="1:39" pos:end="1:56"><type pos:start="1:39" pos:end="1:56"><name pos:start="1:39" pos:end="1:46">unsigned</name> <name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:56">flags</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:73"><decl pos:start="1:59" pos:end="1:73"><type pos:start="1:59" pos:end="1:73"><name pos:start="1:59" pos:end="1:67">abi_ulong</name></type> <name pos:start="1:69" pos:end="1:73">newsp</name></decl></parameter>,

                   <parameter pos:start="3:20" pos:end="3:42"><decl pos:start="3:20" pos:end="3:42"><type pos:start="3:20" pos:end="3:42"><name pos:start="3:20" pos:end="3:28">abi_ulong</name></type> <name pos:start="3:30" pos:end="3:42">parent_tidptr</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:63"><decl pos:start="3:45" pos:end="3:63"><type pos:start="3:45" pos:end="3:63"><name pos:start="3:45" pos:end="3:56">target_ulong</name></type> <name pos:start="3:58" pos:end="3:63">newtls</name></decl></parameter>,

                   <parameter pos:start="5:20" pos:end="5:41"><decl pos:start="5:20" pos:end="5:41"><type pos:start="5:20" pos:end="5:41"><name pos:start="5:20" pos:end="5:28">abi_ulong</name></type> <name pos:start="5:30" pos:end="5:41">child_tidptr</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="237:1">{<block_content pos:start="9:5" pos:end="235:15">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">cpu</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><call pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:31">ENV_GET_CPU</name><argument_list pos:start="9:32" pos:end="9:36">(<argument pos:start="9:33" pos:end="9:35"><expr pos:start="9:33" pos:end="9:35"><name pos:start="9:33" pos:end="9:35">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">TaskState</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:17">ts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:21">new_cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">CPUArchState</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:25">new_env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:27">nptl_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">sigset_t</name></type> <name pos:start="21:14" pos:end="21:20">sigmask</name></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:37">/* Emulate vfork() with fork() */</comment>

    <if_stmt pos:start="27:5" pos:end="29:43"><if pos:start="27:5" pos:end="29:43">if <condition pos:start="27:8" pos:end="27:28">(<expr pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:13">flags</name> <operator pos:start="27:15" pos:end="27:15">&amp;</operator> <name pos:start="27:17" pos:end="27:27">CLONE_VFORK</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:43"><block_content pos:start="29:9" pos:end="29:43">

        <expr_stmt pos:start="29:9" pos:end="29:43"><expr pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:13">flags</name> <operator pos:start="29:15" pos:end="29:16">&amp;=</operator> <operator pos:start="29:18" pos:end="29:18">~</operator><operator pos:start="29:19" pos:end="29:19">(</operator><name pos:start="29:20" pos:end="29:30">CLONE_VFORK</name> <operator pos:start="29:32" pos:end="29:32">|</operator> <name pos:start="29:34" pos:end="29:41">CLONE_VM</name><operator pos:start="29:42" pos:end="29:42">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="233:5"><if pos:start="33:5" pos:end="163:5">if <condition pos:start="33:8" pos:end="33:25">(<expr pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:13">flags</name> <operator pos:start="33:15" pos:end="33:15">&amp;</operator> <name pos:start="33:17" pos:end="33:24">CLONE_VM</name></expr>)</condition> <block pos:start="33:27" pos:end="163:5">{<block_content pos:start="35:9" pos:end="161:42">

        <decl_stmt pos:start="35:9" pos:end="35:56"><decl pos:start="35:9" pos:end="35:55"><type pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:17">TaskState</name> <modifier pos:start="35:19" pos:end="35:19">*</modifier></type><name pos:start="35:20" pos:end="35:28">parent_ts</name> <init pos:start="35:30" pos:end="35:55">= <expr pos:start="35:32" pos:end="35:55"><operator pos:start="35:32" pos:end="35:32">(</operator><name pos:start="35:33" pos:end="35:41">TaskState</name> <operator pos:start="35:43" pos:end="35:43">*</operator><operator pos:start="35:44" pos:end="35:44">)</operator><name pos:start="35:45" pos:end="35:55"><name pos:start="35:45" pos:end="35:47">cpu</name><operator pos:start="35:48" pos:end="35:49">-&gt;</operator><name pos:start="35:50" pos:end="35:55">opaque</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:29"><decl pos:start="37:9" pos:end="37:28"><type pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:23">new_thread_info</name></type> <name pos:start="37:25" pos:end="37:28">info</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:28"><decl pos:start="39:9" pos:end="39:27"><type pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:22">pthread_attr_t</name></type> <name pos:start="39:24" pos:end="39:27">attr</name></decl>;</decl_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:34"><expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:10">ts</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <call pos:start="43:14" pos:end="43:33"><name pos:start="43:14" pos:end="43:19">g_new0</name><argument_list pos:start="43:20" pos:end="43:33">(<argument pos:start="43:21" pos:end="43:29"><expr pos:start="43:21" pos:end="43:29"><name pos:start="43:21" pos:end="43:29">TaskState</name></expr></argument>, <argument pos:start="43:32" pos:end="43:32"><expr pos:start="43:32" pos:end="43:32"><literal type="number" pos:start="43:32" pos:end="43:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:28"><expr pos:start="45:9" pos:end="45:27"><call pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:23">init_task_state</name><argument_list pos:start="45:24" pos:end="45:27">(<argument pos:start="45:25" pos:end="45:26"><expr pos:start="45:25" pos:end="45:26"><name pos:start="45:25" pos:end="45:26">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="47:9" pos:end="47:43">/* we create a new CPU instance. */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:32"><expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:15">new_env</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="49:31"><name pos:start="49:19" pos:end="49:26">cpu_copy</name><argument_list pos:start="49:27" pos:end="49:31">(<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:30">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="51:9" pos:end="51:53">/* Init regs that differ from the parent.  */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:39"><expr pos:start="53:9" pos:end="53:38"><call pos:start="53:9" pos:end="53:38"><name pos:start="53:9" pos:end="53:22">cpu_clone_regs</name><argument_list pos:start="53:23" pos:end="53:38">(<argument pos:start="53:24" pos:end="53:30"><expr pos:start="53:24" pos:end="53:30"><name pos:start="53:24" pos:end="53:30">new_env</name></expr></argument>, <argument pos:start="53:33" pos:end="53:37"><expr pos:start="53:33" pos:end="53:37"><name pos:start="53:33" pos:end="53:37">newsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:15">new_cpu</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:38"><name pos:start="55:19" pos:end="55:29">ENV_GET_CPU</name><argument_list pos:start="55:30" pos:end="55:38">(<argument pos:start="55:31" pos:end="55:37"><expr pos:start="55:31" pos:end="55:37"><name pos:start="55:31" pos:end="55:37">new_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:29"><expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:15">new_cpu</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:23">opaque</name></name> <operator pos:start="57:25" pos:end="57:25">=</operator> <name pos:start="57:27" pos:end="57:28">ts</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:35"><expr pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:10">ts</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:16">bprm</name></name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:34"><name pos:start="59:20" pos:end="59:28">parent_ts</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:34">bprm</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:35"><expr pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:10">ts</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:16">info</name></name> <operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:34"><name pos:start="61:20" pos:end="61:28">parent_ts</name><operator pos:start="61:29" pos:end="61:30">-&gt;</operator><name pos:start="61:31" pos:end="61:34">info</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:49"><expr pos:start="63:9" pos:end="63:48"><name pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:10">ts</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:23">signal_mask</name></name> <operator pos:start="63:25" pos:end="63:25">=</operator> <name pos:start="63:27" pos:end="63:48"><name pos:start="63:27" pos:end="63:35">parent_ts</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:48">signal_mask</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:27"><expr pos:start="65:9" pos:end="65:26"><name pos:start="65:9" pos:end="65:18">nptl_flags</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <name pos:start="65:22" pos:end="65:26">flags</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:36"><expr pos:start="67:9" pos:end="67:35"><name pos:start="67:9" pos:end="67:13">flags</name> <operator pos:start="67:15" pos:end="67:16">&amp;=</operator> <operator pos:start="67:18" pos:end="67:18">~</operator><name pos:start="67:19" pos:end="67:35">CLONE_NPTL_FLAGS2</name></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:46">(<expr pos:start="71:13" pos:end="71:45"><name pos:start="71:13" pos:end="71:22">nptl_flags</name> <operator pos:start="71:24" pos:end="71:24">&amp;</operator> <name pos:start="71:26" pos:end="71:45">CLONE_CHILD_CLEARTID</name></expr>)</condition> <block pos:start="71:48" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:44">

            <expr_stmt pos:start="73:13" pos:end="73:44"><expr pos:start="73:13" pos:end="73:43"><name pos:start="73:13" pos:end="73:28"><name pos:start="73:13" pos:end="73:14">ts</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:28">child_tidptr</name></name> <operator pos:start="73:30" pos:end="73:30">=</operator> <name pos:start="73:32" pos:end="73:43">child_tidptr</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="79:9" pos:end="81:42"><if pos:start="79:9" pos:end="81:42">if <condition pos:start="79:12" pos:end="79:38">(<expr pos:start="79:13" pos:end="79:37"><name pos:start="79:13" pos:end="79:22">nptl_flags</name> <operator pos:start="79:24" pos:end="79:24">&amp;</operator> <name pos:start="79:26" pos:end="79:37">CLONE_SETTLS</name></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:42"><block_content pos:start="81:13" pos:end="81:42">

            <expr_stmt pos:start="81:13" pos:end="81:42"><expr pos:start="81:13" pos:end="81:41"><call pos:start="81:13" pos:end="81:41"><name pos:start="81:13" pos:end="81:23">cpu_set_tls</name> <argument_list pos:start="81:25" pos:end="81:41">(<argument pos:start="81:26" pos:end="81:32"><expr pos:start="81:26" pos:end="81:32"><name pos:start="81:26" pos:end="81:32">new_env</name></expr></argument>, <argument pos:start="81:35" pos:end="81:40"><expr pos:start="81:35" pos:end="81:40"><name pos:start="81:35" pos:end="81:40">newtls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="85:9" pos:end="85:64">/* Grab a mutex so that thread setup appears atomic.  */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:40"><expr pos:start="87:9" pos:end="87:39"><call pos:start="87:9" pos:end="87:39"><name pos:start="87:9" pos:end="87:26">pthread_mutex_lock</name><argument_list pos:start="87:27" pos:end="87:39">(<argument pos:start="87:28" pos:end="87:38"><expr pos:start="87:28" pos:end="87:38"><operator pos:start="87:28" pos:end="87:28">&amp;</operator><name pos:start="87:29" pos:end="87:38">clone_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:39"><expr pos:start="91:9" pos:end="91:38"><call pos:start="91:9" pos:end="91:38"><name pos:start="91:9" pos:end="91:14">memset</name><argument_list pos:start="91:15" pos:end="91:38">(<argument pos:start="91:16" pos:end="91:20"><expr pos:start="91:16" pos:end="91:20"><operator pos:start="91:16" pos:end="91:16">&amp;</operator><name pos:start="91:17" pos:end="91:20">info</name></expr></argument>, <argument pos:start="91:23" pos:end="91:23"><expr pos:start="91:23" pos:end="91:23"><literal type="number" pos:start="91:23" pos:end="91:23">0</literal></expr></argument>, <argument pos:start="91:26" pos:end="91:37"><expr pos:start="91:26" pos:end="91:37"><sizeof pos:start="91:26" pos:end="91:37">sizeof<argument_list pos:start="91:32" pos:end="91:37">(<argument pos:start="91:33" pos:end="91:36"><expr pos:start="91:33" pos:end="91:36"><name pos:start="91:33" pos:end="91:36">info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:46"><expr pos:start="93:9" pos:end="93:45"><call pos:start="93:9" pos:end="93:45"><name pos:start="93:9" pos:end="93:26">pthread_mutex_init</name><argument_list pos:start="93:27" pos:end="93:45">(<argument pos:start="93:28" pos:end="93:38"><expr pos:start="93:28" pos:end="93:38"><operator pos:start="93:28" pos:end="93:28">&amp;</operator><name pos:start="93:29" pos:end="93:38"><name pos:start="93:29" pos:end="93:32">info</name><operator pos:start="93:33" pos:end="93:33">.</operator><name pos:start="93:34" pos:end="93:38">mutex</name></name></expr></argument>, <argument pos:start="93:41" pos:end="93:44"><expr pos:start="93:41" pos:end="93:44"><name pos:start="93:41" pos:end="93:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:40"><expr pos:start="95:9" pos:end="95:39"><call pos:start="95:9" pos:end="95:39"><name pos:start="95:9" pos:end="95:26">pthread_mutex_lock</name><argument_list pos:start="95:27" pos:end="95:39">(<argument pos:start="95:28" pos:end="95:38"><expr pos:start="95:28" pos:end="95:38"><operator pos:start="95:28" pos:end="95:28">&amp;</operator><name pos:start="95:29" pos:end="95:38"><name pos:start="95:29" pos:end="95:32">info</name><operator pos:start="95:33" pos:end="95:33">.</operator><name pos:start="95:34" pos:end="95:38">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:44"><expr pos:start="97:9" pos:end="97:43"><call pos:start="97:9" pos:end="97:43"><name pos:start="97:9" pos:end="97:25">pthread_cond_init</name><argument_list pos:start="97:26" pos:end="97:43">(<argument pos:start="97:27" pos:end="97:36"><expr pos:start="97:27" pos:end="97:36"><operator pos:start="97:27" pos:end="97:27">&amp;</operator><name pos:start="97:28" pos:end="97:36"><name pos:start="97:28" pos:end="97:31">info</name><operator pos:start="97:32" pos:end="97:32">.</operator><name pos:start="97:33" pos:end="97:36">cond</name></name></expr></argument>, <argument pos:start="97:39" pos:end="97:42"><expr pos:start="97:39" pos:end="97:42"><name pos:start="97:39" pos:end="97:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:27"><expr pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:16"><name pos:start="99:9" pos:end="99:12">info</name><operator pos:start="99:13" pos:end="99:13">.</operator><name pos:start="99:14" pos:end="99:16">env</name></name> <operator pos:start="99:18" pos:end="99:18">=</operator> <name pos:start="99:20" pos:end="99:26">new_env</name></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="103:45"><if pos:start="101:9" pos:end="103:45">if <condition pos:start="101:12" pos:end="101:44">(<expr pos:start="101:13" pos:end="101:43"><name pos:start="101:13" pos:end="101:22">nptl_flags</name> <operator pos:start="101:24" pos:end="101:24">&amp;</operator> <name pos:start="101:26" pos:end="101:43">CLONE_CHILD_SETTID</name></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="103:45"><block_content pos:start="103:13" pos:end="103:45">

            <expr_stmt pos:start="103:13" pos:end="103:45"><expr pos:start="103:13" pos:end="103:44"><name pos:start="103:13" pos:end="103:29"><name pos:start="103:13" pos:end="103:16">info</name><operator pos:start="103:17" pos:end="103:17">.</operator><name pos:start="103:18" pos:end="103:29">child_tidptr</name></name> <operator pos:start="103:31" pos:end="103:31">=</operator> <name pos:start="103:33" pos:end="103:44">child_tidptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="105:9" pos:end="107:47"><if pos:start="105:9" pos:end="107:47">if <condition pos:start="105:12" pos:end="105:45">(<expr pos:start="105:13" pos:end="105:44"><name pos:start="105:13" pos:end="105:22">nptl_flags</name> <operator pos:start="105:24" pos:end="105:24">&amp;</operator> <name pos:start="105:26" pos:end="105:44">CLONE_PARENT_SETTID</name></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:47"><block_content pos:start="107:13" pos:end="107:47">

            <expr_stmt pos:start="107:13" pos:end="107:47"><expr pos:start="107:13" pos:end="107:46"><name pos:start="107:13" pos:end="107:30"><name pos:start="107:13" pos:end="107:16">info</name><operator pos:start="107:17" pos:end="107:17">.</operator><name pos:start="107:18" pos:end="107:30">parent_tidptr</name></name> <operator pos:start="107:32" pos:end="107:32">=</operator> <name pos:start="107:34" pos:end="107:46">parent_tidptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:39"><expr pos:start="111:9" pos:end="111:38"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="111:38"><name pos:start="111:15" pos:end="111:31">pthread_attr_init</name><argument_list pos:start="111:32" pos:end="111:38">(<argument pos:start="111:33" pos:end="111:37"><expr pos:start="111:33" pos:end="111:37"><operator pos:start="111:33" pos:end="111:33">&amp;</operator><name pos:start="111:34" pos:end="111:37">attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:63"><expr pos:start="113:9" pos:end="113:62"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <call pos:start="113:15" pos:end="113:62"><name pos:start="113:15" pos:end="113:39">pthread_attr_setstacksize</name><argument_list pos:start="113:40" pos:end="113:62">(<argument pos:start="113:41" pos:end="113:45"><expr pos:start="113:41" pos:end="113:45"><operator pos:start="113:41" pos:end="113:41">&amp;</operator><name pos:start="113:42" pos:end="113:45">attr</name></expr></argument>, <argument pos:start="113:48" pos:end="113:61"><expr pos:start="113:48" pos:end="113:61"><name pos:start="113:48" pos:end="113:61">NEW_STACK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:74"><expr pos:start="115:9" pos:end="115:73"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="115:73"><name pos:start="115:15" pos:end="115:41">pthread_attr_setdetachstate</name><argument_list pos:start="115:42" pos:end="115:73">(<argument pos:start="115:43" pos:end="115:47"><expr pos:start="115:43" pos:end="115:47"><operator pos:start="115:43" pos:end="115:43">&amp;</operator><name pos:start="115:44" pos:end="115:47">attr</name></expr></argument>, <argument pos:start="115:50" pos:end="115:72"><expr pos:start="115:50" pos:end="115:72"><name pos:start="115:50" pos:end="115:72">PTHREAD_CREATE_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="117:9" pos:end="119:62">/* It is not safe to deliver signals until the child has finished

           initializing, so temporarily block all signals.  */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:29"><expr pos:start="121:9" pos:end="121:28"><call pos:start="121:9" pos:end="121:28"><name pos:start="121:9" pos:end="121:18">sigfillset</name><argument_list pos:start="121:19" pos:end="121:28">(<argument pos:start="121:20" pos:end="121:27"><expr pos:start="121:20" pos:end="121:27"><operator pos:start="121:20" pos:end="121:20">&amp;</operator><name pos:start="121:21" pos:end="121:27">sigmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:56"><expr pos:start="123:9" pos:end="123:55"><call pos:start="123:9" pos:end="123:55"><name pos:start="123:9" pos:end="123:19">sigprocmask</name><argument_list pos:start="123:20" pos:end="123:55">(<argument pos:start="123:21" pos:end="123:29"><expr pos:start="123:21" pos:end="123:29"><name pos:start="123:21" pos:end="123:29">SIG_BLOCK</name></expr></argument>, <argument pos:start="123:32" pos:end="123:39"><expr pos:start="123:32" pos:end="123:39"><operator pos:start="123:32" pos:end="123:32">&amp;</operator><name pos:start="123:33" pos:end="123:39">sigmask</name></expr></argument>, <argument pos:start="123:42" pos:end="123:54"><expr pos:start="123:42" pos:end="123:54"><operator pos:start="123:42" pos:end="123:42">&amp;</operator><name pos:start="123:43" pos:end="123:54"><name pos:start="123:43" pos:end="123:46">info</name><operator pos:start="123:47" pos:end="123:47">.</operator><name pos:start="123:48" pos:end="123:54">sigmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:69"><expr pos:start="127:9" pos:end="127:68"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <call pos:start="127:15" pos:end="127:68"><name pos:start="127:15" pos:end="127:28">pthread_create</name><argument_list pos:start="127:29" pos:end="127:68">(<argument pos:start="127:30" pos:end="127:41"><expr pos:start="127:30" pos:end="127:41"><operator pos:start="127:30" pos:end="127:30">&amp;</operator><name pos:start="127:31" pos:end="127:41"><name pos:start="127:31" pos:end="127:34">info</name><operator pos:start="127:35" pos:end="127:35">.</operator><name pos:start="127:36" pos:end="127:41">thread</name></name></expr></argument>, <argument pos:start="127:44" pos:end="127:48"><expr pos:start="127:44" pos:end="127:48"><operator pos:start="127:44" pos:end="127:44">&amp;</operator><name pos:start="127:45" pos:end="127:48">attr</name></expr></argument>, <argument pos:start="127:51" pos:end="127:60"><expr pos:start="127:51" pos:end="127:60"><name pos:start="127:51" pos:end="127:60">clone_func</name></expr></argument>, <argument pos:start="127:63" pos:end="127:67"><expr pos:start="127:63" pos:end="127:67"><operator pos:start="127:63" pos:end="127:63">&amp;</operator><name pos:start="127:64" pos:end="127:67">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="129:9" pos:end="129:66">/* TODO: Free new CPU state if thread creation failed.  */</comment>



        <expr_stmt pos:start="133:9" pos:end="133:54"><expr pos:start="133:9" pos:end="133:53"><call pos:start="133:9" pos:end="133:53"><name pos:start="133:9" pos:end="133:19">sigprocmask</name><argument_list pos:start="133:20" pos:end="133:53">(<argument pos:start="133:21" pos:end="133:31"><expr pos:start="133:21" pos:end="133:31"><name pos:start="133:21" pos:end="133:31">SIG_SETMASK</name></expr></argument>, <argument pos:start="133:34" pos:end="133:46"><expr pos:start="133:34" pos:end="133:46"><operator pos:start="133:34" pos:end="133:34">&amp;</operator><name pos:start="133:35" pos:end="133:46"><name pos:start="133:35" pos:end="133:38">info</name><operator pos:start="133:39" pos:end="133:39">.</operator><name pos:start="133:40" pos:end="133:46">sigmask</name></name></expr></argument>, <argument pos:start="133:49" pos:end="133:52"><expr pos:start="133:49" pos:end="133:52"><name pos:start="133:49" pos:end="133:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:36"><expr pos:start="135:9" pos:end="135:35"><call pos:start="135:9" pos:end="135:35"><name pos:start="135:9" pos:end="135:28">pthread_attr_destroy</name><argument_list pos:start="135:29" pos:end="135:35">(<argument pos:start="135:30" pos:end="135:34"><expr pos:start="135:30" pos:end="135:34"><operator pos:start="135:30" pos:end="135:30">&amp;</operator><name pos:start="135:31" pos:end="135:34">attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="153:9"><if pos:start="137:9" pos:end="149:9">if <condition pos:start="137:12" pos:end="137:21">(<expr pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:18">==</operator> <literal type="number" pos:start="137:20" pos:end="137:20">0</literal></expr>)</condition> <block pos:start="137:23" pos:end="149:9">{<block_content pos:start="141:13" pos:end="147:49">

            <comment type="block" pos:start="139:13" pos:end="139:52">/* Wait for the child to initialize.  */</comment>

            <expr_stmt pos:start="141:13" pos:end="141:55"><expr pos:start="141:13" pos:end="141:54"><call pos:start="141:13" pos:end="141:54"><name pos:start="141:13" pos:end="141:29">pthread_cond_wait</name><argument_list pos:start="141:30" pos:end="141:54">(<argument pos:start="141:31" pos:end="141:40"><expr pos:start="141:31" pos:end="141:40"><operator pos:start="141:31" pos:end="141:31">&amp;</operator><name pos:start="141:32" pos:end="141:40"><name pos:start="141:32" pos:end="141:35">info</name><operator pos:start="141:36" pos:end="141:36">.</operator><name pos:start="141:37" pos:end="141:40">cond</name></name></expr></argument>, <argument pos:start="141:43" pos:end="141:53"><expr pos:start="141:43" pos:end="141:53"><operator pos:start="141:43" pos:end="141:43">&amp;</operator><name pos:start="141:44" pos:end="141:53"><name pos:start="141:44" pos:end="141:47">info</name><operator pos:start="141:48" pos:end="141:48">.</operator><name pos:start="141:49" pos:end="141:53">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:27"><expr pos:start="143:13" pos:end="143:26"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <name pos:start="143:19" pos:end="143:26"><name pos:start="143:19" pos:end="143:22">info</name><operator pos:start="143:23" pos:end="143:23">.</operator><name pos:start="143:24" pos:end="143:26">tid</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="147:49"><if pos:start="145:13" pos:end="147:49">if <condition pos:start="145:16" pos:end="145:44">(<expr pos:start="145:17" pos:end="145:43"><name pos:start="145:17" pos:end="145:21">flags</name> <operator pos:start="145:23" pos:end="145:23">&amp;</operator> <name pos:start="145:25" pos:end="145:43">CLONE_PARENT_SETTID</name></expr>)</condition><block type="pseudo" pos:start="147:17" pos:end="147:49"><block_content pos:start="147:17" pos:end="147:49">

                <expr_stmt pos:start="147:17" pos:end="147:49"><expr pos:start="147:17" pos:end="147:48"><call pos:start="147:17" pos:end="147:48"><name pos:start="147:17" pos:end="147:28">put_user_u32</name><argument_list pos:start="147:29" pos:end="147:48">(<argument pos:start="147:30" pos:end="147:32"><expr pos:start="147:30" pos:end="147:32"><name pos:start="147:30" pos:end="147:32">ret</name></expr></argument>, <argument pos:start="147:35" pos:end="147:47"><expr pos:start="147:35" pos:end="147:47"><name pos:start="147:35" pos:end="147:47">parent_tidptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="149:11" pos:end="153:9">else <block pos:start="149:16" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:21">

            <expr_stmt pos:start="151:13" pos:end="151:21"><expr pos:start="151:13" pos:end="151:20"><name pos:start="151:13" pos:end="151:15">ret</name> <operator pos:start="151:17" pos:end="151:17">=</operator> <operator pos:start="151:19" pos:end="151:19">-</operator><literal type="number" pos:start="151:20" pos:end="151:20">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:42"><expr pos:start="155:9" pos:end="155:41"><call pos:start="155:9" pos:end="155:41"><name pos:start="155:9" pos:end="155:28">pthread_mutex_unlock</name><argument_list pos:start="155:29" pos:end="155:41">(<argument pos:start="155:30" pos:end="155:40"><expr pos:start="155:30" pos:end="155:40"><operator pos:start="155:30" pos:end="155:30">&amp;</operator><name pos:start="155:31" pos:end="155:40"><name pos:start="155:31" pos:end="155:34">info</name><operator pos:start="155:35" pos:end="155:35">.</operator><name pos:start="155:36" pos:end="155:40">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:41"><expr pos:start="157:9" pos:end="157:40"><call pos:start="157:9" pos:end="157:40"><name pos:start="157:9" pos:end="157:28">pthread_cond_destroy</name><argument_list pos:start="157:29" pos:end="157:40">(<argument pos:start="157:30" pos:end="157:39"><expr pos:start="157:30" pos:end="157:39"><operator pos:start="157:30" pos:end="157:30">&amp;</operator><name pos:start="157:31" pos:end="157:39"><name pos:start="157:31" pos:end="157:34">info</name><operator pos:start="157:35" pos:end="157:35">.</operator><name pos:start="157:36" pos:end="157:39">cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:43"><expr pos:start="159:9" pos:end="159:42"><call pos:start="159:9" pos:end="159:42"><name pos:start="159:9" pos:end="159:29">pthread_mutex_destroy</name><argument_list pos:start="159:30" pos:end="159:42">(<argument pos:start="159:31" pos:end="159:41"><expr pos:start="159:31" pos:end="159:41"><operator pos:start="159:31" pos:end="159:31">&amp;</operator><name pos:start="159:32" pos:end="159:41"><name pos:start="159:32" pos:end="159:35">info</name><operator pos:start="159:36" pos:end="159:36">.</operator><name pos:start="159:37" pos:end="159:41">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:42"><expr pos:start="161:9" pos:end="161:41"><call pos:start="161:9" pos:end="161:41"><name pos:start="161:9" pos:end="161:28">pthread_mutex_unlock</name><argument_list pos:start="161:29" pos:end="161:41">(<argument pos:start="161:30" pos:end="161:40"><expr pos:start="161:30" pos:end="161:40"><operator pos:start="161:30" pos:end="161:30">&amp;</operator><name pos:start="161:31" pos:end="161:40">clone_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="233:5">else <block pos:start="163:12" pos:end="233:5">{<block_content pos:start="167:9" pos:end="231:9">

        <comment type="block" pos:start="165:9" pos:end="165:54">/* if no CLONE_VM, we consider it is a fork */</comment>

        <if_stmt pos:start="167:9" pos:end="171:9"><if pos:start="167:9" pos:end="171:9">if <condition pos:start="167:12" pos:end="167:58">(<expr pos:start="167:13" pos:end="167:57"><operator pos:start="167:13" pos:end="167:13">(</operator><name pos:start="167:14" pos:end="167:18">flags</name> <operator pos:start="167:20" pos:end="167:20">&amp;</operator> <operator pos:start="167:22" pos:end="167:22">~</operator><operator pos:start="167:23" pos:end="167:23">(</operator><name pos:start="167:24" pos:end="167:30">CSIGNAL</name> <operator pos:start="167:32" pos:end="167:32">|</operator> <name pos:start="167:34" pos:end="167:50">CLONE_NPTL_FLAGS2</name><operator pos:start="167:51" pos:end="167:51">)</operator><operator pos:start="167:52" pos:end="167:52">)</operator> <operator pos:start="167:54" pos:end="167:55">!=</operator> <literal type="number" pos:start="167:57" pos:end="167:57">0</literal></expr>)</condition> <block pos:start="167:60" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:34">

            <return pos:start="169:13" pos:end="169:34">return <expr pos:start="169:20" pos:end="169:33"><operator pos:start="169:20" pos:end="169:20">-</operator><name pos:start="169:21" pos:end="169:33">TARGET_EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="175:9" pos:end="179:9"><if pos:start="175:9" pos:end="179:9">if <condition pos:start="175:12" pos:end="175:28">(<expr pos:start="175:13" pos:end="175:27"><call pos:start="175:13" pos:end="175:27"><name pos:start="175:13" pos:end="175:25">block_signals</name><argument_list pos:start="175:26" pos:end="175:27">()</argument_list></call></expr>)</condition> <block pos:start="175:30" pos:end="179:9">{<block_content pos:start="177:13" pos:end="177:39">

            <return pos:start="177:13" pos:end="177:39">return <expr pos:start="177:20" pos:end="177:38"><operator pos:start="177:20" pos:end="177:20">-</operator><name pos:start="177:21" pos:end="177:38">TARGET_ERESTARTSYS</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="183:9" pos:end="183:21"><expr pos:start="183:9" pos:end="183:20"><call pos:start="183:9" pos:end="183:20"><name pos:start="183:9" pos:end="183:18">fork_start</name><argument_list pos:start="183:19" pos:end="183:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:21"><expr pos:start="185:9" pos:end="185:20"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <call pos:start="185:15" pos:end="185:20"><name pos:start="185:15" pos:end="185:18">fork</name><argument_list pos:start="185:19" pos:end="185:20">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="187:9" pos:end="231:9"><if pos:start="187:9" pos:end="227:9">if <condition pos:start="187:12" pos:end="187:21">(<expr pos:start="187:13" pos:end="187:20"><name pos:start="187:13" pos:end="187:15">ret</name> <operator pos:start="187:17" pos:end="187:18">==</operator> <literal type="number" pos:start="187:20" pos:end="187:20">0</literal></expr>)</condition> <block pos:start="187:23" pos:end="227:9">{<block_content pos:start="191:13" pos:end="225:48">

            <comment type="block" pos:start="189:13" pos:end="189:33">/* Child Process.  */</comment>

            <expr_stmt pos:start="191:13" pos:end="191:29"><expr pos:start="191:13" pos:end="191:28"><call pos:start="191:13" pos:end="191:28"><name pos:start="191:13" pos:end="191:26">rcu_after_fork</name><argument_list pos:start="191:27" pos:end="191:28">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:39"><expr pos:start="193:13" pos:end="193:38"><call pos:start="193:13" pos:end="193:38"><name pos:start="193:13" pos:end="193:26">cpu_clone_regs</name><argument_list pos:start="193:27" pos:end="193:38">(<argument pos:start="193:28" pos:end="193:30"><expr pos:start="193:28" pos:end="193:30"><name pos:start="193:28" pos:end="193:30">env</name></expr></argument>, <argument pos:start="193:33" pos:end="193:37"><expr pos:start="193:33" pos:end="193:37"><name pos:start="193:33" pos:end="193:37">newsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:24"><expr pos:start="195:13" pos:end="195:23"><call pos:start="195:13" pos:end="195:23"><name pos:start="195:13" pos:end="195:20">fork_end</name><argument_list pos:start="195:21" pos:end="195:23">(<argument pos:start="195:22" pos:end="195:22"><expr pos:start="195:22" pos:end="195:22"><literal type="number" pos:start="195:22" pos:end="195:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="197:13" pos:end="207:67">/* There is a race condition here.  The parent process could

               theoretically read the TID in the child process before the child

               tid is set.  This would require using either ptrace

               (not implemented) or having *_tidptr to point at a shared memory

               mapping.  We can't repeat the spinlock hack used above because

               the child process gets its own copy of the lock.  */</comment>

            <if_stmt pos:start="209:13" pos:end="211:53"><if pos:start="209:13" pos:end="211:53">if <condition pos:start="209:16" pos:end="209:43">(<expr pos:start="209:17" pos:end="209:42"><name pos:start="209:17" pos:end="209:21">flags</name> <operator pos:start="209:23" pos:end="209:23">&amp;</operator> <name pos:start="209:25" pos:end="209:42">CLONE_CHILD_SETTID</name></expr>)</condition><block type="pseudo" pos:start="211:17" pos:end="211:53"><block_content pos:start="211:17" pos:end="211:53">

                <expr_stmt pos:start="211:17" pos:end="211:53"><expr pos:start="211:17" pos:end="211:52"><call pos:start="211:17" pos:end="211:52"><name pos:start="211:17" pos:end="211:28">put_user_u32</name><argument_list pos:start="211:29" pos:end="211:52">(<argument pos:start="211:30" pos:end="211:37"><expr pos:start="211:30" pos:end="211:37"><call pos:start="211:30" pos:end="211:37"><name pos:start="211:30" pos:end="211:35">gettid</name><argument_list pos:start="211:36" pos:end="211:37">()</argument_list></call></expr></argument>, <argument pos:start="211:40" pos:end="211:51"><expr pos:start="211:40" pos:end="211:51"><name pos:start="211:40" pos:end="211:51">child_tidptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="213:13" pos:end="215:54"><if pos:start="213:13" pos:end="215:54">if <condition pos:start="213:16" pos:end="213:44">(<expr pos:start="213:17" pos:end="213:43"><name pos:start="213:17" pos:end="213:21">flags</name> <operator pos:start="213:23" pos:end="213:23">&amp;</operator> <name pos:start="213:25" pos:end="213:43">CLONE_PARENT_SETTID</name></expr>)</condition><block type="pseudo" pos:start="215:17" pos:end="215:54"><block_content pos:start="215:17" pos:end="215:54">

                <expr_stmt pos:start="215:17" pos:end="215:54"><expr pos:start="215:17" pos:end="215:53"><call pos:start="215:17" pos:end="215:53"><name pos:start="215:17" pos:end="215:28">put_user_u32</name><argument_list pos:start="215:29" pos:end="215:53">(<argument pos:start="215:30" pos:end="215:37"><expr pos:start="215:30" pos:end="215:37"><call pos:start="215:30" pos:end="215:37"><name pos:start="215:30" pos:end="215:35">gettid</name><argument_list pos:start="215:36" pos:end="215:37">()</argument_list></call></expr></argument>, <argument pos:start="215:40" pos:end="215:52"><expr pos:start="215:40" pos:end="215:52"><name pos:start="215:40" pos:end="215:52">parent_tidptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:42"><expr pos:start="217:13" pos:end="217:41"><name pos:start="217:13" pos:end="217:14">ts</name> <operator pos:start="217:16" pos:end="217:16">=</operator> <operator pos:start="217:18" pos:end="217:18">(</operator><name pos:start="217:19" pos:end="217:27">TaskState</name> <operator pos:start="217:29" pos:end="217:29">*</operator><operator pos:start="217:30" pos:end="217:30">)</operator><name pos:start="217:31" pos:end="217:41"><name pos:start="217:31" pos:end="217:33">cpu</name><operator pos:start="217:34" pos:end="217:35">-&gt;</operator><name pos:start="217:36" pos:end="217:41">opaque</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="219:13" pos:end="221:42"><if pos:start="219:13" pos:end="221:42">if <condition pos:start="219:16" pos:end="219:37">(<expr pos:start="219:17" pos:end="219:36"><name pos:start="219:17" pos:end="219:21">flags</name> <operator pos:start="219:23" pos:end="219:23">&amp;</operator> <name pos:start="219:25" pos:end="219:36">CLONE_SETTLS</name></expr>)</condition><block type="pseudo" pos:start="221:17" pos:end="221:42"><block_content pos:start="221:17" pos:end="221:42">

                <expr_stmt pos:start="221:17" pos:end="221:42"><expr pos:start="221:17" pos:end="221:41"><call pos:start="221:17" pos:end="221:41"><name pos:start="221:17" pos:end="221:27">cpu_set_tls</name> <argument_list pos:start="221:29" pos:end="221:41">(<argument pos:start="221:30" pos:end="221:32"><expr pos:start="221:30" pos:end="221:32"><name pos:start="221:30" pos:end="221:32">env</name></expr></argument>, <argument pos:start="221:35" pos:end="221:40"><expr pos:start="221:35" pos:end="221:40"><name pos:start="221:35" pos:end="221:40">newtls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="223:13" pos:end="225:48"><if pos:start="223:13" pos:end="225:48">if <condition pos:start="223:16" pos:end="223:45">(<expr pos:start="223:17" pos:end="223:44"><name pos:start="223:17" pos:end="223:21">flags</name> <operator pos:start="223:23" pos:end="223:23">&amp;</operator> <name pos:start="223:25" pos:end="223:44">CLONE_CHILD_CLEARTID</name></expr>)</condition><block type="pseudo" pos:start="225:17" pos:end="225:48"><block_content pos:start="225:17" pos:end="225:48">

                <expr_stmt pos:start="225:17" pos:end="225:48"><expr pos:start="225:17" pos:end="225:47"><name pos:start="225:17" pos:end="225:32"><name pos:start="225:17" pos:end="225:18">ts</name><operator pos:start="225:19" pos:end="225:20">-&gt;</operator><name pos:start="225:21" pos:end="225:32">child_tidptr</name></name> <operator pos:start="225:34" pos:end="225:34">=</operator> <name pos:start="225:36" pos:end="225:47">child_tidptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="227:11" pos:end="231:9">else <block pos:start="227:16" pos:end="231:9">{<block_content pos:start="229:13" pos:end="229:24">

            <expr_stmt pos:start="229:13" pos:end="229:24"><expr pos:start="229:13" pos:end="229:23"><call pos:start="229:13" pos:end="229:23"><name pos:start="229:13" pos:end="229:20">fork_end</name><argument_list pos:start="229:21" pos:end="229:23">(<argument pos:start="229:22" pos:end="229:22"><expr pos:start="229:22" pos:end="229:22"><literal type="number" pos:start="229:22" pos:end="229:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="235:5" pos:end="235:15">return <expr pos:start="235:12" pos:end="235:14"><name pos:start="235:12" pos:end="235:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
