<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6298.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">char</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:36">get_human_readable_size</name><parameter_list pos:start="1:37" pos:end="1:75">(<parameter pos:start="1:38" pos:end="1:46"><decl pos:start="1:38" pos:end="1:46"><type pos:start="1:38" pos:end="1:46"><name pos:start="1:38" pos:end="1:41">char</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">buf</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:60">buf_size</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:74"><decl pos:start="1:63" pos:end="1:74"><type pos:start="1:63" pos:end="1:74"><name pos:start="1:63" pos:end="1:69">int64_t</name></type> <name pos:start="1:71" pos:end="1:74">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:15">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:21"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:21">char</name></type> <name pos:start="5:23" pos:end="5:43"><name pos:start="5:23" pos:end="5:30">suffixes</name><index pos:start="5:31" pos:end="5:43">[<expr pos:start="5:32" pos:end="5:42"><name pos:start="5:32" pos:end="5:42">NB_SUFFIXES</name></expr>]</index></name> <init pos:start="5:45" pos:end="5:52">= <expr pos:start="5:47" pos:end="5:52"><literal type="string" pos:start="5:47" pos:end="5:52">"KMGT"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:16">base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="49:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:20">(<expr pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:12">size</name> <operator pos:start="13:14" pos:end="13:15">&lt;=</operator> <literal type="number" pos:start="13:17" pos:end="13:19">999</literal></expr>)</condition> <block pos:start="13:22" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:50">

        <expr_stmt pos:start="15:9" pos:end="15:50"><expr pos:start="15:9" pos:end="15:49"><call pos:start="15:9" pos:end="15:49"><name pos:start="15:9" pos:end="15:16">snprintf</name><argument_list pos:start="15:17" pos:end="15:49">(<argument pos:start="15:18" pos:end="15:20"><expr pos:start="15:18" pos:end="15:20"><name pos:start="15:18" pos:end="15:20">buf</name></expr></argument>, <argument pos:start="15:23" pos:end="15:30"><expr pos:start="15:23" pos:end="15:30"><name pos:start="15:23" pos:end="15:30">buf_size</name></expr></argument>, <argument pos:start="15:33" pos:end="15:42"><expr pos:start="15:33" pos:end="15:42"><literal type="string" pos:start="15:33" pos:end="15:35">"%"</literal> <name pos:start="15:37" pos:end="15:42">PRId64</name></expr></argument>, <argument pos:start="15:45" pos:end="15:48"><expr pos:start="15:45" pos:end="15:48"><name pos:start="15:45" pos:end="15:48">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="17:7" pos:end="49:5">else <block pos:start="17:12" pos:end="49:5">{<block_content pos:start="19:9" pos:end="47:9">

        <expr_stmt pos:start="19:9" pos:end="19:20"><expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:12">base</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <literal type="number" pos:start="19:16" pos:end="19:19">1024</literal></expr>;</expr_stmt>

        <for pos:start="21:9" pos:end="47:9">for <control pos:start="21:13" pos:end="21:41">(<init pos:start="21:14" pos:end="21:19"><expr pos:start="21:14" pos:end="21:18"><name pos:start="21:14" pos:end="21:14">i</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>;</init> <condition pos:start="21:21" pos:end="21:36"><expr pos:start="21:21" pos:end="21:35"><name pos:start="21:21" pos:end="21:21">i</name> <operator pos:start="21:23" pos:end="21:23">&lt;</operator> <name pos:start="21:25" pos:end="21:35">NB_SUFFIXES</name></expr>;</condition> <incr pos:start="21:38" pos:end="21:40"><expr pos:start="21:38" pos:end="21:40"><name pos:start="21:38" pos:end="21:38">i</name><operator pos:start="21:39" pos:end="21:40">++</operator></expr></incr>)</control> <block pos:start="21:43" pos:end="47:9">{<block_content pos:start="23:13" pos:end="45:31">

            <if_stmt pos:start="23:13" pos:end="43:13"><if pos:start="23:13" pos:end="33:13">if <condition pos:start="23:16" pos:end="23:35">(<expr pos:start="23:17" pos:end="23:34"><name pos:start="23:17" pos:end="23:20">size</name> <operator pos:start="23:22" pos:end="23:22">&lt;</operator> <operator pos:start="23:24" pos:end="23:24">(</operator><literal type="number" pos:start="23:25" pos:end="23:26">10</literal> <operator pos:start="23:28" pos:end="23:28">*</operator> <name pos:start="23:30" pos:end="23:33">base</name><operator pos:start="23:34" pos:end="23:34">)</operator></expr>)</condition> <block pos:start="23:37" pos:end="33:13">{<block_content pos:start="25:17" pos:end="31:22">

                <expr_stmt pos:start="25:17" pos:end="29:38"><expr pos:start="25:17" pos:end="29:37"><call pos:start="25:17" pos:end="29:37"><name pos:start="25:17" pos:end="25:24">snprintf</name><argument_list pos:start="25:25" pos:end="29:37">(<argument pos:start="25:26" pos:end="25:28"><expr pos:start="25:26" pos:end="25:28"><name pos:start="25:26" pos:end="25:28">buf</name></expr></argument>, <argument pos:start="25:31" pos:end="25:38"><expr pos:start="25:31" pos:end="25:38"><name pos:start="25:31" pos:end="25:38">buf_size</name></expr></argument>, <argument pos:start="25:41" pos:end="25:49"><expr pos:start="25:41" pos:end="25:49"><literal type="string" pos:start="25:41" pos:end="25:49">"%0.1f%c"</literal></expr></argument>,

                         <argument pos:start="27:26" pos:end="27:44"><expr pos:start="27:26" pos:end="27:44"><operator pos:start="27:26" pos:end="27:26">(</operator><name pos:start="27:27" pos:end="27:32">double</name><operator pos:start="27:33" pos:end="27:33">)</operator><name pos:start="27:34" pos:end="27:37">size</name> <operator pos:start="27:39" pos:end="27:39">/</operator> <name pos:start="27:41" pos:end="27:44">base</name></expr></argument>,

                         <argument pos:start="29:26" pos:end="29:36"><expr pos:start="29:26" pos:end="29:36"><name pos:start="29:26" pos:end="29:36"><name pos:start="29:26" pos:end="29:33">suffixes</name><index pos:start="29:34" pos:end="29:36">[<expr pos:start="29:35" pos:end="29:35"><name pos:start="29:35" pos:end="29:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="31:17" pos:end="31:22">break;</break>

            </block_content>}</block></if> <if type="elseif" pos:start="33:15" pos:end="43:13">else if <condition pos:start="33:23" pos:end="33:70">(<expr pos:start="33:24" pos:end="33:69"><name pos:start="33:24" pos:end="33:27">size</name> <operator pos:start="33:29" pos:end="33:29">&lt;</operator> <operator pos:start="33:31" pos:end="33:31">(</operator><literal type="number" pos:start="33:32" pos:end="33:35">1000</literal> <operator pos:start="33:37" pos:end="33:37">*</operator> <name pos:start="33:39" pos:end="33:42">base</name><operator pos:start="33:43" pos:end="33:43">)</operator> <operator pos:start="33:45" pos:end="33:46">||</operator> <name pos:start="33:48" pos:end="33:48">i</name> <operator pos:start="33:50" pos:end="33:51">==</operator> <operator pos:start="33:53" pos:end="33:53">(</operator><name pos:start="33:54" pos:end="33:64">NB_SUFFIXES</name> <operator pos:start="33:66" pos:end="33:66">-</operator> <literal type="number" pos:start="33:68" pos:end="33:68">1</literal><operator pos:start="33:69" pos:end="33:69">)</operator></expr>)</condition> <block pos:start="33:72" pos:end="43:13">{<block_content pos:start="35:17" pos:end="41:22">

                <expr_stmt pos:start="35:17" pos:end="39:38"><expr pos:start="35:17" pos:end="39:37"><call pos:start="35:17" pos:end="39:37"><name pos:start="35:17" pos:end="35:24">snprintf</name><argument_list pos:start="35:25" pos:end="39:37">(<argument pos:start="35:26" pos:end="35:28"><expr pos:start="35:26" pos:end="35:28"><name pos:start="35:26" pos:end="35:28">buf</name></expr></argument>, <argument pos:start="35:31" pos:end="35:38"><expr pos:start="35:31" pos:end="35:38"><name pos:start="35:31" pos:end="35:38">buf_size</name></expr></argument>, <argument pos:start="35:41" pos:end="35:55"><expr pos:start="35:41" pos:end="35:55"><literal type="string" pos:start="35:41" pos:end="35:43">"%"</literal> <name pos:start="35:45" pos:end="35:50">PRId64</name> <literal type="string" pos:start="35:52" pos:end="35:55">"%c"</literal></expr></argument>,

                         <argument pos:start="37:26" pos:end="37:54"><expr pos:start="37:26" pos:end="37:54"><operator pos:start="37:26" pos:end="37:26">(</operator><operator pos:start="37:27" pos:end="37:27">(</operator><name pos:start="37:28" pos:end="37:31">size</name> <operator pos:start="37:33" pos:end="37:33">+</operator> <operator pos:start="37:35" pos:end="37:35">(</operator><name pos:start="37:36" pos:end="37:39">base</name> <operator pos:start="37:41" pos:end="37:42">&gt;&gt;</operator> <literal type="number" pos:start="37:44" pos:end="37:44">1</literal><operator pos:start="37:45" pos:end="37:45">)</operator><operator pos:start="37:46" pos:end="37:46">)</operator> <operator pos:start="37:48" pos:end="37:48">/</operator> <name pos:start="37:50" pos:end="37:53">base</name><operator pos:start="37:54" pos:end="37:54">)</operator></expr></argument>,

                         <argument pos:start="39:26" pos:end="39:36"><expr pos:start="39:26" pos:end="39:36"><name pos:start="39:26" pos:end="39:36"><name pos:start="39:26" pos:end="39:33">suffixes</name><index pos:start="39:34" pos:end="39:36">[<expr pos:start="39:35" pos:end="39:35"><name pos:start="39:35" pos:end="39:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="41:17" pos:end="41:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:31"><expr pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:16">base</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <name pos:start="45:20" pos:end="45:23">base</name> <operator pos:start="45:25" pos:end="45:25">*</operator> <literal type="number" pos:start="45:27" pos:end="45:30">1024</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

    <return pos:start="51:5" pos:end="51:15">return <expr pos:start="51:12" pos:end="51:14"><name pos:start="51:12" pos:end="51:14">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
