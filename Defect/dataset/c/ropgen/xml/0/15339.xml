<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15339.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">sun4m_load_kernel</name><parameter_list pos:start="1:30" pos:end="9:45">(<parameter pos:start="1:31" pos:end="1:44"><decl pos:start="1:31" pos:end="1:44"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:34">long</name></type> <name pos:start="1:36" pos:end="1:44">vram_size</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:58">ram_size</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:75"><decl pos:start="1:61" pos:end="1:75"><type pos:start="1:61" pos:end="1:75"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:75">boot_device</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:57"><decl pos:start="3:31" pos:end="3:57"><type pos:start="3:31" pos:end="3:57"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:40">char</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:57">kernel_filename</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:56"><decl pos:start="5:31" pos:end="5:56"><type pos:start="5:31" pos:end="5:56"><specifier pos:start="5:31" pos:end="5:35">const</specifier> <name pos:start="5:37" pos:end="5:40">char</name> <modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:56">kernel_cmdline</name></decl></parameter>,

                              <parameter pos:start="7:31" pos:end="7:57"><decl pos:start="7:31" pos:end="7:57"><type pos:start="7:31" pos:end="7:57"><specifier pos:start="7:31" pos:end="7:35">const</specifier> <name pos:start="7:37" pos:end="7:40">char</name> <modifier pos:start="7:42" pos:end="7:42">*</modifier></type><name pos:start="7:43" pos:end="7:57">initrd_filename</name></decl></parameter>,

                              <parameter pos:start="9:31" pos:end="9:44"><decl pos:start="9:31" pos:end="9:44"><type pos:start="9:31" pos:end="9:44"><name pos:start="9:31" pos:end="9:33">int</name></type> <name pos:start="9:35" pos:end="9:44">machine_id</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="127:1">{<block_content pos:start="13:5" pos:end="125:58">

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:23">linux_boot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:18"><name pos:start="15:10" pos:end="15:12">buf</name><index pos:start="15:13" pos:end="15:18">[<expr pos:start="15:14" pos:end="15:17"><literal type="number" pos:start="15:14" pos:end="15:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">long</name></type> <name pos:start="19:10" pos:end="19:20">prom_offset</name></decl>, <decl pos:start="19:23" pos:end="19:33"><type ref="prev" pos:start="19:5" pos:end="19:8"/><name pos:start="19:23" pos:end="19:33">initrd_size</name></decl>, <decl pos:start="19:36" pos:end="19:46"><type ref="prev" pos:start="19:5" pos:end="19:8"/><name pos:start="19:36" pos:end="19:46">kernel_size</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:43"><expr pos:start="23:5" pos:end="23:42"><name pos:start="23:5" pos:end="23:14">linux_boot</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <operator pos:start="23:18" pos:end="23:18">(</operator><name pos:start="23:19" pos:end="23:33">kernel_filename</name> <operator pos:start="23:35" pos:end="23:36">!=</operator> <name pos:start="23:38" pos:end="23:41">NULL</name><operator pos:start="23:42" pos:end="23:42">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:39"><expr pos:start="27:5" pos:end="27:38"><name pos:start="27:5" pos:end="27:15">prom_offset</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <name pos:start="27:19" pos:end="27:26">ram_size</name> <operator pos:start="27:28" pos:end="27:28">+</operator> <name pos:start="27:30" pos:end="27:38">vram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="33:59"><expr pos:start="29:5" pos:end="33:58"><call pos:start="29:5" pos:end="33:58"><name pos:start="29:5" pos:end="29:32">cpu_register_physical_memory</name><argument_list pos:start="29:33" pos:end="33:58">(<argument pos:start="29:34" pos:end="29:42"><expr pos:start="29:34" pos:end="29:42"><name pos:start="29:34" pos:end="29:42">PROM_ADDR</name></expr></argument>, 

                                 <argument pos:start="31:34" pos:end="31:90"><expr pos:start="31:34" pos:end="31:90"><operator pos:start="31:34" pos:end="31:34">(</operator><name pos:start="31:35" pos:end="31:47">PROM_SIZE_MAX</name> <operator pos:start="31:49" pos:end="31:49">+</operator> <name pos:start="31:51" pos:end="31:66">TARGET_PAGE_SIZE</name> <operator pos:start="31:68" pos:end="31:68">-</operator> <literal type="number" pos:start="31:70" pos:end="31:70">1</literal><operator pos:start="31:71" pos:end="31:71">)</operator> <operator pos:start="31:73" pos:end="31:73">&amp;</operator> <name pos:start="31:75" pos:end="31:90">TARGET_PAGE_MASK</name></expr></argument>, 

                                 <argument pos:start="33:34" pos:end="33:57"><expr pos:start="33:34" pos:end="33:57"><name pos:start="33:34" pos:end="33:44">prom_offset</name> <operator pos:start="33:46" pos:end="33:46">|</operator> <name pos:start="33:48" pos:end="33:57">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:65"><expr pos:start="37:5" pos:end="37:64"><call pos:start="37:5" pos:end="37:64"><name pos:start="37:5" pos:end="37:12">snprintf</name><argument_list pos:start="37:13" pos:end="37:64">(<argument pos:start="37:14" pos:end="37:16"><expr pos:start="37:14" pos:end="37:16"><name pos:start="37:14" pos:end="37:16">buf</name></expr></argument>, <argument pos:start="37:19" pos:end="37:29"><expr pos:start="37:19" pos:end="37:29"><sizeof pos:start="37:19" pos:end="37:29">sizeof<argument_list pos:start="37:25" pos:end="37:29">(<argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><name pos:start="37:26" pos:end="37:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="37:32" pos:end="37:38"><expr pos:start="37:32" pos:end="37:38"><literal type="string" pos:start="37:32" pos:end="37:38">"%s/%s"</literal></expr></argument>, <argument pos:start="37:41" pos:end="37:48"><expr pos:start="37:41" pos:end="37:48"><name pos:start="37:41" pos:end="37:48">bios_dir</name></expr></argument>, <argument pos:start="37:51" pos:end="37:63"><expr pos:start="37:51" pos:end="37:63"><name pos:start="37:51" pos:end="37:63">PROM_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:45"><expr pos:start="39:5" pos:end="39:44"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:44"><name pos:start="39:11" pos:end="39:18">load_elf</name><argument_list pos:start="39:19" pos:end="39:44">(<argument pos:start="39:20" pos:end="39:22"><expr pos:start="39:20" pos:end="39:22"><name pos:start="39:20" pos:end="39:22">buf</name></expr></argument>, <argument pos:start="39:25" pos:end="39:25"><expr pos:start="39:25" pos:end="39:25"><literal type="number" pos:start="39:25" pos:end="39:25">0</literal></expr></argument>, <argument pos:start="39:28" pos:end="39:31"><expr pos:start="39:28" pos:end="39:31"><name pos:start="39:28" pos:end="39:31">NULL</name></expr></argument>, <argument pos:start="39:34" pos:end="39:37"><expr pos:start="39:34" pos:end="39:37"><name pos:start="39:34" pos:end="39:37">NULL</name></expr></argument>, <argument pos:start="39:40" pos:end="39:43"><expr pos:start="39:40" pos:end="39:43"><name pos:start="39:40" pos:end="39:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">&lt;</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>)</condition> <block pos:start="41:18" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:16">

	<expr_stmt pos:start="43:9" pos:end="45:21"><expr pos:start="43:9" pos:end="45:20"><call pos:start="43:9" pos:end="45:20"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="45:20">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:58"><expr pos:start="43:25" pos:end="43:58"><literal type="string" pos:start="43:25" pos:end="43:58">"qemu: could not load prom '%s'\n"</literal></expr></argument>, 

		<argument pos:start="45:17" pos:end="45:19"><expr pos:start="45:17" pos:end="45:19"><name pos:start="45:17" pos:end="45:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="47:9" pos:end="47:16"><expr pos:start="47:9" pos:end="47:15"><call pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:12">exit</name><argument_list pos:start="47:13" pos:end="47:15">(<argument pos:start="47:14" pos:end="47:14"><expr pos:start="47:14" pos:end="47:14"><literal type="number" pos:start="47:14" pos:end="47:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:20"><expr pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:15">kernel_size</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <literal type="number" pos:start="53:19" pos:end="53:19">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="119:5"><if pos:start="55:5" pos:end="119:5">if <condition pos:start="55:8" pos:end="55:19">(<expr pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:18">linux_boot</name></expr>)</condition> <block pos:start="55:21" pos:end="119:5">{<block_content pos:start="57:9" pos:end="117:9">

        <expr_stmt pos:start="57:9" pos:end="57:79"><expr pos:start="57:9" pos:end="57:78"><name pos:start="57:9" pos:end="57:19">kernel_size</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:78"><name pos:start="57:23" pos:end="57:30">load_elf</name><argument_list pos:start="57:31" pos:end="57:78">(<argument pos:start="57:32" pos:end="57:46"><expr pos:start="57:32" pos:end="57:46"><name pos:start="57:32" pos:end="57:46">kernel_filename</name></expr></argument>, <argument pos:start="57:49" pos:end="57:59"><expr pos:start="57:49" pos:end="57:59"><operator pos:start="57:49" pos:end="57:49">-</operator><literal type="number" pos:start="57:50" pos:end="57:59">0xf0000000</literal></expr></argument>, <argument pos:start="57:62" pos:end="57:65"><expr pos:start="57:62" pos:end="57:65"><name pos:start="57:62" pos:end="57:65">NULL</name></expr></argument>, <argument pos:start="57:68" pos:end="57:71"><expr pos:start="57:68" pos:end="57:71"><name pos:start="57:68" pos:end="57:71">NULL</name></expr></argument>, <argument pos:start="57:74" pos:end="57:77"><expr pos:start="57:74" pos:end="57:77"><name pos:start="57:74" pos:end="57:77">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="61:87"><if pos:start="59:9" pos:end="61:87">if <condition pos:start="59:12" pos:end="59:28">(<expr pos:start="59:13" pos:end="59:27"><name pos:start="59:13" pos:end="59:23">kernel_size</name> <operator pos:start="59:25" pos:end="59:25">&lt;</operator> <literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:87"><block_content pos:start="61:13" pos:end="61:87">

	    <expr_stmt pos:start="61:13" pos:end="61:87"><expr pos:start="61:13" pos:end="61:86"><name pos:start="61:13" pos:end="61:23">kernel_size</name> <operator pos:start="61:25" pos:end="61:25">=</operator> <call pos:start="61:27" pos:end="61:86"><name pos:start="61:27" pos:end="61:35">load_aout</name><argument_list pos:start="61:36" pos:end="61:86">(<argument pos:start="61:37" pos:end="61:51"><expr pos:start="61:37" pos:end="61:51"><name pos:start="61:37" pos:end="61:51">kernel_filename</name></expr></argument>, <argument pos:start="61:54" pos:end="61:85"><expr pos:start="61:54" pos:end="61:85"><name pos:start="61:54" pos:end="61:66">phys_ram_base</name> <operator pos:start="61:68" pos:end="61:68">+</operator> <name pos:start="61:70" pos:end="61:85">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="63:9" pos:end="65:88"><if pos:start="63:9" pos:end="65:88">if <condition pos:start="63:12" pos:end="63:28">(<expr pos:start="63:13" pos:end="63:27"><name pos:start="63:13" pos:end="63:23">kernel_size</name> <operator pos:start="63:25" pos:end="63:25">&lt;</operator> <literal type="number" pos:start="63:27" pos:end="63:27">0</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:88"><block_content pos:start="65:13" pos:end="65:88">

	    <expr_stmt pos:start="65:13" pos:end="65:88"><expr pos:start="65:13" pos:end="65:87"><name pos:start="65:13" pos:end="65:23">kernel_size</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <call pos:start="65:27" pos:end="65:87"><name pos:start="65:27" pos:end="65:36">load_image</name><argument_list pos:start="65:37" pos:end="65:87">(<argument pos:start="65:38" pos:end="65:52"><expr pos:start="65:38" pos:end="65:52"><name pos:start="65:38" pos:end="65:52">kernel_filename</name></expr></argument>, <argument pos:start="65:55" pos:end="65:86"><expr pos:start="65:55" pos:end="65:86"><name pos:start="65:55" pos:end="65:67">phys_ram_base</name> <operator pos:start="65:69" pos:end="65:69">+</operator> <name pos:start="65:71" pos:end="65:86">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="75:9">if <condition pos:start="67:12" pos:end="67:28">(<expr pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:23">kernel_size</name> <operator pos:start="67:25" pos:end="67:25">&lt;</operator> <literal type="number" pos:start="67:27" pos:end="67:27">0</literal></expr>)</condition> <block pos:start="67:30" pos:end="75:9">{<block_content pos:start="69:13" pos:end="73:20">

            <expr_stmt pos:start="69:13" pos:end="71:37"><expr pos:start="69:13" pos:end="71:36"><call pos:start="69:13" pos:end="71:36"><name pos:start="69:13" pos:end="69:19">fprintf</name><argument_list pos:start="69:20" pos:end="71:36">(<argument pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:26">stderr</name></expr></argument>, <argument pos:start="69:29" pos:end="69:64"><expr pos:start="69:29" pos:end="69:64"><literal type="string" pos:start="69:29" pos:end="69:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, 

                    <argument pos:start="71:21" pos:end="71:35"><expr pos:start="71:21" pos:end="71:35"><name pos:start="71:21" pos:end="71:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="73:13" pos:end="73:20"><expr pos:start="73:13" pos:end="73:19"><call pos:start="73:13" pos:end="73:19"><name pos:start="73:13" pos:end="73:16">exit</name><argument_list pos:start="73:17" pos:end="73:19">(<argument pos:start="73:18" pos:end="73:18"><expr pos:start="73:18" pos:end="73:18"><literal type="number" pos:start="73:18" pos:end="73:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="79:9" pos:end="79:25">/* load initrd */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:24"><expr pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:19">initrd_size</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <literal type="number" pos:start="81:23" pos:end="81:23">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="97:9"><if pos:start="83:9" pos:end="97:9">if <condition pos:start="83:12" pos:end="83:28">(<expr pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:27">initrd_filename</name></expr>)</condition> <block pos:start="83:30" pos:end="97:9">{<block_content pos:start="85:13" pos:end="95:13">

            <expr_stmt pos:start="85:13" pos:end="85:88"><expr pos:start="85:13" pos:end="85:87"><name pos:start="85:13" pos:end="85:23">initrd_size</name> <operator pos:start="85:25" pos:end="85:25">=</operator> <call pos:start="85:27" pos:end="85:87"><name pos:start="85:27" pos:end="85:36">load_image</name><argument_list pos:start="85:37" pos:end="85:87">(<argument pos:start="85:38" pos:end="85:52"><expr pos:start="85:38" pos:end="85:52"><name pos:start="85:38" pos:end="85:52">initrd_filename</name></expr></argument>, <argument pos:start="85:55" pos:end="85:86"><expr pos:start="85:55" pos:end="85:86"><name pos:start="85:55" pos:end="85:67">phys_ram_base</name> <operator pos:start="85:69" pos:end="85:69">+</operator> <name pos:start="85:71" pos:end="85:86">INITRD_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="95:13"><if pos:start="87:13" pos:end="95:13">if <condition pos:start="87:16" pos:end="87:32">(<expr pos:start="87:17" pos:end="87:31"><name pos:start="87:17" pos:end="87:27">initrd_size</name> <operator pos:start="87:29" pos:end="87:29">&lt;</operator> <literal type="number" pos:start="87:31" pos:end="87:31">0</literal></expr>)</condition> <block pos:start="87:34" pos:end="95:13">{<block_content pos:start="89:17" pos:end="93:24">

                <expr_stmt pos:start="89:17" pos:end="91:41"><expr pos:start="89:17" pos:end="91:40"><call pos:start="89:17" pos:end="91:40"><name pos:start="89:17" pos:end="89:23">fprintf</name><argument_list pos:start="89:24" pos:end="91:40">(<argument pos:start="89:25" pos:end="89:30"><expr pos:start="89:25" pos:end="89:30"><name pos:start="89:25" pos:end="89:30">stderr</name></expr></argument>, <argument pos:start="89:33" pos:end="89:78"><expr pos:start="89:33" pos:end="89:78"><literal type="string" pos:start="89:33" pos:end="89:78">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>, 

                        <argument pos:start="91:25" pos:end="91:39"><expr pos:start="91:25" pos:end="91:39"><name pos:start="91:25" pos:end="91:39">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:24"><expr pos:start="93:17" pos:end="93:23"><call pos:start="93:17" pos:end="93:23"><name pos:start="93:17" pos:end="93:20">exit</name><argument_list pos:start="93:21" pos:end="93:23">(<argument pos:start="93:22" pos:end="93:22"><expr pos:start="93:22" pos:end="93:22"><literal type="number" pos:start="93:22" pos:end="93:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="99:9" pos:end="117:9"><if pos:start="99:9" pos:end="117:9">if <condition pos:start="99:12" pos:end="99:28">(<expr pos:start="99:13" pos:end="99:27"><name pos:start="99:13" pos:end="99:23">initrd_size</name> <operator pos:start="99:25" pos:end="99:25">&gt;</operator> <literal type="number" pos:start="99:27" pos:end="99:27">0</literal></expr>)</condition> <block pos:start="99:30" pos:end="117:9">{<block_content pos:start="101:13" pos:end="115:13">

	    <for pos:start="101:13" pos:end="115:13">for <control pos:start="101:17" pos:end="101:73">(<init pos:start="101:18" pos:end="101:23"><expr pos:start="101:18" pos:end="101:22"><name pos:start="101:18" pos:end="101:18">i</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <literal type="number" pos:start="101:22" pos:end="101:22">0</literal></expr>;</init> <condition pos:start="101:25" pos:end="101:50"><expr pos:start="101:25" pos:end="101:49"><name pos:start="101:25" pos:end="101:25">i</name> <operator pos:start="101:27" pos:end="101:27">&lt;</operator> <literal type="number" pos:start="101:29" pos:end="101:30">64</literal> <operator pos:start="101:32" pos:end="101:32">*</operator> <name pos:start="101:34" pos:end="101:49">TARGET_PAGE_SIZE</name></expr>;</condition> <incr pos:start="101:52" pos:end="101:72"><expr pos:start="101:52" pos:end="101:72"><name pos:start="101:52" pos:end="101:52">i</name> <operator pos:start="101:54" pos:end="101:55">+=</operator> <name pos:start="101:57" pos:end="101:72">TARGET_PAGE_SIZE</name></expr></incr>)</control> <block pos:start="101:75" pos:end="115:13">{<block_content pos:start="103:17" pos:end="113:17">

		<if_stmt pos:start="103:17" pos:end="113:17"><if pos:start="103:17" pos:end="113:17">if <condition pos:start="103:20" pos:end="105:34">(<expr pos:start="103:21" pos:end="105:33"><call pos:start="103:21" pos:end="103:65"><name pos:start="103:21" pos:end="103:27">ldl_raw</name><argument_list pos:start="103:28" pos:end="103:65">(<argument pos:start="103:29" pos:end="103:64"><expr pos:start="103:29" pos:end="103:64"><name pos:start="103:29" pos:end="103:41">phys_ram_base</name> <operator pos:start="103:43" pos:end="103:43">+</operator> <name pos:start="103:45" pos:end="103:60">KERNEL_LOAD_ADDR</name> <operator pos:start="103:62" pos:end="103:62">+</operator> <name pos:start="103:64" pos:end="103:64">i</name></expr></argument>)</argument_list></call>

		    <operator pos:start="105:21" pos:end="105:22">==</operator> <literal type="number" pos:start="105:24" pos:end="105:33">0x48647253</literal></expr>)</condition> <block pos:start="105:36" pos:end="113:17">{<block_content pos:start="107:21" pos:end="111:26"> <comment type="line" pos:start="105:38" pos:end="105:44">// HdrS</comment>

		    <expr_stmt pos:start="107:21" pos:end="107:89"><expr pos:start="107:21" pos:end="107:88"><call pos:start="107:21" pos:end="107:88"><name pos:start="107:21" pos:end="107:27">stl_raw</name><argument_list pos:start="107:28" pos:end="107:88">(<argument pos:start="107:29" pos:end="107:69"><expr pos:start="107:29" pos:end="107:69"><name pos:start="107:29" pos:end="107:41">phys_ram_base</name> <operator pos:start="107:43" pos:end="107:43">+</operator> <name pos:start="107:45" pos:end="107:60">KERNEL_LOAD_ADDR</name> <operator pos:start="107:62" pos:end="107:62">+</operator> <name pos:start="107:64" pos:end="107:64">i</name> <operator pos:start="107:66" pos:end="107:66">+</operator> <literal type="number" pos:start="107:68" pos:end="107:69">16</literal></expr></argument>, <argument pos:start="107:72" pos:end="107:87"><expr pos:start="107:72" pos:end="107:87"><name pos:start="107:72" pos:end="107:87">INITRD_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt pos:start="109:21" pos:end="109:84"><expr pos:start="109:21" pos:end="109:83"><call pos:start="109:21" pos:end="109:83"><name pos:start="109:21" pos:end="109:27">stl_raw</name><argument_list pos:start="109:28" pos:end="109:83">(<argument pos:start="109:29" pos:end="109:69"><expr pos:start="109:29" pos:end="109:69"><name pos:start="109:29" pos:end="109:41">phys_ram_base</name> <operator pos:start="109:43" pos:end="109:43">+</operator> <name pos:start="109:45" pos:end="109:60">KERNEL_LOAD_ADDR</name> <operator pos:start="109:62" pos:end="109:62">+</operator> <name pos:start="109:64" pos:end="109:64">i</name> <operator pos:start="109:66" pos:end="109:66">+</operator> <literal type="number" pos:start="109:68" pos:end="109:69">20</literal></expr></argument>, <argument pos:start="109:72" pos:end="109:82"><expr pos:start="109:72" pos:end="109:82"><name pos:start="109:72" pos:end="109:82">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <break pos:start="111:21" pos:end="111:26">break;</break>

		</block_content>}</block></if></if_stmt>

	    </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="121:5" pos:end="125:58"><expr pos:start="121:5" pos:end="125:57"><call pos:start="121:5" pos:end="125:57"><name pos:start="121:5" pos:end="121:14">nvram_init</name><argument_list pos:start="121:15" pos:end="125:57">(<argument pos:start="121:16" pos:end="121:20"><expr pos:start="121:16" pos:end="121:20"><name pos:start="121:16" pos:end="121:20">nvram</name></expr></argument>, <argument pos:start="121:23" pos:end="121:53"><expr pos:start="121:23" pos:end="121:53"><operator pos:start="121:23" pos:end="121:23">(</operator><name pos:start="121:24" pos:end="121:30">uint8_t</name> <operator pos:start="121:32" pos:end="121:32">*</operator><operator pos:start="121:33" pos:end="121:33">)</operator><operator pos:start="121:34" pos:end="121:34">&amp;</operator><name pos:start="121:35" pos:end="121:45"><name pos:start="121:35" pos:end="121:42">nd_table</name><index pos:start="121:43" pos:end="121:45">[<expr pos:start="121:44" pos:end="121:44"><literal type="number" pos:start="121:44" pos:end="121:44">0</literal></expr>]</index></name><operator pos:start="121:46" pos:end="121:46">.</operator><name pos:start="121:47" pos:end="121:53">macaddr</name></expr></argument>, <argument pos:start="121:56" pos:end="121:69"><expr pos:start="121:56" pos:end="121:69"><name pos:start="121:56" pos:end="121:69">kernel_cmdline</name></expr></argument>,

               <argument pos:start="123:16" pos:end="123:26"><expr pos:start="123:16" pos:end="123:26"><name pos:start="123:16" pos:end="123:26">boot_device</name></expr></argument>, <argument pos:start="123:29" pos:end="123:36"><expr pos:start="123:29" pos:end="123:36"><name pos:start="123:29" pos:end="123:36">ram_size</name></expr></argument>, <argument pos:start="123:39" pos:end="123:49"><expr pos:start="123:39" pos:end="123:49"><name pos:start="123:39" pos:end="123:49">kernel_size</name></expr></argument>, <argument pos:start="123:52" pos:end="123:64"><expr pos:start="123:52" pos:end="123:64"><name pos:start="123:52" pos:end="123:64">graphic_width</name></expr></argument>,

               <argument pos:start="125:16" pos:end="125:29"><expr pos:start="125:16" pos:end="125:29"><name pos:start="125:16" pos:end="125:29">graphic_height</name></expr></argument>, <argument pos:start="125:32" pos:end="125:44"><expr pos:start="125:32" pos:end="125:44"><name pos:start="125:32" pos:end="125:44">graphic_depth</name></expr></argument>, <argument pos:start="125:47" pos:end="125:56"><expr pos:start="125:47" pos:end="125:56"><name pos:start="125:47" pos:end="125:56">machine_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
