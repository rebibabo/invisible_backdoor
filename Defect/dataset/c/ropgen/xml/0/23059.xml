<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23059.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:13">size_t</name></type> <name pos:start="1:15" pos:end="1:33">qemu_rdma_save_page</name><parameter_list pos:start="1:34" pos:end="5:63">(<parameter pos:start="1:35" pos:end="1:45"><decl pos:start="1:35" pos:end="1:45"><type pos:start="1:35" pos:end="1:45"><name pos:start="1:35" pos:end="1:42">QEMUFile</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">f</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:51">void</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:59">opaque</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:57"><decl pos:start="3:35" pos:end="3:57"><type pos:start="3:35" pos:end="3:57"><name pos:start="3:35" pos:end="3:44">ram_addr_t</name></type> <name pos:start="3:46" pos:end="3:57">block_offset</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:76"><decl pos:start="3:60" pos:end="3:76"><type pos:start="3:60" pos:end="3:76"><name pos:start="3:60" pos:end="3:69">ram_addr_t</name></type> <name pos:start="3:71" pos:end="3:76">offset</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:45"><decl pos:start="5:35" pos:end="5:45"><type pos:start="5:35" pos:end="5:45"><name pos:start="5:35" pos:end="5:40">size_t</name></type> <name pos:start="5:42" pos:end="5:45">size</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:62"><decl pos:start="5:48" pos:end="5:62"><type pos:start="5:48" pos:end="5:62"><name pos:start="5:48" pos:end="5:50">int</name> <modifier pos:start="5:52" pos:end="5:52">*</modifier></type><name pos:start="5:53" pos:end="5:62">bytes_sent</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="191:1">{<block_content pos:start="9:5" pos:end="189:15">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">QEMUFileRDMA</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:23">rfile</name> <init pos:start="9:25" pos:end="9:32">= <expr pos:start="9:27" pos:end="9:32"><name pos:start="9:27" pos:end="9:32">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">RDMAContext</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:21">rdma</name> <init pos:start="11:23" pos:end="11:35">= <expr pos:start="11:25" pos:end="11:35"><name pos:start="11:25" pos:end="11:35"><name pos:start="11:25" pos:end="11:29">rfile</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:35">rdma</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:24"><expr pos:start="17:5" pos:end="17:23"><call pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:21">CHECK_ERROR_STATE</name><argument_list pos:start="17:22" pos:end="17:23">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:19"><expr pos:start="21:5" pos:end="21:18"><call pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:15">qemu_fflush</name><argument_list pos:start="21:16" pos:end="21:18">(<argument pos:start="21:17" pos:end="21:17"><expr pos:start="21:17" pos:end="21:17"><name pos:start="21:17" pos:end="21:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="135:5"><if pos:start="25:5" pos:end="71:5">if <condition pos:start="25:8" pos:end="25:17">(<expr pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:12">size</name> <operator pos:start="25:14" pos:end="25:14">&gt;</operator> <literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>)</condition> <block pos:start="25:19" pos:end="71:5">{<block_content pos:start="37:9" pos:end="69:9">

        <comment type="block" pos:start="27:9" pos:end="35:11">/*

         * Add this page to the current 'chunk'. If the chunk

         * is full, or the page doen't belong to the current chunk,

         * an actual RDMA write will occur and a new chunk will be formed.

         */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:67"><expr pos:start="37:9" pos:end="37:66"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:66"><name pos:start="37:15" pos:end="37:29">qemu_rdma_write</name><argument_list pos:start="37:30" pos:end="37:66">(<argument pos:start="37:31" pos:end="37:31"><expr pos:start="37:31" pos:end="37:31"><name pos:start="37:31" pos:end="37:31">f</name></expr></argument>, <argument pos:start="37:34" pos:end="37:37"><expr pos:start="37:34" pos:end="37:37"><name pos:start="37:34" pos:end="37:37">rdma</name></expr></argument>, <argument pos:start="37:40" pos:end="37:51"><expr pos:start="37:40" pos:end="37:51"><name pos:start="37:40" pos:end="37:51">block_offset</name></expr></argument>, <argument pos:start="37:54" pos:end="37:59"><expr pos:start="37:54" pos:end="37:59"><name pos:start="37:54" pos:end="37:59">offset</name></expr></argument>, <argument pos:start="37:62" pos:end="37:65"><expr pos:start="37:62" pos:end="37:65"><name pos:start="37:62" pos:end="37:65">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:20">(<expr pos:start="39:13" pos:end="39:19"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">&lt;</operator> <literal type="number" pos:start="39:19" pos:end="39:19">0</literal></expr>)</condition> <block pos:start="39:22" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:21">

            <expr_stmt pos:start="41:13" pos:end="41:70"><expr pos:start="41:13" pos:end="41:69"><call pos:start="41:13" pos:end="41:69"><name pos:start="41:13" pos:end="41:19">fprintf</name><argument_list pos:start="41:20" pos:end="41:69">(<argument pos:start="41:21" pos:end="41:26"><expr pos:start="41:21" pos:end="41:26"><name pos:start="41:21" pos:end="41:26">stderr</name></expr></argument>, <argument pos:start="41:29" pos:end="41:63"><expr pos:start="41:29" pos:end="41:63"><literal type="string" pos:start="41:29" pos:end="41:63">"rdma migration: write error! %d\n"</literal></expr></argument>, <argument pos:start="41:66" pos:end="41:68"><expr pos:start="41:66" pos:end="41:68"><name pos:start="41:66" pos:end="41:68">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="43:13" pos:end="43:21">goto <name pos:start="43:18" pos:end="43:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="49:9" pos:end="63:11">/*

         * We always return 1 bytes because the RDMA

         * protocol is completely asynchronous. We do not yet know

         * whether an  identified chunk is zero or not because we're

         * waiting for other pages to potentially be merged with

         * the current chunk. So, we have to call qemu_update_position()

         * later on when the actual write occurs.

         */</comment>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:23">(<expr pos:start="65:13" pos:end="65:22"><name pos:start="65:13" pos:end="65:22">bytes_sent</name></expr>)</condition> <block pos:start="65:25" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:28">

            <expr_stmt pos:start="67:13" pos:end="67:28"><expr pos:start="67:13" pos:end="67:27"><operator pos:start="67:13" pos:end="67:13">*</operator><name pos:start="67:14" pos:end="67:23">bytes_sent</name> <operator pos:start="67:25" pos:end="67:25">=</operator> <literal type="number" pos:start="67:27" pos:end="67:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="135:5">else <block pos:start="71:12" pos:end="135:5">{<block_content pos:start="73:9" pos:end="115:59">

        <decl_stmt pos:start="73:9" pos:end="73:30"><decl pos:start="73:9" pos:end="73:22"><type pos:start="73:9" pos:end="73:16"><name pos:start="73:9" pos:end="73:16">uint64_t</name></type> <name pos:start="73:18" pos:end="73:22">index</name></decl>, <decl pos:start="73:25" pos:end="73:29"><type ref="prev" pos:start="73:9" pos:end="73:16"/><name pos:start="73:25" pos:end="73:29">chunk</name></decl>;</decl_stmt>



        <comment type="block" pos:start="77:9" pos:end="95:10">/* TODO: Change QEMUFileOps prototype to be signed: size_t =&gt; long

        if (size &lt; 0) {

            ret = qemu_rdma_drain_cq(f, rdma);

            if (ret &lt; 0) {

                fprintf(stderr, "rdma: failed to synchronously drain"

                                " completion queue before unregistration.\n");

                goto err;

            }

        }

        */</comment>



        <expr_stmt pos:start="99:9" pos:end="101:71"><expr pos:start="99:9" pos:end="101:70"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="101:70"><name pos:start="99:15" pos:end="99:40">qemu_rdma_search_ram_block</name><argument_list pos:start="99:41" pos:end="101:70">(<argument pos:start="99:42" pos:end="99:45"><expr pos:start="99:42" pos:end="99:45"><name pos:start="99:42" pos:end="99:45">rdma</name></expr></argument>, <argument pos:start="99:48" pos:end="99:59"><expr pos:start="99:48" pos:end="99:59"><name pos:start="99:48" pos:end="99:59">block_offset</name></expr></argument>,

                                         <argument pos:start="101:42" pos:end="101:47"><expr pos:start="101:42" pos:end="101:47"><name pos:start="101:42" pos:end="101:47">offset</name></expr></argument>, <argument pos:start="101:50" pos:end="101:53"><expr pos:start="101:50" pos:end="101:53"><name pos:start="101:50" pos:end="101:53">size</name></expr></argument>, <argument pos:start="101:56" pos:end="101:61"><expr pos:start="101:56" pos:end="101:61"><operator pos:start="101:56" pos:end="101:56">&amp;</operator><name pos:start="101:57" pos:end="101:61">index</name></expr></argument>, <argument pos:start="101:64" pos:end="101:69"><expr pos:start="101:64" pos:end="101:69"><operator pos:start="101:64" pos:end="101:64">&amp;</operator><name pos:start="101:65" pos:end="101:69">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:16">(<expr pos:start="105:13" pos:end="105:15"><name pos:start="105:13" pos:end="105:15">ret</name></expr>)</condition> <block pos:start="105:18" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:21">

            <expr_stmt pos:start="107:13" pos:end="107:57"><expr pos:start="107:13" pos:end="107:56"><call pos:start="107:13" pos:end="107:56"><name pos:start="107:13" pos:end="107:19">fprintf</name><argument_list pos:start="107:20" pos:end="107:56">(<argument pos:start="107:21" pos:end="107:26"><expr pos:start="107:21" pos:end="107:26"><name pos:start="107:21" pos:end="107:26">stderr</name></expr></argument>, <argument pos:start="107:29" pos:end="107:55"><expr pos:start="107:29" pos:end="107:55"><literal type="string" pos:start="107:29" pos:end="107:55">"ram block search failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="109:13" pos:end="109:21">goto <name pos:start="109:18" pos:end="109:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:59"><expr pos:start="115:9" pos:end="115:58"><call pos:start="115:9" pos:end="115:58"><name pos:start="115:9" pos:end="115:35">qemu_rdma_signal_unregister</name><argument_list pos:start="115:36" pos:end="115:58">(<argument pos:start="115:37" pos:end="115:40"><expr pos:start="115:37" pos:end="115:40"><name pos:start="115:37" pos:end="115:40">rdma</name></expr></argument>, <argument pos:start="115:43" pos:end="115:47"><expr pos:start="115:43" pos:end="115:47"><name pos:start="115:43" pos:end="115:47">index</name></expr></argument>, <argument pos:start="115:50" pos:end="115:54"><expr pos:start="115:50" pos:end="115:54"><name pos:start="115:50" pos:end="115:54">chunk</name></expr></argument>, <argument pos:start="115:57" pos:end="115:57"><expr pos:start="115:57" pos:end="115:57"><literal type="number" pos:start="115:57" pos:end="115:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="119:9" pos:end="133:10">/*

         * TODO: Synchronous, guaranteed unregistration (should not occur during

         * fast-path). Otherwise, unregisters will process on the next call to

         * qemu_rdma_drain_cq()

        if (size &lt; 0) {

            qemu_rdma_unregister_waiting(rdma);

        }

        */</comment>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="139:5" pos:end="151:7">/*

     * Drain the Completion Queue if possible, but do not block,

     * just poll.

     *

     * If nothing to poll, the end of the iteration will do this

     * again to make sure we don't overflow the request queue.

     */</comment>

    <while pos:start="153:5" pos:end="179:5">while <condition pos:start="153:11" pos:end="153:13">(<expr pos:start="153:12" pos:end="153:12"><literal type="number" pos:start="153:12" pos:end="153:12">1</literal></expr>)</condition> <block pos:start="153:15" pos:end="179:5">{<block_content pos:start="155:9" pos:end="177:9">

        <decl_stmt pos:start="155:9" pos:end="155:33"><decl pos:start="155:9" pos:end="155:22"><type pos:start="155:9" pos:end="155:16"><name pos:start="155:9" pos:end="155:16">uint64_t</name></type> <name pos:start="155:18" pos:end="155:22">wr_id</name></decl>, <decl pos:start="155:25" pos:end="155:32"><type ref="prev" pos:start="155:9" pos:end="155:16"/><name pos:start="155:25" pos:end="155:32">wr_id_in</name></decl>;</decl_stmt>

        <decl_stmt pos:start="157:9" pos:end="157:50"><decl pos:start="157:9" pos:end="157:49"><type pos:start="157:9" pos:end="157:11"><name pos:start="157:9" pos:end="157:11">int</name></type> <name pos:start="157:13" pos:end="157:15">ret</name> <init pos:start="157:17" pos:end="157:49">= <expr pos:start="157:19" pos:end="157:49"><call pos:start="157:19" pos:end="157:49"><name pos:start="157:19" pos:end="157:32">qemu_rdma_poll</name><argument_list pos:start="157:33" pos:end="157:49">(<argument pos:start="157:34" pos:end="157:37"><expr pos:start="157:34" pos:end="157:37"><name pos:start="157:34" pos:end="157:37">rdma</name></expr></argument>, <argument pos:start="157:40" pos:end="157:48"><expr pos:start="157:40" pos:end="157:48"><operator pos:start="157:40" pos:end="157:40">&amp;</operator><name pos:start="157:41" pos:end="157:48">wr_id_in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="159:9" pos:end="165:9"><if pos:start="159:9" pos:end="165:9">if <condition pos:start="159:12" pos:end="159:20">(<expr pos:start="159:13" pos:end="159:19"><name pos:start="159:13" pos:end="159:15">ret</name> <operator pos:start="159:17" pos:end="159:17">&lt;</operator> <literal type="number" pos:start="159:19" pos:end="159:19">0</literal></expr>)</condition> <block pos:start="159:22" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:21">

            <expr_stmt pos:start="161:13" pos:end="161:72"><expr pos:start="161:13" pos:end="161:71"><call pos:start="161:13" pos:end="161:71"><name pos:start="161:13" pos:end="161:19">fprintf</name><argument_list pos:start="161:20" pos:end="161:71">(<argument pos:start="161:21" pos:end="161:26"><expr pos:start="161:21" pos:end="161:26"><name pos:start="161:21" pos:end="161:26">stderr</name></expr></argument>, <argument pos:start="161:29" pos:end="161:65"><expr pos:start="161:29" pos:end="161:65"><literal type="string" pos:start="161:29" pos:end="161:65">"rdma migration: polling error! %d\n"</literal></expr></argument>, <argument pos:start="161:68" pos:end="161:70"><expr pos:start="161:68" pos:end="161:70"><name pos:start="161:68" pos:end="161:70">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="163:13" pos:end="163:21">goto <name pos:start="163:18" pos:end="163:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:47"><expr pos:start="169:9" pos:end="169:46"><name pos:start="169:9" pos:end="169:13">wr_id</name> <operator pos:start="169:15" pos:end="169:15">=</operator> <name pos:start="169:17" pos:end="169:24">wr_id_in</name> <operator pos:start="169:26" pos:end="169:26">&amp;</operator> <name pos:start="169:28" pos:end="169:46">RDMA_WRID_TYPE_MASK</name></expr>;</expr_stmt>



        <if_stmt pos:start="173:9" pos:end="177:9"><if pos:start="173:9" pos:end="177:9">if <condition pos:start="173:12" pos:end="173:36">(<expr pos:start="173:13" pos:end="173:35"><name pos:start="173:13" pos:end="173:17">wr_id</name> <operator pos:start="173:19" pos:end="173:20">==</operator> <name pos:start="173:22" pos:end="173:35">RDMA_WRID_NONE</name></expr>)</condition> <block pos:start="173:38" pos:end="177:9">{<block_content pos:start="175:13" pos:end="175:18">

            <break pos:start="175:13" pos:end="175:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <return pos:start="183:5" pos:end="183:36">return <expr pos:start="183:12" pos:end="183:35"><name pos:start="183:12" pos:end="183:35">RAM_SAVE_CONTROL_DELAYED</name></expr>;</return>

<label pos:start="185:1" pos:end="185:4"><name pos:start="185:1" pos:end="185:3">err</name>:</label>

    <expr_stmt pos:start="187:5" pos:end="187:28"><expr pos:start="187:5" pos:end="187:27"><name pos:start="187:5" pos:end="187:21"><name pos:start="187:5" pos:end="187:8">rdma</name><operator pos:start="187:9" pos:end="187:10">-&gt;</operator><name pos:start="187:11" pos:end="187:21">error_state</name></name> <operator pos:start="187:23" pos:end="187:23">=</operator> <name pos:start="187:25" pos:end="187:27">ret</name></expr>;</expr_stmt>

    <return pos:start="189:5" pos:end="189:15">return <expr pos:start="189:12" pos:end="189:14"><name pos:start="189:12" pos:end="189:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
