<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7210.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">os_mem_prealloc</name><parameter_list pos:start="1:21" pos:end="1:55">(<parameter pos:start="1:22" pos:end="1:27"><decl pos:start="1:22" pos:end="1:27"><type pos:start="1:22" pos:end="1:27"><name pos:start="1:22" pos:end="1:24">int</name></type> <name pos:start="1:26" pos:end="1:27">fd</name></decl></parameter>, <parameter pos:start="1:30" pos:end="1:39"><decl pos:start="1:30" pos:end="1:39"><type pos:start="1:30" pos:end="1:39"><name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:39">area</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:54"><decl pos:start="1:42" pos:end="1:54"><type pos:start="1:42" pos:end="1:54"><name pos:start="1:42" pos:end="1:47">size_t</name></type> <name pos:start="1:49" pos:end="1:54">memory</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:5">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:20">sigaction</name></name></type> <name pos:start="7:22" pos:end="7:24">act</name></decl>, <decl pos:start="7:27" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:20"/><name pos:start="7:27" pos:end="7:32">oldact</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">sigset_t</name></type> <name pos:start="9:14" pos:end="9:16">set</name></decl>, <decl pos:start="9:19" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:19" pos:end="9:24">oldset</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:33"><expr pos:start="13:5" pos:end="13:32"><call pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:10">memset</name><argument_list pos:start="13:11" pos:end="13:32">(<argument pos:start="13:12" pos:end="13:15"><expr pos:start="13:12" pos:end="13:15"><operator pos:start="13:12" pos:end="13:12">&amp;</operator><name pos:start="13:13" pos:end="13:15">act</name></expr></argument>, <argument pos:start="13:18" pos:end="13:18"><expr pos:start="13:18" pos:end="13:18"><literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr></argument>, <argument pos:start="13:21" pos:end="13:31"><expr pos:start="13:21" pos:end="13:31"><sizeof pos:start="13:21" pos:end="13:31">sizeof<argument_list pos:start="13:27" pos:end="13:31">(<argument pos:start="13:28" pos:end="13:30"><expr pos:start="13:28" pos:end="13:30"><name pos:start="13:28" pos:end="13:30">act</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:37"><expr pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:7">act</name><operator pos:start="15:8" pos:end="15:8">.</operator><name pos:start="15:9" pos:end="15:18">sa_handler</name></name> <operator pos:start="15:20" pos:end="15:20">=</operator> <operator pos:start="15:22" pos:end="15:22">&amp;</operator><name pos:start="15:23" pos:end="15:36">sigbus_handler</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:21"><expr pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:7">act</name><operator pos:start="17:8" pos:end="17:8">.</operator><name pos:start="17:9" pos:end="17:16">sa_flags</name></name> <operator pos:start="17:18" pos:end="17:18">=</operator> <literal type="number" pos:start="17:20" pos:end="17:20">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:42"><name pos:start="21:11" pos:end="21:19">sigaction</name><argument_list pos:start="21:20" pos:end="21:42">(<argument pos:start="21:21" pos:end="21:26"><expr pos:start="21:21" pos:end="21:26"><name pos:start="21:21" pos:end="21:26">SIGBUS</name></expr></argument>, <argument pos:start="21:29" pos:end="21:32"><expr pos:start="21:29" pos:end="21:32"><operator pos:start="21:29" pos:end="21:29">&amp;</operator><name pos:start="21:30" pos:end="21:32">act</name></expr></argument>, <argument pos:start="21:35" pos:end="21:41"><expr pos:start="21:35" pos:end="21:41"><operator pos:start="21:35" pos:end="21:35">&amp;</operator><name pos:start="21:36" pos:end="21:41">oldact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:12">(<expr pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">ret</name></expr>)</condition> <block pos:start="23:14" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:16">

        <expr_stmt pos:start="25:9" pos:end="25:68"><expr pos:start="25:9" pos:end="25:67"><call pos:start="25:9" pos:end="25:67"><name pos:start="25:9" pos:end="25:14">perror</name><argument_list pos:start="25:15" pos:end="25:67">(<argument pos:start="25:16" pos:end="25:66"><expr pos:start="25:16" pos:end="25:66"><literal type="string" pos:start="25:16" pos:end="25:66">"os_mem_prealloc: failed to install signal handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:16"><expr pos:start="27:9" pos:end="27:15"><call pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">exit</name><argument_list pos:start="27:13" pos:end="27:15">(<argument pos:start="27:14" pos:end="27:14"><expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:24">/* unblock SIGBUS */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:22"><expr pos:start="35:5" pos:end="35:21"><call pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:15">sigemptyset</name><argument_list pos:start="35:16" pos:end="35:21">(<argument pos:start="35:17" pos:end="35:20"><expr pos:start="35:17" pos:end="35:20"><operator pos:start="35:17" pos:end="35:17">&amp;</operator><name pos:start="35:18" pos:end="35:20">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><call pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:13">sigaddset</name><argument_list pos:start="37:14" pos:end="37:27">(<argument pos:start="37:15" pos:end="37:18"><expr pos:start="37:15" pos:end="37:18"><operator pos:start="37:15" pos:end="37:15">&amp;</operator><name pos:start="37:16" pos:end="37:18">set</name></expr></argument>, <argument pos:start="37:21" pos:end="37:26"><expr pos:start="37:21" pos:end="37:26"><name pos:start="37:21" pos:end="37:26">SIGBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:48"><expr pos:start="39:5" pos:end="39:47"><call pos:start="39:5" pos:end="39:47"><name pos:start="39:5" pos:end="39:19">pthread_sigmask</name><argument_list pos:start="39:20" pos:end="39:47">(<argument pos:start="39:21" pos:end="39:31"><expr pos:start="39:21" pos:end="39:31"><name pos:start="39:21" pos:end="39:31">SIG_UNBLOCK</name></expr></argument>, <argument pos:start="39:34" pos:end="39:37"><expr pos:start="39:34" pos:end="39:37"><operator pos:start="39:34" pos:end="39:34">&amp;</operator><name pos:start="39:35" pos:end="39:37">set</name></expr></argument>, <argument pos:start="39:40" pos:end="39:46"><expr pos:start="39:40" pos:end="39:46"><operator pos:start="39:40" pos:end="39:40">&amp;</operator><name pos:start="39:41" pos:end="39:46">oldset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="85:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:30">(<expr pos:start="43:9" pos:end="43:29"><call pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:17">sigsetjmp</name><argument_list pos:start="43:18" pos:end="43:29">(<argument pos:start="43:19" pos:end="43:25"><expr pos:start="43:19" pos:end="43:25"><name pos:start="43:19" pos:end="43:25">sigjump</name></expr></argument>, <argument pos:start="43:28" pos:end="43:28"><expr pos:start="43:28" pos:end="43:28"><literal type="number" pos:start="43:28" pos:end="43:28">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:32" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:16">

        <expr_stmt pos:start="45:9" pos:end="47:67"><expr pos:start="45:9" pos:end="47:66"><call pos:start="45:9" pos:end="47:66"><name pos:start="45:9" pos:end="45:15">fprintf</name><argument_list pos:start="45:16" pos:end="47:66">(<argument pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:22"><name pos:start="45:17" pos:end="45:22">stderr</name></expr></argument>, <argument pos:start="45:25" pos:end="47:65"><expr pos:start="45:25" pos:end="47:65"><literal type="string" pos:start="45:25" pos:end="45:73">"os_mem_prealloc: Insufficient free host memory "</literal>

                        <literal type="string" pos:start="47:25" pos:end="47:65">"pages available to allocate guest RAM\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:16"><expr pos:start="49:9" pos:end="49:15"><call pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:12">exit</name><argument_list pos:start="49:13" pos:end="49:15">(<argument pos:start="49:14" pos:end="49:14"><expr pos:start="49:14" pos:end="49:14"><literal type="number" pos:start="49:14" pos:end="49:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="85:5">else <block pos:start="51:12" pos:end="85:5">{<block_content pos:start="53:9" pos:end="83:52">

        <decl_stmt pos:start="53:9" pos:end="53:14"><decl pos:start="53:9" pos:end="53:13"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:46"><decl pos:start="55:9" pos:end="55:45"><type pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:14">size_t</name></type> <name pos:start="55:16" pos:end="55:24">hpagesize</name> <init pos:start="55:26" pos:end="55:45">= <expr pos:start="55:28" pos:end="55:45"><call pos:start="55:28" pos:end="55:45"><name pos:start="55:28" pos:end="55:41">fd_getpagesize</name><argument_list pos:start="55:42" pos:end="55:45">(<argument pos:start="55:43" pos:end="55:44"><expr pos:start="55:43" pos:end="55:44"><name pos:start="55:43" pos:end="55:44">fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:58"><decl pos:start="57:9" pos:end="57:57"><type pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:14">size_t</name></type> <name pos:start="57:16" pos:end="57:23">numpages</name> <init pos:start="57:25" pos:end="57:57">= <expr pos:start="57:27" pos:end="57:57"><call pos:start="57:27" pos:end="57:57"><name pos:start="57:27" pos:end="57:38">DIV_ROUND_UP</name><argument_list pos:start="57:39" pos:end="57:57">(<argument pos:start="57:40" pos:end="57:45"><expr pos:start="57:40" pos:end="57:45"><name pos:start="57:40" pos:end="57:45">memory</name></expr></argument>, <argument pos:start="57:48" pos:end="57:56"><expr pos:start="57:48" pos:end="57:56"><name pos:start="57:48" pos:end="57:56">hpagesize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="61:9" pos:end="61:52">/* MAP_POPULATE silently ignores failures */</comment>

        <for pos:start="63:9" pos:end="67:9">for <control pos:start="63:13" pos:end="63:38">(<init pos:start="63:14" pos:end="63:19"><expr pos:start="63:14" pos:end="63:18"><name pos:start="63:14" pos:end="63:14">i</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <literal type="number" pos:start="63:18" pos:end="63:18">0</literal></expr>;</init> <condition pos:start="63:21" pos:end="63:33"><expr pos:start="63:21" pos:end="63:32"><name pos:start="63:21" pos:end="63:21">i</name> <operator pos:start="63:23" pos:end="63:23">&lt;</operator> <name pos:start="63:25" pos:end="63:32">numpages</name></expr>;</condition> <incr pos:start="63:35" pos:end="63:37"><expr pos:start="63:35" pos:end="63:37"><name pos:start="63:35" pos:end="63:35">i</name><operator pos:start="63:36" pos:end="63:37">++</operator></expr></incr>)</control> <block pos:start="63:40" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:49">

            <expr_stmt pos:start="65:13" pos:end="65:49"><expr pos:start="65:13" pos:end="65:48"><call pos:start="65:13" pos:end="65:48"><name pos:start="65:13" pos:end="65:18">memset</name><argument_list pos:start="65:19" pos:end="65:48">(<argument pos:start="65:20" pos:end="65:41"><expr pos:start="65:20" pos:end="65:41"><name pos:start="65:20" pos:end="65:23">area</name> <operator pos:start="65:25" pos:end="65:25">+</operator> <operator pos:start="65:27" pos:end="65:27">(</operator><name pos:start="65:28" pos:end="65:36">hpagesize</name> <operator pos:start="65:38" pos:end="65:38">*</operator> <name pos:start="65:40" pos:end="65:40">i</name><operator pos:start="65:41" pos:end="65:41">)</operator></expr></argument>, <argument pos:start="65:44" pos:end="65:44"><expr pos:start="65:44" pos:end="65:44"><literal type="number" pos:start="65:44" pos:end="65:44">0</literal></expr></argument>, <argument pos:start="65:47" pos:end="65:47"><expr pos:start="65:47" pos:end="65:47"><literal type="number" pos:start="65:47" pos:end="65:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="71:9" pos:end="71:47"><expr pos:start="71:9" pos:end="71:46"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:46"><name pos:start="71:15" pos:end="71:23">sigaction</name><argument_list pos:start="71:24" pos:end="71:46">(<argument pos:start="71:25" pos:end="71:30"><expr pos:start="71:25" pos:end="71:30"><name pos:start="71:25" pos:end="71:30">SIGBUS</name></expr></argument>, <argument pos:start="71:33" pos:end="71:39"><expr pos:start="71:33" pos:end="71:39"><operator pos:start="71:33" pos:end="71:33">&amp;</operator><name pos:start="71:34" pos:end="71:39">oldact</name></expr></argument>, <argument pos:start="71:42" pos:end="71:45"><expr pos:start="71:42" pos:end="71:45"><name pos:start="71:42" pos:end="71:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:16">(<expr pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">ret</name></expr>)</condition> <block pos:start="73:18" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:20">

            <expr_stmt pos:start="75:13" pos:end="75:74"><expr pos:start="75:13" pos:end="75:73"><call pos:start="75:13" pos:end="75:73"><name pos:start="75:13" pos:end="75:18">perror</name><argument_list pos:start="75:19" pos:end="75:73">(<argument pos:start="75:20" pos:end="75:72"><expr pos:start="75:20" pos:end="75:72"><literal type="string" pos:start="75:20" pos:end="75:72">"os_mem_prealloc: failed to reinstall signal handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:20"><expr pos:start="77:13" pos:end="77:19"><call pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:16">exit</name><argument_list pos:start="77:17" pos:end="77:19">(<argument pos:start="77:18" pos:end="77:18"><expr pos:start="77:18" pos:end="77:18"><literal type="number" pos:start="77:18" pos:end="77:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:52"><expr pos:start="83:9" pos:end="83:51"><call pos:start="83:9" pos:end="83:51"><name pos:start="83:9" pos:end="83:23">pthread_sigmask</name><argument_list pos:start="83:24" pos:end="83:51">(<argument pos:start="83:25" pos:end="83:35"><expr pos:start="83:25" pos:end="83:35"><name pos:start="83:25" pos:end="83:35">SIG_SETMASK</name></expr></argument>, <argument pos:start="83:38" pos:end="83:44"><expr pos:start="83:38" pos:end="83:44"><operator pos:start="83:38" pos:end="83:38">&amp;</operator><name pos:start="83:39" pos:end="83:44">oldset</name></expr></argument>, <argument pos:start="83:47" pos:end="83:50"><expr pos:start="83:47" pos:end="83:50"><name pos:start="83:47" pos:end="83:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
