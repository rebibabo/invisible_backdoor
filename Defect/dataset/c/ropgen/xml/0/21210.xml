<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21210.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:35">cirrus_vga_mem_read</name><parameter_list pos:start="1:36" pos:end="5:50">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:59"><decl pos:start="3:37" pos:end="3:59"><type pos:start="3:37" pos:end="3:59"><name pos:start="3:37" pos:end="3:54">target_phys_addr_t</name></type> <name pos:start="3:56" pos:end="3:59">addr</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:49"><decl pos:start="5:37" pos:end="5:49"><type pos:start="5:37" pos:end="5:49"><name pos:start="5:37" pos:end="5:44">uint32_t</name></type> <name pos:start="5:46" pos:end="5:49">size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="85:1">{<block_content pos:start="9:5" pos:end="83:15">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">CirrusVGAState</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:30">= <expr pos:start="9:25" pos:end="9:30"><name pos:start="9:25" pos:end="9:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type> <name pos:start="11:14" pos:end="11:23">bank_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:24">bank_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:16">val</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:38">(<expr pos:start="19:9" pos:end="19:37"><operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:24"><name pos:start="19:10" pos:end="19:10">s</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:15">vga</name><operator pos:start="19:16" pos:end="19:16">.</operator><name pos:start="19:17" pos:end="19:18">sr</name><index pos:start="19:19" pos:end="19:24">[<expr pos:start="19:20" pos:end="19:23"><literal type="number" pos:start="19:20" pos:end="19:23">0x07</literal></expr>]</index></name> <operator pos:start="19:26" pos:end="19:26">&amp;</operator> <literal type="number" pos:start="19:28" pos:end="19:31">0x01</literal><operator pos:start="19:32" pos:end="19:32">)</operator> <operator pos:start="19:34" pos:end="19:35">==</operator> <literal type="number" pos:start="19:37" pos:end="19:37">0</literal></expr>)</condition> <block pos:start="19:40" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:44">

        <return pos:start="21:9" pos:end="21:44">return <expr pos:start="21:16" pos:end="21:43"><call pos:start="21:16" pos:end="21:43"><name pos:start="21:16" pos:end="21:28">vga_mem_readb</name><argument_list pos:start="21:29" pos:end="21:43">(<argument pos:start="21:30" pos:end="21:36"><expr pos:start="21:30" pos:end="21:36"><operator pos:start="21:30" pos:end="21:30">&amp;</operator><name pos:start="21:31" pos:end="21:36"><name pos:start="21:31" pos:end="21:31">s</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:36">vga</name></name></expr></argument>, <argument pos:start="21:39" pos:end="21:42"><expr pos:start="21:39" pos:end="21:42"><name pos:start="21:39" pos:end="21:42">addr</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="81:5"><if pos:start="27:5" pos:end="59:5">if <condition pos:start="27:8" pos:end="27:23">(<expr pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:12">addr</name> <operator pos:start="27:14" pos:end="27:14">&lt;</operator> <literal type="number" pos:start="27:16" pos:end="27:22">0x10000</literal></expr>)</condition> <block pos:start="27:25" pos:end="59:5">{<block_content pos:start="33:9" pos:end="57:23">

	<comment type="block" pos:start="29:9" pos:end="29:31">/* XXX handle bitblt */</comment>

	<comment type="block" pos:start="31:9" pos:end="31:26">/* video memory */</comment>

	<expr_stmt pos:start="33:9" pos:end="33:32"><expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:18">bank_index</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <name pos:start="33:22" pos:end="33:25">addr</name> <operator pos:start="33:27" pos:end="33:28">&gt;&gt;</operator> <literal type="number" pos:start="33:30" pos:end="33:31">15</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="35:9" pos:end="35:36"><expr pos:start="35:9" pos:end="35:35"><name pos:start="35:9" pos:end="35:19">bank_offset</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:26">addr</name> <operator pos:start="35:28" pos:end="35:28">&amp;</operator> <literal type="number" pos:start="35:30" pos:end="35:35">0x7fff</literal></expr>;</expr_stmt>

	<if_stmt pos:start="37:9" pos:end="57:23"><if pos:start="37:9" pos:end="55:9">if <condition pos:start="37:12" pos:end="37:59">(<expr pos:start="37:13" pos:end="37:58"><name pos:start="37:13" pos:end="37:23">bank_offset</name> <operator pos:start="37:25" pos:end="37:25">&lt;</operator> <name pos:start="37:27" pos:end="37:58"><name pos:start="37:27" pos:end="37:27">s</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:46">cirrus_bank_limit</name><index pos:start="37:47" pos:end="37:58">[<expr pos:start="37:48" pos:end="37:57"><name pos:start="37:48" pos:end="37:57">bank_index</name></expr>]</index></name></expr>)</condition> <block pos:start="37:61" pos:end="55:9">{<block_content pos:start="39:13" pos:end="53:51">

	    <expr_stmt pos:start="39:13" pos:end="39:59"><expr pos:start="39:13" pos:end="39:58"><name pos:start="39:13" pos:end="39:23">bank_offset</name> <operator pos:start="39:25" pos:end="39:26">+=</operator> <name pos:start="39:28" pos:end="39:58"><name pos:start="39:28" pos:end="39:28">s</name><operator pos:start="39:29" pos:end="39:30">-&gt;</operator><name pos:start="39:31" pos:end="39:46">cirrus_bank_base</name><index pos:start="39:47" pos:end="39:58">[<expr pos:start="39:48" pos:end="39:57"><name pos:start="39:48" pos:end="39:57">bank_index</name></expr>]</index></name></expr>;</expr_stmt>

	    <if_stmt pos:start="41:13" pos:end="49:13"><if pos:start="41:13" pos:end="45:13">if <condition pos:start="41:16" pos:end="41:49">(<expr pos:start="41:17" pos:end="41:48"><operator pos:start="41:17" pos:end="41:17">(</operator><name pos:start="41:18" pos:end="41:32"><name pos:start="41:18" pos:end="41:18">s</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:23">vga</name><operator pos:start="41:24" pos:end="41:24">.</operator><name pos:start="41:25" pos:end="41:26">gr</name><index pos:start="41:27" pos:end="41:32">[<expr pos:start="41:28" pos:end="41:31"><literal type="number" pos:start="41:28" pos:end="41:31">0x0B</literal></expr>]</index></name> <operator pos:start="41:34" pos:end="41:34">&amp;</operator> <literal type="number" pos:start="41:36" pos:end="41:39">0x14</literal><operator pos:start="41:40" pos:end="41:40">)</operator> <operator pos:start="41:42" pos:end="41:43">==</operator> <literal type="number" pos:start="41:45" pos:end="41:48">0x14</literal></expr>)</condition> <block pos:start="41:51" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:34">

		<expr_stmt pos:start="43:17" pos:end="43:34"><expr pos:start="43:17" pos:end="43:33"><name pos:start="43:17" pos:end="43:27">bank_offset</name> <operator pos:start="43:29" pos:end="43:31">&lt;&lt;=</operator> <literal type="number" pos:start="43:33" pos:end="43:33">4</literal></expr>;</expr_stmt>

	    </block_content>}</block></if> <if type="elseif" pos:start="45:15" pos:end="49:13">else if <condition pos:start="45:23" pos:end="45:46">(<expr pos:start="45:24" pos:end="45:45"><name pos:start="45:24" pos:end="45:38"><name pos:start="45:24" pos:end="45:24">s</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:29">vga</name><operator pos:start="45:30" pos:end="45:30">.</operator><name pos:start="45:31" pos:end="45:32">gr</name><index pos:start="45:33" pos:end="45:38">[<expr pos:start="45:34" pos:end="45:37"><literal type="number" pos:start="45:34" pos:end="45:37">0x0B</literal></expr>]</index></name> <operator pos:start="45:40" pos:end="45:40">&amp;</operator> <literal type="number" pos:start="45:42" pos:end="45:45">0x02</literal></expr>)</condition> <block pos:start="45:48" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:34">

		<expr_stmt pos:start="47:17" pos:end="47:34"><expr pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:27">bank_offset</name> <operator pos:start="47:29" pos:end="47:31">&lt;&lt;=</operator> <literal type="number" pos:start="47:33" pos:end="47:33">3</literal></expr>;</expr_stmt>

	    </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="51:13" pos:end="51:47"><expr pos:start="51:13" pos:end="51:46"><name pos:start="51:13" pos:end="51:23">bank_offset</name> <operator pos:start="51:25" pos:end="51:26">&amp;=</operator> <name pos:start="51:28" pos:end="51:46"><name pos:start="51:28" pos:end="51:28">s</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:46">cirrus_addr_mask</name></name></expr>;</expr_stmt>

	    <expr_stmt pos:start="53:13" pos:end="53:51"><expr pos:start="53:13" pos:end="53:50"><name pos:start="53:13" pos:end="53:15">val</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <operator pos:start="53:19" pos:end="53:19">*</operator><operator pos:start="53:20" pos:end="53:20">(</operator><name pos:start="53:21" pos:end="53:35"><name pos:start="53:21" pos:end="53:21">s</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:26">vga</name><operator pos:start="53:27" pos:end="53:27">.</operator><name pos:start="53:28" pos:end="53:35">vram_ptr</name></name> <operator pos:start="53:37" pos:end="53:37">+</operator> <name pos:start="53:39" pos:end="53:49">bank_offset</name><operator pos:start="53:50" pos:end="53:50">)</operator></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="55:11" pos:end="57:23">else<block type="pseudo" pos:start="57:13" pos:end="57:23"><block_content pos:start="57:13" pos:end="57:23">

	    <expr_stmt pos:start="57:13" pos:end="57:23"><expr pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:15">val</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <literal type="number" pos:start="57:19" pos:end="57:22">0xff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="59:7" pos:end="71:5">else if <condition pos:start="59:15" pos:end="59:49">(<expr pos:start="59:16" pos:end="59:48"><name pos:start="59:16" pos:end="59:19">addr</name> <operator pos:start="59:21" pos:end="59:22">&gt;=</operator> <literal type="number" pos:start="59:24" pos:end="59:30">0x18000</literal> <operator pos:start="59:32" pos:end="59:33">&amp;&amp;</operator> <name pos:start="59:35" pos:end="59:38">addr</name> <operator pos:start="59:40" pos:end="59:40">&lt;</operator> <literal type="number" pos:start="59:42" pos:end="59:48">0x18100</literal></expr>)</condition> <block pos:start="59:51" pos:end="71:5">{<block_content pos:start="63:9" pos:end="69:9">

	<comment type="block" pos:start="61:9" pos:end="61:31">/* memory-mapped I/O */</comment>

	<expr_stmt pos:start="63:9" pos:end="63:19"><expr pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:11">val</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <literal type="number" pos:start="63:15" pos:end="63:18">0xff</literal></expr>;</expr_stmt>

	<if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:45">(<expr pos:start="65:13" pos:end="65:44"><operator pos:start="65:13" pos:end="65:13">(</operator><name pos:start="65:14" pos:end="65:28"><name pos:start="65:14" pos:end="65:14">s</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:19">vga</name><operator pos:start="65:20" pos:end="65:20">.</operator><name pos:start="65:21" pos:end="65:22">sr</name><index pos:start="65:23" pos:end="65:28">[<expr pos:start="65:24" pos:end="65:27"><literal type="number" pos:start="65:24" pos:end="65:27">0x17</literal></expr>]</index></name> <operator pos:start="65:30" pos:end="65:30">&amp;</operator> <literal type="number" pos:start="65:32" pos:end="65:35">0x44</literal><operator pos:start="65:36" pos:end="65:36">)</operator> <operator pos:start="65:38" pos:end="65:39">==</operator> <literal type="number" pos:start="65:41" pos:end="65:44">0x04</literal></expr>)</condition> <block pos:start="65:47" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:55">

	    <expr_stmt pos:start="67:13" pos:end="67:55"><expr pos:start="67:13" pos:end="67:54"><name pos:start="67:13" pos:end="67:15">val</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:54"><name pos:start="67:19" pos:end="67:38">cirrus_mmio_blt_read</name><argument_list pos:start="67:39" pos:end="67:54">(<argument pos:start="67:40" pos:end="67:40"><expr pos:start="67:40" pos:end="67:40"><name pos:start="67:40" pos:end="67:40">s</name></expr></argument>, <argument pos:start="67:43" pos:end="67:53"><expr pos:start="67:43" pos:end="67:53"><name pos:start="67:43" pos:end="67:46">addr</name> <operator pos:start="67:48" pos:end="67:48">&amp;</operator> <literal type="number" pos:start="67:50" pos:end="67:53">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="81:5">else <block pos:start="71:12" pos:end="81:5">{<block_content pos:start="73:9" pos:end="80:0">

	<expr_stmt pos:start="73:9" pos:end="76:0"><expr pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:11">val</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <literal type="number" pos:start="73:15" pos:end="73:18">0xff</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="75:1" pos:end="75:19">#<cpp:directive pos:start="75:2" pos:end="75:6">ifdef</cpp:directive> <name pos:start="75:8" pos:end="75:19">DEBUG_CIRRUS</name></cpp:ifdef>

	<expr_stmt pos:start="77:9" pos:end="80:0"><expr pos:start="77:9" pos:end="77:62"><call pos:start="77:9" pos:end="77:62"><name pos:start="77:9" pos:end="77:14">printf</name><argument_list pos:start="77:15" pos:end="77:62">(<argument pos:start="77:16" pos:end="77:55"><expr pos:start="77:16" pos:end="77:55"><literal type="string" pos:start="77:16" pos:end="77:35">"cirrus: mem_readb "</literal> <name pos:start="77:37" pos:end="77:50">TARGET_FMT_plx</name> <literal type="string" pos:start="77:52" pos:end="77:55">"\n"</literal></expr></argument>, <argument pos:start="77:58" pos:end="77:61"><expr pos:start="77:58" pos:end="77:61"><name pos:start="77:58" pos:end="77:61">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>

    <return pos:start="83:5" pos:end="83:15">return <expr pos:start="83:12" pos:end="83:14"><name pos:start="83:12" pos:end="83:14">val</name></expr>;</return>

</block_content>}</block></function>
</unit>
