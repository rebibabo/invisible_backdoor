<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27232.c" pos:tabs="8"><function pos:start="1:1" pos:end="221:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">mpeg_field_start</name><parameter_list pos:start="1:28" pos:end="1:80">(<parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:42">MpegEncContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:65"><decl pos:start="1:48" pos:end="1:65"><type pos:start="1:48" pos:end="1:65"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:60">uint8_t</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">buf</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:79"><decl pos:start="1:68" pos:end="1:79"><type pos:start="1:68" pos:end="1:79"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:79">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="221:1">{<block_content pos:start="5:5" pos:end="219:13">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">AVCodecContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:25">avctx</name> <init pos:start="5:27" pos:end="5:36">= <expr pos:start="5:29" pos:end="5:36"><name pos:start="5:29" pos:end="5:36"><name pos:start="5:29" pos:end="5:29">s</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:36">avctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">Mpeg1Context</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">s1</name>      <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><operator pos:start="7:29" pos:end="7:29">(</operator><name pos:start="7:30" pos:end="7:41">Mpeg1Context</name> <operator pos:start="7:43" pos:end="7:43">*</operator><operator pos:start="7:44" pos:end="7:44">)</operator> <name pos:start="7:46" pos:end="7:46">s</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:28"><if pos:start="13:5" pos:end="15:27">if <condition pos:start="13:8" pos:end="13:43">(<expr pos:start="13:9" pos:end="13:42"><name pos:start="13:9" pos:end="13:28"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:28">picture_structure</name></name> <operator pos:start="13:30" pos:end="13:31">==</operator> <name pos:start="13:33" pos:end="13:42">PICT_FRAME</name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:27"><block_content pos:start="15:9" pos:end="15:27">

        <expr_stmt pos:start="15:9" pos:end="15:27"><expr pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:22">first_field</name></name> <operator pos:start="15:24" pos:end="15:24">=</operator> <literal type="number" pos:start="15:26" pos:end="15:26">0</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="17:5" pos:end="19:28">else<block type="pseudo" pos:start="19:9" pos:end="19:28"><block_content pos:start="19:9" pos:end="19:28">

        <expr_stmt pos:start="19:9" pos:end="19:28"><expr pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:22">first_field</name></name> <operator pos:start="19:24" pos:end="19:25">^=</operator> <literal type="number" pos:start="19:27" pos:end="19:27">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:30">/* start frame decoding */</comment>

    <if_stmt pos:start="25:5" pos:end="185:5"><if pos:start="25:5" pos:end="143:5">if <condition pos:start="25:8" pos:end="25:61">(<expr pos:start="25:9" pos:end="25:60"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:22">first_field</name></name> <operator pos:start="25:24" pos:end="25:25">||</operator> <name pos:start="25:27" pos:end="25:46"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:46">picture_structure</name></name> <operator pos:start="25:48" pos:end="25:49">==</operator> <name pos:start="25:51" pos:end="25:60">PICT_FRAME</name></expr>)</condition> <block pos:start="25:63" pos:end="143:5">{<block_content pos:start="27:9" pos:end="141:42">

        <decl_stmt pos:start="27:9" pos:end="27:34"><decl pos:start="27:9" pos:end="27:33"><type pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:23">AVFrameSideData</name> <modifier pos:start="27:25" pos:end="27:25">*</modifier></type><name pos:start="27:26" pos:end="27:33">pan_scan</name></decl>;</decl_stmt>



        <if_stmt pos:start="31:9" pos:end="33:23"><if pos:start="31:9" pos:end="33:23">if <condition pos:start="31:12" pos:end="31:53">(<expr pos:start="31:13" pos:end="31:52"><operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:16">ret</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:47"><name pos:start="31:20" pos:end="31:37">ff_mpv_frame_start</name><argument_list pos:start="31:38" pos:end="31:47">(<argument pos:start="31:39" pos:end="31:39"><expr pos:start="31:39" pos:end="31:39"><name pos:start="31:39" pos:end="31:39">s</name></expr></argument>, <argument pos:start="31:42" pos:end="31:46"><expr pos:start="31:42" pos:end="31:46"><name pos:start="31:42" pos:end="31:46">avctx</name></expr></argument>)</argument_list></call><operator pos:start="31:48" pos:end="31:48">)</operator> <operator pos:start="31:50" pos:end="31:50">&lt;</operator> <literal type="number" pos:start="31:52" pos:end="31:52">0</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:23"><block_content pos:start="33:13" pos:end="33:23">

            <return pos:start="33:13" pos:end="33:23">return <expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:34"><expr pos:start="37:9" pos:end="37:33"><call pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:30">ff_mpeg_er_frame_start</name><argument_list pos:start="37:31" pos:end="37:33">(<argument pos:start="37:32" pos:end="37:32"><expr pos:start="37:32" pos:end="37:32"><name pos:start="37:32" pos:end="37:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="41:53">/* first check if we must repeat the frame */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:51"><expr pos:start="43:9" pos:end="43:50"><name pos:start="43:9" pos:end="43:46"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:30">current_picture_ptr</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:33">f</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:46">repeat_pict</name></name> <operator pos:start="43:48" pos:end="43:48">=</operator> <literal type="number" pos:start="43:50" pos:end="43:50">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="63:9"><if pos:start="45:9" pos:end="63:9">if <condition pos:start="45:12" pos:end="45:34">(<expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:33">repeat_first_field</name></name></expr>)</condition> <block pos:start="45:36" pos:end="63:9">{<block_content pos:start="47:13" pos:end="61:13">

            <if_stmt pos:start="47:13" pos:end="61:13"><if pos:start="47:13" pos:end="57:13">if <condition pos:start="47:16" pos:end="47:40">(<expr pos:start="47:17" pos:end="47:39"><name pos:start="47:17" pos:end="47:39"><name pos:start="47:17" pos:end="47:17">s</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:39">progressive_sequence</name></name></expr>)</condition> <block pos:start="47:42" pos:end="57:13">{<block_content pos:start="49:17" pos:end="55:63">

                <if_stmt pos:start="49:17" pos:end="55:63"><if pos:start="49:17" pos:end="51:63">if <condition pos:start="49:20" pos:end="49:39">(<expr pos:start="49:21" pos:end="49:38"><name pos:start="49:21" pos:end="49:38"><name pos:start="49:21" pos:end="49:21">s</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:38">top_field_first</name></name></expr>)</condition><block type="pseudo" pos:start="51:21" pos:end="51:63"><block_content pos:start="51:21" pos:end="51:63">

                    <expr_stmt pos:start="51:21" pos:end="51:63"><expr pos:start="51:21" pos:end="51:62"><name pos:start="51:21" pos:end="51:58"><name pos:start="51:21" pos:end="51:21">s</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:42">current_picture_ptr</name><operator pos:start="51:43" pos:end="51:44">-&gt;</operator><name pos:start="51:45" pos:end="51:45">f</name><operator pos:start="51:46" pos:end="51:47">-&gt;</operator><name pos:start="51:48" pos:end="51:58">repeat_pict</name></name> <operator pos:start="51:60" pos:end="51:60">=</operator> <literal type="number" pos:start="51:62" pos:end="51:62">4</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="53:17" pos:end="55:63">else<block type="pseudo" pos:start="55:21" pos:end="55:63"><block_content pos:start="55:21" pos:end="55:63">

                    <expr_stmt pos:start="55:21" pos:end="55:63"><expr pos:start="55:21" pos:end="55:62"><name pos:start="55:21" pos:end="55:58"><name pos:start="55:21" pos:end="55:21">s</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:42">current_picture_ptr</name><operator pos:start="55:43" pos:end="55:44">-&gt;</operator><name pos:start="55:45" pos:end="55:45">f</name><operator pos:start="55:46" pos:end="55:47">-&gt;</operator><name pos:start="55:48" pos:end="55:58">repeat_pict</name></name> <operator pos:start="55:60" pos:end="55:60">=</operator> <literal type="number" pos:start="55:62" pos:end="55:62">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="57:15" pos:end="61:13">else if <condition pos:start="57:23" pos:end="57:44">(<expr pos:start="57:24" pos:end="57:43"><name pos:start="57:24" pos:end="57:43"><name pos:start="57:24" pos:end="57:24">s</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:43">progressive_frame</name></name></expr>)</condition> <block pos:start="57:46" pos:end="61:13">{<block_content pos:start="59:17" pos:end="59:59">

                <expr_stmt pos:start="59:17" pos:end="59:59"><expr pos:start="59:17" pos:end="59:58"><name pos:start="59:17" pos:end="59:54"><name pos:start="59:17" pos:end="59:17">s</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:38">current_picture_ptr</name><operator pos:start="59:39" pos:end="59:40">-&gt;</operator><name pos:start="59:41" pos:end="59:41">f</name><operator pos:start="59:42" pos:end="59:43">-&gt;</operator><name pos:start="59:44" pos:end="59:54">repeat_pict</name></name> <operator pos:start="59:56" pos:end="59:56">=</operator> <literal type="number" pos:start="59:58" pos:end="59:58">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="67:9" pos:end="71:64"><expr pos:start="67:9" pos:end="71:63"><name pos:start="67:9" pos:end="67:16">pan_scan</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <call pos:start="67:20" pos:end="71:63"><name pos:start="67:20" pos:end="67:41">av_frame_new_side_data</name><argument_list pos:start="67:42" pos:end="71:63">(<argument pos:start="67:43" pos:end="67:67"><expr pos:start="67:43" pos:end="67:67"><name pos:start="67:43" pos:end="67:67"><name pos:start="67:43" pos:end="67:43">s</name><operator pos:start="67:44" pos:end="67:45">-&gt;</operator><name pos:start="67:46" pos:end="67:64">current_picture_ptr</name><operator pos:start="67:65" pos:end="67:66">-&gt;</operator><name pos:start="67:67" pos:end="67:67">f</name></name></expr></argument>,

                                          <argument pos:start="69:43" pos:end="69:63"><expr pos:start="69:43" pos:end="69:63"><name pos:start="69:43" pos:end="69:63">AV_FRAME_DATA_PANSCAN</name></expr></argument>,

                                          <argument pos:start="71:43" pos:end="71:62"><expr pos:start="71:43" pos:end="71:62"><sizeof pos:start="71:43" pos:end="71:62">sizeof<argument_list pos:start="71:49" pos:end="71:62">(<argument pos:start="71:50" pos:end="71:61"><expr pos:start="71:50" pos:end="71:61"><name pos:start="71:50" pos:end="71:61"><name pos:start="71:50" pos:end="71:51">s1</name><operator pos:start="71:52" pos:end="71:53">-&gt;</operator><name pos:start="71:54" pos:end="71:61">pan_scan</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="75:35"><if pos:start="73:9" pos:end="75:35">if <condition pos:start="73:12" pos:end="73:22">(<expr pos:start="73:13" pos:end="73:21"><operator pos:start="73:13" pos:end="73:13">!</operator><name pos:start="73:14" pos:end="73:21">pan_scan</name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:35"><block_content pos:start="75:13" pos:end="75:35">

            <return pos:start="75:13" pos:end="75:35">return <expr pos:start="75:20" pos:end="75:34"><call pos:start="75:20" pos:end="75:34"><name pos:start="75:20" pos:end="75:26">AVERROR</name><argument_list pos:start="75:27" pos:end="75:34">(<argument pos:start="75:28" pos:end="75:33"><expr pos:start="75:28" pos:end="75:33"><name pos:start="75:28" pos:end="75:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:68"><expr pos:start="77:9" pos:end="77:67"><call pos:start="77:9" pos:end="77:67"><name pos:start="77:9" pos:end="77:14">memcpy</name><argument_list pos:start="77:15" pos:end="77:67">(<argument pos:start="77:16" pos:end="77:29"><expr pos:start="77:16" pos:end="77:29"><name pos:start="77:16" pos:end="77:29"><name pos:start="77:16" pos:end="77:23">pan_scan</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:29">data</name></name></expr></argument>, <argument pos:start="77:32" pos:end="77:44"><expr pos:start="77:32" pos:end="77:44"><operator pos:start="77:32" pos:end="77:32">&amp;</operator><name pos:start="77:33" pos:end="77:44"><name pos:start="77:33" pos:end="77:34">s1</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:44">pan_scan</name></name></expr></argument>, <argument pos:start="77:47" pos:end="77:66"><expr pos:start="77:47" pos:end="77:66"><sizeof pos:start="77:47" pos:end="77:66">sizeof<argument_list pos:start="77:53" pos:end="77:66">(<argument pos:start="77:54" pos:end="77:65"><expr pos:start="77:54" pos:end="77:65"><name pos:start="77:54" pos:end="77:65"><name pos:start="77:54" pos:end="77:55">s1</name><operator pos:start="77:56" pos:end="77:57">-&gt;</operator><name pos:start="77:58" pos:end="77:65">pan_scan</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="81:9" pos:end="95:9"><if pos:start="81:9" pos:end="95:9">if <condition pos:start="81:12" pos:end="81:28">(<expr pos:start="81:13" pos:end="81:27"><name pos:start="81:13" pos:end="81:27"><name pos:start="81:13" pos:end="81:14">s1</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:27">a53_caption</name></name></expr>)</condition> <block pos:start="81:30" pos:end="95:9">{<block_content pos:start="83:13" pos:end="93:39">

            <decl_stmt pos:start="83:13" pos:end="87:38"><decl pos:start="83:13" pos:end="87:37"><type pos:start="83:13" pos:end="83:29"><name pos:start="83:13" pos:end="83:27">AVFrameSideData</name> <modifier pos:start="83:29" pos:end="83:29">*</modifier></type><name pos:start="83:30" pos:end="83:31">sd</name> <init pos:start="83:33" pos:end="87:37">= <expr pos:start="83:35" pos:end="87:37"><call pos:start="83:35" pos:end="87:37"><name pos:start="83:35" pos:end="83:56">av_frame_new_side_data</name><argument_list pos:start="83:57" pos:end="87:37">(

                <argument pos:start="85:17" pos:end="85:41"><expr pos:start="85:17" pos:end="85:41"><name pos:start="85:17" pos:end="85:41"><name pos:start="85:17" pos:end="85:17">s</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:38">current_picture_ptr</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:41">f</name></name></expr></argument>, <argument pos:start="85:44" pos:end="85:63"><expr pos:start="85:44" pos:end="85:63"><name pos:start="85:44" pos:end="85:63">AV_FRAME_DATA_A53_CC</name></expr></argument>,

                <argument pos:start="87:17" pos:end="87:36"><expr pos:start="87:17" pos:end="87:36"><name pos:start="87:17" pos:end="87:36"><name pos:start="87:17" pos:end="87:18">s1</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:36">a53_caption_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="89:13" pos:end="91:72"><if pos:start="89:13" pos:end="91:72">if <condition pos:start="89:16" pos:end="89:19">(<expr pos:start="89:17" pos:end="89:18"><name pos:start="89:17" pos:end="89:18">sd</name></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="91:72"><block_content pos:start="91:17" pos:end="91:72">

                <expr_stmt pos:start="91:17" pos:end="91:72"><expr pos:start="91:17" pos:end="91:71"><call pos:start="91:17" pos:end="91:71"><name pos:start="91:17" pos:end="91:22">memcpy</name><argument_list pos:start="91:23" pos:end="91:71">(<argument pos:start="91:24" pos:end="91:31"><expr pos:start="91:24" pos:end="91:31"><name pos:start="91:24" pos:end="91:31"><name pos:start="91:24" pos:end="91:25">sd</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:31">data</name></name></expr></argument>, <argument pos:start="91:34" pos:end="91:48"><expr pos:start="91:34" pos:end="91:48"><name pos:start="91:34" pos:end="91:48"><name pos:start="91:34" pos:end="91:35">s1</name><operator pos:start="91:36" pos:end="91:37">-&gt;</operator><name pos:start="91:38" pos:end="91:48">a53_caption</name></name></expr></argument>, <argument pos:start="91:51" pos:end="91:70"><expr pos:start="91:51" pos:end="91:70"><name pos:start="91:51" pos:end="91:70"><name pos:start="91:51" pos:end="91:52">s1</name><operator pos:start="91:53" pos:end="91:54">-&gt;</operator><name pos:start="91:55" pos:end="91:70">a53_caption_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:39"><expr pos:start="93:13" pos:end="93:38"><call pos:start="93:13" pos:end="93:38"><name pos:start="93:13" pos:end="93:20">av_freep</name><argument_list pos:start="93:21" pos:end="93:38">(<argument pos:start="93:22" pos:end="93:37"><expr pos:start="93:22" pos:end="93:37"><operator pos:start="93:22" pos:end="93:22">&amp;</operator><name pos:start="93:23" pos:end="93:37"><name pos:start="93:23" pos:end="93:24">s1</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:37">a53_caption</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="99:9" pos:end="113:9"><if pos:start="99:9" pos:end="113:9">if <condition pos:start="99:12" pos:end="99:29">(<expr pos:start="99:13" pos:end="99:28"><name pos:start="99:13" pos:end="99:28"><name pos:start="99:13" pos:end="99:14">s1</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:28">has_stereo3d</name></name></expr>)</condition> <block pos:start="99:31" pos:end="113:9">{<block_content pos:start="101:13" pos:end="111:33">

            <decl_stmt pos:start="101:13" pos:end="101:89"><decl pos:start="101:13" pos:end="101:88"><type pos:start="101:13" pos:end="101:24"><name pos:start="101:13" pos:end="101:22">AVStereo3D</name> <modifier pos:start="101:24" pos:end="101:24">*</modifier></type><name pos:start="101:25" pos:end="101:30">stereo</name> <init pos:start="101:32" pos:end="101:88">= <expr pos:start="101:34" pos:end="101:88"><call pos:start="101:34" pos:end="101:88"><name pos:start="101:34" pos:end="101:61">av_stereo3d_create_side_data</name><argument_list pos:start="101:62" pos:end="101:88">(<argument pos:start="101:63" pos:end="101:87"><expr pos:start="101:63" pos:end="101:87"><name pos:start="101:63" pos:end="101:87"><name pos:start="101:63" pos:end="101:63">s</name><operator pos:start="101:64" pos:end="101:65">-&gt;</operator><name pos:start="101:66" pos:end="101:84">current_picture_ptr</name><operator pos:start="101:85" pos:end="101:86">-&gt;</operator><name pos:start="101:87" pos:end="101:87">f</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="103:13" pos:end="105:39"><if pos:start="103:13" pos:end="105:39">if <condition pos:start="103:16" pos:end="103:24">(<expr pos:start="103:17" pos:end="103:23"><operator pos:start="103:17" pos:end="103:17">!</operator><name pos:start="103:18" pos:end="103:23">stereo</name></expr>)</condition><block type="pseudo" pos:start="105:17" pos:end="105:39"><block_content pos:start="105:17" pos:end="105:39">

                <return pos:start="105:17" pos:end="105:39">return <expr pos:start="105:24" pos:end="105:38"><call pos:start="105:24" pos:end="105:38"><name pos:start="105:24" pos:end="105:30">AVERROR</name><argument_list pos:start="105:31" pos:end="105:38">(<argument pos:start="105:32" pos:end="105:37"><expr pos:start="105:32" pos:end="105:37"><name pos:start="105:32" pos:end="105:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:35"><expr pos:start="109:13" pos:end="109:34"><operator pos:start="109:13" pos:end="109:13">*</operator><name pos:start="109:14" pos:end="109:19">stereo</name> <operator pos:start="109:21" pos:end="109:21">=</operator> <name pos:start="109:23" pos:end="109:34"><name pos:start="109:23" pos:end="109:24">s1</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:34">stereo3d</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:33"><expr pos:start="111:13" pos:end="111:32"><name pos:start="111:13" pos:end="111:28"><name pos:start="111:13" pos:end="111:14">s1</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:28">has_stereo3d</name></name> <operator pos:start="111:30" pos:end="111:30">=</operator> <literal type="number" pos:start="111:32" pos:end="111:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="117:9" pos:end="135:9"><if pos:start="117:9" pos:end="135:9">if <condition pos:start="117:12" pos:end="117:24">(<expr pos:start="117:13" pos:end="117:23"><name pos:start="117:13" pos:end="117:23"><name pos:start="117:13" pos:end="117:14">s1</name><operator pos:start="117:15" pos:end="117:16">-&gt;</operator><name pos:start="117:17" pos:end="117:23">has_afd</name></name></expr>)</condition> <block pos:start="117:26" pos:end="135:9">{<block_content pos:start="119:13" pos:end="133:28">

            <decl_stmt pos:start="119:13" pos:end="123:61"><decl pos:start="119:13" pos:end="123:60"><type pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:27">AVFrameSideData</name> <modifier pos:start="119:29" pos:end="119:29">*</modifier></type><name pos:start="119:30" pos:end="119:31">sd</name> <init pos:start="119:33" pos:end="123:60">=

                <expr pos:start="121:17" pos:end="123:60"><call pos:start="121:17" pos:end="123:60"><name pos:start="121:17" pos:end="121:38">av_frame_new_side_data</name><argument_list pos:start="121:39" pos:end="123:60">(<argument pos:start="121:40" pos:end="121:64"><expr pos:start="121:40" pos:end="121:64"><name pos:start="121:40" pos:end="121:64"><name pos:start="121:40" pos:end="121:40">s</name><operator pos:start="121:41" pos:end="121:42">-&gt;</operator><name pos:start="121:43" pos:end="121:61">current_picture_ptr</name><operator pos:start="121:62" pos:end="121:63">-&gt;</operator><name pos:start="121:64" pos:end="121:64">f</name></name></expr></argument>,

                                       <argument pos:start="123:40" pos:end="123:56"><expr pos:start="123:40" pos:end="123:56"><name pos:start="123:40" pos:end="123:56">AV_FRAME_DATA_AFD</name></expr></argument>, <argument pos:start="123:59" pos:end="123:59"><expr pos:start="123:59" pos:end="123:59"><literal type="number" pos:start="123:59" pos:end="123:59">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="125:13" pos:end="127:39"><if pos:start="125:13" pos:end="127:39">if <condition pos:start="125:16" pos:end="125:20">(<expr pos:start="125:17" pos:end="125:19"><operator pos:start="125:17" pos:end="125:17">!</operator><name pos:start="125:18" pos:end="125:19">sd</name></expr>)</condition><block type="pseudo" pos:start="127:17" pos:end="127:39"><block_content pos:start="127:17" pos:end="127:39">

                <return pos:start="127:17" pos:end="127:39">return <expr pos:start="127:24" pos:end="127:38"><call pos:start="127:24" pos:end="127:38"><name pos:start="127:24" pos:end="127:30">AVERROR</name><argument_list pos:start="127:31" pos:end="127:38">(<argument pos:start="127:32" pos:end="127:37"><expr pos:start="127:32" pos:end="127:37"><name pos:start="127:32" pos:end="127:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="131:13" pos:end="131:34"><expr pos:start="131:13" pos:end="131:33"><operator pos:start="131:13" pos:end="131:13">*</operator><name pos:start="131:14" pos:end="131:21"><name pos:start="131:14" pos:end="131:15">sd</name><operator pos:start="131:16" pos:end="131:17">-&gt;</operator><name pos:start="131:18" pos:end="131:21">data</name></name>   <operator pos:start="131:25" pos:end="131:25">=</operator> <name pos:start="131:27" pos:end="131:33"><name pos:start="131:27" pos:end="131:28">s1</name><operator pos:start="131:29" pos:end="131:30">-&gt;</operator><name pos:start="131:31" pos:end="131:33">afd</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:28"><expr pos:start="133:13" pos:end="133:27"><name pos:start="133:13" pos:end="133:23"><name pos:start="133:13" pos:end="133:14">s1</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:23">has_afd</name></name> <operator pos:start="133:25" pos:end="133:25">=</operator> <literal type="number" pos:start="133:27" pos:end="133:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="139:9" pos:end="141:42"><if pos:start="139:9" pos:end="141:42">if <condition pos:start="139:12" pos:end="139:74">(<expr pos:start="139:13" pos:end="139:73"><name pos:start="139:13" pos:end="139:24">HAVE_THREADS</name> <operator pos:start="139:26" pos:end="139:27">&amp;&amp;</operator> <operator pos:start="139:29" pos:end="139:29">(</operator><name pos:start="139:30" pos:end="139:54"><name pos:start="139:30" pos:end="139:34">avctx</name><operator pos:start="139:35" pos:end="139:36">-&gt;</operator><name pos:start="139:37" pos:end="139:54">active_thread_type</name></name> <operator pos:start="139:56" pos:end="139:56">&amp;</operator> <name pos:start="139:58" pos:end="139:72">FF_THREAD_FRAME</name><operator pos:start="139:73" pos:end="139:73">)</operator></expr>)</condition><block type="pseudo" pos:start="141:13" pos:end="141:42"><block_content pos:start="141:13" pos:end="141:42">

            <expr_stmt pos:start="141:13" pos:end="141:42"><expr pos:start="141:13" pos:end="141:41"><call pos:start="141:13" pos:end="141:41"><name pos:start="141:13" pos:end="141:34">ff_thread_finish_setup</name><argument_list pos:start="141:35" pos:end="141:41">(<argument pos:start="141:36" pos:end="141:40"><expr pos:start="141:36" pos:end="141:40"><name pos:start="141:36" pos:end="141:40">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="143:7" pos:end="185:5">else <block pos:start="143:12" pos:end="185:5">{<block_content pos:start="145:9" pos:end="183:9"> <comment type="line" pos:start="143:14" pos:end="143:28">// second field</comment>

        <decl_stmt pos:start="145:9" pos:end="145:14"><decl pos:start="145:9" pos:end="145:13"><type pos:start="145:9" pos:end="145:11"><name pos:start="145:9" pos:end="145:11">int</name></type> <name pos:start="145:13" pos:end="145:13">i</name></decl>;</decl_stmt>



        <if_stmt pos:start="149:9" pos:end="155:9"><if pos:start="149:9" pos:end="155:9">if <condition pos:start="149:12" pos:end="149:36">(<expr pos:start="149:13" pos:end="149:35"><operator pos:start="149:13" pos:end="149:13">!</operator><name pos:start="149:14" pos:end="149:35"><name pos:start="149:14" pos:end="149:14">s</name><operator pos:start="149:15" pos:end="149:16">-&gt;</operator><name pos:start="149:17" pos:end="149:35">current_picture_ptr</name></name></expr>)</condition> <block pos:start="149:38" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:39">

            <expr_stmt pos:start="151:13" pos:end="151:68"><expr pos:start="151:13" pos:end="151:67"><call pos:start="151:13" pos:end="151:67"><name pos:start="151:13" pos:end="151:18">av_log</name><argument_list pos:start="151:19" pos:end="151:67">(<argument pos:start="151:20" pos:end="151:27"><expr pos:start="151:20" pos:end="151:27"><name pos:start="151:20" pos:end="151:27"><name pos:start="151:20" pos:end="151:20">s</name><operator pos:start="151:21" pos:end="151:22">-&gt;</operator><name pos:start="151:23" pos:end="151:27">avctx</name></name></expr></argument>, <argument pos:start="151:30" pos:end="151:41"><expr pos:start="151:30" pos:end="151:41"><name pos:start="151:30" pos:end="151:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="151:44" pos:end="151:66"><expr pos:start="151:44" pos:end="151:66"><literal type="string" pos:start="151:44" pos:end="151:66">"first field missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="153:13" pos:end="153:39">return <expr pos:start="153:20" pos:end="153:38"><name pos:start="153:20" pos:end="153:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="159:9" pos:end="169:9"><if pos:start="159:9" pos:end="169:9">if <condition pos:start="159:12" pos:end="161:61">(<expr pos:start="159:13" pos:end="161:60"><name pos:start="159:13" pos:end="159:29"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:20">avctx</name><operator pos:start="159:21" pos:end="159:22">-&gt;</operator><name pos:start="159:23" pos:end="159:29">hwaccel</name></name> <operator pos:start="159:31" pos:end="159:32">&amp;&amp;</operator>

            <operator pos:start="161:13" pos:end="161:13">(</operator><name pos:start="161:14" pos:end="161:34"><name pos:start="161:14" pos:end="161:14">s</name><operator pos:start="161:15" pos:end="161:16">-&gt;</operator><name pos:start="161:17" pos:end="161:21">avctx</name><operator pos:start="161:22" pos:end="161:23">-&gt;</operator><name pos:start="161:24" pos:end="161:34">slice_flags</name></name> <operator pos:start="161:36" pos:end="161:36">&amp;</operator> <name pos:start="161:38" pos:end="161:59">SLICE_FLAG_ALLOW_FIELD</name><operator pos:start="161:60" pos:end="161:60">)</operator></expr>)</condition> <block pos:start="161:63" pos:end="169:9">{<block_content pos:start="163:13" pos:end="167:78">

            <if_stmt pos:start="163:13" pos:end="167:78"><if pos:start="163:13" pos:end="167:78">if <condition pos:start="163:16" pos:end="163:59">(<expr pos:start="163:17" pos:end="163:58"><call pos:start="163:17" pos:end="163:54"><name pos:start="163:17" pos:end="163:44"><name pos:start="163:17" pos:end="163:17">s</name><operator pos:start="163:18" pos:end="163:19">-&gt;</operator><name pos:start="163:20" pos:end="163:24">avctx</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:33">hwaccel</name><operator pos:start="163:34" pos:end="163:35">-&gt;</operator><name pos:start="163:36" pos:end="163:44">end_frame</name></name><argument_list pos:start="163:45" pos:end="163:54">(<argument pos:start="163:46" pos:end="163:53"><expr pos:start="163:46" pos:end="163:53"><name pos:start="163:46" pos:end="163:53"><name pos:start="163:46" pos:end="163:46">s</name><operator pos:start="163:47" pos:end="163:48">-&gt;</operator><name pos:start="163:49" pos:end="163:53">avctx</name></name></expr></argument>)</argument_list></call> <operator pos:start="163:56" pos:end="163:56">&lt;</operator> <literal type="number" pos:start="163:58" pos:end="163:58">0</literal></expr>)</condition><block type="pseudo" pos:start="165:17" pos:end="167:78"><block_content pos:start="165:17" pos:end="167:78">

                <expr_stmt pos:start="165:17" pos:end="167:78"><expr pos:start="165:17" pos:end="167:77"><call pos:start="165:17" pos:end="167:77"><name pos:start="165:17" pos:end="165:22">av_log</name><argument_list pos:start="165:23" pos:end="167:77">(<argument pos:start="165:24" pos:end="165:28"><expr pos:start="165:24" pos:end="165:28"><name pos:start="165:24" pos:end="165:28">avctx</name></expr></argument>, <argument pos:start="165:31" pos:end="165:42"><expr pos:start="165:31" pos:end="165:42"><name pos:start="165:31" pos:end="165:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="167:24" pos:end="167:76"><expr pos:start="167:24" pos:end="167:76"><literal type="string" pos:start="167:24" pos:end="167:76">"hardware accelerator failed to decode first field\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="173:9" pos:end="183:9">for <control pos:start="173:13" pos:end="173:31">(<init pos:start="173:14" pos:end="173:19"><expr pos:start="173:14" pos:end="173:18"><name pos:start="173:14" pos:end="173:14">i</name> <operator pos:start="173:16" pos:end="173:16">=</operator> <literal type="number" pos:start="173:18" pos:end="173:18">0</literal></expr>;</init> <condition pos:start="173:21" pos:end="173:26"><expr pos:start="173:21" pos:end="173:25"><name pos:start="173:21" pos:end="173:21">i</name> <operator pos:start="173:23" pos:end="173:23">&lt;</operator> <literal type="number" pos:start="173:25" pos:end="173:25">4</literal></expr>;</condition> <incr pos:start="173:28" pos:end="173:30"><expr pos:start="173:28" pos:end="173:30"><name pos:start="173:28" pos:end="173:28">i</name><operator pos:start="173:29" pos:end="173:30">++</operator></expr></incr>)</control> <block pos:start="173:33" pos:end="183:9">{<block_content pos:start="175:13" pos:end="181:59">

            <expr_stmt pos:start="175:13" pos:end="175:79"><expr pos:start="175:13" pos:end="175:78"><name pos:start="175:13" pos:end="175:41"><name pos:start="175:13" pos:end="175:13">s</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:30">current_picture</name><operator pos:start="175:31" pos:end="175:31">.</operator><name pos:start="175:32" pos:end="175:32">f</name><operator pos:start="175:33" pos:end="175:34">-&gt;</operator><name pos:start="175:35" pos:end="175:38">data</name><index pos:start="175:39" pos:end="175:41">[<expr pos:start="175:40" pos:end="175:40"><name pos:start="175:40" pos:end="175:40">i</name></expr>]</index></name> <operator pos:start="175:43" pos:end="175:43">=</operator> <name pos:start="175:45" pos:end="175:78"><name pos:start="175:45" pos:end="175:45">s</name><operator pos:start="175:46" pos:end="175:47">-&gt;</operator><name pos:start="175:48" pos:end="175:66">current_picture_ptr</name><operator pos:start="175:67" pos:end="175:68">-&gt;</operator><name pos:start="175:69" pos:end="175:69">f</name><operator pos:start="175:70" pos:end="175:71">-&gt;</operator><name pos:start="175:72" pos:end="175:75">data</name><index pos:start="175:76" pos:end="175:78">[<expr pos:start="175:77" pos:end="175:77"><name pos:start="175:77" pos:end="175:77">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="177:13" pos:end="181:59"><if pos:start="177:13" pos:end="181:59">if <condition pos:start="177:16" pos:end="177:58">(<expr pos:start="177:17" pos:end="177:57"><name pos:start="177:17" pos:end="177:36"><name pos:start="177:17" pos:end="177:17">s</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:36">picture_structure</name></name> <operator pos:start="177:38" pos:end="177:39">==</operator> <name pos:start="177:41" pos:end="177:57">PICT_BOTTOM_FIELD</name></expr>)</condition><block type="pseudo" pos:start="179:17" pos:end="181:59"><block_content pos:start="179:17" pos:end="181:59">

                <expr_stmt pos:start="179:17" pos:end="181:59"><expr pos:start="179:17" pos:end="181:58"><name pos:start="179:17" pos:end="179:45"><name pos:start="179:17" pos:end="179:17">s</name><operator pos:start="179:18" pos:end="179:19">-&gt;</operator><name pos:start="179:20" pos:end="179:34">current_picture</name><operator pos:start="179:35" pos:end="179:35">.</operator><name pos:start="179:36" pos:end="179:36">f</name><operator pos:start="179:37" pos:end="179:38">-&gt;</operator><name pos:start="179:39" pos:end="179:42">data</name><index pos:start="179:43" pos:end="179:45">[<expr pos:start="179:44" pos:end="179:44"><name pos:start="179:44" pos:end="179:44">i</name></expr>]</index></name> <operator pos:start="179:47" pos:end="179:48">+=</operator>

                    <name pos:start="181:21" pos:end="181:58"><name pos:start="181:21" pos:end="181:21">s</name><operator pos:start="181:22" pos:end="181:23">-&gt;</operator><name pos:start="181:24" pos:end="181:42">current_picture_ptr</name><operator pos:start="181:43" pos:end="181:44">-&gt;</operator><name pos:start="181:45" pos:end="181:45">f</name><operator pos:start="181:46" pos:end="181:47">-&gt;</operator><name pos:start="181:48" pos:end="181:55">linesize</name><index pos:start="181:56" pos:end="181:58">[<expr pos:start="181:57" pos:end="181:57"><name pos:start="181:57" pos:end="181:57">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="189:5" pos:end="200:0"><if pos:start="189:5" pos:end="200:0">if <condition pos:start="189:8" pos:end="189:23">(<expr pos:start="189:9" pos:end="189:22"><name pos:start="189:9" pos:end="189:22"><name pos:start="189:9" pos:end="189:13">avctx</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:22">hwaccel</name></name></expr>)</condition> <block pos:start="189:25" pos:end="200:0">{<block_content pos:start="191:9" pos:end="193:23">

        <if_stmt pos:start="191:9" pos:end="193:23"><if pos:start="191:9" pos:end="193:23">if <condition pos:start="191:12" pos:end="191:74">(<expr pos:start="191:13" pos:end="191:73"><operator pos:start="191:13" pos:end="191:13">(</operator><name pos:start="191:14" pos:end="191:16">ret</name> <operator pos:start="191:18" pos:end="191:18">=</operator> <call pos:start="191:20" pos:end="191:68"><name pos:start="191:20" pos:end="191:46"><name pos:start="191:20" pos:end="191:24">avctx</name><operator pos:start="191:25" pos:end="191:26">-&gt;</operator><name pos:start="191:27" pos:end="191:33">hwaccel</name><operator pos:start="191:34" pos:end="191:35">-&gt;</operator><name pos:start="191:36" pos:end="191:46">start_frame</name></name><argument_list pos:start="191:47" pos:end="191:68">(<argument pos:start="191:48" pos:end="191:52"><expr pos:start="191:48" pos:end="191:52"><name pos:start="191:48" pos:end="191:52">avctx</name></expr></argument>, <argument pos:start="191:55" pos:end="191:57"><expr pos:start="191:55" pos:end="191:57"><name pos:start="191:55" pos:end="191:57">buf</name></expr></argument>, <argument pos:start="191:60" pos:end="191:67"><expr pos:start="191:60" pos:end="191:67"><name pos:start="191:60" pos:end="191:67">buf_size</name></expr></argument>)</argument_list></call><operator pos:start="191:69" pos:end="191:69">)</operator> <operator pos:start="191:71" pos:end="191:71">&lt;</operator> <literal type="number" pos:start="191:73" pos:end="191:73">0</literal></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="193:23"><block_content pos:start="193:13" pos:end="193:23">

            <return pos:start="193:13" pos:end="193:23">return <expr pos:start="193:20" pos:end="193:22"><name pos:start="193:20" pos:end="193:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="199:1" pos:end="199:15">#<cpp:directive pos:start="199:2" pos:end="199:3">if</cpp:directive> <expr pos:start="199:5" pos:end="199:15"><name pos:start="199:5" pos:end="199:15">FF_API_XVMC</name></expr></cpp:if>

<macro pos:start="201:1" pos:end="201:31"><name pos:start="201:1" pos:end="201:31">FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<comment type="line" pos:start="203:1" pos:end="203:50">// ff_mpv_frame_start will call this function too,</comment>

<comment type="line" pos:start="205:1" pos:end="205:40">// but we need to call it on every field</comment>

    <if_stmt pos:start="207:5" pos:end="211:22"><if pos:start="207:5" pos:end="211:22">if <condition pos:start="207:8" pos:end="207:64">(<expr pos:start="207:9" pos:end="207:63"><name pos:start="207:9" pos:end="207:32">CONFIG_MPEG_XVMC_DECODER</name> <operator pos:start="207:34" pos:end="207:35">&amp;&amp;</operator> <name pos:start="207:37" pos:end="207:63"><name pos:start="207:37" pos:end="207:37">s</name><operator pos:start="207:38" pos:end="207:39">-&gt;</operator><name pos:start="207:40" pos:end="207:44">avctx</name><operator pos:start="207:45" pos:end="207:46">-&gt;</operator><name pos:start="207:47" pos:end="207:63">xvmc_acceleration</name></name></expr>)</condition><block type="pseudo" pos:start="209:9" pos:end="211:22"><block_content pos:start="209:9" pos:end="211:22">

        <if_stmt pos:start="209:9" pos:end="211:22"><if pos:start="209:9" pos:end="211:22">if <condition pos:start="209:12" pos:end="209:46">(<expr pos:start="209:13" pos:end="209:45"><call pos:start="209:13" pos:end="209:41"><name pos:start="209:13" pos:end="209:31">ff_xvmc_field_start</name><argument_list pos:start="209:32" pos:end="209:41">(<argument pos:start="209:33" pos:end="209:33"><expr pos:start="209:33" pos:end="209:33"><name pos:start="209:33" pos:end="209:33">s</name></expr></argument>, <argument pos:start="209:36" pos:end="209:40"><expr pos:start="209:36" pos:end="209:40"><name pos:start="209:36" pos:end="209:40">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="209:43" pos:end="209:43">&lt;</operator> <literal type="number" pos:start="209:45" pos:end="209:45">0</literal></expr>)</condition><block type="pseudo" pos:start="211:13" pos:end="211:22"><block_content pos:start="211:13" pos:end="211:22">

            <return pos:start="211:13" pos:end="211:22">return <expr pos:start="211:20" pos:end="211:21"><operator pos:start="211:20" pos:end="211:20">-</operator><literal type="number" pos:start="211:21" pos:end="211:21">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<macro pos:start="213:1" pos:end="216:0"><name pos:start="213:1" pos:end="216:0">FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif pos:start="215:1" pos:end="215:6">#<cpp:directive pos:start="215:2" pos:end="215:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="215:8" pos:end="215:24">/* FF_API_XVMC */</comment>



    <return pos:start="219:5" pos:end="219:13">return <expr pos:start="219:12" pos:end="219:12"><literal type="number" pos:start="219:12" pos:end="219:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
