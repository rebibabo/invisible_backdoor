<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7648.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:15">av_malloc</name><parameter_list pos:start="1:16" pos:end="1:28">(<parameter pos:start="1:17" pos:end="1:27"><decl pos:start="1:17" pos:end="1:27"><type pos:start="1:17" pos:end="1:22"><name pos:start="1:17" pos:end="1:22">size_t</name></type> <name pos:start="1:24" pos:end="1:27">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:15">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">ptr</name> <init pos:start="5:15" pos:end="5:20">= <expr pos:start="5:17" pos:end="5:20"><name pos:start="5:17" pos:end="5:20">NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="7:1" pos:end="7:24">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:24">CONFIG_MEMALIGN_HACK</name></expr></cpp:if>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">long</name></type> <name pos:start="9:10" pos:end="9:13">diff</name></decl>;</decl_stmt>

<cpp:endif pos:start="11:1" pos:end="11:6">#<cpp:directive pos:start="11:2" pos:end="11:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="15:5" pos:end="15:49">/* let's disallow possible ambiguous cases */</comment>

    <if_stmt pos:start="17:5" pos:end="24:0"><if pos:start="17:5" pos:end="24:0">if <condition pos:start="17:8" pos:end="17:37">(<expr pos:start="17:9" pos:end="17:36"><name pos:start="17:9" pos:end="17:12">size</name> <operator pos:start="17:14" pos:end="17:14">&gt;</operator> <operator pos:start="17:16" pos:end="17:16">(</operator><name pos:start="17:17" pos:end="17:30">max_alloc_size</name> <operator pos:start="17:32" pos:end="17:32">-</operator> <literal type="number" pos:start="17:34" pos:end="17:35">32</literal><operator pos:start="17:36" pos:end="17:36">)</operator></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="24:0"><block_content pos:start="19:9" pos:end="24:0">

        <return pos:start="19:9" pos:end="24:0">return <expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



<cpp:if pos:start="23:1" pos:end="23:24">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:24">CONFIG_MEMALIGN_HACK</name></expr></cpp:if>

    <expr_stmt pos:start="25:5" pos:end="25:31"><expr pos:start="25:5" pos:end="25:30"><name pos:start="25:5" pos:end="25:7">ptr</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:30"><name pos:start="25:11" pos:end="25:16">malloc</name><argument_list pos:start="25:17" pos:end="25:30">(<argument pos:start="25:18" pos:end="25:29"><expr pos:start="25:18" pos:end="25:29"><name pos:start="25:18" pos:end="25:21">size</name> <operator pos:start="25:23" pos:end="25:23">+</operator> <name pos:start="25:25" pos:end="25:29">ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="29:19"><if pos:start="27:5" pos:end="29:19">if <condition pos:start="27:8" pos:end="27:13">(<expr pos:start="27:9" pos:end="27:12"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:12">ptr</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:19"><block_content pos:start="29:9" pos:end="29:19">

        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ptr</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:55"><expr pos:start="31:5" pos:end="31:54"><name pos:start="31:5" pos:end="31:8">diff</name>              <operator pos:start="31:23" pos:end="31:23">=</operator> <operator pos:start="31:25" pos:end="31:25">(</operator><operator pos:start="31:26" pos:end="31:26">(</operator><operator pos:start="31:27" pos:end="31:27">~</operator><operator pos:start="31:28" pos:end="31:28">(</operator><name pos:start="31:29" pos:end="31:32">long</name><operator pos:start="31:33" pos:end="31:33">)</operator><name pos:start="31:34" pos:end="31:36">ptr</name><operator pos:start="31:37" pos:end="31:37">)</operator><operator pos:start="31:38" pos:end="31:38">&amp;</operator><operator pos:start="31:39" pos:end="31:39">(</operator><name pos:start="31:40" pos:end="31:44">ALIGN</name> <operator pos:start="31:46" pos:end="31:46">-</operator> <literal type="number" pos:start="31:48" pos:end="31:48">1</literal><operator pos:start="31:49" pos:end="31:49">)</operator><operator pos:start="31:50" pos:end="31:50">)</operator> <operator pos:start="31:52" pos:end="31:52">+</operator> <literal type="number" pos:start="31:54" pos:end="31:54">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:43"><expr pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:7">ptr</name>               <operator pos:start="33:23" pos:end="33:23">=</operator> <operator pos:start="33:25" pos:end="33:25">(</operator><name pos:start="33:26" pos:end="33:29">char</name> <operator pos:start="33:31" pos:end="33:31">*</operator><operator pos:start="33:32" pos:end="33:32">)</operator><name pos:start="33:33" pos:end="33:35">ptr</name> <operator pos:start="33:37" pos:end="33:37">+</operator> <name pos:start="33:39" pos:end="33:42">diff</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:28"><operator pos:start="35:5" pos:end="35:5">(</operator><operator pos:start="35:6" pos:end="35:6">(</operator><name pos:start="35:7" pos:end="35:10">char</name> <operator pos:start="35:12" pos:end="35:12">*</operator><operator pos:start="35:13" pos:end="35:13">)</operator><name pos:start="35:14" pos:end="35:16">ptr</name><operator pos:start="35:17" pos:end="35:17">)</operator><index pos:start="35:18" pos:end="35:21">[<expr pos:start="35:19" pos:end="35:20"><operator pos:start="35:19" pos:end="35:19">-</operator><literal type="number" pos:start="35:20" pos:end="35:20">1</literal></expr>]</index> <operator pos:start="35:23" pos:end="35:23">=</operator> <name pos:start="35:25" pos:end="35:28">diff</name></expr>;</expr_stmt>

<cpp:elif pos:start="37:1" pos:end="37:25">#<cpp:directive pos:start="37:2" pos:end="37:5">elif</cpp:directive> <expr pos:start="37:7" pos:end="37:25"><name pos:start="37:7" pos:end="37:25">HAVE_POSIX_MEMALIGN</name></expr></cpp:elif>

    <if_stmt pos:start="39:5" pos:end="46:0"><if pos:start="39:5" pos:end="46:0">if <condition pos:start="39:8" pos:end="39:13">(<expr pos:start="39:9" pos:end="39:12"><name pos:start="39:9" pos:end="39:12">size</name></expr>)</condition><block type="pseudo" pos:start="41:5" pos:end="46:0"><block_content pos:start="41:5" pos:end="46:0"> <comment type="line" pos:start="39:15" pos:end="39:75">//OS X on SDK 10.6 has a broken posix_memalign implementation</comment>

    <if_stmt pos:start="41:5" pos:end="46:0"><if pos:start="41:5" pos:end="46:0">if <condition pos:start="41:8" pos:end="41:42">(<expr pos:start="41:9" pos:end="41:41"><call pos:start="41:9" pos:end="41:41"><name pos:start="41:9" pos:end="41:22">posix_memalign</name><argument_list pos:start="41:23" pos:end="41:41">(<argument pos:start="41:24" pos:end="41:27"><expr pos:start="41:24" pos:end="41:27"><operator pos:start="41:24" pos:end="41:24">&amp;</operator><name pos:start="41:25" pos:end="41:27">ptr</name></expr></argument>, <argument pos:start="41:30" pos:end="41:34"><expr pos:start="41:30" pos:end="41:34"><name pos:start="41:30" pos:end="41:34">ALIGN</name></expr></argument>, <argument pos:start="41:37" pos:end="41:40"><expr pos:start="41:37" pos:end="41:40"><name pos:start="41:37" pos:end="41:40">size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="46:0"><block_content pos:start="43:9" pos:end="46:0">

        <expr_stmt pos:start="43:9" pos:end="46:0"><expr pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:11">ptr</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:18">NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<cpp:elif pos:start="45:1" pos:end="45:25">#<cpp:directive pos:start="45:2" pos:end="45:5">elif</cpp:directive> <expr pos:start="45:7" pos:end="45:25"><name pos:start="45:7" pos:end="45:25">HAVE_ALIGNED_MALLOC</name></expr></cpp:elif>

    <expr_stmt pos:start="47:5" pos:end="52:0"><expr pos:start="47:5" pos:end="47:38"><name pos:start="47:5" pos:end="47:7">ptr</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:38"><name pos:start="47:11" pos:end="47:25">_aligned_malloc</name><argument_list pos:start="47:26" pos:end="47:38">(<argument pos:start="47:27" pos:end="47:30"><expr pos:start="47:27" pos:end="47:30"><name pos:start="47:27" pos:end="47:30">size</name></expr></argument>, <argument pos:start="47:33" pos:end="47:37"><expr pos:start="47:33" pos:end="47:37"><name pos:start="47:33" pos:end="47:37">ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="49:1" pos:end="49:19">#<cpp:directive pos:start="49:2" pos:end="49:5">elif</cpp:directive> <expr pos:start="49:7" pos:end="49:19"><name pos:start="49:7" pos:end="49:19">HAVE_MEMALIGN</name></expr></cpp:elif>

<cpp:ifndef pos:start="51:1" pos:end="51:17">#<cpp:directive pos:start="51:2" pos:end="51:7">ifndef</cpp:directive> <name pos:start="51:9" pos:end="51:17">__DJGPP__</name></cpp:ifndef>

    <expr_stmt pos:start="53:5" pos:end="56:0"><expr pos:start="53:5" pos:end="53:31"><name pos:start="53:5" pos:end="53:7">ptr</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:31"><name pos:start="53:11" pos:end="53:18">memalign</name><argument_list pos:start="53:19" pos:end="53:31">(<argument pos:start="53:20" pos:end="53:24"><expr pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:24">ALIGN</name></expr></argument>, <argument pos:start="53:27" pos:end="53:30"><expr pos:start="53:27" pos:end="53:30"><name pos:start="53:27" pos:end="53:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="57:5" pos:end="110:0"><expr pos:start="57:5" pos:end="57:31"><name pos:start="57:5" pos:end="57:7">ptr</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:31"><name pos:start="57:11" pos:end="57:18">memalign</name><argument_list pos:start="57:19" pos:end="57:31">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">size</name></expr></argument>, <argument pos:start="57:26" pos:end="57:30"><expr pos:start="57:26" pos:end="57:30"><name pos:start="57:26" pos:end="57:30">ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="61:5" pos:end="77:7">/* Why 64?

     * Indeed, we should align it:

     *   on  4 for 386

     *   on 16 for 486

     *   on 32 for 586, PPro - K6-III

     *   on 64 for K7 (maybe for P3 too).

     * Because L1 and L2 caches are aligned on those values.

     * But I don't want to code such logic here!

     */</comment>

    <comment type="block" pos:start="79:5" pos:end="85:7">/* Why 32?

     * For AVX ASM. SSE / NEON needs only 16.

     * Why not larger? Because I did not see a difference in benchmarks ...

     */</comment>

    <comment type="block" pos:start="87:5" pos:end="107:7">/* benchmarks with P3

     * memalign(64) + 1          3071, 3051, 3032

     * memalign(64) + 2          3051, 3032, 3041

     * memalign(64) + 4          2911, 2896, 2915

     * memalign(64) + 8          2545, 2554, 2550

     * memalign(64) + 16         2543, 2572, 2563

     * memalign(64) + 32         2546, 2545, 2571

     * memalign(64) + 64         2570, 2533, 2558

     *

     * BTW, malloc seems to do 8-byte alignment by default here.

     */</comment>

<cpp:else pos:start="109:1" pos:end="109:5">#<cpp:directive pos:start="109:2" pos:end="109:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="111:5" pos:end="114:0"><expr pos:start="111:5" pos:end="111:22"><name pos:start="111:5" pos:end="111:7">ptr</name> <operator pos:start="111:9" pos:end="111:9">=</operator> <call pos:start="111:11" pos:end="111:22"><name pos:start="111:11" pos:end="111:16">malloc</name><argument_list pos:start="111:17" pos:end="111:22">(<argument pos:start="111:18" pos:end="111:21"><expr pos:start="111:18" pos:end="111:21"><name pos:start="111:18" pos:end="111:21">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="113:1" pos:end="113:6">#<cpp:directive pos:start="113:2" pos:end="113:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="115:5" pos:end="124:0"><if pos:start="115:5" pos:end="124:0">if<condition pos:start="115:7" pos:end="115:21">(<expr pos:start="115:8" pos:end="115:20"><operator pos:start="115:8" pos:end="115:8">!</operator><name pos:start="115:9" pos:end="115:11">ptr</name> <operator pos:start="115:13" pos:end="115:14">&amp;&amp;</operator> <operator pos:start="115:16" pos:end="115:16">!</operator><name pos:start="115:17" pos:end="115:20">size</name></expr>)</condition> <block pos:start="115:23" pos:end="124:0">{<block_content pos:start="117:9" pos:end="119:26">

        <expr_stmt pos:start="117:9" pos:end="117:17"><expr pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:12">size</name> <operator pos:start="117:14" pos:end="117:14">=</operator> <literal type="number" pos:start="117:16" pos:end="117:16">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:26"><expr pos:start="119:9" pos:end="119:25"><name pos:start="119:9" pos:end="119:11">ptr</name><operator pos:start="119:12" pos:end="119:12">=</operator> <call pos:start="119:14" pos:end="119:25"><name pos:start="119:14" pos:end="119:22">av_malloc</name><argument_list pos:start="119:23" pos:end="119:25">(<argument pos:start="119:24" pos:end="119:24"><expr pos:start="119:24" pos:end="119:24"><literal type="number" pos:start="119:24" pos:end="119:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="123:1" pos:end="123:27">#<cpp:directive pos:start="123:2" pos:end="123:3">if</cpp:directive> <expr pos:start="123:5" pos:end="123:27"><name pos:start="123:5" pos:end="123:27">CONFIG_MEMORY_POISONING</name></expr></cpp:if>

    <if_stmt pos:start="125:5" pos:end="130:0"><if pos:start="125:5" pos:end="130:0">if <condition pos:start="125:8" pos:end="125:12">(<expr pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:11">ptr</name></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="130:0"><block_content pos:start="127:9" pos:end="130:0">

        <expr_stmt pos:start="127:9" pos:end="130:0"><expr pos:start="127:9" pos:end="127:31"><call pos:start="127:9" pos:end="127:31"><name pos:start="127:9" pos:end="127:14">memset</name><argument_list pos:start="127:15" pos:end="127:31">(<argument pos:start="127:16" pos:end="127:18"><expr pos:start="127:16" pos:end="127:18"><name pos:start="127:16" pos:end="127:18">ptr</name></expr></argument>, <argument pos:start="127:21" pos:end="127:24"><expr pos:start="127:21" pos:end="127:24"><literal type="number" pos:start="127:21" pos:end="127:24">0x2a</literal></expr></argument>, <argument pos:start="127:27" pos:end="127:30"><expr pos:start="127:27" pos:end="127:30"><name pos:start="127:27" pos:end="127:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="129:1" pos:end="129:6">#<cpp:directive pos:start="129:2" pos:end="129:6">endif</cpp:directive></cpp:endif>

    <return pos:start="131:5" pos:end="131:15">return <expr pos:start="131:12" pos:end="131:14"><name pos:start="131:12" pos:end="131:14">ptr</name></expr>;</return>

</block_content>}</block></function>
</unit>
