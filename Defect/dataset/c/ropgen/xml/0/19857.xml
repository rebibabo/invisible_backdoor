<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19857.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">vmdaudio_decode_frame</name><parameter_list pos:start="1:33" pos:end="3:69">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:47">AVCodecContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">avctx</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:66"><decl pos:start="1:57" pos:end="1:66"><type pos:start="1:57" pos:end="1:66"><name pos:start="1:57" pos:end="1:60">void</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">data</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:51"><decl pos:start="3:34" pos:end="3:51"><type pos:start="3:34" pos:end="3:51"><name pos:start="3:34" pos:end="3:36">int</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:51">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:68"><decl pos:start="3:54" pos:end="3:68"><type pos:start="3:54" pos:end="3:68"><name pos:start="3:54" pos:end="3:61">AVPacket</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:68">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="175:1">{<block_content pos:start="7:5" pos:end="173:23">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:26">buf_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">VmdAudioContext</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:22">s</name> <init pos:start="13:24" pos:end="13:41">= <expr pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:30">avctx</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">block_type</name></decl>, <decl pos:start="15:21" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:33">silent_chunks</name></decl>, <decl pos:start="15:36" pos:end="15:47"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:36" pos:end="15:47">audio_chunks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:30">output_samples_u8</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">int16_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:31">output_samples_s16</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:22">(<expr pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:16">buf_size</name> <operator pos:start="25:18" pos:end="25:18">&lt;</operator> <literal type="number" pos:start="25:20" pos:end="25:21">16</literal></expr>)</condition> <block pos:start="25:24" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:24">

        <expr_stmt pos:start="27:9" pos:end="27:70"><expr pos:start="27:9" pos:end="27:69"><call pos:start="27:9" pos:end="27:69"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:69">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:36"><expr pos:start="27:23" pos:end="27:36"><name pos:start="27:23" pos:end="27:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="27:39" pos:end="27:68"><expr pos:start="27:39" pos:end="27:68"><literal type="string" pos:start="27:39" pos:end="27:68">"skipping small junk packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:27"><expr pos:start="29:9" pos:end="29:26"><operator pos:start="29:9" pos:end="29:9">*</operator><name pos:start="29:10" pos:end="29:22">got_frame_ptr</name> <operator pos:start="29:24" pos:end="29:24">=</operator> <literal type="number" pos:start="29:26" pos:end="29:26">0</literal></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:24">return <expr pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:24"><expr pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:14">block_type</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:23"><name pos:start="37:18" pos:end="37:20">buf</name><index pos:start="37:21" pos:end="37:23">[<expr pos:start="37:22" pos:end="37:22"><literal type="number" pos:start="37:22" pos:end="37:22">6</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:73">(<expr pos:start="39:9" pos:end="39:72"><name pos:start="39:9" pos:end="39:53"><name pos:start="39:9" pos:end="39:18">block_type</name> <argument_list type="generic" pos:start="39:20" pos:end="39:53">&lt; <argument pos:start="39:22" pos:end="39:51"><expr pos:start="39:22" pos:end="39:51"><name pos:start="39:22" pos:end="39:37">BLOCK_TYPE_AUDIO</name> <operator pos:start="39:39" pos:end="39:40">||</operator> <name pos:start="39:42" pos:end="39:51">block_type</name></expr></argument> &gt;</argument_list></name> <name pos:start="39:55" pos:end="39:72">BLOCK_TYPE_SILENCE</name></expr>)</condition> <block pos:start="39:75" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:31">

        <expr_stmt pos:start="41:9" pos:end="41:76"><expr pos:start="41:9" pos:end="41:75"><call pos:start="41:9" pos:end="41:75"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:75">(<argument pos:start="41:16" pos:end="41:20"><expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">avctx</name></expr></argument>, <argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:37" pos:end="41:62"><expr pos:start="41:37" pos:end="41:62"><literal type="string" pos:start="41:37" pos:end="41:62">"unknown block type: %d\n"</literal></expr></argument>, <argument pos:start="41:65" pos:end="41:74"><expr pos:start="41:65" pos:end="41:74"><name pos:start="41:65" pos:end="41:74">block_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:31">return <expr pos:start="43:16" pos:end="43:30"><call pos:start="43:16" pos:end="43:30"><name pos:start="43:16" pos:end="43:22">AVERROR</name><argument_list pos:start="43:23" pos:end="43:30">(<argument pos:start="43:24" pos:end="43:29"><expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:19"><expr pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:7">buf</name>      <operator pos:start="47:14" pos:end="47:15">+=</operator> <literal type="number" pos:start="47:17" pos:end="47:18">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:19"><expr pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:12">buf_size</name> <operator pos:start="49:14" pos:end="49:15">-=</operator> <literal type="number" pos:start="49:17" pos:end="49:18">16</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:37">/* get number of silent chunks */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:22"><expr pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:17">silent_chunks</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <literal type="number" pos:start="55:21" pos:end="55:21">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="83:5"><if pos:start="57:5" pos:end="77:5">if <condition pos:start="57:8" pos:end="57:41">(<expr pos:start="57:9" pos:end="57:40"><name pos:start="57:9" pos:end="57:18">block_type</name> <operator pos:start="57:20" pos:end="57:21">==</operator> <name pos:start="57:23" pos:end="57:40">BLOCK_TYPE_INITIAL</name></expr>)</condition> <block pos:start="57:43" pos:end="77:5">{<block_content pos:start="59:9" pos:end="75:22">

        <decl_stmt pos:start="59:9" pos:end="59:23"><decl pos:start="59:9" pos:end="59:22"><type pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:16">uint32_t</name></type> <name pos:start="59:18" pos:end="59:22">flags</name></decl>;</decl_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:25">(<expr pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:20">buf_size</name> <operator pos:start="61:22" pos:end="61:22">&lt;</operator> <literal type="number" pos:start="61:24" pos:end="61:24">4</literal></expr>)</condition> <block pos:start="61:27" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:35">

            <expr_stmt pos:start="63:13" pos:end="63:65"><expr pos:start="63:13" pos:end="63:64"><call pos:start="63:13" pos:end="63:64"><name pos:start="63:13" pos:end="63:18">av_log</name><argument_list pos:start="63:19" pos:end="63:64">(<argument pos:start="63:20" pos:end="63:24"><expr pos:start="63:20" pos:end="63:24"><name pos:start="63:20" pos:end="63:24">avctx</name></expr></argument>, <argument pos:start="63:27" pos:end="63:38"><expr pos:start="63:27" pos:end="63:38"><name pos:start="63:27" pos:end="63:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:41" pos:end="63:63"><expr pos:start="63:41" pos:end="63:63"><literal type="string" pos:start="63:41" pos:end="63:63">"packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:35">return <expr pos:start="65:20" pos:end="65:34"><call pos:start="65:20" pos:end="65:34"><name pos:start="65:20" pos:end="65:26">AVERROR</name><argument_list pos:start="65:27" pos:end="65:34">(<argument pos:start="65:28" pos:end="65:33"><expr pos:start="65:28" pos:end="65:33"><name pos:start="65:28" pos:end="65:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:37"><expr pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:13">flags</name>         <operator pos:start="69:23" pos:end="69:23">=</operator> <call pos:start="69:25" pos:end="69:36"><name pos:start="69:25" pos:end="69:31">AV_RB32</name><argument_list pos:start="69:32" pos:end="69:36">(<argument pos:start="69:33" pos:end="69:35"><expr pos:start="69:33" pos:end="69:35"><name pos:start="69:33" pos:end="69:35">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:43"><expr pos:start="71:9" pos:end="71:42"><name pos:start="71:9" pos:end="71:21">silent_chunks</name> <operator pos:start="71:23" pos:end="71:23">=</operator> <call pos:start="71:25" pos:end="71:42"><name pos:start="71:25" pos:end="71:35">av_popcount</name><argument_list pos:start="71:36" pos:end="71:42">(<argument pos:start="71:37" pos:end="71:41"><expr pos:start="71:37" pos:end="71:41"><name pos:start="71:37" pos:end="71:41">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:22"><expr pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:11">buf</name>      <operator pos:start="73:18" pos:end="73:19">+=</operator> <literal type="number" pos:start="73:21" pos:end="73:21">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:22"><expr pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:16">buf_size</name> <operator pos:start="75:18" pos:end="75:19">-=</operator> <literal type="number" pos:start="75:21" pos:end="75:21">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="83:5">else if <condition pos:start="77:15" pos:end="77:48">(<expr pos:start="77:16" pos:end="77:47"><name pos:start="77:16" pos:end="77:25">block_type</name> <operator pos:start="77:27" pos:end="77:28">==</operator> <name pos:start="77:30" pos:end="77:47">BLOCK_TYPE_SILENCE</name></expr>)</condition> <block pos:start="77:50" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:21">

        <expr_stmt pos:start="79:9" pos:end="79:26"><expr pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:21">silent_chunks</name> <operator pos:start="79:23" pos:end="79:23">=</operator> <literal type="number" pos:start="79:25" pos:end="79:25">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:21"><expr pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:16">buf_size</name> <operator pos:start="81:18" pos:end="81:18">=</operator> <literal type="number" pos:start="81:20" pos:end="81:20">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="81:23" pos:end="81:74">// should already be zero but set it just to be sure</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:46">/* ensure output buffer is large enough */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:44"><expr pos:start="89:5" pos:end="89:43"><name pos:start="89:5" pos:end="89:16">audio_chunks</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <name pos:start="89:20" pos:end="89:27">buf_size</name> <operator pos:start="89:29" pos:end="89:29">/</operator> <name pos:start="89:31" pos:end="89:43"><name pos:start="89:31" pos:end="89:31">s</name><operator pos:start="89:32" pos:end="89:33">-&gt;</operator><name pos:start="89:34" pos:end="89:43">chunk_size</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:27">/* get output buffer */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:98"><expr pos:start="95:5" pos:end="95:97"><name pos:start="95:5" pos:end="95:23"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:12">frame</name><operator pos:start="95:13" pos:end="95:13">.</operator><name pos:start="95:14" pos:end="95:23">nb_samples</name></name> <operator pos:start="95:25" pos:end="95:25">=</operator> <operator pos:start="95:27" pos:end="95:27">(</operator><operator pos:start="95:28" pos:end="95:28">(</operator><name pos:start="95:29" pos:end="95:41">silent_chunks</name> <operator pos:start="95:43" pos:end="95:43">+</operator> <name pos:start="95:45" pos:end="95:56">audio_chunks</name><operator pos:start="95:57" pos:end="95:57">)</operator> <operator pos:start="95:59" pos:end="95:59">*</operator> <name pos:start="95:61" pos:end="95:78"><name pos:start="95:61" pos:end="95:65">avctx</name><operator pos:start="95:66" pos:end="95:67">-&gt;</operator><name pos:start="95:68" pos:end="95:78">block_align</name></name><operator pos:start="95:79" pos:end="95:79">)</operator> <operator pos:start="95:81" pos:end="95:81">/</operator> <name pos:start="95:83" pos:end="95:97"><name pos:start="95:83" pos:end="95:87">avctx</name><operator pos:start="95:88" pos:end="95:89">-&gt;</operator><name pos:start="95:90" pos:end="95:97">channels</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:56">(<expr pos:start="97:9" pos:end="97:55"><operator pos:start="97:9" pos:end="97:9">(</operator><name pos:start="97:10" pos:end="97:12">ret</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <call pos:start="97:16" pos:end="97:50"><name pos:start="97:16" pos:end="97:32"><name pos:start="97:16" pos:end="97:20">avctx</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:32">get_buffer</name></name><argument_list pos:start="97:33" pos:end="97:50">(<argument pos:start="97:34" pos:end="97:38"><expr pos:start="97:34" pos:end="97:38"><name pos:start="97:34" pos:end="97:38">avctx</name></expr></argument>, <argument pos:start="97:41" pos:end="97:49"><expr pos:start="97:41" pos:end="97:49"><operator pos:start="97:41" pos:end="97:41">&amp;</operator><name pos:start="97:42" pos:end="97:49"><name pos:start="97:42" pos:end="97:42">s</name><operator pos:start="97:43" pos:end="97:44">-&gt;</operator><name pos:start="97:45" pos:end="97:49">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="97:51" pos:end="97:51">)</operator> <operator pos:start="97:53" pos:end="97:53">&lt;</operator> <literal type="number" pos:start="97:55" pos:end="97:55">0</literal></expr>)</condition> <block pos:start="97:58" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:19">

        <expr_stmt pos:start="99:9" pos:end="99:61"><expr pos:start="99:9" pos:end="99:60"><call pos:start="99:9" pos:end="99:60"><name pos:start="99:9" pos:end="99:14">av_log</name><argument_list pos:start="99:15" pos:end="99:60">(<argument pos:start="99:16" pos:end="99:20"><expr pos:start="99:16" pos:end="99:20"><name pos:start="99:16" pos:end="99:20">avctx</name></expr></argument>, <argument pos:start="99:23" pos:end="99:34"><expr pos:start="99:23" pos:end="99:34"><name pos:start="99:23" pos:end="99:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:37" pos:end="99:59"><expr pos:start="99:37" pos:end="99:59"><literal type="string" pos:start="99:37" pos:end="99:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:19">return <expr pos:start="101:16" pos:end="101:18"><name pos:start="101:16" pos:end="101:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:42"><expr pos:start="105:5" pos:end="105:41"><name pos:start="105:5" pos:end="105:21">output_samples_u8</name>  <operator pos:start="105:24" pos:end="105:24">=</operator> <name pos:start="105:26" pos:end="105:41"><name pos:start="105:26" pos:end="105:26">s</name><operator pos:start="105:27" pos:end="105:28">-&gt;</operator><name pos:start="105:29" pos:end="105:33">frame</name><operator pos:start="105:34" pos:end="105:34">.</operator><name pos:start="105:35" pos:end="105:38">data</name><index pos:start="105:39" pos:end="105:41">[<expr pos:start="105:40" pos:end="105:40"><literal type="number" pos:start="105:40" pos:end="105:40">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:53"><expr pos:start="107:5" pos:end="107:52"><name pos:start="107:5" pos:end="107:22">output_samples_s16</name> <operator pos:start="107:24" pos:end="107:24">=</operator> <operator pos:start="107:26" pos:end="107:26">(</operator><name pos:start="107:27" pos:end="107:33">int16_t</name> <operator pos:start="107:35" pos:end="107:35">*</operator><operator pos:start="107:36" pos:end="107:36">)</operator><name pos:start="107:37" pos:end="107:52"><name pos:start="107:37" pos:end="107:37">s</name><operator pos:start="107:38" pos:end="107:39">-&gt;</operator><name pos:start="107:40" pos:end="107:44">frame</name><operator pos:start="107:45" pos:end="107:45">.</operator><name pos:start="107:46" pos:end="107:49">data</name><index pos:start="107:50" pos:end="107:52">[<expr pos:start="107:51" pos:end="107:51"><literal type="number" pos:start="107:51" pos:end="107:51">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:30">/* decode silent chunks */</comment>

    <if_stmt pos:start="113:5" pos:end="131:5"><if pos:start="113:5" pos:end="131:5">if <condition pos:start="113:8" pos:end="113:26">(<expr pos:start="113:9" pos:end="113:25"><name pos:start="113:9" pos:end="113:21">silent_chunks</name> <operator pos:start="113:23" pos:end="113:23">&gt;</operator> <literal type="number" pos:start="113:25" pos:end="113:25">0</literal></expr>)</condition> <block pos:start="113:28" pos:end="131:5">{<block_content pos:start="115:9" pos:end="129:9">

        <decl_stmt pos:start="115:9" pos:end="115:61"><decl pos:start="115:9" pos:end="115:60"><type pos:start="115:9" pos:end="115:11"><name pos:start="115:9" pos:end="115:11">int</name></type> <name pos:start="115:13" pos:end="115:23">silent_size</name> <init pos:start="115:25" pos:end="115:60">= <expr pos:start="115:27" pos:end="115:60"><name pos:start="115:27" pos:end="115:44"><name pos:start="115:27" pos:end="115:31">avctx</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:44">block_align</name></name> <operator pos:start="115:46" pos:end="115:46">*</operator> <name pos:start="115:48" pos:end="115:60">silent_chunks</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="117:9" pos:end="129:9"><if pos:start="117:9" pos:end="123:9">if <condition pos:start="117:12" pos:end="117:28">(<expr pos:start="117:13" pos:end="117:27"><name pos:start="117:13" pos:end="117:22"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:22">out_bps</name></name> <operator pos:start="117:24" pos:end="117:25">==</operator> <literal type="number" pos:start="117:27" pos:end="117:27">2</literal></expr>)</condition> <block pos:start="117:30" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:46">

            <expr_stmt pos:start="119:13" pos:end="119:62"><expr pos:start="119:13" pos:end="119:61"><call pos:start="119:13" pos:end="119:61"><name pos:start="119:13" pos:end="119:18">memset</name><argument_list pos:start="119:19" pos:end="119:61">(<argument pos:start="119:20" pos:end="119:37"><expr pos:start="119:20" pos:end="119:37"><name pos:start="119:20" pos:end="119:37">output_samples_s16</name></expr></argument>, <argument pos:start="119:40" pos:end="119:43"><expr pos:start="119:40" pos:end="119:43"><literal type="number" pos:start="119:40" pos:end="119:43">0x00</literal></expr></argument>, <argument pos:start="119:46" pos:end="119:60"><expr pos:start="119:46" pos:end="119:60"><name pos:start="119:46" pos:end="119:56">silent_size</name> <operator pos:start="119:58" pos:end="119:58">*</operator> <literal type="number" pos:start="119:60" pos:end="119:60">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:46"><expr pos:start="121:13" pos:end="121:45"><name pos:start="121:13" pos:end="121:30">output_samples_s16</name> <operator pos:start="121:32" pos:end="121:33">+=</operator> <name pos:start="121:35" pos:end="121:45">silent_size</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="123:11" pos:end="129:9">else <block pos:start="123:16" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:45">

            <expr_stmt pos:start="125:13" pos:end="125:58"><expr pos:start="125:13" pos:end="125:57"><call pos:start="125:13" pos:end="125:57"><name pos:start="125:13" pos:end="125:18">memset</name><argument_list pos:start="125:19" pos:end="125:57">(<argument pos:start="125:20" pos:end="125:36"><expr pos:start="125:20" pos:end="125:36"><name pos:start="125:20" pos:end="125:36">output_samples_u8</name></expr></argument>,  <argument pos:start="125:40" pos:end="125:43"><expr pos:start="125:40" pos:end="125:43"><literal type="number" pos:start="125:40" pos:end="125:43">0x80</literal></expr></argument>, <argument pos:start="125:46" pos:end="125:56"><expr pos:start="125:46" pos:end="125:56"><name pos:start="125:46" pos:end="125:56">silent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:45"><expr pos:start="127:13" pos:end="127:44"><name pos:start="127:13" pos:end="127:29">output_samples_u8</name> <operator pos:start="127:31" pos:end="127:32">+=</operator> <name pos:start="127:34" pos:end="127:44">silent_size</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:29">/* decode audio chunks */</comment>

    <if_stmt pos:start="137:5" pos:end="163:5"><if pos:start="137:5" pos:end="163:5">if <condition pos:start="137:8" pos:end="137:25">(<expr pos:start="137:9" pos:end="137:24"><name pos:start="137:9" pos:end="137:20">audio_chunks</name> <operator pos:start="137:22" pos:end="137:22">&gt;</operator> <literal type="number" pos:start="137:24" pos:end="137:24">0</literal></expr>)</condition> <block pos:start="137:27" pos:end="163:5">{<block_content pos:start="139:9" pos:end="161:9">

        <expr_stmt pos:start="139:9" pos:end="139:33"><expr pos:start="139:9" pos:end="139:32"><name pos:start="139:9" pos:end="139:15">buf_end</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <name pos:start="139:19" pos:end="139:21">buf</name> <operator pos:start="139:23" pos:end="139:23">+</operator> <name pos:start="139:25" pos:end="139:32">buf_size</name></expr>;</expr_stmt>

        <while pos:start="141:9" pos:end="161:9">while <condition pos:start="141:15" pos:end="141:29">(<expr pos:start="141:16" pos:end="141:28"><name pos:start="141:16" pos:end="141:18">buf</name> <operator pos:start="141:20" pos:end="141:20">&lt;</operator> <name pos:start="141:22" pos:end="141:28">buf_end</name></expr>)</condition> <block pos:start="141:31" pos:end="161:9">{<block_content pos:start="143:13" pos:end="159:33">

            <if_stmt pos:start="143:13" pos:end="157:13"><if pos:start="143:13" pos:end="151:13">if <condition pos:start="143:16" pos:end="143:32">(<expr pos:start="143:17" pos:end="143:31"><name pos:start="143:17" pos:end="143:26"><name pos:start="143:17" pos:end="143:17">s</name><operator pos:start="143:18" pos:end="143:19">-&gt;</operator><name pos:start="143:20" pos:end="143:26">out_bps</name></name> <operator pos:start="143:28" pos:end="143:29">==</operator> <literal type="number" pos:start="143:31" pos:end="143:31">2</literal></expr>)</condition> <block pos:start="143:34" pos:end="151:13">{<block_content pos:start="145:17" pos:end="149:57">

                <expr_stmt pos:start="145:17" pos:end="147:50"><expr pos:start="145:17" pos:end="147:49"><call pos:start="145:17" pos:end="147:49"><name pos:start="145:17" pos:end="145:32">decode_audio_s16</name><argument_list pos:start="145:33" pos:end="147:49">(<argument pos:start="145:34" pos:end="145:51"><expr pos:start="145:34" pos:end="145:51"><name pos:start="145:34" pos:end="145:51">output_samples_s16</name></expr></argument>, <argument pos:start="145:54" pos:end="145:56"><expr pos:start="145:54" pos:end="145:56"><name pos:start="145:54" pos:end="145:56">buf</name></expr></argument>, <argument pos:start="145:59" pos:end="145:71"><expr pos:start="145:59" pos:end="145:71"><name pos:start="145:59" pos:end="145:71"><name pos:start="145:59" pos:end="145:59">s</name><operator pos:start="145:60" pos:end="145:61">-&gt;</operator><name pos:start="145:62" pos:end="145:71">chunk_size</name></name></expr></argument>,

                                 <argument pos:start="147:34" pos:end="147:48"><expr pos:start="147:34" pos:end="147:48"><name pos:start="147:34" pos:end="147:48"><name pos:start="147:34" pos:end="147:38">avctx</name><operator pos:start="147:39" pos:end="147:40">-&gt;</operator><name pos:start="147:41" pos:end="147:48">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:57"><expr pos:start="149:17" pos:end="149:56"><name pos:start="149:17" pos:end="149:34">output_samples_s16</name> <operator pos:start="149:36" pos:end="149:37">+=</operator> <name pos:start="149:39" pos:end="149:56"><name pos:start="149:39" pos:end="149:43">avctx</name><operator pos:start="149:44" pos:end="149:45">-&gt;</operator><name pos:start="149:46" pos:end="149:56">block_align</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="151:15" pos:end="157:13">else <block pos:start="151:20" pos:end="157:13">{<block_content pos:start="153:17" pos:end="155:57">

                <expr_stmt pos:start="153:17" pos:end="153:62"><expr pos:start="153:17" pos:end="153:61"><call pos:start="153:17" pos:end="153:61"><name pos:start="153:17" pos:end="153:22">memcpy</name><argument_list pos:start="153:23" pos:end="153:61">(<argument pos:start="153:24" pos:end="153:40"><expr pos:start="153:24" pos:end="153:40"><name pos:start="153:24" pos:end="153:40">output_samples_u8</name></expr></argument>, <argument pos:start="153:43" pos:end="153:45"><expr pos:start="153:43" pos:end="153:45"><name pos:start="153:43" pos:end="153:45">buf</name></expr></argument>, <argument pos:start="153:48" pos:end="153:60"><expr pos:start="153:48" pos:end="153:60"><name pos:start="153:48" pos:end="153:60"><name pos:start="153:48" pos:end="153:48">s</name><operator pos:start="153:49" pos:end="153:50">-&gt;</operator><name pos:start="153:51" pos:end="153:60">chunk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:57"><expr pos:start="155:17" pos:end="155:56"><name pos:start="155:17" pos:end="155:33">output_samples_u8</name>  <operator pos:start="155:36" pos:end="155:37">+=</operator> <name pos:start="155:39" pos:end="155:56"><name pos:start="155:39" pos:end="155:43">avctx</name><operator pos:start="155:44" pos:end="155:45">-&gt;</operator><name pos:start="155:46" pos:end="155:56">block_align</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:33"><expr pos:start="159:13" pos:end="159:32"><name pos:start="159:13" pos:end="159:15">buf</name> <operator pos:start="159:17" pos:end="159:18">+=</operator> <name pos:start="159:20" pos:end="159:32"><name pos:start="159:20" pos:end="159:20">s</name><operator pos:start="159:21" pos:end="159:22">-&gt;</operator><name pos:start="159:23" pos:end="159:32">chunk_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:25"><expr pos:start="167:5" pos:end="167:24"><operator pos:start="167:5" pos:end="167:5">*</operator><name pos:start="167:6" pos:end="167:18">got_frame_ptr</name>   <operator pos:start="167:22" pos:end="167:22">=</operator> <literal type="number" pos:start="167:24" pos:end="167:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:32"><expr pos:start="169:5" pos:end="169:31"><operator pos:start="169:5" pos:end="169:5">*</operator><operator pos:start="169:6" pos:end="169:6">(</operator><name pos:start="169:7" pos:end="169:13">AVFrame</name> <operator pos:start="169:15" pos:end="169:15">*</operator><operator pos:start="169:16" pos:end="169:16">)</operator><name pos:start="169:17" pos:end="169:20">data</name> <operator pos:start="169:22" pos:end="169:22">=</operator> <name pos:start="169:24" pos:end="169:31"><name pos:start="169:24" pos:end="169:24">s</name><operator pos:start="169:25" pos:end="169:26">-&gt;</operator><name pos:start="169:27" pos:end="169:31">frame</name></name></expr>;</expr_stmt>



    <return pos:start="173:5" pos:end="173:23">return <expr pos:start="173:12" pos:end="173:22"><name pos:start="173:12" pos:end="173:22"><name pos:start="173:12" pos:end="173:16">avpkt</name><operator pos:start="173:17" pos:end="173:18">-&gt;</operator><name pos:start="173:19" pos:end="173:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
