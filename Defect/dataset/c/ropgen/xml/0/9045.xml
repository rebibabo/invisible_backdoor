<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9045.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">uint8_t</name></type> <name pos:start="1:16" pos:end="1:37">virtio_scsi_do_command</name><parameter_list pos:start="1:38" pos:end="9:76">(<parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:53"><name pos:start="1:39" pos:end="1:49">QVirtIOSCSI</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">vs</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:73"><decl pos:start="1:56" pos:end="1:73"><type pos:start="1:56" pos:end="1:73"><specifier pos:start="1:56" pos:end="1:60">const</specifier> <name pos:start="1:62" pos:end="1:68">uint8_t</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:73">cdb</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:60"><decl pos:start="3:39" pos:end="3:60"><type pos:start="3:39" pos:end="3:60"><specifier pos:start="3:39" pos:end="3:43">const</specifier> <name pos:start="3:45" pos:end="3:51">uint8_t</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:60">data_in</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:56"><decl pos:start="5:39" pos:end="5:56"><type pos:start="5:39" pos:end="5:56"><name pos:start="5:39" pos:end="5:44">size_t</name></type> <name pos:start="5:46" pos:end="5:56">data_in_len</name></decl></parameter>,

                                      <parameter pos:start="7:39" pos:end="7:55"><decl pos:start="7:39" pos:end="7:55"><type pos:start="7:39" pos:end="7:55"><name pos:start="7:39" pos:end="7:45">uint8_t</name> <modifier pos:start="7:47" pos:end="7:47">*</modifier></type><name pos:start="7:48" pos:end="7:55">data_out</name></decl></parameter>, <parameter pos:start="7:58" pos:end="7:76"><decl pos:start="7:58" pos:end="7:76"><type pos:start="7:58" pos:end="7:76"><name pos:start="7:58" pos:end="7:63">size_t</name></type> <name pos:start="7:65" pos:end="7:76">data_out_len</name></decl></parameter>,

                                      <parameter pos:start="9:39" pos:end="9:75"><decl pos:start="9:39" pos:end="9:75"><type pos:start="9:39" pos:end="9:75"><name pos:start="9:39" pos:end="9:65"><name pos:start="9:39" pos:end="9:44">struct</name> <name pos:start="9:46" pos:end="9:65">virtio_scsi_cmd_resp</name></name> <modifier pos:start="9:67" pos:end="9:67">*</modifier></type><name pos:start="9:68" pos:end="9:75">resp_out</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="109:1">{<block_content pos:start="13:5" pos:end="107:20">

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">QVirtQueue</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:18">vq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:30"><name pos:start="15:5" pos:end="15:30"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:30">virtio_scsi_cmd_req</name></name></type> <name pos:start="15:32" pos:end="15:34">req</name> <init pos:start="15:36" pos:end="15:46">= <expr pos:start="15:38" pos:end="15:46"><block pos:start="15:38" pos:end="15:46">{ <expr pos:start="15:40" pos:end="15:44"><block pos:start="15:40" pos:end="15:44">{ <expr pos:start="15:42" pos:end="15:42"><literal type="number" pos:start="15:42" pos:end="15:42">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:76"><decl pos:start="17:5" pos:end="17:75"><type pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:31">virtio_scsi_cmd_resp</name></name></type> <name pos:start="17:33" pos:end="17:36">resp</name> <init pos:start="17:38" pos:end="17:75">= <expr pos:start="17:40" pos:end="17:75"><block pos:start="17:40" pos:end="17:75">{ <expr pos:start="17:42" pos:end="17:57"><operator pos:start="17:42" pos:end="17:42">.</operator><name pos:start="17:43" pos:end="17:50">response</name> <operator pos:start="17:52" pos:end="17:52">=</operator> <literal type="number" pos:start="17:54" pos:end="17:57">0xff</literal></expr>, <expr pos:start="17:60" pos:end="17:73"><operator pos:start="17:60" pos:end="17:60">.</operator><name pos:start="17:61" pos:end="17:66">status</name> <operator pos:start="17:68" pos:end="17:68">=</operator> <literal type="number" pos:start="17:70" pos:end="17:73">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:70"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:21">req_addr</name></decl>, <decl pos:start="19:24" pos:end="19:32"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:24" pos:end="19:32">resp_addr</name></decl>, <decl pos:start="19:35" pos:end="19:50"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:35" pos:end="19:46">data_in_addr</name> <init pos:start="19:48" pos:end="19:50">= <expr pos:start="19:50" pos:end="19:50"><literal type="number" pos:start="19:50" pos:end="19:50">0</literal></expr></init></decl>, <decl pos:start="19:53" pos:end="19:69"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:53" pos:end="19:65">data_out_addr</name> <init pos:start="19:67" pos:end="19:69">= <expr pos:start="19:69" pos:end="19:69"><literal type="number" pos:start="19:69" pos:end="19:69">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:20">response</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:22">free_head</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:19"><expr pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:6">vq</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <name pos:start="27:10" pos:end="27:18"><name pos:start="27:10" pos:end="27:11">vs</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:15">vq</name><index pos:start="27:16" pos:end="27:18">[<expr pos:start="27:17" pos:end="27:17"><literal type="number" pos:start="27:17" pos:end="27:17">2</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:19"><expr pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:7">req</name><operator pos:start="31:8" pos:end="31:8">.</operator><name pos:start="31:9" pos:end="31:11">lun</name><index pos:start="31:12" pos:end="31:14">[<expr pos:start="31:13" pos:end="31:13"><literal type="number" pos:start="31:13" pos:end="31:13">0</literal></expr>]</index></name> <operator pos:start="31:16" pos:end="31:16">=</operator> <literal type="number" pos:start="31:18" pos:end="31:18">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="31:21" pos:end="31:36">/* Select LUN */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:7">req</name><operator pos:start="33:8" pos:end="33:8">.</operator><name pos:start="33:9" pos:end="33:11">lun</name><index pos:start="33:12" pos:end="33:14">[<expr pos:start="33:13" pos:end="33:13"><literal type="number" pos:start="33:13" pos:end="33:13">1</literal></expr>]</index></name> <operator pos:start="33:16" pos:end="33:16">=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="33:21" pos:end="33:41">/* Select target 1 */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:47"><expr pos:start="35:5" pos:end="35:46"><call pos:start="35:5" pos:end="35:46"><name pos:start="35:5" pos:end="35:10">memcpy</name><argument_list pos:start="35:11" pos:end="35:46">(<argument pos:start="35:12" pos:end="35:18"><expr pos:start="35:12" pos:end="35:18"><name pos:start="35:12" pos:end="35:18"><name pos:start="35:12" pos:end="35:14">req</name><operator pos:start="35:15" pos:end="35:15">.</operator><name pos:start="35:16" pos:end="35:18">cdb</name></name></expr></argument>, <argument pos:start="35:21" pos:end="35:23"><expr pos:start="35:21" pos:end="35:23"><name pos:start="35:21" pos:end="35:23">cdb</name></expr></argument>, <argument pos:start="35:26" pos:end="35:45"><expr pos:start="35:26" pos:end="35:45"><name pos:start="35:26" pos:end="35:45">VIRTIO_SCSI_CDB_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:69">/* XXX: Fix endian if any multi-byte field in req/resp is used */</comment>



    <comment type="block" pos:start="43:5" pos:end="43:28">/* Add request header */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:57"><expr pos:start="45:5" pos:end="45:56"><name pos:start="45:5" pos:end="45:12">req_addr</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:56"><name pos:start="45:16" pos:end="45:33">qvirtio_scsi_alloc</name><argument_list pos:start="45:34" pos:end="45:56">(<argument pos:start="45:35" pos:end="45:36"><expr pos:start="45:35" pos:end="45:36"><name pos:start="45:35" pos:end="45:36">vs</name></expr></argument>, <argument pos:start="45:39" pos:end="45:49"><expr pos:start="45:39" pos:end="45:49"><sizeof pos:start="45:39" pos:end="45:49">sizeof<argument_list pos:start="45:45" pos:end="45:49">(<argument pos:start="45:46" pos:end="45:48"><expr pos:start="45:46" pos:end="45:48"><name pos:start="45:46" pos:end="45:48">req</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="45:52" pos:end="45:55"><expr pos:start="45:52" pos:end="45:55"><operator pos:start="45:52" pos:end="45:52">&amp;</operator><name pos:start="45:53" pos:end="45:55">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:71"><expr pos:start="47:5" pos:end="47:70"><name pos:start="47:5" pos:end="47:13">free_head</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="47:70"><name pos:start="47:17" pos:end="47:30">qvirtqueue_add</name><argument_list pos:start="47:31" pos:end="47:70">(<argument pos:start="47:32" pos:end="47:33"><expr pos:start="47:32" pos:end="47:33"><name pos:start="47:32" pos:end="47:33">vq</name></expr></argument>, <argument pos:start="47:36" pos:end="47:43"><expr pos:start="47:36" pos:end="47:43"><name pos:start="47:36" pos:end="47:43">req_addr</name></expr></argument>, <argument pos:start="47:46" pos:end="47:56"><expr pos:start="47:46" pos:end="47:56"><sizeof pos:start="47:46" pos:end="47:56">sizeof<argument_list pos:start="47:52" pos:end="47:56">(<argument pos:start="47:53" pos:end="47:55"><expr pos:start="47:53" pos:end="47:55"><name pos:start="47:53" pos:end="47:55">req</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="47:59" pos:end="47:63"><expr pos:start="47:59" pos:end="47:63"><name pos:start="47:59" pos:end="47:63">false</name></expr></argument>, <argument pos:start="47:66" pos:end="47:69"><expr pos:start="47:66" pos:end="47:69"><name pos:start="47:66" pos:end="47:69">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:21">(<expr pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:20">data_out_len</name></expr>)</condition> <block pos:start="51:23" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:69">

        <expr_stmt pos:start="53:9" pos:end="53:71"><expr pos:start="53:9" pos:end="53:70"><name pos:start="53:9" pos:end="53:21">data_out_addr</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <call pos:start="53:25" pos:end="53:70"><name pos:start="53:25" pos:end="53:42">qvirtio_scsi_alloc</name><argument_list pos:start="53:43" pos:end="53:70">(<argument pos:start="53:44" pos:end="53:45"><expr pos:start="53:44" pos:end="53:45"><name pos:start="53:44" pos:end="53:45">vs</name></expr></argument>, <argument pos:start="53:48" pos:end="53:59"><expr pos:start="53:48" pos:end="53:59"><name pos:start="53:48" pos:end="53:59">data_out_len</name></expr></argument>, <argument pos:start="53:62" pos:end="53:69"><expr pos:start="53:62" pos:end="53:69"><name pos:start="53:62" pos:end="53:69">data_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:69"><expr pos:start="55:9" pos:end="55:68"><call pos:start="55:9" pos:end="55:68"><name pos:start="55:9" pos:end="55:22">qvirtqueue_add</name><argument_list pos:start="55:23" pos:end="55:68">(<argument pos:start="55:24" pos:end="55:25"><expr pos:start="55:24" pos:end="55:25"><name pos:start="55:24" pos:end="55:25">vq</name></expr></argument>, <argument pos:start="55:28" pos:end="55:40"><expr pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:40">data_out_addr</name></expr></argument>, <argument pos:start="55:43" pos:end="55:54"><expr pos:start="55:43" pos:end="55:54"><name pos:start="55:43" pos:end="55:54">data_out_len</name></expr></argument>, <argument pos:start="55:57" pos:end="55:61"><expr pos:start="55:57" pos:end="55:61"><name pos:start="55:57" pos:end="55:61">false</name></expr></argument>, <argument pos:start="55:64" pos:end="55:67"><expr pos:start="55:64" pos:end="55:67"><name pos:start="55:64" pos:end="55:67">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:29">/* Add response header */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:60"><expr pos:start="63:5" pos:end="63:59"><name pos:start="63:5" pos:end="63:13">resp_addr</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:59"><name pos:start="63:17" pos:end="63:34">qvirtio_scsi_alloc</name><argument_list pos:start="63:35" pos:end="63:59">(<argument pos:start="63:36" pos:end="63:37"><expr pos:start="63:36" pos:end="63:37"><name pos:start="63:36" pos:end="63:37">vs</name></expr></argument>, <argument pos:start="63:40" pos:end="63:51"><expr pos:start="63:40" pos:end="63:51"><sizeof pos:start="63:40" pos:end="63:51">sizeof<argument_list pos:start="63:46" pos:end="63:51">(<argument pos:start="63:47" pos:end="63:50"><expr pos:start="63:47" pos:end="63:50"><name pos:start="63:47" pos:end="63:50">resp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="63:54" pos:end="63:58"><expr pos:start="63:54" pos:end="63:58"><operator pos:start="63:54" pos:end="63:54">&amp;</operator><name pos:start="63:55" pos:end="63:58">resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:69"><expr pos:start="65:5" pos:end="65:68"><call pos:start="65:5" pos:end="65:68"><name pos:start="65:5" pos:end="65:18">qvirtqueue_add</name><argument_list pos:start="65:19" pos:end="65:68">(<argument pos:start="65:20" pos:end="65:21"><expr pos:start="65:20" pos:end="65:21"><name pos:start="65:20" pos:end="65:21">vq</name></expr></argument>, <argument pos:start="65:24" pos:end="65:32"><expr pos:start="65:24" pos:end="65:32"><name pos:start="65:24" pos:end="65:32">resp_addr</name></expr></argument>, <argument pos:start="65:35" pos:end="65:46"><expr pos:start="65:35" pos:end="65:46"><sizeof pos:start="65:35" pos:end="65:46">sizeof<argument_list pos:start="65:41" pos:end="65:46">(<argument pos:start="65:42" pos:end="65:45"><expr pos:start="65:42" pos:end="65:45"><name pos:start="65:42" pos:end="65:45">resp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="65:49" pos:end="65:52"><expr pos:start="65:49" pos:end="65:52"><name pos:start="65:49" pos:end="65:52">true</name></expr></argument>, <argument pos:start="65:55" pos:end="65:67"><expr pos:start="65:55" pos:end="65:67"><operator pos:start="65:55" pos:end="65:55">!</operator><operator pos:start="65:56" pos:end="65:56">!</operator><name pos:start="65:57" pos:end="65:67">data_in_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:20">(<expr pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:19">data_in_len</name></expr>)</condition> <block pos:start="69:22" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:67">

        <expr_stmt pos:start="71:9" pos:end="71:68"><expr pos:start="71:9" pos:end="71:67"><name pos:start="71:9" pos:end="71:20">data_in_addr</name> <operator pos:start="71:22" pos:end="71:22">=</operator> <call pos:start="71:24" pos:end="71:67"><name pos:start="71:24" pos:end="71:41">qvirtio_scsi_alloc</name><argument_list pos:start="71:42" pos:end="71:67">(<argument pos:start="71:43" pos:end="71:44"><expr pos:start="71:43" pos:end="71:44"><name pos:start="71:43" pos:end="71:44">vs</name></expr></argument>, <argument pos:start="71:47" pos:end="71:57"><expr pos:start="71:47" pos:end="71:57"><name pos:start="71:47" pos:end="71:57">data_in_len</name></expr></argument>, <argument pos:start="71:60" pos:end="71:66"><expr pos:start="71:60" pos:end="71:66"><name pos:start="71:60" pos:end="71:66">data_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:67"><expr pos:start="73:9" pos:end="73:66"><call pos:start="73:9" pos:end="73:66"><name pos:start="73:9" pos:end="73:22">qvirtqueue_add</name><argument_list pos:start="73:23" pos:end="73:66">(<argument pos:start="73:24" pos:end="73:25"><expr pos:start="73:24" pos:end="73:25"><name pos:start="73:24" pos:end="73:25">vq</name></expr></argument>, <argument pos:start="73:28" pos:end="73:39"><expr pos:start="73:28" pos:end="73:39"><name pos:start="73:28" pos:end="73:39">data_in_addr</name></expr></argument>, <argument pos:start="73:42" pos:end="73:52"><expr pos:start="73:42" pos:end="73:52"><name pos:start="73:42" pos:end="73:52">data_in_len</name></expr></argument>, <argument pos:start="73:55" pos:end="73:58"><expr pos:start="73:55" pos:end="73:58"><name pos:start="73:55" pos:end="73:58">true</name></expr></argument>, <argument pos:start="73:61" pos:end="73:65"><expr pos:start="73:61" pos:end="73:65"><name pos:start="73:61" pos:end="73:65">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:44"><expr pos:start="79:5" pos:end="79:43"><call pos:start="79:5" pos:end="79:43"><name pos:start="79:5" pos:end="79:19">qvirtqueue_kick</name><argument_list pos:start="79:20" pos:end="79:43">(<argument pos:start="79:21" pos:end="79:27"><expr pos:start="79:21" pos:end="79:27"><name pos:start="79:21" pos:end="79:27"><name pos:start="79:21" pos:end="79:22">vs</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:27">dev</name></name></expr></argument>, <argument pos:start="79:30" pos:end="79:31"><expr pos:start="79:30" pos:end="79:31"><name pos:start="79:30" pos:end="79:31">vq</name></expr></argument>, <argument pos:start="79:34" pos:end="79:42"><expr pos:start="79:34" pos:end="79:42"><name pos:start="79:34" pos:end="79:42">free_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:65"><expr pos:start="81:5" pos:end="81:64"><call pos:start="81:5" pos:end="81:64"><name pos:start="81:5" pos:end="81:26">qvirtio_wait_queue_isr</name><argument_list pos:start="81:27" pos:end="81:64">(<argument pos:start="81:28" pos:end="81:34"><expr pos:start="81:28" pos:end="81:34"><name pos:start="81:28" pos:end="81:34"><name pos:start="81:28" pos:end="81:29">vs</name><operator pos:start="81:30" pos:end="81:31">-&gt;</operator><name pos:start="81:32" pos:end="81:34">dev</name></name></expr></argument>, <argument pos:start="81:37" pos:end="81:38"><expr pos:start="81:37" pos:end="81:38"><name pos:start="81:37" pos:end="81:38">vq</name></expr></argument>, <argument pos:start="81:41" pos:end="81:63"><expr pos:start="81:41" pos:end="81:63"><name pos:start="81:41" pos:end="81:63">QVIRTIO_SCSI_TIMEOUT_US</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="87:70"><expr pos:start="85:5" pos:end="87:69"><name pos:start="85:5" pos:end="85:12">response</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <call pos:start="85:16" pos:end="87:69"><name pos:start="85:16" pos:end="85:20">readb</name><argument_list pos:start="85:21" pos:end="87:69">(<argument pos:start="85:22" pos:end="87:68"><expr pos:start="85:22" pos:end="87:68"><name pos:start="85:22" pos:end="85:30">resp_addr</name> <operator pos:start="85:32" pos:end="85:32">+</operator>

                     <call pos:start="87:22" pos:end="87:68"><name pos:start="87:22" pos:end="87:29">offsetof</name><argument_list pos:start="87:30" pos:end="87:68">(<argument pos:start="87:31" pos:end="87:57"><expr pos:start="87:31" pos:end="87:57">struct <name pos:start="87:38" pos:end="87:57">virtio_scsi_cmd_resp</name></expr></argument>, <argument pos:start="87:60" pos:end="87:67"><expr pos:start="87:60" pos:end="87:67"><name pos:start="87:60" pos:end="87:67">response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:17">(<expr pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:16">resp_out</name></expr>)</condition> <block pos:start="91:19" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:56">

        <expr_stmt pos:start="93:9" pos:end="93:56"><expr pos:start="93:9" pos:end="93:55"><call pos:start="93:9" pos:end="93:55"><name pos:start="93:9" pos:end="93:15">memread</name><argument_list pos:start="93:16" pos:end="93:55">(<argument pos:start="93:17" pos:end="93:25"><expr pos:start="93:17" pos:end="93:25"><name pos:start="93:17" pos:end="93:25">resp_addr</name></expr></argument>, <argument pos:start="93:28" pos:end="93:35"><expr pos:start="93:28" pos:end="93:35"><name pos:start="93:28" pos:end="93:35">resp_out</name></expr></argument>, <argument pos:start="93:38" pos:end="93:54"><expr pos:start="93:38" pos:end="93:54"><sizeof pos:start="93:38" pos:end="93:54">sizeof<argument_list pos:start="93:44" pos:end="93:54">(<argument pos:start="93:45" pos:end="93:53"><expr pos:start="93:45" pos:end="93:53"><operator pos:start="93:45" pos:end="93:45">*</operator><name pos:start="93:46" pos:end="93:53">resp_out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:36"><expr pos:start="99:5" pos:end="99:35"><call pos:start="99:5" pos:end="99:35"><name pos:start="99:5" pos:end="99:14">guest_free</name><argument_list pos:start="99:15" pos:end="99:35">(<argument pos:start="99:16" pos:end="99:24"><expr pos:start="99:16" pos:end="99:24"><name pos:start="99:16" pos:end="99:24"><name pos:start="99:16" pos:end="99:17">vs</name><operator pos:start="99:18" pos:end="99:19">-&gt;</operator><name pos:start="99:20" pos:end="99:24">alloc</name></name></expr></argument>, <argument pos:start="99:27" pos:end="99:34"><expr pos:start="99:27" pos:end="99:34"><name pos:start="99:27" pos:end="99:34">req_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:37"><expr pos:start="101:5" pos:end="101:36"><call pos:start="101:5" pos:end="101:36"><name pos:start="101:5" pos:end="101:14">guest_free</name><argument_list pos:start="101:15" pos:end="101:36">(<argument pos:start="101:16" pos:end="101:24"><expr pos:start="101:16" pos:end="101:24"><name pos:start="101:16" pos:end="101:24"><name pos:start="101:16" pos:end="101:17">vs</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:24">alloc</name></name></expr></argument>, <argument pos:start="101:27" pos:end="101:35"><expr pos:start="101:27" pos:end="101:35"><name pos:start="101:27" pos:end="101:35">resp_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:40"><expr pos:start="103:5" pos:end="103:39"><call pos:start="103:5" pos:end="103:39"><name pos:start="103:5" pos:end="103:14">guest_free</name><argument_list pos:start="103:15" pos:end="103:39">(<argument pos:start="103:16" pos:end="103:24"><expr pos:start="103:16" pos:end="103:24"><name pos:start="103:16" pos:end="103:24"><name pos:start="103:16" pos:end="103:17">vs</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:24">alloc</name></name></expr></argument>, <argument pos:start="103:27" pos:end="103:38"><expr pos:start="103:27" pos:end="103:38"><name pos:start="103:27" pos:end="103:38">data_in_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:41"><expr pos:start="105:5" pos:end="105:40"><call pos:start="105:5" pos:end="105:40"><name pos:start="105:5" pos:end="105:14">guest_free</name><argument_list pos:start="105:15" pos:end="105:40">(<argument pos:start="105:16" pos:end="105:24"><expr pos:start="105:16" pos:end="105:24"><name pos:start="105:16" pos:end="105:24"><name pos:start="105:16" pos:end="105:17">vs</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:24">alloc</name></name></expr></argument>, <argument pos:start="105:27" pos:end="105:39"><expr pos:start="105:27" pos:end="105:39"><name pos:start="105:27" pos:end="105:39">data_out_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="107:5" pos:end="107:20">return <expr pos:start="107:12" pos:end="107:19"><name pos:start="107:12" pos:end="107:19">response</name></expr>;</return>

</block_content>}</block></function>
</unit>
