<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7079.c" pos:tabs="8"><function pos:start="1:1" pos:end="303:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">load_linux</name><parameter_list pos:start="1:23" pos:end="5:50">(<parameter pos:start="1:24" pos:end="1:50"><decl pos:start="1:24" pos:end="1:50"><type pos:start="1:24" pos:end="1:50"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:50">kernel_filename</name></decl></parameter>,

		       <parameter pos:start="3:24" pos:end="3:50"><decl pos:start="3:24" pos:end="3:50"><type pos:start="3:24" pos:end="3:50"><specifier pos:start="3:24" pos:end="3:28">const</specifier> <name pos:start="3:30" pos:end="3:33">char</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:50">initrd_filename</name></decl></parameter>,

		       <parameter pos:start="5:24" pos:end="5:49"><decl pos:start="5:24" pos:end="5:49"><type pos:start="5:24" pos:end="5:49"><specifier pos:start="5:24" pos:end="5:28">const</specifier> <name pos:start="5:30" pos:end="5:33">char</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:49">kernel_cmdline</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="303:1">{<block_content pos:start="9:5" pos:end="301:35">

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:21">protocol</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:19"><name pos:start="11:14" pos:end="11:16">gpr</name><index pos:start="11:17" pos:end="11:19">[<expr pos:start="11:18" pos:end="11:18"><literal type="number" pos:start="11:18" pos:end="11:18">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:19"><name pos:start="13:14" pos:end="13:16">seg</name><index pos:start="13:17" pos:end="13:19">[<expr pos:start="13:18" pos:end="13:18"><literal type="number" pos:start="13:18" pos:end="13:18">6</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:21">real_seg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:59"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">setup_size</name></decl>, <decl pos:start="17:21" pos:end="17:31"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:21" pos:end="17:31">kernel_size</name></decl>, <decl pos:start="17:34" pos:end="17:44"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:34" pos:end="17:44">initrd_size</name></decl>, <decl pos:start="17:47" pos:end="17:58"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:47" pos:end="17:58">cmdline_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:23">initrd_max</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:24"><name pos:start="21:13" pos:end="21:18">header</name><index pos:start="21:19" pos:end="21:24">[<expr pos:start="21:20" pos:end="21:23"><literal type="number" pos:start="21:20" pos:end="21:23">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:71"><decl pos:start="23:5" pos:end="23:32"><type pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:22">target_phys_addr_t</name></type> <name pos:start="23:24" pos:end="23:32">real_addr</name></decl>, <decl pos:start="23:35" pos:end="23:43"><type ref="prev" pos:start="23:5" pos:end="23:22"/><name pos:start="23:35" pos:end="23:43">prot_addr</name></decl>, <decl pos:start="23:46" pos:end="23:57"><type ref="prev" pos:start="23:5" pos:end="23:22"/><name pos:start="23:46" pos:end="23:57">cmdline_addr</name></decl>, <decl pos:start="23:60" pos:end="23:70"><type ref="prev" pos:start="23:5" pos:end="23:22"/><name pos:start="23:60" pos:end="23:70">initrd_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:11"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:8">FILE</name> <modifier pos:start="25:10" pos:end="25:10">*</modifier></type><name pos:start="25:11" pos:end="25:11">f</name></decl>, <decl pos:start="25:14" pos:end="25:16"><type ref="prev" pos:start="25:5" pos:end="25:10"><modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:16">fi</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:49">/* Align to 16 bytes as a paranoia measure */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:53"><expr pos:start="31:5" pos:end="31:52"><name pos:start="31:5" pos:end="31:16">cmdline_size</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <operator pos:start="31:20" pos:end="31:20">(</operator><call pos:start="31:21" pos:end="31:42"><name pos:start="31:21" pos:end="31:26">strlen</name><argument_list pos:start="31:27" pos:end="31:42">(<argument pos:start="31:28" pos:end="31:41"><expr pos:start="31:28" pos:end="31:41"><name pos:start="31:28" pos:end="31:41">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="31:43" pos:end="31:43">+</operator><literal type="number" pos:start="31:44" pos:end="31:45">16</literal><operator pos:start="31:46" pos:end="31:46">)</operator> <operator pos:start="31:48" pos:end="31:48">&amp;</operator> <operator pos:start="31:50" pos:end="31:50">~</operator><literal type="number" pos:start="31:51" pos:end="31:52">15</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:32">/* load the kernel header */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:5">f</name> <operator pos:start="37:7" pos:end="37:7">=</operator> <call pos:start="37:9" pos:end="37:36"><name pos:start="37:9" pos:end="37:13">fopen</name><argument_list pos:start="37:14" pos:end="37:36">(<argument pos:start="37:15" pos:end="37:29"><expr pos:start="37:15" pos:end="37:29"><name pos:start="37:15" pos:end="37:29">kernel_filename</name></expr></argument>, <argument pos:start="37:32" pos:end="37:35"><expr pos:start="37:32" pos:end="37:35"><literal type="string" pos:start="37:32" pos:end="37:35">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="60:0"><if pos:start="39:5" pos:end="60:0">if <condition pos:start="39:8" pos:end="41:42">(<expr pos:start="39:9" pos:end="41:41"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:10">f</name> <operator pos:start="39:12" pos:end="39:13">||</operator> <operator pos:start="39:15" pos:end="39:15">!</operator><operator pos:start="39:16" pos:end="39:16">(</operator><name pos:start="39:17" pos:end="39:27">kernel_size</name> <operator pos:start="39:29" pos:end="39:29">=</operator> <call pos:start="39:31" pos:end="39:46"><name pos:start="39:31" pos:end="39:43">get_file_size</name><argument_list pos:start="39:44" pos:end="39:46">(<argument pos:start="39:45" pos:end="39:45"><expr pos:start="39:45" pos:end="39:45"><name pos:start="39:45" pos:end="39:45">f</name></expr></argument>)</argument_list></call><operator pos:start="39:47" pos:end="39:47">)</operator> <operator pos:start="39:49" pos:end="39:50">||</operator>

	<call pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:13">fread</name><argument_list pos:start="41:14" pos:end="41:33">(<argument pos:start="41:15" pos:end="41:20"><expr pos:start="41:15" pos:end="41:20"><name pos:start="41:15" pos:end="41:20">header</name></expr></argument>, <argument pos:start="41:23" pos:end="41:23"><expr pos:start="41:23" pos:end="41:23"><literal type="number" pos:start="41:23" pos:end="41:23">1</literal></expr></argument>, <argument pos:start="41:26" pos:end="41:29"><expr pos:start="41:26" pos:end="41:29"><literal type="number" pos:start="41:26" pos:end="41:29">1024</literal></expr></argument>, <argument pos:start="41:32" pos:end="41:32"><expr pos:start="41:32" pos:end="41:32"><name pos:start="41:32" pos:end="41:32">f</name></expr></argument>)</argument_list></call> <operator pos:start="41:35" pos:end="41:36">!=</operator> <literal type="number" pos:start="41:38" pos:end="41:41">1024</literal></expr>)</condition> <block pos:start="41:44" pos:end="60:0">{<block_content pos:start="43:9" pos:end="47:16">

	<expr_stmt pos:start="43:9" pos:end="45:33"><expr pos:start="43:9" pos:end="45:32"><call pos:start="43:9" pos:end="45:32"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="45:32">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:60"><expr pos:start="43:25" pos:end="43:60"><literal type="string" pos:start="43:25" pos:end="43:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

		<argument pos:start="45:17" pos:end="45:31"><expr pos:start="45:17" pos:end="45:31"><name pos:start="45:17" pos:end="45:31">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="47:9" pos:end="47:16"><expr pos:start="47:9" pos:end="47:15"><call pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:12">exit</name><argument_list pos:start="47:13" pos:end="47:15">(<argument pos:start="47:14" pos:end="47:14"><expr pos:start="47:14" pos:end="47:14"><literal type="number" pos:start="47:14" pos:end="47:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:33">/* kernel protocol version */</comment>

<cpp:if pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:5"><literal type="number" pos:start="55:5" pos:end="55:5">0</literal></expr></cpp:if>

    fprintf(stderr, "header magic: %#x\n", ldl_p(header+0x202));

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="61:5" pos:end="67:21"><if pos:start="61:5" pos:end="63:40">if <condition pos:start="61:8" pos:end="61:42">(<expr pos:start="61:9" pos:end="61:41"><call pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:13">ldl_p</name><argument_list pos:start="61:14" pos:end="61:27">(<argument pos:start="61:15" pos:end="61:26"><expr pos:start="61:15" pos:end="61:26"><name pos:start="61:15" pos:end="61:20">header</name><operator pos:start="61:21" pos:end="61:21">+</operator><literal type="number" pos:start="61:22" pos:end="61:26">0x202</literal></expr></argument>)</argument_list></call> <operator pos:start="61:29" pos:end="61:30">==</operator> <literal type="number" pos:start="61:32" pos:end="61:41">0x53726448</literal></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:40"><block_content pos:start="63:9" pos:end="63:40">

	<expr_stmt pos:start="63:9" pos:end="63:40"><expr pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:16">protocol</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <call pos:start="63:20" pos:end="63:39"><name pos:start="63:20" pos:end="63:25">lduw_p</name><argument_list pos:start="63:26" pos:end="63:39">(<argument pos:start="63:27" pos:end="63:38"><expr pos:start="63:27" pos:end="63:38"><name pos:start="63:27" pos:end="63:32">header</name><operator pos:start="63:33" pos:end="63:33">+</operator><literal type="number" pos:start="63:34" pos:end="63:38">0x206</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="65:5" pos:end="67:21">else<block type="pseudo" pos:start="67:9" pos:end="67:21"><block_content pos:start="67:9" pos:end="67:21">

	<expr_stmt pos:start="67:9" pos:end="67:21"><expr pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:16">protocol</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <literal type="number" pos:start="67:20" pos:end="67:20">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="71:5" pos:end="122:0"><if pos:start="71:5" pos:end="81:5">if <condition pos:start="71:8" pos:end="71:52">(<expr pos:start="71:9" pos:end="71:51"><name pos:start="71:9" pos:end="71:16">protocol</name> <operator pos:start="71:18" pos:end="71:18">&lt;</operator> <literal type="number" pos:start="71:20" pos:end="71:24">0x200</literal> <operator pos:start="71:26" pos:end="71:27">||</operator> <operator pos:start="71:29" pos:end="71:29">!</operator><operator pos:start="71:30" pos:end="71:30">(</operator><name pos:start="71:31" pos:end="71:43"><name pos:start="71:31" pos:end="71:36">header</name><index pos:start="71:37" pos:end="71:43">[<expr pos:start="71:38" pos:end="71:42"><literal type="number" pos:start="71:38" pos:end="71:42">0x211</literal></expr>]</index></name> <operator pos:start="71:45" pos:end="71:45">&amp;</operator> <literal type="number" pos:start="71:47" pos:end="71:50">0x01</literal><operator pos:start="71:51" pos:end="71:51">)</operator></expr>)</condition> <block pos:start="71:54" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:31">

	<comment type="block" pos:start="73:9" pos:end="73:24">/* Low kernel */</comment>

	<expr_stmt pos:start="75:9" pos:end="75:31"><expr pos:start="75:9" pos:end="75:30"><name pos:start="75:9" pos:end="75:17">real_addr</name>    <operator pos:start="75:22" pos:end="75:22">=</operator> <literal type="number" pos:start="75:24" pos:end="75:30">0x90000</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="77:9" pos:end="77:46"><expr pos:start="77:9" pos:end="77:45"><name pos:start="77:9" pos:end="77:20">cmdline_addr</name> <operator pos:start="77:22" pos:end="77:22">=</operator> <literal type="number" pos:start="77:24" pos:end="77:32">0x9a000</literal> <operator pos:start="77:32" pos:end="77:32">-</operator> <name pos:start="77:34" pos:end="77:45">cmdline_size</name></expr>;</expr_stmt>

	<expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:17">prot_addr</name>    <operator pos:start="79:22" pos:end="79:22">=</operator> <literal type="number" pos:start="79:24" pos:end="79:30">0x10000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="81:7" pos:end="91:5">else if <condition pos:start="81:15" pos:end="81:32">(<expr pos:start="81:16" pos:end="81:31"><name pos:start="81:16" pos:end="81:23">protocol</name> <operator pos:start="81:25" pos:end="81:25">&lt;</operator> <literal type="number" pos:start="81:27" pos:end="81:31">0x202</literal></expr>)</condition> <block pos:start="81:34" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:32">

	<comment type="block" pos:start="83:9" pos:end="83:37">/* High but ancient kernel */</comment>

	<expr_stmt pos:start="85:9" pos:end="85:31"><expr pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:17">real_addr</name>    <operator pos:start="85:22" pos:end="85:22">=</operator> <literal type="number" pos:start="85:24" pos:end="85:30">0x90000</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="87:9" pos:end="87:46"><expr pos:start="87:9" pos:end="87:45"><name pos:start="87:9" pos:end="87:20">cmdline_addr</name> <operator pos:start="87:22" pos:end="87:22">=</operator> <literal type="number" pos:start="87:24" pos:end="87:32">0x9a000</literal> <operator pos:start="87:32" pos:end="87:32">-</operator> <name pos:start="87:34" pos:end="87:45">cmdline_size</name></expr>;</expr_stmt>

	<expr_stmt pos:start="89:9" pos:end="89:32"><expr pos:start="89:9" pos:end="89:31"><name pos:start="89:9" pos:end="89:17">prot_addr</name>    <operator pos:start="89:22" pos:end="89:22">=</operator> <literal type="number" pos:start="89:24" pos:end="89:31">0x100000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="122:0">else <block pos:start="91:12" pos:end="122:0">{<block_content pos:start="95:9" pos:end="99:32">

	<comment type="block" pos:start="93:9" pos:end="93:36">/* High and recent kernel */</comment>

	<expr_stmt pos:start="95:9" pos:end="95:31"><expr pos:start="95:9" pos:end="95:30"><name pos:start="95:9" pos:end="95:17">real_addr</name>    <operator pos:start="95:22" pos:end="95:22">=</operator> <literal type="number" pos:start="95:24" pos:end="95:30">0x10000</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="97:9" pos:end="97:31"><expr pos:start="97:9" pos:end="97:30"><name pos:start="97:9" pos:end="97:20">cmdline_addr</name> <operator pos:start="97:22" pos:end="97:22">=</operator> <literal type="number" pos:start="97:24" pos:end="97:30">0x20000</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="99:9" pos:end="99:32"><expr pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:17">prot_addr</name>    <operator pos:start="99:22" pos:end="99:22">=</operator> <literal type="number" pos:start="99:24" pos:end="99:31">0x100000</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:if pos:start="105:1" pos:end="105:5">#<cpp:directive pos:start="105:2" pos:end="105:3">if</cpp:directive> <expr pos:start="105:5" pos:end="105:5"><literal type="number" pos:start="105:5" pos:end="105:5">0</literal></expr></cpp:if>

    fprintf(stderr,

	    "qemu: real_addr     = 0x" TARGET_FMT_plx "\n"

	    "qemu: cmdline_addr  = 0x" TARGET_FMT_plx "\n"

	    "qemu: prot_addr     = 0x" TARGET_FMT_plx "\n",

	    real_addr,

	    cmdline_addr,

	    prot_addr);

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="125:5" pos:end="125:48">/* highest address for loading the initrd */</comment>

    <if_stmt pos:start="127:5" pos:end="133:32"><if pos:start="127:5" pos:end="129:41">if <condition pos:start="127:8" pos:end="127:26">(<expr pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:16">protocol</name> <operator pos:start="127:18" pos:end="127:19">&gt;=</operator> <literal type="number" pos:start="127:21" pos:end="127:25">0x203</literal></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:41"><block_content pos:start="129:9" pos:end="129:41">

	<expr_stmt pos:start="129:9" pos:end="129:41"><expr pos:start="129:9" pos:end="129:40"><name pos:start="129:9" pos:end="129:18">initrd_max</name> <operator pos:start="129:20" pos:end="129:20">=</operator> <call pos:start="129:22" pos:end="129:40"><name pos:start="129:22" pos:end="129:26">ldl_p</name><argument_list pos:start="129:27" pos:end="129:40">(<argument pos:start="129:28" pos:end="129:39"><expr pos:start="129:28" pos:end="129:39"><name pos:start="129:28" pos:end="129:33">header</name><operator pos:start="129:34" pos:end="129:34">+</operator><literal type="number" pos:start="129:35" pos:end="129:39">0x22c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="131:5" pos:end="133:32">else<block type="pseudo" pos:start="133:9" pos:end="133:32"><block_content pos:start="133:9" pos:end="133:32">

	<expr_stmt pos:start="133:9" pos:end="133:32"><expr pos:start="133:9" pos:end="133:31"><name pos:start="133:9" pos:end="133:18">initrd_max</name> <operator pos:start="133:20" pos:end="133:20">=</operator> <literal type="number" pos:start="133:22" pos:end="133:31">0x37ffffff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="137:5" pos:end="139:47"><if pos:start="137:5" pos:end="139:47">if <condition pos:start="137:8" pos:end="137:46">(<expr pos:start="137:9" pos:end="137:45"><name pos:start="137:9" pos:end="137:18">initrd_max</name> <operator pos:start="137:20" pos:end="137:21">&gt;=</operator> <name pos:start="137:23" pos:end="137:30">ram_size</name><operator pos:start="137:31" pos:end="137:31">-</operator><name pos:start="137:32" pos:end="137:45">ACPI_DATA_SIZE</name></expr>)</condition><block type="pseudo" pos:start="139:9" pos:end="139:47"><block_content pos:start="139:9" pos:end="139:47">

	<expr_stmt pos:start="139:9" pos:end="139:47"><expr pos:start="139:9" pos:end="139:46"><name pos:start="139:9" pos:end="139:18">initrd_max</name> <operator pos:start="139:20" pos:end="139:20">=</operator> <name pos:start="139:22" pos:end="139:29">ram_size</name><operator pos:start="139:30" pos:end="139:30">-</operator><name pos:start="139:31" pos:end="139:44">ACPI_DATA_SIZE</name><operator pos:start="139:45" pos:end="139:45">-</operator><literal type="number" pos:start="139:46" pos:end="139:46">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="143:5" pos:end="143:29">/* kernel command line */</comment>

    <expr_stmt pos:start="145:5" pos:end="145:57"><expr pos:start="145:5" pos:end="145:56"><call pos:start="145:5" pos:end="145:56"><name pos:start="145:5" pos:end="145:20">pstrcpy_targphys</name><argument_list pos:start="145:21" pos:end="145:56">(<argument pos:start="145:22" pos:end="145:33"><expr pos:start="145:22" pos:end="145:33"><name pos:start="145:22" pos:end="145:33">cmdline_addr</name></expr></argument>, <argument pos:start="145:36" pos:end="145:39"><expr pos:start="145:36" pos:end="145:39"><literal type="number" pos:start="145:36" pos:end="145:39">4096</literal></expr></argument>, <argument pos:start="145:42" pos:end="145:55"><expr pos:start="145:42" pos:end="145:55"><name pos:start="145:42" pos:end="145:55">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="149:5" pos:end="159:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:26">(<expr pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:16">protocol</name> <operator pos:start="149:18" pos:end="149:19">&gt;=</operator> <literal type="number" pos:start="149:21" pos:end="149:25">0x202</literal></expr>)</condition> <block pos:start="149:28" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:42">

	<expr_stmt pos:start="151:9" pos:end="151:42"><expr pos:start="151:9" pos:end="151:41"><call pos:start="151:9" pos:end="151:41"><name pos:start="151:9" pos:end="151:13">stl_p</name><argument_list pos:start="151:14" pos:end="151:41">(<argument pos:start="151:15" pos:end="151:26"><expr pos:start="151:15" pos:end="151:26"><name pos:start="151:15" pos:end="151:20">header</name><operator pos:start="151:21" pos:end="151:21">+</operator><literal type="number" pos:start="151:22" pos:end="151:26">0x228</literal></expr></argument>, <argument pos:start="151:29" pos:end="151:40"><expr pos:start="151:29" pos:end="151:40"><name pos:start="151:29" pos:end="151:40">cmdline_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="153:7" pos:end="159:5">else <block pos:start="153:12" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:51">

	<expr_stmt pos:start="155:9" pos:end="155:35"><expr pos:start="155:9" pos:end="155:34"><call pos:start="155:9" pos:end="155:34"><name pos:start="155:9" pos:end="155:13">stw_p</name><argument_list pos:start="155:14" pos:end="155:34">(<argument pos:start="155:15" pos:end="155:25"><expr pos:start="155:15" pos:end="155:25"><name pos:start="155:15" pos:end="155:20">header</name><operator pos:start="155:21" pos:end="155:21">+</operator><literal type="number" pos:start="155:22" pos:end="155:25">0x20</literal></expr></argument>, <argument pos:start="155:28" pos:end="155:33"><expr pos:start="155:28" pos:end="155:33"><literal type="number" pos:start="155:28" pos:end="155:33">0xA33F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="157:9" pos:end="157:51"><expr pos:start="157:9" pos:end="157:50"><call pos:start="157:9" pos:end="157:50"><name pos:start="157:9" pos:end="157:13">stw_p</name><argument_list pos:start="157:14" pos:end="157:50">(<argument pos:start="157:15" pos:end="157:25"><expr pos:start="157:15" pos:end="157:25"><name pos:start="157:15" pos:end="157:20">header</name><operator pos:start="157:21" pos:end="157:21">+</operator><literal type="number" pos:start="157:22" pos:end="157:25">0x22</literal></expr></argument>, <argument pos:start="157:28" pos:end="157:49"><expr pos:start="157:28" pos:end="157:49"><name pos:start="157:28" pos:end="157:39">cmdline_addr</name><operator pos:start="157:40" pos:end="157:40">-</operator><name pos:start="157:41" pos:end="157:49">real_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:21">/* loader type */</comment>

    <comment type="block" pos:start="165:5" pos:end="169:36">/* High nybble = B reserved for Qemu; low nybble is revision number.

       If this code is substantially changed, you may want to consider

       incrementing the revision. */</comment>

    <if_stmt pos:start="171:5" pos:end="173:29"><if pos:start="171:5" pos:end="173:29">if <condition pos:start="171:8" pos:end="171:26">(<expr pos:start="171:9" pos:end="171:25"><name pos:start="171:9" pos:end="171:16">protocol</name> <operator pos:start="171:18" pos:end="171:19">&gt;=</operator> <literal type="number" pos:start="171:21" pos:end="171:25">0x200</literal></expr>)</condition><block type="pseudo" pos:start="173:9" pos:end="173:29"><block_content pos:start="173:9" pos:end="173:29">

	<expr_stmt pos:start="173:9" pos:end="173:29"><expr pos:start="173:9" pos:end="173:28"><name pos:start="173:9" pos:end="173:21"><name pos:start="173:9" pos:end="173:14">header</name><index pos:start="173:15" pos:end="173:21">[<expr pos:start="173:16" pos:end="173:20"><literal type="number" pos:start="173:16" pos:end="173:20">0x210</literal></expr>]</index></name> <operator pos:start="173:23" pos:end="173:23">=</operator> <literal type="number" pos:start="173:25" pos:end="173:28">0xB0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="177:5" pos:end="177:14">/* heap */</comment>

    <if_stmt pos:start="179:5" pos:end="185:5"><if pos:start="179:5" pos:end="185:5">if <condition pos:start="179:8" pos:end="179:26">(<expr pos:start="179:9" pos:end="179:25"><name pos:start="179:9" pos:end="179:16">protocol</name> <operator pos:start="179:18" pos:end="179:19">&gt;=</operator> <literal type="number" pos:start="179:21" pos:end="179:25">0x201</literal></expr>)</condition> <block pos:start="179:28" pos:end="185:5">{<block_content pos:start="181:9" pos:end="183:58">

	<expr_stmt pos:start="181:9" pos:end="181:30"><expr pos:start="181:9" pos:end="181:29"><name pos:start="181:9" pos:end="181:21"><name pos:start="181:9" pos:end="181:14">header</name><index pos:start="181:15" pos:end="181:21">[<expr pos:start="181:16" pos:end="181:20"><literal type="number" pos:start="181:16" pos:end="181:20">0x211</literal></expr>]</index></name> <operator pos:start="181:23" pos:end="181:24">|=</operator> <literal type="number" pos:start="181:26" pos:end="181:29">0x80</literal></expr>;</expr_stmt>	<comment type="block" pos:start="181:33" pos:end="181:50">/* CAN_USE_HEAP */</comment>

	<expr_stmt pos:start="183:9" pos:end="183:58"><expr pos:start="183:9" pos:end="183:57"><call pos:start="183:9" pos:end="183:57"><name pos:start="183:9" pos:end="183:13">stw_p</name><argument_list pos:start="183:14" pos:end="183:57">(<argument pos:start="183:15" pos:end="183:26"><expr pos:start="183:15" pos:end="183:26"><name pos:start="183:15" pos:end="183:20">header</name><operator pos:start="183:21" pos:end="183:21">+</operator><literal type="number" pos:start="183:22" pos:end="183:26">0x224</literal></expr></argument>, <argument pos:start="183:29" pos:end="183:56"><expr pos:start="183:29" pos:end="183:56"><name pos:start="183:29" pos:end="183:40">cmdline_addr</name><operator pos:start="183:41" pos:end="183:41">-</operator><name pos:start="183:42" pos:end="183:50">real_addr</name><operator pos:start="183:51" pos:end="183:51">-</operator><literal type="number" pos:start="183:52" pos:end="183:56">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:21">/* load initrd */</comment>

    <if_stmt pos:start="191:5" pos:end="247:5"><if pos:start="191:5" pos:end="247:5">if <condition pos:start="191:8" pos:end="191:24">(<expr pos:start="191:9" pos:end="191:23"><name pos:start="191:9" pos:end="191:23">initrd_filename</name></expr>)</condition> <block pos:start="191:26" pos:end="247:5">{<block_content pos:start="193:9" pos:end="245:41">

	<if_stmt pos:start="193:9" pos:end="199:9"><if pos:start="193:9" pos:end="199:9">if <condition pos:start="193:12" pos:end="193:29">(<expr pos:start="193:13" pos:end="193:28"><name pos:start="193:13" pos:end="193:20">protocol</name> <operator pos:start="193:22" pos:end="193:22">&lt;</operator> <literal type="number" pos:start="193:24" pos:end="193:28">0x200</literal></expr>)</condition> <block pos:start="193:31" pos:end="199:9">{<block_content pos:start="195:13" pos:end="197:20">

	    <expr_stmt pos:start="195:13" pos:end="195:79"><expr pos:start="195:13" pos:end="195:78"><call pos:start="195:13" pos:end="195:78"><name pos:start="195:13" pos:end="195:19">fprintf</name><argument_list pos:start="195:20" pos:end="195:78">(<argument pos:start="195:21" pos:end="195:26"><expr pos:start="195:21" pos:end="195:26"><name pos:start="195:21" pos:end="195:26">stderr</name></expr></argument>, <argument pos:start="195:29" pos:end="195:77"><expr pos:start="195:29" pos:end="195:77"><literal type="string" pos:start="195:29" pos:end="195:77">"qemu: linux kernel too old to load a ram disk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="197:13" pos:end="197:20"><expr pos:start="197:13" pos:end="197:19"><call pos:start="197:13" pos:end="197:19"><name pos:start="197:13" pos:end="197:16">exit</name><argument_list pos:start="197:17" pos:end="197:19">(<argument pos:start="197:18" pos:end="197:18"><expr pos:start="197:18" pos:end="197:18"><literal type="number" pos:start="197:18" pos:end="197:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="203:9" pos:end="203:42"><expr pos:start="203:9" pos:end="203:41"><name pos:start="203:9" pos:end="203:10">fi</name> <operator pos:start="203:12" pos:end="203:12">=</operator> <call pos:start="203:14" pos:end="203:41"><name pos:start="203:14" pos:end="203:18">fopen</name><argument_list pos:start="203:19" pos:end="203:41">(<argument pos:start="203:20" pos:end="203:34"><expr pos:start="203:20" pos:end="203:34"><name pos:start="203:20" pos:end="203:34">initrd_filename</name></expr></argument>, <argument pos:start="203:37" pos:end="203:40"><expr pos:start="203:37" pos:end="203:40"><literal type="string" pos:start="203:37" pos:end="203:40">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="205:9" pos:end="213:9"><if pos:start="205:9" pos:end="213:9">if <condition pos:start="205:12" pos:end="205:16">(<expr pos:start="205:13" pos:end="205:15"><operator pos:start="205:13" pos:end="205:13">!</operator><name pos:start="205:14" pos:end="205:15">fi</name></expr>)</condition> <block pos:start="205:18" pos:end="213:9">{<block_content pos:start="207:13" pos:end="211:20">

	    <expr_stmt pos:start="207:13" pos:end="209:37"><expr pos:start="207:13" pos:end="209:36"><call pos:start="207:13" pos:end="209:36"><name pos:start="207:13" pos:end="207:19">fprintf</name><argument_list pos:start="207:20" pos:end="209:36">(<argument pos:start="207:21" pos:end="207:26"><expr pos:start="207:21" pos:end="207:26"><name pos:start="207:21" pos:end="207:26">stderr</name></expr></argument>, <argument pos:start="207:29" pos:end="207:74"><expr pos:start="207:29" pos:end="207:74"><literal type="string" pos:start="207:29" pos:end="207:74">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

		    <argument pos:start="209:21" pos:end="209:35"><expr pos:start="209:21" pos:end="209:35"><name pos:start="209:21" pos:end="209:35">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="211:13" pos:end="211:20"><expr pos:start="211:13" pos:end="211:19"><call pos:start="211:13" pos:end="211:19"><name pos:start="211:13" pos:end="211:16">exit</name><argument_list pos:start="211:17" pos:end="211:19">(<argument pos:start="211:18" pos:end="211:18"><expr pos:start="211:18" pos:end="211:18"><literal type="number" pos:start="211:18" pos:end="211:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="217:9" pos:end="217:40"><expr pos:start="217:9" pos:end="217:39"><name pos:start="217:9" pos:end="217:19">initrd_size</name> <operator pos:start="217:21" pos:end="217:21">=</operator> <call pos:start="217:23" pos:end="217:39"><name pos:start="217:23" pos:end="217:35">get_file_size</name><argument_list pos:start="217:36" pos:end="217:39">(<argument pos:start="217:37" pos:end="217:38"><expr pos:start="217:37" pos:end="217:38"><name pos:start="217:37" pos:end="217:38">fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="219:9" pos:end="219:55"><expr pos:start="219:9" pos:end="219:54"><name pos:start="219:9" pos:end="219:19">initrd_addr</name> <operator pos:start="219:21" pos:end="219:21">=</operator> <operator pos:start="219:23" pos:end="219:23">(</operator><name pos:start="219:24" pos:end="219:33">initrd_max</name><operator pos:start="219:34" pos:end="219:34">-</operator><name pos:start="219:35" pos:end="219:45">initrd_size</name><operator pos:start="219:46" pos:end="219:46">)</operator> <operator pos:start="219:48" pos:end="219:48">&amp;</operator> <operator pos:start="219:50" pos:end="219:50">~</operator><literal type="number" pos:start="219:51" pos:end="219:54">4095</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="223:9" pos:end="225:48"><expr pos:start="223:9" pos:end="225:47"><call pos:start="223:9" pos:end="225:47"><name pos:start="223:9" pos:end="223:15">fprintf</name><argument_list pos:start="223:16" pos:end="225:47">(<argument pos:start="223:17" pos:end="223:22"><expr pos:start="223:17" pos:end="223:22"><name pos:start="223:17" pos:end="223:22">stderr</name></expr></argument>, <argument pos:start="223:25" pos:end="225:20"><expr pos:start="223:25" pos:end="225:20"><literal type="string" pos:start="223:25" pos:end="223:64">"qemu: loading initrd (%#x bytes) at 0x"</literal> <name pos:start="223:66" pos:end="223:79">TARGET_FMT_plx</name>

                <literal type="string" pos:start="225:17" pos:end="225:20">"\n"</literal></expr></argument>, <argument pos:start="225:23" pos:end="225:33"><expr pos:start="225:23" pos:end="225:33"><name pos:start="225:23" pos:end="225:33">initrd_size</name></expr></argument>, <argument pos:start="225:36" pos:end="225:46"><expr pos:start="225:36" pos:end="225:46"><name pos:start="225:36" pos:end="225:46">initrd_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="229:9" pos:end="237:9"><if pos:start="229:9" pos:end="237:9">if <condition pos:start="229:12" pos:end="229:61">(<expr pos:start="229:13" pos:end="229:60"><operator pos:start="229:13" pos:end="229:13">!</operator><call pos:start="229:14" pos:end="229:60"><name pos:start="229:14" pos:end="229:30">fread_targphys_ok</name><argument_list pos:start="229:31" pos:end="229:60">(<argument pos:start="229:32" pos:end="229:42"><expr pos:start="229:32" pos:end="229:42"><name pos:start="229:32" pos:end="229:42">initrd_addr</name></expr></argument>, <argument pos:start="229:45" pos:end="229:55"><expr pos:start="229:45" pos:end="229:55"><name pos:start="229:45" pos:end="229:55">initrd_size</name></expr></argument>, <argument pos:start="229:58" pos:end="229:59"><expr pos:start="229:58" pos:end="229:59"><name pos:start="229:58" pos:end="229:59">fi</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:63" pos:end="237:9">{<block_content pos:start="231:13" pos:end="235:20">

	    <expr_stmt pos:start="231:13" pos:end="233:37"><expr pos:start="231:13" pos:end="233:36"><call pos:start="231:13" pos:end="233:36"><name pos:start="231:13" pos:end="231:19">fprintf</name><argument_list pos:start="231:20" pos:end="233:36">(<argument pos:start="231:21" pos:end="231:26"><expr pos:start="231:21" pos:end="231:26"><name pos:start="231:21" pos:end="231:26">stderr</name></expr></argument>, <argument pos:start="231:29" pos:end="231:73"><expr pos:start="231:29" pos:end="231:73"><literal type="string" pos:start="231:29" pos:end="231:73">"qemu: read error on initial ram disk '%s'\n"</literal></expr></argument>,

		    <argument pos:start="233:21" pos:end="233:35"><expr pos:start="233:21" pos:end="233:35"><name pos:start="233:21" pos:end="233:35">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="235:13" pos:end="235:20"><expr pos:start="235:13" pos:end="235:19"><call pos:start="235:13" pos:end="235:19"><name pos:start="235:13" pos:end="235:16">exit</name><argument_list pos:start="235:17" pos:end="235:19">(<argument pos:start="235:18" pos:end="235:18"><expr pos:start="235:18" pos:end="235:18"><literal type="number" pos:start="235:18" pos:end="235:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="239:9" pos:end="239:19"><expr pos:start="239:9" pos:end="239:18"><call pos:start="239:9" pos:end="239:18"><name pos:start="239:9" pos:end="239:14">fclose</name><argument_list pos:start="239:15" pos:end="239:18">(<argument pos:start="239:16" pos:end="239:17"><expr pos:start="239:16" pos:end="239:17"><name pos:start="239:16" pos:end="239:17">fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="243:9" pos:end="243:41"><expr pos:start="243:9" pos:end="243:40"><call pos:start="243:9" pos:end="243:40"><name pos:start="243:9" pos:end="243:13">stl_p</name><argument_list pos:start="243:14" pos:end="243:40">(<argument pos:start="243:15" pos:end="243:26"><expr pos:start="243:15" pos:end="243:26"><name pos:start="243:15" pos:end="243:20">header</name><operator pos:start="243:21" pos:end="243:21">+</operator><literal type="number" pos:start="243:22" pos:end="243:26">0x218</literal></expr></argument>, <argument pos:start="243:29" pos:end="243:39"><expr pos:start="243:29" pos:end="243:39"><name pos:start="243:29" pos:end="243:39">initrd_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="245:9" pos:end="245:41"><expr pos:start="245:9" pos:end="245:40"><call pos:start="245:9" pos:end="245:40"><name pos:start="245:9" pos:end="245:13">stl_p</name><argument_list pos:start="245:14" pos:end="245:40">(<argument pos:start="245:15" pos:end="245:26"><expr pos:start="245:15" pos:end="245:26"><name pos:start="245:15" pos:end="245:20">header</name><operator pos:start="245:21" pos:end="245:21">+</operator><literal type="number" pos:start="245:22" pos:end="245:26">0x21c</literal></expr></argument>, <argument pos:start="245:29" pos:end="245:39"><expr pos:start="245:29" pos:end="245:39"><name pos:start="245:29" pos:end="245:39">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="251:5" pos:end="251:68">/* store the finalized header and load the rest of the kernel */</comment>

    <expr_stmt pos:start="253:5" pos:end="253:55"><expr pos:start="253:5" pos:end="253:54"><call pos:start="253:5" pos:end="253:54"><name pos:start="253:5" pos:end="253:29">cpu_physical_memory_write</name><argument_list pos:start="253:30" pos:end="253:54">(<argument pos:start="253:31" pos:end="253:39"><expr pos:start="253:31" pos:end="253:39"><name pos:start="253:31" pos:end="253:39">real_addr</name></expr></argument>, <argument pos:start="253:42" pos:end="253:47"><expr pos:start="253:42" pos:end="253:47"><name pos:start="253:42" pos:end="253:47">header</name></expr></argument>, <argument pos:start="253:50" pos:end="253:53"><expr pos:start="253:50" pos:end="253:53"><literal type="number" pos:start="253:50" pos:end="253:53">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="257:5" pos:end="257:31"><expr pos:start="257:5" pos:end="257:30"><name pos:start="257:5" pos:end="257:14">setup_size</name> <operator pos:start="257:16" pos:end="257:16">=</operator> <name pos:start="257:18" pos:end="257:30"><name pos:start="257:18" pos:end="257:23">header</name><index pos:start="257:24" pos:end="257:30">[<expr pos:start="257:25" pos:end="257:29"><literal type="number" pos:start="257:25" pos:end="257:29">0x1f1</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="259:5" pos:end="261:23"><if pos:start="259:5" pos:end="261:23">if <condition pos:start="259:8" pos:end="259:24">(<expr pos:start="259:9" pos:end="259:23"><name pos:start="259:9" pos:end="259:18">setup_size</name> <operator pos:start="259:20" pos:end="259:21">==</operator> <literal type="number" pos:start="259:23" pos:end="259:23">0</literal></expr>)</condition><block type="pseudo" pos:start="261:9" pos:end="261:23"><block_content pos:start="261:9" pos:end="261:23">

	<expr_stmt pos:start="261:9" pos:end="261:23"><expr pos:start="261:9" pos:end="261:22"><name pos:start="261:9" pos:end="261:18">setup_size</name> <operator pos:start="261:20" pos:end="261:20">=</operator> <literal type="number" pos:start="261:22" pos:end="261:22">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="265:5" pos:end="265:36"><expr pos:start="265:5" pos:end="265:35"><name pos:start="265:5" pos:end="265:14">setup_size</name> <operator pos:start="265:16" pos:end="265:16">=</operator> <operator pos:start="265:18" pos:end="265:18">(</operator><name pos:start="265:19" pos:end="265:28">setup_size</name><operator pos:start="265:29" pos:end="265:29">+</operator><literal type="number" pos:start="265:30" pos:end="265:30">1</literal><operator pos:start="265:31" pos:end="265:31">)</operator><operator pos:start="265:32" pos:end="265:32">*</operator><literal type="number" pos:start="265:33" pos:end="265:35">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:30"><expr pos:start="267:5" pos:end="267:29"><name pos:start="267:5" pos:end="267:15">kernel_size</name> <operator pos:start="267:17" pos:end="267:18">-=</operator> <name pos:start="267:20" pos:end="267:29">setup_size</name></expr>;</expr_stmt>	<comment type="block" pos:start="267:33" pos:end="267:65">/* Size of protected-mode code */</comment>



    <if_stmt pos:start="271:5" pos:end="281:5"><if pos:start="271:5" pos:end="281:5">if <condition pos:start="271:8" pos:end="273:54">(<expr pos:start="271:9" pos:end="273:53"><operator pos:start="271:9" pos:end="271:9">!</operator><call pos:start="271:10" pos:end="271:62"><name pos:start="271:10" pos:end="271:26">fread_targphys_ok</name><argument_list pos:start="271:27" pos:end="271:62">(<argument pos:start="271:28" pos:end="271:41"><expr pos:start="271:28" pos:end="271:41"><name pos:start="271:28" pos:end="271:36">real_addr</name><operator pos:start="271:37" pos:end="271:37">+</operator><literal type="number" pos:start="271:38" pos:end="271:41">1024</literal></expr></argument>, <argument pos:start="271:44" pos:end="271:58"><expr pos:start="271:44" pos:end="271:58"><name pos:start="271:44" pos:end="271:53">setup_size</name><operator pos:start="271:54" pos:end="271:54">-</operator><literal type="number" pos:start="271:55" pos:end="271:58">1024</literal></expr></argument>, <argument pos:start="271:61" pos:end="271:61"><expr pos:start="271:61" pos:end="271:61"><name pos:start="271:61" pos:end="271:61">f</name></expr></argument>)</argument_list></call> <operator pos:start="271:64" pos:end="271:65">||</operator>

	<operator pos:start="273:9" pos:end="273:9">!</operator><call pos:start="273:10" pos:end="273:53"><name pos:start="273:10" pos:end="273:26">fread_targphys_ok</name><argument_list pos:start="273:27" pos:end="273:53">(<argument pos:start="273:28" pos:end="273:36"><expr pos:start="273:28" pos:end="273:36"><name pos:start="273:28" pos:end="273:36">prot_addr</name></expr></argument>, <argument pos:start="273:39" pos:end="273:49"><expr pos:start="273:39" pos:end="273:49"><name pos:start="273:39" pos:end="273:49">kernel_size</name></expr></argument>, <argument pos:start="273:52" pos:end="273:52"><expr pos:start="273:52" pos:end="273:52"><name pos:start="273:52" pos:end="273:52">f</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="273:56" pos:end="281:5">{<block_content pos:start="275:9" pos:end="279:16">

	<expr_stmt pos:start="275:9" pos:end="277:33"><expr pos:start="275:9" pos:end="277:32"><call pos:start="275:9" pos:end="277:32"><name pos:start="275:9" pos:end="275:15">fprintf</name><argument_list pos:start="275:16" pos:end="277:32">(<argument pos:start="275:17" pos:end="275:22"><expr pos:start="275:17" pos:end="275:22"><name pos:start="275:17" pos:end="275:22">stderr</name></expr></argument>, <argument pos:start="275:25" pos:end="275:59"><expr pos:start="275:25" pos:end="275:59"><literal type="string" pos:start="275:25" pos:end="275:59">"qemu: read error on kernel '%s'\n"</literal></expr></argument>,

		<argument pos:start="277:17" pos:end="277:31"><expr pos:start="277:17" pos:end="277:31"><name pos:start="277:17" pos:end="277:31">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="279:9" pos:end="279:16"><expr pos:start="279:9" pos:end="279:15"><call pos:start="279:9" pos:end="279:15"><name pos:start="279:9" pos:end="279:12">exit</name><argument_list pos:start="279:13" pos:end="279:15">(<argument pos:start="279:14" pos:end="279:14"><expr pos:start="279:14" pos:end="279:14"><literal type="number" pos:start="279:14" pos:end="279:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:14"><expr pos:start="283:5" pos:end="283:13"><call pos:start="283:5" pos:end="283:13"><name pos:start="283:5" pos:end="283:10">fclose</name><argument_list pos:start="283:11" pos:end="283:13">(<argument pos:start="283:12" pos:end="283:12"><expr pos:start="283:12" pos:end="283:12"><name pos:start="283:12" pos:end="283:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="287:5" pos:end="287:66">/* generate bootsector to set up the initial register state */</comment>

    <expr_stmt pos:start="289:5" pos:end="289:30"><expr pos:start="289:5" pos:end="289:29"><name pos:start="289:5" pos:end="289:12">real_seg</name> <operator pos:start="289:14" pos:end="289:14">=</operator> <name pos:start="289:16" pos:end="289:24">real_addr</name> <operator pos:start="289:26" pos:end="289:27">&gt;&gt;</operator> <literal type="number" pos:start="289:29" pos:end="289:29">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:58"><expr pos:start="291:5" pos:end="291:57"><name pos:start="291:5" pos:end="291:10"><name pos:start="291:5" pos:end="291:7">seg</name><index pos:start="291:8" pos:end="291:10">[<expr pos:start="291:9" pos:end="291:9"><literal type="number" pos:start="291:9" pos:end="291:9">0</literal></expr>]</index></name> <operator pos:start="291:12" pos:end="291:12">=</operator> <name pos:start="291:14" pos:end="291:19"><name pos:start="291:14" pos:end="291:16">seg</name><index pos:start="291:17" pos:end="291:19">[<expr pos:start="291:18" pos:end="291:18"><literal type="number" pos:start="291:18" pos:end="291:18">2</literal></expr>]</index></name> <operator pos:start="291:21" pos:end="291:21">=</operator> <name pos:start="291:23" pos:end="291:28"><name pos:start="291:23" pos:end="291:25">seg</name><index pos:start="291:26" pos:end="291:28">[<expr pos:start="291:27" pos:end="291:27"><literal type="number" pos:start="291:27" pos:end="291:27">3</literal></expr>]</index></name> <operator pos:start="291:30" pos:end="291:30">=</operator> <name pos:start="291:32" pos:end="291:37"><name pos:start="291:32" pos:end="291:34">seg</name><index pos:start="291:35" pos:end="291:37">[<expr pos:start="291:36" pos:end="291:36"><literal type="number" pos:start="291:36" pos:end="291:36">4</literal></expr>]</index></name> <operator pos:start="291:39" pos:end="291:39">=</operator> <name pos:start="291:41" pos:end="291:46"><name pos:start="291:41" pos:end="291:43">seg</name><index pos:start="291:44" pos:end="291:46">[<expr pos:start="291:45" pos:end="291:45"><literal type="number" pos:start="291:45" pos:end="291:45">4</literal></expr>]</index></name> <operator pos:start="291:48" pos:end="291:48">=</operator> <name pos:start="291:50" pos:end="291:57">real_seg</name></expr>;</expr_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:27"><expr pos:start="293:5" pos:end="293:26"><name pos:start="293:5" pos:end="293:10"><name pos:start="293:5" pos:end="293:7">seg</name><index pos:start="293:8" pos:end="293:10">[<expr pos:start="293:9" pos:end="293:9"><literal type="number" pos:start="293:9" pos:end="293:9">1</literal></expr>]</index></name> <operator pos:start="293:12" pos:end="293:12">=</operator> <name pos:start="293:14" pos:end="293:21">real_seg</name><operator pos:start="293:22" pos:end="293:22">+</operator><literal type="number" pos:start="293:23" pos:end="293:26">0x20</literal></expr>;</expr_stmt>	<comment type="block" pos:start="293:33" pos:end="293:40">/* CS */</comment>

    <expr_stmt pos:start="295:5" pos:end="295:31"><expr pos:start="295:5" pos:end="295:30"><call pos:start="295:5" pos:end="295:30"><name pos:start="295:5" pos:end="295:10">memset</name><argument_list pos:start="295:11" pos:end="295:30">(<argument pos:start="295:12" pos:end="295:14"><expr pos:start="295:12" pos:end="295:14"><name pos:start="295:12" pos:end="295:14">gpr</name></expr></argument>, <argument pos:start="295:17" pos:end="295:17"><expr pos:start="295:17" pos:end="295:17"><literal type="number" pos:start="295:17" pos:end="295:17">0</literal></expr></argument>, <argument pos:start="295:20" pos:end="295:29"><expr pos:start="295:20" pos:end="295:29"><sizeof pos:start="295:20" pos:end="295:29">sizeof <name pos:start="295:27" pos:end="295:29">gpr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:39"><expr pos:start="297:5" pos:end="297:38"><name pos:start="297:5" pos:end="297:10"><name pos:start="297:5" pos:end="297:7">gpr</name><index pos:start="297:8" pos:end="297:10">[<expr pos:start="297:9" pos:end="297:9"><literal type="number" pos:start="297:9" pos:end="297:9">4</literal></expr>]</index></name> <operator pos:start="297:12" pos:end="297:12">=</operator> <name pos:start="297:14" pos:end="297:25">cmdline_addr</name><operator pos:start="297:26" pos:end="297:26">-</operator><name pos:start="297:27" pos:end="297:35">real_addr</name><operator pos:start="297:36" pos:end="297:36">-</operator><literal type="number" pos:start="297:37" pos:end="297:38">16</literal></expr>;</expr_stmt>	<comment type="block" pos:start="297:41" pos:end="297:66">/* SP (-16 is paranoia) */</comment>



    <expr_stmt pos:start="301:5" pos:end="301:35"><expr pos:start="301:5" pos:end="301:34"><call pos:start="301:5" pos:end="301:34"><name pos:start="301:5" pos:end="301:21">generate_bootsect</name><argument_list pos:start="301:22" pos:end="301:34">(<argument pos:start="301:23" pos:end="301:25"><expr pos:start="301:23" pos:end="301:25"><name pos:start="301:23" pos:end="301:25">gpr</name></expr></argument>, <argument pos:start="301:28" pos:end="301:30"><expr pos:start="301:28" pos:end="301:30"><name pos:start="301:28" pos:end="301:30">seg</name></expr></argument>, <argument pos:start="301:33" pos:end="301:33"><expr pos:start="301:33" pos:end="301:33"><literal type="number" pos:start="301:33" pos:end="301:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
