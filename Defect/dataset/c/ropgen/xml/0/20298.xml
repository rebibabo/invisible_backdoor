<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20298.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:43">bdrv_aligned_preadv</name><parameter_list pos:start="1:44" pos:end="3:70">(<parameter pos:start="1:45" pos:end="1:64"><decl pos:start="1:45" pos:end="1:64"><type pos:start="1:45" pos:end="1:64"><name pos:start="1:45" pos:end="1:60">BlockDriverState</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:18"><decl pos:start="3:5" pos:end="3:18"><type pos:start="3:5" pos:end="3:18"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:18">offset</name></decl></parameter>, <parameter pos:start="3:21" pos:end="3:38"><decl pos:start="3:21" pos:end="3:38"><type pos:start="3:21" pos:end="3:38"><name pos:start="3:21" pos:end="3:28">unsigned</name> <name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:38">bytes</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:58"><decl pos:start="3:41" pos:end="3:58"><type pos:start="3:41" pos:end="3:58"><name pos:start="3:41" pos:end="3:52">QEMUIOVector</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:58">qiov</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:69"><decl pos:start="3:61" pos:end="3:69"><type pos:start="3:61" pos:end="3:69"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:69">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="155:1">{<block_content pos:start="7:5" pos:end="153:15">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">BlockDriver</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">drv</name> <init pos:start="7:22" pos:end="7:30">= <expr pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">BdrvTrackedRequest</name></type> <name pos:start="9:24" pos:end="9:26">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:51"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:22">sector_num</name> <init pos:start="15:24" pos:end="15:51">= <expr pos:start="15:26" pos:end="15:51"><name pos:start="15:26" pos:end="15:31">offset</name> <operator pos:start="15:33" pos:end="15:34">&gt;&gt;</operator> <name pos:start="15:36" pos:end="15:51">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:56"><decl pos:start="17:5" pos:end="17:55"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:27">nb_sectors</name> <init pos:start="17:29" pos:end="17:55">= <expr pos:start="17:31" pos:end="17:55"><name pos:start="17:31" pos:end="17:35">bytes</name> <operator pos:start="17:37" pos:end="17:38">&gt;&gt;</operator> <name pos:start="17:40" pos:end="17:55">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><call pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:50">(<argument pos:start="21:12" pos:end="21:49"><expr pos:start="21:12" pos:end="21:49"><operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:18">offset</name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <operator pos:start="21:22" pos:end="21:22">(</operator><name pos:start="21:23" pos:end="21:38">BDRV_SECTOR_SIZE</name> <operator pos:start="21:40" pos:end="21:40">-</operator> <literal type="number" pos:start="21:42" pos:end="21:42">1</literal><operator pos:start="21:43" pos:end="21:43">)</operator><operator pos:start="21:44" pos:end="21:44">)</operator> <operator pos:start="21:46" pos:end="21:47">==</operator> <literal type="number" pos:start="21:49" pos:end="21:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:50"><expr pos:start="23:5" pos:end="23:49"><call pos:start="23:5" pos:end="23:49"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:49">(<argument pos:start="23:12" pos:end="23:48"><expr pos:start="23:12" pos:end="23:48"><operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:17">bytes</name> <operator pos:start="23:19" pos:end="23:19">&amp;</operator> <operator pos:start="23:21" pos:end="23:21">(</operator><name pos:start="23:22" pos:end="23:37">BDRV_SECTOR_SIZE</name> <operator pos:start="23:39" pos:end="23:39">-</operator> <literal type="number" pos:start="23:41" pos:end="23:41">1</literal><operator pos:start="23:42" pos:end="23:42">)</operator><operator pos:start="23:43" pos:end="23:43">)</operator> <operator pos:start="23:45" pos:end="23:46">==</operator> <literal type="number" pos:start="23:48" pos:end="23:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:58">/* Handle Copy on Read and associated serialisation */</comment>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:38">(<expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:13">flags</name> <operator pos:start="29:15" pos:end="29:15">&amp;</operator> <name pos:start="29:17" pos:end="29:37">BDRV_REQ_COPY_ON_READ</name></expr>)</condition> <block pos:start="29:40" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:37">

        <expr_stmt pos:start="31:9" pos:end="31:37"><expr pos:start="31:9" pos:end="31:36"><name pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:10">bs</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:34">copy_on_read_in_flight</name></name><operator pos:start="31:35" pos:end="31:36">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:35">(<expr pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:10">bs</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:34">copy_on_read_in_flight</name></name></expr>)</condition> <block pos:start="37:37" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:57">

        <expr_stmt pos:start="39:9" pos:end="39:57"><expr pos:start="39:9" pos:end="39:56"><call pos:start="39:9" pos:end="39:56"><name pos:start="39:9" pos:end="39:37">wait_for_overlapping_requests</name><argument_list pos:start="39:38" pos:end="39:56">(<argument pos:start="39:39" pos:end="39:40"><expr pos:start="39:39" pos:end="39:40"><name pos:start="39:39" pos:end="39:40">bs</name></expr></argument>, <argument pos:start="39:43" pos:end="39:48"><expr pos:start="39:43" pos:end="39:48"><name pos:start="39:43" pos:end="39:48">offset</name></expr></argument>, <argument pos:start="39:51" pos:end="39:55"><expr pos:start="39:51" pos:end="39:55"><name pos:start="39:51" pos:end="39:55">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:58"><expr pos:start="45:5" pos:end="45:57"><call pos:start="45:5" pos:end="45:57"><name pos:start="45:5" pos:end="45:25">tracked_request_begin</name><argument_list pos:start="45:26" pos:end="45:57">(<argument pos:start="45:27" pos:end="45:30"><expr pos:start="45:27" pos:end="45:30"><operator pos:start="45:27" pos:end="45:27">&amp;</operator><name pos:start="45:28" pos:end="45:30">req</name></expr></argument>, <argument pos:start="45:33" pos:end="45:34"><expr pos:start="45:33" pos:end="45:34"><name pos:start="45:33" pos:end="45:34">bs</name></expr></argument>, <argument pos:start="45:37" pos:end="45:42"><expr pos:start="45:37" pos:end="45:42"><name pos:start="45:37" pos:end="45:42">offset</name></expr></argument>, <argument pos:start="45:45" pos:end="45:49"><expr pos:start="45:45" pos:end="45:49"><name pos:start="45:45" pos:end="45:49">bytes</name></expr></argument>, <argument pos:start="45:52" pos:end="45:56"><expr pos:start="45:52" pos:end="45:56"><name pos:start="45:52" pos:end="45:56">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="73:5"><if pos:start="49:5" pos:end="73:5">if <condition pos:start="49:8" pos:end="49:38">(<expr pos:start="49:9" pos:end="49:37"><name pos:start="49:9" pos:end="49:13">flags</name> <operator pos:start="49:15" pos:end="49:15">&amp;</operator> <name pos:start="49:17" pos:end="49:37">BDRV_REQ_COPY_ON_READ</name></expr>)</condition> <block pos:start="49:40" pos:end="73:5">{<block_content pos:start="51:9" pos:end="71:9">

        <decl_stmt pos:start="51:9" pos:end="51:17"><decl pos:start="51:9" pos:end="51:16"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:16">pnum</name></decl>;</decl_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:67"><expr pos:start="55:9" pos:end="55:66"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:66"><name pos:start="55:15" pos:end="55:31">bdrv_is_allocated</name><argument_list pos:start="55:32" pos:end="55:66">(<argument pos:start="55:33" pos:end="55:34"><expr pos:start="55:33" pos:end="55:34"><name pos:start="55:33" pos:end="55:34">bs</name></expr></argument>, <argument pos:start="55:37" pos:end="55:46"><expr pos:start="55:37" pos:end="55:46"><name pos:start="55:37" pos:end="55:46">sector_num</name></expr></argument>, <argument pos:start="55:49" pos:end="55:58"><expr pos:start="55:49" pos:end="55:58"><name pos:start="55:49" pos:end="55:58">nb_sectors</name></expr></argument>, <argument pos:start="55:61" pos:end="55:65"><expr pos:start="55:61" pos:end="55:65"><operator pos:start="55:61" pos:end="55:61">&amp;</operator><name pos:start="55:62" pos:end="55:65">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:20">(<expr pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:15">ret</name> <operator pos:start="57:17" pos:end="57:17">&lt;</operator> <literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr>)</condition> <block pos:start="57:22" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:21">

            <goto pos:start="59:13" pos:end="59:21">goto <name pos:start="59:18" pos:end="59:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:39">(<expr pos:start="65:13" pos:end="65:38"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:16">ret</name> <operator pos:start="65:18" pos:end="65:19">||</operator> <name pos:start="65:21" pos:end="65:24">pnum</name> <operator pos:start="65:26" pos:end="65:27">!=</operator> <name pos:start="65:29" pos:end="65:38">nb_sectors</name></expr>)</condition> <block pos:start="65:41" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:21">

            <expr_stmt pos:start="67:13" pos:end="67:77"><expr pos:start="67:13" pos:end="67:76"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:76"><name pos:start="67:19" pos:end="67:42">bdrv_co_do_copy_on_readv</name><argument_list pos:start="67:43" pos:end="67:76">(<argument pos:start="67:44" pos:end="67:45"><expr pos:start="67:44" pos:end="67:45"><name pos:start="67:44" pos:end="67:45">bs</name></expr></argument>, <argument pos:start="67:48" pos:end="67:57"><expr pos:start="67:48" pos:end="67:57"><name pos:start="67:48" pos:end="67:57">sector_num</name></expr></argument>, <argument pos:start="67:60" pos:end="67:69"><expr pos:start="67:60" pos:end="67:69"><name pos:start="67:60" pos:end="67:69">nb_sectors</name></expr></argument>, <argument pos:start="67:72" pos:end="67:75"><expr pos:start="67:72" pos:end="67:75"><name pos:start="67:72" pos:end="67:75">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="69:13" pos:end="69:21">goto <name pos:start="69:18" pos:end="69:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:48">/* Forward the request to the BlockDriver */</comment>

    <if_stmt pos:start="79:5" pos:end="135:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:47">(<expr pos:start="79:9" pos:end="79:46"><operator pos:start="79:9" pos:end="79:9">!</operator><operator pos:start="79:10" pos:end="79:10">(</operator><name pos:start="79:11" pos:end="79:29"><name pos:start="79:11" pos:end="79:12">bs</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:29">zero_beyond_eof</name></name> <operator pos:start="79:31" pos:end="79:32">&amp;&amp;</operator> <name pos:start="79:34" pos:end="79:45"><name pos:start="79:34" pos:end="79:35">bs</name><operator pos:start="79:36" pos:end="79:37">-&gt;</operator><name pos:start="79:38" pos:end="79:45">growable</name></name><operator pos:start="79:46" pos:end="79:46">)</operator></expr>)</condition> <block pos:start="79:49" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:67">

        <expr_stmt pos:start="81:9" pos:end="81:67"><expr pos:start="81:9" pos:end="81:66"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:66"><name pos:start="81:15" pos:end="81:32"><name pos:start="81:15" pos:end="81:17">drv</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:32">bdrv_co_readv</name></name><argument_list pos:start="81:33" pos:end="81:66">(<argument pos:start="81:34" pos:end="81:35"><expr pos:start="81:34" pos:end="81:35"><name pos:start="81:34" pos:end="81:35">bs</name></expr></argument>, <argument pos:start="81:38" pos:end="81:47"><expr pos:start="81:38" pos:end="81:47"><name pos:start="81:38" pos:end="81:47">sector_num</name></expr></argument>, <argument pos:start="81:50" pos:end="81:59"><expr pos:start="81:50" pos:end="81:59"><name pos:start="81:50" pos:end="81:59">nb_sectors</name></expr></argument>, <argument pos:start="81:62" pos:end="81:65"><expr pos:start="81:62" pos:end="81:65"><name pos:start="81:62" pos:end="81:65">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="135:5">else <block pos:start="83:12" pos:end="135:5">{<block_content pos:start="87:9" pos:end="133:9">

        <comment type="block" pos:start="85:9" pos:end="85:52">/* Read zeros after EOF of growable BDSes */</comment>

        <decl_stmt pos:start="87:9" pos:end="87:51"><decl pos:start="87:9" pos:end="87:19"><type pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:15">int64_t</name></type> <name pos:start="87:17" pos:end="87:19">len</name></decl>, <decl pos:start="87:22" pos:end="87:34"><type ref="prev" pos:start="87:9" pos:end="87:15"/><name pos:start="87:22" pos:end="87:34">total_sectors</name></decl>, <decl pos:start="87:37" pos:end="87:50"><type ref="prev" pos:start="87:9" pos:end="87:15"/><name pos:start="87:37" pos:end="87:50">max_nb_sectors</name></decl>;</decl_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:33"><expr pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:11">len</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="91:32"><name pos:start="91:15" pos:end="91:28">bdrv_getlength</name><argument_list pos:start="91:29" pos:end="91:32">(<argument pos:start="91:30" pos:end="91:31"><expr pos:start="91:30" pos:end="91:31"><name pos:start="91:30" pos:end="91:31">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="99:9"><if pos:start="93:9" pos:end="99:9">if <condition pos:start="93:12" pos:end="93:20">(<expr pos:start="93:13" pos:end="93:19"><name pos:start="93:13" pos:end="93:15">len</name> <operator pos:start="93:17" pos:end="93:17">&lt;</operator> <literal type="number" pos:start="93:19" pos:end="93:19">0</literal></expr>)</condition> <block pos:start="93:22" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:21">

            <expr_stmt pos:start="95:13" pos:end="95:22"><expr pos:start="95:13" pos:end="95:21"><name pos:start="95:13" pos:end="95:15">ret</name> <operator pos:start="95:17" pos:end="95:17">=</operator> <name pos:start="95:19" pos:end="95:21">len</name></expr>;</expr_stmt>

            <goto pos:start="97:13" pos:end="97:21">goto <name pos:start="97:18" pos:end="97:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:60"><expr pos:start="103:9" pos:end="103:59"><name pos:start="103:9" pos:end="103:21">total_sectors</name> <operator pos:start="103:23" pos:end="103:23">=</operator> <call pos:start="103:25" pos:end="103:59"><name pos:start="103:25" pos:end="103:36">DIV_ROUND_UP</name><argument_list pos:start="103:37" pos:end="103:59">(<argument pos:start="103:38" pos:end="103:40"><expr pos:start="103:38" pos:end="103:40"><name pos:start="103:38" pos:end="103:40">len</name></expr></argument>, <argument pos:start="103:43" pos:end="103:58"><expr pos:start="103:43" pos:end="103:58"><name pos:start="103:43" pos:end="103:58">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:60"><expr pos:start="105:9" pos:end="105:59"><name pos:start="105:9" pos:end="105:22">max_nb_sectors</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <call pos:start="105:26" pos:end="105:59"><name pos:start="105:26" pos:end="105:28">MAX</name><argument_list pos:start="105:29" pos:end="105:59">(<argument pos:start="105:30" pos:end="105:30"><expr pos:start="105:30" pos:end="105:30"><literal type="number" pos:start="105:30" pos:end="105:30">0</literal></expr></argument>, <argument pos:start="105:33" pos:end="105:58"><expr pos:start="105:33" pos:end="105:58"><name pos:start="105:33" pos:end="105:45">total_sectors</name> <operator pos:start="105:47" pos:end="105:47">-</operator> <name pos:start="105:49" pos:end="105:58">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="117:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="107:31">(<expr pos:start="107:13" pos:end="107:30"><name pos:start="107:13" pos:end="107:26">max_nb_sectors</name> <operator pos:start="107:28" pos:end="107:28">&gt;</operator> <literal type="number" pos:start="107:30" pos:end="107:30">0</literal></expr>)</condition> <block pos:start="107:33" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:76">

            <expr_stmt pos:start="109:13" pos:end="111:76"><expr pos:start="109:13" pos:end="111:75"><name pos:start="109:13" pos:end="109:15">ret</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <call pos:start="109:19" pos:end="111:75"><name pos:start="109:19" pos:end="109:36"><name pos:start="109:19" pos:end="109:21">drv</name><operator pos:start="109:22" pos:end="109:23">-&gt;</operator><name pos:start="109:24" pos:end="109:36">bdrv_co_readv</name></name><argument_list pos:start="109:37" pos:end="111:75">(<argument pos:start="109:38" pos:end="109:39"><expr pos:start="109:38" pos:end="109:39"><name pos:start="109:38" pos:end="109:39">bs</name></expr></argument>, <argument pos:start="109:42" pos:end="109:51"><expr pos:start="109:42" pos:end="109:51"><name pos:start="109:42" pos:end="109:51">sector_num</name></expr></argument>,

                                     <argument pos:start="111:38" pos:end="111:68"><expr pos:start="111:38" pos:end="111:68"><call pos:start="111:38" pos:end="111:68"><name pos:start="111:38" pos:end="111:40">MIN</name><argument_list pos:start="111:41" pos:end="111:68">(<argument pos:start="111:42" pos:end="111:51"><expr pos:start="111:42" pos:end="111:51"><name pos:start="111:42" pos:end="111:51">nb_sectors</name></expr></argument>, <argument pos:start="111:54" pos:end="111:67"><expr pos:start="111:54" pos:end="111:67"><name pos:start="111:54" pos:end="111:67">max_nb_sectors</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:71" pos:end="111:74"><expr pos:start="111:71" pos:end="111:74"><name pos:start="111:71" pos:end="111:74">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="113:11" pos:end="117:9">else <block pos:start="113:16" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:20">

            <expr_stmt pos:start="115:13" pos:end="115:20"><expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="121:9" pos:end="121:70">/* Reading beyond end of file is supposed to produce zeroes */</comment>

        <if_stmt pos:start="123:9" pos:end="133:9"><if pos:start="123:9" pos:end="133:9">if <condition pos:start="123:12" pos:end="123:64">(<expr pos:start="123:13" pos:end="123:63"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:18">==</operator> <literal type="number" pos:start="123:20" pos:end="123:20">0</literal> <operator pos:start="123:22" pos:end="123:23">&amp;&amp;</operator> <name pos:start="123:25" pos:end="123:37">total_sectors</name> <operator pos:start="123:39" pos:end="123:39">&lt;</operator> <name pos:start="123:41" pos:end="123:50">sector_num</name> <operator pos:start="123:52" pos:end="123:52">+</operator> <name pos:start="123:54" pos:end="123:63">nb_sectors</name></expr>)</condition> <block pos:start="123:66" pos:end="133:9">{<block_content pos:start="125:13" pos:end="131:73">

            <decl_stmt pos:start="125:13" pos:end="125:65"><decl pos:start="125:13" pos:end="125:64"><type pos:start="125:13" pos:end="125:20"><name pos:start="125:13" pos:end="125:20">uint64_t</name></type> <name pos:start="125:22" pos:end="125:27">offset</name> <init pos:start="125:29" pos:end="125:64">= <expr pos:start="125:31" pos:end="125:64"><call pos:start="125:31" pos:end="125:64"><name pos:start="125:31" pos:end="125:33">MAX</name><argument_list pos:start="125:34" pos:end="125:64">(<argument pos:start="125:35" pos:end="125:35"><expr pos:start="125:35" pos:end="125:35"><literal type="number" pos:start="125:35" pos:end="125:35">0</literal></expr></argument>, <argument pos:start="125:38" pos:end="125:63"><expr pos:start="125:38" pos:end="125:63"><name pos:start="125:38" pos:end="125:50">total_sectors</name> <operator pos:start="125:52" pos:end="125:52">-</operator> <name pos:start="125:54" pos:end="125:63">sector_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="127:13" pos:end="129:47"><decl pos:start="127:13" pos:end="129:46"><type pos:start="127:13" pos:end="127:20"><name pos:start="127:13" pos:end="127:20">uint64_t</name></type> <name pos:start="127:22" pos:end="127:26">bytes</name> <init pos:start="127:28" pos:end="129:46">= <expr pos:start="127:30" pos:end="129:46"><operator pos:start="127:30" pos:end="127:30">(</operator><name pos:start="127:31" pos:end="127:40">sector_num</name> <operator pos:start="127:42" pos:end="127:42">+</operator> <name pos:start="127:44" pos:end="127:53">nb_sectors</name> <operator pos:start="127:55" pos:end="127:55">-</operator> <name pos:start="127:57" pos:end="127:62">offset</name><operator pos:start="127:63" pos:end="127:63">)</operator> <operator pos:start="127:65" pos:end="127:65">*</operator>

                              <name pos:start="129:31" pos:end="129:46">BDRV_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:73"><expr pos:start="131:13" pos:end="131:72"><call pos:start="131:13" pos:end="131:72"><name pos:start="131:13" pos:end="131:29">qemu_iovec_memset</name><argument_list pos:start="131:30" pos:end="131:72">(<argument pos:start="131:31" pos:end="131:34"><expr pos:start="131:31" pos:end="131:34"><name pos:start="131:31" pos:end="131:34">qiov</name></expr></argument>, <argument pos:start="131:37" pos:end="131:61"><expr pos:start="131:37" pos:end="131:61"><name pos:start="131:37" pos:end="131:42">offset</name> <operator pos:start="131:44" pos:end="131:44">*</operator> <name pos:start="131:46" pos:end="131:61">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="131:64" pos:end="131:64"><expr pos:start="131:64" pos:end="131:64"><literal type="number" pos:start="131:64" pos:end="131:64">0</literal></expr></argument>, <argument pos:start="131:67" pos:end="131:71"><expr pos:start="131:67" pos:end="131:71"><name pos:start="131:67" pos:end="131:71">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="139:1" pos:end="139:4"><name pos:start="139:1" pos:end="139:3">out</name>:</label>

    <expr_stmt pos:start="141:5" pos:end="141:30"><expr pos:start="141:5" pos:end="141:29"><call pos:start="141:5" pos:end="141:29"><name pos:start="141:5" pos:end="141:23">tracked_request_end</name><argument_list pos:start="141:24" pos:end="141:29">(<argument pos:start="141:25" pos:end="141:28"><expr pos:start="141:25" pos:end="141:28"><operator pos:start="141:25" pos:end="141:25">&amp;</operator><name pos:start="141:26" pos:end="141:28">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:38">(<expr pos:start="145:9" pos:end="145:37"><name pos:start="145:9" pos:end="145:13">flags</name> <operator pos:start="145:15" pos:end="145:15">&amp;</operator> <name pos:start="145:17" pos:end="145:37">BDRV_REQ_COPY_ON_READ</name></expr>)</condition> <block pos:start="145:40" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:37">

        <expr_stmt pos:start="147:9" pos:end="147:37"><expr pos:start="147:9" pos:end="147:36"><name pos:start="147:9" pos:end="147:34"><name pos:start="147:9" pos:end="147:10">bs</name><operator pos:start="147:11" pos:end="147:12">-&gt;</operator><name pos:start="147:13" pos:end="147:34">copy_on_read_in_flight</name></name><operator pos:start="147:35" pos:end="147:36">--</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="153:5" pos:end="153:15">return <expr pos:start="153:12" pos:end="153:14"><name pos:start="153:12" pos:end="153:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
