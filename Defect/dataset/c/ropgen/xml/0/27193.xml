<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27193.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">page_unprotect</name><parameter_list pos:start="1:19" pos:end="1:54">(<parameter pos:start="1:20" pos:end="1:39"><decl pos:start="1:20" pos:end="1:39"><type pos:start="1:20" pos:end="1:39"><name pos:start="1:20" pos:end="1:31">target_ulong</name></type> <name pos:start="1:33" pos:end="1:39">address</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:53"><decl pos:start="1:42" pos:end="1:53"><type pos:start="1:42" pos:end="1:53"><name pos:start="1:42" pos:end="1:50">uintptr_t</name></type> <name pos:start="1:52" pos:end="1:53">pc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:13">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:21">prot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">PageDesc</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:27">host_start</name></decl>, <decl pos:start="9:30" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:30" pos:end="9:37">host_end</name></decl>, <decl pos:start="9:40" pos:end="9:43"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:40" pos:end="9:43">addr</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="17:38">/* Technically this isn't safe inside a signal handler.  However we

       know this only ever happens in a synchronous SEGV handler, so in

       practice it seems to be ok.  */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:16"><expr pos:start="19:5" pos:end="19:15"><call pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">mmap_lock</name><argument_list pos:start="19:14" pos:end="19:15">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:5">p</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <call pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:17">page_find</name><argument_list pos:start="23:18" pos:end="23:46">(<argument pos:start="23:19" pos:end="23:45"><expr pos:start="23:19" pos:end="23:45"><name pos:start="23:19" pos:end="23:25">address</name> <operator pos:start="23:27" pos:end="23:28">&gt;&gt;</operator> <name pos:start="23:30" pos:end="23:45">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:11">(<expr pos:start="25:9" pos:end="25:10"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:10">p</name></expr>)</condition> <block pos:start="25:13" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><call pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:19">mmap_unlock</name><argument_list pos:start="27:20" pos:end="27:21">()</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="37:37">/* if the page was really writable, then we change its

       protection back to writable */</comment>

    <if_stmt pos:start="39:5" pos:end="89:5"><if pos:start="39:5" pos:end="89:5">if <condition pos:start="39:8" pos:end="39:64">(<expr pos:start="39:9" pos:end="39:63"><operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:17"><name pos:start="39:10" pos:end="39:10">p</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:17">flags</name></name> <operator pos:start="39:19" pos:end="39:19">&amp;</operator> <name pos:start="39:21" pos:end="39:34">PAGE_WRITE_ORG</name><operator pos:start="39:35" pos:end="39:35">)</operator> <operator pos:start="39:37" pos:end="39:38">&amp;&amp;</operator> <operator pos:start="39:40" pos:end="39:40">!</operator><operator pos:start="39:41" pos:end="39:41">(</operator><name pos:start="39:42" pos:end="39:49"><name pos:start="39:42" pos:end="39:42">p</name><operator pos:start="39:43" pos:end="39:44">-&gt;</operator><name pos:start="39:45" pos:end="39:49">flags</name></name> <operator pos:start="39:51" pos:end="39:51">&amp;</operator> <name pos:start="39:53" pos:end="39:62">PAGE_WRITE</name><operator pos:start="39:63" pos:end="39:63">)</operator></expr>)</condition> <block pos:start="39:66" pos:end="89:5">{<block_content pos:start="41:9" pos:end="87:17">

        <expr_stmt pos:start="41:9" pos:end="41:51"><expr pos:start="41:9" pos:end="41:50"><name pos:start="41:9" pos:end="41:18">host_start</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <name pos:start="41:22" pos:end="41:28">address</name> <operator pos:start="41:30" pos:end="41:30">&amp;</operator> <name pos:start="41:32" pos:end="41:50">qemu_host_page_mask</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:52"><expr pos:start="43:9" pos:end="43:51"><name pos:start="43:9" pos:end="43:16">host_end</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <name pos:start="43:20" pos:end="43:29">host_start</name> <operator pos:start="43:31" pos:end="43:31">+</operator> <name pos:start="43:33" pos:end="43:51">qemu_host_page_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:17"><expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:12">prot</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</expr_stmt>

        <for pos:start="49:9" pos:end="77:9">for <control pos:start="49:13" pos:end="49:76">(<init pos:start="49:14" pos:end="49:32"><expr pos:start="49:14" pos:end="49:30"><name pos:start="49:14" pos:end="49:17">addr</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:30">host_start</name></expr> ;</init> <condition pos:start="49:34" pos:end="49:50"><expr pos:start="49:34" pos:end="49:48"><name pos:start="49:34" pos:end="49:37">addr</name> <operator pos:start="49:39" pos:end="49:39">&lt;</operator> <name pos:start="49:41" pos:end="49:48">host_end</name></expr> ;</condition> <incr pos:start="49:52" pos:end="49:75"><expr pos:start="49:52" pos:end="49:75"><name pos:start="49:52" pos:end="49:55">addr</name> <operator pos:start="49:57" pos:end="49:58">+=</operator> <name pos:start="49:60" pos:end="49:75">TARGET_PAGE_SIZE</name></expr></incr>)</control> <block pos:start="49:78" pos:end="77:9">{<block_content pos:start="51:13" pos:end="76:0">

            <expr_stmt pos:start="51:13" pos:end="51:52"><expr pos:start="51:13" pos:end="51:51"><name pos:start="51:13" pos:end="51:13">p</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:51"><name pos:start="51:17" pos:end="51:25">page_find</name><argument_list pos:start="51:26" pos:end="51:51">(<argument pos:start="51:27" pos:end="51:50"><expr pos:start="51:27" pos:end="51:50"><name pos:start="51:27" pos:end="51:30">addr</name> <operator pos:start="51:32" pos:end="51:33">&gt;&gt;</operator> <name pos:start="51:35" pos:end="51:50">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:35"><expr pos:start="53:13" pos:end="53:34"><name pos:start="53:13" pos:end="53:20"><name pos:start="53:13" pos:end="53:13">p</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:20">flags</name></name> <operator pos:start="53:22" pos:end="53:23">|=</operator> <name pos:start="53:25" pos:end="53:34">PAGE_WRITE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:29"><expr pos:start="55:13" pos:end="55:28"><name pos:start="55:13" pos:end="55:16">prot</name> <operator pos:start="55:18" pos:end="55:19">|=</operator> <name pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:21">p</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:28">flags</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="59:13" pos:end="61:52">/* and since the content will be modified, we must invalidate

               the corresponding translated code. */</comment>

            <if_stmt pos:start="63:13" pos:end="72:0"><if pos:start="63:13" pos:end="72:0">if <condition pos:start="63:16" pos:end="63:50">(<expr pos:start="63:17" pos:end="63:49"><call pos:start="63:17" pos:end="63:49"><name pos:start="63:17" pos:end="63:39">tb_invalidate_phys_page</name><argument_list pos:start="63:40" pos:end="63:49">(<argument pos:start="63:41" pos:end="63:44"><expr pos:start="63:41" pos:end="63:44"><name pos:start="63:41" pos:end="63:44">addr</name></expr></argument>, <argument pos:start="63:47" pos:end="63:48"><expr pos:start="63:47" pos:end="63:48"><name pos:start="63:47" pos:end="63:48">pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:52" pos:end="72:0">{<block_content pos:start="65:17" pos:end="67:25">

                <expr_stmt pos:start="65:17" pos:end="65:30"><expr pos:start="65:17" pos:end="65:29"><call pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:27">mmap_unlock</name><argument_list pos:start="65:28" pos:end="65:29">()</argument_list></call></expr>;</expr_stmt>

                <return pos:start="67:17" pos:end="67:25">return <expr pos:start="67:24" pos:end="67:24"><literal type="number" pos:start="67:24" pos:end="67:24">2</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="71:1" pos:end="71:21">#<cpp:directive pos:start="71:2" pos:end="71:6">ifdef</cpp:directive> <name pos:start="71:8" pos:end="71:21">DEBUG_TB_CHECK</name></cpp:ifdef>

            <expr_stmt pos:start="73:13" pos:end="76:0"><expr pos:start="73:13" pos:end="73:37"><call pos:start="73:13" pos:end="73:37"><name pos:start="73:13" pos:end="73:31">tb_invalidate_check</name><argument_list pos:start="73:32" pos:end="73:37">(<argument pos:start="73:33" pos:end="73:36"><expr pos:start="73:33" pos:end="73:36"><name pos:start="73:33" pos:end="73:36">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></for>

        <expr_stmt pos:start="79:9" pos:end="81:35"><expr pos:start="79:9" pos:end="81:34"><call pos:start="79:9" pos:end="81:34"><name pos:start="79:9" pos:end="79:16">mprotect</name><argument_list pos:start="79:17" pos:end="81:34">(<argument pos:start="79:18" pos:end="79:40"><expr pos:start="79:18" pos:end="79:40"><operator pos:start="79:18" pos:end="79:18">(</operator><name pos:start="79:19" pos:end="79:22">void</name> <operator pos:start="79:24" pos:end="79:24">*</operator><operator pos:start="79:25" pos:end="79:25">)</operator><call pos:start="79:26" pos:end="79:40"><name pos:start="79:26" pos:end="79:28">g2h</name><argument_list pos:start="79:29" pos:end="79:40">(<argument pos:start="79:30" pos:end="79:39"><expr pos:start="79:30" pos:end="79:39"><name pos:start="79:30" pos:end="79:39">host_start</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="79:43" pos:end="79:61"><expr pos:start="79:43" pos:end="79:61"><name pos:start="79:43" pos:end="79:61">qemu_host_page_size</name></expr></argument>,

                 <argument pos:start="81:18" pos:end="81:33"><expr pos:start="81:18" pos:end="81:33"><name pos:start="81:18" pos:end="81:21">prot</name> <operator pos:start="81:23" pos:end="81:23">&amp;</operator> <name pos:start="81:25" pos:end="81:33">PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:22"><expr pos:start="85:9" pos:end="85:21"><call pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:19">mmap_unlock</name><argument_list pos:start="85:20" pos:end="85:21">()</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:17">return <expr pos:start="87:16" pos:end="87:16"><literal type="number" pos:start="87:16" pos:end="87:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:18"><expr pos:start="91:5" pos:end="91:17"><call pos:start="91:5" pos:end="91:17"><name pos:start="91:5" pos:end="91:15">mmap_unlock</name><argument_list pos:start="91:16" pos:end="91:17">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
