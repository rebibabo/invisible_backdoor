<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5577.c" pos:tabs="8"><function pos:start="1:1" pos:end="539:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">ppc_heathrow_init</name><parameter_list pos:start="1:30" pos:end="1:56">(<parameter pos:start="1:31" pos:end="1:55"><decl pos:start="1:31" pos:end="1:55"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:49">QEMUMachineInitArgs</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="539:1">{<block_content pos:start="5:5" pos:end="537:52">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:40">= <expr pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:30">args</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:40">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:32">args</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:55">= <expr pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:38">args</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:53">= <expr pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:37">args</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:53">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:55">= <expr pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:38">args</name><operator pos:start="13:39" pos:end="13:40">-&gt;</operator><name pos:start="13:41" pos:end="13:55">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">boot_device</name> <init pos:start="15:29" pos:end="15:47">= <expr pos:start="15:31" pos:end="15:47"><name pos:start="15:31" pos:end="15:47"><name pos:start="15:31" pos:end="15:34">args</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:47">boot_device</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">sysmem</name> <init pos:start="17:26" pos:end="17:46">= <expr pos:start="17:28" pos:end="17:46"><call pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:44">get_system_memory</name><argument_list pos:start="17:45" pos:end="17:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">PowerPCCPU</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:19">cpu</name> <init pos:start="19:21" pos:end="19:26">= <expr pos:start="19:23" pos:end="19:26"><name pos:start="19:23" pos:end="19:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">CPUPPCState</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:20">env</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:35"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">qemu_irq</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:17">pic</name></decl>, <decl pos:start="25:20" pos:end="25:34"><type ref="prev" pos:start="25:5" pos:end="25:14"><modifier pos:start="25:20" pos:end="25:20">*</modifier><modifier pos:start="25:21" pos:end="25:21">*</modifier></type><name pos:start="25:22" pos:end="25:34">heathrow_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">linux_boot</name></decl>, <decl pos:start="27:21" pos:end="27:21"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:21" pos:end="27:21">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:47"><decl pos:start="29:5" pos:end="29:46"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:21">ram</name> <init pos:start="29:23" pos:end="29:46">= <expr pos:start="29:25" pos:end="29:46"><call pos:start="29:25" pos:end="29:46"><name pos:start="29:25" pos:end="29:29">g_new</name><argument_list pos:start="29:30" pos:end="29:46">(<argument pos:start="29:31" pos:end="29:42"><expr pos:start="29:31" pos:end="29:42"><name pos:start="29:31" pos:end="29:42">MemoryRegion</name></expr></argument>, <argument pos:start="29:45" pos:end="29:45"><expr pos:start="29:45" pos:end="29:45"><literal type="number" pos:start="29:45" pos:end="29:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:48"><decl pos:start="31:5" pos:end="31:47"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">MemoryRegion</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:22">bios</name> <init pos:start="31:24" pos:end="31:47">= <expr pos:start="31:26" pos:end="31:47"><call pos:start="31:26" pos:end="31:47"><name pos:start="31:26" pos:end="31:30">g_new</name><argument_list pos:start="31:31" pos:end="31:47">(<argument pos:start="31:32" pos:end="31:43"><expr pos:start="31:32" pos:end="31:43"><name pos:start="31:32" pos:end="31:43">MemoryRegion</name></expr></argument>, <argument pos:start="31:46" pos:end="31:46"><expr pos:start="31:46" pos:end="31:46"><literal type="number" pos:start="31:46" pos:end="31:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:47"><decl pos:start="33:5" pos:end="33:46"><type pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:16">MemoryRegion</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:21">isa</name> <init pos:start="33:23" pos:end="33:46">= <expr pos:start="33:25" pos:end="33:46"><call pos:start="33:25" pos:end="33:46"><name pos:start="33:25" pos:end="33:29">g_new</name><argument_list pos:start="33:30" pos:end="33:46">(<argument pos:start="33:31" pos:end="33:42"><expr pos:start="33:31" pos:end="33:42"><name pos:start="33:31" pos:end="33:42">MemoryRegion</name></expr></argument>, <argument pos:start="33:45" pos:end="33:45"><expr pos:start="33:45" pos:end="33:45"><literal type="number" pos:start="33:45" pos:end="33:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:56"><decl pos:start="35:5" pos:end="35:24"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:12">uint32_t</name></type> <name pos:start="35:14" pos:end="35:24">kernel_base</name></decl>, <decl pos:start="35:27" pos:end="35:37"><type ref="prev" pos:start="35:5" pos:end="35:12"/><name pos:start="35:27" pos:end="35:37">initrd_base</name></decl>, <decl pos:start="35:40" pos:end="35:55"><type ref="prev" pos:start="35:5" pos:end="35:12"/><name pos:start="35:40" pos:end="35:51">cmdline_base</name> <init pos:start="35:53" pos:end="35:55">= <expr pos:start="35:55" pos:end="35:55"><literal type="number" pos:start="35:55" pos:end="35:55">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:37"><decl pos:start="37:5" pos:end="37:23"><type pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:11">int32_t</name></type> <name pos:start="37:13" pos:end="37:23">kernel_size</name></decl>, <decl pos:start="37:26" pos:end="37:36"><type ref="prev" pos:start="37:5" pos:end="37:11"/><name pos:start="37:26" pos:end="37:36">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:20"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:10">PCIBus</name> <modifier pos:start="39:12" pos:end="39:12">*</modifier></type><name pos:start="39:13" pos:end="39:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:21"><decl pos:start="41:5" pos:end="41:20"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:13">PCIDevice</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:20">macio</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:29"><decl pos:start="43:5" pos:end="43:28"><type pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:17">MACIOIDEState</name> <modifier pos:start="43:19" pos:end="43:19">*</modifier></type><name pos:start="43:20" pos:end="43:28">macio_ide</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:21"><decl pos:start="45:5" pos:end="45:20"><type pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:15">DeviceState</name> <modifier pos:start="45:17" pos:end="45:17">*</modifier></type><name pos:start="45:18" pos:end="45:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:22"><decl pos:start="47:5" pos:end="47:21"><type pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:12">BusState</name> <modifier pos:start="47:14" pos:end="47:14">*</modifier></type><name pos:start="47:15" pos:end="47:21">adb_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:18"><decl pos:start="49:5" pos:end="49:17"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:17">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:26"><decl pos:start="51:5" pos:end="51:25"><type pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:16">MemoryRegion</name> <modifier pos:start="51:18" pos:end="51:18">*</modifier></type><name pos:start="51:19" pos:end="51:25">pic_mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:63"><decl pos:start="53:5" pos:end="53:26"><type pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:16">MemoryRegion</name> <modifier pos:start="53:18" pos:end="53:18">*</modifier></type><name pos:start="53:19" pos:end="53:26">escc_mem</name></decl>, <decl pos:start="53:29" pos:end="53:62"><type ref="prev" pos:start="53:5" pos:end="53:18"><modifier pos:start="53:29" pos:end="53:29">*</modifier></type><name pos:start="53:30" pos:end="53:37">escc_bar</name> <init pos:start="53:39" pos:end="53:62">= <expr pos:start="53:41" pos:end="53:62"><call pos:start="53:41" pos:end="53:62"><name pos:start="53:41" pos:end="53:45">g_new</name><argument_list pos:start="53:46" pos:end="53:62">(<argument pos:start="53:47" pos:end="53:58"><expr pos:start="53:47" pos:end="53:58"><name pos:start="53:47" pos:end="53:58">MemoryRegion</name></expr></argument>, <argument pos:start="53:61" pos:end="53:61"><expr pos:start="53:61" pos:end="53:61"><literal type="number" pos:start="53:61" pos:end="53:61">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:29"><decl pos:start="55:5" pos:end="55:28"><type pos:start="55:5" pos:end="55:12"><name pos:start="55:5" pos:end="55:12">uint16_t</name></type> <name pos:start="55:14" pos:end="55:28">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:46"><decl pos:start="57:5" pos:end="57:45"><type pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:13">DriveInfo</name> <modifier pos:start="57:15" pos:end="57:15">*</modifier></type><name pos:start="57:16" pos:end="57:45"><name pos:start="57:16" pos:end="57:17">hd</name><index pos:start="57:18" pos:end="57:45">[<expr pos:start="57:19" pos:end="57:44"><name pos:start="57:19" pos:end="57:29">MAX_IDE_BUS</name> <operator pos:start="57:31" pos:end="57:31">*</operator> <name pos:start="57:33" pos:end="57:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:17"><decl pos:start="59:5" pos:end="59:16"><type pos:start="59:5" pos:end="59:10"><name pos:start="59:5" pos:end="59:8">void</name> <modifier pos:start="59:10" pos:end="59:10">*</modifier></type><name pos:start="59:11" pos:end="59:16">fw_cfg</name></decl>;</decl_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:14">linux_boot</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <operator pos:start="63:18" pos:end="63:18">(</operator><name pos:start="63:19" pos:end="63:33">kernel_filename</name> <operator pos:start="63:35" pos:end="63:36">!=</operator> <name pos:start="63:38" pos:end="63:41">NULL</name><operator pos:start="63:42" pos:end="63:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:19">/* init CPUs */</comment>

    <if_stmt pos:start="69:5" pos:end="71:25"><if pos:start="69:5" pos:end="71:25">if <condition pos:start="69:8" pos:end="69:26">(<expr pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:17">cpu_model</name> <operator pos:start="69:19" pos:end="69:20">==</operator> <name pos:start="69:22" pos:end="69:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:25"><block_content pos:start="71:9" pos:end="71:25">

        <expr_stmt pos:start="71:9" pos:end="71:25"><expr pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:17">cpu_model</name> <operator pos:start="71:19" pos:end="71:19">=</operator> <literal type="string" pos:start="71:21" pos:end="71:24">"G3"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="73:5" pos:end="95:5">for <control pos:start="73:9" pos:end="73:34">(<init pos:start="73:10" pos:end="73:15"><expr pos:start="73:10" pos:end="73:14"><name pos:start="73:10" pos:end="73:10">i</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>;</init> <condition pos:start="73:17" pos:end="73:29"><expr pos:start="73:17" pos:end="73:28"><name pos:start="73:17" pos:end="73:17">i</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <name pos:start="73:21" pos:end="73:28">smp_cpus</name></expr>;</condition> <incr pos:start="73:31" pos:end="73:33"><expr pos:start="73:31" pos:end="73:33"><name pos:start="73:31" pos:end="73:31">i</name><operator pos:start="73:32" pos:end="73:33">++</operator></expr></incr>)</control> <block pos:start="73:36" pos:end="95:5">{<block_content pos:start="75:9" pos:end="93:53">

        <expr_stmt pos:start="75:9" pos:end="75:38"><expr pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:11">cpu</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:37"><name pos:start="75:15" pos:end="75:26">cpu_ppc_init</name><argument_list pos:start="75:27" pos:end="75:37">(<argument pos:start="75:28" pos:end="75:36"><expr pos:start="75:28" pos:end="75:36"><name pos:start="75:28" pos:end="75:36">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:24">(<expr pos:start="77:13" pos:end="77:23"><name pos:start="77:13" pos:end="77:15">cpu</name> <operator pos:start="77:17" pos:end="77:18">==</operator> <name pos:start="77:20" pos:end="77:23">NULL</name></expr>)</condition> <block pos:start="77:26" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:20">

            <expr_stmt pos:start="79:13" pos:end="79:71"><expr pos:start="79:13" pos:end="79:70"><call pos:start="79:13" pos:end="79:70"><name pos:start="79:13" pos:end="79:19">fprintf</name><argument_list pos:start="79:20" pos:end="79:70">(<argument pos:start="79:21" pos:end="79:26"><expr pos:start="79:21" pos:end="79:26"><name pos:start="79:21" pos:end="79:26">stderr</name></expr></argument>, <argument pos:start="79:29" pos:end="79:69"><expr pos:start="79:29" pos:end="79:69"><literal type="string" pos:start="79:29" pos:end="79:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:20"><expr pos:start="81:13" pos:end="81:19"><call pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:16">exit</name><argument_list pos:start="81:17" pos:end="81:19">(<argument pos:start="81:18" pos:end="81:18"><expr pos:start="81:18" pos:end="81:18"><literal type="number" pos:start="81:18" pos:end="81:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:24"><expr pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:11">env</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <operator pos:start="85:15" pos:end="85:15">&amp;</operator><name pos:start="85:16" pos:end="85:23"><name pos:start="85:16" pos:end="85:18">cpu</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:23">env</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="89:9" pos:end="89:49">/* Set time-base frequency to 16.6 Mhz */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:38"><expr pos:start="91:9" pos:end="91:37"><call pos:start="91:9" pos:end="91:37"><name pos:start="91:9" pos:end="91:23">cpu_ppc_tb_init</name><argument_list pos:start="91:24" pos:end="91:37">(<argument pos:start="91:25" pos:end="91:27"><expr pos:start="91:25" pos:end="91:27"><name pos:start="91:25" pos:end="91:27">env</name></expr></argument>,  <argument pos:start="91:31" pos:end="91:36"><expr pos:start="91:31" pos:end="91:36"><name pos:start="91:31" pos:end="91:36">TBFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:53"><expr pos:start="93:9" pos:end="93:52"><call pos:start="93:9" pos:end="93:52"><name pos:start="93:9" pos:end="93:27">qemu_register_reset</name><argument_list pos:start="93:28" pos:end="93:52">(<argument pos:start="93:29" pos:end="93:46"><expr pos:start="93:29" pos:end="93:46"><name pos:start="93:29" pos:end="93:46">ppc_heathrow_reset</name></expr></argument>, <argument pos:start="93:49" pos:end="93:51"><expr pos:start="93:49" pos:end="93:51"><name pos:start="93:49" pos:end="93:51">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="99:5" pos:end="99:22">/* allocate RAM */</comment>

    <if_stmt pos:start="101:5" pos:end="111:5"><if pos:start="101:5" pos:end="111:5">if <condition pos:start="101:8" pos:end="101:32">(<expr pos:start="101:9" pos:end="101:31"><name pos:start="101:9" pos:end="101:16">ram_size</name> <operator pos:start="101:18" pos:end="101:18">&gt;</operator> <operator pos:start="101:20" pos:end="101:20">(</operator><literal type="number" pos:start="101:21" pos:end="101:24">2047</literal> <operator pos:start="101:26" pos:end="101:27">&lt;&lt;</operator> <literal type="number" pos:start="101:29" pos:end="101:30">20</literal><operator pos:start="101:31" pos:end="101:31">)</operator></expr>)</condition> <block pos:start="101:34" pos:end="111:5">{<block_content pos:start="103:9" pos:end="109:16">

        <expr_stmt pos:start="103:9" pos:end="107:54"><expr pos:start="103:9" pos:end="107:53"><call pos:start="103:9" pos:end="107:53"><name pos:start="103:9" pos:end="103:15">fprintf</name><argument_list pos:start="103:16" pos:end="107:53">(<argument pos:start="103:17" pos:end="103:22"><expr pos:start="103:17" pos:end="103:22"><name pos:start="103:17" pos:end="103:22">stderr</name></expr></argument>,

                <argument pos:start="105:17" pos:end="105:82"><expr pos:start="105:17" pos:end="105:82"><literal type="string" pos:start="105:17" pos:end="105:82">"qemu: Too much memory for this machine: %d MB, maximum 2047 MB\n"</literal></expr></argument>,

                <argument pos:start="107:17" pos:end="107:52"><expr pos:start="107:17" pos:end="107:52"><operator pos:start="107:17" pos:end="107:17">(</operator><operator pos:start="107:18" pos:end="107:18">(</operator><name pos:start="107:19" pos:end="107:26">unsigned</name> <name pos:start="107:28" pos:end="107:30">int</name><operator pos:start="107:31" pos:end="107:31">)</operator><name pos:start="107:32" pos:end="107:39">ram_size</name> <operator pos:start="107:41" pos:end="107:41">/</operator> <operator pos:start="107:43" pos:end="107:43">(</operator><literal type="number" pos:start="107:44" pos:end="107:44">1</literal> <operator pos:start="107:46" pos:end="107:47">&lt;&lt;</operator> <literal type="number" pos:start="107:49" pos:end="107:50">20</literal><operator pos:start="107:51" pos:end="107:51">)</operator><operator pos:start="107:52" pos:end="107:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:16"><expr pos:start="109:9" pos:end="109:15"><call pos:start="109:9" pos:end="109:15"><name pos:start="109:9" pos:end="109:12">exit</name><argument_list pos:start="109:13" pos:end="109:15">(<argument pos:start="109:14" pos:end="109:14"><expr pos:start="109:14" pos:end="109:14"><literal type="number" pos:start="109:14" pos:end="109:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:68"><expr pos:start="115:5" pos:end="115:67"><call pos:start="115:5" pos:end="115:67"><name pos:start="115:5" pos:end="115:26">memory_region_init_ram</name><argument_list pos:start="115:27" pos:end="115:67">(<argument pos:start="115:28" pos:end="115:30"><expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:30">ram</name></expr></argument>, <argument pos:start="115:33" pos:end="115:36"><expr pos:start="115:33" pos:end="115:36"><name pos:start="115:33" pos:end="115:36">NULL</name></expr></argument>, <argument pos:start="115:39" pos:end="115:56"><expr pos:start="115:39" pos:end="115:56"><literal type="string" pos:start="115:39" pos:end="115:56">"ppc_heathrow.ram"</literal></expr></argument>, <argument pos:start="115:59" pos:end="115:66"><expr pos:start="115:59" pos:end="115:66"><name pos:start="115:59" pos:end="115:66">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:37"><expr pos:start="117:5" pos:end="117:36"><call pos:start="117:5" pos:end="117:36"><name pos:start="117:5" pos:end="117:31">vmstate_register_ram_global</name><argument_list pos:start="117:32" pos:end="117:36">(<argument pos:start="117:33" pos:end="117:35"><expr pos:start="117:33" pos:end="117:35"><name pos:start="117:33" pos:end="117:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:48"><expr pos:start="119:5" pos:end="119:47"><call pos:start="119:5" pos:end="119:47"><name pos:start="119:5" pos:end="119:31">memory_region_add_subregion</name><argument_list pos:start="119:32" pos:end="119:47">(<argument pos:start="119:33" pos:end="119:38"><expr pos:start="119:33" pos:end="119:38"><name pos:start="119:33" pos:end="119:38">sysmem</name></expr></argument>, <argument pos:start="119:41" pos:end="119:41"><expr pos:start="119:41" pos:end="119:41"><literal type="number" pos:start="119:41" pos:end="119:41">0</literal></expr></argument>, <argument pos:start="119:44" pos:end="119:46"><expr pos:start="119:44" pos:end="119:46"><name pos:start="119:44" pos:end="119:46">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:71"><expr pos:start="125:5" pos:end="125:70"><call pos:start="125:5" pos:end="125:70"><name pos:start="125:5" pos:end="125:26">memory_region_init_ram</name><argument_list pos:start="125:27" pos:end="125:70">(<argument pos:start="125:28" pos:end="125:31"><expr pos:start="125:28" pos:end="125:31"><name pos:start="125:28" pos:end="125:31">bios</name></expr></argument>, <argument pos:start="125:34" pos:end="125:37"><expr pos:start="125:34" pos:end="125:37"><name pos:start="125:34" pos:end="125:37">NULL</name></expr></argument>, <argument pos:start="125:40" pos:end="125:58"><expr pos:start="125:40" pos:end="125:58"><literal type="string" pos:start="125:40" pos:end="125:58">"ppc_heathrow.bios"</literal></expr></argument>, <argument pos:start="125:61" pos:end="125:69"><expr pos:start="125:61" pos:end="125:69"><name pos:start="125:61" pos:end="125:69">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:38"><expr pos:start="127:5" pos:end="127:37"><call pos:start="127:5" pos:end="127:37"><name pos:start="127:5" pos:end="127:31">vmstate_register_ram_global</name><argument_list pos:start="127:32" pos:end="127:37">(<argument pos:start="127:33" pos:end="127:36"><expr pos:start="127:33" pos:end="127:36"><name pos:start="127:33" pos:end="127:36">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="131:34"><if pos:start="129:5" pos:end="131:34">if <condition pos:start="129:8" pos:end="129:26">(<expr pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:17">bios_name</name> <operator pos:start="129:19" pos:end="129:20">==</operator> <name pos:start="129:22" pos:end="129:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="131:9" pos:end="131:34"><block_content pos:start="131:9" pos:end="131:34">

        <expr_stmt pos:start="131:9" pos:end="131:34"><expr pos:start="131:9" pos:end="131:33"><name pos:start="131:9" pos:end="131:17">bios_name</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <name pos:start="131:21" pos:end="131:33">PROM_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:62"><expr pos:start="133:5" pos:end="133:61"><name pos:start="133:5" pos:end="133:12">filename</name> <operator pos:start="133:14" pos:end="133:14">=</operator> <call pos:start="133:16" pos:end="133:61"><name pos:start="133:16" pos:end="133:29">qemu_find_file</name><argument_list pos:start="133:30" pos:end="133:61">(<argument pos:start="133:31" pos:end="133:49"><expr pos:start="133:31" pos:end="133:49"><name pos:start="133:31" pos:end="133:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="133:52" pos:end="133:60"><expr pos:start="133:52" pos:end="133:60"><name pos:start="133:52" pos:end="133:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:43"><expr pos:start="135:5" pos:end="135:42"><call pos:start="135:5" pos:end="135:42"><name pos:start="135:5" pos:end="135:30">memory_region_set_readonly</name><argument_list pos:start="135:31" pos:end="135:42">(<argument pos:start="135:32" pos:end="135:35"><expr pos:start="135:32" pos:end="135:35"><name pos:start="135:32" pos:end="135:35">bios</name></expr></argument>, <argument pos:start="135:38" pos:end="135:41"><expr pos:start="135:38" pos:end="135:41"><name pos:start="135:38" pos:end="135:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:57"><expr pos:start="137:5" pos:end="137:56"><call pos:start="137:5" pos:end="137:56"><name pos:start="137:5" pos:end="137:31">memory_region_add_subregion</name><argument_list pos:start="137:32" pos:end="137:56">(<argument pos:start="137:33" pos:end="137:38"><expr pos:start="137:33" pos:end="137:38"><name pos:start="137:33" pos:end="137:38">sysmem</name></expr></argument>, <argument pos:start="137:41" pos:end="137:49"><expr pos:start="137:41" pos:end="137:49"><name pos:start="137:41" pos:end="137:49">PROM_ADDR</name></expr></argument>, <argument pos:start="137:52" pos:end="137:55"><expr pos:start="137:52" pos:end="137:55"><name pos:start="137:52" pos:end="137:55">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:29">/* Load OpenBIOS (ELF) */</comment>

    <if_stmt pos:start="143:5" pos:end="155:5"><if pos:start="143:5" pos:end="151:5">if <condition pos:start="143:8" pos:end="143:17">(<expr pos:start="143:9" pos:end="143:16"><name pos:start="143:9" pos:end="143:16">filename</name></expr>)</condition> <block pos:start="143:19" pos:end="151:5">{<block_content pos:start="145:9" pos:end="149:25">

        <expr_stmt pos:start="145:9" pos:end="147:48"><expr pos:start="145:9" pos:end="147:47"><name pos:start="145:9" pos:end="145:17">bios_size</name> <operator pos:start="145:19" pos:end="145:19">=</operator> <call pos:start="145:21" pos:end="147:47"><name pos:start="145:21" pos:end="145:28">load_elf</name><argument_list pos:start="145:29" pos:end="147:47">(<argument pos:start="145:30" pos:end="145:37"><expr pos:start="145:30" pos:end="145:37"><name pos:start="145:30" pos:end="145:37">filename</name></expr></argument>, <argument pos:start="145:40" pos:end="145:40"><expr pos:start="145:40" pos:end="145:40"><literal type="number" pos:start="145:40" pos:end="145:40">0</literal></expr></argument>, <argument pos:start="145:43" pos:end="145:46"><expr pos:start="145:43" pos:end="145:46"><name pos:start="145:43" pos:end="145:46">NULL</name></expr></argument>, <argument pos:start="145:49" pos:end="145:52"><expr pos:start="145:49" pos:end="145:52"><name pos:start="145:49" pos:end="145:52">NULL</name></expr></argument>, <argument pos:start="145:55" pos:end="145:58"><expr pos:start="145:55" pos:end="145:58"><name pos:start="145:55" pos:end="145:58">NULL</name></expr></argument>, <argument pos:start="145:61" pos:end="145:64"><expr pos:start="145:61" pos:end="145:64"><name pos:start="145:61" pos:end="145:64">NULL</name></expr></argument>,

                             <argument pos:start="147:30" pos:end="147:30"><expr pos:start="147:30" pos:end="147:30"><literal type="number" pos:start="147:30" pos:end="147:30">1</literal></expr></argument>, <argument pos:start="147:33" pos:end="147:43"><expr pos:start="147:33" pos:end="147:43"><name pos:start="147:33" pos:end="147:43">ELF_MACHINE</name></expr></argument>, <argument pos:start="147:46" pos:end="147:46"><expr pos:start="147:46" pos:end="147:46"><literal type="number" pos:start="147:46" pos:end="147:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:25"><expr pos:start="149:9" pos:end="149:24"><call pos:start="149:9" pos:end="149:24"><name pos:start="149:9" pos:end="149:14">g_free</name><argument_list pos:start="149:15" pos:end="149:24">(<argument pos:start="149:16" pos:end="149:23"><expr pos:start="149:16" pos:end="149:23"><name pos:start="149:16" pos:end="149:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="151:7" pos:end="155:5">else <block pos:start="151:12" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:23">

        <expr_stmt pos:start="153:9" pos:end="153:23"><expr pos:start="153:9" pos:end="153:22"><name pos:start="153:9" pos:end="153:17">bios_size</name> <operator pos:start="153:19" pos:end="153:19">=</operator> <operator pos:start="153:21" pos:end="153:21">-</operator><literal type="number" pos:start="153:22" pos:end="153:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="157:5" pos:end="163:5"><if pos:start="157:5" pos:end="163:5">if <condition pos:start="157:8" pos:end="157:47">(<expr pos:start="157:9" pos:end="157:46"><name pos:start="157:9" pos:end="157:36"><name pos:start="157:9" pos:end="157:17">bios_size</name> <argument_list type="generic" pos:start="157:19" pos:end="157:36">&lt; <argument pos:start="157:21" pos:end="157:34"><expr pos:start="157:21" pos:end="157:34"><literal type="number" pos:start="157:21" pos:end="157:21">0</literal> <operator pos:start="157:23" pos:end="157:24">||</operator> <name pos:start="157:26" pos:end="157:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="157:38" pos:end="157:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="157:49" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:16">

        <expr_stmt pos:start="159:9" pos:end="159:72"><expr pos:start="159:9" pos:end="159:71"><call pos:start="159:9" pos:end="159:71"><name pos:start="159:9" pos:end="159:16">hw_error</name><argument_list pos:start="159:17" pos:end="159:71">(<argument pos:start="159:18" pos:end="159:59"><expr pos:start="159:18" pos:end="159:59"><literal type="string" pos:start="159:18" pos:end="159:59">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>, <argument pos:start="159:62" pos:end="159:70"><expr pos:start="159:62" pos:end="159:70"><name pos:start="159:62" pos:end="159:70">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:16"><expr pos:start="161:9" pos:end="161:15"><call pos:start="161:9" pos:end="161:15"><name pos:start="161:9" pos:end="161:12">exit</name><argument_list pos:start="161:13" pos:end="161:15">(<argument pos:start="161:14" pos:end="161:14"><expr pos:start="161:14" pos:end="161:14"><literal type="number" pos:start="161:14" pos:end="161:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="167:5" pos:end="305:5"><if pos:start="167:5" pos:end="251:5">if <condition pos:start="167:8" pos:end="167:19">(<expr pos:start="167:9" pos:end="167:18"><name pos:start="167:9" pos:end="167:18">linux_boot</name></expr>)</condition> <block pos:start="167:21" pos:end="251:5">{<block_content pos:start="169:9" pos:end="249:30">

        <decl_stmt pos:start="169:9" pos:end="169:29"><decl pos:start="169:9" pos:end="169:28"><type pos:start="169:9" pos:end="169:16"><name pos:start="169:9" pos:end="169:16">uint64_t</name></type> <name pos:start="169:18" pos:end="169:24">lowaddr</name> <init pos:start="169:26" pos:end="169:28">= <expr pos:start="169:28" pos:end="169:28"><literal type="number" pos:start="169:28" pos:end="169:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="171:9" pos:end="176:0"><decl pos:start="171:9" pos:end="171:24"><type pos:start="171:9" pos:end="171:11"><name pos:start="171:9" pos:end="171:11">int</name></type> <name pos:start="171:13" pos:end="171:24">bswap_needed</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="175:1" pos:end="175:19">#<cpp:directive pos:start="175:2" pos:end="175:6">ifdef</cpp:directive> <name pos:start="175:8" pos:end="175:19">BSWAP_NEEDED</name></cpp:ifdef>

        <expr_stmt pos:start="177:9" pos:end="180:0"><expr pos:start="177:9" pos:end="177:24"><name pos:start="177:9" pos:end="177:20">bswap_needed</name> <operator pos:start="177:22" pos:end="177:22">=</operator> <literal type="number" pos:start="177:24" pos:end="177:24">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="179:1" pos:end="179:5">#<cpp:directive pos:start="179:2" pos:end="179:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="181:9" pos:end="184:0"><expr pos:start="181:9" pos:end="181:24"><name pos:start="181:9" pos:end="181:20">bswap_needed</name> <operator pos:start="181:22" pos:end="181:22">=</operator> <literal type="number" pos:start="181:24" pos:end="181:24">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="183:1" pos:end="183:6">#<cpp:directive pos:start="183:2" pos:end="183:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="185:9" pos:end="185:39"><expr pos:start="185:9" pos:end="185:38"><name pos:start="185:9" pos:end="185:19">kernel_base</name> <operator pos:start="185:21" pos:end="185:21">=</operator> <name pos:start="185:23" pos:end="185:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="189:72"><expr pos:start="187:9" pos:end="189:71"><name pos:start="187:9" pos:end="187:19">kernel_size</name> <operator pos:start="187:21" pos:end="187:21">=</operator> <call pos:start="187:23" pos:end="189:71"><name pos:start="187:23" pos:end="187:30">load_elf</name><argument_list pos:start="187:31" pos:end="189:71">(<argument pos:start="187:32" pos:end="187:46"><expr pos:start="187:32" pos:end="187:46"><name pos:start="187:32" pos:end="187:46">kernel_filename</name></expr></argument>, <argument pos:start="187:49" pos:end="187:72"><expr pos:start="187:49" pos:end="187:72"><name pos:start="187:49" pos:end="187:72">translate_kernel_address</name></expr></argument>, <argument pos:start="187:75" pos:end="187:78"><expr pos:start="187:75" pos:end="187:78"><name pos:start="187:75" pos:end="187:78">NULL</name></expr></argument>,

                               <argument pos:start="189:32" pos:end="189:35"><expr pos:start="189:32" pos:end="189:35"><name pos:start="189:32" pos:end="189:35">NULL</name></expr></argument>, <argument pos:start="189:38" pos:end="189:45"><expr pos:start="189:38" pos:end="189:45"><operator pos:start="189:38" pos:end="189:38">&amp;</operator><name pos:start="189:39" pos:end="189:45">lowaddr</name></expr></argument>, <argument pos:start="189:48" pos:end="189:51"><expr pos:start="189:48" pos:end="189:51"><name pos:start="189:48" pos:end="189:51">NULL</name></expr></argument>, <argument pos:start="189:54" pos:end="189:54"><expr pos:start="189:54" pos:end="189:54"><literal type="number" pos:start="189:54" pos:end="189:54">1</literal></expr></argument>, <argument pos:start="189:57" pos:end="189:67"><expr pos:start="189:57" pos:end="189:67"><name pos:start="189:57" pos:end="189:67">ELF_MACHINE</name></expr></argument>, <argument pos:start="189:70" pos:end="189:70"><expr pos:start="189:70" pos:end="189:70"><literal type="number" pos:start="189:70" pos:end="189:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="197:54"><if pos:start="191:9" pos:end="197:54">if <condition pos:start="191:12" pos:end="191:28">(<expr pos:start="191:13" pos:end="191:27"><name pos:start="191:13" pos:end="191:23">kernel_size</name> <operator pos:start="191:25" pos:end="191:25">&lt;</operator> <literal type="number" pos:start="191:27" pos:end="191:27">0</literal></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="197:54"><block_content pos:start="193:13" pos:end="197:54">

            <expr_stmt pos:start="193:13" pos:end="197:54"><expr pos:start="193:13" pos:end="197:53"><name pos:start="193:13" pos:end="193:23">kernel_size</name> <operator pos:start="193:25" pos:end="193:25">=</operator> <call pos:start="193:27" pos:end="197:53"><name pos:start="193:27" pos:end="193:35">load_aout</name><argument_list pos:start="193:36" pos:end="197:53">(<argument pos:start="193:37" pos:end="193:51"><expr pos:start="193:37" pos:end="193:51"><name pos:start="193:37" pos:end="193:51">kernel_filename</name></expr></argument>, <argument pos:start="193:54" pos:end="193:64"><expr pos:start="193:54" pos:end="193:64"><name pos:start="193:54" pos:end="193:64">kernel_base</name></expr></argument>,

                                    <argument pos:start="195:37" pos:end="195:58"><expr pos:start="195:37" pos:end="195:58"><name pos:start="195:37" pos:end="195:44">ram_size</name> <operator pos:start="195:46" pos:end="195:46">-</operator> <name pos:start="195:48" pos:end="195:58">kernel_base</name></expr></argument>, <argument pos:start="195:61" pos:end="195:72"><expr pos:start="195:61" pos:end="195:72"><name pos:start="195:61" pos:end="195:72">bswap_needed</name></expr></argument>,

                                    <argument pos:start="197:37" pos:end="197:52"><expr pos:start="197:37" pos:end="197:52"><name pos:start="197:37" pos:end="197:52">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="199:9" pos:end="205:70"><if pos:start="199:9" pos:end="205:70">if <condition pos:start="199:12" pos:end="199:28">(<expr pos:start="199:13" pos:end="199:27"><name pos:start="199:13" pos:end="199:23">kernel_size</name> <operator pos:start="199:25" pos:end="199:25">&lt;</operator> <literal type="number" pos:start="199:27" pos:end="199:27">0</literal></expr>)</condition><block type="pseudo" pos:start="201:13" pos:end="205:70"><block_content pos:start="201:13" pos:end="205:70">

            <expr_stmt pos:start="201:13" pos:end="205:70"><expr pos:start="201:13" pos:end="205:69"><name pos:start="201:13" pos:end="201:23">kernel_size</name> <operator pos:start="201:25" pos:end="201:25">=</operator> <call pos:start="201:27" pos:end="205:69"><name pos:start="201:27" pos:end="201:45">load_image_targphys</name><argument_list pos:start="201:46" pos:end="205:69">(<argument pos:start="201:47" pos:end="201:61"><expr pos:start="201:47" pos:end="201:61"><name pos:start="201:47" pos:end="201:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="203:47" pos:end="203:57"><expr pos:start="203:47" pos:end="203:57"><name pos:start="203:47" pos:end="203:57">kernel_base</name></expr></argument>,

                                              <argument pos:start="205:47" pos:end="205:68"><expr pos:start="205:47" pos:end="205:68"><name pos:start="205:47" pos:end="205:54">ram_size</name> <operator pos:start="205:56" pos:end="205:56">-</operator> <name pos:start="205:58" pos:end="205:68">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="207:9" pos:end="215:9"><if pos:start="207:9" pos:end="215:9">if <condition pos:start="207:12" pos:end="207:28">(<expr pos:start="207:13" pos:end="207:27"><name pos:start="207:13" pos:end="207:23">kernel_size</name> <operator pos:start="207:25" pos:end="207:25">&lt;</operator> <literal type="number" pos:start="207:27" pos:end="207:27">0</literal></expr>)</condition> <block pos:start="207:30" pos:end="215:9">{<block_content pos:start="209:13" pos:end="213:20">

            <expr_stmt pos:start="209:13" pos:end="211:39"><expr pos:start="209:13" pos:end="211:38"><call pos:start="209:13" pos:end="211:38"><name pos:start="209:13" pos:end="209:20">hw_error</name><argument_list pos:start="209:21" pos:end="211:38">(<argument pos:start="209:22" pos:end="209:57"><expr pos:start="209:22" pos:end="209:57"><literal type="string" pos:start="209:22" pos:end="209:57">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                      <argument pos:start="211:23" pos:end="211:37"><expr pos:start="211:23" pos:end="211:37"><name pos:start="211:23" pos:end="211:37">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:20"><expr pos:start="213:13" pos:end="213:19"><call pos:start="213:13" pos:end="213:19"><name pos:start="213:13" pos:end="213:16">exit</name><argument_list pos:start="213:17" pos:end="213:19">(<argument pos:start="213:18" pos:end="213:18"><expr pos:start="213:18" pos:end="213:18"><literal type="number" pos:start="213:18" pos:end="213:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="217:9" pos:end="217:25">/* load initrd */</comment>

        <if_stmt pos:start="219:9" pos:end="247:9"><if pos:start="219:9" pos:end="239:9">if <condition pos:start="219:12" pos:end="219:28">(<expr pos:start="219:13" pos:end="219:27"><name pos:start="219:13" pos:end="219:27">initrd_filename</name></expr>)</condition> <block pos:start="219:30" pos:end="239:9">{<block_content pos:start="221:13" pos:end="237:65">

            <expr_stmt pos:start="221:13" pos:end="221:77"><expr pos:start="221:13" pos:end="221:76"><name pos:start="221:13" pos:end="221:23">initrd_base</name> <operator pos:start="221:25" pos:end="221:25">=</operator> <call pos:start="221:27" pos:end="221:76"><name pos:start="221:27" pos:end="221:36">round_page</name><argument_list pos:start="221:37" pos:end="221:76">(<argument pos:start="221:38" pos:end="221:75"><expr pos:start="221:38" pos:end="221:75"><name pos:start="221:38" pos:end="221:48">kernel_base</name> <operator pos:start="221:50" pos:end="221:50">+</operator> <name pos:start="221:52" pos:end="221:62">kernel_size</name> <operator pos:start="221:64" pos:end="221:64">+</operator> <name pos:start="221:66" pos:end="221:75">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="225:70"><expr pos:start="223:13" pos:end="225:69"><name pos:start="223:13" pos:end="223:23">initrd_size</name> <operator pos:start="223:25" pos:end="223:25">=</operator> <call pos:start="223:27" pos:end="225:69"><name pos:start="223:27" pos:end="223:45">load_image_targphys</name><argument_list pos:start="223:46" pos:end="225:69">(<argument pos:start="223:47" pos:end="223:61"><expr pos:start="223:47" pos:end="223:61"><name pos:start="223:47" pos:end="223:61">initrd_filename</name></expr></argument>, <argument pos:start="223:64" pos:end="223:74"><expr pos:start="223:64" pos:end="223:74"><name pos:start="223:64" pos:end="223:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="225:47" pos:end="225:68"><expr pos:start="225:47" pos:end="225:68"><name pos:start="225:47" pos:end="225:54">ram_size</name> <operator pos:start="225:56" pos:end="225:56">-</operator> <name pos:start="225:58" pos:end="225:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="227:13" pos:end="235:13"><if pos:start="227:13" pos:end="235:13">if <condition pos:start="227:16" pos:end="227:32">(<expr pos:start="227:17" pos:end="227:31"><name pos:start="227:17" pos:end="227:27">initrd_size</name> <operator pos:start="227:29" pos:end="227:29">&lt;</operator> <literal type="number" pos:start="227:31" pos:end="227:31">0</literal></expr>)</condition> <block pos:start="227:34" pos:end="235:13">{<block_content pos:start="229:17" pos:end="233:24">

                <expr_stmt pos:start="229:17" pos:end="231:42"><expr pos:start="229:17" pos:end="231:41"><call pos:start="229:17" pos:end="231:41"><name pos:start="229:17" pos:end="229:24">hw_error</name><argument_list pos:start="229:25" pos:end="231:41">(<argument pos:start="229:26" pos:end="229:71"><expr pos:start="229:26" pos:end="229:71"><literal type="string" pos:start="229:26" pos:end="229:71">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                         <argument pos:start="231:26" pos:end="231:40"><expr pos:start="231:26" pos:end="231:40"><name pos:start="231:26" pos:end="231:40">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:24"><expr pos:start="233:17" pos:end="233:23"><call pos:start="233:17" pos:end="233:23"><name pos:start="233:17" pos:end="233:20">exit</name><argument_list pos:start="233:21" pos:end="233:23">(<argument pos:start="233:22" pos:end="233:22"><expr pos:start="233:22" pos:end="233:22"><literal type="number" pos:start="233:22" pos:end="233:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:65"><expr pos:start="237:13" pos:end="237:64"><name pos:start="237:13" pos:end="237:24">cmdline_base</name> <operator pos:start="237:26" pos:end="237:26">=</operator> <call pos:start="237:28" pos:end="237:64"><name pos:start="237:28" pos:end="237:37">round_page</name><argument_list pos:start="237:38" pos:end="237:64">(<argument pos:start="237:39" pos:end="237:63"><expr pos:start="237:39" pos:end="237:63"><name pos:start="237:39" pos:end="237:49">initrd_base</name> <operator pos:start="237:51" pos:end="237:51">+</operator> <name pos:start="237:53" pos:end="237:63">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="239:11" pos:end="247:9">else <block pos:start="239:16" pos:end="247:9">{<block_content pos:start="241:13" pos:end="245:78">

            <expr_stmt pos:start="241:13" pos:end="241:28"><expr pos:start="241:13" pos:end="241:27"><name pos:start="241:13" pos:end="241:23">initrd_base</name> <operator pos:start="241:25" pos:end="241:25">=</operator> <literal type="number" pos:start="241:27" pos:end="241:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:28"><expr pos:start="243:13" pos:end="243:27"><name pos:start="243:13" pos:end="243:23">initrd_size</name> <operator pos:start="243:25" pos:end="243:25">=</operator> <literal type="number" pos:start="243:27" pos:end="243:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:78"><expr pos:start="245:13" pos:end="245:77"><name pos:start="245:13" pos:end="245:24">cmdline_base</name> <operator pos:start="245:26" pos:end="245:26">=</operator> <call pos:start="245:28" pos:end="245:77"><name pos:start="245:28" pos:end="245:37">round_page</name><argument_list pos:start="245:38" pos:end="245:77">(<argument pos:start="245:39" pos:end="245:76"><expr pos:start="245:39" pos:end="245:76"><name pos:start="245:39" pos:end="245:49">kernel_base</name> <operator pos:start="245:51" pos:end="245:51">+</operator> <name pos:start="245:53" pos:end="245:63">kernel_size</name> <operator pos:start="245:65" pos:end="245:65">+</operator> <name pos:start="245:67" pos:end="245:76">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:30"><expr pos:start="249:9" pos:end="249:29"><name pos:start="249:9" pos:end="249:23">ppc_boot_device</name> <operator pos:start="249:25" pos:end="249:25">=</operator> <literal type="char" pos:start="249:27" pos:end="249:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="251:7" pos:end="305:5">else <block pos:start="251:12" pos:end="305:5">{<block_content pos:start="253:9" pos:end="303:9">

        <expr_stmt pos:start="253:9" pos:end="253:24"><expr pos:start="253:9" pos:end="253:23"><name pos:start="253:9" pos:end="253:19">kernel_base</name> <operator pos:start="253:21" pos:end="253:21">=</operator> <literal type="number" pos:start="253:23" pos:end="253:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:24"><expr pos:start="255:9" pos:end="255:23"><name pos:start="255:9" pos:end="255:19">kernel_size</name> <operator pos:start="255:21" pos:end="255:21">=</operator> <literal type="number" pos:start="255:23" pos:end="255:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:24"><expr pos:start="257:9" pos:end="257:23"><name pos:start="257:9" pos:end="257:19">initrd_base</name> <operator pos:start="257:21" pos:end="257:21">=</operator> <literal type="number" pos:start="257:23" pos:end="257:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:24"><expr pos:start="259:9" pos:end="259:23"><name pos:start="259:9" pos:end="259:19">initrd_size</name> <operator pos:start="259:21" pos:end="259:21">=</operator> <literal type="number" pos:start="259:23" pos:end="259:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:31"><expr pos:start="261:9" pos:end="261:30"><name pos:start="261:9" pos:end="261:23">ppc_boot_device</name> <operator pos:start="261:25" pos:end="261:25">=</operator> <literal type="char" pos:start="261:27" pos:end="261:30">'\0'</literal></expr>;</expr_stmt>

        <for pos:start="263:9" pos:end="295:9">for <control pos:start="263:13" pos:end="263:48">(<init pos:start="263:14" pos:end="263:19"><expr pos:start="263:14" pos:end="263:18"><name pos:start="263:14" pos:end="263:14">i</name> <operator pos:start="263:16" pos:end="263:16">=</operator> <literal type="number" pos:start="263:18" pos:end="263:18">0</literal></expr>;</init> <condition pos:start="263:21" pos:end="263:43"><expr pos:start="263:21" pos:end="263:42"><name pos:start="263:21" pos:end="263:34"><name pos:start="263:21" pos:end="263:31">boot_device</name><index pos:start="263:32" pos:end="263:34">[<expr pos:start="263:33" pos:end="263:33"><name pos:start="263:33" pos:end="263:33">i</name></expr>]</index></name> <operator pos:start="263:36" pos:end="263:37">!=</operator> <literal type="char" pos:start="263:39" pos:end="263:42">'\0'</literal></expr>;</condition> <incr pos:start="263:45" pos:end="263:47"><expr pos:start="263:45" pos:end="263:47"><name pos:start="263:45" pos:end="263:45">i</name><operator pos:start="263:46" pos:end="263:47">++</operator></expr></incr>)</control> <block pos:start="263:50" pos:end="295:9">{<block_content pos:start="285:13" pos:end="294:0">

            <comment type="block" pos:start="265:13" pos:end="271:15">/* TOFIX: for now, the second IDE channel is not properly

             *        used by OHW. The Mac floppy disk are not emulated.

             *        For now, OHW cannot boot from the network.

             */</comment>

<cpp:if pos:start="273:1" pos:end="273:5">#<cpp:directive pos:start="273:2" pos:end="273:3">if</cpp:directive> <expr pos:start="273:5" pos:end="273:5"><literal type="number" pos:start="273:5" pos:end="273:5">0</literal></expr></cpp:if>

            if (boot_device[i] &gt;= 'a' &amp;&amp; boot_device[i] &lt;= 'f') {

                ppc_boot_device = boot_device[i];

                break;

            }

<cpp:else pos:start="283:1" pos:end="283:5">#<cpp:directive pos:start="283:2" pos:end="283:5">else</cpp:directive></cpp:else>

            <if_stmt pos:start="285:13" pos:end="294:0"><if pos:start="285:13" pos:end="294:0">if <condition pos:start="285:16" pos:end="285:63">(<expr pos:start="285:17" pos:end="285:62"><name pos:start="285:17" pos:end="285:30"><name pos:start="285:17" pos:end="285:27">boot_device</name><index pos:start="285:28" pos:end="285:30">[<expr pos:start="285:29" pos:end="285:29"><name pos:start="285:29" pos:end="285:29">i</name></expr>]</index></name> <operator pos:start="285:32" pos:end="285:33">&gt;=</operator> <literal type="char" pos:start="285:35" pos:end="285:37">'c'</literal> <operator pos:start="285:39" pos:end="285:40">&amp;&amp;</operator> <name pos:start="285:42" pos:end="285:55"><name pos:start="285:42" pos:end="285:52">boot_device</name><index pos:start="285:53" pos:end="285:55">[<expr pos:start="285:54" pos:end="285:54"><name pos:start="285:54" pos:end="285:54">i</name></expr>]</index></name> <operator pos:start="285:57" pos:end="285:58">&lt;=</operator> <literal type="char" pos:start="285:60" pos:end="285:62">'d'</literal></expr>)</condition> <block pos:start="285:65" pos:end="294:0">{<block_content pos:start="287:17" pos:end="289:22">

                <expr_stmt pos:start="287:17" pos:end="287:49"><expr pos:start="287:17" pos:end="287:48"><name pos:start="287:17" pos:end="287:31">ppc_boot_device</name> <operator pos:start="287:33" pos:end="287:33">=</operator> <name pos:start="287:35" pos:end="287:48"><name pos:start="287:35" pos:end="287:45">boot_device</name><index pos:start="287:46" pos:end="287:48">[<expr pos:start="287:47" pos:end="287:47"><name pos:start="287:47" pos:end="287:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="289:17" pos:end="289:22">break;</break>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="293:1" pos:end="293:6">#<cpp:directive pos:start="293:2" pos:end="293:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></for>

        <if_stmt pos:start="297:9" pos:end="303:9"><if pos:start="297:9" pos:end="303:9">if <condition pos:start="297:12" pos:end="297:36">(<expr pos:start="297:13" pos:end="297:35"><name pos:start="297:13" pos:end="297:27">ppc_boot_device</name> <operator pos:start="297:29" pos:end="297:30">==</operator> <literal type="char" pos:start="297:32" pos:end="297:35">'\0'</literal></expr>)</condition> <block pos:start="297:38" pos:end="303:9">{<block_content pos:start="299:13" pos:end="301:20">

            <expr_stmt pos:start="299:13" pos:end="299:75"><expr pos:start="299:13" pos:end="299:74"><call pos:start="299:13" pos:end="299:74"><name pos:start="299:13" pos:end="299:19">fprintf</name><argument_list pos:start="299:20" pos:end="299:74">(<argument pos:start="299:21" pos:end="299:26"><expr pos:start="299:21" pos:end="299:26"><name pos:start="299:21" pos:end="299:26">stderr</name></expr></argument>, <argument pos:start="299:29" pos:end="299:73"><expr pos:start="299:29" pos:end="299:73"><literal type="string" pos:start="299:29" pos:end="299:73">"No valid boot device for G3 Beige machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:20"><expr pos:start="301:13" pos:end="301:19"><call pos:start="301:13" pos:end="301:19"><name pos:start="301:13" pos:end="301:16">exit</name><argument_list pos:start="301:17" pos:end="301:19">(<argument pos:start="301:18" pos:end="301:18"><expr pos:start="301:18" pos:end="301:18"><literal type="number" pos:start="301:18" pos:end="301:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="309:5" pos:end="309:39">/* Register 2 MB of ISA IO space */</comment>

    <expr_stmt pos:start="311:5" pos:end="313:61"><expr pos:start="311:5" pos:end="313:60"><call pos:start="311:5" pos:end="313:60"><name pos:start="311:5" pos:end="311:28">memory_region_init_alias</name><argument_list pos:start="311:29" pos:end="313:60">(<argument pos:start="311:30" pos:end="311:32"><expr pos:start="311:30" pos:end="311:32"><name pos:start="311:30" pos:end="311:32">isa</name></expr></argument>, <argument pos:start="311:35" pos:end="311:38"><expr pos:start="311:35" pos:end="311:38"><name pos:start="311:35" pos:end="311:38">NULL</name></expr></argument>, <argument pos:start="311:41" pos:end="311:50"><expr pos:start="311:41" pos:end="311:50"><literal type="string" pos:start="311:41" pos:end="311:50">"isa_mmio"</literal></expr></argument>,

                             <argument pos:start="313:30" pos:end="313:44"><expr pos:start="313:30" pos:end="313:44"><call pos:start="313:30" pos:end="313:44"><name pos:start="313:30" pos:end="313:42">get_system_io</name><argument_list pos:start="313:43" pos:end="313:44">()</argument_list></call></expr></argument>, <argument pos:start="313:47" pos:end="313:47"><expr pos:start="313:47" pos:end="313:47"><literal type="number" pos:start="313:47" pos:end="313:47">0</literal></expr></argument>, <argument pos:start="313:50" pos:end="313:59"><expr pos:start="313:50" pos:end="313:59"><literal type="number" pos:start="313:50" pos:end="313:59">0x00200000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="315:5" pos:end="315:57"><expr pos:start="315:5" pos:end="315:56"><call pos:start="315:5" pos:end="315:56"><name pos:start="315:5" pos:end="315:31">memory_region_add_subregion</name><argument_list pos:start="315:32" pos:end="315:56">(<argument pos:start="315:33" pos:end="315:38"><expr pos:start="315:33" pos:end="315:38"><name pos:start="315:33" pos:end="315:38">sysmem</name></expr></argument>, <argument pos:start="315:41" pos:end="315:50"><expr pos:start="315:41" pos:end="315:50"><literal type="number" pos:start="315:41" pos:end="315:50">0xfe000000</literal></expr></argument>, <argument pos:start="315:53" pos:end="315:55"><expr pos:start="315:53" pos:end="315:55"><name pos:start="315:53" pos:end="315:55">isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="319:5" pos:end="319:61">/* XXX: we register only 1 output pin for heathrow PIC */</comment>

    <expr_stmt pos:start="321:5" pos:end="321:61"><expr pos:start="321:5" pos:end="321:60"><name pos:start="321:5" pos:end="321:17">heathrow_irqs</name> <operator pos:start="321:19" pos:end="321:19">=</operator> <call pos:start="321:21" pos:end="321:60"><name pos:start="321:21" pos:end="321:29">g_malloc0</name><argument_list pos:start="321:30" pos:end="321:60">(<argument pos:start="321:31" pos:end="321:59"><expr pos:start="321:31" pos:end="321:59"><name pos:start="321:31" pos:end="321:38">smp_cpus</name> <operator pos:start="321:40" pos:end="321:40">*</operator> <sizeof pos:start="321:42" pos:end="321:59">sizeof<argument_list pos:start="321:48" pos:end="321:59">(<argument pos:start="321:49" pos:end="321:58"><expr pos:start="321:49" pos:end="321:58"><name pos:start="321:49" pos:end="321:56">qemu_irq</name> <operator pos:start="321:58" pos:end="321:58">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="325:51"><expr pos:start="323:5" pos:end="325:50"><name pos:start="323:5" pos:end="323:20"><name pos:start="323:5" pos:end="323:17">heathrow_irqs</name><index pos:start="323:18" pos:end="323:20">[<expr pos:start="323:19" pos:end="323:19"><literal type="number" pos:start="323:19" pos:end="323:19">0</literal></expr>]</index></name> <operator pos:start="323:22" pos:end="323:22">=</operator>

        <call pos:start="325:9" pos:end="325:50"><name pos:start="325:9" pos:end="325:17">g_malloc0</name><argument_list pos:start="325:18" pos:end="325:50">(<argument pos:start="325:19" pos:end="325:49"><expr pos:start="325:19" pos:end="325:49"><name pos:start="325:19" pos:end="325:26">smp_cpus</name> <operator pos:start="325:28" pos:end="325:28">*</operator> <sizeof pos:start="325:30" pos:end="325:45">sizeof<argument_list pos:start="325:36" pos:end="325:45">(<argument pos:start="325:37" pos:end="325:44"><expr pos:start="325:37" pos:end="325:44"><name pos:start="325:37" pos:end="325:44">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="325:47" pos:end="325:47">*</operator> <literal type="number" pos:start="325:49" pos:end="325:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="327:5" pos:end="327:57">/* Connect the heathrow PIC outputs to the 6xx bus */</comment>

    <for pos:start="329:5" pos:end="349:5">for <control pos:start="329:9" pos:end="329:34">(<init pos:start="329:10" pos:end="329:15"><expr pos:start="329:10" pos:end="329:14"><name pos:start="329:10" pos:end="329:10">i</name> <operator pos:start="329:12" pos:end="329:12">=</operator> <literal type="number" pos:start="329:14" pos:end="329:14">0</literal></expr>;</init> <condition pos:start="329:17" pos:end="329:29"><expr pos:start="329:17" pos:end="329:28"><name pos:start="329:17" pos:end="329:17">i</name> <operator pos:start="329:19" pos:end="329:19">&lt;</operator> <name pos:start="329:21" pos:end="329:28">smp_cpus</name></expr>;</condition> <incr pos:start="329:31" pos:end="329:33"><expr pos:start="329:31" pos:end="329:33"><name pos:start="329:31" pos:end="329:31">i</name><operator pos:start="329:32" pos:end="329:33">++</operator></expr></incr>)</control> <block pos:start="329:36" pos:end="349:5">{<block_content pos:start="331:9" pos:end="347:9">

        <switch pos:start="331:9" pos:end="347:9">switch <condition pos:start="331:16" pos:end="331:31">(<expr pos:start="331:17" pos:end="331:30"><call pos:start="331:17" pos:end="331:30"><name pos:start="331:17" pos:end="331:25">PPC_INPUT</name><argument_list pos:start="331:26" pos:end="331:30">(<argument pos:start="331:27" pos:end="331:29"><expr pos:start="331:27" pos:end="331:29"><name pos:start="331:27" pos:end="331:29">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="331:33" pos:end="347:9">{<block_content pos:start="333:9" pos:end="345:74">

        <case pos:start="333:9" pos:end="333:33">case <expr pos:start="333:14" pos:end="333:32"><name pos:start="333:14" pos:end="333:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>

            <expr_stmt pos:start="335:13" pos:end="335:58"><expr pos:start="335:13" pos:end="335:57"><name pos:start="335:13" pos:end="335:28"><name pos:start="335:13" pos:end="335:25">heathrow_irqs</name><index pos:start="335:26" pos:end="335:28">[<expr pos:start="335:27" pos:end="335:27"><name pos:start="335:27" pos:end="335:27">i</name></expr>]</index></name> <operator pos:start="335:30" pos:end="335:30">=</operator> <name pos:start="335:32" pos:end="335:47"><name pos:start="335:32" pos:end="335:44">heathrow_irqs</name><index pos:start="335:45" pos:end="335:47">[<expr pos:start="335:46" pos:end="335:46"><literal type="number" pos:start="335:46" pos:end="335:46">0</literal></expr>]</index></name> <operator pos:start="335:49" pos:end="335:49">+</operator> <operator pos:start="335:51" pos:end="335:51">(</operator><name pos:start="335:52" pos:end="335:52">i</name> <operator pos:start="335:54" pos:end="335:54">*</operator> <literal type="number" pos:start="335:56" pos:end="335:56">1</literal><operator pos:start="335:57" pos:end="335:57">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="337:13" pos:end="339:64"><expr pos:start="337:13" pos:end="339:63"><name pos:start="337:13" pos:end="337:31"><name pos:start="337:13" pos:end="337:25">heathrow_irqs</name><index pos:start="337:26" pos:end="337:28">[<expr pos:start="337:27" pos:end="337:27"><name pos:start="337:27" pos:end="337:27">i</name></expr>]</index><index pos:start="337:29" pos:end="337:31">[<expr pos:start="337:30" pos:end="337:30"><literal type="number" pos:start="337:30" pos:end="337:30">0</literal></expr>]</index></name> <operator pos:start="337:33" pos:end="337:33">=</operator>

                <operator pos:start="339:17" pos:end="339:17">(</operator><operator pos:start="339:18" pos:end="339:18">(</operator><name pos:start="339:19" pos:end="339:26">qemu_irq</name> <operator pos:start="339:28" pos:end="339:28">*</operator><operator pos:start="339:29" pos:end="339:29">)</operator><name pos:start="339:30" pos:end="339:44"><name pos:start="339:30" pos:end="339:32">env</name><operator pos:start="339:33" pos:end="339:34">-&gt;</operator><name pos:start="339:35" pos:end="339:44">irq_inputs</name></name><operator pos:start="339:45" pos:end="339:45">)</operator><index pos:start="339:46" pos:end="339:63">[<expr pos:start="339:47" pos:end="339:62"><name pos:start="339:47" pos:end="339:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="341:13" pos:end="341:18">break;</break>

        <default pos:start="343:9" pos:end="343:16">default:</default>

            <expr_stmt pos:start="345:13" pos:end="345:74"><expr pos:start="345:13" pos:end="345:73"><call pos:start="345:13" pos:end="345:73"><name pos:start="345:13" pos:end="345:20">hw_error</name><argument_list pos:start="345:21" pos:end="345:73">(<argument pos:start="345:22" pos:end="345:72"><expr pos:start="345:22" pos:end="345:72"><literal type="string" pos:start="345:22" pos:end="345:72">"Bus model not supported on OldWorld Mac machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <comment type="block" pos:start="353:5" pos:end="353:32">/* init basic PC hardware */</comment>

    <if_stmt pos:start="355:5" pos:end="359:5"><if pos:start="355:5" pos:end="359:5">if <condition pos:start="355:8" pos:end="355:46">(<expr pos:start="355:9" pos:end="355:45"><call pos:start="355:9" pos:end="355:22"><name pos:start="355:9" pos:end="355:17">PPC_INPUT</name><argument_list pos:start="355:18" pos:end="355:22">(<argument pos:start="355:19" pos:end="355:21"><expr pos:start="355:19" pos:end="355:21"><name pos:start="355:19" pos:end="355:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="355:24" pos:end="355:25">!=</operator> <name pos:start="355:27" pos:end="355:45">PPC_FLAGS_INPUT_6xx</name></expr>)</condition> <block pos:start="355:48" pos:end="359:5">{<block_content pos:start="357:9" pos:end="357:68">

        <expr_stmt pos:start="357:9" pos:end="357:68"><expr pos:start="357:9" pos:end="357:67"><call pos:start="357:9" pos:end="357:67"><name pos:start="357:9" pos:end="357:16">hw_error</name><argument_list pos:start="357:17" pos:end="357:67">(<argument pos:start="357:18" pos:end="357:66"><expr pos:start="357:18" pos:end="357:66"><literal type="string" pos:start="357:18" pos:end="357:66">"Only 6xx bus is supported on heathrow machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="361:5" pos:end="361:56"><expr pos:start="361:5" pos:end="361:55"><name pos:start="361:5" pos:end="361:7">pic</name> <operator pos:start="361:9" pos:end="361:9">=</operator> <call pos:start="361:11" pos:end="361:55"><name pos:start="361:11" pos:end="361:27">heathrow_pic_init</name><argument_list pos:start="361:28" pos:end="361:55">(<argument pos:start="361:29" pos:end="361:36"><expr pos:start="361:29" pos:end="361:36"><operator pos:start="361:29" pos:end="361:29">&amp;</operator><name pos:start="361:30" pos:end="361:36">pic_mem</name></expr></argument>, <argument pos:start="361:39" pos:end="361:39"><expr pos:start="361:39" pos:end="361:39"><literal type="number" pos:start="361:39" pos:end="361:39">1</literal></expr></argument>, <argument pos:start="361:42" pos:end="361:54"><expr pos:start="361:42" pos:end="361:54"><name pos:start="361:42" pos:end="361:54">heathrow_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="367:48"><expr pos:start="363:5" pos:end="367:47"><name pos:start="363:5" pos:end="363:11">pci_bus</name> <operator pos:start="363:13" pos:end="363:13">=</operator> <call pos:start="363:15" pos:end="367:47"><name pos:start="363:15" pos:end="363:30">pci_grackle_init</name><argument_list pos:start="363:31" pos:end="367:47">(<argument pos:start="363:32" pos:end="363:41"><expr pos:start="363:32" pos:end="363:41"><literal type="number" pos:start="363:32" pos:end="363:41">0xfec00000</literal></expr></argument>, <argument pos:start="363:44" pos:end="363:46"><expr pos:start="363:44" pos:end="363:46"><name pos:start="363:44" pos:end="363:46">pic</name></expr></argument>,

                               <argument pos:start="365:32" pos:end="365:50"><expr pos:start="365:32" pos:end="365:50"><call pos:start="365:32" pos:end="365:50"><name pos:start="365:32" pos:end="365:48">get_system_memory</name><argument_list pos:start="365:49" pos:end="365:50">()</argument_list></call></expr></argument>,

                               <argument pos:start="367:32" pos:end="367:46"><expr pos:start="367:32" pos:end="367:46"><call pos:start="367:32" pos:end="367:46"><name pos:start="367:32" pos:end="367:44">get_system_io</name><argument_list pos:start="367:45" pos:end="367:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:26"><expr pos:start="369:5" pos:end="369:25"><call pos:start="369:5" pos:end="369:25"><name pos:start="369:5" pos:end="369:16">pci_vga_init</name><argument_list pos:start="369:17" pos:end="369:25">(<argument pos:start="369:18" pos:end="369:24"><expr pos:start="369:18" pos:end="369:24"><name pos:start="369:18" pos:end="369:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="373:5" pos:end="375:61"><expr pos:start="373:5" pos:end="375:60"><name pos:start="373:5" pos:end="373:12">escc_mem</name> <operator pos:start="373:14" pos:end="373:14">=</operator> <call pos:start="373:16" pos:end="375:60"><name pos:start="373:16" pos:end="373:24">escc_init</name><argument_list pos:start="373:25" pos:end="375:60">(<argument pos:start="373:26" pos:end="373:26"><expr pos:start="373:26" pos:end="373:26"><literal type="number" pos:start="373:26" pos:end="373:26">0</literal></expr></argument>, <argument pos:start="373:29" pos:end="373:37"><expr pos:start="373:29" pos:end="373:37"><name pos:start="373:29" pos:end="373:37"><name pos:start="373:29" pos:end="373:31">pic</name><index pos:start="373:32" pos:end="373:37">[<expr pos:start="373:33" pos:end="373:36"><literal type="number" pos:start="373:33" pos:end="373:36">0x0f</literal></expr>]</index></name></expr></argument>, <argument pos:start="373:40" pos:end="373:48"><expr pos:start="373:40" pos:end="373:48"><name pos:start="373:40" pos:end="373:48"><name pos:start="373:40" pos:end="373:42">pic</name><index pos:start="373:43" pos:end="373:48">[<expr pos:start="373:44" pos:end="373:47"><literal type="number" pos:start="373:44" pos:end="373:47">0x10</literal></expr>]</index></name></expr></argument>, <argument pos:start="373:51" pos:end="373:63"><expr pos:start="373:51" pos:end="373:63"><name pos:start="373:51" pos:end="373:63"><name pos:start="373:51" pos:end="373:60">serial_hds</name><index pos:start="373:61" pos:end="373:63">[<expr pos:start="373:62" pos:end="373:62"><literal type="number" pos:start="373:62" pos:end="373:62">0</literal></expr>]</index></name></expr></argument>,

                               <argument pos:start="375:32" pos:end="375:44"><expr pos:start="375:32" pos:end="375:44"><name pos:start="375:32" pos:end="375:44"><name pos:start="375:32" pos:end="375:41">serial_hds</name><index pos:start="375:42" pos:end="375:44">[<expr pos:start="375:43" pos:end="375:43"><literal type="number" pos:start="375:43" pos:end="375:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="375:47" pos:end="375:56"><expr pos:start="375:47" pos:end="375:56"><name pos:start="375:47" pos:end="375:56">ESCC_CLOCK</name></expr></argument>, <argument pos:start="375:59" pos:end="375:59"><expr pos:start="375:59" pos:end="375:59"><literal type="number" pos:start="375:59" pos:end="375:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="377:5" pos:end="379:72"><expr pos:start="377:5" pos:end="379:71"><call pos:start="377:5" pos:end="379:71"><name pos:start="377:5" pos:end="377:28">memory_region_init_alias</name><argument_list pos:start="377:29" pos:end="379:71">(<argument pos:start="377:30" pos:end="377:37"><expr pos:start="377:30" pos:end="377:37"><name pos:start="377:30" pos:end="377:37">escc_bar</name></expr></argument>, <argument pos:start="377:40" pos:end="377:43"><expr pos:start="377:40" pos:end="377:43"><name pos:start="377:40" pos:end="377:43">NULL</name></expr></argument>, <argument pos:start="377:46" pos:end="377:55"><expr pos:start="377:46" pos:end="377:55"><literal type="string" pos:start="377:46" pos:end="377:55">"escc-bar"</literal></expr></argument>,

                             <argument pos:start="379:30" pos:end="379:37"><expr pos:start="379:30" pos:end="379:37"><name pos:start="379:30" pos:end="379:37">escc_mem</name></expr></argument>, <argument pos:start="379:40" pos:end="379:40"><expr pos:start="379:40" pos:end="379:40"><literal type="number" pos:start="379:40" pos:end="379:40">0</literal></expr></argument>, <argument pos:start="379:43" pos:end="379:70"><expr pos:start="379:43" pos:end="379:70"><call pos:start="379:43" pos:end="379:70"><name pos:start="379:43" pos:end="379:60">memory_region_size</name><argument_list pos:start="379:61" pos:end="379:70">(<argument pos:start="379:62" pos:end="379:69"><expr pos:start="379:62" pos:end="379:69"><name pos:start="379:62" pos:end="379:69">escc_mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="383:5" pos:end="385:69">for<control pos:start="383:8" pos:end="383:32">(<init pos:start="383:9" pos:end="383:14"><expr pos:start="383:9" pos:end="383:13"><name pos:start="383:9" pos:end="383:9">i</name> <operator pos:start="383:11" pos:end="383:11">=</operator> <literal type="number" pos:start="383:13" pos:end="383:13">0</literal></expr>;</init> <condition pos:start="383:16" pos:end="383:27"><expr pos:start="383:16" pos:end="383:26"><name pos:start="383:16" pos:end="383:16">i</name> <operator pos:start="383:18" pos:end="383:18">&lt;</operator> <name pos:start="383:20" pos:end="383:26">nb_nics</name></expr>;</condition> <incr pos:start="383:29" pos:end="383:31"><expr pos:start="383:29" pos:end="383:31"><name pos:start="383:29" pos:end="383:29">i</name><operator pos:start="383:30" pos:end="383:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="385:9" pos:end="385:69"><block_content pos:start="385:9" pos:end="385:69">

        <expr_stmt pos:start="385:9" pos:end="385:69"><expr pos:start="385:9" pos:end="385:68"><call pos:start="385:9" pos:end="385:68"><name pos:start="385:9" pos:end="385:27">pci_nic_init_nofail</name><argument_list pos:start="385:28" pos:end="385:68">(<argument pos:start="385:29" pos:end="385:40"><expr pos:start="385:29" pos:end="385:40"><operator pos:start="385:29" pos:end="385:29">&amp;</operator><name pos:start="385:30" pos:end="385:40"><name pos:start="385:30" pos:end="385:37">nd_table</name><index pos:start="385:38" pos:end="385:40">[<expr pos:start="385:39" pos:end="385:39"><name pos:start="385:39" pos:end="385:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="385:43" pos:end="385:49"><expr pos:start="385:43" pos:end="385:49"><name pos:start="385:43" pos:end="385:49">pci_bus</name></expr></argument>, <argument pos:start="385:52" pos:end="385:61"><expr pos:start="385:52" pos:end="385:61"><literal type="string" pos:start="385:52" pos:end="385:61">"ne2k_pci"</literal></expr></argument>, <argument pos:start="385:64" pos:end="385:67"><expr pos:start="385:64" pos:end="385:67"><name pos:start="385:64" pos:end="385:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>





    <expr_stmt pos:start="391:5" pos:end="391:35"><expr pos:start="391:5" pos:end="391:34"><call pos:start="391:5" pos:end="391:34"><name pos:start="391:5" pos:end="391:17">ide_drive_get</name><argument_list pos:start="391:18" pos:end="391:34">(<argument pos:start="391:19" pos:end="391:20"><expr pos:start="391:19" pos:end="391:20"><name pos:start="391:19" pos:end="391:20">hd</name></expr></argument>, <argument pos:start="391:23" pos:end="391:33"><expr pos:start="391:23" pos:end="391:33"><name pos:start="391:23" pos:end="391:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="395:5" pos:end="395:57"><expr pos:start="395:5" pos:end="395:56"><name pos:start="395:5" pos:end="395:9">macio</name> <operator pos:start="395:11" pos:end="395:11">=</operator> <call pos:start="395:13" pos:end="395:56"><name pos:start="395:13" pos:end="395:22">pci_create</name><argument_list pos:start="395:23" pos:end="395:56">(<argument pos:start="395:24" pos:end="395:30"><expr pos:start="395:24" pos:end="395:30"><name pos:start="395:24" pos:end="395:30">pci_bus</name></expr></argument>, <argument pos:start="395:33" pos:end="395:34"><expr pos:start="395:33" pos:end="395:34"><operator pos:start="395:33" pos:end="395:33">-</operator><literal type="number" pos:start="395:34" pos:end="395:34">1</literal></expr></argument>, <argument pos:start="395:37" pos:end="395:55"><expr pos:start="395:37" pos:end="395:55"><name pos:start="395:37" pos:end="395:55">TYPE_OLDWORLD_MACIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="397:5" pos:end="397:24"><expr pos:start="397:5" pos:end="397:23"><name pos:start="397:5" pos:end="397:7">dev</name> <operator pos:start="397:9" pos:end="397:9">=</operator> <call pos:start="397:11" pos:end="397:23"><name pos:start="397:11" pos:end="397:16">DEVICE</name><argument_list pos:start="397:17" pos:end="397:23">(<argument pos:start="397:18" pos:end="397:22"><expr pos:start="397:18" pos:end="397:22"><name pos:start="397:18" pos:end="397:22">macio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:45"><expr pos:start="399:5" pos:end="399:44"><call pos:start="399:5" pos:end="399:44"><name pos:start="399:5" pos:end="399:25">qdev_connect_gpio_out</name><argument_list pos:start="399:26" pos:end="399:44">(<argument pos:start="399:27" pos:end="399:29"><expr pos:start="399:27" pos:end="399:29"><name pos:start="399:27" pos:end="399:29">dev</name></expr></argument>, <argument pos:start="399:32" pos:end="399:32"><expr pos:start="399:32" pos:end="399:32"><literal type="number" pos:start="399:32" pos:end="399:32">0</literal></expr></argument>, <argument pos:start="399:35" pos:end="399:43"><expr pos:start="399:35" pos:end="399:43"><name pos:start="399:35" pos:end="399:43"><name pos:start="399:35" pos:end="399:37">pic</name><index pos:start="399:38" pos:end="399:43">[<expr pos:start="399:39" pos:end="399:42"><literal type="number" pos:start="399:39" pos:end="399:42">0x12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="399:47" pos:end="399:56">/* CUDA */</comment>

    <expr_stmt pos:start="401:5" pos:end="401:45"><expr pos:start="401:5" pos:end="401:44"><call pos:start="401:5" pos:end="401:44"><name pos:start="401:5" pos:end="401:25">qdev_connect_gpio_out</name><argument_list pos:start="401:26" pos:end="401:44">(<argument pos:start="401:27" pos:end="401:29"><expr pos:start="401:27" pos:end="401:29"><name pos:start="401:27" pos:end="401:29">dev</name></expr></argument>, <argument pos:start="401:32" pos:end="401:32"><expr pos:start="401:32" pos:end="401:32"><literal type="number" pos:start="401:32" pos:end="401:32">1</literal></expr></argument>, <argument pos:start="401:35" pos:end="401:43"><expr pos:start="401:35" pos:end="401:43"><name pos:start="401:35" pos:end="401:43"><name pos:start="401:35" pos:end="401:37">pic</name><index pos:start="401:38" pos:end="401:43">[<expr pos:start="401:39" pos:end="401:42"><literal type="number" pos:start="401:39" pos:end="401:42">0x0D</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="401:47" pos:end="401:57">/* IDE-0 */</comment>

    <expr_stmt pos:start="403:5" pos:end="403:45"><expr pos:start="403:5" pos:end="403:44"><call pos:start="403:5" pos:end="403:44"><name pos:start="403:5" pos:end="403:25">qdev_connect_gpio_out</name><argument_list pos:start="403:26" pos:end="403:44">(<argument pos:start="403:27" pos:end="403:29"><expr pos:start="403:27" pos:end="403:29"><name pos:start="403:27" pos:end="403:29">dev</name></expr></argument>, <argument pos:start="403:32" pos:end="403:32"><expr pos:start="403:32" pos:end="403:32"><literal type="number" pos:start="403:32" pos:end="403:32">2</literal></expr></argument>, <argument pos:start="403:35" pos:end="403:43"><expr pos:start="403:35" pos:end="403:43"><name pos:start="403:35" pos:end="403:43"><name pos:start="403:35" pos:end="403:37">pic</name><index pos:start="403:38" pos:end="403:43">[<expr pos:start="403:39" pos:end="403:42"><literal type="number" pos:start="403:39" pos:end="403:42">0x02</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="403:47" pos:end="403:61">/* IDE-0 DMA */</comment>

    <expr_stmt pos:start="405:5" pos:end="405:45"><expr pos:start="405:5" pos:end="405:44"><call pos:start="405:5" pos:end="405:44"><name pos:start="405:5" pos:end="405:25">qdev_connect_gpio_out</name><argument_list pos:start="405:26" pos:end="405:44">(<argument pos:start="405:27" pos:end="405:29"><expr pos:start="405:27" pos:end="405:29"><name pos:start="405:27" pos:end="405:29">dev</name></expr></argument>, <argument pos:start="405:32" pos:end="405:32"><expr pos:start="405:32" pos:end="405:32"><literal type="number" pos:start="405:32" pos:end="405:32">3</literal></expr></argument>, <argument pos:start="405:35" pos:end="405:43"><expr pos:start="405:35" pos:end="405:43"><name pos:start="405:35" pos:end="405:43"><name pos:start="405:35" pos:end="405:37">pic</name><index pos:start="405:38" pos:end="405:43">[<expr pos:start="405:39" pos:end="405:42"><literal type="number" pos:start="405:39" pos:end="405:42">0x0E</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="405:47" pos:end="405:57">/* IDE-1 */</comment>

    <expr_stmt pos:start="407:5" pos:end="407:45"><expr pos:start="407:5" pos:end="407:44"><call pos:start="407:5" pos:end="407:44"><name pos:start="407:5" pos:end="407:25">qdev_connect_gpio_out</name><argument_list pos:start="407:26" pos:end="407:44">(<argument pos:start="407:27" pos:end="407:29"><expr pos:start="407:27" pos:end="407:29"><name pos:start="407:27" pos:end="407:29">dev</name></expr></argument>, <argument pos:start="407:32" pos:end="407:32"><expr pos:start="407:32" pos:end="407:32"><literal type="number" pos:start="407:32" pos:end="407:32">4</literal></expr></argument>, <argument pos:start="407:35" pos:end="407:43"><expr pos:start="407:35" pos:end="407:43"><name pos:start="407:35" pos:end="407:43"><name pos:start="407:35" pos:end="407:37">pic</name><index pos:start="407:38" pos:end="407:43">[<expr pos:start="407:39" pos:end="407:42"><literal type="number" pos:start="407:39" pos:end="407:42">0x03</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="407:47" pos:end="407:61">/* IDE-1 DMA */</comment>

    <expr_stmt pos:start="409:5" pos:end="409:41"><expr pos:start="409:5" pos:end="409:40"><call pos:start="409:5" pos:end="409:40"><name pos:start="409:5" pos:end="409:14">macio_init</name><argument_list pos:start="409:15" pos:end="409:40">(<argument pos:start="409:16" pos:end="409:20"><expr pos:start="409:16" pos:end="409:20"><name pos:start="409:16" pos:end="409:20">macio</name></expr></argument>, <argument pos:start="409:23" pos:end="409:29"><expr pos:start="409:23" pos:end="409:29"><name pos:start="409:23" pos:end="409:29">pic_mem</name></expr></argument>, <argument pos:start="409:32" pos:end="409:39"><expr pos:start="409:32" pos:end="409:39"><name pos:start="409:32" pos:end="409:39">escc_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="413:5" pos:end="415:67"><expr pos:start="413:5" pos:end="415:66"><name pos:start="413:5" pos:end="413:13">macio_ide</name> <operator pos:start="413:15" pos:end="413:15">=</operator> <call pos:start="413:17" pos:end="415:66"><name pos:start="413:17" pos:end="413:25">MACIO_IDE</name><argument_list pos:start="413:26" pos:end="415:66">(<argument pos:start="413:27" pos:end="415:65"><expr pos:start="413:27" pos:end="415:65"><call pos:start="413:27" pos:end="415:65"><name pos:start="413:27" pos:end="413:55">object_resolve_path_component</name><argument_list pos:start="413:56" pos:end="415:65">(<argument pos:start="413:57" pos:end="413:69"><expr pos:start="413:57" pos:end="413:69"><call pos:start="413:57" pos:end="413:69"><name pos:start="413:57" pos:end="413:62">OBJECT</name><argument_list pos:start="413:63" pos:end="413:69">(<argument pos:start="413:64" pos:end="413:68"><expr pos:start="413:64" pos:end="413:68"><name pos:start="413:64" pos:end="413:68">macio</name></expr></argument>)</argument_list></call></expr></argument>,

                                                        <argument pos:start="415:57" pos:end="415:64"><expr pos:start="415:57" pos:end="415:64"><literal type="string" pos:start="415:57" pos:end="415:64">"ide[0]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="417:5" pos:end="417:41"><expr pos:start="417:5" pos:end="417:40"><call pos:start="417:5" pos:end="417:40"><name pos:start="417:5" pos:end="417:25">macio_ide_init_drives</name><argument_list pos:start="417:26" pos:end="417:40">(<argument pos:start="417:27" pos:end="417:35"><expr pos:start="417:27" pos:end="417:35"><name pos:start="417:27" pos:end="417:35">macio_ide</name></expr></argument>, <argument pos:start="417:38" pos:end="417:39"><expr pos:start="417:38" pos:end="417:39"><name pos:start="417:38" pos:end="417:39">hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="421:5" pos:end="423:67"><expr pos:start="421:5" pos:end="423:66"><name pos:start="421:5" pos:end="421:13">macio_ide</name> <operator pos:start="421:15" pos:end="421:15">=</operator> <call pos:start="421:17" pos:end="423:66"><name pos:start="421:17" pos:end="421:25">MACIO_IDE</name><argument_list pos:start="421:26" pos:end="423:66">(<argument pos:start="421:27" pos:end="423:65"><expr pos:start="421:27" pos:end="423:65"><call pos:start="421:27" pos:end="423:65"><name pos:start="421:27" pos:end="421:55">object_resolve_path_component</name><argument_list pos:start="421:56" pos:end="423:65">(<argument pos:start="421:57" pos:end="421:69"><expr pos:start="421:57" pos:end="421:69"><call pos:start="421:57" pos:end="421:69"><name pos:start="421:57" pos:end="421:62">OBJECT</name><argument_list pos:start="421:63" pos:end="421:69">(<argument pos:start="421:64" pos:end="421:68"><expr pos:start="421:64" pos:end="421:68"><name pos:start="421:64" pos:end="421:68">macio</name></expr></argument>)</argument_list></call></expr></argument>,

                                                        <argument pos:start="423:57" pos:end="423:64"><expr pos:start="423:57" pos:end="423:64"><literal type="string" pos:start="423:57" pos:end="423:64">"ide[1]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:56"><expr pos:start="425:5" pos:end="425:55"><call pos:start="425:5" pos:end="425:55"><name pos:start="425:5" pos:end="425:25">macio_ide_init_drives</name><argument_list pos:start="425:26" pos:end="425:55">(<argument pos:start="425:27" pos:end="425:35"><expr pos:start="425:27" pos:end="425:35"><name pos:start="425:27" pos:end="425:35">macio_ide</name></expr></argument>, <argument pos:start="425:38" pos:end="425:54"><expr pos:start="425:38" pos:end="425:54"><operator pos:start="425:38" pos:end="425:38">&amp;</operator><name pos:start="425:39" pos:end="425:54"><name pos:start="425:39" pos:end="425:40">hd</name><index pos:start="425:41" pos:end="425:54">[<expr pos:start="425:42" pos:end="425:53"><name pos:start="425:42" pos:end="425:53">MAX_IDE_DEVS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="429:5" pos:end="429:71"><expr pos:start="429:5" pos:end="429:70"><name pos:start="429:5" pos:end="429:7">dev</name> <operator pos:start="429:9" pos:end="429:9">=</operator> <call pos:start="429:11" pos:end="429:70"><name pos:start="429:11" pos:end="429:16">DEVICE</name><argument_list pos:start="429:17" pos:end="429:70">(<argument pos:start="429:18" pos:end="429:69"><expr pos:start="429:18" pos:end="429:69"><call pos:start="429:18" pos:end="429:69"><name pos:start="429:18" pos:end="429:46">object_resolve_path_component</name><argument_list pos:start="429:47" pos:end="429:69">(<argument pos:start="429:48" pos:end="429:60"><expr pos:start="429:48" pos:end="429:60"><call pos:start="429:48" pos:end="429:60"><name pos:start="429:48" pos:end="429:53">OBJECT</name><argument_list pos:start="429:54" pos:end="429:60">(<argument pos:start="429:55" pos:end="429:59"><expr pos:start="429:55" pos:end="429:59"><name pos:start="429:55" pos:end="429:59">macio</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="429:63" pos:end="429:68"><expr pos:start="429:63" pos:end="429:68"><literal type="string" pos:start="429:63" pos:end="429:68">"cuda"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:47"><expr pos:start="431:5" pos:end="431:46"><name pos:start="431:5" pos:end="431:11">adb_bus</name> <operator pos:start="431:13" pos:end="431:13">=</operator> <call pos:start="431:15" pos:end="431:46"><name pos:start="431:15" pos:end="431:32">qdev_get_child_bus</name><argument_list pos:start="431:33" pos:end="431:46">(<argument pos:start="431:34" pos:end="431:36"><expr pos:start="431:34" pos:end="431:36"><name pos:start="431:34" pos:end="431:36">dev</name></expr></argument>, <argument pos:start="431:39" pos:end="431:45"><expr pos:start="431:39" pos:end="431:45"><literal type="string" pos:start="431:39" pos:end="431:45">"adb.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="433:5" pos:end="433:50"><expr pos:start="433:5" pos:end="433:49"><name pos:start="433:5" pos:end="433:7">dev</name> <operator pos:start="433:9" pos:end="433:9">=</operator> <call pos:start="433:11" pos:end="433:49"><name pos:start="433:11" pos:end="433:21">qdev_create</name><argument_list pos:start="433:22" pos:end="433:49">(<argument pos:start="433:23" pos:end="433:29"><expr pos:start="433:23" pos:end="433:29"><name pos:start="433:23" pos:end="433:29">adb_bus</name></expr></argument>, <argument pos:start="433:32" pos:end="433:48"><expr pos:start="433:32" pos:end="433:48"><name pos:start="433:32" pos:end="433:48">TYPE_ADB_KEYBOARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="435:5" pos:end="435:26"><expr pos:start="435:5" pos:end="435:25"><call pos:start="435:5" pos:end="435:25"><name pos:start="435:5" pos:end="435:20">qdev_init_nofail</name><argument_list pos:start="435:21" pos:end="435:25">(<argument pos:start="435:22" pos:end="435:24"><expr pos:start="435:22" pos:end="435:24"><name pos:start="435:22" pos:end="435:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="437:5" pos:end="437:47"><expr pos:start="437:5" pos:end="437:46"><name pos:start="437:5" pos:end="437:7">dev</name> <operator pos:start="437:9" pos:end="437:9">=</operator> <call pos:start="437:11" pos:end="437:46"><name pos:start="437:11" pos:end="437:21">qdev_create</name><argument_list pos:start="437:22" pos:end="437:46">(<argument pos:start="437:23" pos:end="437:29"><expr pos:start="437:23" pos:end="437:29"><name pos:start="437:23" pos:end="437:29">adb_bus</name></expr></argument>, <argument pos:start="437:32" pos:end="437:45"><expr pos:start="437:32" pos:end="437:45"><name pos:start="437:32" pos:end="437:45">TYPE_ADB_MOUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="439:5" pos:end="439:26"><expr pos:start="439:5" pos:end="439:25"><call pos:start="439:5" pos:end="439:25"><name pos:start="439:5" pos:end="439:20">qdev_init_nofail</name><argument_list pos:start="439:21" pos:end="439:25">(<argument pos:start="439:22" pos:end="439:24"><expr pos:start="439:22" pos:end="439:24"><name pos:start="439:22" pos:end="439:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="443:5" pos:end="447:5"><if pos:start="443:5" pos:end="447:5">if <condition pos:start="443:8" pos:end="443:27">(<expr pos:start="443:9" pos:end="443:26"><call pos:start="443:9" pos:end="443:26"><name pos:start="443:9" pos:end="443:19">usb_enabled</name><argument_list pos:start="443:20" pos:end="443:26">(<argument pos:start="443:21" pos:end="443:25"><expr pos:start="443:21" pos:end="443:25"><name pos:start="443:21" pos:end="443:25">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="443:29" pos:end="447:5">{<block_content pos:start="445:9" pos:end="445:51">

        <expr_stmt pos:start="445:9" pos:end="445:51"><expr pos:start="445:9" pos:end="445:50"><call pos:start="445:9" pos:end="445:50"><name pos:start="445:9" pos:end="445:25">pci_create_simple</name><argument_list pos:start="445:26" pos:end="445:50">(<argument pos:start="445:27" pos:end="445:33"><expr pos:start="445:27" pos:end="445:33"><name pos:start="445:27" pos:end="445:33">pci_bus</name></expr></argument>, <argument pos:start="445:36" pos:end="445:37"><expr pos:start="445:36" pos:end="445:37"><operator pos:start="445:36" pos:end="445:36">-</operator><literal type="number" pos:start="445:37" pos:end="445:37">1</literal></expr></argument>, <argument pos:start="445:40" pos:end="445:49"><expr pos:start="445:40" pos:end="445:49"><literal type="string" pos:start="445:40" pos:end="445:49">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="451:5" pos:end="453:27"><if pos:start="451:5" pos:end="453:27">if <condition pos:start="451:8" pos:end="451:73">(<expr pos:start="451:9" pos:end="451:72"><name pos:start="451:9" pos:end="451:21">graphic_depth</name> <operator pos:start="451:23" pos:end="451:24">!=</operator> <literal type="number" pos:start="451:26" pos:end="451:27">15</literal> <operator pos:start="451:29" pos:end="451:30">&amp;&amp;</operator> <name pos:start="451:32" pos:end="451:44">graphic_depth</name> <operator pos:start="451:46" pos:end="451:47">!=</operator> <literal type="number" pos:start="451:49" pos:end="451:50">32</literal> <operator pos:start="451:52" pos:end="451:53">&amp;&amp;</operator> <name pos:start="451:55" pos:end="451:67">graphic_depth</name> <operator pos:start="451:69" pos:end="451:70">!=</operator> <literal type="number" pos:start="451:72" pos:end="451:72">8</literal></expr>)</condition><block type="pseudo" pos:start="453:9" pos:end="453:27"><block_content pos:start="453:9" pos:end="453:27">

        <expr_stmt pos:start="453:9" pos:end="453:27"><expr pos:start="453:9" pos:end="453:26"><name pos:start="453:9" pos:end="453:21">graphic_depth</name> <operator pos:start="453:23" pos:end="453:23">=</operator> <literal type="number" pos:start="453:25" pos:end="453:26">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="457:5" pos:end="457:42">/* No PCI init: the BIOS will do it */</comment>



    <expr_stmt pos:start="461:5" pos:end="461:55"><expr pos:start="461:5" pos:end="461:54"><name pos:start="461:5" pos:end="461:10">fw_cfg</name> <operator pos:start="461:12" pos:end="461:12">=</operator> <call pos:start="461:14" pos:end="461:54"><name pos:start="461:14" pos:end="461:24">fw_cfg_init</name><argument_list pos:start="461:25" pos:end="461:54">(<argument pos:start="461:26" pos:end="461:26"><expr pos:start="461:26" pos:end="461:26"><literal type="number" pos:start="461:26" pos:end="461:26">0</literal></expr></argument>, <argument pos:start="461:29" pos:end="461:29"><expr pos:start="461:29" pos:end="461:29"><literal type="number" pos:start="461:29" pos:end="461:29">0</literal></expr></argument>, <argument pos:start="461:32" pos:end="461:39"><expr pos:start="461:32" pos:end="461:39"><name pos:start="461:32" pos:end="461:39">CFG_ADDR</name></expr></argument>, <argument pos:start="461:42" pos:end="461:53"><expr pos:start="461:42" pos:end="461:53"><name pos:start="461:42" pos:end="461:49">CFG_ADDR</name> <operator pos:start="461:51" pos:end="461:51">+</operator> <literal type="number" pos:start="461:53" pos:end="461:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="463:5" pos:end="463:64"><expr pos:start="463:5" pos:end="463:63"><call pos:start="463:5" pos:end="463:63"><name pos:start="463:5" pos:end="463:18">fw_cfg_add_i16</name><argument_list pos:start="463:19" pos:end="463:63">(<argument pos:start="463:20" pos:end="463:25"><expr pos:start="463:20" pos:end="463:25"><name pos:start="463:20" pos:end="463:25">fw_cfg</name></expr></argument>, <argument pos:start="463:28" pos:end="463:42"><expr pos:start="463:28" pos:end="463:42"><name pos:start="463:28" pos:end="463:42">FW_CFG_MAX_CPUS</name></expr></argument>, <argument pos:start="463:45" pos:end="463:62"><expr pos:start="463:45" pos:end="463:62"><operator pos:start="463:45" pos:end="463:45">(</operator><name pos:start="463:46" pos:end="463:53">uint16_t</name><operator pos:start="463:54" pos:end="463:54">)</operator><name pos:start="463:55" pos:end="463:62">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="465:5" pos:end="465:41"><expr pos:start="465:5" pos:end="465:40"><call pos:start="465:5" pos:end="465:40"><name pos:start="465:5" pos:end="465:18">fw_cfg_add_i32</name><argument_list pos:start="465:19" pos:end="465:40">(<argument pos:start="465:20" pos:end="465:25"><expr pos:start="465:20" pos:end="465:25"><name pos:start="465:20" pos:end="465:25">fw_cfg</name></expr></argument>, <argument pos:start="465:28" pos:end="465:36"><expr pos:start="465:28" pos:end="465:36"><name pos:start="465:28" pos:end="465:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="465:39" pos:end="465:39"><expr pos:start="465:39" pos:end="465:39"><literal type="number" pos:start="465:39" pos:end="465:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="467:5" pos:end="467:64"><expr pos:start="467:5" pos:end="467:63"><call pos:start="467:5" pos:end="467:63"><name pos:start="467:5" pos:end="467:18">fw_cfg_add_i64</name><argument_list pos:start="467:19" pos:end="467:63">(<argument pos:start="467:20" pos:end="467:25"><expr pos:start="467:20" pos:end="467:25"><name pos:start="467:20" pos:end="467:25">fw_cfg</name></expr></argument>, <argument pos:start="467:28" pos:end="467:42"><expr pos:start="467:28" pos:end="467:42"><name pos:start="467:28" pos:end="467:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="467:45" pos:end="467:62"><expr pos:start="467:45" pos:end="467:62"><operator pos:start="467:45" pos:end="467:45">(</operator><name pos:start="467:46" pos:end="467:53">uint64_t</name><operator pos:start="467:54" pos:end="467:54">)</operator><name pos:start="467:55" pos:end="467:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="469:5" pos:end="469:61"><expr pos:start="469:5" pos:end="469:60"><call pos:start="469:5" pos:end="469:60"><name pos:start="469:5" pos:end="469:18">fw_cfg_add_i16</name><argument_list pos:start="469:19" pos:end="469:60">(<argument pos:start="469:20" pos:end="469:25"><expr pos:start="469:20" pos:end="469:25"><name pos:start="469:20" pos:end="469:25">fw_cfg</name></expr></argument>, <argument pos:start="469:28" pos:end="469:44"><expr pos:start="469:28" pos:end="469:44"><name pos:start="469:28" pos:end="469:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="469:47" pos:end="469:59"><expr pos:start="469:47" pos:end="469:59"><name pos:start="469:47" pos:end="469:59">ARCH_HEATHROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="471:5" pos:end="471:60"><expr pos:start="471:5" pos:end="471:59"><call pos:start="471:5" pos:end="471:59"><name pos:start="471:5" pos:end="471:18">fw_cfg_add_i32</name><argument_list pos:start="471:19" pos:end="471:59">(<argument pos:start="471:20" pos:end="471:25"><expr pos:start="471:20" pos:end="471:25"><name pos:start="471:20" pos:end="471:25">fw_cfg</name></expr></argument>, <argument pos:start="471:28" pos:end="471:45"><expr pos:start="471:28" pos:end="471:45"><name pos:start="471:28" pos:end="471:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="471:48" pos:end="471:58"><expr pos:start="471:48" pos:end="471:58"><name pos:start="471:48" pos:end="471:58">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="473:5" pos:end="473:60"><expr pos:start="473:5" pos:end="473:59"><call pos:start="473:5" pos:end="473:59"><name pos:start="473:5" pos:end="473:18">fw_cfg_add_i32</name><argument_list pos:start="473:19" pos:end="473:59">(<argument pos:start="473:20" pos:end="473:25"><expr pos:start="473:20" pos:end="473:25"><name pos:start="473:20" pos:end="473:25">fw_cfg</name></expr></argument>, <argument pos:start="473:28" pos:end="473:45"><expr pos:start="473:28" pos:end="473:45"><name pos:start="473:28" pos:end="473:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="473:48" pos:end="473:58"><expr pos:start="473:48" pos:end="473:58"><name pos:start="473:48" pos:end="473:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="475:5" pos:end="485:5"><if pos:start="475:5" pos:end="481:5">if <condition pos:start="475:8" pos:end="475:23">(<expr pos:start="475:9" pos:end="475:22"><name pos:start="475:9" pos:end="475:22">kernel_cmdline</name></expr>)</condition> <block pos:start="475:25" pos:end="481:5">{<block_content pos:start="477:9" pos:end="479:84">

        <expr_stmt pos:start="477:9" pos:end="477:68"><expr pos:start="477:9" pos:end="477:67"><call pos:start="477:9" pos:end="477:67"><name pos:start="477:9" pos:end="477:22">fw_cfg_add_i32</name><argument_list pos:start="477:23" pos:end="477:67">(<argument pos:start="477:24" pos:end="477:29"><expr pos:start="477:24" pos:end="477:29"><name pos:start="477:24" pos:end="477:29">fw_cfg</name></expr></argument>, <argument pos:start="477:32" pos:end="477:52"><expr pos:start="477:32" pos:end="477:52"><name pos:start="477:32" pos:end="477:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="477:55" pos:end="477:66"><expr pos:start="477:55" pos:end="477:66"><name pos:start="477:55" pos:end="477:66">cmdline_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="479:9" pos:end="479:84"><expr pos:start="479:9" pos:end="479:83"><call pos:start="479:9" pos:end="479:83"><name pos:start="479:9" pos:end="479:24">pstrcpy_targphys</name><argument_list pos:start="479:25" pos:end="479:83">(<argument pos:start="479:26" pos:end="479:34"><expr pos:start="479:26" pos:end="479:34"><literal type="string" pos:start="479:26" pos:end="479:34">"cmdline"</literal></expr></argument>, <argument pos:start="479:37" pos:end="479:48"><expr pos:start="479:37" pos:end="479:48"><name pos:start="479:37" pos:end="479:48">cmdline_base</name></expr></argument>, <argument pos:start="479:51" pos:end="479:66"><expr pos:start="479:51" pos:end="479:66"><name pos:start="479:51" pos:end="479:66">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="479:69" pos:end="479:82"><expr pos:start="479:69" pos:end="479:82"><name pos:start="479:69" pos:end="479:82">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="481:7" pos:end="485:5">else <block pos:start="481:12" pos:end="485:5">{<block_content pos:start="483:9" pos:end="483:57">

        <expr_stmt pos:start="483:9" pos:end="483:57"><expr pos:start="483:9" pos:end="483:56"><call pos:start="483:9" pos:end="483:56"><name pos:start="483:9" pos:end="483:22">fw_cfg_add_i32</name><argument_list pos:start="483:23" pos:end="483:56">(<argument pos:start="483:24" pos:end="483:29"><expr pos:start="483:24" pos:end="483:29"><name pos:start="483:24" pos:end="483:29">fw_cfg</name></expr></argument>, <argument pos:start="483:32" pos:end="483:52"><expr pos:start="483:32" pos:end="483:52"><name pos:start="483:32" pos:end="483:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="483:55" pos:end="483:55"><expr pos:start="483:55" pos:end="483:55"><literal type="number" pos:start="483:55" pos:end="483:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="487:5" pos:end="487:60"><expr pos:start="487:5" pos:end="487:59"><call pos:start="487:5" pos:end="487:59"><name pos:start="487:5" pos:end="487:18">fw_cfg_add_i32</name><argument_list pos:start="487:19" pos:end="487:59">(<argument pos:start="487:20" pos:end="487:25"><expr pos:start="487:20" pos:end="487:25"><name pos:start="487:20" pos:end="487:25">fw_cfg</name></expr></argument>, <argument pos:start="487:28" pos:end="487:45"><expr pos:start="487:28" pos:end="487:45"><name pos:start="487:28" pos:end="487:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="487:48" pos:end="487:58"><expr pos:start="487:48" pos:end="487:58"><name pos:start="487:48" pos:end="487:58">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="489:5" pos:end="489:60"><expr pos:start="489:5" pos:end="489:59"><call pos:start="489:5" pos:end="489:59"><name pos:start="489:5" pos:end="489:18">fw_cfg_add_i32</name><argument_list pos:start="489:19" pos:end="489:59">(<argument pos:start="489:20" pos:end="489:25"><expr pos:start="489:20" pos:end="489:25"><name pos:start="489:20" pos:end="489:25">fw_cfg</name></expr></argument>, <argument pos:start="489:28" pos:end="489:45"><expr pos:start="489:28" pos:end="489:45"><name pos:start="489:28" pos:end="489:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="489:48" pos:end="489:58"><expr pos:start="489:48" pos:end="489:58"><name pos:start="489:48" pos:end="489:58">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="491:5" pos:end="491:64"><expr pos:start="491:5" pos:end="491:63"><call pos:start="491:5" pos:end="491:63"><name pos:start="491:5" pos:end="491:18">fw_cfg_add_i16</name><argument_list pos:start="491:19" pos:end="491:63">(<argument pos:start="491:20" pos:end="491:25"><expr pos:start="491:20" pos:end="491:25"><name pos:start="491:20" pos:end="491:25">fw_cfg</name></expr></argument>, <argument pos:start="491:28" pos:end="491:45"><expr pos:start="491:28" pos:end="491:45"><name pos:start="491:28" pos:end="491:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="491:48" pos:end="491:62"><expr pos:start="491:48" pos:end="491:62"><name pos:start="491:48" pos:end="491:62">ppc_boot_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="495:5" pos:end="495:60"><expr pos:start="495:5" pos:end="495:59"><call pos:start="495:5" pos:end="495:59"><name pos:start="495:5" pos:end="495:18">fw_cfg_add_i16</name><argument_list pos:start="495:19" pos:end="495:59">(<argument pos:start="495:20" pos:end="495:25"><expr pos:start="495:20" pos:end="495:25"><name pos:start="495:20" pos:end="495:25">fw_cfg</name></expr></argument>, <argument pos:start="495:28" pos:end="495:43"><expr pos:start="495:28" pos:end="495:43"><name pos:start="495:28" pos:end="495:43">FW_CFG_PPC_WIDTH</name></expr></argument>, <argument pos:start="495:46" pos:end="495:58"><expr pos:start="495:46" pos:end="495:58"><name pos:start="495:46" pos:end="495:58">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="497:5" pos:end="497:62"><expr pos:start="497:5" pos:end="497:61"><call pos:start="497:5" pos:end="497:61"><name pos:start="497:5" pos:end="497:18">fw_cfg_add_i16</name><argument_list pos:start="497:19" pos:end="497:61">(<argument pos:start="497:20" pos:end="497:25"><expr pos:start="497:20" pos:end="497:25"><name pos:start="497:20" pos:end="497:25">fw_cfg</name></expr></argument>, <argument pos:start="497:28" pos:end="497:44"><expr pos:start="497:28" pos:end="497:44"><name pos:start="497:28" pos:end="497:44">FW_CFG_PPC_HEIGHT</name></expr></argument>, <argument pos:start="497:47" pos:end="497:60"><expr pos:start="497:47" pos:end="497:60"><name pos:start="497:47" pos:end="497:60">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="499:5" pos:end="499:60"><expr pos:start="499:5" pos:end="499:59"><call pos:start="499:5" pos:end="499:59"><name pos:start="499:5" pos:end="499:18">fw_cfg_add_i16</name><argument_list pos:start="499:19" pos:end="499:59">(<argument pos:start="499:20" pos:end="499:25"><expr pos:start="499:20" pos:end="499:25"><name pos:start="499:20" pos:end="499:25">fw_cfg</name></expr></argument>, <argument pos:start="499:28" pos:end="499:43"><expr pos:start="499:28" pos:end="499:43"><name pos:start="499:28" pos:end="499:43">FW_CFG_PPC_DEPTH</name></expr></argument>, <argument pos:start="499:46" pos:end="499:58"><expr pos:start="499:46" pos:end="499:58"><name pos:start="499:46" pos:end="499:58">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="503:5" pos:end="503:61"><expr pos:start="503:5" pos:end="503:60"><call pos:start="503:5" pos:end="503:60"><name pos:start="503:5" pos:end="503:18">fw_cfg_add_i32</name><argument_list pos:start="503:19" pos:end="503:60">(<argument pos:start="503:20" pos:end="503:25"><expr pos:start="503:20" pos:end="503:25"><name pos:start="503:20" pos:end="503:25">fw_cfg</name></expr></argument>, <argument pos:start="503:28" pos:end="503:44"><expr pos:start="503:28" pos:end="503:44"><name pos:start="503:28" pos:end="503:44">FW_CFG_PPC_IS_KVM</name></expr></argument>, <argument pos:start="503:47" pos:end="503:59"><expr pos:start="503:47" pos:end="503:59"><call pos:start="503:47" pos:end="503:59"><name pos:start="503:47" pos:end="503:57">kvm_enabled</name><argument_list pos:start="503:58" pos:end="503:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="505:5" pos:end="529:5"><if pos:start="505:5" pos:end="525:5">if <condition pos:start="505:8" pos:end="505:22">(<expr pos:start="505:9" pos:end="505:21"><call pos:start="505:9" pos:end="505:21"><name pos:start="505:9" pos:end="505:19">kvm_enabled</name><argument_list pos:start="505:20" pos:end="505:21">()</argument_list></call></expr>)</condition> <block pos:start="505:24" pos:end="525:5">{<block_content pos:start="509:9" pos:end="524:0">

<cpp:ifdef pos:start="507:1" pos:end="507:17">#<cpp:directive pos:start="507:2" pos:end="507:6">ifdef</cpp:directive> <name pos:start="507:8" pos:end="507:17">CONFIG_KVM</name></cpp:ifdef>

        <decl_stmt pos:start="509:9" pos:end="509:27"><decl pos:start="509:9" pos:end="509:26"><type pos:start="509:9" pos:end="509:17"><name pos:start="509:9" pos:end="509:15">uint8_t</name> <modifier pos:start="509:17" pos:end="509:17">*</modifier></type><name pos:start="509:18" pos:end="509:26">hypercall</name></decl>;</decl_stmt>



        <expr_stmt pos:start="513:9" pos:end="513:71"><expr pos:start="513:9" pos:end="513:70"><call pos:start="513:9" pos:end="513:70"><name pos:start="513:9" pos:end="513:22">fw_cfg_add_i32</name><argument_list pos:start="513:23" pos:end="513:70">(<argument pos:start="513:24" pos:end="513:29"><expr pos:start="513:24" pos:end="513:29"><name pos:start="513:24" pos:end="513:29">fw_cfg</name></expr></argument>, <argument pos:start="513:32" pos:end="513:48"><expr pos:start="513:32" pos:end="513:48"><name pos:start="513:32" pos:end="513:48">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="513:51" pos:end="513:69"><expr pos:start="513:51" pos:end="513:69"><call pos:start="513:51" pos:end="513:69"><name pos:start="513:51" pos:end="513:67">kvmppc_get_tbfreq</name><argument_list pos:start="513:68" pos:end="513:69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="515:9" pos:end="515:33"><expr pos:start="515:9" pos:end="515:32"><name pos:start="515:9" pos:end="515:17">hypercall</name> <operator pos:start="515:19" pos:end="515:19">=</operator> <call pos:start="515:21" pos:end="515:32"><name pos:start="515:21" pos:end="515:28">g_malloc</name><argument_list pos:start="515:29" pos:end="515:32">(<argument pos:start="515:30" pos:end="515:31"><expr pos:start="515:30" pos:end="515:31"><literal type="number" pos:start="515:30" pos:end="515:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="517:9" pos:end="517:49"><expr pos:start="517:9" pos:end="517:48"><call pos:start="517:9" pos:end="517:48"><name pos:start="517:9" pos:end="517:28">kvmppc_get_hypercall</name><argument_list pos:start="517:29" pos:end="517:48">(<argument pos:start="517:30" pos:end="517:32"><expr pos:start="517:30" pos:end="517:32"><name pos:start="517:30" pos:end="517:32">env</name></expr></argument>, <argument pos:start="517:35" pos:end="517:43"><expr pos:start="517:35" pos:end="517:43"><name pos:start="517:35" pos:end="517:43">hypercall</name></expr></argument>, <argument pos:start="517:46" pos:end="517:47"><expr pos:start="517:46" pos:end="517:47"><literal type="number" pos:start="517:46" pos:end="517:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="519:9" pos:end="519:67"><expr pos:start="519:9" pos:end="519:66"><call pos:start="519:9" pos:end="519:66"><name pos:start="519:9" pos:end="519:24">fw_cfg_add_bytes</name><argument_list pos:start="519:25" pos:end="519:66">(<argument pos:start="519:26" pos:end="519:31"><expr pos:start="519:26" pos:end="519:31"><name pos:start="519:26" pos:end="519:31">fw_cfg</name></expr></argument>, <argument pos:start="519:34" pos:end="519:50"><expr pos:start="519:34" pos:end="519:50"><name pos:start="519:34" pos:end="519:50">FW_CFG_PPC_KVM_HC</name></expr></argument>, <argument pos:start="519:53" pos:end="519:61"><expr pos:start="519:53" pos:end="519:61"><name pos:start="519:53" pos:end="519:61">hypercall</name></expr></argument>, <argument pos:start="519:64" pos:end="519:65"><expr pos:start="519:64" pos:end="519:65"><literal type="number" pos:start="519:64" pos:end="519:65">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="521:9" pos:end="524:0"><expr pos:start="521:9" pos:end="521:60"><call pos:start="521:9" pos:end="521:60"><name pos:start="521:9" pos:end="521:22">fw_cfg_add_i32</name><argument_list pos:start="521:23" pos:end="521:60">(<argument pos:start="521:24" pos:end="521:29"><expr pos:start="521:24" pos:end="521:29"><name pos:start="521:24" pos:end="521:29">fw_cfg</name></expr></argument>, <argument pos:start="521:32" pos:end="521:49"><expr pos:start="521:32" pos:end="521:49"><name pos:start="521:32" pos:end="521:49">FW_CFG_PPC_KVM_PID</name></expr></argument>, <argument pos:start="521:52" pos:end="521:59"><expr pos:start="521:52" pos:end="521:59"><call pos:start="521:52" pos:end="521:59"><name pos:start="521:52" pos:end="521:57">getpid</name><argument_list pos:start="521:58" pos:end="521:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="523:1" pos:end="523:6">#<cpp:directive pos:start="523:2" pos:end="523:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="525:7" pos:end="529:5">else <block pos:start="525:12" pos:end="529:5">{<block_content pos:start="527:9" pos:end="527:58">

        <expr_stmt pos:start="527:9" pos:end="527:58"><expr pos:start="527:9" pos:end="527:57"><call pos:start="527:9" pos:end="527:57"><name pos:start="527:9" pos:end="527:22">fw_cfg_add_i32</name><argument_list pos:start="527:23" pos:end="527:57">(<argument pos:start="527:24" pos:end="527:29"><expr pos:start="527:24" pos:end="527:29"><name pos:start="527:24" pos:end="527:29">fw_cfg</name></expr></argument>, <argument pos:start="527:32" pos:end="527:48"><expr pos:start="527:32" pos:end="527:48"><name pos:start="527:32" pos:end="527:48">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="527:51" pos:end="527:56"><expr pos:start="527:51" pos:end="527:56"><name pos:start="527:51" pos:end="527:56">TBFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="531:5" pos:end="531:78">/* Mac OS X requires a "known good" clock-frequency value; pass it one. */</comment>

    <expr_stmt pos:start="533:5" pos:end="533:60"><expr pos:start="533:5" pos:end="533:59"><call pos:start="533:5" pos:end="533:59"><name pos:start="533:5" pos:end="533:18">fw_cfg_add_i32</name><argument_list pos:start="533:19" pos:end="533:59">(<argument pos:start="533:20" pos:end="533:25"><expr pos:start="533:20" pos:end="533:25"><name pos:start="533:20" pos:end="533:25">fw_cfg</name></expr></argument>, <argument pos:start="533:28" pos:end="533:47"><expr pos:start="533:28" pos:end="533:47"><name pos:start="533:28" pos:end="533:47">FW_CFG_PPC_CLOCKFREQ</name></expr></argument>, <argument pos:start="533:50" pos:end="533:58"><expr pos:start="533:50" pos:end="533:58"><literal type="number" pos:start="533:50" pos:end="533:58">266000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="537:5" pos:end="537:52"><expr pos:start="537:5" pos:end="537:51"><call pos:start="537:5" pos:end="537:51"><name pos:start="537:5" pos:end="537:26">qemu_register_boot_set</name><argument_list pos:start="537:27" pos:end="537:51">(<argument pos:start="537:28" pos:end="537:42"><expr pos:start="537:28" pos:end="537:42"><name pos:start="537:28" pos:end="537:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="537:45" pos:end="537:50"><expr pos:start="537:45" pos:end="537:50"><name pos:start="537:45" pos:end="537:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
