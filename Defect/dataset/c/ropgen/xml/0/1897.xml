<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1897.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">vmdaudio_decode_frame</name><parameter_list pos:start="1:33" pos:end="5:49">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:47">AVCodecContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">avctx</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:43"><decl pos:start="3:34" pos:end="3:43"><type pos:start="3:34" pos:end="3:43"><name pos:start="3:34" pos:end="3:37">void</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:43">data</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:59"><decl pos:start="3:46" pos:end="3:59"><type pos:start="3:46" pos:end="3:59"><name pos:start="3:46" pos:end="3:48">int</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:59">data_size</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:48"><decl pos:start="5:34" pos:end="5:48"><type pos:start="5:34" pos:end="5:48"><name pos:start="5:34" pos:end="5:41">AVPacket</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:48">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="85:1">{<block_content pos:start="9:5" pos:end="83:23">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">VmdAudioContext</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:22">s</name> <init pos:start="13:24" pos:end="13:41">= <expr pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:30">avctx</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">block_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:58"><decl pos:start="17:5" pos:end="17:57"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:17">char</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:33">output_samples</name> <init pos:start="17:35" pos:end="17:57">= <expr pos:start="17:37" pos:end="17:57"><operator pos:start="17:37" pos:end="17:37">(</operator><name pos:start="17:38" pos:end="17:45">unsigned</name> <name pos:start="17:47" pos:end="17:50">char</name> <operator pos:start="17:52" pos:end="17:52">*</operator><operator pos:start="17:53" pos:end="17:53">)</operator><name pos:start="17:54" pos:end="17:57">data</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:16">buf_size</name> <operator pos:start="21:18" pos:end="21:18">&lt;</operator> <literal type="number" pos:start="21:20" pos:end="21:21">16</literal></expr>)</condition> <block pos:start="21:24" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:24">

        <expr_stmt pos:start="23:9" pos:end="23:70"><expr pos:start="23:9" pos:end="23:69"><call pos:start="23:9" pos:end="23:69"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="23:69">(<argument pos:start="23:16" pos:end="23:20"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">avctx</name></expr></argument>, <argument pos:start="23:23" pos:end="23:36"><expr pos:start="23:23" pos:end="23:36"><name pos:start="23:23" pos:end="23:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="23:39" pos:end="23:68"><expr pos:start="23:39" pos:end="23:68"><literal type="string" pos:start="23:39" pos:end="23:68">"skipping small junk packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:23"><expr pos:start="25:9" pos:end="25:22"><operator pos:start="25:9" pos:end="25:9">*</operator><name pos:start="25:10" pos:end="25:18">data_size</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <literal type="number" pos:start="25:22" pos:end="25:22">0</literal></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:24">return <expr pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:24"><expr pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:14">block_type</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <name pos:start="33:18" pos:end="33:23"><name pos:start="33:18" pos:end="33:20">buf</name><index pos:start="33:21" pos:end="33:23">[<expr pos:start="33:22" pos:end="33:22"><literal type="number" pos:start="33:22" pos:end="33:22">6</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:73">(<expr pos:start="35:9" pos:end="35:72"><name pos:start="35:9" pos:end="35:53"><name pos:start="35:9" pos:end="35:18">block_type</name> <argument_list type="generic" pos:start="35:20" pos:end="35:53">&lt; <argument pos:start="35:22" pos:end="35:51"><expr pos:start="35:22" pos:end="35:51"><name pos:start="35:22" pos:end="35:37">BLOCK_TYPE_AUDIO</name> <operator pos:start="35:39" pos:end="35:40">||</operator> <name pos:start="35:42" pos:end="35:51">block_type</name></expr></argument> &gt;</argument_list></name> <name pos:start="35:55" pos:end="35:72">BLOCK_TYPE_SILENCE</name></expr>)</condition> <block pos:start="35:75" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:31">

        <expr_stmt pos:start="37:9" pos:end="37:76"><expr pos:start="37:9" pos:end="37:75"><call pos:start="37:9" pos:end="37:75"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:75">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:62"><expr pos:start="37:37" pos:end="37:62"><literal type="string" pos:start="37:37" pos:end="37:62">"unknown block type: %d\n"</literal></expr></argument>, <argument pos:start="37:65" pos:end="37:74"><expr pos:start="37:65" pos:end="37:74"><name pos:start="37:65" pos:end="37:74">block_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:31">return <expr pos:start="39:16" pos:end="39:30"><call pos:start="39:16" pos:end="39:30"><name pos:start="39:16" pos:end="39:22">AVERROR</name><argument_list pos:start="39:23" pos:end="39:30">(<argument pos:start="39:24" pos:end="39:29"><expr pos:start="39:24" pos:end="39:29"><name pos:start="39:24" pos:end="39:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:19"><expr pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:7">buf</name>      <operator pos:start="43:14" pos:end="43:15">+=</operator> <literal type="number" pos:start="43:17" pos:end="43:18">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:19"><expr pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:12">buf_size</name> <operator pos:start="45:14" pos:end="45:15">-=</operator> <literal type="number" pos:start="45:17" pos:end="45:18">16</literal></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="79:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:39">(<expr pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:18">block_type</name> <operator pos:start="49:20" pos:end="49:21">==</operator> <name pos:start="49:23" pos:end="49:38">BLOCK_TYPE_AUDIO</name></expr>)</condition> <block pos:start="49:41" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:77">

        <comment type="block" pos:start="51:9" pos:end="51:38">/* the chunk contains audio */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:77"><expr pos:start="53:9" pos:end="53:76"><operator pos:start="53:9" pos:end="53:9">*</operator><name pos:start="53:10" pos:end="53:18">data_size</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <call pos:start="53:22" pos:end="53:76"><name pos:start="53:22" pos:end="53:39">vmdaudio_loadsound</name><argument_list pos:start="53:40" pos:end="53:76">(<argument pos:start="53:41" pos:end="53:41"><expr pos:start="53:41" pos:end="53:41"><name pos:start="53:41" pos:end="53:41">s</name></expr></argument>, <argument pos:start="53:44" pos:end="53:57"><expr pos:start="53:44" pos:end="53:57"><name pos:start="53:44" pos:end="53:57">output_samples</name></expr></argument>, <argument pos:start="53:60" pos:end="53:62"><expr pos:start="53:60" pos:end="53:62"><name pos:start="53:60" pos:end="53:62">buf</name></expr></argument>, <argument pos:start="53:65" pos:end="53:65"><expr pos:start="53:65" pos:end="53:65"><literal type="number" pos:start="53:65" pos:end="53:65">0</literal></expr></argument>, <argument pos:start="53:68" pos:end="53:75"><expr pos:start="53:68" pos:end="53:75"><name pos:start="53:68" pos:end="53:75">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="55:7" pos:end="73:5">else if <condition pos:start="55:15" pos:end="55:48">(<expr pos:start="55:16" pos:end="55:47"><name pos:start="55:16" pos:end="55:25">block_type</name> <operator pos:start="55:27" pos:end="55:28">==</operator> <name pos:start="55:30" pos:end="55:47">BLOCK_TYPE_INITIAL</name></expr>)</condition> <block pos:start="55:50" pos:end="73:5">{<block_content pos:start="59:9" pos:end="71:89">

        <comment type="block" pos:start="57:9" pos:end="57:58">/* initial chunk, may contain audio and silence */</comment>

        <decl_stmt pos:start="59:9" pos:end="59:38"><decl pos:start="59:9" pos:end="59:37"><type pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:16">uint32_t</name></type> <name pos:start="59:18" pos:end="59:22">flags</name> <init pos:start="59:24" pos:end="59:37">= <expr pos:start="59:26" pos:end="59:37"><call pos:start="59:26" pos:end="59:37"><name pos:start="59:26" pos:end="59:32">AV_RB32</name><argument_list pos:start="59:33" pos:end="59:37">(<argument pos:start="59:34" pos:end="59:36"><expr pos:start="59:34" pos:end="59:36"><name pos:start="59:34" pos:end="59:36">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:47"><decl pos:start="61:9" pos:end="61:46"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:25">silent_chunks</name> <init pos:start="61:27" pos:end="61:46">= <expr pos:start="61:29" pos:end="61:46"><call pos:start="61:29" pos:end="61:46"><name pos:start="61:29" pos:end="61:39">av_popcount</name><argument_list pos:start="61:40" pos:end="61:46">(<argument pos:start="61:41" pos:end="61:45"><expr pos:start="61:41" pos:end="61:45"><name pos:start="61:41" pos:end="61:45">flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:22"><expr pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:11">buf</name>      <operator pos:start="63:18" pos:end="63:19">+=</operator> <literal type="number" pos:start="63:21" pos:end="63:21">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:16">buf_size</name> <operator pos:start="65:18" pos:end="65:19">-=</operator> <literal type="number" pos:start="65:21" pos:end="65:21">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="69:22"><if pos:start="67:9" pos:end="69:22">if<condition pos:start="67:11" pos:end="67:70">(<expr pos:start="67:12" pos:end="67:69"><operator pos:start="67:12" pos:end="67:12">*</operator><name pos:start="67:13" pos:end="67:21">data_size</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <operator pos:start="67:25" pos:end="67:25">(</operator><name pos:start="67:26" pos:end="67:39"><name pos:start="67:26" pos:end="67:26">s</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:39">block_align</name></name><operator pos:start="67:40" pos:end="67:40">*</operator><name pos:start="67:41" pos:end="67:53">silent_chunks</name> <operator pos:start="67:55" pos:end="67:55">+</operator> <name pos:start="67:57" pos:end="67:64">buf_size</name><operator pos:start="67:65" pos:end="67:65">)</operator> <operator pos:start="67:67" pos:end="67:67">*</operator> <literal type="number" pos:start="67:69" pos:end="67:69">2</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:22"><block_content pos:start="69:13" pos:end="69:22">

            <return pos:start="69:13" pos:end="69:22">return <expr pos:start="69:20" pos:end="69:21"><operator pos:start="69:20" pos:end="69:20">-</operator><literal type="number" pos:start="69:21" pos:end="69:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:89"><expr pos:start="71:9" pos:end="71:88"><operator pos:start="71:9" pos:end="71:9">*</operator><name pos:start="71:10" pos:end="71:18">data_size</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <call pos:start="71:22" pos:end="71:88"><name pos:start="71:22" pos:end="71:39">vmdaudio_loadsound</name><argument_list pos:start="71:40" pos:end="71:88">(<argument pos:start="71:41" pos:end="71:41"><expr pos:start="71:41" pos:end="71:41"><name pos:start="71:41" pos:end="71:41">s</name></expr></argument>, <argument pos:start="71:44" pos:end="71:57"><expr pos:start="71:44" pos:end="71:57"><name pos:start="71:44" pos:end="71:57">output_samples</name></expr></argument>, <argument pos:start="71:60" pos:end="71:62"><expr pos:start="71:60" pos:end="71:62"><name pos:start="71:60" pos:end="71:62">buf</name></expr></argument>, <argument pos:start="71:65" pos:end="71:77"><expr pos:start="71:65" pos:end="71:77"><name pos:start="71:65" pos:end="71:77">silent_chunks</name></expr></argument>, <argument pos:start="71:80" pos:end="71:87"><expr pos:start="71:80" pos:end="71:87"><name pos:start="71:80" pos:end="71:87">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="73:7" pos:end="79:5">else if <condition pos:start="73:15" pos:end="73:48">(<expr pos:start="73:16" pos:end="73:47"><name pos:start="73:16" pos:end="73:25">block_type</name> <operator pos:start="73:27" pos:end="73:28">==</operator> <name pos:start="73:30" pos:end="73:47">BLOCK_TYPE_SILENCE</name></expr>)</condition> <block pos:start="73:50" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:70">

        <comment type="block" pos:start="75:9" pos:end="75:26">/* silent chunk */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:70"><expr pos:start="77:9" pos:end="77:69"><operator pos:start="77:9" pos:end="77:9">*</operator><name pos:start="77:10" pos:end="77:18">data_size</name> <operator pos:start="77:20" pos:end="77:20">=</operator> <call pos:start="77:22" pos:end="77:69"><name pos:start="77:22" pos:end="77:39">vmdaudio_loadsound</name><argument_list pos:start="77:40" pos:end="77:69">(<argument pos:start="77:41" pos:end="77:41"><expr pos:start="77:41" pos:end="77:41"><name pos:start="77:41" pos:end="77:41">s</name></expr></argument>, <argument pos:start="77:44" pos:end="77:57"><expr pos:start="77:44" pos:end="77:57"><name pos:start="77:44" pos:end="77:57">output_samples</name></expr></argument>, <argument pos:start="77:60" pos:end="77:62"><expr pos:start="77:60" pos:end="77:62"><name pos:start="77:60" pos:end="77:62">buf</name></expr></argument>, <argument pos:start="77:65" pos:end="77:65"><expr pos:start="77:65" pos:end="77:65"><literal type="number" pos:start="77:65" pos:end="77:65">1</literal></expr></argument>, <argument pos:start="77:68" pos:end="77:68"><expr pos:start="77:68" pos:end="77:68"><literal type="number" pos:start="77:68" pos:end="77:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="83:5" pos:end="83:23">return <expr pos:start="83:12" pos:end="83:22"><name pos:start="83:12" pos:end="83:22"><name pos:start="83:12" pos:end="83:16">avpkt</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
