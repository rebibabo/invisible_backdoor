<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26262.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">link_filter_inouts</name><parameter_list pos:start="1:30" pos:end="5:73">(<parameter pos:start="1:31" pos:end="1:55"><decl pos:start="1:31" pos:end="1:55"><type pos:start="1:31" pos:end="1:55"><name pos:start="1:31" pos:end="1:45">AVFilterContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:55">filt_ctx</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:57"><decl pos:start="3:31" pos:end="3:57"><type pos:start="3:31" pos:end="3:57"><name pos:start="3:31" pos:end="3:43">AVFilterInOut</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier><modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:57">curr_inputs</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:57"><decl pos:start="5:31" pos:end="5:57"><type pos:start="5:31" pos:end="5:57"><name pos:start="5:31" pos:end="5:43">AVFilterInOut</name> <modifier pos:start="5:45" pos:end="5:45">*</modifier><modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:57">open_inputs</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:72"><decl pos:start="5:60" pos:end="5:72"><type pos:start="5:60" pos:end="5:72"><name pos:start="5:60" pos:end="5:63">void</name> <modifier pos:start="5:65" pos:end="5:65">*</modifier></type><name pos:start="5:66" pos:end="5:72">log_ctx</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="89:1">{<block_content pos:start="9:5" pos:end="87:13">

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">pad</name></decl>, <decl pos:start="9:14" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:16">ret</name></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="49:5">for <control pos:start="13:9" pos:end="13:53">(<init pos:start="13:10" pos:end="13:17"><expr pos:start="13:10" pos:end="13:16"><name pos:start="13:10" pos:end="13:12">pad</name> <operator pos:start="13:14" pos:end="13:14">=</operator> <literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</init> <condition pos:start="13:19" pos:end="13:46"><expr pos:start="13:19" pos:end="13:45"><name pos:start="13:19" pos:end="13:21">pad</name> <operator pos:start="13:23" pos:end="13:23">&lt;</operator> <name pos:start="13:25" pos:end="13:45"><name pos:start="13:25" pos:end="13:32">filt_ctx</name><operator pos:start="13:33" pos:end="13:34">-&gt;</operator><name pos:start="13:35" pos:end="13:45">input_count</name></name></expr>;</condition> <incr pos:start="13:48" pos:end="13:52"><expr pos:start="13:48" pos:end="13:52"><name pos:start="13:48" pos:end="13:50">pad</name><operator pos:start="13:51" pos:end="13:52">++</operator></expr></incr>)</control> <block pos:start="13:55" pos:end="49:5">{<block_content pos:start="15:9" pos:end="47:9">

        <decl_stmt pos:start="15:9" pos:end="15:40"><decl pos:start="15:9" pos:end="15:39"><type pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:21">AVFilterInOut</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:24">p</name> <init pos:start="15:26" pos:end="15:39">= <expr pos:start="15:28" pos:end="15:39"><operator pos:start="15:28" pos:end="15:28">*</operator><name pos:start="15:29" pos:end="15:39">curr_inputs</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="25:35"><if pos:start="19:9" pos:end="21:48">if <condition pos:start="19:12" pos:end="19:14">(<expr pos:start="19:13" pos:end="19:13"><name pos:start="19:13" pos:end="19:13">p</name></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:48"><block_content pos:start="21:13" pos:end="21:48">

            <expr_stmt pos:start="21:13" pos:end="21:48"><expr pos:start="21:13" pos:end="21:47"><operator pos:start="21:13" pos:end="21:13">*</operator><name pos:start="21:14" pos:end="21:24">curr_inputs</name> <operator pos:start="21:26" pos:end="21:26">=</operator> <name pos:start="21:28" pos:end="21:47"><operator pos:start="21:28" pos:end="21:28">(</operator><operator pos:start="21:29" pos:end="21:29">*</operator><name pos:start="21:30" pos:end="21:40">curr_inputs</name><operator pos:start="21:41" pos:end="21:41">)</operator><operator pos:start="21:42" pos:end="21:43">-&gt;</operator><name pos:start="21:44" pos:end="21:47">next</name></name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="23:9" pos:end="25:35">else if <condition pos:start="23:17" pos:end="23:47">(<expr pos:start="23:18" pos:end="23:46"><operator pos:start="23:18" pos:end="23:18">!</operator><operator pos:start="23:19" pos:end="23:19">(</operator><name pos:start="23:20" pos:end="23:20">p</name> <operator pos:start="23:22" pos:end="23:22">=</operator> <call pos:start="23:24" pos:end="23:45"><name pos:start="23:24" pos:end="23:33">av_mallocz</name><argument_list pos:start="23:34" pos:end="23:45">(<argument pos:start="23:35" pos:end="23:44"><expr pos:start="23:35" pos:end="23:44"><sizeof pos:start="23:35" pos:end="23:44">sizeof<argument_list pos:start="23:41" pos:end="23:44">(<argument pos:start="23:42" pos:end="23:43"><expr pos:start="23:42" pos:end="23:43"><operator pos:start="23:42" pos:end="23:42">*</operator><name pos:start="23:43" pos:end="23:43">p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="23:46" pos:end="23:46">)</operator></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:35"><block_content pos:start="25:13" pos:end="25:35">

            <return pos:start="25:13" pos:end="25:35">return <expr pos:start="25:20" pos:end="25:34"><call pos:start="25:20" pos:end="25:34"><name pos:start="25:20" pos:end="25:26">AVERROR</name><argument_list pos:start="25:27" pos:end="25:34">(<argument pos:start="25:28" pos:end="25:33"><expr pos:start="25:28" pos:end="25:33"><name pos:start="25:28" pos:end="25:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="29:9" pos:end="47:9"><if pos:start="29:9" pos:end="39:9">if <condition pos:start="29:12" pos:end="29:26">(<expr pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:13">p</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:25">filter_ctx</name></name></expr>)</condition> <block pos:start="29:28" pos:end="39:9">{<block_content pos:start="31:13" pos:end="37:23">

            <if_stmt pos:start="31:13" pos:end="33:27"><if pos:start="31:13" pos:end="33:27">if <condition pos:start="31:16" pos:end="31:91">(<expr pos:start="31:17" pos:end="31:90"><operator pos:start="31:17" pos:end="31:17">(</operator><name pos:start="31:18" pos:end="31:20">ret</name> <operator pos:start="31:22" pos:end="31:22">=</operator> <call pos:start="31:24" pos:end="31:85"><name pos:start="31:24" pos:end="31:34">link_filter</name><argument_list pos:start="31:35" pos:end="31:85">(<argument pos:start="31:36" pos:end="31:48"><expr pos:start="31:36" pos:end="31:48"><name pos:start="31:36" pos:end="31:48"><name pos:start="31:36" pos:end="31:36">p</name><operator pos:start="31:37" pos:end="31:38">-&gt;</operator><name pos:start="31:39" pos:end="31:48">filter_ctx</name></name></expr></argument>, <argument pos:start="31:51" pos:end="31:60"><expr pos:start="31:51" pos:end="31:60"><name pos:start="31:51" pos:end="31:60"><name pos:start="31:51" pos:end="31:51">p</name><operator pos:start="31:52" pos:end="31:53">-&gt;</operator><name pos:start="31:54" pos:end="31:60">pad_idx</name></name></expr></argument>, <argument pos:start="31:63" pos:end="31:70"><expr pos:start="31:63" pos:end="31:70"><name pos:start="31:63" pos:end="31:70">filt_ctx</name></expr></argument>, <argument pos:start="31:73" pos:end="31:75"><expr pos:start="31:73" pos:end="31:75"><name pos:start="31:73" pos:end="31:75">pad</name></expr></argument>, <argument pos:start="31:78" pos:end="31:84"><expr pos:start="31:78" pos:end="31:84"><name pos:start="31:78" pos:end="31:84">log_ctx</name></expr></argument>)</argument_list></call><operator pos:start="31:86" pos:end="31:86">)</operator> <operator pos:start="31:88" pos:end="31:88">&lt;</operator> <literal type="number" pos:start="31:90" pos:end="31:90">0</literal></expr>)</condition><block type="pseudo" pos:start="33:17" pos:end="33:27"><block_content pos:start="33:17" pos:end="33:27">

                <return pos:start="33:17" pos:end="33:27">return <expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:29"><expr pos:start="35:13" pos:end="35:28"><call pos:start="35:13" pos:end="35:28"><name pos:start="35:13" pos:end="35:19">av_free</name><argument_list pos:start="35:20" pos:end="35:28">(<argument pos:start="35:21" pos:end="35:27"><expr pos:start="35:21" pos:end="35:27"><name pos:start="35:21" pos:end="35:27"><name pos:start="35:21" pos:end="35:21">p</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:27">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:23"><expr pos:start="37:13" pos:end="37:22"><call pos:start="37:13" pos:end="37:22"><name pos:start="37:13" pos:end="37:19">av_free</name><argument_list pos:start="37:20" pos:end="37:22">(<argument pos:start="37:21" pos:end="37:21"><expr pos:start="37:21" pos:end="37:21"><name pos:start="37:21" pos:end="37:21">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="39:11" pos:end="47:9">else <block pos:start="39:16" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:42">

            <expr_stmt pos:start="41:13" pos:end="41:37"><expr pos:start="41:13" pos:end="41:36"><name pos:start="41:13" pos:end="41:25"><name pos:start="41:13" pos:end="41:13">p</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:25">filter_ctx</name></name> <operator pos:start="41:27" pos:end="41:27">=</operator> <name pos:start="41:29" pos:end="41:36">filt_ctx</name></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:29"><expr pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:22"><name pos:start="43:13" pos:end="43:13">p</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:22">pad_idx</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <name pos:start="43:26" pos:end="43:28">pad</name></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:42"><expr pos:start="45:13" pos:end="45:41"><call pos:start="45:13" pos:end="45:41"><name pos:start="45:13" pos:end="45:24">append_inout</name><argument_list pos:start="45:25" pos:end="45:41">(<argument pos:start="45:26" pos:end="45:36"><expr pos:start="45:26" pos:end="45:36"><name pos:start="45:26" pos:end="45:36">open_inputs</name></expr></argument>, <argument pos:start="45:39" pos:end="45:40"><expr pos:start="45:39" pos:end="45:40"><operator pos:start="45:39" pos:end="45:39">&amp;</operator><name pos:start="45:40" pos:end="45:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="63:5">if <condition pos:start="53:8" pos:end="53:21">(<expr pos:start="53:9" pos:end="53:20"><operator pos:start="53:9" pos:end="53:9">*</operator><name pos:start="53:10" pos:end="53:20">curr_inputs</name></expr>)</condition> <block pos:start="53:23" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:31">

        <expr_stmt pos:start="55:9" pos:end="59:39"><expr pos:start="55:9" pos:end="59:38"><call pos:start="55:9" pos:end="59:38"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="59:38">(<argument pos:start="55:16" pos:end="55:22"><expr pos:start="55:16" pos:end="55:22"><name pos:start="55:16" pos:end="55:22">log_ctx</name></expr></argument>, <argument pos:start="55:25" pos:end="55:36"><expr pos:start="55:25" pos:end="55:36"><name pos:start="55:25" pos:end="55:36">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="57:16" pos:end="57:67"><expr pos:start="57:16" pos:end="57:67"><literal type="string" pos:start="57:16" pos:end="57:67">"Too many inputs specified for the \"%s\" filter.\n"</literal></expr></argument>,

               <argument pos:start="59:16" pos:end="59:37"><expr pos:start="59:16" pos:end="59:37"><name pos:start="59:16" pos:end="59:37"><name pos:start="59:16" pos:end="59:23">filt_ctx</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:31">filter</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:37">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:31">return <expr pos:start="61:16" pos:end="61:30"><call pos:start="61:16" pos:end="61:30"><name pos:start="61:16" pos:end="61:22">AVERROR</name><argument_list pos:start="61:23" pos:end="61:30">(<argument pos:start="61:24" pos:end="61:29"><expr pos:start="61:24" pos:end="61:29"><name pos:start="61:24" pos:end="61:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:33"><expr pos:start="67:5" pos:end="67:32"><name pos:start="67:5" pos:end="67:7">pad</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <name pos:start="67:11" pos:end="67:32"><name pos:start="67:11" pos:end="67:18">filt_ctx</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:32">output_count</name></name></expr>;</expr_stmt>

    <while pos:start="69:5" pos:end="83:5">while <condition pos:start="69:11" pos:end="69:17">(<expr pos:start="69:12" pos:end="69:16"><name pos:start="69:12" pos:end="69:14">pad</name><operator pos:start="69:15" pos:end="69:16">--</operator></expr>)</condition> <block pos:start="69:19" pos:end="83:5">{<block_content pos:start="71:9" pos:end="81:45">

        <decl_stmt pos:start="71:9" pos:end="71:69"><decl pos:start="71:9" pos:end="71:68"><type pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:21">AVFilterInOut</name> <modifier pos:start="71:23" pos:end="71:23">*</modifier></type><name pos:start="71:24" pos:end="71:32">currlinkn</name> <init pos:start="71:34" pos:end="71:68">= <expr pos:start="71:36" pos:end="71:68"><call pos:start="71:36" pos:end="71:68"><name pos:start="71:36" pos:end="71:45">av_mallocz</name><argument_list pos:start="71:46" pos:end="71:68">(<argument pos:start="71:47" pos:end="71:67"><expr pos:start="71:47" pos:end="71:67"><sizeof pos:start="71:47" pos:end="71:67">sizeof<argument_list pos:start="71:53" pos:end="71:67">(<argument pos:start="71:54" pos:end="71:66"><expr pos:start="71:54" pos:end="71:66"><name pos:start="71:54" pos:end="71:66">AVFilterInOut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="73:9" pos:end="75:35"><if pos:start="73:9" pos:end="75:35">if <condition pos:start="73:12" pos:end="73:23">(<expr pos:start="73:13" pos:end="73:22"><operator pos:start="73:13" pos:end="73:13">!</operator><name pos:start="73:14" pos:end="73:22">currlinkn</name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:35"><block_content pos:start="75:13" pos:end="75:35">

            <return pos:start="75:13" pos:end="75:35">return <expr pos:start="75:20" pos:end="75:34"><call pos:start="75:20" pos:end="75:34"><name pos:start="75:20" pos:end="75:26">AVERROR</name><argument_list pos:start="75:27" pos:end="75:34">(<argument pos:start="75:28" pos:end="75:33"><expr pos:start="75:28" pos:end="75:33"><name pos:start="75:28" pos:end="75:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:42"><expr pos:start="77:9" pos:end="77:41"><name pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:17">currlinkn</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:29">filter_ctx</name></name>  <operator pos:start="77:32" pos:end="77:32">=</operator> <name pos:start="77:34" pos:end="77:41">filt_ctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:33"><expr pos:start="79:9" pos:end="79:32"><name pos:start="79:9" pos:end="79:26"><name pos:start="79:9" pos:end="79:17">currlinkn</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:26">pad_idx</name></name> <operator pos:start="79:28" pos:end="79:28">=</operator> <name pos:start="79:30" pos:end="79:32">pad</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:45"><expr pos:start="81:9" pos:end="81:44"><call pos:start="81:9" pos:end="81:44"><name pos:start="81:9" pos:end="81:20">insert_inout</name><argument_list pos:start="81:21" pos:end="81:44">(<argument pos:start="81:22" pos:end="81:32"><expr pos:start="81:22" pos:end="81:32"><name pos:start="81:22" pos:end="81:32">curr_inputs</name></expr></argument>, <argument pos:start="81:35" pos:end="81:43"><expr pos:start="81:35" pos:end="81:43"><name pos:start="81:35" pos:end="81:43">currlinkn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="87:5" pos:end="87:13">return <expr pos:start="87:12" pos:end="87:12"><literal type="number" pos:start="87:12" pos:end="87:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
