<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14242.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">CharDriverState</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:37">chr_baum_init</name><parameter_list pos:start="1:38" pos:end="7:51">(<parameter pos:start="1:39" pos:end="1:52"><decl pos:start="1:39" pos:end="1:52"><type pos:start="1:39" pos:end="1:52"><specifier pos:start="1:39" pos:end="1:43">const</specifier> <name pos:start="1:45" pos:end="1:48">char</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">id</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:61"><decl pos:start="3:39" pos:end="3:61"><type pos:start="3:39" pos:end="3:61"><name pos:start="3:39" pos:end="3:52">ChardevBackend</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:61">backend</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:56"><decl pos:start="5:39" pos:end="5:56"><type pos:start="5:39" pos:end="5:56"><name pos:start="5:39" pos:end="5:51">ChardevReturn</name> <modifier pos:start="5:53" pos:end="5:53">*</modifier></type><name pos:start="5:54" pos:end="5:56">ret</name></decl></parameter>,

                                      <parameter pos:start="7:39" pos:end="7:50"><decl pos:start="7:39" pos:end="7:50"><type pos:start="7:39" pos:end="7:50"><name pos:start="7:39" pos:end="7:43">Error</name> <modifier pos:start="7:45" pos:end="7:45">*</modifier><modifier pos:start="7:46" pos:end="7:46">*</modifier></type><name pos:start="7:47" pos:end="7:50">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="141:1">{<block_content pos:start="11:5" pos:end="139:16">

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19">BaumDriverState</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:25">baum</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">CharDriverState</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:24">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="20:0"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:19">brlapi_handle_t</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:27">handle</name></decl>;</decl_stmt>

<cpp:if pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:23"><call pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:11">defined</name><argument_list pos:start="17:12" pos:end="17:23">(<argument pos:start="17:13" pos:end="17:22"><expr pos:start="17:13" pos:end="17:22"><name pos:start="17:13" pos:end="17:22">CONFIG_SDL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if pos:start="19:1" pos:end="19:49">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:49"><name pos:start="19:5" pos:end="19:23">SDL_COMPILEDVERSION</name> <operator pos:start="19:25" pos:end="19:25">&lt;</operator> <call pos:start="19:27" pos:end="19:49"><name pos:start="19:27" pos:end="19:40">SDL_VERSIONNUM</name><argument_list pos:start="19:41" pos:end="19:49">(<argument pos:start="19:42" pos:end="19:48"><expr pos:start="19:42" pos:end="19:48"><literal type="number" pos:start="19:42" pos:end="19:42">2</literal><operator pos:start="19:43" pos:end="19:43">,</operator> <literal type="number" pos:start="19:45" pos:end="19:45">0</literal><operator pos:start="19:46" pos:end="19:46">,</operator> <literal type="number" pos:start="19:48" pos:end="19:48">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="21:5" pos:end="26:0"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:17">SDL_SysWMinfo</name></type> <name pos:start="21:19" pos:end="21:22">info</name></decl>;</decl_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="27:5" pos:end="27:12"><decl pos:start="27:5" pos:end="27:11"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">tty</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:46"><expr pos:start="31:5" pos:end="31:45"><name pos:start="31:5" pos:end="31:8">baum</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:45"><name pos:start="31:12" pos:end="31:20">g_malloc0</name><argument_list pos:start="31:21" pos:end="31:45">(<argument pos:start="31:22" pos:end="31:44"><expr pos:start="31:22" pos:end="31:44"><sizeof pos:start="31:22" pos:end="31:44">sizeof<argument_list pos:start="31:28" pos:end="31:44">(<argument pos:start="31:29" pos:end="31:43"><expr pos:start="31:29" pos:end="31:43"><name pos:start="31:29" pos:end="31:43">BaumDriverState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:39"><expr pos:start="33:5" pos:end="33:38"><name pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:8">baum</name><operator pos:start="33:9" pos:end="33:10">-&gt;</operator><name pos:start="33:11" pos:end="33:13">chr</name></name> <operator pos:start="33:15" pos:end="33:15">=</operator> <name pos:start="33:17" pos:end="33:19">chr</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:38"><name pos:start="33:23" pos:end="33:36">qemu_chr_alloc</name><argument_list pos:start="33:37" pos:end="33:38">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:23"><expr pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:7">chr</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:15">opaque</name></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:22">baum</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:32"><expr pos:start="39:5" pos:end="39:31"><name pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:7">chr</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:18">chr_write</name></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:31">baum_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:46"><expr pos:start="41:5" pos:end="41:45"><name pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:7">chr</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:25">chr_accept_input</name></name> <operator pos:start="41:27" pos:end="41:27">=</operator> <name pos:start="41:29" pos:end="41:45">baum_accept_input</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:32"><expr pos:start="43:5" pos:end="43:31"><name pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:7">chr</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:18">chr_close</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <name pos:start="43:22" pos:end="43:31">baum_close</name></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:47"><expr pos:start="47:5" pos:end="47:46"><name pos:start="47:5" pos:end="47:10">handle</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <call pos:start="47:14" pos:end="47:46"><name pos:start="47:14" pos:end="47:22">g_malloc0</name><argument_list pos:start="47:23" pos:end="47:46">(<argument pos:start="47:24" pos:end="47:45"><expr pos:start="47:24" pos:end="47:45"><call pos:start="47:24" pos:end="47:45"><name pos:start="47:24" pos:end="47:43">brlapi_getHandleSize</name><argument_list pos:start="47:44" pos:end="47:45">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:26"><expr pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:16"><name pos:start="49:5" pos:end="49:8">baum</name><operator pos:start="49:9" pos:end="49:10">-&gt;</operator><name pos:start="49:11" pos:end="49:16">brlapi</name></name> <operator pos:start="49:18" pos:end="49:18">=</operator> <name pos:start="49:20" pos:end="49:25">handle</name></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:65"><expr pos:start="53:5" pos:end="53:64"><name pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:8">baum</name><operator pos:start="53:9" pos:end="53:10">-&gt;</operator><name pos:start="53:11" pos:end="53:19">brlapi_fd</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:64"><name pos:start="53:23" pos:end="53:44">brlapi__openConnection</name><argument_list pos:start="53:45" pos:end="53:64">(<argument pos:start="53:46" pos:end="53:51"><expr pos:start="53:46" pos:end="53:51"><name pos:start="53:46" pos:end="53:51">handle</name></expr></argument>, <argument pos:start="53:54" pos:end="53:57"><expr pos:start="53:54" pos:end="53:57"><name pos:start="53:54" pos:end="53:57">NULL</name></expr></argument>, <argument pos:start="53:60" pos:end="53:63"><expr pos:start="53:60" pos:end="53:63"><name pos:start="53:60" pos:end="53:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:30">(<expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:12">baum</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:23">brlapi_fd</name></name> <operator pos:start="55:25" pos:end="55:26">==</operator> <operator pos:start="55:28" pos:end="55:28">-</operator><literal type="number" pos:start="55:29" pos:end="55:29">1</literal></expr>)</condition> <block pos:start="55:32" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:25">

        <expr_stmt pos:start="57:9" pos:end="59:61"><expr pos:start="57:9" pos:end="59:60"><call pos:start="57:9" pos:end="59:60"><name pos:start="57:9" pos:end="57:18">error_setg</name><argument_list pos:start="57:19" pos:end="59:60">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">errp</name></expr></argument>, <argument pos:start="57:26" pos:end="57:53"><expr pos:start="57:26" pos:end="57:53"><literal type="string" pos:start="57:26" pos:end="57:53">"brlapi__openConnection: %s"</literal></expr></argument>,

                   <argument pos:start="59:20" pos:end="59:59"><expr pos:start="59:20" pos:end="59:59"><call pos:start="59:20" pos:end="59:59"><name pos:start="59:20" pos:end="59:34">brlapi_strerror</name><argument_list pos:start="59:35" pos:end="59:59">(<argument pos:start="59:36" pos:end="59:58"><expr pos:start="59:36" pos:end="59:58"><call pos:start="59:36" pos:end="59:58"><name pos:start="59:36" pos:end="59:56">brlapi_error_location</name><argument_list pos:start="59:57" pos:end="59:58">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:25">goto <name pos:start="61:14" pos:end="61:24">fail_handle</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:92"><expr pos:start="67:5" pos:end="67:91"><name pos:start="67:5" pos:end="67:25"><name pos:start="67:5" pos:end="67:8">baum</name><operator pos:start="67:9" pos:end="67:10">-&gt;</operator><name pos:start="67:11" pos:end="67:25">cellCount_timer</name></name> <operator pos:start="67:27" pos:end="67:27">=</operator> <call pos:start="67:29" pos:end="67:91"><name pos:start="67:29" pos:end="67:40">timer_new_ns</name><argument_list pos:start="67:41" pos:end="67:91">(<argument pos:start="67:42" pos:end="67:59"><expr pos:start="67:42" pos:end="67:59"><name pos:start="67:42" pos:end="67:59">QEMU_CLOCK_VIRTUAL</name></expr></argument>, <argument pos:start="67:62" pos:end="67:84"><expr pos:start="67:62" pos:end="67:84"><name pos:start="67:62" pos:end="67:84">baum_cellCount_timer_cb</name></expr></argument>, <argument pos:start="67:87" pos:end="67:90"><expr pos:start="67:87" pos:end="67:90"><name pos:start="67:87" pos:end="67:90">baum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="86:0"><if pos:start="71:5" pos:end="86:0">if <condition pos:start="71:8" pos:end="71:65">(<expr pos:start="71:9" pos:end="71:64"><call pos:start="71:9" pos:end="71:58"><name pos:start="71:9" pos:end="71:30">brlapi__getDisplaySize</name><argument_list pos:start="71:31" pos:end="71:58">(<argument pos:start="71:32" pos:end="71:37"><expr pos:start="71:32" pos:end="71:37"><name pos:start="71:32" pos:end="71:37">handle</name></expr></argument>, <argument pos:start="71:40" pos:end="71:47"><expr pos:start="71:40" pos:end="71:47"><operator pos:start="71:40" pos:end="71:40">&amp;</operator><name pos:start="71:41" pos:end="71:47"><name pos:start="71:41" pos:end="71:44">baum</name><operator pos:start="71:45" pos:end="71:46">-&gt;</operator><name pos:start="71:47" pos:end="71:47">x</name></name></expr></argument>, <argument pos:start="71:50" pos:end="71:57"><expr pos:start="71:50" pos:end="71:57"><operator pos:start="71:50" pos:end="71:50">&amp;</operator><name pos:start="71:51" pos:end="71:57"><name pos:start="71:51" pos:end="71:54">baum</name><operator pos:start="71:55" pos:end="71:56">-&gt;</operator><name pos:start="71:57" pos:end="71:57">y</name></name></expr></argument>)</argument_list></call> <operator pos:start="71:60" pos:end="71:61">==</operator> <operator pos:start="71:63" pos:end="71:63">-</operator><literal type="number" pos:start="71:64" pos:end="71:64">1</literal></expr>)</condition> <block pos:start="71:67" pos:end="86:0">{<block_content pos:start="73:9" pos:end="77:18">

        <expr_stmt pos:start="73:9" pos:end="75:61"><expr pos:start="73:9" pos:end="75:60"><call pos:start="73:9" pos:end="75:60"><name pos:start="73:9" pos:end="73:18">error_setg</name><argument_list pos:start="73:19" pos:end="75:60">(<argument pos:start="73:20" pos:end="73:23"><expr pos:start="73:20" pos:end="73:23"><name pos:start="73:20" pos:end="73:23">errp</name></expr></argument>, <argument pos:start="73:26" pos:end="73:53"><expr pos:start="73:26" pos:end="73:53"><literal type="string" pos:start="73:26" pos:end="73:53">"brlapi__getDisplaySize: %s"</literal></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:59"><expr pos:start="75:20" pos:end="75:59"><call pos:start="75:20" pos:end="75:59"><name pos:start="75:20" pos:end="75:34">brlapi_strerror</name><argument_list pos:start="75:35" pos:end="75:59">(<argument pos:start="75:36" pos:end="75:58"><expr pos:start="75:36" pos:end="75:58"><call pos:start="75:36" pos:end="75:58"><name pos:start="75:36" pos:end="75:56">brlapi_error_location</name><argument_list pos:start="75:57" pos:end="75:58">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:18">goto <name pos:start="77:14" pos:end="77:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="83:1" pos:end="83:23">#<cpp:directive pos:start="83:2" pos:end="83:3">if</cpp:directive> <expr pos:start="83:5" pos:end="83:23"><call pos:start="83:5" pos:end="83:23"><name pos:start="83:5" pos:end="83:11">defined</name><argument_list pos:start="83:12" pos:end="83:23">(<argument pos:start="83:13" pos:end="83:22"><expr pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:22">CONFIG_SDL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if pos:start="85:1" pos:end="85:49">#<cpp:directive pos:start="85:2" pos:end="85:3">if</cpp:directive> <expr pos:start="85:5" pos:end="85:49"><name pos:start="85:5" pos:end="85:23">SDL_COMPILEDVERSION</name> <operator pos:start="85:25" pos:end="85:25">&lt;</operator> <call pos:start="85:27" pos:end="85:49"><name pos:start="85:27" pos:end="85:40">SDL_VERSIONNUM</name><argument_list pos:start="85:41" pos:end="85:49">(<argument pos:start="85:42" pos:end="85:48"><expr pos:start="85:42" pos:end="85:48"><literal type="number" pos:start="85:42" pos:end="85:42">2</literal><operator pos:start="85:43" pos:end="85:43">,</operator> <literal type="number" pos:start="85:45" pos:end="85:45">0</literal><operator pos:start="85:46" pos:end="85:46">,</operator> <literal type="number" pos:start="85:48" pos:end="85:48">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="87:5" pos:end="87:35"><expr pos:start="87:5" pos:end="87:34"><call pos:start="87:5" pos:end="87:34"><name pos:start="87:5" pos:end="87:10">memset</name><argument_list pos:start="87:11" pos:end="87:34">(<argument pos:start="87:12" pos:end="87:16"><expr pos:start="87:12" pos:end="87:16"><operator pos:start="87:12" pos:end="87:12">&amp;</operator><name pos:start="87:13" pos:end="87:16">info</name></expr></argument>, <argument pos:start="87:19" pos:end="87:19"><expr pos:start="87:19" pos:end="87:19"><literal type="number" pos:start="87:19" pos:end="87:19">0</literal></expr></argument>, <argument pos:start="87:22" pos:end="87:33"><expr pos:start="87:22" pos:end="87:33"><sizeof pos:start="87:22" pos:end="87:33">sizeof<argument_list pos:start="87:28" pos:end="87:33">(<argument pos:start="87:29" pos:end="87:32"><expr pos:start="87:29" pos:end="87:32"><name pos:start="87:29" pos:end="87:32">info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:31"><expr pos:start="89:5" pos:end="89:30"><call pos:start="89:5" pos:end="89:30"><name pos:start="89:5" pos:end="89:15">SDL_VERSION</name><argument_list pos:start="89:16" pos:end="89:30">(<argument pos:start="89:17" pos:end="89:29"><expr pos:start="89:17" pos:end="89:29"><operator pos:start="89:17" pos:end="89:17">&amp;</operator><name pos:start="89:18" pos:end="89:29"><name pos:start="89:18" pos:end="89:21">info</name><operator pos:start="89:22" pos:end="89:22">.</operator><name pos:start="89:23" pos:end="89:29">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="101:33"><if pos:start="91:5" pos:end="93:37">if <condition pos:start="91:8" pos:end="91:29">(<expr pos:start="91:9" pos:end="91:28"><call pos:start="91:9" pos:end="91:28"><name pos:start="91:9" pos:end="91:21">SDL_GetWMInfo</name><argument_list pos:start="91:22" pos:end="91:28">(<argument pos:start="91:23" pos:end="91:27"><expr pos:start="91:23" pos:end="91:27"><operator pos:start="91:23" pos:end="91:23">&amp;</operator><name pos:start="91:24" pos:end="91:27">info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:37"><block_content pos:start="93:9" pos:end="93:37">

        <expr_stmt pos:start="93:9" pos:end="93:37"><expr pos:start="93:9" pos:end="93:36"><name pos:start="93:9" pos:end="93:11">tty</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <name pos:start="93:15" pos:end="93:36"><name pos:start="93:15" pos:end="93:18">info</name><operator pos:start="93:19" pos:end="93:19">.</operator><name pos:start="93:20" pos:end="93:23">info</name><operator pos:start="93:24" pos:end="93:24">.</operator><name pos:start="93:25" pos:end="93:27">x11</name><operator pos:start="93:28" pos:end="93:28">.</operator><name pos:start="93:29" pos:end="93:36">wmwindow</name></name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="95:5" pos:end="101:33">else<block type="pseudo" pos:start="101:9" pos:end="101:33"><block_content pos:start="101:9" pos:end="101:33">

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="101:9" pos:end="101:33"><expr pos:start="101:9" pos:end="101:32"><name pos:start="101:9" pos:end="101:11">tty</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <name pos:start="101:15" pos:end="101:32">BRLAPI_TTY_DEFAULT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="113:5">if <condition pos:start="105:8" pos:end="105:54">(<expr pos:start="105:9" pos:end="105:53"><call pos:start="105:9" pos:end="105:47"><name pos:start="105:9" pos:end="105:28">brlapi__enterTtyMode</name><argument_list pos:start="105:29" pos:end="105:47">(<argument pos:start="105:30" pos:end="105:35"><expr pos:start="105:30" pos:end="105:35"><name pos:start="105:30" pos:end="105:35">handle</name></expr></argument>, <argument pos:start="105:38" pos:end="105:40"><expr pos:start="105:38" pos:end="105:40"><name pos:start="105:38" pos:end="105:40">tty</name></expr></argument>, <argument pos:start="105:43" pos:end="105:46"><expr pos:start="105:43" pos:end="105:46"><name pos:start="105:43" pos:end="105:46">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="105:49" pos:end="105:50">==</operator> <operator pos:start="105:52" pos:end="105:52">-</operator><literal type="number" pos:start="105:53" pos:end="105:53">1</literal></expr>)</condition> <block pos:start="105:56" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:18">

        <expr_stmt pos:start="107:9" pos:end="109:61"><expr pos:start="107:9" pos:end="109:60"><call pos:start="107:9" pos:end="109:60"><name pos:start="107:9" pos:end="107:18">error_setg</name><argument_list pos:start="107:19" pos:end="109:60">(<argument pos:start="107:20" pos:end="107:23"><expr pos:start="107:20" pos:end="107:23"><name pos:start="107:20" pos:end="107:23">errp</name></expr></argument>, <argument pos:start="107:26" pos:end="107:51"><expr pos:start="107:26" pos:end="107:51"><literal type="string" pos:start="107:26" pos:end="107:51">"brlapi__enterTtyMode: %s"</literal></expr></argument>,

                   <argument pos:start="109:20" pos:end="109:59"><expr pos:start="109:20" pos:end="109:59"><call pos:start="109:20" pos:end="109:59"><name pos:start="109:20" pos:end="109:34">brlapi_strerror</name><argument_list pos:start="109:35" pos:end="109:59">(<argument pos:start="109:36" pos:end="109:58"><expr pos:start="109:36" pos:end="109:58"><call pos:start="109:36" pos:end="109:58"><name pos:start="109:36" pos:end="109:56">brlapi_error_location</name><argument_list pos:start="109:57" pos:end="109:58">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="111:9" pos:end="111:18">goto <name pos:start="111:14" pos:end="111:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:68"><expr pos:start="117:5" pos:end="117:67"><call pos:start="117:5" pos:end="117:67"><name pos:start="117:5" pos:end="117:23">qemu_set_fd_handler</name><argument_list pos:start="117:24" pos:end="117:67">(<argument pos:start="117:25" pos:end="117:39"><expr pos:start="117:25" pos:end="117:39"><name pos:start="117:25" pos:end="117:39"><name pos:start="117:25" pos:end="117:28">baum</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:39">brlapi_fd</name></name></expr></argument>, <argument pos:start="117:42" pos:end="117:54"><expr pos:start="117:42" pos:end="117:54"><name pos:start="117:42" pos:end="117:54">baum_chr_read</name></expr></argument>, <argument pos:start="117:57" pos:end="117:60"><expr pos:start="117:57" pos:end="117:60"><name pos:start="117:57" pos:end="117:60">NULL</name></expr></argument>, <argument pos:start="117:63" pos:end="117:66"><expr pos:start="117:63" pos:end="117:66"><name pos:start="117:63" pos:end="117:66">baum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="121:5" pos:end="121:15">return <expr pos:start="121:12" pos:end="121:14"><name pos:start="121:12" pos:end="121:14">chr</name></expr>;</return>



<label pos:start="125:1" pos:end="125:5"><name pos:start="125:1" pos:end="125:4">fail</name>:</label>

    <expr_stmt pos:start="127:5" pos:end="127:38"><expr pos:start="127:5" pos:end="127:37"><call pos:start="127:5" pos:end="127:37"><name pos:start="127:5" pos:end="127:14">timer_free</name><argument_list pos:start="127:15" pos:end="127:37">(<argument pos:start="127:16" pos:end="127:36"><expr pos:start="127:16" pos:end="127:36"><name pos:start="127:16" pos:end="127:36"><name pos:start="127:16" pos:end="127:19">baum</name><operator pos:start="127:20" pos:end="127:21">-&gt;</operator><name pos:start="127:22" pos:end="127:36">cellCount_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:36"><expr pos:start="129:5" pos:end="129:35"><call pos:start="129:5" pos:end="129:35"><name pos:start="129:5" pos:end="129:27">brlapi__closeConnection</name><argument_list pos:start="129:28" pos:end="129:35">(<argument pos:start="129:29" pos:end="129:34"><expr pos:start="129:29" pos:end="129:34"><name pos:start="129:29" pos:end="129:34">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="131:1" pos:end="131:12"><name pos:start="131:1" pos:end="131:11">fail_handle</name>:</label>

    <expr_stmt pos:start="133:5" pos:end="133:19"><expr pos:start="133:5" pos:end="133:18"><call pos:start="133:5" pos:end="133:18"><name pos:start="133:5" pos:end="133:10">g_free</name><argument_list pos:start="133:11" pos:end="133:18">(<argument pos:start="133:12" pos:end="133:17"><expr pos:start="133:12" pos:end="133:17"><name pos:start="133:12" pos:end="133:17">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:16"><expr pos:start="135:5" pos:end="135:15"><call pos:start="135:5" pos:end="135:15"><name pos:start="135:5" pos:end="135:10">g_free</name><argument_list pos:start="135:11" pos:end="135:15">(<argument pos:start="135:12" pos:end="135:14"><expr pos:start="135:12" pos:end="135:14"><name pos:start="135:12" pos:end="135:14">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:17"><expr pos:start="137:5" pos:end="137:16"><call pos:start="137:5" pos:end="137:16"><name pos:start="137:5" pos:end="137:10">g_free</name><argument_list pos:start="137:11" pos:end="137:16">(<argument pos:start="137:12" pos:end="137:15"><expr pos:start="137:12" pos:end="137:15"><name pos:start="137:12" pos:end="137:15">baum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="139:5" pos:end="139:16">return <expr pos:start="139:12" pos:end="139:15"><name pos:start="139:12" pos:end="139:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
