<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5107.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:43">bdrv_aligned_preadv</name><parameter_list pos:start="1:44" pos:end="5:49">(<parameter pos:start="1:45" pos:end="1:64"><decl pos:start="1:45" pos:end="1:64"><type pos:start="1:45" pos:end="1:64"><name pos:start="1:45" pos:end="1:60">BlockDriverState</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:27"><decl pos:start="3:5" pos:end="3:27"><type pos:start="3:5" pos:end="3:27"><name pos:start="3:5" pos:end="3:22">BdrvTrackedRequest</name> <modifier pos:start="3:24" pos:end="3:24">*</modifier></type><name pos:start="3:25" pos:end="3:27">req</name></decl></parameter>, <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:36">int64_t</name></type> <name pos:start="3:38" pos:end="3:43">offset</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:63"><decl pos:start="3:46" pos:end="3:63"><type pos:start="3:46" pos:end="3:63"><name pos:start="3:46" pos:end="3:53">unsigned</name> <name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:63">bytes</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:17">align</name></decl></parameter>, <parameter pos:start="5:20" pos:end="5:37"><decl pos:start="5:20" pos:end="5:37"><type pos:start="5:20" pos:end="5:37"><name pos:start="5:20" pos:end="5:31">QEMUIOVector</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:37">qiov</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:48"><decl pos:start="5:40" pos:end="5:48"><type pos:start="5:40" pos:end="5:48"><name pos:start="5:40" pos:end="5:42">int</name></type> <name pos:start="5:44" pos:end="5:48">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="191:1">{<block_content pos:start="9:5" pos:end="189:29">

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:23">total_bytes</name></decl>, <decl pos:start="9:26" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:26" pos:end="9:34">max_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:28">bytes_remaining</name> <init pos:start="13:30" pos:end="13:36">= <expr pos:start="13:32" pos:end="13:36"><name pos:start="13:32" pos:end="13:36">bytes</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:20">max_transfer</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:33"><expr pos:start="19:5" pos:end="19:32"><call pos:start="19:5" pos:end="19:32"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:32">(<argument pos:start="19:12" pos:end="19:31"><expr pos:start="19:12" pos:end="19:31"><call pos:start="19:12" pos:end="19:31"><name pos:start="19:12" pos:end="19:24">is_power_of_2</name><argument_list pos:start="19:25" pos:end="19:31">(<argument pos:start="19:26" pos:end="19:30"><expr pos:start="19:26" pos:end="19:30"><name pos:start="19:26" pos:end="19:30">align</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:40"><expr pos:start="21:5" pos:end="21:39"><call pos:start="21:5" pos:end="21:39"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:39">(<argument pos:start="21:12" pos:end="21:38"><expr pos:start="21:12" pos:end="21:38"><operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:18">offset</name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <operator pos:start="21:22" pos:end="21:22">(</operator><name pos:start="21:23" pos:end="21:27">align</name> <operator pos:start="21:29" pos:end="21:29">-</operator> <literal type="number" pos:start="21:31" pos:end="21:31">1</literal><operator pos:start="21:32" pos:end="21:32">)</operator><operator pos:start="21:33" pos:end="21:33">)</operator> <operator pos:start="21:35" pos:end="21:36">==</operator> <literal type="number" pos:start="21:38" pos:end="21:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:39"><expr pos:start="23:5" pos:end="23:38"><call pos:start="23:5" pos:end="23:38"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:38">(<argument pos:start="23:12" pos:end="23:37"><expr pos:start="23:12" pos:end="23:37"><operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:17">bytes</name> <operator pos:start="23:19" pos:end="23:19">&amp;</operator> <operator pos:start="23:21" pos:end="23:21">(</operator><name pos:start="23:22" pos:end="23:26">align</name> <operator pos:start="23:28" pos:end="23:28">-</operator> <literal type="number" pos:start="23:30" pos:end="23:30">1</literal><operator pos:start="23:31" pos:end="23:31">)</operator><operator pos:start="23:32" pos:end="23:32">)</operator> <operator pos:start="23:34" pos:end="23:35">==</operator> <literal type="number" pos:start="23:37" pos:end="23:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:41"><expr pos:start="25:5" pos:end="25:40"><call pos:start="25:5" pos:end="25:40"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:40">(<argument pos:start="25:12" pos:end="25:39"><expr pos:start="25:12" pos:end="25:39"><operator pos:start="25:12" pos:end="25:12">!</operator><name pos:start="25:13" pos:end="25:16">qiov</name> <operator pos:start="25:18" pos:end="25:19">||</operator> <name pos:start="25:21" pos:end="25:25">bytes</name> <operator pos:start="25:27" pos:end="25:28">==</operator> <name pos:start="25:30" pos:end="25:39"><name pos:start="25:30" pos:end="25:33">qiov</name><operator pos:start="25:34" pos:end="25:35">-&gt;</operator><name pos:start="25:36" pos:end="25:39">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:49"><expr pos:start="27:5" pos:end="27:48"><call pos:start="27:5" pos:end="27:48"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:48">(<argument pos:start="27:12" pos:end="27:47"><expr pos:start="27:12" pos:end="27:47"><operator pos:start="27:12" pos:end="27:12">(</operator><name pos:start="27:13" pos:end="27:26"><name pos:start="27:13" pos:end="27:14">bs</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:26">open_flags</name></name> <operator pos:start="27:28" pos:end="27:28">&amp;</operator> <name pos:start="27:30" pos:end="27:41">BDRV_O_NO_IO</name><operator pos:start="27:42" pos:end="27:42">)</operator> <operator pos:start="27:44" pos:end="27:45">==</operator> <literal type="number" pos:start="27:47" pos:end="27:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="31:42"><expr pos:start="29:5" pos:end="31:41"><name pos:start="29:5" pos:end="29:16">max_transfer</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="31:41"><name pos:start="29:20" pos:end="29:34">QEMU_ALIGN_DOWN</name><argument_list pos:start="29:35" pos:end="31:41">(<argument pos:start="29:36" pos:end="29:77"><expr pos:start="29:36" pos:end="29:77"><call pos:start="29:36" pos:end="29:77"><name pos:start="29:36" pos:end="29:47">MIN_NON_ZERO</name><argument_list pos:start="29:48" pos:end="29:77">(<argument pos:start="29:49" pos:end="29:67"><expr pos:start="29:49" pos:end="29:67"><name pos:start="29:49" pos:end="29:67"><name pos:start="29:49" pos:end="29:50">bs</name><operator pos:start="29:51" pos:end="29:52">-&gt;</operator><name pos:start="29:53" pos:end="29:54">bl</name><operator pos:start="29:55" pos:end="29:55">.</operator><name pos:start="29:56" pos:end="29:67">max_transfer</name></name></expr></argument>, <argument pos:start="29:70" pos:end="29:76"><expr pos:start="29:70" pos:end="29:76"><name pos:start="29:70" pos:end="29:76">INT_MAX</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="31:36" pos:end="31:40"><expr pos:start="31:36" pos:end="31:40"><name pos:start="31:36" pos:end="31:40">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="41:29">/* TODO: We would need a per-BDS .supported_read_flags and

     * potential fallback support, if we ever implement any read flags

     * to pass through to drivers.  For now, there aren't any

     * passthrough flags.  */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:74"><expr pos:start="43:5" pos:end="43:73"><call pos:start="43:5" pos:end="43:73"><name pos:start="43:5" pos:end="43:10">assert</name><argument_list pos:start="43:11" pos:end="43:73">(<argument pos:start="43:12" pos:end="43:72"><expr pos:start="43:12" pos:end="43:72"><operator pos:start="43:12" pos:end="43:12">!</operator><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:18">flags</name> <operator pos:start="43:20" pos:end="43:20">&amp;</operator> <operator pos:start="43:22" pos:end="43:22">~</operator><operator pos:start="43:23" pos:end="43:23">(</operator><name pos:start="43:24" pos:end="43:46">BDRV_REQ_NO_SERIALISING</name> <operator pos:start="43:48" pos:end="43:48">|</operator> <name pos:start="43:50" pos:end="43:70">BDRV_REQ_COPY_ON_READ</name><operator pos:start="43:71" pos:end="43:71">)</operator><operator pos:start="43:72" pos:end="43:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:58">/* Handle Copy on Read and associated serialisation */</comment>

    <if_stmt pos:start="49:5" pos:end="63:5"><if pos:start="49:5" pos:end="63:5">if <condition pos:start="49:8" pos:end="49:38">(<expr pos:start="49:9" pos:end="49:37"><name pos:start="49:9" pos:end="49:13">flags</name> <operator pos:start="49:15" pos:end="49:15">&amp;</operator> <name pos:start="49:17" pos:end="49:37">BDRV_REQ_COPY_ON_READ</name></expr>)</condition> <block pos:start="49:40" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:65">

        <comment type="block" pos:start="51:9" pos:end="59:58">/* If we touch the same cluster it counts as an overlap.  This

         * guarantees that allocating writes will be serialized and not race

         * with each other for the same cluster.  For example, in copy-on-read

         * it ensures that the CoR read and write operations are atomic and

         * guest writes cannot interleave between them. */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:65"><expr pos:start="61:9" pos:end="61:64"><call pos:start="61:9" pos:end="61:64"><name pos:start="61:9" pos:end="61:32">mark_request_serialising</name><argument_list pos:start="61:33" pos:end="61:64">(<argument pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><name pos:start="61:34" pos:end="61:36">req</name></expr></argument>, <argument pos:start="61:39" pos:end="61:63"><expr pos:start="61:39" pos:end="61:63"><call pos:start="61:39" pos:end="61:63"><name pos:start="61:39" pos:end="61:59">bdrv_get_cluster_size</name><argument_list pos:start="61:60" pos:end="61:63">(<argument pos:start="61:61" pos:end="61:62"><expr pos:start="61:61" pos:end="61:62"><name pos:start="61:61" pos:end="61:62">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:43">(<expr pos:start="67:9" pos:end="67:42"><operator pos:start="67:9" pos:end="67:9">!</operator><operator pos:start="67:10" pos:end="67:10">(</operator><name pos:start="67:11" pos:end="67:15">flags</name> <operator pos:start="67:17" pos:end="67:17">&amp;</operator> <name pos:start="67:19" pos:end="67:41">BDRV_REQ_NO_SERIALISING</name><operator pos:start="67:42" pos:end="67:42">)</operator></expr>)</condition> <block pos:start="67:45" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:39">

        <expr_stmt pos:start="69:9" pos:end="69:39"><expr pos:start="69:9" pos:end="69:38"><call pos:start="69:9" pos:end="69:38"><name pos:start="69:9" pos:end="69:33">wait_serialising_requests</name><argument_list pos:start="69:34" pos:end="69:38">(<argument pos:start="69:35" pos:end="69:37"><expr pos:start="69:35" pos:end="69:37"><name pos:start="69:35" pos:end="69:37">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="105:5"><if pos:start="75:5" pos:end="105:5">if <condition pos:start="75:8" pos:end="75:38">(<expr pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:13">flags</name> <operator pos:start="75:15" pos:end="75:15">&amp;</operator> <name pos:start="75:17" pos:end="75:37">BDRV_REQ_COPY_ON_READ</name></expr>)</condition> <block pos:start="75:40" pos:end="105:5">{<block_content pos:start="77:9" pos:end="103:9">

        <decl_stmt pos:start="77:9" pos:end="77:58"><decl pos:start="77:9" pos:end="77:57"><type pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:15">int64_t</name></type> <name pos:start="77:17" pos:end="77:28">start_sector</name> <init pos:start="77:30" pos:end="77:57">= <expr pos:start="77:32" pos:end="77:57"><name pos:start="77:32" pos:end="77:37">offset</name> <operator pos:start="77:39" pos:end="77:40">&gt;&gt;</operator> <name pos:start="77:42" pos:end="77:57">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:76"><decl pos:start="79:9" pos:end="79:75"><type pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:15">int64_t</name></type> <name pos:start="79:17" pos:end="79:26">end_sector</name> <init pos:start="79:28" pos:end="79:75">= <expr pos:start="79:30" pos:end="79:75"><call pos:start="79:30" pos:end="79:75"><name pos:start="79:30" pos:end="79:41">DIV_ROUND_UP</name><argument_list pos:start="79:42" pos:end="79:75">(<argument pos:start="79:43" pos:end="79:56"><expr pos:start="79:43" pos:end="79:56"><name pos:start="79:43" pos:end="79:48">offset</name> <operator pos:start="79:50" pos:end="79:50">+</operator> <name pos:start="79:52" pos:end="79:56">bytes</name></expr></argument>, <argument pos:start="79:59" pos:end="79:74"><expr pos:start="79:59" pos:end="79:74"><name pos:start="79:59" pos:end="79:74">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="81:9" pos:end="81:60"><decl pos:start="81:9" pos:end="81:59"><type pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:16">unsigned</name> <name pos:start="81:18" pos:end="81:20">int</name></type> <name pos:start="81:22" pos:end="81:31">nb_sectors</name> <init pos:start="81:33" pos:end="81:59">= <expr pos:start="81:35" pos:end="81:59"><name pos:start="81:35" pos:end="81:44">end_sector</name> <operator pos:start="81:46" pos:end="81:46">-</operator> <name pos:start="81:48" pos:end="81:59">start_sector</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="83:9" pos:end="83:17"><decl pos:start="83:9" pos:end="83:16"><type pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:11">int</name></type> <name pos:start="83:13" pos:end="83:16">pnum</name></decl>;</decl_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:69"><expr pos:start="87:9" pos:end="87:68"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <call pos:start="87:15" pos:end="87:68"><name pos:start="87:15" pos:end="87:31">bdrv_is_allocated</name><argument_list pos:start="87:32" pos:end="87:68">(<argument pos:start="87:33" pos:end="87:34"><expr pos:start="87:33" pos:end="87:34"><name pos:start="87:33" pos:end="87:34">bs</name></expr></argument>, <argument pos:start="87:37" pos:end="87:48"><expr pos:start="87:37" pos:end="87:48"><name pos:start="87:37" pos:end="87:48">start_sector</name></expr></argument>, <argument pos:start="87:51" pos:end="87:60"><expr pos:start="87:51" pos:end="87:60"><name pos:start="87:51" pos:end="87:60">nb_sectors</name></expr></argument>, <argument pos:start="87:63" pos:end="87:67"><expr pos:start="87:63" pos:end="87:67"><operator pos:start="87:63" pos:end="87:63">&amp;</operator><name pos:start="87:64" pos:end="87:67">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:20">(<expr pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">&lt;</operator> <literal type="number" pos:start="89:19" pos:end="89:19">0</literal></expr>)</condition> <block pos:start="89:22" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:21">

            <goto pos:start="91:13" pos:end="91:21">goto <name pos:start="91:18" pos:end="91:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:39">(<expr pos:start="97:13" pos:end="97:38"><operator pos:start="97:13" pos:end="97:13">!</operator><name pos:start="97:14" pos:end="97:16">ret</name> <operator pos:start="97:18" pos:end="97:19">||</operator> <name pos:start="97:21" pos:end="97:24">pnum</name> <operator pos:start="97:26" pos:end="97:27">!=</operator> <name pos:start="97:29" pos:end="97:38">nb_sectors</name></expr>)</condition> <block pos:start="97:41" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:21">

            <expr_stmt pos:start="99:13" pos:end="99:68"><expr pos:start="99:13" pos:end="99:67"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:67"><name pos:start="99:19" pos:end="99:42">bdrv_co_do_copy_on_readv</name><argument_list pos:start="99:43" pos:end="99:67">(<argument pos:start="99:44" pos:end="99:45"><expr pos:start="99:44" pos:end="99:45"><name pos:start="99:44" pos:end="99:45">bs</name></expr></argument>, <argument pos:start="99:48" pos:end="99:53"><expr pos:start="99:48" pos:end="99:53"><name pos:start="99:48" pos:end="99:53">offset</name></expr></argument>, <argument pos:start="99:56" pos:end="99:60"><expr pos:start="99:56" pos:end="99:60"><name pos:start="99:56" pos:end="99:60">bytes</name></expr></argument>, <argument pos:start="99:63" pos:end="99:66"><expr pos:start="99:63" pos:end="99:66"><name pos:start="99:63" pos:end="99:66">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="101:13" pos:end="101:21">goto <name pos:start="101:18" pos:end="101:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:73">/* Forward the request to the BlockDriver, possibly fragmenting it */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:37"><expr pos:start="111:5" pos:end="111:36"><name pos:start="111:5" pos:end="111:15">total_bytes</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="111:36"><name pos:start="111:19" pos:end="111:32">bdrv_getlength</name><argument_list pos:start="111:33" pos:end="111:36">(<argument pos:start="111:34" pos:end="111:35"><expr pos:start="111:34" pos:end="111:35"><name pos:start="111:34" pos:end="111:35">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:24">(<expr pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:19">total_bytes</name> <operator pos:start="113:21" pos:end="113:21">&lt;</operator> <literal type="number" pos:start="113:23" pos:end="113:23">0</literal></expr>)</condition> <block pos:start="113:26" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:17">

        <expr_stmt pos:start="115:9" pos:end="115:26"><expr pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <name pos:start="115:15" pos:end="115:25">total_bytes</name></expr>;</expr_stmt>

        <goto pos:start="117:9" pos:end="117:17">goto <name pos:start="117:14" pos:end="117:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:62"><expr pos:start="123:5" pos:end="123:61"><name pos:start="123:5" pos:end="123:13">max_bytes</name> <operator pos:start="123:15" pos:end="123:15">=</operator> <call pos:start="123:17" pos:end="123:61"><name pos:start="123:17" pos:end="123:24">ROUND_UP</name><argument_list pos:start="123:25" pos:end="123:61">(<argument pos:start="123:26" pos:end="123:53"><expr pos:start="123:26" pos:end="123:53"><call pos:start="123:26" pos:end="123:53"><name pos:start="123:26" pos:end="123:28">MAX</name><argument_list pos:start="123:29" pos:end="123:53">(<argument pos:start="123:30" pos:end="123:30"><expr pos:start="123:30" pos:end="123:30"><literal type="number" pos:start="123:30" pos:end="123:30">0</literal></expr></argument>, <argument pos:start="123:33" pos:end="123:52"><expr pos:start="123:33" pos:end="123:52"><name pos:start="123:33" pos:end="123:43">total_bytes</name> <operator pos:start="123:45" pos:end="123:45">-</operator> <name pos:start="123:47" pos:end="123:52">offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="123:56" pos:end="123:60"><expr pos:start="123:56" pos:end="123:60"><name pos:start="123:56" pos:end="123:60">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:52">(<expr pos:start="125:9" pos:end="125:51"><name pos:start="125:9" pos:end="125:13">bytes</name> <operator pos:start="125:15" pos:end="125:16">&lt;=</operator> <name pos:start="125:18" pos:end="125:26">max_bytes</name> <operator pos:start="125:28" pos:end="125:29">&amp;&amp;</operator> <name pos:start="125:31" pos:end="125:35">bytes</name> <operator pos:start="125:37" pos:end="125:38">&lt;=</operator> <name pos:start="125:40" pos:end="125:51">max_transfer</name></expr>)</condition> <block pos:start="125:54" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:17">

        <expr_stmt pos:start="127:9" pos:end="127:61"><expr pos:start="127:9" pos:end="127:60"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <call pos:start="127:15" pos:end="127:60"><name pos:start="127:15" pos:end="127:32">bdrv_driver_preadv</name><argument_list pos:start="127:33" pos:end="127:60">(<argument pos:start="127:34" pos:end="127:35"><expr pos:start="127:34" pos:end="127:35"><name pos:start="127:34" pos:end="127:35">bs</name></expr></argument>, <argument pos:start="127:38" pos:end="127:43"><expr pos:start="127:38" pos:end="127:43"><name pos:start="127:38" pos:end="127:43">offset</name></expr></argument>, <argument pos:start="127:46" pos:end="127:50"><expr pos:start="127:46" pos:end="127:50"><name pos:start="127:46" pos:end="127:50">bytes</name></expr></argument>, <argument pos:start="127:53" pos:end="127:56"><expr pos:start="127:53" pos:end="127:56"><name pos:start="127:53" pos:end="127:56">qiov</name></expr></argument>, <argument pos:start="127:59" pos:end="127:59"><expr pos:start="127:59" pos:end="127:59"><literal type="number" pos:start="127:59" pos:end="127:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="129:9" pos:end="129:17">goto <name pos:start="129:14" pos:end="129:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <while pos:start="135:5" pos:end="183:5">while <condition pos:start="135:11" pos:end="135:27">(<expr pos:start="135:12" pos:end="135:26"><name pos:start="135:12" pos:end="135:26">bytes_remaining</name></expr>)</condition> <block pos:start="135:29" pos:end="183:5">{<block_content pos:start="137:9" pos:end="181:31">

        <decl_stmt pos:start="137:9" pos:end="137:16"><decl pos:start="137:9" pos:end="137:15"><type pos:start="137:9" pos:end="137:11"><name pos:start="137:9" pos:end="137:11">int</name></type> <name pos:start="137:13" pos:end="137:15">num</name></decl>;</decl_stmt>



        <if_stmt pos:start="141:9" pos:end="173:9"><if pos:start="141:9" pos:end="165:9">if <condition pos:start="141:12" pos:end="141:22">(<expr pos:start="141:13" pos:end="141:21"><name pos:start="141:13" pos:end="141:21">max_bytes</name></expr>)</condition> <block pos:start="141:24" pos:end="165:9">{<block_content pos:start="143:13" pos:end="163:44">

            <decl_stmt pos:start="143:13" pos:end="143:36"><decl pos:start="143:13" pos:end="143:35"><type pos:start="143:13" pos:end="143:24"><name pos:start="143:13" pos:end="143:24">QEMUIOVector</name></type> <name pos:start="143:26" pos:end="143:35">local_qiov</name></decl>;</decl_stmt>



            <expr_stmt pos:start="147:13" pos:end="147:69"><expr pos:start="147:13" pos:end="147:68"><name pos:start="147:13" pos:end="147:15">num</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <call pos:start="147:19" pos:end="147:68"><name pos:start="147:19" pos:end="147:21">MIN</name><argument_list pos:start="147:22" pos:end="147:68">(<argument pos:start="147:23" pos:end="147:37"><expr pos:start="147:23" pos:end="147:37"><name pos:start="147:23" pos:end="147:37">bytes_remaining</name></expr></argument>, <argument pos:start="147:40" pos:end="147:67"><expr pos:start="147:40" pos:end="147:67"><call pos:start="147:40" pos:end="147:67"><name pos:start="147:40" pos:end="147:42">MIN</name><argument_list pos:start="147:43" pos:end="147:67">(<argument pos:start="147:44" pos:end="147:52"><expr pos:start="147:44" pos:end="147:52"><name pos:start="147:44" pos:end="147:52">max_bytes</name></expr></argument>, <argument pos:start="147:55" pos:end="147:66"><expr pos:start="147:55" pos:end="147:66"><name pos:start="147:55" pos:end="147:66">max_transfer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:24"><expr pos:start="149:13" pos:end="149:23"><call pos:start="149:13" pos:end="149:23"><name pos:start="149:13" pos:end="149:18">assert</name><argument_list pos:start="149:19" pos:end="149:23">(<argument pos:start="149:20" pos:end="149:22"><expr pos:start="149:20" pos:end="149:22"><name pos:start="149:20" pos:end="149:22">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:53"><expr pos:start="151:13" pos:end="151:52"><call pos:start="151:13" pos:end="151:52"><name pos:start="151:13" pos:end="151:27">qemu_iovec_init</name><argument_list pos:start="151:28" pos:end="151:52">(<argument pos:start="151:29" pos:end="151:39"><expr pos:start="151:29" pos:end="151:39"><operator pos:start="151:29" pos:end="151:29">&amp;</operator><name pos:start="151:30" pos:end="151:39">local_qiov</name></expr></argument>, <argument pos:start="151:42" pos:end="151:51"><expr pos:start="151:42" pos:end="151:51"><name pos:start="151:42" pos:end="151:51"><name pos:start="151:42" pos:end="151:45">qiov</name><operator pos:start="151:46" pos:end="151:47">-&gt;</operator><name pos:start="151:48" pos:end="151:51">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:79"><expr pos:start="153:13" pos:end="153:78"><call pos:start="153:13" pos:end="153:78"><name pos:start="153:13" pos:end="153:29">qemu_iovec_concat</name><argument_list pos:start="153:30" pos:end="153:78">(<argument pos:start="153:31" pos:end="153:41"><expr pos:start="153:31" pos:end="153:41"><operator pos:start="153:31" pos:end="153:31">&amp;</operator><name pos:start="153:32" pos:end="153:41">local_qiov</name></expr></argument>, <argument pos:start="153:44" pos:end="153:47"><expr pos:start="153:44" pos:end="153:47"><name pos:start="153:44" pos:end="153:47">qiov</name></expr></argument>, <argument pos:start="153:50" pos:end="153:72"><expr pos:start="153:50" pos:end="153:72"><name pos:start="153:50" pos:end="153:54">bytes</name> <operator pos:start="153:56" pos:end="153:56">-</operator> <name pos:start="153:58" pos:end="153:72">bytes_remaining</name></expr></argument>, <argument pos:start="153:75" pos:end="153:77"><expr pos:start="153:75" pos:end="153:77"><name pos:start="153:75" pos:end="153:77">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="157:13" pos:end="159:58"><expr pos:start="157:13" pos:end="159:57"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <call pos:start="157:19" pos:end="159:57"><name pos:start="157:19" pos:end="157:36">bdrv_driver_preadv</name><argument_list pos:start="157:37" pos:end="159:57">(<argument pos:start="157:38" pos:end="157:39"><expr pos:start="157:38" pos:end="157:39"><name pos:start="157:38" pos:end="157:39">bs</name></expr></argument>, <argument pos:start="157:42" pos:end="157:73"><expr pos:start="157:42" pos:end="157:73"><name pos:start="157:42" pos:end="157:47">offset</name> <operator pos:start="157:49" pos:end="157:49">+</operator> <name pos:start="157:51" pos:end="157:55">bytes</name> <operator pos:start="157:57" pos:end="157:57">-</operator> <name pos:start="157:59" pos:end="157:73">bytes_remaining</name></expr></argument>,

                                     <argument pos:start="159:38" pos:end="159:40"><expr pos:start="159:38" pos:end="159:40"><name pos:start="159:38" pos:end="159:40">num</name></expr></argument>, <argument pos:start="159:43" pos:end="159:53"><expr pos:start="159:43" pos:end="159:53"><operator pos:start="159:43" pos:end="159:43">&amp;</operator><name pos:start="159:44" pos:end="159:53">local_qiov</name></expr></argument>, <argument pos:start="159:56" pos:end="159:56"><expr pos:start="159:56" pos:end="159:56"><literal type="number" pos:start="159:56" pos:end="159:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:29"><expr pos:start="161:13" pos:end="161:28"><name pos:start="161:13" pos:end="161:21">max_bytes</name> <operator pos:start="161:23" pos:end="161:24">-=</operator> <name pos:start="161:26" pos:end="161:28">num</name></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:44"><expr pos:start="163:13" pos:end="163:43"><call pos:start="163:13" pos:end="163:43"><name pos:start="163:13" pos:end="163:30">qemu_iovec_destroy</name><argument_list pos:start="163:31" pos:end="163:43">(<argument pos:start="163:32" pos:end="163:42"><expr pos:start="163:32" pos:end="163:42"><operator pos:start="163:32" pos:end="163:32">&amp;</operator><name pos:start="163:33" pos:end="163:42">local_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="165:11" pos:end="173:9">else <block pos:start="165:16" pos:end="173:9">{<block_content pos:start="167:13" pos:end="171:53">

            <expr_stmt pos:start="167:13" pos:end="167:34"><expr pos:start="167:13" pos:end="167:33"><name pos:start="167:13" pos:end="167:15">num</name> <operator pos:start="167:17" pos:end="167:17">=</operator> <name pos:start="167:19" pos:end="167:33">bytes_remaining</name></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="171:53"><expr pos:start="169:13" pos:end="171:52"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:17">=</operator> <call pos:start="169:19" pos:end="171:52"><name pos:start="169:19" pos:end="169:35">qemu_iovec_memset</name><argument_list pos:start="169:36" pos:end="171:52">(<argument pos:start="169:37" pos:end="169:40"><expr pos:start="169:37" pos:end="169:40"><name pos:start="169:37" pos:end="169:40">qiov</name></expr></argument>, <argument pos:start="169:43" pos:end="169:65"><expr pos:start="169:43" pos:end="169:65"><name pos:start="169:43" pos:end="169:47">bytes</name> <operator pos:start="169:49" pos:end="169:49">-</operator> <name pos:start="169:51" pos:end="169:65">bytes_remaining</name></expr></argument>, <argument pos:start="169:68" pos:end="169:68"><expr pos:start="169:68" pos:end="169:68"><literal type="number" pos:start="169:68" pos:end="169:68">0</literal></expr></argument>,

                                    <argument pos:start="171:37" pos:end="171:51"><expr pos:start="171:37" pos:end="171:51"><name pos:start="171:37" pos:end="171:51">bytes_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="175:9" pos:end="179:9"><if pos:start="175:9" pos:end="179:9">if <condition pos:start="175:12" pos:end="175:20">(<expr pos:start="175:13" pos:end="175:19"><name pos:start="175:13" pos:end="175:15">ret</name> <operator pos:start="175:17" pos:end="175:17">&lt;</operator> <literal type="number" pos:start="175:19" pos:end="175:19">0</literal></expr>)</condition> <block pos:start="175:22" pos:end="179:9">{<block_content pos:start="177:13" pos:end="177:21">

            <goto pos:start="177:13" pos:end="177:21">goto <name pos:start="177:18" pos:end="177:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:31"><expr pos:start="181:9" pos:end="181:30"><name pos:start="181:9" pos:end="181:23">bytes_remaining</name> <operator pos:start="181:25" pos:end="181:26">-=</operator> <name pos:start="181:28" pos:end="181:30">num</name></expr>;</expr_stmt>

    </block_content>}</block></while>



<label pos:start="187:1" pos:end="187:4"><name pos:start="187:1" pos:end="187:3">out</name>:</label>

    <return pos:start="189:5" pos:end="189:29">return <expr pos:start="189:12" pos:end="189:28"><ternary pos:start="189:12" pos:end="189:28"><condition pos:start="189:12" pos:end="189:20"><expr pos:start="189:12" pos:end="189:18"><name pos:start="189:12" pos:end="189:14">ret</name> <operator pos:start="189:16" pos:end="189:16">&lt;</operator> <literal type="number" pos:start="189:18" pos:end="189:18">0</literal></expr> ?</condition><then pos:start="189:22" pos:end="189:24"> <expr pos:start="189:22" pos:end="189:24"><name pos:start="189:22" pos:end="189:24">ret</name></expr> </then><else pos:start="189:26" pos:end="189:28">: <expr pos:start="189:28" pos:end="189:28"><literal type="number" pos:start="189:28" pos:end="189:28">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
