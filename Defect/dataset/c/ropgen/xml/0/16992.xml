<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16992.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:32"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:30">TranslationBlock</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:39">tb_find</name><parameter_list pos:start="1:40" pos:end="5:52">(<parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:48">CPUState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">cpu</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:65"><decl pos:start="3:41" pos:end="3:65"><type pos:start="3:41" pos:end="3:65"><name pos:start="3:41" pos:end="3:56">TranslationBlock</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:65">last_tb</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:51"><decl pos:start="5:41" pos:end="5:51"><type pos:start="5:41" pos:end="5:51"><name pos:start="5:41" pos:end="5:43">int</name></type> <name pos:start="5:45" pos:end="5:51">tb_exit</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="113:1">{<block_content pos:start="9:5" pos:end="111:14">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">TranslationBlock</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:24">cs_base</name></decl>, <decl pos:start="11:27" pos:end="11:28"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:27" pos:end="11:28">pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:25">acquired_tb_lock</name> <init pos:start="15:27" pos:end="15:33">= <expr pos:start="15:29" pos:end="15:33"><name pos:start="15:29" pos:end="15:33">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:20">cf_mask</name> <init pos:start="17:22" pos:end="17:36">= <expr pos:start="17:24" pos:end="17:36"><call pos:start="17:24" pos:end="17:36"><name pos:start="17:24" pos:end="17:34">curr_cflags</name><argument_list pos:start="17:35" pos:end="17:36">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:67"><expr pos:start="21:5" pos:end="21:66"><name pos:start="21:5" pos:end="21:6">tb</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <call pos:start="21:10" pos:end="21:66"><name pos:start="21:10" pos:end="21:29">tb_lookup__cpu_state</name><argument_list pos:start="21:30" pos:end="21:66">(<argument pos:start="21:31" pos:end="21:33"><expr pos:start="21:31" pos:end="21:33"><name pos:start="21:31" pos:end="21:33">cpu</name></expr></argument>, <argument pos:start="21:36" pos:end="21:38"><expr pos:start="21:36" pos:end="21:38"><operator pos:start="21:36" pos:end="21:36">&amp;</operator><name pos:start="21:37" pos:end="21:38">pc</name></expr></argument>, <argument pos:start="21:41" pos:end="21:48"><expr pos:start="21:41" pos:end="21:48"><operator pos:start="21:41" pos:end="21:41">&amp;</operator><name pos:start="21:42" pos:end="21:48">cs_base</name></expr></argument>, <argument pos:start="21:51" pos:end="21:56"><expr pos:start="21:51" pos:end="21:56"><operator pos:start="21:51" pos:end="21:51">&amp;</operator><name pos:start="21:52" pos:end="21:56">flags</name></expr></argument>, <argument pos:start="21:59" pos:end="21:65"><expr pos:start="21:59" pos:end="21:65"><name pos:start="21:59" pos:end="21:65">cf_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="68:0"><if pos:start="23:5" pos:end="68:0">if <condition pos:start="23:8" pos:end="23:19">(<expr pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:10">tb</name> <operator pos:start="23:12" pos:end="23:13">==</operator> <name pos:start="23:15" pos:end="23:18">NULL</name></expr>)</condition> <block pos:start="23:21" pos:end="68:0">{<block_content pos:start="33:9" pos:end="63:71">

        <comment type="block" pos:start="25:9" pos:end="31:11">/* mmap_lock is needed by tb_gen_code, and mmap_lock must be

         * taken outside tb_lock. As system emulation is currently

         * single threaded the locks are NOPs.

         */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:20"><expr pos:start="33:9" pos:end="33:19"><call pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:17">mmap_lock</name><argument_list pos:start="33:18" pos:end="33:19">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:18"><expr pos:start="35:9" pos:end="35:17"><call pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:15">tb_lock</name><argument_list pos:start="35:16" pos:end="35:17">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:24">acquired_tb_lock</name> <operator pos:start="37:26" pos:end="37:26">=</operator> <name pos:start="37:28" pos:end="37:31">true</name></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="45:11">/* There's a chance that our desired tb has been translated while

         * taking the locks so we check again inside the lock.

         */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:64"><expr pos:start="47:9" pos:end="47:63"><name pos:start="47:9" pos:end="47:10">tb</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <call pos:start="47:14" pos:end="47:63"><name pos:start="47:14" pos:end="47:29">tb_htable_lookup</name><argument_list pos:start="47:30" pos:end="47:63">(<argument pos:start="47:31" pos:end="47:33"><expr pos:start="47:31" pos:end="47:33"><name pos:start="47:31" pos:end="47:33">cpu</name></expr></argument>, <argument pos:start="47:36" pos:end="47:37"><expr pos:start="47:36" pos:end="47:37"><name pos:start="47:36" pos:end="47:37">pc</name></expr></argument>, <argument pos:start="47:40" pos:end="47:46"><expr pos:start="47:40" pos:end="47:46"><name pos:start="47:40" pos:end="47:46">cs_base</name></expr></argument>, <argument pos:start="47:49" pos:end="47:53"><expr pos:start="47:49" pos:end="47:53"><name pos:start="47:49" pos:end="47:53">flags</name></expr></argument>, <argument pos:start="47:56" pos:end="47:62"><expr pos:start="47:56" pos:end="47:62"><name pos:start="47:56" pos:end="47:62">cf_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:31">(<expr pos:start="49:13" pos:end="49:30"><call pos:start="49:13" pos:end="49:30"><name pos:start="49:13" pos:end="49:18">likely</name><argument_list pos:start="49:19" pos:end="49:30">(<argument pos:start="49:20" pos:end="49:29"><expr pos:start="49:20" pos:end="49:29"><name pos:start="49:20" pos:end="49:21">tb</name> <operator pos:start="49:23" pos:end="49:24">==</operator> <name pos:start="49:26" pos:end="49:29">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:33" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:63">

            <comment type="block" pos:start="51:13" pos:end="51:72">/* if no translated code available, then translate it now */</comment>

            <expr_stmt pos:start="53:13" pos:end="53:63"><expr pos:start="53:13" pos:end="53:62"><name pos:start="53:13" pos:end="53:14">tb</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:62"><name pos:start="53:18" pos:end="53:28">tb_gen_code</name><argument_list pos:start="53:29" pos:end="53:62">(<argument pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:32">cpu</name></expr></argument>, <argument pos:start="53:35" pos:end="53:36"><expr pos:start="53:35" pos:end="53:36"><name pos:start="53:35" pos:end="53:36">pc</name></expr></argument>, <argument pos:start="53:39" pos:end="53:45"><expr pos:start="53:39" pos:end="53:45"><name pos:start="53:39" pos:end="53:45">cs_base</name></expr></argument>, <argument pos:start="53:48" pos:end="53:52"><expr pos:start="53:48" pos:end="53:52"><name pos:start="53:48" pos:end="53:52">flags</name></expr></argument>, <argument pos:start="53:55" pos:end="53:61"><expr pos:start="53:55" pos:end="53:61"><name pos:start="53:55" pos:end="53:61">cf_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:22"><expr pos:start="59:9" pos:end="59:21"><call pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:19">mmap_unlock</name><argument_list pos:start="59:20" pos:end="59:21">()</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="61:9" pos:end="61:76">/* We add the TB in the virtual pc hash table for the fast lookup */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:71"><expr pos:start="63:9" pos:end="63:70"><call pos:start="63:9" pos:end="63:70"><name pos:start="63:9" pos:end="63:18">atomic_set</name><argument_list pos:start="63:19" pos:end="63:70">(<argument pos:start="63:20" pos:end="63:65"><expr pos:start="63:20" pos:end="63:65"><operator pos:start="63:20" pos:end="63:20">&amp;</operator><name pos:start="63:21" pos:end="63:65"><name pos:start="63:21" pos:end="63:23">cpu</name><operator pos:start="63:24" pos:end="63:25">-&gt;</operator><name pos:start="63:26" pos:end="63:37">tb_jmp_cache</name><index pos:start="63:38" pos:end="63:65">[<expr pos:start="63:39" pos:end="63:64"><call pos:start="63:39" pos:end="63:64"><name pos:start="63:39" pos:end="63:60">tb_jmp_cache_hash_func</name><argument_list pos:start="63:61" pos:end="63:64">(<argument pos:start="63:62" pos:end="63:63"><expr pos:start="63:62" pos:end="63:63"><name pos:start="63:62" pos:end="63:63">pc</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument pos:start="63:68" pos:end="63:69"><expr pos:start="63:68" pos:end="63:69"><name pos:start="63:68" pos:end="63:69">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:ifndef pos:start="67:1" pos:end="67:24">#<cpp:directive pos:start="67:2" pos:end="67:7">ifndef</cpp:directive> <name pos:start="67:9" pos:end="67:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <comment type="block" pos:start="69:5" pos:end="75:7">/* We don't take care of direct jumps when address mapping changes in

     * system emulation. So it's not safe to make a direct jump to a TB

     * spanning two pages because the mapping for the second page can change.

     */</comment>

    <if_stmt pos:start="77:5" pos:end="84:0"><if pos:start="77:5" pos:end="84:0">if <condition pos:start="77:8" pos:end="77:31">(<expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:10">tb</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:21">page_addr</name><index pos:start="77:22" pos:end="77:24">[<expr pos:start="77:23" pos:end="77:23"><literal type="number" pos:start="77:23" pos:end="77:23">1</literal></expr>]</index></name> <operator pos:start="77:26" pos:end="77:27">!=</operator> <operator pos:start="77:29" pos:end="77:29">-</operator><literal type="number" pos:start="77:30" pos:end="77:30">1</literal></expr>)</condition> <block pos:start="77:33" pos:end="84:0">{<block_content pos:start="79:9" pos:end="79:23">

        <expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:15">last_tb</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:22">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="85:5" pos:end="85:45">/* See if we can patch the calling TB. */</comment>

    <if_stmt pos:start="87:5" pos:end="103:5"><if pos:start="87:5" pos:end="103:5">if <condition pos:start="87:8" pos:end="87:59">(<expr pos:start="87:9" pos:end="87:58"><name pos:start="87:9" pos:end="87:15">last_tb</name> <operator pos:start="87:17" pos:end="87:18">&amp;&amp;</operator> <operator pos:start="87:20" pos:end="87:20">!</operator><call pos:start="87:21" pos:end="87:58"><name pos:start="87:21" pos:end="87:38">qemu_loglevel_mask</name><argument_list pos:start="87:39" pos:end="87:58">(<argument pos:start="87:40" pos:end="87:57"><expr pos:start="87:40" pos:end="87:57"><name pos:start="87:40" pos:end="87:57">CPU_LOG_TB_NOCHAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:61" pos:end="103:5">{<block_content pos:start="89:9" pos:end="101:9">

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:30">(<expr pos:start="89:13" pos:end="89:29"><operator pos:start="89:13" pos:end="89:13">!</operator><name pos:start="89:14" pos:end="89:29">acquired_tb_lock</name></expr>)</condition> <block pos:start="89:32" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:36">

            <expr_stmt pos:start="91:13" pos:end="91:22"><expr pos:start="91:13" pos:end="91:21"><call pos:start="91:13" pos:end="91:21"><name pos:start="91:13" pos:end="91:19">tb_lock</name><argument_list pos:start="91:20" pos:end="91:21">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:36"><expr pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:28">acquired_tb_lock</name> <operator pos:start="93:30" pos:end="93:30">=</operator> <name pos:start="93:32" pos:end="93:35">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="97:9" pos:end="101:9"><if pos:start="97:9" pos:end="101:9">if <condition pos:start="97:12" pos:end="97:39">(<expr pos:start="97:13" pos:end="97:38"><operator pos:start="97:13" pos:end="97:13">!</operator><operator pos:start="97:14" pos:end="97:14">(</operator><name pos:start="97:15" pos:end="97:24"><name pos:start="97:15" pos:end="97:16">tb</name><operator pos:start="97:17" pos:end="97:18">-&gt;</operator><name pos:start="97:19" pos:end="97:24">cflags</name></name> <operator pos:start="97:26" pos:end="97:26">&amp;</operator> <name pos:start="97:28" pos:end="97:37">CF_INVALID</name><operator pos:start="97:38" pos:end="97:38">)</operator></expr>)</condition> <block pos:start="97:41" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:46">

            <expr_stmt pos:start="99:13" pos:end="99:46"><expr pos:start="99:13" pos:end="99:45"><call pos:start="99:13" pos:end="99:45"><name pos:start="99:13" pos:end="99:23">tb_add_jump</name><argument_list pos:start="99:24" pos:end="99:45">(<argument pos:start="99:25" pos:end="99:31"><expr pos:start="99:25" pos:end="99:31"><name pos:start="99:25" pos:end="99:31">last_tb</name></expr></argument>, <argument pos:start="99:34" pos:end="99:40"><expr pos:start="99:34" pos:end="99:40"><name pos:start="99:34" pos:end="99:40">tb_exit</name></expr></argument>, <argument pos:start="99:43" pos:end="99:44"><expr pos:start="99:43" pos:end="99:44"><name pos:start="99:43" pos:end="99:44">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:25">(<expr pos:start="105:9" pos:end="105:24"><name pos:start="105:9" pos:end="105:24">acquired_tb_lock</name></expr>)</condition> <block pos:start="105:27" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:20">

        <expr_stmt pos:start="107:9" pos:end="107:20"><expr pos:start="107:9" pos:end="107:19"><call pos:start="107:9" pos:end="107:19"><name pos:start="107:9" pos:end="107:17">tb_unlock</name><argument_list pos:start="107:18" pos:end="107:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="111:5" pos:end="111:14">return <expr pos:start="111:12" pos:end="111:13"><name pos:start="111:12" pos:end="111:13">tb</name></expr>;</return>

</block_content>}</block></function>
</unit>
