<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13903.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">mmap_init</name><parameter_list pos:start="1:21" pos:end="1:42">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:38"><name pos:start="1:22" pos:end="1:36">AVFormatContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:13">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:21">video_data</name></name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:24">s</name> <init pos:start="7:26" pos:end="7:41">= <expr pos:start="7:28" pos:end="7:41"><name pos:start="7:28" pos:end="7:41"><name pos:start="7:28" pos:end="7:30">ctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="17:6"><decl pos:start="9:5" pos:end="17:5"><type pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:30">v4l2_requestbuffers</name></name></type> <name pos:start="9:32" pos:end="9:34">req</name> <init pos:start="9:36" pos:end="17:5">= <expr pos:start="9:38" pos:end="17:5"><block pos:start="9:38" pos:end="17:5">{

        <expr pos:start="11:9" pos:end="11:45"><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:13">type</name>   <operator pos:start="11:17" pos:end="11:17">=</operator> <name pos:start="11:19" pos:end="11:45">V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>,

        <expr pos:start="13:9" pos:end="13:39"><operator pos:start="13:9" pos:end="13:9">.</operator><name pos:start="13:10" pos:end="13:14">count</name>  <operator pos:start="13:17" pos:end="13:17">=</operator> <name pos:start="13:19" pos:end="13:39">desired_video_buffers</name></expr>,

        <expr pos:start="15:9" pos:end="15:34"><operator pos:start="15:9" pos:end="15:9">.</operator><name pos:start="15:10" pos:end="15:15">memory</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <name pos:start="15:19" pos:end="15:34">V4L2_MEMORY_MMAP</name></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:45"><expr pos:start="21:5" pos:end="21:44"><name pos:start="21:5" pos:end="21:7">res</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:44"><name pos:start="21:11" pos:end="21:15">ioctl</name><argument_list pos:start="21:16" pos:end="21:44">(<argument pos:start="21:17" pos:end="21:21"><expr pos:start="21:17" pos:end="21:21"><name pos:start="21:17" pos:end="21:21"><name pos:start="21:17" pos:end="21:17">s</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:21">fd</name></name></expr></argument>, <argument pos:start="21:24" pos:end="21:37"><expr pos:start="21:24" pos:end="21:37"><name pos:start="21:24" pos:end="21:37">VIDIOC_REQBUFS</name></expr></argument>, <argument pos:start="21:40" pos:end="21:43"><expr pos:start="21:40" pos:end="21:43"><operator pos:start="21:40" pos:end="21:40">&amp;</operator><name pos:start="21:41" pos:end="21:43">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="39:5"><if pos:start="23:5" pos:end="39:5">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">res</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition> <block pos:start="23:18" pos:end="39:5">{<block_content pos:start="25:9" pos:end="37:30">

        <if_stmt pos:start="25:9" pos:end="33:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:28">(<expr pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:17">errno</name> <operator pos:start="25:19" pos:end="25:20">==</operator> <name pos:start="25:22" pos:end="25:27">EINVAL</name></expr>)</condition> <block pos:start="25:30" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:72">

            <expr_stmt pos:start="27:13" pos:end="27:72"><expr pos:start="27:13" pos:end="27:71"><call pos:start="27:13" pos:end="27:71"><name pos:start="27:13" pos:end="27:18">av_log</name><argument_list pos:start="27:19" pos:end="27:71">(<argument pos:start="27:20" pos:end="27:22"><expr pos:start="27:20" pos:end="27:22"><name pos:start="27:20" pos:end="27:22">ctx</name></expr></argument>, <argument pos:start="27:25" pos:end="27:36"><expr pos:start="27:25" pos:end="27:36"><name pos:start="27:25" pos:end="27:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:39" pos:end="27:70"><expr pos:start="27:39" pos:end="27:70"><literal type="string" pos:start="27:39" pos:end="27:70">"Device does not support mmap\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="33:9">else <block pos:start="29:16" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:65">

            <expr_stmt pos:start="31:13" pos:end="31:65"><expr pos:start="31:13" pos:end="31:64"><call pos:start="31:13" pos:end="31:64"><name pos:start="31:13" pos:end="31:18">av_log</name><argument_list pos:start="31:19" pos:end="31:64">(<argument pos:start="31:20" pos:end="31:22"><expr pos:start="31:20" pos:end="31:22"><name pos:start="31:20" pos:end="31:22">ctx</name></expr></argument>, <argument pos:start="31:25" pos:end="31:36"><expr pos:start="31:25" pos:end="31:36"><name pos:start="31:25" pos:end="31:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:39" pos:end="31:63"><expr pos:start="31:39" pos:end="31:63"><literal type="string" pos:start="31:39" pos:end="31:63">"ioctl(VIDIOC_REQBUFS)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <return pos:start="37:9" pos:end="37:30">return <expr pos:start="37:16" pos:end="37:29"><call pos:start="37:16" pos:end="37:29"><name pos:start="37:16" pos:end="37:22">AVERROR</name><argument_list pos:start="37:23" pos:end="37:29">(<argument pos:start="37:24" pos:end="37:28"><expr pos:start="37:24" pos:end="37:28"><name pos:start="37:24" pos:end="37:28">errno</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:22">(<expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:11">req</name><operator pos:start="43:12" pos:end="43:12">.</operator><name pos:start="43:13" pos:end="43:17">count</name></name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <literal type="number" pos:start="43:21" pos:end="43:21">2</literal></expr>)</condition> <block pos:start="43:24" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:31">

        <expr_stmt pos:start="45:9" pos:end="45:66"><expr pos:start="45:9" pos:end="45:65"><call pos:start="45:9" pos:end="45:65"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:65">(<argument pos:start="45:16" pos:end="45:18"><expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">ctx</name></expr></argument>, <argument pos:start="45:21" pos:end="45:32"><expr pos:start="45:21" pos:end="45:32"><name pos:start="45:21" pos:end="45:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:35" pos:end="45:64"><expr pos:start="45:35" pos:end="45:64"><literal type="string" pos:start="45:35" pos:end="45:64">"Insufficient buffer memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="49:9" pos:end="49:31">return <expr pos:start="49:16" pos:end="49:30"><call pos:start="49:16" pos:end="49:30"><name pos:start="49:16" pos:end="49:22">AVERROR</name><argument_list pos:start="49:23" pos:end="49:30">(<argument pos:start="49:24" pos:end="49:29"><expr pos:start="49:24" pos:end="49:29"><name pos:start="49:24" pos:end="49:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:27"><expr pos:start="53:5" pos:end="53:26"><name pos:start="53:5" pos:end="53:14"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:14">buffers</name></name> <operator pos:start="53:16" pos:end="53:16">=</operator> <name pos:start="53:18" pos:end="53:26"><name pos:start="53:18" pos:end="53:20">req</name><operator pos:start="53:21" pos:end="53:21">.</operator><name pos:start="53:22" pos:end="53:26">count</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:58"><expr pos:start="55:5" pos:end="55:57"><name pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:16">buf_start</name></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <call pos:start="55:20" pos:end="55:57"><name pos:start="55:20" pos:end="55:28">av_malloc</name><argument_list pos:start="55:29" pos:end="55:57">(<argument pos:start="55:30" pos:end="55:56"><expr pos:start="55:30" pos:end="55:56"><sizeof pos:start="55:30" pos:end="55:43">sizeof<argument_list pos:start="55:36" pos:end="55:43">(<argument pos:start="55:37" pos:end="55:42"><expr pos:start="55:37" pos:end="55:42"><name pos:start="55:37" pos:end="55:40">void</name> <operator pos:start="55:42" pos:end="55:42">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="55:45" pos:end="55:45">*</operator> <name pos:start="55:47" pos:end="55:56"><name pos:start="55:47" pos:end="55:47">s</name><operator pos:start="55:48" pos:end="55:49">-&gt;</operator><name pos:start="55:50" pos:end="55:56">buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="57:29">(<expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:20">buf_start</name></name> <operator pos:start="57:22" pos:end="57:23">==</operator> <name pos:start="57:25" pos:end="57:28">NULL</name></expr>)</condition> <block pos:start="57:31" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:31">

        <expr_stmt pos:start="59:9" pos:end="59:71"><expr pos:start="59:9" pos:end="59:70"><call pos:start="59:9" pos:end="59:70"><name pos:start="59:9" pos:end="59:14">av_log</name><argument_list pos:start="59:15" pos:end="59:70">(<argument pos:start="59:16" pos:end="59:18"><expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">ctx</name></expr></argument>, <argument pos:start="59:21" pos:end="59:32"><expr pos:start="59:21" pos:end="59:32"><name pos:start="59:21" pos:end="59:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:35" pos:end="59:69"><expr pos:start="59:35" pos:end="59:69"><literal type="string" pos:start="59:35" pos:end="59:69">"Cannot allocate buffer pointers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="63:9" pos:end="63:31">return <expr pos:start="63:16" pos:end="63:30"><call pos:start="63:16" pos:end="63:30"><name pos:start="63:16" pos:end="63:22">AVERROR</name><argument_list pos:start="63:23" pos:end="63:30">(<argument pos:start="63:24" pos:end="63:29"><expr pos:start="63:24" pos:end="63:29"><name pos:start="63:24" pos:end="63:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:62"><expr pos:start="67:5" pos:end="67:61"><name pos:start="67:5" pos:end="67:14"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:14">buf_len</name></name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:61"><name pos:start="67:18" pos:end="67:26">av_malloc</name><argument_list pos:start="67:27" pos:end="67:61">(<argument pos:start="67:28" pos:end="67:60"><expr pos:start="67:28" pos:end="67:60">sizeof<operator pos:start="67:34" pos:end="67:34">(</operator><name pos:start="67:35" pos:end="67:42">unsigned</name> <name pos:start="67:44" pos:end="67:46">int</name><operator pos:start="67:47" pos:end="67:47">)</operator> <operator pos:start="67:49" pos:end="67:49">*</operator> <name pos:start="67:51" pos:end="67:60"><name pos:start="67:51" pos:end="67:51">s</name><operator pos:start="67:52" pos:end="67:53">-&gt;</operator><name pos:start="67:54" pos:end="67:60">buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="79:5"><if pos:start="69:5" pos:end="79:5">if <condition pos:start="69:8" pos:end="69:27">(<expr pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:18">buf_len</name></name> <operator pos:start="69:20" pos:end="69:21">==</operator> <name pos:start="69:23" pos:end="69:26">NULL</name></expr>)</condition> <block pos:start="69:29" pos:end="79:5">{<block_content pos:start="71:9" pos:end="77:31">

        <expr_stmt pos:start="71:9" pos:end="71:68"><expr pos:start="71:9" pos:end="71:67"><call pos:start="71:9" pos:end="71:67"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="71:67">(<argument pos:start="71:16" pos:end="71:18"><expr pos:start="71:16" pos:end="71:18"><name pos:start="71:16" pos:end="71:18">ctx</name></expr></argument>, <argument pos:start="71:21" pos:end="71:32"><expr pos:start="71:21" pos:end="71:32"><name pos:start="71:21" pos:end="71:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:35" pos:end="71:66"><expr pos:start="71:35" pos:end="71:66"><literal type="string" pos:start="71:35" pos:end="71:66">"Cannot allocate buffer sizes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:30"><expr pos:start="73:9" pos:end="73:29"><call pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:15">av_free</name><argument_list pos:start="73:16" pos:end="73:29">(<argument pos:start="73:17" pos:end="73:28"><expr pos:start="73:17" pos:end="73:28"><name pos:start="73:17" pos:end="73:28"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:28">buf_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="77:9" pos:end="77:31">return <expr pos:start="77:16" pos:end="77:30"><call pos:start="77:16" pos:end="77:30"><name pos:start="77:16" pos:end="77:22">AVERROR</name><argument_list pos:start="77:23" pos:end="77:30">(<argument pos:start="77:24" pos:end="77:29"><expr pos:start="77:24" pos:end="77:29"><name pos:start="77:24" pos:end="77:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="83:5" pos:end="145:5">for <control pos:start="83:9" pos:end="83:35">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:30"><expr pos:start="83:17" pos:end="83:29"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <name pos:start="83:21" pos:end="83:29"><name pos:start="83:21" pos:end="83:23">req</name><operator pos:start="83:24" pos:end="83:24">.</operator><name pos:start="83:25" pos:end="83:29">count</name></name></expr>;</condition> <incr pos:start="83:32" pos:end="83:34"><expr pos:start="83:32" pos:end="83:34"><name pos:start="83:32" pos:end="83:32">i</name><operator pos:start="83:33" pos:end="83:34">++</operator></expr></incr>)</control> <block pos:start="83:37" pos:end="145:5">{<block_content pos:start="85:9" pos:end="143:9">

        <decl_stmt pos:start="85:9" pos:end="93:10"><decl pos:start="85:9" pos:end="93:9"><type pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:14">struct</name> <name pos:start="85:16" pos:end="85:26">v4l2_buffer</name></name></type> <name pos:start="85:28" pos:end="85:30">buf</name> <init pos:start="85:32" pos:end="93:9">= <expr pos:start="85:34" pos:end="93:9"><block pos:start="85:34" pos:end="93:9">{

            <expr pos:start="87:13" pos:end="87:49"><operator pos:start="87:13" pos:end="87:13">.</operator><name pos:start="87:14" pos:end="87:17">type</name>   <operator pos:start="87:21" pos:end="87:21">=</operator> <name pos:start="87:23" pos:end="87:49">V4L2_BUF_TYPE_VIDEO_CAPTURE</name></expr>,

            <expr pos:start="89:13" pos:end="89:23"><operator pos:start="89:13" pos:end="89:13">.</operator><name pos:start="89:14" pos:end="89:18">index</name>  <operator pos:start="89:21" pos:end="89:21">=</operator> <name pos:start="89:23" pos:end="89:23">i</name></expr>,

            <expr pos:start="91:13" pos:end="91:38"><operator pos:start="91:13" pos:end="91:13">.</operator><name pos:start="91:14" pos:end="91:19">memory</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <name pos:start="91:23" pos:end="91:38">V4L2_MEMORY_MMAP</name></expr>

        }</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:50"><expr pos:start="97:9" pos:end="97:49"><name pos:start="97:9" pos:end="97:11">res</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:49"><name pos:start="97:15" pos:end="97:19">ioctl</name><argument_list pos:start="97:20" pos:end="97:49">(<argument pos:start="97:21" pos:end="97:25"><expr pos:start="97:21" pos:end="97:25"><name pos:start="97:21" pos:end="97:25"><name pos:start="97:21" pos:end="97:21">s</name><operator pos:start="97:22" pos:end="97:23">-&gt;</operator><name pos:start="97:24" pos:end="97:25">fd</name></name></expr></argument>, <argument pos:start="97:28" pos:end="97:42"><expr pos:start="97:28" pos:end="97:42"><name pos:start="97:28" pos:end="97:42">VIDIOC_QUERYBUF</name></expr></argument>, <argument pos:start="97:45" pos:end="97:48"><expr pos:start="97:45" pos:end="97:48"><operator pos:start="97:45" pos:end="97:45">&amp;</operator><name pos:start="97:46" pos:end="97:48">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="107:9"><if pos:start="99:9" pos:end="107:9">if <condition pos:start="99:12" pos:end="99:20">(<expr pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:15">res</name> <operator pos:start="99:17" pos:end="99:17">&lt;</operator> <literal type="number" pos:start="99:19" pos:end="99:19">0</literal></expr>)</condition> <block pos:start="99:22" pos:end="107:9">{<block_content pos:start="101:13" pos:end="105:34">

            <expr_stmt pos:start="101:13" pos:end="101:66"><expr pos:start="101:13" pos:end="101:65"><call pos:start="101:13" pos:end="101:65"><name pos:start="101:13" pos:end="101:18">av_log</name><argument_list pos:start="101:19" pos:end="101:65">(<argument pos:start="101:20" pos:end="101:22"><expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">ctx</name></expr></argument>, <argument pos:start="101:25" pos:end="101:36"><expr pos:start="101:25" pos:end="101:36"><name pos:start="101:25" pos:end="101:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:39" pos:end="101:64"><expr pos:start="101:39" pos:end="101:64"><literal type="string" pos:start="101:39" pos:end="101:64">"ioctl(VIDIOC_QUERYBUF)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <return pos:start="105:13" pos:end="105:34">return <expr pos:start="105:20" pos:end="105:33"><call pos:start="105:20" pos:end="105:33"><name pos:start="105:20" pos:end="105:26">AVERROR</name><argument_list pos:start="105:27" pos:end="105:33">(<argument pos:start="105:28" pos:end="105:32"><expr pos:start="105:28" pos:end="105:32"><name pos:start="105:28" pos:end="105:32">errno</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:35"><expr pos:start="111:9" pos:end="111:34"><name pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:18">buf_len</name><index pos:start="111:19" pos:end="111:21">[<expr pos:start="111:20" pos:end="111:20"><name pos:start="111:20" pos:end="111:20">i</name></expr>]</index></name> <operator pos:start="111:23" pos:end="111:23">=</operator> <name pos:start="111:25" pos:end="111:34"><name pos:start="111:25" pos:end="111:27">buf</name><operator pos:start="111:28" pos:end="111:28">.</operator><name pos:start="111:29" pos:end="111:34">length</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="125:9"><if pos:start="113:9" pos:end="125:9">if <condition pos:start="113:12" pos:end="113:63">(<expr pos:start="113:13" pos:end="113:62"><name pos:start="113:13" pos:end="113:25"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:25">frame_size</name></name> <operator pos:start="113:27" pos:end="113:27">&gt;</operator> <literal type="number" pos:start="113:29" pos:end="113:29">0</literal> <operator pos:start="113:31" pos:end="113:32">&amp;&amp;</operator> <name pos:start="113:34" pos:end="113:46"><name pos:start="113:34" pos:end="113:34">s</name><operator pos:start="113:35" pos:end="113:36">-&gt;</operator><name pos:start="113:37" pos:end="113:43">buf_len</name><index pos:start="113:44" pos:end="113:46">[<expr pos:start="113:45" pos:end="113:45"><name pos:start="113:45" pos:end="113:45">i</name></expr>]</index></name> <operator pos:start="113:48" pos:end="113:48">&lt;</operator> <name pos:start="113:50" pos:end="113:62"><name pos:start="113:50" pos:end="113:50">s</name><operator pos:start="113:51" pos:end="113:52">-&gt;</operator><name pos:start="113:53" pos:end="113:62">frame_size</name></name></expr>)</condition> <block pos:start="113:65" pos:end="125:9">{<block_content pos:start="115:13" pos:end="123:22">

            <expr_stmt pos:start="115:13" pos:end="119:52"><expr pos:start="115:13" pos:end="119:51"><call pos:start="115:13" pos:end="119:51"><name pos:start="115:13" pos:end="115:18">av_log</name><argument_list pos:start="115:19" pos:end="119:51">(<argument pos:start="115:20" pos:end="115:22"><expr pos:start="115:20" pos:end="115:22"><name pos:start="115:20" pos:end="115:22">ctx</name></expr></argument>, <argument pos:start="115:25" pos:end="115:36"><expr pos:start="115:25" pos:end="115:36"><name pos:start="115:25" pos:end="115:36">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="117:20" pos:end="117:49"><expr pos:start="117:20" pos:end="117:49"><literal type="string" pos:start="117:20" pos:end="117:49">"Buffer len [%d] = %d != %d\n"</literal></expr></argument>,

                   <argument pos:start="119:20" pos:end="119:20"><expr pos:start="119:20" pos:end="119:20"><name pos:start="119:20" pos:end="119:20">i</name></expr></argument>, <argument pos:start="119:23" pos:end="119:35"><expr pos:start="119:23" pos:end="119:35"><name pos:start="119:23" pos:end="119:35"><name pos:start="119:23" pos:end="119:23">s</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:32">buf_len</name><index pos:start="119:33" pos:end="119:35">[<expr pos:start="119:34" pos:end="119:34"><name pos:start="119:34" pos:end="119:34">i</name></expr>]</index></name></expr></argument>, <argument pos:start="119:38" pos:end="119:50"><expr pos:start="119:38" pos:end="119:50"><name pos:start="119:38" pos:end="119:50"><name pos:start="119:38" pos:end="119:38">s</name><operator pos:start="119:39" pos:end="119:40">-&gt;</operator><name pos:start="119:41" pos:end="119:50">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <return pos:start="123:13" pos:end="123:22">return <expr pos:start="123:20" pos:end="123:21"><operator pos:start="123:20" pos:end="123:20">-</operator><literal type="number" pos:start="123:21" pos:end="123:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="131:52"><expr pos:start="127:9" pos:end="131:51"><name pos:start="127:9" pos:end="127:23"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:20">buf_start</name><index pos:start="127:21" pos:end="127:23">[<expr pos:start="127:22" pos:end="127:22"><name pos:start="127:22" pos:end="127:22">i</name></expr>]</index></name> <operator pos:start="127:25" pos:end="127:25">=</operator> <call pos:start="127:27" pos:end="131:51"><name pos:start="127:27" pos:end="127:30">mmap</name><argument_list pos:start="127:31" pos:end="131:51">(<argument pos:start="127:32" pos:end="127:35"><expr pos:start="127:32" pos:end="127:35"><name pos:start="127:32" pos:end="127:35">NULL</name></expr></argument>, <argument pos:start="127:38" pos:end="127:47"><expr pos:start="127:38" pos:end="127:47"><name pos:start="127:38" pos:end="127:47"><name pos:start="127:38" pos:end="127:40">buf</name><operator pos:start="127:41" pos:end="127:41">.</operator><name pos:start="127:42" pos:end="127:47">length</name></name></expr></argument>,

                               <argument pos:start="129:32" pos:end="129:53"><expr pos:start="129:32" pos:end="129:53"><name pos:start="129:32" pos:end="129:40">PROT_READ</name> <operator pos:start="129:42" pos:end="129:42">|</operator> <name pos:start="129:44" pos:end="129:53">PROT_WRITE</name></expr></argument>, <argument pos:start="129:56" pos:end="129:65"><expr pos:start="129:56" pos:end="129:65"><name pos:start="129:56" pos:end="129:65">MAP_SHARED</name></expr></argument>,

                               <argument pos:start="131:32" pos:end="131:36"><expr pos:start="131:32" pos:end="131:36"><name pos:start="131:32" pos:end="131:36"><name pos:start="131:32" pos:end="131:32">s</name><operator pos:start="131:33" pos:end="131:34">-&gt;</operator><name pos:start="131:35" pos:end="131:36">fd</name></name></expr></argument>, <argument pos:start="131:39" pos:end="131:50"><expr pos:start="131:39" pos:end="131:50"><name pos:start="131:39" pos:end="131:50"><name pos:start="131:39" pos:end="131:41">buf</name><operator pos:start="131:42" pos:end="131:42">.</operator><name pos:start="131:43" pos:end="131:43">m</name><operator pos:start="131:44" pos:end="131:44">.</operator><name pos:start="131:45" pos:end="131:50">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="135:9" pos:end="143:9"><if pos:start="135:9" pos:end="143:9">if <condition pos:start="135:12" pos:end="135:42">(<expr pos:start="135:13" pos:end="135:41"><name pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:13">s</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:24">buf_start</name><index pos:start="135:25" pos:end="135:27">[<expr pos:start="135:26" pos:end="135:26"><name pos:start="135:26" pos:end="135:26">i</name></expr>]</index></name> <operator pos:start="135:29" pos:end="135:30">==</operator> <name pos:start="135:32" pos:end="135:41">MAP_FAILED</name></expr>)</condition> <block pos:start="135:44" pos:end="143:9">{<block_content pos:start="137:13" pos:end="141:34">

            <expr_stmt pos:start="137:13" pos:end="137:69"><expr pos:start="137:13" pos:end="137:68"><call pos:start="137:13" pos:end="137:68"><name pos:start="137:13" pos:end="137:18">av_log</name><argument_list pos:start="137:19" pos:end="137:68">(<argument pos:start="137:20" pos:end="137:22"><expr pos:start="137:20" pos:end="137:22"><name pos:start="137:20" pos:end="137:22">ctx</name></expr></argument>, <argument pos:start="137:25" pos:end="137:36"><expr pos:start="137:25" pos:end="137:36"><name pos:start="137:25" pos:end="137:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="137:39" pos:end="137:50"><expr pos:start="137:39" pos:end="137:50"><literal type="string" pos:start="137:39" pos:end="137:50">"mmap: %s\n"</literal></expr></argument>, <argument pos:start="137:53" pos:end="137:67"><expr pos:start="137:53" pos:end="137:67"><call pos:start="137:53" pos:end="137:67"><name pos:start="137:53" pos:end="137:60">strerror</name><argument_list pos:start="137:61" pos:end="137:67">(<argument pos:start="137:62" pos:end="137:66"><expr pos:start="137:62" pos:end="137:66"><name pos:start="137:62" pos:end="137:66">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <return pos:start="141:13" pos:end="141:34">return <expr pos:start="141:20" pos:end="141:33"><call pos:start="141:20" pos:end="141:33"><name pos:start="141:20" pos:end="141:26">AVERROR</name><argument_list pos:start="141:27" pos:end="141:33">(<argument pos:start="141:28" pos:end="141:32"><expr pos:start="141:28" pos:end="141:32"><name pos:start="141:28" pos:end="141:32">errno</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="149:5" pos:end="149:13">return <expr pos:start="149:12" pos:end="149:12"><literal type="number" pos:start="149:12" pos:end="149:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
