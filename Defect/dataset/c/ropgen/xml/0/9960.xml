<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9960.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">long</name></type> <name pos:start="1:6" pos:end="1:17">do_sigreturn</name><parameter_list pos:start="1:18" pos:end="1:36">(<parameter pos:start="1:19" pos:end="1:35"><decl pos:start="1:19" pos:end="1:35"><type pos:start="1:19" pos:end="1:31"><name pos:start="1:19" pos:end="1:29">CPUSH4State</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:35">regs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:13">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:26">target_sigframe</name></name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:33">frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">abi_ulong</name></type> <name pos:start="7:15" pos:end="7:24">frame_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">sigset_t</name></type> <name pos:start="9:14" pos:end="9:20">blocked</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:19">target_sigset_t</name></type> <name pos:start="11:21" pos:end="11:30">target_set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:19">r0</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="22:0"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">err</name> <init pos:start="17:13" pos:end="17:15">= <expr pos:start="17:15" pos:end="17:15"><literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="21:1" pos:end="21:25">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:11">defined</name><argument_list pos:start="21:12" pos:end="21:25">(<argument pos:start="21:13" pos:end="21:24"><expr pos:start="21:13" pos:end="21:24"><name pos:start="21:13" pos:end="21:24">DEBUG_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:37"><call pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:11">fprintf</name><argument_list pos:start="23:12" pos:end="23:37">(<argument pos:start="23:13" pos:end="23:18"><expr pos:start="23:13" pos:end="23:18"><name pos:start="23:13" pos:end="23:18">stderr</name></expr></argument>, <argument pos:start="23:21" pos:end="23:36"><expr pos:start="23:21" pos:end="23:36"><literal type="string" pos:start="23:21" pos:end="23:36">"do_sigreturn\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:14">frame_addr</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <name pos:start="27:18" pos:end="27:32"><name pos:start="27:18" pos:end="27:21">regs</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:28">gregs</name><index pos:start="27:29" pos:end="27:32">[<expr pos:start="27:30" pos:end="27:31"><literal type="number" pos:start="27:30" pos:end="27:31">15</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="31:22"><if pos:start="29:5" pos:end="31:22">if <condition pos:start="29:8" pos:end="29:61">(<expr pos:start="29:9" pos:end="29:60"><operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:60"><name pos:start="29:10" pos:end="29:25">lock_user_struct</name><argument_list pos:start="29:26" pos:end="29:60">(<argument pos:start="29:27" pos:end="29:37"><expr pos:start="29:27" pos:end="29:37"><name pos:start="29:27" pos:end="29:37">VERIFY_READ</name></expr></argument>, <argument pos:start="29:40" pos:end="29:44"><expr pos:start="29:40" pos:end="29:44"><name pos:start="29:40" pos:end="29:44">frame</name></expr></argument>, <argument pos:start="29:47" pos:end="29:56"><expr pos:start="29:47" pos:end="29:56"><name pos:start="29:47" pos:end="29:56">frame_addr</name></expr></argument>, <argument pos:start="29:59" pos:end="29:59"><expr pos:start="29:59" pos:end="29:59"><literal type="number" pos:start="29:59" pos:end="29:59">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:22"><block_content pos:start="31:9" pos:end="31:22">

   	<goto pos:start="31:9" pos:end="31:22">goto <name pos:start="31:14" pos:end="31:21">badframe</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:61"><expr pos:start="35:5" pos:end="35:60"><name pos:start="35:5" pos:end="35:7">err</name> <operator pos:start="35:9" pos:end="35:10">|=</operator> <call pos:start="35:12" pos:end="35:60"><name pos:start="35:12" pos:end="35:21">__get_user</name><argument_list pos:start="35:22" pos:end="35:60">(<argument pos:start="35:23" pos:end="35:39"><expr pos:start="35:23" pos:end="35:39"><name pos:start="35:23" pos:end="35:39"><name pos:start="35:23" pos:end="35:32">target_set</name><operator pos:start="35:33" pos:end="35:33">.</operator><name pos:start="35:34" pos:end="35:36">sig</name><index pos:start="35:37" pos:end="35:39">[<expr pos:start="35:38" pos:end="35:38"><literal type="number" pos:start="35:38" pos:end="35:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="35:42" pos:end="35:59"><expr pos:start="35:42" pos:end="35:59"><operator pos:start="35:42" pos:end="35:42">&amp;</operator><name pos:start="35:43" pos:end="35:59"><name pos:start="35:43" pos:end="35:47">frame</name><operator pos:start="35:48" pos:end="35:49">-&gt;</operator><name pos:start="35:50" pos:end="35:51">sc</name><operator pos:start="35:52" pos:end="35:52">.</operator><name pos:start="35:53" pos:end="35:59">oldmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="37:5" pos:end="41:5">for<control pos:start="37:8" pos:end="37:42">(<init pos:start="37:9" pos:end="37:14"><expr pos:start="37:9" pos:end="37:13"><name pos:start="37:9" pos:end="37:9">i</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <literal type="number" pos:start="37:13" pos:end="37:13">1</literal></expr>;</init> <condition pos:start="37:16" pos:end="37:37"><expr pos:start="37:16" pos:end="37:36"><name pos:start="37:16" pos:end="37:16">i</name> <operator pos:start="37:18" pos:end="37:18">&lt;</operator> <name pos:start="37:20" pos:end="37:36">TARGET_NSIG_WORDS</name></expr>;</condition> <incr pos:start="37:39" pos:end="37:41"><expr pos:start="37:39" pos:end="37:41"><name pos:start="37:39" pos:end="37:39">i</name><operator pos:start="37:40" pos:end="37:41">++</operator></expr></incr>)</control> <block pos:start="37:44" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:73">

        <expr_stmt pos:start="39:9" pos:end="39:73"><expr pos:start="39:9" pos:end="39:72"><name pos:start="39:9" pos:end="39:11">err</name> <operator pos:start="39:13" pos:end="39:14">|=</operator> <operator pos:start="39:16" pos:end="39:16">(</operator><call pos:start="39:17" pos:end="39:71"><name pos:start="39:17" pos:end="39:26">__get_user</name><argument_list pos:start="39:27" pos:end="39:71">(<argument pos:start="39:28" pos:end="39:44"><expr pos:start="39:28" pos:end="39:44"><name pos:start="39:28" pos:end="39:44"><name pos:start="39:28" pos:end="39:37">target_set</name><operator pos:start="39:38" pos:end="39:38">.</operator><name pos:start="39:39" pos:end="39:41">sig</name><index pos:start="39:42" pos:end="39:44">[<expr pos:start="39:43" pos:end="39:43"><name pos:start="39:43" pos:end="39:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="39:47" pos:end="39:70"><expr pos:start="39:47" pos:end="39:70"><operator pos:start="39:47" pos:end="39:47">&amp;</operator><name pos:start="39:48" pos:end="39:70"><name pos:start="39:48" pos:end="39:52">frame</name><operator pos:start="39:53" pos:end="39:54">-&gt;</operator><name pos:start="39:55" pos:end="39:63">extramask</name><index pos:start="39:64" pos:end="39:70">[<expr pos:start="39:65" pos:end="39:69"><name pos:start="39:65" pos:end="39:65">i</name> <operator pos:start="39:67" pos:end="39:67">-</operator> <literal type="number" pos:start="39:69" pos:end="39:69">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="39:72" pos:end="39:72">)</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="45:5" pos:end="47:22"><if pos:start="45:5" pos:end="47:22">if <condition pos:start="45:8" pos:end="45:12">(<expr pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">err</name></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:22"><block_content pos:start="47:9" pos:end="47:22">

        <goto pos:start="47:9" pos:end="47:22">goto <name pos:start="47:14" pos:end="47:21">badframe</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:58"><expr pos:start="51:5" pos:end="51:57"><call pos:start="51:5" pos:end="51:57"><name pos:start="51:5" pos:end="51:34">target_to_host_sigset_internal</name><argument_list pos:start="51:35" pos:end="51:57">(<argument pos:start="51:36" pos:end="51:43"><expr pos:start="51:36" pos:end="51:43"><operator pos:start="51:36" pos:end="51:36">&amp;</operator><name pos:start="51:37" pos:end="51:43">blocked</name></expr></argument>, <argument pos:start="51:46" pos:end="51:56"><expr pos:start="51:46" pos:end="51:56"><operator pos:start="51:46" pos:end="51:46">&amp;</operator><name pos:start="51:47" pos:end="51:56">target_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:45"><expr pos:start="53:5" pos:end="53:44"><call pos:start="53:5" pos:end="53:44"><name pos:start="53:5" pos:end="53:15">sigprocmask</name><argument_list pos:start="53:16" pos:end="53:44">(<argument pos:start="53:17" pos:end="53:27"><expr pos:start="53:17" pos:end="53:27"><name pos:start="53:17" pos:end="53:27">SIG_SETMASK</name></expr></argument>, <argument pos:start="53:30" pos:end="53:37"><expr pos:start="53:30" pos:end="53:37"><operator pos:start="53:30" pos:end="53:30">&amp;</operator><name pos:start="53:31" pos:end="53:37">blocked</name></expr></argument>, <argument pos:start="53:40" pos:end="53:43"><expr pos:start="53:40" pos:end="53:43"><name pos:start="53:40" pos:end="53:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="57:5" pos:end="59:22"><if pos:start="57:5" pos:end="59:22">if <condition pos:start="57:8" pos:end="57:50">(<expr pos:start="57:9" pos:end="57:49"><call pos:start="57:9" pos:end="57:49"><name pos:start="57:9" pos:end="57:26">restore_sigcontext</name><argument_list pos:start="57:27" pos:end="57:49">(<argument pos:start="57:28" pos:end="57:31"><expr pos:start="57:28" pos:end="57:31"><name pos:start="57:28" pos:end="57:31">regs</name></expr></argument>, <argument pos:start="57:34" pos:end="57:43"><expr pos:start="57:34" pos:end="57:43"><operator pos:start="57:34" pos:end="57:34">&amp;</operator><name pos:start="57:35" pos:end="57:43"><name pos:start="57:35" pos:end="57:39">frame</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:43">sc</name></name></expr></argument>, <argument pos:start="57:46" pos:end="57:48"><expr pos:start="57:46" pos:end="57:48"><operator pos:start="57:46" pos:end="57:46">&amp;</operator><name pos:start="57:47" pos:end="57:48">r0</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:22"><block_content pos:start="59:9" pos:end="59:22">

        <goto pos:start="59:9" pos:end="59:22">goto <name pos:start="59:14" pos:end="59:21">badframe</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:45"><expr pos:start="63:5" pos:end="63:44"><call pos:start="63:5" pos:end="63:44"><name pos:start="63:5" pos:end="63:22">unlock_user_struct</name><argument_list pos:start="63:23" pos:end="63:44">(<argument pos:start="63:24" pos:end="63:28"><expr pos:start="63:24" pos:end="63:28"><name pos:start="63:24" pos:end="63:28">frame</name></expr></argument>, <argument pos:start="63:31" pos:end="63:40"><expr pos:start="63:31" pos:end="63:40"><name pos:start="63:31" pos:end="63:40">frame_addr</name></expr></argument>, <argument pos:start="63:43" pos:end="63:43"><expr pos:start="63:43" pos:end="63:43"><literal type="number" pos:start="63:43" pos:end="63:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="65:5" pos:end="65:14">return <expr pos:start="65:12" pos:end="65:13"><name pos:start="65:12" pos:end="65:13">r0</name></expr>;</return>



<label pos:start="69:1" pos:end="69:9"><name pos:start="69:1" pos:end="69:8">badframe</name>:</label>

    <expr_stmt pos:start="71:5" pos:end="71:45"><expr pos:start="71:5" pos:end="71:44"><call pos:start="71:5" pos:end="71:44"><name pos:start="71:5" pos:end="71:22">unlock_user_struct</name><argument_list pos:start="71:23" pos:end="71:44">(<argument pos:start="71:24" pos:end="71:28"><expr pos:start="71:24" pos:end="71:28"><name pos:start="71:24" pos:end="71:28">frame</name></expr></argument>, <argument pos:start="71:31" pos:end="71:40"><expr pos:start="71:31" pos:end="71:40"><name pos:start="71:31" pos:end="71:40">frame_addr</name></expr></argument>, <argument pos:start="71:43" pos:end="71:43"><expr pos:start="71:43" pos:end="71:43"><literal type="number" pos:start="71:43" pos:end="71:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:30"><expr pos:start="73:5" pos:end="73:29"><call pos:start="73:5" pos:end="73:29"><name pos:start="73:5" pos:end="73:13">force_sig</name><argument_list pos:start="73:14" pos:end="73:29">(<argument pos:start="73:15" pos:end="73:28"><expr pos:start="73:15" pos:end="73:28"><name pos:start="73:15" pos:end="73:28">TARGET_SIGSEGV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
