<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/817.c" pos:tabs="8"><function pos:start="1:1" pos:end="281:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_ivi_decode_blocks</name><parameter_list pos:start="1:25" pos:end="1:77">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:42"><name pos:start="1:26" pos:end="1:38">GetBitContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">gb</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:55">IVIBandDesc</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">band</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:76"><decl pos:start="1:64" pos:end="1:76"><type pos:start="1:64" pos:end="1:76"><name pos:start="1:64" pos:end="1:70">IVITile</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:76">tile</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="281:1">{<block_content pos:start="5:5" pos:end="279:13">

    <decl_stmt pos:start="5:5" pos:end="7:61"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type>         <name pos:start="5:17" pos:end="5:19">mbn</name></decl>, <decl pos:start="5:22" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:24">blk</name></decl>, <decl pos:start="5:27" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:27" pos:end="5:36">num_blocks</name></decl>, <decl pos:start="5:39" pos:end="5:48"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:39" pos:end="5:48">num_coeffs</name></decl>, <decl pos:start="5:51" pos:end="5:58"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:51" pos:end="5:58">blk_size</name></decl>, <decl pos:start="5:61" pos:end="5:68"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:61" pos:end="5:68">scan_pos</name></decl>, <decl pos:start="5:71" pos:end="5:73"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:71" pos:end="5:73">run</name></decl>, <decl pos:start="5:76" pos:end="5:78"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:76" pos:end="5:78">val</name></decl>,

                <decl pos:start="7:17" pos:end="7:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="7:17" pos:end="7:19">pos</name></decl>, <decl pos:start="7:22" pos:end="7:29"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="7:22" pos:end="7:29">is_intra</name></decl>, <decl pos:start="7:32" pos:end="7:38"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="7:32" pos:end="7:38">mc_type</name></decl>, <decl pos:start="7:41" pos:end="7:44"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="7:41" pos:end="7:44">mv_x</name></decl>, <decl pos:start="7:47" pos:end="7:50"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="7:47" pos:end="7:50">mv_y</name></decl>, <decl pos:start="7:53" pos:end="7:60"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="7:53" pos:end="7:60">col_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type>     <name pos:start="9:17" pos:end="9:28"><name pos:start="9:17" pos:end="9:25">col_flags</name><index pos:start="9:26" pos:end="9:28">[<expr pos:start="9:27" pos:end="9:27"><literal type="number" pos:start="9:27" pos:end="9:27">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int32_t</name></type>     <name pos:start="11:17" pos:end="11:23">prev_dc</name></decl>, <decl pos:start="11:26" pos:end="11:34"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:26" pos:end="11:34"><name pos:start="11:26" pos:end="11:30">trvec</name><index pos:start="11:31" pos:end="11:34">[<expr pos:start="11:32" pos:end="11:33"><literal type="number" pos:start="11:32" pos:end="11:33">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:53"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type>    <name pos:start="13:17" pos:end="13:19">cbp</name></decl>, <decl pos:start="13:22" pos:end="13:24"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:22" pos:end="13:24">sym</name></decl>, <decl pos:start="13:27" pos:end="13:28"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:27" pos:end="13:28">lo</name></decl>, <decl pos:start="13:31" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:31" pos:end="13:32">hi</name></decl>, <decl pos:start="13:35" pos:end="13:39"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:35" pos:end="13:39">quant</name></decl>, <decl pos:start="13:42" pos:end="13:49"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:42" pos:end="13:49">buf_offs</name></decl>, <decl pos:start="13:52" pos:end="13:52"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:52" pos:end="13:52">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:13">IVIMbInfo</name>   <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:19">mb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:37"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:13">RVMapDesc</name>   <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:22">rvmap</name> <init pos:start="17:24" pos:end="17:37">= <expr pos:start="17:26" pos:end="17:37"><name pos:start="17:26" pos:end="17:37"><name pos:start="17:26" pos:end="17:29">band</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:37">rv_map</name></name></expr></init></decl>;</decl_stmt>

    <function_decl pos:start="19:5" pos:end="19:98"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">void</name></type> (<modifier pos:start="19:11" pos:end="19:11">*</modifier><name pos:start="19:12" pos:end="19:29">mc_with_delta_func</name>)<parameter_list pos:start="19:31" pos:end="19:97">(<parameter pos:start="19:32" pos:end="19:43"><decl pos:start="19:32" pos:end="19:43"><type pos:start="19:32" pos:end="19:43"><name pos:start="19:32" pos:end="19:38">int16_t</name> <modifier pos:start="19:40" pos:end="19:40">*</modifier></type><name pos:start="19:41" pos:end="19:43">buf</name></decl></parameter>, <parameter pos:start="19:46" pos:end="19:67"><decl pos:start="19:46" pos:end="19:67"><type pos:start="19:46" pos:end="19:67"><specifier pos:start="19:46" pos:end="19:50">const</specifier> <name pos:start="19:52" pos:end="19:58">int16_t</name> <modifier pos:start="19:60" pos:end="19:60">*</modifier></type><name pos:start="19:61" pos:end="19:67">ref_buf</name></decl></parameter>, <parameter pos:start="19:70" pos:end="19:83"><decl pos:start="19:70" pos:end="19:83"><type pos:start="19:70" pos:end="19:83"><name pos:start="19:70" pos:end="19:77">uint32_t</name></type> <name pos:start="19:79" pos:end="19:83">pitch</name></decl></parameter>, <parameter pos:start="19:86" pos:end="19:96"><decl pos:start="19:86" pos:end="19:96"><type pos:start="19:86" pos:end="19:96"><name pos:start="19:86" pos:end="19:88">int</name></type> <name pos:start="19:90" pos:end="19:96">mc_type</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="21:5" pos:end="21:98"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">void</name></type> (<modifier pos:start="21:11" pos:end="21:11">*</modifier><name pos:start="21:12" pos:end="21:27">mc_no_delta_func</name>)  <parameter_list pos:start="21:31" pos:end="21:97">(<parameter pos:start="21:32" pos:end="21:43"><decl pos:start="21:32" pos:end="21:43"><type pos:start="21:32" pos:end="21:43"><name pos:start="21:32" pos:end="21:38">int16_t</name> <modifier pos:start="21:40" pos:end="21:40">*</modifier></type><name pos:start="21:41" pos:end="21:43">buf</name></decl></parameter>, <parameter pos:start="21:46" pos:end="21:67"><decl pos:start="21:46" pos:end="21:67"><type pos:start="21:46" pos:end="21:67"><specifier pos:start="21:46" pos:end="21:50">const</specifier> <name pos:start="21:52" pos:end="21:58">int16_t</name> <modifier pos:start="21:60" pos:end="21:60">*</modifier></type><name pos:start="21:61" pos:end="21:67">ref_buf</name></decl></parameter>, <parameter pos:start="21:70" pos:end="21:83"><decl pos:start="21:70" pos:end="21:83"><type pos:start="21:70" pos:end="21:83"><name pos:start="21:70" pos:end="21:77">uint32_t</name></type> <name pos:start="21:79" pos:end="21:83">pitch</name></decl></parameter>, <parameter pos:start="21:86" pos:end="21:96"><decl pos:start="21:86" pos:end="21:96"><type pos:start="21:86" pos:end="21:96"><name pos:start="21:86" pos:end="21:88">int</name></type> <name pos:start="21:90" pos:end="21:96">mc_type</name></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:21"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:18">uint16_t</name>  <modifier pos:start="23:21" pos:end="23:21">*</modifier></type><name pos:start="23:22" pos:end="23:29">base_tab</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:21"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:17">uint8_t</name>   <modifier pos:start="25:21" pos:end="25:21">*</modifier></type><name pos:start="25:22" pos:end="25:30">scale_tab</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:16"><expr pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:11">prev_dc</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="29:18" pos:end="29:67">/* init intra prediction for the DC coefficient */</comment>



    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:12">blk_size</name>   <operator pos:start="33:16" pos:end="33:16">=</operator> <name pos:start="33:18" pos:end="33:31"><name pos:start="33:18" pos:end="33:21">band</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:31">blk_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:12">col_mask</name>   <operator pos:start="35:16" pos:end="35:16">=</operator> <name pos:start="35:18" pos:end="35:25">blk_size</name> <operator pos:start="35:27" pos:end="35:27">-</operator> <literal type="number" pos:start="35:29" pos:end="35:29">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="35:32" pos:end="35:77">/* column mask for tracking non-zero coeffs */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:53"><expr pos:start="37:5" pos:end="37:52"><name pos:start="37:5" pos:end="37:14">num_blocks</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <ternary pos:start="37:18" pos:end="37:52"><condition pos:start="37:18" pos:end="37:46"><expr pos:start="37:18" pos:end="37:44"><operator pos:start="37:18" pos:end="37:18">(</operator><name pos:start="37:19" pos:end="37:31"><name pos:start="37:19" pos:end="37:22">band</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:31">mb_size</name></name> <operator pos:start="37:33" pos:end="37:34">!=</operator> <name pos:start="37:36" pos:end="37:43">blk_size</name><operator pos:start="37:44" pos:end="37:44">)</operator></expr> ?</condition><then pos:start="37:48" pos:end="37:48"> <expr pos:start="37:48" pos:end="37:48"><literal type="number" pos:start="37:48" pos:end="37:48">4</literal></expr> </then><else pos:start="37:50" pos:end="37:52">: <expr pos:start="37:52" pos:end="37:52"><literal type="number" pos:start="37:52" pos:end="37:52">1</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="block" pos:start="37:55" pos:end="37:83">/* number of blocks per mb */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:14">num_coeffs</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <name pos:start="39:18" pos:end="39:25">blk_size</name> <operator pos:start="39:27" pos:end="39:27">*</operator> <name pos:start="39:29" pos:end="39:36">blk_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="53:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:22">(<expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:16">blk_size</name> <operator pos:start="41:18" pos:end="41:19">==</operator> <literal type="number" pos:start="41:21" pos:end="41:21">8</literal></expr>)</condition> <block pos:start="41:24" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:52">

        <expr_stmt pos:start="43:9" pos:end="43:49"><expr pos:start="43:9" pos:end="43:48"><name pos:start="43:9" pos:end="43:26">mc_with_delta_func</name> <operator pos:start="43:28" pos:end="43:28">=</operator> <name pos:start="43:30" pos:end="43:48">ff_ivi_mc_8x8_delta</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:24">mc_no_delta_func</name>   <operator pos:start="45:28" pos:end="45:28">=</operator> <name pos:start="45:30" pos:end="45:51">ff_ivi_mc_8x8_no_delta</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="53:5">else <block pos:start="47:12" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:52">

        <expr_stmt pos:start="49:9" pos:end="49:49"><expr pos:start="49:9" pos:end="49:48"><name pos:start="49:9" pos:end="49:26">mc_with_delta_func</name> <operator pos:start="49:28" pos:end="49:28">=</operator> <name pos:start="49:30" pos:end="49:48">ff_ivi_mc_4x4_delta</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:52"><expr pos:start="51:9" pos:end="51:51"><name pos:start="51:9" pos:end="51:24">mc_no_delta_func</name>   <operator pos:start="51:28" pos:end="51:28">=</operator> <name pos:start="51:30" pos:end="51:51">ff_ivi_mc_4x4_no_delta</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="57:5" pos:end="271:5">for <control pos:start="57:9" pos:end="57:67">(<init pos:start="57:10" pos:end="57:33"><expr pos:start="57:10" pos:end="57:16"><name pos:start="57:10" pos:end="57:12">mbn</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr><operator pos:start="57:17" pos:end="57:17">,</operator> <expr pos:start="57:19" pos:end="57:32"><name pos:start="57:19" pos:end="57:20">mb</name> <operator pos:start="57:22" pos:end="57:22">=</operator> <name pos:start="57:24" pos:end="57:32"><name pos:start="57:24" pos:end="57:27">tile</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:32">mbs</name></name></expr>;</init> <condition pos:start="57:35" pos:end="57:54"><expr pos:start="57:35" pos:end="57:53"><name pos:start="57:35" pos:end="57:37">mbn</name> <operator pos:start="57:39" pos:end="57:39">&lt;</operator> <name pos:start="57:41" pos:end="57:53"><name pos:start="57:41" pos:end="57:44">tile</name><operator pos:start="57:45" pos:end="57:46">-&gt;</operator><name pos:start="57:47" pos:end="57:53">num_MBs</name></name></expr>;</condition> <incr pos:start="57:56" pos:end="57:66"><expr pos:start="57:56" pos:end="57:59"><name pos:start="57:56" pos:end="57:57">mb</name><operator pos:start="57:58" pos:end="57:59">++</operator></expr><operator pos:start="57:60" pos:end="57:60">,</operator> <expr pos:start="57:62" pos:end="57:66"><name pos:start="57:62" pos:end="57:64">mbn</name><operator pos:start="57:65" pos:end="57:66">++</operator></expr></incr>)</control> <block pos:start="57:69" pos:end="271:5">{<block_content pos:start="59:9" pos:end="269:9">

        <expr_stmt pos:start="59:9" pos:end="59:29"><expr pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:16">is_intra</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <operator pos:start="59:20" pos:end="59:20">!</operator><name pos:start="59:21" pos:end="59:28"><name pos:start="59:21" pos:end="59:22">mb</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:28">type</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:27"><expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:11">cbp</name>      <operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:26"><name pos:start="61:20" pos:end="61:21">mb</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:26">cbp</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:16">buf_offs</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <name pos:start="63:20" pos:end="63:31"><name pos:start="63:20" pos:end="63:21">mb</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:31">buf_offs</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:63"><expr pos:start="67:9" pos:end="67:62"><name pos:start="67:9" pos:end="67:13">quant</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <call pos:start="67:17" pos:end="67:62"><name pos:start="67:17" pos:end="67:23">av_clip</name><argument_list pos:start="67:24" pos:end="67:62">(<argument pos:start="67:25" pos:end="67:54"><expr pos:start="67:25" pos:end="67:54"><name pos:start="67:25" pos:end="67:40"><name pos:start="67:25" pos:end="67:28">band</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:40">glob_quant</name></name> <operator pos:start="67:42" pos:end="67:42">+</operator> <name pos:start="67:44" pos:end="67:54"><name pos:start="67:44" pos:end="67:45">mb</name><operator pos:start="67:46" pos:end="67:47">-&gt;</operator><name pos:start="67:48" pos:end="67:54">q_delta</name></name></expr></argument>, <argument pos:start="67:57" pos:end="67:57"><expr pos:start="67:57" pos:end="67:57"><literal type="number" pos:start="67:57" pos:end="67:57">0</literal></expr></argument>, <argument pos:start="67:60" pos:end="67:61"><expr pos:start="67:60" pos:end="67:61"><literal type="number" pos:start="67:60" pos:end="67:61">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:68"><expr pos:start="71:9" pos:end="71:67"><name pos:start="71:9" pos:end="71:16">base_tab</name>  <operator pos:start="71:19" pos:end="71:19">=</operator> <ternary pos:start="71:21" pos:end="71:67"><condition pos:start="71:21" pos:end="71:30"><expr pos:start="71:21" pos:end="71:28"><name pos:start="71:21" pos:end="71:28">is_intra</name></expr> ?</condition><then pos:start="71:32" pos:end="71:47"> <expr pos:start="71:32" pos:end="71:47"><name pos:start="71:32" pos:end="71:47"><name pos:start="71:32" pos:end="71:35">band</name><operator pos:start="71:36" pos:end="71:37">-&gt;</operator><name pos:start="71:38" pos:end="71:47">intra_base</name></name></expr>  </then><else pos:start="71:50" pos:end="71:67">: <expr pos:start="71:52" pos:end="71:67"><name pos:start="71:52" pos:end="71:67"><name pos:start="71:52" pos:end="71:55">band</name><operator pos:start="71:56" pos:end="71:57">-&gt;</operator><name pos:start="71:58" pos:end="71:67">inter_base</name></name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:69"><expr pos:start="73:9" pos:end="73:68"><name pos:start="73:9" pos:end="73:17">scale_tab</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <ternary pos:start="73:21" pos:end="73:68"><condition pos:start="73:21" pos:end="73:30"><expr pos:start="73:21" pos:end="73:28"><name pos:start="73:21" pos:end="73:28">is_intra</name></expr> ?</condition><then pos:start="73:32" pos:end="73:48"> <expr pos:start="73:32" pos:end="73:48"><name pos:start="73:32" pos:end="73:48"><name pos:start="73:32" pos:end="73:35">band</name><operator pos:start="73:36" pos:end="73:37">-&gt;</operator><name pos:start="73:38" pos:end="73:48">intra_scale</name></name></expr> </then><else pos:start="73:50" pos:end="73:68">: <expr pos:start="73:52" pos:end="73:68"><name pos:start="73:52" pos:end="73:68"><name pos:start="73:52" pos:end="73:55">band</name><operator pos:start="73:56" pos:end="73:57">-&gt;</operator><name pos:start="73:58" pos:end="73:68">inter_scale</name></name></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="77:37"><if pos:start="75:9" pos:end="77:37">if <condition pos:start="75:12" pos:end="75:22">(<expr pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:21">scale_tab</name></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:37"><block_content pos:start="77:13" pos:end="77:37">

            <expr_stmt pos:start="77:13" pos:end="77:37"><expr pos:start="77:13" pos:end="77:36"><name pos:start="77:13" pos:end="77:17">quant</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <name pos:start="77:21" pos:end="77:36"><name pos:start="77:21" pos:end="77:29">scale_tab</name><index pos:start="77:30" pos:end="77:36">[<expr pos:start="77:31" pos:end="77:35"><name pos:start="77:31" pos:end="77:35">quant</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="81:9" pos:end="101:9"><if pos:start="81:9" pos:end="101:9">if <condition pos:start="81:12" pos:end="81:22">(<expr pos:start="81:13" pos:end="81:21"><operator pos:start="81:13" pos:end="81:13">!</operator><name pos:start="81:14" pos:end="81:21">is_intra</name></expr>)</condition> <block pos:start="81:24" pos:end="101:9">{<block_content pos:start="83:13" pos:end="99:13">

            <expr_stmt pos:start="83:13" pos:end="83:28"><expr pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:16">mv_x</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <name pos:start="83:20" pos:end="83:27"><name pos:start="83:20" pos:end="83:21">mb</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:27">mv_x</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:28"><expr pos:start="85:13" pos:end="85:27"><name pos:start="85:13" pos:end="85:16">mv_y</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:27"><name pos:start="85:20" pos:end="85:21">mb</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:27">mv_y</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="99:13"><if pos:start="87:13" pos:end="91:13">if <condition pos:start="87:16" pos:end="87:34">(<expr pos:start="87:17" pos:end="87:33"><operator pos:start="87:17" pos:end="87:17">!</operator><name pos:start="87:18" pos:end="87:33"><name pos:start="87:18" pos:end="87:21">band</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:33">is_halfpel</name></name></expr>)</condition> <block pos:start="87:36" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:28">

                <expr_stmt pos:start="89:17" pos:end="89:28"><expr pos:start="89:17" pos:end="89:27"><name pos:start="89:17" pos:end="89:23">mc_type</name> <operator pos:start="89:25" pos:end="89:25">=</operator> <literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="89:30" pos:end="89:63">/* we have only fullpel vectors */</comment>

            </block_content>}</block></if> <else pos:start="91:15" pos:end="99:13">else <block pos:start="91:20" pos:end="99:13">{<block_content pos:start="93:17" pos:end="97:27">

                <expr_stmt pos:start="93:17" pos:end="93:57"><expr pos:start="93:17" pos:end="93:56"><name pos:start="93:17" pos:end="93:23">mc_type</name> <operator pos:start="93:25" pos:end="93:25">=</operator> <operator pos:start="93:27" pos:end="93:27">(</operator><operator pos:start="93:28" pos:end="93:28">(</operator><name pos:start="93:29" pos:end="93:32">mv_y</name> <operator pos:start="93:34" pos:end="93:34">&amp;</operator> <literal type="number" pos:start="93:36" pos:end="93:36">1</literal><operator pos:start="93:37" pos:end="93:37">)</operator> <operator pos:start="93:39" pos:end="93:40">&lt;&lt;</operator> <literal type="number" pos:start="93:42" pos:end="93:42">1</literal><operator pos:start="93:43" pos:end="93:43">)</operator> <operator pos:start="93:45" pos:end="93:45">|</operator> <operator pos:start="93:47" pos:end="93:47">(</operator><name pos:start="93:48" pos:end="93:51">mv_x</name> <operator pos:start="93:53" pos:end="93:53">&amp;</operator> <literal type="number" pos:start="93:55" pos:end="93:55">1</literal><operator pos:start="93:56" pos:end="93:56">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:27"><expr pos:start="95:17" pos:end="95:26"><name pos:start="95:17" pos:end="95:20">mv_x</name> <operator pos:start="95:22" pos:end="95:24">&gt;&gt;=</operator> <literal type="number" pos:start="95:26" pos:end="95:26">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:27"><expr pos:start="97:17" pos:end="97:26"><name pos:start="97:17" pos:end="97:20">mv_y</name> <operator pos:start="97:22" pos:end="97:24">&gt;&gt;=</operator> <literal type="number" pos:start="97:26" pos:end="97:26">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="97:29" pos:end="97:75">/* convert halfpel vectors into fullpel ones */</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="105:9" pos:end="269:9">for <control pos:start="105:13" pos:end="105:46">(<init pos:start="105:14" pos:end="105:21"><expr pos:start="105:14" pos:end="105:20"><name pos:start="105:14" pos:end="105:16">blk</name> <operator pos:start="105:18" pos:end="105:18">=</operator> <literal type="number" pos:start="105:20" pos:end="105:20">0</literal></expr>;</init> <condition pos:start="105:23" pos:end="105:39"><expr pos:start="105:23" pos:end="105:38"><name pos:start="105:23" pos:end="105:25">blk</name> <operator pos:start="105:27" pos:end="105:27">&lt;</operator> <name pos:start="105:29" pos:end="105:38">num_blocks</name></expr>;</condition> <incr pos:start="105:41" pos:end="105:45"><expr pos:start="105:41" pos:end="105:45"><name pos:start="105:41" pos:end="105:43">blk</name><operator pos:start="105:44" pos:end="105:45">++</operator></expr></incr>)</control> <block pos:start="105:48" pos:end="269:9">{<block_content pos:start="109:13" pos:end="267:22">

            <comment type="block" pos:start="107:13" pos:end="107:77">/* adjust block position in the buffer according to its number */</comment>

            <if_stmt pos:start="109:13" pos:end="119:13"><if pos:start="109:13" pos:end="113:13">if <condition pos:start="109:16" pos:end="109:24">(<expr pos:start="109:17" pos:end="109:23"><name pos:start="109:17" pos:end="109:19">blk</name> <operator pos:start="109:21" pos:end="109:21">&amp;</operator> <literal type="number" pos:start="109:23" pos:end="109:23">1</literal></expr>)</condition> <block pos:start="109:26" pos:end="113:13">{<block_content pos:start="111:17" pos:end="111:37">

                <expr_stmt pos:start="111:17" pos:end="111:37"><expr pos:start="111:17" pos:end="111:36"><name pos:start="111:17" pos:end="111:24">buf_offs</name> <operator pos:start="111:26" pos:end="111:27">+=</operator> <name pos:start="111:29" pos:end="111:36">blk_size</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="113:15" pos:end="119:13">else if <condition pos:start="113:23" pos:end="113:32">(<expr pos:start="113:24" pos:end="113:31"><name pos:start="113:24" pos:end="113:26">blk</name> <operator pos:start="113:28" pos:end="113:29">==</operator> <literal type="number" pos:start="113:31" pos:end="113:31">2</literal></expr>)</condition> <block pos:start="113:34" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:51">

                <expr_stmt pos:start="115:17" pos:end="115:37"><expr pos:start="115:17" pos:end="115:36"><name pos:start="115:17" pos:end="115:24">buf_offs</name> <operator pos:start="115:26" pos:end="115:27">-=</operator> <name pos:start="115:29" pos:end="115:36">blk_size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:51"><expr pos:start="117:17" pos:end="117:50"><name pos:start="117:17" pos:end="117:24">buf_offs</name> <operator pos:start="117:26" pos:end="117:27">+=</operator> <name pos:start="117:29" pos:end="117:36">blk_size</name> <operator pos:start="117:38" pos:end="117:38">*</operator> <name pos:start="117:40" pos:end="117:50"><name pos:start="117:40" pos:end="117:43">band</name><operator pos:start="117:44" pos:end="117:45">-&gt;</operator><name pos:start="117:46" pos:end="117:50">pitch</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="123:13" pos:end="263:13"><if pos:start="123:13" pos:end="241:13">if <condition pos:start="123:16" pos:end="123:24">(<expr pos:start="123:17" pos:end="123:23"><name pos:start="123:17" pos:end="123:19">cbp</name> <operator pos:start="123:21" pos:end="123:21">&amp;</operator> <literal type="number" pos:start="123:23" pos:end="123:23">1</literal></expr>)</condition> <block pos:start="123:26" pos:end="241:13">{<block_content pos:start="125:17" pos:end="239:61"> <comment type="block" pos:start="123:28" pos:end="123:46">/* block coded ? */</comment>

                <expr_stmt pos:start="125:17" pos:end="125:30"><expr pos:start="125:17" pos:end="125:29"><name pos:start="125:17" pos:end="125:24">scan_pos</name> <operator pos:start="125:26" pos:end="125:26">=</operator> <operator pos:start="125:28" pos:end="125:28">-</operator><literal type="number" pos:start="125:29" pos:end="125:29">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:62"><expr pos:start="127:17" pos:end="127:61"><call pos:start="127:17" pos:end="127:61"><name pos:start="127:17" pos:end="127:22">memset</name><argument_list pos:start="127:23" pos:end="127:61">(<argument pos:start="127:24" pos:end="127:28"><expr pos:start="127:24" pos:end="127:28"><name pos:start="127:24" pos:end="127:28">trvec</name></expr></argument>, <argument pos:start="127:31" pos:end="127:31"><expr pos:start="127:31" pos:end="127:31"><literal type="number" pos:start="127:31" pos:end="127:31">0</literal></expr></argument>, <argument pos:start="127:34" pos:end="127:60"><expr pos:start="127:34" pos:end="127:60"><name pos:start="127:34" pos:end="127:43">num_coeffs</name><operator pos:start="127:44" pos:end="127:44">*</operator><sizeof pos:start="127:45" pos:end="127:60">sizeof<argument_list pos:start="127:51" pos:end="127:60">(<argument pos:start="127:52" pos:end="127:59"><expr pos:start="127:52" pos:end="127:59"><name pos:start="127:52" pos:end="127:59"><name pos:start="127:52" pos:end="127:56">trvec</name><index pos:start="127:57" pos:end="127:59">[<expr pos:start="127:58" pos:end="127:58"><literal type="number" pos:start="127:58" pos:end="127:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="127:64" pos:end="127:90">/* zero transform vector */</comment>

                <expr_stmt pos:start="129:17" pos:end="129:56"><expr pos:start="129:17" pos:end="129:55"><call pos:start="129:17" pos:end="129:55"><name pos:start="129:17" pos:end="129:22">memset</name><argument_list pos:start="129:23" pos:end="129:55">(<argument pos:start="129:24" pos:end="129:32"><expr pos:start="129:24" pos:end="129:32"><name pos:start="129:24" pos:end="129:32">col_flags</name></expr></argument>, <argument pos:start="129:35" pos:end="129:35"><expr pos:start="129:35" pos:end="129:35"><literal type="number" pos:start="129:35" pos:end="129:35">0</literal></expr></argument>, <argument pos:start="129:38" pos:end="129:54"><expr pos:start="129:38" pos:end="129:54"><sizeof pos:start="129:38" pos:end="129:54">sizeof<argument_list pos:start="129:44" pos:end="129:54">(<argument pos:start="129:45" pos:end="129:53"><expr pos:start="129:45" pos:end="129:53"><name pos:start="129:45" pos:end="129:53">col_flags</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="129:63" pos:end="129:85">/* zero column flags */</comment>



                <while pos:start="133:17" pos:end="199:17">while <condition pos:start="133:23" pos:end="133:46">(<expr pos:start="133:24" pos:end="133:45"><name pos:start="133:24" pos:end="133:31">scan_pos</name> <operator pos:start="133:33" pos:end="133:34">&lt;=</operator> <name pos:start="133:36" pos:end="133:45">num_coeffs</name></expr>)</condition> <block pos:start="133:48" pos:end="199:17">{<block_content pos:start="135:21" pos:end="197:55">

                    <expr_stmt pos:start="135:21" pos:end="135:82"><expr pos:start="135:21" pos:end="135:81"><name pos:start="135:21" pos:end="135:23">sym</name> <operator pos:start="135:25" pos:end="135:25">=</operator> <call pos:start="135:27" pos:end="135:81"><name pos:start="135:27" pos:end="135:34">get_vlc2</name><argument_list pos:start="135:35" pos:end="135:81">(<argument pos:start="135:36" pos:end="135:37"><expr pos:start="135:36" pos:end="135:37"><name pos:start="135:36" pos:end="135:37">gb</name></expr></argument>, <argument pos:start="135:40" pos:end="135:63"><expr pos:start="135:40" pos:end="135:63"><name pos:start="135:40" pos:end="135:63"><name pos:start="135:40" pos:end="135:43">band</name><operator pos:start="135:44" pos:end="135:45">-&gt;</operator><name pos:start="135:46" pos:end="135:52">blk_vlc</name><operator pos:start="135:53" pos:end="135:53">.</operator><name pos:start="135:54" pos:end="135:56">tab</name><operator pos:start="135:57" pos:end="135:58">-&gt;</operator><name pos:start="135:59" pos:end="135:63">table</name></name></expr></argument>, <argument pos:start="135:66" pos:end="135:77"><expr pos:start="135:66" pos:end="135:77"><name pos:start="135:66" pos:end="135:77">IVI_VLC_BITS</name></expr></argument>, <argument pos:start="135:80" pos:end="135:80"><expr pos:start="135:80" pos:end="135:80"><literal type="number" pos:start="135:80" pos:end="135:80">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="137:21" pos:end="139:30"><if pos:start="137:21" pos:end="139:30">if <condition pos:start="137:24" pos:end="137:46">(<expr pos:start="137:25" pos:end="137:45"><name pos:start="137:25" pos:end="137:27">sym</name> <operator pos:start="137:29" pos:end="137:30">==</operator> <name pos:start="137:32" pos:end="137:45"><name pos:start="137:32" pos:end="137:36">rvmap</name><operator pos:start="137:37" pos:end="137:38">-&gt;</operator><name pos:start="137:39" pos:end="137:45">eob_sym</name></name></expr>)</condition><block type="pseudo" pos:start="139:25" pos:end="139:30"><block_content pos:start="139:25" pos:end="139:30">

                        <break pos:start="139:25" pos:end="139:30">break;</break></block_content></block></if></if_stmt> <comment type="block" pos:start="139:32" pos:end="139:49">/* End of block */</comment>



                    <if_stmt pos:start="143:21" pos:end="167:21"><if pos:start="143:21" pos:end="153:21">if <condition pos:start="143:24" pos:end="143:46">(<expr pos:start="143:25" pos:end="143:45"><name pos:start="143:25" pos:end="143:27">sym</name> <operator pos:start="143:29" pos:end="143:30">==</operator> <name pos:start="143:32" pos:end="143:45"><name pos:start="143:32" pos:end="143:36">rvmap</name><operator pos:start="143:37" pos:end="143:38">-&gt;</operator><name pos:start="143:39" pos:end="143:45">esc_sym</name></name></expr>)</condition> <block pos:start="143:48" pos:end="153:21">{<block_content pos:start="145:25" pos:end="151:59"> <comment type="block" pos:start="143:50" pos:end="143:106">/* Escape - run/val explicitly coded using 3 vlc codes */</comment>

                        <expr_stmt pos:start="145:25" pos:end="145:90"><expr pos:start="145:25" pos:end="145:89"><name pos:start="145:25" pos:end="145:27">run</name> <operator pos:start="145:29" pos:end="145:29">=</operator> <call pos:start="145:31" pos:end="145:85"><name pos:start="145:31" pos:end="145:38">get_vlc2</name><argument_list pos:start="145:39" pos:end="145:85">(<argument pos:start="145:40" pos:end="145:41"><expr pos:start="145:40" pos:end="145:41"><name pos:start="145:40" pos:end="145:41">gb</name></expr></argument>, <argument pos:start="145:44" pos:end="145:67"><expr pos:start="145:44" pos:end="145:67"><name pos:start="145:44" pos:end="145:67"><name pos:start="145:44" pos:end="145:47">band</name><operator pos:start="145:48" pos:end="145:49">-&gt;</operator><name pos:start="145:50" pos:end="145:56">blk_vlc</name><operator pos:start="145:57" pos:end="145:57">.</operator><name pos:start="145:58" pos:end="145:60">tab</name><operator pos:start="145:61" pos:end="145:62">-&gt;</operator><name pos:start="145:63" pos:end="145:67">table</name></name></expr></argument>, <argument pos:start="145:70" pos:end="145:81"><expr pos:start="145:70" pos:end="145:81"><name pos:start="145:70" pos:end="145:81">IVI_VLC_BITS</name></expr></argument>, <argument pos:start="145:84" pos:end="145:84"><expr pos:start="145:84" pos:end="145:84"><literal type="number" pos:start="145:84" pos:end="145:84">1</literal></expr></argument>)</argument_list></call> <operator pos:start="145:87" pos:end="145:87">+</operator> <literal type="number" pos:start="145:89" pos:end="145:89">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="147:25" pos:end="147:86"><expr pos:start="147:25" pos:end="147:85"><name pos:start="147:25" pos:end="147:26">lo</name>  <operator pos:start="147:29" pos:end="147:29">=</operator> <call pos:start="147:31" pos:end="147:85"><name pos:start="147:31" pos:end="147:38">get_vlc2</name><argument_list pos:start="147:39" pos:end="147:85">(<argument pos:start="147:40" pos:end="147:41"><expr pos:start="147:40" pos:end="147:41"><name pos:start="147:40" pos:end="147:41">gb</name></expr></argument>, <argument pos:start="147:44" pos:end="147:67"><expr pos:start="147:44" pos:end="147:67"><name pos:start="147:44" pos:end="147:67"><name pos:start="147:44" pos:end="147:47">band</name><operator pos:start="147:48" pos:end="147:49">-&gt;</operator><name pos:start="147:50" pos:end="147:56">blk_vlc</name><operator pos:start="147:57" pos:end="147:57">.</operator><name pos:start="147:58" pos:end="147:60">tab</name><operator pos:start="147:61" pos:end="147:62">-&gt;</operator><name pos:start="147:63" pos:end="147:67">table</name></name></expr></argument>, <argument pos:start="147:70" pos:end="147:81"><expr pos:start="147:70" pos:end="147:81"><name pos:start="147:70" pos:end="147:81">IVI_VLC_BITS</name></expr></argument>, <argument pos:start="147:84" pos:end="147:84"><expr pos:start="147:84" pos:end="147:84"><literal type="number" pos:start="147:84" pos:end="147:84">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="149:25" pos:end="149:86"><expr pos:start="149:25" pos:end="149:85"><name pos:start="149:25" pos:end="149:26">hi</name>  <operator pos:start="149:29" pos:end="149:29">=</operator> <call pos:start="149:31" pos:end="149:85"><name pos:start="149:31" pos:end="149:38">get_vlc2</name><argument_list pos:start="149:39" pos:end="149:85">(<argument pos:start="149:40" pos:end="149:41"><expr pos:start="149:40" pos:end="149:41"><name pos:start="149:40" pos:end="149:41">gb</name></expr></argument>, <argument pos:start="149:44" pos:end="149:67"><expr pos:start="149:44" pos:end="149:67"><name pos:start="149:44" pos:end="149:67"><name pos:start="149:44" pos:end="149:47">band</name><operator pos:start="149:48" pos:end="149:49">-&gt;</operator><name pos:start="149:50" pos:end="149:56">blk_vlc</name><operator pos:start="149:57" pos:end="149:57">.</operator><name pos:start="149:58" pos:end="149:60">tab</name><operator pos:start="149:61" pos:end="149:62">-&gt;</operator><name pos:start="149:63" pos:end="149:67">table</name></name></expr></argument>, <argument pos:start="149:70" pos:end="149:81"><expr pos:start="149:70" pos:end="149:81"><name pos:start="149:70" pos:end="149:81">IVI_VLC_BITS</name></expr></argument>, <argument pos:start="149:84" pos:end="149:84"><expr pos:start="149:84" pos:end="149:84"><literal type="number" pos:start="149:84" pos:end="149:84">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="151:25" pos:end="151:59"><expr pos:start="151:25" pos:end="151:58"><name pos:start="151:25" pos:end="151:27">val</name> <operator pos:start="151:29" pos:end="151:29">=</operator> <call pos:start="151:31" pos:end="151:58"><name pos:start="151:31" pos:end="151:42">IVI_TOSIGNED</name><argument_list pos:start="151:43" pos:end="151:58">(<argument pos:start="151:44" pos:end="151:57"><expr pos:start="151:44" pos:end="151:57"><operator pos:start="151:44" pos:end="151:44">(</operator><name pos:start="151:45" pos:end="151:46">hi</name> <operator pos:start="151:48" pos:end="151:49">&lt;&lt;</operator> <literal type="number" pos:start="151:51" pos:end="151:51">6</literal><operator pos:start="151:52" pos:end="151:52">)</operator> <operator pos:start="151:54" pos:end="151:54">|</operator> <name pos:start="151:56" pos:end="151:57">lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="151:61" pos:end="151:104">/* merge them and convert into signed val */</comment>

                    </block_content>}</block></if> <else pos:start="153:23" pos:end="167:21">else <block pos:start="153:28" pos:end="167:21">{<block_content pos:start="155:25" pos:end="165:49">

                        <if_stmt pos:start="155:25" pos:end="161:25"><if pos:start="155:25" pos:end="161:25">if <condition pos:start="155:28" pos:end="155:40">(<expr pos:start="155:29" pos:end="155:39"><name pos:start="155:29" pos:end="155:31">sym</name> <operator pos:start="155:33" pos:end="155:34">&gt;=</operator> <literal type="number" pos:start="155:36" pos:end="155:39">256U</literal></expr>)</condition> <block pos:start="155:42" pos:end="161:25">{<block_content pos:start="157:29" pos:end="159:38">

                            <expr_stmt pos:start="157:29" pos:end="157:94"><expr pos:start="157:29" pos:end="157:93"><call pos:start="157:29" pos:end="157:93"><name pos:start="157:29" pos:end="157:34">av_log</name><argument_list pos:start="157:35" pos:end="157:93">(<argument pos:start="157:36" pos:end="157:39"><expr pos:start="157:36" pos:end="157:39"><name pos:start="157:36" pos:end="157:39">NULL</name></expr></argument>, <argument pos:start="157:42" pos:end="157:53"><expr pos:start="157:42" pos:end="157:53"><name pos:start="157:42" pos:end="157:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="157:56" pos:end="157:87"><expr pos:start="157:56" pos:end="157:87"><literal type="string" pos:start="157:56" pos:end="157:87">"Invalid sym encountered: %d.\n"</literal></expr></argument>, <argument pos:start="157:90" pos:end="157:92"><expr pos:start="157:90" pos:end="157:92"><name pos:start="157:90" pos:end="157:92">sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="159:29" pos:end="159:38">return <expr pos:start="159:36" pos:end="159:37"><operator pos:start="159:36" pos:end="159:36">-</operator><literal type="number" pos:start="159:37" pos:end="159:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="163:25" pos:end="163:49"><expr pos:start="163:25" pos:end="163:48"><name pos:start="163:25" pos:end="163:27">run</name> <operator pos:start="163:29" pos:end="163:29">=</operator> <name pos:start="163:31" pos:end="163:48"><name pos:start="163:31" pos:end="163:35">rvmap</name><operator pos:start="163:36" pos:end="163:37">-&gt;</operator><name pos:start="163:38" pos:end="163:43">runtab</name><index pos:start="163:44" pos:end="163:48">[<expr pos:start="163:45" pos:end="163:47"><name pos:start="163:45" pos:end="163:47">sym</name></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="165:25" pos:end="165:49"><expr pos:start="165:25" pos:end="165:48"><name pos:start="165:25" pos:end="165:27">val</name> <operator pos:start="165:29" pos:end="165:29">=</operator> <name pos:start="165:31" pos:end="165:48"><name pos:start="165:31" pos:end="165:35">rvmap</name><operator pos:start="165:36" pos:end="165:37">-&gt;</operator><name pos:start="165:38" pos:end="165:43">valtab</name><index pos:start="165:44" pos:end="165:48">[<expr pos:start="165:45" pos:end="165:47"><name pos:start="165:45" pos:end="165:47">sym</name></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>



                    <comment type="block" pos:start="171:21" pos:end="171:50">/* de-zigzag and dequantize */</comment>

                    <expr_stmt pos:start="173:21" pos:end="173:36"><expr pos:start="173:21" pos:end="173:35"><name pos:start="173:21" pos:end="173:28">scan_pos</name> <operator pos:start="173:30" pos:end="173:31">+=</operator> <name pos:start="173:33" pos:end="173:35">run</name></expr>;</expr_stmt>

                    <if_stmt pos:start="175:21" pos:end="177:30"><if pos:start="175:21" pos:end="177:30">if <condition pos:start="175:24" pos:end="175:47">(<expr pos:start="175:25" pos:end="175:46"><name pos:start="175:25" pos:end="175:32">scan_pos</name> <operator pos:start="175:34" pos:end="175:35">&gt;=</operator> <name pos:start="175:37" pos:end="175:46">num_coeffs</name></expr>)</condition><block type="pseudo" pos:start="177:25" pos:end="177:30"><block_content pos:start="177:25" pos:end="177:30">

                        <break pos:start="177:25" pos:end="177:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="179:21" pos:end="179:47"><expr pos:start="179:21" pos:end="179:46"><name pos:start="179:21" pos:end="179:23">pos</name> <operator pos:start="179:25" pos:end="179:25">=</operator> <name pos:start="179:27" pos:end="179:46"><name pos:start="179:27" pos:end="179:30">band</name><operator pos:start="179:31" pos:end="179:32">-&gt;</operator><name pos:start="179:33" pos:end="179:36">scan</name><index pos:start="179:37" pos:end="179:46">[<expr pos:start="179:38" pos:end="179:45"><name pos:start="179:38" pos:end="179:45">scan_pos</name></expr>]</index></name></expr>;</expr_stmt>



                    <if_stmt pos:start="183:21" pos:end="185:64"><if pos:start="183:21" pos:end="185:64">if <condition pos:start="183:24" pos:end="183:29">(<expr pos:start="183:25" pos:end="183:28"><operator pos:start="183:25" pos:end="183:25">!</operator><name pos:start="183:26" pos:end="183:28">val</name></expr>)</condition><block type="pseudo" pos:start="185:25" pos:end="185:64"><block_content pos:start="185:25" pos:end="185:64">

                        <expr_stmt pos:start="185:25" pos:end="185:64"><expr pos:start="185:25" pos:end="185:63"><call pos:start="185:25" pos:end="185:63"><name pos:start="185:25" pos:end="185:31">av_dlog</name><argument_list pos:start="185:32" pos:end="185:63">(<argument pos:start="185:33" pos:end="185:36"><expr pos:start="185:33" pos:end="185:36"><name pos:start="185:33" pos:end="185:36">NULL</name></expr></argument>, <argument pos:start="185:39" pos:end="185:62"><expr pos:start="185:39" pos:end="185:62"><literal type="string" pos:start="185:39" pos:end="185:62">"Val = 0 encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="189:21" pos:end="189:53"><expr pos:start="189:21" pos:end="189:52"><name pos:start="189:21" pos:end="189:21">q</name> <operator pos:start="189:23" pos:end="189:23">=</operator> <operator pos:start="189:25" pos:end="189:25">(</operator><name pos:start="189:26" pos:end="189:38"><name pos:start="189:26" pos:end="189:33">base_tab</name><index pos:start="189:34" pos:end="189:38">[<expr pos:start="189:35" pos:end="189:37"><name pos:start="189:35" pos:end="189:37">pos</name></expr>]</index></name> <operator pos:start="189:40" pos:end="189:40">*</operator> <name pos:start="189:42" pos:end="189:46">quant</name><operator pos:start="189:47" pos:end="189:47">)</operator> <operator pos:start="189:49" pos:end="189:50">&gt;&gt;</operator> <literal type="number" pos:start="189:52" pos:end="189:52">9</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="191:21" pos:end="193:75"><if pos:start="191:21" pos:end="193:75">if <condition pos:start="191:24" pos:end="191:30">(<expr pos:start="191:25" pos:end="191:29"><name pos:start="191:25" pos:end="191:25">q</name> <operator pos:start="191:27" pos:end="191:27">&gt;</operator> <literal type="number" pos:start="191:29" pos:end="191:29">1</literal></expr>)</condition><block type="pseudo" pos:start="193:25" pos:end="193:75"><block_content pos:start="193:25" pos:end="193:75">

                        <expr_stmt pos:start="193:25" pos:end="193:75"><expr pos:start="193:25" pos:end="193:74"><name pos:start="193:25" pos:end="193:27">val</name> <operator pos:start="193:29" pos:end="193:29">=</operator> <name pos:start="193:31" pos:end="193:33">val</name> <operator pos:start="193:35" pos:end="193:35">*</operator> <name pos:start="193:37" pos:end="193:37">q</name> <operator pos:start="193:39" pos:end="193:39">+</operator> <call pos:start="193:41" pos:end="193:51"><name pos:start="193:41" pos:end="193:46">FFSIGN</name><argument_list pos:start="193:47" pos:end="193:51">(<argument pos:start="193:48" pos:end="193:50"><expr pos:start="193:48" pos:end="193:50"><name pos:start="193:48" pos:end="193:50">val</name></expr></argument>)</argument_list></call> <operator pos:start="193:53" pos:end="193:53">*</operator> <operator pos:start="193:55" pos:end="193:55">(</operator><operator pos:start="193:56" pos:end="193:56">(</operator><operator pos:start="193:57" pos:end="193:57">(</operator><name pos:start="193:58" pos:end="193:58">q</name> <operator pos:start="193:60" pos:end="193:60">^</operator> <literal type="number" pos:start="193:62" pos:end="193:62">1</literal><operator pos:start="193:63" pos:end="193:63">)</operator> <operator pos:start="193:65" pos:end="193:65">-</operator> <literal type="number" pos:start="193:67" pos:end="193:67">1</literal><operator pos:start="193:68" pos:end="193:68">)</operator> <operator pos:start="193:70" pos:end="193:71">&gt;&gt;</operator> <literal type="number" pos:start="193:73" pos:end="193:73">1</literal><operator pos:start="193:74" pos:end="193:74">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="195:21" pos:end="195:37"><expr pos:start="195:21" pos:end="195:36"><name pos:start="195:21" pos:end="195:30"><name pos:start="195:21" pos:end="195:25">trvec</name><index pos:start="195:26" pos:end="195:30">[<expr pos:start="195:27" pos:end="195:29"><name pos:start="195:27" pos:end="195:29">pos</name></expr>]</index></name> <operator pos:start="195:32" pos:end="195:32">=</operator> <name pos:start="195:34" pos:end="195:36">val</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:55"><expr pos:start="197:21" pos:end="197:54"><name pos:start="197:21" pos:end="197:45"><name pos:start="197:21" pos:end="197:29">col_flags</name><index pos:start="197:30" pos:end="197:45">[<expr pos:start="197:31" pos:end="197:44"><name pos:start="197:31" pos:end="197:33">pos</name> <operator pos:start="197:35" pos:end="197:35">&amp;</operator> <name pos:start="197:37" pos:end="197:44">col_mask</name></expr>]</index></name> <operator pos:start="197:47" pos:end="197:48">|=</operator> <operator pos:start="197:50" pos:end="197:50">!</operator><operator pos:start="197:51" pos:end="197:51">!</operator><name pos:start="197:52" pos:end="197:54">val</name></expr>;</expr_stmt> <comment type="block" pos:start="197:57" pos:end="197:102">/* track columns containing non-zero coeffs */</comment>

                </block_content>}</block></while><comment type="line" pos:start="199:18" pos:end="199:25">// while</comment>



                <if_stmt pos:start="203:17" pos:end="205:30"><if pos:start="203:17" pos:end="205:30">if <condition pos:start="203:20" pos:end="203:68">(<expr pos:start="203:21" pos:end="203:67"><name pos:start="203:21" pos:end="203:28">scan_pos</name> <operator pos:start="203:30" pos:end="203:31">&gt;=</operator> <name pos:start="203:33" pos:end="203:42">num_coeffs</name> <operator pos:start="203:44" pos:end="203:45">&amp;&amp;</operator> <name pos:start="203:47" pos:end="203:49">sym</name> <operator pos:start="203:51" pos:end="203:52">!=</operator> <name pos:start="203:54" pos:end="203:67"><name pos:start="203:54" pos:end="203:58">rvmap</name><operator pos:start="203:59" pos:end="203:60">-&gt;</operator><name pos:start="203:61" pos:end="203:67">eob_sym</name></name></expr>)</condition><block type="pseudo" pos:start="205:21" pos:end="205:30"><block_content pos:start="205:21" pos:end="205:30">

                    <return pos:start="205:21" pos:end="205:30">return <expr pos:start="205:28" pos:end="205:29"><operator pos:start="205:28" pos:end="205:28">-</operator><literal type="number" pos:start="205:29" pos:end="205:29">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="205:32" pos:end="205:55">/* corrupt block data */</comment>



                <comment type="block" pos:start="209:17" pos:end="209:66">/* undoing DC coeff prediction for intra-blocks */</comment>

                <if_stmt pos:start="211:17" pos:end="219:17"><if pos:start="211:17" pos:end="219:17">if <condition pos:start="211:20" pos:end="211:50">(<expr pos:start="211:21" pos:end="211:49"><name pos:start="211:21" pos:end="211:28">is_intra</name> <operator pos:start="211:30" pos:end="211:31">&amp;&amp;</operator> <name pos:start="211:33" pos:end="211:49"><name pos:start="211:33" pos:end="211:36">band</name><operator pos:start="211:37" pos:end="211:38">-&gt;</operator><name pos:start="211:39" pos:end="211:49">is_2d_trans</name></name></expr>)</condition> <block pos:start="211:52" pos:end="219:17">{<block_content pos:start="213:21" pos:end="217:46">

                    <expr_stmt pos:start="213:21" pos:end="213:45"><expr pos:start="213:21" pos:end="213:44"><name pos:start="213:21" pos:end="213:27">prev_dc</name>      <operator pos:start="213:34" pos:end="213:35">+=</operator> <name pos:start="213:37" pos:end="213:44"><name pos:start="213:37" pos:end="213:41">trvec</name><index pos:start="213:42" pos:end="213:44">[<expr pos:start="213:43" pos:end="213:43"><literal type="number" pos:start="213:43" pos:end="213:43">0</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="215:21" pos:end="215:44"><expr pos:start="215:21" pos:end="215:43"><name pos:start="215:21" pos:end="215:28"><name pos:start="215:21" pos:end="215:25">trvec</name><index pos:start="215:26" pos:end="215:28">[<expr pos:start="215:27" pos:end="215:27"><literal type="number" pos:start="215:27" pos:end="215:27">0</literal></expr>]</index></name>      <operator pos:start="215:35" pos:end="215:35">=</operator> <name pos:start="215:37" pos:end="215:43">prev_dc</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="217:21" pos:end="217:46"><expr pos:start="217:21" pos:end="217:45"><name pos:start="217:21" pos:end="217:32"><name pos:start="217:21" pos:end="217:29">col_flags</name><index pos:start="217:30" pos:end="217:32">[<expr pos:start="217:31" pos:end="217:31"><literal type="number" pos:start="217:31" pos:end="217:31">0</literal></expr>]</index></name> <operator pos:start="217:34" pos:end="217:35">|=</operator> <operator pos:start="217:37" pos:end="217:37">!</operator><operator pos:start="217:38" pos:end="217:38">!</operator><name pos:start="217:39" pos:end="217:45">prev_dc</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="223:17" pos:end="223:45">/* apply inverse transform */</comment>

                <expr_stmt pos:start="225:17" pos:end="227:60"><expr pos:start="225:17" pos:end="227:59"><call pos:start="225:17" pos:end="227:59"><name pos:start="225:17" pos:end="225:35"><name pos:start="225:17" pos:end="225:20">band</name><operator pos:start="225:21" pos:end="225:22">-&gt;</operator><name pos:start="225:23" pos:end="225:35">inv_transform</name></name><argument_list pos:start="225:36" pos:end="227:59">(<argument pos:start="225:37" pos:end="225:41"><expr pos:start="225:37" pos:end="225:41"><name pos:start="225:37" pos:end="225:41">trvec</name></expr></argument>, <argument pos:start="225:44" pos:end="225:63"><expr pos:start="225:44" pos:end="225:63"><name pos:start="225:44" pos:end="225:52"><name pos:start="225:44" pos:end="225:47">band</name><operator pos:start="225:48" pos:end="225:49">-&gt;</operator><name pos:start="225:50" pos:end="225:52">buf</name></name> <operator pos:start="225:54" pos:end="225:54">+</operator> <name pos:start="225:56" pos:end="225:63">buf_offs</name></expr></argument>,

                                    <argument pos:start="227:37" pos:end="227:47"><expr pos:start="227:37" pos:end="227:47"><name pos:start="227:37" pos:end="227:47"><name pos:start="227:37" pos:end="227:40">band</name><operator pos:start="227:41" pos:end="227:42">-&gt;</operator><name pos:start="227:43" pos:end="227:47">pitch</name></name></expr></argument>, <argument pos:start="227:50" pos:end="227:58"><expr pos:start="227:50" pos:end="227:58"><name pos:start="227:50" pos:end="227:58">col_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="231:17" pos:end="231:47">/* apply motion compensation */</comment>

                <if_stmt pos:start="233:17" pos:end="239:61"><if pos:start="233:17" pos:end="239:61">if <condition pos:start="233:20" pos:end="233:30">(<expr pos:start="233:21" pos:end="233:29"><operator pos:start="233:21" pos:end="233:21">!</operator><name pos:start="233:22" pos:end="233:29">is_intra</name></expr>)</condition><block type="pseudo" pos:start="235:21" pos:end="239:61"><block_content pos:start="235:21" pos:end="239:61">

                    <expr_stmt pos:start="235:21" pos:end="239:61"><expr pos:start="235:21" pos:end="239:60"><call pos:start="235:21" pos:end="239:60"><name pos:start="235:21" pos:end="235:38">mc_with_delta_func</name><argument_list pos:start="235:39" pos:end="239:60">(<argument pos:start="235:40" pos:end="235:59"><expr pos:start="235:40" pos:end="235:59"><name pos:start="235:40" pos:end="235:48"><name pos:start="235:40" pos:end="235:43">band</name><operator pos:start="235:44" pos:end="235:45">-&gt;</operator><name pos:start="235:46" pos:end="235:48">buf</name></name> <operator pos:start="235:50" pos:end="235:50">+</operator> <name pos:start="235:52" pos:end="235:59">buf_offs</name></expr></argument>,

                                       <argument pos:start="237:40" pos:end="237:91"><expr pos:start="237:40" pos:end="237:91"><name pos:start="237:40" pos:end="237:52"><name pos:start="237:40" pos:end="237:43">band</name><operator pos:start="237:44" pos:end="237:45">-&gt;</operator><name pos:start="237:46" pos:end="237:52">ref_buf</name></name> <operator pos:start="237:54" pos:end="237:54">+</operator> <name pos:start="237:56" pos:end="237:63">buf_offs</name> <operator pos:start="237:65" pos:end="237:65">+</operator> <name pos:start="237:67" pos:end="237:70">mv_y</name> <operator pos:start="237:72" pos:end="237:72">*</operator> <name pos:start="237:74" pos:end="237:84"><name pos:start="237:74" pos:end="237:77">band</name><operator pos:start="237:78" pos:end="237:79">-&gt;</operator><name pos:start="237:80" pos:end="237:84">pitch</name></name> <operator pos:start="237:86" pos:end="237:86">+</operator> <name pos:start="237:88" pos:end="237:91">mv_x</name></expr></argument>,

                                       <argument pos:start="239:40" pos:end="239:50"><expr pos:start="239:40" pos:end="239:50"><name pos:start="239:40" pos:end="239:50"><name pos:start="239:40" pos:end="239:43">band</name><operator pos:start="239:44" pos:end="239:45">-&gt;</operator><name pos:start="239:46" pos:end="239:50">pitch</name></name></expr></argument>, <argument pos:start="239:53" pos:end="239:59"><expr pos:start="239:53" pos:end="239:59"><name pos:start="239:53" pos:end="239:59">mc_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="241:15" pos:end="263:13">else <block pos:start="241:20" pos:end="263:13">{<block_content pos:start="249:17" pos:end="261:59">

                <comment type="block" pos:start="243:17" pos:end="243:37">/* block not coded */</comment>

                <comment type="block" pos:start="245:17" pos:end="245:67">/* for intra blocks apply the dc slant transform */</comment>

                <comment type="block" pos:start="247:17" pos:end="247:79">/* for inter - perform the motion compensation without delta */</comment>

                <if_stmt pos:start="249:17" pos:end="261:59"><if pos:start="249:17" pos:end="255:17">if <condition pos:start="249:20" pos:end="249:51">(<expr pos:start="249:21" pos:end="249:50"><name pos:start="249:21" pos:end="249:28">is_intra</name> <operator pos:start="249:30" pos:end="249:31">&amp;&amp;</operator> <name pos:start="249:33" pos:end="249:50"><name pos:start="249:33" pos:end="249:36">band</name><operator pos:start="249:37" pos:end="249:38">-&gt;</operator><name pos:start="249:39" pos:end="249:50">dc_transform</name></name></expr>)</condition> <block pos:start="249:53" pos:end="255:17">{<block_content pos:start="251:21" pos:end="253:62">

                    <expr_stmt pos:start="251:21" pos:end="253:62"><expr pos:start="251:21" pos:end="253:61"><call pos:start="251:21" pos:end="253:61"><name pos:start="251:21" pos:end="251:38"><name pos:start="251:21" pos:end="251:24">band</name><operator pos:start="251:25" pos:end="251:26">-&gt;</operator><name pos:start="251:27" pos:end="251:38">dc_transform</name></name><argument_list pos:start="251:39" pos:end="253:61">(<argument pos:start="251:40" pos:end="251:47"><expr pos:start="251:40" pos:end="251:47"><operator pos:start="251:40" pos:end="251:40">&amp;</operator><name pos:start="251:41" pos:end="251:47">prev_dc</name></expr></argument>, <argument pos:start="251:50" pos:end="251:69"><expr pos:start="251:50" pos:end="251:69"><name pos:start="251:50" pos:end="251:58"><name pos:start="251:50" pos:end="251:53">band</name><operator pos:start="251:54" pos:end="251:55">-&gt;</operator><name pos:start="251:56" pos:end="251:58">buf</name></name> <operator pos:start="251:60" pos:end="251:60">+</operator> <name pos:start="251:62" pos:end="251:69">buf_offs</name></expr></argument>,

                                       <argument pos:start="253:40" pos:end="253:50"><expr pos:start="253:40" pos:end="253:50"><name pos:start="253:40" pos:end="253:50"><name pos:start="253:40" pos:end="253:43">band</name><operator pos:start="253:44" pos:end="253:45">-&gt;</operator><name pos:start="253:46" pos:end="253:50">pitch</name></name></expr></argument>, <argument pos:start="253:53" pos:end="253:60"><expr pos:start="253:53" pos:end="253:60"><name pos:start="253:53" pos:end="253:60">blk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="255:19" pos:end="261:59">else<block type="pseudo" pos:start="257:21" pos:end="261:59"><block_content pos:start="257:21" pos:end="261:59">

                    <expr_stmt pos:start="257:21" pos:end="261:59"><expr pos:start="257:21" pos:end="261:58"><call pos:start="257:21" pos:end="261:58"><name pos:start="257:21" pos:end="257:36">mc_no_delta_func</name><argument_list pos:start="257:37" pos:end="261:58">(<argument pos:start="257:38" pos:end="257:57"><expr pos:start="257:38" pos:end="257:57"><name pos:start="257:38" pos:end="257:46"><name pos:start="257:38" pos:end="257:41">band</name><operator pos:start="257:42" pos:end="257:43">-&gt;</operator><name pos:start="257:44" pos:end="257:46">buf</name></name> <operator pos:start="257:48" pos:end="257:48">+</operator> <name pos:start="257:50" pos:end="257:57">buf_offs</name></expr></argument>,

                                     <argument pos:start="259:38" pos:end="259:89"><expr pos:start="259:38" pos:end="259:89"><name pos:start="259:38" pos:end="259:50"><name pos:start="259:38" pos:end="259:41">band</name><operator pos:start="259:42" pos:end="259:43">-&gt;</operator><name pos:start="259:44" pos:end="259:50">ref_buf</name></name> <operator pos:start="259:52" pos:end="259:52">+</operator> <name pos:start="259:54" pos:end="259:61">buf_offs</name> <operator pos:start="259:63" pos:end="259:63">+</operator> <name pos:start="259:65" pos:end="259:68">mv_y</name> <operator pos:start="259:70" pos:end="259:70">*</operator> <name pos:start="259:72" pos:end="259:82"><name pos:start="259:72" pos:end="259:75">band</name><operator pos:start="259:76" pos:end="259:77">-&gt;</operator><name pos:start="259:78" pos:end="259:82">pitch</name></name> <operator pos:start="259:84" pos:end="259:84">+</operator> <name pos:start="259:86" pos:end="259:89">mv_x</name></expr></argument>,

                                     <argument pos:start="261:38" pos:end="261:48"><expr pos:start="261:38" pos:end="261:48"><name pos:start="261:38" pos:end="261:48"><name pos:start="261:38" pos:end="261:41">band</name><operator pos:start="261:42" pos:end="261:43">-&gt;</operator><name pos:start="261:44" pos:end="261:48">pitch</name></name></expr></argument>, <argument pos:start="261:51" pos:end="261:57"><expr pos:start="261:51" pos:end="261:57"><name pos:start="261:51" pos:end="261:57">mc_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="267:13" pos:end="267:22"><expr pos:start="267:13" pos:end="267:21"><name pos:start="267:13" pos:end="267:15">cbp</name> <operator pos:start="267:17" pos:end="267:19">&gt;&gt;=</operator> <literal type="number" pos:start="267:21" pos:end="267:21">1</literal></expr>;</expr_stmt>

        </block_content>}</block></for><comment type="line" pos:start="269:10" pos:end="269:19">// for blk</comment>

    </block_content>}</block></for><comment type="line" pos:start="271:6" pos:end="271:15">// for mbn</comment>



    <expr_stmt pos:start="275:5" pos:end="275:23"><expr pos:start="275:5" pos:end="275:22"><call pos:start="275:5" pos:end="275:22"><name pos:start="275:5" pos:end="275:18">align_get_bits</name><argument_list pos:start="275:19" pos:end="275:22">(<argument pos:start="275:20" pos:end="275:21"><expr pos:start="275:20" pos:end="275:21"><name pos:start="275:20" pos:end="275:21">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="279:5" pos:end="279:13">return <expr pos:start="279:12" pos:end="279:12"><literal type="number" pos:start="279:12" pos:end="279:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
