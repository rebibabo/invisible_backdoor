<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5658.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">test_source_timer_schedule</name><parameter_list pos:start="1:39" pos:end="1:44">(<parameter pos:start="1:40" pos:end="1:43"><decl pos:start="1:40" pos:end="1:43"><type pos:start="1:40" pos:end="1:43"><name pos:start="1:40" pos:end="1:43">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:27">

    <decl_stmt pos:start="5:5" pos:end="9:62"><decl pos:start="5:5" pos:end="9:61"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17">TimerTestData</name></type> <name pos:start="5:19" pos:end="5:22">data</name> <init pos:start="5:24" pos:end="9:61">= <expr pos:start="5:26" pos:end="9:61"><block pos:start="5:26" pos:end="9:61">{ <expr pos:start="5:28" pos:end="5:33"><operator pos:start="5:28" pos:end="5:28">.</operator><name pos:start="5:29" pos:end="5:29">n</name> <operator pos:start="5:31" pos:end="5:31">=</operator> <literal type="number" pos:start="5:33" pos:end="5:33">0</literal></expr>, <expr pos:start="5:36" pos:end="5:45"><operator pos:start="5:36" pos:end="5:36">.</operator><name pos:start="5:37" pos:end="5:39">ctx</name> <operator pos:start="5:41" pos:end="5:41">=</operator> <name pos:start="5:43" pos:end="5:45">ctx</name></expr>, <expr pos:start="5:48" pos:end="5:69"><operator pos:start="5:48" pos:end="5:48">.</operator><name pos:start="5:49" pos:end="5:50">ns</name> <operator pos:start="5:52" pos:end="5:52">=</operator> <name pos:start="5:54" pos:end="5:61">SCALE_MS</name> <operator pos:start="5:63" pos:end="5:63">*</operator> <literal type="number" pos:start="5:65" pos:end="5:69">750LL</literal></expr>,

                           <expr pos:start="7:28" pos:end="7:35"><operator pos:start="7:28" pos:end="7:28">.</operator><name pos:start="7:29" pos:end="7:31">max</name> <operator pos:start="7:33" pos:end="7:33">=</operator> <literal type="number" pos:start="7:35" pos:end="7:35">2</literal></expr>,

                           <expr pos:start="9:28" pos:end="9:59"><operator pos:start="9:28" pos:end="9:28">.</operator><name pos:start="9:29" pos:end="9:38">clock_type</name> <operator pos:start="9:40" pos:end="9:40">=</operator> <name pos:start="9:42" pos:end="9:59">QEMU_CLOCK_VIRTUAL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:14">pipefd</name><index pos:start="11:15" pos:end="11:17">[<expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:18">expiry</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="21:7">/* aio_poll will not block to wait for timers to complete unless it has

     * an fd to wait on. Fixing this breaks other tests. So create a dummy one.

     */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><call pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:12">g_assert</name><argument_list pos:start="23:13" pos:end="23:32">(<argument pos:start="23:14" pos:end="23:31"><expr pos:start="23:14" pos:end="23:31"><operator pos:start="23:14" pos:end="23:14">!</operator><call pos:start="23:15" pos:end="23:31"><name pos:start="23:15" pos:end="23:23">qemu_pipe</name><argument_list pos:start="23:24" pos:end="23:31">(<argument pos:start="23:25" pos:end="23:30"><expr pos:start="23:25" pos:end="23:30"><name pos:start="23:25" pos:end="23:30">pipefd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><call pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:21">qemu_set_nonblock</name><argument_list pos:start="25:22" pos:end="25:32">(<argument pos:start="25:23" pos:end="25:31"><expr pos:start="25:23" pos:end="25:31"><name pos:start="25:23" pos:end="25:31"><name pos:start="25:23" pos:end="25:28">pipefd</name><index pos:start="25:29" pos:end="25:31">[<expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><call pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:21">qemu_set_nonblock</name><argument_list pos:start="27:22" pos:end="27:32">(<argument pos:start="27:23" pos:end="27:31"><expr pos:start="27:23" pos:end="27:31"><name pos:start="27:23" pos:end="27:31"><name pos:start="27:23" pos:end="27:28">pipefd</name><index pos:start="27:29" pos:end="27:31">[<expr pos:start="27:30" pos:end="27:30"><literal type="number" pos:start="27:30" pos:end="27:30">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="33:58"><expr pos:start="31:5" pos:end="33:57"><call pos:start="31:5" pos:end="33:57"><name pos:start="31:5" pos:end="31:22">aio_set_fd_handler</name><argument_list pos:start="31:23" pos:end="33:57">(<argument pos:start="31:24" pos:end="31:26"><expr pos:start="31:24" pos:end="31:26"><name pos:start="31:24" pos:end="31:26">ctx</name></expr></argument>, <argument pos:start="31:29" pos:end="31:37"><expr pos:start="31:29" pos:end="31:37"><name pos:start="31:29" pos:end="31:37"><name pos:start="31:29" pos:end="31:34">pipefd</name><index pos:start="31:35" pos:end="31:37">[<expr pos:start="31:36" pos:end="31:36"><literal type="number" pos:start="31:36" pos:end="31:36">0</literal></expr>]</index></name></expr></argument>,

                       <argument pos:start="33:24" pos:end="33:44"><expr pos:start="33:24" pos:end="33:44"><name pos:start="33:24" pos:end="33:44">dummy_io_handler_read</name></expr></argument>, <argument pos:start="33:47" pos:end="33:50"><expr pos:start="33:47" pos:end="33:50"><name pos:start="33:47" pos:end="33:50">NULL</name></expr></argument>, <argument pos:start="33:53" pos:end="33:56"><expr pos:start="33:53" pos:end="33:56"><name pos:start="33:53" pos:end="33:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="35:5" pos:end="35:56">do <block pos:start="35:8" pos:end="35:9">{<block_content/>}</block> while <condition pos:start="35:17" pos:end="35:55">(<expr pos:start="35:18" pos:end="35:54"><call pos:start="35:18" pos:end="35:54"><name pos:start="35:18" pos:end="35:41">g_main_context_iteration</name><argument_list pos:start="35:42" pos:end="35:54">(<argument pos:start="35:43" pos:end="35:46"><expr pos:start="35:43" pos:end="35:46"><name pos:start="35:43" pos:end="35:46">NULL</name></expr></argument>, <argument pos:start="35:49" pos:end="35:53"><expr pos:start="35:49" pos:end="35:53"><name pos:start="35:49" pos:end="35:53">false</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>



    <expr_stmt pos:start="39:5" pos:end="41:51"><expr pos:start="39:5" pos:end="41:50"><call pos:start="39:5" pos:end="41:50"><name pos:start="39:5" pos:end="39:18">aio_timer_init</name><argument_list pos:start="39:19" pos:end="41:50">(<argument pos:start="39:20" pos:end="39:22"><expr pos:start="39:20" pos:end="39:22"><name pos:start="39:20" pos:end="39:22">ctx</name></expr></argument>, <argument pos:start="39:25" pos:end="39:35"><expr pos:start="39:25" pos:end="39:35"><operator pos:start="39:25" pos:end="39:25">&amp;</operator><name pos:start="39:26" pos:end="39:35"><name pos:start="39:26" pos:end="39:29">data</name><operator pos:start="39:30" pos:end="39:30">.</operator><name pos:start="39:31" pos:end="39:35">timer</name></name></expr></argument>, <argument pos:start="39:38" pos:end="39:52"><expr pos:start="39:38" pos:end="39:52"><name pos:start="39:38" pos:end="39:52"><name pos:start="39:38" pos:end="39:41">data</name><operator pos:start="39:42" pos:end="39:42">.</operator><name pos:start="39:43" pos:end="39:52">clock_type</name></name></expr></argument>,

                   <argument pos:start="41:20" pos:end="41:27"><expr pos:start="41:20" pos:end="41:27"><name pos:start="41:20" pos:end="41:27">SCALE_NS</name></expr></argument>, <argument pos:start="41:30" pos:end="41:42"><expr pos:start="41:30" pos:end="41:42"><name pos:start="41:30" pos:end="41:42">timer_test_cb</name></expr></argument>, <argument pos:start="41:45" pos:end="41:49"><expr pos:start="41:45" pos:end="41:49"><operator pos:start="41:45" pos:end="41:45">&amp;</operator><name pos:start="41:46" pos:end="41:49">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="45:16"><expr pos:start="43:5" pos:end="45:15"><name pos:start="43:5" pos:end="43:10">expiry</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <call pos:start="43:14" pos:end="43:47"><name pos:start="43:14" pos:end="43:30">qemu_clock_get_ns</name><argument_list pos:start="43:31" pos:end="43:47">(<argument pos:start="43:32" pos:end="43:46"><expr pos:start="43:32" pos:end="43:46"><name pos:start="43:32" pos:end="43:46"><name pos:start="43:32" pos:end="43:35">data</name><operator pos:start="43:36" pos:end="43:36">.</operator><name pos:start="43:37" pos:end="43:46">clock_type</name></name></expr></argument>)</argument_list></call> <operator pos:start="43:49" pos:end="43:49">+</operator>

        <name pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:12">data</name><operator pos:start="45:13" pos:end="45:13">.</operator><name pos:start="45:14" pos:end="45:15">ns</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><call pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:13">timer_mod</name><argument_list pos:start="47:14" pos:end="47:34">(<argument pos:start="47:15" pos:end="47:25"><expr pos:start="47:15" pos:end="47:25"><operator pos:start="47:15" pos:end="47:15">&amp;</operator><name pos:start="47:16" pos:end="47:25"><name pos:start="47:16" pos:end="47:19">data</name><operator pos:start="47:20" pos:end="47:20">.</operator><name pos:start="47:21" pos:end="47:25">timer</name></name></expr></argument>, <argument pos:start="47:28" pos:end="47:33"><expr pos:start="47:28" pos:end="47:33"><name pos:start="47:28" pos:end="47:33">expiry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:35"><expr pos:start="51:5" pos:end="51:34"><call pos:start="51:5" pos:end="51:34"><name pos:start="51:5" pos:end="51:19">g_assert_cmpint</name><argument_list pos:start="51:20" pos:end="51:34">(<argument pos:start="51:21" pos:end="51:26"><expr pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:24">data</name><operator pos:start="51:25" pos:end="51:25">.</operator><name pos:start="51:26" pos:end="51:26">n</name></name></expr></argument>, <argument pos:start="51:29" pos:end="51:30"><expr pos:start="51:29" pos:end="51:30"><operator pos:start="51:29" pos:end="51:30">==</operator></expr></argument>, <argument pos:start="51:33" pos:end="51:33"><expr pos:start="51:33" pos:end="51:33"><literal type="number" pos:start="51:33" pos:end="51:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:33"><expr pos:start="55:5" pos:end="55:32"><call pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:12">g_usleep</name><argument_list pos:start="55:13" pos:end="55:32">(<argument pos:start="55:14" pos:end="55:31"><expr pos:start="55:14" pos:end="55:31"><literal type="number" pos:start="55:14" pos:end="55:14">1</literal> <operator pos:start="55:16" pos:end="55:16">*</operator> <name pos:start="55:18" pos:end="55:31">G_USEC_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:35"><expr pos:start="57:5" pos:end="57:34"><call pos:start="57:5" pos:end="57:34"><name pos:start="57:5" pos:end="57:19">g_assert_cmpint</name><argument_list pos:start="57:20" pos:end="57:34">(<argument pos:start="57:21" pos:end="57:26"><expr pos:start="57:21" pos:end="57:26"><name pos:start="57:21" pos:end="57:26"><name pos:start="57:21" pos:end="57:24">data</name><operator pos:start="57:25" pos:end="57:25">.</operator><name pos:start="57:26" pos:end="57:26">n</name></name></expr></argument>, <argument pos:start="57:29" pos:end="57:30"><expr pos:start="57:29" pos:end="57:30"><operator pos:start="57:29" pos:end="57:30">==</operator></expr></argument>, <argument pos:start="57:33" pos:end="57:33"><expr pos:start="57:33" pos:end="57:33"><literal type="number" pos:start="57:33" pos:end="57:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:52"><expr pos:start="61:5" pos:end="61:51"><call pos:start="61:5" pos:end="61:51"><name pos:start="61:5" pos:end="61:12">g_assert</name><argument_list pos:start="61:13" pos:end="61:51">(<argument pos:start="61:14" pos:end="61:50"><expr pos:start="61:14" pos:end="61:50"><call pos:start="61:14" pos:end="61:50"><name pos:start="61:14" pos:end="61:37">g_main_context_iteration</name><argument_list pos:start="61:38" pos:end="61:50">(<argument pos:start="61:39" pos:end="61:42"><expr pos:start="61:39" pos:end="61:42"><name pos:start="61:39" pos:end="61:42">NULL</name></expr></argument>, <argument pos:start="61:45" pos:end="61:49"><expr pos:start="61:45" pos:end="61:49"><name pos:start="61:45" pos:end="61:49">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><call pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:19">g_assert_cmpint</name><argument_list pos:start="63:20" pos:end="63:34">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:24">data</name><operator pos:start="63:25" pos:end="63:25">.</operator><name pos:start="63:26" pos:end="63:26">n</name></name></expr></argument>, <argument pos:start="63:29" pos:end="63:30"><expr pos:start="63:29" pos:end="63:30"><operator pos:start="63:29" pos:end="63:30">==</operator></expr></argument>, <argument pos:start="63:33" pos:end="63:33"><expr pos:start="63:33" pos:end="63:33"><literal type="number" pos:start="63:33" pos:end="63:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:77">/* The comment above was not kidding when it said this wakes up itself */</comment>

    <do pos:start="69:5" pos:end="73:59">do <block pos:start="69:8" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:55">

        <expr_stmt pos:start="71:9" pos:end="71:55"><expr pos:start="71:9" pos:end="71:54"><call pos:start="71:9" pos:end="71:54"><name pos:start="71:9" pos:end="71:16">g_assert</name><argument_list pos:start="71:17" pos:end="71:54">(<argument pos:start="71:18" pos:end="71:53"><expr pos:start="71:18" pos:end="71:53"><call pos:start="71:18" pos:end="71:53"><name pos:start="71:18" pos:end="71:41">g_main_context_iteration</name><argument_list pos:start="71:42" pos:end="71:53">(<argument pos:start="71:43" pos:end="71:46"><expr pos:start="71:43" pos:end="71:46"><name pos:start="71:43" pos:end="71:46">NULL</name></expr></argument>, <argument pos:start="71:49" pos:end="71:52"><expr pos:start="71:49" pos:end="71:52"><name pos:start="71:49" pos:end="71:52">true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="73:13" pos:end="73:58">(<expr pos:start="73:14" pos:end="73:57"><call pos:start="73:14" pos:end="73:47"><name pos:start="73:14" pos:end="73:30">qemu_clock_get_ns</name><argument_list pos:start="73:31" pos:end="73:47">(<argument pos:start="73:32" pos:end="73:46"><expr pos:start="73:32" pos:end="73:46"><name pos:start="73:32" pos:end="73:46"><name pos:start="73:32" pos:end="73:35">data</name><operator pos:start="73:36" pos:end="73:36">.</operator><name pos:start="73:37" pos:end="73:46">clock_type</name></name></expr></argument>)</argument_list></call> <operator pos:start="73:49" pos:end="73:50">&lt;=</operator> <name pos:start="73:52" pos:end="73:57">expiry</name></expr>)</condition>;</do>

    <expr_stmt pos:start="75:5" pos:end="75:33"><expr pos:start="75:5" pos:end="75:32"><call pos:start="75:5" pos:end="75:32"><name pos:start="75:5" pos:end="75:12">g_usleep</name><argument_list pos:start="75:13" pos:end="75:32">(<argument pos:start="75:14" pos:end="75:31"><expr pos:start="75:14" pos:end="75:31"><literal type="number" pos:start="75:14" pos:end="75:14">1</literal> <operator pos:start="75:16" pos:end="75:16">*</operator> <name pos:start="75:18" pos:end="75:31">G_USEC_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:42"><expr pos:start="77:5" pos:end="77:41"><call pos:start="77:5" pos:end="77:41"><name pos:start="77:5" pos:end="77:28">g_main_context_iteration</name><argument_list pos:start="77:29" pos:end="77:41">(<argument pos:start="77:30" pos:end="77:33"><expr pos:start="77:30" pos:end="77:33"><name pos:start="77:30" pos:end="77:33">NULL</name></expr></argument>, <argument pos:start="77:36" pos:end="77:40"><expr pos:start="77:36" pos:end="77:40"><name pos:start="77:36" pos:end="77:40">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:35"><expr pos:start="81:5" pos:end="81:34"><call pos:start="81:5" pos:end="81:34"><name pos:start="81:5" pos:end="81:19">g_assert_cmpint</name><argument_list pos:start="81:20" pos:end="81:34">(<argument pos:start="81:21" pos:end="81:26"><expr pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:24">data</name><operator pos:start="81:25" pos:end="81:25">.</operator><name pos:start="81:26" pos:end="81:26">n</name></name></expr></argument>, <argument pos:start="81:29" pos:end="81:30"><expr pos:start="81:29" pos:end="81:30"><operator pos:start="81:29" pos:end="81:30">==</operator></expr></argument>, <argument pos:start="81:33" pos:end="81:33"><expr pos:start="81:33" pos:end="81:33"><literal type="number" pos:start="81:33" pos:end="81:33">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:57"><expr pos:start="85:5" pos:end="85:56"><call pos:start="85:5" pos:end="85:56"><name pos:start="85:5" pos:end="85:22">aio_set_fd_handler</name><argument_list pos:start="85:23" pos:end="85:56">(<argument pos:start="85:24" pos:end="85:26"><expr pos:start="85:24" pos:end="85:26"><name pos:start="85:24" pos:end="85:26">ctx</name></expr></argument>, <argument pos:start="85:29" pos:end="85:37"><expr pos:start="85:29" pos:end="85:37"><name pos:start="85:29" pos:end="85:37"><name pos:start="85:29" pos:end="85:34">pipefd</name><index pos:start="85:35" pos:end="85:37">[<expr pos:start="85:36" pos:end="85:36"><literal type="number" pos:start="85:36" pos:end="85:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="85:40" pos:end="85:43"><expr pos:start="85:40" pos:end="85:43"><name pos:start="85:40" pos:end="85:43">NULL</name></expr></argument>, <argument pos:start="85:46" pos:end="85:49"><expr pos:start="85:46" pos:end="85:49"><name pos:start="85:46" pos:end="85:49">NULL</name></expr></argument>, <argument pos:start="85:52" pos:end="85:55"><expr pos:start="85:52" pos:end="85:55"><name pos:start="85:52" pos:end="85:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:21"><expr pos:start="87:5" pos:end="87:20"><call pos:start="87:5" pos:end="87:20"><name pos:start="87:5" pos:end="87:9">close</name><argument_list pos:start="87:10" pos:end="87:20">(<argument pos:start="87:11" pos:end="87:19"><expr pos:start="87:11" pos:end="87:19"><name pos:start="87:11" pos:end="87:19"><name pos:start="87:11" pos:end="87:16">pipefd</name><index pos:start="87:17" pos:end="87:19">[<expr pos:start="87:18" pos:end="87:18"><literal type="number" pos:start="87:18" pos:end="87:18">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:21"><expr pos:start="89:5" pos:end="89:20"><call pos:start="89:5" pos:end="89:20"><name pos:start="89:5" pos:end="89:9">close</name><argument_list pos:start="89:10" pos:end="89:20">(<argument pos:start="89:11" pos:end="89:19"><expr pos:start="89:11" pos:end="89:19"><name pos:start="89:11" pos:end="89:19"><name pos:start="89:11" pos:end="89:16">pipefd</name><index pos:start="89:17" pos:end="89:19">[<expr pos:start="89:18" pos:end="89:18"><literal type="number" pos:start="89:18" pos:end="89:18">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:27"><expr pos:start="93:5" pos:end="93:26"><call pos:start="93:5" pos:end="93:26"><name pos:start="93:5" pos:end="93:13">timer_del</name><argument_list pos:start="93:14" pos:end="93:26">(<argument pos:start="93:15" pos:end="93:25"><expr pos:start="93:15" pos:end="93:25"><operator pos:start="93:15" pos:end="93:15">&amp;</operator><name pos:start="93:16" pos:end="93:25"><name pos:start="93:16" pos:end="93:19">data</name><operator pos:start="93:20" pos:end="93:20">.</operator><name pos:start="93:21" pos:end="93:25">timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
