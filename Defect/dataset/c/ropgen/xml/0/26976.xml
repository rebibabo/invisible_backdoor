<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26976.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">xics_kvm_realize</name><parameter_list pos:start="1:29" pos:end="1:60">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:40">DeviceState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">dev</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:52">Error</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier><modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:54">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">KVMXICSState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:24">icpkvm</name> <init pos:start="5:26" pos:end="5:40">= <expr pos:start="5:28" pos:end="5:40"><call pos:start="5:28" pos:end="5:40"><name pos:start="5:28" pos:end="5:35">KVM_XICS</name><argument_list pos:start="5:36" pos:end="5:40">(<argument pos:start="5:37" pos:end="5:39"><expr pos:start="5:37" pos:end="5:39"><name pos:start="5:37" pos:end="5:39">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">XICSState</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">icp</name> <init pos:start="7:20" pos:end="7:37">= <expr pos:start="7:22" pos:end="7:37"><call pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:32">XICS_COMMON</name><argument_list pos:start="7:33" pos:end="7:37">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:13"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:13">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:16">error</name> <init pos:start="11:18" pos:end="11:23">= <expr pos:start="11:20" pos:end="11:23"><name pos:start="11:20" pos:end="11:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="19:6"><decl pos:start="13:5" pos:end="19:5"><type pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:28">kvm_create_device</name></name></type> <name pos:start="13:30" pos:end="13:47">xics_create_device</name> <init pos:start="13:49" pos:end="19:5">= <expr pos:start="13:51" pos:end="19:5"><block pos:start="13:51" pos:end="19:5">{

        <expr pos:start="15:9" pos:end="15:33"><operator pos:start="15:9" pos:end="15:9">.</operator><name pos:start="15:10" pos:end="15:13">type</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:33">KVM_DEV_TYPE_XICS</name></expr>,

        <expr pos:start="17:9" pos:end="17:18"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:14">flags</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:76">(<expr pos:start="23:9" pos:end="23:75"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:22"><name pos:start="23:10" pos:end="23:20">kvm_enabled</name><argument_list pos:start="23:21" pos:end="23:22">()</argument_list></call> <operator pos:start="23:24" pos:end="23:25">||</operator> <operator pos:start="23:27" pos:end="23:27">!</operator><call pos:start="23:28" pos:end="23:75"><name pos:start="23:28" pos:end="23:46">kvm_check_extension</name><argument_list pos:start="23:47" pos:end="23:75">(<argument pos:start="23:48" pos:end="23:56"><expr pos:start="23:48" pos:end="23:56"><name pos:start="23:48" pos:end="23:56">kvm_state</name></expr></argument>, <argument pos:start="23:59" pos:end="23:74"><expr pos:start="23:59" pos:end="23:74"><name pos:start="23:59" pos:end="23:74">KVM_CAP_IRQ_XICS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:78" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:18">

        <expr_stmt pos:start="25:9" pos:end="27:85"><expr pos:start="25:9" pos:end="27:84"><call pos:start="25:9" pos:end="27:84"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="27:84">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">errp</name></expr></argument>,

                   <argument pos:start="27:20" pos:end="27:83"><expr pos:start="27:20" pos:end="27:83"><literal type="string" pos:start="27:20" pos:end="27:83">"KVM and IRQ_XICS capability must be present for in-kernel XICS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:71"><expr pos:start="35:5" pos:end="35:70"><call pos:start="35:5" pos:end="35:70"><name pos:start="35:5" pos:end="35:23">spapr_rtas_register</name><argument_list pos:start="35:24" pos:end="35:70">(<argument pos:start="35:25" pos:end="35:41"><expr pos:start="35:25" pos:end="35:41"><name pos:start="35:25" pos:end="35:41">RTAS_IBM_SET_XIVE</name></expr></argument>, <argument pos:start="35:44" pos:end="35:57"><expr pos:start="35:44" pos:end="35:57"><literal type="string" pos:start="35:44" pos:end="35:57">"ibm,set-xive"</literal></expr></argument>, <argument pos:start="35:60" pos:end="35:69"><expr pos:start="35:60" pos:end="35:69"><name pos:start="35:60" pos:end="35:69">rtas_dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:71"><expr pos:start="37:5" pos:end="37:70"><call pos:start="37:5" pos:end="37:70"><name pos:start="37:5" pos:end="37:23">spapr_rtas_register</name><argument_list pos:start="37:24" pos:end="37:70">(<argument pos:start="37:25" pos:end="37:41"><expr pos:start="37:25" pos:end="37:41"><name pos:start="37:25" pos:end="37:41">RTAS_IBM_GET_XIVE</name></expr></argument>, <argument pos:start="37:44" pos:end="37:57"><expr pos:start="37:44" pos:end="37:57"><literal type="string" pos:start="37:44" pos:end="37:57">"ibm,get-xive"</literal></expr></argument>, <argument pos:start="37:60" pos:end="37:69"><expr pos:start="37:60" pos:end="37:69"><name pos:start="37:60" pos:end="37:69">rtas_dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:69"><expr pos:start="39:5" pos:end="39:68"><call pos:start="39:5" pos:end="39:68"><name pos:start="39:5" pos:end="39:23">spapr_rtas_register</name><argument_list pos:start="39:24" pos:end="39:68">(<argument pos:start="39:25" pos:end="39:40"><expr pos:start="39:25" pos:end="39:40"><name pos:start="39:25" pos:end="39:40">RTAS_IBM_INT_OFF</name></expr></argument>, <argument pos:start="39:43" pos:end="39:55"><expr pos:start="39:43" pos:end="39:55"><literal type="string" pos:start="39:43" pos:end="39:55">"ibm,int-off"</literal></expr></argument>, <argument pos:start="39:58" pos:end="39:67"><expr pos:start="39:58" pos:end="39:67"><name pos:start="39:58" pos:end="39:67">rtas_dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:67"><expr pos:start="41:5" pos:end="41:66"><call pos:start="41:5" pos:end="41:66"><name pos:start="41:5" pos:end="41:23">spapr_rtas_register</name><argument_list pos:start="41:24" pos:end="41:66">(<argument pos:start="41:25" pos:end="41:39"><expr pos:start="41:25" pos:end="41:39"><name pos:start="41:25" pos:end="41:39">RTAS_IBM_INT_ON</name></expr></argument>, <argument pos:start="41:42" pos:end="41:53"><expr pos:start="41:42" pos:end="41:53"><literal type="string" pos:start="41:42" pos:end="41:53">"ibm,int-on"</literal></expr></argument>, <argument pos:start="41:56" pos:end="41:65"><expr pos:start="41:56" pos:end="41:65"><name pos:start="41:56" pos:end="41:65">rtas_dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:76"><expr pos:start="45:5" pos:end="45:75"><name pos:start="45:5" pos:end="45:6">rc</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <call pos:start="45:10" pos:end="45:75"><name pos:start="45:10" pos:end="45:40">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="45:41" pos:end="45:75">(<argument pos:start="45:42" pos:end="45:58"><expr pos:start="45:42" pos:end="45:58"><name pos:start="45:42" pos:end="45:58">RTAS_IBM_SET_XIVE</name></expr></argument>, <argument pos:start="45:61" pos:end="45:74"><expr pos:start="45:61" pos:end="45:74"><literal type="string" pos:start="45:61" pos:end="45:74">"ibm,set-xive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:15">(<expr pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:10">rc</name> <operator pos:start="47:12" pos:end="47:12">&lt;</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>)</condition> <block pos:start="47:17" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:74"><expr pos:start="49:9" pos:end="49:73"><call pos:start="49:9" pos:end="49:73"><name pos:start="49:9" pos:end="49:18">error_setg</name><argument_list pos:start="49:19" pos:end="49:73">(<argument pos:start="49:20" pos:end="49:23"><expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">errp</name></expr></argument>, <argument pos:start="49:26" pos:end="49:72"><expr pos:start="49:26" pos:end="49:72"><literal type="string" pos:start="49:26" pos:end="49:72">"kvmppc_define_rtas_kernel_token: ibm,set-xive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:18">goto <name pos:start="51:14" pos:end="51:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:76"><expr pos:start="57:5" pos:end="57:75"><name pos:start="57:5" pos:end="57:6">rc</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <call pos:start="57:10" pos:end="57:75"><name pos:start="57:10" pos:end="57:40">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="57:41" pos:end="57:75">(<argument pos:start="57:42" pos:end="57:58"><expr pos:start="57:42" pos:end="57:58"><name pos:start="57:42" pos:end="57:58">RTAS_IBM_GET_XIVE</name></expr></argument>, <argument pos:start="57:61" pos:end="57:74"><expr pos:start="57:61" pos:end="57:74"><literal type="string" pos:start="57:61" pos:end="57:74">"ibm,get-xive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:15">(<expr pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:10">rc</name> <operator pos:start="59:12" pos:end="59:12">&lt;</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>)</condition> <block pos:start="59:17" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:18">

        <expr_stmt pos:start="61:9" pos:end="61:74"><expr pos:start="61:9" pos:end="61:73"><call pos:start="61:9" pos:end="61:73"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="61:73">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">errp</name></expr></argument>, <argument pos:start="61:26" pos:end="61:72"><expr pos:start="61:26" pos:end="61:72"><literal type="string" pos:start="61:26" pos:end="61:72">"kvmppc_define_rtas_kernel_token: ibm,get-xive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:18">goto <name pos:start="63:14" pos:end="63:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:72"><expr pos:start="69:5" pos:end="69:71"><name pos:start="69:5" pos:end="69:6">rc</name> <operator pos:start="69:8" pos:end="69:8">=</operator> <call pos:start="69:10" pos:end="69:71"><name pos:start="69:10" pos:end="69:40">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="69:41" pos:end="69:71">(<argument pos:start="69:42" pos:end="69:56"><expr pos:start="69:42" pos:end="69:56"><name pos:start="69:42" pos:end="69:56">RTAS_IBM_INT_ON</name></expr></argument>, <argument pos:start="69:59" pos:end="69:70"><expr pos:start="69:59" pos:end="69:70"><literal type="string" pos:start="69:59" pos:end="69:70">"ibm,int-on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:15">(<expr pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:10">rc</name> <operator pos:start="71:12" pos:end="71:12">&lt;</operator> <literal type="number" pos:start="71:14" pos:end="71:14">0</literal></expr>)</condition> <block pos:start="71:17" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:18">

        <expr_stmt pos:start="73:9" pos:end="73:72"><expr pos:start="73:9" pos:end="73:71"><call pos:start="73:9" pos:end="73:71"><name pos:start="73:9" pos:end="73:18">error_setg</name><argument_list pos:start="73:19" pos:end="73:71">(<argument pos:start="73:20" pos:end="73:23"><expr pos:start="73:20" pos:end="73:23"><name pos:start="73:20" pos:end="73:23">errp</name></expr></argument>, <argument pos:start="73:26" pos:end="73:70"><expr pos:start="73:26" pos:end="73:70"><literal type="string" pos:start="73:26" pos:end="73:70">"kvmppc_define_rtas_kernel_token: ibm,int-on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="75:9" pos:end="75:18">goto <name pos:start="75:14" pos:end="75:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:74"><expr pos:start="81:5" pos:end="81:73"><name pos:start="81:5" pos:end="81:6">rc</name> <operator pos:start="81:8" pos:end="81:8">=</operator> <call pos:start="81:10" pos:end="81:73"><name pos:start="81:10" pos:end="81:40">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="81:41" pos:end="81:73">(<argument pos:start="81:42" pos:end="81:57"><expr pos:start="81:42" pos:end="81:57"><name pos:start="81:42" pos:end="81:57">RTAS_IBM_INT_OFF</name></expr></argument>, <argument pos:start="81:60" pos:end="81:72"><expr pos:start="81:60" pos:end="81:72"><literal type="string" pos:start="81:60" pos:end="81:72">"ibm,int-off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:15">(<expr pos:start="83:9" pos:end="83:14"><name pos:start="83:9" pos:end="83:10">rc</name> <operator pos:start="83:12" pos:end="83:12">&lt;</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>)</condition> <block pos:start="83:17" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:18">

        <expr_stmt pos:start="85:9" pos:end="85:73"><expr pos:start="85:9" pos:end="85:72"><call pos:start="85:9" pos:end="85:72"><name pos:start="85:9" pos:end="85:18">error_setg</name><argument_list pos:start="85:19" pos:end="85:72">(<argument pos:start="85:20" pos:end="85:23"><expr pos:start="85:20" pos:end="85:23"><name pos:start="85:20" pos:end="85:23">errp</name></expr></argument>, <argument pos:start="85:26" pos:end="85:71"><expr pos:start="85:26" pos:end="85:71"><literal type="string" pos:start="85:26" pos:end="85:71">"kvmppc_define_rtas_kernel_token: ibm,int-off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:18">goto <name pos:start="87:14" pos:end="87:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:31">/* Create the kernel ICP */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:73"><expr pos:start="95:5" pos:end="95:72"><name pos:start="95:5" pos:end="95:6">rc</name> <operator pos:start="95:8" pos:end="95:8">=</operator> <call pos:start="95:10" pos:end="95:72"><name pos:start="95:10" pos:end="95:21">kvm_vm_ioctl</name><argument_list pos:start="95:22" pos:end="95:72">(<argument pos:start="95:23" pos:end="95:31"><expr pos:start="95:23" pos:end="95:31"><name pos:start="95:23" pos:end="95:31">kvm_state</name></expr></argument>, <argument pos:start="95:34" pos:end="95:50"><expr pos:start="95:34" pos:end="95:50"><name pos:start="95:34" pos:end="95:50">KVM_CREATE_DEVICE</name></expr></argument>, <argument pos:start="95:53" pos:end="95:71"><expr pos:start="95:53" pos:end="95:71"><operator pos:start="95:53" pos:end="95:53">&amp;</operator><name pos:start="95:54" pos:end="95:71">xics_create_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:15">(<expr pos:start="97:9" pos:end="97:14"><name pos:start="97:9" pos:end="97:10">rc</name> <operator pos:start="97:12" pos:end="97:12">&lt;</operator> <literal type="number" pos:start="97:14" pos:end="97:14">0</literal></expr>)</condition> <block pos:start="97:17" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:18">

        <expr_stmt pos:start="99:9" pos:end="99:75"><expr pos:start="99:9" pos:end="99:74"><call pos:start="99:9" pos:end="99:74"><name pos:start="99:9" pos:end="99:24">error_setg_errno</name><argument_list pos:start="99:25" pos:end="99:74">(<argument pos:start="99:26" pos:end="99:29"><expr pos:start="99:26" pos:end="99:29"><name pos:start="99:26" pos:end="99:29">errp</name></expr></argument>, <argument pos:start="99:32" pos:end="99:34"><expr pos:start="99:32" pos:end="99:34"><operator pos:start="99:32" pos:end="99:32">-</operator><name pos:start="99:33" pos:end="99:34">rc</name></expr></argument>, <argument pos:start="99:37" pos:end="99:73"><expr pos:start="99:37" pos:end="99:73"><literal type="string" pos:start="99:37" pos:end="99:73">"Error on KVM_CREATE_DEVICE for XICS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="101:9" pos:end="101:18">goto <name pos:start="101:14" pos:end="101:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:51"><expr pos:start="107:5" pos:end="107:50"><name pos:start="107:5" pos:end="107:26"><name pos:start="107:5" pos:end="107:10">icpkvm</name><operator pos:start="107:11" pos:end="107:12">-&gt;</operator><name pos:start="107:13" pos:end="107:26">kernel_xics_fd</name></name> <operator pos:start="107:28" pos:end="107:28">=</operator> <name pos:start="107:30" pos:end="107:50"><name pos:start="107:30" pos:end="107:47">xics_create_device</name><operator pos:start="107:48" pos:end="107:48">.</operator><name pos:start="107:49" pos:end="107:50">fd</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:73"><expr pos:start="111:5" pos:end="111:72"><call pos:start="111:5" pos:end="111:72"><name pos:start="111:5" pos:end="111:28">object_property_set_bool</name><argument_list pos:start="111:29" pos:end="111:72">(<argument pos:start="111:30" pos:end="111:45"><expr pos:start="111:30" pos:end="111:45"><call pos:start="111:30" pos:end="111:45"><name pos:start="111:30" pos:end="111:35">OBJECT</name><argument_list pos:start="111:36" pos:end="111:45">(<argument pos:start="111:37" pos:end="111:44"><expr pos:start="111:37" pos:end="111:44"><name pos:start="111:37" pos:end="111:44"><name pos:start="111:37" pos:end="111:39">icp</name><operator pos:start="111:40" pos:end="111:41">-&gt;</operator><name pos:start="111:42" pos:end="111:44">ics</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:48" pos:end="111:51"><expr pos:start="111:48" pos:end="111:51"><name pos:start="111:48" pos:end="111:51">true</name></expr></argument>, <argument pos:start="111:54" pos:end="111:63"><expr pos:start="111:54" pos:end="111:63"><literal type="string" pos:start="111:54" pos:end="111:63">"realized"</literal></expr></argument>, <argument pos:start="111:66" pos:end="111:71"><expr pos:start="111:66" pos:end="111:71"><operator pos:start="111:66" pos:end="111:66">&amp;</operator><name pos:start="111:67" pos:end="111:71">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:14">(<expr pos:start="113:9" pos:end="113:13"><name pos:start="113:9" pos:end="113:13">error</name></expr>)</condition> <block pos:start="113:16" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:18">

        <expr_stmt pos:start="115:9" pos:end="115:37"><expr pos:start="115:9" pos:end="115:36"><call pos:start="115:9" pos:end="115:36"><name pos:start="115:9" pos:end="115:23">error_propagate</name><argument_list pos:start="115:24" pos:end="115:36">(<argument pos:start="115:25" pos:end="115:28"><expr pos:start="115:25" pos:end="115:28"><name pos:start="115:25" pos:end="115:28">errp</name></expr></argument>, <argument pos:start="115:31" pos:end="115:35"><expr pos:start="115:31" pos:end="115:35"><name pos:start="115:31" pos:end="115:35">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="117:9" pos:end="117:18">goto <name pos:start="117:14" pos:end="117:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:28"><expr pos:start="123:5" pos:end="123:27"><call pos:start="123:5" pos:end="123:27"><name pos:start="123:5" pos:end="123:10">assert</name><argument_list pos:start="123:11" pos:end="123:27">(<argument pos:start="123:12" pos:end="123:26"><expr pos:start="123:12" pos:end="123:26"><name pos:start="123:12" pos:end="123:26"><name pos:start="123:12" pos:end="123:14">icp</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:26">nr_servers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="125:5" pos:end="137:5">for <control pos:start="125:9" pos:end="125:41">(<init pos:start="125:10" pos:end="125:15"><expr pos:start="125:10" pos:end="125:14"><name pos:start="125:10" pos:end="125:10">i</name> <operator pos:start="125:12" pos:end="125:12">=</operator> <literal type="number" pos:start="125:14" pos:end="125:14">0</literal></expr>;</init> <condition pos:start="125:17" pos:end="125:36"><expr pos:start="125:17" pos:end="125:35"><name pos:start="125:17" pos:end="125:17">i</name> <operator pos:start="125:19" pos:end="125:19">&lt;</operator> <name pos:start="125:21" pos:end="125:35"><name pos:start="125:21" pos:end="125:23">icp</name><operator pos:start="125:24" pos:end="125:25">-&gt;</operator><name pos:start="125:26" pos:end="125:35">nr_servers</name></name></expr>;</condition> <incr pos:start="125:38" pos:end="125:40"><expr pos:start="125:38" pos:end="125:40"><name pos:start="125:38" pos:end="125:38">i</name><operator pos:start="125:39" pos:end="125:40">++</operator></expr></incr>)</control> <block pos:start="125:43" pos:end="137:5">{<block_content pos:start="127:9" pos:end="135:9">

        <expr_stmt pos:start="127:9" pos:end="127:80"><expr pos:start="127:9" pos:end="127:79"><call pos:start="127:9" pos:end="127:79"><name pos:start="127:9" pos:end="127:32">object_property_set_bool</name><argument_list pos:start="127:33" pos:end="127:79">(<argument pos:start="127:34" pos:end="127:52"><expr pos:start="127:34" pos:end="127:52"><call pos:start="127:34" pos:end="127:52"><name pos:start="127:34" pos:end="127:39">OBJECT</name><argument_list pos:start="127:40" pos:end="127:52">(<argument pos:start="127:41" pos:end="127:51"><expr pos:start="127:41" pos:end="127:51"><operator pos:start="127:41" pos:end="127:41">&amp;</operator><name pos:start="127:42" pos:end="127:51"><name pos:start="127:42" pos:end="127:44">icp</name><operator pos:start="127:45" pos:end="127:46">-&gt;</operator><name pos:start="127:47" pos:end="127:48">ss</name><index pos:start="127:49" pos:end="127:51">[<expr pos:start="127:50" pos:end="127:50"><name pos:start="127:50" pos:end="127:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="127:55" pos:end="127:58"><expr pos:start="127:55" pos:end="127:58"><name pos:start="127:55" pos:end="127:58">true</name></expr></argument>, <argument pos:start="127:61" pos:end="127:70"><expr pos:start="127:61" pos:end="127:70"><literal type="string" pos:start="127:61" pos:end="127:70">"realized"</literal></expr></argument>, <argument pos:start="127:73" pos:end="127:78"><expr pos:start="127:73" pos:end="127:78"><operator pos:start="127:73" pos:end="127:73">&amp;</operator><name pos:start="127:74" pos:end="127:78">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:18">(<expr pos:start="129:13" pos:end="129:17"><name pos:start="129:13" pos:end="129:17">error</name></expr>)</condition> <block pos:start="129:20" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:22">

            <expr_stmt pos:start="131:13" pos:end="131:41"><expr pos:start="131:13" pos:end="131:40"><call pos:start="131:13" pos:end="131:40"><name pos:start="131:13" pos:end="131:27">error_propagate</name><argument_list pos:start="131:28" pos:end="131:40">(<argument pos:start="131:29" pos:end="131:32"><expr pos:start="131:29" pos:end="131:32"><name pos:start="131:29" pos:end="131:32">errp</name></expr></argument>, <argument pos:start="131:35" pos:end="131:39"><expr pos:start="131:35" pos:end="131:39"><name pos:start="131:35" pos:end="131:39">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="133:13" pos:end="133:22">goto <name pos:start="133:18" pos:end="133:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="141:5" pos:end="141:30"><expr pos:start="141:5" pos:end="141:29"><name pos:start="141:5" pos:end="141:22">kvm_kernel_irqchip</name> <operator pos:start="141:24" pos:end="141:24">=</operator> <name pos:start="141:26" pos:end="141:29">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:30"><expr pos:start="143:5" pos:end="143:29"><name pos:start="143:5" pos:end="143:22">kvm_irqfds_allowed</name> <operator pos:start="143:24" pos:end="143:24">=</operator> <name pos:start="143:26" pos:end="143:29">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:37"><expr pos:start="145:5" pos:end="145:36"><name pos:start="145:5" pos:end="145:29">kvm_msi_via_irqfd_allowed</name> <operator pos:start="145:31" pos:end="145:31">=</operator> <name pos:start="145:33" pos:end="145:36">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:34"><expr pos:start="147:5" pos:end="147:33"><name pos:start="147:5" pos:end="147:26">kvm_gsi_direct_mapping</name> <operator pos:start="147:28" pos:end="147:28">=</operator> <name pos:start="147:30" pos:end="147:33">true</name></expr>;</expr_stmt>



    <return pos:start="151:5" pos:end="151:11">return;</return>



<label pos:start="155:1" pos:end="155:5"><name pos:start="155:1" pos:end="155:4">fail</name>:</label>

    <expr_stmt pos:start="157:5" pos:end="157:55"><expr pos:start="157:5" pos:end="157:54"><call pos:start="157:5" pos:end="157:54"><name pos:start="157:5" pos:end="157:35">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="157:36" pos:end="157:54">(<argument pos:start="157:37" pos:end="157:37"><expr pos:start="157:37" pos:end="157:37"><literal type="number" pos:start="157:37" pos:end="157:37">0</literal></expr></argument>, <argument pos:start="157:40" pos:end="157:53"><expr pos:start="157:40" pos:end="157:53"><literal type="string" pos:start="157:40" pos:end="157:53">"ibm,set-xive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:55"><expr pos:start="159:5" pos:end="159:54"><call pos:start="159:5" pos:end="159:54"><name pos:start="159:5" pos:end="159:35">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="159:36" pos:end="159:54">(<argument pos:start="159:37" pos:end="159:37"><expr pos:start="159:37" pos:end="159:37"><literal type="number" pos:start="159:37" pos:end="159:37">0</literal></expr></argument>, <argument pos:start="159:40" pos:end="159:53"><expr pos:start="159:40" pos:end="159:53"><literal type="string" pos:start="159:40" pos:end="159:53">"ibm,get-xive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:53"><expr pos:start="161:5" pos:end="161:52"><call pos:start="161:5" pos:end="161:52"><name pos:start="161:5" pos:end="161:35">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="161:36" pos:end="161:52">(<argument pos:start="161:37" pos:end="161:37"><expr pos:start="161:37" pos:end="161:37"><literal type="number" pos:start="161:37" pos:end="161:37">0</literal></expr></argument>, <argument pos:start="161:40" pos:end="161:51"><expr pos:start="161:40" pos:end="161:51"><literal type="string" pos:start="161:40" pos:end="161:51">"ibm,int-on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:54"><expr pos:start="163:5" pos:end="163:53"><call pos:start="163:5" pos:end="163:53"><name pos:start="163:5" pos:end="163:35">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="163:36" pos:end="163:53">(<argument pos:start="163:37" pos:end="163:37"><expr pos:start="163:37" pos:end="163:37"><literal type="number" pos:start="163:37" pos:end="163:37">0</literal></expr></argument>, <argument pos:start="163:40" pos:end="163:52"><expr pos:start="163:40" pos:end="163:52"><literal type="string" pos:start="163:40" pos:end="163:52">"ibm,int-off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
