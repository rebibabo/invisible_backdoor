<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9274.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:12">vm_stop</name><parameter_list pos:start="1:13" pos:end="1:24">(<parameter pos:start="1:14" pos:end="1:23"><decl pos:start="1:14" pos:end="1:23"><type pos:start="1:14" pos:end="1:16"><name pos:start="1:14" pos:end="1:16">int</name></type> <name pos:start="1:18" pos:end="1:23">reason</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="31:1">{<block_content pos:start="5:5" pos:end="29:23">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">QemuThread</name></type> <name pos:start="5:16" pos:end="5:17">me</name></decl>;</decl_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:26"><expr pos:start="7:5" pos:end="7:25"><call pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:20">qemu_thread_self</name><argument_list pos:start="7:21" pos:end="7:25">(<argument pos:start="7:22" pos:end="7:24"><expr pos:start="7:22" pos:end="7:24"><operator pos:start="7:22" pos:end="7:22">&amp;</operator><name pos:start="7:23" pos:end="7:24">me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="11:5" pos:end="27:5"><if pos:start="11:5" pos:end="27:5">if <condition pos:start="11:8" pos:end="11:44">(<expr pos:start="11:9" pos:end="11:43"><operator pos:start="11:9" pos:end="11:9">!</operator><call pos:start="11:10" pos:end="11:43"><name pos:start="11:10" pos:end="11:26">qemu_thread_equal</name><argument_list pos:start="11:27" pos:end="11:43">(<argument pos:start="11:28" pos:end="11:30"><expr pos:start="11:28" pos:end="11:30"><operator pos:start="11:28" pos:end="11:28">&amp;</operator><name pos:start="11:29" pos:end="11:30">me</name></expr></argument>, <argument pos:start="11:33" pos:end="11:42"><expr pos:start="11:33" pos:end="11:42"><operator pos:start="11:33" pos:end="11:33">&amp;</operator><name pos:start="11:34" pos:end="11:42">io_thread</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:46" pos:end="27:5">{<block_content pos:start="13:9" pos:end="25:15">

        <expr_stmt pos:start="13:9" pos:end="13:43"><expr pos:start="13:9" pos:end="13:42"><call pos:start="13:9" pos:end="13:42"><name pos:start="13:9" pos:end="13:34">qemu_system_vmstop_request</name><argument_list pos:start="13:35" pos:end="13:42">(<argument pos:start="13:36" pos:end="13:41"><expr pos:start="13:36" pos:end="13:41"><name pos:start="13:36" pos:end="13:41">reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="15:9" pos:end="21:11">/*

         * FIXME: should not return to device code in case

         * vm_stop() has been requested.

         */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:27"><expr pos:start="23:9" pos:end="23:26"><call pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:24">cpu_stop_current</name><argument_list pos:start="23:25" pos:end="23:26">()</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><call pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:14">do_vm_stop</name><argument_list pos:start="29:15" pos:end="29:22">(<argument pos:start="29:16" pos:end="29:21"><expr pos:start="29:16" pos:end="29:21"><name pos:start="29:16" pos:end="29:21">reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
