<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26493.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">tcg_out_movi</name><parameter_list pos:start="1:25" pos:end="3:58">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">TCGContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:47">TCGType</name></type> <name pos:start="1:49" pos:end="1:52">type</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:35"><decl pos:start="3:26" pos:end="3:35"><type pos:start="3:26" pos:end="3:35"><name pos:start="3:26" pos:end="3:31">TCGReg</name></type> <name pos:start="3:33" pos:end="3:35">ret</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:57"><decl pos:start="3:38" pos:end="3:57"><type pos:start="3:38" pos:end="3:57"><name pos:start="3:38" pos:end="3:52">tcg_target_long</name></type> <name pos:start="3:54" pos:end="3:57">sval</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="211:1">{<block_content pos:start="7:5" pos:end="209:5">

    <decl_stmt pos:start="7:5" pos:end="11:6"><decl pos:start="7:5" pos:end="11:5"><type pos:start="7:5" pos:end="7:27"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <specifier pos:start="7:12" pos:end="7:16">const</specifier> <name pos:start="7:18" pos:end="7:27">S390Opcode</name></type> <name pos:start="7:29" pos:end="7:40"><name pos:start="7:29" pos:end="7:37">lli_insns</name><index pos:start="7:38" pos:end="7:40">[<expr pos:start="7:39" pos:end="7:39"><literal type="number" pos:start="7:39" pos:end="7:39">4</literal></expr>]</index></name> <init pos:start="7:42" pos:end="11:5">= <expr pos:start="7:44" pos:end="11:5"><block pos:start="7:44" pos:end="11:5">{

        <expr pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">RI_LLILL</name></expr>, <expr pos:start="9:19" pos:end="9:26"><name pos:start="9:19" pos:end="9:26">RI_LLILH</name></expr>, <expr pos:start="9:29" pos:end="9:36"><name pos:start="9:29" pos:end="9:36">RI_LLIHL</name></expr>, <expr pos:start="9:39" pos:end="9:46"><name pos:start="9:39" pos:end="9:46">RI_LLIHH</name></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:20">tcg_target_ulong</name></type> <name pos:start="15:22" pos:end="15:25">uval</name> <init pos:start="15:27" pos:end="15:32">= <expr pos:start="15:29" pos:end="15:32"><name pos:start="15:29" pos:end="15:32">sval</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:29">(<expr pos:start="21:9" pos:end="21:28"><name pos:start="21:9" pos:end="21:12">type</name> <operator pos:start="21:14" pos:end="21:15">==</operator> <name pos:start="21:17" pos:end="21:28">TCG_TYPE_I32</name></expr>)</condition> <block pos:start="21:31" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:29">

        <expr_stmt pos:start="23:9" pos:end="23:30"><expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:12">uval</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <operator pos:start="23:16" pos:end="23:16">(</operator><name pos:start="23:17" pos:end="23:24">uint32_t</name><operator pos:start="23:25" pos:end="23:25">)</operator><name pos:start="23:26" pos:end="23:29">sval</name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:29"><expr pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:12">sval</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <operator pos:start="25:16" pos:end="25:16">(</operator><name pos:start="25:17" pos:end="25:23">int32_t</name><operator pos:start="25:24" pos:end="25:24">)</operator><name pos:start="25:25" pos:end="25:28">sval</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:59">/* Try all 32-bit insns that can load it in one go.  */</comment>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:41">(<expr pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:12">sval</name> <operator pos:start="33:14" pos:end="33:15">&gt;=</operator> <operator pos:start="33:17" pos:end="33:17">-</operator><literal type="number" pos:start="33:18" pos:end="33:23">0x8000</literal> <operator pos:start="33:25" pos:end="33:26">&amp;&amp;</operator> <name pos:start="33:28" pos:end="33:31">sval</name> <operator pos:start="33:33" pos:end="33:33">&lt;</operator> <literal type="number" pos:start="33:35" pos:end="33:40">0x8000</literal></expr>)</condition> <block pos:start="33:43" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:45"><expr pos:start="35:9" pos:end="35:44"><call pos:start="35:9" pos:end="35:44"><name pos:start="35:9" pos:end="35:20">tcg_out_insn</name><argument_list pos:start="35:21" pos:end="35:44">(<argument pos:start="35:22" pos:end="35:22"><expr pos:start="35:22" pos:end="35:22"><name pos:start="35:22" pos:end="35:22">s</name></expr></argument>, <argument pos:start="35:25" pos:end="35:26"><expr pos:start="35:25" pos:end="35:26"><name pos:start="35:25" pos:end="35:26">RI</name></expr></argument>, <argument pos:start="35:29" pos:end="35:32"><expr pos:start="35:29" pos:end="35:32"><name pos:start="35:29" pos:end="35:32">LGHI</name></expr></argument>, <argument pos:start="35:35" pos:end="35:37"><expr pos:start="35:35" pos:end="35:37"><name pos:start="35:35" pos:end="35:37">ret</name></expr></argument>, <argument pos:start="35:40" pos:end="35:43"><expr pos:start="35:40" pos:end="35:43"><name pos:start="35:40" pos:end="35:43">sval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="43:5" pos:end="55:5">for <control pos:start="43:9" pos:end="43:27">(<init pos:start="43:10" pos:end="43:15"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>;</init> <condition pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:21"><name pos:start="43:17" pos:end="43:17">i</name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <literal type="number" pos:start="43:21" pos:end="43:21">4</literal></expr>;</condition> <incr pos:start="43:24" pos:end="43:26"><expr pos:start="43:24" pos:end="43:26"><name pos:start="43:24" pos:end="43:24">i</name><operator pos:start="43:25" pos:end="43:26">++</operator></expr></incr>)</control> <block pos:start="43:29" pos:end="55:5">{<block_content pos:start="45:9" pos:end="53:9">

        <decl_stmt pos:start="45:9" pos:end="45:49"><decl pos:start="45:9" pos:end="45:48"><type pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:23">tcg_target_long</name></type> <name pos:start="45:25" pos:end="45:28">mask</name> <init pos:start="45:30" pos:end="45:48">= <expr pos:start="45:32" pos:end="45:48"><literal type="number" pos:start="45:32" pos:end="45:40">0xffffull</literal> <operator pos:start="45:42" pos:end="45:43">&lt;&lt;</operator> <name pos:start="45:45" pos:end="45:45">i</name><operator pos:start="45:46" pos:end="45:46">*</operator><literal type="number" pos:start="45:47" pos:end="45:48">16</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:34">(<expr pos:start="47:13" pos:end="47:33"><operator pos:start="47:13" pos:end="47:13">(</operator><name pos:start="47:14" pos:end="47:17">uval</name> <operator pos:start="47:19" pos:end="47:19">&amp;</operator> <name pos:start="47:21" pos:end="47:24">mask</name><operator pos:start="47:25" pos:end="47:25">)</operator> <operator pos:start="47:27" pos:end="47:28">==</operator> <name pos:start="47:30" pos:end="47:33">uval</name></expr>)</condition> <block pos:start="47:36" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:19">

            <expr_stmt pos:start="49:13" pos:end="49:64"><expr pos:start="49:13" pos:end="49:63"><call pos:start="49:13" pos:end="49:63"><name pos:start="49:13" pos:end="49:27">tcg_out_insn_RI</name><argument_list pos:start="49:28" pos:end="49:63">(<argument pos:start="49:29" pos:end="49:29"><expr pos:start="49:29" pos:end="49:29"><name pos:start="49:29" pos:end="49:29">s</name></expr></argument>, <argument pos:start="49:32" pos:end="49:43"><expr pos:start="49:32" pos:end="49:43"><name pos:start="49:32" pos:end="49:43"><name pos:start="49:32" pos:end="49:40">lli_insns</name><index pos:start="49:41" pos:end="49:43">[<expr pos:start="49:42" pos:end="49:42"><name pos:start="49:42" pos:end="49:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="49:46" pos:end="49:48"><expr pos:start="49:46" pos:end="49:48"><name pos:start="49:46" pos:end="49:48">ret</name></expr></argument>, <argument pos:start="49:51" pos:end="49:62"><expr pos:start="49:51" pos:end="49:62"><name pos:start="49:51" pos:end="49:54">uval</name> <operator pos:start="49:56" pos:end="49:57">&gt;&gt;</operator> <name pos:start="49:59" pos:end="49:59">i</name><operator pos:start="49:60" pos:end="49:60">*</operator><literal type="number" pos:start="49:61" pos:end="49:62">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="59:5" pos:end="59:59">/* Try all 48-bit insns that can load it in one go.  */</comment>

    <if_stmt pos:start="61:5" pos:end="87:5"><if pos:start="61:5" pos:end="87:5">if <condition pos:start="61:8" pos:end="61:38">(<expr pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:18">facilities</name> <operator pos:start="61:20" pos:end="61:20">&amp;</operator> <name pos:start="61:22" pos:end="61:37">FACILITY_EXT_IMM</name></expr>)</condition> <block pos:start="61:40" pos:end="87:5">{<block_content pos:start="63:9" pos:end="85:9">

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:34">(<expr pos:start="63:13" pos:end="63:33"><name pos:start="63:13" pos:end="63:16">sval</name> <operator pos:start="63:18" pos:end="63:19">==</operator> <operator pos:start="63:21" pos:end="63:21">(</operator><name pos:start="63:22" pos:end="63:28">int32_t</name><operator pos:start="63:29" pos:end="63:29">)</operator><name pos:start="63:30" pos:end="63:33">sval</name></expr>)</condition> <block pos:start="63:36" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:19">

            <expr_stmt pos:start="65:13" pos:end="65:50"><expr pos:start="65:13" pos:end="65:49"><call pos:start="65:13" pos:end="65:49"><name pos:start="65:13" pos:end="65:24">tcg_out_insn</name><argument_list pos:start="65:25" pos:end="65:49">(<argument pos:start="65:26" pos:end="65:26"><expr pos:start="65:26" pos:end="65:26"><name pos:start="65:26" pos:end="65:26">s</name></expr></argument>, <argument pos:start="65:29" pos:end="65:31"><expr pos:start="65:29" pos:end="65:31"><name pos:start="65:29" pos:end="65:31">RIL</name></expr></argument>, <argument pos:start="65:34" pos:end="65:37"><expr pos:start="65:34" pos:end="65:37"><name pos:start="65:34" pos:end="65:37">LGFI</name></expr></argument>, <argument pos:start="65:40" pos:end="65:42"><expr pos:start="65:40" pos:end="65:42"><name pos:start="65:40" pos:end="65:42">ret</name></expr></argument>, <argument pos:start="65:45" pos:end="65:48"><expr pos:start="65:45" pos:end="65:48"><name pos:start="65:45" pos:end="65:48">sval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:31">(<expr pos:start="71:13" pos:end="71:30"><name pos:start="71:13" pos:end="71:16">uval</name> <operator pos:start="71:18" pos:end="71:19">&lt;=</operator> <literal type="number" pos:start="71:21" pos:end="71:30">0xffffffff</literal></expr>)</condition> <block pos:start="71:33" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:19">

            <expr_stmt pos:start="73:13" pos:end="73:51"><expr pos:start="73:13" pos:end="73:50"><call pos:start="73:13" pos:end="73:50"><name pos:start="73:13" pos:end="73:24">tcg_out_insn</name><argument_list pos:start="73:25" pos:end="73:50">(<argument pos:start="73:26" pos:end="73:26"><expr pos:start="73:26" pos:end="73:26"><name pos:start="73:26" pos:end="73:26">s</name></expr></argument>, <argument pos:start="73:29" pos:end="73:31"><expr pos:start="73:29" pos:end="73:31"><name pos:start="73:29" pos:end="73:31">RIL</name></expr></argument>, <argument pos:start="73:34" pos:end="73:38"><expr pos:start="73:34" pos:end="73:38"><name pos:start="73:34" pos:end="73:38">LLILF</name></expr></argument>, <argument pos:start="73:41" pos:end="73:43"><expr pos:start="73:41" pos:end="73:43"><name pos:start="73:41" pos:end="73:43">ret</name></expr></argument>, <argument pos:start="73:46" pos:end="73:49"><expr pos:start="73:46" pos:end="73:49"><name pos:start="73:46" pos:end="73:49">uval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="75:13" pos:end="75:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:37">(<expr pos:start="79:13" pos:end="79:36"><operator pos:start="79:13" pos:end="79:13">(</operator><name pos:start="79:14" pos:end="79:17">uval</name> <operator pos:start="79:19" pos:end="79:19">&amp;</operator> <literal type="number" pos:start="79:21" pos:end="79:30">0xffffffff</literal><operator pos:start="79:31" pos:end="79:31">)</operator> <operator pos:start="79:33" pos:end="79:34">==</operator> <literal type="number" pos:start="79:36" pos:end="79:36">0</literal></expr>)</condition> <block pos:start="79:39" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:19">

            <expr_stmt pos:start="81:13" pos:end="81:62"><expr pos:start="81:13" pos:end="81:61"><call pos:start="81:13" pos:end="81:61"><name pos:start="81:13" pos:end="81:24">tcg_out_insn</name><argument_list pos:start="81:25" pos:end="81:61">(<argument pos:start="81:26" pos:end="81:26"><expr pos:start="81:26" pos:end="81:26"><name pos:start="81:26" pos:end="81:26">s</name></expr></argument>, <argument pos:start="81:29" pos:end="81:31"><expr pos:start="81:29" pos:end="81:31"><name pos:start="81:29" pos:end="81:31">RIL</name></expr></argument>, <argument pos:start="81:34" pos:end="81:38"><expr pos:start="81:34" pos:end="81:38"><name pos:start="81:34" pos:end="81:38">LLIHF</name></expr></argument>, <argument pos:start="81:41" pos:end="81:43"><expr pos:start="81:41" pos:end="81:43"><name pos:start="81:41" pos:end="81:43">ret</name></expr></argument>, <argument pos:start="81:46" pos:end="81:60"><expr pos:start="81:46" pos:end="81:60"><name pos:start="81:46" pos:end="81:49">uval</name> <operator pos:start="81:51" pos:end="81:52">&gt;&gt;</operator> <literal type="number" pos:start="81:54" pos:end="81:55">31</literal> <operator pos:start="81:57" pos:end="81:58">&gt;&gt;</operator> <literal type="number" pos:start="81:60" pos:end="81:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:44">/* Try for PC-relative address load.  */</comment>

    <if_stmt pos:start="93:5" pos:end="105:5"><if pos:start="93:5" pos:end="105:5">if <condition pos:start="93:8" pos:end="93:24">(<expr pos:start="93:9" pos:end="93:23"><operator pos:start="93:9" pos:end="93:9">(</operator><name pos:start="93:10" pos:end="93:13">sval</name> <operator pos:start="93:15" pos:end="93:15">&amp;</operator> <literal type="number" pos:start="93:17" pos:end="93:17">1</literal><operator pos:start="93:18" pos:end="93:18">)</operator> <operator pos:start="93:20" pos:end="93:21">==</operator> <literal type="number" pos:start="93:23" pos:end="93:23">0</literal></expr>)</condition> <block pos:start="93:26" pos:end="105:5">{<block_content pos:start="95:9" pos:end="103:9">

        <decl_stmt pos:start="95:9" pos:end="95:61"><decl pos:start="95:9" pos:end="95:60"><type pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:17">ptrdiff_t</name></type> <name pos:start="95:19" pos:end="95:21">off</name> <init pos:start="95:23" pos:end="95:60">= <expr pos:start="95:25" pos:end="95:60"><call pos:start="95:25" pos:end="95:55"><name pos:start="95:25" pos:end="95:38">tcg_pcrel_diff</name><argument_list pos:start="95:39" pos:end="95:55">(<argument pos:start="95:40" pos:end="95:40"><expr pos:start="95:40" pos:end="95:40"><name pos:start="95:40" pos:end="95:40">s</name></expr></argument>, <argument pos:start="95:43" pos:end="95:54"><expr pos:start="95:43" pos:end="95:54"><operator pos:start="95:43" pos:end="95:43">(</operator><name pos:start="95:44" pos:end="95:47">void</name> <operator pos:start="95:49" pos:end="95:49">*</operator><operator pos:start="95:50" pos:end="95:50">)</operator><name pos:start="95:51" pos:end="95:54">sval</name></expr></argument>)</argument_list></call> <operator pos:start="95:57" pos:end="95:58">&gt;&gt;</operator> <literal type="number" pos:start="95:60" pos:end="95:60">1</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:32">(<expr pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:15">off</name> <operator pos:start="97:17" pos:end="97:18">==</operator> <operator pos:start="97:20" pos:end="97:20">(</operator><name pos:start="97:21" pos:end="97:27">int32_t</name><operator pos:start="97:28" pos:end="97:28">)</operator><name pos:start="97:29" pos:end="97:31">off</name></expr>)</condition> <block pos:start="97:34" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:19">

            <expr_stmt pos:start="99:13" pos:end="99:49"><expr pos:start="99:13" pos:end="99:48"><call pos:start="99:13" pos:end="99:48"><name pos:start="99:13" pos:end="99:24">tcg_out_insn</name><argument_list pos:start="99:25" pos:end="99:48">(<argument pos:start="99:26" pos:end="99:26"><expr pos:start="99:26" pos:end="99:26"><name pos:start="99:26" pos:end="99:26">s</name></expr></argument>, <argument pos:start="99:29" pos:end="99:31"><expr pos:start="99:29" pos:end="99:31"><name pos:start="99:29" pos:end="99:31">RIL</name></expr></argument>, <argument pos:start="99:34" pos:end="99:37"><expr pos:start="99:34" pos:end="99:37"><name pos:start="99:34" pos:end="99:37">LARL</name></expr></argument>, <argument pos:start="99:40" pos:end="99:42"><expr pos:start="99:40" pos:end="99:42"><name pos:start="99:40" pos:end="99:42">ret</name></expr></argument>, <argument pos:start="99:45" pos:end="99:47"><expr pos:start="99:45" pos:end="99:47"><name pos:start="99:45" pos:end="99:47">off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="101:13" pos:end="101:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="109:5" pos:end="111:56">/* If extended immediates are not present, then we may have to issue

       several instructions to load the low 32 bits.  */</comment>

    <if_stmt pos:start="113:5" pos:end="161:5"><if pos:start="113:5" pos:end="161:5">if <condition pos:start="113:8" pos:end="113:41">(<expr pos:start="113:9" pos:end="113:40"><operator pos:start="113:9" pos:end="113:9">!</operator><operator pos:start="113:10" pos:end="113:10">(</operator><name pos:start="113:11" pos:end="113:20">facilities</name> <operator pos:start="113:22" pos:end="113:22">&amp;</operator> <name pos:start="113:24" pos:end="113:39">FACILITY_EXT_IMM</name><operator pos:start="113:40" pos:end="113:40">)</operator></expr>)</condition> <block pos:start="113:43" pos:end="161:5">{<block_content pos:start="121:9" pos:end="159:9">

        <comment type="block" pos:start="115:9" pos:end="119:39">/* A 32-bit unsigned value can be loaded in 2 insns.  And given

           that the lli_insns loop above did not succeed, we know that

           both insns are required.  */</comment>

        <if_stmt pos:start="121:9" pos:end="129:9"><if pos:start="121:9" pos:end="129:9">if <condition pos:start="121:12" pos:end="121:31">(<expr pos:start="121:13" pos:end="121:30"><name pos:start="121:13" pos:end="121:16">uval</name> <operator pos:start="121:18" pos:end="121:19">&lt;=</operator> <literal type="number" pos:start="121:21" pos:end="121:30">0xffffffff</literal></expr>)</condition> <block pos:start="121:33" pos:end="129:9">{<block_content pos:start="123:13" pos:end="127:19">

            <expr_stmt pos:start="123:13" pos:end="123:50"><expr pos:start="123:13" pos:end="123:49"><call pos:start="123:13" pos:end="123:49"><name pos:start="123:13" pos:end="123:24">tcg_out_insn</name><argument_list pos:start="123:25" pos:end="123:49">(<argument pos:start="123:26" pos:end="123:26"><expr pos:start="123:26" pos:end="123:26"><name pos:start="123:26" pos:end="123:26">s</name></expr></argument>, <argument pos:start="123:29" pos:end="123:30"><expr pos:start="123:29" pos:end="123:30"><name pos:start="123:29" pos:end="123:30">RI</name></expr></argument>, <argument pos:start="123:33" pos:end="123:37"><expr pos:start="123:33" pos:end="123:37"><name pos:start="123:33" pos:end="123:37">LLILL</name></expr></argument>, <argument pos:start="123:40" pos:end="123:42"><expr pos:start="123:40" pos:end="123:42"><name pos:start="123:40" pos:end="123:42">ret</name></expr></argument>, <argument pos:start="123:45" pos:end="123:48"><expr pos:start="123:45" pos:end="123:48"><name pos:start="123:45" pos:end="123:48">uval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:55"><expr pos:start="125:13" pos:end="125:54"><call pos:start="125:13" pos:end="125:54"><name pos:start="125:13" pos:end="125:24">tcg_out_insn</name><argument_list pos:start="125:25" pos:end="125:54">(<argument pos:start="125:26" pos:end="125:26"><expr pos:start="125:26" pos:end="125:26"><name pos:start="125:26" pos:end="125:26">s</name></expr></argument>, <argument pos:start="125:29" pos:end="125:30"><expr pos:start="125:29" pos:end="125:30"><name pos:start="125:29" pos:end="125:30">RI</name></expr></argument>, <argument pos:start="125:33" pos:end="125:36"><expr pos:start="125:33" pos:end="125:36"><name pos:start="125:33" pos:end="125:36">IILH</name></expr></argument>, <argument pos:start="125:39" pos:end="125:41"><expr pos:start="125:39" pos:end="125:41"><name pos:start="125:39" pos:end="125:41">ret</name></expr></argument>, <argument pos:start="125:44" pos:end="125:53"><expr pos:start="125:44" pos:end="125:53"><name pos:start="125:44" pos:end="125:47">uval</name> <operator pos:start="125:49" pos:end="125:50">&gt;&gt;</operator> <literal type="number" pos:start="125:52" pos:end="125:53">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="127:13" pos:end="127:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="133:9" pos:end="139:54">/* If all high bits are set, the value can be loaded in 2 or 3 insns.

           We first want to make sure that all the high bits get set.  With

           luck the low 16-bits can be considered negative to perform that for

           free, otherwise we load an explicit -1.  */</comment>

        <if_stmt pos:start="141:9" pos:end="159:9"><if pos:start="141:9" pos:end="159:9">if <condition pos:start="141:12" pos:end="141:34">(<expr pos:start="141:13" pos:end="141:33"><name pos:start="141:13" pos:end="141:16">sval</name> <operator pos:start="141:18" pos:end="141:19">&gt;&gt;</operator> <literal type="number" pos:start="141:21" pos:end="141:22">31</literal> <operator pos:start="141:24" pos:end="141:25">&gt;&gt;</operator> <literal type="number" pos:start="141:27" pos:end="141:27">1</literal> <operator pos:start="141:29" pos:end="141:30">==</operator> <operator pos:start="141:32" pos:end="141:32">-</operator><literal type="number" pos:start="141:33" pos:end="141:33">1</literal></expr>)</condition> <block pos:start="141:36" pos:end="159:9">{<block_content pos:start="143:13" pos:end="157:19">

            <if_stmt pos:start="143:13" pos:end="153:13"><if pos:start="143:13" pos:end="147:13">if <condition pos:start="143:16" pos:end="143:30">(<expr pos:start="143:17" pos:end="143:29"><name pos:start="143:17" pos:end="143:20">uval</name> <operator pos:start="143:22" pos:end="143:22">&amp;</operator> <literal type="number" pos:start="143:24" pos:end="143:29">0x8000</literal></expr>)</condition> <block pos:start="143:32" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:53">

                <expr_stmt pos:start="145:17" pos:end="145:53"><expr pos:start="145:17" pos:end="145:52"><call pos:start="145:17" pos:end="145:52"><name pos:start="145:17" pos:end="145:28">tcg_out_insn</name><argument_list pos:start="145:29" pos:end="145:52">(<argument pos:start="145:30" pos:end="145:30"><expr pos:start="145:30" pos:end="145:30"><name pos:start="145:30" pos:end="145:30">s</name></expr></argument>, <argument pos:start="145:33" pos:end="145:34"><expr pos:start="145:33" pos:end="145:34"><name pos:start="145:33" pos:end="145:34">RI</name></expr></argument>, <argument pos:start="145:37" pos:end="145:40"><expr pos:start="145:37" pos:end="145:40"><name pos:start="145:37" pos:end="145:40">LGHI</name></expr></argument>, <argument pos:start="145:43" pos:end="145:45"><expr pos:start="145:43" pos:end="145:45"><name pos:start="145:43" pos:end="145:45">ret</name></expr></argument>, <argument pos:start="145:48" pos:end="145:51"><expr pos:start="145:48" pos:end="145:51"><name pos:start="145:48" pos:end="145:51">uval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="147:15" pos:end="153:13">else <block pos:start="147:20" pos:end="153:13">{<block_content pos:start="149:17" pos:end="151:53">

                <expr_stmt pos:start="149:17" pos:end="149:51"><expr pos:start="149:17" pos:end="149:50"><call pos:start="149:17" pos:end="149:50"><name pos:start="149:17" pos:end="149:28">tcg_out_insn</name><argument_list pos:start="149:29" pos:end="149:50">(<argument pos:start="149:30" pos:end="149:30"><expr pos:start="149:30" pos:end="149:30"><name pos:start="149:30" pos:end="149:30">s</name></expr></argument>, <argument pos:start="149:33" pos:end="149:34"><expr pos:start="149:33" pos:end="149:34"><name pos:start="149:33" pos:end="149:34">RI</name></expr></argument>, <argument pos:start="149:37" pos:end="149:40"><expr pos:start="149:37" pos:end="149:40"><name pos:start="149:37" pos:end="149:40">LGHI</name></expr></argument>, <argument pos:start="149:43" pos:end="149:45"><expr pos:start="149:43" pos:end="149:45"><name pos:start="149:43" pos:end="149:45">ret</name></expr></argument>, <argument pos:start="149:48" pos:end="149:49"><expr pos:start="149:48" pos:end="149:49"><operator pos:start="149:48" pos:end="149:48">-</operator><literal type="number" pos:start="149:49" pos:end="149:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:53"><expr pos:start="151:17" pos:end="151:52"><call pos:start="151:17" pos:end="151:52"><name pos:start="151:17" pos:end="151:28">tcg_out_insn</name><argument_list pos:start="151:29" pos:end="151:52">(<argument pos:start="151:30" pos:end="151:30"><expr pos:start="151:30" pos:end="151:30"><name pos:start="151:30" pos:end="151:30">s</name></expr></argument>, <argument pos:start="151:33" pos:end="151:34"><expr pos:start="151:33" pos:end="151:34"><name pos:start="151:33" pos:end="151:34">RI</name></expr></argument>, <argument pos:start="151:37" pos:end="151:40"><expr pos:start="151:37" pos:end="151:40"><name pos:start="151:37" pos:end="151:40">IILL</name></expr></argument>, <argument pos:start="151:43" pos:end="151:45"><expr pos:start="151:43" pos:end="151:45"><name pos:start="151:43" pos:end="151:45">ret</name></expr></argument>, <argument pos:start="151:48" pos:end="151:51"><expr pos:start="151:48" pos:end="151:51"><name pos:start="151:48" pos:end="151:51">uval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:55"><expr pos:start="155:13" pos:end="155:54"><call pos:start="155:13" pos:end="155:54"><name pos:start="155:13" pos:end="155:24">tcg_out_insn</name><argument_list pos:start="155:25" pos:end="155:54">(<argument pos:start="155:26" pos:end="155:26"><expr pos:start="155:26" pos:end="155:26"><name pos:start="155:26" pos:end="155:26">s</name></expr></argument>, <argument pos:start="155:29" pos:end="155:30"><expr pos:start="155:29" pos:end="155:30"><name pos:start="155:29" pos:end="155:30">RI</name></expr></argument>, <argument pos:start="155:33" pos:end="155:36"><expr pos:start="155:33" pos:end="155:36"><name pos:start="155:33" pos:end="155:36">IILH</name></expr></argument>, <argument pos:start="155:39" pos:end="155:41"><expr pos:start="155:39" pos:end="155:41"><name pos:start="155:39" pos:end="155:41">ret</name></expr></argument>, <argument pos:start="155:44" pos:end="155:53"><expr pos:start="155:44" pos:end="155:53"><name pos:start="155:44" pos:end="155:47">uval</name> <operator pos:start="155:49" pos:end="155:50">&gt;&gt;</operator> <literal type="number" pos:start="155:52" pos:end="155:53">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="157:13" pos:end="157:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="165:5" pos:end="165:74">/* If we get here, both the high and low parts have non-zero bits.  */</comment>



    <comment type="block" pos:start="169:5" pos:end="169:45">/* Recurse to load the lower 32-bits.  */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:58"><expr pos:start="171:5" pos:end="171:57"><call pos:start="171:5" pos:end="171:57"><name pos:start="171:5" pos:end="171:16">tcg_out_movi</name><argument_list pos:start="171:17" pos:end="171:57">(<argument pos:start="171:18" pos:end="171:18"><expr pos:start="171:18" pos:end="171:18"><name pos:start="171:18" pos:end="171:18">s</name></expr></argument>, <argument pos:start="171:21" pos:end="171:32"><expr pos:start="171:21" pos:end="171:32"><name pos:start="171:21" pos:end="171:32">TCG_TYPE_I64</name></expr></argument>, <argument pos:start="171:35" pos:end="171:37"><expr pos:start="171:35" pos:end="171:37"><name pos:start="171:35" pos:end="171:37">ret</name></expr></argument>, <argument pos:start="171:40" pos:end="171:56"><expr pos:start="171:40" pos:end="171:56"><name pos:start="171:40" pos:end="171:43">uval</name> <operator pos:start="171:45" pos:end="171:45">&amp;</operator> <literal type="number" pos:start="171:47" pos:end="171:56">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:45">/* Insert data into the high 32-bits.  */</comment>

    <expr_stmt pos:start="177:5" pos:end="177:27"><expr pos:start="177:5" pos:end="177:26"><name pos:start="177:5" pos:end="177:8">uval</name> <operator pos:start="177:10" pos:end="177:10">=</operator> <name pos:start="177:12" pos:end="177:15">uval</name> <operator pos:start="177:17" pos:end="177:18">&gt;&gt;</operator> <literal type="number" pos:start="177:20" pos:end="177:21">31</literal> <operator pos:start="177:23" pos:end="177:24">&gt;&gt;</operator> <literal type="number" pos:start="177:26" pos:end="177:26">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="179:5" pos:end="209:5"><if pos:start="179:5" pos:end="195:5">if <condition pos:start="179:8" pos:end="179:38">(<expr pos:start="179:9" pos:end="179:37"><name pos:start="179:9" pos:end="179:18">facilities</name> <operator pos:start="179:20" pos:end="179:20">&amp;</operator> <name pos:start="179:22" pos:end="179:37">FACILITY_EXT_IMM</name></expr>)</condition> <block pos:start="179:40" pos:end="195:5">{<block_content pos:start="181:9" pos:end="193:9">

        <if_stmt pos:start="181:9" pos:end="193:9"><if pos:start="181:9" pos:end="185:9">if <condition pos:start="181:12" pos:end="181:27">(<expr pos:start="181:13" pos:end="181:26"><name pos:start="181:13" pos:end="181:16">uval</name> <operator pos:start="181:18" pos:end="181:18">&lt;</operator> <literal type="number" pos:start="181:20" pos:end="181:26">0x10000</literal></expr>)</condition> <block pos:start="181:29" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:49">

            <expr_stmt pos:start="183:13" pos:end="183:49"><expr pos:start="183:13" pos:end="183:48"><call pos:start="183:13" pos:end="183:48"><name pos:start="183:13" pos:end="183:24">tcg_out_insn</name><argument_list pos:start="183:25" pos:end="183:48">(<argument pos:start="183:26" pos:end="183:26"><expr pos:start="183:26" pos:end="183:26"><name pos:start="183:26" pos:end="183:26">s</name></expr></argument>, <argument pos:start="183:29" pos:end="183:30"><expr pos:start="183:29" pos:end="183:30"><name pos:start="183:29" pos:end="183:30">RI</name></expr></argument>, <argument pos:start="183:33" pos:end="183:36"><expr pos:start="183:33" pos:end="183:36"><name pos:start="183:33" pos:end="183:36">IIHL</name></expr></argument>, <argument pos:start="183:39" pos:end="183:41"><expr pos:start="183:39" pos:end="183:41"><name pos:start="183:39" pos:end="183:41">ret</name></expr></argument>, <argument pos:start="183:44" pos:end="183:47"><expr pos:start="183:44" pos:end="183:47"><name pos:start="183:44" pos:end="183:47">uval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="185:11" pos:end="189:9">else if <condition pos:start="185:19" pos:end="185:40">(<expr pos:start="185:20" pos:end="185:39"><operator pos:start="185:20" pos:end="185:20">(</operator><name pos:start="185:21" pos:end="185:24">uval</name> <operator pos:start="185:26" pos:end="185:26">&amp;</operator> <literal type="number" pos:start="185:28" pos:end="185:33">0xffff</literal><operator pos:start="185:34" pos:end="185:34">)</operator> <operator pos:start="185:36" pos:end="185:37">==</operator> <literal type="number" pos:start="185:39" pos:end="185:39">0</literal></expr>)</condition> <block pos:start="185:42" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:55">

            <expr_stmt pos:start="187:13" pos:end="187:55"><expr pos:start="187:13" pos:end="187:54"><call pos:start="187:13" pos:end="187:54"><name pos:start="187:13" pos:end="187:24">tcg_out_insn</name><argument_list pos:start="187:25" pos:end="187:54">(<argument pos:start="187:26" pos:end="187:26"><expr pos:start="187:26" pos:end="187:26"><name pos:start="187:26" pos:end="187:26">s</name></expr></argument>, <argument pos:start="187:29" pos:end="187:30"><expr pos:start="187:29" pos:end="187:30"><name pos:start="187:29" pos:end="187:30">RI</name></expr></argument>, <argument pos:start="187:33" pos:end="187:36"><expr pos:start="187:33" pos:end="187:36"><name pos:start="187:33" pos:end="187:36">IIHH</name></expr></argument>, <argument pos:start="187:39" pos:end="187:41"><expr pos:start="187:39" pos:end="187:41"><name pos:start="187:39" pos:end="187:41">ret</name></expr></argument>, <argument pos:start="187:44" pos:end="187:53"><expr pos:start="187:44" pos:end="187:53"><name pos:start="187:44" pos:end="187:47">uval</name> <operator pos:start="187:49" pos:end="187:50">&gt;&gt;</operator> <literal type="number" pos:start="187:52" pos:end="187:53">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="189:11" pos:end="193:9">else <block pos:start="189:16" pos:end="193:9">{<block_content pos:start="191:13" pos:end="191:50">

            <expr_stmt pos:start="191:13" pos:end="191:50"><expr pos:start="191:13" pos:end="191:49"><call pos:start="191:13" pos:end="191:49"><name pos:start="191:13" pos:end="191:24">tcg_out_insn</name><argument_list pos:start="191:25" pos:end="191:49">(<argument pos:start="191:26" pos:end="191:26"><expr pos:start="191:26" pos:end="191:26"><name pos:start="191:26" pos:end="191:26">s</name></expr></argument>, <argument pos:start="191:29" pos:end="191:31"><expr pos:start="191:29" pos:end="191:31"><name pos:start="191:29" pos:end="191:31">RIL</name></expr></argument>, <argument pos:start="191:34" pos:end="191:37"><expr pos:start="191:34" pos:end="191:37"><name pos:start="191:34" pos:end="191:37">IIHF</name></expr></argument>, <argument pos:start="191:40" pos:end="191:42"><expr pos:start="191:40" pos:end="191:42"><name pos:start="191:40" pos:end="191:42">ret</name></expr></argument>, <argument pos:start="191:45" pos:end="191:48"><expr pos:start="191:45" pos:end="191:48"><name pos:start="191:45" pos:end="191:48">uval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="195:7" pos:end="209:5">else <block pos:start="195:12" pos:end="209:5">{<block_content pos:start="197:9" pos:end="207:9">

        <if_stmt pos:start="197:9" pos:end="201:9"><if pos:start="197:9" pos:end="201:9">if <condition pos:start="197:12" pos:end="197:26">(<expr pos:start="197:13" pos:end="197:25"><name pos:start="197:13" pos:end="197:16">uval</name> <operator pos:start="197:18" pos:end="197:18">&amp;</operator> <literal type="number" pos:start="197:20" pos:end="197:25">0xffff</literal></expr>)</condition> <block pos:start="197:28" pos:end="201:9">{<block_content pos:start="199:13" pos:end="199:49">

            <expr_stmt pos:start="199:13" pos:end="199:49"><expr pos:start="199:13" pos:end="199:48"><call pos:start="199:13" pos:end="199:48"><name pos:start="199:13" pos:end="199:24">tcg_out_insn</name><argument_list pos:start="199:25" pos:end="199:48">(<argument pos:start="199:26" pos:end="199:26"><expr pos:start="199:26" pos:end="199:26"><name pos:start="199:26" pos:end="199:26">s</name></expr></argument>, <argument pos:start="199:29" pos:end="199:30"><expr pos:start="199:29" pos:end="199:30"><name pos:start="199:29" pos:end="199:30">RI</name></expr></argument>, <argument pos:start="199:33" pos:end="199:36"><expr pos:start="199:33" pos:end="199:36"><name pos:start="199:33" pos:end="199:36">IIHL</name></expr></argument>, <argument pos:start="199:39" pos:end="199:41"><expr pos:start="199:39" pos:end="199:41"><name pos:start="199:39" pos:end="199:41">ret</name></expr></argument>, <argument pos:start="199:44" pos:end="199:47"><expr pos:start="199:44" pos:end="199:47"><name pos:start="199:44" pos:end="199:47">uval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="203:9" pos:end="207:9"><if pos:start="203:9" pos:end="207:9">if <condition pos:start="203:12" pos:end="203:30">(<expr pos:start="203:13" pos:end="203:29"><name pos:start="203:13" pos:end="203:16">uval</name> <operator pos:start="203:18" pos:end="203:18">&amp;</operator> <literal type="number" pos:start="203:20" pos:end="203:29">0xffff0000</literal></expr>)</condition> <block pos:start="203:32" pos:end="207:9">{<block_content pos:start="205:13" pos:end="205:55">

            <expr_stmt pos:start="205:13" pos:end="205:55"><expr pos:start="205:13" pos:end="205:54"><call pos:start="205:13" pos:end="205:54"><name pos:start="205:13" pos:end="205:24">tcg_out_insn</name><argument_list pos:start="205:25" pos:end="205:54">(<argument pos:start="205:26" pos:end="205:26"><expr pos:start="205:26" pos:end="205:26"><name pos:start="205:26" pos:end="205:26">s</name></expr></argument>, <argument pos:start="205:29" pos:end="205:30"><expr pos:start="205:29" pos:end="205:30"><name pos:start="205:29" pos:end="205:30">RI</name></expr></argument>, <argument pos:start="205:33" pos:end="205:36"><expr pos:start="205:33" pos:end="205:36"><name pos:start="205:33" pos:end="205:36">IIHH</name></expr></argument>, <argument pos:start="205:39" pos:end="205:41"><expr pos:start="205:39" pos:end="205:41"><name pos:start="205:39" pos:end="205:41">ret</name></expr></argument>, <argument pos:start="205:44" pos:end="205:53"><expr pos:start="205:44" pos:end="205:53"><name pos:start="205:44" pos:end="205:47">uval</name> <operator pos:start="205:49" pos:end="205:50">&gt;&gt;</operator> <literal type="number" pos:start="205:52" pos:end="205:53">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
