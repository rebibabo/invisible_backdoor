<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16018.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">trigger_page_fault</name><parameter_list pos:start="1:31" pos:end="3:77">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:44">CPUS390XState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">env</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:69"><decl pos:start="1:52" pos:end="1:69"><type pos:start="1:52" pos:end="1:69"><name pos:start="1:52" pos:end="1:63">target_ulong</name></type> <name pos:start="1:65" pos:end="1:69">vaddr</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:44"><decl pos:start="3:32" pos:end="3:44"><type pos:start="3:32" pos:end="3:44"><name pos:start="3:32" pos:end="3:39">uint32_t</name></type> <name pos:start="3:41" pos:end="3:44">type</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:58"><decl pos:start="3:47" pos:end="3:58"><type pos:start="3:47" pos:end="3:58"><name pos:start="3:47" pos:end="3:54">uint64_t</name></type> <name pos:start="3:56" pos:end="3:58">asc</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:66"><decl pos:start="3:61" pos:end="3:66"><type pos:start="3:61" pos:end="3:66"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:66">rw</name></decl></parameter>, <parameter pos:start="3:69" pos:end="3:76"><decl pos:start="3:69" pos:end="3:76"><type pos:start="3:69" pos:end="3:76"><name pos:start="3:69" pos:end="3:72">bool</name></type> <name pos:start="3:74" pos:end="3:76">exc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="41:1">{<block_content pos:start="7:5" pos:end="39:51">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">ilen</name> <init pos:start="7:14" pos:end="7:25">= <expr pos:start="7:16" pos:end="7:25"><name pos:start="7:16" pos:end="7:25">ILEN_LATER</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:16">tec</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:74"><expr pos:start="13:5" pos:end="13:73"><name pos:start="13:5" pos:end="13:7">tec</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <name pos:start="13:11" pos:end="13:15">vaddr</name> <operator pos:start="13:17" pos:end="13:17">|</operator> <operator pos:start="13:19" pos:end="13:19">(</operator><ternary pos:start="13:20" pos:end="13:60"><condition pos:start="13:20" pos:end="13:41"><expr pos:start="13:20" pos:end="13:39"><name pos:start="13:20" pos:end="13:21">rw</name> <operator pos:start="13:23" pos:end="13:24">==</operator> <name pos:start="13:26" pos:end="13:39">MMU_DATA_STORE</name></expr> ?</condition><then pos:start="13:43" pos:end="13:50"> <expr pos:start="13:43" pos:end="13:50"><name pos:start="13:43" pos:end="13:50">FS_WRITE</name></expr> </then><else pos:start="13:52" pos:end="13:60">: <expr pos:start="13:54" pos:end="13:60"><name pos:start="13:54" pos:end="13:60">FS_READ</name></expr></else></ternary><operator pos:start="13:61" pos:end="13:61">)</operator> <operator pos:start="13:63" pos:end="13:63">|</operator> <name pos:start="13:65" pos:end="13:67">asc</name> <operator pos:start="13:69" pos:end="13:70">&gt;&gt;</operator> <literal type="number" pos:start="13:72" pos:end="13:73">46</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:66"><expr pos:start="17:5" pos:end="17:65"><call pos:start="17:5" pos:end="17:65"><name pos:start="17:5" pos:end="17:11">DPRINTF</name><argument_list pos:start="17:12" pos:end="17:65">(<argument pos:start="17:13" pos:end="17:49"><expr pos:start="17:13" pos:end="17:49"><literal type="string" pos:start="17:13" pos:end="17:37">"%s: trans_exc_code=%016"</literal> <name pos:start="17:39" pos:end="17:44">PRIx64</name> <literal type="string" pos:start="17:46" pos:end="17:49">"\n"</literal></expr></argument>, <argument pos:start="17:52" pos:end="17:59"><expr pos:start="17:52" pos:end="17:59"><name pos:start="17:52" pos:end="17:59">__func__</name></expr></argument>, <argument pos:start="17:62" pos:end="17:64"><expr pos:start="17:62" pos:end="17:64"><name pos:start="17:62" pos:end="17:64">tec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:12">exc</name></expr>)</condition> <block pos:start="21:15" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:47">/* Code accesses have an undefined ilc.  */</comment>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:29">(<expr pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:10">rw</name> <operator pos:start="31:12" pos:end="31:13">==</operator> <name pos:start="31:15" pos:end="31:28">MMU_INST_FETCH</name></expr>)</condition> <block pos:start="31:31" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:17">

        <expr_stmt pos:start="33:9" pos:end="33:17"><expr pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:12">ilen</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <literal type="number" pos:start="33:16" pos:end="33:16">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:51"><expr pos:start="39:5" pos:end="39:50"><call pos:start="39:5" pos:end="39:50"><name pos:start="39:5" pos:end="39:28">trigger_access_exception</name><argument_list pos:start="39:29" pos:end="39:50">(<argument pos:start="39:30" pos:end="39:32"><expr pos:start="39:30" pos:end="39:32"><name pos:start="39:30" pos:end="39:32">env</name></expr></argument>, <argument pos:start="39:35" pos:end="39:38"><expr pos:start="39:35" pos:end="39:38"><name pos:start="39:35" pos:end="39:38">type</name></expr></argument>, <argument pos:start="39:41" pos:end="39:44"><expr pos:start="39:41" pos:end="39:44"><name pos:start="39:41" pos:end="39:44">ilen</name></expr></argument>, <argument pos:start="39:47" pos:end="39:49"><expr pos:start="39:47" pos:end="39:49"><name pos:start="39:47" pos:end="39:49">tec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
