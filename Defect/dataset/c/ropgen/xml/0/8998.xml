<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8998.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">tcp_fconnect</name><parameter_list pos:start="1:17" pos:end="1:35">(<parameter pos:start="1:18" pos:end="1:34"><decl pos:start="1:18" pos:end="1:34"><type pos:start="1:18" pos:end="1:34"><name pos:start="1:18" pos:end="1:30"><name pos:start="1:18" pos:end="1:23">struct</name> <name pos:start="1:25" pos:end="1:30">socket</name></name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:34">so</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:3" pos:end="89:14">

  <decl_stmt pos:start="5:3" pos:end="5:27"><decl pos:start="5:3" pos:end="5:26"><type pos:start="5:3" pos:end="5:9"><name pos:start="5:3" pos:end="5:7">Slirp</name> <modifier pos:start="5:9" pos:end="5:9">*</modifier></type><name pos:start="5:10" pos:end="5:14">slirp</name> <init pos:start="5:16" pos:end="5:26">= <expr pos:start="5:18" pos:end="5:26"><name pos:start="5:18" pos:end="5:26"><name pos:start="5:18" pos:end="5:19">so</name><operator pos:start="5:20" pos:end="5:21">-&gt;</operator><name pos:start="5:22" pos:end="5:26">slirp</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="7:3" pos:end="7:12"><decl pos:start="7:3" pos:end="7:11"><type pos:start="7:3" pos:end="7:5"><name pos:start="7:3" pos:end="7:5">int</name></type> <name pos:start="7:7" pos:end="7:9">ret</name><init pos:start="7:10" pos:end="7:11">=<expr pos:start="7:11" pos:end="7:11"><literal type="number" pos:start="7:11" pos:end="7:11">0</literal></expr></init></decl>;</decl_stmt>



  <expr_stmt pos:start="11:3" pos:end="11:29"><expr pos:start="11:3" pos:end="11:28"><call pos:start="11:3" pos:end="11:28"><name pos:start="11:3" pos:end="11:12">DEBUG_CALL</name><argument_list pos:start="11:13" pos:end="11:28">(<argument pos:start="11:14" pos:end="11:27"><expr pos:start="11:14" pos:end="11:27"><literal type="string" pos:start="11:14" pos:end="11:27">"tcp_fconnect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt pos:start="13:3" pos:end="13:27"><expr pos:start="13:3" pos:end="13:26"><call pos:start="13:3" pos:end="13:26"><name pos:start="13:3" pos:end="13:11">DEBUG_ARG</name><argument_list pos:start="13:12" pos:end="13:26">(<argument pos:start="13:13" pos:end="13:21"><expr pos:start="13:13" pos:end="13:21"><literal type="string" pos:start="13:13" pos:end="13:21">"so = %p"</literal></expr></argument>, <argument pos:start="13:24" pos:end="13:25"><expr pos:start="13:24" pos:end="13:25"><name pos:start="13:24" pos:end="13:25">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <if_stmt pos:start="17:3" pos:end="85:3"><if pos:start="17:3" pos:end="85:3">if<condition pos:start="17:5" pos:end="17:62">( <expr pos:start="17:7" pos:end="17:61"><operator pos:start="17:7" pos:end="17:7">(</operator><name pos:start="17:8" pos:end="17:10">ret</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:18"><name pos:start="17:14" pos:end="17:15">so</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:18">s</name></name> <operator pos:start="17:20" pos:end="17:20">=</operator> <call pos:start="17:22" pos:end="17:55"><name pos:start="17:22" pos:end="17:32">qemu_socket</name><argument_list pos:start="17:33" pos:end="17:55">(<argument pos:start="17:34" pos:end="17:40"><expr pos:start="17:34" pos:end="17:40"><name pos:start="17:34" pos:end="17:40">AF_INET</name></expr></argument>,<argument pos:start="17:42" pos:end="17:52"><expr pos:start="17:42" pos:end="17:52"><name pos:start="17:42" pos:end="17:52">SOCK_STREAM</name></expr></argument>,<argument pos:start="17:54" pos:end="17:54"><expr pos:start="17:54" pos:end="17:54"><literal type="number" pos:start="17:54" pos:end="17:54">0</literal></expr></argument>)</argument_list></call><operator pos:start="17:56" pos:end="17:56">)</operator> <operator pos:start="17:58" pos:end="17:59">&gt;=</operator> <literal type="number" pos:start="17:61" pos:end="17:61">0</literal></expr>)</condition> <block pos:start="17:64" pos:end="85:3">{<block_content pos:start="19:5" pos:end="83:24">

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">opt</name></decl>, <decl pos:start="19:14" pos:end="19:20"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:14" pos:end="19:14">s</name><init pos:start="19:15" pos:end="19:20">=<expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:17">so</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:20">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:22">sockaddr_in</name></name></type> <name pos:start="21:24" pos:end="21:27">addr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><call pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:21">qemu_set_nonblock</name><argument_list pos:start="25:22" pos:end="25:24">(<argument pos:start="25:23" pos:end="25:23"><expr pos:start="25:23" pos:end="25:23"><name pos:start="25:23" pos:end="25:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><call pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:25">socket_set_fast_reuse</name><argument_list pos:start="27:26" pos:end="27:28">(<argument pos:start="27:27" pos:end="27:27"><expr pos:start="27:27" pos:end="27:27"><name pos:start="27:27" pos:end="27:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:12"><expr pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:7">opt</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <literal type="number" pos:start="29:11" pos:end="29:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:68"><expr pos:start="31:5" pos:end="31:67"><call pos:start="31:5" pos:end="31:67"><name pos:start="31:5" pos:end="31:19">qemu_setsockopt</name><argument_list pos:start="31:20" pos:end="31:67">(<argument pos:start="31:21" pos:end="31:21"><expr pos:start="31:21" pos:end="31:21"><name pos:start="31:21" pos:end="31:21">s</name></expr></argument>, <argument pos:start="31:24" pos:end="31:33"><expr pos:start="31:24" pos:end="31:33"><name pos:start="31:24" pos:end="31:33">SOL_SOCKET</name></expr></argument>, <argument pos:start="31:36" pos:end="31:47"><expr pos:start="31:36" pos:end="31:47"><name pos:start="31:36" pos:end="31:47">SO_OOBINLINE</name></expr></argument>, <argument pos:start="31:50" pos:end="31:53"><expr pos:start="31:50" pos:end="31:53"><operator pos:start="31:50" pos:end="31:50">&amp;</operator><name pos:start="31:51" pos:end="31:53">opt</name></expr></argument>, <argument pos:start="31:56" pos:end="31:66"><expr pos:start="31:56" pos:end="31:66"><sizeof pos:start="31:56" pos:end="31:66">sizeof<argument_list pos:start="31:62" pos:end="31:66">(<argument pos:start="31:63" pos:end="31:65"><expr pos:start="31:63" pos:end="31:65"><name pos:start="31:63" pos:end="31:65">opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:8">addr</name><operator pos:start="35:9" pos:end="35:9">.</operator><name pos:start="35:10" pos:end="35:19">sin_family</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:29">AF_INET</name></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="57:35"><if pos:start="37:5" pos:end="55:5">if <condition pos:start="37:8" pos:end="39:36">(<expr pos:start="37:9" pos:end="39:35"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:28"><name pos:start="37:10" pos:end="37:11">so</name><operator pos:start="37:12" pos:end="37:13">-&gt;</operator><name pos:start="37:14" pos:end="37:21">so_faddr</name><operator pos:start="37:22" pos:end="37:22">.</operator><name pos:start="37:23" pos:end="37:28">s_addr</name></name> <operator pos:start="37:30" pos:end="37:30">&amp;</operator> <name pos:start="37:32" pos:end="37:58"><name pos:start="37:32" pos:end="37:36">slirp</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:51">vnetwork_mask</name><operator pos:start="37:52" pos:end="37:52">.</operator><name pos:start="37:53" pos:end="37:58">s_addr</name></name><operator pos:start="37:59" pos:end="37:59">)</operator> <operator pos:start="37:61" pos:end="37:62">==</operator>

        <name pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:13">slirp</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:28">vnetwork_addr</name><operator pos:start="39:29" pos:end="39:29">.</operator><name pos:start="39:30" pos:end="39:35">s_addr</name></name></expr>)</condition> <block pos:start="39:38" pos:end="55:5">{<block_content pos:start="43:7" pos:end="53:7">

      <comment type="block" pos:start="41:7" pos:end="41:25">/* It's an alias */</comment>

      <if_stmt pos:start="43:7" pos:end="53:7"><if pos:start="43:7" pos:end="49:7">if <condition pos:start="43:10" pos:end="43:64">(<expr pos:start="43:11" pos:end="43:63"><name pos:start="43:11" pos:end="43:29"><name pos:start="43:11" pos:end="43:12">so</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:22">so_faddr</name><operator pos:start="43:23" pos:end="43:23">.</operator><name pos:start="43:24" pos:end="43:29">s_addr</name></name> <operator pos:start="43:31" pos:end="43:32">==</operator> <name pos:start="43:34" pos:end="43:63"><name pos:start="43:34" pos:end="43:38">slirp</name><operator pos:start="43:39" pos:end="43:40">-&gt;</operator><name pos:start="43:41" pos:end="43:56">vnameserver_addr</name><operator pos:start="43:57" pos:end="43:57">.</operator><name pos:start="43:58" pos:end="43:63">s_addr</name></name></expr>)</condition> <block pos:start="43:66" pos:end="49:7">{<block_content pos:start="45:9" pos:end="47:40">

	<if_stmt pos:start="45:9" pos:end="47:40"><if pos:start="45:9" pos:end="47:40">if <condition pos:start="45:12" pos:end="45:45">(<expr pos:start="45:13" pos:end="45:44"><call pos:start="45:13" pos:end="45:40"><name pos:start="45:13" pos:end="45:24">get_dns_addr</name><argument_list pos:start="45:25" pos:end="45:40">(<argument pos:start="45:26" pos:end="45:39"><expr pos:start="45:26" pos:end="45:39"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:39"><name pos:start="45:27" pos:end="45:30">addr</name><operator pos:start="45:31" pos:end="45:31">.</operator><name pos:start="45:32" pos:end="45:39">sin_addr</name></name></expr></argument>)</argument_list></call> <operator pos:start="45:42" pos:end="45:42">&lt;</operator> <literal type="number" pos:start="45:44" pos:end="45:44">0</literal></expr>)</condition><block type="pseudo" pos:start="47:11" pos:end="47:40"><block_content pos:start="47:11" pos:end="47:40">

	  <expr_stmt pos:start="47:11" pos:end="47:40"><expr pos:start="47:11" pos:end="47:39"><name pos:start="47:11" pos:end="47:23"><name pos:start="47:11" pos:end="47:14">addr</name><operator pos:start="47:15" pos:end="47:15">.</operator><name pos:start="47:16" pos:end="47:23">sin_addr</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:39">loopback_addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      </block_content>}</block></if> <else pos:start="49:9" pos:end="53:7">else <block pos:start="49:14" pos:end="53:7">{<block_content pos:start="51:9" pos:end="51:38">

	<expr_stmt pos:start="51:9" pos:end="51:38"><expr pos:start="51:9" pos:end="51:37"><name pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:12">addr</name><operator pos:start="51:13" pos:end="51:13">.</operator><name pos:start="51:14" pos:end="51:21">sin_addr</name></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <name pos:start="51:25" pos:end="51:37">loopback_addr</name></expr>;</expr_stmt>

      </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="57:35">else<block type="pseudo" pos:start="57:7" pos:end="57:35"><block_content pos:start="57:7" pos:end="57:35">

      <expr_stmt pos:start="57:7" pos:end="57:35"><expr pos:start="57:7" pos:end="57:34"><name pos:start="57:7" pos:end="57:19"><name pos:start="57:7" pos:end="57:10">addr</name><operator pos:start="57:11" pos:end="57:11">.</operator><name pos:start="57:12" pos:end="57:19">sin_addr</name></name> <operator pos:start="57:21" pos:end="57:21">=</operator> <name pos:start="57:23" pos:end="57:34"><name pos:start="57:23" pos:end="57:24">so</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:34">so_faddr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:33"><expr pos:start="59:5" pos:end="59:32"><name pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:8">addr</name><operator pos:start="59:9" pos:end="59:9">.</operator><name pos:start="59:10" pos:end="59:17">sin_port</name></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:32"><name pos:start="59:21" pos:end="59:22">so</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:32">so_fport</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="67:65"><expr pos:start="63:5" pos:end="67:64"><call pos:start="63:5" pos:end="67:64"><name pos:start="63:5" pos:end="63:14">DEBUG_MISC</name><argument_list pos:start="63:15" pos:end="67:64">(<argument pos:start="63:16" pos:end="67:63"><expr pos:start="63:16" pos:end="67:63"><operator pos:start="63:16" pos:end="63:16">(</operator><name pos:start="63:17" pos:end="63:19">dfd</name><operator pos:start="63:20" pos:end="63:20">,</operator> <literal type="string" pos:start="63:22" pos:end="63:56">" connect()ing, addr.sin_port=%d, "</literal>

		<literal type="string" pos:start="65:17" pos:end="65:46">"addr.sin_addr.s_addr=%.16s\n"</literal><operator pos:start="65:47" pos:end="65:47">,</operator>

		<call pos:start="67:17" pos:end="67:36"><name pos:start="67:17" pos:end="67:21">ntohs</name><argument_list pos:start="67:22" pos:end="67:36">(<argument pos:start="67:23" pos:end="67:35"><expr pos:start="67:23" pos:end="67:35"><name pos:start="67:23" pos:end="67:35"><name pos:start="67:23" pos:end="67:26">addr</name><operator pos:start="67:27" pos:end="67:27">.</operator><name pos:start="67:28" pos:end="67:35">sin_port</name></name></expr></argument>)</argument_list></call><operator pos:start="67:37" pos:end="67:37">,</operator> <call pos:start="67:39" pos:end="67:62"><name pos:start="67:39" pos:end="67:47">inet_ntoa</name><argument_list pos:start="67:48" pos:end="67:62">(<argument pos:start="67:49" pos:end="67:61"><expr pos:start="67:49" pos:end="67:61"><name pos:start="67:49" pos:end="67:61"><name pos:start="67:49" pos:end="67:52">addr</name><operator pos:start="67:53" pos:end="67:53">.</operator><name pos:start="67:54" pos:end="67:61">sin_addr</name></name></expr></argument>)</argument_list></call><operator pos:start="67:63" pos:end="67:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="69:5" pos:end="69:40">/* We don't care what port we get */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:60"><expr pos:start="71:5" pos:end="71:59"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="71:59"><name pos:start="71:11" pos:end="71:17">connect</name><argument_list pos:start="71:18" pos:end="71:59">(<argument pos:start="71:19" pos:end="71:19"><expr pos:start="71:19" pos:end="71:19"><name pos:start="71:19" pos:end="71:19">s</name></expr></argument>,<argument pos:start="71:21" pos:end="71:44"><expr pos:start="71:21" pos:end="71:44"><operator pos:start="71:21" pos:end="71:21">(</operator>struct <name pos:start="71:29" pos:end="71:36">sockaddr</name> <operator pos:start="71:38" pos:end="71:38">*</operator><operator pos:start="71:39" pos:end="71:39">)</operator><operator pos:start="71:40" pos:end="71:40">&amp;</operator><name pos:start="71:41" pos:end="71:44">addr</name></expr></argument>,<argument pos:start="71:46" pos:end="71:58"><expr pos:start="71:46" pos:end="71:58"><sizeof pos:start="71:46" pos:end="71:58">sizeof <argument_list pos:start="71:53" pos:end="71:58">(<argument pos:start="71:54" pos:end="71:57"><expr pos:start="71:54" pos:end="71:57"><name pos:start="71:54" pos:end="71:57">addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="81:7">/*

     * If it's not in progress, it failed, so we just return 0,

     * without clearing SS_NOFDREF

     */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:24"><expr pos:start="83:5" pos:end="83:23"><call pos:start="83:5" pos:end="83:23"><name pos:start="83:5" pos:end="83:19">soisfconnecting</name><argument_list pos:start="83:20" pos:end="83:23">(<argument pos:start="83:21" pos:end="83:22"><expr pos:start="83:21" pos:end="83:22"><name pos:start="83:21" pos:end="83:22">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if></if_stmt>



  <return pos:start="89:3" pos:end="89:14">return<expr pos:start="89:9" pos:end="89:13"><operator pos:start="89:9" pos:end="89:9">(</operator><name pos:start="89:10" pos:end="89:12">ret</name><operator pos:start="89:13" pos:end="89:13">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
