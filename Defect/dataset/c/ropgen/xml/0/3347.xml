<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3347.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">bdrv_make_zero</name><parameter_list pos:start="1:19" pos:end="1:60">(<parameter pos:start="1:20" pos:end="1:35"><decl pos:start="1:20" pos:end="1:35"><type pos:start="1:20" pos:end="1:35"><name pos:start="1:20" pos:end="1:28">BdrvChild</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:35">child</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:59"><decl pos:start="1:38" pos:end="1:59"><type pos:start="1:38" pos:end="1:59"><name pos:start="1:38" pos:end="1:53">BdrvRequestFlags</name></type> <name pos:start="1:55" pos:end="1:59">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:5">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:23">target_size</name></decl>, <decl pos:start="5:26" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:26" pos:end="5:28">ret</name></decl>, <decl pos:start="5:31" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:31" pos:end="5:35">bytes</name></decl>, <decl pos:start="5:38" pos:end="5:47"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:38" pos:end="5:43">offset</name> <init pos:start="5:45" pos:end="5:47">= <expr pos:start="5:47" pos:end="5:47"><literal type="number" pos:start="5:47" pos:end="5:47">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">bs</name> <init pos:start="7:26" pos:end="7:36">= <expr pos:start="7:28" pos:end="7:36"><name pos:start="7:28" pos:end="7:36"><name pos:start="7:28" pos:end="7:32">child</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:36">bs</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name></decl>;</decl_stmt> <comment type="block" pos:start="9:12" pos:end="9:24">/* sectors */</comment>



    <expr_stmt pos:start="13:5" pos:end="13:37"><expr pos:start="13:5" pos:end="13:36"><name pos:start="13:5" pos:end="13:15">target_size</name> <operator pos:start="13:17" pos:end="13:17">=</operator> <call pos:start="13:19" pos:end="13:36"><name pos:start="13:19" pos:end="13:32">bdrv_getlength</name><argument_list pos:start="13:33" pos:end="13:36">(<argument pos:start="13:34" pos:end="13:35"><expr pos:start="13:34" pos:end="13:35"><name pos:start="13:34" pos:end="13:35">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:24">(<expr pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:19">target_size</name> <operator pos:start="15:21" pos:end="15:21">&lt;</operator> <literal type="number" pos:start="15:23" pos:end="15:23">0</literal></expr>)</condition> <block pos:start="15:26" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:27">

        <return pos:start="17:9" pos:end="17:27">return <expr pos:start="17:16" pos:end="17:26"><name pos:start="17:16" pos:end="17:26">target_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="23:5" pos:end="69:5">for <control pos:start="23:9" pos:end="23:12">(<init pos:start="23:10" pos:end="23:10">;</init><condition pos:start="23:11" pos:end="23:11">;</condition><incr/>)</control> <block pos:start="23:14" pos:end="69:5">{<block_content pos:start="25:9" pos:end="67:39">

        <expr_stmt pos:start="25:9" pos:end="25:66"><expr pos:start="25:9" pos:end="25:65"><name pos:start="25:9" pos:end="25:13">bytes</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <call pos:start="25:17" pos:end="25:65"><name pos:start="25:17" pos:end="25:19">MIN</name><argument_list pos:start="25:20" pos:end="25:65">(<argument pos:start="25:21" pos:end="25:40"><expr pos:start="25:21" pos:end="25:40"><name pos:start="25:21" pos:end="25:31">target_size</name> <operator pos:start="25:33" pos:end="25:33">-</operator> <name pos:start="25:35" pos:end="25:40">offset</name></expr></argument>, <argument pos:start="25:43" pos:end="25:64"><expr pos:start="25:43" pos:end="25:64"><name pos:start="25:43" pos:end="25:64">BDRV_REQUEST_MAX_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:23">(<expr pos:start="27:13" pos:end="27:22"><name pos:start="27:13" pos:end="27:17">bytes</name> <operator pos:start="27:19" pos:end="27:20">&lt;=</operator> <literal type="number" pos:start="27:22" pos:end="27:22">0</literal></expr>)</condition> <block pos:start="27:25" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:21">

            <return pos:start="29:13" pos:end="29:21">return <expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="35:73"><expr pos:start="33:9" pos:end="35:72"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="35:72"><name pos:start="33:15" pos:end="33:35">bdrv_get_block_status</name><argument_list pos:start="33:36" pos:end="35:72">(<argument pos:start="33:37" pos:end="33:38"><expr pos:start="33:37" pos:end="33:38"><name pos:start="33:37" pos:end="33:38">bs</name></expr></argument>, <argument pos:start="33:41" pos:end="33:66"><expr pos:start="33:41" pos:end="33:66"><name pos:start="33:41" pos:end="33:46">offset</name> <operator pos:start="33:48" pos:end="33:49">&gt;&gt;</operator> <name pos:start="33:51" pos:end="33:66">BDRV_SECTOR_BITS</name></expr></argument>,

                                    <argument pos:start="35:37" pos:end="35:61"><expr pos:start="35:37" pos:end="35:61"><name pos:start="35:37" pos:end="35:41">bytes</name> <operator pos:start="35:43" pos:end="35:44">&gt;&gt;</operator> <name pos:start="35:46" pos:end="35:61">BDRV_SECTOR_BITS</name></expr></argument>, <argument pos:start="35:64" pos:end="35:65"><expr pos:start="35:64" pos:end="35:65"><operator pos:start="35:64" pos:end="35:64">&amp;</operator><name pos:start="35:65" pos:end="35:65">n</name></expr></argument>, <argument pos:start="35:68" pos:end="35:71"><expr pos:start="35:68" pos:end="35:71"><name pos:start="35:68" pos:end="35:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="37:20">(<expr pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:15">ret</name> <operator pos:start="37:17" pos:end="37:17">&lt;</operator> <literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>)</condition> <block pos:start="37:22" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:23">

            <expr_stmt pos:start="39:13" pos:end="41:49"><expr pos:start="39:13" pos:end="41:48"><call pos:start="39:13" pos:end="41:48"><name pos:start="39:13" pos:end="39:24">error_report</name><argument_list pos:start="39:25" pos:end="41:48">(<argument pos:start="39:26" pos:end="39:79"><expr pos:start="39:26" pos:end="39:79"><literal type="string" pos:start="39:26" pos:end="39:65">"error getting block status at offset %"</literal> <name pos:start="39:67" pos:end="39:72">PRId64</name> <literal type="string" pos:start="39:74" pos:end="39:79">": %s"</literal></expr></argument>,

                         <argument pos:start="41:26" pos:end="41:31"><expr pos:start="41:26" pos:end="41:31"><name pos:start="41:26" pos:end="41:31">offset</name></expr></argument>, <argument pos:start="41:34" pos:end="41:47"><expr pos:start="41:34" pos:end="41:47"><call pos:start="41:34" pos:end="41:47"><name pos:start="41:34" pos:end="41:41">strerror</name><argument_list pos:start="41:42" pos:end="41:47">(<argument pos:start="41:43" pos:end="41:46"><expr pos:start="41:43" pos:end="41:46"><operator pos:start="41:43" pos:end="41:43">-</operator><name pos:start="41:44" pos:end="41:46">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:23">return <expr pos:start="43:20" pos:end="43:22"><name pos:start="43:20" pos:end="43:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:34">(<expr pos:start="47:13" pos:end="47:33"><name pos:start="47:13" pos:end="47:15">ret</name> <operator pos:start="47:17" pos:end="47:17">&amp;</operator> <name pos:start="47:19" pos:end="47:33">BDRV_BLOCK_ZERO</name></expr>)</condition> <block pos:start="47:36" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:21">

            <expr_stmt pos:start="49:13" pos:end="49:43"><expr pos:start="49:13" pos:end="49:42"><name pos:start="49:13" pos:end="49:18">offset</name> <operator pos:start="49:20" pos:end="49:21">+=</operator> <name pos:start="49:23" pos:end="49:23">n</name> <operator pos:start="49:25" pos:end="49:25">*</operator> <name pos:start="49:27" pos:end="49:42">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

            <continue pos:start="51:13" pos:end="51:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:77"><expr pos:start="55:9" pos:end="55:76"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:76"><name pos:start="55:15" pos:end="55:32">bdrv_pwrite_zeroes</name><argument_list pos:start="55:33" pos:end="55:76">(<argument pos:start="55:34" pos:end="55:38"><expr pos:start="55:34" pos:end="55:38"><name pos:start="55:34" pos:end="55:38">child</name></expr></argument>, <argument pos:start="55:41" pos:end="55:46"><expr pos:start="55:41" pos:end="55:46"><name pos:start="55:41" pos:end="55:46">offset</name></expr></argument>, <argument pos:start="55:49" pos:end="55:68"><expr pos:start="55:49" pos:end="55:68"><name pos:start="55:49" pos:end="55:49">n</name> <operator pos:start="55:51" pos:end="55:51">*</operator> <name pos:start="55:53" pos:end="55:68">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="55:71" pos:end="55:75"><expr pos:start="55:71" pos:end="55:75"><name pos:start="55:71" pos:end="55:75">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="65:9"><if pos:start="57:9" pos:end="65:9">if <condition pos:start="57:12" pos:end="57:20">(<expr pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:15">ret</name> <operator pos:start="57:17" pos:end="57:17">&lt;</operator> <literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr>)</condition> <block pos:start="57:22" pos:end="65:9">{<block_content pos:start="59:13" pos:end="63:23">

            <expr_stmt pos:start="59:13" pos:end="61:49"><expr pos:start="59:13" pos:end="61:48"><call pos:start="59:13" pos:end="61:48"><name pos:start="59:13" pos:end="59:24">error_report</name><argument_list pos:start="59:25" pos:end="61:48">(<argument pos:start="59:26" pos:end="59:73"><expr pos:start="59:26" pos:end="59:73"><literal type="string" pos:start="59:26" pos:end="59:59">"error writing zeroes at offset %"</literal> <name pos:start="59:61" pos:end="59:66">PRId64</name> <literal type="string" pos:start="59:68" pos:end="59:73">": %s"</literal></expr></argument>,

                         <argument pos:start="61:26" pos:end="61:31"><expr pos:start="61:26" pos:end="61:31"><name pos:start="61:26" pos:end="61:31">offset</name></expr></argument>, <argument pos:start="61:34" pos:end="61:47"><expr pos:start="61:34" pos:end="61:47"><call pos:start="61:34" pos:end="61:47"><name pos:start="61:34" pos:end="61:41">strerror</name><argument_list pos:start="61:42" pos:end="61:47">(<argument pos:start="61:43" pos:end="61:46"><expr pos:start="61:43" pos:end="61:46"><operator pos:start="61:43" pos:end="61:43">-</operator><name pos:start="61:44" pos:end="61:46">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="63:13" pos:end="63:23">return <expr pos:start="63:20" pos:end="63:22"><name pos:start="63:20" pos:end="63:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:39"><expr pos:start="67:9" pos:end="67:38"><name pos:start="67:9" pos:end="67:14">offset</name> <operator pos:start="67:16" pos:end="67:17">+=</operator> <name pos:start="67:19" pos:end="67:19">n</name> <operator pos:start="67:21" pos:end="67:21">*</operator> <name pos:start="67:23" pos:end="67:38">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
