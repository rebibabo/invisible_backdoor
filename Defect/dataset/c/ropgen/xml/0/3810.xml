<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3810.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:37"><name pos:start="1:1" pos:end="1:10">udp_listen</name><argument_list pos:start="1:11" pos:end="1:37">(<argument pos:start="1:12" pos:end="1:15">port</argument>, <argument pos:start="1:18" pos:end="1:22">laddr</argument>, <argument pos:start="1:25" pos:end="1:29">lport</argument>, <argument pos:start="1:32" pos:end="1:36">flags</argument>)</argument_list></macro>

	<decl_stmt pos:start="3:9" pos:end="3:19"><decl pos:start="3:9" pos:end="3:18"><type pos:start="3:9" pos:end="3:13"><name pos:start="3:9" pos:end="3:13">u_int</name></type> <name pos:start="3:15" pos:end="3:18">port</name></decl>;</decl_stmt>

	<decl_stmt pos:start="5:9" pos:end="5:24"><decl pos:start="5:9" pos:end="5:23"><type pos:start="5:9" pos:end="5:17"><name pos:start="5:9" pos:end="5:17">u_int32_t</name></type> <name pos:start="5:19" pos:end="5:23">laddr</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:20"><decl pos:start="7:9" pos:end="7:19"><type pos:start="7:9" pos:end="7:13"><name pos:start="7:9" pos:end="7:13">u_int</name></type> <name pos:start="7:15" pos:end="7:19">lport</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:18"><decl pos:start="9:9" pos:end="9:17"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:17">flags</name></decl>;</decl_stmt>

<block pos:start="11:1" pos:end="89:1">{<block_content pos:start="13:9" pos:end="87:18">

	<decl_stmt pos:start="13:9" pos:end="13:32"><decl pos:start="13:9" pos:end="13:31"><type pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:14">struct</name> <name pos:start="13:16" pos:end="13:26">sockaddr_in</name></name></type> <name pos:start="13:28" pos:end="13:31">addr</name></decl>;</decl_stmt>

	<decl_stmt pos:start="15:9" pos:end="15:26"><decl pos:start="15:9" pos:end="15:25"><type pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:14">struct</name> <name pos:start="15:16" pos:end="15:21">socket</name></name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:25">so</name></decl>;</decl_stmt>

	<decl_stmt pos:start="17:9" pos:end="17:58"><decl pos:start="17:9" pos:end="17:48"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:19">addrlen</name> <init pos:start="17:21" pos:end="17:48">= <expr pos:start="17:23" pos:end="17:48"><sizeof pos:start="17:23" pos:end="17:48">sizeof<argument_list pos:start="17:29" pos:end="17:48">(<argument pos:start="17:30" pos:end="17:47"><expr pos:start="17:30" pos:end="17:47">struct <name pos:start="17:37" pos:end="17:47">sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></init></decl>, <decl pos:start="17:51" pos:end="17:57"><type ref="prev" pos:start="17:9" pos:end="17:11"/><name pos:start="17:51" pos:end="17:53">opt</name> <init pos:start="17:55" pos:end="17:57">= <expr pos:start="17:57" pos:end="17:57"><literal type="number" pos:start="17:57" pos:end="17:57">1</literal></expr></init></decl>;</decl_stmt>



	<if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:38">(<expr pos:start="21:13" pos:end="21:37"><operator pos:start="21:13" pos:end="21:13">(</operator><name pos:start="21:14" pos:end="21:15">so</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:28"><name pos:start="21:19" pos:end="21:26">socreate</name><argument_list pos:start="21:27" pos:end="21:28">()</argument_list></call><operator pos:start="21:29" pos:end="21:29">)</operator> <operator pos:start="21:31" pos:end="21:32">==</operator> <name pos:start="21:34" pos:end="21:37">NULL</name></expr>)</condition> <block pos:start="21:40" pos:end="27:9">{<block_content pos:start="23:17" pos:end="25:28">

		<expr_stmt pos:start="23:17" pos:end="23:25"><expr pos:start="23:17" pos:end="23:24"><call pos:start="23:17" pos:end="23:24"><name pos:start="23:17" pos:end="23:20">free</name><argument_list pos:start="23:21" pos:end="23:24">(<argument pos:start="23:22" pos:end="23:23"><expr pos:start="23:22" pos:end="23:23"><name pos:start="23:22" pos:end="23:23">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="25:17" pos:end="25:28">return <expr pos:start="25:24" pos:end="25:27"><name pos:start="25:24" pos:end="25:27">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="29:9" pos:end="29:45"><expr pos:start="29:9" pos:end="29:44"><name pos:start="29:9" pos:end="29:13"><name pos:start="29:9" pos:end="29:10">so</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:13">s</name></name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:44"><name pos:start="29:17" pos:end="29:22">socket</name><argument_list pos:start="29:23" pos:end="29:44">(<argument pos:start="29:24" pos:end="29:30"><expr pos:start="29:24" pos:end="29:30"><name pos:start="29:24" pos:end="29:30">AF_INET</name></expr></argument>,<argument pos:start="29:32" pos:end="29:41"><expr pos:start="29:32" pos:end="29:41"><name pos:start="29:32" pos:end="29:41">SOCK_DGRAM</name></expr></argument>,<argument pos:start="29:43" pos:end="29:43"><expr pos:start="29:43" pos:end="29:43"><literal type="number" pos:start="29:43" pos:end="29:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="31:9" pos:end="31:44"><expr pos:start="31:9" pos:end="31:43"><name pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:10">so</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:21">so_expire</name></name> <operator pos:start="31:23" pos:end="31:23">=</operator> <name pos:start="31:25" pos:end="31:31">curtime</name> <operator pos:start="31:33" pos:end="31:33">+</operator> <name pos:start="31:35" pos:end="31:43">SO_EXPIRE</name></expr>;</expr_stmt>

	<expr_stmt pos:start="33:9" pos:end="33:24"><expr pos:start="33:9" pos:end="33:23"><call pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:14">insque</name><argument_list pos:start="33:15" pos:end="33:23">(<argument pos:start="33:16" pos:end="33:17"><expr pos:start="33:16" pos:end="33:17"><name pos:start="33:16" pos:end="33:17">so</name></expr></argument>,<argument pos:start="33:19" pos:end="33:22"><expr pos:start="33:19" pos:end="33:22"><operator pos:start="33:19" pos:end="33:19">&amp;</operator><name pos:start="33:20" pos:end="33:22">udb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="37:9" pos:end="37:34"><expr pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:12">addr</name><operator pos:start="37:13" pos:end="37:13">.</operator><name pos:start="37:14" pos:end="37:23">sin_family</name></name> <operator pos:start="37:25" pos:end="37:25">=</operator> <name pos:start="37:27" pos:end="37:33">AF_INET</name></expr>;</expr_stmt>

	<expr_stmt pos:start="39:9" pos:end="39:42"><expr pos:start="39:9" pos:end="39:41"><name pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:12">addr</name><operator pos:start="39:13" pos:end="39:13">.</operator><name pos:start="39:14" pos:end="39:21">sin_addr</name><operator pos:start="39:22" pos:end="39:22">.</operator><name pos:start="39:23" pos:end="39:28">s_addr</name></name> <operator pos:start="39:30" pos:end="39:30">=</operator> <name pos:start="39:32" pos:end="39:41">INADDR_ANY</name></expr>;</expr_stmt>

	<expr_stmt pos:start="41:9" pos:end="41:29"><expr pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:12">addr</name><operator pos:start="41:13" pos:end="41:13">.</operator><name pos:start="41:14" pos:end="41:21">sin_port</name></name> <operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:28">port</name></expr>;</expr_stmt>



	<if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:62">(<expr pos:start="45:13" pos:end="45:61"><call pos:start="45:13" pos:end="45:57"><name pos:start="45:13" pos:end="45:16">bind</name><argument_list pos:start="45:17" pos:end="45:57">(<argument pos:start="45:18" pos:end="45:22"><expr pos:start="45:18" pos:end="45:22"><name pos:start="45:18" pos:end="45:22"><name pos:start="45:18" pos:end="45:19">so</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:22">s</name></name></expr></argument>,<argument pos:start="45:24" pos:end="45:47"><expr pos:start="45:24" pos:end="45:47"><operator pos:start="45:24" pos:end="45:24">(</operator>struct <name pos:start="45:32" pos:end="45:39">sockaddr</name> <operator pos:start="45:41" pos:end="45:41">*</operator><operator pos:start="45:42" pos:end="45:42">)</operator><operator pos:start="45:43" pos:end="45:43">&amp;</operator><name pos:start="45:44" pos:end="45:47">addr</name></expr></argument>, <argument pos:start="45:50" pos:end="45:56"><expr pos:start="45:50" pos:end="45:56"><name pos:start="45:50" pos:end="45:56">addrlen</name></expr></argument>)</argument_list></call> <operator pos:start="45:59" pos:end="45:59">&lt;</operator> <literal type="number" pos:start="45:61" pos:end="45:61">0</literal></expr>)</condition> <block pos:start="45:64" pos:end="51:9">{<block_content pos:start="47:17" pos:end="49:28">

		<expr_stmt pos:start="47:17" pos:end="47:31"><expr pos:start="47:17" pos:end="47:30"><call pos:start="47:17" pos:end="47:30"><name pos:start="47:17" pos:end="47:26">udp_detach</name><argument_list pos:start="47:27" pos:end="47:30">(<argument pos:start="47:28" pos:end="47:29"><expr pos:start="47:28" pos:end="47:29"><name pos:start="47:28" pos:end="47:29">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="49:17" pos:end="49:28">return <expr pos:start="49:24" pos:end="49:27"><name pos:start="49:24" pos:end="49:27">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="53:9" pos:end="53:75"><expr pos:start="53:9" pos:end="53:74"><call pos:start="53:9" pos:end="53:74"><name pos:start="53:9" pos:end="53:18">setsockopt</name><argument_list pos:start="53:19" pos:end="53:74">(<argument pos:start="53:20" pos:end="53:24"><expr pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:21">so</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:24">s</name></name></expr></argument>,<argument pos:start="53:26" pos:end="53:35"><expr pos:start="53:26" pos:end="53:35"><name pos:start="53:26" pos:end="53:35">SOL_SOCKET</name></expr></argument>,<argument pos:start="53:37" pos:end="53:48"><expr pos:start="53:37" pos:end="53:48"><name pos:start="53:37" pos:end="53:48">SO_REUSEADDR</name></expr></argument>,<argument pos:start="53:50" pos:end="53:61"><expr pos:start="53:50" pos:end="53:61"><operator pos:start="53:50" pos:end="53:50">(</operator><name pos:start="53:51" pos:end="53:54">char</name> <operator pos:start="53:56" pos:end="53:56">*</operator><operator pos:start="53:57" pos:end="53:57">)</operator><operator pos:start="53:58" pos:end="53:58">&amp;</operator><name pos:start="53:59" pos:end="53:61">opt</name></expr></argument>,<argument pos:start="53:63" pos:end="53:73"><expr pos:start="53:63" pos:end="53:73"><sizeof pos:start="53:63" pos:end="53:73">sizeof<argument_list pos:start="53:69" pos:end="53:73">(<argument pos:start="53:70" pos:end="53:72"><expr pos:start="53:70" pos:end="53:72"><name pos:start="53:70" pos:end="53:72">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:start="55:1" pos:end="55:78">/*	setsockopt(so-&gt;s,SOL_SOCKET,SO_OOBINLINE,(char *)&amp;opt,sizeof(int)); */</comment>



	<expr_stmt pos:start="59:9" pos:end="59:61"><expr pos:start="59:9" pos:end="59:60"><call pos:start="59:9" pos:end="59:60"><name pos:start="59:9" pos:end="59:19">getsockname</name><argument_list pos:start="59:20" pos:end="59:60">(<argument pos:start="59:21" pos:end="59:25"><expr pos:start="59:21" pos:end="59:25"><name pos:start="59:21" pos:end="59:25"><name pos:start="59:21" pos:end="59:22">so</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:25">s</name></name></expr></argument>,<argument pos:start="59:27" pos:end="59:50"><expr pos:start="59:27" pos:end="59:50"><operator pos:start="59:27" pos:end="59:27">(</operator>struct <name pos:start="59:35" pos:end="59:42">sockaddr</name> <operator pos:start="59:44" pos:end="59:44">*</operator><operator pos:start="59:45" pos:end="59:45">)</operator><operator pos:start="59:46" pos:end="59:46">&amp;</operator><name pos:start="59:47" pos:end="59:50">addr</name></expr></argument>,<argument pos:start="59:52" pos:end="59:59"><expr pos:start="59:52" pos:end="59:59"><operator pos:start="59:52" pos:end="59:52">&amp;</operator><name pos:start="59:53" pos:end="59:59">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="61:9" pos:end="61:37"><expr pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:10">so</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:20">so_fport</name></name> <operator pos:start="61:22" pos:end="61:22">=</operator> <name pos:start="61:24" pos:end="61:36"><name pos:start="61:24" pos:end="61:27">addr</name><operator pos:start="61:28" pos:end="61:28">.</operator><name pos:start="61:29" pos:end="61:36">sin_port</name></name></expr>;</expr_stmt>

	<if_stmt pos:start="63:9" pos:end="69:40"><if pos:start="63:9" pos:end="65:37">if <condition pos:start="63:12" pos:end="63:86">(<expr pos:start="63:13" pos:end="63:85"><name pos:start="63:13" pos:end="63:32"><name pos:start="63:13" pos:end="63:16">addr</name><operator pos:start="63:17" pos:end="63:17">.</operator><name pos:start="63:18" pos:end="63:25">sin_addr</name><operator pos:start="63:26" pos:end="63:26">.</operator><name pos:start="63:27" pos:end="63:32">s_addr</name></name> <operator pos:start="63:34" pos:end="63:35">==</operator> <literal type="number" pos:start="63:37" pos:end="63:37">0</literal> <operator pos:start="63:39" pos:end="63:40">||</operator> <name pos:start="63:42" pos:end="63:61"><name pos:start="63:42" pos:end="63:45">addr</name><operator pos:start="63:46" pos:end="63:46">.</operator><name pos:start="63:47" pos:end="63:54">sin_addr</name><operator pos:start="63:55" pos:end="63:55">.</operator><name pos:start="63:56" pos:end="63:61">s_addr</name></name> <operator pos:start="63:63" pos:end="63:64">==</operator> <name pos:start="63:66" pos:end="63:85"><name pos:start="63:66" pos:end="63:78">loopback_addr</name><operator pos:start="63:79" pos:end="63:79">.</operator><name pos:start="63:80" pos:end="63:85">s_addr</name></name></expr>)</condition><block type="pseudo" pos:start="65:12" pos:end="65:37"><block_content pos:start="65:12" pos:end="65:37">

	   <expr_stmt pos:start="65:12" pos:end="65:37"><expr pos:start="65:12" pos:end="65:36"><name pos:start="65:12" pos:end="65:23"><name pos:start="65:12" pos:end="65:13">so</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:23">so_faddr</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <name pos:start="65:27" pos:end="65:36">alias_addr</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="67:9" pos:end="69:40">else<block type="pseudo" pos:start="69:12" pos:end="69:40"><block_content pos:start="69:12" pos:end="69:40">

	   <expr_stmt pos:start="69:12" pos:end="69:40"><expr pos:start="69:12" pos:end="69:39"><name pos:start="69:12" pos:end="69:23"><name pos:start="69:12" pos:end="69:13">so</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:23">so_faddr</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <name pos:start="69:27" pos:end="69:39"><name pos:start="69:27" pos:end="69:30">addr</name><operator pos:start="69:31" pos:end="69:31">.</operator><name pos:start="69:32" pos:end="69:39">sin_addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<expr_stmt pos:start="73:9" pos:end="73:29"><expr pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:10">so</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:20">so_lport</name></name> <operator pos:start="73:22" pos:end="73:22">=</operator> <name pos:start="73:24" pos:end="73:28">lport</name></expr>;</expr_stmt>

	<expr_stmt pos:start="75:9" pos:end="75:36"><expr pos:start="75:9" pos:end="75:35"><name pos:start="75:9" pos:end="75:27"><name pos:start="75:9" pos:end="75:10">so</name><operator pos:start="75:11" pos:end="75:12">-&gt;</operator><name pos:start="75:13" pos:end="75:20">so_laddr</name><operator pos:start="75:21" pos:end="75:21">.</operator><name pos:start="75:22" pos:end="75:27">s_addr</name></name> <operator pos:start="75:29" pos:end="75:29">=</operator> <name pos:start="75:31" pos:end="75:35">laddr</name></expr>;</expr_stmt>

	<if_stmt pos:start="77:9" pos:end="79:29"><if pos:start="77:9" pos:end="79:29">if <condition pos:start="77:12" pos:end="77:36">(<expr pos:start="77:13" pos:end="77:35"><name pos:start="77:13" pos:end="77:17">flags</name> <operator pos:start="77:19" pos:end="77:20">!=</operator> <name pos:start="77:22" pos:end="77:35">SS_FACCEPTONCE</name></expr>)</condition><block type="pseudo" pos:start="79:12" pos:end="79:29"><block_content pos:start="79:12" pos:end="79:29">

	   <expr_stmt pos:start="79:12" pos:end="79:29"><expr pos:start="79:12" pos:end="79:28"><name pos:start="79:12" pos:end="79:24"><name pos:start="79:12" pos:end="79:13">so</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:24">so_expire</name></name> <operator pos:start="79:26" pos:end="79:26">=</operator> <literal type="number" pos:start="79:28" pos:end="79:28">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<expr_stmt pos:start="83:9" pos:end="83:39"><expr pos:start="83:9" pos:end="83:38"><name pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:10">so</name><operator pos:start="83:11" pos:end="83:12">-&gt;</operator><name pos:start="83:13" pos:end="83:20">so_state</name></name> <operator pos:start="83:22" pos:end="83:22">=</operator> <name pos:start="83:24" pos:end="83:38">SS_ISFCONNECTED</name></expr>;</expr_stmt>



	<return pos:start="87:9" pos:end="87:18">return <expr pos:start="87:16" pos:end="87:17"><name pos:start="87:16" pos:end="87:17">so</name></expr>;</return>

</block_content>}</block>
</unit>
