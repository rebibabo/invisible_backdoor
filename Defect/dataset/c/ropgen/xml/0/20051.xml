<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20051.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:14">redir_open</name><parameter_list pos:start="1:15" pos:end="1:58">(<parameter pos:start="1:16" pos:end="1:39"><decl pos:start="1:16" pos:end="1:39"><type pos:start="1:16" pos:end="1:39"><name pos:start="1:16" pos:end="1:30">AVFormatContext</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier><modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">ic_ptr</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:54">ByteIOContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">f</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:17">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:18"><name pos:start="5:10" pos:end="5:12">buf</name><index pos:start="5:13" pos:end="5:18">[<expr pos:start="5:14" pos:end="5:17"><literal type="number" pos:start="5:14" pos:end="5:17">4096</literal></expr>]</index></name></decl>, <decl pos:start="5:21" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:8"><modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">AVFormatContext</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:23">ic</name> <init pos:start="9:25" pos:end="9:30">= <expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:43">/* parse each URL and try to open it */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:21"><expr pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:5">c</name> <operator pos:start="15:7" pos:end="15:7">=</operator> <call pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:17">url_fgetc</name><argument_list pos:start="15:18" pos:end="15:20">(<argument pos:start="15:19" pos:end="15:19"><expr pos:start="15:19" pos:end="15:19"><name pos:start="15:19" pos:end="15:19">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="17:5" pos:end="63:5">while <condition pos:start="17:11" pos:end="17:24">(<expr pos:start="17:12" pos:end="17:23"><name pos:start="17:12" pos:end="17:12">c</name> <operator pos:start="17:14" pos:end="17:15">!=</operator> <name pos:start="17:17" pos:end="17:23">URL_EOF</name></expr>)</condition> <block pos:start="17:26" pos:end="63:5">{<block_content pos:start="21:9" pos:end="61:18">

        <comment type="block" pos:start="19:9" pos:end="19:25">/* skip spaces */</comment>

        <for pos:start="21:9" pos:end="29:9">for<control pos:start="21:12" pos:end="21:15">(<init pos:start="21:13" pos:end="21:13">;</init><condition pos:start="21:14" pos:end="21:14">;</condition><incr/>)</control> <block pos:start="21:17" pos:end="29:9">{<block_content pos:start="23:13" pos:end="27:29">

            <if_stmt pos:start="23:13" pos:end="25:22"><if pos:start="23:13" pos:end="25:22">if <condition pos:start="23:16" pos:end="23:34">(<expr pos:start="23:17" pos:end="23:33"><operator pos:start="23:17" pos:end="23:17">!</operator><call pos:start="23:18" pos:end="23:33"><name pos:start="23:18" pos:end="23:30">redir_isspace</name><argument_list pos:start="23:31" pos:end="23:33">(<argument pos:start="23:32" pos:end="23:32"><expr pos:start="23:32" pos:end="23:32"><name pos:start="23:32" pos:end="23:32">c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="25:17" pos:end="25:22"><block_content pos:start="25:17" pos:end="25:22">

                <break pos:start="25:17" pos:end="25:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:29"><expr pos:start="27:13" pos:end="27:28"><name pos:start="27:13" pos:end="27:13">c</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:28"><name pos:start="27:17" pos:end="27:25">url_fgetc</name><argument_list pos:start="27:26" pos:end="27:28">(<argument pos:start="27:27" pos:end="27:27"><expr pos:start="27:27" pos:end="27:27"><name pos:start="27:27" pos:end="27:27">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="31:9" pos:end="33:18"><if pos:start="31:9" pos:end="33:18">if <condition pos:start="31:12" pos:end="31:25">(<expr pos:start="31:13" pos:end="31:24"><name pos:start="31:13" pos:end="31:13">c</name> <operator pos:start="31:15" pos:end="31:16">==</operator> <name pos:start="31:18" pos:end="31:24">URL_EOF</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:18"><block_content pos:start="33:13" pos:end="33:18">

            <break pos:start="33:13" pos:end="33:18">break;</break></block_content></block></if></if_stmt>

        <comment type="block" pos:start="35:9" pos:end="35:24">/* record url */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:16"><expr pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:9">q</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <name pos:start="37:13" pos:end="37:15">buf</name></expr>;</expr_stmt>

        <for pos:start="39:9" pos:end="51:9">for<control pos:start="39:12" pos:end="39:15">(<init pos:start="39:13" pos:end="39:13">;</init><condition pos:start="39:14" pos:end="39:14">;</condition><incr/>)</control> <block pos:start="39:17" pos:end="51:9">{<block_content pos:start="41:13" pos:end="49:29">

            <if_stmt pos:start="41:13" pos:end="43:22"><if pos:start="41:13" pos:end="43:22">if <condition pos:start="41:16" pos:end="41:49">(<expr pos:start="41:17" pos:end="41:48"><name pos:start="41:17" pos:end="41:17">c</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <name pos:start="41:22" pos:end="41:28">URL_EOF</name> <operator pos:start="41:30" pos:end="41:31">||</operator> <call pos:start="41:33" pos:end="41:48"><name pos:start="41:33" pos:end="41:45">redir_isspace</name><argument_list pos:start="41:46" pos:end="41:48">(<argument pos:start="41:47" pos:end="41:47"><expr pos:start="41:47" pos:end="41:47"><name pos:start="41:47" pos:end="41:47">c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:22"><block_content pos:start="43:17" pos:end="43:22">

                <break pos:start="43:17" pos:end="43:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="45:13" pos:end="47:25"><if pos:start="45:13" pos:end="47:25">if <condition pos:start="45:16" pos:end="45:44">(<expr pos:start="45:17" pos:end="45:43"><operator pos:start="45:17" pos:end="45:17">(</operator><name pos:start="45:18" pos:end="45:18">q</name> <operator pos:start="45:20" pos:end="45:20">-</operator> <name pos:start="45:22" pos:end="45:24">buf</name><operator pos:start="45:25" pos:end="45:25">)</operator> <operator pos:start="45:27" pos:end="45:27">&lt;</operator> <sizeof pos:start="45:29" pos:end="45:39">sizeof<argument_list pos:start="45:35" pos:end="45:39">(<argument pos:start="45:36" pos:end="45:38"><expr pos:start="45:36" pos:end="45:38"><name pos:start="45:36" pos:end="45:38">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:41" pos:end="45:41">-</operator> <literal type="number" pos:start="45:43" pos:end="45:43">1</literal></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:25"><block_content pos:start="47:17" pos:end="47:25">

                <expr_stmt pos:start="47:17" pos:end="47:25"><expr pos:start="47:17" pos:end="47:24"><operator pos:start="47:17" pos:end="47:17">*</operator><name pos:start="47:18" pos:end="47:18">q</name><operator pos:start="47:19" pos:end="47:20">++</operator> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:24">c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:29"><expr pos:start="49:13" pos:end="49:28"><name pos:start="49:13" pos:end="49:13">c</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <call pos:start="49:17" pos:end="49:28"><name pos:start="49:17" pos:end="49:25">url_fgetc</name><argument_list pos:start="49:26" pos:end="49:28">(<argument pos:start="49:27" pos:end="49:27"><expr pos:start="49:27" pos:end="49:27"><name pos:start="49:27" pos:end="49:27">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="53:9" pos:end="53:18"><expr pos:start="53:9" pos:end="53:17"><operator pos:start="53:9" pos:end="53:9">*</operator><name pos:start="53:10" pos:end="53:10">q</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="char" pos:start="53:14" pos:end="53:17">'\0'</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="55:9" pos:end="55:36">//printf("URL='%s'\n", buf);</comment>

        <comment type="block" pos:start="57:9" pos:end="57:40">/* try to open the media file */</comment>

        <if_stmt pos:start="59:9" pos:end="61:18"><if pos:start="59:9" pos:end="61:18">if <condition pos:start="59:12" pos:end="59:61">(<expr pos:start="59:13" pos:end="59:60"><call pos:start="59:13" pos:end="59:55"><name pos:start="59:13" pos:end="59:30">av_open_input_file</name><argument_list pos:start="59:31" pos:end="59:55">(<argument pos:start="59:32" pos:end="59:34"><expr pos:start="59:32" pos:end="59:34"><operator pos:start="59:32" pos:end="59:32">&amp;</operator><name pos:start="59:33" pos:end="59:34">ic</name></expr></argument>, <argument pos:start="59:37" pos:end="59:39"><expr pos:start="59:37" pos:end="59:39"><name pos:start="59:37" pos:end="59:39">buf</name></expr></argument>, <argument pos:start="59:42" pos:end="59:45"><expr pos:start="59:42" pos:end="59:45"><name pos:start="59:42" pos:end="59:45">NULL</name></expr></argument>, <argument pos:start="59:48" pos:end="59:48"><expr pos:start="59:48" pos:end="59:48"><literal type="number" pos:start="59:48" pos:end="59:48">0</literal></expr></argument>, <argument pos:start="59:51" pos:end="59:54"><expr pos:start="59:51" pos:end="59:54"><name pos:start="59:51" pos:end="59:54">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="59:57" pos:end="59:58">==</operator> <literal type="number" pos:start="59:60" pos:end="59:60">0</literal></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:18"><block_content pos:start="61:13" pos:end="61:18">

            <break pos:start="61:13" pos:end="61:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="65:5" pos:end="65:17"><expr pos:start="65:5" pos:end="65:16"><operator pos:start="65:5" pos:end="65:5">*</operator><name pos:start="65:6" pos:end="65:11">ic_ptr</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:16">ic</name></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="73:17"><if pos:start="67:5" pos:end="69:28">if <condition pos:start="67:8" pos:end="67:12">(<expr pos:start="67:9" pos:end="67:11"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:11">ic</name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:28"><block_content pos:start="69:9" pos:end="69:28">

        <return pos:start="69:9" pos:end="69:28">return <expr pos:start="69:16" pos:end="69:27"><call pos:start="69:16" pos:end="69:27"><name pos:start="69:16" pos:end="69:22">AVERROR</name><argument_list pos:start="69:23" pos:end="69:27">(<argument pos:start="69:24" pos:end="69:26"><expr pos:start="69:24" pos:end="69:26"><name pos:start="69:24" pos:end="69:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

    <else pos:start="71:5" pos:end="73:17">else<block type="pseudo" pos:start="73:9" pos:end="73:17"><block_content pos:start="73:9" pos:end="73:17">

        <return pos:start="73:9" pos:end="73:17">return <expr pos:start="73:16" pos:end="73:16"><literal type="number" pos:start="73:16" pos:end="73:16">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
