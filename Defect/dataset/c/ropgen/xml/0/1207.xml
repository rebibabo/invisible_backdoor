<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1207.c" pos:tabs="8"><function pos:start="1:1" pos:end="377:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:8">main</name><parameter_list pos:start="1:9" pos:end="1:31">(<parameter pos:start="1:10" pos:end="1:17"><decl pos:start="1:10" pos:end="1:17"><type pos:start="1:10" pos:end="1:17"><name pos:start="1:10" pos:end="1:12">int</name></type> <name pos:start="1:14" pos:end="1:17">argc</name></decl></parameter>, <parameter pos:start="1:20" pos:end="1:30"><decl pos:start="1:20" pos:end="1:30"><type pos:start="1:20" pos:end="1:30"><name pos:start="1:20" pos:end="1:23">char</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier><modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:30">argv</name></decl></parameter>)</parameter_list><block pos:start="1:32" pos:end="377:1">{<block_content pos:start="3:5" pos:end="375:13">

    <decl_stmt pos:start="3:5" pos:end="3:60"><decl pos:start="3:5" pos:end="3:22"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:22">in_sample_rate</name></decl>, <decl pos:start="3:25" pos:end="3:39"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:25" pos:end="3:39">out_sample_rate</name></decl>, <decl pos:start="3:42" pos:end="3:43"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:42" pos:end="3:43">ch</name></decl> ,<decl pos:start="3:46" pos:end="3:46"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:46" pos:end="3:46">i</name></decl>, <decl pos:start="3:49" pos:end="3:59"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:49" pos:end="3:59">flush_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:25">in_ch_layout</name></decl>, <decl pos:start="5:28" pos:end="5:40"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:28" pos:end="5:40">out_ch_layout</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:8">enum</name> <name pos:start="7:10" pos:end="7:23">AVSampleFormat</name></name></type> <name pos:start="7:25" pos:end="7:37">in_sample_fmt</name></decl>, <decl pos:start="7:40" pos:end="7:53"><type ref="prev" pos:start="7:5" pos:end="7:23"/><name pos:start="7:40" pos:end="7:53">out_sample_fmt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:33"><name pos:start="9:13" pos:end="9:20">array_in</name><index pos:start="9:21" pos:end="9:33">[<expr pos:start="9:22" pos:end="9:32"><name pos:start="9:22" pos:end="9:28">SAMPLES</name><operator pos:start="9:29" pos:end="9:29">*</operator><literal type="number" pos:start="9:30" pos:end="9:30">8</literal><operator pos:start="9:31" pos:end="9:31">*</operator><literal type="number" pos:start="9:32" pos:end="9:32">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:36"><name pos:start="11:13" pos:end="11:21">array_mid</name><index pos:start="11:22" pos:end="11:36">[<expr pos:start="11:23" pos:end="11:35"><name pos:start="11:23" pos:end="11:29">SAMPLES</name><operator pos:start="11:30" pos:end="11:30">*</operator><literal type="number" pos:start="11:31" pos:end="11:31">8</literal><operator pos:start="11:32" pos:end="11:32">*</operator><literal type="number" pos:start="11:33" pos:end="11:33">8</literal><operator pos:start="11:34" pos:end="11:34">*</operator><literal type="number" pos:start="11:35" pos:end="11:35">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:38"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:38"><name pos:start="13:13" pos:end="13:21">array_out</name><index pos:start="13:22" pos:end="13:38">[<expr pos:start="13:23" pos:end="13:37"><name pos:start="13:23" pos:end="13:29">SAMPLES</name><operator pos:start="13:30" pos:end="13:30">*</operator><literal type="number" pos:start="13:31" pos:end="13:31">8</literal><operator pos:start="13:32" pos:end="13:32">*</operator><literal type="number" pos:start="13:33" pos:end="13:33">8</literal><operator pos:start="13:34" pos:end="13:34">+</operator><literal type="number" pos:start="13:35" pos:end="13:37">100</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:28"><name pos:start="15:14" pos:end="15:16">ain</name><index pos:start="15:17" pos:end="15:28">[<expr pos:start="15:18" pos:end="15:27"><name pos:start="15:18" pos:end="15:27">SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:29"><name pos:start="17:14" pos:end="17:17">aout</name><index pos:start="17:18" pos:end="17:29">[<expr pos:start="17:19" pos:end="17:28"><name pos:start="17:19" pos:end="17:28">SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:30"><decl pos:start="19:5" pos:end="19:29"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:29"><name pos:start="19:14" pos:end="19:17">amid</name><index pos:start="19:18" pos:end="19:29">[<expr pos:start="19:19" pos:end="19:28"><name pos:start="19:19" pos:end="19:28">SWR_CH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">flush_i</name><init pos:start="21:16" pos:end="21:17">=<expr pos:start="21:17" pos:end="21:17"><literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:13"><decl pos:start="23:5" pos:end="23:12"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:12">mode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">num_tests</name> <init pos:start="25:19" pos:end="25:25">= <expr pos:start="25:21" pos:end="25:25"><literal type="number" pos:start="25:21" pos:end="25:25">10000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint32_t</name></type> <name pos:start="27:14" pos:end="27:17">seed</name> <init pos:start="27:19" pos:end="27:21">= <expr pos:start="27:21" pos:end="27:21"><literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:27"><decl pos:start="29:5" pos:end="29:26"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint32_t</name></type> <name pos:start="29:14" pos:end="29:22">rand_seed</name> <init pos:start="29:24" pos:end="29:26">= <expr pos:start="29:26" pos:end="29:26"><literal type="number" pos:start="29:26" pos:end="29:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:151"><decl pos:start="31:5" pos:end="31:150"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:150"><name pos:start="31:9" pos:end="31:23">remaining_tests</name><index pos:start="31:24" pos:end="31:150">[<expr pos:start="31:25" pos:end="31:149"><call pos:start="31:25" pos:end="31:45"><name pos:start="31:25" pos:end="31:38">FF_ARRAY_ELEMS</name><argument_list pos:start="31:39" pos:end="31:45">(<argument pos:start="31:40" pos:end="31:44"><expr pos:start="31:40" pos:end="31:44"><name pos:start="31:40" pos:end="31:44">rates</name></expr></argument>)</argument_list></call> <operator pos:start="31:47" pos:end="31:47">*</operator> <call pos:start="31:49" pos:end="31:71"><name pos:start="31:49" pos:end="31:62">FF_ARRAY_ELEMS</name><argument_list pos:start="31:63" pos:end="31:71">(<argument pos:start="31:64" pos:end="31:70"><expr pos:start="31:64" pos:end="31:70"><name pos:start="31:64" pos:end="31:70">layouts</name></expr></argument>)</argument_list></call> <operator pos:start="31:73" pos:end="31:73">*</operator> <call pos:start="31:75" pos:end="31:97"><name pos:start="31:75" pos:end="31:88">FF_ARRAY_ELEMS</name><argument_list pos:start="31:89" pos:end="31:97">(<argument pos:start="31:90" pos:end="31:96"><expr pos:start="31:90" pos:end="31:96"><name pos:start="31:90" pos:end="31:96">formats</name></expr></argument>)</argument_list></call> <operator pos:start="31:99" pos:end="31:99">*</operator> <call pos:start="31:101" pos:end="31:123"><name pos:start="31:101" pos:end="31:114">FF_ARRAY_ELEMS</name><argument_list pos:start="31:115" pos:end="31:123">(<argument pos:start="31:116" pos:end="31:122"><expr pos:start="31:116" pos:end="31:122"><name pos:start="31:116" pos:end="31:122">layouts</name></expr></argument>)</argument_list></call> <operator pos:start="31:125" pos:end="31:125">*</operator> <call pos:start="31:127" pos:end="31:149"><name pos:start="31:127" pos:end="31:140">FF_ARRAY_ELEMS</name><argument_list pos:start="31:141" pos:end="31:149">(<argument pos:start="31:142" pos:end="31:148"><expr pos:start="31:142" pos:end="31:148"><name pos:start="31:142" pos:end="31:148">formats</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:52"><decl pos:start="33:5" pos:end="33:51"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:17">max_tests</name> <init pos:start="33:19" pos:end="33:51">= <expr pos:start="33:21" pos:end="33:51"><call pos:start="33:21" pos:end="33:51"><name pos:start="33:21" pos:end="33:34">FF_ARRAY_ELEMS</name><argument_list pos:start="33:35" pos:end="33:51">(<argument pos:start="33:36" pos:end="33:50"><expr pos:start="33:36" pos:end="33:50"><name pos:start="33:36" pos:end="33:50">remaining_tests</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:13"><decl pos:start="35:5" pos:end="35:12"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:12">test</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:26"><decl pos:start="37:5" pos:end="37:25"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:21">specific_test</name><init pos:start="37:22" pos:end="37:25">= <expr pos:start="37:24" pos:end="37:25"><operator pos:start="37:24" pos:end="37:24">-</operator><literal type="number" pos:start="37:25" pos:end="37:25">1</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="41:5" pos:end="41:39"><decl pos:start="41:5" pos:end="41:38"><type pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:10">struct</name> <name pos:start="41:12" pos:end="41:21">SwrContext</name></name> <modifier pos:start="41:23" pos:end="41:23">*</modifier></type> <name pos:start="41:25" pos:end="41:32">forw_ctx</name><init pos:start="41:33" pos:end="41:38">= <expr pos:start="41:35" pos:end="41:38"><name pos:start="41:35" pos:end="41:38">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:39"><decl pos:start="43:5" pos:end="43:38"><type pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:10">struct</name> <name pos:start="43:12" pos:end="43:21">SwrContext</name></name> <modifier pos:start="43:23" pos:end="43:23">*</modifier></type><name pos:start="43:24" pos:end="43:32">backw_ctx</name><init pos:start="43:33" pos:end="43:38">= <expr pos:start="43:35" pos:end="43:38"><name pos:start="43:35" pos:end="43:38">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="47:5" pos:end="79:5"><if pos:start="47:5" pos:end="79:5">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:12">argc</name> <operator pos:start="47:14" pos:end="47:14">&gt;</operator> <literal type="number" pos:start="47:16" pos:end="47:16">1</literal></expr>)</condition> <block pos:start="47:19" pos:end="79:5">{<block_content pos:start="49:9" pos:end="77:9">

        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:65">(<expr pos:start="49:13" pos:end="49:64"><operator pos:start="49:13" pos:end="49:13">!</operator><call pos:start="49:14" pos:end="49:34"><name pos:start="49:14" pos:end="49:19">strcmp</name><argument_list pos:start="49:20" pos:end="49:34">(<argument pos:start="49:21" pos:end="49:27"><expr pos:start="49:21" pos:end="49:27"><name pos:start="49:21" pos:end="49:27"><name pos:start="49:21" pos:end="49:24">argv</name><index pos:start="49:25" pos:end="49:27">[<expr pos:start="49:26" pos:end="49:26"><literal type="number" pos:start="49:26" pos:end="49:26">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="49:30" pos:end="49:33"><expr pos:start="49:30" pos:end="49:33"><literal type="string" pos:start="49:30" pos:end="49:33">"-h"</literal></expr></argument>)</argument_list></call> <operator pos:start="49:36" pos:end="49:37">||</operator> <operator pos:start="49:39" pos:end="49:39">!</operator><call pos:start="49:40" pos:end="49:64"><name pos:start="49:40" pos:end="49:45">strcmp</name><argument_list pos:start="49:46" pos:end="49:64">(<argument pos:start="49:47" pos:end="49:53"><expr pos:start="49:47" pos:end="49:53"><name pos:start="49:47" pos:end="49:53"><name pos:start="49:47" pos:end="49:50">argv</name><index pos:start="49:51" pos:end="49:53">[<expr pos:start="49:52" pos:end="49:52"><literal type="number" pos:start="49:52" pos:end="49:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="49:56" pos:end="49:63"><expr pos:start="49:56" pos:end="49:63"><literal type="string" pos:start="49:56" pos:end="49:63">"--help"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:67" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:21">

            <expr_stmt pos:start="51:13" pos:end="53:69"><expr pos:start="51:13" pos:end="53:68"><call pos:start="51:13" pos:end="53:68"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="53:68">(<argument pos:start="51:20" pos:end="51:23"><expr pos:start="51:20" pos:end="51:23"><name pos:start="51:20" pos:end="51:23">NULL</name></expr></argument>, <argument pos:start="51:26" pos:end="51:36"><expr pos:start="51:26" pos:end="51:36"><name pos:start="51:26" pos:end="51:36">AV_LOG_INFO</name></expr></argument>, <argument pos:start="51:39" pos:end="53:56"><expr pos:start="51:39" pos:end="53:56"><literal type="string" pos:start="51:39" pos:end="51:89">"Usage: swresample-test [&lt;num_tests&gt;[ &lt;test&gt;]]  \n"</literal>

                   <literal type="string" pos:start="53:20" pos:end="53:56">"num_tests           Default is %d\n"</literal></expr></argument>, <argument pos:start="53:59" pos:end="53:67"><expr pos:start="53:59" pos:end="53:67"><name pos:start="53:59" pos:end="53:67">num_tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:21">return <expr pos:start="55:20" pos:end="55:20"><literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:45"><expr pos:start="59:9" pos:end="59:44"><name pos:start="59:9" pos:end="59:17">num_tests</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="59:44"><name pos:start="59:21" pos:end="59:26">strtol</name><argument_list pos:start="59:27" pos:end="59:44">(<argument pos:start="59:28" pos:end="59:34"><expr pos:start="59:28" pos:end="59:34"><name pos:start="59:28" pos:end="59:34"><name pos:start="59:28" pos:end="59:31">argv</name><index pos:start="59:32" pos:end="59:34">[<expr pos:start="59:33" pos:end="59:33"><literal type="number" pos:start="59:33" pos:end="59:33">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:37" pos:end="59:40"><expr pos:start="59:37" pos:end="59:40"><name pos:start="59:37" pos:end="59:40">NULL</name></expr></argument>, <argument pos:start="59:43" pos:end="59:43"><expr pos:start="59:43" pos:end="59:43"><literal type="number" pos:start="59:43" pos:end="59:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if<condition pos:start="61:11" pos:end="61:25">(<expr pos:start="61:12" pos:end="61:24"><name pos:start="61:12" pos:end="61:20">num_tests</name> <operator pos:start="61:22" pos:end="61:22">&lt;</operator> <literal type="number" pos:start="61:24" pos:end="61:24">0</literal></expr>)</condition> <block pos:start="61:27" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:32">

            <expr_stmt pos:start="63:13" pos:end="63:35"><expr pos:start="63:13" pos:end="63:34"><name pos:start="63:13" pos:end="63:21">num_tests</name> <operator pos:start="63:23" pos:end="63:23">=</operator> <operator pos:start="63:25" pos:end="63:25">-</operator><name pos:start="63:26" pos:end="63:34">num_tests</name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:32"><expr pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:21">rand_seed</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <call pos:start="65:25" pos:end="65:31"><name pos:start="65:25" pos:end="65:28">time</name><argument_list pos:start="65:29" pos:end="65:31">(<argument pos:start="65:30" pos:end="65:30"><expr pos:start="65:30" pos:end="65:30"><literal type="number" pos:start="65:30" pos:end="65:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="69:9" pos:end="71:34"><if pos:start="69:9" pos:end="71:34">if<condition pos:start="69:11" pos:end="69:48">(<expr pos:start="69:12" pos:end="69:47"><name pos:start="69:12" pos:end="69:20">num_tests</name><operator pos:start="69:21" pos:end="69:22">&lt;=</operator> <literal type="number" pos:start="69:24" pos:end="69:24">0</literal> <operator pos:start="69:26" pos:end="69:27">||</operator> <name pos:start="69:29" pos:end="69:37">num_tests</name><operator pos:start="69:38" pos:end="69:38">&gt;</operator><name pos:start="69:39" pos:end="69:47">max_tests</name></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:34"><block_content pos:start="71:13" pos:end="71:34">

            <expr_stmt pos:start="71:13" pos:end="71:34"><expr pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:21">num_tests</name> <operator pos:start="71:23" pos:end="71:23">=</operator> <name pos:start="71:25" pos:end="71:33">max_tests</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if<condition pos:start="73:11" pos:end="73:20">(<expr pos:start="73:12" pos:end="73:19"><name pos:start="73:12" pos:end="73:15">argc</name> <operator pos:start="73:17" pos:end="73:17">&gt;</operator> <literal type="number" pos:start="73:19" pos:end="73:19">2</literal></expr>)</condition> <block pos:start="73:22" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:53">

            <expr_stmt pos:start="75:13" pos:end="75:53"><expr pos:start="75:13" pos:end="75:52"><name pos:start="75:13" pos:end="75:25">specific_test</name> <operator pos:start="75:27" pos:end="75:27">=</operator> <call pos:start="75:29" pos:end="75:52"><name pos:start="75:29" pos:end="75:34">strtol</name><argument_list pos:start="75:35" pos:end="75:52">(<argument pos:start="75:36" pos:end="75:42"><expr pos:start="75:36" pos:end="75:42"><name pos:start="75:36" pos:end="75:42"><name pos:start="75:36" pos:end="75:39">argv</name><index pos:start="75:40" pos:end="75:42">[<expr pos:start="75:41" pos:end="75:41"><literal type="number" pos:start="75:41" pos:end="75:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="75:45" pos:end="75:48"><expr pos:start="75:45" pos:end="75:48"><name pos:start="75:45" pos:end="75:48">NULL</name></expr></argument>, <argument pos:start="75:51" pos:end="75:51"><expr pos:start="75:51" pos:end="75:51"><literal type="number" pos:start="75:51" pos:end="75:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="83:5" pos:end="85:31">for<control pos:start="83:8" pos:end="83:30">(<init pos:start="83:9" pos:end="83:12"><expr pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:9">i</name><operator pos:start="83:10" pos:end="83:10">=</operator><literal type="number" pos:start="83:11" pos:end="83:11">0</literal></expr>;</init> <condition pos:start="83:14" pos:end="83:25"><expr pos:start="83:14" pos:end="83:24"><name pos:start="83:14" pos:end="83:14">i</name><operator pos:start="83:15" pos:end="83:15">&lt;</operator><name pos:start="83:16" pos:end="83:24">max_tests</name></expr>;</condition> <incr pos:start="83:27" pos:end="83:29"><expr pos:start="83:27" pos:end="83:29"><name pos:start="83:27" pos:end="83:27">i</name><operator pos:start="83:28" pos:end="83:29">++</operator></expr></incr>)</control><block type="pseudo" pos:start="85:9" pos:end="85:31"><block_content pos:start="85:9" pos:end="85:31">

        <expr_stmt pos:start="85:9" pos:end="85:31"><expr pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:23">remaining_tests</name><index pos:start="85:24" pos:end="85:26">[<expr pos:start="85:25" pos:end="85:25"><name pos:start="85:25" pos:end="85:25">i</name></expr>]</index></name> <operator pos:start="85:28" pos:end="85:28">=</operator> <name pos:start="85:30" pos:end="85:30">i</name></expr>;</expr_stmt></block_content></block></for>



    <for pos:start="89:5" pos:end="99:5">for<control pos:start="89:8" pos:end="89:39">(<init pos:start="89:9" pos:end="89:15"><expr pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:12">test</name><operator pos:start="89:13" pos:end="89:13">=</operator><literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:31"><expr pos:start="89:17" pos:end="89:30"><name pos:start="89:17" pos:end="89:20">test</name><operator pos:start="89:21" pos:end="89:21">&lt;</operator><name pos:start="89:22" pos:end="89:30">num_tests</name></expr>;</condition> <incr pos:start="89:33" pos:end="89:38"><expr pos:start="89:33" pos:end="89:38"><name pos:start="89:33" pos:end="89:36">test</name><operator pos:start="89:37" pos:end="89:38">++</operator></expr></incr>)</control><block pos:start="89:40" pos:end="99:5">{<block_content pos:start="91:9" pos:end="97:79">

        <decl_stmt pos:start="91:9" pos:end="91:19"><decl pos:start="91:9" pos:end="91:18"><type pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:16">unsigned</name></type> <name pos:start="91:18" pos:end="91:18">r</name></decl>;</decl_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:24"><expr pos:start="93:9" pos:end="93:23"><call pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:17">uint_rand</name><argument_list pos:start="93:18" pos:end="93:23">(<argument pos:start="93:19" pos:end="93:22"><expr pos:start="93:19" pos:end="93:22"><name pos:start="93:19" pos:end="93:22">seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:55"><expr pos:start="95:9" pos:end="95:54"><name pos:start="95:9" pos:end="95:9">r</name> <operator pos:start="95:11" pos:end="95:11">=</operator> <operator pos:start="95:13" pos:end="95:13">(</operator><name pos:start="95:14" pos:end="95:17">seed</name> <operator pos:start="95:19" pos:end="95:19">*</operator> <operator pos:start="95:21" pos:end="95:21">(</operator><name pos:start="95:22" pos:end="95:29">uint64_t</name><operator pos:start="95:30" pos:end="95:30">)</operator><operator pos:start="95:31" pos:end="95:31">(</operator><name pos:start="95:32" pos:end="95:40">max_tests</name> <operator pos:start="95:42" pos:end="95:42">-</operator> <name pos:start="95:44" pos:end="95:47">test</name><operator pos:start="95:48" pos:end="95:48">)</operator><operator pos:start="95:49" pos:end="95:49">)</operator> <operator pos:start="95:51" pos:end="95:52">&gt;&gt;</operator><literal type="number" pos:start="95:53" pos:end="95:54">32</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:79"><expr pos:start="97:9" pos:end="97:78"><call pos:start="97:9" pos:end="97:78"><name pos:start="97:9" pos:end="97:14">FFSWAP</name><argument_list pos:start="97:15" pos:end="97:78">(<argument pos:start="97:16" pos:end="97:18"><expr pos:start="97:16" pos:end="97:18"><name pos:start="97:16" pos:end="97:18">int</name></expr></argument>, <argument pos:start="97:21" pos:end="97:38"><expr pos:start="97:21" pos:end="97:38"><name pos:start="97:21" pos:end="97:38"><name pos:start="97:21" pos:end="97:35">remaining_tests</name><index pos:start="97:36" pos:end="97:38">[<expr pos:start="97:37" pos:end="97:37"><name pos:start="97:37" pos:end="97:37">r</name></expr>]</index></name></expr></argument>, <argument pos:start="97:41" pos:end="97:77"><expr pos:start="97:41" pos:end="97:77"><name pos:start="97:41" pos:end="97:77"><name pos:start="97:41" pos:end="97:55">remaining_tests</name><index pos:start="97:56" pos:end="97:77">[<expr pos:start="97:57" pos:end="97:76"><name pos:start="97:57" pos:end="97:65">max_tests</name> <operator pos:start="97:67" pos:end="97:67">-</operator> <name pos:start="97:69" pos:end="97:72">test</name> <operator pos:start="97:74" pos:end="97:74">-</operator> <literal type="number" pos:start="97:76" pos:end="97:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="101:5" pos:end="101:102"><expr pos:start="101:5" pos:end="101:101"><call pos:start="101:5" pos:end="101:101"><name pos:start="101:5" pos:end="101:9">qsort</name><argument_list pos:start="101:10" pos:end="101:101">(<argument pos:start="101:11" pos:end="101:49"><expr pos:start="101:11" pos:end="101:49"><name pos:start="101:11" pos:end="101:25">remaining_tests</name> <operator pos:start="101:27" pos:end="101:27">+</operator> <name pos:start="101:29" pos:end="101:37">max_tests</name> <operator pos:start="101:39" pos:end="101:39">-</operator> <name pos:start="101:41" pos:end="101:49">num_tests</name></expr></argument>, <argument pos:start="101:52" pos:end="101:60"><expr pos:start="101:52" pos:end="101:60"><name pos:start="101:52" pos:end="101:60">num_tests</name></expr></argument>, <argument pos:start="101:63" pos:end="101:88"><expr pos:start="101:63" pos:end="101:88"><sizeof pos:start="101:63" pos:end="101:88">sizeof<argument_list pos:start="101:69" pos:end="101:88">(<argument pos:start="101:70" pos:end="101:87"><expr pos:start="101:70" pos:end="101:87"><name pos:start="101:70" pos:end="101:87"><name pos:start="101:70" pos:end="101:84">remaining_tests</name><index pos:start="101:85" pos:end="101:87">[<expr pos:start="101:86" pos:end="101:86"><literal type="number" pos:start="101:86" pos:end="101:86">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="101:91" pos:end="101:100"><expr pos:start="101:91" pos:end="101:100"><operator pos:start="101:91" pos:end="101:91">(</operator><name pos:start="101:92" pos:end="101:95">void</name><operator pos:start="101:96" pos:end="101:96">*</operator><operator pos:start="101:97" pos:end="101:97">)</operator><name pos:start="101:98" pos:end="101:100">cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:25"><expr pos:start="103:5" pos:end="103:24"><name pos:start="103:5" pos:end="103:18">in_sample_rate</name><operator pos:start="103:19" pos:end="103:19">=</operator><literal type="number" pos:start="103:20" pos:end="103:24">16000</literal></expr>;</expr_stmt>

    <for pos:start="105:5" pos:end="371:5">for<control pos:start="105:8" pos:end="105:39">(<init pos:start="105:9" pos:end="105:15"><expr pos:start="105:9" pos:end="105:14"><name pos:start="105:9" pos:end="105:12">test</name><operator pos:start="105:13" pos:end="105:13">=</operator><literal type="number" pos:start="105:14" pos:end="105:14">0</literal></expr>;</init> <condition pos:start="105:17" pos:end="105:31"><expr pos:start="105:17" pos:end="105:30"><name pos:start="105:17" pos:end="105:20">test</name><operator pos:start="105:21" pos:end="105:21">&lt;</operator><name pos:start="105:22" pos:end="105:30">num_tests</name></expr>;</condition> <incr pos:start="105:33" pos:end="105:38"><expr pos:start="105:33" pos:end="105:38"><name pos:start="105:33" pos:end="105:36">test</name><operator pos:start="105:37" pos:end="105:38">++</operator></expr></incr>)</control><block pos:start="105:40" pos:end="371:5">{<block_content pos:start="107:9" pos:end="369:30">

        <decl_stmt pos:start="107:9" pos:end="107:36"><decl pos:start="107:9" pos:end="107:35"><type pos:start="107:9" pos:end="107:12"><name pos:start="107:9" pos:end="107:12">char</name></type>  <name pos:start="107:15" pos:end="107:35"><name pos:start="107:15" pos:end="107:30">in_layout_string</name><index pos:start="107:31" pos:end="107:35">[<expr pos:start="107:32" pos:end="107:34"><literal type="number" pos:start="107:32" pos:end="107:34">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="109:9" pos:end="109:36"><decl pos:start="109:9" pos:end="109:35"><type pos:start="109:9" pos:end="109:12"><name pos:start="109:9" pos:end="109:12">char</name></type> <name pos:start="109:14" pos:end="109:35"><name pos:start="109:14" pos:end="109:30">out_layout_string</name><index pos:start="109:31" pos:end="109:35">[<expr pos:start="109:32" pos:end="109:34"><literal type="number" pos:start="109:32" pos:end="109:34">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="111:9" pos:end="111:63"><decl pos:start="111:9" pos:end="111:62"><type pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:16">unsigned</name></type> <name pos:start="111:18" pos:end="111:23">vector</name><init pos:start="111:24" pos:end="111:62">= <expr pos:start="111:26" pos:end="111:62"><name pos:start="111:26" pos:end="111:62"><name pos:start="111:26" pos:end="111:40">remaining_tests</name><index pos:start="111:41" pos:end="111:62">[<expr pos:start="111:42" pos:end="111:61"><name pos:start="111:42" pos:end="111:50">max_tests</name> <operator pos:start="111:52" pos:end="111:52">-</operator> <name pos:start="111:54" pos:end="111:57">test</name> <operator pos:start="111:59" pos:end="111:59">-</operator> <literal type="number" pos:start="111:61" pos:end="111:61">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="113:9" pos:end="113:24"><decl pos:start="113:9" pos:end="113:23"><type pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:11">int</name></type> <name pos:start="113:13" pos:end="113:23">in_ch_count</name></decl>;</decl_stmt>

        <decl_stmt pos:start="115:9" pos:end="115:47"><decl pos:start="115:9" pos:end="115:21"><type pos:start="115:9" pos:end="115:11"><name pos:start="115:9" pos:end="115:11">int</name></type> <name pos:start="115:13" pos:end="115:21">out_count</name></decl>, <decl pos:start="115:24" pos:end="115:32"><type ref="prev" pos:start="115:9" pos:end="115:11"/><name pos:start="115:24" pos:end="115:32">mid_count</name></decl>, <decl pos:start="115:35" pos:end="115:46"><type ref="prev" pos:start="115:9" pos:end="115:11"/><name pos:start="115:35" pos:end="115:46">out_ch_count</name></decl>;</decl_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:68"><expr pos:start="119:9" pos:end="119:67"><name pos:start="119:9" pos:end="119:20">in_ch_layout</name>    <operator pos:start="119:25" pos:end="119:25">=</operator> <name pos:start="119:27" pos:end="119:67"><name pos:start="119:27" pos:end="119:33">layouts</name><index pos:start="119:34" pos:end="119:67">[<expr pos:start="119:35" pos:end="119:66"><name pos:start="119:35" pos:end="119:40">vector</name> <operator pos:start="119:42" pos:end="119:42">%</operator> <call pos:start="119:44" pos:end="119:66"><name pos:start="119:44" pos:end="119:57">FF_ARRAY_ELEMS</name><argument_list pos:start="119:58" pos:end="119:66">(<argument pos:start="119:59" pos:end="119:65"><expr pos:start="119:59" pos:end="119:65"><name pos:start="119:59" pos:end="119:65">layouts</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt> <expr_stmt pos:start="119:70" pos:end="119:103"><expr pos:start="119:70" pos:end="119:102"><name pos:start="119:70" pos:end="119:75">vector</name> <operator pos:start="119:77" pos:end="119:78">/=</operator> <call pos:start="119:80" pos:end="119:102"><name pos:start="119:80" pos:end="119:93">FF_ARRAY_ELEMS</name><argument_list pos:start="119:94" pos:end="119:102">(<argument pos:start="119:95" pos:end="119:101"><expr pos:start="119:95" pos:end="119:101"><name pos:start="119:95" pos:end="119:101">layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:68"><expr pos:start="121:9" pos:end="121:67"><name pos:start="121:9" pos:end="121:21">out_ch_layout</name>   <operator pos:start="121:25" pos:end="121:25">=</operator> <name pos:start="121:27" pos:end="121:67"><name pos:start="121:27" pos:end="121:33">layouts</name><index pos:start="121:34" pos:end="121:67">[<expr pos:start="121:35" pos:end="121:66"><name pos:start="121:35" pos:end="121:40">vector</name> <operator pos:start="121:42" pos:end="121:42">%</operator> <call pos:start="121:44" pos:end="121:66"><name pos:start="121:44" pos:end="121:57">FF_ARRAY_ELEMS</name><argument_list pos:start="121:58" pos:end="121:66">(<argument pos:start="121:59" pos:end="121:65"><expr pos:start="121:59" pos:end="121:65"><name pos:start="121:59" pos:end="121:65">layouts</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt> <expr_stmt pos:start="121:70" pos:end="121:103"><expr pos:start="121:70" pos:end="121:102"><name pos:start="121:70" pos:end="121:75">vector</name> <operator pos:start="121:77" pos:end="121:78">/=</operator> <call pos:start="121:80" pos:end="121:102"><name pos:start="121:80" pos:end="121:93">FF_ARRAY_ELEMS</name><argument_list pos:start="121:94" pos:end="121:102">(<argument pos:start="121:95" pos:end="121:101"><expr pos:start="121:95" pos:end="121:101"><name pos:start="121:95" pos:end="121:101">layouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:68"><expr pos:start="123:9" pos:end="123:67"><name pos:start="123:9" pos:end="123:21">in_sample_fmt</name>   <operator pos:start="123:25" pos:end="123:25">=</operator> <name pos:start="123:27" pos:end="123:67"><name pos:start="123:27" pos:end="123:33">formats</name><index pos:start="123:34" pos:end="123:67">[<expr pos:start="123:35" pos:end="123:66"><name pos:start="123:35" pos:end="123:40">vector</name> <operator pos:start="123:42" pos:end="123:42">%</operator> <call pos:start="123:44" pos:end="123:66"><name pos:start="123:44" pos:end="123:57">FF_ARRAY_ELEMS</name><argument_list pos:start="123:58" pos:end="123:66">(<argument pos:start="123:59" pos:end="123:65"><expr pos:start="123:59" pos:end="123:65"><name pos:start="123:59" pos:end="123:65">formats</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt> <expr_stmt pos:start="123:70" pos:end="123:103"><expr pos:start="123:70" pos:end="123:102"><name pos:start="123:70" pos:end="123:75">vector</name> <operator pos:start="123:77" pos:end="123:78">/=</operator> <call pos:start="123:80" pos:end="123:102"><name pos:start="123:80" pos:end="123:93">FF_ARRAY_ELEMS</name><argument_list pos:start="123:94" pos:end="123:102">(<argument pos:start="123:95" pos:end="123:101"><expr pos:start="123:95" pos:end="123:101"><name pos:start="123:95" pos:end="123:101">formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:68"><expr pos:start="125:9" pos:end="125:67"><name pos:start="125:9" pos:end="125:22">out_sample_fmt</name>  <operator pos:start="125:25" pos:end="125:25">=</operator> <name pos:start="125:27" pos:end="125:67"><name pos:start="125:27" pos:end="125:33">formats</name><index pos:start="125:34" pos:end="125:67">[<expr pos:start="125:35" pos:end="125:66"><name pos:start="125:35" pos:end="125:40">vector</name> <operator pos:start="125:42" pos:end="125:42">%</operator> <call pos:start="125:44" pos:end="125:66"><name pos:start="125:44" pos:end="125:57">FF_ARRAY_ELEMS</name><argument_list pos:start="125:58" pos:end="125:66">(<argument pos:start="125:59" pos:end="125:65"><expr pos:start="125:59" pos:end="125:65"><name pos:start="125:59" pos:end="125:65">formats</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt> <expr_stmt pos:start="125:70" pos:end="125:103"><expr pos:start="125:70" pos:end="125:102"><name pos:start="125:70" pos:end="125:75">vector</name> <operator pos:start="125:77" pos:end="125:78">/=</operator> <call pos:start="125:80" pos:end="125:102"><name pos:start="125:80" pos:end="125:93">FF_ARRAY_ELEMS</name><argument_list pos:start="125:94" pos:end="125:102">(<argument pos:start="125:95" pos:end="125:101"><expr pos:start="125:95" pos:end="125:101"><name pos:start="125:95" pos:end="125:101">formats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:68"><expr pos:start="127:9" pos:end="127:67"><name pos:start="127:9" pos:end="127:23">out_sample_rate</name> <operator pos:start="127:25" pos:end="127:25">=</operator> <name pos:start="127:27" pos:end="127:67"><name pos:start="127:27" pos:end="127:31">rates</name>  <index pos:start="127:34" pos:end="127:67">[<expr pos:start="127:35" pos:end="127:66"><name pos:start="127:35" pos:end="127:40">vector</name> <operator pos:start="127:42" pos:end="127:42">%</operator> <call pos:start="127:44" pos:end="127:66"><name pos:start="127:44" pos:end="127:57">FF_ARRAY_ELEMS</name><argument_list pos:start="127:58" pos:end="127:66">(<argument pos:start="127:59" pos:end="127:63"><expr pos:start="127:59" pos:end="127:63"><name pos:start="127:59" pos:end="127:63">rates</name></expr></argument>  )</argument_list></call></expr>]</index></name></expr>;</expr_stmt> <expr_stmt pos:start="127:70" pos:end="127:101"><expr pos:start="127:70" pos:end="127:100"><name pos:start="127:70" pos:end="127:75">vector</name> <operator pos:start="127:77" pos:end="127:78">/=</operator> <call pos:start="127:80" pos:end="127:100"><name pos:start="127:80" pos:end="127:93">FF_ARRAY_ELEMS</name><argument_list pos:start="127:94" pos:end="127:100">(<argument pos:start="127:95" pos:end="127:99"><expr pos:start="127:95" pos:end="127:99"><name pos:start="127:95" pos:end="127:99">rates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:28"><expr pos:start="129:9" pos:end="129:27"><call pos:start="129:9" pos:end="129:27"><name pos:start="129:9" pos:end="129:18">av_assert0</name><argument_list pos:start="129:19" pos:end="129:27">(<argument pos:start="129:20" pos:end="129:26"><expr pos:start="129:20" pos:end="129:26"><operator pos:start="129:20" pos:end="129:20">!</operator><name pos:start="129:21" pos:end="129:26">vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="133:9" pos:end="139:9"><if pos:start="133:9" pos:end="139:9">if<condition pos:start="133:11" pos:end="133:30">(<expr pos:start="133:12" pos:end="133:29"><name pos:start="133:12" pos:end="133:24">specific_test</name> <operator pos:start="133:26" pos:end="133:27">==</operator> <literal type="number" pos:start="133:29" pos:end="133:29">0</literal></expr>)</condition><block pos:start="133:31" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:25">

            <if_stmt pos:start="135:13" pos:end="137:25"><if pos:start="135:13" pos:end="137:25">if<condition pos:start="135:15" pos:end="135:82">(<expr pos:start="135:16" pos:end="135:81"><name pos:start="135:16" pos:end="135:30">out_sample_rate</name> <operator pos:start="135:32" pos:end="135:33">!=</operator> <name pos:start="135:35" pos:end="135:48">in_sample_rate</name> <operator pos:start="135:50" pos:end="135:51">||</operator> <name pos:start="135:53" pos:end="135:64">in_ch_layout</name> <operator pos:start="135:66" pos:end="135:67">!=</operator> <name pos:start="135:69" pos:end="135:81">out_ch_layout</name></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="137:25"><block_content pos:start="137:17" pos:end="137:25">

                <continue pos:start="137:17" pos:end="137:25">continue;</continue></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:69"><expr pos:start="143:9" pos:end="143:68"><name pos:start="143:9" pos:end="143:19">in_ch_count</name><operator pos:start="143:20" pos:end="143:20">=</operator> <call pos:start="143:22" pos:end="143:68"><name pos:start="143:22" pos:end="143:54">av_get_channel_layout_nb_channels</name><argument_list pos:start="143:55" pos:end="143:68">(<argument pos:start="143:56" pos:end="143:67"><expr pos:start="143:56" pos:end="143:67"><name pos:start="143:56" pos:end="143:67">in_ch_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:71"><expr pos:start="145:9" pos:end="145:70"><name pos:start="145:9" pos:end="145:20">out_ch_count</name><operator pos:start="145:21" pos:end="145:21">=</operator> <call pos:start="145:23" pos:end="145:70"><name pos:start="145:23" pos:end="145:55">av_get_channel_layout_nb_channels</name><argument_list pos:start="145:56" pos:end="145:70">(<argument pos:start="145:57" pos:end="145:69"><expr pos:start="145:57" pos:end="145:69"><name pos:start="145:57" pos:end="145:69">out_ch_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:112"><expr pos:start="147:9" pos:end="147:111"><call pos:start="147:9" pos:end="147:111"><name pos:start="147:9" pos:end="147:36">av_get_channel_layout_string</name><argument_list pos:start="147:37" pos:end="147:111">( <argument pos:start="147:39" pos:end="147:54"><expr pos:start="147:39" pos:end="147:54"><name pos:start="147:39" pos:end="147:54">in_layout_string</name></expr></argument>, <argument pos:start="147:57" pos:end="147:81"><expr pos:start="147:57" pos:end="147:81"><sizeof pos:start="147:57" pos:end="147:81">sizeof<argument_list pos:start="147:63" pos:end="147:81">( <argument pos:start="147:65" pos:end="147:80"><expr pos:start="147:65" pos:end="147:80"><name pos:start="147:65" pos:end="147:80">in_layout_string</name></expr></argument>)</argument_list></sizeof></expr></argument>,  <argument pos:start="147:85" pos:end="147:95"><expr pos:start="147:85" pos:end="147:95"><name pos:start="147:85" pos:end="147:95">in_ch_count</name></expr></argument>,  <argument pos:start="147:99" pos:end="147:110"><expr pos:start="147:99" pos:end="147:110"><name pos:start="147:99" pos:end="147:110">in_ch_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:112"><expr pos:start="149:9" pos:end="149:111"><call pos:start="149:9" pos:end="149:111"><name pos:start="149:9" pos:end="149:36">av_get_channel_layout_string</name><argument_list pos:start="149:37" pos:end="149:111">(<argument pos:start="149:38" pos:end="149:54"><expr pos:start="149:38" pos:end="149:54"><name pos:start="149:38" pos:end="149:54">out_layout_string</name></expr></argument>, <argument pos:start="149:57" pos:end="149:81"><expr pos:start="149:57" pos:end="149:81"><sizeof pos:start="149:57" pos:end="149:81">sizeof<argument_list pos:start="149:63" pos:end="149:81">(<argument pos:start="149:64" pos:end="149:80"><expr pos:start="149:64" pos:end="149:80"><name pos:start="149:64" pos:end="149:80">out_layout_string</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="149:84" pos:end="149:95"><expr pos:start="149:84" pos:end="149:95"><name pos:start="149:84" pos:end="149:95">out_ch_count</name></expr></argument>, <argument pos:start="149:98" pos:end="149:110"><expr pos:start="149:98" pos:end="149:110"><name pos:start="149:98" pos:end="149:110">out_ch_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="157:95"><expr pos:start="151:9" pos:end="157:94"><call pos:start="151:9" pos:end="157:94"><name pos:start="151:9" pos:end="151:15">fprintf</name><argument_list pos:start="151:16" pos:end="157:94">(<argument pos:start="151:17" pos:end="151:22"><expr pos:start="151:17" pos:end="151:22"><name pos:start="151:17" pos:end="151:22">stderr</name></expr></argument>, <argument pos:start="151:25" pos:end="151:67"><expr pos:start="151:25" pos:end="151:67"><literal type="string" pos:start="151:25" pos:end="151:67">"TEST: %s-&gt;%s, rate:%5d-&gt;%5d, fmt:%s-&gt;%s\n"</literal></expr></argument>,

                <argument pos:start="153:17" pos:end="153:32"><expr pos:start="153:17" pos:end="153:32"><name pos:start="153:17" pos:end="153:32">in_layout_string</name></expr></argument>, <argument pos:start="153:35" pos:end="153:51"><expr pos:start="153:35" pos:end="153:51"><name pos:start="153:35" pos:end="153:51">out_layout_string</name></expr></argument>,

                <argument pos:start="155:17" pos:end="155:30"><expr pos:start="155:17" pos:end="155:30"><name pos:start="155:17" pos:end="155:30">in_sample_rate</name></expr></argument>, <argument pos:start="155:33" pos:end="155:47"><expr pos:start="155:33" pos:end="155:47"><name pos:start="155:33" pos:end="155:47">out_sample_rate</name></expr></argument>,

                <argument pos:start="157:17" pos:end="157:53"><expr pos:start="157:17" pos:end="157:53"><call pos:start="157:17" pos:end="157:53"><name pos:start="157:17" pos:end="157:38">av_get_sample_fmt_name</name><argument_list pos:start="157:39" pos:end="157:53">(<argument pos:start="157:40" pos:end="157:52"><expr pos:start="157:40" pos:end="157:52"><name pos:start="157:40" pos:end="157:52">in_sample_fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="157:56" pos:end="157:93"><expr pos:start="157:56" pos:end="157:93"><call pos:start="157:56" pos:end="157:93"><name pos:start="157:56" pos:end="157:77">av_get_sample_fmt_name</name><argument_list pos:start="157:78" pos:end="157:93">(<argument pos:start="157:79" pos:end="157:92"><expr pos:start="157:79" pos:end="157:92"><name pos:start="157:79" pos:end="157:92">out_sample_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="163:46"><expr pos:start="159:9" pos:end="163:45"><name pos:start="159:9" pos:end="159:16">forw_ctx</name>  <operator pos:start="159:19" pos:end="159:19">=</operator> <call pos:start="159:21" pos:end="163:45"><name pos:start="159:21" pos:end="159:38">swr_alloc_set_opts</name><argument_list pos:start="159:39" pos:end="163:45">(<argument pos:start="159:40" pos:end="159:47"><expr pos:start="159:40" pos:end="159:47"><name pos:start="159:40" pos:end="159:47">forw_ctx</name></expr></argument>, <argument pos:start="159:50" pos:end="159:62"><expr pos:start="159:50" pos:end="159:62"><name pos:start="159:50" pos:end="159:62">out_ch_layout</name></expr></argument>, <argument pos:start="159:65" pos:end="159:78"><expr pos:start="159:65" pos:end="159:78"><name pos:start="159:65" pos:end="159:78">out_sample_fmt</name></expr></argument>,  <argument pos:start="159:82" pos:end="159:96"><expr pos:start="159:82" pos:end="159:96"><name pos:start="159:82" pos:end="159:96">out_sample_rate</name></expr></argument>,

                                                    <argument pos:start="161:53" pos:end="161:64"><expr pos:start="161:53" pos:end="161:64"><name pos:start="161:53" pos:end="161:64">in_ch_layout</name></expr></argument>,  <argument pos:start="161:68" pos:end="161:80"><expr pos:start="161:68" pos:end="161:80"><name pos:start="161:68" pos:end="161:80">in_sample_fmt</name></expr></argument>,  <argument pos:start="161:84" pos:end="161:97"><expr pos:start="161:84" pos:end="161:97"><name pos:start="161:84" pos:end="161:97">in_sample_rate</name></expr></argument>,

                                        <argument pos:start="163:41" pos:end="163:41"><expr pos:start="163:41" pos:end="163:41"><literal type="number" pos:start="163:41" pos:end="163:41">0</literal></expr></argument>, <argument pos:start="163:44" pos:end="163:44"><expr pos:start="163:44" pos:end="163:44"><literal type="number" pos:start="163:44" pos:end="163:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="169:46"><expr pos:start="165:9" pos:end="169:45"><name pos:start="165:9" pos:end="165:17">backw_ctx</name> <operator pos:start="165:19" pos:end="165:19">=</operator> <call pos:start="165:21" pos:end="169:45"><name pos:start="165:21" pos:end="165:38">swr_alloc_set_opts</name><argument_list pos:start="165:39" pos:end="169:45">(<argument pos:start="165:40" pos:end="165:48"><expr pos:start="165:40" pos:end="165:48"><name pos:start="165:40" pos:end="165:48">backw_ctx</name></expr></argument>, <argument pos:start="165:51" pos:end="165:62"><expr pos:start="165:51" pos:end="165:62"><name pos:start="165:51" pos:end="165:62">in_ch_layout</name></expr></argument>,  <argument pos:start="165:66" pos:end="165:78"><expr pos:start="165:66" pos:end="165:78"><name pos:start="165:66" pos:end="165:78">in_sample_fmt</name></expr></argument>,             <argument pos:start="165:93" pos:end="165:106"><expr pos:start="165:93" pos:end="165:106"><name pos:start="165:93" pos:end="165:106">in_sample_rate</name></expr></argument>,

                                                    <argument pos:start="167:53" pos:end="167:65"><expr pos:start="167:53" pos:end="167:65"><name pos:start="167:53" pos:end="167:65">out_ch_layout</name></expr></argument>, <argument pos:start="167:68" pos:end="167:81"><expr pos:start="167:68" pos:end="167:81"><name pos:start="167:68" pos:end="167:81">out_sample_fmt</name></expr></argument>, <argument pos:start="167:84" pos:end="167:98"><expr pos:start="167:84" pos:end="167:98"><name pos:start="167:84" pos:end="167:98">out_sample_rate</name></expr></argument>,

                                        <argument pos:start="169:41" pos:end="169:41"><expr pos:start="169:41" pos:end="169:41"><literal type="number" pos:start="169:41" pos:end="169:41">0</literal></expr></argument>, <argument pos:start="169:44" pos:end="169:44"><expr pos:start="169:44" pos:end="169:44"><literal type="number" pos:start="169:44" pos:end="169:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="173:53"><if pos:start="171:9" pos:end="173:53">if<condition pos:start="171:11" pos:end="171:35">(<expr pos:start="171:12" pos:end="171:34"><call pos:start="171:12" pos:end="171:30"><name pos:start="171:12" pos:end="171:19">swr_init</name><argument_list pos:start="171:20" pos:end="171:30">( <argument pos:start="171:22" pos:end="171:29"><expr pos:start="171:22" pos:end="171:29"><name pos:start="171:22" pos:end="171:29">forw_ctx</name></expr></argument>)</argument_list></call> <operator pos:start="171:32" pos:end="171:32">&lt;</operator> <literal type="number" pos:start="171:34" pos:end="171:34">0</literal></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:53"><block_content pos:start="173:13" pos:end="173:53">

            <expr_stmt pos:start="173:13" pos:end="173:53"><expr pos:start="173:13" pos:end="173:52"><call pos:start="173:13" pos:end="173:52"><name pos:start="173:13" pos:end="173:19">fprintf</name><argument_list pos:start="173:20" pos:end="173:52">(<argument pos:start="173:21" pos:end="173:26"><expr pos:start="173:21" pos:end="173:26"><name pos:start="173:21" pos:end="173:26">stderr</name></expr></argument>, <argument pos:start="173:29" pos:end="173:51"><expr pos:start="173:29" pos:end="173:51"><literal type="string" pos:start="173:29" pos:end="173:51">"swr_init(-&gt;) failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="175:9" pos:end="177:53"><if pos:start="175:9" pos:end="177:53">if<condition pos:start="175:11" pos:end="175:35">(<expr pos:start="175:12" pos:end="175:34"><call pos:start="175:12" pos:end="175:30"><name pos:start="175:12" pos:end="175:19">swr_init</name><argument_list pos:start="175:20" pos:end="175:30">(<argument pos:start="175:21" pos:end="175:29"><expr pos:start="175:21" pos:end="175:29"><name pos:start="175:21" pos:end="175:29">backw_ctx</name></expr></argument>)</argument_list></call> <operator pos:start="175:32" pos:end="175:32">&lt;</operator> <literal type="number" pos:start="175:34" pos:end="175:34">0</literal></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="177:53"><block_content pos:start="177:13" pos:end="177:53">

            <expr_stmt pos:start="177:13" pos:end="177:53"><expr pos:start="177:13" pos:end="177:52"><call pos:start="177:13" pos:end="177:52"><name pos:start="177:13" pos:end="177:19">fprintf</name><argument_list pos:start="177:20" pos:end="177:52">(<argument pos:start="177:21" pos:end="177:26"><expr pos:start="177:21" pos:end="177:26"><name pos:start="177:21" pos:end="177:26">stderr</name></expr></argument>, <argument pos:start="177:29" pos:end="177:51"><expr pos:start="177:29" pos:end="177:51"><literal type="string" pos:start="177:29" pos:end="177:51">"swr_init(&lt;-) failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="179:9" pos:end="181:57"><if pos:start="179:9" pos:end="181:57">if<condition pos:start="179:11" pos:end="179:21">(<expr pos:start="179:12" pos:end="179:20"><operator pos:start="179:12" pos:end="179:12">!</operator><name pos:start="179:13" pos:end="179:20">forw_ctx</name></expr>)</condition><block type="pseudo" pos:start="181:13" pos:end="181:57"><block_content pos:start="181:13" pos:end="181:57">

            <expr_stmt pos:start="181:13" pos:end="181:57"><expr pos:start="181:13" pos:end="181:56"><call pos:start="181:13" pos:end="181:56"><name pos:start="181:13" pos:end="181:19">fprintf</name><argument_list pos:start="181:20" pos:end="181:56">(<argument pos:start="181:21" pos:end="181:26"><expr pos:start="181:21" pos:end="181:26"><name pos:start="181:21" pos:end="181:26">stderr</name></expr></argument>, <argument pos:start="181:29" pos:end="181:55"><expr pos:start="181:29" pos:end="181:55"><literal type="string" pos:start="181:29" pos:end="181:55">"Failed to init forw_cts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="183:9" pos:end="185:58"><if pos:start="183:9" pos:end="185:58">if<condition pos:start="183:11" pos:end="183:22">(<expr pos:start="183:12" pos:end="183:21"><operator pos:start="183:12" pos:end="183:12">!</operator><name pos:start="183:13" pos:end="183:21">backw_ctx</name></expr>)</condition><block type="pseudo" pos:start="185:13" pos:end="185:58"><block_content pos:start="185:13" pos:end="185:58">

            <expr_stmt pos:start="185:13" pos:end="185:58"><expr pos:start="185:13" pos:end="185:57"><call pos:start="185:13" pos:end="185:57"><name pos:start="185:13" pos:end="185:19">fprintf</name><argument_list pos:start="185:20" pos:end="185:57">(<argument pos:start="185:21" pos:end="185:26"><expr pos:start="185:21" pos:end="185:26"><name pos:start="185:21" pos:end="185:26">stderr</name></expr></argument>, <argument pos:start="185:29" pos:end="185:56"><expr pos:start="185:29" pos:end="185:56"><literal type="string" pos:start="185:29" pos:end="185:56">"Failed to init backw_ctx\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line" pos:start="187:17" pos:end="187:35">//FIXME test planar</comment>

        <expr_stmt pos:start="189:9" pos:end="189:64"><expr pos:start="189:9" pos:end="189:63"><call pos:start="189:9" pos:end="189:63"><name pos:start="189:9" pos:end="189:19">setup_array</name><argument_list pos:start="189:20" pos:end="189:63">(<argument pos:start="189:21" pos:end="189:23"><expr pos:start="189:21" pos:end="189:23"><name pos:start="189:21" pos:end="189:23">ain</name></expr></argument> , <argument pos:start="189:27" pos:end="189:34"><expr pos:start="189:27" pos:end="189:34"><name pos:start="189:27" pos:end="189:34">array_in</name></expr></argument> ,  <argument pos:start="189:39" pos:end="189:51"><expr pos:start="189:39" pos:end="189:51"><name pos:start="189:39" pos:end="189:51">in_sample_fmt</name></expr></argument>,   <argument pos:start="189:56" pos:end="189:62"><expr pos:start="189:56" pos:end="189:62"><name pos:start="189:56" pos:end="189:62">SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:64"><expr pos:start="191:9" pos:end="191:63"><call pos:start="191:9" pos:end="191:63"><name pos:start="191:9" pos:end="191:19">setup_array</name><argument_list pos:start="191:20" pos:end="191:63">(<argument pos:start="191:21" pos:end="191:24"><expr pos:start="191:21" pos:end="191:24"><name pos:start="191:21" pos:end="191:24">amid</name></expr></argument>, <argument pos:start="191:27" pos:end="191:35"><expr pos:start="191:27" pos:end="191:35"><name pos:start="191:27" pos:end="191:35">array_mid</name></expr></argument>, <argument pos:start="191:38" pos:end="191:51"><expr pos:start="191:38" pos:end="191:51"><name pos:start="191:38" pos:end="191:51">out_sample_fmt</name></expr></argument>, <argument pos:start="191:54" pos:end="191:62"><expr pos:start="191:54" pos:end="191:62"><literal type="number" pos:start="191:54" pos:end="191:54">3</literal><operator pos:start="191:55" pos:end="191:55">*</operator><name pos:start="191:56" pos:end="191:62">SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="206:0"><expr pos:start="193:9" pos:end="193:74"><call pos:start="193:9" pos:end="193:74"><name pos:start="193:9" pos:end="193:19">setup_array</name><argument_list pos:start="193:20" pos:end="193:74">(<argument pos:start="193:21" pos:end="193:24"><expr pos:start="193:21" pos:end="193:24"><name pos:start="193:21" pos:end="193:24">aout</name></expr></argument>, <argument pos:start="193:27" pos:end="193:35"><expr pos:start="193:27" pos:end="193:35"><name pos:start="193:27" pos:end="193:35">array_out</name></expr></argument>,  <argument pos:start="193:39" pos:end="193:51"><expr pos:start="193:39" pos:end="193:51"><name pos:start="193:39" pos:end="193:51">in_sample_fmt</name></expr></argument>           ,   <argument pos:start="193:67" pos:end="193:73"><expr pos:start="193:67" pos:end="193:73"><name pos:start="193:67" pos:end="193:73">SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="195:1" pos:end="195:5">#<cpp:directive pos:start="195:2" pos:end="195:3">if</cpp:directive> <expr pos:start="195:5" pos:end="195:5"><literal type="number" pos:start="195:5" pos:end="195:5">0</literal></expr></cpp:if>

        for(ch=0; ch&lt;in_ch_count; ch++){

            for(i=0; i&lt;SAMPLES; i++)

                set(ain, ch, i, in_ch_count, in_sample_fmt, sin(i*i*3/SAMPLES));

        }

<cpp:else pos:start="205:1" pos:end="205:5">#<cpp:directive pos:start="205:2" pos:end="205:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="207:9" pos:end="210:0"><expr pos:start="207:9" pos:end="207:71"><call pos:start="207:9" pos:end="207:71"><name pos:start="207:9" pos:end="207:16">audiogen</name><argument_list pos:start="207:17" pos:end="207:71">(<argument pos:start="207:18" pos:end="207:20"><expr pos:start="207:18" pos:end="207:20"><name pos:start="207:18" pos:end="207:20">ain</name></expr></argument>, <argument pos:start="207:23" pos:end="207:35"><expr pos:start="207:23" pos:end="207:35"><name pos:start="207:23" pos:end="207:35">in_sample_fmt</name></expr></argument>, <argument pos:start="207:38" pos:end="207:48"><expr pos:start="207:38" pos:end="207:48"><name pos:start="207:38" pos:end="207:48">in_ch_count</name></expr></argument>, <argument pos:start="207:51" pos:end="207:61"><expr pos:start="207:51" pos:end="207:61"><name pos:start="207:51" pos:end="207:57">SAMPLES</name><operator pos:start="207:58" pos:end="207:58">/</operator><literal type="number" pos:start="207:59" pos:end="207:60">6</literal><operator pos:start="207:60" pos:end="207:60">+</operator><literal type="number" pos:start="207:61" pos:end="207:61">1</literal></expr></argument>, <argument pos:start="207:64" pos:end="207:70"><expr pos:start="207:64" pos:end="207:70"><name pos:start="207:64" pos:end="207:70">SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="211:9" pos:end="211:40"><expr pos:start="211:9" pos:end="211:39"><name pos:start="211:9" pos:end="211:12">mode</name> <operator pos:start="211:14" pos:end="211:14">=</operator> <call pos:start="211:16" pos:end="211:35"><name pos:start="211:16" pos:end="211:24">uint_rand</name><argument_list pos:start="211:25" pos:end="211:35">(<argument pos:start="211:26" pos:end="211:34"><expr pos:start="211:26" pos:end="211:34"><name pos:start="211:26" pos:end="211:34">rand_seed</name></expr></argument>)</argument_list></call> <operator pos:start="211:37" pos:end="211:37">%</operator> <literal type="number" pos:start="211:39" pos:end="211:39">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="253:9"><if pos:start="213:9" pos:end="217:9">if<condition pos:start="213:11" pos:end="213:60">(<expr pos:start="213:12" pos:end="213:18"><name pos:start="213:12" pos:end="213:15">mode</name><operator pos:start="213:16" pos:end="213:17">==</operator><literal type="number" pos:start="213:18" pos:end="213:18">0</literal></expr> <comment type="block" pos:start="213:20" pos:end="213:59">/*|| out_sample_rate == in_sample_rate*/</comment>)</condition> <block pos:start="213:62" pos:end="217:9">{<block_content pos:start="215:13" pos:end="215:94">

            <expr_stmt pos:start="215:13" pos:end="215:94"><expr pos:start="215:13" pos:end="215:93"><name pos:start="215:13" pos:end="215:21">mid_count</name><operator pos:start="215:22" pos:end="215:22">=</operator> <call pos:start="215:24" pos:end="215:93"><name pos:start="215:24" pos:end="215:34">swr_convert</name><argument_list pos:start="215:35" pos:end="215:93">(<argument pos:start="215:36" pos:end="215:43"><expr pos:start="215:36" pos:end="215:43"><name pos:start="215:36" pos:end="215:43">forw_ctx</name></expr></argument>, <argument pos:start="215:46" pos:end="215:49"><expr pos:start="215:46" pos:end="215:49"><name pos:start="215:46" pos:end="215:49">amid</name></expr></argument>, <argument pos:start="215:52" pos:end="215:60"><expr pos:start="215:52" pos:end="215:60"><literal type="number" pos:start="215:52" pos:end="215:52">3</literal><operator pos:start="215:53" pos:end="215:53">*</operator><name pos:start="215:54" pos:end="215:60">SAMPLES</name></expr></argument>, <argument pos:start="215:63" pos:end="215:83"><expr pos:start="215:63" pos:end="215:83"><operator pos:start="215:63" pos:end="215:63">(</operator><specifier pos:start="215:64" pos:end="215:68">const</specifier> <name pos:start="215:70" pos:end="215:76">uint8_t</name> <operator pos:start="215:78" pos:end="215:78">*</operator><operator pos:start="215:79" pos:end="215:79">*</operator><operator pos:start="215:80" pos:end="215:80">)</operator><name pos:start="215:81" pos:end="215:83">ain</name></expr></argument>, <argument pos:start="215:86" pos:end="215:92"><expr pos:start="215:86" pos:end="215:92"><name pos:start="215:86" pos:end="215:92">SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="217:11" pos:end="223:9">else if<condition pos:start="217:18" pos:end="217:26">(<expr pos:start="217:19" pos:end="217:25"><name pos:start="217:19" pos:end="217:22">mode</name><operator pos:start="217:23" pos:end="217:24">==</operator><literal type="number" pos:start="217:25" pos:end="217:25">1</literal></expr>)</condition><block pos:start="217:27" pos:end="223:9">{<block_content pos:start="219:13" pos:end="221:94">

            <expr_stmt pos:start="219:13" pos:end="219:94"><expr pos:start="219:13" pos:end="219:93"><name pos:start="219:13" pos:end="219:21">mid_count</name><operator pos:start="219:22" pos:end="219:22">=</operator> <call pos:start="219:24" pos:end="219:93"><name pos:start="219:24" pos:end="219:34">swr_convert</name><argument_list pos:start="219:35" pos:end="219:93">(<argument pos:start="219:36" pos:end="219:43"><expr pos:start="219:36" pos:end="219:43"><name pos:start="219:36" pos:end="219:43">forw_ctx</name></expr></argument>, <argument pos:start="219:46" pos:end="219:49"><expr pos:start="219:46" pos:end="219:49"><name pos:start="219:46" pos:end="219:49">amid</name></expr></argument>,         <argument pos:start="219:60" pos:end="219:60"><expr pos:start="219:60" pos:end="219:60"><literal type="number" pos:start="219:60" pos:end="219:60">0</literal></expr></argument>, <argument pos:start="219:63" pos:end="219:83"><expr pos:start="219:63" pos:end="219:83"><operator pos:start="219:63" pos:end="219:63">(</operator><specifier pos:start="219:64" pos:end="219:68">const</specifier> <name pos:start="219:70" pos:end="219:76">uint8_t</name> <operator pos:start="219:78" pos:end="219:78">*</operator><operator pos:start="219:79" pos:end="219:79">*</operator><operator pos:start="219:80" pos:end="219:80">)</operator><name pos:start="219:81" pos:end="219:83">ain</name></expr></argument>, <argument pos:start="219:86" pos:end="219:92"><expr pos:start="219:86" pos:end="219:92"><name pos:start="219:86" pos:end="219:92">SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:94"><expr pos:start="221:13" pos:end="221:93"><name pos:start="221:13" pos:end="221:21">mid_count</name><operator pos:start="221:22" pos:end="221:23">+=</operator><call pos:start="221:24" pos:end="221:93"><name pos:start="221:24" pos:end="221:34">swr_convert</name><argument_list pos:start="221:35" pos:end="221:93">(<argument pos:start="221:36" pos:end="221:43"><expr pos:start="221:36" pos:end="221:43"><name pos:start="221:36" pos:end="221:43">forw_ctx</name></expr></argument>, <argument pos:start="221:46" pos:end="221:49"><expr pos:start="221:46" pos:end="221:49"><name pos:start="221:46" pos:end="221:49">amid</name></expr></argument>, <argument pos:start="221:52" pos:end="221:60"><expr pos:start="221:52" pos:end="221:60"><literal type="number" pos:start="221:52" pos:end="221:52">3</literal><operator pos:start="221:53" pos:end="221:53">*</operator><name pos:start="221:54" pos:end="221:60">SAMPLES</name></expr></argument>, <argument pos:start="221:63" pos:end="221:83"><expr pos:start="221:63" pos:end="221:83"><operator pos:start="221:63" pos:end="221:63">(</operator><specifier pos:start="221:64" pos:end="221:68">const</specifier> <name pos:start="221:70" pos:end="221:76">uint8_t</name> <operator pos:start="221:78" pos:end="221:78">*</operator><operator pos:start="221:79" pos:end="221:79">*</operator><operator pos:start="221:80" pos:end="221:80">)</operator><name pos:start="221:81" pos:end="221:83">ain</name></expr></argument>,       <argument pos:start="221:92" pos:end="221:92"><expr pos:start="221:92" pos:end="221:92"><literal type="number" pos:start="221:92" pos:end="221:92">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="223:11" pos:end="253:9">else <block pos:start="223:16" pos:end="253:9">{<block_content pos:start="225:13" pos:end="251:67">

            <decl_stmt pos:start="225:13" pos:end="225:26"><decl pos:start="225:13" pos:end="225:25"><type pos:start="225:13" pos:end="225:15"><name pos:start="225:13" pos:end="225:15">int</name></type> <name pos:start="225:17" pos:end="225:25">tmp_count</name></decl>;</decl_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:94"><expr pos:start="227:13" pos:end="227:93"><name pos:start="227:13" pos:end="227:21">mid_count</name><operator pos:start="227:22" pos:end="227:22">=</operator> <call pos:start="227:24" pos:end="227:93"><name pos:start="227:24" pos:end="227:34">swr_convert</name><argument_list pos:start="227:35" pos:end="227:93">(<argument pos:start="227:36" pos:end="227:43"><expr pos:start="227:36" pos:end="227:43"><name pos:start="227:36" pos:end="227:43">forw_ctx</name></expr></argument>, <argument pos:start="227:46" pos:end="227:49"><expr pos:start="227:46" pos:end="227:49"><name pos:start="227:46" pos:end="227:49">amid</name></expr></argument>,         <argument pos:start="227:60" pos:end="227:60"><expr pos:start="227:60" pos:end="227:60"><literal type="number" pos:start="227:60" pos:end="227:60">0</literal></expr></argument>, <argument pos:start="227:63" pos:end="227:83"><expr pos:start="227:63" pos:end="227:83"><operator pos:start="227:63" pos:end="227:63">(</operator><specifier pos:start="227:64" pos:end="227:68">const</specifier> <name pos:start="227:70" pos:end="227:76">uint8_t</name> <operator pos:start="227:78" pos:end="227:78">*</operator><operator pos:start="227:79" pos:end="227:79">*</operator><operator pos:start="227:80" pos:end="227:80">)</operator><name pos:start="227:81" pos:end="227:83">ain</name></expr></argument>,       <argument pos:start="227:92" pos:end="227:92"><expr pos:start="227:92" pos:end="227:92"><literal type="number" pos:start="227:92" pos:end="227:92">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:37"><expr pos:start="229:13" pos:end="229:36"><call pos:start="229:13" pos:end="229:36"><name pos:start="229:13" pos:end="229:22">av_assert0</name><argument_list pos:start="229:23" pos:end="229:36">(<argument pos:start="229:24" pos:end="229:35"><expr pos:start="229:24" pos:end="229:35"><name pos:start="229:24" pos:end="229:32">mid_count</name><operator pos:start="229:33" pos:end="229:34">==</operator><literal type="number" pos:start="229:35" pos:end="229:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:55"><expr pos:start="231:13" pos:end="231:54"><call pos:start="231:13" pos:end="231:54"><name pos:start="231:13" pos:end="231:17">shift</name><argument_list pos:start="231:18" pos:end="231:54">(<argument pos:start="231:19" pos:end="231:21"><expr pos:start="231:19" pos:end="231:21"><name pos:start="231:19" pos:end="231:21">ain</name></expr></argument>,  <argument pos:start="231:25" pos:end="231:25"><expr pos:start="231:25" pos:end="231:25"><literal type="number" pos:start="231:25" pos:end="231:25">1</literal></expr></argument>, <argument pos:start="231:28" pos:end="231:38"><expr pos:start="231:28" pos:end="231:38"><name pos:start="231:28" pos:end="231:38">in_ch_count</name></expr></argument>, <argument pos:start="231:41" pos:end="231:53"><expr pos:start="231:41" pos:end="231:53"><name pos:start="231:41" pos:end="231:53">in_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:94"><expr pos:start="233:13" pos:end="233:93"><name pos:start="233:13" pos:end="233:21">mid_count</name><operator pos:start="233:22" pos:end="233:23">+=</operator><call pos:start="233:24" pos:end="233:93"><name pos:start="233:24" pos:end="233:34">swr_convert</name><argument_list pos:start="233:35" pos:end="233:93">(<argument pos:start="233:36" pos:end="233:43"><expr pos:start="233:36" pos:end="233:43"><name pos:start="233:36" pos:end="233:43">forw_ctx</name></expr></argument>, <argument pos:start="233:46" pos:end="233:49"><expr pos:start="233:46" pos:end="233:49"><name pos:start="233:46" pos:end="233:49">amid</name></expr></argument>, <argument pos:start="233:52" pos:end="233:60"><expr pos:start="233:52" pos:end="233:60"><literal type="number" pos:start="233:52" pos:end="233:52">3</literal><operator pos:start="233:53" pos:end="233:53">*</operator><name pos:start="233:54" pos:end="233:60">SAMPLES</name></expr></argument>, <argument pos:start="233:63" pos:end="233:83"><expr pos:start="233:63" pos:end="233:83"><operator pos:start="233:63" pos:end="233:63">(</operator><specifier pos:start="233:64" pos:end="233:68">const</specifier> <name pos:start="233:70" pos:end="233:76">uint8_t</name> <operator pos:start="233:78" pos:end="233:78">*</operator><operator pos:start="233:79" pos:end="233:79">*</operator><operator pos:start="233:80" pos:end="233:80">)</operator><name pos:start="233:81" pos:end="233:83">ain</name></expr></argument>,       <argument pos:start="233:92" pos:end="233:92"><expr pos:start="233:92" pos:end="233:92"><literal type="number" pos:start="233:92" pos:end="233:92">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:66"><expr pos:start="235:13" pos:end="235:65"><call pos:start="235:13" pos:end="235:65"><name pos:start="235:13" pos:end="235:17">shift</name><argument_list pos:start="235:18" pos:end="235:65">(<argument pos:start="235:19" pos:end="235:22"><expr pos:start="235:19" pos:end="235:22"><name pos:start="235:19" pos:end="235:22">amid</name></expr></argument>,  <argument pos:start="235:26" pos:end="235:34"><expr pos:start="235:26" pos:end="235:34"><name pos:start="235:26" pos:end="235:34">mid_count</name></expr></argument>, <argument pos:start="235:37" pos:end="235:48"><expr pos:start="235:37" pos:end="235:48"><name pos:start="235:37" pos:end="235:48">out_ch_count</name></expr></argument>, <argument pos:start="235:51" pos:end="235:64"><expr pos:start="235:51" pos:end="235:64"><name pos:start="235:51" pos:end="235:64">out_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="235:68" pos:end="235:89"><expr pos:start="235:68" pos:end="235:88"><name pos:start="235:68" pos:end="235:76">tmp_count</name> <operator pos:start="235:78" pos:end="235:78">=</operator> <name pos:start="235:80" pos:end="235:88">mid_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:94"><expr pos:start="237:13" pos:end="237:93"><name pos:start="237:13" pos:end="237:21">mid_count</name><operator pos:start="237:22" pos:end="237:23">+=</operator><call pos:start="237:24" pos:end="237:93"><name pos:start="237:24" pos:end="237:34">swr_convert</name><argument_list pos:start="237:35" pos:end="237:93">(<argument pos:start="237:36" pos:end="237:43"><expr pos:start="237:36" pos:end="237:43"><name pos:start="237:36" pos:end="237:43">forw_ctx</name></expr></argument>, <argument pos:start="237:46" pos:end="237:49"><expr pos:start="237:46" pos:end="237:49"><name pos:start="237:46" pos:end="237:49">amid</name></expr></argument>,         <argument pos:start="237:60" pos:end="237:60"><expr pos:start="237:60" pos:end="237:60"><literal type="number" pos:start="237:60" pos:end="237:60">2</literal></expr></argument>, <argument pos:start="237:63" pos:end="237:83"><expr pos:start="237:63" pos:end="237:83"><operator pos:start="237:63" pos:end="237:63">(</operator><specifier pos:start="237:64" pos:end="237:68">const</specifier> <name pos:start="237:70" pos:end="237:76">uint8_t</name> <operator pos:start="237:78" pos:end="237:78">*</operator><operator pos:start="237:79" pos:end="237:79">*</operator><operator pos:start="237:80" pos:end="237:80">)</operator><name pos:start="237:81" pos:end="237:83">ain</name></expr></argument>,       <argument pos:start="237:92" pos:end="237:92"><expr pos:start="237:92" pos:end="237:92"><literal type="number" pos:start="237:92" pos:end="237:92">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:76"><expr pos:start="239:13" pos:end="239:75"><call pos:start="239:13" pos:end="239:75"><name pos:start="239:13" pos:end="239:17">shift</name><argument_list pos:start="239:18" pos:end="239:75">(<argument pos:start="239:19" pos:end="239:22"><expr pos:start="239:19" pos:end="239:22"><name pos:start="239:19" pos:end="239:22">amid</name></expr></argument>,  <argument pos:start="239:26" pos:end="239:44"><expr pos:start="239:26" pos:end="239:44"><name pos:start="239:26" pos:end="239:34">mid_count</name><operator pos:start="239:35" pos:end="239:35">-</operator><name pos:start="239:36" pos:end="239:44">tmp_count</name></expr></argument>, <argument pos:start="239:47" pos:end="239:58"><expr pos:start="239:47" pos:end="239:58"><name pos:start="239:47" pos:end="239:58">out_ch_count</name></expr></argument>, <argument pos:start="239:61" pos:end="239:74"><expr pos:start="239:61" pos:end="239:74"><name pos:start="239:61" pos:end="239:74">out_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="239:78" pos:end="239:99"><expr pos:start="239:78" pos:end="239:98"><name pos:start="239:78" pos:end="239:86">tmp_count</name> <operator pos:start="239:88" pos:end="239:88">=</operator> <name pos:start="239:90" pos:end="239:98">mid_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:55"><expr pos:start="241:13" pos:end="241:54"><call pos:start="241:13" pos:end="241:54"><name pos:start="241:13" pos:end="241:17">shift</name><argument_list pos:start="241:18" pos:end="241:54">(<argument pos:start="241:19" pos:end="241:21"><expr pos:start="241:19" pos:end="241:21"><name pos:start="241:19" pos:end="241:21">ain</name></expr></argument>,  <argument pos:start="241:25" pos:end="241:25"><expr pos:start="241:25" pos:end="241:25"><literal type="number" pos:start="241:25" pos:end="241:25">2</literal></expr></argument>, <argument pos:start="241:28" pos:end="241:38"><expr pos:start="241:28" pos:end="241:38"><name pos:start="241:28" pos:end="241:38">in_ch_count</name></expr></argument>, <argument pos:start="241:41" pos:end="241:53"><expr pos:start="241:41" pos:end="241:53"><name pos:start="241:41" pos:end="241:53">in_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:96"><expr pos:start="243:13" pos:end="243:95"><name pos:start="243:13" pos:end="243:21">mid_count</name><operator pos:start="243:22" pos:end="243:23">+=</operator><call pos:start="243:24" pos:end="243:95"><name pos:start="243:24" pos:end="243:34">swr_convert</name><argument_list pos:start="243:35" pos:end="243:95">(<argument pos:start="243:36" pos:end="243:43"><expr pos:start="243:36" pos:end="243:43"><name pos:start="243:36" pos:end="243:43">forw_ctx</name></expr></argument>, <argument pos:start="243:46" pos:end="243:49"><expr pos:start="243:46" pos:end="243:49"><name pos:start="243:46" pos:end="243:49">amid</name></expr></argument>,         <argument pos:start="243:60" pos:end="243:60"><expr pos:start="243:60" pos:end="243:60"><literal type="number" pos:start="243:60" pos:end="243:60">1</literal></expr></argument>, <argument pos:start="243:63" pos:end="243:83"><expr pos:start="243:63" pos:end="243:83"><operator pos:start="243:63" pos:end="243:63">(</operator><specifier pos:start="243:64" pos:end="243:68">const</specifier> <name pos:start="243:70" pos:end="243:76">uint8_t</name> <operator pos:start="243:78" pos:end="243:78">*</operator><operator pos:start="243:79" pos:end="243:79">*</operator><operator pos:start="243:80" pos:end="243:80">)</operator><name pos:start="243:81" pos:end="243:83">ain</name></expr></argument>, <argument pos:start="243:86" pos:end="243:94"><expr pos:start="243:86" pos:end="243:94"><name pos:start="243:86" pos:end="243:92">SAMPLES</name><operator pos:start="243:93" pos:end="243:93">-</operator><literal type="number" pos:start="243:94" pos:end="243:94">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:76"><expr pos:start="245:13" pos:end="245:75"><call pos:start="245:13" pos:end="245:75"><name pos:start="245:13" pos:end="245:17">shift</name><argument_list pos:start="245:18" pos:end="245:75">(<argument pos:start="245:19" pos:end="245:22"><expr pos:start="245:19" pos:end="245:22"><name pos:start="245:19" pos:end="245:22">amid</name></expr></argument>,  <argument pos:start="245:26" pos:end="245:44"><expr pos:start="245:26" pos:end="245:44"><name pos:start="245:26" pos:end="245:34">mid_count</name><operator pos:start="245:35" pos:end="245:35">-</operator><name pos:start="245:36" pos:end="245:44">tmp_count</name></expr></argument>, <argument pos:start="245:47" pos:end="245:58"><expr pos:start="245:47" pos:end="245:58"><name pos:start="245:47" pos:end="245:58">out_ch_count</name></expr></argument>, <argument pos:start="245:61" pos:end="245:74"><expr pos:start="245:61" pos:end="245:74"><name pos:start="245:61" pos:end="245:74">out_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="245:78" pos:end="245:99"><expr pos:start="245:78" pos:end="245:98"><name pos:start="245:78" pos:end="245:86">tmp_count</name> <operator pos:start="245:88" pos:end="245:88">=</operator> <name pos:start="245:90" pos:end="245:98">mid_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:55"><expr pos:start="247:13" pos:end="247:54"><call pos:start="247:13" pos:end="247:54"><name pos:start="247:13" pos:end="247:17">shift</name><argument_list pos:start="247:18" pos:end="247:54">(<argument pos:start="247:19" pos:end="247:21"><expr pos:start="247:19" pos:end="247:21"><name pos:start="247:19" pos:end="247:21">ain</name></expr></argument>, <argument pos:start="247:24" pos:end="247:25"><expr pos:start="247:24" pos:end="247:25"><operator pos:start="247:24" pos:end="247:24">-</operator><literal type="number" pos:start="247:25" pos:end="247:25">3</literal></expr></argument>, <argument pos:start="247:28" pos:end="247:38"><expr pos:start="247:28" pos:end="247:38"><name pos:start="247:28" pos:end="247:38">in_ch_count</name></expr></argument>, <argument pos:start="247:41" pos:end="247:53"><expr pos:start="247:41" pos:end="247:53"><name pos:start="247:41" pos:end="247:53">in_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:94"><expr pos:start="249:13" pos:end="249:93"><name pos:start="249:13" pos:end="249:21">mid_count</name><operator pos:start="249:22" pos:end="249:23">+=</operator><call pos:start="249:24" pos:end="249:93"><name pos:start="249:24" pos:end="249:34">swr_convert</name><argument_list pos:start="249:35" pos:end="249:93">(<argument pos:start="249:36" pos:end="249:43"><expr pos:start="249:36" pos:end="249:43"><name pos:start="249:36" pos:end="249:43">forw_ctx</name></expr></argument>, <argument pos:start="249:46" pos:end="249:49"><expr pos:start="249:46" pos:end="249:49"><name pos:start="249:46" pos:end="249:49">amid</name></expr></argument>, <argument pos:start="249:52" pos:end="249:60"><expr pos:start="249:52" pos:end="249:60"><literal type="number" pos:start="249:52" pos:end="249:52">3</literal><operator pos:start="249:53" pos:end="249:53">*</operator><name pos:start="249:54" pos:end="249:60">SAMPLES</name></expr></argument>, <argument pos:start="249:63" pos:end="249:83"><expr pos:start="249:63" pos:end="249:83"><operator pos:start="249:63" pos:end="249:63">(</operator><specifier pos:start="249:64" pos:end="249:68">const</specifier> <name pos:start="249:70" pos:end="249:76">uint8_t</name> <operator pos:start="249:78" pos:end="249:78">*</operator><operator pos:start="249:79" pos:end="249:79">*</operator><operator pos:start="249:80" pos:end="249:80">)</operator><name pos:start="249:81" pos:end="249:83">ain</name></expr></argument>,       <argument pos:start="249:92" pos:end="249:92"><expr pos:start="249:92" pos:end="249:92"><literal type="number" pos:start="249:92" pos:end="249:92">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:67"><expr pos:start="251:13" pos:end="251:66"><call pos:start="251:13" pos:end="251:66"><name pos:start="251:13" pos:end="251:17">shift</name><argument_list pos:start="251:18" pos:end="251:66">(<argument pos:start="251:19" pos:end="251:22"><expr pos:start="251:19" pos:end="251:22"><name pos:start="251:19" pos:end="251:22">amid</name></expr></argument>,  <argument pos:start="251:26" pos:end="251:35"><expr pos:start="251:26" pos:end="251:35"><operator pos:start="251:26" pos:end="251:26">-</operator><name pos:start="251:27" pos:end="251:35">tmp_count</name></expr></argument>, <argument pos:start="251:38" pos:end="251:49"><expr pos:start="251:38" pos:end="251:49"><name pos:start="251:38" pos:end="251:49">out_ch_count</name></expr></argument>, <argument pos:start="251:52" pos:end="251:65"><expr pos:start="251:52" pos:end="251:65"><name pos:start="251:52" pos:end="251:65">out_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:91"><expr pos:start="255:9" pos:end="255:90"><name pos:start="255:9" pos:end="255:17">out_count</name><operator pos:start="255:18" pos:end="255:18">=</operator> <call pos:start="255:20" pos:end="255:90"><name pos:start="255:20" pos:end="255:30">swr_convert</name><argument_list pos:start="255:31" pos:end="255:90">(<argument pos:start="255:32" pos:end="255:40"><expr pos:start="255:32" pos:end="255:40"><name pos:start="255:32" pos:end="255:40">backw_ctx</name></expr></argument>,<argument pos:start="255:42" pos:end="255:45"><expr pos:start="255:42" pos:end="255:45"><name pos:start="255:42" pos:end="255:45">aout</name></expr></argument>, <argument pos:start="255:48" pos:end="255:54"><expr pos:start="255:48" pos:end="255:54"><name pos:start="255:48" pos:end="255:54">SAMPLES</name></expr></argument>, <argument pos:start="255:57" pos:end="255:78"><expr pos:start="255:57" pos:end="255:78"><operator pos:start="255:57" pos:end="255:57">(</operator><specifier pos:start="255:58" pos:end="255:62">const</specifier> <name pos:start="255:64" pos:end="255:70">uint8_t</name> <operator pos:start="255:72" pos:end="255:72">*</operator><operator pos:start="255:73" pos:end="255:73">*</operator><operator pos:start="255:74" pos:end="255:74">)</operator><name pos:start="255:75" pos:end="255:78">amid</name></expr></argument>, <argument pos:start="255:81" pos:end="255:89"><expr pos:start="255:81" pos:end="255:89"><name pos:start="255:81" pos:end="255:89">mid_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="259:9" pos:end="301:9">for<control pos:start="259:12" pos:end="259:39">(<init pos:start="259:13" pos:end="259:17"><expr pos:start="259:13" pos:end="259:16"><name pos:start="259:13" pos:end="259:14">ch</name><operator pos:start="259:15" pos:end="259:15">=</operator><literal type="number" pos:start="259:16" pos:end="259:16">0</literal></expr>;</init> <condition pos:start="259:19" pos:end="259:33"><expr pos:start="259:19" pos:end="259:32"><name pos:start="259:19" pos:end="259:20">ch</name><operator pos:start="259:21" pos:end="259:21">&lt;</operator><name pos:start="259:22" pos:end="259:32">in_ch_count</name></expr>;</condition> <incr pos:start="259:35" pos:end="259:38"><expr pos:start="259:35" pos:end="259:38"><name pos:start="259:35" pos:end="259:36">ch</name><operator pos:start="259:37" pos:end="259:38">++</operator></expr></incr>)</control><block pos:start="259:40" pos:end="301:9">{<block_content pos:start="261:13" pos:end="299:131">

            <decl_stmt pos:start="261:13" pos:end="261:34"><decl pos:start="261:13" pos:end="261:22"><type pos:start="261:13" pos:end="261:18"><name pos:start="261:13" pos:end="261:18">double</name></type> <name pos:start="261:20" pos:end="261:22">sse</name></decl>, <decl pos:start="261:25" pos:end="261:33"><type ref="prev" pos:start="261:13" pos:end="261:18"/><name pos:start="261:25" pos:end="261:31">maxdiff</name><init pos:start="261:32" pos:end="261:33">=<expr pos:start="261:33" pos:end="261:33"><literal type="number" pos:start="261:33" pos:end="261:33">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="263:13" pos:end="263:28"><decl pos:start="263:13" pos:end="263:27"><type pos:start="263:13" pos:end="263:18"><name pos:start="263:13" pos:end="263:18">double</name></type> <name pos:start="263:20" pos:end="263:24">sum_a</name><init pos:start="263:25" pos:end="263:27">= <expr pos:start="263:27" pos:end="263:27"><literal type="number" pos:start="263:27" pos:end="263:27">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="265:13" pos:end="265:28"><decl pos:start="265:13" pos:end="265:27"><type pos:start="265:13" pos:end="265:18"><name pos:start="265:13" pos:end="265:18">double</name></type> <name pos:start="265:20" pos:end="265:24">sum_b</name><init pos:start="265:25" pos:end="265:27">= <expr pos:start="265:27" pos:end="265:27"><literal type="number" pos:start="265:27" pos:end="265:27">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="267:13" pos:end="267:29"><decl pos:start="267:13" pos:end="267:28"><type pos:start="267:13" pos:end="267:18"><name pos:start="267:13" pos:end="267:18">double</name></type> <name pos:start="267:20" pos:end="267:25">sum_aa</name><init pos:start="267:26" pos:end="267:28">= <expr pos:start="267:28" pos:end="267:28"><literal type="number" pos:start="267:28" pos:end="267:28">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="269:13" pos:end="269:29"><decl pos:start="269:13" pos:end="269:28"><type pos:start="269:13" pos:end="269:18"><name pos:start="269:13" pos:end="269:18">double</name></type> <name pos:start="269:20" pos:end="269:25">sum_bb</name><init pos:start="269:26" pos:end="269:28">= <expr pos:start="269:28" pos:end="269:28"><literal type="number" pos:start="269:28" pos:end="269:28">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="271:13" pos:end="271:29"><decl pos:start="271:13" pos:end="271:28"><type pos:start="271:13" pos:end="271:18"><name pos:start="271:13" pos:end="271:18">double</name></type> <name pos:start="271:20" pos:end="271:25">sum_ab</name><init pos:start="271:26" pos:end="271:28">= <expr pos:start="271:28" pos:end="271:28"><literal type="number" pos:start="271:28" pos:end="271:28">0</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="273:13" pos:end="291:13">for<control pos:start="273:16" pos:end="273:38">(<init pos:start="273:17" pos:end="273:20"><expr pos:start="273:17" pos:end="273:19"><name pos:start="273:17" pos:end="273:17">i</name><operator pos:start="273:18" pos:end="273:18">=</operator><literal type="number" pos:start="273:19" pos:end="273:19">0</literal></expr>;</init> <condition pos:start="273:22" pos:end="273:33"><expr pos:start="273:22" pos:end="273:32"><name pos:start="273:22" pos:end="273:22">i</name><operator pos:start="273:23" pos:end="273:23">&lt;</operator><name pos:start="273:24" pos:end="273:32">out_count</name></expr>;</condition> <incr pos:start="273:35" pos:end="273:37"><expr pos:start="273:35" pos:end="273:37"><name pos:start="273:35" pos:end="273:35">i</name><operator pos:start="273:36" pos:end="273:37">++</operator></expr></incr>)</control><block pos:start="273:39" pos:end="291:13">{<block_content pos:start="275:17" pos:end="289:52">

                <decl_stmt pos:start="275:17" pos:end="275:71"><decl pos:start="275:17" pos:end="275:70"><type pos:start="275:17" pos:end="275:22"><name pos:start="275:17" pos:end="275:22">double</name></type> <name pos:start="275:24" pos:end="275:24">a</name><init pos:start="275:25" pos:end="275:70">= <expr pos:start="275:27" pos:end="275:70"><call pos:start="275:27" pos:end="275:70"><name pos:start="275:27" pos:end="275:29">get</name><argument_list pos:start="275:30" pos:end="275:70">(<argument pos:start="275:31" pos:end="275:33"><expr pos:start="275:31" pos:end="275:33"><name pos:start="275:31" pos:end="275:33">ain</name></expr></argument> , <argument pos:start="275:37" pos:end="275:38"><expr pos:start="275:37" pos:end="275:38"><name pos:start="275:37" pos:end="275:38">ch</name></expr></argument>, <argument pos:start="275:41" pos:end="275:41"><expr pos:start="275:41" pos:end="275:41"><name pos:start="275:41" pos:end="275:41">i</name></expr></argument>, <argument pos:start="275:44" pos:end="275:54"><expr pos:start="275:44" pos:end="275:54"><name pos:start="275:44" pos:end="275:54">in_ch_count</name></expr></argument>, <argument pos:start="275:57" pos:end="275:69"><expr pos:start="275:57" pos:end="275:69"><name pos:start="275:57" pos:end="275:69">in_sample_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="277:17" pos:end="277:71"><decl pos:start="277:17" pos:end="277:70"><type pos:start="277:17" pos:end="277:22"><name pos:start="277:17" pos:end="277:22">double</name></type> <name pos:start="277:24" pos:end="277:24">b</name><init pos:start="277:25" pos:end="277:70">= <expr pos:start="277:27" pos:end="277:70"><call pos:start="277:27" pos:end="277:70"><name pos:start="277:27" pos:end="277:29">get</name><argument_list pos:start="277:30" pos:end="277:70">(<argument pos:start="277:31" pos:end="277:34"><expr pos:start="277:31" pos:end="277:34"><name pos:start="277:31" pos:end="277:34">aout</name></expr></argument>, <argument pos:start="277:37" pos:end="277:38"><expr pos:start="277:37" pos:end="277:38"><name pos:start="277:37" pos:end="277:38">ch</name></expr></argument>, <argument pos:start="277:41" pos:end="277:41"><expr pos:start="277:41" pos:end="277:41"><name pos:start="277:41" pos:end="277:41">i</name></expr></argument>, <argument pos:start="277:44" pos:end="277:54"><expr pos:start="277:44" pos:end="277:54"><name pos:start="277:44" pos:end="277:54">in_ch_count</name></expr></argument>, <argument pos:start="277:57" pos:end="277:69"><expr pos:start="277:57" pos:end="277:69"><name pos:start="277:57" pos:end="277:69">in_sample_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="279:17" pos:end="279:27"><expr pos:start="279:17" pos:end="279:26"><name pos:start="279:17" pos:end="279:21">sum_a</name> <operator pos:start="279:23" pos:end="279:24">+=</operator> <name pos:start="279:26" pos:end="279:26">a</name></expr>;</expr_stmt>

                <expr_stmt pos:start="281:17" pos:end="281:27"><expr pos:start="281:17" pos:end="281:26"><name pos:start="281:17" pos:end="281:21">sum_b</name> <operator pos:start="281:23" pos:end="281:24">+=</operator> <name pos:start="281:26" pos:end="281:26">b</name></expr>;</expr_stmt>

                <expr_stmt pos:start="283:17" pos:end="283:29"><expr pos:start="283:17" pos:end="283:28"><name pos:start="283:17" pos:end="283:22">sum_aa</name><operator pos:start="283:23" pos:end="283:24">+=</operator> <name pos:start="283:26" pos:end="283:26">a</name><operator pos:start="283:27" pos:end="283:27">*</operator><name pos:start="283:28" pos:end="283:28">a</name></expr>;</expr_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:29"><expr pos:start="285:17" pos:end="285:28"><name pos:start="285:17" pos:end="285:22">sum_bb</name><operator pos:start="285:23" pos:end="285:24">+=</operator> <name pos:start="285:26" pos:end="285:26">b</name><operator pos:start="285:27" pos:end="285:27">*</operator><name pos:start="285:28" pos:end="285:28">b</name></expr>;</expr_stmt>

                <expr_stmt pos:start="287:17" pos:end="287:29"><expr pos:start="287:17" pos:end="287:28"><name pos:start="287:17" pos:end="287:22">sum_ab</name><operator pos:start="287:23" pos:end="287:24">+=</operator> <name pos:start="287:26" pos:end="287:26">a</name><operator pos:start="287:27" pos:end="287:27">*</operator><name pos:start="287:28" pos:end="287:28">b</name></expr>;</expr_stmt>

                <expr_stmt pos:start="289:17" pos:end="289:52"><expr pos:start="289:17" pos:end="289:51"><name pos:start="289:17" pos:end="289:23">maxdiff</name><operator pos:start="289:24" pos:end="289:24">=</operator> <call pos:start="289:26" pos:end="289:51"><name pos:start="289:26" pos:end="289:30">FFMAX</name><argument_list pos:start="289:31" pos:end="289:51">(<argument pos:start="289:32" pos:end="289:38"><expr pos:start="289:32" pos:end="289:38"><name pos:start="289:32" pos:end="289:38">maxdiff</name></expr></argument>, <argument pos:start="289:41" pos:end="289:50"><expr pos:start="289:41" pos:end="289:50"><call pos:start="289:41" pos:end="289:50"><name pos:start="289:41" pos:end="289:45">FFABS</name><argument_list pos:start="289:46" pos:end="289:50">(<argument pos:start="289:47" pos:end="289:49"><expr pos:start="289:47" pos:end="289:49"><name pos:start="289:47" pos:end="289:47">a</name><operator pos:start="289:48" pos:end="289:48">-</operator><name pos:start="289:49" pos:end="289:49">b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="293:13" pos:end="293:44"><expr pos:start="293:13" pos:end="293:43"><name pos:start="293:13" pos:end="293:15">sse</name><operator pos:start="293:16" pos:end="293:16">=</operator> <name pos:start="293:18" pos:end="293:23">sum_aa</name> <operator pos:start="293:25" pos:end="293:25">+</operator> <name pos:start="293:27" pos:end="293:32">sum_bb</name> <operator pos:start="293:34" pos:end="293:34">-</operator> <literal type="number" pos:start="293:36" pos:end="293:36">2</literal><operator pos:start="293:37" pos:end="293:37">*</operator><name pos:start="293:38" pos:end="293:43">sum_ab</name></expr>;</expr_stmt>

            <if_stmt pos:start="295:13" pos:end="295:48"><if pos:start="295:13" pos:end="295:48">if<condition pos:start="295:15" pos:end="295:41">(<expr pos:start="295:16" pos:end="295:40"><name pos:start="295:16" pos:end="295:31"><name pos:start="295:16" pos:end="295:18">sse</name> <argument_list type="generic" pos:start="295:20" pos:end="295:31">&lt; <argument pos:start="295:22" pos:end="295:29"><expr pos:start="295:22" pos:end="295:29"><literal type="number" pos:start="295:22" pos:end="295:22">0</literal> <operator pos:start="295:24" pos:end="295:25">&amp;&amp;</operator> <name pos:start="295:27" pos:end="295:29">sse</name></expr></argument> &gt;</argument_list></name> <operator pos:start="295:33" pos:end="295:33">-</operator><literal type="number" pos:start="295:34" pos:end="295:40">0.00001</literal></expr>)</condition><block type="pseudo" pos:start="295:43" pos:end="295:48"><block_content pos:start="295:43" pos:end="295:48"> <expr_stmt pos:start="295:43" pos:end="295:48"><expr pos:start="295:43" pos:end="295:47"><name pos:start="295:43" pos:end="295:45">sse</name><operator pos:start="295:46" pos:end="295:46">=</operator><literal type="number" pos:start="295:47" pos:end="295:47">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="295:50" pos:end="295:69">//fix rounding error</comment>



            <expr_stmt pos:start="299:13" pos:end="299:131"><expr pos:start="299:13" pos:end="299:130"><call pos:start="299:13" pos:end="299:130"><name pos:start="299:13" pos:end="299:19">fprintf</name><argument_list pos:start="299:20" pos:end="299:130">(<argument pos:start="299:21" pos:end="299:26"><expr pos:start="299:21" pos:end="299:26"><name pos:start="299:21" pos:end="299:26">stderr</name></expr></argument>, <argument pos:start="299:29" pos:end="299:58"><expr pos:start="299:29" pos:end="299:58"><literal type="string" pos:start="299:29" pos:end="299:58">"[e:%f c:%f max:%f] len:%5d\n"</literal></expr></argument>, <argument pos:start="299:61" pos:end="299:79"><expr pos:start="299:61" pos:end="299:79"><call pos:start="299:61" pos:end="299:79"><name pos:start="299:61" pos:end="299:64">sqrt</name><argument_list pos:start="299:65" pos:end="299:79">(<argument pos:start="299:66" pos:end="299:78"><expr pos:start="299:66" pos:end="299:78"><name pos:start="299:66" pos:end="299:68">sse</name><operator pos:start="299:69" pos:end="299:69">/</operator><name pos:start="299:70" pos:end="299:78">out_count</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="299:82" pos:end="299:109"><expr pos:start="299:82" pos:end="299:109"><name pos:start="299:82" pos:end="299:87">sum_ab</name><operator pos:start="299:88" pos:end="299:88">/</operator><operator pos:start="299:89" pos:end="299:89">(</operator><call pos:start="299:90" pos:end="299:108"><name pos:start="299:90" pos:end="299:93">sqrt</name><argument_list pos:start="299:94" pos:end="299:108">(<argument pos:start="299:95" pos:end="299:107"><expr pos:start="299:95" pos:end="299:107"><name pos:start="299:95" pos:end="299:100">sum_aa</name><operator pos:start="299:101" pos:end="299:101">*</operator><name pos:start="299:102" pos:end="299:107">sum_bb</name></expr></argument>)</argument_list></call><operator pos:start="299:109" pos:end="299:109">)</operator></expr></argument>, <argument pos:start="299:112" pos:end="299:118"><expr pos:start="299:112" pos:end="299:118"><name pos:start="299:112" pos:end="299:118">maxdiff</name></expr></argument>, <argument pos:start="299:121" pos:end="299:129"><expr pos:start="299:121" pos:end="299:129"><name pos:start="299:121" pos:end="299:129">out_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="305:9" pos:end="305:18"><expr pos:start="305:9" pos:end="305:17"><name pos:start="305:9" pos:end="305:15">flush_i</name><operator pos:start="305:16" pos:end="305:17">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:20"><expr pos:start="307:9" pos:end="307:19"><name pos:start="307:9" pos:end="307:15">flush_i</name><operator pos:start="307:16" pos:end="307:17">%=</operator><literal type="number" pos:start="307:18" pos:end="307:19">21</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:65"><expr pos:start="309:9" pos:end="309:64"><name pos:start="309:9" pos:end="309:19">flush_count</name> <operator pos:start="309:21" pos:end="309:21">=</operator> <call pos:start="309:23" pos:end="309:64"><name pos:start="309:23" pos:end="309:33">swr_convert</name><argument_list pos:start="309:34" pos:end="309:64">(<argument pos:start="309:35" pos:end="309:43"><expr pos:start="309:35" pos:end="309:43"><name pos:start="309:35" pos:end="309:43">backw_ctx</name></expr></argument>,<argument pos:start="309:45" pos:end="309:48"><expr pos:start="309:45" pos:end="309:48"><name pos:start="309:45" pos:end="309:48">aout</name></expr></argument>, <argument pos:start="309:51" pos:end="309:57"><expr pos:start="309:51" pos:end="309:57"><name pos:start="309:51" pos:end="309:57">flush_i</name></expr></argument>, <argument pos:start="309:60" pos:end="309:60"><expr pos:start="309:60" pos:end="309:60"><literal type="number" pos:start="309:60" pos:end="309:60">0</literal></expr></argument>, <argument pos:start="309:63" pos:end="309:63"><expr pos:start="309:63" pos:end="309:63"><literal type="number" pos:start="309:63" pos:end="309:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:58"><expr pos:start="311:9" pos:end="311:57"><call pos:start="311:9" pos:end="311:57"><name pos:start="311:9" pos:end="311:13">shift</name><argument_list pos:start="311:14" pos:end="311:57">(<argument pos:start="311:15" pos:end="311:18"><expr pos:start="311:15" pos:end="311:18"><name pos:start="311:15" pos:end="311:18">aout</name></expr></argument>,  <argument pos:start="311:22" pos:end="311:28"><expr pos:start="311:22" pos:end="311:28"><name pos:start="311:22" pos:end="311:28">flush_i</name></expr></argument>, <argument pos:start="311:31" pos:end="311:41"><expr pos:start="311:31" pos:end="311:41"><name pos:start="311:31" pos:end="311:41">in_ch_count</name></expr></argument>, <argument pos:start="311:44" pos:end="311:56"><expr pos:start="311:44" pos:end="311:56"><name pos:start="311:44" pos:end="311:56">in_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="313:9" pos:end="313:73"><expr pos:start="313:9" pos:end="313:72"><name pos:start="313:9" pos:end="313:19">flush_count</name><operator pos:start="313:20" pos:end="313:21">+=</operator> <call pos:start="313:23" pos:end="313:72"><name pos:start="313:23" pos:end="313:33">swr_convert</name><argument_list pos:start="313:34" pos:end="313:72">(<argument pos:start="313:35" pos:end="313:43"><expr pos:start="313:35" pos:end="313:43"><name pos:start="313:35" pos:end="313:43">backw_ctx</name></expr></argument>,<argument pos:start="313:45" pos:end="313:48"><expr pos:start="313:45" pos:end="313:48"><name pos:start="313:45" pos:end="313:48">aout</name></expr></argument>, <argument pos:start="313:51" pos:end="313:65"><expr pos:start="313:51" pos:end="313:65"><name pos:start="313:51" pos:end="313:57">SAMPLES</name><operator pos:start="313:58" pos:end="313:58">-</operator><name pos:start="313:59" pos:end="313:65">flush_i</name></expr></argument>, <argument pos:start="313:68" pos:end="313:68"><expr pos:start="313:68" pos:end="313:68"><literal type="number" pos:start="313:68" pos:end="313:68">0</literal></expr></argument>, <argument pos:start="313:71" pos:end="313:71"><expr pos:start="313:71" pos:end="313:71"><literal type="number" pos:start="313:71" pos:end="313:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:58"><expr pos:start="315:9" pos:end="315:57"><call pos:start="315:9" pos:end="315:57"><name pos:start="315:9" pos:end="315:13">shift</name><argument_list pos:start="315:14" pos:end="315:57">(<argument pos:start="315:15" pos:end="315:18"><expr pos:start="315:15" pos:end="315:18"><name pos:start="315:15" pos:end="315:18">aout</name></expr></argument>, <argument pos:start="315:21" pos:end="315:28"><expr pos:start="315:21" pos:end="315:28"><operator pos:start="315:21" pos:end="315:21">-</operator><name pos:start="315:22" pos:end="315:28">flush_i</name></expr></argument>, <argument pos:start="315:31" pos:end="315:41"><expr pos:start="315:31" pos:end="315:41"><name pos:start="315:31" pos:end="315:41">in_ch_count</name></expr></argument>, <argument pos:start="315:44" pos:end="315:56"><expr pos:start="315:44" pos:end="315:56"><name pos:start="315:44" pos:end="315:56">in_sample_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="317:9" pos:end="363:9"><if pos:start="317:9" pos:end="363:9">if<condition pos:start="317:11" pos:end="317:23">(<expr pos:start="317:12" pos:end="317:22"><name pos:start="317:12" pos:end="317:22">flush_count</name></expr>)</condition><block pos:start="317:24" pos:end="363:9">{<block_content pos:start="319:13" pos:end="361:13">

            <for pos:start="319:13" pos:end="361:13">for<control pos:start="319:16" pos:end="319:43">(<init pos:start="319:17" pos:end="319:21"><expr pos:start="319:17" pos:end="319:20"><name pos:start="319:17" pos:end="319:18">ch</name><operator pos:start="319:19" pos:end="319:19">=</operator><literal type="number" pos:start="319:20" pos:end="319:20">0</literal></expr>;</init> <condition pos:start="319:23" pos:end="319:37"><expr pos:start="319:23" pos:end="319:36"><name pos:start="319:23" pos:end="319:24">ch</name><operator pos:start="319:25" pos:end="319:25">&lt;</operator><name pos:start="319:26" pos:end="319:36">in_ch_count</name></expr>;</condition> <incr pos:start="319:39" pos:end="319:42"><expr pos:start="319:39" pos:end="319:42"><name pos:start="319:39" pos:end="319:40">ch</name><operator pos:start="319:41" pos:end="319:42">++</operator></expr></incr>)</control><block pos:start="319:44" pos:end="361:13">{<block_content pos:start="321:17" pos:end="359:154">

                <decl_stmt pos:start="321:17" pos:end="321:38"><decl pos:start="321:17" pos:end="321:26"><type pos:start="321:17" pos:end="321:22"><name pos:start="321:17" pos:end="321:22">double</name></type> <name pos:start="321:24" pos:end="321:26">sse</name></decl>, <decl pos:start="321:29" pos:end="321:37"><type ref="prev" pos:start="321:17" pos:end="321:22"/><name pos:start="321:29" pos:end="321:35">maxdiff</name><init pos:start="321:36" pos:end="321:37">=<expr pos:start="321:37" pos:end="321:37"><literal type="number" pos:start="321:37" pos:end="321:37">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="323:17" pos:end="323:32"><decl pos:start="323:17" pos:end="323:31"><type pos:start="323:17" pos:end="323:22"><name pos:start="323:17" pos:end="323:22">double</name></type> <name pos:start="323:24" pos:end="323:28">sum_a</name><init pos:start="323:29" pos:end="323:31">= <expr pos:start="323:31" pos:end="323:31"><literal type="number" pos:start="323:31" pos:end="323:31">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="325:17" pos:end="325:32"><decl pos:start="325:17" pos:end="325:31"><type pos:start="325:17" pos:end="325:22"><name pos:start="325:17" pos:end="325:22">double</name></type> <name pos:start="325:24" pos:end="325:28">sum_b</name><init pos:start="325:29" pos:end="325:31">= <expr pos:start="325:31" pos:end="325:31"><literal type="number" pos:start="325:31" pos:end="325:31">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="327:17" pos:end="327:33"><decl pos:start="327:17" pos:end="327:32"><type pos:start="327:17" pos:end="327:22"><name pos:start="327:17" pos:end="327:22">double</name></type> <name pos:start="327:24" pos:end="327:29">sum_aa</name><init pos:start="327:30" pos:end="327:32">= <expr pos:start="327:32" pos:end="327:32"><literal type="number" pos:start="327:32" pos:end="327:32">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="329:17" pos:end="329:33"><decl pos:start="329:17" pos:end="329:32"><type pos:start="329:17" pos:end="329:22"><name pos:start="329:17" pos:end="329:22">double</name></type> <name pos:start="329:24" pos:end="329:29">sum_bb</name><init pos:start="329:30" pos:end="329:32">= <expr pos:start="329:32" pos:end="329:32"><literal type="number" pos:start="329:32" pos:end="329:32">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="331:17" pos:end="331:33"><decl pos:start="331:17" pos:end="331:32"><type pos:start="331:17" pos:end="331:22"><name pos:start="331:17" pos:end="331:22">double</name></type> <name pos:start="331:24" pos:end="331:29">sum_ab</name><init pos:start="331:30" pos:end="331:32">= <expr pos:start="331:32" pos:end="331:32"><literal type="number" pos:start="331:32" pos:end="331:32">0</literal></expr></init></decl>;</decl_stmt>

                <for pos:start="333:17" pos:end="351:17">for<control pos:start="333:20" pos:end="333:44">(<init pos:start="333:21" pos:end="333:24"><expr pos:start="333:21" pos:end="333:23"><name pos:start="333:21" pos:end="333:21">i</name><operator pos:start="333:22" pos:end="333:22">=</operator><literal type="number" pos:start="333:23" pos:end="333:23">0</literal></expr>;</init> <condition pos:start="333:26" pos:end="333:39"><expr pos:start="333:26" pos:end="333:38"><name pos:start="333:26" pos:end="333:26">i</name><operator pos:start="333:27" pos:end="333:27">&lt;</operator><name pos:start="333:28" pos:end="333:38">flush_count</name></expr>;</condition> <incr pos:start="333:41" pos:end="333:43"><expr pos:start="333:41" pos:end="333:43"><name pos:start="333:41" pos:end="333:41">i</name><operator pos:start="333:42" pos:end="333:43">++</operator></expr></incr>)</control><block pos:start="333:45" pos:end="351:17">{<block_content pos:start="335:21" pos:end="349:56">

                    <decl_stmt pos:start="335:21" pos:end="335:85"><decl pos:start="335:21" pos:end="335:84"><type pos:start="335:21" pos:end="335:26"><name pos:start="335:21" pos:end="335:26">double</name></type> <name pos:start="335:28" pos:end="335:28">a</name><init pos:start="335:29" pos:end="335:84">= <expr pos:start="335:31" pos:end="335:84"><call pos:start="335:31" pos:end="335:84"><name pos:start="335:31" pos:end="335:33">get</name><argument_list pos:start="335:34" pos:end="335:84">(<argument pos:start="335:35" pos:end="335:37"><expr pos:start="335:35" pos:end="335:37"><name pos:start="335:35" pos:end="335:37">ain</name></expr></argument> , <argument pos:start="335:41" pos:end="335:42"><expr pos:start="335:41" pos:end="335:42"><name pos:start="335:41" pos:end="335:42">ch</name></expr></argument>, <argument pos:start="335:45" pos:end="335:55"><expr pos:start="335:45" pos:end="335:55"><name pos:start="335:45" pos:end="335:45">i</name><operator pos:start="335:46" pos:end="335:46">+</operator><name pos:start="335:47" pos:end="335:55">out_count</name></expr></argument>, <argument pos:start="335:58" pos:end="335:68"><expr pos:start="335:58" pos:end="335:68"><name pos:start="335:58" pos:end="335:68">in_ch_count</name></expr></argument>, <argument pos:start="335:71" pos:end="335:83"><expr pos:start="335:71" pos:end="335:83"><name pos:start="335:71" pos:end="335:83">in_sample_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="337:21" pos:end="337:75"><decl pos:start="337:21" pos:end="337:74"><type pos:start="337:21" pos:end="337:26"><name pos:start="337:21" pos:end="337:26">double</name></type> <name pos:start="337:28" pos:end="337:28">b</name><init pos:start="337:29" pos:end="337:74">= <expr pos:start="337:31" pos:end="337:74"><call pos:start="337:31" pos:end="337:74"><name pos:start="337:31" pos:end="337:33">get</name><argument_list pos:start="337:34" pos:end="337:74">(<argument pos:start="337:35" pos:end="337:38"><expr pos:start="337:35" pos:end="337:38"><name pos:start="337:35" pos:end="337:38">aout</name></expr></argument>, <argument pos:start="337:41" pos:end="337:42"><expr pos:start="337:41" pos:end="337:42"><name pos:start="337:41" pos:end="337:42">ch</name></expr></argument>, <argument pos:start="337:45" pos:end="337:45"><expr pos:start="337:45" pos:end="337:45"><name pos:start="337:45" pos:end="337:45">i</name></expr></argument>, <argument pos:start="337:48" pos:end="337:58"><expr pos:start="337:48" pos:end="337:58"><name pos:start="337:48" pos:end="337:58">in_ch_count</name></expr></argument>, <argument pos:start="337:61" pos:end="337:73"><expr pos:start="337:61" pos:end="337:73"><name pos:start="337:61" pos:end="337:73">in_sample_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="339:21" pos:end="339:31"><expr pos:start="339:21" pos:end="339:30"><name pos:start="339:21" pos:end="339:25">sum_a</name> <operator pos:start="339:27" pos:end="339:28">+=</operator> <name pos:start="339:30" pos:end="339:30">a</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="341:21" pos:end="341:31"><expr pos:start="341:21" pos:end="341:30"><name pos:start="341:21" pos:end="341:25">sum_b</name> <operator pos:start="341:27" pos:end="341:28">+=</operator> <name pos:start="341:30" pos:end="341:30">b</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="343:21" pos:end="343:33"><expr pos:start="343:21" pos:end="343:32"><name pos:start="343:21" pos:end="343:26">sum_aa</name><operator pos:start="343:27" pos:end="343:28">+=</operator> <name pos:start="343:30" pos:end="343:30">a</name><operator pos:start="343:31" pos:end="343:31">*</operator><name pos:start="343:32" pos:end="343:32">a</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="345:21" pos:end="345:33"><expr pos:start="345:21" pos:end="345:32"><name pos:start="345:21" pos:end="345:26">sum_bb</name><operator pos:start="345:27" pos:end="345:28">+=</operator> <name pos:start="345:30" pos:end="345:30">b</name><operator pos:start="345:31" pos:end="345:31">*</operator><name pos:start="345:32" pos:end="345:32">b</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="347:21" pos:end="347:33"><expr pos:start="347:21" pos:end="347:32"><name pos:start="347:21" pos:end="347:26">sum_ab</name><operator pos:start="347:27" pos:end="347:28">+=</operator> <name pos:start="347:30" pos:end="347:30">a</name><operator pos:start="347:31" pos:end="347:31">*</operator><name pos:start="347:32" pos:end="347:32">b</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="349:21" pos:end="349:56"><expr pos:start="349:21" pos:end="349:55"><name pos:start="349:21" pos:end="349:27">maxdiff</name><operator pos:start="349:28" pos:end="349:28">=</operator> <call pos:start="349:30" pos:end="349:55"><name pos:start="349:30" pos:end="349:34">FFMAX</name><argument_list pos:start="349:35" pos:end="349:55">(<argument pos:start="349:36" pos:end="349:42"><expr pos:start="349:36" pos:end="349:42"><name pos:start="349:36" pos:end="349:42">maxdiff</name></expr></argument>, <argument pos:start="349:45" pos:end="349:54"><expr pos:start="349:45" pos:end="349:54"><call pos:start="349:45" pos:end="349:54"><name pos:start="349:45" pos:end="349:49">FFABS</name><argument_list pos:start="349:50" pos:end="349:54">(<argument pos:start="349:51" pos:end="349:53"><expr pos:start="349:51" pos:end="349:53"><name pos:start="349:51" pos:end="349:51">a</name><operator pos:start="349:52" pos:end="349:52">-</operator><name pos:start="349:53" pos:end="349:53">b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="353:17" pos:end="353:48"><expr pos:start="353:17" pos:end="353:47"><name pos:start="353:17" pos:end="353:19">sse</name><operator pos:start="353:20" pos:end="353:20">=</operator> <name pos:start="353:22" pos:end="353:27">sum_aa</name> <operator pos:start="353:29" pos:end="353:29">+</operator> <name pos:start="353:31" pos:end="353:36">sum_bb</name> <operator pos:start="353:38" pos:end="353:38">-</operator> <literal type="number" pos:start="353:40" pos:end="353:40">2</literal><operator pos:start="353:41" pos:end="353:41">*</operator><name pos:start="353:42" pos:end="353:47">sum_ab</name></expr>;</expr_stmt>

                <if_stmt pos:start="355:17" pos:end="355:52"><if pos:start="355:17" pos:end="355:52">if<condition pos:start="355:19" pos:end="355:45">(<expr pos:start="355:20" pos:end="355:44"><name pos:start="355:20" pos:end="355:35"><name pos:start="355:20" pos:end="355:22">sse</name> <argument_list type="generic" pos:start="355:24" pos:end="355:35">&lt; <argument pos:start="355:26" pos:end="355:33"><expr pos:start="355:26" pos:end="355:33"><literal type="number" pos:start="355:26" pos:end="355:26">0</literal> <operator pos:start="355:28" pos:end="355:29">&amp;&amp;</operator> <name pos:start="355:31" pos:end="355:33">sse</name></expr></argument> &gt;</argument_list></name> <operator pos:start="355:37" pos:end="355:37">-</operator><literal type="number" pos:start="355:38" pos:end="355:44">0.00001</literal></expr>)</condition><block type="pseudo" pos:start="355:47" pos:end="355:52"><block_content pos:start="355:47" pos:end="355:52"> <expr_stmt pos:start="355:47" pos:end="355:52"><expr pos:start="355:47" pos:end="355:51"><name pos:start="355:47" pos:end="355:49">sse</name><operator pos:start="355:50" pos:end="355:50">=</operator><literal type="number" pos:start="355:51" pos:end="355:51">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="355:54" pos:end="355:73">//fix rounding error</comment>



                <expr_stmt pos:start="359:17" pos:end="359:154"><expr pos:start="359:17" pos:end="359:153"><call pos:start="359:17" pos:end="359:153"><name pos:start="359:17" pos:end="359:23">fprintf</name><argument_list pos:start="359:24" pos:end="359:153">(<argument pos:start="359:25" pos:end="359:30"><expr pos:start="359:25" pos:end="359:30"><name pos:start="359:25" pos:end="359:30">stderr</name></expr></argument>, <argument pos:start="359:33" pos:end="359:68"><expr pos:start="359:33" pos:end="359:68"><literal type="string" pos:start="359:33" pos:end="359:68">"[e:%f c:%f max:%f] len:%5d F:%3d\n"</literal></expr></argument>, <argument pos:start="359:71" pos:end="359:91"><expr pos:start="359:71" pos:end="359:91"><call pos:start="359:71" pos:end="359:91"><name pos:start="359:71" pos:end="359:74">sqrt</name><argument_list pos:start="359:75" pos:end="359:91">(<argument pos:start="359:76" pos:end="359:90"><expr pos:start="359:76" pos:end="359:90"><name pos:start="359:76" pos:end="359:78">sse</name><operator pos:start="359:79" pos:end="359:79">/</operator><name pos:start="359:80" pos:end="359:90">flush_count</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="359:94" pos:end="359:121"><expr pos:start="359:94" pos:end="359:121"><name pos:start="359:94" pos:end="359:99">sum_ab</name><operator pos:start="359:100" pos:end="359:100">/</operator><operator pos:start="359:101" pos:end="359:101">(</operator><call pos:start="359:102" pos:end="359:120"><name pos:start="359:102" pos:end="359:105">sqrt</name><argument_list pos:start="359:106" pos:end="359:120">(<argument pos:start="359:107" pos:end="359:119"><expr pos:start="359:107" pos:end="359:119"><name pos:start="359:107" pos:end="359:112">sum_aa</name><operator pos:start="359:113" pos:end="359:113">*</operator><name pos:start="359:114" pos:end="359:119">sum_bb</name></expr></argument>)</argument_list></call><operator pos:start="359:121" pos:end="359:121">)</operator></expr></argument>, <argument pos:start="359:124" pos:end="359:130"><expr pos:start="359:124" pos:end="359:130"><name pos:start="359:124" pos:end="359:130">maxdiff</name></expr></argument>, <argument pos:start="359:133" pos:end="359:143"><expr pos:start="359:133" pos:end="359:143"><name pos:start="359:133" pos:end="359:143">flush_count</name></expr></argument>, <argument pos:start="359:146" pos:end="359:152"><expr pos:start="359:146" pos:end="359:152"><name pos:start="359:146" pos:end="359:152">flush_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>





        <expr_stmt pos:start="369:9" pos:end="369:30"><expr pos:start="369:9" pos:end="369:29"><call pos:start="369:9" pos:end="369:29"><name pos:start="369:9" pos:end="369:15">fprintf</name><argument_list pos:start="369:16" pos:end="369:29">(<argument pos:start="369:17" pos:end="369:22"><expr pos:start="369:17" pos:end="369:22"><name pos:start="369:17" pos:end="369:22">stderr</name></expr></argument>, <argument pos:start="369:25" pos:end="369:28"><expr pos:start="369:25" pos:end="369:28"><literal type="string" pos:start="369:25" pos:end="369:28">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="375:5" pos:end="375:13">return <expr pos:start="375:12" pos:end="375:12"><literal type="number" pos:start="375:12" pos:end="375:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
