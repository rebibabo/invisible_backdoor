<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4133.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:35">nvenc_check_cuda</name><parameter_list pos:start="1:36" pos:end="1:58">(<parameter pos:start="1:37" pos:end="1:57"><decl pos:start="1:37" pos:end="1:57"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:50">AVCodecContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:1">{<block_content pos:start="5:5" pos:end="139:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:20">device_count</name> <init pos:start="5:22" pos:end="5:24">= <expr pos:start="5:24" pos:end="5:24"><literal type="number" pos:start="5:24" pos:end="5:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">CUdevice</name></type> <name pos:start="7:14" pos:end="7:22">cu_device</name> <init pos:start="7:24" pos:end="7:26">= <expr pos:start="7:26" pos:end="7:26"><literal type="number" pos:start="7:26" pos:end="7:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:22"><name pos:start="9:10" pos:end="9:17">gpu_name</name><index pos:start="9:18" pos:end="9:22">[<expr pos:start="9:19" pos:end="9:21"><literal type="number" pos:start="9:19" pos:end="9:21">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">smminor</name> <init pos:start="11:17" pos:end="11:19">= <expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr></init></decl>, <decl pos:start="11:22" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:28">smmajor</name> <init pos:start="11:30" pos:end="11:32">= <expr pos:start="11:32" pos:end="11:32"><literal type="number" pos:start="11:32" pos:end="11:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:16"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:16">smver</name></decl>, <decl pos:start="13:19" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:19" pos:end="13:30">target_smver</name></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:41"><decl pos:start="17:5" pos:end="17:40"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">NvencContext</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:21">ctx</name> <init pos:start="17:23" pos:end="17:40">= <expr pos:start="17:25" pos:end="17:40"><name pos:start="17:25" pos:end="17:40"><name pos:start="17:25" pos:end="17:29">avctx</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:59"><decl pos:start="19:5" pos:end="19:58"><type pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:25">NvencDynLoadFunctions</name> <modifier pos:start="19:27" pos:end="19:27">*</modifier></type><name pos:start="19:28" pos:end="19:32">dl_fn</name> <init pos:start="19:34" pos:end="19:58">= <expr pos:start="19:36" pos:end="19:58"><operator pos:start="19:36" pos:end="19:36">&amp;</operator><name pos:start="19:37" pos:end="19:58"><name pos:start="19:37" pos:end="19:39">ctx</name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:58">nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="23:5" pos:end="43:5">switch <condition pos:start="23:12" pos:end="23:29">(<expr pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:17">avctx</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:24">codec</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:28">id</name></name></expr>)</condition> <block pos:start="23:31" pos:end="43:5">{<block_content pos:start="25:5" pos:end="41:19">

    <case pos:start="25:5" pos:end="25:26">case <expr pos:start="25:10" pos:end="25:25"><name pos:start="25:10" pos:end="25:25">AV_CODEC_ID_H264</name></expr>:</case>

        <expr_stmt pos:start="27:9" pos:end="27:77"><expr pos:start="27:9" pos:end="27:76"><name pos:start="27:9" pos:end="27:20">target_smver</name> <operator pos:start="27:22" pos:end="27:22">=</operator> <ternary pos:start="27:24" pos:end="27:76"><condition pos:start="27:24" pos:end="27:64"><expr pos:start="27:24" pos:end="27:62"><name pos:start="27:24" pos:end="27:40"><name pos:start="27:24" pos:end="27:26">ctx</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:40">data_pix_fmt</name></name> <operator pos:start="27:42" pos:end="27:43">==</operator> <name pos:start="27:45" pos:end="27:62">AV_PIX_FMT_YUV444P</name></expr> ?</condition><then pos:start="27:66" pos:end="27:69"> <expr pos:start="27:66" pos:end="27:69"><literal type="number" pos:start="27:66" pos:end="27:69">0x52</literal></expr> </then><else pos:start="27:71" pos:end="27:76">: <expr pos:start="27:73" pos:end="27:76"><literal type="number" pos:start="27:73" pos:end="27:76">0x30</literal></expr></else></ternary></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:26">case <expr pos:start="31:10" pos:end="31:25"><name pos:start="31:10" pos:end="31:25">AV_CODEC_ID_H265</name></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:28"><expr pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:20">target_smver</name> <operator pos:start="33:22" pos:end="33:22">=</operator> <literal type="number" pos:start="33:24" pos:end="33:27">0x52</literal></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <default pos:start="37:5" pos:end="37:12">default:</default>

        <expr_stmt pos:start="39:9" pos:end="39:60"><expr pos:start="39:9" pos:end="39:59"><call pos:start="39:9" pos:end="39:59"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:59">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">avctx</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="39:37" pos:end="39:58"><expr pos:start="39:37" pos:end="39:58"><literal type="string" pos:start="39:37" pos:end="39:58">"Unknown codec name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:19">goto <name pos:start="41:14" pos:end="41:18">error</name>;</goto>

    </block_content>}</block></switch>



    <if_stmt pos:start="47:5" pos:end="49:28"><if pos:start="47:5" pos:end="49:28">if <condition pos:start="47:8" pos:end="47:47">(<expr pos:start="47:9" pos:end="47:46"><name pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:11">ctx</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:19">preset</name></name> <operator pos:start="47:21" pos:end="47:22">&gt;=</operator> <name pos:start="47:24" pos:end="47:46">PRESET_LOSSLESS_DEFAULT</name></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:28"><block_content pos:start="49:9" pos:end="49:28">

        <expr_stmt pos:start="49:9" pos:end="49:28"><expr pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:20">target_smver</name> <operator pos:start="49:22" pos:end="49:22">=</operator> <literal type="number" pos:start="49:24" pos:end="49:27">0x52</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="55:17"><if pos:start="53:5" pos:end="55:17">if <condition pos:start="53:8" pos:end="53:34">(<expr pos:start="53:9" pos:end="53:33"><operator pos:start="53:9" pos:end="53:9">!</operator><call pos:start="53:10" pos:end="53:33"><name pos:start="53:10" pos:end="53:26">nvenc_dyload_cuda</name><argument_list pos:start="53:27" pos:end="53:33">(<argument pos:start="53:28" pos:end="53:32"><expr pos:start="53:28" pos:end="53:32"><name pos:start="53:28" pos:end="53:32">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:17"><block_content pos:start="55:9" pos:end="55:17">

        <return pos:start="55:9" pos:end="55:17">return <expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="61:17"><if pos:start="59:5" pos:end="61:17">if <condition pos:start="59:8" pos:end="59:38">(<expr pos:start="59:9" pos:end="59:37"><name pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:13">dl_fn</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:33">nvenc_device_count</name></name> <operator pos:start="59:35" pos:end="59:35">&gt;</operator> <literal type="number" pos:start="59:37" pos:end="59:37">0</literal></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:17"><block_content pos:start="61:9" pos:end="61:17">

        <return pos:start="61:9" pos:end="61:17">return <expr pos:start="61:16" pos:end="61:16"><literal type="number" pos:start="61:16" pos:end="61:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:41"><expr pos:start="65:5" pos:end="65:40"><call pos:start="65:5" pos:end="65:40"><name pos:start="65:5" pos:end="65:21">check_cuda_errors</name><argument_list pos:start="65:22" pos:end="65:40">(<argument pos:start="65:23" pos:end="65:39"><expr pos:start="65:23" pos:end="65:39"><call pos:start="65:23" pos:end="65:39"><name pos:start="65:23" pos:end="65:36"><name pos:start="65:23" pos:end="65:27">dl_fn</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:36">cu_init</name></name><argument_list pos:start="65:37" pos:end="65:39">(<argument pos:start="65:38" pos:end="65:38"><expr pos:start="65:38" pos:end="65:38"><literal type="number" pos:start="65:38" pos:end="65:38">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:65"><expr pos:start="69:5" pos:end="69:64"><call pos:start="69:5" pos:end="69:64"><name pos:start="69:5" pos:end="69:21">check_cuda_errors</name><argument_list pos:start="69:22" pos:end="69:64">(<argument pos:start="69:23" pos:end="69:63"><expr pos:start="69:23" pos:end="69:63"><call pos:start="69:23" pos:end="69:63"><name pos:start="69:23" pos:end="69:48"><name pos:start="69:23" pos:end="69:27">dl_fn</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:48">cu_device_get_count</name></name><argument_list pos:start="69:49" pos:end="69:63">(<argument pos:start="69:50" pos:end="69:62"><expr pos:start="69:50" pos:end="69:62"><operator pos:start="69:50" pos:end="69:50">&amp;</operator><name pos:start="69:51" pos:end="69:62">device_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:22">(<expr pos:start="73:9" pos:end="73:21"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:21">device_count</name></expr>)</condition> <block pos:start="73:24" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:19">

        <expr_stmt pos:start="75:9" pos:end="75:71"><expr pos:start="75:9" pos:end="75:70"><call pos:start="75:9" pos:end="75:70"><name pos:start="75:9" pos:end="75:14">av_log</name><argument_list pos:start="75:15" pos:end="75:70">(<argument pos:start="75:16" pos:end="75:20"><expr pos:start="75:16" pos:end="75:20"><name pos:start="75:16" pos:end="75:20">avctx</name></expr></argument>, <argument pos:start="75:23" pos:end="75:34"><expr pos:start="75:23" pos:end="75:34"><name pos:start="75:23" pos:end="75:34">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="75:37" pos:end="75:69"><expr pos:start="75:37" pos:end="75:69"><literal type="string" pos:start="75:37" pos:end="75:69">"No CUDA capable devices found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:19">goto <name pos:start="77:14" pos:end="77:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:83"><expr pos:start="83:5" pos:end="83:82"><call pos:start="83:5" pos:end="83:82"><name pos:start="83:5" pos:end="83:10">av_log</name><argument_list pos:start="83:11" pos:end="83:82">(<argument pos:start="83:12" pos:end="83:16"><expr pos:start="83:12" pos:end="83:16"><name pos:start="83:12" pos:end="83:16">avctx</name></expr></argument>, <argument pos:start="83:19" pos:end="83:32"><expr pos:start="83:19" pos:end="83:32"><name pos:start="83:19" pos:end="83:32">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="83:35" pos:end="83:67"><expr pos:start="83:35" pos:end="83:67"><literal type="string" pos:start="83:35" pos:end="83:67">"%d CUDA capable devices found\n"</literal></expr></argument>, <argument pos:start="83:70" pos:end="83:81"><expr pos:start="83:70" pos:end="83:81"><name pos:start="83:70" pos:end="83:81">device_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:34"><expr pos:start="87:5" pos:end="87:33"><name pos:start="87:5" pos:end="87:29"><name pos:start="87:5" pos:end="87:9">dl_fn</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:29">nvenc_device_count</name></name> <operator pos:start="87:31" pos:end="87:31">=</operator> <literal type="number" pos:start="87:33" pos:end="87:33">0</literal></expr>;</expr_stmt>



    <for pos:start="91:5" pos:end="113:5">for <control pos:start="91:9" pos:end="91:38">(<init pos:start="91:10" pos:end="91:15"><expr pos:start="91:10" pos:end="91:14"><name pos:start="91:10" pos:end="91:10">i</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <literal type="number" pos:start="91:14" pos:end="91:14">0</literal></expr>;</init> <condition pos:start="91:17" pos:end="91:33"><expr pos:start="91:17" pos:end="91:32"><name pos:start="91:17" pos:end="91:17">i</name> <operator pos:start="91:19" pos:end="91:19">&lt;</operator> <name pos:start="91:21" pos:end="91:32">device_count</name></expr>;</condition> <incr pos:start="91:35" pos:end="91:37"><expr pos:start="91:35" pos:end="91:37"><operator pos:start="91:35" pos:end="91:36">++</operator><name pos:start="91:37" pos:end="91:37">i</name></expr></incr>)</control> <block pos:start="91:40" pos:end="113:5">{<block_content pos:start="93:9" pos:end="111:74">

        <expr_stmt pos:start="93:9" pos:end="93:63"><expr pos:start="93:9" pos:end="93:62"><call pos:start="93:9" pos:end="93:62"><name pos:start="93:9" pos:end="93:25">check_cuda_errors</name><argument_list pos:start="93:26" pos:end="93:62">(<argument pos:start="93:27" pos:end="93:61"><expr pos:start="93:27" pos:end="93:61"><call pos:start="93:27" pos:end="93:61"><name pos:start="93:27" pos:end="93:46"><name pos:start="93:27" pos:end="93:31">dl_fn</name><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:46">cu_device_get</name></name><argument_list pos:start="93:47" pos:end="93:61">(<argument pos:start="93:48" pos:end="93:57"><expr pos:start="93:48" pos:end="93:57"><operator pos:start="93:48" pos:end="93:48">&amp;</operator><name pos:start="93:49" pos:end="93:57">cu_device</name></expr></argument>, <argument pos:start="93:60" pos:end="93:60"><expr pos:start="93:60" pos:end="93:60"><name pos:start="93:60" pos:end="93:60">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:92"><expr pos:start="95:9" pos:end="95:91"><call pos:start="95:9" pos:end="95:91"><name pos:start="95:9" pos:end="95:25">check_cuda_errors</name><argument_list pos:start="95:26" pos:end="95:91">(<argument pos:start="95:27" pos:end="95:90"><expr pos:start="95:27" pos:end="95:90"><call pos:start="95:27" pos:end="95:90"><name pos:start="95:27" pos:end="95:51"><name pos:start="95:27" pos:end="95:31">dl_fn</name><operator pos:start="95:32" pos:end="95:33">-&gt;</operator><name pos:start="95:34" pos:end="95:51">cu_device_get_name</name></name><argument_list pos:start="95:52" pos:end="95:90">(<argument pos:start="95:53" pos:end="95:60"><expr pos:start="95:53" pos:end="95:60"><name pos:start="95:53" pos:end="95:60">gpu_name</name></expr></argument>, <argument pos:start="95:63" pos:end="95:78"><expr pos:start="95:63" pos:end="95:78"><sizeof pos:start="95:63" pos:end="95:78">sizeof<argument_list pos:start="95:69" pos:end="95:78">(<argument pos:start="95:70" pos:end="95:77"><expr pos:start="95:70" pos:end="95:77"><name pos:start="95:70" pos:end="95:77">gpu_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="95:81" pos:end="95:89"><expr pos:start="95:81" pos:end="95:89"><name pos:start="95:81" pos:end="95:89">cu_device</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:94"><expr pos:start="97:9" pos:end="97:93"><call pos:start="97:9" pos:end="97:93"><name pos:start="97:9" pos:end="97:25">check_cuda_errors</name><argument_list pos:start="97:26" pos:end="97:93">(<argument pos:start="97:27" pos:end="97:92"><expr pos:start="97:27" pos:end="97:92"><call pos:start="97:27" pos:end="97:92"><name pos:start="97:27" pos:end="97:61"><name pos:start="97:27" pos:end="97:31">dl_fn</name><operator pos:start="97:32" pos:end="97:33">-&gt;</operator><name pos:start="97:34" pos:end="97:61">cu_device_compute_capability</name></name><argument_list pos:start="97:62" pos:end="97:92">(<argument pos:start="97:63" pos:end="97:70"><expr pos:start="97:63" pos:end="97:70"><operator pos:start="97:63" pos:end="97:63">&amp;</operator><name pos:start="97:64" pos:end="97:70">smmajor</name></expr></argument>, <argument pos:start="97:73" pos:end="97:80"><expr pos:start="97:73" pos:end="97:80"><operator pos:start="97:73" pos:end="97:73">&amp;</operator><name pos:start="97:74" pos:end="97:80">smminor</name></expr></argument>, <argument pos:start="97:83" pos:end="97:91"><expr pos:start="97:83" pos:end="97:91"><name pos:start="97:83" pos:end="97:91">cu_device</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:41"><expr pos:start="101:9" pos:end="101:40"><name pos:start="101:9" pos:end="101:13">smver</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <operator pos:start="101:17" pos:end="101:17">(</operator><name pos:start="101:18" pos:end="101:24">smmajor</name> <operator pos:start="101:26" pos:end="101:27">&lt;&lt;</operator> <literal type="number" pos:start="101:29" pos:end="101:29">4</literal><operator pos:start="101:30" pos:end="101:30">)</operator> <operator pos:start="101:32" pos:end="101:32">|</operator> <name pos:start="101:34" pos:end="101:40">smminor</name></expr>;</expr_stmt>



        <expr_stmt pos:start="105:9" pos:end="105:183"><expr pos:start="105:9" pos:end="105:182"><call pos:start="105:9" pos:end="105:182"><name pos:start="105:9" pos:end="105:14">av_log</name><argument_list pos:start="105:15" pos:end="105:182">(<argument pos:start="105:16" pos:end="105:20"><expr pos:start="105:16" pos:end="105:20"><name pos:start="105:16" pos:end="105:20">avctx</name></expr></argument>, <argument pos:start="105:23" pos:end="105:36"><expr pos:start="105:23" pos:end="105:36"><name pos:start="105:23" pos:end="105:36">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="105:39" pos:end="105:93"><expr pos:start="105:39" pos:end="105:93"><literal type="string" pos:start="105:39" pos:end="105:93">"[ GPU #%d - &lt; %s &gt; has Compute SM %d.%d, NVENC %s ]\n"</literal></expr></argument>, <argument pos:start="105:96" pos:end="105:96"><expr pos:start="105:96" pos:end="105:96"><name pos:start="105:96" pos:end="105:96">i</name></expr></argument>, <argument pos:start="105:99" pos:end="105:106"><expr pos:start="105:99" pos:end="105:106"><name pos:start="105:99" pos:end="105:106">gpu_name</name></expr></argument>, <argument pos:start="105:109" pos:end="105:115"><expr pos:start="105:109" pos:end="105:115"><name pos:start="105:109" pos:end="105:115">smmajor</name></expr></argument>, <argument pos:start="105:118" pos:end="105:124"><expr pos:start="105:118" pos:end="105:124"><name pos:start="105:118" pos:end="105:124">smminor</name></expr></argument>, <argument pos:start="105:127" pos:end="105:181"><expr pos:start="105:127" pos:end="105:181"><ternary pos:start="105:127" pos:end="105:181"><condition pos:start="105:127" pos:end="105:151"><expr pos:start="105:127" pos:end="105:149"><operator pos:start="105:127" pos:end="105:127">(</operator><name pos:start="105:128" pos:end="105:132">smver</name> <operator pos:start="105:134" pos:end="105:135">&gt;=</operator> <name pos:start="105:137" pos:end="105:148">target_smver</name><operator pos:start="105:149" pos:end="105:149">)</operator></expr> ?</condition><then pos:start="105:153" pos:end="105:163"> <expr pos:start="105:153" pos:end="105:163"><literal type="string" pos:start="105:153" pos:end="105:163">"Available"</literal></expr> </then><else pos:start="105:165" pos:end="105:181">: <expr pos:start="105:167" pos:end="105:181"><literal type="string" pos:start="105:167" pos:end="105:181">"Not Available"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="109:9" pos:end="111:74"><if pos:start="109:9" pos:end="111:74">if <condition pos:start="109:12" pos:end="109:34">(<expr pos:start="109:13" pos:end="109:33"><name pos:start="109:13" pos:end="109:17">smver</name> <operator pos:start="109:19" pos:end="109:20">&gt;=</operator> <name pos:start="109:22" pos:end="109:33">target_smver</name></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:74"><block_content pos:start="111:13" pos:end="111:74">

            <expr_stmt pos:start="111:13" pos:end="111:74"><expr pos:start="111:13" pos:end="111:73"><name pos:start="111:13" pos:end="111:61"><name pos:start="111:13" pos:end="111:17">dl_fn</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:32">nvenc_devices</name><index pos:start="111:33" pos:end="111:61">[<expr pos:start="111:34" pos:end="111:60"><name pos:start="111:34" pos:end="111:58"><name pos:start="111:34" pos:end="111:38">dl_fn</name><operator pos:start="111:39" pos:end="111:40">-&gt;</operator><name pos:start="111:41" pos:end="111:58">nvenc_device_count</name></name><operator pos:start="111:59" pos:end="111:60">++</operator></expr>]</index></name> <operator pos:start="111:63" pos:end="111:63">=</operator> <name pos:start="111:65" pos:end="111:73">cu_device</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="117:5" pos:end="123:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:35">(<expr pos:start="117:9" pos:end="117:34"><operator pos:start="117:9" pos:end="117:9">!</operator><name pos:start="117:10" pos:end="117:34"><name pos:start="117:10" pos:end="117:14">dl_fn</name><operator pos:start="117:15" pos:end="117:16">-&gt;</operator><name pos:start="117:17" pos:end="117:34">nvenc_device_count</name></name></expr>)</condition> <block pos:start="117:37" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:19">

        <expr_stmt pos:start="119:9" pos:end="119:72"><expr pos:start="119:9" pos:end="119:71"><call pos:start="119:9" pos:end="119:71"><name pos:start="119:9" pos:end="119:14">av_log</name><argument_list pos:start="119:15" pos:end="119:71">(<argument pos:start="119:16" pos:end="119:20"><expr pos:start="119:16" pos:end="119:20"><name pos:start="119:16" pos:end="119:20">avctx</name></expr></argument>, <argument pos:start="119:23" pos:end="119:34"><expr pos:start="119:23" pos:end="119:34"><name pos:start="119:23" pos:end="119:34">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="119:37" pos:end="119:70"><expr pos:start="119:37" pos:end="119:70"><literal type="string" pos:start="119:37" pos:end="119:70">"No NVENC capable devices found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="121:9" pos:end="121:19">goto <name pos:start="121:14" pos:end="121:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="127:5" pos:end="127:13">return <expr pos:start="127:12" pos:end="127:12"><literal type="number" pos:start="127:12" pos:end="127:12">1</literal></expr>;</return>



<label pos:start="131:1" pos:end="131:6"><name pos:start="131:1" pos:end="131:5">error</name>:</label>



    <expr_stmt pos:start="135:5" pos:end="135:34"><expr pos:start="135:5" pos:end="135:33"><name pos:start="135:5" pos:end="135:29"><name pos:start="135:5" pos:end="135:9">dl_fn</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:29">nvenc_device_count</name></name> <operator pos:start="135:31" pos:end="135:31">=</operator> <literal type="number" pos:start="135:33" pos:end="135:33">0</literal></expr>;</expr_stmt>



    <return pos:start="139:5" pos:end="139:13">return <expr pos:start="139:12" pos:end="139:12"><literal type="number" pos:start="139:12" pos:end="139:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
