<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4895.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:26">bmdma_read</name><parameter_list pos:start="1:27" pos:end="3:41">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:64"><decl pos:start="1:42" pos:end="1:64"><type pos:start="1:42" pos:end="1:64"><name pos:start="1:42" pos:end="1:59">target_phys_addr_t</name></type> <name pos:start="1:61" pos:end="1:64">addr</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:40"><decl pos:start="3:28" pos:end="3:40"><type pos:start="3:28" pos:end="3:40"><name pos:start="3:28" pos:end="3:35">unsigned</name></type> <name pos:start="3:37" pos:end="3:40">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:15">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">BMDMAState</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">bm</name> <init pos:start="7:20" pos:end="7:27">= <expr pos:start="7:22" pos:end="7:27"><name pos:start="7:22" pos:end="7:27">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">PCIIDEState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:24">pci_dev</name> <init pos:start="9:26" pos:end="9:38">= <expr pos:start="9:28" pos:end="9:38"><name pos:start="9:28" pos:end="9:38"><name pos:start="9:28" pos:end="9:29">bm</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:38">pci_dev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">val</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:18">(<expr pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:12">size</name> <operator pos:start="15:14" pos:end="15:15">!=</operator> <literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>)</condition> <block pos:start="15:20" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:47">

        <return pos:start="17:9" pos:end="17:47">return <expr pos:start="17:16" pos:end="17:46"><operator pos:start="17:16" pos:end="17:16">(</operator><operator pos:start="17:17" pos:end="17:17">(</operator><name pos:start="17:18" pos:end="17:25">uint64_t</name><operator pos:start="17:26" pos:end="17:26">)</operator><literal type="number" pos:start="17:27" pos:end="17:27">1</literal> <operator pos:start="17:29" pos:end="17:30">&lt;&lt;</operator> <operator pos:start="17:32" pos:end="17:32">(</operator><name pos:start="17:33" pos:end="17:36">size</name> <operator pos:start="17:38" pos:end="17:38">*</operator> <literal type="number" pos:start="17:40" pos:end="17:40">8</literal><operator pos:start="17:41" pos:end="17:41">)</operator><operator pos:start="17:42" pos:end="17:42">)</operator> <operator pos:start="17:44" pos:end="17:44">-</operator> <literal type="number" pos:start="17:46" pos:end="17:46">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="23:5" pos:end="66:0">switch<condition pos:start="23:11" pos:end="23:20">(<expr pos:start="23:12" pos:end="23:19"><name pos:start="23:12" pos:end="23:15">addr</name> <operator pos:start="23:17" pos:end="23:17">&amp;</operator> <literal type="number" pos:start="23:19" pos:end="23:19">3</literal></expr>)</condition> <block pos:start="23:22" pos:end="66:0">{<block_content pos:start="25:5" pos:end="61:14">

    <case pos:start="25:5" pos:end="25:11">case <expr pos:start="25:10" pos:end="25:10"><literal type="number" pos:start="25:10" pos:end="25:10">0</literal></expr>:</case>

        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:11">val</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:21"><name pos:start="27:15" pos:end="27:16">bm</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:21">cmd</name></name></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:11">case <expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">1</literal></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:43"><expr pos:start="33:9" pos:end="33:42"><name pos:start="33:9" pos:end="33:11">val</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:42"><name pos:start="33:15" pos:end="33:21">pci_dev</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:26">dev</name><operator pos:start="33:27" pos:end="33:27">.</operator><name pos:start="33:28" pos:end="33:33">config</name><index pos:start="33:34" pos:end="33:42">[<expr pos:start="33:35" pos:end="33:41"><name pos:start="33:35" pos:end="33:41">MRDMODE</name></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:11">case <expr pos:start="37:10" pos:end="37:10"><literal type="number" pos:start="37:10" pos:end="37:10">2</literal></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:25"><expr pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:11">val</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:24"><name pos:start="39:15" pos:end="39:16">bm</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:24">status</name></name></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:11">case <expr pos:start="43:10" pos:end="43:10"><literal type="number" pos:start="43:10" pos:end="43:10">3</literal></expr>:</case>

        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:37">(<expr pos:start="45:13" pos:end="45:36"><name pos:start="45:13" pos:end="45:14">bm</name> <operator pos:start="45:16" pos:end="45:17">==</operator> <operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:36"><name pos:start="45:20" pos:end="45:26">pci_dev</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:33">bmdma</name><index pos:start="45:34" pos:end="45:36">[<expr pos:start="45:35" pos:end="45:35"><literal type="number" pos:start="45:35" pos:end="45:35">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="45:39" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:49">

            <expr_stmt pos:start="47:13" pos:end="47:49"><expr pos:start="47:13" pos:end="47:48"><name pos:start="47:13" pos:end="47:15">val</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:48"><name pos:start="47:19" pos:end="47:25">pci_dev</name><operator pos:start="47:26" pos:end="47:27">-&gt;</operator><name pos:start="47:28" pos:end="47:30">dev</name><operator pos:start="47:31" pos:end="47:31">.</operator><name pos:start="47:32" pos:end="47:37">config</name><index pos:start="47:38" pos:end="47:48">[<expr pos:start="47:39" pos:end="47:47"><name pos:start="47:39" pos:end="47:47">UDIDETCR0</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="49:11" pos:end="53:9">else <block pos:start="49:16" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:49">

            <expr_stmt pos:start="51:13" pos:end="51:49"><expr pos:start="51:13" pos:end="51:48"><name pos:start="51:13" pos:end="51:15">val</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:48"><name pos:start="51:19" pos:end="51:25">pci_dev</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:30">dev</name><operator pos:start="51:31" pos:end="51:31">.</operator><name pos:start="51:32" pos:end="51:37">config</name><index pos:start="51:38" pos:end="51:48">[<expr pos:start="51:39" pos:end="51:47"><name pos:start="51:39" pos:end="51:47">UDIDETCR1</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <default pos:start="57:5" pos:end="57:12">default:</default>

        <expr_stmt pos:start="59:9" pos:end="59:19"><expr pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:11">val</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <literal type="number" pos:start="59:15" pos:end="59:18">0xff</literal></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    </block_content>}</block></switch>

<cpp:ifdef pos:start="65:1" pos:end="65:16">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:16">DEBUG_IDE</name></cpp:ifdef>

    <expr_stmt pos:start="67:5" pos:end="70:0"><expr pos:start="67:5" pos:end="67:55"><call pos:start="67:5" pos:end="67:55"><name pos:start="67:5" pos:end="67:10">printf</name><argument_list pos:start="67:11" pos:end="67:55">(<argument pos:start="67:12" pos:end="67:43"><expr pos:start="67:12" pos:end="67:43"><literal type="string" pos:start="67:12" pos:end="67:43">"bmdma: readb 0x%02x : 0x%02x\n"</literal></expr></argument>, <argument pos:start="67:46" pos:end="67:49"><expr pos:start="67:46" pos:end="67:49"><name pos:start="67:46" pos:end="67:49">addr</name></expr></argument>, <argument pos:start="67:52" pos:end="67:54"><expr pos:start="67:52" pos:end="67:54"><name pos:start="67:52" pos:end="67:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>

    <return pos:start="71:5" pos:end="71:15">return <expr pos:start="71:12" pos:end="71:14"><name pos:start="71:12" pos:end="71:14">val</name></expr>;</return>

</block_content>}</block></function>
</unit>
