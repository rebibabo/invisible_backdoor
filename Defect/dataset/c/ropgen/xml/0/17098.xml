<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17098.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:35">alac_decode_init</name><parameter_list pos:start="1:36" pos:end="1:59">(<parameter pos:start="1:37" pos:end="1:58"><decl pos:start="1:37" pos:end="1:58"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:50">AVCodecContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type> <name pos:start="1:54" pos:end="1:58">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:13">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">req_packed</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">ALACContext</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:21">alac</name> <init pos:start="9:23" pos:end="9:40">= <expr pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:29">avctx</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:24"><expr pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:8">alac</name><operator pos:start="11:9" pos:end="11:10">-&gt;</operator><name pos:start="11:11" pos:end="11:15">avctx</name></name> <operator pos:start="11:17" pos:end="11:17">=</operator> <name pos:start="11:19" pos:end="11:23">avctx</name></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:39">/* initialize from the extradata */</comment>

    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:59">(<expr pos:start="17:9" pos:end="17:58"><name pos:start="17:9" pos:end="17:35"><name pos:start="17:9" pos:end="17:12">alac</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:19">avctx</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:35">extradata_size</name></name> <operator pos:start="17:37" pos:end="17:38">!=</operator> <name pos:start="17:40" pos:end="17:58">ALAC_EXTRADATA_SIZE</name></expr>)</condition> <block pos:start="17:61" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:18">

        <expr_stmt pos:start="19:9" pos:end="21:33"><expr pos:start="19:9" pos:end="21:32"><call pos:start="19:9" pos:end="21:32"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="21:32">(<argument pos:start="19:16" pos:end="19:20"><expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20">avctx</name></expr></argument>, <argument pos:start="19:23" pos:end="19:34"><expr pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:37" pos:end="19:67"><expr pos:start="19:37" pos:end="19:67"><literal type="string" pos:start="19:37" pos:end="19:67">"expected %d extradata bytes\n"</literal></expr></argument>,

            <argument pos:start="21:13" pos:end="21:31"><expr pos:start="21:13" pos:end="21:31"><name pos:start="21:13" pos:end="21:31">ALAC_EXTRADATA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:17"><operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:28">(<expr pos:start="27:9" pos:end="27:27"><call pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:21">alac_set_info</name><argument_list pos:start="27:22" pos:end="27:27">(<argument pos:start="27:23" pos:end="27:26"><expr pos:start="27:23" pos:end="27:26"><name pos:start="27:23" pos:end="27:26">alac</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:30" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:57"><expr pos:start="29:9" pos:end="29:56"><call pos:start="29:9" pos:end="29:56"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:56">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:55"><expr pos:start="29:37" pos:end="29:55"><literal type="string" pos:start="29:37" pos:end="29:55">"set_info failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:102"><expr pos:start="37:5" pos:end="37:101"><name pos:start="37:5" pos:end="37:14">req_packed</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:41">LIBAVCODEC_VERSION_MAJOR</name> <operator pos:start="37:43" pos:end="37:43">&lt;</operator> <literal type="number" pos:start="37:45" pos:end="37:46">55</literal> <operator pos:start="37:48" pos:end="37:49">&amp;&amp;</operator> <operator pos:start="37:51" pos:end="37:51">!</operator><call pos:start="37:52" pos:end="37:101"><name pos:start="37:52" pos:end="37:74">av_sample_fmt_is_planar</name><argument_list pos:start="37:75" pos:end="37:101">(<argument pos:start="37:76" pos:end="37:100"><expr pos:start="37:76" pos:end="37:100"><name pos:start="37:76" pos:end="37:100"><name pos:start="37:76" pos:end="37:80">avctx</name><operator pos:start="37:81" pos:end="37:82">-&gt;</operator><name pos:start="37:83" pos:end="37:100">request_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="39:5" pos:end="57:5">switch <condition pos:start="39:12" pos:end="39:30">(<expr pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:16">alac</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:29">sample_size</name></name></expr>)</condition> <block pos:start="39:32" pos:end="57:5">{<block_content pos:start="41:5" pos:end="55:41">

    <case pos:start="41:5" pos:end="41:12">case <expr pos:start="41:10" pos:end="41:11"><literal type="number" pos:start="41:10" pos:end="41:11">16</literal></expr>:</case> <expr_stmt pos:start="41:14" pos:end="41:85"><expr pos:start="41:14" pos:end="41:84"><name pos:start="41:14" pos:end="41:30"><name pos:start="41:14" pos:end="41:18">avctx</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:30">sample_fmt</name></name> <operator pos:start="41:32" pos:end="41:32">=</operator> <ternary pos:start="41:34" pos:end="41:84"><condition pos:start="41:34" pos:end="41:45"><expr pos:start="41:34" pos:end="41:43"><name pos:start="41:34" pos:end="41:43">req_packed</name></expr> ?</condition><then pos:start="41:47" pos:end="41:63"> <expr pos:start="41:47" pos:end="41:63"><name pos:start="41:47" pos:end="41:63">AV_SAMPLE_FMT_S16</name></expr> </then><else pos:start="41:65" pos:end="41:84">: <expr pos:start="41:67" pos:end="41:84"><name pos:start="41:67" pos:end="41:84">AV_SAMPLE_FMT_S16P</name></expr></else></ternary></expr>;</expr_stmt>

             <break pos:start="43:14" pos:end="43:19">break;</break>

    <case pos:start="45:5" pos:end="45:12">case <expr pos:start="45:10" pos:end="45:11"><literal type="number" pos:start="45:10" pos:end="45:11">24</literal></expr>:</case>

    <case pos:start="47:5" pos:end="47:12">case <expr pos:start="47:10" pos:end="47:11"><literal type="number" pos:start="47:10" pos:end="47:11">32</literal></expr>:</case> <expr_stmt pos:start="47:14" pos:end="47:85"><expr pos:start="47:14" pos:end="47:84"><name pos:start="47:14" pos:end="47:30"><name pos:start="47:14" pos:end="47:18">avctx</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:30">sample_fmt</name></name> <operator pos:start="47:32" pos:end="47:32">=</operator> <ternary pos:start="47:34" pos:end="47:84"><condition pos:start="47:34" pos:end="47:45"><expr pos:start="47:34" pos:end="47:43"><name pos:start="47:34" pos:end="47:43">req_packed</name></expr> ?</condition><then pos:start="47:47" pos:end="47:63"> <expr pos:start="47:47" pos:end="47:63"><name pos:start="47:47" pos:end="47:63">AV_SAMPLE_FMT_S32</name></expr> </then><else pos:start="47:65" pos:end="47:84">: <expr pos:start="47:67" pos:end="47:84"><name pos:start="47:67" pos:end="47:84">AV_SAMPLE_FMT_S32P</name></expr></else></ternary></expr>;</expr_stmt>

             <break pos:start="49:14" pos:end="49:19">break;</break>

    <default pos:start="51:5" pos:end="51:12">default:</default> <expr_stmt pos:start="51:14" pos:end="53:54"><expr pos:start="51:14" pos:end="53:53"><call pos:start="51:14" pos:end="53:53"><name pos:start="51:14" pos:end="51:34">av_log_ask_for_sample</name><argument_list pos:start="51:35" pos:end="53:53">(<argument pos:start="51:36" pos:end="51:40"><expr pos:start="51:36" pos:end="51:40"><name pos:start="51:36" pos:end="51:40">avctx</name></expr></argument>, <argument pos:start="51:43" pos:end="51:79"><expr pos:start="51:43" pos:end="51:79"><literal type="string" pos:start="51:43" pos:end="51:79">"Sample depth %d is not supported.\n"</literal></expr></argument>,

                                   <argument pos:start="53:36" pos:end="53:52"><expr pos:start="53:36" pos:end="53:52"><name pos:start="53:36" pos:end="53:52"><name pos:start="53:36" pos:end="53:39">alac</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:52">sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

             <return pos:start="55:14" pos:end="55:41">return <expr pos:start="55:21" pos:end="55:40"><name pos:start="55:21" pos:end="55:40">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="59:5" pos:end="59:51"><expr pos:start="59:5" pos:end="59:50"><name pos:start="59:5" pos:end="59:30"><name pos:start="59:5" pos:end="59:9">avctx</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:30">bits_per_raw_sample</name></name> <operator pos:start="59:32" pos:end="59:32">=</operator> <name pos:start="59:34" pos:end="59:50"><name pos:start="59:34" pos:end="59:37">alac</name><operator pos:start="59:38" pos:end="59:39">-&gt;</operator><name pos:start="59:40" pos:end="59:50">sample_size</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="79:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:27">(<expr pos:start="63:9" pos:end="63:26"><name pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:12">alac</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:22">channels</name></name> <operator pos:start="63:24" pos:end="63:24">&lt;</operator> <literal type="number" pos:start="63:26" pos:end="63:26">1</literal></expr>)</condition> <block pos:start="63:29" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:41">

        <expr_stmt pos:start="65:9" pos:end="65:65"><expr pos:start="65:9" pos:end="65:64"><call pos:start="65:9" pos:end="65:64"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:64">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:36"><expr pos:start="65:23" pos:end="65:36"><name pos:start="65:23" pos:end="65:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="65:39" pos:end="65:63"><expr pos:start="65:39" pos:end="65:63"><literal type="string" pos:start="65:39" pos:end="65:63">"Invalid channel count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:41"><expr pos:start="67:9" pos:end="67:40"><name pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:12">alac</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:22">channels</name></name> <operator pos:start="67:24" pos:end="67:24">=</operator> <name pos:start="67:26" pos:end="67:40"><name pos:start="67:26" pos:end="67:30">avctx</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:40">channels</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="79:5">else <block pos:start="69:12" pos:end="79:5">{<block_content pos:start="71:9" pos:end="77:45">

        <if_stmt pos:start="71:9" pos:end="77:45"><if pos:start="71:9" pos:end="73:45">if <condition pos:start="71:12" pos:end="71:42">(<expr pos:start="71:13" pos:end="71:41"><name pos:start="71:13" pos:end="71:26"><name pos:start="71:13" pos:end="71:16">alac</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:26">channels</name></name> <operator pos:start="71:28" pos:end="71:28">&gt;</operator> <name pos:start="71:30" pos:end="71:41">MAX_CHANNELS</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:45"><block_content pos:start="73:13" pos:end="73:45">

            <expr_stmt pos:start="73:13" pos:end="73:45"><expr pos:start="73:13" pos:end="73:44"><name pos:start="73:13" pos:end="73:26"><name pos:start="73:13" pos:end="73:16">alac</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:26">channels</name></name> <operator pos:start="73:28" pos:end="73:28">=</operator> <name pos:start="73:30" pos:end="73:44"><name pos:start="73:30" pos:end="73:34">avctx</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:44">channels</name></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="75:9" pos:end="77:45">else<block type="pseudo" pos:start="77:13" pos:end="77:45"><block_content pos:start="77:13" pos:end="77:45">

            <expr_stmt pos:start="77:13" pos:end="77:45"><expr pos:start="77:13" pos:end="77:44"><name pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:17">avctx</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:27">channels</name></name> <operator pos:start="77:29" pos:end="77:29">=</operator> <name pos:start="77:31" pos:end="77:44"><name pos:start="77:31" pos:end="77:34">alac</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:44">channels</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:39">(<expr pos:start="81:9" pos:end="81:38"><name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:13">avctx</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:23">channels</name></name> <operator pos:start="81:25" pos:end="81:25">&gt;</operator> <name pos:start="81:27" pos:end="81:38">MAX_CHANNELS</name></expr>)</condition> <block pos:start="81:41" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:36">

        <expr_stmt pos:start="83:9" pos:end="85:32"><expr pos:start="83:9" pos:end="85:31"><call pos:start="83:9" pos:end="85:31"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="85:31">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">avctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:34"><expr pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:37" pos:end="83:69"><expr pos:start="83:37" pos:end="83:69"><literal type="string" pos:start="83:37" pos:end="83:69">"Unsupported channel count: %d\n"</literal></expr></argument>,

               <argument pos:start="85:16" pos:end="85:30"><expr pos:start="85:16" pos:end="85:30"><name pos:start="85:16" pos:end="85:30"><name pos:start="85:16" pos:end="85:20">avctx</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:30">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:36">return <expr pos:start="87:16" pos:end="87:35"><name pos:start="87:16" pos:end="87:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:69"><expr pos:start="91:5" pos:end="91:68"><name pos:start="91:5" pos:end="91:25"><name pos:start="91:5" pos:end="91:9">avctx</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:25">channel_layout</name></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <name pos:start="91:29" pos:end="91:68"><name pos:start="91:29" pos:end="91:48">alac_channel_layouts</name><index pos:start="91:49" pos:end="91:68">[<expr pos:start="91:50" pos:end="91:67"><name pos:start="91:50" pos:end="91:63"><name pos:start="91:50" pos:end="91:53">alac</name><operator pos:start="91:54" pos:end="91:55">-&gt;</operator><name pos:start="91:56" pos:end="91:63">channels</name></name> <operator pos:start="91:65" pos:end="91:65">-</operator> <literal type="number" pos:start="91:67" pos:end="91:67">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="101:5"><if pos:start="95:5" pos:end="101:5">if <condition pos:start="95:8" pos:end="95:43">(<expr pos:start="95:9" pos:end="95:42"><operator pos:start="95:9" pos:end="95:9">(</operator><name pos:start="95:10" pos:end="95:12">ret</name> <operator pos:start="95:14" pos:end="95:14">=</operator> <call pos:start="95:16" pos:end="95:37"><name pos:start="95:16" pos:end="95:31">allocate_buffers</name><argument_list pos:start="95:32" pos:end="95:37">(<argument pos:start="95:33" pos:end="95:36"><expr pos:start="95:33" pos:end="95:36"><name pos:start="95:33" pos:end="95:36">alac</name></expr></argument>)</argument_list></call><operator pos:start="95:38" pos:end="95:38">)</operator> <operator pos:start="95:40" pos:end="95:40">&lt;</operator> <literal type="number" pos:start="95:42" pos:end="95:42">0</literal></expr>)</condition> <block pos:start="95:45" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:19">

        <expr_stmt pos:start="97:9" pos:end="97:66"><expr pos:start="97:9" pos:end="97:65"><call pos:start="97:9" pos:end="97:65"><name pos:start="97:9" pos:end="97:14">av_log</name><argument_list pos:start="97:15" pos:end="97:65">(<argument pos:start="97:16" pos:end="97:20"><expr pos:start="97:16" pos:end="97:20"><name pos:start="97:16" pos:end="97:20">avctx</name></expr></argument>, <argument pos:start="97:23" pos:end="97:34"><expr pos:start="97:23" pos:end="97:34"><name pos:start="97:23" pos:end="97:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:37" pos:end="97:64"><expr pos:start="97:37" pos:end="97:64"><literal type="string" pos:start="97:37" pos:end="97:64">"Error allocating buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="99:9" pos:end="99:19">return <expr pos:start="99:16" pos:end="99:18"><name pos:start="99:16" pos:end="99:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:45"><expr pos:start="105:5" pos:end="105:44"><call pos:start="105:5" pos:end="105:44"><name pos:start="105:5" pos:end="105:30">avcodec_get_frame_defaults</name><argument_list pos:start="105:31" pos:end="105:44">(<argument pos:start="105:32" pos:end="105:43"><expr pos:start="105:32" pos:end="105:43"><operator pos:start="105:32" pos:end="105:32">&amp;</operator><name pos:start="105:33" pos:end="105:43"><name pos:start="105:33" pos:end="105:36">alac</name><operator pos:start="105:37" pos:end="105:38">-&gt;</operator><name pos:start="105:39" pos:end="105:43">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:38"><expr pos:start="107:5" pos:end="107:37"><name pos:start="107:5" pos:end="107:22"><name pos:start="107:5" pos:end="107:9">avctx</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:22">coded_frame</name></name> <operator pos:start="107:24" pos:end="107:24">=</operator> <operator pos:start="107:26" pos:end="107:26">&amp;</operator><name pos:start="107:27" pos:end="107:37"><name pos:start="107:27" pos:end="107:30">alac</name><operator pos:start="107:31" pos:end="107:32">-&gt;</operator><name pos:start="107:33" pos:end="107:37">frame</name></name></expr>;</expr_stmt>



    <return pos:start="111:5" pos:end="111:13">return <expr pos:start="111:12" pos:end="111:12"><literal type="number" pos:start="111:12" pos:end="111:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
