<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15888.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">check_refcounts_l1</name><parameter_list pos:start="1:30" pos:end="11:40">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:50"><decl pos:start="3:31" pos:end="3:50"><type pos:start="3:31" pos:end="3:50"><name pos:start="3:31" pos:end="3:45">BdrvCheckResult</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:50">res</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:54"><decl pos:start="5:31" pos:end="5:54"><type pos:start="5:31" pos:end="5:54"><name pos:start="5:31" pos:end="5:38">uint16_t</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:54">refcount_table</name></decl></parameter>,

                              <parameter pos:start="7:31" pos:end="7:57"><decl pos:start="7:31" pos:end="7:57"><type pos:start="7:31" pos:end="7:57"><name pos:start="7:31" pos:end="7:37">int64_t</name></type> <name pos:start="7:39" pos:end="7:57">refcount_table_size</name></decl></parameter>,

                              <parameter pos:start="9:31" pos:end="9:53"><decl pos:start="9:31" pos:end="9:53"><type pos:start="9:31" pos:end="9:53"><name pos:start="9:31" pos:end="9:37">int64_t</name></type> <name pos:start="9:39" pos:end="9:53">l1_table_offset</name></decl></parameter>, <parameter pos:start="9:56" pos:end="9:66"><decl pos:start="9:56" pos:end="9:66"><type pos:start="9:56" pos:end="9:66"><name pos:start="9:56" pos:end="9:58">int</name></type> <name pos:start="9:60" pos:end="9:66">l1_size</name></decl></parameter>,

                              <parameter pos:start="11:31" pos:end="11:39"><decl pos:start="11:31" pos:end="11:39"><type pos:start="11:31" pos:end="11:39"><name pos:start="11:31" pos:end="11:33">int</name></type> <name pos:start="11:35" pos:end="11:39">flags</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="143:1">{<block_content pos:start="15:5" pos:end="141:15">

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">BDRVQcowState</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:20">s</name> <init pos:start="15:22" pos:end="15:33">= <expr pos:start="15:24" pos:end="15:33"><name pos:start="15:24" pos:end="15:33"><name pos:start="15:24" pos:end="15:25">bs</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:51"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">uint64_t</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:22">l1_table</name> <init pos:start="17:24" pos:end="17:29">= <expr pos:start="17:26" pos:end="17:29"><name pos:start="17:26" pos:end="17:29">NULL</name></expr></init></decl>, <decl pos:start="17:32" pos:end="17:40"><type ref="prev" pos:start="17:5" pos:end="17:14"/><name pos:start="17:32" pos:end="17:40">l2_offset</name></decl>, <decl pos:start="17:43" pos:end="17:50"><type ref="prev" pos:start="17:5" pos:end="17:14"/><name pos:start="17:43" pos:end="17:50">l1_size2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:14"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:14">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:42"><expr pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:12">l1_size2</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:22">l1_size</name> <operator pos:start="23:24" pos:end="23:24">*</operator> <sizeof pos:start="23:26" pos:end="23:41">sizeof<argument_list pos:start="23:32" pos:end="23:41">(<argument pos:start="23:33" pos:end="23:40"><expr pos:start="23:33" pos:end="23:40"><name pos:start="23:33" pos:end="23:40">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:31">/* Mark L1 table as used */</comment>

    <expr_stmt pos:start="29:5" pos:end="31:51"><expr pos:start="29:5" pos:end="31:50"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="31:50"><name pos:start="29:11" pos:end="29:23">inc_refcounts</name><argument_list pos:start="29:24" pos:end="31:50">(<argument pos:start="29:25" pos:end="29:26"><expr pos:start="29:25" pos:end="29:26"><name pos:start="29:25" pos:end="29:26">bs</name></expr></argument>, <argument pos:start="29:29" pos:end="29:31"><expr pos:start="29:29" pos:end="29:31"><name pos:start="29:29" pos:end="29:31">res</name></expr></argument>, <argument pos:start="29:34" pos:end="29:47"><expr pos:start="29:34" pos:end="29:47"><name pos:start="29:34" pos:end="29:47">refcount_table</name></expr></argument>, <argument pos:start="29:50" pos:end="29:68"><expr pos:start="29:50" pos:end="29:68"><name pos:start="29:50" pos:end="29:68">refcount_table_size</name></expr></argument>,

                        <argument pos:start="31:25" pos:end="31:39"><expr pos:start="31:25" pos:end="31:39"><name pos:start="31:25" pos:end="31:39">l1_table_offset</name></expr></argument>, <argument pos:start="31:42" pos:end="31:49"><expr pos:start="31:42" pos:end="31:49"><name pos:start="31:42" pos:end="31:49">l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">&lt;</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>)</condition> <block pos:start="33:18" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:18">

        <goto pos:start="35:9" pos:end="35:18">goto <name pos:start="35:14" pos:end="35:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:41">/* Read L1 table entries from disk */</comment>

    <if_stmt pos:start="43:5" pos:end="73:5"><if pos:start="43:5" pos:end="73:5">if <condition pos:start="43:8" pos:end="43:21">(<expr pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:16">l1_size2</name> <operator pos:start="43:18" pos:end="43:18">&gt;</operator> <literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>)</condition> <block pos:start="43:23" pos:end="73:5">{<block_content pos:start="45:9" pos:end="71:39">

        <expr_stmt pos:start="45:9" pos:end="45:42"><expr pos:start="45:9" pos:end="45:41"><name pos:start="45:9" pos:end="45:16">l1_table</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <call pos:start="45:20" pos:end="45:41"><name pos:start="45:20" pos:end="45:31">g_try_malloc</name><argument_list pos:start="45:32" pos:end="45:41">(<argument pos:start="45:33" pos:end="45:40"><expr pos:start="45:33" pos:end="45:40"><name pos:start="45:33" pos:end="45:40">l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:29">(<expr pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:20">l1_table</name> <operator pos:start="47:22" pos:end="47:23">==</operator> <name pos:start="47:25" pos:end="47:28">NULL</name></expr>)</condition> <block pos:start="47:31" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:22">

            <expr_stmt pos:start="49:13" pos:end="49:26"><expr pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <operator pos:start="49:19" pos:end="49:19">-</operator><name pos:start="49:20" pos:end="49:25">ENOMEM</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:32"><expr pos:start="51:13" pos:end="51:31"><name pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:15">res</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:29">check_errors</name></name><operator pos:start="51:30" pos:end="51:31">++</operator></expr>;</expr_stmt>

            <goto pos:start="53:13" pos:end="53:22">goto <name pos:start="53:18" pos:end="53:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:72"><expr pos:start="57:9" pos:end="57:71"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:71"><name pos:start="57:15" pos:end="57:24">bdrv_pread</name><argument_list pos:start="57:25" pos:end="57:71">(<argument pos:start="57:26" pos:end="57:33"><expr pos:start="57:26" pos:end="57:33"><name pos:start="57:26" pos:end="57:33"><name pos:start="57:26" pos:end="57:27">bs</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:33">file</name></name></expr></argument>, <argument pos:start="57:36" pos:end="57:50"><expr pos:start="57:36" pos:end="57:50"><name pos:start="57:36" pos:end="57:50">l1_table_offset</name></expr></argument>, <argument pos:start="57:53" pos:end="57:60"><expr pos:start="57:53" pos:end="57:60"><name pos:start="57:53" pos:end="57:60">l1_table</name></expr></argument>, <argument pos:start="57:63" pos:end="57:70"><expr pos:start="57:63" pos:end="57:70"><name pos:start="57:63" pos:end="57:70">l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:20">(<expr pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:17">&lt;</operator> <literal type="number" pos:start="59:19" pos:end="59:19">0</literal></expr>)</condition> <block pos:start="59:22" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:22">

            <expr_stmt pos:start="61:13" pos:end="61:72"><expr pos:start="61:13" pos:end="61:71"><call pos:start="61:13" pos:end="61:71"><name pos:start="61:13" pos:end="61:19">fprintf</name><argument_list pos:start="61:20" pos:end="61:71">(<argument pos:start="61:21" pos:end="61:26"><expr pos:start="61:21" pos:end="61:26"><name pos:start="61:21" pos:end="61:26">stderr</name></expr></argument>, <argument pos:start="61:29" pos:end="61:70"><expr pos:start="61:29" pos:end="61:70"><literal type="string" pos:start="61:29" pos:end="61:70">"ERROR: I/O error in check_refcounts_l1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:32"><expr pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:29"><name pos:start="63:13" pos:end="63:15">res</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:29">check_errors</name></name><operator pos:start="63:30" pos:end="63:31">++</operator></expr>;</expr_stmt>

            <goto pos:start="65:13" pos:end="65:22">goto <name pos:start="65:18" pos:end="65:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <for pos:start="69:9" pos:end="71:39">for<control pos:start="69:12" pos:end="69:35">(<init pos:start="69:13" pos:end="69:18"><expr pos:start="69:13" pos:end="69:17"><name pos:start="69:13" pos:end="69:13">i</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <literal type="number" pos:start="69:17" pos:end="69:17">0</literal></expr>;</init><condition pos:start="69:19" pos:end="69:30"><expr pos:start="69:19" pos:end="69:29"><name pos:start="69:19" pos:end="69:19">i</name> <operator pos:start="69:21" pos:end="69:21">&lt;</operator> <name pos:start="69:23" pos:end="69:29">l1_size</name></expr>;</condition> <incr pos:start="69:32" pos:end="69:34"><expr pos:start="69:32" pos:end="69:34"><name pos:start="69:32" pos:end="69:32">i</name><operator pos:start="69:33" pos:end="69:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="71:13" pos:end="71:39"><block_content pos:start="71:13" pos:end="71:39">

            <expr_stmt pos:start="71:13" pos:end="71:39"><expr pos:start="71:13" pos:end="71:38"><call pos:start="71:13" pos:end="71:38"><name pos:start="71:13" pos:end="71:24">be64_to_cpus</name><argument_list pos:start="71:25" pos:end="71:38">(<argument pos:start="71:26" pos:end="71:37"><expr pos:start="71:26" pos:end="71:37"><operator pos:start="71:26" pos:end="71:26">&amp;</operator><name pos:start="71:27" pos:end="71:37"><name pos:start="71:27" pos:end="71:34">l1_table</name><index pos:start="71:35" pos:end="71:37">[<expr pos:start="71:36" pos:end="71:36"><name pos:start="71:36" pos:end="71:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:30">/* Do the actual checks */</comment>

    <for pos:start="79:5" pos:end="129:5">for<control pos:start="79:8" pos:end="79:32">(<init pos:start="79:9" pos:end="79:14"><expr pos:start="79:9" pos:end="79:13"><name pos:start="79:9" pos:end="79:9">i</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <literal type="number" pos:start="79:13" pos:end="79:13">0</literal></expr>;</init> <condition pos:start="79:16" pos:end="79:27"><expr pos:start="79:16" pos:end="79:26"><name pos:start="79:16" pos:end="79:16">i</name> <operator pos:start="79:18" pos:end="79:18">&lt;</operator> <name pos:start="79:20" pos:end="79:26">l1_size</name></expr>;</condition> <incr pos:start="79:29" pos:end="79:31"><expr pos:start="79:29" pos:end="79:31"><name pos:start="79:29" pos:end="79:29">i</name><operator pos:start="79:30" pos:end="79:31">++</operator></expr></incr>)</control> <block pos:start="79:34" pos:end="129:5">{<block_content pos:start="81:9" pos:end="127:9">

        <expr_stmt pos:start="81:9" pos:end="81:32"><expr pos:start="81:9" pos:end="81:31"><name pos:start="81:9" pos:end="81:17">l2_offset</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <name pos:start="81:21" pos:end="81:31"><name pos:start="81:21" pos:end="81:28">l1_table</name><index pos:start="81:29" pos:end="81:31">[<expr pos:start="81:30" pos:end="81:30"><name pos:start="81:30" pos:end="81:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="127:9"><if pos:start="83:9" pos:end="127:9">if <condition pos:start="83:12" pos:end="83:22">(<expr pos:start="83:13" pos:end="83:21"><name pos:start="83:13" pos:end="83:21">l2_offset</name></expr>)</condition> <block pos:start="83:24" pos:end="127:9">{<block_content pos:start="87:13" pos:end="125:13">

            <comment type="block" pos:start="85:13" pos:end="85:39">/* Mark L2 table as used */</comment>

            <expr_stmt pos:start="87:13" pos:end="87:41"><expr pos:start="87:13" pos:end="87:40"><name pos:start="87:13" pos:end="87:21">l2_offset</name> <operator pos:start="87:23" pos:end="87:24">&amp;=</operator> <name pos:start="87:26" pos:end="87:40">L1E_OFFSET_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="91:60"><expr pos:start="89:13" pos:end="91:59"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="91:59"><name pos:start="89:19" pos:end="89:31">inc_refcounts</name><argument_list pos:start="89:32" pos:end="91:59">(<argument pos:start="89:33" pos:end="89:34"><expr pos:start="89:33" pos:end="89:34"><name pos:start="89:33" pos:end="89:34">bs</name></expr></argument>, <argument pos:start="89:37" pos:end="89:39"><expr pos:start="89:37" pos:end="89:39"><name pos:start="89:37" pos:end="89:39">res</name></expr></argument>, <argument pos:start="89:42" pos:end="89:55"><expr pos:start="89:42" pos:end="89:55"><name pos:start="89:42" pos:end="89:55">refcount_table</name></expr></argument>, <argument pos:start="89:58" pos:end="89:76"><expr pos:start="89:58" pos:end="89:76"><name pos:start="89:58" pos:end="89:76">refcount_table_size</name></expr></argument>,

                                <argument pos:start="91:33" pos:end="91:41"><expr pos:start="91:33" pos:end="91:41"><name pos:start="91:33" pos:end="91:41">l2_offset</name></expr></argument>, <argument pos:start="91:44" pos:end="91:58"><expr pos:start="91:44" pos:end="91:58"><name pos:start="91:44" pos:end="91:58"><name pos:start="91:44" pos:end="91:44">s</name><operator pos:start="91:45" pos:end="91:46">-&gt;</operator><name pos:start="91:47" pos:end="91:58">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="97:13"><if pos:start="93:13" pos:end="97:13">if <condition pos:start="93:16" pos:end="93:24">(<expr pos:start="93:17" pos:end="93:23"><name pos:start="93:17" pos:end="93:19">ret</name> <operator pos:start="93:21" pos:end="93:21">&lt;</operator> <literal type="number" pos:start="93:23" pos:end="93:23">0</literal></expr>)</condition> <block pos:start="93:26" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:26">

                <goto pos:start="95:17" pos:end="95:26">goto <name pos:start="95:22" pos:end="95:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="101:13" pos:end="101:47">/* L2 tables are cluster aligned */</comment>

            <if_stmt pos:start="103:13" pos:end="111:13"><if pos:start="103:13" pos:end="111:13">if <condition pos:start="103:16" pos:end="103:50">(<expr pos:start="103:17" pos:end="103:49"><call pos:start="103:17" pos:end="103:49"><name pos:start="103:17" pos:end="103:35">offset_into_cluster</name><argument_list pos:start="103:36" pos:end="103:49">(<argument pos:start="103:37" pos:end="103:37"><expr pos:start="103:37" pos:end="103:37"><name pos:start="103:37" pos:end="103:37">s</name></expr></argument>, <argument pos:start="103:40" pos:end="103:48"><expr pos:start="103:40" pos:end="103:48"><name pos:start="103:40" pos:end="103:48">l2_offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:52" pos:end="111:13">{<block_content pos:start="105:17" pos:end="109:35">

                <expr_stmt pos:start="105:17" pos:end="107:72"><expr pos:start="105:17" pos:end="107:71"><call pos:start="105:17" pos:end="107:71"><name pos:start="105:17" pos:end="105:23">fprintf</name><argument_list pos:start="105:24" pos:end="107:71">(<argument pos:start="105:25" pos:end="105:30"><expr pos:start="105:25" pos:end="105:30"><name pos:start="105:25" pos:end="105:30">stderr</name></expr></argument>, <argument pos:start="105:33" pos:end="107:59"><expr pos:start="105:33" pos:end="107:59"><literal type="string" pos:start="105:33" pos:end="105:51">"ERROR l2_offset=%"</literal> <name pos:start="105:53" pos:end="105:58">PRIx64</name> <literal type="string" pos:start="105:60" pos:end="105:76">": Table is not "</literal>

                    <literal type="string" pos:start="107:21" pos:end="107:59">"cluster aligned; L1 entry corrupted\n"</literal></expr></argument>, <argument pos:start="107:62" pos:end="107:70"><expr pos:start="107:62" pos:end="107:70"><name pos:start="107:62" pos:end="107:70">l2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:35"><expr pos:start="109:17" pos:end="109:34"><name pos:start="109:17" pos:end="109:32"><name pos:start="109:17" pos:end="109:19">res</name><operator pos:start="109:20" pos:end="109:21">-&gt;</operator><name pos:start="109:22" pos:end="109:32">corruptions</name></name><operator pos:start="109:33" pos:end="109:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="115:13" pos:end="115:46">/* Process and check L2 entries */</comment>

            <expr_stmt pos:start="117:13" pos:end="119:76"><expr pos:start="117:13" pos:end="119:75"><name pos:start="117:13" pos:end="117:15">ret</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <call pos:start="117:19" pos:end="119:75"><name pos:start="117:19" pos:end="117:36">check_refcounts_l2</name><argument_list pos:start="117:37" pos:end="119:75">(<argument pos:start="117:38" pos:end="117:39"><expr pos:start="117:38" pos:end="117:39"><name pos:start="117:38" pos:end="117:39">bs</name></expr></argument>, <argument pos:start="117:42" pos:end="117:44"><expr pos:start="117:42" pos:end="117:44"><name pos:start="117:42" pos:end="117:44">res</name></expr></argument>, <argument pos:start="117:47" pos:end="117:60"><expr pos:start="117:47" pos:end="117:60"><name pos:start="117:47" pos:end="117:60">refcount_table</name></expr></argument>,

                                     <argument pos:start="119:38" pos:end="119:56"><expr pos:start="119:38" pos:end="119:56"><name pos:start="119:38" pos:end="119:56">refcount_table_size</name></expr></argument>, <argument pos:start="119:59" pos:end="119:67"><expr pos:start="119:59" pos:end="119:67"><name pos:start="119:59" pos:end="119:67">l2_offset</name></expr></argument>, <argument pos:start="119:70" pos:end="119:74"><expr pos:start="119:70" pos:end="119:74"><name pos:start="119:70" pos:end="119:74">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="121:13" pos:end="125:13"><if pos:start="121:13" pos:end="125:13">if <condition pos:start="121:16" pos:end="121:24">(<expr pos:start="121:17" pos:end="121:23"><name pos:start="121:17" pos:end="121:19">ret</name> <operator pos:start="121:21" pos:end="121:21">&lt;</operator> <literal type="number" pos:start="121:23" pos:end="121:23">0</literal></expr>)</condition> <block pos:start="121:26" pos:end="125:13">{<block_content pos:start="123:17" pos:end="123:26">

                <goto pos:start="123:17" pos:end="123:26">goto <name pos:start="123:22" pos:end="123:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="131:5" pos:end="131:21"><expr pos:start="131:5" pos:end="131:20"><call pos:start="131:5" pos:end="131:20"><name pos:start="131:5" pos:end="131:10">g_free</name><argument_list pos:start="131:11" pos:end="131:20">(<argument pos:start="131:12" pos:end="131:19"><expr pos:start="131:12" pos:end="131:19"><name pos:start="131:12" pos:end="131:19">l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="133:5" pos:end="133:13">return <expr pos:start="133:12" pos:end="133:12"><literal type="number" pos:start="133:12" pos:end="133:12">0</literal></expr>;</return>



<label pos:start="137:1" pos:end="137:5"><name pos:start="137:1" pos:end="137:4">fail</name>:</label>

    <expr_stmt pos:start="139:5" pos:end="139:21"><expr pos:start="139:5" pos:end="139:20"><call pos:start="139:5" pos:end="139:20"><name pos:start="139:5" pos:end="139:10">g_free</name><argument_list pos:start="139:11" pos:end="139:20">(<argument pos:start="139:12" pos:end="139:19"><expr pos:start="139:12" pos:end="139:19"><name pos:start="139:12" pos:end="139:19">l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="141:5" pos:end="141:15">return <expr pos:start="141:12" pos:end="141:14"><name pos:start="141:12" pos:end="141:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
