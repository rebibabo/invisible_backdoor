<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22116.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:18"><name pos:start="1:1" pos:end="1:10">DISAS_INSN</name><argument_list pos:start="1:11" pos:end="1:18">(<argument pos:start="1:12" pos:end="1:17">branch</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:5">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int32_t</name></type> <name pos:start="5:13" pos:end="5:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:11"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">l1</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:17"><expr pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:8">base</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <name pos:start="15:12" pos:end="15:16"><name pos:start="15:12" pos:end="15:12">s</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:16">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:27"><expr pos:start="17:5" pos:end="17:26"><name pos:start="17:5" pos:end="17:6">op</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <operator pos:start="17:10" pos:end="17:10">(</operator><name pos:start="17:11" pos:end="17:14">insn</name> <operator pos:start="17:16" pos:end="17:17">&gt;&gt;</operator> <literal type="number" pos:start="17:19" pos:end="17:19">8</literal><operator pos:start="17:20" pos:end="17:20">)</operator> <operator pos:start="17:22" pos:end="17:22">&amp;</operator> <literal type="number" pos:start="17:24" pos:end="17:26">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:26"><expr pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:10">offset</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <operator pos:start="19:14" pos:end="19:14">(</operator><name pos:start="19:15" pos:end="19:20">int8_t</name><operator pos:start="19:21" pos:end="19:21">)</operator><name pos:start="19:22" pos:end="19:25">insn</name></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:20">(<expr pos:start="21:9" pos:end="21:19"><name pos:start="21:9" pos:end="21:14">offset</name> <operator pos:start="21:16" pos:end="21:17">==</operator> <literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>)</condition> <block pos:start="21:22" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:19">

        <expr_stmt pos:start="23:9" pos:end="23:43"><expr pos:start="23:9" pos:end="23:42"><name pos:start="23:9" pos:end="23:14">offset</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <call pos:start="23:18" pos:end="23:42"><name pos:start="23:18" pos:end="23:30">cpu_ldsw_code</name><argument_list pos:start="23:31" pos:end="23:42">(<argument pos:start="23:32" pos:end="23:34"><expr pos:start="23:32" pos:end="23:34"><name pos:start="23:32" pos:end="23:34">env</name></expr></argument>, <argument pos:start="23:37" pos:end="23:41"><expr pos:start="23:37" pos:end="23:41"><name pos:start="23:37" pos:end="23:41"><name pos:start="23:37" pos:end="23:37">s</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:41">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:19"><expr pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:13"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:13">pc</name></name> <operator pos:start="25:15" pos:end="25:16">+=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="27:7" pos:end="31:5">else if <condition pos:start="27:15" pos:end="27:28">(<expr pos:start="27:16" pos:end="27:27"><name pos:start="27:16" pos:end="27:21">offset</name> <operator pos:start="27:23" pos:end="27:24">==</operator> <operator pos:start="27:26" pos:end="27:26">-</operator><literal type="number" pos:start="27:27" pos:end="27:27">1</literal></expr>)</condition> <block pos:start="27:30" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:35">

        <expr_stmt pos:start="29:9" pos:end="29:35"><expr pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:14">offset</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <call pos:start="29:18" pos:end="29:34"><name pos:start="29:18" pos:end="29:26">read_im32</name><argument_list pos:start="29:27" pos:end="29:34">(<argument pos:start="29:28" pos:end="29:30"><expr pos:start="29:28" pos:end="29:30"><name pos:start="29:28" pos:end="29:30">env</name></expr></argument>, <argument pos:start="29:33" pos:end="29:33"><expr pos:start="29:33" pos:end="29:33"><name pos:start="29:33" pos:end="29:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:10">op</name> <operator pos:start="33:12" pos:end="33:13">==</operator> <literal type="number" pos:start="33:15" pos:end="33:15">1</literal></expr>)</condition> <block pos:start="33:18" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:42">

        <comment type="block" pos:start="35:9" pos:end="35:17">/* bsr */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:42"><expr pos:start="37:9" pos:end="37:41"><call pos:start="37:9" pos:end="37:41"><name pos:start="37:9" pos:end="37:16">gen_push</name><argument_list pos:start="37:17" pos:end="37:41">(<argument pos:start="37:18" pos:end="37:18"><expr pos:start="37:18" pos:end="37:18"><name pos:start="37:18" pos:end="37:18">s</name></expr></argument>, <argument pos:start="37:21" pos:end="37:40"><expr pos:start="37:21" pos:end="37:40"><call pos:start="37:21" pos:end="37:40"><name pos:start="37:21" pos:end="37:33">tcg_const_i32</name><argument_list pos:start="37:34" pos:end="37:40">(<argument pos:start="37:35" pos:end="37:39"><expr pos:start="37:35" pos:end="37:39"><name pos:start="37:35" pos:end="37:39"><name pos:start="37:35" pos:end="37:35">s</name><operator pos:start="37:36" pos:end="37:37">-&gt;</operator><name pos:start="37:38" pos:end="37:39">pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:23"><expr pos:start="41:5" pos:end="41:22"><call pos:start="41:5" pos:end="41:22"><name pos:start="41:5" pos:end="41:19">gen_flush_cc_op</name><argument_list pos:start="41:20" pos:end="41:22">(<argument pos:start="41:21" pos:end="41:21"><expr pos:start="41:21" pos:end="41:21"><name pos:start="41:21" pos:end="41:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="63:5"><if pos:start="43:5" pos:end="57:5">if <condition pos:start="43:8" pos:end="43:15">(<expr pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:10">op</name> <operator pos:start="43:12" pos:end="43:12">&gt;</operator> <literal type="number" pos:start="43:14" pos:end="43:14">1</literal></expr>)</condition> <block pos:start="43:17" pos:end="57:5">{<block_content pos:start="47:9" pos:end="55:32">

        <comment type="block" pos:start="45:9" pos:end="45:17">/* Bcc */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:10">l1</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <call pos:start="47:14" pos:end="47:28"><name pos:start="47:14" pos:end="47:26">gen_new_label</name><argument_list pos:start="47:27" pos:end="47:28">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:50"><expr pos:start="49:9" pos:end="49:49"><call pos:start="49:9" pos:end="49:49"><name pos:start="49:9" pos:end="49:17">gen_jmpcc</name><argument_list pos:start="49:18" pos:end="49:49">(<argument pos:start="49:19" pos:end="49:19"><expr pos:start="49:19" pos:end="49:19"><name pos:start="49:19" pos:end="49:19">s</name></expr></argument>, <argument pos:start="49:22" pos:end="49:44"><expr pos:start="49:22" pos:end="49:44"><operator pos:start="49:22" pos:end="49:22">(</operator><operator pos:start="49:23" pos:end="49:23">(</operator><name pos:start="49:24" pos:end="49:27">insn</name> <operator pos:start="49:29" pos:end="49:30">&gt;&gt;</operator> <literal type="number" pos:start="49:32" pos:end="49:32">8</literal><operator pos:start="49:33" pos:end="49:33">)</operator> <operator pos:start="49:35" pos:end="49:35">&amp;</operator> <literal type="number" pos:start="49:37" pos:end="49:39">0xf</literal><operator pos:start="49:40" pos:end="49:40">)</operator> <operator pos:start="49:42" pos:end="49:42">^</operator> <literal type="number" pos:start="49:44" pos:end="49:44">1</literal></expr></argument>, <argument pos:start="49:47" pos:end="49:48"><expr pos:start="49:47" pos:end="49:48"><name pos:start="49:47" pos:end="49:48">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:40"><expr pos:start="51:9" pos:end="51:39"><call pos:start="51:9" pos:end="51:39"><name pos:start="51:9" pos:end="51:18">gen_jmp_tb</name><argument_list pos:start="51:19" pos:end="51:39">(<argument pos:start="51:20" pos:end="51:20"><expr pos:start="51:20" pos:end="51:20"><name pos:start="51:20" pos:end="51:20">s</name></expr></argument>, <argument pos:start="51:23" pos:end="51:23"><expr pos:start="51:23" pos:end="51:23"><literal type="number" pos:start="51:23" pos:end="51:23">1</literal></expr></argument>, <argument pos:start="51:26" pos:end="51:38"><expr pos:start="51:26" pos:end="51:38"><name pos:start="51:26" pos:end="51:29">base</name> <operator pos:start="51:31" pos:end="51:31">+</operator> <name pos:start="51:33" pos:end="51:38">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:26"><expr pos:start="53:9" pos:end="53:25"><call pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:21">gen_set_label</name><argument_list pos:start="53:22" pos:end="53:25">(<argument pos:start="53:23" pos:end="53:24"><expr pos:start="53:23" pos:end="53:24"><name pos:start="53:23" pos:end="53:24">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:32"><expr pos:start="55:9" pos:end="55:31"><call pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:18">gen_jmp_tb</name><argument_list pos:start="55:19" pos:end="55:31">(<argument pos:start="55:20" pos:end="55:20"><expr pos:start="55:20" pos:end="55:20"><name pos:start="55:20" pos:end="55:20">s</name></expr></argument>, <argument pos:start="55:23" pos:end="55:23"><expr pos:start="55:23" pos:end="55:23"><literal type="number" pos:start="55:23" pos:end="55:23">0</literal></expr></argument>, <argument pos:start="55:26" pos:end="55:30"><expr pos:start="55:26" pos:end="55:30"><name pos:start="55:26" pos:end="55:30"><name pos:start="55:26" pos:end="55:26">s</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:30">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="63:5">else <block pos:start="57:12" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:40">

        <comment type="block" pos:start="59:9" pos:end="59:36">/* Unconditional branch.  */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:40"><expr pos:start="61:9" pos:end="61:39"><call pos:start="61:9" pos:end="61:39"><name pos:start="61:9" pos:end="61:18">gen_jmp_tb</name><argument_list pos:start="61:19" pos:end="61:39">(<argument pos:start="61:20" pos:end="61:20"><expr pos:start="61:20" pos:end="61:20"><name pos:start="61:20" pos:end="61:20">s</name></expr></argument>, <argument pos:start="61:23" pos:end="61:23"><expr pos:start="61:23" pos:end="61:23"><literal type="number" pos:start="61:23" pos:end="61:23">0</literal></expr></argument>, <argument pos:start="61:26" pos:end="61:38"><expr pos:start="61:26" pos:end="61:38"><name pos:start="61:26" pos:end="61:29">base</name> <operator pos:start="61:31" pos:end="61:31">+</operator> <name pos:start="61:33" pos:end="61:38">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block>
</unit>
