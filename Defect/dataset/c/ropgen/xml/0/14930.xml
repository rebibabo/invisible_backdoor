<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14930.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">simple_dict</name><parameter_list pos:start="1:24" pos:end="1:29">(<parameter pos:start="1:25" pos:end="1:28"><decl pos:start="1:25" pos:end="1:28"><type pos:start="1:25" pos:end="1:28"><name pos:start="1:25" pos:end="1:28">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <struct pos:start="7:5" pos:end="55:6">struct <block pos:start="7:12" pos:end="13:5">{

        <decl_stmt pos:start="9:9" pos:end="9:28"><decl pos:start="9:9" pos:end="9:27"><type pos:start="9:9" pos:end="9:20"><specifier pos:start="9:9" pos:end="9:13">const</specifier> <name pos:start="9:15" pos:end="9:18">char</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:27">encoded</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:31"><decl pos:start="11:9" pos:end="11:30"><type pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:22">LiteralQObject</name></type> <name pos:start="11:24" pos:end="11:30">decoded</name></decl>;</decl_stmt>

    }</block> <decl pos:start="13:7" pos:end="55:5"><name pos:start="13:7" pos:end="13:18"><name pos:start="13:7" pos:end="13:16">test_cases</name><index pos:start="13:17" pos:end="13:18">[]</index></name> <init pos:start="13:20" pos:end="55:5">= <expr pos:start="13:22" pos:end="55:5"><block pos:start="13:22" pos:end="55:5">{

        <expr pos:start="15:9" pos:end="29:9"><block pos:start="15:9" pos:end="29:9">{

            <expr pos:start="17:13" pos:end="17:64"><operator pos:start="17:13" pos:end="17:13">.</operator><name pos:start="17:14" pos:end="17:20">encoded</name> <operator pos:start="17:22" pos:end="17:22">=</operator> <literal type="string" pos:start="17:24" pos:end="17:64">"{\"foo\": 42, \"bar\": \"hello world\"}"</literal></expr>,

            <expr pos:start="19:13" pos:end="27:23"><operator pos:start="19:13" pos:end="19:13">.</operator><name pos:start="19:14" pos:end="19:20">decoded</name> <operator pos:start="19:22" pos:end="19:22">=</operator> <macro pos:start="19:24" pos:end="27:23"><name pos:start="19:24" pos:end="19:33">QLIT_QDICT</name><argument_list pos:start="19:34" pos:end="27:23">(<argument pos:start="19:35" pos:end="27:22">((LiteralQDictEntry[]){

                        { <literal type="string" pos:start="21:27" pos:end="21:31">"foo"</literal>, QLIT_QINT(<literal type="number" pos:start="21:44" pos:end="21:45">42</literal>) },

                        { <literal type="string" pos:start="23:27" pos:end="23:31">"bar"</literal>, QLIT_QSTR(<literal type="string" pos:start="23:44" pos:end="23:56">"hello world"</literal>) },

                        { }

                    })</argument>)</argument_list></macro></expr>,

        }</block></expr>, <expr pos:start="29:12" pos:end="39:9"><block pos:start="29:12" pos:end="39:9">{

            <expr pos:start="31:13" pos:end="31:27"><operator pos:start="31:13" pos:end="31:13">.</operator><name pos:start="31:14" pos:end="31:20">encoded</name> <operator pos:start="31:22" pos:end="31:22">=</operator> <literal type="string" pos:start="31:24" pos:end="31:27">"{}"</literal></expr>,

            <expr pos:start="33:13" pos:end="37:23"><operator pos:start="33:13" pos:end="33:13">.</operator><name pos:start="33:14" pos:end="33:20">decoded</name> <operator pos:start="33:22" pos:end="33:22">=</operator> <macro pos:start="33:24" pos:end="37:23"><name pos:start="33:24" pos:end="33:33">QLIT_QDICT</name><argument_list pos:start="33:34" pos:end="37:23">(<argument pos:start="33:35" pos:end="37:22">((LiteralQDictEntry[]){

                        { }

                    })</argument>)</argument_list></macro></expr>,

        }</block></expr>, <expr pos:start="39:12" pos:end="51:9"><block pos:start="39:12" pos:end="51:9">{

            <expr pos:start="41:13" pos:end="41:38"><operator pos:start="41:13" pos:end="41:13">.</operator><name pos:start="41:14" pos:end="41:20">encoded</name> <operator pos:start="41:22" pos:end="41:22">=</operator> <literal type="string" pos:start="41:24" pos:end="41:38">"{\"foo\": 43}"</literal></expr>,

            <expr pos:start="43:13" pos:end="49:23"><operator pos:start="43:13" pos:end="43:13">.</operator><name pos:start="43:14" pos:end="43:20">decoded</name> <operator pos:start="43:22" pos:end="43:22">=</operator> <macro pos:start="43:24" pos:end="49:23"><name pos:start="43:24" pos:end="43:33">QLIT_QDICT</name><argument_list pos:start="43:34" pos:end="49:23">(<argument pos:start="43:35" pos:end="49:22">((LiteralQDictEntry[]){

                        { <literal type="string" pos:start="45:27" pos:end="45:31">"foo"</literal>, QLIT_QINT(<literal type="number" pos:start="45:44" pos:end="45:45">43</literal>) },

                        { }

                    })</argument>)</argument_list></macro></expr>,

        }</block></expr>,

        <expr pos:start="53:9" pos:end="53:11"><block pos:start="53:9" pos:end="53:11">{ }</block></expr>

    }</block></expr></init></decl>;</struct>



    <for pos:start="59:5" pos:end="99:5">for <control pos:start="59:9" pos:end="59:43">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:38"><expr pos:start="59:17" pos:end="59:37"><name pos:start="59:17" pos:end="59:29"><name pos:start="59:17" pos:end="59:26">test_cases</name><index pos:start="59:27" pos:end="59:29">[<expr pos:start="59:28" pos:end="59:28"><name pos:start="59:28" pos:end="59:28">i</name></expr>]</index></name><operator pos:start="59:30" pos:end="59:30">.</operator><name pos:start="59:31" pos:end="59:37">encoded</name></expr>;</condition> <incr pos:start="59:40" pos:end="59:42"><expr pos:start="59:40" pos:end="59:42"><name pos:start="59:40" pos:end="59:40">i</name><operator pos:start="59:41" pos:end="59:42">++</operator></expr></incr>)</control> <block pos:start="59:45" pos:end="99:5">{<block_content pos:start="61:9" pos:end="97:21">

        <decl_stmt pos:start="61:9" pos:end="61:21"><decl pos:start="61:9" pos:end="61:20"><type pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:15">QObject</name> <modifier pos:start="61:17" pos:end="61:17">*</modifier></type><name pos:start="61:18" pos:end="61:20">obj</name></decl>;</decl_stmt>

        <decl_stmt pos:start="63:9" pos:end="63:21"><decl pos:start="63:9" pos:end="63:20"><type pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:15">QString</name> <modifier pos:start="63:17" pos:end="63:17">*</modifier></type><name pos:start="63:18" pos:end="63:20">str</name></decl>;</decl_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:55"><expr pos:start="67:9" pos:end="67:54"><name pos:start="67:9" pos:end="67:11">obj</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:54"><name pos:start="67:15" pos:end="67:31">qobject_from_json</name><argument_list pos:start="67:32" pos:end="67:54">(<argument pos:start="67:33" pos:end="67:53"><expr pos:start="67:33" pos:end="67:53"><name pos:start="67:33" pos:end="67:45"><name pos:start="67:33" pos:end="67:42">test_cases</name><index pos:start="67:43" pos:end="67:45">[<expr pos:start="67:44" pos:end="67:44"><name pos:start="67:44" pos:end="67:44">i</name></expr>]</index></name><operator pos:start="67:46" pos:end="67:46">.</operator><name pos:start="67:47" pos:end="67:53">encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:30"><expr pos:start="69:9" pos:end="69:29"><call pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:16">g_assert</name><argument_list pos:start="69:17" pos:end="69:29">(<argument pos:start="69:18" pos:end="69:28"><expr pos:start="69:18" pos:end="69:28"><name pos:start="69:18" pos:end="69:20">obj</name> <operator pos:start="69:22" pos:end="69:23">!=</operator> <name pos:start="69:25" pos:end="69:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:51"><expr pos:start="71:9" pos:end="71:50"><call pos:start="71:9" pos:end="71:50"><name pos:start="71:9" pos:end="71:16">g_assert</name><argument_list pos:start="71:17" pos:end="71:50">(<argument pos:start="71:18" pos:end="71:49"><expr pos:start="71:18" pos:end="71:49"><call pos:start="71:18" pos:end="71:34"><name pos:start="71:18" pos:end="71:29">qobject_type</name><argument_list pos:start="71:30" pos:end="71:34">(<argument pos:start="71:31" pos:end="71:33"><expr pos:start="71:31" pos:end="71:33"><name pos:start="71:31" pos:end="71:33">obj</name></expr></argument>)</argument_list></call> <operator pos:start="71:36" pos:end="71:37">==</operator> <name pos:start="71:39" pos:end="71:49">QTYPE_QDICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:76"><expr pos:start="75:9" pos:end="75:75"><call pos:start="75:9" pos:end="75:75"><name pos:start="75:9" pos:end="75:16">g_assert</name><argument_list pos:start="75:17" pos:end="75:75">(<argument pos:start="75:18" pos:end="75:74"><expr pos:start="75:18" pos:end="75:74"><call pos:start="75:18" pos:end="75:69"><name pos:start="75:18" pos:end="75:40">compare_litqobj_to_qobj</name><argument_list pos:start="75:41" pos:end="75:69">(<argument pos:start="75:42" pos:end="75:63"><expr pos:start="75:42" pos:end="75:63"><operator pos:start="75:42" pos:end="75:42">&amp;</operator><name pos:start="75:43" pos:end="75:55"><name pos:start="75:43" pos:end="75:52">test_cases</name><index pos:start="75:53" pos:end="75:55">[<expr pos:start="75:54" pos:end="75:54"><name pos:start="75:54" pos:end="75:54">i</name></expr>]</index></name><operator pos:start="75:56" pos:end="75:56">.</operator><name pos:start="75:57" pos:end="75:63">decoded</name></expr></argument>, <argument pos:start="75:66" pos:end="75:68"><expr pos:start="75:66" pos:end="75:68"><name pos:start="75:66" pos:end="75:68">obj</name></expr></argument>)</argument_list></call> <operator pos:start="75:71" pos:end="75:72">==</operator> <literal type="number" pos:start="75:74" pos:end="75:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:35"><expr pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:11">str</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:34"><name pos:start="79:15" pos:end="79:29">qobject_to_json</name><argument_list pos:start="79:30" pos:end="79:34">(<argument pos:start="79:31" pos:end="79:33"><expr pos:start="79:31" pos:end="79:33"><name pos:start="79:31" pos:end="79:33">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:28"><expr pos:start="81:9" pos:end="81:27"><call pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:22">qobject_decref</name><argument_list pos:start="81:23" pos:end="81:27">(<argument pos:start="81:24" pos:end="81:26"><expr pos:start="81:24" pos:end="81:26"><name pos:start="81:24" pos:end="81:26">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:54"><expr pos:start="85:9" pos:end="85:53"><name pos:start="85:9" pos:end="85:11">obj</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:53"><name pos:start="85:15" pos:end="85:31">qobject_from_json</name><argument_list pos:start="85:32" pos:end="85:53">(<argument pos:start="85:33" pos:end="85:52"><expr pos:start="85:33" pos:end="85:52"><call pos:start="85:33" pos:end="85:52"><name pos:start="85:33" pos:end="85:47">qstring_get_str</name><argument_list pos:start="85:48" pos:end="85:52">(<argument pos:start="85:49" pos:end="85:51"><expr pos:start="85:49" pos:end="85:51"><name pos:start="85:49" pos:end="85:51">str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:30"><expr pos:start="87:9" pos:end="87:29"><call pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:16">g_assert</name><argument_list pos:start="87:17" pos:end="87:29">(<argument pos:start="87:18" pos:end="87:28"><expr pos:start="87:18" pos:end="87:28"><name pos:start="87:18" pos:end="87:20">obj</name> <operator pos:start="87:22" pos:end="87:23">!=</operator> <name pos:start="87:25" pos:end="87:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:51"><expr pos:start="89:9" pos:end="89:50"><call pos:start="89:9" pos:end="89:50"><name pos:start="89:9" pos:end="89:16">g_assert</name><argument_list pos:start="89:17" pos:end="89:50">(<argument pos:start="89:18" pos:end="89:49"><expr pos:start="89:18" pos:end="89:49"><call pos:start="89:18" pos:end="89:34"><name pos:start="89:18" pos:end="89:29">qobject_type</name><argument_list pos:start="89:30" pos:end="89:34">(<argument pos:start="89:31" pos:end="89:33"><expr pos:start="89:31" pos:end="89:33"><name pos:start="89:31" pos:end="89:33">obj</name></expr></argument>)</argument_list></call> <operator pos:start="89:36" pos:end="89:37">==</operator> <name pos:start="89:39" pos:end="89:49">QTYPE_QDICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:76"><expr pos:start="93:9" pos:end="93:75"><call pos:start="93:9" pos:end="93:75"><name pos:start="93:9" pos:end="93:16">g_assert</name><argument_list pos:start="93:17" pos:end="93:75">(<argument pos:start="93:18" pos:end="93:74"><expr pos:start="93:18" pos:end="93:74"><call pos:start="93:18" pos:end="93:69"><name pos:start="93:18" pos:end="93:40">compare_litqobj_to_qobj</name><argument_list pos:start="93:41" pos:end="93:69">(<argument pos:start="93:42" pos:end="93:63"><expr pos:start="93:42" pos:end="93:63"><operator pos:start="93:42" pos:end="93:42">&amp;</operator><name pos:start="93:43" pos:end="93:55"><name pos:start="93:43" pos:end="93:52">test_cases</name><index pos:start="93:53" pos:end="93:55">[<expr pos:start="93:54" pos:end="93:54"><name pos:start="93:54" pos:end="93:54">i</name></expr>]</index></name><operator pos:start="93:56" pos:end="93:56">.</operator><name pos:start="93:57" pos:end="93:63">decoded</name></expr></argument>, <argument pos:start="93:66" pos:end="93:68"><expr pos:start="93:66" pos:end="93:68"><name pos:start="93:66" pos:end="93:68">obj</name></expr></argument>)</argument_list></call> <operator pos:start="93:71" pos:end="93:72">==</operator> <literal type="number" pos:start="93:74" pos:end="93:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:28"><expr pos:start="95:9" pos:end="95:27"><call pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:22">qobject_decref</name><argument_list pos:start="95:23" pos:end="95:27">(<argument pos:start="95:24" pos:end="95:26"><expr pos:start="95:24" pos:end="95:26"><name pos:start="95:24" pos:end="95:26">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:21"><expr pos:start="97:9" pos:end="97:20"><call pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:15">QDECREF</name><argument_list pos:start="97:16" pos:end="97:20">(<argument pos:start="97:17" pos:end="97:19"><expr pos:start="97:17" pos:end="97:19"><name pos:start="97:17" pos:end="97:19">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
