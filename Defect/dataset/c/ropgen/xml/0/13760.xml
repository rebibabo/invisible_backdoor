<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13760.c" pos:tabs="8"><function pos:start="1:1" pos:end="333:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:34">gen_intermediate_code_internal</name> <parameter_list pos:start="1:36" pos:end="3:50">(<parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:44">CPUState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">env</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:71"><decl pos:start="1:52" pos:end="1:71"><type pos:start="1:52" pos:end="1:71"><name pos:start="1:52" pos:end="1:67">TranslationBlock</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:71">tb</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:49"><decl pos:start="3:37" pos:end="3:49"><type pos:start="3:37" pos:end="3:49"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:49">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="333:1">{<block_content pos:start="7:5" pos:end="331:13">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">DisasContext</name></type> <name pos:start="7:18" pos:end="7:20">ctx</name></decl>, <decl pos:start="7:23" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:16"><modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:27">ctxp</name> <init pos:start="7:29" pos:end="7:34">= <expr pos:start="7:31" pos:end="7:34"><operator pos:start="7:31" pos:end="7:31">&amp;</operator><name pos:start="7:32" pos:end="7:34">ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:17">opc_handler_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier><modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:25">table</name></decl>, <decl pos:start="9:28" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:20"><modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:35">handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:21">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint16_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">j</name></decl>, <decl pos:start="15:12" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:13">lj</name> <init pos:start="15:15" pos:end="15:18">= <expr pos:start="15:17" pos:end="15:18"><operator pos:start="15:17" pos:end="15:17">-</operator><literal type="number" pos:start="15:18" pos:end="15:18">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:12">pc_start</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:21"><name pos:start="19:16" pos:end="19:17">tb</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:30"><expr pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:15">gen_opc_ptr</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <name pos:start="21:19" pos:end="21:29">gen_opc_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:45"><expr pos:start="23:5" pos:end="23:44"><name pos:start="23:5" pos:end="23:15">gen_opc_end</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <name pos:start="23:19" pos:end="23:29">gen_opc_buf</name> <operator pos:start="23:31" pos:end="23:31">+</operator> <name pos:start="23:33" pos:end="23:44">OPC_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:19">gen_opparam_ptr</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <name pos:start="25:23" pos:end="25:37">gen_opparam_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:23"><expr pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:7">ctx</name><operator pos:start="27:8" pos:end="27:8">.</operator><name pos:start="27:9" pos:end="27:11">nip</name></name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:22">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:16"><expr pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:7">ctx</name><operator pos:start="29:8" pos:end="29:8">.</operator><name pos:start="29:9" pos:end="29:10">tb</name></name> <operator pos:start="29:12" pos:end="29:12">=</operator> <name pos:start="29:14" pos:end="29:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="34:0"><expr pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:7">ctx</name><operator pos:start="31:8" pos:end="31:8">.</operator><name pos:start="31:9" pos:end="31:17">exception</name></name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:29">EXCP_NONE</name></expr>;</expr_stmt>

<cpp:if pos:start="33:1" pos:end="33:29">#<cpp:directive pos:start="33:2" pos:end="33:3">if</cpp:directive> <expr pos:start="33:5" pos:end="33:29"><call pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:11">defined</name><argument_list pos:start="33:12" pos:end="33:29">(<argument pos:start="33:13" pos:end="33:28"><expr pos:start="33:13" pos:end="33:28"><name pos:start="33:13" pos:end="33:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:7">ctx</name><operator pos:start="35:8" pos:end="35:8">.</operator><name pos:start="35:9" pos:end="35:15">mem_idx</name></name> <operator pos:start="35:17" pos:end="35:17">=</operator> <literal type="number" pos:start="35:19" pos:end="35:19">0</literal></expr>;</expr_stmt>

<cpp:else pos:start="37:1" pos:end="37:5">#<cpp:directive pos:start="37:2" pos:end="37:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="39:5" pos:end="39:32"><expr pos:start="39:5" pos:end="39:31"><name pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:7">ctx</name><operator pos:start="39:8" pos:end="39:8">.</operator><name pos:start="39:9" pos:end="39:18">supervisor</name></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <literal type="number" pos:start="39:22" pos:end="39:24">1</literal> <operator pos:start="39:24" pos:end="39:24">-</operator> <name pos:start="39:26" pos:end="39:31">msr_pr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="46:0"><expr pos:start="41:5" pos:end="41:30"><name pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:7">ctx</name><operator pos:start="41:8" pos:end="41:8">.</operator><name pos:start="41:9" pos:end="41:15">mem_idx</name></name> <operator pos:start="41:17" pos:end="41:17">=</operator> <operator pos:start="41:19" pos:end="41:19">(</operator><literal type="number" pos:start="41:20" pos:end="41:22">1</literal> <operator pos:start="41:22" pos:end="41:22">-</operator> <name pos:start="41:24" pos:end="41:29">msr_pr</name><operator pos:start="41:30" pos:end="41:30">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="45:1" pos:end="45:28">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:28"><call pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:11">defined</name> <argument_list pos:start="45:13" pos:end="45:28">(<argument pos:start="45:14" pos:end="45:27"><expr pos:start="45:14" pos:end="45:27"><name pos:start="45:14" pos:end="45:27">DO_SINGLE_STEP</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="47:5" pos:end="47:32">/* Single step trace mode */</comment>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:10">msr_se</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="53:5" pos:end="53:35"><expr pos:start="53:5" pos:end="53:34"><name pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:7">env</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:20">access_type</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:34">ACCESS_CODE</name></expr>;</expr_stmt>

    <comment type="block" pos:start="55:5" pos:end="55:55">/* Set env in case of segfault during code fetch */</comment>

    <while pos:start="57:5" pos:end="237:5">while <condition pos:start="57:11" pos:end="57:67">(<expr pos:start="57:12" pos:end="57:66"><name pos:start="57:12" pos:end="57:24"><name pos:start="57:12" pos:end="57:14">ctx</name><operator pos:start="57:15" pos:end="57:15">.</operator><name pos:start="57:16" pos:end="57:24">exception</name></name> <operator pos:start="57:26" pos:end="57:27">==</operator> <name pos:start="57:29" pos:end="57:37">EXCP_NONE</name> <operator pos:start="57:39" pos:end="57:40">&amp;&amp;</operator> <name pos:start="57:42" pos:end="57:52">gen_opc_ptr</name> <operator pos:start="57:54" pos:end="57:54">&lt;</operator> <name pos:start="57:56" pos:end="57:66">gen_opc_end</name></expr>)</condition> <block pos:start="57:69" pos:end="237:5">{<block_content pos:start="59:9" pos:end="235:5">

        <if_stmt pos:start="59:9" pos:end="84:0"><if pos:start="59:9" pos:end="84:0">if <condition pos:start="59:12" pos:end="59:22">(<expr pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:21">search_pc</name></expr>)</condition> <block pos:start="59:24" pos:end="84:0">{<block_content pos:start="61:13" pos:end="79:13">

            <if_stmt pos:start="61:13" pos:end="63:51"><if pos:start="61:13" pos:end="63:51">if <condition pos:start="61:16" pos:end="61:29">(<expr pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:24">loglevel</name> <operator pos:start="61:26" pos:end="61:26">&gt;</operator> <literal type="number" pos:start="61:28" pos:end="61:28">0</literal></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:51"><block_content pos:start="63:17" pos:end="63:51">

                <expr_stmt pos:start="63:17" pos:end="63:51"><expr pos:start="63:17" pos:end="63:50"><call pos:start="63:17" pos:end="63:50"><name pos:start="63:17" pos:end="63:23">fprintf</name><argument_list pos:start="63:24" pos:end="63:50">(<argument pos:start="63:25" pos:end="63:31"><expr pos:start="63:25" pos:end="63:31"><name pos:start="63:25" pos:end="63:31">logfile</name></expr></argument>, <argument pos:start="63:34" pos:end="63:49"><expr pos:start="63:34" pos:end="63:49"><literal type="string" pos:start="63:34" pos:end="63:49">"Search PC...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:42"><expr pos:start="65:13" pos:end="65:41"><name pos:start="65:13" pos:end="65:13">j</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:27">gen_opc_ptr</name> <operator pos:start="65:29" pos:end="65:29">-</operator> <name pos:start="65:31" pos:end="65:41">gen_opc_buf</name></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="79:13"><if pos:start="67:13" pos:end="79:13">if <condition pos:start="67:16" pos:end="67:23">(<expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:18">lj</name> <operator pos:start="67:20" pos:end="67:20">&lt;</operator> <name pos:start="67:22" pos:end="67:22">j</name></expr>)</condition> <block pos:start="67:25" pos:end="79:13">{<block_content pos:start="69:17" pos:end="77:44">

                <expr_stmt pos:start="69:17" pos:end="69:21"><expr pos:start="69:17" pos:end="69:20"><name pos:start="69:17" pos:end="69:18">lj</name><operator pos:start="69:19" pos:end="69:20">++</operator></expr>;</expr_stmt>

                <while pos:start="71:17" pos:end="73:50">while <condition pos:start="71:23" pos:end="71:30">(<expr pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:25">lj</name> <operator pos:start="71:27" pos:end="71:27">&lt;</operator> <name pos:start="71:29" pos:end="71:29">j</name></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:50"><block_content pos:start="73:21" pos:end="73:50">

                    <expr_stmt pos:start="73:21" pos:end="73:50"><expr pos:start="73:21" pos:end="73:49"><name pos:start="73:21" pos:end="73:45"><name pos:start="73:21" pos:end="73:39">gen_opc_instr_start</name><index pos:start="73:40" pos:end="73:45">[<expr pos:start="73:41" pos:end="73:44"><name pos:start="73:41" pos:end="73:42">lj</name><operator pos:start="73:43" pos:end="73:44">++</operator></expr>]</index></name> <operator pos:start="73:47" pos:end="73:47">=</operator> <literal type="number" pos:start="73:49" pos:end="73:49">0</literal></expr>;</expr_stmt></block_content></block></while>

                <expr_stmt pos:start="75:17" pos:end="75:41"><expr pos:start="75:17" pos:end="75:40"><name pos:start="75:17" pos:end="75:30"><name pos:start="75:17" pos:end="75:26">gen_opc_pc</name><index pos:start="75:27" pos:end="75:30">[<expr pos:start="75:28" pos:end="75:29"><name pos:start="75:28" pos:end="75:29">lj</name></expr>]</index></name> <operator pos:start="75:32" pos:end="75:32">=</operator> <name pos:start="75:34" pos:end="75:40"><name pos:start="75:34" pos:end="75:36">ctx</name><operator pos:start="75:37" pos:end="75:37">.</operator><name pos:start="75:38" pos:end="75:40">nip</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:44"><expr pos:start="77:17" pos:end="77:43"><name pos:start="77:17" pos:end="77:39"><name pos:start="77:17" pos:end="77:35">gen_opc_instr_start</name><index pos:start="77:36" pos:end="77:39">[<expr pos:start="77:37" pos:end="77:38"><name pos:start="77:37" pos:end="77:38">lj</name></expr>]</index></name> <operator pos:start="77:41" pos:end="77:41">=</operator> <literal type="number" pos:start="77:43" pos:end="77:43">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:if pos:start="83:1" pos:end="83:27">#<cpp:directive pos:start="83:2" pos:end="83:3">if</cpp:directive> <expr pos:start="83:5" pos:end="83:27"><name pos:start="83:5" pos:end="83:11">defined</name> <name pos:start="83:13" pos:end="83:27">PPC_DEBUG_DISAS</name></expr></cpp:if>

        <if_stmt pos:start="85:9" pos:end="96:0"><if pos:start="85:9" pos:end="96:0">if <condition pos:start="85:12" pos:end="85:41">(<expr pos:start="85:13" pos:end="85:40"><name pos:start="85:13" pos:end="85:20">loglevel</name> <operator pos:start="85:22" pos:end="85:22">&amp;</operator> <name pos:start="85:24" pos:end="85:40">CPU_LOG_TB_IN_ASM</name></expr>)</condition> <block pos:start="85:43" pos:end="96:0">{<block_content pos:start="87:13" pos:end="91:49">

            <expr_stmt pos:start="87:13" pos:end="87:51"><expr pos:start="87:13" pos:end="87:50"><call pos:start="87:13" pos:end="87:50"><name pos:start="87:13" pos:end="87:19">fprintf</name><argument_list pos:start="87:20" pos:end="87:50">(<argument pos:start="87:21" pos:end="87:27"><expr pos:start="87:21" pos:end="87:27"><name pos:start="87:21" pos:end="87:27">logfile</name></expr></argument>, <argument pos:start="87:30" pos:end="87:49"><expr pos:start="87:30" pos:end="87:49"><literal type="string" pos:start="87:30" pos:end="87:49">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="91:49"><expr pos:start="89:13" pos:end="91:48"><call pos:start="89:13" pos:end="91:48"><name pos:start="89:13" pos:end="89:19">fprintf</name><argument_list pos:start="89:20" pos:end="91:48">(<argument pos:start="89:21" pos:end="89:27"><expr pos:start="89:21" pos:end="89:27"><name pos:start="89:21" pos:end="89:27">logfile</name></expr></argument>, <argument pos:start="89:30" pos:end="89:56"><expr pos:start="89:30" pos:end="89:56"><literal type="string" pos:start="89:30" pos:end="89:56">"nip=%08x super=%d ir=%d\n"</literal></expr></argument>,

                    <argument pos:start="91:21" pos:end="91:27"><expr pos:start="91:21" pos:end="91:27"><name pos:start="91:21" pos:end="91:27"><name pos:start="91:21" pos:end="91:23">ctx</name><operator pos:start="91:24" pos:end="91:24">.</operator><name pos:start="91:25" pos:end="91:27">nip</name></name></expr></argument>, <argument pos:start="91:30" pos:end="91:39"><expr pos:start="91:30" pos:end="91:39"><literal type="number" pos:start="91:30" pos:end="91:32">1</literal> <operator pos:start="91:32" pos:end="91:32">-</operator> <name pos:start="91:34" pos:end="91:39">msr_pr</name></expr></argument>, <argument pos:start="91:42" pos:end="91:47"><expr pos:start="91:42" pos:end="91:47"><name pos:start="91:42" pos:end="91:47">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="97:9" pos:end="100:0"><expr pos:start="97:9" pos:end="97:46"><name pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:11">ctx</name><operator pos:start="97:12" pos:end="97:12">.</operator><name pos:start="97:13" pos:end="97:18">opcode</name></name> <operator pos:start="97:20" pos:end="97:20">=</operator> <call pos:start="97:22" pos:end="97:46"><name pos:start="97:22" pos:end="97:29">ldl_code</name><argument_list pos:start="97:30" pos:end="97:46">(<argument pos:start="97:31" pos:end="97:45"><expr pos:start="97:31" pos:end="97:45"><operator pos:start="97:31" pos:end="97:31">(</operator><name pos:start="97:32" pos:end="97:35">void</name> <operator pos:start="97:37" pos:end="97:37">*</operator><operator pos:start="97:38" pos:end="97:38">)</operator><name pos:start="97:39" pos:end="97:45"><name pos:start="97:39" pos:end="97:41">ctx</name><operator pos:start="97:42" pos:end="97:42">.</operator><name pos:start="97:43" pos:end="97:45">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="99:1" pos:end="99:27">#<cpp:directive pos:start="99:2" pos:end="99:3">if</cpp:directive> <expr pos:start="99:5" pos:end="99:27"><name pos:start="99:5" pos:end="99:11">defined</name> <name pos:start="99:13" pos:end="99:27">PPC_DEBUG_DISAS</name></expr></cpp:if>

        <if_stmt pos:start="101:9" pos:end="112:0"><if pos:start="101:9" pos:end="112:0">if <condition pos:start="101:12" pos:end="101:41">(<expr pos:start="101:13" pos:end="101:40"><name pos:start="101:13" pos:end="101:20">loglevel</name> <operator pos:start="101:22" pos:end="101:22">&amp;</operator> <name pos:start="101:24" pos:end="101:40">CPU_LOG_TB_IN_ASM</name></expr>)</condition> <block pos:start="101:43" pos:end="112:0">{<block_content pos:start="103:13" pos:end="107:38">

            <expr_stmt pos:start="103:13" pos:end="107:38"><expr pos:start="103:13" pos:end="107:37"><call pos:start="103:13" pos:end="107:37"><name pos:start="103:13" pos:end="103:19">fprintf</name><argument_list pos:start="103:20" pos:end="107:37">(<argument pos:start="103:21" pos:end="103:27"><expr pos:start="103:21" pos:end="103:27"><name pos:start="103:21" pos:end="103:27">logfile</name></expr></argument>, <argument pos:start="103:30" pos:end="103:71"><expr pos:start="103:30" pos:end="103:71"><literal type="string" pos:start="103:30" pos:end="103:71">"translate opcode %08x (%02x %02x %02x)\n"</literal></expr></argument>,

                    <argument pos:start="105:21" pos:end="105:30"><expr pos:start="105:21" pos:end="105:30"><name pos:start="105:21" pos:end="105:30"><name pos:start="105:21" pos:end="105:23">ctx</name><operator pos:start="105:24" pos:end="105:24">.</operator><name pos:start="105:25" pos:end="105:30">opcode</name></name></expr></argument>, <argument pos:start="105:33" pos:end="105:48"><expr pos:start="105:33" pos:end="105:48"><call pos:start="105:33" pos:end="105:48"><name pos:start="105:33" pos:end="105:36">opc1</name><argument_list pos:start="105:37" pos:end="105:48">(<argument pos:start="105:38" pos:end="105:47"><expr pos:start="105:38" pos:end="105:47"><name pos:start="105:38" pos:end="105:47"><name pos:start="105:38" pos:end="105:40">ctx</name><operator pos:start="105:41" pos:end="105:41">.</operator><name pos:start="105:42" pos:end="105:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="105:51" pos:end="105:66"><expr pos:start="105:51" pos:end="105:66"><call pos:start="105:51" pos:end="105:66"><name pos:start="105:51" pos:end="105:54">opc2</name><argument_list pos:start="105:55" pos:end="105:66">(<argument pos:start="105:56" pos:end="105:65"><expr pos:start="105:56" pos:end="105:65"><name pos:start="105:56" pos:end="105:65"><name pos:start="105:56" pos:end="105:58">ctx</name><operator pos:start="105:59" pos:end="105:59">.</operator><name pos:start="105:60" pos:end="105:65">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="107:21" pos:end="107:36"><expr pos:start="107:21" pos:end="107:36"><call pos:start="107:21" pos:end="107:36"><name pos:start="107:21" pos:end="107:24">opc3</name><argument_list pos:start="107:25" pos:end="107:36">(<argument pos:start="107:26" pos:end="107:35"><expr pos:start="107:26" pos:end="107:35"><name pos:start="107:26" pos:end="107:35"><name pos:start="107:26" pos:end="107:28">ctx</name><operator pos:start="107:29" pos:end="107:29">.</operator><name pos:start="107:30" pos:end="107:35">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="113:9" pos:end="113:21"><expr pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:15"><name pos:start="113:9" pos:end="113:11">ctx</name><operator pos:start="113:12" pos:end="113:12">.</operator><name pos:start="113:13" pos:end="113:15">nip</name></name> <operator pos:start="113:17" pos:end="113:18">+=</operator> <literal type="number" pos:start="113:20" pos:end="113:20">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:28"><expr pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:13">table</name> <operator pos:start="115:15" pos:end="115:15">=</operator> <name pos:start="115:17" pos:end="115:27">ppc_opcodes</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:42"><expr pos:start="117:9" pos:end="117:41"><name pos:start="117:9" pos:end="117:15">handler</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <name pos:start="117:19" pos:end="117:41"><name pos:start="117:19" pos:end="117:23">table</name><index pos:start="117:24" pos:end="117:41">[<expr pos:start="117:25" pos:end="117:40"><call pos:start="117:25" pos:end="117:40"><name pos:start="117:25" pos:end="117:28">opc1</name><argument_list pos:start="117:29" pos:end="117:40">(<argument pos:start="117:30" pos:end="117:39"><expr pos:start="117:30" pos:end="117:39"><name pos:start="117:30" pos:end="117:39"><name pos:start="117:30" pos:end="117:32">ctx</name><operator pos:start="117:33" pos:end="117:33">.</operator><name pos:start="117:34" pos:end="117:39">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="133:9"><if pos:start="119:9" pos:end="133:9">if <condition pos:start="119:12" pos:end="119:40">(<expr pos:start="119:13" pos:end="119:39"><call pos:start="119:13" pos:end="119:39"><name pos:start="119:13" pos:end="119:30">is_indirect_opcode</name><argument_list pos:start="119:31" pos:end="119:39">(<argument pos:start="119:32" pos:end="119:38"><expr pos:start="119:32" pos:end="119:38"><name pos:start="119:32" pos:end="119:38">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:42" pos:end="133:9">{<block_content pos:start="121:13" pos:end="131:13">

            <expr_stmt pos:start="121:13" pos:end="121:39"><expr pos:start="121:13" pos:end="121:38"><name pos:start="121:13" pos:end="121:17">table</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <call pos:start="121:21" pos:end="121:38"><name pos:start="121:21" pos:end="121:29">ind_table</name><argument_list pos:start="121:30" pos:end="121:38">(<argument pos:start="121:31" pos:end="121:37"><expr pos:start="121:31" pos:end="121:37"><name pos:start="121:31" pos:end="121:37">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:46"><expr pos:start="123:13" pos:end="123:45"><name pos:start="123:13" pos:end="123:19">handler</name> <operator pos:start="123:21" pos:end="123:21">=</operator> <name pos:start="123:23" pos:end="123:45"><name pos:start="123:23" pos:end="123:27">table</name><index pos:start="123:28" pos:end="123:45">[<expr pos:start="123:29" pos:end="123:44"><call pos:start="123:29" pos:end="123:44"><name pos:start="123:29" pos:end="123:32">opc2</name><argument_list pos:start="123:33" pos:end="123:44">(<argument pos:start="123:34" pos:end="123:43"><expr pos:start="123:34" pos:end="123:43"><name pos:start="123:34" pos:end="123:43"><name pos:start="123:34" pos:end="123:36">ctx</name><operator pos:start="123:37" pos:end="123:37">.</operator><name pos:start="123:38" pos:end="123:43">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="131:13"><if pos:start="125:13" pos:end="131:13">if <condition pos:start="125:16" pos:end="125:44">(<expr pos:start="125:17" pos:end="125:43"><call pos:start="125:17" pos:end="125:43"><name pos:start="125:17" pos:end="125:34">is_indirect_opcode</name><argument_list pos:start="125:35" pos:end="125:43">(<argument pos:start="125:36" pos:end="125:42"><expr pos:start="125:36" pos:end="125:42"><name pos:start="125:36" pos:end="125:42">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:46" pos:end="131:13">{<block_content pos:start="127:17" pos:end="129:50">

                <expr_stmt pos:start="127:17" pos:end="127:43"><expr pos:start="127:17" pos:end="127:42"><name pos:start="127:17" pos:end="127:21">table</name> <operator pos:start="127:23" pos:end="127:23">=</operator> <call pos:start="127:25" pos:end="127:42"><name pos:start="127:25" pos:end="127:33">ind_table</name><argument_list pos:start="127:34" pos:end="127:42">(<argument pos:start="127:35" pos:end="127:41"><expr pos:start="127:35" pos:end="127:41"><name pos:start="127:35" pos:end="127:41">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:50"><expr pos:start="129:17" pos:end="129:49"><name pos:start="129:17" pos:end="129:23">handler</name> <operator pos:start="129:25" pos:end="129:25">=</operator> <name pos:start="129:27" pos:end="129:49"><name pos:start="129:27" pos:end="129:31">table</name><index pos:start="129:32" pos:end="129:49">[<expr pos:start="129:33" pos:end="129:48"><call pos:start="129:33" pos:end="129:48"><name pos:start="129:33" pos:end="129:36">opc3</name><argument_list pos:start="129:37" pos:end="129:48">(<argument pos:start="129:38" pos:end="129:47"><expr pos:start="129:38" pos:end="129:47"><name pos:start="129:38" pos:end="129:47"><name pos:start="129:38" pos:end="129:40">ctx</name><operator pos:start="129:41" pos:end="129:41">.</operator><name pos:start="129:42" pos:end="129:47">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="135:9" pos:end="135:40">/* Is opcode *REALLY* valid ? */</comment>

                <if_stmt pos:start="137:17" pos:end="197:9"><if pos:start="137:17" pos:end="161:17">if <condition pos:start="137:20" pos:end="137:53">(<expr pos:start="137:21" pos:end="137:52"><name pos:start="137:21" pos:end="137:36"><name pos:start="137:21" pos:end="137:27">handler</name><operator pos:start="137:28" pos:end="137:29">-&gt;</operator><name pos:start="137:30" pos:end="137:36">handler</name></name> <operator pos:start="137:38" pos:end="137:39">==</operator> <operator pos:start="137:41" pos:end="137:41">&amp;</operator><name pos:start="137:42" pos:end="137:52">gen_invalid</name></expr>)</condition> <block pos:start="137:55" pos:end="161:17">{<block_content pos:start="139:13" pos:end="159:13">

            <if_stmt pos:start="139:13" pos:end="159:13"><if pos:start="139:13" pos:end="149:13">if <condition pos:start="139:16" pos:end="139:29">(<expr pos:start="139:17" pos:end="139:28"><name pos:start="139:17" pos:end="139:24">loglevel</name> <operator pos:start="139:26" pos:end="139:26">&gt;</operator> <literal type="number" pos:start="139:28" pos:end="139:28">0</literal></expr>)</condition> <block pos:start="139:31" pos:end="149:13">{<block_content pos:start="141:21" pos:end="147:75">

                    <expr_stmt pos:start="141:21" pos:end="147:75"><expr pos:start="141:21" pos:end="147:74"><call pos:start="141:21" pos:end="147:74"><name pos:start="141:21" pos:end="141:27">fprintf</name><argument_list pos:start="141:28" pos:end="147:74">(<argument pos:start="141:29" pos:end="141:35"><expr pos:start="141:29" pos:end="141:35"><name pos:start="141:29" pos:end="141:35">logfile</name></expr></argument>, <argument pos:start="141:38" pos:end="143:63"><expr pos:start="141:38" pos:end="143:63"><literal type="string" pos:start="141:38" pos:end="141:67">"invalid/unsupported opcode: "</literal>

                        <literal type="string" pos:start="143:25" pos:end="143:63">"%02x - %02x - %02x (%08x) 0x%08x %d\n"</literal></expr></argument>,

                            <argument pos:start="145:29" pos:end="145:44"><expr pos:start="145:29" pos:end="145:44"><call pos:start="145:29" pos:end="145:44"><name pos:start="145:29" pos:end="145:32">opc1</name><argument_list pos:start="145:33" pos:end="145:44">(<argument pos:start="145:34" pos:end="145:43"><expr pos:start="145:34" pos:end="145:43"><name pos:start="145:34" pos:end="145:43"><name pos:start="145:34" pos:end="145:36">ctx</name><operator pos:start="145:37" pos:end="145:37">.</operator><name pos:start="145:38" pos:end="145:43">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="145:47" pos:end="145:62"><expr pos:start="145:47" pos:end="145:62"><call pos:start="145:47" pos:end="145:62"><name pos:start="145:47" pos:end="145:50">opc2</name><argument_list pos:start="145:51" pos:end="145:62">(<argument pos:start="145:52" pos:end="145:61"><expr pos:start="145:52" pos:end="145:61"><name pos:start="145:52" pos:end="145:61"><name pos:start="145:52" pos:end="145:54">ctx</name><operator pos:start="145:55" pos:end="145:55">.</operator><name pos:start="145:56" pos:end="145:61">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="147:25" pos:end="147:40"><expr pos:start="147:25" pos:end="147:40"><call pos:start="147:25" pos:end="147:40"><name pos:start="147:25" pos:end="147:28">opc3</name><argument_list pos:start="147:29" pos:end="147:40">(<argument pos:start="147:30" pos:end="147:39"><expr pos:start="147:30" pos:end="147:39"><name pos:start="147:30" pos:end="147:39"><name pos:start="147:30" pos:end="147:32">ctx</name><operator pos:start="147:33" pos:end="147:33">.</operator><name pos:start="147:34" pos:end="147:39">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="147:43" pos:end="147:52"><expr pos:start="147:43" pos:end="147:52"><name pos:start="147:43" pos:end="147:52"><name pos:start="147:43" pos:end="147:45">ctx</name><operator pos:start="147:46" pos:end="147:46">.</operator><name pos:start="147:47" pos:end="147:52">opcode</name></name></expr></argument>, <argument pos:start="147:55" pos:end="147:65"><expr pos:start="147:55" pos:end="147:65"><name pos:start="147:55" pos:end="147:61"><name pos:start="147:55" pos:end="147:57">ctx</name><operator pos:start="147:58" pos:end="147:58">.</operator><name pos:start="147:59" pos:end="147:61">nip</name></name> <operator pos:start="147:63" pos:end="147:63">-</operator> <literal type="number" pos:start="147:65" pos:end="147:65">4</literal></expr></argument>, <argument pos:start="147:68" pos:end="147:73"><expr pos:start="147:68" pos:end="147:73"><name pos:start="147:68" pos:end="147:73">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="149:15" pos:end="159:13">else <block pos:start="149:20" pos:end="159:13">{<block_content pos:start="151:17" pos:end="157:74">

                <expr_stmt pos:start="151:17" pos:end="157:74"><expr pos:start="151:17" pos:end="157:73"><call pos:start="151:17" pos:end="157:73"><name pos:start="151:17" pos:end="151:22">printf</name><argument_list pos:start="151:23" pos:end="157:73">(<argument pos:start="151:24" pos:end="153:62"><expr pos:start="151:24" pos:end="153:62"><literal type="string" pos:start="151:24" pos:end="151:53">"invalid/unsupported opcode: "</literal>

                       <literal type="string" pos:start="153:24" pos:end="153:62">"%02x - %02x - %02x (%08x) 0x%08x %d\n"</literal></expr></argument>,

                       <argument pos:start="155:24" pos:end="155:39"><expr pos:start="155:24" pos:end="155:39"><call pos:start="155:24" pos:end="155:39"><name pos:start="155:24" pos:end="155:27">opc1</name><argument_list pos:start="155:28" pos:end="155:39">(<argument pos:start="155:29" pos:end="155:38"><expr pos:start="155:29" pos:end="155:38"><name pos:start="155:29" pos:end="155:38"><name pos:start="155:29" pos:end="155:31">ctx</name><operator pos:start="155:32" pos:end="155:32">.</operator><name pos:start="155:33" pos:end="155:38">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="155:42" pos:end="155:57"><expr pos:start="155:42" pos:end="155:57"><call pos:start="155:42" pos:end="155:57"><name pos:start="155:42" pos:end="155:45">opc2</name><argument_list pos:start="155:46" pos:end="155:57">(<argument pos:start="155:47" pos:end="155:56"><expr pos:start="155:47" pos:end="155:56"><name pos:start="155:47" pos:end="155:56"><name pos:start="155:47" pos:end="155:49">ctx</name><operator pos:start="155:50" pos:end="155:50">.</operator><name pos:start="155:51" pos:end="155:56">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="157:24" pos:end="157:39"><expr pos:start="157:24" pos:end="157:39"><call pos:start="157:24" pos:end="157:39"><name pos:start="157:24" pos:end="157:27">opc3</name><argument_list pos:start="157:28" pos:end="157:39">(<argument pos:start="157:29" pos:end="157:38"><expr pos:start="157:29" pos:end="157:38"><name pos:start="157:29" pos:end="157:38"><name pos:start="157:29" pos:end="157:31">ctx</name><operator pos:start="157:32" pos:end="157:32">.</operator><name pos:start="157:33" pos:end="157:38">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="157:42" pos:end="157:51"><expr pos:start="157:42" pos:end="157:51"><name pos:start="157:42" pos:end="157:51"><name pos:start="157:42" pos:end="157:44">ctx</name><operator pos:start="157:45" pos:end="157:45">.</operator><name pos:start="157:46" pos:end="157:51">opcode</name></name></expr></argument>, <argument pos:start="157:54" pos:end="157:64"><expr pos:start="157:54" pos:end="157:64"><name pos:start="157:54" pos:end="157:60"><name pos:start="157:54" pos:end="157:56">ctx</name><operator pos:start="157:57" pos:end="157:57">.</operator><name pos:start="157:58" pos:end="157:60">nip</name></name> <operator pos:start="157:62" pos:end="157:62">-</operator> <literal type="number" pos:start="157:64" pos:end="157:64">4</literal></expr></argument>, <argument pos:start="157:67" pos:end="157:72"><expr pos:start="157:67" pos:end="157:72"><name pos:start="157:67" pos:end="157:72">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="161:19" pos:end="197:9">else <block pos:start="161:24" pos:end="197:9">{<block_content pos:start="163:13" pos:end="195:13">

            <if_stmt pos:start="163:13" pos:end="195:13"><if pos:start="163:13" pos:end="195:13">if <condition pos:start="163:16" pos:end="163:51">(<expr pos:start="163:17" pos:end="163:50"><operator pos:start="163:17" pos:end="163:17">(</operator><name pos:start="163:18" pos:end="163:27"><name pos:start="163:18" pos:end="163:20">ctx</name><operator pos:start="163:21" pos:end="163:21">.</operator><name pos:start="163:22" pos:end="163:27">opcode</name></name> <operator pos:start="163:29" pos:end="163:29">&amp;</operator> <name pos:start="163:31" pos:end="163:44"><name pos:start="163:31" pos:end="163:37">handler</name><operator pos:start="163:38" pos:end="163:39">-&gt;</operator><name pos:start="163:40" pos:end="163:44">inval</name></name><operator pos:start="163:45" pos:end="163:45">)</operator> <operator pos:start="163:47" pos:end="163:48">!=</operator> <literal type="number" pos:start="163:50" pos:end="163:50">0</literal></expr>)</condition> <block pos:start="163:53" pos:end="195:13">{<block_content pos:start="165:17" pos:end="193:22">

                <if_stmt pos:start="165:17" pos:end="189:13"><if pos:start="165:17" pos:end="177:17">if <condition pos:start="165:20" pos:end="165:33">(<expr pos:start="165:21" pos:end="165:32"><name pos:start="165:21" pos:end="165:28">loglevel</name> <operator pos:start="165:30" pos:end="165:30">&gt;</operator> <literal type="number" pos:start="165:32" pos:end="165:32">0</literal></expr>)</condition> <block pos:start="165:35" pos:end="177:17">{<block_content pos:start="167:21" pos:end="175:53">

                    <expr_stmt pos:start="167:21" pos:end="175:53"><expr pos:start="167:21" pos:end="175:52"><call pos:start="167:21" pos:end="175:52"><name pos:start="167:21" pos:end="167:27">fprintf</name><argument_list pos:start="167:28" pos:end="175:52">(<argument pos:start="167:29" pos:end="167:35"><expr pos:start="167:29" pos:end="167:35"><name pos:start="167:29" pos:end="167:35">logfile</name></expr></argument>, <argument pos:start="167:38" pos:end="169:67"><expr pos:start="167:38" pos:end="169:67"><literal type="string" pos:start="167:38" pos:end="167:70">"invalid bits: %08x for opcode: "</literal>

                            <literal type="string" pos:start="169:29" pos:end="169:67">"%02x -%02x - %02x (0x%08x) (0x%08x)\n"</literal></expr></argument>,

                            <argument pos:start="171:29" pos:end="171:55"><expr pos:start="171:29" pos:end="171:55"><name pos:start="171:29" pos:end="171:38"><name pos:start="171:29" pos:end="171:31">ctx</name><operator pos:start="171:32" pos:end="171:32">.</operator><name pos:start="171:33" pos:end="171:38">opcode</name></name> <operator pos:start="171:40" pos:end="171:40">&amp;</operator> <name pos:start="171:42" pos:end="171:55"><name pos:start="171:42" pos:end="171:48">handler</name><operator pos:start="171:49" pos:end="171:50">-&gt;</operator><name pos:start="171:51" pos:end="171:55">inval</name></name></expr></argument>, <argument pos:start="171:58" pos:end="171:73"><expr pos:start="171:58" pos:end="171:73"><call pos:start="171:58" pos:end="171:73"><name pos:start="171:58" pos:end="171:61">opc1</name><argument_list pos:start="171:62" pos:end="171:73">(<argument pos:start="171:63" pos:end="171:72"><expr pos:start="171:63" pos:end="171:72"><name pos:start="171:63" pos:end="171:72"><name pos:start="171:63" pos:end="171:65">ctx</name><operator pos:start="171:66" pos:end="171:66">.</operator><name pos:start="171:67" pos:end="171:72">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="173:29" pos:end="173:44"><expr pos:start="173:29" pos:end="173:44"><call pos:start="173:29" pos:end="173:44"><name pos:start="173:29" pos:end="173:32">opc2</name><argument_list pos:start="173:33" pos:end="173:44">(<argument pos:start="173:34" pos:end="173:43"><expr pos:start="173:34" pos:end="173:43"><name pos:start="173:34" pos:end="173:43"><name pos:start="173:34" pos:end="173:36">ctx</name><operator pos:start="173:37" pos:end="173:37">.</operator><name pos:start="173:38" pos:end="173:43">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="173:47" pos:end="173:62"><expr pos:start="173:47" pos:end="173:62"><call pos:start="173:47" pos:end="173:62"><name pos:start="173:47" pos:end="173:50">opc3</name><argument_list pos:start="173:51" pos:end="173:62">(<argument pos:start="173:52" pos:end="173:61"><expr pos:start="173:52" pos:end="173:61"><name pos:start="173:52" pos:end="173:61"><name pos:start="173:52" pos:end="173:54">ctx</name><operator pos:start="173:55" pos:end="173:55">.</operator><name pos:start="173:56" pos:end="173:61">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="175:29" pos:end="175:38"><expr pos:start="175:29" pos:end="175:38"><name pos:start="175:29" pos:end="175:38"><name pos:start="175:29" pos:end="175:31">ctx</name><operator pos:start="175:32" pos:end="175:32">.</operator><name pos:start="175:33" pos:end="175:38">opcode</name></name></expr></argument>, <argument pos:start="175:41" pos:end="175:51"><expr pos:start="175:41" pos:end="175:51"><name pos:start="175:41" pos:end="175:47"><name pos:start="175:41" pos:end="175:43">ctx</name><operator pos:start="175:44" pos:end="175:44">.</operator><name pos:start="175:45" pos:end="175:47">nip</name></name> <operator pos:start="175:49" pos:end="175:49">-</operator> <literal type="number" pos:start="175:51" pos:end="175:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="177:19" pos:end="189:13">else <block pos:start="177:24" pos:end="189:13">{<block_content pos:start="179:21" pos:end="187:52">

                    <expr_stmt pos:start="179:21" pos:end="187:52"><expr pos:start="179:21" pos:end="187:51"><call pos:start="179:21" pos:end="187:51"><name pos:start="179:21" pos:end="179:26">printf</name><argument_list pos:start="179:27" pos:end="187:51">(<argument pos:start="179:28" pos:end="181:66"><expr pos:start="179:28" pos:end="181:66"><literal type="string" pos:start="179:28" pos:end="179:60">"invalid bits: %08x for opcode: "</literal>

                           <literal type="string" pos:start="181:28" pos:end="181:66">"%02x -%02x - %02x (0x%08x) (0x%08x)\n"</literal></expr></argument>,

                            <argument pos:start="183:29" pos:end="183:55"><expr pos:start="183:29" pos:end="183:55"><name pos:start="183:29" pos:end="183:38"><name pos:start="183:29" pos:end="183:31">ctx</name><operator pos:start="183:32" pos:end="183:32">.</operator><name pos:start="183:33" pos:end="183:38">opcode</name></name> <operator pos:start="183:40" pos:end="183:40">&amp;</operator> <name pos:start="183:42" pos:end="183:55"><name pos:start="183:42" pos:end="183:48">handler</name><operator pos:start="183:49" pos:end="183:50">-&gt;</operator><name pos:start="183:51" pos:end="183:55">inval</name></name></expr></argument>, <argument pos:start="183:58" pos:end="183:73"><expr pos:start="183:58" pos:end="183:73"><call pos:start="183:58" pos:end="183:73"><name pos:start="183:58" pos:end="183:61">opc1</name><argument_list pos:start="183:62" pos:end="183:73">(<argument pos:start="183:63" pos:end="183:72"><expr pos:start="183:63" pos:end="183:72"><name pos:start="183:63" pos:end="183:72"><name pos:start="183:63" pos:end="183:65">ctx</name><operator pos:start="183:66" pos:end="183:66">.</operator><name pos:start="183:67" pos:end="183:72">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="185:29" pos:end="185:44"><expr pos:start="185:29" pos:end="185:44"><call pos:start="185:29" pos:end="185:44"><name pos:start="185:29" pos:end="185:32">opc2</name><argument_list pos:start="185:33" pos:end="185:44">(<argument pos:start="185:34" pos:end="185:43"><expr pos:start="185:34" pos:end="185:43"><name pos:start="185:34" pos:end="185:43"><name pos:start="185:34" pos:end="185:36">ctx</name><operator pos:start="185:37" pos:end="185:37">.</operator><name pos:start="185:38" pos:end="185:43">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="185:47" pos:end="185:62"><expr pos:start="185:47" pos:end="185:62"><call pos:start="185:47" pos:end="185:62"><name pos:start="185:47" pos:end="185:50">opc3</name><argument_list pos:start="185:51" pos:end="185:62">(<argument pos:start="185:52" pos:end="185:61"><expr pos:start="185:52" pos:end="185:61"><name pos:start="185:52" pos:end="185:61"><name pos:start="185:52" pos:end="185:54">ctx</name><operator pos:start="185:55" pos:end="185:55">.</operator><name pos:start="185:56" pos:end="185:61">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="187:28" pos:end="187:37"><expr pos:start="187:28" pos:end="187:37"><name pos:start="187:28" pos:end="187:37"><name pos:start="187:28" pos:end="187:30">ctx</name><operator pos:start="187:31" pos:end="187:31">.</operator><name pos:start="187:32" pos:end="187:37">opcode</name></name></expr></argument>, <argument pos:start="187:40" pos:end="187:50"><expr pos:start="187:40" pos:end="187:50"><name pos:start="187:40" pos:end="187:46"><name pos:start="187:40" pos:end="187:42">ctx</name><operator pos:start="187:43" pos:end="187:43">.</operator><name pos:start="187:44" pos:end="187:46">nip</name></name> <operator pos:start="187:48" pos:end="187:48">-</operator> <literal type="number" pos:start="187:50" pos:end="187:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="191:17" pos:end="191:32"><expr pos:start="191:17" pos:end="191:31"><call pos:start="191:17" pos:end="191:31"><name pos:start="191:17" pos:end="191:25">RET_INVAL</name><argument_list pos:start="191:26" pos:end="191:31">(<argument pos:start="191:27" pos:end="191:30"><expr pos:start="191:27" pos:end="191:30"><name pos:start="191:27" pos:end="191:30">ctxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="193:17" pos:end="193:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:36"><expr pos:start="199:9" pos:end="199:35"><operator pos:start="199:9" pos:end="199:9">(</operator><operator pos:start="199:10" pos:end="199:10">*</operator><operator pos:start="199:11" pos:end="199:11">(</operator><name pos:start="199:12" pos:end="199:27"><name pos:start="199:12" pos:end="199:18">handler</name><operator pos:start="199:19" pos:end="199:20">-&gt;</operator><name pos:start="199:21" pos:end="199:27">handler</name></name><operator pos:start="199:28" pos:end="199:28">)</operator><operator pos:start="199:29" pos:end="199:29">)</operator><operator pos:start="199:30" pos:end="199:30">(</operator><operator pos:start="199:31" pos:end="199:31">&amp;</operator><name pos:start="199:32" pos:end="199:34">ctx</name><operator pos:start="199:35" pos:end="199:35">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="201:9" pos:end="201:41">/* Check trace mode exceptions */</comment>

        <if_stmt pos:start="203:9" pos:end="227:9"><if pos:start="203:9" pos:end="227:9">if <condition pos:start="203:12" pos:end="223:41">(<expr pos:start="203:13" pos:end="223:40"><operator pos:start="203:13" pos:end="203:13">(</operator><name pos:start="203:14" pos:end="203:19">msr_be</name> <operator pos:start="203:21" pos:end="203:22">&amp;&amp;</operator> <name pos:start="203:24" pos:end="203:36"><name pos:start="203:24" pos:end="203:26">ctx</name><operator pos:start="203:27" pos:end="203:27">.</operator><name pos:start="203:28" pos:end="203:36">exception</name></name> <operator pos:start="203:38" pos:end="203:39">==</operator> <name pos:start="203:41" pos:end="203:51">EXCP_BRANCH</name><operator pos:start="203:52" pos:end="203:52">)</operator> <operator pos:start="203:54" pos:end="203:55">||</operator>

            <comment type="block" pos:start="205:13" pos:end="213:15">/* Check in single step trace mode

             * we need to stop except if:

             * - rfi, trap or syscall

             * - first instruction of an exception handler

             */</comment>

            <operator pos:start="215:13" pos:end="215:13">(</operator><name pos:start="215:14" pos:end="215:19">msr_se</name> <operator pos:start="215:21" pos:end="215:22">&amp;&amp;</operator> <operator pos:start="215:24" pos:end="215:24">(</operator><name pos:start="215:25" pos:end="215:31"><name pos:start="215:25" pos:end="215:27">ctx</name><operator pos:start="215:28" pos:end="215:28">.</operator><name pos:start="215:29" pos:end="215:31">nip</name></name> <operator pos:start="215:33" pos:end="215:33">&lt;</operator> <literal type="number" pos:start="215:35" pos:end="215:39">0x100</literal> <operator pos:start="215:41" pos:end="215:42">||</operator>

                        <name pos:start="217:25" pos:end="217:31"><name pos:start="217:25" pos:end="217:27">ctx</name><operator pos:start="217:28" pos:end="217:28">.</operator><name pos:start="217:29" pos:end="217:31">nip</name></name> <operator pos:start="217:33" pos:end="217:33">&gt;</operator> <literal type="number" pos:start="217:35" pos:end="217:39">0xF00</literal> <operator pos:start="217:41" pos:end="217:42">||</operator>

                        <operator pos:start="219:25" pos:end="219:25">(</operator><name pos:start="219:26" pos:end="219:32"><name pos:start="219:26" pos:end="219:28">ctx</name><operator pos:start="219:29" pos:end="219:29">.</operator><name pos:start="219:30" pos:end="219:32">nip</name></name> <operator pos:start="219:34" pos:end="219:34">&amp;</operator> <literal type="number" pos:start="219:36" pos:end="219:39">0xFC</literal><operator pos:start="219:40" pos:end="219:40">)</operator> <operator pos:start="219:42" pos:end="219:43">!=</operator> <literal type="number" pos:start="219:45" pos:end="219:48">0x04</literal><operator pos:start="219:49" pos:end="219:49">)</operator> <operator pos:start="219:51" pos:end="219:52">&amp;&amp;</operator>

             <name pos:start="221:14" pos:end="221:26"><name pos:start="221:14" pos:end="221:16">ctx</name><operator pos:start="221:17" pos:end="221:17">.</operator><name pos:start="221:18" pos:end="221:26">exception</name></name> <operator pos:start="221:28" pos:end="221:29">!=</operator> <name pos:start="221:31" pos:end="221:42">EXCP_SYSCALL</name> <operator pos:start="221:44" pos:end="221:45">&amp;&amp;</operator> <name pos:start="221:47" pos:end="221:59"><name pos:start="221:47" pos:end="221:49">ctx</name><operator pos:start="221:50" pos:end="221:50">.</operator><name pos:start="221:51" pos:end="221:59">exception</name></name> <operator pos:start="221:61" pos:end="221:62">!=</operator> <name pos:start="221:64" pos:end="221:71">EXCP_RFI</name> <operator pos:start="221:73" pos:end="221:74">&amp;&amp;</operator>

             <name pos:start="223:14" pos:end="223:26"><name pos:start="223:14" pos:end="223:16">ctx</name><operator pos:start="223:17" pos:end="223:17">.</operator><name pos:start="223:18" pos:end="223:26">exception</name></name> <operator pos:start="223:28" pos:end="223:29">!=</operator> <name pos:start="223:31" pos:end="223:39">EXCP_TRAP</name><operator pos:start="223:40" pos:end="223:40">)</operator></expr>)</condition> <block pos:start="223:43" pos:end="227:9">{<block_content pos:start="225:13" pos:end="225:42">

            <expr_stmt pos:start="225:13" pos:end="225:42"><expr pos:start="225:13" pos:end="225:41"><call pos:start="225:13" pos:end="225:41"><name pos:start="225:13" pos:end="225:20">RET_EXCP</name><argument_list pos:start="225:21" pos:end="225:41">(<argument pos:start="225:22" pos:end="225:25"><expr pos:start="225:22" pos:end="225:25"><name pos:start="225:22" pos:end="225:25">ctxp</name></expr></argument>, <argument pos:start="225:28" pos:end="225:37"><expr pos:start="225:28" pos:end="225:37"><name pos:start="225:28" pos:end="225:37">EXCP_TRACE</name></expr></argument>, <argument pos:start="225:40" pos:end="225:40"><expr pos:start="225:40" pos:end="225:40"><literal type="number" pos:start="225:40" pos:end="225:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="229:9" pos:end="229:58">/* if we reach a page boundary, stop generation */</comment>

        <if_stmt pos:start="231:9" pos:end="235:5"><if pos:start="231:9" pos:end="235:5">if <condition pos:start="231:12" pos:end="231:52">(<expr pos:start="231:13" pos:end="231:51"><operator pos:start="231:13" pos:end="231:13">(</operator><name pos:start="231:14" pos:end="231:20"><name pos:start="231:14" pos:end="231:16">ctx</name><operator pos:start="231:17" pos:end="231:17">.</operator><name pos:start="231:18" pos:end="231:20">nip</name></name> <operator pos:start="231:22" pos:end="231:22">&amp;</operator> <operator pos:start="231:24" pos:end="231:24">(</operator><name pos:start="231:25" pos:end="231:40">TARGET_PAGE_SIZE</name> <operator pos:start="231:42" pos:end="231:42">-</operator> <literal type="number" pos:start="231:44" pos:end="231:44">1</literal><operator pos:start="231:45" pos:end="231:45">)</operator><operator pos:start="231:46" pos:end="231:46">)</operator> <operator pos:start="231:48" pos:end="231:49">==</operator> <literal type="number" pos:start="231:51" pos:end="231:51">0</literal></expr>)</condition> <block pos:start="231:54" pos:end="235:5">{<block_content pos:start="233:13" pos:end="233:43">

            <expr_stmt pos:start="233:13" pos:end="233:43"><expr pos:start="233:13" pos:end="233:42"><call pos:start="233:13" pos:end="233:42"><name pos:start="233:13" pos:end="233:20">RET_EXCP</name><argument_list pos:start="233:21" pos:end="233:42">(<argument pos:start="233:22" pos:end="233:25"><expr pos:start="233:22" pos:end="233:25"><name pos:start="233:22" pos:end="233:25">ctxp</name></expr></argument>, <argument pos:start="233:28" pos:end="233:38"><expr pos:start="233:28" pos:end="233:38"><name pos:start="233:28" pos:end="233:38">EXCP_BRANCH</name></expr></argument>, <argument pos:start="233:41" pos:end="233:41"><expr pos:start="233:41" pos:end="233:41"><literal type="number" pos:start="233:41" pos:end="233:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="239:5" pos:end="250:0"><if pos:start="239:5" pos:end="243:5">if <condition pos:start="239:8" pos:end="239:35">(<expr pos:start="239:9" pos:end="239:34"><name pos:start="239:9" pos:end="239:21"><name pos:start="239:9" pos:end="239:11">ctx</name><operator pos:start="239:12" pos:end="239:12">.</operator><name pos:start="239:13" pos:end="239:21">exception</name></name> <operator pos:start="239:23" pos:end="239:24">==</operator> <name pos:start="239:26" pos:end="239:34">EXCP_NONE</name></expr>)</condition> <block pos:start="239:37" pos:end="243:5">{<block_content pos:start="241:9" pos:end="241:49">

        <expr_stmt pos:start="241:9" pos:end="241:49"><expr pos:start="241:9" pos:end="241:48"><call pos:start="241:9" pos:end="241:48"><name pos:start="241:9" pos:end="241:16">gen_op_b</name><argument_list pos:start="241:17" pos:end="241:48">(<argument pos:start="241:18" pos:end="241:38"><expr pos:start="241:18" pos:end="241:38"><operator pos:start="241:18" pos:end="241:18">(</operator><name pos:start="241:19" pos:end="241:26">unsigned</name> <name pos:start="241:28" pos:end="241:31">long</name><operator pos:start="241:32" pos:end="241:32">)</operator><name pos:start="241:33" pos:end="241:38"><name pos:start="241:33" pos:end="241:35">ctx</name><operator pos:start="241:36" pos:end="241:36">.</operator><name pos:start="241:37" pos:end="241:38">tb</name></name></expr></argument>, <argument pos:start="241:41" pos:end="241:47"><expr pos:start="241:41" pos:end="241:47"><name pos:start="241:41" pos:end="241:47"><name pos:start="241:41" pos:end="241:43">ctx</name><operator pos:start="241:44" pos:end="241:44">.</operator><name pos:start="241:45" pos:end="241:47">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="243:7" pos:end="250:0">else if <condition pos:start="243:15" pos:end="243:44">(<expr pos:start="243:16" pos:end="243:43"><name pos:start="243:16" pos:end="243:28"><name pos:start="243:16" pos:end="243:18">ctx</name><operator pos:start="243:19" pos:end="243:19">.</operator><name pos:start="243:20" pos:end="243:28">exception</name></name> <operator pos:start="243:30" pos:end="243:31">!=</operator> <name pos:start="243:33" pos:end="243:43">EXCP_BRANCH</name></expr>)</condition> <block pos:start="243:46" pos:end="250:0">{<block_content pos:start="245:9" pos:end="245:25">

        <expr_stmt pos:start="245:9" pos:end="245:25"><expr pos:start="245:9" pos:end="245:24"><call pos:start="245:9" pos:end="245:24"><name pos:start="245:9" pos:end="245:21">gen_op_set_T0</name><argument_list pos:start="245:22" pos:end="245:24">(<argument pos:start="245:23" pos:end="245:23"><expr pos:start="245:23" pos:end="245:23"><literal type="number" pos:start="245:23" pos:end="245:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="249:1" pos:end="249:5">#<cpp:directive pos:start="249:2" pos:end="249:3">if</cpp:directive> <expr pos:start="249:5" pos:end="249:5"><literal type="number" pos:start="249:5" pos:end="249:5">1</literal></expr></cpp:if>

    <comment type="block" pos:start="251:5" pos:end="255:7">/* TO BE FIXED: T0 hasn't got a proper value, which makes tb_add_jump

     *              do bad business and then qemu crashes !

     */</comment>

    <expr_stmt pos:start="257:5" pos:end="260:0"><expr pos:start="257:5" pos:end="257:20"><call pos:start="257:5" pos:end="257:20"><name pos:start="257:5" pos:end="257:17">gen_op_set_T0</name><argument_list pos:start="257:18" pos:end="257:20">(<argument pos:start="257:19" pos:end="257:19"><expr pos:start="257:19" pos:end="257:19"><literal type="number" pos:start="257:19" pos:end="257:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="259:1" pos:end="259:6">#<cpp:directive pos:start="259:2" pos:end="259:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="261:5" pos:end="261:41">/* Generate the return instruction */</comment>

    <expr_stmt pos:start="263:5" pos:end="263:21"><expr pos:start="263:5" pos:end="263:20"><call pos:start="263:5" pos:end="263:20"><name pos:start="263:5" pos:end="263:18">gen_op_exit_tb</name><argument_list pos:start="263:19" pos:end="263:20">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:32"><expr pos:start="265:5" pos:end="265:31"><operator pos:start="265:5" pos:end="265:5">*</operator><name pos:start="265:6" pos:end="265:16">gen_opc_ptr</name> <operator pos:start="265:18" pos:end="265:18">=</operator> <name pos:start="265:20" pos:end="265:31">INDEX_op_end</name></expr>;</expr_stmt>

    <if_stmt pos:start="267:5" pos:end="296:0"><if pos:start="267:5" pos:end="289:5">if <condition pos:start="267:8" pos:end="267:18">(<expr pos:start="267:9" pos:end="267:17"><name pos:start="267:9" pos:end="267:17">search_pc</name></expr>)</condition> <block pos:start="267:20" pos:end="289:5">{<block_content pos:start="269:9" pos:end="288:0">

        <expr_stmt pos:start="269:9" pos:end="269:38"><expr pos:start="269:9" pos:end="269:37"><name pos:start="269:9" pos:end="269:9">j</name> <operator pos:start="269:11" pos:end="269:11">=</operator> <name pos:start="269:13" pos:end="269:23">gen_opc_ptr</name> <operator pos:start="269:25" pos:end="269:25">-</operator> <name pos:start="269:27" pos:end="269:37">gen_opc_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:13"><expr pos:start="271:9" pos:end="271:12"><name pos:start="271:9" pos:end="271:10">lj</name><operator pos:start="271:11" pos:end="271:12">++</operator></expr>;</expr_stmt>

        <while pos:start="273:9" pos:end="275:42">while <condition pos:start="273:15" pos:end="273:23">(<expr pos:start="273:16" pos:end="273:22"><name pos:start="273:16" pos:end="273:17">lj</name> <operator pos:start="273:19" pos:end="273:20">&lt;=</operator> <name pos:start="273:22" pos:end="273:22">j</name></expr>)</condition><block type="pseudo" pos:start="275:13" pos:end="275:42"><block_content pos:start="275:13" pos:end="275:42">

            <expr_stmt pos:start="275:13" pos:end="275:42"><expr pos:start="275:13" pos:end="275:41"><name pos:start="275:13" pos:end="275:37"><name pos:start="275:13" pos:end="275:31">gen_opc_instr_start</name><index pos:start="275:32" pos:end="275:37">[<expr pos:start="275:33" pos:end="275:36"><name pos:start="275:33" pos:end="275:34">lj</name><operator pos:start="275:35" pos:end="275:36">++</operator></expr>]</index></name> <operator pos:start="275:39" pos:end="275:39">=</operator> <literal type="number" pos:start="275:41" pos:end="275:41">0</literal></expr>;</expr_stmt></block_content></block></while>

        <expr_stmt pos:start="277:9" pos:end="288:0"><expr pos:start="277:9" pos:end="277:20"><name pos:start="277:9" pos:end="277:16"><name pos:start="277:9" pos:end="277:10">tb</name><operator pos:start="277:11" pos:end="277:12">-&gt;</operator><name pos:start="277:13" pos:end="277:16">size</name></name> <operator pos:start="277:18" pos:end="277:18">=</operator> <literal type="number" pos:start="277:20" pos:end="277:20">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="279:1" pos:end="279:5">#<cpp:directive pos:start="279:2" pos:end="279:3">if</cpp:directive> <expr pos:start="279:5" pos:end="279:5"><literal type="number" pos:start="279:5" pos:end="279:5">0</literal></expr></cpp:if>

        if (loglevel &gt; 0) {

            page_dump(logfile);

        }

<cpp:endif pos:start="287:1" pos:end="287:6">#<cpp:directive pos:start="287:2" pos:end="287:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="289:7" pos:end="296:0">else <block pos:start="289:12" pos:end="296:0">{<block_content pos:start="291:9" pos:end="291:38">

        <expr_stmt pos:start="291:9" pos:end="291:38"><expr pos:start="291:9" pos:end="291:37"><name pos:start="291:9" pos:end="291:16"><name pos:start="291:9" pos:end="291:10">tb</name><operator pos:start="291:11" pos:end="291:12">-&gt;</operator><name pos:start="291:13" pos:end="291:16">size</name></name> <operator pos:start="291:18" pos:end="291:18">=</operator> <name pos:start="291:20" pos:end="291:26"><name pos:start="291:20" pos:end="291:22">ctx</name><operator pos:start="291:23" pos:end="291:23">.</operator><name pos:start="291:24" pos:end="291:26">nip</name></name> <operator pos:start="291:28" pos:end="291:28">-</operator> <name pos:start="291:30" pos:end="291:37">pc_start</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="295:1" pos:end="295:18">#<cpp:directive pos:start="295:2" pos:end="295:6">ifdef</cpp:directive> <name pos:start="295:8" pos:end="295:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="297:5" pos:end="303:5"><if pos:start="297:5" pos:end="303:5">if <condition pos:start="297:8" pos:end="297:34">(<expr pos:start="297:9" pos:end="297:33"><name pos:start="297:9" pos:end="297:16">loglevel</name> <operator pos:start="297:18" pos:end="297:18">&amp;</operator> <name pos:start="297:20" pos:end="297:33">CPU_LOG_TB_CPU</name></expr>)</condition> <block pos:start="297:36" pos:end="303:5">{<block_content pos:start="299:9" pos:end="301:44">

        <expr_stmt pos:start="299:9" pos:end="299:73"><expr pos:start="299:9" pos:end="299:72"><call pos:start="299:9" pos:end="299:72"><name pos:start="299:9" pos:end="299:15">fprintf</name><argument_list pos:start="299:16" pos:end="299:72">(<argument pos:start="299:17" pos:end="299:23"><expr pos:start="299:17" pos:end="299:23"><name pos:start="299:17" pos:end="299:23">logfile</name></expr></argument>, <argument pos:start="299:26" pos:end="299:56"><expr pos:start="299:26" pos:end="299:56"><literal type="string" pos:start="299:26" pos:end="299:56">"---------------- excp: %04x\n"</literal></expr></argument>, <argument pos:start="299:59" pos:end="299:71"><expr pos:start="299:59" pos:end="299:71"><name pos:start="299:59" pos:end="299:71"><name pos:start="299:59" pos:end="299:61">ctx</name><operator pos:start="299:62" pos:end="299:62">.</operator><name pos:start="299:63" pos:end="299:71">exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:44"><expr pos:start="301:9" pos:end="301:43"><call pos:start="301:9" pos:end="301:43"><name pos:start="301:9" pos:end="301:26">cpu_ppc_dump_state</name><argument_list pos:start="301:27" pos:end="301:43">(<argument pos:start="301:28" pos:end="301:30"><expr pos:start="301:28" pos:end="301:30"><name pos:start="301:28" pos:end="301:30">env</name></expr></argument>, <argument pos:start="301:33" pos:end="301:39"><expr pos:start="301:33" pos:end="301:39"><name pos:start="301:33" pos:end="301:39">logfile</name></expr></argument>, <argument pos:start="301:42" pos:end="301:42"><expr pos:start="301:42" pos:end="301:42"><literal type="number" pos:start="301:42" pos:end="301:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="305:5" pos:end="313:5"><if pos:start="305:5" pos:end="313:5">if <condition pos:start="305:8" pos:end="305:37">(<expr pos:start="305:9" pos:end="305:36"><name pos:start="305:9" pos:end="305:16">loglevel</name> <operator pos:start="305:18" pos:end="305:18">&amp;</operator> <name pos:start="305:20" pos:end="305:36">CPU_LOG_TB_IN_ASM</name></expr>)</condition> <block pos:start="305:39" pos:end="313:5">{<block_content pos:start="307:9" pos:end="311:31">

        <expr_stmt pos:start="307:9" pos:end="307:70"><expr pos:start="307:9" pos:end="307:69"><call pos:start="307:9" pos:end="307:69"><name pos:start="307:9" pos:end="307:15">fprintf</name><argument_list pos:start="307:16" pos:end="307:69">(<argument pos:start="307:17" pos:end="307:23"><expr pos:start="307:17" pos:end="307:23"><name pos:start="307:17" pos:end="307:23">logfile</name></expr></argument>, <argument pos:start="307:26" pos:end="307:35"><expr pos:start="307:26" pos:end="307:35"><literal type="string" pos:start="307:26" pos:end="307:35">"IN: %s\n"</literal></expr></argument>, <argument pos:start="307:38" pos:end="307:68"><expr pos:start="307:38" pos:end="307:68"><call pos:start="307:38" pos:end="307:68"><name pos:start="307:38" pos:end="307:50">lookup_symbol</name><argument_list pos:start="307:51" pos:end="307:68">(<argument pos:start="307:52" pos:end="307:67"><expr pos:start="307:52" pos:end="307:67"><operator pos:start="307:52" pos:end="307:52">(</operator><name pos:start="307:53" pos:end="307:56">void</name> <operator pos:start="307:58" pos:end="307:58">*</operator><operator pos:start="307:59" pos:end="307:59">)</operator><name pos:start="307:60" pos:end="307:67">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="309:9" pos:end="309:67"><expr pos:start="309:9" pos:end="309:66"><call pos:start="309:9" pos:end="309:66"><name pos:start="309:9" pos:end="309:13">disas</name><argument_list pos:start="309:14" pos:end="309:66">(<argument pos:start="309:15" pos:end="309:21"><expr pos:start="309:15" pos:end="309:21"><name pos:start="309:15" pos:end="309:21">logfile</name></expr></argument>, <argument pos:start="309:24" pos:end="309:39"><expr pos:start="309:24" pos:end="309:39"><operator pos:start="309:24" pos:end="309:24">(</operator><name pos:start="309:25" pos:end="309:28">void</name> <operator pos:start="309:30" pos:end="309:30">*</operator><operator pos:start="309:31" pos:end="309:31">)</operator><name pos:start="309:32" pos:end="309:39">pc_start</name></expr></argument>, <argument pos:start="309:42" pos:end="309:59"><expr pos:start="309:42" pos:end="309:59"><name pos:start="309:42" pos:end="309:48"><name pos:start="309:42" pos:end="309:44">ctx</name><operator pos:start="309:45" pos:end="309:45">.</operator><name pos:start="309:46" pos:end="309:48">nip</name></name> <operator pos:start="309:50" pos:end="309:50">-</operator> <name pos:start="309:52" pos:end="309:59">pc_start</name></expr></argument>, <argument pos:start="309:62" pos:end="309:62"><expr pos:start="309:62" pos:end="309:62"><literal type="number" pos:start="309:62" pos:end="309:62">0</literal></expr></argument>, <argument pos:start="309:65" pos:end="309:65"><expr pos:start="309:65" pos:end="309:65"><literal type="number" pos:start="309:65" pos:end="309:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:31"><expr pos:start="311:9" pos:end="311:30"><call pos:start="311:9" pos:end="311:30"><name pos:start="311:9" pos:end="311:15">fprintf</name><argument_list pos:start="311:16" pos:end="311:30">(<argument pos:start="311:17" pos:end="311:23"><expr pos:start="311:17" pos:end="311:23"><name pos:start="311:17" pos:end="311:23">logfile</name></expr></argument>, <argument pos:start="311:26" pos:end="311:29"><expr pos:start="311:26" pos:end="311:29"><literal type="string" pos:start="311:26" pos:end="311:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="315:5" pos:end="326:0"><if pos:start="315:5" pos:end="326:0">if <condition pos:start="315:8" pos:end="315:33">(<expr pos:start="315:9" pos:end="315:32"><name pos:start="315:9" pos:end="315:16">loglevel</name> <operator pos:start="315:18" pos:end="315:18">&amp;</operator> <name pos:start="315:20" pos:end="315:32">CPU_LOG_TB_OP</name></expr>)</condition> <block pos:start="315:35" pos:end="326:0">{<block_content pos:start="317:9" pos:end="321:31">

        <expr_stmt pos:start="317:9" pos:end="317:34"><expr pos:start="317:9" pos:end="317:33"><call pos:start="317:9" pos:end="317:33"><name pos:start="317:9" pos:end="317:15">fprintf</name><argument_list pos:start="317:16" pos:end="317:33">(<argument pos:start="317:17" pos:end="317:23"><expr pos:start="317:17" pos:end="317:23"><name pos:start="317:17" pos:end="317:23">logfile</name></expr></argument>, <argument pos:start="317:26" pos:end="317:32"><expr pos:start="317:26" pos:end="317:32"><literal type="string" pos:start="317:26" pos:end="317:32">"OP:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:47"><expr pos:start="319:9" pos:end="319:46"><call pos:start="319:9" pos:end="319:46"><name pos:start="319:9" pos:end="319:16">dump_ops</name><argument_list pos:start="319:17" pos:end="319:46">(<argument pos:start="319:18" pos:end="319:28"><expr pos:start="319:18" pos:end="319:28"><name pos:start="319:18" pos:end="319:28">gen_opc_buf</name></expr></argument>, <argument pos:start="319:31" pos:end="319:45"><expr pos:start="319:31" pos:end="319:45"><name pos:start="319:31" pos:end="319:45">gen_opparam_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:31"><expr pos:start="321:9" pos:end="321:30"><call pos:start="321:9" pos:end="321:30"><name pos:start="321:9" pos:end="321:15">fprintf</name><argument_list pos:start="321:16" pos:end="321:30">(<argument pos:start="321:17" pos:end="321:23"><expr pos:start="321:17" pos:end="321:23"><name pos:start="321:17" pos:end="321:23">logfile</name></expr></argument>, <argument pos:start="321:26" pos:end="321:29"><expr pos:start="321:26" pos:end="321:29"><literal type="string" pos:start="321:26" pos:end="321:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="325:1" pos:end="325:6">#<cpp:directive pos:start="325:2" pos:end="325:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="327:5" pos:end="327:34"><expr pos:start="327:5" pos:end="327:33"><name pos:start="327:5" pos:end="327:20"><name pos:start="327:5" pos:end="327:7">env</name><operator pos:start="327:8" pos:end="327:9">-&gt;</operator><name pos:start="327:10" pos:end="327:20">access_type</name></name> <operator pos:start="327:22" pos:end="327:22">=</operator> <name pos:start="327:24" pos:end="327:33">ACCESS_INT</name></expr>;</expr_stmt>



    <return pos:start="331:5" pos:end="331:13">return <expr pos:start="331:12" pos:end="331:12"><literal type="number" pos:start="331:12" pos:end="331:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
