<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15649.c" pos:tabs="8"><function pos:start="1:1" pos:end="239:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">disas_simd_mod_imm</name><parameter_list pos:start="1:31" pos:end="1:62">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:43">DisasContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:61"><decl pos:start="1:49" pos:end="1:61"><type pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:56">uint32_t</name></type> <name pos:start="1:58" pos:end="1:61">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="239:1">{<block_content pos:start="5:5" pos:end="237:31">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">rd</name> <init pos:start="5:12" pos:end="5:34">= <expr pos:start="5:14" pos:end="5:34"><call pos:start="5:14" pos:end="5:34"><name pos:start="5:14" pos:end="5:22">extract32</name><argument_list pos:start="5:23" pos:end="5:34">(<argument pos:start="5:24" pos:end="5:27"><expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">insn</name></expr></argument>, <argument pos:start="5:30" pos:end="5:30"><expr pos:start="5:30" pos:end="5:30"><literal type="number" pos:start="5:30" pos:end="5:30">0</literal></expr></argument>, <argument pos:start="5:33" pos:end="5:33"><expr pos:start="5:33" pos:end="5:33"><literal type="number" pos:start="5:33" pos:end="5:33">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">cmode</name> <init pos:start="7:15" pos:end="7:38">= <expr pos:start="7:17" pos:end="7:38"><call pos:start="7:17" pos:end="7:38"><name pos:start="7:17" pos:end="7:25">extract32</name><argument_list pos:start="7:26" pos:end="7:38">(<argument pos:start="7:27" pos:end="7:30"><expr pos:start="7:27" pos:end="7:30"><name pos:start="7:27" pos:end="7:30">insn</name></expr></argument>, <argument pos:start="7:33" pos:end="7:34"><expr pos:start="7:33" pos:end="7:34"><literal type="number" pos:start="7:33" pos:end="7:34">12</literal></expr></argument>, <argument pos:start="7:37" pos:end="7:37"><expr pos:start="7:37" pos:end="7:37"><literal type="number" pos:start="7:37" pos:end="7:37">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">cmode_3_1</name> <init pos:start="9:19" pos:end="9:42">= <expr pos:start="9:21" pos:end="9:42"><call pos:start="9:21" pos:end="9:42"><name pos:start="9:21" pos:end="9:29">extract32</name><argument_list pos:start="9:30" pos:end="9:42">(<argument pos:start="9:31" pos:end="9:35"><expr pos:start="9:31" pos:end="9:35"><name pos:start="9:31" pos:end="9:35">cmode</name></expr></argument>, <argument pos:start="9:38" pos:end="9:38"><expr pos:start="9:38" pos:end="9:38"><literal type="number" pos:start="9:38" pos:end="9:38">1</literal></expr></argument>, <argument pos:start="9:41" pos:end="9:41"><expr pos:start="9:41" pos:end="9:41"><literal type="number" pos:start="9:41" pos:end="9:41">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">cmode_0</name> <init pos:start="11:17" pos:end="11:40">= <expr pos:start="11:19" pos:end="11:40"><call pos:start="11:19" pos:end="11:40"><name pos:start="11:19" pos:end="11:27">extract32</name><argument_list pos:start="11:28" pos:end="11:40">(<argument pos:start="11:29" pos:end="11:33"><expr pos:start="11:29" pos:end="11:33"><name pos:start="11:29" pos:end="11:33">cmode</name></expr></argument>, <argument pos:start="11:36" pos:end="11:36"><expr pos:start="11:36" pos:end="11:36"><literal type="number" pos:start="11:36" pos:end="11:36">0</literal></expr></argument>, <argument pos:start="11:39" pos:end="11:39"><expr pos:start="11:39" pos:end="11:39"><literal type="number" pos:start="11:39" pos:end="11:39">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">o2</name> <init pos:start="13:12" pos:end="13:35">= <expr pos:start="13:14" pos:end="13:35"><call pos:start="13:14" pos:end="13:35"><name pos:start="13:14" pos:end="13:22">extract32</name><argument_list pos:start="13:23" pos:end="13:35">(<argument pos:start="13:24" pos:end="13:27"><expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">insn</name></expr></argument>, <argument pos:start="13:30" pos:end="13:31"><expr pos:start="13:30" pos:end="13:31"><literal type="number" pos:start="13:30" pos:end="13:31">11</literal></expr></argument>, <argument pos:start="13:34" pos:end="13:34"><expr pos:start="13:34" pos:end="13:34"><literal type="number" pos:start="13:34" pos:end="13:34">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:78"><decl pos:start="15:5" pos:end="15:77"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:21">abcdefgh</name> <init pos:start="15:23" pos:end="15:77">= <expr pos:start="15:25" pos:end="15:77"><call pos:start="15:25" pos:end="15:45"><name pos:start="15:25" pos:end="15:33">extract32</name><argument_list pos:start="15:34" pos:end="15:45">(<argument pos:start="15:35" pos:end="15:38"><expr pos:start="15:35" pos:end="15:38"><name pos:start="15:35" pos:end="15:38">insn</name></expr></argument>, <argument pos:start="15:41" pos:end="15:41"><expr pos:start="15:41" pos:end="15:41"><literal type="number" pos:start="15:41" pos:end="15:41">5</literal></expr></argument>, <argument pos:start="15:44" pos:end="15:44"><expr pos:start="15:44" pos:end="15:44"><literal type="number" pos:start="15:44" pos:end="15:44">5</literal></expr></argument>)</argument_list></call> <operator pos:start="15:47" pos:end="15:47">|</operator> <operator pos:start="15:49" pos:end="15:49">(</operator><call pos:start="15:50" pos:end="15:71"><name pos:start="15:50" pos:end="15:58">extract32</name><argument_list pos:start="15:59" pos:end="15:71">(<argument pos:start="15:60" pos:end="15:63"><expr pos:start="15:60" pos:end="15:63"><name pos:start="15:60" pos:end="15:63">insn</name></expr></argument>, <argument pos:start="15:66" pos:end="15:67"><expr pos:start="15:66" pos:end="15:67"><literal type="number" pos:start="15:66" pos:end="15:67">16</literal></expr></argument>, <argument pos:start="15:70" pos:end="15:70"><expr pos:start="15:70" pos:end="15:70"><literal type="number" pos:start="15:70" pos:end="15:70">3</literal></expr></argument>)</argument_list></call> <operator pos:start="15:73" pos:end="15:74">&lt;&lt;</operator> <literal type="number" pos:start="15:76" pos:end="15:76">5</literal><operator pos:start="15:77" pos:end="15:77">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:41"><decl pos:start="17:5" pos:end="17:40"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:15">is_neg</name> <init pos:start="17:17" pos:end="17:40">= <expr pos:start="17:19" pos:end="17:40"><call pos:start="17:19" pos:end="17:40"><name pos:start="17:19" pos:end="17:27">extract32</name><argument_list pos:start="17:28" pos:end="17:40">(<argument pos:start="17:29" pos:end="17:32"><expr pos:start="17:29" pos:end="17:32"><name pos:start="17:29" pos:end="17:32">insn</name></expr></argument>, <argument pos:start="17:35" pos:end="17:36"><expr pos:start="17:35" pos:end="17:36"><literal type="number" pos:start="17:35" pos:end="17:36">29</literal></expr></argument>, <argument pos:start="17:39" pos:end="17:39"><expr pos:start="17:39" pos:end="17:39"><literal type="number" pos:start="17:39" pos:end="17:39">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:39"><decl pos:start="19:5" pos:end="19:38"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:13">is_q</name> <init pos:start="19:15" pos:end="19:38">= <expr pos:start="19:17" pos:end="19:38"><call pos:start="19:17" pos:end="19:38"><name pos:start="19:17" pos:end="19:25">extract32</name><argument_list pos:start="19:26" pos:end="19:38">(<argument pos:start="19:27" pos:end="19:30"><expr pos:start="19:27" pos:end="19:30"><name pos:start="19:27" pos:end="19:30">insn</name></expr></argument>, <argument pos:start="19:33" pos:end="19:34"><expr pos:start="19:33" pos:end="19:34"><literal type="number" pos:start="19:33" pos:end="19:34">30</literal></expr></argument>, <argument pos:start="19:37" pos:end="19:37"><expr pos:start="19:37" pos:end="19:37"><literal type="number" pos:start="19:37" pos:end="19:37">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:16">imm</name> <init pos:start="21:18" pos:end="21:20">= <expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">TCGv_i64</name></type> <name pos:start="23:14" pos:end="23:19">tcg_rd</name></decl>, <decl pos:start="23:22" pos:end="23:28"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:22" pos:end="23:28">tcg_imm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:55">(<expr pos:start="29:9" pos:end="29:54"><name pos:start="29:9" pos:end="29:10">o2</name> <operator pos:start="29:12" pos:end="29:13">!=</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal> <operator pos:start="29:17" pos:end="29:18">||</operator> <operator pos:start="29:20" pos:end="29:20">(</operator><operator pos:start="29:21" pos:end="29:21">(</operator><name pos:start="29:22" pos:end="29:26">cmode</name> <operator pos:start="29:28" pos:end="29:29">==</operator> <literal type="number" pos:start="29:31" pos:end="29:33">0xf</literal><operator pos:start="29:34" pos:end="29:34">)</operator> <operator pos:start="29:36" pos:end="29:37">&amp;&amp;</operator> <name pos:start="29:39" pos:end="29:44">is_neg</name> <operator pos:start="29:46" pos:end="29:47">&amp;&amp;</operator> <operator pos:start="29:49" pos:end="29:49">!</operator><name pos:start="29:50" pos:end="29:53">is_q</name><operator pos:start="29:54" pos:end="29:54">)</operator></expr>)</condition> <block pos:start="29:57" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:15">

        <expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><call pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:28">unallocated_encoding</name><argument_list pos:start="31:29" pos:end="31:31">(<argument pos:start="31:30" pos:end="31:30"><expr pos:start="31:30" pos:end="31:30"><name pos:start="31:30" pos:end="31:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:28">(<expr pos:start="39:9" pos:end="39:27"><operator pos:start="39:9" pos:end="39:9">!</operator><call pos:start="39:10" pos:end="39:27"><name pos:start="39:10" pos:end="39:24">fp_access_check</name><argument_list pos:start="39:25" pos:end="39:27">(<argument pos:start="39:26" pos:end="39:26"><expr pos:start="39:26" pos:end="39:26"><name pos:start="39:26" pos:end="39:26">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:30" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:15">

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:43">/* See AdvSIMDExpandImm() in ARM ARM */</comment>

    <switch pos:start="49:5" pos:end="175:5">switch <condition pos:start="49:12" pos:end="49:22">(<expr pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:21">cmode_3_1</name></expr>)</condition> <block pos:start="49:24" pos:end="175:5">{<block_content pos:start="51:5" pos:end="173:14">

    <case pos:start="51:5" pos:end="51:11">case <expr pos:start="51:10" pos:end="51:10"><literal type="number" pos:start="51:10" pos:end="51:10">0</literal></expr>:</case> <comment type="block" pos:start="51:13" pos:end="51:46">/* Replicate(Zeros(24):imm8, 2) */</comment>

    <case pos:start="53:5" pos:end="53:11">case <expr pos:start="53:10" pos:end="53:10"><literal type="number" pos:start="53:10" pos:end="53:10">1</literal></expr>:</case> <comment type="block" pos:start="53:13" pos:end="53:55">/* Replicate(Zeros(16):imm8:Zeros(8), 2) */</comment>

    <case pos:start="55:5" pos:end="55:11">case <expr pos:start="55:10" pos:end="55:10"><literal type="number" pos:start="55:10" pos:end="55:10">2</literal></expr>:</case> <comment type="block" pos:start="55:13" pos:end="55:55">/* Replicate(Zeros(8):imm8:Zeros(16), 2) */</comment>

    <case pos:start="57:5" pos:end="57:11">case <expr pos:start="57:10" pos:end="57:10"><literal type="number" pos:start="57:10" pos:end="57:10">3</literal></expr>:</case> <comment type="block" pos:start="57:13" pos:end="57:46">/* Replicate(imm8:Zeros(24), 2) */</comment>

    <block pos:start="59:5" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:14">

        <decl_stmt pos:start="61:9" pos:end="61:34"><decl pos:start="61:9" pos:end="61:33"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:17">shift</name> <init pos:start="61:19" pos:end="61:33">= <expr pos:start="61:21" pos:end="61:33"><name pos:start="61:21" pos:end="61:29">cmode_3_1</name> <operator pos:start="61:31" pos:end="61:31">*</operator> <literal type="number" pos:start="61:33" pos:end="61:33">8</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:56"><expr pos:start="63:9" pos:end="63:55"><name pos:start="63:9" pos:end="63:11">imm</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:55"><name pos:start="63:15" pos:end="63:32">bitfield_replicate</name><argument_list pos:start="63:33" pos:end="63:55">(<argument pos:start="63:34" pos:end="63:50"><expr pos:start="63:34" pos:end="63:50"><name pos:start="63:34" pos:end="63:41">abcdefgh</name> <operator pos:start="63:43" pos:end="63:44">&lt;&lt;</operator> <name pos:start="63:46" pos:end="63:50">shift</name></expr></argument>, <argument pos:start="63:53" pos:end="63:54"><expr pos:start="63:53" pos:end="63:54"><literal type="number" pos:start="63:53" pos:end="63:54">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    </block_content>}</block>

    <case pos:start="69:5" pos:end="69:11">case <expr pos:start="69:10" pos:end="69:10"><literal type="number" pos:start="69:10" pos:end="69:10">4</literal></expr>:</case> <comment type="block" pos:start="69:13" pos:end="69:45">/* Replicate(Zeros(8):imm8, 4) */</comment>

    <case pos:start="71:5" pos:end="71:11">case <expr pos:start="71:10" pos:end="71:10"><literal type="number" pos:start="71:10" pos:end="71:10">5</literal></expr>:</case> <comment type="block" pos:start="71:13" pos:end="71:45">/* Replicate(imm8:Zeros(8), 4) */</comment>

    <block pos:start="73:5" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:14">

        <decl_stmt pos:start="75:9" pos:end="75:42"><decl pos:start="75:9" pos:end="75:41"><type pos:start="75:9" pos:end="75:11"><name pos:start="75:9" pos:end="75:11">int</name></type> <name pos:start="75:13" pos:end="75:17">shift</name> <init pos:start="75:19" pos:end="75:41">= <expr pos:start="75:21" pos:end="75:41"><operator pos:start="75:21" pos:end="75:21">(</operator><name pos:start="75:22" pos:end="75:30">cmode_3_1</name> <operator pos:start="75:32" pos:end="75:32">&amp;</operator> <literal type="number" pos:start="75:34" pos:end="75:36">0x1</literal><operator pos:start="75:37" pos:end="75:37">)</operator> <operator pos:start="75:39" pos:end="75:39">*</operator> <literal type="number" pos:start="75:41" pos:end="75:41">8</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:56"><expr pos:start="77:9" pos:end="77:55"><name pos:start="77:9" pos:end="77:11">imm</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:55"><name pos:start="77:15" pos:end="77:32">bitfield_replicate</name><argument_list pos:start="77:33" pos:end="77:55">(<argument pos:start="77:34" pos:end="77:50"><expr pos:start="77:34" pos:end="77:50"><name pos:start="77:34" pos:end="77:41">abcdefgh</name> <operator pos:start="77:43" pos:end="77:44">&lt;&lt;</operator> <name pos:start="77:46" pos:end="77:50">shift</name></expr></argument>, <argument pos:start="77:53" pos:end="77:54"><expr pos:start="77:53" pos:end="77:54"><literal type="number" pos:start="77:53" pos:end="77:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    </block_content>}</block>

    <case pos:start="83:5" pos:end="83:11">case <expr pos:start="83:10" pos:end="83:10"><literal type="number" pos:start="83:10" pos:end="83:10">6</literal></expr>:</case>

        <if_stmt pos:start="85:9" pos:end="97:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:20">(<expr pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:19">cmode_0</name></expr>)</condition> <block pos:start="85:22" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:44">

            <comment type="block" pos:start="87:13" pos:end="87:54">/* Replicate(Zeros(8):imm8:Ones(16), 2) */</comment>

            <expr_stmt pos:start="89:13" pos:end="89:44"><expr pos:start="89:13" pos:end="89:43"><name pos:start="89:13" pos:end="89:15">imm</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <operator pos:start="89:19" pos:end="89:19">(</operator><name pos:start="89:20" pos:end="89:27">abcdefgh</name> <operator pos:start="89:29" pos:end="89:30">&lt;&lt;</operator> <literal type="number" pos:start="89:32" pos:end="89:33">16</literal><operator pos:start="89:34" pos:end="89:34">)</operator> <operator pos:start="89:36" pos:end="89:36">|</operator> <literal type="number" pos:start="89:38" pos:end="89:43">0xffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="91:11" pos:end="97:9">else <block pos:start="91:16" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:41">

            <comment type="block" pos:start="93:13" pos:end="93:54">/* Replicate(Zeros(16):imm8:Ones(8), 2) */</comment>

            <expr_stmt pos:start="95:13" pos:end="95:41"><expr pos:start="95:13" pos:end="95:40"><name pos:start="95:13" pos:end="95:15">imm</name> <operator pos:start="95:17" pos:end="95:17">=</operator> <operator pos:start="95:19" pos:end="95:19">(</operator><name pos:start="95:20" pos:end="95:27">abcdefgh</name> <operator pos:start="95:29" pos:end="95:30">&lt;&lt;</operator> <literal type="number" pos:start="95:32" pos:end="95:32">8</literal><operator pos:start="95:33" pos:end="95:33">)</operator> <operator pos:start="95:35" pos:end="95:35">|</operator> <literal type="number" pos:start="95:37" pos:end="95:40">0xff</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:42"><expr pos:start="99:9" pos:end="99:41"><name pos:start="99:9" pos:end="99:11">imm</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="99:41"><name pos:start="99:15" pos:end="99:32">bitfield_replicate</name><argument_list pos:start="99:33" pos:end="99:41">(<argument pos:start="99:34" pos:end="99:36"><expr pos:start="99:34" pos:end="99:36"><name pos:start="99:34" pos:end="99:36">imm</name></expr></argument>, <argument pos:start="99:39" pos:end="99:40"><expr pos:start="99:39" pos:end="99:40"><literal type="number" pos:start="99:39" pos:end="99:40">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:11">case <expr pos:start="103:10" pos:end="103:10"><literal type="number" pos:start="103:10" pos:end="103:10">7</literal></expr>:</case>

        <if_stmt pos:start="105:9" pos:end="171:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:32">(<expr pos:start="105:13" pos:end="105:31"><operator pos:start="105:13" pos:end="105:13">!</operator><name pos:start="105:14" pos:end="105:20">cmode_0</name> <operator pos:start="105:22" pos:end="105:23">&amp;&amp;</operator> <operator pos:start="105:25" pos:end="105:25">!</operator><name pos:start="105:26" pos:end="105:31">is_neg</name></expr>)</condition> <block pos:start="105:34" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:50">

            <expr_stmt pos:start="107:13" pos:end="107:50"><expr pos:start="107:13" pos:end="107:49"><name pos:start="107:13" pos:end="107:15">imm</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <call pos:start="107:19" pos:end="107:49"><name pos:start="107:19" pos:end="107:36">bitfield_replicate</name><argument_list pos:start="107:37" pos:end="107:49">(<argument pos:start="107:38" pos:end="107:45"><expr pos:start="107:38" pos:end="107:45"><name pos:start="107:38" pos:end="107:45">abcdefgh</name></expr></argument>, <argument pos:start="107:48" pos:end="107:48"><expr pos:start="107:48" pos:end="107:48"><literal type="number" pos:start="107:48" pos:end="107:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="109:11" pos:end="125:9">else if <condition pos:start="109:19" pos:end="109:38">(<expr pos:start="109:20" pos:end="109:37"><operator pos:start="109:20" pos:end="109:20">!</operator><name pos:start="109:21" pos:end="109:27">cmode_0</name> <operator pos:start="109:29" pos:end="109:30">&amp;&amp;</operator> <name pos:start="109:32" pos:end="109:37">is_neg</name></expr>)</condition> <block pos:start="109:40" pos:end="125:9">{<block_content pos:start="111:13" pos:end="123:13">

            <decl_stmt pos:start="111:13" pos:end="111:18"><decl pos:start="111:13" pos:end="111:17"><type pos:start="111:13" pos:end="111:15"><name pos:start="111:13" pos:end="111:15">int</name></type> <name pos:start="111:17" pos:end="111:17">i</name></decl>;</decl_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:20"><expr pos:start="113:13" pos:end="113:19"><name pos:start="113:13" pos:end="113:15">imm</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <literal type="number" pos:start="113:19" pos:end="113:19">0</literal></expr>;</expr_stmt>

            <for pos:start="115:13" pos:end="123:13">for <control pos:start="115:17" pos:end="115:35">(<init pos:start="115:18" pos:end="115:23"><expr pos:start="115:18" pos:end="115:22"><name pos:start="115:18" pos:end="115:18">i</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <literal type="number" pos:start="115:22" pos:end="115:22">0</literal></expr>;</init> <condition pos:start="115:25" pos:end="115:30"><expr pos:start="115:25" pos:end="115:29"><name pos:start="115:25" pos:end="115:25">i</name> <operator pos:start="115:27" pos:end="115:27">&lt;</operator> <literal type="number" pos:start="115:29" pos:end="115:29">8</literal></expr>;</condition> <incr pos:start="115:32" pos:end="115:34"><expr pos:start="115:32" pos:end="115:34"><name pos:start="115:32" pos:end="115:32">i</name><operator pos:start="115:33" pos:end="115:34">++</operator></expr></incr>)</control> <block pos:start="115:37" pos:end="123:13">{<block_content pos:start="117:17" pos:end="121:17">

                <if_stmt pos:start="117:17" pos:end="121:17"><if pos:start="117:17" pos:end="121:17">if <condition pos:start="117:20" pos:end="117:42">(<expr pos:start="117:21" pos:end="117:41"><operator pos:start="117:21" pos:end="117:21">(</operator><name pos:start="117:22" pos:end="117:29">abcdefgh</name><operator pos:start="117:30" pos:end="117:30">)</operator> <operator pos:start="117:32" pos:end="117:32">&amp;</operator> <operator pos:start="117:34" pos:end="117:34">(</operator><literal type="number" pos:start="117:35" pos:end="117:35">1</literal> <operator pos:start="117:37" pos:end="117:38">&lt;&lt;</operator> <name pos:start="117:40" pos:end="117:40">i</name><operator pos:start="117:41" pos:end="117:41">)</operator></expr>)</condition> <block pos:start="117:44" pos:end="121:17">{<block_content pos:start="119:21" pos:end="119:46">

                    <expr_stmt pos:start="119:21" pos:end="119:46"><expr pos:start="119:21" pos:end="119:45"><name pos:start="119:21" pos:end="119:23">imm</name> <operator pos:start="119:25" pos:end="119:26">|=</operator> <literal type="number" pos:start="119:28" pos:end="119:34">0xffULL</literal> <operator pos:start="119:36" pos:end="119:37">&lt;&lt;</operator> <operator pos:start="119:39" pos:end="119:39">(</operator><name pos:start="119:40" pos:end="119:40">i</name> <operator pos:start="119:42" pos:end="119:42">*</operator> <literal type="number" pos:start="119:44" pos:end="119:44">8</literal><operator pos:start="119:45" pos:end="119:45">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="125:11" pos:end="171:9">else if <condition pos:start="125:19" pos:end="125:27">(<expr pos:start="125:20" pos:end="125:26"><name pos:start="125:20" pos:end="125:26">cmode_0</name></expr>)</condition> <block pos:start="125:29" pos:end="171:9">{<block_content pos:start="127:13" pos:end="169:13">

            <if_stmt pos:start="127:13" pos:end="169:13"><if pos:start="127:13" pos:end="147:13">if <condition pos:start="127:16" pos:end="127:23">(<expr pos:start="127:17" pos:end="127:22"><name pos:start="127:17" pos:end="127:22">is_neg</name></expr>)</condition> <block pos:start="127:25" pos:end="147:13">{<block_content pos:start="129:17" pos:end="145:17">

                <expr_stmt pos:start="129:17" pos:end="129:46"><expr pos:start="129:17" pos:end="129:45"><name pos:start="129:17" pos:end="129:19">imm</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <operator pos:start="129:23" pos:end="129:23">(</operator><name pos:start="129:24" pos:end="129:31">abcdefgh</name> <operator pos:start="129:33" pos:end="129:33">&amp;</operator> <literal type="number" pos:start="129:35" pos:end="129:38">0x3f</literal><operator pos:start="129:39" pos:end="129:39">)</operator> <operator pos:start="129:41" pos:end="129:42">&lt;&lt;</operator> <literal type="number" pos:start="129:44" pos:end="129:45">48</literal></expr>;</expr_stmt>

                <if_stmt pos:start="131:17" pos:end="135:17"><if pos:start="131:17" pos:end="135:17">if <condition pos:start="131:20" pos:end="131:36">(<expr pos:start="131:21" pos:end="131:35"><name pos:start="131:21" pos:end="131:28">abcdefgh</name> <operator pos:start="131:30" pos:end="131:30">&amp;</operator> <literal type="number" pos:start="131:32" pos:end="131:35">0x80</literal></expr>)</condition> <block pos:start="131:38" pos:end="135:17">{<block_content pos:start="133:21" pos:end="133:49">

                    <expr_stmt pos:start="133:21" pos:end="133:49"><expr pos:start="133:21" pos:end="133:48"><name pos:start="133:21" pos:end="133:23">imm</name> <operator pos:start="133:25" pos:end="133:26">|=</operator> <literal type="number" pos:start="133:28" pos:end="133:48">0x8000000000000000ULL</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="137:17" pos:end="145:17"><if pos:start="137:17" pos:end="141:17">if <condition pos:start="137:20" pos:end="137:36">(<expr pos:start="137:21" pos:end="137:35"><name pos:start="137:21" pos:end="137:28">abcdefgh</name> <operator pos:start="137:30" pos:end="137:30">&amp;</operator> <literal type="number" pos:start="137:32" pos:end="137:35">0x40</literal></expr>)</condition> <block pos:start="137:38" pos:end="141:17">{<block_content pos:start="139:21" pos:end="139:49">

                    <expr_stmt pos:start="139:21" pos:end="139:49"><expr pos:start="139:21" pos:end="139:48"><name pos:start="139:21" pos:end="139:23">imm</name> <operator pos:start="139:25" pos:end="139:26">|=</operator> <literal type="number" pos:start="139:28" pos:end="139:48">0x3fc0000000000000ULL</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="141:19" pos:end="145:17">else <block pos:start="141:24" pos:end="145:17">{<block_content pos:start="143:21" pos:end="143:49">

                    <expr_stmt pos:start="143:21" pos:end="143:49"><expr pos:start="143:21" pos:end="143:48"><name pos:start="143:21" pos:end="143:23">imm</name> <operator pos:start="143:25" pos:end="143:26">|=</operator> <literal type="number" pos:start="143:28" pos:end="143:48">0x4000000000000000ULL</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="147:15" pos:end="169:13">else <block pos:start="147:20" pos:end="169:13">{<block_content pos:start="149:17" pos:end="167:35">

                <expr_stmt pos:start="149:17" pos:end="149:46"><expr pos:start="149:17" pos:end="149:45"><name pos:start="149:17" pos:end="149:19">imm</name> <operator pos:start="149:21" pos:end="149:21">=</operator> <operator pos:start="149:23" pos:end="149:23">(</operator><name pos:start="149:24" pos:end="149:31">abcdefgh</name> <operator pos:start="149:33" pos:end="149:33">&amp;</operator> <literal type="number" pos:start="149:35" pos:end="149:38">0x3f</literal><operator pos:start="149:39" pos:end="149:39">)</operator> <operator pos:start="149:41" pos:end="149:42">&lt;&lt;</operator> <literal type="number" pos:start="149:44" pos:end="149:45">19</literal></expr>;</expr_stmt>

                <if_stmt pos:start="151:17" pos:end="155:17"><if pos:start="151:17" pos:end="155:17">if <condition pos:start="151:20" pos:end="151:36">(<expr pos:start="151:21" pos:end="151:35"><name pos:start="151:21" pos:end="151:28">abcdefgh</name> <operator pos:start="151:30" pos:end="151:30">&amp;</operator> <literal type="number" pos:start="151:32" pos:end="151:35">0x80</literal></expr>)</condition> <block pos:start="151:38" pos:end="155:17">{<block_content pos:start="153:21" pos:end="153:38">

                    <expr_stmt pos:start="153:21" pos:end="153:38"><expr pos:start="153:21" pos:end="153:37"><name pos:start="153:21" pos:end="153:23">imm</name> <operator pos:start="153:25" pos:end="153:26">|=</operator> <literal type="number" pos:start="153:28" pos:end="153:37">0x80000000</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="157:17" pos:end="165:17"><if pos:start="157:17" pos:end="161:17">if <condition pos:start="157:20" pos:end="157:36">(<expr pos:start="157:21" pos:end="157:35"><name pos:start="157:21" pos:end="157:28">abcdefgh</name> <operator pos:start="157:30" pos:end="157:30">&amp;</operator> <literal type="number" pos:start="157:32" pos:end="157:35">0x40</literal></expr>)</condition> <block pos:start="157:38" pos:end="161:17">{<block_content pos:start="159:21" pos:end="159:38">

                    <expr_stmt pos:start="159:21" pos:end="159:38"><expr pos:start="159:21" pos:end="159:37"><name pos:start="159:21" pos:end="159:23">imm</name> <operator pos:start="159:25" pos:end="159:26">|=</operator> <literal type="number" pos:start="159:28" pos:end="159:37">0x3e000000</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="161:19" pos:end="165:17">else <block pos:start="161:24" pos:end="165:17">{<block_content pos:start="163:21" pos:end="163:38">

                    <expr_stmt pos:start="163:21" pos:end="163:38"><expr pos:start="163:21" pos:end="163:37"><name pos:start="163:21" pos:end="163:23">imm</name> <operator pos:start="163:25" pos:end="163:26">|=</operator> <literal type="number" pos:start="163:28" pos:end="163:37">0x40000000</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:35"><expr pos:start="167:17" pos:end="167:34"><name pos:start="167:17" pos:end="167:19">imm</name> <operator pos:start="167:21" pos:end="167:22">|=</operator> <operator pos:start="167:24" pos:end="167:24">(</operator><name pos:start="167:25" pos:end="167:27">imm</name> <operator pos:start="167:29" pos:end="167:30">&lt;&lt;</operator> <literal type="number" pos:start="167:32" pos:end="167:33">32</literal><operator pos:start="167:34" pos:end="167:34">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="173:9" pos:end="173:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="179:5" pos:end="183:5"><if pos:start="179:5" pos:end="183:5">if <condition pos:start="179:8" pos:end="179:33">(<expr pos:start="179:9" pos:end="179:32"><name pos:start="179:9" pos:end="179:17">cmode_3_1</name> <operator pos:start="179:19" pos:end="179:20">!=</operator> <literal type="number" pos:start="179:22" pos:end="179:22">7</literal> <operator pos:start="179:24" pos:end="179:25">&amp;&amp;</operator> <name pos:start="179:27" pos:end="179:32">is_neg</name></expr>)</condition> <block pos:start="179:35" pos:end="183:5">{<block_content pos:start="181:9" pos:end="181:19">

        <expr_stmt pos:start="181:9" pos:end="181:19"><expr pos:start="181:9" pos:end="181:18"><name pos:start="181:9" pos:end="181:11">imm</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <operator pos:start="181:15" pos:end="181:15">~</operator><name pos:start="181:16" pos:end="181:18">imm</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:33"><expr pos:start="187:5" pos:end="187:32"><name pos:start="187:5" pos:end="187:11">tcg_imm</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:32"><name pos:start="187:15" pos:end="187:27">tcg_const_i64</name><argument_list pos:start="187:28" pos:end="187:32">(<argument pos:start="187:29" pos:end="187:31"><expr pos:start="187:29" pos:end="187:31"><name pos:start="187:29" pos:end="187:31">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:28"><expr pos:start="189:5" pos:end="189:27"><name pos:start="189:5" pos:end="189:10">tcg_rd</name> <operator pos:start="189:12" pos:end="189:12">=</operator> <call pos:start="189:14" pos:end="189:27"><name pos:start="189:14" pos:end="189:24">new_tmp_a64</name><argument_list pos:start="189:25" pos:end="189:27">(<argument pos:start="189:26" pos:end="189:26"><expr pos:start="189:26" pos:end="189:26"><name pos:start="189:26" pos:end="189:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="193:5" pos:end="233:5">for <control pos:start="193:9" pos:end="193:27">(<init pos:start="193:10" pos:end="193:15"><expr pos:start="193:10" pos:end="193:14"><name pos:start="193:10" pos:end="193:10">i</name> <operator pos:start="193:12" pos:end="193:12">=</operator> <literal type="number" pos:start="193:14" pos:end="193:14">0</literal></expr>;</init> <condition pos:start="193:17" pos:end="193:22"><expr pos:start="193:17" pos:end="193:21"><name pos:start="193:17" pos:end="193:17">i</name> <operator pos:start="193:19" pos:end="193:19">&lt;</operator> <literal type="number" pos:start="193:21" pos:end="193:21">2</literal></expr>;</condition> <incr pos:start="193:24" pos:end="193:26"><expr pos:start="193:24" pos:end="193:26"><name pos:start="193:24" pos:end="193:24">i</name><operator pos:start="193:25" pos:end="193:26">++</operator></expr></incr>)</control> <block pos:start="193:29" pos:end="233:5">{<block_content pos:start="195:9" pos:end="231:47">

        <decl_stmt pos:start="195:9" pos:end="195:72"><decl pos:start="195:9" pos:end="195:71"><type pos:start="195:9" pos:end="195:11"><name pos:start="195:9" pos:end="195:11">int</name></type> <name pos:start="195:13" pos:end="195:17">foffs</name> <init pos:start="195:19" pos:end="195:71">= <expr pos:start="195:21" pos:end="195:71"><ternary pos:start="195:21" pos:end="195:71"><condition pos:start="195:21" pos:end="195:23"><expr pos:start="195:21" pos:end="195:21"><name pos:start="195:21" pos:end="195:21">i</name></expr> ?</condition><then pos:start="195:25" pos:end="195:44"> <expr pos:start="195:25" pos:end="195:44"><call pos:start="195:25" pos:end="195:44"><name pos:start="195:25" pos:end="195:40">fp_reg_hi_offset</name><argument_list pos:start="195:41" pos:end="195:44">(<argument pos:start="195:42" pos:end="195:43"><expr pos:start="195:42" pos:end="195:43"><name pos:start="195:42" pos:end="195:43">rd</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="195:46" pos:end="195:71">: <expr pos:start="195:48" pos:end="195:71"><call pos:start="195:48" pos:end="195:71"><name pos:start="195:48" pos:end="195:60">fp_reg_offset</name><argument_list pos:start="195:61" pos:end="195:71">(<argument pos:start="195:62" pos:end="195:63"><expr pos:start="195:62" pos:end="195:63"><name pos:start="195:62" pos:end="195:63">rd</name></expr></argument>, <argument pos:start="195:66" pos:end="195:70"><expr pos:start="195:66" pos:end="195:70"><name pos:start="195:66" pos:end="195:70">MO_64</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="199:9" pos:end="229:9"><if pos:start="199:9" pos:end="205:9">if <condition pos:start="199:12" pos:end="199:28">(<expr pos:start="199:13" pos:end="199:27"><name pos:start="199:13" pos:end="199:13">i</name> <operator pos:start="199:15" pos:end="199:16">==</operator> <literal type="number" pos:start="199:18" pos:end="199:18">1</literal> <operator pos:start="199:20" pos:end="199:21">&amp;&amp;</operator> <operator pos:start="199:23" pos:end="199:23">!</operator><name pos:start="199:24" pos:end="199:27">is_q</name></expr>)</condition> <block pos:start="199:30" pos:end="205:9">{<block_content pos:start="203:13" pos:end="203:40">

            <comment type="block" pos:start="201:13" pos:end="201:56">/* non-quad ops clear high half of vector */</comment>

            <expr_stmt pos:start="203:13" pos:end="203:40"><expr pos:start="203:13" pos:end="203:39"><call pos:start="203:13" pos:end="203:39"><name pos:start="203:13" pos:end="203:28">tcg_gen_movi_i64</name><argument_list pos:start="203:29" pos:end="203:39">(<argument pos:start="203:30" pos:end="203:35"><expr pos:start="203:30" pos:end="203:35"><name pos:start="203:30" pos:end="203:35">tcg_rd</name></expr></argument>, <argument pos:start="203:38" pos:end="203:38"><expr pos:start="203:38" pos:end="203:38"><literal type="number" pos:start="203:38" pos:end="203:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="205:11" pos:end="223:9">else if <condition pos:start="205:19" pos:end="205:64">(<expr pos:start="205:20" pos:end="205:63"><operator pos:start="205:20" pos:end="205:20">(</operator><name pos:start="205:21" pos:end="205:25">cmode</name> <operator pos:start="205:27" pos:end="205:27">&amp;</operator> <literal type="number" pos:start="205:29" pos:end="205:31">0x9</literal><operator pos:start="205:32" pos:end="205:32">)</operator> <operator pos:start="205:34" pos:end="205:35">==</operator> <literal type="number" pos:start="205:37" pos:end="205:39">0x1</literal> <operator pos:start="205:41" pos:end="205:42">||</operator> <operator pos:start="205:44" pos:end="205:44">(</operator><name pos:start="205:45" pos:end="205:49">cmode</name> <operator pos:start="205:51" pos:end="205:51">&amp;</operator> <literal type="number" pos:start="205:53" pos:end="205:55">0xd</literal><operator pos:start="205:56" pos:end="205:56">)</operator> <operator pos:start="205:58" pos:end="205:59">==</operator> <literal type="number" pos:start="205:61" pos:end="205:63">0x9</literal></expr>)</condition> <block pos:start="205:66" pos:end="223:9">{<block_content pos:start="207:13" pos:end="221:13">

            <expr_stmt pos:start="207:13" pos:end="207:51"><expr pos:start="207:13" pos:end="207:50"><call pos:start="207:13" pos:end="207:50"><name pos:start="207:13" pos:end="207:26">tcg_gen_ld_i64</name><argument_list pos:start="207:27" pos:end="207:50">(<argument pos:start="207:28" pos:end="207:33"><expr pos:start="207:28" pos:end="207:33"><name pos:start="207:28" pos:end="207:33">tcg_rd</name></expr></argument>, <argument pos:start="207:36" pos:end="207:42"><expr pos:start="207:36" pos:end="207:42"><name pos:start="207:36" pos:end="207:42">cpu_env</name></expr></argument>, <argument pos:start="207:45" pos:end="207:49"><expr pos:start="207:45" pos:end="207:49"><name pos:start="207:45" pos:end="207:49">foffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="209:13" pos:end="221:13"><if pos:start="209:13" pos:end="215:13">if <condition pos:start="209:16" pos:end="209:23">(<expr pos:start="209:17" pos:end="209:22"><name pos:start="209:17" pos:end="209:22">is_neg</name></expr>)</condition> <block pos:start="209:25" pos:end="215:13">{<block_content pos:start="213:17" pos:end="213:57">

                <comment type="block" pos:start="211:17" pos:end="211:31">/* AND (BIC) */</comment>

                <expr_stmt pos:start="213:17" pos:end="213:57"><expr pos:start="213:17" pos:end="213:56"><call pos:start="213:17" pos:end="213:56"><name pos:start="213:17" pos:end="213:31">tcg_gen_and_i64</name><argument_list pos:start="213:32" pos:end="213:56">(<argument pos:start="213:33" pos:end="213:38"><expr pos:start="213:33" pos:end="213:38"><name pos:start="213:33" pos:end="213:38">tcg_rd</name></expr></argument>, <argument pos:start="213:41" pos:end="213:46"><expr pos:start="213:41" pos:end="213:46"><name pos:start="213:41" pos:end="213:46">tcg_rd</name></expr></argument>, <argument pos:start="213:49" pos:end="213:55"><expr pos:start="213:49" pos:end="213:55"><name pos:start="213:49" pos:end="213:55">tcg_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="215:15" pos:end="221:13">else <block pos:start="215:20" pos:end="221:13">{<block_content pos:start="219:17" pos:end="219:56">

                <comment type="block" pos:start="217:17" pos:end="217:25">/* ORR */</comment>

                <expr_stmt pos:start="219:17" pos:end="219:56"><expr pos:start="219:17" pos:end="219:55"><call pos:start="219:17" pos:end="219:55"><name pos:start="219:17" pos:end="219:30">tcg_gen_or_i64</name><argument_list pos:start="219:31" pos:end="219:55">(<argument pos:start="219:32" pos:end="219:37"><expr pos:start="219:32" pos:end="219:37"><name pos:start="219:32" pos:end="219:37">tcg_rd</name></expr></argument>, <argument pos:start="219:40" pos:end="219:45"><expr pos:start="219:40" pos:end="219:45"><name pos:start="219:40" pos:end="219:45">tcg_rd</name></expr></argument>, <argument pos:start="219:48" pos:end="219:54"><expr pos:start="219:48" pos:end="219:54"><name pos:start="219:48" pos:end="219:54">tcg_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="223:11" pos:end="229:9">else <block pos:start="223:16" pos:end="229:9">{<block_content pos:start="227:13" pos:end="227:45">

            <comment type="block" pos:start="225:13" pos:end="225:22">/* MOVI */</comment>

            <expr_stmt pos:start="227:13" pos:end="227:45"><expr pos:start="227:13" pos:end="227:44"><call pos:start="227:13" pos:end="227:44"><name pos:start="227:13" pos:end="227:27">tcg_gen_mov_i64</name><argument_list pos:start="227:28" pos:end="227:44">(<argument pos:start="227:29" pos:end="227:34"><expr pos:start="227:29" pos:end="227:34"><name pos:start="227:29" pos:end="227:34">tcg_rd</name></expr></argument>, <argument pos:start="227:37" pos:end="227:43"><expr pos:start="227:37" pos:end="227:43"><name pos:start="227:37" pos:end="227:43">tcg_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:47"><expr pos:start="231:9" pos:end="231:46"><call pos:start="231:9" pos:end="231:46"><name pos:start="231:9" pos:end="231:22">tcg_gen_st_i64</name><argument_list pos:start="231:23" pos:end="231:46">(<argument pos:start="231:24" pos:end="231:29"><expr pos:start="231:24" pos:end="231:29"><name pos:start="231:24" pos:end="231:29">tcg_rd</name></expr></argument>, <argument pos:start="231:32" pos:end="231:38"><expr pos:start="231:32" pos:end="231:38"><name pos:start="231:32" pos:end="231:38">cpu_env</name></expr></argument>, <argument pos:start="231:41" pos:end="231:45"><expr pos:start="231:41" pos:end="231:45"><name pos:start="231:41" pos:end="231:45">foffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="237:5" pos:end="237:31"><expr pos:start="237:5" pos:end="237:30"><call pos:start="237:5" pos:end="237:30"><name pos:start="237:5" pos:end="237:21">tcg_temp_free_i64</name><argument_list pos:start="237:22" pos:end="237:30">(<argument pos:start="237:23" pos:end="237:29"><expr pos:start="237:23" pos:end="237:29"><name pos:start="237:23" pos:end="237:29">tcg_imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
