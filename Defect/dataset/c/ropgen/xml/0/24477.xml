<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24477.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">decode_p_picture_header</name><parameter_list pos:start="1:35" pos:end="1:49">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:45">VC9Context</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">v</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:1">{<block_content pos:start="7:5" pos:end="139:13">

    <comment type="block" pos:start="5:5" pos:end="5:54">/* INTERFRM, FRMCNT, RANGEREDFRM read in caller */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">lowquant</name></decl>, <decl pos:start="7:19" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:25">pqindex</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:34"><expr pos:start="11:5" pos:end="11:33"><name pos:start="11:5" pos:end="11:11">pqindex</name> <operator pos:start="11:13" pos:end="11:13">=</operator> <call pos:start="11:15" pos:end="11:33"><name pos:start="11:15" pos:end="11:22">get_bits</name><argument_list pos:start="11:23" pos:end="11:33">(<argument pos:start="11:24" pos:end="11:29"><expr pos:start="11:24" pos:end="11:29"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:29"><name pos:start="11:25" pos:end="11:25">v</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:29">gb</name></name></expr></argument>, <argument pos:start="11:32" pos:end="11:32"><expr pos:start="11:32" pos:end="11:32"><literal type="number" pos:start="11:32" pos:end="11:32">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="23:5"><if pos:start="13:5" pos:end="15:41">if <condition pos:start="13:8" pos:end="13:50">(<expr pos:start="13:9" pos:end="13:49"><name pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:9">v</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:25">quantizer_mode</name></name> <operator pos:start="13:27" pos:end="13:28">==</operator> <name pos:start="13:30" pos:end="13:49">QUANT_FRAME_IMPLICIT</name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:41"><block_content pos:start="15:9" pos:end="15:41">

        <expr_stmt pos:start="15:9" pos:end="15:41"><expr pos:start="15:9" pos:end="15:40"><name pos:start="15:9" pos:end="15:13"><name pos:start="15:9" pos:end="15:9">v</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:13">pq</name></name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:40"><name pos:start="15:17" pos:end="15:28">pquant_table</name><index pos:start="15:29" pos:end="15:31">[<expr pos:start="15:30" pos:end="15:30"><literal type="number" pos:start="15:30" pos:end="15:30">0</literal></expr>]</index><index pos:start="15:32" pos:end="15:40">[<expr pos:start="15:33" pos:end="15:39"><name pos:start="15:33" pos:end="15:39">pqindex</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="17:5" pos:end="23:5">else

    <block pos:start="19:5" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:59">

        <expr_stmt pos:start="21:9" pos:end="21:59"><expr pos:start="21:9" pos:end="21:58"><name pos:start="21:9" pos:end="21:13"><name pos:start="21:9" pos:end="21:9">v</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:13">pq</name></name> <operator pos:start="21:15" pos:end="21:15">=</operator> <name pos:start="21:17" pos:end="21:58"><name pos:start="21:17" pos:end="21:28">pquant_table</name><index pos:start="21:29" pos:end="21:49">[<expr pos:start="21:30" pos:end="21:48"><name pos:start="21:30" pos:end="21:46"><name pos:start="21:30" pos:end="21:30">v</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:46">quantizer_mode</name></name><operator pos:start="21:47" pos:end="21:47">-</operator><literal type="number" pos:start="21:48" pos:end="21:48">1</literal></expr>]</index><index pos:start="21:50" pos:end="21:58">[<expr pos:start="21:51" pos:end="21:57"><name pos:start="21:51" pos:end="21:57">pqindex</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="25:5" pos:end="25:53"><if pos:start="25:5" pos:end="25:53">if <condition pos:start="25:8" pos:end="25:20">(<expr pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:15">pqindex</name> <operator pos:start="25:17" pos:end="25:17">&lt;</operator> <literal type="number" pos:start="25:19" pos:end="25:19">9</literal></expr>)</condition><block type="pseudo" pos:start="25:22" pos:end="25:53"><block_content pos:start="25:22" pos:end="25:53"> <expr_stmt pos:start="25:22" pos:end="25:53"><expr pos:start="25:22" pos:end="25:52"><name pos:start="25:22" pos:end="25:30"><name pos:start="25:22" pos:end="25:22">v</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:30">halfpq</name></name> <operator pos:start="25:32" pos:end="25:32">=</operator> <call pos:start="25:34" pos:end="25:52"><name pos:start="25:34" pos:end="25:41">get_bits</name><argument_list pos:start="25:42" pos:end="25:52">(<argument pos:start="25:43" pos:end="25:48"><expr pos:start="25:43" pos:end="25:48"><operator pos:start="25:43" pos:end="25:43">&amp;</operator><name pos:start="25:44" pos:end="25:48"><name pos:start="25:44" pos:end="25:44">v</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:48">gb</name></name></expr></argument>, <argument pos:start="25:51" pos:end="25:51"><expr pos:start="25:51" pos:end="25:51"><literal type="number" pos:start="25:51" pos:end="25:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="29:44"><if pos:start="27:5" pos:end="29:44">if <condition pos:start="27:8" pos:end="27:50">(<expr pos:start="27:9" pos:end="27:49"><name pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:9">v</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:25">quantizer_mode</name></name> <operator pos:start="27:27" pos:end="27:28">==</operator> <name pos:start="27:30" pos:end="27:49">QUANT_FRAME_EXPLICIT</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:44"><block_content pos:start="29:9" pos:end="29:44">

        <expr_stmt pos:start="29:9" pos:end="29:44"><expr pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:9">v</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:21">pquantizer</name></name> <operator pos:start="29:23" pos:end="29:23">=</operator> <call pos:start="29:25" pos:end="29:43"><name pos:start="29:25" pos:end="29:32">get_bits</name><argument_list pos:start="29:33" pos:end="29:43">(<argument pos:start="29:34" pos:end="29:39"><expr pos:start="29:34" pos:end="29:39"><operator pos:start="29:34" pos:end="29:34">&amp;</operator><name pos:start="29:35" pos:end="29:39"><name pos:start="29:35" pos:end="29:35">v</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:39">gb</name></name></expr></argument>, <argument pos:start="29:42" pos:end="29:42"><expr pos:start="29:42" pos:end="29:42"><literal type="number" pos:start="29:42" pos:end="29:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="33:29"><expr pos:start="31:5" pos:end="33:28"><call pos:start="31:5" pos:end="33:28"><name pos:start="31:5" pos:end="31:10">av_log</name><argument_list pos:start="31:11" pos:end="33:28">(<argument pos:start="31:12" pos:end="31:19"><expr pos:start="31:12" pos:end="31:19"><name pos:start="31:12" pos:end="31:19"><name pos:start="31:12" pos:end="31:12">v</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:19">avctx</name></name></expr></argument>, <argument pos:start="31:22" pos:end="31:33"><expr pos:start="31:22" pos:end="31:33"><name pos:start="31:22" pos:end="31:33">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="31:36" pos:end="31:61"><expr pos:start="31:36" pos:end="31:61"><literal type="string" pos:start="31:36" pos:end="31:61">"P Frame: QP=%i (+%i/2)\n"</literal></expr></argument>,

           <argument pos:start="33:12" pos:end="33:16"><expr pos:start="33:12" pos:end="33:16"><name pos:start="33:12" pos:end="33:16"><name pos:start="33:12" pos:end="33:12">v</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:16">pq</name></name></expr></argument>, <argument pos:start="33:19" pos:end="33:27"><expr pos:start="33:19" pos:end="33:27"><name pos:start="33:19" pos:end="33:27"><name pos:start="33:19" pos:end="33:19">v</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:27">halfpq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="38:0"><if pos:start="35:5" pos:end="38:0">if <condition pos:start="35:8" pos:end="35:28">(<expr pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:9">v</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:22">extended_mv</name></name> <operator pos:start="35:24" pos:end="35:25">==</operator> <literal type="number" pos:start="35:27" pos:end="35:27">1</literal></expr>)</condition><block type="pseudo" pos:start="35:30" pos:end="38:0"><block_content pos:start="35:30" pos:end="38:0"> <expr_stmt pos:start="35:30" pos:end="38:0"><expr pos:start="35:30" pos:end="35:66"><name pos:start="35:30" pos:end="35:39"><name pos:start="35:30" pos:end="35:30">v</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:39">mvrange</name></name> <operator pos:start="35:41" pos:end="35:41">=</operator> <call pos:start="35:43" pos:end="35:66"><name pos:start="35:43" pos:end="35:52">get_prefix</name><argument_list pos:start="35:53" pos:end="35:66">(<argument pos:start="35:54" pos:end="35:59"><expr pos:start="35:54" pos:end="35:59"><operator pos:start="35:54" pos:end="35:54">&amp;</operator><name pos:start="35:55" pos:end="35:59"><name pos:start="35:55" pos:end="35:55">v</name><operator pos:start="35:56" pos:end="35:57">-&gt;</operator><name pos:start="35:58" pos:end="35:59">gb</name></name></expr></argument>, <argument pos:start="35:62" pos:end="35:62"><expr pos:start="35:62" pos:end="35:62"><literal type="number" pos:start="35:62" pos:end="35:62">0</literal></expr></argument>, <argument pos:start="35:65" pos:end="35:65"><expr pos:start="35:65" pos:end="35:65"><literal type="number" pos:start="35:65" pos:end="35:65">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="37:1" pos:end="37:24">#<cpp:directive pos:start="37:2" pos:end="37:3">if</cpp:directive> <expr pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:24">HAS_ADVANCED_PROFILE</name></expr></cpp:if>

    <if_stmt pos:start="39:5" pos:end="51:57"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:34">(<expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:9">v</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:18">profile</name></name> <operator pos:start="39:20" pos:end="39:20">&gt;</operator> <name pos:start="39:22" pos:end="39:33">PROFILE_MAIN</name></expr>)</condition>

    <block pos:start="41:5" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:63">

        <if_stmt pos:start="43:9" pos:end="43:63"><if pos:start="43:9" pos:end="43:63">if <condition pos:start="43:12" pos:end="43:28">(<expr pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:13">v</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:27">postprocflag</name></name></expr>)</condition><block type="pseudo" pos:start="43:30" pos:end="43:63"><block_content pos:start="43:30" pos:end="43:63"> <expr_stmt pos:start="43:30" pos:end="43:63"><expr pos:start="43:30" pos:end="43:62"><name pos:start="43:30" pos:end="43:40"><name pos:start="43:30" pos:end="43:30">v</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:40">postproc</name></name> <operator pos:start="43:42" pos:end="43:42">=</operator> <call pos:start="43:44" pos:end="43:62"><name pos:start="43:44" pos:end="43:51">get_bits</name><argument_list pos:start="43:52" pos:end="43:62">(<argument pos:start="43:53" pos:end="43:58"><expr pos:start="43:53" pos:end="43:58"><operator pos:start="43:53" pos:end="43:53">&amp;</operator><name pos:start="43:54" pos:end="43:58"><name pos:start="43:54" pos:end="43:54">v</name><operator pos:start="43:55" pos:end="43:56">-&gt;</operator><name pos:start="43:57" pos:end="43:58">gb</name></name></expr></argument>, <argument pos:start="43:61" pos:end="43:61"><expr pos:start="43:61" pos:end="43:61"><literal type="number" pos:start="43:61" pos:end="43:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="47:5" pos:end="51:57">else

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

        if <condition pos:start="51:12" pos:end="51:24">(<expr pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:13">v</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:23">multires</name></name></expr>)</condition><block type="pseudo" pos:start="51:26" pos:end="51:57"><block_content pos:start="51:26" pos:end="51:57"> <expr_stmt pos:start="51:26" pos:end="51:57"><expr pos:start="51:26" pos:end="51:56"><name pos:start="51:26" pos:end="51:34"><name pos:start="51:26" pos:end="51:26">v</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:34">respic</name></name> <operator pos:start="51:36" pos:end="51:36">=</operator> <call pos:start="51:38" pos:end="51:56"><name pos:start="51:38" pos:end="51:45">get_bits</name><argument_list pos:start="51:46" pos:end="51:56">(<argument pos:start="51:47" pos:end="51:52"><expr pos:start="51:47" pos:end="51:52"><operator pos:start="51:47" pos:end="51:47">&amp;</operator><name pos:start="51:48" pos:end="51:52"><name pos:start="51:48" pos:end="51:48">v</name><operator pos:start="51:49" pos:end="51:50">-&gt;</operator><name pos:start="51:51" pos:end="51:52">gb</name></name></expr></argument>, <argument pos:start="51:55" pos:end="51:55"><expr pos:start="51:55" pos:end="51:55"><literal type="number" pos:start="51:55" pos:end="51:55">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:42"><expr pos:start="53:5" pos:end="53:41"><name pos:start="53:5" pos:end="53:12">lowquant</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <ternary pos:start="53:16" pos:end="53:41"><condition pos:start="53:16" pos:end="53:35"><expr pos:start="53:16" pos:end="53:33"><operator pos:start="53:16" pos:end="53:16">(</operator><name pos:start="53:17" pos:end="53:29"><name pos:start="53:17" pos:end="53:17">v</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:29">pquantizer</name></name><operator pos:start="53:30" pos:end="53:30">&gt;</operator><literal type="number" pos:start="53:31" pos:end="53:32">12</literal><operator pos:start="53:33" pos:end="53:33">)</operator></expr> ?</condition><then pos:start="53:37" pos:end="53:37"> <expr pos:start="53:37" pos:end="53:37"><literal type="number" pos:start="53:37" pos:end="53:37">0</literal></expr> </then><else pos:start="53:39" pos:end="53:41">: <expr pos:start="53:41" pos:end="53:41"><literal type="number" pos:start="53:41" pos:end="53:41">1</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:68"><expr pos:start="55:5" pos:end="55:67"><name pos:start="55:5" pos:end="55:14"><name pos:start="55:5" pos:end="55:5">v</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:14">mv_mode</name></name> <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:67"><name pos:start="55:18" pos:end="55:31">mv_pmode_table</name><index pos:start="55:32" pos:end="55:41">[<expr pos:start="55:33" pos:end="55:40"><name pos:start="55:33" pos:end="55:40">lowquant</name></expr>]</index><index pos:start="55:42" pos:end="55:67">[<expr pos:start="55:43" pos:end="55:66"><call pos:start="55:43" pos:end="55:66"><name pos:start="55:43" pos:end="55:52">get_prefix</name><argument_list pos:start="55:53" pos:end="55:66">(<argument pos:start="55:54" pos:end="55:59"><expr pos:start="55:54" pos:end="55:59"><operator pos:start="55:54" pos:end="55:54">&amp;</operator><name pos:start="55:55" pos:end="55:59"><name pos:start="55:55" pos:end="55:55">v</name><operator pos:start="55:56" pos:end="55:57">-&gt;</operator><name pos:start="55:58" pos:end="55:59">gb</name></name></expr></argument>, <argument pos:start="55:62" pos:end="55:62"><expr pos:start="55:62" pos:end="55:62"><literal type="number" pos:start="55:62" pos:end="55:62">1</literal></expr></argument>, <argument pos:start="55:65" pos:end="55:65"><expr pos:start="55:65" pos:end="55:65"><literal type="number" pos:start="55:65" pos:end="55:65">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="67:5"><if pos:start="57:5" pos:end="67:5">if <condition pos:start="57:8" pos:end="57:46">(<expr pos:start="57:9" pos:end="57:45"><name pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:9">v</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:18">mv_mode</name></name> <operator pos:start="57:20" pos:end="57:21">==</operator> <name pos:start="57:23" pos:end="57:45">MV_PMODE_INTENSITY_COMP</name></expr>)</condition>

    <block pos:start="59:5" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:42">

        <expr_stmt pos:start="61:9" pos:end="61:73"><expr pos:start="61:9" pos:end="61:72"><name pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:9">v</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:19">mv_mode2</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <name pos:start="61:23" pos:end="61:72"><name pos:start="61:23" pos:end="61:36">mv_pmode_table</name><index pos:start="61:37" pos:end="61:46">[<expr pos:start="61:38" pos:end="61:45"><name pos:start="61:38" pos:end="61:45">lowquant</name></expr>]</index><index pos:start="61:47" pos:end="61:72">[<expr pos:start="61:48" pos:end="61:71"><call pos:start="61:48" pos:end="61:71"><name pos:start="61:48" pos:end="61:57">get_prefix</name><argument_list pos:start="61:58" pos:end="61:71">(<argument pos:start="61:59" pos:end="61:64"><expr pos:start="61:59" pos:end="61:64"><operator pos:start="61:59" pos:end="61:59">&amp;</operator><name pos:start="61:60" pos:end="61:64"><name pos:start="61:60" pos:end="61:60">v</name><operator pos:start="61:61" pos:end="61:62">-&gt;</operator><name pos:start="61:63" pos:end="61:64">gb</name></name></expr></argument>, <argument pos:start="61:67" pos:end="61:67"><expr pos:start="61:67" pos:end="61:67"><literal type="number" pos:start="61:67" pos:end="61:67">1</literal></expr></argument>, <argument pos:start="61:70" pos:end="61:70"><expr pos:start="61:70" pos:end="61:70"><literal type="number" pos:start="61:70" pos:end="61:70">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:42"><expr pos:start="63:9" pos:end="63:41"><name pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:9">v</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:19">lumscale</name></name> <operator pos:start="63:21" pos:end="63:21">=</operator> <call pos:start="63:23" pos:end="63:41"><name pos:start="63:23" pos:end="63:30">get_bits</name><argument_list pos:start="63:31" pos:end="63:41">(<argument pos:start="63:32" pos:end="63:37"><expr pos:start="63:32" pos:end="63:37"><operator pos:start="63:32" pos:end="63:32">&amp;</operator><name pos:start="63:33" pos:end="63:37"><name pos:start="63:33" pos:end="63:33">v</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:37">gb</name></name></expr></argument>, <argument pos:start="63:40" pos:end="63:40"><expr pos:start="63:40" pos:end="63:40"><literal type="number" pos:start="63:40" pos:end="63:40">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:42"><expr pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:9">v</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:19">lumshift</name></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <call pos:start="65:23" pos:end="65:41"><name pos:start="65:23" pos:end="65:30">get_bits</name><argument_list pos:start="65:31" pos:end="65:41">(<argument pos:start="65:32" pos:end="65:37"><expr pos:start="65:32" pos:end="65:37"><operator pos:start="65:32" pos:end="65:32">&amp;</operator><name pos:start="65:33" pos:end="65:37"><name pos:start="65:33" pos:end="65:33">v</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:37">gb</name></name></expr></argument>, <argument pos:start="65:40" pos:end="65:40"><expr pos:start="65:40" pos:end="65:40"><literal type="number" pos:start="65:40" pos:end="65:40">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="85:5"><if pos:start="71:5" pos:end="85:5">if <condition pos:start="71:8" pos:end="75:43">(<expr pos:start="71:9" pos:end="75:42"><operator pos:start="71:9" pos:end="71:9">(</operator><name pos:start="71:10" pos:end="71:19"><name pos:start="71:10" pos:end="71:10">v</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:19">mv_mode</name></name> <operator pos:start="71:21" pos:end="71:22">==</operator> <name pos:start="71:24" pos:end="71:46">MV_PMODE_INTENSITY_COMP</name> <operator pos:start="71:48" pos:end="71:49">&amp;&amp;</operator>

         <name pos:start="73:10" pos:end="73:20"><name pos:start="73:10" pos:end="73:10">v</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:20">mv_mode2</name></name> <operator pos:start="73:22" pos:end="73:23">==</operator> <name pos:start="73:25" pos:end="73:41">MV_PMODE_MIXED_MV</name><operator pos:start="73:42" pos:end="73:42">)</operator>

        <operator pos:start="75:9" pos:end="75:10">||</operator> <name pos:start="75:12" pos:end="75:21"><name pos:start="75:12" pos:end="75:12">v</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:21">mv_mode</name></name> <operator pos:start="75:23" pos:end="75:24">==</operator> <name pos:start="75:26" pos:end="75:42">MV_PMODE_MIXED_MV</name></expr>)</condition>

    <block pos:start="77:5" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:22">

        <if_stmt pos:start="79:9" pos:end="83:22"><if pos:start="79:9" pos:end="83:22">if <condition pos:start="79:12" pos:end="81:55">(<expr pos:start="79:13" pos:end="81:54"><call pos:start="79:13" pos:end="81:50"><name pos:start="79:13" pos:end="79:29">bitplane_decoding</name><argument_list pos:start="79:30" pos:end="81:50">(<argument pos:start="79:31" pos:end="79:49"><expr pos:start="79:31" pos:end="79:49"><name pos:start="79:31" pos:end="79:49"><name pos:start="79:31" pos:end="79:31">v</name><operator pos:start="79:32" pos:end="79:33">-&gt;</operator><name pos:start="79:34" pos:end="79:49">mv_type_mb_plane</name></name></expr></argument>, <argument pos:start="79:52" pos:end="79:62"><expr pos:start="79:52" pos:end="79:62"><name pos:start="79:52" pos:end="79:62"><name pos:start="79:52" pos:end="79:52">v</name><operator pos:start="79:53" pos:end="79:54">-&gt;</operator><name pos:start="79:55" pos:end="79:62">width_mb</name></name></expr></argument>,

                                  <argument pos:start="81:35" pos:end="81:46"><expr pos:start="81:35" pos:end="81:46"><name pos:start="81:35" pos:end="81:46"><name pos:start="81:35" pos:end="81:35">v</name><operator pos:start="81:36" pos:end="81:37">-&gt;</operator><name pos:start="81:38" pos:end="81:46">height_mb</name></name></expr></argument>, <argument pos:start="81:49" pos:end="81:49"><expr pos:start="81:49" pos:end="81:49"><name pos:start="81:49" pos:end="81:49">v</name></expr></argument>)</argument_list></call> <operator pos:start="81:52" pos:end="81:52">&lt;</operator> <literal type="number" pos:start="81:54" pos:end="81:54">0</literal></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:22"><block_content pos:start="83:13" pos:end="83:22">

            <return pos:start="83:13" pos:end="83:22">return <expr pos:start="83:20" pos:end="83:21"><operator pos:start="83:20" pos:end="83:20">-</operator><literal type="number" pos:start="83:21" pos:end="83:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="93:18"><if pos:start="89:5" pos:end="93:18">if <condition pos:start="89:8" pos:end="91:51">(<expr pos:start="89:9" pos:end="91:50"><call pos:start="89:9" pos:end="91:46"><name pos:start="89:9" pos:end="89:25">bitplane_decoding</name><argument_list pos:start="89:26" pos:end="91:46">(<argument pos:start="89:27" pos:end="89:42"><expr pos:start="89:27" pos:end="89:42"><name pos:start="89:27" pos:end="89:42"><name pos:start="89:27" pos:end="89:27">v</name><operator pos:start="89:28" pos:end="89:29">-&gt;</operator><name pos:start="89:30" pos:end="89:42">skip_mb_plane</name></name></expr></argument>, <argument pos:start="89:45" pos:end="89:55"><expr pos:start="89:45" pos:end="89:55"><name pos:start="89:45" pos:end="89:55"><name pos:start="89:45" pos:end="89:45">v</name><operator pos:start="89:46" pos:end="89:47">-&gt;</operator><name pos:start="89:48" pos:end="89:55">width_mb</name></name></expr></argument>,

                              <argument pos:start="91:31" pos:end="91:42"><expr pos:start="91:31" pos:end="91:42"><name pos:start="91:31" pos:end="91:42"><name pos:start="91:31" pos:end="91:31">v</name><operator pos:start="91:32" pos:end="91:33">-&gt;</operator><name pos:start="91:34" pos:end="91:42">height_mb</name></name></expr></argument>, <argument pos:start="91:45" pos:end="91:45"><expr pos:start="91:45" pos:end="91:45"><name pos:start="91:45" pos:end="91:45">v</name></expr></argument>)</argument_list></call> <operator pos:start="91:48" pos:end="91:48">&lt;</operator> <literal type="number" pos:start="91:50" pos:end="91:50">0</literal></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:18"><block_content pos:start="93:9" pos:end="93:18">

        <return pos:start="93:9" pos:end="93:18">return <expr pos:start="93:16" pos:end="93:17"><operator pos:start="93:16" pos:end="93:16">-</operator><literal type="number" pos:start="93:17" pos:end="93:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:48">/* Hopefully this is correct for P frames */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:59"><expr pos:start="99:5" pos:end="99:58"><name pos:start="99:5" pos:end="99:18"><name pos:start="99:5" pos:end="99:5">v</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:18">mv_diff_vlc</name></name> <operator pos:start="99:20" pos:end="99:20">=</operator> <operator pos:start="99:22" pos:end="99:22">&amp;</operator><name pos:start="99:23" pos:end="99:58"><name pos:start="99:23" pos:end="99:37">vc9_mv_diff_vlc</name><index pos:start="99:38" pos:end="99:58">[<expr pos:start="99:39" pos:end="99:57"><call pos:start="99:39" pos:end="99:57"><name pos:start="99:39" pos:end="99:46">get_bits</name><argument_list pos:start="99:47" pos:end="99:57">(<argument pos:start="99:48" pos:end="99:53"><expr pos:start="99:48" pos:end="99:53"><operator pos:start="99:48" pos:end="99:48">&amp;</operator><name pos:start="99:49" pos:end="99:53"><name pos:start="99:49" pos:end="99:49">v</name><operator pos:start="99:50" pos:end="99:51">-&gt;</operator><name pos:start="99:52" pos:end="99:53">gb</name></name></expr></argument>, <argument pos:start="99:56" pos:end="99:56"><expr pos:start="99:56" pos:end="99:56"><literal type="number" pos:start="99:56" pos:end="99:56">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:57"><expr pos:start="101:5" pos:end="101:56"><name pos:start="101:5" pos:end="101:16"><name pos:start="101:5" pos:end="101:5">v</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:16">cbpcy_vlc</name></name> <operator pos:start="101:18" pos:end="101:18">=</operator> <operator pos:start="101:20" pos:end="101:20">&amp;</operator><name pos:start="101:21" pos:end="101:56"><name pos:start="101:21" pos:end="101:35">vc9_cbpcy_p_vlc</name><index pos:start="101:36" pos:end="101:56">[<expr pos:start="101:37" pos:end="101:55"><call pos:start="101:37" pos:end="101:55"><name pos:start="101:37" pos:end="101:44">get_bits</name><argument_list pos:start="101:45" pos:end="101:55">(<argument pos:start="101:46" pos:end="101:51"><expr pos:start="101:46" pos:end="101:51"><operator pos:start="101:46" pos:end="101:46">&amp;</operator><name pos:start="101:47" pos:end="101:51"><name pos:start="101:47" pos:end="101:47">v</name><operator pos:start="101:48" pos:end="101:49">-&gt;</operator><name pos:start="101:50" pos:end="101:51">gb</name></name></expr></argument>, <argument pos:start="101:54" pos:end="101:54"><expr pos:start="101:54" pos:end="101:54"><literal type="number" pos:start="101:54" pos:end="101:54">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="113:5">if <condition pos:start="105:8" pos:end="105:18">(<expr pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:9">v</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:17">dquant</name></name></expr>)</condition>

    <block pos:start="107:5" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:31">

        <expr_stmt pos:start="109:9" pos:end="109:59"><expr pos:start="109:9" pos:end="109:58"><call pos:start="109:9" pos:end="109:58"><name pos:start="109:9" pos:end="109:14">av_log</name><argument_list pos:start="109:15" pos:end="109:58">(<argument pos:start="109:16" pos:end="109:23"><expr pos:start="109:16" pos:end="109:23"><name pos:start="109:16" pos:end="109:23"><name pos:start="109:16" pos:end="109:16">v</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:23">avctx</name></name></expr></argument>, <argument pos:start="109:26" pos:end="109:36"><expr pos:start="109:26" pos:end="109:36"><name pos:start="109:26" pos:end="109:36">AV_LOG_INFO</name></expr></argument>, <argument pos:start="109:39" pos:end="109:57"><expr pos:start="109:39" pos:end="109:57"><literal type="string" pos:start="109:39" pos:end="109:57">"VOP DQuant info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:31"><expr pos:start="111:9" pos:end="111:30"><call pos:start="111:9" pos:end="111:30"><name pos:start="111:9" pos:end="111:27">vop_dquant_decoding</name><argument_list pos:start="111:28" pos:end="111:30">(<argument pos:start="111:29" pos:end="111:29"><expr pos:start="111:29" pos:end="111:29"><name pos:start="111:29" pos:end="111:29">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="117:5" pos:end="135:5"><if pos:start="117:5" pos:end="135:5">if <condition pos:start="117:8" pos:end="117:23">(<expr pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:9">v</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:22">vstransform</name></name></expr>)</condition>

    <block pos:start="119:5" pos:end="135:5">{<block_content pos:start="121:9" pos:end="133:9">

        <expr_stmt pos:start="121:9" pos:end="121:39"><expr pos:start="121:9" pos:end="121:38"><name pos:start="121:9" pos:end="121:16"><name pos:start="121:9" pos:end="121:9">v</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:16">ttmbf</name></name> <operator pos:start="121:18" pos:end="121:18">=</operator> <call pos:start="121:20" pos:end="121:38"><name pos:start="121:20" pos:end="121:27">get_bits</name><argument_list pos:start="121:28" pos:end="121:38">(<argument pos:start="121:29" pos:end="121:34"><expr pos:start="121:29" pos:end="121:34"><operator pos:start="121:29" pos:end="121:29">&amp;</operator><name pos:start="121:30" pos:end="121:34"><name pos:start="121:30" pos:end="121:30">v</name><operator pos:start="121:31" pos:end="121:32">-&gt;</operator><name pos:start="121:33" pos:end="121:34">gb</name></name></expr></argument>, <argument pos:start="121:37" pos:end="121:37"><expr pos:start="121:37" pos:end="121:37"><literal type="number" pos:start="121:37" pos:end="121:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="133:9"><if pos:start="123:9" pos:end="133:9">if <condition pos:start="123:12" pos:end="123:21">(<expr pos:start="123:13" pos:end="123:20"><name pos:start="123:13" pos:end="123:20"><name pos:start="123:13" pos:end="123:13">v</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:20">ttmbf</name></name></expr>)</condition>

        <block pos:start="125:9" pos:end="133:9">{<block_content pos:start="127:13" pos:end="131:67">

            <expr_stmt pos:start="127:13" pos:end="127:43"><expr pos:start="127:13" pos:end="127:42"><name pos:start="127:13" pos:end="127:20"><name pos:start="127:13" pos:end="127:13">v</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:20">ttfrm</name></name> <operator pos:start="127:22" pos:end="127:22">=</operator> <call pos:start="127:24" pos:end="127:42"><name pos:start="127:24" pos:end="127:31">get_bits</name><argument_list pos:start="127:32" pos:end="127:42">(<argument pos:start="127:33" pos:end="127:38"><expr pos:start="127:33" pos:end="127:38"><operator pos:start="127:33" pos:end="127:33">&amp;</operator><name pos:start="127:34" pos:end="127:38"><name pos:start="127:34" pos:end="127:34">v</name><operator pos:start="127:35" pos:end="127:36">-&gt;</operator><name pos:start="127:37" pos:end="127:38">gb</name></name></expr></argument>, <argument pos:start="127:41" pos:end="127:41"><expr pos:start="127:41" pos:end="127:41"><literal type="number" pos:start="127:41" pos:end="127:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="131:67"><expr pos:start="129:13" pos:end="131:66"><call pos:start="129:13" pos:end="131:66"><name pos:start="129:13" pos:end="129:18">av_log</name><argument_list pos:start="129:19" pos:end="131:66">(<argument pos:start="129:20" pos:end="129:27"><expr pos:start="129:20" pos:end="129:27"><name pos:start="129:20" pos:end="129:27"><name pos:start="129:20" pos:end="129:20">v</name><operator pos:start="129:21" pos:end="129:22">-&gt;</operator><name pos:start="129:23" pos:end="129:27">avctx</name></name></expr></argument>, <argument pos:start="129:30" pos:end="129:40"><expr pos:start="129:30" pos:end="129:40"><name pos:start="129:30" pos:end="129:40">AV_LOG_INFO</name></expr></argument>, <argument pos:start="129:43" pos:end="129:67"><expr pos:start="129:43" pos:end="129:67"><literal type="string" pos:start="129:43" pos:end="129:67">"Transform used: %ix%i\n"</literal></expr></argument>,

                   <argument pos:start="131:20" pos:end="131:41"><expr pos:start="131:20" pos:end="131:41"><ternary pos:start="131:20" pos:end="131:41"><condition pos:start="131:20" pos:end="131:35"><expr pos:start="131:20" pos:end="131:33"><operator pos:start="131:20" pos:end="131:20">(</operator><name pos:start="131:21" pos:end="131:28"><name pos:start="131:21" pos:end="131:21">v</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:28">ttfrm</name></name> <operator pos:start="131:30" pos:end="131:30">&amp;</operator> <literal type="number" pos:start="131:32" pos:end="131:32">2</literal><operator pos:start="131:33" pos:end="131:33">)</operator></expr> ?</condition><then pos:start="131:37" pos:end="131:37"> <expr pos:start="131:37" pos:end="131:37"><literal type="number" pos:start="131:37" pos:end="131:37">4</literal></expr> </then><else pos:start="131:39" pos:end="131:41">: <expr pos:start="131:41" pos:end="131:41"><literal type="number" pos:start="131:41" pos:end="131:41">8</literal></expr></else></ternary></expr></argument>, <argument pos:start="131:44" pos:end="131:65"><expr pos:start="131:44" pos:end="131:65"><ternary pos:start="131:44" pos:end="131:65"><condition pos:start="131:44" pos:end="131:59"><expr pos:start="131:44" pos:end="131:57"><operator pos:start="131:44" pos:end="131:44">(</operator><name pos:start="131:45" pos:end="131:52"><name pos:start="131:45" pos:end="131:45">v</name><operator pos:start="131:46" pos:end="131:47">-&gt;</operator><name pos:start="131:48" pos:end="131:52">ttfrm</name></name> <operator pos:start="131:54" pos:end="131:54">&amp;</operator> <literal type="number" pos:start="131:56" pos:end="131:56">1</literal><operator pos:start="131:57" pos:end="131:57">)</operator></expr> ?</condition><then pos:start="131:61" pos:end="131:61"> <expr pos:start="131:61" pos:end="131:61"><literal type="number" pos:start="131:61" pos:end="131:61">4</literal></expr> </then><else pos:start="131:63" pos:end="131:65">: <expr pos:start="131:65" pos:end="131:65"><literal type="number" pos:start="131:65" pos:end="131:65">8</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="137:5" pos:end="137:41">/* Epilog should be done in caller */</comment>

    <return pos:start="139:5" pos:end="139:13">return <expr pos:start="139:12" pos:end="139:12"><literal type="number" pos:start="139:12" pos:end="139:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
