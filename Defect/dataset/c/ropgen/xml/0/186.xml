<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/186.c" pos:tabs="8"><function pos:start="1:1" pos:end="405:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:7">av_cold</name> <name pos:start="1:9" pos:end="1:11">int</name></type> <name pos:start="1:13" pos:end="1:32">ff_rate_control_init</name><parameter_list pos:start="1:33" pos:end="1:51">(<parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:47">MpegEncContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="405:1">{<block_content pos:start="5:5" pos:end="403:13">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22">RateControlContext</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:27">rcc</name> <init pos:start="5:29" pos:end="5:44">= <expr pos:start="5:31" pos:end="5:44"><operator pos:start="5:31" pos:end="5:31">&amp;</operator><name pos:start="5:32" pos:end="5:44"><name pos:start="5:32" pos:end="5:32">s</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:44">rc_context</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:14">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="65:6"><decl pos:start="9:5" pos:end="65:5"><type pos:start="9:5" pos:end="9:29"><specifier pos:start="9:5" pos:end="9:10">static</specifier> <specifier pos:start="9:12" pos:end="9:16">const</specifier> <name pos:start="9:18" pos:end="9:21">char</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier> <specifier pos:start="9:25" pos:end="9:29">const</specifier></type> <name pos:start="9:31" pos:end="9:43"><name pos:start="9:31" pos:end="9:41">const_names</name><index pos:start="9:42" pos:end="9:43">[]</index></name> <init pos:start="9:45" pos:end="65:5">= <expr pos:start="9:47" pos:end="65:5"><block pos:start="9:47" pos:end="65:5">{

        <expr pos:start="11:9" pos:end="11:12"><literal type="string" pos:start="11:9" pos:end="11:12">"PI"</literal></expr>,

        <expr pos:start="13:9" pos:end="13:11"><literal type="string" pos:start="13:9" pos:end="13:11">"E"</literal></expr>,

        <expr pos:start="15:9" pos:end="15:14"><literal type="string" pos:start="15:9" pos:end="15:14">"iTex"</literal></expr>,

        <expr pos:start="17:9" pos:end="17:14"><literal type="string" pos:start="17:9" pos:end="17:14">"pTex"</literal></expr>,

        <expr pos:start="19:9" pos:end="19:13"><literal type="string" pos:start="19:9" pos:end="19:13">"tex"</literal></expr>,

        <expr pos:start="21:9" pos:end="21:12"><literal type="string" pos:start="21:9" pos:end="21:12">"mv"</literal></expr>,

        <expr pos:start="23:9" pos:end="23:15"><literal type="string" pos:start="23:9" pos:end="23:15">"fCode"</literal></expr>,

        <expr pos:start="25:9" pos:end="25:16"><literal type="string" pos:start="25:9" pos:end="25:16">"iCount"</literal></expr>,

        <expr pos:start="27:9" pos:end="27:15"><literal type="string" pos:start="27:9" pos:end="27:15">"mcVar"</literal></expr>,

        <expr pos:start="29:9" pos:end="29:13"><literal type="string" pos:start="29:9" pos:end="29:13">"var"</literal></expr>,

        <expr pos:start="31:9" pos:end="31:13"><literal type="string" pos:start="31:9" pos:end="31:13">"isI"</literal></expr>,

        <expr pos:start="33:9" pos:end="33:13"><literal type="string" pos:start="33:9" pos:end="33:13">"isP"</literal></expr>,

        <expr pos:start="35:9" pos:end="35:13"><literal type="string" pos:start="35:9" pos:end="35:13">"isB"</literal></expr>,

        <expr pos:start="37:9" pos:end="37:15"><literal type="string" pos:start="37:9" pos:end="37:15">"avgQP"</literal></expr>,

        <expr pos:start="39:9" pos:end="39:15"><literal type="string" pos:start="39:9" pos:end="39:15">"qComp"</literal></expr>,

<cpp:if pos:start="41:1" pos:end="41:5">#<cpp:directive pos:start="41:2" pos:end="41:3">if</cpp:directive> <expr pos:start="41:5" pos:end="41:5"><literal type="number" pos:start="41:5" pos:end="41:5">0</literal></expr></cpp:if>

        "lastIQP",

        "lastPQP",

        "lastBQP",

        "nextNonBQP",

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

        <expr pos:start="53:9" pos:end="53:18"><literal type="string" pos:start="53:9" pos:end="53:18">"avgIITex"</literal></expr>,

        <expr pos:start="55:9" pos:end="55:18"><literal type="string" pos:start="55:9" pos:end="55:18">"avgPITex"</literal></expr>,

        <expr pos:start="57:9" pos:end="57:18"><literal type="string" pos:start="57:9" pos:end="57:18">"avgPPTex"</literal></expr>,

        <expr pos:start="59:9" pos:end="59:18"><literal type="string" pos:start="59:9" pos:end="59:18">"avgBPTex"</literal></expr>,

        <expr pos:start="61:9" pos:end="61:16"><literal type="string" pos:start="61:9" pos:end="61:16">"avgTex"</literal></expr>,

        <expr pos:start="63:9" pos:end="63:12"><name pos:start="63:9" pos:end="63:12">NULL</name></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="67:5" pos:end="75:6"><expr pos:start="67:5" pos:end="75:5"><specifier pos:start="67:5" pos:end="67:10">static</specifier> <call pos:start="67:12" pos:end="67:51"><call pos:start="67:12" pos:end="67:35"><name pos:start="67:12" pos:end="67:17">double</name> <argument_list pos:start="67:19" pos:end="67:35">(<argument pos:start="67:20" pos:end="67:34"><expr pos:start="67:20" pos:end="67:34"><operator pos:start="67:20" pos:end="67:20">*</operator> <specifier pos:start="67:22" pos:end="67:26">const</specifier> <name pos:start="67:28" pos:end="67:34"><name pos:start="67:28" pos:end="67:32">func1</name><index pos:start="67:33" pos:end="67:34">[]</index></name></expr></argument>)</argument_list></call><argument_list pos:start="67:36" pos:end="67:51">(<argument pos:start="67:37" pos:end="67:42"><expr pos:start="67:37" pos:end="67:42"><name pos:start="67:37" pos:end="67:40">void</name> <operator pos:start="67:42" pos:end="67:42">*</operator></expr></argument>, <argument pos:start="67:45" pos:end="67:50"><expr pos:start="67:45" pos:end="67:50"><name pos:start="67:45" pos:end="67:50">double</name></expr></argument>)</argument_list></call> <operator pos:start="67:53" pos:end="67:53">=</operator> <block pos:start="67:55" pos:end="75:5">{

        <expr pos:start="69:9" pos:end="69:23"><operator pos:start="69:9" pos:end="69:9">(</operator><name pos:start="69:10" pos:end="69:13">void</name> <operator pos:start="69:15" pos:end="69:15">*</operator><operator pos:start="69:16" pos:end="69:16">)</operator><name pos:start="69:17" pos:end="69:23">bits2qp</name></expr>,

        <expr pos:start="71:9" pos:end="71:23"><operator pos:start="71:9" pos:end="71:9">(</operator><name pos:start="71:10" pos:end="71:13">void</name> <operator pos:start="71:15" pos:end="71:15">*</operator><operator pos:start="71:16" pos:end="71:16">)</operator><name pos:start="71:17" pos:end="71:23">qp2bits</name></expr>,

        <expr pos:start="73:9" pos:end="73:12"><name pos:start="73:9" pos:end="73:12">NULL</name></expr>

    }</block></expr>;</expr_stmt>

    <decl_stmt pos:start="77:5" pos:end="85:6"><decl pos:start="77:5" pos:end="85:5"><type pos:start="77:5" pos:end="77:29"><specifier pos:start="77:5" pos:end="77:10">static</specifier> <specifier pos:start="77:12" pos:end="77:16">const</specifier> <name pos:start="77:18" pos:end="77:21">char</name> <modifier pos:start="77:23" pos:end="77:23">*</modifier> <specifier pos:start="77:25" pos:end="77:29">const</specifier></type> <name pos:start="77:31" pos:end="77:43"><name pos:start="77:31" pos:end="77:41">func1_names</name><index pos:start="77:42" pos:end="77:43">[]</index></name> <init pos:start="77:45" pos:end="85:5">= <expr pos:start="77:47" pos:end="85:5"><block pos:start="77:47" pos:end="85:5">{

        <expr pos:start="79:9" pos:end="79:17"><literal type="string" pos:start="79:9" pos:end="79:17">"bits2qp"</literal></expr>,

        <expr pos:start="81:9" pos:end="81:17"><literal type="string" pos:start="81:9" pos:end="81:17">"qp2bits"</literal></expr>,

        <expr pos:start="83:9" pos:end="83:12"><name pos:start="83:9" pos:end="83:12">NULL</name></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:13"><expr pos:start="87:5" pos:end="87:12"><call pos:start="87:5" pos:end="87:12"><name pos:start="87:5" pos:end="87:10">emms_c</name><argument_list pos:start="87:11" pos:end="87:12">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="97:49"><expr pos:start="91:5" pos:end="97:48"><name pos:start="91:5" pos:end="91:7">res</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="97:48"><name pos:start="91:11" pos:end="91:23">av_expr_parse</name><argument_list pos:start="91:24" pos:end="97:48">(<argument pos:start="91:25" pos:end="91:40"><expr pos:start="91:25" pos:end="91:40"><operator pos:start="91:25" pos:end="91:25">&amp;</operator><name pos:start="91:26" pos:end="91:40"><name pos:start="91:26" pos:end="91:28">rcc</name><operator pos:start="91:29" pos:end="91:30">-&gt;</operator><name pos:start="91:31" pos:end="91:40">rc_eq_eval</name></name></expr></argument>,

                        <argument pos:start="93:25" pos:end="93:57"><expr pos:start="93:25" pos:end="93:57"><ternary pos:start="93:25" pos:end="93:57"><condition pos:start="93:25" pos:end="93:34"><expr pos:start="93:25" pos:end="93:32"><name pos:start="93:25" pos:end="93:32"><name pos:start="93:25" pos:end="93:25">s</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:32">rc_eq</name></name></expr> ?</condition><then pos:start="93:36" pos:end="93:43"> <expr pos:start="93:36" pos:end="93:43"><name pos:start="93:36" pos:end="93:43"><name pos:start="93:36" pos:end="93:36">s</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:43">rc_eq</name></name></expr> </then><else pos:start="93:45" pos:end="93:57">: <expr pos:start="93:47" pos:end="93:57"><literal type="string" pos:start="93:47" pos:end="93:57">"tex^qComp"</literal></expr></else></ternary></expr></argument>,

                        <argument pos:start="95:25" pos:end="95:35"><expr pos:start="95:25" pos:end="95:35"><name pos:start="95:25" pos:end="95:35">const_names</name></expr></argument>, <argument pos:start="95:38" pos:end="95:48"><expr pos:start="95:38" pos:end="95:48"><name pos:start="95:38" pos:end="95:48">func1_names</name></expr></argument>, <argument pos:start="95:51" pos:end="95:55"><expr pos:start="95:51" pos:end="95:55"><name pos:start="95:51" pos:end="95:55">func1</name></expr></argument>,

                        <argument pos:start="97:25" pos:end="97:28"><expr pos:start="97:25" pos:end="97:28"><name pos:start="97:25" pos:end="97:28">NULL</name></expr></argument>, <argument pos:start="97:31" pos:end="97:34"><expr pos:start="97:31" pos:end="97:34"><name pos:start="97:31" pos:end="97:34">NULL</name></expr></argument>, <argument pos:start="97:37" pos:end="97:37"><expr pos:start="97:37" pos:end="97:37"><literal type="number" pos:start="97:37" pos:end="97:37">0</literal></expr></argument>, <argument pos:start="97:40" pos:end="97:47"><expr pos:start="97:40" pos:end="97:47"><name pos:start="97:40" pos:end="97:47"><name pos:start="97:40" pos:end="97:40">s</name><operator pos:start="97:41" pos:end="97:42">-&gt;</operator><name pos:start="97:43" pos:end="97:47">avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:16">(<expr pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:11">res</name> <operator pos:start="99:13" pos:end="99:13">&lt;</operator> <literal type="number" pos:start="99:15" pos:end="99:15">0</literal></expr>)</condition> <block pos:start="99:18" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:19">

        <expr_stmt pos:start="101:9" pos:end="101:81"><expr pos:start="101:9" pos:end="101:80"><call pos:start="101:9" pos:end="101:80"><name pos:start="101:9" pos:end="101:14">av_log</name><argument_list pos:start="101:15" pos:end="101:80">(<argument pos:start="101:16" pos:end="101:23"><expr pos:start="101:16" pos:end="101:23"><name pos:start="101:16" pos:end="101:23"><name pos:start="101:16" pos:end="101:16">s</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:23">avctx</name></name></expr></argument>, <argument pos:start="101:26" pos:end="101:37"><expr pos:start="101:26" pos:end="101:37"><name pos:start="101:26" pos:end="101:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:40" pos:end="101:69"><expr pos:start="101:40" pos:end="101:69"><literal type="string" pos:start="101:40" pos:end="101:69">"Error parsing rc_eq \"%s\"\n"</literal></expr></argument>, <argument pos:start="101:72" pos:end="101:79"><expr pos:start="101:72" pos:end="101:79"><name pos:start="101:72" pos:end="101:79"><name pos:start="101:72" pos:end="101:72">s</name><operator pos:start="101:73" pos:end="101:74">-&gt;</operator><name pos:start="101:75" pos:end="101:79">rc_eq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:19">return <expr pos:start="103:16" pos:end="103:18"><name pos:start="103:16" pos:end="103:18">res</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="109:5" pos:end="133:5">for <control pos:start="109:9" pos:end="109:27">(<init pos:start="109:10" pos:end="109:15"><expr pos:start="109:10" pos:end="109:14"><name pos:start="109:10" pos:end="109:10">i</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <literal type="number" pos:start="109:14" pos:end="109:14">0</literal></expr>;</init> <condition pos:start="109:17" pos:end="109:22"><expr pos:start="109:17" pos:end="109:21"><name pos:start="109:17" pos:end="109:17">i</name> <operator pos:start="109:19" pos:end="109:19">&lt;</operator> <literal type="number" pos:start="109:21" pos:end="109:21">5</literal></expr>;</condition> <incr pos:start="109:24" pos:end="109:26"><expr pos:start="109:24" pos:end="109:26"><name pos:start="109:24" pos:end="109:24">i</name><operator pos:start="109:25" pos:end="109:26">++</operator></expr></incr>)</control> <block pos:start="109:29" pos:end="133:5">{<block_content pos:start="111:9" pos:end="131:51">

        <expr_stmt pos:start="111:9" pos:end="111:48"><expr pos:start="111:9" pos:end="111:47"><name pos:start="111:9" pos:end="111:20"><name pos:start="111:9" pos:end="111:11">rcc</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:17">pred</name><index pos:start="111:18" pos:end="111:20">[<expr pos:start="111:19" pos:end="111:19"><name pos:start="111:19" pos:end="111:19">i</name></expr>]</index></name><operator pos:start="111:21" pos:end="111:21">.</operator><name pos:start="111:22" pos:end="111:26">coeff</name> <operator pos:start="111:28" pos:end="111:28">=</operator> <name pos:start="111:30" pos:end="111:41">FF_QP2LAMBDA</name> <operator pos:start="111:43" pos:end="111:43">*</operator> <literal type="number" pos:start="111:45" pos:end="111:47">7.0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:33"><expr pos:start="113:9" pos:end="113:32"><name pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:11">rcc</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:17">pred</name><index pos:start="113:18" pos:end="113:20">[<expr pos:start="113:19" pos:end="113:19"><name pos:start="113:19" pos:end="113:19">i</name></expr>]</index></name><operator pos:start="113:21" pos:end="113:21">.</operator><name pos:start="113:22" pos:end="113:26">count</name> <operator pos:start="113:28" pos:end="113:28">=</operator> <literal type="number" pos:start="113:30" pos:end="113:32">1.0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:33"><expr pos:start="115:9" pos:end="115:32"><name pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:11">rcc</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:17">pred</name><index pos:start="115:18" pos:end="115:20">[<expr pos:start="115:19" pos:end="115:19"><name pos:start="115:19" pos:end="115:19">i</name></expr>]</index></name><operator pos:start="115:21" pos:end="115:21">.</operator><name pos:start="115:22" pos:end="115:26">decay</name> <operator pos:start="115:28" pos:end="115:28">=</operator> <literal type="number" pos:start="115:30" pos:end="115:32">0.4</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="119:9" pos:end="127:32"><expr pos:start="119:9" pos:end="127:31"><name pos:start="119:9" pos:end="119:27"><name pos:start="119:9" pos:end="119:11">rcc</name><operator pos:start="119:12" pos:end="119:13">-&gt;</operator><name pos:start="119:14" pos:end="119:23">i_cplx_sum</name> <index pos:start="119:25" pos:end="119:27">[<expr pos:start="119:26" pos:end="119:26"><name pos:start="119:26" pos:end="119:26">i</name></expr>]</index></name> <operator pos:start="119:29" pos:end="119:29">=</operator>

        <name pos:start="121:9" pos:end="121:27"><name pos:start="121:9" pos:end="121:11">rcc</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:23">p_cplx_sum</name> <index pos:start="121:25" pos:end="121:27">[<expr pos:start="121:26" pos:end="121:26"><name pos:start="121:26" pos:end="121:26">i</name></expr>]</index></name> <operator pos:start="121:29" pos:end="121:29">=</operator>

        <name pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:11">rcc</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:24">mv_bits_sum</name><index pos:start="123:25" pos:end="123:27">[<expr pos:start="123:26" pos:end="123:26"><name pos:start="123:26" pos:end="123:26">i</name></expr>]</index></name> <operator pos:start="123:29" pos:end="123:29">=</operator>

        <name pos:start="125:9" pos:end="125:27"><name pos:start="125:9" pos:end="125:11">rcc</name><operator pos:start="125:12" pos:end="125:13">-&gt;</operator><name pos:start="125:14" pos:end="125:23">qscale_sum</name> <index pos:start="125:25" pos:end="125:27">[<expr pos:start="125:26" pos:end="125:26"><name pos:start="125:26" pos:end="125:26">i</name></expr>]</index></name> <operator pos:start="125:29" pos:end="125:29">=</operator>

        <name pos:start="127:9" pos:end="127:27"><name pos:start="127:9" pos:end="127:11">rcc</name><operator pos:start="127:12" pos:end="127:13">-&gt;</operator><name pos:start="127:14" pos:end="127:24">frame_count</name><index pos:start="127:25" pos:end="127:27">[<expr pos:start="127:26" pos:end="127:26"><name pos:start="127:26" pos:end="127:26">i</name></expr>]</index></name> <operator pos:start="127:29" pos:end="127:29">=</operator> <literal type="number" pos:start="127:31" pos:end="127:31">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="127:34" pos:end="127:71">// 1 is better because of 1/0 and such</comment>



        <expr_stmt pos:start="131:9" pos:end="131:51"><expr pos:start="131:9" pos:end="131:50"><name pos:start="131:9" pos:end="131:31"><name pos:start="131:9" pos:end="131:11">rcc</name><operator pos:start="131:12" pos:end="131:13">-&gt;</operator><name pos:start="131:14" pos:end="131:28">last_qscale_for</name><index pos:start="131:29" pos:end="131:31">[<expr pos:start="131:30" pos:end="131:30"><name pos:start="131:30" pos:end="131:30">i</name></expr>]</index></name> <operator pos:start="131:33" pos:end="131:33">=</operator> <name pos:start="131:35" pos:end="131:46">FF_QP2LAMBDA</name> <operator pos:start="131:48" pos:end="131:48">*</operator> <literal type="number" pos:start="131:50" pos:end="131:50">5</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="135:5" pos:end="135:62"><expr pos:start="135:5" pos:end="135:61"><name pos:start="135:5" pos:end="135:21"><name pos:start="135:5" pos:end="135:7">rcc</name><operator pos:start="135:8" pos:end="135:9">-&gt;</operator><name pos:start="135:10" pos:end="135:21">buffer_index</name></name> <operator pos:start="135:23" pos:end="135:23">=</operator> <name pos:start="135:25" pos:end="135:61"><name pos:start="135:25" pos:end="135:25">s</name><operator pos:start="135:26" pos:end="135:27">-&gt;</operator><name pos:start="135:28" pos:end="135:32">avctx</name><operator pos:start="135:33" pos:end="135:34">-&gt;</operator><name pos:start="135:35" pos:end="135:61">rc_initial_buffer_occupancy</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="285:5"><if pos:start="139:5" pos:end="285:5">if <condition pos:start="139:8" pos:end="139:43">(<expr pos:start="139:9" pos:end="139:42"><name pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:16">avctx</name><operator pos:start="139:17" pos:end="139:18">-&gt;</operator><name pos:start="139:19" pos:end="139:23">flags</name></name> <operator pos:start="139:25" pos:end="139:25">&amp;</operator> <name pos:start="139:27" pos:end="139:42">CODEC_FLAG_PASS2</name></expr>)</condition> <block pos:start="139:45" pos:end="285:5">{<block_content pos:start="141:9" pos:end="283:9">

        <decl_stmt pos:start="141:9" pos:end="141:14"><decl pos:start="141:9" pos:end="141:13"><type pos:start="141:9" pos:end="141:11"><name pos:start="141:9" pos:end="141:11">int</name></type> <name pos:start="141:13" pos:end="141:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="143:9" pos:end="143:16"><decl pos:start="143:9" pos:end="143:15"><type pos:start="143:9" pos:end="143:14"><name pos:start="143:9" pos:end="143:12">char</name> <modifier pos:start="143:14" pos:end="143:14">*</modifier></type><name pos:start="143:15" pos:end="143:15">p</name></decl>;</decl_stmt>



        <comment type="block" pos:start="147:9" pos:end="147:33">/* find number of pics */</comment>

        <expr_stmt pos:start="149:9" pos:end="149:31"><expr pos:start="149:9" pos:end="149:30"><name pos:start="149:9" pos:end="149:9">p</name> <operator pos:start="149:11" pos:end="149:11">=</operator> <name pos:start="149:13" pos:end="149:30"><name pos:start="149:13" pos:end="149:13">s</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:20">avctx</name><operator pos:start="149:21" pos:end="149:22">-&gt;</operator><name pos:start="149:23" pos:end="149:30">stats_in</name></name></expr>;</expr_stmt>

        <for pos:start="151:9" pos:end="153:35">for <control pos:start="151:13" pos:end="151:28">(<init pos:start="151:14" pos:end="151:20"><expr pos:start="151:14" pos:end="151:19"><name pos:start="151:14" pos:end="151:14">i</name> <operator pos:start="151:16" pos:end="151:16">=</operator> <operator pos:start="151:18" pos:end="151:18">-</operator><literal type="number" pos:start="151:19" pos:end="151:19">1</literal></expr>;</init> <condition pos:start="151:22" pos:end="151:23"><expr pos:start="151:22" pos:end="151:22"><name pos:start="151:22" pos:end="151:22">p</name></expr>;</condition> <incr pos:start="151:25" pos:end="151:27"><expr pos:start="151:25" pos:end="151:27"><name pos:start="151:25" pos:end="151:25">i</name><operator pos:start="151:26" pos:end="151:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="153:13" pos:end="153:35"><block_content pos:start="153:13" pos:end="153:35">

            <expr_stmt pos:start="153:13" pos:end="153:35"><expr pos:start="153:13" pos:end="153:34"><name pos:start="153:13" pos:end="153:13">p</name> <operator pos:start="153:15" pos:end="153:15">=</operator> <call pos:start="153:17" pos:end="153:34"><name pos:start="153:17" pos:end="153:22">strchr</name><argument_list pos:start="153:23" pos:end="153:34">(<argument pos:start="153:24" pos:end="153:28"><expr pos:start="153:24" pos:end="153:28"><name pos:start="153:24" pos:end="153:24">p</name> <operator pos:start="153:26" pos:end="153:26">+</operator> <literal type="number" pos:start="153:28" pos:end="153:28">1</literal></expr></argument>, <argument pos:start="153:31" pos:end="153:33"><expr pos:start="153:31" pos:end="153:33"><literal type="char" pos:start="153:31" pos:end="153:33">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="155:9" pos:end="155:29"><expr pos:start="155:9" pos:end="155:28"><name pos:start="155:9" pos:end="155:9">i</name> <operator pos:start="155:11" pos:end="155:12">+=</operator> <name pos:start="155:14" pos:end="155:28"><name pos:start="155:14" pos:end="155:14">s</name><operator pos:start="155:15" pos:end="155:16">-&gt;</operator><name pos:start="155:17" pos:end="155:28">max_b_frames</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="159:22"><if pos:start="157:9" pos:end="159:22">if <condition pos:start="157:12" pos:end="157:62">(<expr pos:start="157:13" pos:end="157:61"><name pos:start="157:13" pos:end="157:13">i</name> <operator pos:start="157:15" pos:end="157:16">&lt;=</operator> <literal type="number" pos:start="157:18" pos:end="157:18">0</literal> <operator pos:start="157:20" pos:end="157:21">||</operator> <name pos:start="157:23" pos:end="157:23">i</name> <operator pos:start="157:25" pos:end="157:26">&gt;=</operator> <name pos:start="157:28" pos:end="157:34">INT_MAX</name> <operator pos:start="157:36" pos:end="157:36">/</operator> <sizeof pos:start="157:38" pos:end="157:61">sizeof<argument_list pos:start="157:44" pos:end="157:61">(<argument pos:start="157:45" pos:end="157:60"><expr pos:start="157:45" pos:end="157:60"><name pos:start="157:45" pos:end="157:60">RateControlEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:22"><block_content pos:start="159:13" pos:end="159:22">

            <return pos:start="159:13" pos:end="159:22">return <expr pos:start="159:20" pos:end="159:21"><operator pos:start="159:20" pos:end="159:20">-</operator><literal type="number" pos:start="159:21" pos:end="159:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:68"><expr pos:start="161:9" pos:end="161:67"><name pos:start="161:9" pos:end="161:18"><name pos:start="161:9" pos:end="161:11">rcc</name><operator pos:start="161:12" pos:end="161:13">-&gt;</operator><name pos:start="161:14" pos:end="161:18">entry</name></name>       <operator pos:start="161:26" pos:end="161:26">=</operator> <call pos:start="161:28" pos:end="161:67"><name pos:start="161:28" pos:end="161:37">av_mallocz</name><argument_list pos:start="161:38" pos:end="161:67">(<argument pos:start="161:39" pos:end="161:66"><expr pos:start="161:39" pos:end="161:66"><name pos:start="161:39" pos:end="161:39">i</name> <operator pos:start="161:41" pos:end="161:41">*</operator> <sizeof pos:start="161:43" pos:end="161:66">sizeof<argument_list pos:start="161:49" pos:end="161:66">(<argument pos:start="161:50" pos:end="161:65"><expr pos:start="161:50" pos:end="161:65"><name pos:start="161:50" pos:end="161:65">RateControlEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:29"><expr pos:start="163:9" pos:end="163:28"><name pos:start="163:9" pos:end="163:24"><name pos:start="163:9" pos:end="163:11">rcc</name><operator pos:start="163:12" pos:end="163:13">-&gt;</operator><name pos:start="163:14" pos:end="163:24">num_entries</name></name> <operator pos:start="163:26" pos:end="163:26">=</operator> <name pos:start="163:28" pos:end="163:28">i</name></expr>;</expr_stmt>



        <comment type="block" pos:start="167:9" pos:end="169:80">/* init all to skipped p frames

         * (with b frames we might have a not encoded frame at the end FIXME) */</comment>

        <for pos:start="171:9" pos:end="185:9">for <control pos:start="171:13" pos:end="171:46">(<init pos:start="171:14" pos:end="171:19"><expr pos:start="171:14" pos:end="171:18"><name pos:start="171:14" pos:end="171:14">i</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <literal type="number" pos:start="171:18" pos:end="171:18">0</literal></expr>;</init> <condition pos:start="171:21" pos:end="171:41"><expr pos:start="171:21" pos:end="171:40"><name pos:start="171:21" pos:end="171:21">i</name> <operator pos:start="171:23" pos:end="171:23">&lt;</operator> <name pos:start="171:25" pos:end="171:40"><name pos:start="171:25" pos:end="171:27">rcc</name><operator pos:start="171:28" pos:end="171:29">-&gt;</operator><name pos:start="171:30" pos:end="171:40">num_entries</name></name></expr>;</condition> <incr pos:start="171:43" pos:end="171:45"><expr pos:start="171:43" pos:end="171:45"><name pos:start="171:43" pos:end="171:43">i</name><operator pos:start="171:44" pos:end="171:45">++</operator></expr></incr>)</control> <block pos:start="171:48" pos:end="185:9">{<block_content pos:start="173:13" pos:end="183:46">

            <decl_stmt pos:start="173:13" pos:end="173:51"><decl pos:start="173:13" pos:end="173:50"><type pos:start="173:13" pos:end="173:30"><name pos:start="173:13" pos:end="173:28">RateControlEntry</name> <modifier pos:start="173:30" pos:end="173:30">*</modifier></type><name pos:start="173:31" pos:end="173:33">rce</name> <init pos:start="173:35" pos:end="173:50">= <expr pos:start="173:37" pos:end="173:50"><operator pos:start="173:37" pos:end="173:37">&amp;</operator><name pos:start="173:38" pos:end="173:50"><name pos:start="173:38" pos:end="173:40">rcc</name><operator pos:start="173:41" pos:end="173:42">-&gt;</operator><name pos:start="173:43" pos:end="173:47">entry</name><index pos:start="173:48" pos:end="173:50">[<expr pos:start="173:49" pos:end="173:49"><name pos:start="173:49" pos:end="173:49">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="177:13" pos:end="177:69"><expr pos:start="177:13" pos:end="177:68"><name pos:start="177:13" pos:end="177:26"><name pos:start="177:13" pos:end="177:15">rce</name><operator pos:start="177:16" pos:end="177:17">-&gt;</operator><name pos:start="177:18" pos:end="177:26">pict_type</name></name>  <operator pos:start="177:29" pos:end="177:29">=</operator> <name pos:start="177:31" pos:end="177:48"><name pos:start="177:31" pos:end="177:33">rce</name><operator pos:start="177:34" pos:end="177:35">-&gt;</operator><name pos:start="177:36" pos:end="177:48">new_pict_type</name></name> <operator pos:start="177:50" pos:end="177:50">=</operator> <name pos:start="177:52" pos:end="177:68">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:68"><expr pos:start="179:13" pos:end="179:67"><name pos:start="179:13" pos:end="179:23"><name pos:start="179:13" pos:end="179:15">rce</name><operator pos:start="179:16" pos:end="179:17">-&gt;</operator><name pos:start="179:18" pos:end="179:23">qscale</name></name>     <operator pos:start="179:29" pos:end="179:29">=</operator> <name pos:start="179:31" pos:end="179:45"><name pos:start="179:31" pos:end="179:33">rce</name><operator pos:start="179:34" pos:end="179:35">-&gt;</operator><name pos:start="179:36" pos:end="179:45">new_qscale</name></name>    <operator pos:start="179:50" pos:end="179:50">=</operator> <name pos:start="179:52" pos:end="179:63">FF_QP2LAMBDA</name> <operator pos:start="179:65" pos:end="179:65">*</operator> <literal type="number" pos:start="179:67" pos:end="179:67">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:45"><expr pos:start="181:13" pos:end="181:44"><name pos:start="181:13" pos:end="181:26"><name pos:start="181:13" pos:end="181:15">rce</name><operator pos:start="181:16" pos:end="181:17">-&gt;</operator><name pos:start="181:18" pos:end="181:26">misc_bits</name></name>  <operator pos:start="181:29" pos:end="181:29">=</operator> <name pos:start="181:31" pos:end="181:39"><name pos:start="181:31" pos:end="181:31">s</name><operator pos:start="181:32" pos:end="181:33">-&gt;</operator><name pos:start="181:34" pos:end="181:39">mb_num</name></name> <operator pos:start="181:41" pos:end="181:41">+</operator> <literal type="number" pos:start="181:43" pos:end="181:44">10</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:46"><expr pos:start="183:13" pos:end="183:45"><name pos:start="183:13" pos:end="183:27"><name pos:start="183:13" pos:end="183:15">rce</name><operator pos:start="183:16" pos:end="183:17">-&gt;</operator><name pos:start="183:18" pos:end="183:27">mb_var_sum</name></name> <operator pos:start="183:29" pos:end="183:29">=</operator> <name pos:start="183:31" pos:end="183:39"><name pos:start="183:31" pos:end="183:31">s</name><operator pos:start="183:32" pos:end="183:33">-&gt;</operator><name pos:start="183:34" pos:end="183:39">mb_num</name></name> <operator pos:start="183:41" pos:end="183:41">*</operator> <literal type="number" pos:start="183:43" pos:end="183:45">100</literal></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="189:9" pos:end="189:24">/* read stats */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:31"><expr pos:start="191:9" pos:end="191:30"><name pos:start="191:9" pos:end="191:9">p</name> <operator pos:start="191:11" pos:end="191:11">=</operator> <name pos:start="191:13" pos:end="191:30"><name pos:start="191:13" pos:end="191:13">s</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:20">avctx</name><operator pos:start="191:21" pos:end="191:22">-&gt;</operator><name pos:start="191:23" pos:end="191:30">stats_in</name></name></expr>;</expr_stmt>

        <for pos:start="193:9" pos:end="255:9">for <control pos:start="193:13" pos:end="193:64">(<init pos:start="193:14" pos:end="193:19"><expr pos:start="193:14" pos:end="193:18"><name pos:start="193:14" pos:end="193:14">i</name> <operator pos:start="193:16" pos:end="193:16">=</operator> <literal type="number" pos:start="193:18" pos:end="193:18">0</literal></expr>;</init> <condition pos:start="193:21" pos:end="193:59"><expr pos:start="193:21" pos:end="193:58"><name pos:start="193:21" pos:end="193:21">i</name> <operator pos:start="193:23" pos:end="193:23">&lt;</operator> <name pos:start="193:25" pos:end="193:40"><name pos:start="193:25" pos:end="193:27">rcc</name><operator pos:start="193:28" pos:end="193:29">-&gt;</operator><name pos:start="193:30" pos:end="193:40">num_entries</name></name> <operator pos:start="193:42" pos:end="193:42">-</operator> <name pos:start="193:44" pos:end="193:58"><name pos:start="193:44" pos:end="193:44">s</name><operator pos:start="193:45" pos:end="193:46">-&gt;</operator><name pos:start="193:47" pos:end="193:58">max_b_frames</name></name></expr>;</condition> <incr pos:start="193:61" pos:end="193:63"><expr pos:start="193:61" pos:end="193:63"><name pos:start="193:61" pos:end="193:61">i</name><operator pos:start="193:62" pos:end="193:63">++</operator></expr></incr>)</control> <block pos:start="193:66" pos:end="255:9">{<block_content pos:start="195:13" pos:end="253:21">

            <decl_stmt pos:start="195:13" pos:end="195:34"><decl pos:start="195:13" pos:end="195:33"><type pos:start="195:13" pos:end="195:30"><name pos:start="195:13" pos:end="195:28">RateControlEntry</name> <modifier pos:start="195:30" pos:end="195:30">*</modifier></type><name pos:start="195:31" pos:end="195:33">rce</name></decl>;</decl_stmt>

            <decl_stmt pos:start="197:13" pos:end="197:31"><decl pos:start="197:13" pos:end="197:30"><type pos:start="197:13" pos:end="197:15"><name pos:start="197:13" pos:end="197:15">int</name></type> <name pos:start="197:17" pos:end="197:30">picture_number</name></decl>;</decl_stmt>

            <decl_stmt pos:start="199:13" pos:end="199:18"><decl pos:start="199:13" pos:end="199:17"><type pos:start="199:13" pos:end="199:15"><name pos:start="199:13" pos:end="199:15">int</name></type> <name pos:start="199:17" pos:end="199:17">e</name></decl>;</decl_stmt>

            <decl_stmt pos:start="201:13" pos:end="201:23"><decl pos:start="201:13" pos:end="201:22"><type pos:start="201:13" pos:end="201:18"><name pos:start="201:13" pos:end="201:16">char</name> <modifier pos:start="201:18" pos:end="201:18">*</modifier></type><name pos:start="201:19" pos:end="201:22">next</name></decl>;</decl_stmt>



            <expr_stmt pos:start="205:13" pos:end="205:34"><expr pos:start="205:13" pos:end="205:33"><name pos:start="205:13" pos:end="205:16">next</name> <operator pos:start="205:18" pos:end="205:18">=</operator> <call pos:start="205:20" pos:end="205:33"><name pos:start="205:20" pos:end="205:25">strchr</name><argument_list pos:start="205:26" pos:end="205:33">(<argument pos:start="205:27" pos:end="205:27"><expr pos:start="205:27" pos:end="205:27"><name pos:start="205:27" pos:end="205:27">p</name></expr></argument>, <argument pos:start="205:30" pos:end="205:32"><expr pos:start="205:30" pos:end="205:32"><literal type="char" pos:start="205:30" pos:end="205:32">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="207:13" pos:end="213:13"><if pos:start="207:13" pos:end="213:13">if <condition pos:start="207:16" pos:end="207:21">(<expr pos:start="207:17" pos:end="207:20"><name pos:start="207:17" pos:end="207:20">next</name></expr>)</condition> <block pos:start="207:23" pos:end="213:13">{<block_content pos:start="209:17" pos:end="211:23">

                <expr_stmt pos:start="209:17" pos:end="209:28"><expr pos:start="209:17" pos:end="209:27"><operator pos:start="209:17" pos:end="209:17">(</operator><operator pos:start="209:18" pos:end="209:18">*</operator><name pos:start="209:19" pos:end="209:22">next</name><operator pos:start="209:23" pos:end="209:23">)</operator> <operator pos:start="209:25" pos:end="209:25">=</operator> <literal type="number" pos:start="209:27" pos:end="209:27">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="209:30" pos:end="209:106">// sscanf in unbelievably slow on looong strings // FIXME copy / do not write</comment>

                <expr_stmt pos:start="211:17" pos:end="211:23"><expr pos:start="211:17" pos:end="211:22"><name pos:start="211:17" pos:end="211:20">next</name><operator pos:start="211:21" pos:end="211:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:54"><expr pos:start="215:13" pos:end="215:53"><name pos:start="215:13" pos:end="215:13">e</name> <operator pos:start="215:15" pos:end="215:15">=</operator> <call pos:start="215:17" pos:end="215:53"><name pos:start="215:17" pos:end="215:22">sscanf</name><argument_list pos:start="215:23" pos:end="215:53">(<argument pos:start="215:24" pos:end="215:24"><expr pos:start="215:24" pos:end="215:24"><name pos:start="215:24" pos:end="215:24">p</name></expr></argument>, <argument pos:start="215:27" pos:end="215:35"><expr pos:start="215:27" pos:end="215:35"><literal type="string" pos:start="215:27" pos:end="215:35">" in:%d "</literal></expr></argument>, <argument pos:start="215:38" pos:end="215:52"><expr pos:start="215:38" pos:end="215:52"><operator pos:start="215:38" pos:end="215:38">&amp;</operator><name pos:start="215:39" pos:end="215:52">picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="219:13" pos:end="219:40"><expr pos:start="219:13" pos:end="219:39"><call pos:start="219:13" pos:end="219:39"><name pos:start="219:13" pos:end="219:18">assert</name><argument_list pos:start="219:19" pos:end="219:39">(<argument pos:start="219:20" pos:end="219:38"><expr pos:start="219:20" pos:end="219:38"><name pos:start="219:20" pos:end="219:33">picture_number</name> <operator pos:start="219:35" pos:end="219:36">&gt;=</operator> <literal type="number" pos:start="219:38" pos:end="219:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:54"><expr pos:start="221:13" pos:end="221:53"><call pos:start="221:13" pos:end="221:53"><name pos:start="221:13" pos:end="221:18">assert</name><argument_list pos:start="221:19" pos:end="221:53">(<argument pos:start="221:20" pos:end="221:52"><expr pos:start="221:20" pos:end="221:52"><name pos:start="221:20" pos:end="221:33">picture_number</name> <operator pos:start="221:35" pos:end="221:35">&lt;</operator> <name pos:start="221:37" pos:end="221:52"><name pos:start="221:37" pos:end="221:39">rcc</name><operator pos:start="221:40" pos:end="221:41">-&gt;</operator><name pos:start="221:42" pos:end="221:52">num_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:46"><expr pos:start="223:13" pos:end="223:45"><name pos:start="223:13" pos:end="223:15">rce</name> <operator pos:start="223:17" pos:end="223:17">=</operator> <operator pos:start="223:19" pos:end="223:19">&amp;</operator><name pos:start="223:20" pos:end="223:45"><name pos:start="223:20" pos:end="223:22">rcc</name><operator pos:start="223:23" pos:end="223:24">-&gt;</operator><name pos:start="223:25" pos:end="223:29">entry</name><index pos:start="223:30" pos:end="223:45">[<expr pos:start="223:31" pos:end="223:44"><name pos:start="223:31" pos:end="223:44">picture_number</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="227:13" pos:end="237:76"><expr pos:start="227:13" pos:end="237:75"><name pos:start="227:13" pos:end="227:13">e</name> <operator pos:start="227:15" pos:end="227:16">+=</operator> <call pos:start="227:18" pos:end="237:75"><name pos:start="227:18" pos:end="227:23">sscanf</name><argument_list pos:start="227:24" pos:end="237:75">(<argument pos:start="227:25" pos:end="227:25"><expr pos:start="227:25" pos:end="227:25"><name pos:start="227:25" pos:end="227:25">p</name></expr></argument>, <argument pos:start="227:28" pos:end="227:154"><expr pos:start="227:28" pos:end="227:154"><literal type="string" pos:start="227:28" pos:end="227:154">" in:%*d out:%*d type:%d q:%f itex:%d ptex:%d mv:%d misc:%d fcode:%d bcode:%d mc-var:%d var:%d icount:%d skipcount:%d hbits:%d"</literal></expr></argument>,

                        <argument pos:start="229:25" pos:end="229:39"><expr pos:start="229:25" pos:end="229:39"><operator pos:start="229:25" pos:end="229:25">&amp;</operator><name pos:start="229:26" pos:end="229:39"><name pos:start="229:26" pos:end="229:28">rce</name><operator pos:start="229:29" pos:end="229:30">-&gt;</operator><name pos:start="229:31" pos:end="229:39">pict_type</name></name></expr></argument>, <argument pos:start="229:42" pos:end="229:53"><expr pos:start="229:42" pos:end="229:53"><operator pos:start="229:42" pos:end="229:42">&amp;</operator><name pos:start="229:43" pos:end="229:53"><name pos:start="229:43" pos:end="229:45">rce</name><operator pos:start="229:46" pos:end="229:47">-&gt;</operator><name pos:start="229:48" pos:end="229:53">qscale</name></name></expr></argument>, <argument pos:start="229:56" pos:end="229:71"><expr pos:start="229:56" pos:end="229:71"><operator pos:start="229:56" pos:end="229:56">&amp;</operator><name pos:start="229:57" pos:end="229:71"><name pos:start="229:57" pos:end="229:59">rce</name><operator pos:start="229:60" pos:end="229:61">-&gt;</operator><name pos:start="229:62" pos:end="229:71">i_tex_bits</name></name></expr></argument>, <argument pos:start="229:74" pos:end="229:89"><expr pos:start="229:74" pos:end="229:89"><operator pos:start="229:74" pos:end="229:74">&amp;</operator><name pos:start="229:75" pos:end="229:89"><name pos:start="229:75" pos:end="229:77">rce</name><operator pos:start="229:78" pos:end="229:79">-&gt;</operator><name pos:start="229:80" pos:end="229:89">p_tex_bits</name></name></expr></argument>,

                        <argument pos:start="231:25" pos:end="231:37"><expr pos:start="231:25" pos:end="231:37"><operator pos:start="231:25" pos:end="231:25">&amp;</operator><name pos:start="231:26" pos:end="231:37"><name pos:start="231:26" pos:end="231:28">rce</name><operator pos:start="231:29" pos:end="231:30">-&gt;</operator><name pos:start="231:31" pos:end="231:37">mv_bits</name></name></expr></argument>, <argument pos:start="231:40" pos:end="231:54"><expr pos:start="231:40" pos:end="231:54"><operator pos:start="231:40" pos:end="231:40">&amp;</operator><name pos:start="231:41" pos:end="231:54"><name pos:start="231:41" pos:end="231:43">rce</name><operator pos:start="231:44" pos:end="231:45">-&gt;</operator><name pos:start="231:46" pos:end="231:54">misc_bits</name></name></expr></argument>,

                        <argument pos:start="233:25" pos:end="233:36"><expr pos:start="233:25" pos:end="233:36"><operator pos:start="233:25" pos:end="233:25">&amp;</operator><name pos:start="233:26" pos:end="233:36"><name pos:start="233:26" pos:end="233:28">rce</name><operator pos:start="233:29" pos:end="233:30">-&gt;</operator><name pos:start="233:31" pos:end="233:36">f_code</name></name></expr></argument>, <argument pos:start="233:39" pos:end="233:50"><expr pos:start="233:39" pos:end="233:50"><operator pos:start="233:39" pos:end="233:39">&amp;</operator><name pos:start="233:40" pos:end="233:50"><name pos:start="233:40" pos:end="233:42">rce</name><operator pos:start="233:43" pos:end="233:44">-&gt;</operator><name pos:start="233:45" pos:end="233:50">b_code</name></name></expr></argument>,

                        <argument pos:start="235:25" pos:end="235:43"><expr pos:start="235:25" pos:end="235:43"><operator pos:start="235:25" pos:end="235:25">&amp;</operator><name pos:start="235:26" pos:end="235:43"><name pos:start="235:26" pos:end="235:28">rce</name><operator pos:start="235:29" pos:end="235:30">-&gt;</operator><name pos:start="235:31" pos:end="235:43">mc_mb_var_sum</name></name></expr></argument>, <argument pos:start="235:46" pos:end="235:61"><expr pos:start="235:46" pos:end="235:61"><operator pos:start="235:46" pos:end="235:46">&amp;</operator><name pos:start="235:47" pos:end="235:61"><name pos:start="235:47" pos:end="235:49">rce</name><operator pos:start="235:50" pos:end="235:51">-&gt;</operator><name pos:start="235:52" pos:end="235:61">mb_var_sum</name></name></expr></argument>,

                        <argument pos:start="237:25" pos:end="237:37"><expr pos:start="237:25" pos:end="237:37"><operator pos:start="237:25" pos:end="237:25">&amp;</operator><name pos:start="237:26" pos:end="237:37"><name pos:start="237:26" pos:end="237:28">rce</name><operator pos:start="237:29" pos:end="237:30">-&gt;</operator><name pos:start="237:31" pos:end="237:37">i_count</name></name></expr></argument>, <argument pos:start="237:40" pos:end="237:55"><expr pos:start="237:40" pos:end="237:55"><operator pos:start="237:40" pos:end="237:40">&amp;</operator><name pos:start="237:41" pos:end="237:55"><name pos:start="237:41" pos:end="237:43">rce</name><operator pos:start="237:44" pos:end="237:45">-&gt;</operator><name pos:start="237:46" pos:end="237:55">skip_count</name></name></expr></argument>, <argument pos:start="237:58" pos:end="237:74"><expr pos:start="237:58" pos:end="237:74"><operator pos:start="237:58" pos:end="237:58">&amp;</operator><name pos:start="237:59" pos:end="237:74"><name pos:start="237:59" pos:end="237:61">rce</name><operator pos:start="237:62" pos:end="237:63">-&gt;</operator><name pos:start="237:64" pos:end="237:74">header_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="239:13" pos:end="249:13"><if pos:start="239:13" pos:end="249:13">if <condition pos:start="239:16" pos:end="239:24">(<expr pos:start="239:17" pos:end="239:23"><name pos:start="239:17" pos:end="239:17">e</name> <operator pos:start="239:19" pos:end="239:20">!=</operator> <literal type="number" pos:start="239:22" pos:end="239:23">14</literal></expr>)</condition> <block pos:start="239:26" pos:end="249:13">{<block_content pos:start="241:17" pos:end="247:26">

                <expr_stmt pos:start="241:17" pos:end="245:29"><expr pos:start="241:17" pos:end="245:28"><call pos:start="241:17" pos:end="245:28"><name pos:start="241:17" pos:end="241:22">av_log</name><argument_list pos:start="241:23" pos:end="245:28">(<argument pos:start="241:24" pos:end="241:31"><expr pos:start="241:24" pos:end="241:31"><name pos:start="241:24" pos:end="241:31"><name pos:start="241:24" pos:end="241:24">s</name><operator pos:start="241:25" pos:end="241:26">-&gt;</operator><name pos:start="241:27" pos:end="241:31">avctx</name></name></expr></argument>, <argument pos:start="241:34" pos:end="241:45"><expr pos:start="241:34" pos:end="241:45"><name pos:start="241:34" pos:end="241:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="243:24" pos:end="243:75"><expr pos:start="243:24" pos:end="243:75"><literal type="string" pos:start="243:24" pos:end="243:75">"statistics are damaged at line %d, parser out=%d\n"</literal></expr></argument>,

                       <argument pos:start="245:24" pos:end="245:24"><expr pos:start="245:24" pos:end="245:24"><name pos:start="245:24" pos:end="245:24">i</name></expr></argument>, <argument pos:start="245:27" pos:end="245:27"><expr pos:start="245:27" pos:end="245:27"><name pos:start="245:27" pos:end="245:27">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="247:17" pos:end="247:26">return <expr pos:start="247:24" pos:end="247:25"><operator pos:start="247:24" pos:end="247:24">-</operator><literal type="number" pos:start="247:25" pos:end="247:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="253:13" pos:end="253:21"><expr pos:start="253:13" pos:end="253:20"><name pos:start="253:13" pos:end="253:13">p</name> <operator pos:start="253:15" pos:end="253:15">=</operator> <name pos:start="253:17" pos:end="253:20">next</name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="259:9" pos:end="261:22"><if pos:start="259:9" pos:end="261:22">if <condition pos:start="259:12" pos:end="259:30">(<expr pos:start="259:13" pos:end="259:29"><call pos:start="259:13" pos:end="259:25"><name pos:start="259:13" pos:end="259:22">init_pass2</name><argument_list pos:start="259:23" pos:end="259:25">(<argument pos:start="259:24" pos:end="259:24"><expr pos:start="259:24" pos:end="259:24"><name pos:start="259:24" pos:end="259:24">s</name></expr></argument>)</argument_list></call> <operator pos:start="259:27" pos:end="259:27">&lt;</operator> <literal type="number" pos:start="259:29" pos:end="259:29">0</literal></expr>)</condition><block type="pseudo" pos:start="261:13" pos:end="261:22"><block_content pos:start="261:13" pos:end="261:22">

            <return pos:start="261:13" pos:end="261:22">return <expr pos:start="261:20" pos:end="261:21"><operator pos:start="261:20" pos:end="261:20">-</operator><literal type="number" pos:start="261:21" pos:end="261:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="line" pos:start="265:9" pos:end="265:34">// FIXME maybe move to end</comment>

        <if_stmt pos:start="267:9" pos:end="283:9"><if pos:start="267:9" pos:end="283:9">if <condition pos:start="267:12" pos:end="267:97">(<expr pos:start="267:13" pos:end="267:96"><operator pos:start="267:13" pos:end="267:13">(</operator><name pos:start="267:14" pos:end="267:28"><name pos:start="267:14" pos:end="267:14">s</name><operator pos:start="267:15" pos:end="267:16">-&gt;</operator><name pos:start="267:17" pos:end="267:21">avctx</name><operator pos:start="267:22" pos:end="267:23">-&gt;</operator><name pos:start="267:24" pos:end="267:28">flags</name></name> <operator pos:start="267:30" pos:end="267:30">&amp;</operator> <name pos:start="267:32" pos:end="267:47">CODEC_FLAG_PASS2</name><operator pos:start="267:48" pos:end="267:48">)</operator> <operator pos:start="267:50" pos:end="267:51">&amp;&amp;</operator> <name pos:start="267:53" pos:end="267:73"><name pos:start="267:53" pos:end="267:53">s</name><operator pos:start="267:54" pos:end="267:55">-&gt;</operator><name pos:start="267:56" pos:end="267:60">avctx</name><operator pos:start="267:61" pos:end="267:62">-&gt;</operator><name pos:start="267:63" pos:end="267:73">rc_strategy</name></name> <operator pos:start="267:75" pos:end="267:76">==</operator> <name pos:start="267:78" pos:end="267:96">FF_RC_STRATEGY_XVID</name></expr>)</condition> <block pos:start="267:99" pos:end="283:9">{<block_content pos:start="271:13" pos:end="282:0">

<cpp:if pos:start="269:1" pos:end="269:18">#<cpp:directive pos:start="269:2" pos:end="269:3">if</cpp:directive> <expr pos:start="269:5" pos:end="269:18"><name pos:start="269:5" pos:end="269:18">CONFIG_LIBXVID</name></expr></cpp:if>

            <return pos:start="271:13" pos:end="274:0">return <expr pos:start="271:20" pos:end="271:47"><call pos:start="271:20" pos:end="271:47"><name pos:start="271:20" pos:end="271:44">ff_xvid_rate_control_init</name><argument_list pos:start="271:45" pos:end="271:47">(<argument pos:start="271:46" pos:end="271:46"><expr pos:start="271:46" pos:end="271:46"><name pos:start="271:46" pos:end="271:46">s</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else pos:start="273:1" pos:end="273:5">#<cpp:directive pos:start="273:2" pos:end="273:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="275:13" pos:end="277:89"><expr pos:start="275:13" pos:end="277:88"><call pos:start="275:13" pos:end="277:88"><name pos:start="275:13" pos:end="275:18">av_log</name><argument_list pos:start="275:19" pos:end="277:88">(<argument pos:start="275:20" pos:end="275:27"><expr pos:start="275:20" pos:end="275:27"><name pos:start="275:20" pos:end="275:27"><name pos:start="275:20" pos:end="275:20">s</name><operator pos:start="275:21" pos:end="275:22">-&gt;</operator><name pos:start="275:23" pos:end="275:27">avctx</name></name></expr></argument>, <argument pos:start="275:30" pos:end="275:41"><expr pos:start="275:30" pos:end="275:41"><name pos:start="275:30" pos:end="275:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="277:20" pos:end="277:87"><expr pos:start="277:20" pos:end="277:87"><literal type="string" pos:start="277:20" pos:end="277:87">"Xvid ratecontrol requires libavcodec compiled with Xvid support.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="279:13" pos:end="282:0">return <expr pos:start="279:20" pos:end="279:21"><operator pos:start="279:20" pos:end="279:20">-</operator><literal type="number" pos:start="279:21" pos:end="279:21">1</literal></expr>;</return>

<cpp:endif pos:start="281:1" pos:end="281:6">#<cpp:directive pos:start="281:2" pos:end="281:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="289:5" pos:end="399:5"><if pos:start="289:5" pos:end="399:5">if <condition pos:start="289:8" pos:end="289:46">(<expr pos:start="289:9" pos:end="289:45"><operator pos:start="289:9" pos:end="289:9">!</operator><operator pos:start="289:10" pos:end="289:10">(</operator><name pos:start="289:11" pos:end="289:25"><name pos:start="289:11" pos:end="289:11">s</name><operator pos:start="289:12" pos:end="289:13">-&gt;</operator><name pos:start="289:14" pos:end="289:18">avctx</name><operator pos:start="289:19" pos:end="289:20">-&gt;</operator><name pos:start="289:21" pos:end="289:25">flags</name></name> <operator pos:start="289:27" pos:end="289:27">&amp;</operator> <name pos:start="289:29" pos:end="289:44">CODEC_FLAG_PASS2</name><operator pos:start="289:45" pos:end="289:45">)</operator></expr>)</condition> <block pos:start="289:48" pos:end="399:5">{<block_content pos:start="291:9" pos:end="397:9">

        <expr_stmt pos:start="291:9" pos:end="291:39"><expr pos:start="291:9" pos:end="291:38"><name pos:start="291:9" pos:end="291:28"><name pos:start="291:9" pos:end="291:11">rcc</name><operator pos:start="291:12" pos:end="291:13">-&gt;</operator><name pos:start="291:14" pos:end="291:28">short_term_qsum</name></name>   <operator pos:start="291:32" pos:end="291:32">=</operator> <literal type="number" pos:start="291:34" pos:end="291:38">0.001</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:39"><expr pos:start="293:9" pos:end="293:38"><name pos:start="293:9" pos:end="293:30"><name pos:start="293:9" pos:end="293:11">rcc</name><operator pos:start="293:12" pos:end="293:13">-&gt;</operator><name pos:start="293:14" pos:end="293:30">short_term_qcount</name></name> <operator pos:start="293:32" pos:end="293:32">=</operator> <literal type="number" pos:start="293:34" pos:end="293:38">0.001</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="297:9" pos:end="297:44"><expr pos:start="297:9" pos:end="297:43"><name pos:start="297:9" pos:end="297:35"><name pos:start="297:9" pos:end="297:11">rcc</name><operator pos:start="297:12" pos:end="297:13">-&gt;</operator><name pos:start="297:14" pos:end="297:35">pass1_rc_eq_output_sum</name></name> <operator pos:start="297:37" pos:end="297:37">=</operator> <literal type="number" pos:start="297:39" pos:end="297:43">0.001</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:44"><expr pos:start="299:9" pos:end="299:43"><name pos:start="299:9" pos:end="299:30"><name pos:start="299:9" pos:end="299:11">rcc</name><operator pos:start="299:12" pos:end="299:13">-&gt;</operator><name pos:start="299:14" pos:end="299:30">pass1_wanted_bits</name></name>      <operator pos:start="299:37" pos:end="299:37">=</operator> <literal type="number" pos:start="299:39" pos:end="299:43">0.001</literal></expr>;</expr_stmt>



        <if_stmt pos:start="303:9" pos:end="309:9"><if pos:start="303:9" pos:end="309:9">if <condition pos:start="303:12" pos:end="303:34">(<expr pos:start="303:13" pos:end="303:33"><name pos:start="303:13" pos:end="303:27"><name pos:start="303:13" pos:end="303:13">s</name><operator pos:start="303:14" pos:end="303:15">-&gt;</operator><name pos:start="303:16" pos:end="303:20">avctx</name><operator pos:start="303:21" pos:end="303:22">-&gt;</operator><name pos:start="303:23" pos:end="303:27">qblur</name></name> <operator pos:start="303:29" pos:end="303:29">&gt;</operator> <literal type="number" pos:start="303:31" pos:end="303:33">1.0</literal></expr>)</condition> <block pos:start="303:36" pos:end="309:9">{<block_content pos:start="305:13" pos:end="307:22">

            <expr_stmt pos:start="305:13" pos:end="305:64"><expr pos:start="305:13" pos:end="305:63"><call pos:start="305:13" pos:end="305:63"><name pos:start="305:13" pos:end="305:18">av_log</name><argument_list pos:start="305:19" pos:end="305:63">(<argument pos:start="305:20" pos:end="305:27"><expr pos:start="305:20" pos:end="305:27"><name pos:start="305:20" pos:end="305:27"><name pos:start="305:20" pos:end="305:20">s</name><operator pos:start="305:21" pos:end="305:22">-&gt;</operator><name pos:start="305:23" pos:end="305:27">avctx</name></name></expr></argument>, <argument pos:start="305:30" pos:end="305:41"><expr pos:start="305:30" pos:end="305:41"><name pos:start="305:30" pos:end="305:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="305:44" pos:end="305:62"><expr pos:start="305:44" pos:end="305:62"><literal type="string" pos:start="305:44" pos:end="305:62">"qblur too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="307:13" pos:end="307:22">return <expr pos:start="307:20" pos:end="307:21"><operator pos:start="307:20" pos:end="307:20">-</operator><literal type="number" pos:start="307:21" pos:end="307:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="311:9" pos:end="311:59">/* init stuff with the user specified complexity */</comment>

        <if_stmt pos:start="313:9" pos:end="397:9"><if pos:start="313:9" pos:end="397:9">if <condition pos:start="313:12" pos:end="313:31">(<expr pos:start="313:13" pos:end="313:30"><name pos:start="313:13" pos:end="313:30"><name pos:start="313:13" pos:end="313:13">s</name><operator pos:start="313:14" pos:end="313:15">-&gt;</operator><name pos:start="313:16" pos:end="313:30">rc_initial_cplx</name></name></expr>)</condition> <block pos:start="313:33" pos:end="397:9">{<block_content pos:start="315:13" pos:end="395:13">

            <for pos:start="315:13" pos:end="395:13">for <control pos:start="315:17" pos:end="315:41">(<init pos:start="315:18" pos:end="315:23"><expr pos:start="315:18" pos:end="315:22"><name pos:start="315:18" pos:end="315:18">i</name> <operator pos:start="315:20" pos:end="315:20">=</operator> <literal type="number" pos:start="315:22" pos:end="315:22">0</literal></expr>;</init> <condition pos:start="315:25" pos:end="315:36"><expr pos:start="315:25" pos:end="315:35"><name pos:start="315:25" pos:end="315:25">i</name> <operator pos:start="315:27" pos:end="315:27">&lt;</operator> <literal type="number" pos:start="315:29" pos:end="315:30">60</literal> <operator pos:start="315:32" pos:end="315:32">*</operator> <literal type="number" pos:start="315:34" pos:end="315:35">30</literal></expr>;</condition> <incr pos:start="315:38" pos:end="315:40"><expr pos:start="315:38" pos:end="315:40"><name pos:start="315:38" pos:end="315:38">i</name><operator pos:start="315:39" pos:end="315:40">++</operator></expr></incr>)</control> <block pos:start="315:43" pos:end="395:13">{<block_content pos:start="317:17" pos:end="393:90">

                <decl_stmt pos:start="317:17" pos:end="317:83"><decl pos:start="317:17" pos:end="317:82"><type pos:start="317:17" pos:end="317:22"><name pos:start="317:17" pos:end="317:22">double</name></type> <name pos:start="317:24" pos:end="317:27">bits</name> <init pos:start="317:29" pos:end="317:82">= <expr pos:start="317:31" pos:end="317:82"><name pos:start="317:31" pos:end="317:48"><name pos:start="317:31" pos:end="317:31">s</name><operator pos:start="317:32" pos:end="317:33">-&gt;</operator><name pos:start="317:34" pos:end="317:48">rc_initial_cplx</name></name> <operator pos:start="317:50" pos:end="317:50">*</operator> <operator pos:start="317:52" pos:end="317:52">(</operator><name pos:start="317:53" pos:end="317:53">i</name> <operator pos:start="317:55" pos:end="317:55">/</operator> <literal type="number" pos:start="317:57" pos:end="317:65">10000.0</literal> <operator pos:start="317:65" pos:end="317:65">+</operator> <literal type="number" pos:start="317:67" pos:end="317:69">1.0</literal><operator pos:start="317:70" pos:end="317:70">)</operator> <operator pos:start="317:72" pos:end="317:72">*</operator> <name pos:start="317:74" pos:end="317:82"><name pos:start="317:74" pos:end="317:74">s</name><operator pos:start="317:75" pos:end="317:76">-&gt;</operator><name pos:start="317:77" pos:end="317:82">mb_num</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="319:17" pos:end="319:37"><decl pos:start="319:17" pos:end="319:36"><type pos:start="319:17" pos:end="319:32"><name pos:start="319:17" pos:end="319:32">RateControlEntry</name></type> <name pos:start="319:34" pos:end="319:36">rce</name></decl>;</decl_stmt>



                <if_stmt pos:start="323:17" pos:end="333:54"><if pos:start="323:17" pos:end="325:54">if <condition pos:start="323:20" pos:end="323:53">(<expr pos:start="323:21" pos:end="323:52"><name pos:start="323:21" pos:end="323:21">i</name> <operator pos:start="323:23" pos:end="323:23">%</operator> <operator pos:start="323:25" pos:end="323:25">(</operator><operator pos:start="323:26" pos:end="323:26">(</operator><name pos:start="323:27" pos:end="323:37"><name pos:start="323:27" pos:end="323:27">s</name><operator pos:start="323:28" pos:end="323:29">-&gt;</operator><name pos:start="323:30" pos:end="323:37">gop_size</name></name> <operator pos:start="323:39" pos:end="323:39">+</operator> <literal type="number" pos:start="323:41" pos:end="323:41">3</literal><operator pos:start="323:42" pos:end="323:42">)</operator> <operator pos:start="323:44" pos:end="323:44">/</operator> <literal type="number" pos:start="323:46" pos:end="323:46">4</literal><operator pos:start="323:47" pos:end="323:47">)</operator> <operator pos:start="323:49" pos:end="323:50">==</operator> <literal type="number" pos:start="323:52" pos:end="323:52">0</literal></expr>)</condition><block type="pseudo" pos:start="325:21" pos:end="325:54"><block_content pos:start="325:21" pos:end="325:54">

                    <expr_stmt pos:start="325:21" pos:end="325:54"><expr pos:start="325:21" pos:end="325:53"><name pos:start="325:21" pos:end="325:33"><name pos:start="325:21" pos:end="325:23">rce</name><operator pos:start="325:24" pos:end="325:24">.</operator><name pos:start="325:25" pos:end="325:33">pict_type</name></name> <operator pos:start="325:35" pos:end="325:35">=</operator> <name pos:start="325:37" pos:end="325:53">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="327:17" pos:end="329:54">else if <condition pos:start="327:25" pos:end="327:51">(<expr pos:start="327:26" pos:end="327:50"><name pos:start="327:26" pos:end="327:26">i</name> <operator pos:start="327:28" pos:end="327:28">%</operator> <operator pos:start="327:30" pos:end="327:30">(</operator><name pos:start="327:31" pos:end="327:45"><name pos:start="327:31" pos:end="327:31">s</name><operator pos:start="327:32" pos:end="327:33">-&gt;</operator><name pos:start="327:34" pos:end="327:45">max_b_frames</name></name> <operator pos:start="327:47" pos:end="327:47">+</operator> <literal type="number" pos:start="327:49" pos:end="327:49">1</literal><operator pos:start="327:50" pos:end="327:50">)</operator></expr>)</condition><block type="pseudo" pos:start="329:21" pos:end="329:54"><block_content pos:start="329:21" pos:end="329:54">

                    <expr_stmt pos:start="329:21" pos:end="329:54"><expr pos:start="329:21" pos:end="329:53"><name pos:start="329:21" pos:end="329:33"><name pos:start="329:21" pos:end="329:23">rce</name><operator pos:start="329:24" pos:end="329:24">.</operator><name pos:start="329:25" pos:end="329:33">pict_type</name></name> <operator pos:start="329:35" pos:end="329:35">=</operator> <name pos:start="329:37" pos:end="329:53">AV_PICTURE_TYPE_B</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="331:17" pos:end="333:54">else<block type="pseudo" pos:start="333:21" pos:end="333:54"><block_content pos:start="333:21" pos:end="333:54">

                    <expr_stmt pos:start="333:21" pos:end="333:54"><expr pos:start="333:21" pos:end="333:53"><name pos:start="333:21" pos:end="333:33"><name pos:start="333:21" pos:end="333:23">rce</name><operator pos:start="333:24" pos:end="333:24">.</operator><name pos:start="333:25" pos:end="333:33">pict_type</name></name> <operator pos:start="333:35" pos:end="333:35">=</operator> <name pos:start="333:37" pos:end="333:53">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <expr_stmt pos:start="337:17" pos:end="337:50"><expr pos:start="337:17" pos:end="337:49"><name pos:start="337:17" pos:end="337:33"><name pos:start="337:17" pos:end="337:19">rce</name><operator pos:start="337:20" pos:end="337:20">.</operator><name pos:start="337:21" pos:end="337:33">new_pict_type</name></name> <operator pos:start="337:35" pos:end="337:35">=</operator> <name pos:start="337:37" pos:end="337:49"><name pos:start="337:37" pos:end="337:39">rce</name><operator pos:start="337:40" pos:end="337:40">.</operator><name pos:start="337:41" pos:end="337:49">pict_type</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="339:17" pos:end="339:62"><expr pos:start="339:17" pos:end="339:61"><name pos:start="339:17" pos:end="339:33"><name pos:start="339:17" pos:end="339:19">rce</name><operator pos:start="339:20" pos:end="339:20">.</operator><name pos:start="339:21" pos:end="339:33">mc_mb_var_sum</name></name> <operator pos:start="339:35" pos:end="339:35">=</operator> <name pos:start="339:37" pos:end="339:40">bits</name> <operator pos:start="339:42" pos:end="339:42">*</operator> <name pos:start="339:44" pos:end="339:52"><name pos:start="339:44" pos:end="339:44">s</name><operator pos:start="339:45" pos:end="339:46">-&gt;</operator><name pos:start="339:47" pos:end="339:52">mb_num</name></name> <operator pos:start="339:54" pos:end="339:54">/</operator> <literal type="number" pos:start="339:56" pos:end="339:61">100000</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="341:17" pos:end="341:46"><expr pos:start="341:17" pos:end="341:45"><name pos:start="341:17" pos:end="341:30"><name pos:start="341:17" pos:end="341:19">rce</name><operator pos:start="341:20" pos:end="341:20">.</operator><name pos:start="341:21" pos:end="341:30">mb_var_sum</name></name>    <operator pos:start="341:35" pos:end="341:35">=</operator> <name pos:start="341:37" pos:end="341:45"><name pos:start="341:37" pos:end="341:37">s</name><operator pos:start="341:38" pos:end="341:39">-&gt;</operator><name pos:start="341:40" pos:end="341:45">mb_num</name></name></expr>;</expr_stmt>



                <expr_stmt pos:start="345:17" pos:end="345:49"><expr pos:start="345:17" pos:end="345:48"><name pos:start="345:17" pos:end="345:26"><name pos:start="345:17" pos:end="345:19">rce</name><operator pos:start="345:20" pos:end="345:20">.</operator><name pos:start="345:21" pos:end="345:26">qscale</name></name>    <operator pos:start="345:31" pos:end="345:31">=</operator> <name pos:start="345:33" pos:end="345:44">FF_QP2LAMBDA</name> <operator pos:start="345:46" pos:end="345:46">*</operator> <literal type="number" pos:start="345:48" pos:end="345:48">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="347:17" pos:end="347:34"><expr pos:start="347:17" pos:end="347:33"><name pos:start="347:17" pos:end="347:26"><name pos:start="347:17" pos:end="347:19">rce</name><operator pos:start="347:20" pos:end="347:20">.</operator><name pos:start="347:21" pos:end="347:26">f_code</name></name>    <operator pos:start="347:31" pos:end="347:31">=</operator> <literal type="number" pos:start="347:33" pos:end="347:33">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="349:17" pos:end="349:34"><expr pos:start="349:17" pos:end="349:33"><name pos:start="349:17" pos:end="349:26"><name pos:start="349:17" pos:end="349:19">rce</name><operator pos:start="349:20" pos:end="349:20">.</operator><name pos:start="349:21" pos:end="349:26">b_code</name></name>    <operator pos:start="349:31" pos:end="349:31">=</operator> <literal type="number" pos:start="349:33" pos:end="349:33">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="351:17" pos:end="351:34"><expr pos:start="351:17" pos:end="351:33"><name pos:start="351:17" pos:end="351:29"><name pos:start="351:17" pos:end="351:19">rce</name><operator pos:start="351:20" pos:end="351:20">.</operator><name pos:start="351:21" pos:end="351:29">misc_bits</name></name> <operator pos:start="351:31" pos:end="351:31">=</operator> <literal type="number" pos:start="351:33" pos:end="351:33">1</literal></expr>;</expr_stmt>



                <if_stmt pos:start="355:17" pos:end="375:17"><if pos:start="355:17" pos:end="365:17">if <condition pos:start="355:20" pos:end="355:54">(<expr pos:start="355:21" pos:end="355:53"><name pos:start="355:21" pos:end="355:32"><name pos:start="355:21" pos:end="355:21">s</name><operator pos:start="355:22" pos:end="355:23">-&gt;</operator><name pos:start="355:24" pos:end="355:32">pict_type</name></name> <operator pos:start="355:34" pos:end="355:35">==</operator> <name pos:start="355:37" pos:end="355:53">AV_PICTURE_TYPE_I</name></expr>)</condition> <block pos:start="355:56" pos:end="365:17">{<block_content pos:start="357:21" pos:end="363:39">

                    <expr_stmt pos:start="357:21" pos:end="357:47"><expr pos:start="357:21" pos:end="357:46"><name pos:start="357:21" pos:end="357:31"><name pos:start="357:21" pos:end="357:23">rce</name><operator pos:start="357:24" pos:end="357:24">.</operator><name pos:start="357:25" pos:end="357:31">i_count</name></name>    <operator pos:start="357:36" pos:end="357:36">=</operator> <name pos:start="357:38" pos:end="357:46"><name pos:start="357:38" pos:end="357:38">s</name><operator pos:start="357:39" pos:end="357:40">-&gt;</operator><name pos:start="357:41" pos:end="357:46">mb_num</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="359:21" pos:end="359:42"><expr pos:start="359:21" pos:end="359:41"><name pos:start="359:21" pos:end="359:34"><name pos:start="359:21" pos:end="359:23">rce</name><operator pos:start="359:24" pos:end="359:24">.</operator><name pos:start="359:25" pos:end="359:34">i_tex_bits</name></name> <operator pos:start="359:36" pos:end="359:36">=</operator> <name pos:start="359:38" pos:end="359:41">bits</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="361:21" pos:end="361:39"><expr pos:start="361:21" pos:end="361:38"><name pos:start="361:21" pos:end="361:34"><name pos:start="361:21" pos:end="361:23">rce</name><operator pos:start="361:24" pos:end="361:24">.</operator><name pos:start="361:25" pos:end="361:34">p_tex_bits</name></name> <operator pos:start="361:36" pos:end="361:36">=</operator> <literal type="number" pos:start="361:38" pos:end="361:38">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="363:21" pos:end="363:39"><expr pos:start="363:21" pos:end="363:38"><name pos:start="363:21" pos:end="363:31"><name pos:start="363:21" pos:end="363:23">rce</name><operator pos:start="363:24" pos:end="363:24">.</operator><name pos:start="363:25" pos:end="363:31">mv_bits</name></name>    <operator pos:start="363:36" pos:end="363:36">=</operator> <literal type="number" pos:start="363:38" pos:end="363:38">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="365:19" pos:end="375:17">else <block pos:start="365:24" pos:end="375:17">{<block_content pos:start="367:21" pos:end="373:48">

                    <expr_stmt pos:start="367:21" pos:end="367:39"><expr pos:start="367:21" pos:end="367:38"><name pos:start="367:21" pos:end="367:31"><name pos:start="367:21" pos:end="367:23">rce</name><operator pos:start="367:24" pos:end="367:24">.</operator><name pos:start="367:25" pos:end="367:31">i_count</name></name>    <operator pos:start="367:36" pos:end="367:36">=</operator> <literal type="number" pos:start="367:38" pos:end="367:38">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="367:41" pos:end="367:71">// FIXME we do know this approx</comment>

                    <expr_stmt pos:start="369:21" pos:end="369:39"><expr pos:start="369:21" pos:end="369:38"><name pos:start="369:21" pos:end="369:34"><name pos:start="369:21" pos:end="369:23">rce</name><operator pos:start="369:24" pos:end="369:24">.</operator><name pos:start="369:25" pos:end="369:34">i_tex_bits</name></name> <operator pos:start="369:36" pos:end="369:36">=</operator> <literal type="number" pos:start="369:38" pos:end="369:38">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="371:21" pos:end="371:48"><expr pos:start="371:21" pos:end="371:47"><name pos:start="371:21" pos:end="371:34"><name pos:start="371:21" pos:end="371:23">rce</name><operator pos:start="371:24" pos:end="371:24">.</operator><name pos:start="371:25" pos:end="371:34">p_tex_bits</name></name> <operator pos:start="371:36" pos:end="371:36">=</operator> <name pos:start="371:38" pos:end="371:41">bits</name> <operator pos:start="371:43" pos:end="371:43">*</operator> <literal type="number" pos:start="371:45" pos:end="371:47">0.9</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="373:21" pos:end="373:48"><expr pos:start="373:21" pos:end="373:47"><name pos:start="373:21" pos:end="373:31"><name pos:start="373:21" pos:end="373:23">rce</name><operator pos:start="373:24" pos:end="373:24">.</operator><name pos:start="373:25" pos:end="373:31">mv_bits</name></name>    <operator pos:start="373:36" pos:end="373:36">=</operator> <name pos:start="373:38" pos:end="373:41">bits</name> <operator pos:start="373:43" pos:end="373:43">*</operator> <literal type="number" pos:start="373:45" pos:end="373:47">0.1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:79"><expr pos:start="377:17" pos:end="377:78"><name pos:start="377:17" pos:end="377:46"><name pos:start="377:17" pos:end="377:19">rcc</name><operator pos:start="377:20" pos:end="377:21">-&gt;</operator><name pos:start="377:22" pos:end="377:31">i_cplx_sum</name><index pos:start="377:32" pos:end="377:46">[<expr pos:start="377:33" pos:end="377:45"><name pos:start="377:33" pos:end="377:45"><name pos:start="377:33" pos:end="377:35">rce</name><operator pos:start="377:36" pos:end="377:36">.</operator><name pos:start="377:37" pos:end="377:45">pict_type</name></name></expr>]</index></name>  <operator pos:start="377:49" pos:end="377:50">+=</operator> <name pos:start="377:52" pos:end="377:65"><name pos:start="377:52" pos:end="377:54">rce</name><operator pos:start="377:55" pos:end="377:55">.</operator><name pos:start="377:56" pos:end="377:65">i_tex_bits</name></name> <operator pos:start="377:67" pos:end="377:67">*</operator> <name pos:start="377:69" pos:end="377:78"><name pos:start="377:69" pos:end="377:71">rce</name><operator pos:start="377:72" pos:end="377:72">.</operator><name pos:start="377:73" pos:end="377:78">qscale</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="379:17" pos:end="379:79"><expr pos:start="379:17" pos:end="379:78"><name pos:start="379:17" pos:end="379:46"><name pos:start="379:17" pos:end="379:19">rcc</name><operator pos:start="379:20" pos:end="379:21">-&gt;</operator><name pos:start="379:22" pos:end="379:31">p_cplx_sum</name><index pos:start="379:32" pos:end="379:46">[<expr pos:start="379:33" pos:end="379:45"><name pos:start="379:33" pos:end="379:45"><name pos:start="379:33" pos:end="379:35">rce</name><operator pos:start="379:36" pos:end="379:36">.</operator><name pos:start="379:37" pos:end="379:45">pict_type</name></name></expr>]</index></name>  <operator pos:start="379:49" pos:end="379:50">+=</operator> <name pos:start="379:52" pos:end="379:65"><name pos:start="379:52" pos:end="379:54">rce</name><operator pos:start="379:55" pos:end="379:55">.</operator><name pos:start="379:56" pos:end="379:65">p_tex_bits</name></name> <operator pos:start="379:67" pos:end="379:67">*</operator> <name pos:start="379:69" pos:end="379:78"><name pos:start="379:69" pos:end="379:71">rce</name><operator pos:start="379:72" pos:end="379:72">.</operator><name pos:start="379:73" pos:end="379:78">qscale</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:63"><expr pos:start="381:17" pos:end="381:62"><name pos:start="381:17" pos:end="381:47"><name pos:start="381:17" pos:end="381:19">rcc</name><operator pos:start="381:20" pos:end="381:21">-&gt;</operator><name pos:start="381:22" pos:end="381:32">mv_bits_sum</name><index pos:start="381:33" pos:end="381:47">[<expr pos:start="381:34" pos:end="381:46"><name pos:start="381:34" pos:end="381:46"><name pos:start="381:34" pos:end="381:36">rce</name><operator pos:start="381:37" pos:end="381:37">.</operator><name pos:start="381:38" pos:end="381:46">pict_type</name></name></expr>]</index></name> <operator pos:start="381:49" pos:end="381:50">+=</operator> <name pos:start="381:52" pos:end="381:62"><name pos:start="381:52" pos:end="381:54">rce</name><operator pos:start="381:55" pos:end="381:55">.</operator><name pos:start="381:56" pos:end="381:62">mv_bits</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="383:17" pos:end="383:50"><expr pos:start="383:17" pos:end="383:49"><name pos:start="383:17" pos:end="383:47"><name pos:start="383:17" pos:end="383:19">rcc</name><operator pos:start="383:20" pos:end="383:21">-&gt;</operator><name pos:start="383:22" pos:end="383:32">frame_count</name><index pos:start="383:33" pos:end="383:47">[<expr pos:start="383:34" pos:end="383:46"><name pos:start="383:34" pos:end="383:46"><name pos:start="383:34" pos:end="383:36">rce</name><operator pos:start="383:37" pos:end="383:37">.</operator><name pos:start="383:38" pos:end="383:46">pict_type</name></name></expr>]</index></name><operator pos:start="383:48" pos:end="383:49">++</operator></expr>;</expr_stmt>



                <expr_stmt pos:start="387:17" pos:end="387:93"><expr pos:start="387:17" pos:end="387:92"><call pos:start="387:17" pos:end="387:92"><name pos:start="387:17" pos:end="387:26">get_qscale</name><argument_list pos:start="387:27" pos:end="387:92">(<argument pos:start="387:28" pos:end="387:28"><expr pos:start="387:28" pos:end="387:28"><name pos:start="387:28" pos:end="387:28">s</name></expr></argument>, <argument pos:start="387:31" pos:end="387:34"><expr pos:start="387:31" pos:end="387:34"><operator pos:start="387:31" pos:end="387:31">&amp;</operator><name pos:start="387:32" pos:end="387:34">rce</name></expr></argument>, <argument pos:start="387:37" pos:end="387:88"><expr pos:start="387:37" pos:end="387:88"><name pos:start="387:37" pos:end="387:58"><name pos:start="387:37" pos:end="387:39">rcc</name><operator pos:start="387:40" pos:end="387:41">-&gt;</operator><name pos:start="387:42" pos:end="387:58">pass1_wanted_bits</name></name> <operator pos:start="387:60" pos:end="387:60">/</operator> <name pos:start="387:62" pos:end="387:88"><name pos:start="387:62" pos:end="387:64">rcc</name><operator pos:start="387:65" pos:end="387:66">-&gt;</operator><name pos:start="387:67" pos:end="387:88">pass1_rc_eq_output_sum</name></name></expr></argument>, <argument pos:start="387:91" pos:end="387:91"><expr pos:start="387:91" pos:end="387:91"><name pos:start="387:91" pos:end="387:91">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="line" pos:start="391:17" pos:end="391:61">// FIXME misbehaves a little for variable fps</comment>

                <expr_stmt pos:start="393:17" pos:end="393:90"><expr pos:start="393:17" pos:end="393:89"><name pos:start="393:17" pos:end="393:38"><name pos:start="393:17" pos:end="393:19">rcc</name><operator pos:start="393:20" pos:end="393:21">-&gt;</operator><name pos:start="393:22" pos:end="393:38">pass1_wanted_bits</name></name> <operator pos:start="393:40" pos:end="393:41">+=</operator> <name pos:start="393:43" pos:end="393:53"><name pos:start="393:43" pos:end="393:43">s</name><operator pos:start="393:44" pos:end="393:45">-&gt;</operator><name pos:start="393:46" pos:end="393:53">bit_rate</name></name> <operator pos:start="393:55" pos:end="393:55">/</operator> <operator pos:start="393:57" pos:end="393:57">(</operator><literal type="number" pos:start="393:58" pos:end="393:58">1</literal> <operator pos:start="393:60" pos:end="393:60">/</operator> <call pos:start="393:62" pos:end="393:88"><name pos:start="393:62" pos:end="393:67">av_q2d</name><argument_list pos:start="393:68" pos:end="393:88">(<argument pos:start="393:69" pos:end="393:87"><expr pos:start="393:69" pos:end="393:87"><name pos:start="393:69" pos:end="393:87"><name pos:start="393:69" pos:end="393:69">s</name><operator pos:start="393:70" pos:end="393:71">-&gt;</operator><name pos:start="393:72" pos:end="393:76">avctx</name><operator pos:start="393:77" pos:end="393:78">-&gt;</operator><name pos:start="393:79" pos:end="393:87">time_base</name></name></expr></argument>)</argument_list></call><operator pos:start="393:89" pos:end="393:89">)</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="403:5" pos:end="403:13">return <expr pos:start="403:12" pos:end="403:12"><literal type="number" pos:start="403:12" pos:end="403:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
