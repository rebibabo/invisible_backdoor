<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7599.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">dirac_unpack_idwt_params</name><parameter_list pos:start="1:36" pos:end="1:52">(<parameter pos:start="1:37" pos:end="1:51"><decl pos:start="1:37" pos:end="1:51"><type pos:start="1:37" pos:end="1:50"><name pos:start="1:37" pos:end="1:48">DiracContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:13">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">GetBitContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">gb</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:30"><name pos:start="5:26" pos:end="5:26">s</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:30">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:16">level</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="26:0"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:16">tmp</name></decl>;</decl_stmt>



<cpp:define pos:start="13:1" pos:end="25:14">#<cpp:directive pos:start="13:2" pos:end="13:7">define</cpp:directive> <cpp:macro pos:start="13:9" pos:end="13:38"><name pos:start="13:9" pos:end="13:19">CHECKEDREAD</name><parameter_list pos:start="13:20" pos:end="13:38">(<parameter pos:start="13:21" pos:end="13:23"><type pos:start="13:21" pos:end="13:23"><name pos:start="13:21" pos:end="13:23">dst</name></type></parameter>, <parameter pos:start="13:26" pos:end="13:29"><type pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">cond</name></type></parameter>, <parameter pos:start="13:32" pos:end="13:37"><type pos:start="13:32" pos:end="13:37"><name pos:start="13:32" pos:end="13:37">errmsg</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="15:5" pos:end="25:14">tmp = svq3_get_ue_golomb(gb); \

    if (cond) { \

        av_log(s-&gt;avctx, AV_LOG_ERROR, errmsg); \

        return -1; \

    }\

    dst = tmp;</cpp:value></cpp:define>



    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><call pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:18">align_get_bits</name><argument_list pos:start="29:19" pos:end="29:22">(<argument pos:start="29:20" pos:end="29:21"><expr pos:start="29:20" pos:end="29:21"><name pos:start="29:20" pos:end="29:21">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:50"><expr pos:start="33:5" pos:end="33:49"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:15">zero_res</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <ternary pos:start="33:19" pos:end="33:49"><condition pos:start="33:19" pos:end="33:31"><expr pos:start="33:19" pos:end="33:29"><name pos:start="33:19" pos:end="33:29"><name pos:start="33:19" pos:end="33:19">s</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:29">num_refs</name></name></expr> ?</condition><then pos:start="33:33" pos:end="33:45"> <expr pos:start="33:33" pos:end="33:45"><call pos:start="33:33" pos:end="33:45"><name pos:start="33:33" pos:end="33:41">get_bits1</name><argument_list pos:start="33:42" pos:end="33:45">(<argument pos:start="33:43" pos:end="33:44"><expr pos:start="33:43" pos:end="33:44"><name pos:start="33:43" pos:end="33:44">gb</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="33:47" pos:end="33:49">: <expr pos:start="33:49" pos:end="33:49"><literal type="number" pos:start="33:49" pos:end="33:49">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:17"><if pos:start="35:5" pos:end="37:17">if <condition pos:start="35:8" pos:end="35:20">(<expr pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:19">zero_res</name></name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:17"><block_content pos:start="37:9" pos:end="37:17">

        <return pos:start="37:9" pos:end="37:17">return <expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:72">/*[DIRAC_STD] 11.3.1 Transform parameters. transform_parameters() */</comment>

    <macro pos:start="43:5" pos:end="43:68"><name pos:start="43:5" pos:end="43:15">CHECKEDREAD</name><argument_list pos:start="43:16" pos:end="43:68">(<argument pos:start="43:17" pos:end="43:30">s-&gt;wavelet_idx</argument>, <argument pos:start="43:33" pos:end="43:39">tmp &gt; <literal type="number" pos:start="43:39" pos:end="43:39">6</literal></argument>, <argument pos:start="43:42" pos:end="43:67"><literal type="string" pos:start="43:42" pos:end="43:67">"wavelet_idx is too big\n"</literal></argument>)</argument_list></macro>



    <macro pos:start="47:5" pos:end="47:108"><name pos:start="47:5" pos:end="47:15">CHECKEDREAD</name><argument_list pos:start="47:16" pos:end="47:108">(<argument pos:start="47:17" pos:end="47:32">s-&gt;wavelet_depth</argument>, <argument pos:start="47:35" pos:end="47:65">tmp &gt; MAX_DWT_LEVELS || tmp &lt; <literal type="number" pos:start="47:65" pos:end="47:65">1</literal></argument>, <argument pos:start="47:68" pos:end="47:107"><literal type="string" pos:start="47:68" pos:end="47:107">"invalid number of DWT decompositions\n"</literal></argument>)</argument_list></macro>



    <if_stmt pos:start="51:5" pos:end="149:5"><if pos:start="51:5" pos:end="75:5">if <condition pos:start="51:8" pos:end="51:22">(<expr pos:start="51:9" pos:end="51:21"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:21"><name pos:start="51:10" pos:end="51:10">s</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:21">low_delay</name></name></expr>)</condition> <block pos:start="51:24" pos:end="75:5">{<block_content pos:start="55:9" pos:end="73:67">

        <comment type="block" pos:start="53:9" pos:end="53:53">/* Codeblock parameters (core syntax only) */</comment>

        <if_stmt pos:start="55:9" pos:end="73:67"><if pos:start="55:9" pos:end="69:9">if <condition pos:start="55:12" pos:end="55:26">(<expr pos:start="55:13" pos:end="55:25"><call pos:start="55:13" pos:end="55:25"><name pos:start="55:13" pos:end="55:21">get_bits1</name><argument_list pos:start="55:22" pos:end="55:25">(<argument pos:start="55:23" pos:end="55:24"><expr pos:start="55:23" pos:end="55:24"><name pos:start="55:23" pos:end="55:24">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:28" pos:end="69:9">{<block_content pos:start="57:13" pos:end="67:79">

            <for pos:start="57:13" pos:end="63:13">for <control pos:start="57:17" pos:end="57:51">(<init pos:start="57:18" pos:end="57:23"><expr pos:start="57:18" pos:end="57:22"><name pos:start="57:18" pos:end="57:18">i</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <literal type="number" pos:start="57:22" pos:end="57:22">0</literal></expr>;</init> <condition pos:start="57:25" pos:end="57:46"><expr pos:start="57:25" pos:end="57:45"><name pos:start="57:25" pos:end="57:25">i</name> <operator pos:start="57:27" pos:end="57:28">&lt;=</operator> <name pos:start="57:30" pos:end="57:45"><name pos:start="57:30" pos:end="57:30">s</name><operator pos:start="57:31" pos:end="57:32">-&gt;</operator><name pos:start="57:33" pos:end="57:45">wavelet_depth</name></name></expr>;</condition> <incr pos:start="57:48" pos:end="57:50"><expr pos:start="57:48" pos:end="57:50"><name pos:start="57:48" pos:end="57:48">i</name><operator pos:start="57:49" pos:end="57:50">++</operator></expr></incr>)</control> <block pos:start="57:53" pos:end="63:13">{<block_content pos:start="59:17" pos:end="61:90">

                <macro pos:start="59:17" pos:end="59:89"><name pos:start="59:17" pos:end="59:27">CHECKEDREAD</name><argument_list pos:start="59:28" pos:end="59:89">(<argument pos:start="59:29" pos:end="59:49">s-&gt;codeblock[i].width</argument> , <argument pos:start="59:53" pos:end="59:59">tmp &lt; <literal type="number" pos:start="59:59" pos:end="59:59">1</literal></argument>, <argument pos:start="59:62" pos:end="59:88"><literal type="string" pos:start="59:62" pos:end="59:88">"codeblock width invalid\n"</literal></argument>)</argument_list></macro>

                <macro pos:start="61:17" pos:end="61:90"><name pos:start="61:17" pos:end="61:27">CHECKEDREAD</name><argument_list pos:start="61:28" pos:end="61:90">(<argument pos:start="61:29" pos:end="61:50">s-&gt;codeblock[i].height</argument>, <argument pos:start="61:53" pos:end="61:59">tmp &lt; <literal type="number" pos:start="61:59" pos:end="61:59">1</literal></argument>, <argument pos:start="61:62" pos:end="61:89"><literal type="string" pos:start="61:62" pos:end="61:89">"codeblock height invalid\n"</literal></argument>)</argument_list></macro>

            </block_content>}</block></for>



            <macro pos:start="67:13" pos:end="67:79"><name pos:start="67:13" pos:end="67:23">CHECKEDREAD</name><argument_list pos:start="67:24" pos:end="67:79">(<argument pos:start="67:25" pos:end="67:41">s-&gt;codeblock_mode</argument>, <argument pos:start="67:44" pos:end="67:50">tmp &gt; <literal type="number" pos:start="67:50" pos:end="67:50">1</literal></argument>, <argument pos:start="67:53" pos:end="67:78"><literal type="string" pos:start="67:53" pos:end="67:78">"unknown codeblock mode\n"</literal></argument>)</argument_list></macro>

        </block_content>}</block></if> <else pos:start="69:11" pos:end="73:67">else<block type="pseudo" pos:start="71:13" pos:end="73:67"><block_content pos:start="71:13" pos:end="73:67">

            <for pos:start="71:13" pos:end="73:67">for <control pos:start="71:17" pos:end="71:51">(<init pos:start="71:18" pos:end="71:23"><expr pos:start="71:18" pos:end="71:22"><name pos:start="71:18" pos:end="71:18">i</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <literal type="number" pos:start="71:22" pos:end="71:22">0</literal></expr>;</init> <condition pos:start="71:25" pos:end="71:46"><expr pos:start="71:25" pos:end="71:45"><name pos:start="71:25" pos:end="71:25">i</name> <operator pos:start="71:27" pos:end="71:28">&lt;=</operator> <name pos:start="71:30" pos:end="71:45"><name pos:start="71:30" pos:end="71:30">s</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:45">wavelet_depth</name></name></expr>;</condition> <incr pos:start="71:48" pos:end="71:50"><expr pos:start="71:48" pos:end="71:50"><name pos:start="71:48" pos:end="71:48">i</name><operator pos:start="71:49" pos:end="71:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="73:17" pos:end="73:67"><block_content pos:start="73:17" pos:end="73:67">

                <expr_stmt pos:start="73:17" pos:end="73:67"><expr pos:start="73:17" pos:end="73:66"><name pos:start="73:17" pos:end="73:31"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:28">codeblock</name><index pos:start="73:29" pos:end="73:31">[<expr pos:start="73:30" pos:end="73:30"><name pos:start="73:30" pos:end="73:30">i</name></expr>]</index></name><operator pos:start="73:32" pos:end="73:32">.</operator><name pos:start="73:33" pos:end="73:37">width</name> <operator pos:start="73:39" pos:end="73:39">=</operator> <name pos:start="73:41" pos:end="73:55"><name pos:start="73:41" pos:end="73:41">s</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:52">codeblock</name><index pos:start="73:53" pos:end="73:55">[<expr pos:start="73:54" pos:end="73:54"><name pos:start="73:54" pos:end="73:54">i</name></expr>]</index></name><operator pos:start="73:56" pos:end="73:56">.</operator><name pos:start="73:57" pos:end="73:62">height</name> <operator pos:start="73:64" pos:end="73:64">=</operator> <literal type="number" pos:start="73:66" pos:end="73:66">1</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="149:5">else <block pos:start="75:12" pos:end="149:5">{<block_content pos:start="81:9" pos:end="147:9">

        <comment type="block" pos:start="77:9" pos:end="77:51">/* Slice parameters + quantization matrix*/</comment>

        <comment type="block" pos:start="79:9" pos:end="79:99">/*[DIRAC_STD] 11.3.4 Slice coding Parameters (low delay syntax only). slice_parameters() */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:55"><expr pos:start="81:9" pos:end="81:54"><name pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:19">lowdelay</name><operator pos:start="81:20" pos:end="81:20">.</operator><name pos:start="81:21" pos:end="81:25">num_x</name></name>     <operator pos:start="81:31" pos:end="81:31">=</operator> <call pos:start="81:33" pos:end="81:54"><name pos:start="81:33" pos:end="81:50">svq3_get_ue_golomb</name><argument_list pos:start="81:51" pos:end="81:54">(<argument pos:start="81:52" pos:end="81:53"><expr pos:start="81:52" pos:end="81:53"><name pos:start="81:52" pos:end="81:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:55"><expr pos:start="83:9" pos:end="83:54"><name pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:19">lowdelay</name><operator pos:start="83:20" pos:end="83:20">.</operator><name pos:start="83:21" pos:end="83:25">num_y</name></name>     <operator pos:start="83:31" pos:end="83:31">=</operator> <call pos:start="83:33" pos:end="83:54"><name pos:start="83:33" pos:end="83:50">svq3_get_ue_golomb</name><argument_list pos:start="83:51" pos:end="83:54">(<argument pos:start="83:52" pos:end="83:53"><expr pos:start="83:52" pos:end="83:53"><name pos:start="83:52" pos:end="83:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:55"><expr pos:start="85:9" pos:end="85:54"><name pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:19">lowdelay</name><operator pos:start="85:20" pos:end="85:20">.</operator><name pos:start="85:21" pos:end="85:25">bytes</name><operator pos:start="85:26" pos:end="85:26">.</operator><name pos:start="85:27" pos:end="85:29">num</name></name> <operator pos:start="85:31" pos:end="85:31">=</operator> <call pos:start="85:33" pos:end="85:54"><name pos:start="85:33" pos:end="85:50">svq3_get_ue_golomb</name><argument_list pos:start="85:51" pos:end="85:54">(<argument pos:start="85:52" pos:end="85:53"><expr pos:start="85:52" pos:end="85:53"><name pos:start="85:52" pos:end="85:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:55"><expr pos:start="87:9" pos:end="87:54"><name pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:19">lowdelay</name><operator pos:start="87:20" pos:end="87:20">.</operator><name pos:start="87:21" pos:end="87:25">bytes</name><operator pos:start="87:26" pos:end="87:26">.</operator><name pos:start="87:27" pos:end="87:29">den</name></name> <operator pos:start="87:31" pos:end="87:31">=</operator> <call pos:start="87:33" pos:end="87:54"><name pos:start="87:33" pos:end="87:50">svq3_get_ue_golomb</name><argument_list pos:start="87:51" pos:end="87:54">(<argument pos:start="87:52" pos:end="87:53"><expr pos:start="87:52" pos:end="87:53"><name pos:start="87:52" pos:end="87:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:39">(<expr pos:start="91:13" pos:end="91:38"><name pos:start="91:13" pos:end="91:33"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:23">lowdelay</name><operator pos:start="91:24" pos:end="91:24">.</operator><name pos:start="91:25" pos:end="91:29">bytes</name><operator pos:start="91:30" pos:end="91:30">.</operator><name pos:start="91:31" pos:end="91:33">den</name></name> <operator pos:start="91:35" pos:end="91:36">&lt;=</operator> <literal type="number" pos:start="91:38" pos:end="91:38">0</literal></expr>)</condition> <block pos:start="91:41" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:39">

            <expr_stmt pos:start="93:13" pos:end="93:73"><expr pos:start="93:13" pos:end="93:72"><call pos:start="93:13" pos:end="93:72"><name pos:start="93:13" pos:end="93:18">av_log</name><argument_list pos:start="93:19" pos:end="93:72">(<argument pos:start="93:20" pos:end="93:27"><expr pos:start="93:20" pos:end="93:27"><name pos:start="93:20" pos:end="93:27"><name pos:start="93:20" pos:end="93:20">s</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:27">avctx</name></name></expr></argument>,<argument pos:start="93:29" pos:end="93:40"><expr pos:start="93:29" pos:end="93:40"><name pos:start="93:29" pos:end="93:40">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="93:42" pos:end="93:71"><expr pos:start="93:42" pos:end="93:71"><literal type="string" pos:start="93:42" pos:end="93:71">"Invalid lowdelay.bytes.den\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:39">return <expr pos:start="95:20" pos:end="95:38"><name pos:start="95:20" pos:end="95:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="101:9" pos:end="101:89">/* [DIRAC_STD] 11.3.5 Quantisation matrices (low-delay syntax). quant_matrix() */</comment>

        <if_stmt pos:start="103:9" pos:end="147:9"><if pos:start="103:9" pos:end="121:9">if <condition pos:start="103:12" pos:end="103:26">(<expr pos:start="103:13" pos:end="103:25"><call pos:start="103:13" pos:end="103:25"><name pos:start="103:13" pos:end="103:21">get_bits1</name><argument_list pos:start="103:22" pos:end="103:25">(<argument pos:start="103:23" pos:end="103:24"><expr pos:start="103:23" pos:end="103:24"><name pos:start="103:23" pos:end="103:24">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:28" pos:end="121:9">{<block_content pos:start="105:13" pos:end="119:13">

            <expr_stmt pos:start="105:13" pos:end="105:89"><expr pos:start="105:13" pos:end="105:88"><call pos:start="105:13" pos:end="105:88"><name pos:start="105:13" pos:end="105:18">av_log</name><argument_list pos:start="105:19" pos:end="105:88">(<argument pos:start="105:20" pos:end="105:27"><expr pos:start="105:20" pos:end="105:27"><name pos:start="105:20" pos:end="105:27"><name pos:start="105:20" pos:end="105:20">s</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:27">avctx</name></name></expr></argument>,<argument pos:start="105:29" pos:end="105:40"><expr pos:start="105:29" pos:end="105:40"><name pos:start="105:29" pos:end="105:40">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="105:42" pos:end="105:87"><expr pos:start="105:42" pos:end="105:87"><literal type="string" pos:start="105:42" pos:end="105:87">"Low Delay: Has Custom Quantization Matrix!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="107:13" pos:end="107:44">/* custom quantization matrix */</comment>

            <expr_stmt pos:start="109:13" pos:end="109:61"><expr pos:start="109:13" pos:end="109:60"><name pos:start="109:13" pos:end="109:35"><name pos:start="109:13" pos:end="109:13">s</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:23">lowdelay</name><operator pos:start="109:24" pos:end="109:24">.</operator><name pos:start="109:25" pos:end="109:29">quant</name><index pos:start="109:30" pos:end="109:32">[<expr pos:start="109:31" pos:end="109:31"><literal type="number" pos:start="109:31" pos:end="109:31">0</literal></expr>]</index><index pos:start="109:33" pos:end="109:35">[<expr pos:start="109:34" pos:end="109:34"><literal type="number" pos:start="109:34" pos:end="109:34">0</literal></expr>]</index></name> <operator pos:start="109:37" pos:end="109:37">=</operator> <call pos:start="109:39" pos:end="109:60"><name pos:start="109:39" pos:end="109:56">svq3_get_ue_golomb</name><argument_list pos:start="109:57" pos:end="109:60">(<argument pos:start="109:58" pos:end="109:59"><expr pos:start="109:58" pos:end="109:59"><name pos:start="109:58" pos:end="109:59">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="111:13" pos:end="119:13">for <control pos:start="111:17" pos:end="111:62">(<init pos:start="111:18" pos:end="111:27"><expr pos:start="111:18" pos:end="111:26"><name pos:start="111:18" pos:end="111:22">level</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <literal type="number" pos:start="111:26" pos:end="111:26">0</literal></expr>;</init> <condition pos:start="111:29" pos:end="111:53"><expr pos:start="111:29" pos:end="111:52"><name pos:start="111:29" pos:end="111:33">level</name> <operator pos:start="111:35" pos:end="111:35">&lt;</operator> <name pos:start="111:37" pos:end="111:52"><name pos:start="111:37" pos:end="111:37">s</name><operator pos:start="111:38" pos:end="111:39">-&gt;</operator><name pos:start="111:40" pos:end="111:52">wavelet_depth</name></name></expr>;</condition> <incr pos:start="111:55" pos:end="111:61"><expr pos:start="111:55" pos:end="111:61"><name pos:start="111:55" pos:end="111:59">level</name><operator pos:start="111:60" pos:end="111:61">++</operator></expr></incr>)</control> <block pos:start="111:64" pos:end="119:13">{<block_content pos:start="113:17" pos:end="117:69">

                <expr_stmt pos:start="113:17" pos:end="113:69"><expr pos:start="113:17" pos:end="113:68"><name pos:start="113:17" pos:end="113:43"><name pos:start="113:17" pos:end="113:17">s</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:27">lowdelay</name><operator pos:start="113:28" pos:end="113:28">.</operator><name pos:start="113:29" pos:end="113:33">quant</name><index pos:start="113:34" pos:end="113:40">[<expr pos:start="113:35" pos:end="113:39"><name pos:start="113:35" pos:end="113:39">level</name></expr>]</index><index pos:start="113:41" pos:end="113:43">[<expr pos:start="113:42" pos:end="113:42"><literal type="number" pos:start="113:42" pos:end="113:42">1</literal></expr>]</index></name> <operator pos:start="113:45" pos:end="113:45">=</operator> <call pos:start="113:47" pos:end="113:68"><name pos:start="113:47" pos:end="113:64">svq3_get_ue_golomb</name><argument_list pos:start="113:65" pos:end="113:68">(<argument pos:start="113:66" pos:end="113:67"><expr pos:start="113:66" pos:end="113:67"><name pos:start="113:66" pos:end="113:67">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:69"><expr pos:start="115:17" pos:end="115:68"><name pos:start="115:17" pos:end="115:43"><name pos:start="115:17" pos:end="115:17">s</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:27">lowdelay</name><operator pos:start="115:28" pos:end="115:28">.</operator><name pos:start="115:29" pos:end="115:33">quant</name><index pos:start="115:34" pos:end="115:40">[<expr pos:start="115:35" pos:end="115:39"><name pos:start="115:35" pos:end="115:39">level</name></expr>]</index><index pos:start="115:41" pos:end="115:43">[<expr pos:start="115:42" pos:end="115:42"><literal type="number" pos:start="115:42" pos:end="115:42">2</literal></expr>]</index></name> <operator pos:start="115:45" pos:end="115:45">=</operator> <call pos:start="115:47" pos:end="115:68"><name pos:start="115:47" pos:end="115:64">svq3_get_ue_golomb</name><argument_list pos:start="115:65" pos:end="115:68">(<argument pos:start="115:66" pos:end="115:67"><expr pos:start="115:66" pos:end="115:67"><name pos:start="115:66" pos:end="115:67">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:69"><expr pos:start="117:17" pos:end="117:68"><name pos:start="117:17" pos:end="117:43"><name pos:start="117:17" pos:end="117:17">s</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:27">lowdelay</name><operator pos:start="117:28" pos:end="117:28">.</operator><name pos:start="117:29" pos:end="117:33">quant</name><index pos:start="117:34" pos:end="117:40">[<expr pos:start="117:35" pos:end="117:39"><name pos:start="117:35" pos:end="117:39">level</name></expr>]</index><index pos:start="117:41" pos:end="117:43">[<expr pos:start="117:42" pos:end="117:42"><literal type="number" pos:start="117:42" pos:end="117:42">3</literal></expr>]</index></name> <operator pos:start="117:45" pos:end="117:45">=</operator> <call pos:start="117:47" pos:end="117:68"><name pos:start="117:47" pos:end="117:64">svq3_get_ue_golomb</name><argument_list pos:start="117:65" pos:end="117:68">(<argument pos:start="117:66" pos:end="117:67"><expr pos:start="117:66" pos:end="117:67"><name pos:start="117:66" pos:end="117:67">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="147:9">else <block pos:start="121:16" pos:end="147:9">{<block_content pos:start="123:13" pos:end="145:17">

            <if_stmt pos:start="123:13" pos:end="129:13"><if pos:start="123:13" pos:end="129:13">if <condition pos:start="123:16" pos:end="123:37">(<expr pos:start="123:17" pos:end="123:36"><name pos:start="123:17" pos:end="123:32"><name pos:start="123:17" pos:end="123:17">s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:32">wavelet_depth</name></name> <operator pos:start="123:34" pos:end="123:34">&gt;</operator> <literal type="number" pos:start="123:36" pos:end="123:36">4</literal></expr>)</condition> <block pos:start="123:39" pos:end="129:13">{<block_content pos:start="125:17" pos:end="127:43">

                <expr_stmt pos:start="125:17" pos:end="125:123"><expr pos:start="125:17" pos:end="125:122"><call pos:start="125:17" pos:end="125:122"><name pos:start="125:17" pos:end="125:22">av_log</name><argument_list pos:start="125:23" pos:end="125:122">(<argument pos:start="125:24" pos:end="125:31"><expr pos:start="125:24" pos:end="125:31"><name pos:start="125:24" pos:end="125:31"><name pos:start="125:24" pos:end="125:24">s</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:31">avctx</name></name></expr></argument>,<argument pos:start="125:33" pos:end="125:44"><expr pos:start="125:33" pos:end="125:44"><name pos:start="125:33" pos:end="125:44">AV_LOG_ERROR</name></expr></argument>,<argument pos:start="125:46" pos:end="125:103"><expr pos:start="125:46" pos:end="125:103"><literal type="string" pos:start="125:46" pos:end="125:103">"Mandatory custom low delay matrix missing for depth %d\n"</literal></expr></argument>, <argument pos:start="125:106" pos:end="125:121"><expr pos:start="125:106" pos:end="125:121"><name pos:start="125:106" pos:end="125:121"><name pos:start="125:106" pos:end="125:106">s</name><operator pos:start="125:107" pos:end="125:108">-&gt;</operator><name pos:start="125:109" pos:end="125:121">wavelet_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="127:17" pos:end="127:43">return <expr pos:start="127:24" pos:end="127:42"><name pos:start="127:24" pos:end="127:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="131:13" pos:end="131:45">/* default quantization matrix */</comment>

            <for pos:start="133:13" pos:end="145:17">for <control pos:start="133:17" pos:end="133:62">(<init pos:start="133:18" pos:end="133:27"><expr pos:start="133:18" pos:end="133:26"><name pos:start="133:18" pos:end="133:22">level</name> <operator pos:start="133:24" pos:end="133:24">=</operator> <literal type="number" pos:start="133:26" pos:end="133:26">0</literal></expr>;</init> <condition pos:start="133:29" pos:end="133:53"><expr pos:start="133:29" pos:end="133:52"><name pos:start="133:29" pos:end="133:33">level</name> <operator pos:start="133:35" pos:end="133:35">&lt;</operator> <name pos:start="133:37" pos:end="133:52"><name pos:start="133:37" pos:end="133:37">s</name><operator pos:start="133:38" pos:end="133:39">-&gt;</operator><name pos:start="133:40" pos:end="133:52">wavelet_depth</name></name></expr>;</condition> <incr pos:start="133:55" pos:end="133:61"><expr pos:start="133:55" pos:end="133:61"><name pos:start="133:55" pos:end="133:59">level</name><operator pos:start="133:60" pos:end="133:61">++</operator></expr></incr>)</control><block type="pseudo" pos:start="135:17" pos:end="145:17"><block_content pos:start="135:17" pos:end="145:17">

                <for pos:start="135:17" pos:end="145:17">for <control pos:start="135:21" pos:end="135:39">(<init pos:start="135:22" pos:end="135:27"><expr pos:start="135:22" pos:end="135:26"><name pos:start="135:22" pos:end="135:22">i</name> <operator pos:start="135:24" pos:end="135:24">=</operator> <literal type="number" pos:start="135:26" pos:end="135:26">0</literal></expr>;</init> <condition pos:start="135:29" pos:end="135:34"><expr pos:start="135:29" pos:end="135:33"><name pos:start="135:29" pos:end="135:29">i</name> <operator pos:start="135:31" pos:end="135:31">&lt;</operator> <literal type="number" pos:start="135:33" pos:end="135:33">4</literal></expr>;</condition> <incr pos:start="135:36" pos:end="135:38"><expr pos:start="135:36" pos:end="135:38"><name pos:start="135:36" pos:end="135:36">i</name><operator pos:start="135:37" pos:end="135:38">++</operator></expr></incr>)</control> <block pos:start="135:41" pos:end="145:17">{<block_content pos:start="137:21" pos:end="143:86">

                    <expr_stmt pos:start="137:21" pos:end="137:89"><expr pos:start="137:21" pos:end="137:88"><name pos:start="137:21" pos:end="137:47"><name pos:start="137:21" pos:end="137:21">s</name><operator pos:start="137:22" pos:end="137:23">-&gt;</operator><name pos:start="137:24" pos:end="137:31">lowdelay</name><operator pos:start="137:32" pos:end="137:32">.</operator><name pos:start="137:33" pos:end="137:37">quant</name><index pos:start="137:38" pos:end="137:44">[<expr pos:start="137:39" pos:end="137:43"><name pos:start="137:39" pos:end="137:43">level</name></expr>]</index><index pos:start="137:45" pos:end="137:47">[<expr pos:start="137:46" pos:end="137:46"><name pos:start="137:46" pos:end="137:46">i</name></expr>]</index></name> <operator pos:start="137:49" pos:end="137:49">=</operator> <name pos:start="137:51" pos:end="137:88"><name pos:start="137:51" pos:end="137:62">default_qmat</name><index pos:start="137:63" pos:end="137:78">[<expr pos:start="137:64" pos:end="137:77"><name pos:start="137:64" pos:end="137:77"><name pos:start="137:64" pos:end="137:64">s</name><operator pos:start="137:65" pos:end="137:66">-&gt;</operator><name pos:start="137:67" pos:end="137:77">wavelet_idx</name></name></expr>]</index><index pos:start="137:79" pos:end="137:85">[<expr pos:start="137:80" pos:end="137:84"><name pos:start="137:80" pos:end="137:84">level</name></expr>]</index><index pos:start="137:86" pos:end="137:88">[<expr pos:start="137:87" pos:end="137:87"><name pos:start="137:87" pos:end="137:87">i</name></expr>]</index></name></expr>;</expr_stmt>

                    <comment type="block" pos:start="139:21" pos:end="139:73">/* haar with no shift differs for different depths */</comment>

                    <if_stmt pos:start="141:21" pos:end="143:86"><if pos:start="141:21" pos:end="143:86">if <condition pos:start="141:24" pos:end="141:44">(<expr pos:start="141:25" pos:end="141:43"><name pos:start="141:25" pos:end="141:38"><name pos:start="141:25" pos:end="141:25">s</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:38">wavelet_idx</name></name> <operator pos:start="141:40" pos:end="141:41">==</operator> <literal type="number" pos:start="141:43" pos:end="141:43">3</literal></expr>)</condition><block type="pseudo" pos:start="143:25" pos:end="143:86"><block_content pos:start="143:25" pos:end="143:86">

                        <expr_stmt pos:start="143:25" pos:end="143:86"><expr pos:start="143:25" pos:end="143:85"><name pos:start="143:25" pos:end="143:51"><name pos:start="143:25" pos:end="143:25">s</name><operator pos:start="143:26" pos:end="143:27">-&gt;</operator><name pos:start="143:28" pos:end="143:35">lowdelay</name><operator pos:start="143:36" pos:end="143:36">.</operator><name pos:start="143:37" pos:end="143:41">quant</name><index pos:start="143:42" pos:end="143:48">[<expr pos:start="143:43" pos:end="143:47"><name pos:start="143:43" pos:end="143:47">level</name></expr>]</index><index pos:start="143:49" pos:end="143:51">[<expr pos:start="143:50" pos:end="143:50"><name pos:start="143:50" pos:end="143:50">i</name></expr>]</index></name> <operator pos:start="143:53" pos:end="143:54">+=</operator> <literal type="number" pos:start="143:56" pos:end="143:56">4</literal><operator pos:start="143:57" pos:end="143:57">*</operator><operator pos:start="143:58" pos:end="143:58">(</operator><name pos:start="143:59" pos:end="143:74"><name pos:start="143:59" pos:end="143:59">s</name><operator pos:start="143:60" pos:end="143:61">-&gt;</operator><name pos:start="143:62" pos:end="143:74">wavelet_depth</name></name><operator pos:start="143:75" pos:end="143:75">-</operator><literal type="number" pos:start="143:76" pos:end="143:78">1</literal> <operator pos:start="143:78" pos:end="143:78">-</operator> <name pos:start="143:80" pos:end="143:84">level</name><operator pos:start="143:85" pos:end="143:85">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for></block_content></block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="151:5" pos:end="151:13">return <expr pos:start="151:12" pos:end="151:12"><literal type="number" pos:start="151:12" pos:end="151:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
