<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19186.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:14">bdrv_swap</name><parameter_list pos:start="1:15" pos:end="1:66">(<parameter pos:start="1:16" pos:end="1:39"><decl pos:start="1:16" pos:end="1:39"><type pos:start="1:16" pos:end="1:39"><name pos:start="1:16" pos:end="1:31">BlockDriverState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">bs_new</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:65"><decl pos:start="1:42" pos:end="1:65"><type pos:start="1:42" pos:end="1:65"><name pos:start="1:42" pos:end="1:57">BlockDriverState</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:65">bs_old</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:24">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name></type> <name pos:start="5:22" pos:end="5:24">tmp</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="15:7">/* The code needs to swap the node_name but simply swapping node_list won't

     * work so first remove the nodes from the graph list, do the swap then

     * insert them back if needed.

     */</comment>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:37">(<expr pos:start="17:9" pos:end="17:36"><name pos:start="17:9" pos:end="17:28"><name pos:start="17:9" pos:end="17:14">bs_new</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:25">node_name</name><index pos:start="17:26" pos:end="17:28">[<expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr>]</index></name> <operator pos:start="17:30" pos:end="17:31">!=</operator> <literal type="char" pos:start="17:33" pos:end="17:36">'\0'</literal></expr>)</condition> <block pos:start="17:39" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:61">

        <expr_stmt pos:start="19:9" pos:end="19:61"><expr pos:start="19:9" pos:end="19:60"><call pos:start="19:9" pos:end="19:60"><name pos:start="19:9" pos:end="19:21">QTAILQ_REMOVE</name><argument_list pos:start="19:22" pos:end="19:60">(<argument pos:start="19:23" pos:end="19:40"><expr pos:start="19:23" pos:end="19:40"><operator pos:start="19:23" pos:end="19:23">&amp;</operator><name pos:start="19:24" pos:end="19:40">graph_bdrv_states</name></expr></argument>, <argument pos:start="19:43" pos:end="19:48"><expr pos:start="19:43" pos:end="19:48"><name pos:start="19:43" pos:end="19:48">bs_new</name></expr></argument>, <argument pos:start="19:51" pos:end="19:59"><expr pos:start="19:51" pos:end="19:59"><name pos:start="19:51" pos:end="19:59">node_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:37">(<expr pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:28"><name pos:start="23:9" pos:end="23:14">bs_old</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:25">node_name</name><index pos:start="23:26" pos:end="23:28">[<expr pos:start="23:27" pos:end="23:27"><literal type="number" pos:start="23:27" pos:end="23:27">0</literal></expr>]</index></name> <operator pos:start="23:30" pos:end="23:31">!=</operator> <literal type="char" pos:start="23:33" pos:end="23:36">'\0'</literal></expr>)</condition> <block pos:start="23:39" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:61">

        <expr_stmt pos:start="25:9" pos:end="25:61"><expr pos:start="25:9" pos:end="25:60"><call pos:start="25:9" pos:end="25:60"><name pos:start="25:9" pos:end="25:21">QTAILQ_REMOVE</name><argument_list pos:start="25:22" pos:end="25:60">(<argument pos:start="25:23" pos:end="25:40"><expr pos:start="25:23" pos:end="25:40"><operator pos:start="25:23" pos:end="25:23">&amp;</operator><name pos:start="25:24" pos:end="25:40">graph_bdrv_states</name></expr></argument>, <argument pos:start="25:43" pos:end="25:48"><expr pos:start="25:43" pos:end="25:48"><name pos:start="25:43" pos:end="25:48">bs_old</name></expr></argument>, <argument pos:start="25:51" pos:end="25:59"><expr pos:start="25:51" pos:end="25:59"><name pos:start="25:51" pos:end="25:59">node_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:76">/* bs_new must be anonymous and shouldn't have anything fancy enabled */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:43"><expr pos:start="33:5" pos:end="33:42"><call pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:10">assert</name><argument_list pos:start="33:11" pos:end="33:42">(<argument pos:start="33:12" pos:end="33:41"><expr pos:start="33:12" pos:end="33:41"><name pos:start="33:12" pos:end="33:33"><name pos:start="33:12" pos:end="33:17">bs_new</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:30">device_name</name><index pos:start="33:31" pos:end="33:33">[<expr pos:start="33:32" pos:end="33:32"><literal type="number" pos:start="33:32" pos:end="33:32">0</literal></expr>]</index></name> <operator pos:start="33:35" pos:end="33:36">==</operator> <literal type="char" pos:start="33:38" pos:end="33:41">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:48"><expr pos:start="35:5" pos:end="35:47"><call pos:start="35:5" pos:end="35:47"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:47">(<argument pos:start="35:12" pos:end="35:46"><expr pos:start="35:12" pos:end="35:46"><call pos:start="35:12" pos:end="35:46"><name pos:start="35:12" pos:end="35:22">QLIST_EMPTY</name><argument_list pos:start="35:23" pos:end="35:46">(<argument pos:start="35:24" pos:end="35:45"><expr pos:start="35:24" pos:end="35:45"><operator pos:start="35:24" pos:end="35:24">&amp;</operator><name pos:start="35:25" pos:end="35:45"><name pos:start="35:25" pos:end="35:30">bs_new</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:45">dirty_bitmaps</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><call pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:10">assert</name><argument_list pos:start="37:11" pos:end="37:31">(<argument pos:start="37:12" pos:end="37:30"><expr pos:start="37:12" pos:end="37:30"><name pos:start="37:12" pos:end="37:22"><name pos:start="37:12" pos:end="37:17">bs_new</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:22">job</name></name> <operator pos:start="37:24" pos:end="37:25">==</operator> <name pos:start="37:27" pos:end="37:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:32"><expr pos:start="39:5" pos:end="39:31"><call pos:start="39:5" pos:end="39:31"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:31">(<argument pos:start="39:12" pos:end="39:30"><expr pos:start="39:12" pos:end="39:30"><name pos:start="39:12" pos:end="39:22"><name pos:start="39:12" pos:end="39:17">bs_new</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:22">dev</name></name> <operator pos:start="39:24" pos:end="39:25">==</operator> <name pos:start="39:27" pos:end="39:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:45"><expr pos:start="41:5" pos:end="41:44"><call pos:start="41:5" pos:end="41:44"><name pos:start="41:5" pos:end="41:10">assert</name><argument_list pos:start="41:11" pos:end="41:44">(<argument pos:start="41:12" pos:end="41:43"><expr pos:start="41:12" pos:end="41:43"><call pos:start="41:12" pos:end="41:43"><name pos:start="41:12" pos:end="41:35">bdrv_op_blocker_is_empty</name><argument_list pos:start="41:36" pos:end="41:43">(<argument pos:start="41:37" pos:end="41:42"><expr pos:start="41:37" pos:end="41:42"><name pos:start="41:37" pos:end="41:42">bs_new</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:47"><expr pos:start="43:5" pos:end="43:46"><call pos:start="43:5" pos:end="43:46"><name pos:start="43:5" pos:end="43:10">assert</name><argument_list pos:start="43:11" pos:end="43:46">(<argument pos:start="43:12" pos:end="43:45"><expr pos:start="43:12" pos:end="43:45"><name pos:start="43:12" pos:end="43:36"><name pos:start="43:12" pos:end="43:17">bs_new</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:36">io_limits_enabled</name></name> <operator pos:start="43:38" pos:end="43:39">==</operator> <name pos:start="43:41" pos:end="43:45">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:58"><expr pos:start="45:5" pos:end="45:57"><call pos:start="45:5" pos:end="45:57"><name pos:start="45:5" pos:end="45:10">assert</name><argument_list pos:start="45:11" pos:end="45:57">(<argument pos:start="45:12" pos:end="45:56"><expr pos:start="45:12" pos:end="45:56"><operator pos:start="45:12" pos:end="45:12">!</operator><call pos:start="45:13" pos:end="45:56"><name pos:start="45:13" pos:end="45:31">throttle_have_timer</name><argument_list pos:start="45:32" pos:end="45:56">(<argument pos:start="45:33" pos:end="45:55"><expr pos:start="45:33" pos:end="45:55"><operator pos:start="45:33" pos:end="45:33">&amp;</operator><name pos:start="45:34" pos:end="45:55"><name pos:start="45:34" pos:end="45:39">bs_new</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:55">throttle_state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:18"><expr pos:start="49:5" pos:end="49:17"><name pos:start="49:5" pos:end="49:7">tmp</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <operator pos:start="49:11" pos:end="49:11">*</operator><name pos:start="49:12" pos:end="49:17">bs_new</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:22"><expr pos:start="51:5" pos:end="51:21"><operator pos:start="51:5" pos:end="51:5">*</operator><name pos:start="51:6" pos:end="51:11">bs_new</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <operator pos:start="51:15" pos:end="51:15">*</operator><name pos:start="51:16" pos:end="51:21">bs_old</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:18"><expr pos:start="53:5" pos:end="53:17"><operator pos:start="53:5" pos:end="53:5">*</operator><name pos:start="53:6" pos:end="53:11">bs_old</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <name pos:start="53:15" pos:end="53:17">tmp</name></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:74">/* there are some fields that should not be swapped, move them back */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><call pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:28">bdrv_move_feature_fields</name><argument_list pos:start="59:29" pos:end="59:42">(<argument pos:start="59:30" pos:end="59:33"><expr pos:start="59:30" pos:end="59:33"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:33">tmp</name></expr></argument>, <argument pos:start="59:36" pos:end="59:41"><expr pos:start="59:36" pos:end="59:41"><name pos:start="59:36" pos:end="59:41">bs_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:45"><expr pos:start="61:5" pos:end="61:44"><call pos:start="61:5" pos:end="61:44"><name pos:start="61:5" pos:end="61:28">bdrv_move_feature_fields</name><argument_list pos:start="61:29" pos:end="61:44">(<argument pos:start="61:30" pos:end="61:35"><expr pos:start="61:30" pos:end="61:35"><name pos:start="61:30" pos:end="61:35">bs_old</name></expr></argument>, <argument pos:start="61:38" pos:end="61:43"><expr pos:start="61:38" pos:end="61:43"><name pos:start="61:38" pos:end="61:43">bs_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><call pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:28">bdrv_move_feature_fields</name><argument_list pos:start="63:29" pos:end="63:42">(<argument pos:start="63:30" pos:end="63:35"><expr pos:start="63:30" pos:end="63:35"><name pos:start="63:30" pos:end="63:35">bs_new</name></expr></argument>, <argument pos:start="63:38" pos:end="63:41"><expr pos:start="63:38" pos:end="63:41"><operator pos:start="63:38" pos:end="63:38">&amp;</operator><name pos:start="63:39" pos:end="63:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:66">/* bs_new shouldn't be in bdrv_states even after the swap!  */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><call pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:10">assert</name><argument_list pos:start="69:11" pos:end="69:42">(<argument pos:start="69:12" pos:end="69:41"><expr pos:start="69:12" pos:end="69:41"><name pos:start="69:12" pos:end="69:33"><name pos:start="69:12" pos:end="69:17">bs_new</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:30">device_name</name><index pos:start="69:31" pos:end="69:33">[<expr pos:start="69:32" pos:end="69:32"><literal type="number" pos:start="69:32" pos:end="69:32">0</literal></expr>]</index></name> <operator pos:start="69:35" pos:end="69:36">==</operator> <literal type="char" pos:start="69:38" pos:end="69:41">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:70">/* Check a few fields that should remain attached to the device */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:32"><expr pos:start="75:5" pos:end="75:31"><call pos:start="75:5" pos:end="75:31"><name pos:start="75:5" pos:end="75:10">assert</name><argument_list pos:start="75:11" pos:end="75:31">(<argument pos:start="75:12" pos:end="75:30"><expr pos:start="75:12" pos:end="75:30"><name pos:start="75:12" pos:end="75:22"><name pos:start="75:12" pos:end="75:17">bs_new</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:22">dev</name></name> <operator pos:start="75:24" pos:end="75:25">==</operator> <name pos:start="75:27" pos:end="75:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:32"><expr pos:start="77:5" pos:end="77:31"><call pos:start="77:5" pos:end="77:31"><name pos:start="77:5" pos:end="77:10">assert</name><argument_list pos:start="77:11" pos:end="77:31">(<argument pos:start="77:12" pos:end="77:30"><expr pos:start="77:12" pos:end="77:30"><name pos:start="77:12" pos:end="77:22"><name pos:start="77:12" pos:end="77:17">bs_new</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:22">job</name></name> <operator pos:start="77:24" pos:end="77:25">==</operator> <name pos:start="77:27" pos:end="77:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:45"><expr pos:start="79:5" pos:end="79:44"><call pos:start="79:5" pos:end="79:44"><name pos:start="79:5" pos:end="79:10">assert</name><argument_list pos:start="79:11" pos:end="79:44">(<argument pos:start="79:12" pos:end="79:43"><expr pos:start="79:12" pos:end="79:43"><call pos:start="79:12" pos:end="79:43"><name pos:start="79:12" pos:end="79:35">bdrv_op_blocker_is_empty</name><argument_list pos:start="79:36" pos:end="79:43">(<argument pos:start="79:37" pos:end="79:42"><expr pos:start="79:37" pos:end="79:42"><name pos:start="79:37" pos:end="79:42">bs_new</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:47"><expr pos:start="81:5" pos:end="81:46"><call pos:start="81:5" pos:end="81:46"><name pos:start="81:5" pos:end="81:10">assert</name><argument_list pos:start="81:11" pos:end="81:46">(<argument pos:start="81:12" pos:end="81:45"><expr pos:start="81:12" pos:end="81:45"><name pos:start="81:12" pos:end="81:36"><name pos:start="81:12" pos:end="81:17">bs_new</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:36">io_limits_enabled</name></name> <operator pos:start="81:38" pos:end="81:39">==</operator> <name pos:start="81:41" pos:end="81:45">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:58"><expr pos:start="83:5" pos:end="83:57"><call pos:start="83:5" pos:end="83:57"><name pos:start="83:5" pos:end="83:10">assert</name><argument_list pos:start="83:11" pos:end="83:57">(<argument pos:start="83:12" pos:end="83:56"><expr pos:start="83:12" pos:end="83:56"><operator pos:start="83:12" pos:end="83:12">!</operator><call pos:start="83:13" pos:end="83:56"><name pos:start="83:13" pos:end="83:31">throttle_have_timer</name><argument_list pos:start="83:32" pos:end="83:56">(<argument pos:start="83:33" pos:end="83:55"><expr pos:start="83:33" pos:end="83:55"><operator pos:start="83:33" pos:end="83:33">&amp;</operator><name pos:start="83:34" pos:end="83:55"><name pos:start="83:34" pos:end="83:39">bs_new</name><operator pos:start="83:40" pos:end="83:41">-&gt;</operator><name pos:start="83:42" pos:end="83:55">throttle_state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:66">/* insert the nodes back into the graph node list if needed */</comment>

    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:37">(<expr pos:start="89:9" pos:end="89:36"><name pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:14">bs_new</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:25">node_name</name><index pos:start="89:26" pos:end="89:28">[<expr pos:start="89:27" pos:end="89:27"><literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr>]</index></name> <operator pos:start="89:30" pos:end="89:31">!=</operator> <literal type="char" pos:start="89:33" pos:end="89:36">'\0'</literal></expr>)</condition> <block pos:start="89:39" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:66">

        <expr_stmt pos:start="91:9" pos:end="91:66"><expr pos:start="91:9" pos:end="91:65"><call pos:start="91:9" pos:end="91:65"><name pos:start="91:9" pos:end="91:26">QTAILQ_INSERT_TAIL</name><argument_list pos:start="91:27" pos:end="91:65">(<argument pos:start="91:28" pos:end="91:45"><expr pos:start="91:28" pos:end="91:45"><operator pos:start="91:28" pos:end="91:28">&amp;</operator><name pos:start="91:29" pos:end="91:45">graph_bdrv_states</name></expr></argument>, <argument pos:start="91:48" pos:end="91:53"><expr pos:start="91:48" pos:end="91:53"><name pos:start="91:48" pos:end="91:53">bs_new</name></expr></argument>, <argument pos:start="91:56" pos:end="91:64"><expr pos:start="91:56" pos:end="91:64"><name pos:start="91:56" pos:end="91:64">node_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:37">(<expr pos:start="95:9" pos:end="95:36"><name pos:start="95:9" pos:end="95:28"><name pos:start="95:9" pos:end="95:14">bs_old</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:25">node_name</name><index pos:start="95:26" pos:end="95:28">[<expr pos:start="95:27" pos:end="95:27"><literal type="number" pos:start="95:27" pos:end="95:27">0</literal></expr>]</index></name> <operator pos:start="95:30" pos:end="95:31">!=</operator> <literal type="char" pos:start="95:33" pos:end="95:36">'\0'</literal></expr>)</condition> <block pos:start="95:39" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:66">

        <expr_stmt pos:start="97:9" pos:end="97:66"><expr pos:start="97:9" pos:end="97:65"><call pos:start="97:9" pos:end="97:65"><name pos:start="97:9" pos:end="97:26">QTAILQ_INSERT_TAIL</name><argument_list pos:start="97:27" pos:end="97:65">(<argument pos:start="97:28" pos:end="97:45"><expr pos:start="97:28" pos:end="97:45"><operator pos:start="97:28" pos:end="97:28">&amp;</operator><name pos:start="97:29" pos:end="97:45">graph_bdrv_states</name></expr></argument>, <argument pos:start="97:48" pos:end="97:53"><expr pos:start="97:48" pos:end="97:53"><name pos:start="97:48" pos:end="97:53">bs_old</name></expr></argument>, <argument pos:start="97:56" pos:end="97:64"><expr pos:start="97:56" pos:end="97:64"><name pos:start="97:56" pos:end="97:64">node_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:24"><expr pos:start="103:5" pos:end="103:23"><call pos:start="103:5" pos:end="103:23"><name pos:start="103:5" pos:end="103:15">bdrv_rebind</name><argument_list pos:start="103:16" pos:end="103:23">(<argument pos:start="103:17" pos:end="103:22"><expr pos:start="103:17" pos:end="103:22"><name pos:start="103:17" pos:end="103:22">bs_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:24"><expr pos:start="105:5" pos:end="105:23"><call pos:start="105:5" pos:end="105:23"><name pos:start="105:5" pos:end="105:15">bdrv_rebind</name><argument_list pos:start="105:16" pos:end="105:23">(<argument pos:start="105:17" pos:end="105:22"><expr pos:start="105:17" pos:end="105:22"><name pos:start="105:17" pos:end="105:22">bs_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
