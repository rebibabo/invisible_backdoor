<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10319.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:43">test_native_list_integer_helper</name><parameter_list pos:start="1:44" pos:end="5:76">(<parameter pos:start="1:45" pos:end="1:70"><decl pos:start="1:45" pos:end="1:70"><type pos:start="1:45" pos:end="1:70"><name pos:start="1:45" pos:end="1:64">TestInputVisitorData</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">data</name></decl></parameter>,

                                            <parameter pos:start="3:45" pos:end="3:62"><decl pos:start="3:45" pos:end="3:62"><type pos:start="3:45" pos:end="3:62"><specifier pos:start="3:45" pos:end="3:49">const</specifier> <name pos:start="3:51" pos:end="3:54">void</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:62">unused</name></decl></parameter>,

                                            <parameter pos:start="5:45" pos:end="5:75"><decl pos:start="5:45" pos:end="5:75"><type pos:start="5:45" pos:end="5:75"><name pos:start="5:45" pos:end="5:70">UserDefNativeListUnionKind</name></type> <name pos:start="5:72" pos:end="5:75">kind</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="195:1">{<block_content pos:start="9:5" pos:end="193:45">

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:26">UserDefNativeListUnion</name> <modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:34">cvalue</name> <init pos:start="9:36" pos:end="9:41">= <expr pos:start="9:38" pos:end="9:41"><name pos:start="9:38" pos:end="9:41">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">Visitor</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:14">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">GString</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:22">gstr_list</name> <init pos:start="13:24" pos:end="13:41">= <expr pos:start="13:26" pos:end="13:41"><call pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:37">g_string_new</name><argument_list pos:start="13:38" pos:end="13:41">(<argument pos:start="13:39" pos:end="13:40"><expr pos:start="13:39" pos:end="13:40"><literal type="string" pos:start="13:39" pos:end="13:40">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:42"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">GString</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:23">gstr_union</name> <init pos:start="15:25" pos:end="15:42">= <expr pos:start="15:27" pos:end="15:42"><call pos:start="15:27" pos:end="15:42"><name pos:start="15:27" pos:end="15:38">g_string_new</name><argument_list pos:start="15:39" pos:end="15:42">(<argument pos:start="15:40" pos:end="15:41"><expr pos:start="15:40" pos:end="15:41"><literal type="string" pos:start="15:40" pos:end="15:41">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>



    <for pos:start="21:5" pos:end="31:5">for <control pos:start="21:9" pos:end="21:28">(<init pos:start="21:10" pos:end="21:15"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:10">i</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</init> <condition pos:start="21:17" pos:end="21:23"><expr pos:start="21:17" pos:end="21:22"><name pos:start="21:17" pos:end="21:17">i</name> <operator pos:start="21:19" pos:end="21:19">&lt;</operator> <literal type="number" pos:start="21:21" pos:end="21:22">32</literal></expr>;</condition> <incr pos:start="21:25" pos:end="21:27"><expr pos:start="21:25" pos:end="21:27"><name pos:start="21:25" pos:end="21:25">i</name><operator pos:start="21:26" pos:end="21:27">++</operator></expr></incr>)</control> <block pos:start="21:30" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:9">

        <expr_stmt pos:start="23:9" pos:end="23:51"><expr pos:start="23:9" pos:end="23:50"><call pos:start="23:9" pos:end="23:50"><name pos:start="23:9" pos:end="23:30">g_string_append_printf</name><argument_list pos:start="23:31" pos:end="23:50">(<argument pos:start="23:32" pos:end="23:40"><expr pos:start="23:32" pos:end="23:40"><name pos:start="23:32" pos:end="23:40">gstr_list</name></expr></argument>, <argument pos:start="23:43" pos:end="23:46"><expr pos:start="23:43" pos:end="23:46"><literal type="string" pos:start="23:43" pos:end="23:46">"%d"</literal></expr></argument>, <argument pos:start="23:49" pos:end="23:49"><expr pos:start="23:49" pos:end="23:49"><name pos:start="23:49" pos:end="23:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:20">(<expr pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:13">i</name> <operator pos:start="25:15" pos:end="25:16">!=</operator> <literal type="number" pos:start="25:18" pos:end="25:19">31</literal></expr>)</condition> <block pos:start="25:22" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:45">

            <expr_stmt pos:start="27:13" pos:end="27:45"><expr pos:start="27:13" pos:end="27:44"><call pos:start="27:13" pos:end="27:44"><name pos:start="27:13" pos:end="27:27">g_string_append</name><argument_list pos:start="27:28" pos:end="27:44">(<argument pos:start="27:29" pos:end="27:37"><expr pos:start="27:29" pos:end="27:37"><name pos:start="27:29" pos:end="27:37">gstr_list</name></expr></argument>, <argument pos:start="27:40" pos:end="27:43"><expr pos:start="27:40" pos:end="27:43"><literal type="string" pos:start="27:40" pos:end="27:43">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="33:5" pos:end="37:43"><expr pos:start="33:5" pos:end="37:42"><call pos:start="33:5" pos:end="37:42"><name pos:start="33:5" pos:end="33:26">g_string_append_printf</name><argument_list pos:start="33:27" pos:end="37:42">(<argument pos:start="33:28" pos:end="33:37"><expr pos:start="33:28" pos:end="33:37"><name pos:start="33:28" pos:end="33:37">gstr_union</name></expr></argument>,  <argument pos:start="33:41" pos:end="33:74"><expr pos:start="33:41" pos:end="33:74"><literal type="string" pos:start="33:41" pos:end="33:74">"{ 'type': '%s', 'data': [ %s ] }"</literal></expr></argument>,

                           <argument pos:start="35:28" pos:end="35:66"><expr pos:start="35:28" pos:end="35:66"><name pos:start="35:28" pos:end="35:66"><name pos:start="35:28" pos:end="35:60">UserDefNativeListUnionKind_lookup</name><index pos:start="35:61" pos:end="35:66">[<expr pos:start="35:62" pos:end="35:65"><name pos:start="35:62" pos:end="35:65">kind</name></expr>]</index></name></expr></argument>,

                           <argument pos:start="37:28" pos:end="37:41"><expr pos:start="37:28" pos:end="37:41"><name pos:start="37:28" pos:end="37:41"><name pos:start="37:28" pos:end="37:36">gstr_list</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:41">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:60"><expr pos:start="39:5" pos:end="39:59"><name pos:start="39:5" pos:end="39:5">v</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <call pos:start="39:9" pos:end="39:59"><name pos:start="39:9" pos:end="39:35">visitor_input_test_init_raw</name><argument_list pos:start="39:36" pos:end="39:59">(<argument pos:start="39:37" pos:end="39:40"><expr pos:start="39:37" pos:end="39:40"><name pos:start="39:37" pos:end="39:40">data</name></expr></argument>,  <argument pos:start="39:44" pos:end="39:58"><expr pos:start="39:44" pos:end="39:58"><name pos:start="39:44" pos:end="39:58"><name pos:start="39:44" pos:end="39:53">gstr_union</name><operator pos:start="39:54" pos:end="39:55">-&gt;</operator><name pos:start="39:56" pos:end="39:58">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:70"><expr pos:start="43:5" pos:end="43:69"><call pos:start="43:5" pos:end="43:69"><name pos:start="43:5" pos:end="43:37">visit_type_UserDefNativeListUnion</name><argument_list pos:start="43:38" pos:end="43:69">(<argument pos:start="43:39" pos:end="43:39"><expr pos:start="43:39" pos:end="43:39"><name pos:start="43:39" pos:end="43:39">v</name></expr></argument>, <argument pos:start="43:42" pos:end="43:45"><expr pos:start="43:42" pos:end="43:45"><name pos:start="43:42" pos:end="43:45">NULL</name></expr></argument>, <argument pos:start="43:48" pos:end="43:54"><expr pos:start="43:48" pos:end="43:54"><operator pos:start="43:48" pos:end="43:48">&amp;</operator><name pos:start="43:49" pos:end="43:54">cvalue</name></expr></argument>, <argument pos:start="43:57" pos:end="43:68"><expr pos:start="43:57" pos:end="43:68"><operator pos:start="43:57" pos:end="43:57">&amp;</operator><name pos:start="43:58" pos:end="43:68">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><call pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:12">g_assert</name><argument_list pos:start="45:13" pos:end="45:28">(<argument pos:start="45:14" pos:end="45:27"><expr pos:start="45:14" pos:end="45:27"><name pos:start="45:14" pos:end="45:19">cvalue</name> <operator pos:start="45:21" pos:end="45:22">!=</operator> <name pos:start="45:24" pos:end="45:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:44"><expr pos:start="47:5" pos:end="47:43"><call pos:start="47:5" pos:end="47:43"><name pos:start="47:5" pos:end="47:19">g_assert_cmpint</name><argument_list pos:start="47:20" pos:end="47:43">(<argument pos:start="47:21" pos:end="47:32"><expr pos:start="47:21" pos:end="47:32"><name pos:start="47:21" pos:end="47:32"><name pos:start="47:21" pos:end="47:26">cvalue</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:32">type</name></name></expr></argument>, <argument pos:start="47:35" pos:end="47:36"><expr pos:start="47:35" pos:end="47:36"><operator pos:start="47:35" pos:end="47:36">==</operator></expr></argument>, <argument pos:start="47:39" pos:end="47:42"><expr pos:start="47:39" pos:end="47:42"><name pos:start="47:39" pos:end="47:42">kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="51:5" pos:end="185:5">switch <condition pos:start="51:12" pos:end="51:17">(<expr pos:start="51:13" pos:end="51:16"><name pos:start="51:13" pos:end="51:16">kind</name></expr>)</condition> <block pos:start="51:19" pos:end="185:5">{<block_content pos:start="53:5" pos:end="183:31">

    <case pos:start="53:5" pos:end="53:49">case <expr pos:start="53:10" pos:end="53:48"><name pos:start="53:10" pos:end="53:48">USER_DEF_NATIVE_LIST_UNION_KIND_INTEGER</name></expr>:</case> <block pos:start="53:51" pos:end="67:5">{<block_content pos:start="55:9" pos:end="65:14">

        <decl_stmt pos:start="55:9" pos:end="55:29"><decl pos:start="55:9" pos:end="55:28"><type pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:15">intList</name> <modifier pos:start="55:17" pos:end="55:17">*</modifier></type><name pos:start="55:18" pos:end="55:21">elem</name> <init pos:start="55:23" pos:end="55:28">= <expr pos:start="55:25" pos:end="55:28"><name pos:start="55:25" pos:end="55:28">NULL</name></expr></init></decl>;</decl_stmt>

        <for pos:start="57:9" pos:end="63:9">for <control pos:start="57:13" pos:end="59:42">(<init pos:start="57:14" pos:end="57:50"><expr pos:start="57:14" pos:end="57:18"><name pos:start="57:14" pos:end="57:14">i</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <literal type="number" pos:start="57:18" pos:end="57:18">0</literal></expr><operator pos:start="57:19" pos:end="57:19">,</operator> <expr pos:start="57:21" pos:end="57:49"><name pos:start="57:21" pos:end="57:24">elem</name> <operator pos:start="57:26" pos:end="57:26">=</operator> <name pos:start="57:28" pos:end="57:49"><name pos:start="57:28" pos:end="57:33">cvalue</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:36">u</name><operator pos:start="57:37" pos:end="57:37">.</operator><name pos:start="57:38" pos:end="57:44">integer</name><operator pos:start="57:45" pos:end="57:45">.</operator><name pos:start="57:46" pos:end="57:49">data</name></name></expr>;</init>

             <condition pos:start="59:14" pos:end="59:18"><expr pos:start="59:14" pos:end="59:17"><name pos:start="59:14" pos:end="59:17">elem</name></expr>;</condition> <incr pos:start="59:20" pos:end="59:41"><expr pos:start="59:20" pos:end="59:36"><name pos:start="59:20" pos:end="59:23">elem</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <name pos:start="59:27" pos:end="59:36"><name pos:start="59:27" pos:end="59:30">elem</name><operator pos:start="59:31" pos:end="59:32">-&gt;</operator><name pos:start="59:33" pos:end="59:36">next</name></name></expr><operator pos:start="59:37" pos:end="59:37">,</operator> <expr pos:start="59:39" pos:end="59:41"><name pos:start="59:39" pos:end="59:39">i</name><operator pos:start="59:40" pos:end="59:41">++</operator></expr></incr>)</control> <block pos:start="59:44" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:48">

            <expr_stmt pos:start="61:13" pos:end="61:48"><expr pos:start="61:13" pos:end="61:47"><call pos:start="61:13" pos:end="61:47"><name pos:start="61:13" pos:end="61:27">g_assert_cmpint</name><argument_list pos:start="61:28" pos:end="61:47">(<argument pos:start="61:29" pos:end="61:39"><expr pos:start="61:29" pos:end="61:39"><name pos:start="61:29" pos:end="61:39"><name pos:start="61:29" pos:end="61:32">elem</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:39">value</name></name></expr></argument>, <argument pos:start="61:42" pos:end="61:43"><expr pos:start="61:42" pos:end="61:43"><operator pos:start="61:42" pos:end="61:43">==</operator></expr></argument>, <argument pos:start="61:46" pos:end="61:46"><expr pos:start="61:46" pos:end="61:46"><name pos:start="61:46" pos:end="61:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    </block_content>}</block>

    <case pos:start="69:5" pos:end="69:44">case <expr pos:start="69:10" pos:end="69:43"><name pos:start="69:10" pos:end="69:43">USER_DEF_NATIVE_LIST_UNION_KIND_S8</name></expr>:</case> <block pos:start="69:46" pos:end="81:5">{<block_content pos:start="71:9" pos:end="79:14">

        <decl_stmt pos:start="71:9" pos:end="71:30"><decl pos:start="71:9" pos:end="71:29"><type pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:16">int8List</name> <modifier pos:start="71:18" pos:end="71:18">*</modifier></type><name pos:start="71:19" pos:end="71:22">elem</name> <init pos:start="71:24" pos:end="71:29">= <expr pos:start="71:26" pos:end="71:29"><name pos:start="71:26" pos:end="71:29">NULL</name></expr></init></decl>;</decl_stmt>

        <for pos:start="73:9" pos:end="77:9">for <control pos:start="73:13" pos:end="73:75">(<init pos:start="73:14" pos:end="73:45"><expr pos:start="73:14" pos:end="73:18"><name pos:start="73:14" pos:end="73:14">i</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">0</literal></expr><operator pos:start="73:19" pos:end="73:19">,</operator> <expr pos:start="73:21" pos:end="73:44"><name pos:start="73:21" pos:end="73:24">elem</name> <operator pos:start="73:26" pos:end="73:26">=</operator> <name pos:start="73:28" pos:end="73:44"><name pos:start="73:28" pos:end="73:33">cvalue</name><operator pos:start="73:34" pos:end="73:35">-&gt;</operator><name pos:start="73:36" pos:end="73:36">u</name><operator pos:start="73:37" pos:end="73:37">.</operator><name pos:start="73:38" pos:end="73:39">s8</name><operator pos:start="73:40" pos:end="73:40">.</operator><name pos:start="73:41" pos:end="73:44">data</name></name></expr>;</init> <condition pos:start="73:47" pos:end="73:51"><expr pos:start="73:47" pos:end="73:50"><name pos:start="73:47" pos:end="73:50">elem</name></expr>;</condition> <incr pos:start="73:53" pos:end="73:74"><expr pos:start="73:53" pos:end="73:69"><name pos:start="73:53" pos:end="73:56">elem</name> <operator pos:start="73:58" pos:end="73:58">=</operator> <name pos:start="73:60" pos:end="73:69"><name pos:start="73:60" pos:end="73:63">elem</name><operator pos:start="73:64" pos:end="73:65">-&gt;</operator><name pos:start="73:66" pos:end="73:69">next</name></name></expr><operator pos:start="73:70" pos:end="73:70">,</operator> <expr pos:start="73:72" pos:end="73:74"><name pos:start="73:72" pos:end="73:72">i</name><operator pos:start="73:73" pos:end="73:74">++</operator></expr></incr>)</control> <block pos:start="73:77" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:48">

            <expr_stmt pos:start="75:13" pos:end="75:48"><expr pos:start="75:13" pos:end="75:47"><call pos:start="75:13" pos:end="75:47"><name pos:start="75:13" pos:end="75:27">g_assert_cmpint</name><argument_list pos:start="75:28" pos:end="75:47">(<argument pos:start="75:29" pos:end="75:39"><expr pos:start="75:29" pos:end="75:39"><name pos:start="75:29" pos:end="75:39"><name pos:start="75:29" pos:end="75:32">elem</name><operator pos:start="75:33" pos:end="75:34">-&gt;</operator><name pos:start="75:35" pos:end="75:39">value</name></name></expr></argument>, <argument pos:start="75:42" pos:end="75:43"><expr pos:start="75:42" pos:end="75:43"><operator pos:start="75:42" pos:end="75:43">==</operator></expr></argument>, <argument pos:start="75:46" pos:end="75:46"><expr pos:start="75:46" pos:end="75:46"><name pos:start="75:46" pos:end="75:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    </block_content>}</block>

    <case pos:start="83:5" pos:end="83:45">case <expr pos:start="83:10" pos:end="83:44"><name pos:start="83:10" pos:end="83:44">USER_DEF_NATIVE_LIST_UNION_KIND_S16</name></expr>:</case> <block pos:start="83:47" pos:end="95:5">{<block_content pos:start="85:9" pos:end="93:14">

        <decl_stmt pos:start="85:9" pos:end="85:31"><decl pos:start="85:9" pos:end="85:30"><type pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:17">int16List</name> <modifier pos:start="85:19" pos:end="85:19">*</modifier></type><name pos:start="85:20" pos:end="85:23">elem</name> <init pos:start="85:25" pos:end="85:30">= <expr pos:start="85:27" pos:end="85:30"><name pos:start="85:27" pos:end="85:30">NULL</name></expr></init></decl>;</decl_stmt>

        <for pos:start="87:9" pos:end="91:9">for <control pos:start="87:13" pos:end="87:76">(<init pos:start="87:14" pos:end="87:46"><expr pos:start="87:14" pos:end="87:18"><name pos:start="87:14" pos:end="87:14">i</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <literal type="number" pos:start="87:18" pos:end="87:18">0</literal></expr><operator pos:start="87:19" pos:end="87:19">,</operator> <expr pos:start="87:21" pos:end="87:45"><name pos:start="87:21" pos:end="87:24">elem</name> <operator pos:start="87:26" pos:end="87:26">=</operator> <name pos:start="87:28" pos:end="87:45"><name pos:start="87:28" pos:end="87:33">cvalue</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:36">u</name><operator pos:start="87:37" pos:end="87:37">.</operator><name pos:start="87:38" pos:end="87:40">s16</name><operator pos:start="87:41" pos:end="87:41">.</operator><name pos:start="87:42" pos:end="87:45">data</name></name></expr>;</init> <condition pos:start="87:48" pos:end="87:52"><expr pos:start="87:48" pos:end="87:51"><name pos:start="87:48" pos:end="87:51">elem</name></expr>;</condition> <incr pos:start="87:54" pos:end="87:75"><expr pos:start="87:54" pos:end="87:70"><name pos:start="87:54" pos:end="87:57">elem</name> <operator pos:start="87:59" pos:end="87:59">=</operator> <name pos:start="87:61" pos:end="87:70"><name pos:start="87:61" pos:end="87:64">elem</name><operator pos:start="87:65" pos:end="87:66">-&gt;</operator><name pos:start="87:67" pos:end="87:70">next</name></name></expr><operator pos:start="87:71" pos:end="87:71">,</operator> <expr pos:start="87:73" pos:end="87:75"><name pos:start="87:73" pos:end="87:73">i</name><operator pos:start="87:74" pos:end="87:75">++</operator></expr></incr>)</control> <block pos:start="87:78" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:48">

            <expr_stmt pos:start="89:13" pos:end="89:48"><expr pos:start="89:13" pos:end="89:47"><call pos:start="89:13" pos:end="89:47"><name pos:start="89:13" pos:end="89:27">g_assert_cmpint</name><argument_list pos:start="89:28" pos:end="89:47">(<argument pos:start="89:29" pos:end="89:39"><expr pos:start="89:29" pos:end="89:39"><name pos:start="89:29" pos:end="89:39"><name pos:start="89:29" pos:end="89:32">elem</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:39">value</name></name></expr></argument>, <argument pos:start="89:42" pos:end="89:43"><expr pos:start="89:42" pos:end="89:43"><operator pos:start="89:42" pos:end="89:43">==</operator></expr></argument>, <argument pos:start="89:46" pos:end="89:46"><expr pos:start="89:46" pos:end="89:46"><name pos:start="89:46" pos:end="89:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    </block_content>}</block>

    <case pos:start="97:5" pos:end="97:45">case <expr pos:start="97:10" pos:end="97:44"><name pos:start="97:10" pos:end="97:44">USER_DEF_NATIVE_LIST_UNION_KIND_S32</name></expr>:</case> <block pos:start="97:47" pos:end="109:5">{<block_content pos:start="99:9" pos:end="107:14">

        <decl_stmt pos:start="99:9" pos:end="99:31"><decl pos:start="99:9" pos:end="99:30"><type pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:17">int32List</name> <modifier pos:start="99:19" pos:end="99:19">*</modifier></type><name pos:start="99:20" pos:end="99:23">elem</name> <init pos:start="99:25" pos:end="99:30">= <expr pos:start="99:27" pos:end="99:30"><name pos:start="99:27" pos:end="99:30">NULL</name></expr></init></decl>;</decl_stmt>

        <for pos:start="101:9" pos:end="105:9">for <control pos:start="101:13" pos:end="101:76">(<init pos:start="101:14" pos:end="101:46"><expr pos:start="101:14" pos:end="101:18"><name pos:start="101:14" pos:end="101:14">i</name> <operator pos:start="101:16" pos:end="101:16">=</operator> <literal type="number" pos:start="101:18" pos:end="101:18">0</literal></expr><operator pos:start="101:19" pos:end="101:19">,</operator> <expr pos:start="101:21" pos:end="101:45"><name pos:start="101:21" pos:end="101:24">elem</name> <operator pos:start="101:26" pos:end="101:26">=</operator> <name pos:start="101:28" pos:end="101:45"><name pos:start="101:28" pos:end="101:33">cvalue</name><operator pos:start="101:34" pos:end="101:35">-&gt;</operator><name pos:start="101:36" pos:end="101:36">u</name><operator pos:start="101:37" pos:end="101:37">.</operator><name pos:start="101:38" pos:end="101:40">s32</name><operator pos:start="101:41" pos:end="101:41">.</operator><name pos:start="101:42" pos:end="101:45">data</name></name></expr>;</init> <condition pos:start="101:48" pos:end="101:52"><expr pos:start="101:48" pos:end="101:51"><name pos:start="101:48" pos:end="101:51">elem</name></expr>;</condition> <incr pos:start="101:54" pos:end="101:75"><expr pos:start="101:54" pos:end="101:70"><name pos:start="101:54" pos:end="101:57">elem</name> <operator pos:start="101:59" pos:end="101:59">=</operator> <name pos:start="101:61" pos:end="101:70"><name pos:start="101:61" pos:end="101:64">elem</name><operator pos:start="101:65" pos:end="101:66">-&gt;</operator><name pos:start="101:67" pos:end="101:70">next</name></name></expr><operator pos:start="101:71" pos:end="101:71">,</operator> <expr pos:start="101:73" pos:end="101:75"><name pos:start="101:73" pos:end="101:73">i</name><operator pos:start="101:74" pos:end="101:75">++</operator></expr></incr>)</control> <block pos:start="101:78" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:48">

            <expr_stmt pos:start="103:13" pos:end="103:48"><expr pos:start="103:13" pos:end="103:47"><call pos:start="103:13" pos:end="103:47"><name pos:start="103:13" pos:end="103:27">g_assert_cmpint</name><argument_list pos:start="103:28" pos:end="103:47">(<argument pos:start="103:29" pos:end="103:39"><expr pos:start="103:29" pos:end="103:39"><name pos:start="103:29" pos:end="103:39"><name pos:start="103:29" pos:end="103:32">elem</name><operator pos:start="103:33" pos:end="103:34">-&gt;</operator><name pos:start="103:35" pos:end="103:39">value</name></name></expr></argument>, <argument pos:start="103:42" pos:end="103:43"><expr pos:start="103:42" pos:end="103:43"><operator pos:start="103:42" pos:end="103:43">==</operator></expr></argument>, <argument pos:start="103:46" pos:end="103:46"><expr pos:start="103:46" pos:end="103:46"><name pos:start="103:46" pos:end="103:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    </block_content>}</block>

    <case pos:start="111:5" pos:end="111:45">case <expr pos:start="111:10" pos:end="111:44"><name pos:start="111:10" pos:end="111:44">USER_DEF_NATIVE_LIST_UNION_KIND_S64</name></expr>:</case> <block pos:start="111:47" pos:end="123:5">{<block_content pos:start="113:9" pos:end="121:14">

        <decl_stmt pos:start="113:9" pos:end="113:31"><decl pos:start="113:9" pos:end="113:30"><type pos:start="113:9" pos:end="113:19"><name pos:start="113:9" pos:end="113:17">int64List</name> <modifier pos:start="113:19" pos:end="113:19">*</modifier></type><name pos:start="113:20" pos:end="113:23">elem</name> <init pos:start="113:25" pos:end="113:30">= <expr pos:start="113:27" pos:end="113:30"><name pos:start="113:27" pos:end="113:30">NULL</name></expr></init></decl>;</decl_stmt>

        <for pos:start="115:9" pos:end="119:9">for <control pos:start="115:13" pos:end="115:76">(<init pos:start="115:14" pos:end="115:46"><expr pos:start="115:14" pos:end="115:18"><name pos:start="115:14" pos:end="115:14">i</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <literal type="number" pos:start="115:18" pos:end="115:18">0</literal></expr><operator pos:start="115:19" pos:end="115:19">,</operator> <expr pos:start="115:21" pos:end="115:45"><name pos:start="115:21" pos:end="115:24">elem</name> <operator pos:start="115:26" pos:end="115:26">=</operator> <name pos:start="115:28" pos:end="115:45"><name pos:start="115:28" pos:end="115:33">cvalue</name><operator pos:start="115:34" pos:end="115:35">-&gt;</operator><name pos:start="115:36" pos:end="115:36">u</name><operator pos:start="115:37" pos:end="115:37">.</operator><name pos:start="115:38" pos:end="115:40">s64</name><operator pos:start="115:41" pos:end="115:41">.</operator><name pos:start="115:42" pos:end="115:45">data</name></name></expr>;</init> <condition pos:start="115:48" pos:end="115:52"><expr pos:start="115:48" pos:end="115:51"><name pos:start="115:48" pos:end="115:51">elem</name></expr>;</condition> <incr pos:start="115:54" pos:end="115:75"><expr pos:start="115:54" pos:end="115:70"><name pos:start="115:54" pos:end="115:57">elem</name> <operator pos:start="115:59" pos:end="115:59">=</operator> <name pos:start="115:61" pos:end="115:70"><name pos:start="115:61" pos:end="115:64">elem</name><operator pos:start="115:65" pos:end="115:66">-&gt;</operator><name pos:start="115:67" pos:end="115:70">next</name></name></expr><operator pos:start="115:71" pos:end="115:71">,</operator> <expr pos:start="115:73" pos:end="115:75"><name pos:start="115:73" pos:end="115:73">i</name><operator pos:start="115:74" pos:end="115:75">++</operator></expr></incr>)</control> <block pos:start="115:78" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:48">

            <expr_stmt pos:start="117:13" pos:end="117:48"><expr pos:start="117:13" pos:end="117:47"><call pos:start="117:13" pos:end="117:47"><name pos:start="117:13" pos:end="117:27">g_assert_cmpint</name><argument_list pos:start="117:28" pos:end="117:47">(<argument pos:start="117:29" pos:end="117:39"><expr pos:start="117:29" pos:end="117:39"><name pos:start="117:29" pos:end="117:39"><name pos:start="117:29" pos:end="117:32">elem</name><operator pos:start="117:33" pos:end="117:34">-&gt;</operator><name pos:start="117:35" pos:end="117:39">value</name></name></expr></argument>, <argument pos:start="117:42" pos:end="117:43"><expr pos:start="117:42" pos:end="117:43"><operator pos:start="117:42" pos:end="117:43">==</operator></expr></argument>, <argument pos:start="117:46" pos:end="117:46"><expr pos:start="117:46" pos:end="117:46"><name pos:start="117:46" pos:end="117:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    </block_content>}</block>

    <case pos:start="125:5" pos:end="125:44">case <expr pos:start="125:10" pos:end="125:43"><name pos:start="125:10" pos:end="125:43">USER_DEF_NATIVE_LIST_UNION_KIND_U8</name></expr>:</case> <block pos:start="125:46" pos:end="137:5">{<block_content pos:start="127:9" pos:end="135:14">

        <decl_stmt pos:start="127:9" pos:end="127:31"><decl pos:start="127:9" pos:end="127:30"><type pos:start="127:9" pos:end="127:19"><name pos:start="127:9" pos:end="127:17">uint8List</name> <modifier pos:start="127:19" pos:end="127:19">*</modifier></type><name pos:start="127:20" pos:end="127:23">elem</name> <init pos:start="127:25" pos:end="127:30">= <expr pos:start="127:27" pos:end="127:30"><name pos:start="127:27" pos:end="127:30">NULL</name></expr></init></decl>;</decl_stmt>

        <for pos:start="129:9" pos:end="133:9">for <control pos:start="129:13" pos:end="129:75">(<init pos:start="129:14" pos:end="129:45"><expr pos:start="129:14" pos:end="129:18"><name pos:start="129:14" pos:end="129:14">i</name> <operator pos:start="129:16" pos:end="129:16">=</operator> <literal type="number" pos:start="129:18" pos:end="129:18">0</literal></expr><operator pos:start="129:19" pos:end="129:19">,</operator> <expr pos:start="129:21" pos:end="129:44"><name pos:start="129:21" pos:end="129:24">elem</name> <operator pos:start="129:26" pos:end="129:26">=</operator> <name pos:start="129:28" pos:end="129:44"><name pos:start="129:28" pos:end="129:33">cvalue</name><operator pos:start="129:34" pos:end="129:35">-&gt;</operator><name pos:start="129:36" pos:end="129:36">u</name><operator pos:start="129:37" pos:end="129:37">.</operator><name pos:start="129:38" pos:end="129:39">u8</name><operator pos:start="129:40" pos:end="129:40">.</operator><name pos:start="129:41" pos:end="129:44">data</name></name></expr>;</init> <condition pos:start="129:47" pos:end="129:51"><expr pos:start="129:47" pos:end="129:50"><name pos:start="129:47" pos:end="129:50">elem</name></expr>;</condition> <incr pos:start="129:53" pos:end="129:74"><expr pos:start="129:53" pos:end="129:69"><name pos:start="129:53" pos:end="129:56">elem</name> <operator pos:start="129:58" pos:end="129:58">=</operator> <name pos:start="129:60" pos:end="129:69"><name pos:start="129:60" pos:end="129:63">elem</name><operator pos:start="129:64" pos:end="129:65">-&gt;</operator><name pos:start="129:66" pos:end="129:69">next</name></name></expr><operator pos:start="129:70" pos:end="129:70">,</operator> <expr pos:start="129:72" pos:end="129:74"><name pos:start="129:72" pos:end="129:72">i</name><operator pos:start="129:73" pos:end="129:74">++</operator></expr></incr>)</control> <block pos:start="129:77" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:48">

            <expr_stmt pos:start="131:13" pos:end="131:48"><expr pos:start="131:13" pos:end="131:47"><call pos:start="131:13" pos:end="131:47"><name pos:start="131:13" pos:end="131:27">g_assert_cmpint</name><argument_list pos:start="131:28" pos:end="131:47">(<argument pos:start="131:29" pos:end="131:39"><expr pos:start="131:29" pos:end="131:39"><name pos:start="131:29" pos:end="131:39"><name pos:start="131:29" pos:end="131:32">elem</name><operator pos:start="131:33" pos:end="131:34">-&gt;</operator><name pos:start="131:35" pos:end="131:39">value</name></name></expr></argument>, <argument pos:start="131:42" pos:end="131:43"><expr pos:start="131:42" pos:end="131:43"><operator pos:start="131:42" pos:end="131:43">==</operator></expr></argument>, <argument pos:start="131:46" pos:end="131:46"><expr pos:start="131:46" pos:end="131:46"><name pos:start="131:46" pos:end="131:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    </block_content>}</block>

    <case pos:start="139:5" pos:end="139:45">case <expr pos:start="139:10" pos:end="139:44"><name pos:start="139:10" pos:end="139:44">USER_DEF_NATIVE_LIST_UNION_KIND_U16</name></expr>:</case> <block pos:start="139:47" pos:end="151:5">{<block_content pos:start="141:9" pos:end="149:14">

        <decl_stmt pos:start="141:9" pos:end="141:32"><decl pos:start="141:9" pos:end="141:31"><type pos:start="141:9" pos:end="141:20"><name pos:start="141:9" pos:end="141:18">uint16List</name> <modifier pos:start="141:20" pos:end="141:20">*</modifier></type><name pos:start="141:21" pos:end="141:24">elem</name> <init pos:start="141:26" pos:end="141:31">= <expr pos:start="141:28" pos:end="141:31"><name pos:start="141:28" pos:end="141:31">NULL</name></expr></init></decl>;</decl_stmt>

        <for pos:start="143:9" pos:end="147:9">for <control pos:start="143:13" pos:end="143:76">(<init pos:start="143:14" pos:end="143:46"><expr pos:start="143:14" pos:end="143:18"><name pos:start="143:14" pos:end="143:14">i</name> <operator pos:start="143:16" pos:end="143:16">=</operator> <literal type="number" pos:start="143:18" pos:end="143:18">0</literal></expr><operator pos:start="143:19" pos:end="143:19">,</operator> <expr pos:start="143:21" pos:end="143:45"><name pos:start="143:21" pos:end="143:24">elem</name> <operator pos:start="143:26" pos:end="143:26">=</operator> <name pos:start="143:28" pos:end="143:45"><name pos:start="143:28" pos:end="143:33">cvalue</name><operator pos:start="143:34" pos:end="143:35">-&gt;</operator><name pos:start="143:36" pos:end="143:36">u</name><operator pos:start="143:37" pos:end="143:37">.</operator><name pos:start="143:38" pos:end="143:40">u16</name><operator pos:start="143:41" pos:end="143:41">.</operator><name pos:start="143:42" pos:end="143:45">data</name></name></expr>;</init> <condition pos:start="143:48" pos:end="143:52"><expr pos:start="143:48" pos:end="143:51"><name pos:start="143:48" pos:end="143:51">elem</name></expr>;</condition> <incr pos:start="143:54" pos:end="143:75"><expr pos:start="143:54" pos:end="143:70"><name pos:start="143:54" pos:end="143:57">elem</name> <operator pos:start="143:59" pos:end="143:59">=</operator> <name pos:start="143:61" pos:end="143:70"><name pos:start="143:61" pos:end="143:64">elem</name><operator pos:start="143:65" pos:end="143:66">-&gt;</operator><name pos:start="143:67" pos:end="143:70">next</name></name></expr><operator pos:start="143:71" pos:end="143:71">,</operator> <expr pos:start="143:73" pos:end="143:75"><name pos:start="143:73" pos:end="143:73">i</name><operator pos:start="143:74" pos:end="143:75">++</operator></expr></incr>)</control> <block pos:start="143:78" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:48">

            <expr_stmt pos:start="145:13" pos:end="145:48"><expr pos:start="145:13" pos:end="145:47"><call pos:start="145:13" pos:end="145:47"><name pos:start="145:13" pos:end="145:27">g_assert_cmpint</name><argument_list pos:start="145:28" pos:end="145:47">(<argument pos:start="145:29" pos:end="145:39"><expr pos:start="145:29" pos:end="145:39"><name pos:start="145:29" pos:end="145:39"><name pos:start="145:29" pos:end="145:32">elem</name><operator pos:start="145:33" pos:end="145:34">-&gt;</operator><name pos:start="145:35" pos:end="145:39">value</name></name></expr></argument>, <argument pos:start="145:42" pos:end="145:43"><expr pos:start="145:42" pos:end="145:43"><operator pos:start="145:42" pos:end="145:43">==</operator></expr></argument>, <argument pos:start="145:46" pos:end="145:46"><expr pos:start="145:46" pos:end="145:46"><name pos:start="145:46" pos:end="145:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    </block_content>}</block>

    <case pos:start="153:5" pos:end="153:45">case <expr pos:start="153:10" pos:end="153:44"><name pos:start="153:10" pos:end="153:44">USER_DEF_NATIVE_LIST_UNION_KIND_U32</name></expr>:</case> <block pos:start="153:47" pos:end="165:5">{<block_content pos:start="155:9" pos:end="163:14">

        <decl_stmt pos:start="155:9" pos:end="155:32"><decl pos:start="155:9" pos:end="155:31"><type pos:start="155:9" pos:end="155:20"><name pos:start="155:9" pos:end="155:18">uint32List</name> <modifier pos:start="155:20" pos:end="155:20">*</modifier></type><name pos:start="155:21" pos:end="155:24">elem</name> <init pos:start="155:26" pos:end="155:31">= <expr pos:start="155:28" pos:end="155:31"><name pos:start="155:28" pos:end="155:31">NULL</name></expr></init></decl>;</decl_stmt>

        <for pos:start="157:9" pos:end="161:9">for <control pos:start="157:13" pos:end="157:76">(<init pos:start="157:14" pos:end="157:46"><expr pos:start="157:14" pos:end="157:18"><name pos:start="157:14" pos:end="157:14">i</name> <operator pos:start="157:16" pos:end="157:16">=</operator> <literal type="number" pos:start="157:18" pos:end="157:18">0</literal></expr><operator pos:start="157:19" pos:end="157:19">,</operator> <expr pos:start="157:21" pos:end="157:45"><name pos:start="157:21" pos:end="157:24">elem</name> <operator pos:start="157:26" pos:end="157:26">=</operator> <name pos:start="157:28" pos:end="157:45"><name pos:start="157:28" pos:end="157:33">cvalue</name><operator pos:start="157:34" pos:end="157:35">-&gt;</operator><name pos:start="157:36" pos:end="157:36">u</name><operator pos:start="157:37" pos:end="157:37">.</operator><name pos:start="157:38" pos:end="157:40">u32</name><operator pos:start="157:41" pos:end="157:41">.</operator><name pos:start="157:42" pos:end="157:45">data</name></name></expr>;</init> <condition pos:start="157:48" pos:end="157:52"><expr pos:start="157:48" pos:end="157:51"><name pos:start="157:48" pos:end="157:51">elem</name></expr>;</condition> <incr pos:start="157:54" pos:end="157:75"><expr pos:start="157:54" pos:end="157:70"><name pos:start="157:54" pos:end="157:57">elem</name> <operator pos:start="157:59" pos:end="157:59">=</operator> <name pos:start="157:61" pos:end="157:70"><name pos:start="157:61" pos:end="157:64">elem</name><operator pos:start="157:65" pos:end="157:66">-&gt;</operator><name pos:start="157:67" pos:end="157:70">next</name></name></expr><operator pos:start="157:71" pos:end="157:71">,</operator> <expr pos:start="157:73" pos:end="157:75"><name pos:start="157:73" pos:end="157:73">i</name><operator pos:start="157:74" pos:end="157:75">++</operator></expr></incr>)</control> <block pos:start="157:78" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:48">

            <expr_stmt pos:start="159:13" pos:end="159:48"><expr pos:start="159:13" pos:end="159:47"><call pos:start="159:13" pos:end="159:47"><name pos:start="159:13" pos:end="159:27">g_assert_cmpint</name><argument_list pos:start="159:28" pos:end="159:47">(<argument pos:start="159:29" pos:end="159:39"><expr pos:start="159:29" pos:end="159:39"><name pos:start="159:29" pos:end="159:39"><name pos:start="159:29" pos:end="159:32">elem</name><operator pos:start="159:33" pos:end="159:34">-&gt;</operator><name pos:start="159:35" pos:end="159:39">value</name></name></expr></argument>, <argument pos:start="159:42" pos:end="159:43"><expr pos:start="159:42" pos:end="159:43"><operator pos:start="159:42" pos:end="159:43">==</operator></expr></argument>, <argument pos:start="159:46" pos:end="159:46"><expr pos:start="159:46" pos:end="159:46"><name pos:start="159:46" pos:end="159:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="163:9" pos:end="163:14">break;</break>

    </block_content>}</block>

    <case pos:start="167:5" pos:end="167:45">case <expr pos:start="167:10" pos:end="167:44"><name pos:start="167:10" pos:end="167:44">USER_DEF_NATIVE_LIST_UNION_KIND_U64</name></expr>:</case> <block pos:start="167:47" pos:end="179:5">{<block_content pos:start="169:9" pos:end="177:14">

        <decl_stmt pos:start="169:9" pos:end="169:32"><decl pos:start="169:9" pos:end="169:31"><type pos:start="169:9" pos:end="169:20"><name pos:start="169:9" pos:end="169:18">uint64List</name> <modifier pos:start="169:20" pos:end="169:20">*</modifier></type><name pos:start="169:21" pos:end="169:24">elem</name> <init pos:start="169:26" pos:end="169:31">= <expr pos:start="169:28" pos:end="169:31"><name pos:start="169:28" pos:end="169:31">NULL</name></expr></init></decl>;</decl_stmt>

        <for pos:start="171:9" pos:end="175:9">for <control pos:start="171:13" pos:end="171:76">(<init pos:start="171:14" pos:end="171:46"><expr pos:start="171:14" pos:end="171:18"><name pos:start="171:14" pos:end="171:14">i</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <literal type="number" pos:start="171:18" pos:end="171:18">0</literal></expr><operator pos:start="171:19" pos:end="171:19">,</operator> <expr pos:start="171:21" pos:end="171:45"><name pos:start="171:21" pos:end="171:24">elem</name> <operator pos:start="171:26" pos:end="171:26">=</operator> <name pos:start="171:28" pos:end="171:45"><name pos:start="171:28" pos:end="171:33">cvalue</name><operator pos:start="171:34" pos:end="171:35">-&gt;</operator><name pos:start="171:36" pos:end="171:36">u</name><operator pos:start="171:37" pos:end="171:37">.</operator><name pos:start="171:38" pos:end="171:40">u64</name><operator pos:start="171:41" pos:end="171:41">.</operator><name pos:start="171:42" pos:end="171:45">data</name></name></expr>;</init> <condition pos:start="171:48" pos:end="171:52"><expr pos:start="171:48" pos:end="171:51"><name pos:start="171:48" pos:end="171:51">elem</name></expr>;</condition> <incr pos:start="171:54" pos:end="171:75"><expr pos:start="171:54" pos:end="171:70"><name pos:start="171:54" pos:end="171:57">elem</name> <operator pos:start="171:59" pos:end="171:59">=</operator> <name pos:start="171:61" pos:end="171:70"><name pos:start="171:61" pos:end="171:64">elem</name><operator pos:start="171:65" pos:end="171:66">-&gt;</operator><name pos:start="171:67" pos:end="171:70">next</name></name></expr><operator pos:start="171:71" pos:end="171:71">,</operator> <expr pos:start="171:73" pos:end="171:75"><name pos:start="171:73" pos:end="171:73">i</name><operator pos:start="171:74" pos:end="171:75">++</operator></expr></incr>)</control> <block pos:start="171:78" pos:end="175:9">{<block_content pos:start="173:13" pos:end="173:48">

            <expr_stmt pos:start="173:13" pos:end="173:48"><expr pos:start="173:13" pos:end="173:47"><call pos:start="173:13" pos:end="173:47"><name pos:start="173:13" pos:end="173:27">g_assert_cmpint</name><argument_list pos:start="173:28" pos:end="173:47">(<argument pos:start="173:29" pos:end="173:39"><expr pos:start="173:29" pos:end="173:39"><name pos:start="173:29" pos:end="173:39"><name pos:start="173:29" pos:end="173:32">elem</name><operator pos:start="173:33" pos:end="173:34">-&gt;</operator><name pos:start="173:35" pos:end="173:39">value</name></name></expr></argument>, <argument pos:start="173:42" pos:end="173:43"><expr pos:start="173:42" pos:end="173:43"><operator pos:start="173:42" pos:end="173:43">==</operator></expr></argument>, <argument pos:start="173:46" pos:end="173:46"><expr pos:start="173:46" pos:end="173:46"><name pos:start="173:46" pos:end="173:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="177:9" pos:end="177:14">break;</break>

    </block_content>}</block>

    <default pos:start="181:5" pos:end="181:12">default:</default>

        <expr_stmt pos:start="183:9" pos:end="183:31"><expr pos:start="183:9" pos:end="183:30"><call pos:start="183:9" pos:end="183:30"><name pos:start="183:9" pos:end="183:28">g_assert_not_reached</name><argument_list pos:start="183:29" pos:end="183:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="189:5" pos:end="189:36"><expr pos:start="189:5" pos:end="189:35"><call pos:start="189:5" pos:end="189:35"><name pos:start="189:5" pos:end="189:17">g_string_free</name><argument_list pos:start="189:18" pos:end="189:35">(<argument pos:start="189:19" pos:end="189:28"><expr pos:start="189:19" pos:end="189:28"><name pos:start="189:19" pos:end="189:28">gstr_union</name></expr></argument>, <argument pos:start="189:31" pos:end="189:34"><expr pos:start="189:31" pos:end="189:34"><name pos:start="189:31" pos:end="189:34">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:35"><expr pos:start="191:5" pos:end="191:34"><call pos:start="191:5" pos:end="191:34"><name pos:start="191:5" pos:end="191:17">g_string_free</name><argument_list pos:start="191:18" pos:end="191:34">(<argument pos:start="191:19" pos:end="191:27"><expr pos:start="191:19" pos:end="191:27"><name pos:start="191:19" pos:end="191:27">gstr_list</name></expr></argument>, <argument pos:start="191:30" pos:end="191:33"><expr pos:start="191:30" pos:end="191:33"><name pos:start="191:30" pos:end="191:33">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:45"><expr pos:start="193:5" pos:end="193:44"><call pos:start="193:5" pos:end="193:44"><name pos:start="193:5" pos:end="193:36">qapi_free_UserDefNativeListUnion</name><argument_list pos:start="193:37" pos:end="193:44">(<argument pos:start="193:38" pos:end="193:43"><expr pos:start="193:38" pos:end="193:43"><name pos:start="193:38" pos:end="193:43">cvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
