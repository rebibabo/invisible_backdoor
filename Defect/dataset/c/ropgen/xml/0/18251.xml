<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18251.c" pos:tabs="8"><function pos:start="1:1" pos:end="467:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">gen_compute_compact_branch</name><parameter_list pos:start="1:39" pos:end="3:70">(<parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><name pos:start="1:40" pos:end="1:51">DisasContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">ctx</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:66">uint32_t</name></type> <name pos:start="1:68" pos:end="1:70">opc</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:45"><decl pos:start="3:40" pos:end="3:45"><type pos:start="3:40" pos:end="3:45"><name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:45">rs</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:53"><decl pos:start="3:48" pos:end="3:53"><type pos:start="3:48" pos:end="3:53"><name pos:start="3:48" pos:end="3:50">int</name></type> <name pos:start="3:52" pos:end="3:53">rt</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:69"><decl pos:start="3:56" pos:end="3:69"><type pos:start="3:56" pos:end="3:69"><name pos:start="3:56" pos:end="3:62">int32_t</name></type> <name pos:start="3:64" pos:end="3:69">offset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="467:1">{<block_content pos:start="7:5" pos:end="465:22">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:21">bcond_compute</name> <init pos:start="7:23" pos:end="7:25">= <expr pos:start="7:25" pos:end="7:25"><literal type="number" pos:start="7:25" pos:end="7:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">TCGv</name></type> <name pos:start="9:10" pos:end="9:11">t0</name> <init pos:start="9:13" pos:end="9:28">= <expr pos:start="9:15" pos:end="9:28"><call pos:start="9:15" pos:end="9:28"><name pos:start="9:15" pos:end="9:26">tcg_temp_new</name><argument_list pos:start="9:27" pos:end="9:28">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">TCGv</name></type> <name pos:start="11:10" pos:end="11:11">t1</name> <init pos:start="11:13" pos:end="11:28">= <expr pos:start="11:15" pos:end="11:28"><call pos:start="11:15" pos:end="11:28"><name pos:start="11:15" pos:end="11:26">tcg_temp_new</name><argument_list pos:start="11:27" pos:end="11:28">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="29:5"><if pos:start="15:5" pos:end="29:5">if <condition pos:start="15:8" pos:end="15:39">(<expr pos:start="15:9" pos:end="15:38"><name pos:start="15:9" pos:end="15:19"><name pos:start="15:9" pos:end="15:11">ctx</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:19">hflags</name></name> <operator pos:start="15:21" pos:end="15:21">&amp;</operator> <name pos:start="15:23" pos:end="15:38">MIPS_HFLAG_BMASK</name></expr>)</condition> <block pos:start="15:41" pos:end="29:5">{<block_content pos:start="19:9" pos:end="27:17">

<cpp:ifdef pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:23">MIPS_DEBUG_DISAS</name></cpp:ifdef>

        <expr_stmt pos:start="19:9" pos:end="24:0"><expr pos:start="19:9" pos:end="21:32"><call pos:start="19:9" pos:end="21:32"><name pos:start="19:9" pos:end="19:17">LOG_DISAS</name><argument_list pos:start="19:18" pos:end="21:32">(<argument pos:start="19:19" pos:end="21:22"><expr pos:start="19:19" pos:end="21:22"><literal type="string" pos:start="19:19" pos:end="19:61">"Branch in delay / forbidden slot at PC 0x"</literal> <name pos:start="19:63" pos:end="19:75">TARGET_FMT_lx</name>

                  <literal type="string" pos:start="21:19" pos:end="21:22">"\n"</literal></expr></argument>, <argument pos:start="21:25" pos:end="21:31"><expr pos:start="21:25" pos:end="21:31"><name pos:start="21:25" pos:end="21:31"><name pos:start="21:25" pos:end="21:27">ctx</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:31">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="25:9" pos:end="25:41"><expr pos:start="25:9" pos:end="25:40"><call pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:26">generate_exception</name><argument_list pos:start="25:27" pos:end="25:40">(<argument pos:start="25:28" pos:end="25:30"><expr pos:start="25:28" pos:end="25:30"><name pos:start="25:28" pos:end="25:30">ctx</name></expr></argument>, <argument pos:start="25:33" pos:end="25:39"><expr pos:start="25:33" pos:end="25:39"><name pos:start="25:33" pos:end="25:39">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="27:9" pos:end="27:17">goto <name pos:start="27:14" pos:end="27:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:52">/* Load needed operands and calculate btarget */</comment>

    <switch pos:start="35:5" pos:end="153:5">switch <condition pos:start="35:12" pos:end="35:16">(<expr pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">opc</name></expr>)</condition> <block pos:start="35:18" pos:end="153:5">{<block_content pos:start="39:5" pos:end="151:17">

    <comment type="block" pos:start="37:5" pos:end="37:24">/* compact branch */</comment>

    <case pos:start="39:5" pos:end="39:18">case <expr pos:start="39:10" pos:end="39:17"><name pos:start="39:10" pos:end="39:17">OPC_BOVC</name></expr>:</case> <comment type="block" pos:start="39:20" pos:end="39:46">/* OPC_BEQZALC, OPC_BEQC */</comment>

    <case pos:start="41:5" pos:end="41:18">case <expr pos:start="41:10" pos:end="41:17"><name pos:start="41:10" pos:end="41:17">OPC_BNVC</name></expr>:</case> <comment type="block" pos:start="41:20" pos:end="41:46">/* OPC_BNEZALC, OPC_BNEC */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:29"><expr pos:start="43:9" pos:end="43:28"><call pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:20">gen_load_gpr</name><argument_list pos:start="43:21" pos:end="43:28">(<argument pos:start="43:22" pos:end="43:23"><expr pos:start="43:22" pos:end="43:23"><name pos:start="43:22" pos:end="43:23">t0</name></expr></argument>, <argument pos:start="43:26" pos:end="43:27"><expr pos:start="43:26" pos:end="43:27"><name pos:start="43:26" pos:end="43:27">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:29"><expr pos:start="45:9" pos:end="45:28"><call pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:20">gen_load_gpr</name><argument_list pos:start="45:21" pos:end="45:28">(<argument pos:start="45:22" pos:end="45:23"><expr pos:start="45:22" pos:end="45:23"><name pos:start="45:22" pos:end="45:23">t1</name></expr></argument>, <argument pos:start="45:26" pos:end="45:27"><expr pos:start="45:26" pos:end="45:27"><name pos:start="45:26" pos:end="45:27">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:26"><expr pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:21">bcond_compute</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <literal type="number" pos:start="47:25" pos:end="47:25">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:58"><expr pos:start="49:9" pos:end="49:57"><name pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:11">ctx</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:20">btarget</name></name> <operator pos:start="49:22" pos:end="49:22">=</operator> <call pos:start="49:24" pos:end="49:57"><name pos:start="49:24" pos:end="49:31">addr_add</name><argument_list pos:start="49:32" pos:end="49:57">(<argument pos:start="49:33" pos:end="49:35"><expr pos:start="49:33" pos:end="49:35"><name pos:start="49:33" pos:end="49:35">ctx</name></expr></argument>, <argument pos:start="49:38" pos:end="49:48"><expr pos:start="49:38" pos:end="49:48"><name pos:start="49:38" pos:end="49:44"><name pos:start="49:38" pos:end="49:40">ctx</name><operator pos:start="49:41" pos:end="49:42">-&gt;</operator><name pos:start="49:43" pos:end="49:44">pc</name></name> <operator pos:start="49:46" pos:end="49:46">+</operator> <literal type="number" pos:start="49:48" pos:end="49:48">4</literal></expr></argument>, <argument pos:start="49:51" pos:end="49:56"><expr pos:start="49:51" pos:end="49:56"><name pos:start="49:51" pos:end="49:56">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:32">(<expr pos:start="51:13" pos:end="51:31"><name pos:start="51:13" pos:end="51:14">rs</name> <operator pos:start="51:16" pos:end="51:17">&lt;=</operator> <name pos:start="51:19" pos:end="51:20">rt</name> <operator pos:start="51:22" pos:end="51:23">&amp;&amp;</operator> <name pos:start="51:25" pos:end="51:26">rs</name> <operator pos:start="51:28" pos:end="51:29">==</operator> <literal type="number" pos:start="51:31" pos:end="51:31">0</literal></expr>)</condition> <block pos:start="51:34" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:54">

            <comment type="block" pos:start="53:13" pos:end="53:42">/* OPC_BEQZALC, OPC_BNEZALC */</comment>

            <expr_stmt pos:start="55:13" pos:end="55:54"><expr pos:start="55:13" pos:end="55:53"><call pos:start="55:13" pos:end="55:53"><name pos:start="55:13" pos:end="55:27">tcg_gen_movi_tl</name><argument_list pos:start="55:28" pos:end="55:53">(<argument pos:start="55:29" pos:end="55:39"><expr pos:start="55:29" pos:end="55:39"><name pos:start="55:29" pos:end="55:39"><name pos:start="55:29" pos:end="55:35">cpu_gpr</name><index pos:start="55:36" pos:end="55:39">[<expr pos:start="55:37" pos:end="55:38"><literal type="number" pos:start="55:37" pos:end="55:38">31</literal></expr>]</index></name></expr></argument>, <argument pos:start="55:42" pos:end="55:52"><expr pos:start="55:42" pos:end="55:52"><name pos:start="55:42" pos:end="55:48"><name pos:start="55:42" pos:end="55:44">ctx</name><operator pos:start="55:45" pos:end="55:46">-&gt;</operator><name pos:start="55:47" pos:end="55:48">pc</name></name> <operator pos:start="55:50" pos:end="55:50">+</operator> <literal type="number" pos:start="55:52" pos:end="55:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <case pos:start="61:5" pos:end="61:19">case <expr pos:start="61:10" pos:end="61:18"><name pos:start="61:10" pos:end="61:18">OPC_BLEZC</name></expr>:</case> <comment type="block" pos:start="61:21" pos:end="61:45">/* OPC_BGEZC, OPC_BGEC */</comment>

    <case pos:start="63:5" pos:end="63:19">case <expr pos:start="63:10" pos:end="63:18"><name pos:start="63:10" pos:end="63:18">OPC_BGTZC</name></expr>:</case> <comment type="block" pos:start="63:21" pos:end="63:45">/* OPC_BLTZC, OPC_BLTC */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:29"><expr pos:start="65:9" pos:end="65:28"><call pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:20">gen_load_gpr</name><argument_list pos:start="65:21" pos:end="65:28">(<argument pos:start="65:22" pos:end="65:23"><expr pos:start="65:22" pos:end="65:23"><name pos:start="65:22" pos:end="65:23">t0</name></expr></argument>, <argument pos:start="65:26" pos:end="65:27"><expr pos:start="65:26" pos:end="65:27"><name pos:start="65:26" pos:end="65:27">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:29"><expr pos:start="67:9" pos:end="67:28"><call pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:20">gen_load_gpr</name><argument_list pos:start="67:21" pos:end="67:28">(<argument pos:start="67:22" pos:end="67:23"><expr pos:start="67:22" pos:end="67:23"><name pos:start="67:22" pos:end="67:23">t1</name></expr></argument>, <argument pos:start="67:26" pos:end="67:27"><expr pos:start="67:26" pos:end="67:27"><name pos:start="67:26" pos:end="67:27">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:26"><expr pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:21">bcond_compute</name> <operator pos:start="69:23" pos:end="69:23">=</operator> <literal type="number" pos:start="69:25" pos:end="69:25">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:58"><expr pos:start="71:9" pos:end="71:57"><name pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:11">ctx</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:20">btarget</name></name> <operator pos:start="71:22" pos:end="71:22">=</operator> <call pos:start="71:24" pos:end="71:57"><name pos:start="71:24" pos:end="71:31">addr_add</name><argument_list pos:start="71:32" pos:end="71:57">(<argument pos:start="71:33" pos:end="71:35"><expr pos:start="71:33" pos:end="71:35"><name pos:start="71:33" pos:end="71:35">ctx</name></expr></argument>, <argument pos:start="71:38" pos:end="71:48"><expr pos:start="71:38" pos:end="71:48"><name pos:start="71:38" pos:end="71:44"><name pos:start="71:38" pos:end="71:40">ctx</name><operator pos:start="71:41" pos:end="71:42">-&gt;</operator><name pos:start="71:43" pos:end="71:44">pc</name></name> <operator pos:start="71:46" pos:end="71:46">+</operator> <literal type="number" pos:start="71:48" pos:end="71:48">4</literal></expr></argument>, <argument pos:start="71:51" pos:end="71:56"><expr pos:start="71:51" pos:end="71:56"><name pos:start="71:51" pos:end="71:56">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:21">case <expr pos:start="75:10" pos:end="75:20"><name pos:start="75:10" pos:end="75:20">OPC_BLEZALC</name></expr>:</case> <comment type="block" pos:start="75:23" pos:end="75:50">/* OPC_BGEZALC, OPC_BGEUC */</comment>

    <case pos:start="77:5" pos:end="77:21">case <expr pos:start="77:10" pos:end="77:20"><name pos:start="77:10" pos:end="77:20">OPC_BGTZALC</name></expr>:</case> <comment type="block" pos:start="77:23" pos:end="77:50">/* OPC_BLTZALC, OPC_BLTUC */</comment>

        <if_stmt pos:start="79:9" pos:end="87:9"><if pos:start="79:9" pos:end="87:9">if <condition pos:start="79:12" pos:end="79:32">(<expr pos:start="79:13" pos:end="79:31"><name pos:start="79:13" pos:end="79:14">rs</name> <operator pos:start="79:16" pos:end="79:17">==</operator> <literal type="number" pos:start="79:19" pos:end="79:19">0</literal> <operator pos:start="79:21" pos:end="79:22">||</operator> <name pos:start="79:24" pos:end="79:25">rs</name> <operator pos:start="79:27" pos:end="79:28">==</operator> <name pos:start="79:30" pos:end="79:31">rt</name></expr>)</condition> <block pos:start="79:34" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:54">

            <comment type="block" pos:start="81:13" pos:end="81:42">/* OPC_BLEZALC, OPC_BGEZALC */</comment>

            <comment type="block" pos:start="83:13" pos:end="83:42">/* OPC_BGTZALC, OPC_BLTZALC */</comment>

            <expr_stmt pos:start="85:13" pos:end="85:54"><expr pos:start="85:13" pos:end="85:53"><call pos:start="85:13" pos:end="85:53"><name pos:start="85:13" pos:end="85:27">tcg_gen_movi_tl</name><argument_list pos:start="85:28" pos:end="85:53">(<argument pos:start="85:29" pos:end="85:39"><expr pos:start="85:29" pos:end="85:39"><name pos:start="85:29" pos:end="85:39"><name pos:start="85:29" pos:end="85:35">cpu_gpr</name><index pos:start="85:36" pos:end="85:39">[<expr pos:start="85:37" pos:end="85:38"><literal type="number" pos:start="85:37" pos:end="85:38">31</literal></expr>]</index></name></expr></argument>, <argument pos:start="85:42" pos:end="85:52"><expr pos:start="85:42" pos:end="85:52"><name pos:start="85:42" pos:end="85:48"><name pos:start="85:42" pos:end="85:44">ctx</name><operator pos:start="85:45" pos:end="85:46">-&gt;</operator><name pos:start="85:47" pos:end="85:48">pc</name></name> <operator pos:start="85:50" pos:end="85:50">+</operator> <literal type="number" pos:start="85:52" pos:end="85:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:29"><expr pos:start="89:9" pos:end="89:28"><call pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:20">gen_load_gpr</name><argument_list pos:start="89:21" pos:end="89:28">(<argument pos:start="89:22" pos:end="89:23"><expr pos:start="89:22" pos:end="89:23"><name pos:start="89:22" pos:end="89:23">t0</name></expr></argument>, <argument pos:start="89:26" pos:end="89:27"><expr pos:start="89:26" pos:end="89:27"><name pos:start="89:26" pos:end="89:27">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:29"><expr pos:start="91:9" pos:end="91:28"><call pos:start="91:9" pos:end="91:28"><name pos:start="91:9" pos:end="91:20">gen_load_gpr</name><argument_list pos:start="91:21" pos:end="91:28">(<argument pos:start="91:22" pos:end="91:23"><expr pos:start="91:22" pos:end="91:23"><name pos:start="91:22" pos:end="91:23">t1</name></expr></argument>, <argument pos:start="91:26" pos:end="91:27"><expr pos:start="91:26" pos:end="91:27"><name pos:start="91:26" pos:end="91:27">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:26"><expr pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:21">bcond_compute</name> <operator pos:start="93:23" pos:end="93:23">=</operator> <literal type="number" pos:start="93:25" pos:end="93:25">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:58"><expr pos:start="95:9" pos:end="95:57"><name pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:11">ctx</name><operator pos:start="95:12" pos:end="95:13">-&gt;</operator><name pos:start="95:14" pos:end="95:20">btarget</name></name> <operator pos:start="95:22" pos:end="95:22">=</operator> <call pos:start="95:24" pos:end="95:57"><name pos:start="95:24" pos:end="95:31">addr_add</name><argument_list pos:start="95:32" pos:end="95:57">(<argument pos:start="95:33" pos:end="95:35"><expr pos:start="95:33" pos:end="95:35"><name pos:start="95:33" pos:end="95:35">ctx</name></expr></argument>, <argument pos:start="95:38" pos:end="95:48"><expr pos:start="95:38" pos:end="95:48"><name pos:start="95:38" pos:end="95:44"><name pos:start="95:38" pos:end="95:40">ctx</name><operator pos:start="95:41" pos:end="95:42">-&gt;</operator><name pos:start="95:43" pos:end="95:44">pc</name></name> <operator pos:start="95:46" pos:end="95:46">+</operator> <literal type="number" pos:start="95:48" pos:end="95:48">4</literal></expr></argument>, <argument pos:start="95:51" pos:end="95:56"><expr pos:start="95:51" pos:end="95:56"><name pos:start="95:51" pos:end="95:56">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    <case pos:start="99:5" pos:end="99:16">case <expr pos:start="99:10" pos:end="99:15"><name pos:start="99:10" pos:end="99:15">OPC_BC</name></expr>:</case>

    <case pos:start="101:5" pos:end="101:18">case <expr pos:start="101:10" pos:end="101:17"><name pos:start="101:10" pos:end="101:17">OPC_BALC</name></expr>:</case>

        <expr_stmt pos:start="103:9" pos:end="103:58"><expr pos:start="103:9" pos:end="103:57"><name pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:11">ctx</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:20">btarget</name></name> <operator pos:start="103:22" pos:end="103:22">=</operator> <call pos:start="103:24" pos:end="103:57"><name pos:start="103:24" pos:end="103:31">addr_add</name><argument_list pos:start="103:32" pos:end="103:57">(<argument pos:start="103:33" pos:end="103:35"><expr pos:start="103:33" pos:end="103:35"><name pos:start="103:33" pos:end="103:35">ctx</name></expr></argument>, <argument pos:start="103:38" pos:end="103:48"><expr pos:start="103:38" pos:end="103:48"><name pos:start="103:38" pos:end="103:44"><name pos:start="103:38" pos:end="103:40">ctx</name><operator pos:start="103:41" pos:end="103:42">-&gt;</operator><name pos:start="103:43" pos:end="103:44">pc</name></name> <operator pos:start="103:46" pos:end="103:46">+</operator> <literal type="number" pos:start="103:48" pos:end="103:48">4</literal></expr></argument>, <argument pos:start="103:51" pos:end="103:56"><expr pos:start="103:51" pos:end="103:56"><name pos:start="103:51" pos:end="103:56">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:19">case <expr pos:start="107:10" pos:end="107:18"><name pos:start="107:10" pos:end="107:18">OPC_BEQZC</name></expr>:</case>

    <case pos:start="109:5" pos:end="109:19">case <expr pos:start="109:10" pos:end="109:18"><name pos:start="109:10" pos:end="109:18">OPC_BNEZC</name></expr>:</case>

        <if_stmt pos:start="111:9" pos:end="141:9"><if pos:start="111:9" pos:end="121:9">if <condition pos:start="111:12" pos:end="111:20">(<expr pos:start="111:13" pos:end="111:19"><name pos:start="111:13" pos:end="111:14">rs</name> <operator pos:start="111:16" pos:end="111:17">!=</operator> <literal type="number" pos:start="111:19" pos:end="111:19">0</literal></expr>)</condition> <block pos:start="111:22" pos:end="121:9">{<block_content pos:start="115:13" pos:end="119:62">

            <comment type="block" pos:start="113:13" pos:end="113:38">/* OPC_BEQZC, OPC_BNEZC */</comment>

            <expr_stmt pos:start="115:13" pos:end="115:33"><expr pos:start="115:13" pos:end="115:32"><call pos:start="115:13" pos:end="115:32"><name pos:start="115:13" pos:end="115:24">gen_load_gpr</name><argument_list pos:start="115:25" pos:end="115:32">(<argument pos:start="115:26" pos:end="115:27"><expr pos:start="115:26" pos:end="115:27"><name pos:start="115:26" pos:end="115:27">t0</name></expr></argument>, <argument pos:start="115:30" pos:end="115:31"><expr pos:start="115:30" pos:end="115:31"><name pos:start="115:30" pos:end="115:31">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:30"><expr pos:start="117:13" pos:end="117:29"><name pos:start="117:13" pos:end="117:25">bcond_compute</name> <operator pos:start="117:27" pos:end="117:27">=</operator> <literal type="number" pos:start="117:29" pos:end="117:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:62"><expr pos:start="119:13" pos:end="119:61"><name pos:start="119:13" pos:end="119:24"><name pos:start="119:13" pos:end="119:15">ctx</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:24">btarget</name></name> <operator pos:start="119:26" pos:end="119:26">=</operator> <call pos:start="119:28" pos:end="119:61"><name pos:start="119:28" pos:end="119:35">addr_add</name><argument_list pos:start="119:36" pos:end="119:61">(<argument pos:start="119:37" pos:end="119:39"><expr pos:start="119:37" pos:end="119:39"><name pos:start="119:37" pos:end="119:39">ctx</name></expr></argument>, <argument pos:start="119:42" pos:end="119:52"><expr pos:start="119:42" pos:end="119:52"><name pos:start="119:42" pos:end="119:48"><name pos:start="119:42" pos:end="119:44">ctx</name><operator pos:start="119:45" pos:end="119:46">-&gt;</operator><name pos:start="119:47" pos:end="119:48">pc</name></name> <operator pos:start="119:50" pos:end="119:50">+</operator> <literal type="number" pos:start="119:52" pos:end="119:52">4</literal></expr></argument>, <argument pos:start="119:55" pos:end="119:60"><expr pos:start="119:55" pos:end="119:60"><name pos:start="119:55" pos:end="119:60">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="141:9">else <block pos:start="121:16" pos:end="141:9">{<block_content pos:start="125:13" pos:end="139:35">

            <comment type="block" pos:start="123:13" pos:end="123:36">/* OPC_JIC, OPC_JIALC */</comment>

            <decl_stmt pos:start="125:13" pos:end="125:40"><decl pos:start="125:13" pos:end="125:39"><type pos:start="125:13" pos:end="125:16"><name pos:start="125:13" pos:end="125:16">TCGv</name></type> <name pos:start="125:18" pos:end="125:22">tbase</name> <init pos:start="125:24" pos:end="125:39">= <expr pos:start="125:26" pos:end="125:39"><call pos:start="125:26" pos:end="125:39"><name pos:start="125:26" pos:end="125:37">tcg_temp_new</name><argument_list pos:start="125:38" pos:end="125:39">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="127:13" pos:end="127:42"><decl pos:start="127:13" pos:end="127:41"><type pos:start="127:13" pos:end="127:16"><name pos:start="127:13" pos:end="127:16">TCGv</name></type> <name pos:start="127:18" pos:end="127:24">toffset</name> <init pos:start="127:26" pos:end="127:41">= <expr pos:start="127:28" pos:end="127:41"><call pos:start="127:28" pos:end="127:41"><name pos:start="127:28" pos:end="127:39">tcg_temp_new</name><argument_list pos:start="127:40" pos:end="127:41">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="131:13" pos:end="131:36"><expr pos:start="131:13" pos:end="131:35"><call pos:start="131:13" pos:end="131:35"><name pos:start="131:13" pos:end="131:24">gen_load_gpr</name><argument_list pos:start="131:25" pos:end="131:35">(<argument pos:start="131:26" pos:end="131:30"><expr pos:start="131:26" pos:end="131:30"><name pos:start="131:26" pos:end="131:30">tbase</name></expr></argument>, <argument pos:start="131:33" pos:end="131:34"><expr pos:start="131:33" pos:end="131:34"><name pos:start="131:33" pos:end="131:34">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:45"><expr pos:start="133:13" pos:end="133:44"><call pos:start="133:13" pos:end="133:44"><name pos:start="133:13" pos:end="133:27">tcg_gen_movi_tl</name><argument_list pos:start="133:28" pos:end="133:44">(<argument pos:start="133:29" pos:end="133:35"><expr pos:start="133:29" pos:end="133:35"><name pos:start="133:29" pos:end="133:35">toffset</name></expr></argument>, <argument pos:start="133:38" pos:end="133:43"><expr pos:start="133:38" pos:end="133:43"><name pos:start="133:38" pos:end="133:43">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:58"><expr pos:start="135:13" pos:end="135:57"><call pos:start="135:13" pos:end="135:57"><name pos:start="135:13" pos:end="135:27">gen_op_addr_add</name><argument_list pos:start="135:28" pos:end="135:57">(<argument pos:start="135:29" pos:end="135:31"><expr pos:start="135:29" pos:end="135:31"><name pos:start="135:29" pos:end="135:31">ctx</name></expr></argument>, <argument pos:start="135:34" pos:end="135:40"><expr pos:start="135:34" pos:end="135:40"><name pos:start="135:34" pos:end="135:40">btarget</name></expr></argument>, <argument pos:start="135:43" pos:end="135:47"><expr pos:start="135:43" pos:end="135:47"><name pos:start="135:43" pos:end="135:47">tbase</name></expr></argument>, <argument pos:start="135:50" pos:end="135:56"><expr pos:start="135:50" pos:end="135:56"><name pos:start="135:50" pos:end="135:56">toffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:33"><expr pos:start="137:13" pos:end="137:32"><call pos:start="137:13" pos:end="137:32"><name pos:start="137:13" pos:end="137:25">tcg_temp_free</name><argument_list pos:start="137:26" pos:end="137:32">(<argument pos:start="137:27" pos:end="137:31"><expr pos:start="137:27" pos:end="137:31"><name pos:start="137:27" pos:end="137:31">tbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:35"><expr pos:start="139:13" pos:end="139:34"><call pos:start="139:13" pos:end="139:34"><name pos:start="139:13" pos:end="139:25">tcg_temp_free</name><argument_list pos:start="139:26" pos:end="139:34">(<argument pos:start="139:27" pos:end="139:33"><expr pos:start="139:27" pos:end="139:33"><name pos:start="139:27" pos:end="139:33">toffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    <default pos:start="145:5" pos:end="145:12">default:</default>

        <expr_stmt pos:start="147:9" pos:end="147:42"><expr pos:start="147:9" pos:end="147:41"><call pos:start="147:9" pos:end="147:41"><name pos:start="147:9" pos:end="147:18">MIPS_INVAL</name><argument_list pos:start="147:19" pos:end="147:41">(<argument pos:start="147:20" pos:end="147:40"><expr pos:start="147:20" pos:end="147:40"><literal type="string" pos:start="147:20" pos:end="147:40">"Compact branch/jump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:41"><expr pos:start="149:9" pos:end="149:40"><call pos:start="149:9" pos:end="149:40"><name pos:start="149:9" pos:end="149:26">generate_exception</name><argument_list pos:start="149:27" pos:end="149:40">(<argument pos:start="149:28" pos:end="149:30"><expr pos:start="149:28" pos:end="149:30"><name pos:start="149:28" pos:end="149:30">ctx</name></expr></argument>, <argument pos:start="149:33" pos:end="149:39"><expr pos:start="149:33" pos:end="149:39"><name pos:start="149:33" pos:end="149:39">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="151:9" pos:end="151:17">goto <name pos:start="151:14" pos:end="151:16">out</name>;</goto>

    </block_content>}</block></switch>



    <if_stmt pos:start="157:5" pos:end="457:5"><if pos:start="157:5" pos:end="203:5">if <condition pos:start="157:8" pos:end="157:27">(<expr pos:start="157:9" pos:end="157:26"><name pos:start="157:9" pos:end="157:21">bcond_compute</name> <operator pos:start="157:23" pos:end="157:24">==</operator> <literal type="number" pos:start="157:26" pos:end="157:26">0</literal></expr>)</condition> <block pos:start="157:29" pos:end="203:5">{<block_content pos:start="161:9" pos:end="201:27">

        <comment type="block" pos:start="159:9" pos:end="159:41">/* Uncoditional compact branch */</comment>

        <switch pos:start="161:9" pos:end="195:9">switch <condition pos:start="161:16" pos:end="161:20">(<expr pos:start="161:17" pos:end="161:19"><name pos:start="161:17" pos:end="161:19">opc</name></expr>)</condition> <block pos:start="161:22" pos:end="195:9">{<block_content pos:start="163:9" pos:end="193:21">

        <case pos:start="163:9" pos:end="163:23">case <expr pos:start="163:14" pos:end="163:22"><name pos:start="163:14" pos:end="163:22">OPC_JIALC</name></expr>:</case>

            <expr_stmt pos:start="165:13" pos:end="165:54"><expr pos:start="165:13" pos:end="165:53"><call pos:start="165:13" pos:end="165:53"><name pos:start="165:13" pos:end="165:27">tcg_gen_movi_tl</name><argument_list pos:start="165:28" pos:end="165:53">(<argument pos:start="165:29" pos:end="165:39"><expr pos:start="165:29" pos:end="165:39"><name pos:start="165:29" pos:end="165:39"><name pos:start="165:29" pos:end="165:35">cpu_gpr</name><index pos:start="165:36" pos:end="165:39">[<expr pos:start="165:37" pos:end="165:38"><literal type="number" pos:start="165:37" pos:end="165:38">31</literal></expr>]</index></name></expr></argument>, <argument pos:start="165:42" pos:end="165:52"><expr pos:start="165:42" pos:end="165:52"><name pos:start="165:42" pos:end="165:48"><name pos:start="165:42" pos:end="165:44">ctx</name><operator pos:start="165:45" pos:end="165:46">-&gt;</operator><name pos:start="165:47" pos:end="165:48">pc</name></name> <operator pos:start="165:50" pos:end="165:50">+</operator> <literal type="number" pos:start="165:52" pos:end="165:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="167:13" pos:end="167:29">/* Fallthrough */</comment>

        <case pos:start="169:9" pos:end="169:21">case <expr pos:start="169:14" pos:end="169:20"><name pos:start="169:14" pos:end="169:20">OPC_JIC</name></expr>:</case>

            <expr_stmt pos:start="171:13" pos:end="171:41"><expr pos:start="171:13" pos:end="171:40"><name pos:start="171:13" pos:end="171:23"><name pos:start="171:13" pos:end="171:15">ctx</name><operator pos:start="171:16" pos:end="171:17">-&gt;</operator><name pos:start="171:18" pos:end="171:23">hflags</name></name> <operator pos:start="171:25" pos:end="171:26">|=</operator> <name pos:start="171:28" pos:end="171:40">MIPS_HFLAG_BR</name></expr>;</expr_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>

        <case pos:start="175:9" pos:end="175:22">case <expr pos:start="175:14" pos:end="175:21"><name pos:start="175:14" pos:end="175:21">OPC_BALC</name></expr>:</case>

            <expr_stmt pos:start="177:13" pos:end="177:54"><expr pos:start="177:13" pos:end="177:53"><call pos:start="177:13" pos:end="177:53"><name pos:start="177:13" pos:end="177:27">tcg_gen_movi_tl</name><argument_list pos:start="177:28" pos:end="177:53">(<argument pos:start="177:29" pos:end="177:39"><expr pos:start="177:29" pos:end="177:39"><name pos:start="177:29" pos:end="177:39"><name pos:start="177:29" pos:end="177:35">cpu_gpr</name><index pos:start="177:36" pos:end="177:39">[<expr pos:start="177:37" pos:end="177:38"><literal type="number" pos:start="177:37" pos:end="177:38">31</literal></expr>]</index></name></expr></argument>, <argument pos:start="177:42" pos:end="177:52"><expr pos:start="177:42" pos:end="177:52"><name pos:start="177:42" pos:end="177:48"><name pos:start="177:42" pos:end="177:44">ctx</name><operator pos:start="177:45" pos:end="177:46">-&gt;</operator><name pos:start="177:47" pos:end="177:48">pc</name></name> <operator pos:start="177:50" pos:end="177:50">+</operator> <literal type="number" pos:start="177:52" pos:end="177:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="179:13" pos:end="179:29">/* Fallthrough */</comment>

        <case pos:start="181:9" pos:end="181:20">case <expr pos:start="181:14" pos:end="181:19"><name pos:start="181:14" pos:end="181:19">OPC_BC</name></expr>:</case>

            <expr_stmt pos:start="183:13" pos:end="183:40"><expr pos:start="183:13" pos:end="183:39"><name pos:start="183:13" pos:end="183:23"><name pos:start="183:13" pos:end="183:15">ctx</name><operator pos:start="183:16" pos:end="183:17">-&gt;</operator><name pos:start="183:18" pos:end="183:23">hflags</name></name> <operator pos:start="183:25" pos:end="183:26">|=</operator> <name pos:start="183:28" pos:end="183:39">MIPS_HFLAG_B</name></expr>;</expr_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        <default pos:start="187:9" pos:end="187:16">default:</default>

            <expr_stmt pos:start="189:13" pos:end="189:46"><expr pos:start="189:13" pos:end="189:45"><call pos:start="189:13" pos:end="189:45"><name pos:start="189:13" pos:end="189:22">MIPS_INVAL</name><argument_list pos:start="189:23" pos:end="189:45">(<argument pos:start="189:24" pos:end="189:44"><expr pos:start="189:24" pos:end="189:44"><literal type="string" pos:start="189:24" pos:end="189:44">"Compact branch/jump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:45"><expr pos:start="191:13" pos:end="191:44"><call pos:start="191:13" pos:end="191:44"><name pos:start="191:13" pos:end="191:30">generate_exception</name><argument_list pos:start="191:31" pos:end="191:44">(<argument pos:start="191:32" pos:end="191:34"><expr pos:start="191:32" pos:end="191:34"><name pos:start="191:32" pos:end="191:34">ctx</name></expr></argument>, <argument pos:start="191:37" pos:end="191:43"><expr pos:start="191:37" pos:end="191:43"><name pos:start="191:37" pos:end="191:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="193:13" pos:end="193:21">goto <name pos:start="193:18" pos:end="193:20">out</name>;</goto>

        </block_content>}</block></switch>



        <comment type="block" pos:start="199:9" pos:end="199:78">/* Generating branch here as compact branches don't have delay slot */</comment>

        <expr_stmt pos:start="201:9" pos:end="201:27"><expr pos:start="201:9" pos:end="201:26"><call pos:start="201:9" pos:end="201:26"><name pos:start="201:9" pos:end="201:18">gen_branch</name><argument_list pos:start="201:19" pos:end="201:26">(<argument pos:start="201:20" pos:end="201:22"><expr pos:start="201:20" pos:end="201:22"><name pos:start="201:20" pos:end="201:22">ctx</name></expr></argument>, <argument pos:start="201:25" pos:end="201:25"><expr pos:start="201:25" pos:end="201:25"><literal type="number" pos:start="201:25" pos:end="201:25">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="203:7" pos:end="457:5">else <block pos:start="203:12" pos:end="457:5">{<block_content pos:start="207:9" pos:end="455:49">

        <comment type="block" pos:start="205:9" pos:end="205:40">/* Conditional compact branch */</comment>

        <decl_stmt pos:start="207:9" pos:end="207:33"><decl pos:start="207:9" pos:end="207:32"><type pos:start="207:9" pos:end="207:11"><name pos:start="207:9" pos:end="207:11">int</name></type> <name pos:start="207:13" pos:end="207:14">fs</name> <init pos:start="207:16" pos:end="207:32">= <expr pos:start="207:18" pos:end="207:32"><call pos:start="207:18" pos:end="207:32"><name pos:start="207:18" pos:end="207:30">gen_new_label</name><argument_list pos:start="207:31" pos:end="207:32">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:31"><expr pos:start="209:9" pos:end="209:30"><call pos:start="209:9" pos:end="209:30"><name pos:start="209:9" pos:end="209:22">save_cpu_state</name><argument_list pos:start="209:23" pos:end="209:30">(<argument pos:start="209:24" pos:end="209:26"><expr pos:start="209:24" pos:end="209:26"><name pos:start="209:24" pos:end="209:26">ctx</name></expr></argument>, <argument pos:start="209:29" pos:end="209:29"><expr pos:start="209:29" pos:end="209:29"><literal type="number" pos:start="209:29" pos:end="209:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="213:9" pos:end="441:9">switch <condition pos:start="213:16" pos:end="213:20">(<expr pos:start="213:17" pos:end="213:19"><name pos:start="213:17" pos:end="213:19">opc</name></expr>)</condition> <block pos:start="213:22" pos:end="441:9">{<block_content pos:start="215:9" pos:end="439:21">

        <case pos:start="215:9" pos:end="215:25">case <expr pos:start="215:14" pos:end="215:24"><name pos:start="215:14" pos:end="215:24">OPC_BLEZALC</name></expr>:</case> <comment type="block" pos:start="215:27" pos:end="215:54">/* OPC_BGEZALC, OPC_BGEUC */</comment>

            <if_stmt pos:start="217:13" pos:end="235:13"><if pos:start="217:13" pos:end="223:13">if <condition pos:start="217:16" pos:end="217:35">(<expr pos:start="217:17" pos:end="217:34"><name pos:start="217:17" pos:end="217:18">rs</name> <operator pos:start="217:20" pos:end="217:21">==</operator> <literal type="number" pos:start="217:23" pos:end="217:23">0</literal> <operator pos:start="217:25" pos:end="217:26">&amp;&amp;</operator> <name pos:start="217:28" pos:end="217:29">rt</name> <operator pos:start="217:31" pos:end="217:32">!=</operator> <literal type="number" pos:start="217:34" pos:end="217:34">0</literal></expr>)</condition> <block pos:start="217:37" pos:end="223:13">{<block_content pos:start="221:17" pos:end="221:76">

                <comment type="block" pos:start="219:17" pos:end="219:33">/* OPC_BLEZALC */</comment>

                <expr_stmt pos:start="221:17" pos:end="221:76"><expr pos:start="221:17" pos:end="221:75"><call pos:start="221:17" pos:end="221:75"><name pos:start="221:17" pos:end="221:34">tcg_gen_brcondi_tl</name><argument_list pos:start="221:35" pos:end="221:75">(<argument pos:start="221:36" pos:end="221:63"><expr pos:start="221:36" pos:end="221:63"><call pos:start="221:36" pos:end="221:63"><name pos:start="221:36" pos:end="221:50">tcg_invert_cond</name><argument_list pos:start="221:51" pos:end="221:63">(<argument pos:start="221:52" pos:end="221:62"><expr pos:start="221:52" pos:end="221:62"><name pos:start="221:52" pos:end="221:62">TCG_COND_LE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="221:66" pos:end="221:67"><expr pos:start="221:66" pos:end="221:67"><name pos:start="221:66" pos:end="221:67">t1</name></expr></argument>, <argument pos:start="221:70" pos:end="221:70"><expr pos:start="221:70" pos:end="221:70"><literal type="number" pos:start="221:70" pos:end="221:70">0</literal></expr></argument>, <argument pos:start="221:73" pos:end="221:74"><expr pos:start="221:73" pos:end="221:74"><name pos:start="221:73" pos:end="221:74">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="223:15" pos:end="229:13">else if <condition pos:start="223:23" pos:end="223:54">(<expr pos:start="223:24" pos:end="223:53"><name pos:start="223:24" pos:end="223:25">rs</name> <operator pos:start="223:27" pos:end="223:28">!=</operator> <literal type="number" pos:start="223:30" pos:end="223:30">0</literal> <operator pos:start="223:32" pos:end="223:33">&amp;&amp;</operator> <name pos:start="223:35" pos:end="223:36">rt</name> <operator pos:start="223:38" pos:end="223:39">!=</operator> <literal type="number" pos:start="223:41" pos:end="223:41">0</literal> <operator pos:start="223:43" pos:end="223:44">&amp;&amp;</operator> <name pos:start="223:46" pos:end="223:47">rs</name> <operator pos:start="223:49" pos:end="223:50">==</operator> <name pos:start="223:52" pos:end="223:53">rt</name></expr>)</condition> <block pos:start="223:56" pos:end="229:13">{<block_content pos:start="227:17" pos:end="227:76">

                <comment type="block" pos:start="225:17" pos:end="225:33">/* OPC_BGEZALC */</comment>

                <expr_stmt pos:start="227:17" pos:end="227:76"><expr pos:start="227:17" pos:end="227:75"><call pos:start="227:17" pos:end="227:75"><name pos:start="227:17" pos:end="227:34">tcg_gen_brcondi_tl</name><argument_list pos:start="227:35" pos:end="227:75">(<argument pos:start="227:36" pos:end="227:63"><expr pos:start="227:36" pos:end="227:63"><call pos:start="227:36" pos:end="227:63"><name pos:start="227:36" pos:end="227:50">tcg_invert_cond</name><argument_list pos:start="227:51" pos:end="227:63">(<argument pos:start="227:52" pos:end="227:62"><expr pos:start="227:52" pos:end="227:62"><name pos:start="227:52" pos:end="227:62">TCG_COND_GE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="227:66" pos:end="227:67"><expr pos:start="227:66" pos:end="227:67"><name pos:start="227:66" pos:end="227:67">t1</name></expr></argument>, <argument pos:start="227:70" pos:end="227:70"><expr pos:start="227:70" pos:end="227:70"><literal type="number" pos:start="227:70" pos:end="227:70">0</literal></expr></argument>, <argument pos:start="227:73" pos:end="227:74"><expr pos:start="227:73" pos:end="227:74"><name pos:start="227:73" pos:end="227:74">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="229:15" pos:end="235:13">else <block pos:start="229:20" pos:end="235:13">{<block_content pos:start="233:17" pos:end="233:77">

                <comment type="block" pos:start="231:17" pos:end="231:31">/* OPC_BGEUC */</comment>

                <expr_stmt pos:start="233:17" pos:end="233:77"><expr pos:start="233:17" pos:end="233:76"><call pos:start="233:17" pos:end="233:76"><name pos:start="233:17" pos:end="233:33">tcg_gen_brcond_tl</name><argument_list pos:start="233:34" pos:end="233:76">(<argument pos:start="233:35" pos:end="233:63"><expr pos:start="233:35" pos:end="233:63"><call pos:start="233:35" pos:end="233:63"><name pos:start="233:35" pos:end="233:49">tcg_invert_cond</name><argument_list pos:start="233:50" pos:end="233:63">(<argument pos:start="233:51" pos:end="233:62"><expr pos:start="233:51" pos:end="233:62"><name pos:start="233:51" pos:end="233:62">TCG_COND_GEU</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="233:66" pos:end="233:67"><expr pos:start="233:66" pos:end="233:67"><name pos:start="233:66" pos:end="233:67">t0</name></expr></argument>, <argument pos:start="233:70" pos:end="233:71"><expr pos:start="233:70" pos:end="233:71"><name pos:start="233:70" pos:end="233:71">t1</name></expr></argument>, <argument pos:start="233:74" pos:end="233:75"><expr pos:start="233:74" pos:end="233:75"><name pos:start="233:74" pos:end="233:75">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="237:13" pos:end="237:18">break;</break>

        <case pos:start="239:9" pos:end="239:25">case <expr pos:start="239:14" pos:end="239:24"><name pos:start="239:14" pos:end="239:24">OPC_BGTZALC</name></expr>:</case> <comment type="block" pos:start="239:27" pos:end="239:54">/* OPC_BLTZALC, OPC_BLTUC */</comment>

            <if_stmt pos:start="241:13" pos:end="259:13"><if pos:start="241:13" pos:end="247:13">if <condition pos:start="241:16" pos:end="241:35">(<expr pos:start="241:17" pos:end="241:34"><name pos:start="241:17" pos:end="241:18">rs</name> <operator pos:start="241:20" pos:end="241:21">==</operator> <literal type="number" pos:start="241:23" pos:end="241:23">0</literal> <operator pos:start="241:25" pos:end="241:26">&amp;&amp;</operator> <name pos:start="241:28" pos:end="241:29">rt</name> <operator pos:start="241:31" pos:end="241:32">!=</operator> <literal type="number" pos:start="241:34" pos:end="241:34">0</literal></expr>)</condition> <block pos:start="241:37" pos:end="247:13">{<block_content pos:start="245:17" pos:end="245:76">

                <comment type="block" pos:start="243:17" pos:end="243:33">/* OPC_BGTZALC */</comment>

                <expr_stmt pos:start="245:17" pos:end="245:76"><expr pos:start="245:17" pos:end="245:75"><call pos:start="245:17" pos:end="245:75"><name pos:start="245:17" pos:end="245:34">tcg_gen_brcondi_tl</name><argument_list pos:start="245:35" pos:end="245:75">(<argument pos:start="245:36" pos:end="245:63"><expr pos:start="245:36" pos:end="245:63"><call pos:start="245:36" pos:end="245:63"><name pos:start="245:36" pos:end="245:50">tcg_invert_cond</name><argument_list pos:start="245:51" pos:end="245:63">(<argument pos:start="245:52" pos:end="245:62"><expr pos:start="245:52" pos:end="245:62"><name pos:start="245:52" pos:end="245:62">TCG_COND_GT</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="245:66" pos:end="245:67"><expr pos:start="245:66" pos:end="245:67"><name pos:start="245:66" pos:end="245:67">t1</name></expr></argument>, <argument pos:start="245:70" pos:end="245:70"><expr pos:start="245:70" pos:end="245:70"><literal type="number" pos:start="245:70" pos:end="245:70">0</literal></expr></argument>, <argument pos:start="245:73" pos:end="245:74"><expr pos:start="245:73" pos:end="245:74"><name pos:start="245:73" pos:end="245:74">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="247:15" pos:end="253:13">else if <condition pos:start="247:23" pos:end="247:54">(<expr pos:start="247:24" pos:end="247:53"><name pos:start="247:24" pos:end="247:25">rs</name> <operator pos:start="247:27" pos:end="247:28">!=</operator> <literal type="number" pos:start="247:30" pos:end="247:30">0</literal> <operator pos:start="247:32" pos:end="247:33">&amp;&amp;</operator> <name pos:start="247:35" pos:end="247:36">rt</name> <operator pos:start="247:38" pos:end="247:39">!=</operator> <literal type="number" pos:start="247:41" pos:end="247:41">0</literal> <operator pos:start="247:43" pos:end="247:44">&amp;&amp;</operator> <name pos:start="247:46" pos:end="247:47">rs</name> <operator pos:start="247:49" pos:end="247:50">==</operator> <name pos:start="247:52" pos:end="247:53">rt</name></expr>)</condition> <block pos:start="247:56" pos:end="253:13">{<block_content pos:start="251:17" pos:end="251:76">

                <comment type="block" pos:start="249:17" pos:end="249:33">/* OPC_BLTZALC */</comment>

                <expr_stmt pos:start="251:17" pos:end="251:76"><expr pos:start="251:17" pos:end="251:75"><call pos:start="251:17" pos:end="251:75"><name pos:start="251:17" pos:end="251:34">tcg_gen_brcondi_tl</name><argument_list pos:start="251:35" pos:end="251:75">(<argument pos:start="251:36" pos:end="251:63"><expr pos:start="251:36" pos:end="251:63"><call pos:start="251:36" pos:end="251:63"><name pos:start="251:36" pos:end="251:50">tcg_invert_cond</name><argument_list pos:start="251:51" pos:end="251:63">(<argument pos:start="251:52" pos:end="251:62"><expr pos:start="251:52" pos:end="251:62"><name pos:start="251:52" pos:end="251:62">TCG_COND_LT</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="251:66" pos:end="251:67"><expr pos:start="251:66" pos:end="251:67"><name pos:start="251:66" pos:end="251:67">t1</name></expr></argument>, <argument pos:start="251:70" pos:end="251:70"><expr pos:start="251:70" pos:end="251:70"><literal type="number" pos:start="251:70" pos:end="251:70">0</literal></expr></argument>, <argument pos:start="251:73" pos:end="251:74"><expr pos:start="251:73" pos:end="251:74"><name pos:start="251:73" pos:end="251:74">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="253:15" pos:end="259:13">else <block pos:start="253:20" pos:end="259:13">{<block_content pos:start="257:17" pos:end="257:77">

                <comment type="block" pos:start="255:17" pos:end="255:31">/* OPC_BLTUC */</comment>

                <expr_stmt pos:start="257:17" pos:end="257:77"><expr pos:start="257:17" pos:end="257:76"><call pos:start="257:17" pos:end="257:76"><name pos:start="257:17" pos:end="257:33">tcg_gen_brcond_tl</name><argument_list pos:start="257:34" pos:end="257:76">(<argument pos:start="257:35" pos:end="257:63"><expr pos:start="257:35" pos:end="257:63"><call pos:start="257:35" pos:end="257:63"><name pos:start="257:35" pos:end="257:49">tcg_invert_cond</name><argument_list pos:start="257:50" pos:end="257:63">(<argument pos:start="257:51" pos:end="257:62"><expr pos:start="257:51" pos:end="257:62"><name pos:start="257:51" pos:end="257:62">TCG_COND_LTU</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="257:66" pos:end="257:67"><expr pos:start="257:66" pos:end="257:67"><name pos:start="257:66" pos:end="257:67">t0</name></expr></argument>, <argument pos:start="257:70" pos:end="257:71"><expr pos:start="257:70" pos:end="257:71"><name pos:start="257:70" pos:end="257:71">t1</name></expr></argument>, <argument pos:start="257:74" pos:end="257:75"><expr pos:start="257:74" pos:end="257:75"><name pos:start="257:74" pos:end="257:75">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="261:13" pos:end="261:18">break;</break>

        <case pos:start="263:9" pos:end="263:23">case <expr pos:start="263:14" pos:end="263:22"><name pos:start="263:14" pos:end="263:22">OPC_BLEZC</name></expr>:</case> <comment type="block" pos:start="263:25" pos:end="263:49">/* OPC_BGEZC, OPC_BGEC */</comment>

            <if_stmt pos:start="265:13" pos:end="283:13"><if pos:start="265:13" pos:end="271:13">if <condition pos:start="265:16" pos:end="265:35">(<expr pos:start="265:17" pos:end="265:34"><name pos:start="265:17" pos:end="265:18">rs</name> <operator pos:start="265:20" pos:end="265:21">==</operator> <literal type="number" pos:start="265:23" pos:end="265:23">0</literal> <operator pos:start="265:25" pos:end="265:26">&amp;&amp;</operator> <name pos:start="265:28" pos:end="265:29">rt</name> <operator pos:start="265:31" pos:end="265:32">!=</operator> <literal type="number" pos:start="265:34" pos:end="265:34">0</literal></expr>)</condition> <block pos:start="265:37" pos:end="271:13">{<block_content pos:start="269:17" pos:end="269:76">

                <comment type="block" pos:start="267:17" pos:end="267:31">/* OPC_BLEZC */</comment>

                <expr_stmt pos:start="269:17" pos:end="269:76"><expr pos:start="269:17" pos:end="269:75"><call pos:start="269:17" pos:end="269:75"><name pos:start="269:17" pos:end="269:34">tcg_gen_brcondi_tl</name><argument_list pos:start="269:35" pos:end="269:75">(<argument pos:start="269:36" pos:end="269:63"><expr pos:start="269:36" pos:end="269:63"><call pos:start="269:36" pos:end="269:63"><name pos:start="269:36" pos:end="269:50">tcg_invert_cond</name><argument_list pos:start="269:51" pos:end="269:63">(<argument pos:start="269:52" pos:end="269:62"><expr pos:start="269:52" pos:end="269:62"><name pos:start="269:52" pos:end="269:62">TCG_COND_LE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="269:66" pos:end="269:67"><expr pos:start="269:66" pos:end="269:67"><name pos:start="269:66" pos:end="269:67">t1</name></expr></argument>, <argument pos:start="269:70" pos:end="269:70"><expr pos:start="269:70" pos:end="269:70"><literal type="number" pos:start="269:70" pos:end="269:70">0</literal></expr></argument>, <argument pos:start="269:73" pos:end="269:74"><expr pos:start="269:73" pos:end="269:74"><name pos:start="269:73" pos:end="269:74">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="271:15" pos:end="277:13">else if <condition pos:start="271:23" pos:end="271:54">(<expr pos:start="271:24" pos:end="271:53"><name pos:start="271:24" pos:end="271:25">rs</name> <operator pos:start="271:27" pos:end="271:28">!=</operator> <literal type="number" pos:start="271:30" pos:end="271:30">0</literal> <operator pos:start="271:32" pos:end="271:33">&amp;&amp;</operator> <name pos:start="271:35" pos:end="271:36">rt</name> <operator pos:start="271:38" pos:end="271:39">!=</operator> <literal type="number" pos:start="271:41" pos:end="271:41">0</literal> <operator pos:start="271:43" pos:end="271:44">&amp;&amp;</operator> <name pos:start="271:46" pos:end="271:47">rs</name> <operator pos:start="271:49" pos:end="271:50">==</operator> <name pos:start="271:52" pos:end="271:53">rt</name></expr>)</condition> <block pos:start="271:56" pos:end="277:13">{<block_content pos:start="275:17" pos:end="275:76">

                <comment type="block" pos:start="273:17" pos:end="273:31">/* OPC_BGEZC */</comment>

                <expr_stmt pos:start="275:17" pos:end="275:76"><expr pos:start="275:17" pos:end="275:75"><call pos:start="275:17" pos:end="275:75"><name pos:start="275:17" pos:end="275:34">tcg_gen_brcondi_tl</name><argument_list pos:start="275:35" pos:end="275:75">(<argument pos:start="275:36" pos:end="275:63"><expr pos:start="275:36" pos:end="275:63"><call pos:start="275:36" pos:end="275:63"><name pos:start="275:36" pos:end="275:50">tcg_invert_cond</name><argument_list pos:start="275:51" pos:end="275:63">(<argument pos:start="275:52" pos:end="275:62"><expr pos:start="275:52" pos:end="275:62"><name pos:start="275:52" pos:end="275:62">TCG_COND_GE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="275:66" pos:end="275:67"><expr pos:start="275:66" pos:end="275:67"><name pos:start="275:66" pos:end="275:67">t1</name></expr></argument>, <argument pos:start="275:70" pos:end="275:70"><expr pos:start="275:70" pos:end="275:70"><literal type="number" pos:start="275:70" pos:end="275:70">0</literal></expr></argument>, <argument pos:start="275:73" pos:end="275:74"><expr pos:start="275:73" pos:end="275:74"><name pos:start="275:73" pos:end="275:74">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="277:15" pos:end="283:13">else <block pos:start="277:20" pos:end="283:13">{<block_content pos:start="281:17" pos:end="281:76">

                <comment type="block" pos:start="279:17" pos:end="279:30">/* OPC_BGEC */</comment>

                <expr_stmt pos:start="281:17" pos:end="281:76"><expr pos:start="281:17" pos:end="281:75"><call pos:start="281:17" pos:end="281:75"><name pos:start="281:17" pos:end="281:33">tcg_gen_brcond_tl</name><argument_list pos:start="281:34" pos:end="281:75">(<argument pos:start="281:35" pos:end="281:62"><expr pos:start="281:35" pos:end="281:62"><call pos:start="281:35" pos:end="281:62"><name pos:start="281:35" pos:end="281:49">tcg_invert_cond</name><argument_list pos:start="281:50" pos:end="281:62">(<argument pos:start="281:51" pos:end="281:61"><expr pos:start="281:51" pos:end="281:61"><name pos:start="281:51" pos:end="281:61">TCG_COND_GE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="281:65" pos:end="281:66"><expr pos:start="281:65" pos:end="281:66"><name pos:start="281:65" pos:end="281:66">t0</name></expr></argument>, <argument pos:start="281:69" pos:end="281:70"><expr pos:start="281:69" pos:end="281:70"><name pos:start="281:69" pos:end="281:70">t1</name></expr></argument>, <argument pos:start="281:73" pos:end="281:74"><expr pos:start="281:73" pos:end="281:74"><name pos:start="281:73" pos:end="281:74">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="285:13" pos:end="285:18">break;</break>

        <case pos:start="287:9" pos:end="287:23">case <expr pos:start="287:14" pos:end="287:22"><name pos:start="287:14" pos:end="287:22">OPC_BGTZC</name></expr>:</case> <comment type="block" pos:start="287:25" pos:end="287:49">/* OPC_BLTZC, OPC_BLTC */</comment>

            <if_stmt pos:start="289:13" pos:end="307:13"><if pos:start="289:13" pos:end="295:13">if <condition pos:start="289:16" pos:end="289:35">(<expr pos:start="289:17" pos:end="289:34"><name pos:start="289:17" pos:end="289:18">rs</name> <operator pos:start="289:20" pos:end="289:21">==</operator> <literal type="number" pos:start="289:23" pos:end="289:23">0</literal> <operator pos:start="289:25" pos:end="289:26">&amp;&amp;</operator> <name pos:start="289:28" pos:end="289:29">rt</name> <operator pos:start="289:31" pos:end="289:32">!=</operator> <literal type="number" pos:start="289:34" pos:end="289:34">0</literal></expr>)</condition> <block pos:start="289:37" pos:end="295:13">{<block_content pos:start="293:17" pos:end="293:76">

                <comment type="block" pos:start="291:17" pos:end="291:31">/* OPC_BGTZC */</comment>

                <expr_stmt pos:start="293:17" pos:end="293:76"><expr pos:start="293:17" pos:end="293:75"><call pos:start="293:17" pos:end="293:75"><name pos:start="293:17" pos:end="293:34">tcg_gen_brcondi_tl</name><argument_list pos:start="293:35" pos:end="293:75">(<argument pos:start="293:36" pos:end="293:63"><expr pos:start="293:36" pos:end="293:63"><call pos:start="293:36" pos:end="293:63"><name pos:start="293:36" pos:end="293:50">tcg_invert_cond</name><argument_list pos:start="293:51" pos:end="293:63">(<argument pos:start="293:52" pos:end="293:62"><expr pos:start="293:52" pos:end="293:62"><name pos:start="293:52" pos:end="293:62">TCG_COND_GT</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="293:66" pos:end="293:67"><expr pos:start="293:66" pos:end="293:67"><name pos:start="293:66" pos:end="293:67">t1</name></expr></argument>, <argument pos:start="293:70" pos:end="293:70"><expr pos:start="293:70" pos:end="293:70"><literal type="number" pos:start="293:70" pos:end="293:70">0</literal></expr></argument>, <argument pos:start="293:73" pos:end="293:74"><expr pos:start="293:73" pos:end="293:74"><name pos:start="293:73" pos:end="293:74">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="295:15" pos:end="301:13">else if <condition pos:start="295:23" pos:end="295:54">(<expr pos:start="295:24" pos:end="295:53"><name pos:start="295:24" pos:end="295:25">rs</name> <operator pos:start="295:27" pos:end="295:28">!=</operator> <literal type="number" pos:start="295:30" pos:end="295:30">0</literal> <operator pos:start="295:32" pos:end="295:33">&amp;&amp;</operator> <name pos:start="295:35" pos:end="295:36">rt</name> <operator pos:start="295:38" pos:end="295:39">!=</operator> <literal type="number" pos:start="295:41" pos:end="295:41">0</literal> <operator pos:start="295:43" pos:end="295:44">&amp;&amp;</operator> <name pos:start="295:46" pos:end="295:47">rs</name> <operator pos:start="295:49" pos:end="295:50">==</operator> <name pos:start="295:52" pos:end="295:53">rt</name></expr>)</condition> <block pos:start="295:56" pos:end="301:13">{<block_content pos:start="299:17" pos:end="299:76">

                <comment type="block" pos:start="297:17" pos:end="297:31">/* OPC_BLTZC */</comment>

                <expr_stmt pos:start="299:17" pos:end="299:76"><expr pos:start="299:17" pos:end="299:75"><call pos:start="299:17" pos:end="299:75"><name pos:start="299:17" pos:end="299:34">tcg_gen_brcondi_tl</name><argument_list pos:start="299:35" pos:end="299:75">(<argument pos:start="299:36" pos:end="299:63"><expr pos:start="299:36" pos:end="299:63"><call pos:start="299:36" pos:end="299:63"><name pos:start="299:36" pos:end="299:50">tcg_invert_cond</name><argument_list pos:start="299:51" pos:end="299:63">(<argument pos:start="299:52" pos:end="299:62"><expr pos:start="299:52" pos:end="299:62"><name pos:start="299:52" pos:end="299:62">TCG_COND_LT</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="299:66" pos:end="299:67"><expr pos:start="299:66" pos:end="299:67"><name pos:start="299:66" pos:end="299:67">t1</name></expr></argument>, <argument pos:start="299:70" pos:end="299:70"><expr pos:start="299:70" pos:end="299:70"><literal type="number" pos:start="299:70" pos:end="299:70">0</literal></expr></argument>, <argument pos:start="299:73" pos:end="299:74"><expr pos:start="299:73" pos:end="299:74"><name pos:start="299:73" pos:end="299:74">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="301:15" pos:end="307:13">else <block pos:start="301:20" pos:end="307:13">{<block_content pos:start="305:17" pos:end="305:76">

                <comment type="block" pos:start="303:17" pos:end="303:30">/* OPC_BLTC */</comment>

                <expr_stmt pos:start="305:17" pos:end="305:76"><expr pos:start="305:17" pos:end="305:75"><call pos:start="305:17" pos:end="305:75"><name pos:start="305:17" pos:end="305:33">tcg_gen_brcond_tl</name><argument_list pos:start="305:34" pos:end="305:75">(<argument pos:start="305:35" pos:end="305:62"><expr pos:start="305:35" pos:end="305:62"><call pos:start="305:35" pos:end="305:62"><name pos:start="305:35" pos:end="305:49">tcg_invert_cond</name><argument_list pos:start="305:50" pos:end="305:62">(<argument pos:start="305:51" pos:end="305:61"><expr pos:start="305:51" pos:end="305:61"><name pos:start="305:51" pos:end="305:61">TCG_COND_LT</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="305:65" pos:end="305:66"><expr pos:start="305:65" pos:end="305:66"><name pos:start="305:65" pos:end="305:66">t0</name></expr></argument>, <argument pos:start="305:69" pos:end="305:70"><expr pos:start="305:69" pos:end="305:70"><name pos:start="305:69" pos:end="305:70">t1</name></expr></argument>, <argument pos:start="305:73" pos:end="305:74"><expr pos:start="305:73" pos:end="305:74"><name pos:start="305:73" pos:end="305:74">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="309:13" pos:end="309:18">break;</break>

        <case pos:start="311:9" pos:end="311:22">case <expr pos:start="311:14" pos:end="311:21"><name pos:start="311:14" pos:end="311:21">OPC_BOVC</name></expr>:</case> <comment type="block" pos:start="311:24" pos:end="311:50">/* OPC_BEQZALC, OPC_BEQC */</comment>

        <case pos:start="313:9" pos:end="313:22">case <expr pos:start="313:14" pos:end="313:21"><name pos:start="313:14" pos:end="313:21">OPC_BNVC</name></expr>:</case> <comment type="block" pos:start="313:24" pos:end="313:50">/* OPC_BNEZALC, OPC_BNEC */</comment>

            <if_stmt pos:start="315:13" pos:end="417:13"><if pos:start="315:13" pos:end="381:13">if <condition pos:start="315:16" pos:end="315:25">(<expr pos:start="315:17" pos:end="315:24"><name pos:start="315:17" pos:end="315:18">rs</name> <operator pos:start="315:20" pos:end="315:21">&gt;=</operator> <name pos:start="315:23" pos:end="315:24">rt</name></expr>)</condition> <block pos:start="315:27" pos:end="381:13">{<block_content pos:start="319:17" pos:end="379:34">

                <comment type="block" pos:start="317:17" pos:end="317:40">/* OPC_BOVC, OPC_BNVC */</comment>

                <decl_stmt pos:start="319:17" pos:end="319:41"><decl pos:start="319:17" pos:end="319:40"><type pos:start="319:17" pos:end="319:20"><name pos:start="319:17" pos:end="319:20">TCGv</name></type> <name pos:start="319:22" pos:end="319:23">t2</name> <init pos:start="319:25" pos:end="319:40">= <expr pos:start="319:27" pos:end="319:40"><call pos:start="319:27" pos:end="319:40"><name pos:start="319:27" pos:end="319:38">tcg_temp_new</name><argument_list pos:start="319:39" pos:end="319:40">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="321:17" pos:end="321:41"><decl pos:start="321:17" pos:end="321:40"><type pos:start="321:17" pos:end="321:20"><name pos:start="321:17" pos:end="321:20">TCGv</name></type> <name pos:start="321:22" pos:end="321:23">t3</name> <init pos:start="321:25" pos:end="321:40">= <expr pos:start="321:27" pos:end="321:40"><call pos:start="321:27" pos:end="321:40"><name pos:start="321:27" pos:end="321:38">tcg_temp_new</name><argument_list pos:start="321:39" pos:end="321:40">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="323:17" pos:end="323:41"><decl pos:start="323:17" pos:end="323:40"><type pos:start="323:17" pos:end="323:20"><name pos:start="323:17" pos:end="323:20">TCGv</name></type> <name pos:start="323:22" pos:end="323:23">t4</name> <init pos:start="323:25" pos:end="323:40">= <expr pos:start="323:27" pos:end="323:40"><call pos:start="323:27" pos:end="323:40"><name pos:start="323:27" pos:end="323:38">tcg_temp_new</name><argument_list pos:start="323:39" pos:end="323:40">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="325:17" pos:end="325:53"><decl pos:start="325:17" pos:end="325:52"><type pos:start="325:17" pos:end="325:20"><name pos:start="325:17" pos:end="325:20">TCGv</name></type> <name pos:start="325:22" pos:end="325:35">input_overflow</name> <init pos:start="325:37" pos:end="325:52">= <expr pos:start="325:39" pos:end="325:52"><call pos:start="325:39" pos:end="325:52"><name pos:start="325:39" pos:end="325:50">tcg_temp_new</name><argument_list pos:start="325:51" pos:end="325:52">()</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="329:17" pos:end="329:37"><expr pos:start="329:17" pos:end="329:36"><call pos:start="329:17" pos:end="329:36"><name pos:start="329:17" pos:end="329:28">gen_load_gpr</name><argument_list pos:start="329:29" pos:end="329:36">(<argument pos:start="329:30" pos:end="329:31"><expr pos:start="329:30" pos:end="329:31"><name pos:start="329:30" pos:end="329:31">t0</name></expr></argument>, <argument pos:start="329:34" pos:end="329:35"><expr pos:start="329:34" pos:end="329:35"><name pos:start="329:34" pos:end="329:35">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="331:17" pos:end="331:37"><expr pos:start="331:17" pos:end="331:36"><call pos:start="331:17" pos:end="331:36"><name pos:start="331:17" pos:end="331:28">gen_load_gpr</name><argument_list pos:start="331:29" pos:end="331:36">(<argument pos:start="331:30" pos:end="331:31"><expr pos:start="331:30" pos:end="331:31"><name pos:start="331:30" pos:end="331:31">t1</name></expr></argument>, <argument pos:start="331:34" pos:end="331:35"><expr pos:start="331:34" pos:end="331:35"><name pos:start="331:34" pos:end="331:35">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="333:17" pos:end="333:42"><expr pos:start="333:17" pos:end="333:41"><call pos:start="333:17" pos:end="333:41"><name pos:start="333:17" pos:end="333:33">tcg_gen_ext32s_tl</name><argument_list pos:start="333:34" pos:end="333:41">(<argument pos:start="333:35" pos:end="333:36"><expr pos:start="333:35" pos:end="333:36"><name pos:start="333:35" pos:end="333:36">t2</name></expr></argument>, <argument pos:start="333:39" pos:end="333:40"><expr pos:start="333:39" pos:end="333:40"><name pos:start="333:39" pos:end="333:40">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="335:17" pos:end="335:72"><expr pos:start="335:17" pos:end="335:71"><call pos:start="335:17" pos:end="335:71"><name pos:start="335:17" pos:end="335:34">tcg_gen_setcond_tl</name><argument_list pos:start="335:35" pos:end="335:71">(<argument pos:start="335:36" pos:end="335:46"><expr pos:start="335:36" pos:end="335:46"><name pos:start="335:36" pos:end="335:46">TCG_COND_NE</name></expr></argument>, <argument pos:start="335:49" pos:end="335:62"><expr pos:start="335:49" pos:end="335:62"><name pos:start="335:49" pos:end="335:62">input_overflow</name></expr></argument>, <argument pos:start="335:65" pos:end="335:66"><expr pos:start="335:65" pos:end="335:66"><name pos:start="335:65" pos:end="335:66">t2</name></expr></argument>, <argument pos:start="335:69" pos:end="335:70"><expr pos:start="335:69" pos:end="335:70"><name pos:start="335:69" pos:end="335:70">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="337:17" pos:end="337:42"><expr pos:start="337:17" pos:end="337:41"><call pos:start="337:17" pos:end="337:41"><name pos:start="337:17" pos:end="337:33">tcg_gen_ext32s_tl</name><argument_list pos:start="337:34" pos:end="337:41">(<argument pos:start="337:35" pos:end="337:36"><expr pos:start="337:35" pos:end="337:36"><name pos:start="337:35" pos:end="337:36">t3</name></expr></argument>, <argument pos:start="337:39" pos:end="337:40"><expr pos:start="337:39" pos:end="337:40"><name pos:start="337:39" pos:end="337:40">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="339:17" pos:end="339:60"><expr pos:start="339:17" pos:end="339:59"><call pos:start="339:17" pos:end="339:59"><name pos:start="339:17" pos:end="339:34">tcg_gen_setcond_tl</name><argument_list pos:start="339:35" pos:end="339:59">(<argument pos:start="339:36" pos:end="339:46"><expr pos:start="339:36" pos:end="339:46"><name pos:start="339:36" pos:end="339:46">TCG_COND_NE</name></expr></argument>, <argument pos:start="339:49" pos:end="339:50"><expr pos:start="339:49" pos:end="339:50"><name pos:start="339:49" pos:end="339:50">t4</name></expr></argument>, <argument pos:start="339:53" pos:end="339:54"><expr pos:start="339:53" pos:end="339:54"><name pos:start="339:53" pos:end="339:54">t3</name></expr></argument>, <argument pos:start="339:57" pos:end="339:58"><expr pos:start="339:57" pos:end="339:58"><name pos:start="339:57" pos:end="339:58">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="341:17" pos:end="341:66"><expr pos:start="341:17" pos:end="341:65"><call pos:start="341:17" pos:end="341:65"><name pos:start="341:17" pos:end="341:29">tcg_gen_or_tl</name><argument_list pos:start="341:30" pos:end="341:65">(<argument pos:start="341:31" pos:end="341:44"><expr pos:start="341:31" pos:end="341:44"><name pos:start="341:31" pos:end="341:44">input_overflow</name></expr></argument>, <argument pos:start="341:47" pos:end="341:60"><expr pos:start="341:47" pos:end="341:60"><name pos:start="341:47" pos:end="341:60">input_overflow</name></expr></argument>, <argument pos:start="341:63" pos:end="341:64"><expr pos:start="341:63" pos:end="341:64"><name pos:start="341:63" pos:end="341:64">t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="345:17" pos:end="345:43"><expr pos:start="345:17" pos:end="345:42"><call pos:start="345:17" pos:end="345:42"><name pos:start="345:17" pos:end="345:30">tcg_gen_add_tl</name><argument_list pos:start="345:31" pos:end="345:42">(<argument pos:start="345:32" pos:end="345:33"><expr pos:start="345:32" pos:end="345:33"><name pos:start="345:32" pos:end="345:33">t4</name></expr></argument>, <argument pos:start="345:36" pos:end="345:37"><expr pos:start="345:36" pos:end="345:37"><name pos:start="345:36" pos:end="345:37">t2</name></expr></argument>, <argument pos:start="345:40" pos:end="345:41"><expr pos:start="345:40" pos:end="345:41"><name pos:start="345:40" pos:end="345:41">t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="347:17" pos:end="347:42"><expr pos:start="347:17" pos:end="347:41"><call pos:start="347:17" pos:end="347:41"><name pos:start="347:17" pos:end="347:33">tcg_gen_ext32s_tl</name><argument_list pos:start="347:34" pos:end="347:41">(<argument pos:start="347:35" pos:end="347:36"><expr pos:start="347:35" pos:end="347:36"><name pos:start="347:35" pos:end="347:36">t4</name></expr></argument>, <argument pos:start="347:39" pos:end="347:40"><expr pos:start="347:39" pos:end="347:40"><name pos:start="347:39" pos:end="347:40">t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="349:17" pos:end="349:43"><expr pos:start="349:17" pos:end="349:42"><call pos:start="349:17" pos:end="349:42"><name pos:start="349:17" pos:end="349:30">tcg_gen_xor_tl</name><argument_list pos:start="349:31" pos:end="349:42">(<argument pos:start="349:32" pos:end="349:33"><expr pos:start="349:32" pos:end="349:33"><name pos:start="349:32" pos:end="349:33">t2</name></expr></argument>, <argument pos:start="349:36" pos:end="349:37"><expr pos:start="349:36" pos:end="349:37"><name pos:start="349:36" pos:end="349:37">t2</name></expr></argument>, <argument pos:start="349:40" pos:end="349:41"><expr pos:start="349:40" pos:end="349:41"><name pos:start="349:40" pos:end="349:41">t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="351:17" pos:end="351:43"><expr pos:start="351:17" pos:end="351:42"><call pos:start="351:17" pos:end="351:42"><name pos:start="351:17" pos:end="351:30">tcg_gen_xor_tl</name><argument_list pos:start="351:31" pos:end="351:42">(<argument pos:start="351:32" pos:end="351:33"><expr pos:start="351:32" pos:end="351:33"><name pos:start="351:32" pos:end="351:33">t3</name></expr></argument>, <argument pos:start="351:36" pos:end="351:37"><expr pos:start="351:36" pos:end="351:37"><name pos:start="351:36" pos:end="351:37">t4</name></expr></argument>, <argument pos:start="351:40" pos:end="351:41"><expr pos:start="351:40" pos:end="351:41"><name pos:start="351:40" pos:end="351:41">t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="353:17" pos:end="353:44"><expr pos:start="353:17" pos:end="353:43"><call pos:start="353:17" pos:end="353:43"><name pos:start="353:17" pos:end="353:31">tcg_gen_andc_tl</name><argument_list pos:start="353:32" pos:end="353:43">(<argument pos:start="353:33" pos:end="353:34"><expr pos:start="353:33" pos:end="353:34"><name pos:start="353:33" pos:end="353:34">t2</name></expr></argument>, <argument pos:start="353:37" pos:end="353:38"><expr pos:start="353:37" pos:end="353:38"><name pos:start="353:37" pos:end="353:38">t3</name></expr></argument>, <argument pos:start="353:41" pos:end="353:42"><expr pos:start="353:41" pos:end="353:42"><name pos:start="353:41" pos:end="353:42">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="355:17" pos:end="355:60"><expr pos:start="355:17" pos:end="355:59"><call pos:start="355:17" pos:end="355:59"><name pos:start="355:17" pos:end="355:35">tcg_gen_setcondi_tl</name><argument_list pos:start="355:36" pos:end="355:59">(<argument pos:start="355:37" pos:end="355:47"><expr pos:start="355:37" pos:end="355:47"><name pos:start="355:37" pos:end="355:47">TCG_COND_LT</name></expr></argument>, <argument pos:start="355:50" pos:end="355:51"><expr pos:start="355:50" pos:end="355:51"><name pos:start="355:50" pos:end="355:51">t4</name></expr></argument>, <argument pos:start="355:54" pos:end="355:55"><expr pos:start="355:54" pos:end="355:55"><name pos:start="355:54" pos:end="355:55">t2</name></expr></argument>, <argument pos:start="355:58" pos:end="355:58"><expr pos:start="355:58" pos:end="355:58"><literal type="number" pos:start="355:58" pos:end="355:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="357:17" pos:end="357:54"><expr pos:start="357:17" pos:end="357:53"><call pos:start="357:17" pos:end="357:53"><name pos:start="357:17" pos:end="357:29">tcg_gen_or_tl</name><argument_list pos:start="357:30" pos:end="357:53">(<argument pos:start="357:31" pos:end="357:32"><expr pos:start="357:31" pos:end="357:32"><name pos:start="357:31" pos:end="357:32">t4</name></expr></argument>, <argument pos:start="357:35" pos:end="357:36"><expr pos:start="357:35" pos:end="357:36"><name pos:start="357:35" pos:end="357:36">t4</name></expr></argument>, <argument pos:start="357:39" pos:end="357:52"><expr pos:start="357:39" pos:end="357:52"><name pos:start="357:39" pos:end="357:52">input_overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="359:17" pos:end="371:17"><if pos:start="359:17" pos:end="365:17">if <condition pos:start="359:20" pos:end="359:36">(<expr pos:start="359:21" pos:end="359:35"><name pos:start="359:21" pos:end="359:23">opc</name> <operator pos:start="359:25" pos:end="359:26">==</operator> <name pos:start="359:28" pos:end="359:35">OPC_BOVC</name></expr>)</condition> <block pos:start="359:38" pos:end="365:17">{<block_content pos:start="363:21" pos:end="363:80">

                    <comment type="block" pos:start="361:21" pos:end="361:34">/* OPC_BOVC */</comment>

                    <expr_stmt pos:start="363:21" pos:end="363:80"><expr pos:start="363:21" pos:end="363:79"><call pos:start="363:21" pos:end="363:79"><name pos:start="363:21" pos:end="363:38">tcg_gen_brcondi_tl</name><argument_list pos:start="363:39" pos:end="363:79">(<argument pos:start="363:40" pos:end="363:67"><expr pos:start="363:40" pos:end="363:67"><call pos:start="363:40" pos:end="363:67"><name pos:start="363:40" pos:end="363:54">tcg_invert_cond</name><argument_list pos:start="363:55" pos:end="363:67">(<argument pos:start="363:56" pos:end="363:66"><expr pos:start="363:56" pos:end="363:66"><name pos:start="363:56" pos:end="363:66">TCG_COND_NE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="363:70" pos:end="363:71"><expr pos:start="363:70" pos:end="363:71"><name pos:start="363:70" pos:end="363:71">t4</name></expr></argument>, <argument pos:start="363:74" pos:end="363:74"><expr pos:start="363:74" pos:end="363:74"><literal type="number" pos:start="363:74" pos:end="363:74">0</literal></expr></argument>, <argument pos:start="363:77" pos:end="363:78"><expr pos:start="363:77" pos:end="363:78"><name pos:start="363:77" pos:end="363:78">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="365:19" pos:end="371:17">else <block pos:start="365:24" pos:end="371:17">{<block_content pos:start="369:21" pos:end="369:80">

                    <comment type="block" pos:start="367:21" pos:end="367:34">/* OPC_BNVC */</comment>

                    <expr_stmt pos:start="369:21" pos:end="369:80"><expr pos:start="369:21" pos:end="369:79"><call pos:start="369:21" pos:end="369:79"><name pos:start="369:21" pos:end="369:38">tcg_gen_brcondi_tl</name><argument_list pos:start="369:39" pos:end="369:79">(<argument pos:start="369:40" pos:end="369:67"><expr pos:start="369:40" pos:end="369:67"><call pos:start="369:40" pos:end="369:67"><name pos:start="369:40" pos:end="369:54">tcg_invert_cond</name><argument_list pos:start="369:55" pos:end="369:67">(<argument pos:start="369:56" pos:end="369:66"><expr pos:start="369:56" pos:end="369:66"><name pos:start="369:56" pos:end="369:66">TCG_COND_EQ</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="369:70" pos:end="369:71"><expr pos:start="369:70" pos:end="369:71"><name pos:start="369:70" pos:end="369:71">t4</name></expr></argument>, <argument pos:start="369:74" pos:end="369:74"><expr pos:start="369:74" pos:end="369:74"><literal type="number" pos:start="369:74" pos:end="369:74">0</literal></expr></argument>, <argument pos:start="369:77" pos:end="369:78"><expr pos:start="369:77" pos:end="369:78"><name pos:start="369:77" pos:end="369:78">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="373:17" pos:end="373:46"><expr pos:start="373:17" pos:end="373:45"><call pos:start="373:17" pos:end="373:45"><name pos:start="373:17" pos:end="373:29">tcg_temp_free</name><argument_list pos:start="373:30" pos:end="373:45">(<argument pos:start="373:31" pos:end="373:44"><expr pos:start="373:31" pos:end="373:44"><name pos:start="373:31" pos:end="373:44">input_overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:34"><expr pos:start="375:17" pos:end="375:33"><call pos:start="375:17" pos:end="375:33"><name pos:start="375:17" pos:end="375:29">tcg_temp_free</name><argument_list pos:start="375:30" pos:end="375:33">(<argument pos:start="375:31" pos:end="375:32"><expr pos:start="375:31" pos:end="375:32"><name pos:start="375:31" pos:end="375:32">t4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:34"><expr pos:start="377:17" pos:end="377:33"><call pos:start="377:17" pos:end="377:33"><name pos:start="377:17" pos:end="377:29">tcg_temp_free</name><argument_list pos:start="377:30" pos:end="377:33">(<argument pos:start="377:31" pos:end="377:32"><expr pos:start="377:31" pos:end="377:32"><name pos:start="377:31" pos:end="377:32">t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="379:17" pos:end="379:34"><expr pos:start="379:17" pos:end="379:33"><call pos:start="379:17" pos:end="379:33"><name pos:start="379:17" pos:end="379:29">tcg_temp_free</name><argument_list pos:start="379:30" pos:end="379:33">(<argument pos:start="379:31" pos:end="379:32"><expr pos:start="379:31" pos:end="379:32"><name pos:start="379:31" pos:end="379:32">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="381:15" pos:end="399:13">else if <condition pos:start="381:23" pos:end="381:42">(<expr pos:start="381:24" pos:end="381:41"><name pos:start="381:24" pos:end="381:25">rs</name> <operator pos:start="381:27" pos:end="381:27">&lt;</operator> <name pos:start="381:29" pos:end="381:30">rt</name> <operator pos:start="381:32" pos:end="381:33">&amp;&amp;</operator> <name pos:start="381:35" pos:end="381:36">rs</name> <operator pos:start="381:38" pos:end="381:39">==</operator> <literal type="number" pos:start="381:41" pos:end="381:41">0</literal></expr>)</condition> <block pos:start="381:44" pos:end="399:13">{<block_content pos:start="385:17" pos:end="397:17">

                <comment type="block" pos:start="383:17" pos:end="383:46">/* OPC_BEQZALC, OPC_BNEZALC */</comment>

                <if_stmt pos:start="385:17" pos:end="397:17"><if pos:start="385:17" pos:end="391:17">if <condition pos:start="385:20" pos:end="385:39">(<expr pos:start="385:21" pos:end="385:38"><name pos:start="385:21" pos:end="385:23">opc</name> <operator pos:start="385:25" pos:end="385:26">==</operator> <name pos:start="385:28" pos:end="385:38">OPC_BEQZALC</name></expr>)</condition> <block pos:start="385:41" pos:end="391:17">{<block_content pos:start="389:21" pos:end="389:80">

                    <comment type="block" pos:start="387:21" pos:end="387:37">/* OPC_BEQZALC */</comment>

                    <expr_stmt pos:start="389:21" pos:end="389:80"><expr pos:start="389:21" pos:end="389:79"><call pos:start="389:21" pos:end="389:79"><name pos:start="389:21" pos:end="389:38">tcg_gen_brcondi_tl</name><argument_list pos:start="389:39" pos:end="389:79">(<argument pos:start="389:40" pos:end="389:67"><expr pos:start="389:40" pos:end="389:67"><call pos:start="389:40" pos:end="389:67"><name pos:start="389:40" pos:end="389:54">tcg_invert_cond</name><argument_list pos:start="389:55" pos:end="389:67">(<argument pos:start="389:56" pos:end="389:66"><expr pos:start="389:56" pos:end="389:66"><name pos:start="389:56" pos:end="389:66">TCG_COND_EQ</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="389:70" pos:end="389:71"><expr pos:start="389:70" pos:end="389:71"><name pos:start="389:70" pos:end="389:71">t1</name></expr></argument>, <argument pos:start="389:74" pos:end="389:74"><expr pos:start="389:74" pos:end="389:74"><literal type="number" pos:start="389:74" pos:end="389:74">0</literal></expr></argument>, <argument pos:start="389:77" pos:end="389:78"><expr pos:start="389:77" pos:end="389:78"><name pos:start="389:77" pos:end="389:78">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="391:19" pos:end="397:17">else <block pos:start="391:24" pos:end="397:17">{<block_content pos:start="395:21" pos:end="395:80">

                    <comment type="block" pos:start="393:21" pos:end="393:37">/* OPC_BNEZALC */</comment>

                    <expr_stmt pos:start="395:21" pos:end="395:80"><expr pos:start="395:21" pos:end="395:79"><call pos:start="395:21" pos:end="395:79"><name pos:start="395:21" pos:end="395:38">tcg_gen_brcondi_tl</name><argument_list pos:start="395:39" pos:end="395:79">(<argument pos:start="395:40" pos:end="395:67"><expr pos:start="395:40" pos:end="395:67"><call pos:start="395:40" pos:end="395:67"><name pos:start="395:40" pos:end="395:54">tcg_invert_cond</name><argument_list pos:start="395:55" pos:end="395:67">(<argument pos:start="395:56" pos:end="395:66"><expr pos:start="395:56" pos:end="395:66"><name pos:start="395:56" pos:end="395:66">TCG_COND_NE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="395:70" pos:end="395:71"><expr pos:start="395:70" pos:end="395:71"><name pos:start="395:70" pos:end="395:71">t1</name></expr></argument>, <argument pos:start="395:74" pos:end="395:74"><expr pos:start="395:74" pos:end="395:74"><literal type="number" pos:start="395:74" pos:end="395:74">0</literal></expr></argument>, <argument pos:start="395:77" pos:end="395:78"><expr pos:start="395:77" pos:end="395:78"><name pos:start="395:77" pos:end="395:78">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="399:15" pos:end="417:13">else <block pos:start="399:20" pos:end="417:13">{<block_content pos:start="403:17" pos:end="415:17">

                <comment type="block" pos:start="401:17" pos:end="401:40">/* OPC_BEQC, OPC_BNEC */</comment>

                <if_stmt pos:start="403:17" pos:end="415:17"><if pos:start="403:17" pos:end="409:17">if <condition pos:start="403:20" pos:end="403:36">(<expr pos:start="403:21" pos:end="403:35"><name pos:start="403:21" pos:end="403:23">opc</name> <operator pos:start="403:25" pos:end="403:26">==</operator> <name pos:start="403:28" pos:end="403:35">OPC_BEQC</name></expr>)</condition> <block pos:start="403:38" pos:end="409:17">{<block_content pos:start="407:21" pos:end="407:80">

                    <comment type="block" pos:start="405:21" pos:end="405:34">/* OPC_BEQC */</comment>

                    <expr_stmt pos:start="407:21" pos:end="407:80"><expr pos:start="407:21" pos:end="407:79"><call pos:start="407:21" pos:end="407:79"><name pos:start="407:21" pos:end="407:37">tcg_gen_brcond_tl</name><argument_list pos:start="407:38" pos:end="407:79">(<argument pos:start="407:39" pos:end="407:66"><expr pos:start="407:39" pos:end="407:66"><call pos:start="407:39" pos:end="407:66"><name pos:start="407:39" pos:end="407:53">tcg_invert_cond</name><argument_list pos:start="407:54" pos:end="407:66">(<argument pos:start="407:55" pos:end="407:65"><expr pos:start="407:55" pos:end="407:65"><name pos:start="407:55" pos:end="407:65">TCG_COND_EQ</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="407:69" pos:end="407:70"><expr pos:start="407:69" pos:end="407:70"><name pos:start="407:69" pos:end="407:70">t0</name></expr></argument>, <argument pos:start="407:73" pos:end="407:74"><expr pos:start="407:73" pos:end="407:74"><name pos:start="407:73" pos:end="407:74">t1</name></expr></argument>, <argument pos:start="407:77" pos:end="407:78"><expr pos:start="407:77" pos:end="407:78"><name pos:start="407:77" pos:end="407:78">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="409:19" pos:end="415:17">else <block pos:start="409:24" pos:end="415:17">{<block_content pos:start="413:21" pos:end="413:80">

                    <comment type="block" pos:start="411:21" pos:end="411:34">/* OPC_BNEC */</comment>

                    <expr_stmt pos:start="413:21" pos:end="413:80"><expr pos:start="413:21" pos:end="413:79"><call pos:start="413:21" pos:end="413:79"><name pos:start="413:21" pos:end="413:37">tcg_gen_brcond_tl</name><argument_list pos:start="413:38" pos:end="413:79">(<argument pos:start="413:39" pos:end="413:66"><expr pos:start="413:39" pos:end="413:66"><call pos:start="413:39" pos:end="413:66"><name pos:start="413:39" pos:end="413:53">tcg_invert_cond</name><argument_list pos:start="413:54" pos:end="413:66">(<argument pos:start="413:55" pos:end="413:65"><expr pos:start="413:55" pos:end="413:65"><name pos:start="413:55" pos:end="413:65">TCG_COND_NE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="413:69" pos:end="413:70"><expr pos:start="413:69" pos:end="413:70"><name pos:start="413:69" pos:end="413:70">t0</name></expr></argument>, <argument pos:start="413:73" pos:end="413:74"><expr pos:start="413:73" pos:end="413:74"><name pos:start="413:73" pos:end="413:74">t1</name></expr></argument>, <argument pos:start="413:77" pos:end="413:78"><expr pos:start="413:77" pos:end="413:78"><name pos:start="413:77" pos:end="413:78">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="419:13" pos:end="419:18">break;</break>

        <case pos:start="421:9" pos:end="421:23">case <expr pos:start="421:14" pos:end="421:22"><name pos:start="421:14" pos:end="421:22">OPC_BEQZC</name></expr>:</case>

            <expr_stmt pos:start="423:13" pos:end="423:72"><expr pos:start="423:13" pos:end="423:71"><call pos:start="423:13" pos:end="423:71"><name pos:start="423:13" pos:end="423:30">tcg_gen_brcondi_tl</name><argument_list pos:start="423:31" pos:end="423:71">(<argument pos:start="423:32" pos:end="423:59"><expr pos:start="423:32" pos:end="423:59"><call pos:start="423:32" pos:end="423:59"><name pos:start="423:32" pos:end="423:46">tcg_invert_cond</name><argument_list pos:start="423:47" pos:end="423:59">(<argument pos:start="423:48" pos:end="423:58"><expr pos:start="423:48" pos:end="423:58"><name pos:start="423:48" pos:end="423:58">TCG_COND_EQ</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="423:62" pos:end="423:63"><expr pos:start="423:62" pos:end="423:63"><name pos:start="423:62" pos:end="423:63">t0</name></expr></argument>, <argument pos:start="423:66" pos:end="423:66"><expr pos:start="423:66" pos:end="423:66"><literal type="number" pos:start="423:66" pos:end="423:66">0</literal></expr></argument>, <argument pos:start="423:69" pos:end="423:70"><expr pos:start="423:69" pos:end="423:70"><name pos:start="423:69" pos:end="423:70">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="425:13" pos:end="425:18">break;</break>

        <case pos:start="427:9" pos:end="427:23">case <expr pos:start="427:14" pos:end="427:22"><name pos:start="427:14" pos:end="427:22">OPC_BNEZC</name></expr>:</case>

            <expr_stmt pos:start="429:13" pos:end="429:72"><expr pos:start="429:13" pos:end="429:71"><call pos:start="429:13" pos:end="429:71"><name pos:start="429:13" pos:end="429:30">tcg_gen_brcondi_tl</name><argument_list pos:start="429:31" pos:end="429:71">(<argument pos:start="429:32" pos:end="429:59"><expr pos:start="429:32" pos:end="429:59"><call pos:start="429:32" pos:end="429:59"><name pos:start="429:32" pos:end="429:46">tcg_invert_cond</name><argument_list pos:start="429:47" pos:end="429:59">(<argument pos:start="429:48" pos:end="429:58"><expr pos:start="429:48" pos:end="429:58"><name pos:start="429:48" pos:end="429:58">TCG_COND_NE</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="429:62" pos:end="429:63"><expr pos:start="429:62" pos:end="429:63"><name pos:start="429:62" pos:end="429:63">t0</name></expr></argument>, <argument pos:start="429:66" pos:end="429:66"><expr pos:start="429:66" pos:end="429:66"><literal type="number" pos:start="429:66" pos:end="429:66">0</literal></expr></argument>, <argument pos:start="429:69" pos:end="429:70"><expr pos:start="429:69" pos:end="429:70"><name pos:start="429:69" pos:end="429:70">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="431:13" pos:end="431:18">break;</break>

        <default pos:start="433:9" pos:end="433:16">default:</default>

            <expr_stmt pos:start="435:13" pos:end="435:58"><expr pos:start="435:13" pos:end="435:57"><call pos:start="435:13" pos:end="435:57"><name pos:start="435:13" pos:end="435:22">MIPS_INVAL</name><argument_list pos:start="435:23" pos:end="435:57">(<argument pos:start="435:24" pos:end="435:56"><expr pos:start="435:24" pos:end="435:56"><literal type="string" pos:start="435:24" pos:end="435:56">"Compact conditional branch/jump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="437:13" pos:end="437:45"><expr pos:start="437:13" pos:end="437:44"><call pos:start="437:13" pos:end="437:44"><name pos:start="437:13" pos:end="437:30">generate_exception</name><argument_list pos:start="437:31" pos:end="437:44">(<argument pos:start="437:32" pos:end="437:34"><expr pos:start="437:32" pos:end="437:34"><name pos:start="437:32" pos:end="437:34">ctx</name></expr></argument>, <argument pos:start="437:37" pos:end="437:43"><expr pos:start="437:37" pos:end="437:43"><name pos:start="437:37" pos:end="437:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="439:13" pos:end="439:21">goto <name pos:start="439:18" pos:end="439:20">out</name>;</goto>

        </block_content>}</block></switch>



        <comment type="block" pos:start="445:9" pos:end="445:78">/* Generating branch here as compact branches don't have delay slot */</comment>

        <expr_stmt pos:start="447:9" pos:end="447:42"><expr pos:start="447:9" pos:end="447:41"><call pos:start="447:9" pos:end="447:41"><name pos:start="447:9" pos:end="447:19">gen_goto_tb</name><argument_list pos:start="447:20" pos:end="447:41">(<argument pos:start="447:21" pos:end="447:23"><expr pos:start="447:21" pos:end="447:23"><name pos:start="447:21" pos:end="447:23">ctx</name></expr></argument>, <argument pos:start="447:26" pos:end="447:26"><expr pos:start="447:26" pos:end="447:26"><literal type="number" pos:start="447:26" pos:end="447:26">1</literal></expr></argument>, <argument pos:start="447:29" pos:end="447:40"><expr pos:start="447:29" pos:end="447:40"><name pos:start="447:29" pos:end="447:40"><name pos:start="447:29" pos:end="447:31">ctx</name><operator pos:start="447:32" pos:end="447:33">-&gt;</operator><name pos:start="447:34" pos:end="447:40">btarget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="449:9" pos:end="449:26"><expr pos:start="449:9" pos:end="449:25"><call pos:start="449:9" pos:end="449:25"><name pos:start="449:9" pos:end="449:21">gen_set_label</name><argument_list pos:start="449:22" pos:end="449:25">(<argument pos:start="449:23" pos:end="449:24"><expr pos:start="449:23" pos:end="449:24"><name pos:start="449:23" pos:end="449:24">fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="453:9" pos:end="453:42"><expr pos:start="453:9" pos:end="453:41"><name pos:start="453:9" pos:end="453:19"><name pos:start="453:9" pos:end="453:11">ctx</name><operator pos:start="453:12" pos:end="453:13">-&gt;</operator><name pos:start="453:14" pos:end="453:19">hflags</name></name> <operator pos:start="453:21" pos:end="453:22">|=</operator> <name pos:start="453:24" pos:end="453:41">MIPS_HFLAG_FBNSLOT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:49"><expr pos:start="455:9" pos:end="455:48"><call pos:start="455:9" pos:end="455:48"><name pos:start="455:9" pos:end="455:18">MIPS_DEBUG</name><argument_list pos:start="455:19" pos:end="455:48">(<argument pos:start="455:20" pos:end="455:47"><expr pos:start="455:20" pos:end="455:47"><literal type="string" pos:start="455:20" pos:end="455:47">"Compact conditional branch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="461:1" pos:end="461:4"><name pos:start="461:1" pos:end="461:3">out</name>:</label>

    <expr_stmt pos:start="463:5" pos:end="463:22"><expr pos:start="463:5" pos:end="463:21"><call pos:start="463:5" pos:end="463:21"><name pos:start="463:5" pos:end="463:17">tcg_temp_free</name><argument_list pos:start="463:18" pos:end="463:21">(<argument pos:start="463:19" pos:end="463:20"><expr pos:start="463:19" pos:end="463:20"><name pos:start="463:19" pos:end="463:20">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="465:5" pos:end="465:22"><expr pos:start="465:5" pos:end="465:21"><call pos:start="465:5" pos:end="465:21"><name pos:start="465:5" pos:end="465:17">tcg_temp_free</name><argument_list pos:start="465:18" pos:end="465:21">(<argument pos:start="465:19" pos:end="465:20"><expr pos:start="465:19" pos:end="465:20"><name pos:start="465:19" pos:end="465:20">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
