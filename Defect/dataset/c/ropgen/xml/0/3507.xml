<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3507.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">qemu_dup_flags</name><parameter_list pos:start="1:26" pos:end="1:44">(<parameter pos:start="1:27" pos:end="1:32"><decl pos:start="1:27" pos:end="1:32"><type pos:start="1:27" pos:end="1:32"><name pos:start="1:27" pos:end="1:29">int</name></type> <name pos:start="1:31" pos:end="1:32">fd</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:43"><decl pos:start="1:35" pos:end="1:43"><type pos:start="1:35" pos:end="1:43"><name pos:start="1:35" pos:end="1:37">int</name></type> <name pos:start="1:39" pos:end="1:43">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:14">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">serrno</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">dup_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">setfl_flags</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:22">F_DUPFD_CLOEXEC</name></cpp:ifdef>

    <expr_stmt pos:start="17:5" pos:end="20:0"><expr pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:39"><name pos:start="17:11" pos:end="17:15">fcntl</name><argument_list pos:start="17:16" pos:end="17:39">(<argument pos:start="17:17" pos:end="17:18"><expr pos:start="17:17" pos:end="17:18"><name pos:start="17:17" pos:end="17:18">fd</name></expr></argument>, <argument pos:start="17:21" pos:end="17:35"><expr pos:start="17:21" pos:end="17:35"><name pos:start="17:21" pos:end="17:35">F_DUPFD_CLOEXEC</name></expr></argument>, <argument pos:start="17:38" pos:end="17:38"><expr pos:start="17:38" pos:end="17:38"><literal type="number" pos:start="17:38" pos:end="17:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="19:1" pos:end="19:5">#<cpp:directive pos:start="19:2" pos:end="19:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="21:5" pos:end="21:18"><expr pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:17"><name pos:start="21:11" pos:end="21:13">dup</name><argument_list pos:start="21:14" pos:end="21:17">(<argument pos:start="21:15" pos:end="21:16"><expr pos:start="21:15" pos:end="21:16"><name pos:start="21:15" pos:end="21:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="30:0"><if pos:start="23:5" pos:end="30:0">if <condition pos:start="23:8" pos:end="23:18">(<expr pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:14">!=</operator> <operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>)</condition> <block pos:start="23:20" pos:end="30:0">{<block_content pos:start="25:9" pos:end="25:30">

        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><call pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:24">qemu_set_cloexec</name><argument_list pos:start="25:25" pos:end="25:29">(<argument pos:start="25:26" pos:end="25:28"><expr pos:start="25:26" pos:end="25:28"><name pos:start="25:26" pos:end="25:28">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:14">==</operator> <operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>)</condition> <block pos:start="31:20" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:18">

        <goto pos:start="33:9" pos:end="33:18">goto <name pos:start="33:14" pos:end="33:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:36"><expr pos:start="39:5" pos:end="39:35"><name pos:start="39:5" pos:end="39:13">dup_flags</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:35"><name pos:start="39:17" pos:end="39:21">fcntl</name><argument_list pos:start="39:22" pos:end="39:35">(<argument pos:start="39:23" pos:end="39:25"><expr pos:start="39:23" pos:end="39:25"><name pos:start="39:23" pos:end="39:25">ret</name></expr></argument>, <argument pos:start="39:28" pos:end="39:34"><expr pos:start="39:28" pos:end="39:34"><name pos:start="39:28" pos:end="39:34">F_GETFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:24">(<expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:17">dup_flags</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <operator pos:start="41:22" pos:end="41:22">-</operator><literal type="number" pos:start="41:23" pos:end="41:23">1</literal></expr>)</condition> <block pos:start="41:26" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:18">

        <goto pos:start="43:9" pos:end="43:18">goto <name pos:start="43:14" pos:end="43:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:49">(<expr pos:start="49:9" pos:end="49:48"><operator pos:start="49:9" pos:end="49:9">(</operator><name pos:start="49:10" pos:end="49:14">flags</name> <operator pos:start="49:16" pos:end="49:16">&amp;</operator> <name pos:start="49:18" pos:end="49:23">O_SYNC</name><operator pos:start="49:24" pos:end="49:24">)</operator> <operator pos:start="49:26" pos:end="49:27">!=</operator> <operator pos:start="49:29" pos:end="49:29">(</operator><name pos:start="49:30" pos:end="49:38">dup_flags</name> <operator pos:start="49:40" pos:end="49:40">&amp;</operator> <name pos:start="49:42" pos:end="49:47">O_SYNC</name><operator pos:start="49:48" pos:end="49:48">)</operator></expr>)</condition> <block pos:start="49:51" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:18">

        <expr_stmt pos:start="51:9" pos:end="51:23"><expr pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:13">errno</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <name pos:start="51:17" pos:end="51:22">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="53:9" pos:end="53:18">goto <name pos:start="53:14" pos:end="53:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:48">/* Set/unset flags that we can with fcntl */</comment>

    <expr_stmt pos:start="61:5" pos:end="64:0"><expr pos:start="61:5" pos:end="61:49"><name pos:start="61:5" pos:end="61:15">setfl_flags</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:26">O_APPEND</name> <operator pos:start="61:28" pos:end="61:28">|</operator> <name pos:start="61:30" pos:end="61:36">O_ASYNC</name> <operator pos:start="61:38" pos:end="61:38">|</operator> <name pos:start="61:40" pos:end="61:49">O_NONBLOCK</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="63:1" pos:end="63:16">#<cpp:directive pos:start="63:2" pos:end="63:6">ifdef</cpp:directive> <name pos:start="63:8" pos:end="63:16">O_NOATIME</name></cpp:ifdef>

    <expr_stmt pos:start="65:5" pos:end="70:0"><expr pos:start="65:5" pos:end="65:28"><name pos:start="65:5" pos:end="65:15">setfl_flags</name> <operator pos:start="65:17" pos:end="65:18">|=</operator> <name pos:start="65:20" pos:end="65:28">O_NOATIME</name></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="69:1" pos:end="69:15">#<cpp:directive pos:start="69:2" pos:end="69:6">ifdef</cpp:directive> <name pos:start="69:8" pos:end="69:15">O_DIRECT</name></cpp:ifdef>

    <expr_stmt pos:start="71:5" pos:end="74:0"><expr pos:start="71:5" pos:end="71:27"><name pos:start="71:5" pos:end="71:15">setfl_flags</name> <operator pos:start="71:17" pos:end="71:18">|=</operator> <name pos:start="71:20" pos:end="71:27">O_DIRECT</name></expr>;</expr_stmt>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="75:5" pos:end="75:30"><expr pos:start="75:5" pos:end="75:29"><name pos:start="75:5" pos:end="75:13">dup_flags</name> <operator pos:start="75:15" pos:end="75:16">&amp;=</operator> <operator pos:start="75:18" pos:end="75:18">~</operator><name pos:start="75:19" pos:end="75:29">setfl_flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:39"><expr pos:start="77:5" pos:end="77:38"><name pos:start="77:5" pos:end="77:13">dup_flags</name> <operator pos:start="77:15" pos:end="77:16">|=</operator> <operator pos:start="77:18" pos:end="77:18">(</operator><name pos:start="77:19" pos:end="77:23">flags</name> <operator pos:start="77:25" pos:end="77:25">&amp;</operator> <name pos:start="77:27" pos:end="77:37">setfl_flags</name><operator pos:start="77:38" pos:end="77:38">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:45">(<expr pos:start="79:9" pos:end="79:44"><call pos:start="79:9" pos:end="79:38"><name pos:start="79:9" pos:end="79:13">fcntl</name><argument_list pos:start="79:14" pos:end="79:38">(<argument pos:start="79:15" pos:end="79:17"><expr pos:start="79:15" pos:end="79:17"><name pos:start="79:15" pos:end="79:17">ret</name></expr></argument>, <argument pos:start="79:20" pos:end="79:26"><expr pos:start="79:20" pos:end="79:26"><name pos:start="79:20" pos:end="79:26">F_SETFL</name></expr></argument>, <argument pos:start="79:29" pos:end="79:37"><expr pos:start="79:29" pos:end="79:37"><name pos:start="79:29" pos:end="79:37">dup_flags</name></expr></argument>)</argument_list></call> <operator pos:start="79:40" pos:end="79:41">==</operator> <operator pos:start="79:43" pos:end="79:43">-</operator><literal type="number" pos:start="79:44" pos:end="79:44">1</literal></expr>)</condition> <block pos:start="79:47" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:18">

        <goto pos:start="81:9" pos:end="81:18">goto <name pos:start="81:14" pos:end="81:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:70">/* Truncate the file in the cases that open() would truncate it */</comment>

    <if_stmt pos:start="89:5" pos:end="99:5"><if pos:start="89:5" pos:end="99:5">if <condition pos:start="89:8" pos:end="91:65">(<expr pos:start="89:9" pos:end="91:64"><name pos:start="89:9" pos:end="89:13">flags</name> <operator pos:start="89:15" pos:end="89:15">&amp;</operator> <name pos:start="89:17" pos:end="89:23">O_TRUNC</name> <operator pos:start="89:25" pos:end="89:26">||</operator>

            <operator pos:start="91:13" pos:end="91:13">(</operator><operator pos:start="91:14" pos:end="91:14">(</operator><name pos:start="91:15" pos:end="91:19">flags</name> <operator pos:start="91:21" pos:end="91:21">&amp;</operator> <operator pos:start="91:23" pos:end="91:23">(</operator><name pos:start="91:24" pos:end="91:30">O_CREAT</name> <operator pos:start="91:32" pos:end="91:32">|</operator> <name pos:start="91:34" pos:end="91:39">O_EXCL</name><operator pos:start="91:40" pos:end="91:40">)</operator><operator pos:start="91:41" pos:end="91:41">)</operator> <operator pos:start="91:43" pos:end="91:44">==</operator> <operator pos:start="91:46" pos:end="91:46">(</operator><name pos:start="91:47" pos:end="91:53">O_CREAT</name> <operator pos:start="91:55" pos:end="91:55">|</operator> <name pos:start="91:57" pos:end="91:62">O_EXCL</name><operator pos:start="91:63" pos:end="91:63">)</operator><operator pos:start="91:64" pos:end="91:64">)</operator></expr>)</condition> <block pos:start="91:67" pos:end="99:5">{<block_content pos:start="93:9" pos:end="97:9">

        <if_stmt pos:start="93:9" pos:end="97:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:36">(<expr pos:start="93:13" pos:end="93:35"><call pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:21">ftruncate</name><argument_list pos:start="93:22" pos:end="93:29">(<argument pos:start="93:23" pos:end="93:25"><expr pos:start="93:23" pos:end="93:25"><name pos:start="93:23" pos:end="93:25">ret</name></expr></argument>, <argument pos:start="93:28" pos:end="93:28"><expr pos:start="93:28" pos:end="93:28"><literal type="number" pos:start="93:28" pos:end="93:28">0</literal></expr></argument>)</argument_list></call> <operator pos:start="93:31" pos:end="93:32">==</operator> <operator pos:start="93:34" pos:end="93:34">-</operator><literal type="number" pos:start="93:35" pos:end="93:35">1</literal></expr>)</condition> <block pos:start="93:38" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:22">

            <goto pos:start="95:13" pos:end="95:22">goto <name pos:start="95:18" pos:end="95:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="103:5" pos:end="103:15">return <expr pos:start="103:12" pos:end="103:14"><name pos:start="103:12" pos:end="103:14">ret</name></expr>;</return>



<label pos:start="107:1" pos:end="107:5"><name pos:start="107:1" pos:end="107:4">fail</name>:</label>

    <expr_stmt pos:start="109:5" pos:end="109:19"><expr pos:start="109:5" pos:end="109:18"><name pos:start="109:5" pos:end="109:10">serrno</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <name pos:start="109:14" pos:end="109:18">errno</name></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:18">(<expr pos:start="111:9" pos:end="111:17"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:14">!=</operator> <operator pos:start="111:16" pos:end="111:16">-</operator><literal type="number" pos:start="111:17" pos:end="111:17">1</literal></expr>)</condition> <block pos:start="111:20" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:19">

        <expr_stmt pos:start="113:9" pos:end="113:19"><expr pos:start="113:9" pos:end="113:18"><call pos:start="113:9" pos:end="113:18"><name pos:start="113:9" pos:end="113:13">close</name><argument_list pos:start="113:14" pos:end="113:18">(<argument pos:start="113:15" pos:end="113:17"><expr pos:start="113:15" pos:end="113:17"><name pos:start="113:15" pos:end="113:17">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:19"><expr pos:start="117:5" pos:end="117:18"><name pos:start="117:5" pos:end="117:9">errno</name> <operator pos:start="117:11" pos:end="117:11">=</operator> <name pos:start="117:13" pos:end="117:18">serrno</name></expr>;</expr_stmt>

    <return pos:start="119:5" pos:end="119:14">return <expr pos:start="119:12" pos:end="119:13"><operator pos:start="119:12" pos:end="119:12">-</operator><literal type="number" pos:start="119:13" pos:end="119:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
