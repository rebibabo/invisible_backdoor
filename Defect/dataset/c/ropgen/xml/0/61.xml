<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/61.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">truespeech_decode_frame</name><parameter_list pos:start="1:35" pos:end="5:32">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:56"><name pos:start="1:36" pos:end="1:49">AVCodecContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">avctx</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:26"><decl pos:start="3:17" pos:end="3:26"><type pos:start="3:17" pos:end="3:26"><name pos:start="3:17" pos:end="3:20">void</name> <modifier pos:start="3:22" pos:end="3:22">*</modifier></type><name pos:start="3:23" pos:end="3:26">data</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">data_size</name></decl></parameter>,

                <parameter pos:start="5:17" pos:end="5:31"><decl pos:start="5:17" pos:end="5:31"><type pos:start="5:17" pos:end="5:31"><name pos:start="5:17" pos:end="5:24">AVPacket</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:31">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="99:1">{<block_content pos:start="9:5" pos:end="97:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">TSContext</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:16">c</name> <init pos:start="13:18" pos:end="13:35">= <expr pos:start="13:20" pos:end="13:35"><name pos:start="13:20" pos:end="13:35"><name pos:start="13:20" pos:end="13:24">avctx</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:35">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">short</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:18">samples</name> <init pos:start="19:20" pos:end="19:25">= <expr pos:start="19:22" pos:end="19:25"><name pos:start="19:22" pos:end="19:25">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:16">consumed</name> <init pos:start="21:18" pos:end="21:20">= <expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int16_t</name></type> <name pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:19">out_buf</name><index pos:start="23:20" pos:end="23:24">[<expr pos:start="23:21" pos:end="23:23"><literal type="number" pos:start="23:21" pos:end="23:23">240</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:19"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">iterations</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="31:17"><if pos:start="29:5" pos:end="31:17">if <condition pos:start="29:8" pos:end="29:18">(<expr pos:start="29:9" pos:end="29:17"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:17">buf_size</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:17"><block_content pos:start="31:9" pos:end="31:17">

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:22">(<expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:16">buf_size</name> <operator pos:start="35:18" pos:end="35:18">&lt;</operator> <literal type="number" pos:start="35:20" pos:end="35:21">32</literal></expr>)</condition> <block pos:start="35:24" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:18">

        <expr_stmt pos:start="37:9" pos:end="39:88"><expr pos:start="37:9" pos:end="39:87"><call pos:start="37:9" pos:end="39:87"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="39:87">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="39:16" pos:end="39:76"><expr pos:start="39:16" pos:end="39:76"><literal type="string" pos:start="39:16" pos:end="39:76">"Too small input buffer (%d bytes), need at least 32 bytes\n"</literal></expr></argument>, <argument pos:start="39:79" pos:end="39:86"><expr pos:start="39:79" pos:end="39:86"><name pos:start="39:79" pos:end="39:86">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:56"><expr pos:start="45:5" pos:end="45:55"><name pos:start="45:5" pos:end="45:14">iterations</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:55"><name pos:start="45:18" pos:end="45:22">FFMIN</name><argument_list pos:start="45:23" pos:end="45:55">(<argument pos:start="45:24" pos:end="45:36"><expr pos:start="45:24" pos:end="45:36"><name pos:start="45:24" pos:end="45:31">buf_size</name> <operator pos:start="45:33" pos:end="45:33">/</operator> <literal type="number" pos:start="45:35" pos:end="45:36">32</literal></expr></argument>, <argument pos:start="45:39" pos:end="45:54"><expr pos:start="45:39" pos:end="45:54"><operator pos:start="45:39" pos:end="45:39">*</operator><name pos:start="45:40" pos:end="45:48">data_size</name> <operator pos:start="45:50" pos:end="45:50">/</operator> <literal type="number" pos:start="45:52" pos:end="45:54">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="47:5" pos:end="89:5">for<control pos:start="47:8" pos:end="47:35">(<init pos:start="47:9" pos:end="47:14"><expr pos:start="47:9" pos:end="47:13"><name pos:start="47:9" pos:end="47:9">j</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <literal type="number" pos:start="47:13" pos:end="47:13">0</literal></expr>;</init> <condition pos:start="47:16" pos:end="47:30"><expr pos:start="47:16" pos:end="47:29"><name pos:start="47:16" pos:end="47:16">j</name> <operator pos:start="47:18" pos:end="47:18">&lt;</operator> <name pos:start="47:20" pos:end="47:29">iterations</name></expr>;</condition> <incr pos:start="47:32" pos:end="47:34"><expr pos:start="47:32" pos:end="47:34"><name pos:start="47:32" pos:end="47:32">j</name><operator pos:start="47:33" pos:end="47:34">++</operator></expr></incr>)</control> <block pos:start="47:37" pos:end="89:5">{<block_content pos:start="49:9" pos:end="85:36">

        <expr_stmt pos:start="49:9" pos:end="49:49"><expr pos:start="49:9" pos:end="49:48"><call pos:start="49:9" pos:end="49:48"><name pos:start="49:9" pos:end="49:29">truespeech_read_frame</name><argument_list pos:start="49:30" pos:end="49:48">(<argument pos:start="49:31" pos:end="49:31"><expr pos:start="49:31" pos:end="49:31"><name pos:start="49:31" pos:end="49:31">c</name></expr></argument>, <argument pos:start="49:34" pos:end="49:47"><expr pos:start="49:34" pos:end="49:47"><name pos:start="49:34" pos:end="49:36">buf</name> <operator pos:start="49:38" pos:end="49:38">+</operator> <name pos:start="49:40" pos:end="49:47">consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:23"><expr pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:16">consumed</name> <operator pos:start="51:18" pos:end="51:19">+=</operator> <literal type="number" pos:start="51:21" pos:end="51:22">32</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><call pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:35">truespeech_correlate_filter</name><argument_list pos:start="55:36" pos:end="55:38">(<argument pos:start="55:37" pos:end="55:37"><expr pos:start="55:37" pos:end="55:37"><name pos:start="55:37" pos:end="55:37">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:36"><expr pos:start="57:9" pos:end="57:35"><call pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:32">truespeech_filters_merge</name><argument_list pos:start="57:33" pos:end="57:35">(<argument pos:start="57:34" pos:end="57:34"><expr pos:start="57:34" pos:end="57:34"><name pos:start="57:34" pos:end="57:34">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:36"><expr pos:start="61:9" pos:end="61:35"><call pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:14">memset</name><argument_list pos:start="61:15" pos:end="61:35">(<argument pos:start="61:16" pos:end="61:22"><expr pos:start="61:16" pos:end="61:22"><name pos:start="61:16" pos:end="61:22">out_buf</name></expr></argument>, <argument pos:start="61:25" pos:end="61:25"><expr pos:start="61:25" pos:end="61:25"><literal type="number" pos:start="61:25" pos:end="61:25">0</literal></expr></argument>, <argument pos:start="61:28" pos:end="61:34"><expr pos:start="61:28" pos:end="61:34"><literal type="number" pos:start="61:28" pos:end="61:30">240</literal> <operator pos:start="61:32" pos:end="61:32">*</operator> <literal type="number" pos:start="61:34" pos:end="61:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="63:9" pos:end="73:9">for<control pos:start="63:12" pos:end="63:30">(<init pos:start="63:13" pos:end="63:18"><expr pos:start="63:13" pos:end="63:17"><name pos:start="63:13" pos:end="63:13">i</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <literal type="number" pos:start="63:17" pos:end="63:17">0</literal></expr>;</init> <condition pos:start="63:20" pos:end="63:25"><expr pos:start="63:20" pos:end="63:24"><name pos:start="63:20" pos:end="63:20">i</name> <operator pos:start="63:22" pos:end="63:22">&lt;</operator> <literal type="number" pos:start="63:24" pos:end="63:24">4</literal></expr>;</condition> <incr pos:start="63:27" pos:end="63:29"><expr pos:start="63:27" pos:end="63:29"><name pos:start="63:27" pos:end="63:27">i</name><operator pos:start="63:28" pos:end="63:29">++</operator></expr></incr>)</control> <block pos:start="63:32" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:53">

            <expr_stmt pos:start="65:13" pos:end="65:51"><expr pos:start="65:13" pos:end="65:50"><call pos:start="65:13" pos:end="65:50"><name pos:start="65:13" pos:end="65:44">truespeech_apply_twopoint_filter</name><argument_list pos:start="65:45" pos:end="65:50">(<argument pos:start="65:46" pos:end="65:46"><expr pos:start="65:46" pos:end="65:46"><name pos:start="65:46" pos:end="65:46">c</name></expr></argument>, <argument pos:start="65:49" pos:end="65:49"><expr pos:start="65:49" pos:end="65:49"><name pos:start="65:49" pos:end="65:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:60"><expr pos:start="67:13" pos:end="67:59"><call pos:start="67:13" pos:end="67:59"><name pos:start="67:13" pos:end="67:35">truespeech_place_pulses</name><argument_list pos:start="67:36" pos:end="67:59">(<argument pos:start="67:37" pos:end="67:37"><expr pos:start="67:37" pos:end="67:37"><name pos:start="67:37" pos:end="67:37">c</name></expr></argument>, <argument pos:start="67:40" pos:end="67:55"><expr pos:start="67:40" pos:end="67:55"><name pos:start="67:40" pos:end="67:46">out_buf</name> <operator pos:start="67:48" pos:end="67:48">+</operator> <name pos:start="67:50" pos:end="67:50">i</name> <operator pos:start="67:52" pos:end="67:52">*</operator> <literal type="number" pos:start="67:54" pos:end="67:55">60</literal></expr></argument>, <argument pos:start="67:58" pos:end="67:58"><expr pos:start="67:58" pos:end="67:58"><name pos:start="67:58" pos:end="67:58">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:62"><expr pos:start="69:13" pos:end="69:61"><call pos:start="69:13" pos:end="69:61"><name pos:start="69:13" pos:end="69:37">truespeech_update_filters</name><argument_list pos:start="69:38" pos:end="69:61">(<argument pos:start="69:39" pos:end="69:39"><expr pos:start="69:39" pos:end="69:39"><name pos:start="69:39" pos:end="69:39">c</name></expr></argument>, <argument pos:start="69:42" pos:end="69:57"><expr pos:start="69:42" pos:end="69:57"><name pos:start="69:42" pos:end="69:48">out_buf</name> <operator pos:start="69:50" pos:end="69:50">+</operator> <name pos:start="69:52" pos:end="69:52">i</name> <operator pos:start="69:54" pos:end="69:54">*</operator> <literal type="number" pos:start="69:56" pos:end="69:57">60</literal></expr></argument>, <argument pos:start="69:60" pos:end="69:60"><expr pos:start="69:60" pos:end="69:60"><name pos:start="69:60" pos:end="69:60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:53"><expr pos:start="71:13" pos:end="71:52"><call pos:start="71:13" pos:end="71:52"><name pos:start="71:13" pos:end="71:28">truespeech_synth</name><argument_list pos:start="71:29" pos:end="71:52">(<argument pos:start="71:30" pos:end="71:30"><expr pos:start="71:30" pos:end="71:30"><name pos:start="71:30" pos:end="71:30">c</name></expr></argument>, <argument pos:start="71:33" pos:end="71:48"><expr pos:start="71:33" pos:end="71:48"><name pos:start="71:33" pos:end="71:39">out_buf</name> <operator pos:start="71:41" pos:end="71:41">+</operator> <name pos:start="71:43" pos:end="71:43">i</name> <operator pos:start="71:45" pos:end="71:45">*</operator> <literal type="number" pos:start="71:47" pos:end="71:48">60</literal></expr></argument>, <argument pos:start="71:51" pos:end="71:51"><expr pos:start="71:51" pos:end="71:51"><name pos:start="71:51" pos:end="71:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="77:9" pos:end="77:35"><expr pos:start="77:9" pos:end="77:34"><call pos:start="77:9" pos:end="77:34"><name pos:start="77:9" pos:end="77:31">truespeech_save_prevvec</name><argument_list pos:start="77:32" pos:end="77:34">(<argument pos:start="77:33" pos:end="77:33"><expr pos:start="77:33" pos:end="77:33"><name pos:start="77:33" pos:end="77:33">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="81:9" pos:end="81:42">/* finally output decoded frame */</comment>

        <for pos:start="83:9" pos:end="85:36">for<control pos:start="83:12" pos:end="83:32">(<init pos:start="83:13" pos:end="83:18"><expr pos:start="83:13" pos:end="83:17"><name pos:start="83:13" pos:end="83:13">i</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <literal type="number" pos:start="83:17" pos:end="83:17">0</literal></expr>;</init> <condition pos:start="83:20" pos:end="83:27"><expr pos:start="83:20" pos:end="83:26"><name pos:start="83:20" pos:end="83:20">i</name> <operator pos:start="83:22" pos:end="83:22">&lt;</operator> <literal type="number" pos:start="83:24" pos:end="83:26">240</literal></expr>;</condition> <incr pos:start="83:29" pos:end="83:31"><expr pos:start="83:29" pos:end="83:31"><name pos:start="83:29" pos:end="83:29">i</name><operator pos:start="83:30" pos:end="83:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="85:13" pos:end="85:36"><block_content pos:start="85:13" pos:end="85:36">

            <expr_stmt pos:start="85:13" pos:end="85:36"><expr pos:start="85:13" pos:end="85:35"><operator pos:start="85:13" pos:end="85:13">*</operator><name pos:start="85:14" pos:end="85:20">samples</name><operator pos:start="85:21" pos:end="85:22">++</operator> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:35"><name pos:start="85:26" pos:end="85:32">out_buf</name><index pos:start="85:33" pos:end="85:35">[<expr pos:start="85:34" pos:end="85:34"><name pos:start="85:34" pos:end="85:34">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



    </block_content>}</block></for>



    <expr_stmt pos:start="93:5" pos:end="93:31"><expr pos:start="93:5" pos:end="93:30"><operator pos:start="93:5" pos:end="93:5">*</operator><name pos:start="93:6" pos:end="93:14">data_size</name> <operator pos:start="93:16" pos:end="93:16">=</operator> <name pos:start="93:18" pos:end="93:25">consumed</name> <operator pos:start="93:27" pos:end="93:27">*</operator> <literal type="number" pos:start="93:29" pos:end="93:30">15</literal></expr>;</expr_stmt>



    <return pos:start="97:5" pos:end="97:20">return <expr pos:start="97:12" pos:end="97:19"><name pos:start="97:12" pos:end="97:19">consumed</name></expr>;</return>

</block_content>}</block></function>
</unit>
