<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24195.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:15">bdrv_close</name><parameter_list pos:start="1:16" pos:end="1:37">(<parameter pos:start="1:17" pos:end="1:36"><decl pos:start="1:17" pos:end="1:36"><type pos:start="1:17" pos:end="1:34"><name pos:start="1:17" pos:end="1:32">BlockDriverState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:36">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="129:1">{<block_content pos:start="5:5" pos:end="127:35">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">BdrvAioNotifier</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">ban</name></decl>, <decl pos:start="5:27" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:21"><modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:35">ban_next</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:16">(<expr pos:start="9:9" pos:end="9:15"><name pos:start="9:9" pos:end="9:15"><name pos:start="9:9" pos:end="9:10">bs</name><operator pos:start="9:11" pos:end="9:12">-&gt;</operator><name pos:start="9:13" pos:end="9:15">job</name></name></expr>)</condition> <block pos:start="9:18" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:39">

        <expr_stmt pos:start="11:9" pos:end="11:39"><expr pos:start="11:9" pos:end="11:38"><call pos:start="11:9" pos:end="11:38"><name pos:start="11:9" pos:end="11:29">block_job_cancel_sync</name><argument_list pos:start="11:30" pos:end="11:38">(<argument pos:start="11:31" pos:end="11:37"><expr pos:start="11:31" pos:end="11:37"><name pos:start="11:31" pos:end="11:37"><name pos:start="11:31" pos:end="11:32">bs</name><operator pos:start="11:33" pos:end="11:34">-&gt;</operator><name pos:start="11:35" pos:end="11:37">job</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:69">/* Disable I/O limits and drain all pending throttled requests */</comment>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:30">(<expr pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:10">bs</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:29">io_limits_enabled</name></name></expr>)</condition> <block pos:start="19:32" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:35">

        <expr_stmt pos:start="21:9" pos:end="21:35"><expr pos:start="21:9" pos:end="21:34"><call pos:start="21:9" pos:end="21:34"><name pos:start="21:9" pos:end="21:30">bdrv_io_limits_disable</name><argument_list pos:start="21:31" pos:end="21:34">(<argument pos:start="21:32" pos:end="21:33"><expr pos:start="21:32" pos:end="21:33"><name pos:start="21:32" pos:end="21:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:19"><expr pos:start="27:5" pos:end="27:18"><call pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:14">bdrv_drain</name><argument_list pos:start="27:15" pos:end="27:18">(<argument pos:start="27:16" pos:end="27:17"><expr pos:start="27:16" pos:end="27:17"><name pos:start="27:16" pos:end="27:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="27:21" pos:end="27:38">/* complete I/O */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:19"><expr pos:start="29:5" pos:end="29:18"><call pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:14">bdrv_flush</name><argument_list pos:start="29:15" pos:end="29:18">(<argument pos:start="29:16" pos:end="29:17"><expr pos:start="29:16" pos:end="29:17"><name pos:start="29:16" pos:end="29:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:19"><expr pos:start="31:5" pos:end="31:18"><call pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:14">bdrv_drain</name><argument_list pos:start="31:15" pos:end="31:18">(<argument pos:start="31:16" pos:end="31:17"><expr pos:start="31:16" pos:end="31:17"><name pos:start="31:16" pos:end="31:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="31:21" pos:end="31:56">/* in case flush left pending I/O */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:51"><expr pos:start="33:5" pos:end="33:50"><call pos:start="33:5" pos:end="33:50"><name pos:start="33:5" pos:end="33:24">notifier_list_notify</name><argument_list pos:start="33:25" pos:end="33:50">(<argument pos:start="33:26" pos:end="33:45"><expr pos:start="33:26" pos:end="33:45"><operator pos:start="33:26" pos:end="33:26">&amp;</operator><name pos:start="33:27" pos:end="33:45"><name pos:start="33:27" pos:end="33:28">bs</name><operator pos:start="33:29" pos:end="33:30">-&gt;</operator><name pos:start="33:31" pos:end="33:45">close_notifiers</name></name></expr></argument>, <argument pos:start="33:48" pos:end="33:49"><expr pos:start="33:48" pos:end="33:49"><name pos:start="33:48" pos:end="33:49">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="109:5"><if pos:start="37:5" pos:end="109:5">if <condition pos:start="37:8" pos:end="37:16">(<expr pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:10">bs</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:15">drv</name></name></expr>)</condition> <block pos:start="37:18" pos:end="109:5">{<block_content pos:start="39:9" pos:end="107:37">

        <decl_stmt pos:start="39:9" pos:end="39:32"><decl pos:start="39:9" pos:end="39:24"><type pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:17">BdrvChild</name> <modifier pos:start="39:19" pos:end="39:19">*</modifier></type><name pos:start="39:20" pos:end="39:24">child</name></decl>, <decl pos:start="39:27" pos:end="39:31"><type ref="prev" pos:start="39:9" pos:end="39:19"><modifier pos:start="39:27" pos:end="39:27">*</modifier></type><name pos:start="39:28" pos:end="39:31">next</name></decl>;</decl_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:32"><expr pos:start="43:9" pos:end="43:31"><call pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:10">bs</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:15">drv</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:27">bdrv_close</name></name><argument_list pos:start="43:28" pos:end="43:31">(<argument pos:start="43:29" pos:end="43:30"><expr pos:start="43:29" pos:end="43:30"><name pos:start="43:29" pos:end="43:30">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:23"><expr pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:10">bs</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:15">drv</name></name> <operator pos:start="45:17" pos:end="45:17">=</operator> <name pos:start="45:19" pos:end="45:22">NULL</name></expr>;</expr_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:38"><expr pos:start="49:9" pos:end="49:37"><call pos:start="49:9" pos:end="49:37"><name pos:start="49:9" pos:end="49:27">bdrv_set_backing_hd</name><argument_list pos:start="49:28" pos:end="49:37">(<argument pos:start="49:29" pos:end="49:30"><expr pos:start="49:29" pos:end="49:30"><name pos:start="49:29" pos:end="49:30">bs</name></expr></argument>, <argument pos:start="49:33" pos:end="49:36"><expr pos:start="49:33" pos:end="49:36"><name pos:start="49:33" pos:end="49:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:29">(<expr pos:start="53:13" pos:end="53:28"><name pos:start="53:13" pos:end="53:20"><name pos:start="53:13" pos:end="53:14">bs</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:20">file</name></name> <operator pos:start="53:22" pos:end="53:23">!=</operator> <name pos:start="53:25" pos:end="53:28">NULL</name></expr>)</condition> <block pos:start="53:31" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:28">

            <expr_stmt pos:start="55:13" pos:end="55:43"><expr pos:start="55:13" pos:end="55:42"><call pos:start="55:13" pos:end="55:42"><name pos:start="55:13" pos:end="55:28">bdrv_unref_child</name><argument_list pos:start="55:29" pos:end="55:42">(<argument pos:start="55:30" pos:end="55:31"><expr pos:start="55:30" pos:end="55:31"><name pos:start="55:30" pos:end="55:31">bs</name></expr></argument>, <argument pos:start="55:34" pos:end="55:41"><expr pos:start="55:34" pos:end="55:41"><name pos:start="55:34" pos:end="55:41"><name pos:start="55:34" pos:end="55:35">bs</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:41">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:28"><expr pos:start="57:13" pos:end="57:27"><name pos:start="57:13" pos:end="57:20"><name pos:start="57:13" pos:end="57:14">bs</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:20">file</name></name> <operator pos:start="57:22" pos:end="57:22">=</operator> <name pos:start="57:24" pos:end="57:27">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <macro pos:start="63:9" pos:end="63:60"><name pos:start="63:9" pos:end="63:26">QLIST_FOREACH_SAFE</name><argument_list pos:start="63:27" pos:end="63:60">(<argument pos:start="63:28" pos:end="63:32">child</argument>, <argument pos:start="63:35" pos:end="63:47">&amp;bs-&gt;children</argument>, <argument pos:start="63:50" pos:end="63:53">next</argument>, <argument pos:start="63:56" pos:end="63:59">next</argument>)</argument_list></macro> <block pos:start="63:62" pos:end="77:9">{<block_content pos:start="69:13" pos:end="75:37">

            <comment type="block" pos:start="65:13" pos:end="67:41">/* TODO Remove bdrv_unref() from drivers' close function and use

             * bdrv_unref_child() here */</comment>

            <if_stmt pos:start="69:13" pos:end="73:13"><if pos:start="69:13" pos:end="73:13">if <condition pos:start="69:16" pos:end="69:47">(<expr pos:start="69:17" pos:end="69:46"><name pos:start="69:17" pos:end="69:40"><name pos:start="69:17" pos:end="69:21">child</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:25">bs</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:40">inherits_from</name></name> <operator pos:start="69:42" pos:end="69:43">==</operator> <name pos:start="69:45" pos:end="69:46">bs</name></expr>)</condition> <block pos:start="69:49" pos:end="73:13">{<block_content pos:start="71:17" pos:end="71:48">

                <expr_stmt pos:start="71:17" pos:end="71:48"><expr pos:start="71:17" pos:end="71:47"><name pos:start="71:17" pos:end="71:40"><name pos:start="71:17" pos:end="71:21">child</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:25">bs</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:40">inherits_from</name></name> <operator pos:start="71:42" pos:end="71:42">=</operator> <name pos:start="71:44" pos:end="71:47">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:37"><expr pos:start="75:13" pos:end="75:36"><call pos:start="75:13" pos:end="75:36"><name pos:start="75:13" pos:end="75:29">bdrv_detach_child</name><argument_list pos:start="75:30" pos:end="75:36">(<argument pos:start="75:31" pos:end="75:35"><expr pos:start="75:31" pos:end="75:35"><name pos:start="75:31" pos:end="75:35">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>



        <expr_stmt pos:start="81:9" pos:end="81:27"><expr pos:start="81:9" pos:end="81:26"><call pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:14">g_free</name><argument_list pos:start="81:15" pos:end="81:26">(<argument pos:start="81:16" pos:end="81:25"><expr pos:start="81:16" pos:end="81:25"><name pos:start="81:16" pos:end="81:25"><name pos:start="81:16" pos:end="81:17">bs</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:25">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:26"><expr pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:10">bs</name><operator pos:start="83:11" pos:end="83:12">-&gt;</operator><name pos:start="83:13" pos:end="83:18">opaque</name></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <name pos:start="83:22" pos:end="83:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:29"><expr pos:start="85:9" pos:end="85:28"><name pos:start="85:9" pos:end="85:24"><name pos:start="85:9" pos:end="85:10">bs</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:24">copy_on_read</name></name> <operator pos:start="85:26" pos:end="85:26">=</operator> <literal type="number" pos:start="85:28" pos:end="85:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:35"><expr pos:start="87:9" pos:end="87:34"><name pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:10">bs</name><operator pos:start="87:11" pos:end="87:12">-&gt;</operator><name pos:start="87:13" pos:end="87:24">backing_file</name><index pos:start="87:25" pos:end="87:27">[<expr pos:start="87:26" pos:end="87:26"><literal type="number" pos:start="87:26" pos:end="87:26">0</literal></expr>]</index></name> <operator pos:start="87:29" pos:end="87:29">=</operator> <literal type="char" pos:start="87:31" pos:end="87:34">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:37"><expr pos:start="89:9" pos:end="89:36"><name pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:10">bs</name><operator pos:start="89:11" pos:end="89:12">-&gt;</operator><name pos:start="89:13" pos:end="89:26">backing_format</name><index pos:start="89:27" pos:end="89:29">[<expr pos:start="89:28" pos:end="89:28"><literal type="number" pos:start="89:28" pos:end="89:28">0</literal></expr>]</index></name> <operator pos:start="89:31" pos:end="89:31">=</operator> <literal type="char" pos:start="89:33" pos:end="89:36">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:30"><expr pos:start="91:9" pos:end="91:29"><name pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:10">bs</name><operator pos:start="91:11" pos:end="91:12">-&gt;</operator><name pos:start="91:13" pos:end="91:25">total_sectors</name></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <literal type="number" pos:start="91:29" pos:end="91:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:26"><expr pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:10">bs</name><operator pos:start="93:11" pos:end="93:12">-&gt;</operator><name pos:start="93:13" pos:end="93:21">encrypted</name></name> <operator pos:start="93:23" pos:end="93:23">=</operator> <literal type="number" pos:start="93:25" pos:end="93:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:26"><expr pos:start="95:9" pos:end="95:25"><name pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:10">bs</name><operator pos:start="95:11" pos:end="95:12">-&gt;</operator><name pos:start="95:13" pos:end="95:21">valid_key</name></name> <operator pos:start="95:23" pos:end="95:23">=</operator> <literal type="number" pos:start="95:25" pos:end="95:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:19"><expr pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:14"><name pos:start="97:9" pos:end="97:10">bs</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:14">sg</name></name> <operator pos:start="97:16" pos:end="97:16">=</operator> <literal type="number" pos:start="97:18" pos:end="97:18">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:36"><expr pos:start="99:9" pos:end="99:35"><name pos:start="99:9" pos:end="99:27"><name pos:start="99:9" pos:end="99:10">bs</name><operator pos:start="99:11" pos:end="99:12">-&gt;</operator><name pos:start="99:13" pos:end="99:27">zero_beyond_eof</name></name> <operator pos:start="99:29" pos:end="99:29">=</operator> <name pos:start="99:31" pos:end="99:35">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:29"><expr pos:start="101:9" pos:end="101:28"><call pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:15">QDECREF</name><argument_list pos:start="101:16" pos:end="101:28">(<argument pos:start="101:17" pos:end="101:27"><expr pos:start="101:17" pos:end="101:27"><name pos:start="101:17" pos:end="101:27"><name pos:start="101:17" pos:end="101:18">bs</name><operator pos:start="101:19" pos:end="101:20">-&gt;</operator><name pos:start="101:21" pos:end="101:27">options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:27"><expr pos:start="103:9" pos:end="103:26"><name pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:10">bs</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:19">options</name></name> <operator pos:start="103:21" pos:end="103:21">=</operator> <name pos:start="103:23" pos:end="103:26">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:39"><expr pos:start="105:9" pos:end="105:38"><call pos:start="105:9" pos:end="105:38"><name pos:start="105:9" pos:end="105:15">QDECREF</name><argument_list pos:start="105:16" pos:end="105:38">(<argument pos:start="105:17" pos:end="105:37"><expr pos:start="105:17" pos:end="105:37"><name pos:start="105:17" pos:end="105:37"><name pos:start="105:17" pos:end="105:18">bs</name><operator pos:start="105:19" pos:end="105:20">-&gt;</operator><name pos:start="105:21" pos:end="105:37">full_open_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:37"><expr pos:start="107:9" pos:end="107:36"><name pos:start="107:9" pos:end="107:29"><name pos:start="107:9" pos:end="107:10">bs</name><operator pos:start="107:11" pos:end="107:12">-&gt;</operator><name pos:start="107:13" pos:end="107:29">full_open_options</name></name> <operator pos:start="107:31" pos:end="107:31">=</operator> <name pos:start="107:33" pos:end="107:36">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="117:5"><if pos:start="113:5" pos:end="117:5">if <condition pos:start="113:8" pos:end="113:16">(<expr pos:start="113:9" pos:end="113:15"><name pos:start="113:9" pos:end="113:15"><name pos:start="113:9" pos:end="113:10">bs</name><operator pos:start="113:11" pos:end="113:12">-&gt;</operator><name pos:start="113:13" pos:end="113:15">blk</name></name></expr>)</condition> <block pos:start="113:18" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:48">

        <expr_stmt pos:start="115:9" pos:end="115:48"><expr pos:start="115:9" pos:end="115:47"><call pos:start="115:9" pos:end="115:47"><name pos:start="115:9" pos:end="115:31">blk_dev_change_media_cb</name><argument_list pos:start="115:32" pos:end="115:47">(<argument pos:start="115:33" pos:end="115:39"><expr pos:start="115:33" pos:end="115:39"><name pos:start="115:33" pos:end="115:39"><name pos:start="115:33" pos:end="115:34">bs</name><operator pos:start="115:35" pos:end="115:36">-&gt;</operator><name pos:start="115:37" pos:end="115:39">blk</name></name></expr></argument>, <argument pos:start="115:42" pos:end="115:46"><expr pos:start="115:42" pos:end="115:46"><name pos:start="115:42" pos:end="115:46">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="121:5" pos:end="121:63"><name pos:start="121:5" pos:end="121:22">QLIST_FOREACH_SAFE</name><argument_list pos:start="121:23" pos:end="121:63">(<argument pos:start="121:24" pos:end="121:26">ban</argument>, <argument pos:start="121:29" pos:end="121:46">&amp;bs-&gt;aio_notifiers</argument>, <argument pos:start="121:49" pos:end="121:52">list</argument>, <argument pos:start="121:55" pos:end="121:62">ban_next</argument>)</argument_list></macro> <block pos:start="121:65" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:20">

        <expr_stmt pos:start="123:9" pos:end="123:20"><expr pos:start="123:9" pos:end="123:19"><call pos:start="123:9" pos:end="123:19"><name pos:start="123:9" pos:end="123:14">g_free</name><argument_list pos:start="123:15" pos:end="123:19">(<argument pos:start="123:16" pos:end="123:18"><expr pos:start="123:16" pos:end="123:18"><name pos:start="123:16" pos:end="123:18">ban</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="127:5" pos:end="127:35"><expr pos:start="127:5" pos:end="127:34"><call pos:start="127:5" pos:end="127:34"><name pos:start="127:5" pos:end="127:14">QLIST_INIT</name><argument_list pos:start="127:15" pos:end="127:34">(<argument pos:start="127:16" pos:end="127:33"><expr pos:start="127:16" pos:end="127:33"><operator pos:start="127:16" pos:end="127:16">&amp;</operator><name pos:start="127:17" pos:end="127:33"><name pos:start="127:17" pos:end="127:18">bs</name><operator pos:start="127:19" pos:end="127:20">-&gt;</operator><name pos:start="127:21" pos:end="127:33">aio_notifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
