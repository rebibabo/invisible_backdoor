<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19496.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:37">bdrv_co_io_em</name><parameter_list pos:start="1:38" pos:end="5:52">(<parameter pos:start="1:39" pos:end="1:58"><decl pos:start="1:39" pos:end="1:58"><type pos:start="1:39" pos:end="1:58"><name pos:start="1:39" pos:end="1:54">BlockDriverState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:58">bs</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:78"><decl pos:start="1:61" pos:end="1:78"><type pos:start="1:61" pos:end="1:78"><name pos:start="1:61" pos:end="1:67">int64_t</name></type> <name pos:start="1:69" pos:end="1:78">sector_num</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:52"><decl pos:start="3:39" pos:end="3:52"><type pos:start="3:39" pos:end="3:52"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:52">nb_sectors</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:71"><decl pos:start="3:55" pos:end="3:71"><type pos:start="3:55" pos:end="3:71"><name pos:start="3:55" pos:end="3:66">QEMUIOVector</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:71">iov</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:51"><decl pos:start="5:39" pos:end="5:51"><type pos:start="5:39" pos:end="5:51"><name pos:start="5:39" pos:end="5:42">bool</name></type> <name pos:start="5:44" pos:end="5:51">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="49:1">{<block_content pos:start="9:5" pos:end="47:18">

    <decl_stmt pos:start="9:5" pos:end="13:6"><decl pos:start="9:5" pos:end="13:5"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:25">CoroutineIOCompletion</name></type> <name pos:start="9:27" pos:end="9:28">co</name> <init pos:start="9:30" pos:end="13:5">= <expr pos:start="9:32" pos:end="13:5"><block pos:start="9:32" pos:end="13:5">{

        <expr pos:start="11:9" pos:end="11:42"><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:18">coroutine</name> <operator pos:start="11:20" pos:end="11:20">=</operator> <call pos:start="11:22" pos:end="11:42"><name pos:start="11:22" pos:end="11:40">qemu_coroutine_self</name><argument_list pos:start="11:41" pos:end="11:42">()</argument_list></call></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">BlockDriverAIOCB</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:25">acb</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="31:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:17">(<expr pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">is_write</name></expr>)</condition> <block pos:start="19:19" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:59">

        <expr_stmt pos:start="21:9" pos:end="23:59"><expr pos:start="21:9" pos:end="23:58"><name pos:start="21:9" pos:end="21:11">acb</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="23:58"><name pos:start="21:15" pos:end="21:29">bdrv_aio_writev</name><argument_list pos:start="21:30" pos:end="23:58">(<argument pos:start="21:31" pos:end="21:32"><expr pos:start="21:31" pos:end="21:32"><name pos:start="21:31" pos:end="21:32">bs</name></expr></argument>, <argument pos:start="21:35" pos:end="21:44"><expr pos:start="21:35" pos:end="21:44"><name pos:start="21:35" pos:end="21:44">sector_num</name></expr></argument>, <argument pos:start="21:47" pos:end="21:49"><expr pos:start="21:47" pos:end="21:49"><name pos:start="21:47" pos:end="21:49">iov</name></expr></argument>, <argument pos:start="21:52" pos:end="21:61"><expr pos:start="21:52" pos:end="21:61"><name pos:start="21:52" pos:end="21:61">nb_sectors</name></expr></argument>,

                              <argument pos:start="23:31" pos:end="23:52"><expr pos:start="23:31" pos:end="23:52"><name pos:start="23:31" pos:end="23:52">bdrv_co_io_em_complete</name></expr></argument>, <argument pos:start="23:55" pos:end="23:57"><expr pos:start="23:55" pos:end="23:57"><operator pos:start="23:55" pos:end="23:55">&amp;</operator><name pos:start="23:56" pos:end="23:57">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="31:5">else <block pos:start="25:12" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:58">

        <expr_stmt pos:start="27:9" pos:end="29:58"><expr pos:start="27:9" pos:end="29:57"><name pos:start="27:9" pos:end="27:11">acb</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="29:57"><name pos:start="27:15" pos:end="27:28">bdrv_aio_readv</name><argument_list pos:start="27:29" pos:end="29:57">(<argument pos:start="27:30" pos:end="27:31"><expr pos:start="27:30" pos:end="27:31"><name pos:start="27:30" pos:end="27:31">bs</name></expr></argument>, <argument pos:start="27:34" pos:end="27:43"><expr pos:start="27:34" pos:end="27:43"><name pos:start="27:34" pos:end="27:43">sector_num</name></expr></argument>, <argument pos:start="27:46" pos:end="27:48"><expr pos:start="27:46" pos:end="27:48"><name pos:start="27:46" pos:end="27:48">iov</name></expr></argument>, <argument pos:start="27:51" pos:end="27:60"><expr pos:start="27:51" pos:end="27:60"><name pos:start="27:51" pos:end="27:60">nb_sectors</name></expr></argument>,

                             <argument pos:start="29:30" pos:end="29:51"><expr pos:start="29:30" pos:end="29:51"><name pos:start="29:30" pos:end="29:51">bdrv_co_io_em_complete</name></expr></argument>, <argument pos:start="29:54" pos:end="29:56"><expr pos:start="29:54" pos:end="29:56"><operator pos:start="29:54" pos:end="29:54">&amp;</operator><name pos:start="29:55" pos:end="29:56">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:67"><expr pos:start="35:5" pos:end="35:66"><call pos:start="35:5" pos:end="35:66"><name pos:start="35:5" pos:end="35:23">trace_bdrv_co_io_em</name><argument_list pos:start="35:24" pos:end="35:66">(<argument pos:start="35:25" pos:end="35:26"><expr pos:start="35:25" pos:end="35:26"><name pos:start="35:25" pos:end="35:26">bs</name></expr></argument>, <argument pos:start="35:29" pos:end="35:38"><expr pos:start="35:29" pos:end="35:38"><name pos:start="35:29" pos:end="35:38">sector_num</name></expr></argument>, <argument pos:start="35:41" pos:end="35:50"><expr pos:start="35:41" pos:end="35:50"><name pos:start="35:41" pos:end="35:50">nb_sectors</name></expr></argument>, <argument pos:start="35:53" pos:end="35:60"><expr pos:start="35:53" pos:end="35:60"><name pos:start="35:53" pos:end="35:60">is_write</name></expr></argument>, <argument pos:start="35:63" pos:end="35:65"><expr pos:start="35:63" pos:end="35:65"><name pos:start="35:63" pos:end="35:65">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:13">(<expr pos:start="37:9" pos:end="37:12"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:12">acb</name></expr>)</condition> <block pos:start="37:15" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:20">

        <return pos:start="39:9" pos:end="39:20">return <expr pos:start="39:16" pos:end="39:19"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:27"><expr pos:start="43:5" pos:end="43:26"><call pos:start="43:5" pos:end="43:26"><name pos:start="43:5" pos:end="43:24">qemu_coroutine_yield</name><argument_list pos:start="43:25" pos:end="43:26">()</argument_list></call></expr>;</expr_stmt>



    <return pos:start="47:5" pos:end="47:18">return <expr pos:start="47:12" pos:end="47:17"><name pos:start="47:12" pos:end="47:17"><name pos:start="47:12" pos:end="47:13">co</name><operator pos:start="47:14" pos:end="47:14">.</operator><name pos:start="47:15" pos:end="47:17">ret</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
