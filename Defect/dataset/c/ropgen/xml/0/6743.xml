<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6743.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">vmdk_add_extent</name><parameter_list pos:start="1:27" pos:end="13:40">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:49"><decl pos:start="3:28" pos:end="3:49"><type pos:start="3:28" pos:end="3:49"><name pos:start="3:28" pos:end="3:43">BlockDriverState</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:49">file</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:60"><decl pos:start="3:52" pos:end="3:60"><type pos:start="3:52" pos:end="3:60"><name pos:start="3:52" pos:end="3:55">bool</name></type> <name pos:start="3:57" pos:end="3:60">flat</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:77"><decl pos:start="3:63" pos:end="3:77"><type pos:start="3:63" pos:end="3:77"><name pos:start="3:63" pos:end="3:69">int64_t</name></type> <name pos:start="3:71" pos:end="3:77">sectors</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:44"><decl pos:start="5:28" pos:end="5:44"><type pos:start="5:28" pos:end="5:44"><name pos:start="5:28" pos:end="5:34">int64_t</name></type> <name pos:start="5:36" pos:end="5:44">l1_offset</name></decl></parameter>, <parameter pos:start="5:47" pos:end="5:70"><decl pos:start="5:47" pos:end="5:70"><type pos:start="5:47" pos:end="5:70"><name pos:start="5:47" pos:end="5:53">int64_t</name></type> <name pos:start="5:55" pos:end="5:70">l1_backup_offset</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:43"><decl pos:start="7:28" pos:end="7:43"><type pos:start="7:28" pos:end="7:43"><name pos:start="7:28" pos:end="7:35">uint32_t</name></type> <name pos:start="7:37" pos:end="7:43">l1_size</name></decl></parameter>,

                           <parameter pos:start="9:28" pos:end="9:38"><decl pos:start="9:28" pos:end="9:38"><type pos:start="9:28" pos:end="9:38"><name pos:start="9:28" pos:end="9:30">int</name></type> <name pos:start="9:32" pos:end="9:38">l2_size</name></decl></parameter>, <parameter pos:start="9:41" pos:end="9:64"><decl pos:start="9:41" pos:end="9:64"><type pos:start="9:41" pos:end="9:64"><name pos:start="9:41" pos:end="9:48">uint64_t</name></type> <name pos:start="9:50" pos:end="9:64">cluster_sectors</name></decl></parameter>,

                           <parameter pos:start="11:28" pos:end="11:50"><decl pos:start="11:28" pos:end="11:50"><type pos:start="11:28" pos:end="11:50"><name pos:start="11:28" pos:end="11:37">VmdkExtent</name> <modifier pos:start="11:39" pos:end="11:39">*</modifier><modifier pos:start="11:40" pos:end="11:40">*</modifier></type><name pos:start="11:41" pos:end="11:50">new_extent</name></decl></parameter>,

                           <parameter pos:start="13:28" pos:end="13:39"><decl pos:start="13:28" pos:end="13:39"><type pos:start="13:28" pos:end="13:39"><name pos:start="13:28" pos:end="13:32">Error</name> <modifier pos:start="13:34" pos:end="13:34">*</modifier><modifier pos:start="13:35" pos:end="13:35">*</modifier></type><name pos:start="13:36" pos:end="13:39">errp</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="111:1">{<block_content pos:start="17:5" pos:end="109:13">

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:14">VmdkExtent</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:22">extent</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:33"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:17">BDRVVmdkState</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:20">s</name> <init pos:start="19:22" pos:end="19:33">= <expr pos:start="19:24" pos:end="19:33"><name pos:start="19:24" pos:end="19:33"><name pos:start="19:24" pos:end="19:25">bs</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:33">opaque</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:35">(<expr pos:start="23:9" pos:end="23:34"><name pos:start="23:9" pos:end="23:23">cluster_sectors</name> <operator pos:start="23:25" pos:end="23:25">&gt;</operator> <literal type="number" pos:start="23:27" pos:end="23:34">0x200000</literal></expr>)</condition> <block pos:start="23:37" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:22">

        <comment type="block" pos:start="25:9" pos:end="25:70">/* 0x200000 * 512Bytes = 1GB for one cluster is unrealistic */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:70"><expr pos:start="27:9" pos:end="27:69"><call pos:start="27:9" pos:end="27:69"><name pos:start="27:9" pos:end="27:18">error_setg</name><argument_list pos:start="27:19" pos:end="27:69">(<argument pos:start="27:20" pos:end="27:23"><expr pos:start="27:20" pos:end="27:23"><name pos:start="27:20" pos:end="27:23">errp</name></expr></argument>, <argument pos:start="27:26" pos:end="27:68"><expr pos:start="27:26" pos:end="27:68"><literal type="string" pos:start="27:26" pos:end="27:68">"Invalid granularity, image may be corrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:22">return <expr pos:start="29:16" pos:end="29:21"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:21">EFBIG</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="47:5"><if pos:start="33:5" pos:end="47:5">if <condition pos:start="33:8" pos:end="33:36">(<expr pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:15">l1_size</name> <operator pos:start="33:17" pos:end="33:17">&gt;</operator> <literal type="number" pos:start="33:19" pos:end="33:21">512</literal> <operator pos:start="33:23" pos:end="33:23">*</operator> <literal type="number" pos:start="33:25" pos:end="33:28">1024</literal> <operator pos:start="33:30" pos:end="33:30">*</operator> <literal type="number" pos:start="33:32" pos:end="33:35">1024</literal></expr>)</condition> <block pos:start="33:38" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:22">

        <comment type="block" pos:start="35:9" pos:end="41:18">/* Although with big capacity and small l1_entry_sectors, we can get a

         * big l1_size, we don't want unbounded value to allocate the table.

         * Limit it to 512M, which is 16PB for default cluster and L2 table

         * size */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:44"><expr pos:start="43:9" pos:end="43:43"><call pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="43:43">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="43:42"><expr pos:start="43:26" pos:end="43:42"><literal type="string" pos:start="43:26" pos:end="43:42">"L1 size too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:22">return <expr pos:start="45:16" pos:end="45:21"><operator pos:start="45:16" pos:end="45:16">-</operator><name pos:start="45:17" pos:end="45:21">EFBIG</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="53:73"><expr pos:start="51:5" pos:end="53:72"><name pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:14">extents</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="53:72"><name pos:start="51:18" pos:end="51:26">g_realloc</name><argument_list pos:start="51:27" pos:end="53:72">(<argument pos:start="51:28" pos:end="51:37"><expr pos:start="51:28" pos:end="51:37"><name pos:start="51:28" pos:end="51:37"><name pos:start="51:28" pos:end="51:28">s</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:37">extents</name></name></expr></argument>,

                              <argument pos:start="53:31" pos:end="53:71"><expr pos:start="53:31" pos:end="53:71"><operator pos:start="53:31" pos:end="53:31">(</operator><name pos:start="53:32" pos:end="53:45"><name pos:start="53:32" pos:end="53:32">s</name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:45">num_extents</name></name> <operator pos:start="53:47" pos:end="53:47">+</operator> <literal type="number" pos:start="53:49" pos:end="53:49">1</literal><operator pos:start="53:50" pos:end="53:50">)</operator> <operator pos:start="53:52" pos:end="53:52">*</operator> <sizeof pos:start="53:54" pos:end="53:71">sizeof<argument_list pos:start="53:60" pos:end="53:71">(<argument pos:start="53:61" pos:end="53:70"><expr pos:start="53:61" pos:end="53:70"><name pos:start="53:61" pos:end="53:70">VmdkExtent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:41"><expr pos:start="55:5" pos:end="55:40"><name pos:start="55:5" pos:end="55:10">extent</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <operator pos:start="55:14" pos:end="55:14">&amp;</operator><name pos:start="55:15" pos:end="55:40"><name pos:start="55:15" pos:end="55:15">s</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:24">extents</name><index pos:start="55:25" pos:end="55:40">[<expr pos:start="55:26" pos:end="55:39"><name pos:start="55:26" pos:end="55:39"><name pos:start="55:26" pos:end="55:26">s</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:39">num_extents</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:21"><expr pos:start="57:5" pos:end="57:20"><name pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:18">num_extents</name></name><operator pos:start="57:19" pos:end="57:20">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:42"><expr pos:start="61:5" pos:end="61:41"><call pos:start="61:5" pos:end="61:41"><name pos:start="61:5" pos:end="61:10">memset</name><argument_list pos:start="61:11" pos:end="61:41">(<argument pos:start="61:12" pos:end="61:17"><expr pos:start="61:12" pos:end="61:17"><name pos:start="61:12" pos:end="61:17">extent</name></expr></argument>, <argument pos:start="61:20" pos:end="61:20"><expr pos:start="61:20" pos:end="61:20"><literal type="number" pos:start="61:20" pos:end="61:20">0</literal></expr></argument>, <argument pos:start="61:23" pos:end="61:40"><expr pos:start="61:23" pos:end="61:40"><sizeof pos:start="61:23" pos:end="61:40">sizeof<argument_list pos:start="61:29" pos:end="61:40">(<argument pos:start="61:30" pos:end="61:39"><expr pos:start="61:30" pos:end="61:39"><name pos:start="61:30" pos:end="61:39">VmdkExtent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:24"><expr pos:start="63:5" pos:end="63:23"><name pos:start="63:5" pos:end="63:16"><name pos:start="63:5" pos:end="63:10">extent</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:16">file</name></name> <operator pos:start="63:18" pos:end="63:18">=</operator> <name pos:start="63:20" pos:end="63:23">file</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:24"><expr pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:10">extent</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:16">flat</name></name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:23">flat</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:30"><expr pos:start="67:5" pos:end="67:29"><name pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:10">extent</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:19">sectors</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:29">sectors</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:40"><expr pos:start="69:5" pos:end="69:39"><name pos:start="69:5" pos:end="69:27"><name pos:start="69:5" pos:end="69:10">extent</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:27">l1_table_offset</name></name> <operator pos:start="69:29" pos:end="69:29">=</operator> <name pos:start="69:31" pos:end="69:39">l1_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:54"><expr pos:start="71:5" pos:end="71:53"><name pos:start="71:5" pos:end="71:34"><name pos:start="71:5" pos:end="71:10">extent</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:34">l1_backup_table_offset</name></name> <operator pos:start="71:36" pos:end="71:36">=</operator> <name pos:start="71:38" pos:end="71:53">l1_backup_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:30"><expr pos:start="73:5" pos:end="73:29"><name pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:10">extent</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:19">l1_size</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:29">l1_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:57"><expr pos:start="75:5" pos:end="75:56"><name pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:10">extent</name><operator pos:start="75:11" pos:end="75:12">-&gt;</operator><name pos:start="75:13" pos:end="75:28">l1_entry_sectors</name></name> <operator pos:start="75:30" pos:end="75:30">=</operator> <name pos:start="75:32" pos:end="75:38">l2_size</name> <operator pos:start="75:40" pos:end="75:40">*</operator> <name pos:start="75:42" pos:end="75:56">cluster_sectors</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:30"><expr pos:start="77:5" pos:end="77:29"><name pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:10">extent</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:19">l2_size</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <name pos:start="77:23" pos:end="77:29">l2_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:63"><expr pos:start="79:5" pos:end="79:62"><name pos:start="79:5" pos:end="79:27"><name pos:start="79:5" pos:end="79:10">extent</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:27">cluster_sectors</name></name> <operator pos:start="79:29" pos:end="79:29">=</operator> <ternary pos:start="79:31" pos:end="79:62"><condition pos:start="79:31" pos:end="79:36"><expr pos:start="79:31" pos:end="79:34"><name pos:start="79:31" pos:end="79:34">flat</name></expr> ?</condition><then pos:start="79:38" pos:end="79:44"> <expr pos:start="79:38" pos:end="79:44"><name pos:start="79:38" pos:end="79:44">sectors</name></expr> </then><else pos:start="79:46" pos:end="79:62">: <expr pos:start="79:48" pos:end="79:62"><name pos:start="79:48" pos:end="79:62">cluster_sectors</name></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:14">(<expr pos:start="83:9" pos:end="83:13"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:13">flat</name></expr>)</condition> <block pos:start="83:16" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:64">

        <expr_stmt pos:start="85:9" pos:end="87:64"><expr pos:start="85:9" pos:end="87:63"><name pos:start="85:9" pos:end="85:37"><name pos:start="85:9" pos:end="85:10">bs</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:14">bl</name><operator pos:start="85:15" pos:end="85:15">.</operator><name pos:start="85:16" pos:end="85:37">write_zeroes_alignment</name></name> <operator pos:start="85:39" pos:end="85:39">=</operator>

            <call pos:start="87:13" pos:end="87:63"><name pos:start="87:13" pos:end="87:15">MAX</name><argument_list pos:start="87:16" pos:end="87:63">(<argument pos:start="87:17" pos:end="87:45"><expr pos:start="87:17" pos:end="87:45"><name pos:start="87:17" pos:end="87:45"><name pos:start="87:17" pos:end="87:18">bs</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:22">bl</name><operator pos:start="87:23" pos:end="87:23">.</operator><name pos:start="87:24" pos:end="87:45">write_zeroes_alignment</name></name></expr></argument>, <argument pos:start="87:48" pos:end="87:62"><expr pos:start="87:48" pos:end="87:62"><name pos:start="87:48" pos:end="87:62">cluster_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="91:5" pos:end="99:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:27">(<expr pos:start="91:9" pos:end="91:26"><name pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:22">num_extents</name></name> <operator pos:start="91:24" pos:end="91:24">&gt;</operator> <literal type="number" pos:start="91:26" pos:end="91:26">1</literal></expr>)</condition> <block pos:start="91:29" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:74">

        <expr_stmt pos:start="93:9" pos:end="93:74"><expr pos:start="93:9" pos:end="93:73"><name pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:14">extent</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:26">end_sector</name></name> <operator pos:start="93:28" pos:end="93:28">=</operator> <operator pos:start="93:30" pos:end="93:30">(</operator><operator pos:start="93:31" pos:end="93:31">*</operator><operator pos:start="93:32" pos:end="93:32">(</operator><name pos:start="93:33" pos:end="93:38">extent</name> <operator pos:start="93:40" pos:end="93:40">-</operator> <literal type="number" pos:start="93:42" pos:end="93:42">1</literal><operator pos:start="93:43" pos:end="93:43">)</operator><operator pos:start="93:44" pos:end="93:44">)</operator><operator pos:start="93:45" pos:end="93:45">.</operator><name pos:start="93:46" pos:end="93:55">end_sector</name> <operator pos:start="93:57" pos:end="93:57">+</operator> <name pos:start="93:59" pos:end="93:73"><name pos:start="93:59" pos:end="93:64">extent</name><operator pos:start="93:65" pos:end="93:66">-&gt;</operator><name pos:start="93:67" pos:end="93:73">sectors</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="99:5">else <block pos:start="95:12" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:45">

        <expr_stmt pos:start="97:9" pos:end="97:45"><expr pos:start="97:9" pos:end="97:44"><name pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:14">extent</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:26">end_sector</name></name> <operator pos:start="97:28" pos:end="97:28">=</operator> <name pos:start="97:30" pos:end="97:44"><name pos:start="97:30" pos:end="97:35">extent</name><operator pos:start="97:36" pos:end="97:37">-&gt;</operator><name pos:start="97:38" pos:end="97:44">sectors</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:43"><expr pos:start="101:5" pos:end="101:42"><name pos:start="101:5" pos:end="101:21"><name pos:start="101:5" pos:end="101:6">bs</name><operator pos:start="101:7" pos:end="101:8">-&gt;</operator><name pos:start="101:9" pos:end="101:21">total_sectors</name></name> <operator pos:start="101:23" pos:end="101:23">=</operator> <name pos:start="101:25" pos:end="101:42"><name pos:start="101:25" pos:end="101:30">extent</name><operator pos:start="101:31" pos:end="101:32">-&gt;</operator><name pos:start="101:33" pos:end="101:42">end_sector</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="107:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:19">(<expr pos:start="103:9" pos:end="103:18"><name pos:start="103:9" pos:end="103:18">new_extent</name></expr>)</condition> <block pos:start="103:21" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:29">

        <expr_stmt pos:start="105:9" pos:end="105:29"><expr pos:start="105:9" pos:end="105:28"><operator pos:start="105:9" pos:end="105:9">*</operator><name pos:start="105:10" pos:end="105:19">new_extent</name> <operator pos:start="105:21" pos:end="105:21">=</operator> <name pos:start="105:23" pos:end="105:28">extent</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="109:5" pos:end="109:13">return <expr pos:start="109:12" pos:end="109:12"><literal type="number" pos:start="109:12" pos:end="109:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
