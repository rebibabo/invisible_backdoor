<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21203.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:35">tcg_out_tlb_load</name><parameter_list pos:start="1:36" pos:end="5:73">(<parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:46">TCGContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:57">TCGReg</name></type> <name pos:start="1:59" pos:end="1:64">addrlo</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:79"><decl pos:start="1:67" pos:end="1:79"><type pos:start="1:67" pos:end="1:79"><name pos:start="1:67" pos:end="1:72">TCGReg</name></type> <name pos:start="1:74" pos:end="1:79">addrhi</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:49"><decl pos:start="3:37" pos:end="3:49"><type pos:start="3:37" pos:end="3:49"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:49">mem_index</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:63"><decl pos:start="3:52" pos:end="3:63"><type pos:start="3:52" pos:end="3:63"><name pos:start="3:52" pos:end="3:59">TCGMemOp</name></type> <name pos:start="3:61" pos:end="3:63">opc</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:61"><decl pos:start="5:37" pos:end="5:61"><type pos:start="5:37" pos:end="5:61"><name pos:start="5:37" pos:end="5:49">tcg_insn_unit</name> <modifier pos:start="5:51" pos:end="5:51">*</modifier><modifier pos:start="5:52" pos:end="5:52">*</modifier></type><name pos:start="5:53" pos:end="5:61">label_ptr</name></decl></parameter>, <parameter pos:start="5:64" pos:end="5:72"><decl pos:start="5:64" pos:end="5:72"><type pos:start="5:64" pos:end="5:72"><name pos:start="5:64" pos:end="5:66">int</name></type> <name pos:start="5:68" pos:end="5:72">which</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="157:1">{<block_content pos:start="9:5" pos:end="155:64">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:16">TCGReg</name></type> <name pos:start="9:18" pos:end="9:19">r0</name> <init pos:start="9:21" pos:end="9:32">= <expr pos:start="9:23" pos:end="9:32"><name pos:start="9:23" pos:end="9:32">TCG_REG_L0</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:16">TCGReg</name></type> <name pos:start="11:18" pos:end="11:19">r1</name> <init pos:start="11:21" pos:end="11:32">= <expr pos:start="11:23" pos:end="11:32"><name pos:start="11:23" pos:end="11:32">TCG_REG_L1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">TCGType</name></type> <name pos:start="13:13" pos:end="13:17">ttype</name> <init pos:start="13:19" pos:end="13:32">= <expr pos:start="13:21" pos:end="13:32"><name pos:start="13:21" pos:end="13:32">TCG_TYPE_I32</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">TCGType</name></type> <name pos:start="15:13" pos:end="15:19">tlbtype</name> <init pos:start="15:21" pos:end="15:34">= <expr pos:start="15:23" pos:end="15:34"><name pos:start="15:23" pos:end="15:34">TCG_TYPE_I32</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">trexw</name> <init pos:start="17:15" pos:end="17:17">= <expr pos:start="17:17" pos:end="17:17"><literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr></init></decl>, <decl pos:start="17:20" pos:end="17:28"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:20" pos:end="17:24">hrexw</name> <init pos:start="17:26" pos:end="17:28">= <expr pos:start="17:28" pos:end="17:28"><literal type="number" pos:start="17:28" pos:end="17:28">0</literal></expr></init></decl>, <decl pos:start="17:31" pos:end="17:41"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:31" pos:end="17:37">tlbrexw</name> <init pos:start="17:39" pos:end="17:41">= <expr pos:start="17:41" pos:end="17:41"><literal type="number" pos:start="17:41" pos:end="17:41">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:43"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">s_mask</name> <init pos:start="19:16" pos:end="19:43">= <expr pos:start="19:18" pos:end="19:43"><operator pos:start="19:18" pos:end="19:18">(</operator><literal type="number" pos:start="19:19" pos:end="19:19">1</literal> <operator pos:start="19:21" pos:end="19:22">&lt;&lt;</operator> <operator pos:start="19:24" pos:end="19:24">(</operator><name pos:start="19:25" pos:end="19:27">opc</name> <operator pos:start="19:29" pos:end="19:29">&amp;</operator> <name pos:start="19:31" pos:end="19:37">MO_SIZE</name><operator pos:start="19:38" pos:end="19:38">)</operator><operator pos:start="19:39" pos:end="19:39">)</operator> <operator pos:start="19:41" pos:end="19:41">-</operator> <literal type="number" pos:start="19:43" pos:end="19:43">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:63"><decl pos:start="21:5" pos:end="21:62"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:16">aligned</name> <init pos:start="21:18" pos:end="21:62">= <expr pos:start="21:20" pos:end="21:62"><operator pos:start="21:20" pos:end="21:20">(</operator><name pos:start="21:21" pos:end="21:23">opc</name> <operator pos:start="21:25" pos:end="21:25">&amp;</operator> <name pos:start="21:27" pos:end="21:34">MO_AMASK</name><operator pos:start="21:35" pos:end="21:35">)</operator> <operator pos:start="21:37" pos:end="21:38">==</operator> <name pos:start="21:40" pos:end="21:47">MO_ALIGN</name> <operator pos:start="21:49" pos:end="21:50">||</operator> <name pos:start="21:52" pos:end="21:57">s_mask</name> <operator pos:start="21:59" pos:end="21:60">==</operator> <literal type="number" pos:start="21:62" pos:end="21:62">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="49:5"><if pos:start="25:5" pos:end="49:5">if <condition pos:start="25:8" pos:end="25:34">(<expr pos:start="25:9" pos:end="25:33"><name pos:start="25:9" pos:end="25:27">TCG_TARGET_REG_BITS</name> <operator pos:start="25:29" pos:end="25:30">==</operator> <literal type="number" pos:start="25:32" pos:end="25:33">64</literal></expr>)</condition> <block pos:start="25:36" pos:end="49:5">{<block_content pos:start="27:9" pos:end="47:9">

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:35">(<expr pos:start="27:13" pos:end="27:34"><name pos:start="27:13" pos:end="27:28">TARGET_LONG_BITS</name> <operator pos:start="27:30" pos:end="27:31">==</operator> <literal type="number" pos:start="27:33" pos:end="27:34">64</literal></expr>)</condition> <block pos:start="27:37" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:27">

            <expr_stmt pos:start="29:13" pos:end="29:33"><expr pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:17">ttype</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <name pos:start="29:21" pos:end="29:32">TCG_TYPE_I64</name></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:27"><expr pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:17">trexw</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:26">P_REXW</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="35:9" pos:end="47:9"><if pos:start="35:9" pos:end="47:9">if <condition pos:start="35:12" pos:end="35:41">(<expr pos:start="35:13" pos:end="35:40"><name pos:start="35:13" pos:end="35:24">TCG_TYPE_PTR</name> <operator pos:start="35:26" pos:end="35:27">==</operator> <name pos:start="35:29" pos:end="35:40">TCG_TYPE_I64</name></expr>)</condition> <block pos:start="35:43" pos:end="47:9">{<block_content pos:start="37:13" pos:end="45:13">

            <expr_stmt pos:start="37:13" pos:end="37:27"><expr pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:17">hrexw</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:26">P_REXW</name></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="45:13"><if pos:start="39:13" pos:end="45:13">if <condition pos:start="39:16" pos:end="39:53">(<expr pos:start="39:17" pos:end="39:52"><name pos:start="39:17" pos:end="39:32">TARGET_PAGE_BITS</name> <operator pos:start="39:34" pos:end="39:34">+</operator> <name pos:start="39:36" pos:end="39:47">CPU_TLB_BITS</name> <operator pos:start="39:49" pos:end="39:49">&gt;</operator> <literal type="number" pos:start="39:51" pos:end="39:52">32</literal></expr>)</condition> <block pos:start="39:55" pos:end="45:13">{<block_content pos:start="41:17" pos:end="43:33">

                <expr_stmt pos:start="41:17" pos:end="41:39"><expr pos:start="41:17" pos:end="41:38"><name pos:start="41:17" pos:end="41:23">tlbtype</name> <operator pos:start="41:25" pos:end="41:25">=</operator> <name pos:start="41:27" pos:end="41:38">TCG_TYPE_I64</name></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:33"><expr pos:start="43:17" pos:end="43:32"><name pos:start="43:17" pos:end="43:23">tlbrexw</name> <operator pos:start="43:25" pos:end="43:25">=</operator> <name pos:start="43:27" pos:end="43:32">P_REXW</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:40"><expr pos:start="53:5" pos:end="53:39"><call pos:start="53:5" pos:end="53:39"><name pos:start="53:5" pos:end="53:15">tcg_out_mov</name><argument_list pos:start="53:16" pos:end="53:39">(<argument pos:start="53:17" pos:end="53:17"><expr pos:start="53:17" pos:end="53:17"><name pos:start="53:17" pos:end="53:17">s</name></expr></argument>, <argument pos:start="53:20" pos:end="53:26"><expr pos:start="53:20" pos:end="53:26"><name pos:start="53:20" pos:end="53:26">tlbtype</name></expr></argument>, <argument pos:start="53:29" pos:end="53:30"><expr pos:start="53:29" pos:end="53:30"><name pos:start="53:29" pos:end="53:30">r0</name></expr></argument>, <argument pos:start="53:33" pos:end="53:38"><expr pos:start="53:33" pos:end="53:38"><name pos:start="53:33" pos:end="53:38">addrlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="67:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:16">(<expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:15">aligned</name></expr>)</condition> <block pos:start="55:18" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:42">

        <expr_stmt pos:start="57:9" pos:end="57:42"><expr pos:start="57:9" pos:end="57:41"><call pos:start="57:9" pos:end="57:41"><name pos:start="57:9" pos:end="57:19">tcg_out_mov</name><argument_list pos:start="57:20" pos:end="57:41">(<argument pos:start="57:21" pos:end="57:21"><expr pos:start="57:21" pos:end="57:21"><name pos:start="57:21" pos:end="57:21">s</name></expr></argument>, <argument pos:start="57:24" pos:end="57:28"><expr pos:start="57:24" pos:end="57:28"><name pos:start="57:24" pos:end="57:28">ttype</name></expr></argument>, <argument pos:start="57:31" pos:end="57:32"><expr pos:start="57:31" pos:end="57:32"><name pos:start="57:31" pos:end="57:32">r1</name></expr></argument>, <argument pos:start="57:35" pos:end="57:40"><expr pos:start="57:35" pos:end="57:40"><name pos:start="57:35" pos:end="57:40">addrlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="67:5">else <block pos:start="59:12" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:69">

        <comment type="block" pos:start="61:9" pos:end="63:49">/* For unaligned access check that we don't cross pages using

           the page address of the last byte.  */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:69"><expr pos:start="65:9" pos:end="65:68"><call pos:start="65:9" pos:end="65:68"><name pos:start="65:9" pos:end="65:28">tcg_out_modrm_offset</name><argument_list pos:start="65:29" pos:end="65:68">(<argument pos:start="65:30" pos:end="65:30"><expr pos:start="65:30" pos:end="65:30"><name pos:start="65:30" pos:end="65:30">s</name></expr></argument>, <argument pos:start="65:33" pos:end="65:47"><expr pos:start="65:33" pos:end="65:47"><name pos:start="65:33" pos:end="65:39">OPC_LEA</name> <operator pos:start="65:41" pos:end="65:41">+</operator> <name pos:start="65:43" pos:end="65:47">trexw</name></expr></argument>, <argument pos:start="65:50" pos:end="65:51"><expr pos:start="65:50" pos:end="65:51"><name pos:start="65:50" pos:end="65:51">r1</name></expr></argument>, <argument pos:start="65:54" pos:end="65:59"><expr pos:start="65:54" pos:end="65:59"><name pos:start="65:54" pos:end="65:59">addrlo</name></expr></argument>, <argument pos:start="65:62" pos:end="65:67"><expr pos:start="65:62" pos:end="65:67"><name pos:start="65:62" pos:end="65:67">s_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="73:58"><expr pos:start="71:5" pos:end="73:57"><call pos:start="71:5" pos:end="73:57"><name pos:start="71:5" pos:end="71:18">tcg_out_shifti</name><argument_list pos:start="71:19" pos:end="73:57">(<argument pos:start="71:20" pos:end="71:20"><expr pos:start="71:20" pos:end="71:20"><name pos:start="71:20" pos:end="71:20">s</name></expr></argument>, <argument pos:start="71:23" pos:end="71:41"><expr pos:start="71:23" pos:end="71:41"><name pos:start="71:23" pos:end="71:31">SHIFT_SHR</name> <operator pos:start="71:33" pos:end="71:33">+</operator> <name pos:start="71:35" pos:end="71:41">tlbrexw</name></expr></argument>, <argument pos:start="71:44" pos:end="71:45"><expr pos:start="71:44" pos:end="71:45"><name pos:start="71:44" pos:end="71:45">r0</name></expr></argument>,

                   <argument pos:start="73:20" pos:end="73:56"><expr pos:start="73:20" pos:end="73:56"><name pos:start="73:20" pos:end="73:35">TARGET_PAGE_BITS</name> <operator pos:start="73:37" pos:end="73:37">-</operator> <name pos:start="73:39" pos:end="73:56">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="79:62"><expr pos:start="77:5" pos:end="79:61"><call pos:start="77:5" pos:end="79:61"><name pos:start="77:5" pos:end="77:15">tgen_arithi</name><argument_list pos:start="77:16" pos:end="79:61">(<argument pos:start="77:17" pos:end="77:17"><expr pos:start="77:17" pos:end="77:17"><name pos:start="77:17" pos:end="77:17">s</name></expr></argument>, <argument pos:start="77:20" pos:end="77:36"><expr pos:start="77:20" pos:end="77:36"><name pos:start="77:20" pos:end="77:28">ARITH_AND</name> <operator pos:start="77:30" pos:end="77:30">+</operator> <name pos:start="77:32" pos:end="77:36">trexw</name></expr></argument>, <argument pos:start="77:39" pos:end="77:40"><expr pos:start="77:39" pos:end="77:40"><name pos:start="77:39" pos:end="77:40">r1</name></expr></argument>,

                <argument pos:start="79:17" pos:end="79:57"><expr pos:start="79:17" pos:end="79:57"><name pos:start="79:17" pos:end="79:32">TARGET_PAGE_MASK</name> <operator pos:start="79:34" pos:end="79:34">|</operator> <operator pos:start="79:36" pos:end="79:36">(</operator><ternary pos:start="79:37" pos:end="79:56"><condition pos:start="79:37" pos:end="79:45"><expr pos:start="79:37" pos:end="79:43"><name pos:start="79:37" pos:end="79:43">aligned</name></expr> ?</condition><then pos:start="79:47" pos:end="79:52"> <expr pos:start="79:47" pos:end="79:52"><name pos:start="79:47" pos:end="79:52">s_mask</name></expr> </then><else pos:start="79:54" pos:end="79:56">: <expr pos:start="79:56" pos:end="79:56"><literal type="number" pos:start="79:56" pos:end="79:56">0</literal></expr></else></ternary><operator pos:start="79:57" pos:end="79:57">)</operator></expr></argument>, <argument pos:start="79:60" pos:end="79:60"><expr pos:start="79:60" pos:end="79:60"><literal type="number" pos:start="79:60" pos:end="79:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="83:61"><expr pos:start="81:5" pos:end="83:60"><call pos:start="81:5" pos:end="83:60"><name pos:start="81:5" pos:end="81:15">tgen_arithi</name><argument_list pos:start="81:16" pos:end="83:60">(<argument pos:start="81:17" pos:end="81:17"><expr pos:start="81:17" pos:end="81:17"><name pos:start="81:17" pos:end="81:17">s</name></expr></argument>, <argument pos:start="81:20" pos:end="81:38"><expr pos:start="81:20" pos:end="81:38"><name pos:start="81:20" pos:end="81:28">ARITH_AND</name> <operator pos:start="81:30" pos:end="81:30">+</operator> <name pos:start="81:32" pos:end="81:38">tlbrexw</name></expr></argument>, <argument pos:start="81:41" pos:end="81:42"><expr pos:start="81:41" pos:end="81:42"><name pos:start="81:41" pos:end="81:42">r0</name></expr></argument>,

                <argument pos:start="83:17" pos:end="83:56"><expr pos:start="83:17" pos:end="83:56"><operator pos:start="83:17" pos:end="83:17">(</operator><name pos:start="83:18" pos:end="83:29">CPU_TLB_SIZE</name> <operator pos:start="83:31" pos:end="83:31">-</operator> <literal type="number" pos:start="83:33" pos:end="83:33">1</literal><operator pos:start="83:34" pos:end="83:34">)</operator> <operator pos:start="83:36" pos:end="83:37">&lt;&lt;</operator> <name pos:start="83:39" pos:end="83:56">CPU_TLB_ENTRY_BITS</name></expr></argument>, <argument pos:start="83:59" pos:end="83:59"><expr pos:start="83:59" pos:end="83:59"><literal type="number" pos:start="83:59" pos:end="83:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="91:38"><expr pos:start="87:5" pos:end="91:37"><call pos:start="87:5" pos:end="91:37"><name pos:start="87:5" pos:end="87:28">tcg_out_modrm_sib_offset</name><argument_list pos:start="87:29" pos:end="91:37">(<argument pos:start="87:30" pos:end="87:30"><expr pos:start="87:30" pos:end="87:30"><name pos:start="87:30" pos:end="87:30">s</name></expr></argument>, <argument pos:start="87:33" pos:end="87:47"><expr pos:start="87:33" pos:end="87:47"><name pos:start="87:33" pos:end="87:39">OPC_LEA</name> <operator pos:start="87:41" pos:end="87:41">+</operator> <name pos:start="87:43" pos:end="87:47">hrexw</name></expr></argument>, <argument pos:start="87:50" pos:end="87:51"><expr pos:start="87:50" pos:end="87:51"><name pos:start="87:50" pos:end="87:51">r0</name></expr></argument>, <argument pos:start="87:54" pos:end="87:62"><expr pos:start="87:54" pos:end="87:62"><name pos:start="87:54" pos:end="87:62">TCG_AREG0</name></expr></argument>, <argument pos:start="87:65" pos:end="87:66"><expr pos:start="87:65" pos:end="87:66"><name pos:start="87:65" pos:end="87:66">r0</name></expr></argument>, <argument pos:start="87:69" pos:end="87:69"><expr pos:start="87:69" pos:end="87:69"><literal type="number" pos:start="87:69" pos:end="87:69">0</literal></expr></argument>,

                             <argument pos:start="89:30" pos:end="91:36"><expr pos:start="89:30" pos:end="91:36"><call pos:start="89:30" pos:end="89:76"><name pos:start="89:30" pos:end="89:37">offsetof</name><argument_list pos:start="89:38" pos:end="89:76">(<argument pos:start="89:39" pos:end="89:50"><expr pos:start="89:39" pos:end="89:50"><name pos:start="89:39" pos:end="89:50">CPUArchState</name></expr></argument>, <argument pos:start="89:53" pos:end="89:75"><expr pos:start="89:53" pos:end="89:75"><name pos:start="89:53" pos:end="89:75"><name pos:start="89:53" pos:end="89:61">tlb_table</name><index pos:start="89:62" pos:end="89:72">[<expr pos:start="89:63" pos:end="89:71"><name pos:start="89:63" pos:end="89:71">mem_index</name></expr>]</index><index pos:start="89:73" pos:end="89:75">[<expr pos:start="89:74" pos:end="89:74"><literal type="number" pos:start="89:74" pos:end="89:74">0</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                             <operator pos:start="91:30" pos:end="91:30">+</operator> <name pos:start="91:32" pos:end="91:36">which</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:23">/* cmp 0(r0), r1 */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:61"><expr pos:start="97:5" pos:end="97:60"><call pos:start="97:5" pos:end="97:60"><name pos:start="97:5" pos:end="97:24">tcg_out_modrm_offset</name><argument_list pos:start="97:25" pos:end="97:60">(<argument pos:start="97:26" pos:end="97:26"><expr pos:start="97:26" pos:end="97:26"><name pos:start="97:26" pos:end="97:26">s</name></expr></argument>, <argument pos:start="97:29" pos:end="97:48"><expr pos:start="97:29" pos:end="97:48"><name pos:start="97:29" pos:end="97:40">OPC_CMP_GvEv</name> <operator pos:start="97:42" pos:end="97:42">+</operator> <name pos:start="97:44" pos:end="97:48">trexw</name></expr></argument>, <argument pos:start="97:51" pos:end="97:52"><expr pos:start="97:51" pos:end="97:52"><name pos:start="97:51" pos:end="97:52">r1</name></expr></argument>, <argument pos:start="97:55" pos:end="97:56"><expr pos:start="97:55" pos:end="97:56"><name pos:start="97:55" pos:end="97:56">r0</name></expr></argument>, <argument pos:start="97:59" pos:end="97:59"><expr pos:start="97:59" pos:end="97:59"><literal type="number" pos:start="97:59" pos:end="97:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="111:68">/* Prepare for both the fast path add of the tlb addend, and the slow

       path function argument setup.  There are two cases worth note:

       For 32-bit guest and x86_64 host, MOVL zero-extends the guest address

       before the fastpath ADDQ below.  For 64-bit guest and x32 host, MOVQ

       copies the entire guest address for the slow path, while truncation

       for the 32-bit host happens with the fastpath ADDL below.  */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:38"><expr pos:start="113:5" pos:end="113:37"><call pos:start="113:5" pos:end="113:37"><name pos:start="113:5" pos:end="113:15">tcg_out_mov</name><argument_list pos:start="113:16" pos:end="113:37">(<argument pos:start="113:17" pos:end="113:17"><expr pos:start="113:17" pos:end="113:17"><name pos:start="113:17" pos:end="113:17">s</name></expr></argument>, <argument pos:start="113:20" pos:end="113:24"><expr pos:start="113:20" pos:end="113:24"><name pos:start="113:20" pos:end="113:24">ttype</name></expr></argument>, <argument pos:start="113:27" pos:end="113:28"><expr pos:start="113:27" pos:end="113:28"><name pos:start="113:27" pos:end="113:28">r1</name></expr></argument>, <argument pos:start="113:31" pos:end="113:36"><expr pos:start="113:31" pos:end="113:36"><name pos:start="113:31" pos:end="113:36">addrlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="117:5" pos:end="117:23">/* jne slow_path */</comment>

    <expr_stmt pos:start="119:5" pos:end="119:52"><expr pos:start="119:5" pos:end="119:51"><call pos:start="119:5" pos:end="119:51"><name pos:start="119:5" pos:end="119:15">tcg_out_opc</name><argument_list pos:start="119:16" pos:end="119:51">(<argument pos:start="119:17" pos:end="119:17"><expr pos:start="119:17" pos:end="119:17"><name pos:start="119:17" pos:end="119:17">s</name></expr></argument>, <argument pos:start="119:20" pos:end="119:41"><expr pos:start="119:20" pos:end="119:41"><name pos:start="119:20" pos:end="119:31">OPC_JCC_long</name> <operator pos:start="119:33" pos:end="119:33">+</operator> <name pos:start="119:35" pos:end="119:41">JCC_JNE</name></expr></argument>, <argument pos:start="119:44" pos:end="119:44"><expr pos:start="119:44" pos:end="119:44"><literal type="number" pos:start="119:44" pos:end="119:44">0</literal></expr></argument>, <argument pos:start="119:47" pos:end="119:47"><expr pos:start="119:47" pos:end="119:47"><literal type="number" pos:start="119:47" pos:end="119:47">0</literal></expr></argument>, <argument pos:start="119:50" pos:end="119:50"><expr pos:start="119:50" pos:end="119:50"><literal type="number" pos:start="119:50" pos:end="119:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:31"><expr pos:start="121:5" pos:end="121:30"><name pos:start="121:5" pos:end="121:16"><name pos:start="121:5" pos:end="121:13">label_ptr</name><index pos:start="121:14" pos:end="121:16">[<expr pos:start="121:15" pos:end="121:15"><literal type="number" pos:start="121:15" pos:end="121:15">0</literal></expr>]</index></name> <operator pos:start="121:18" pos:end="121:18">=</operator> <name pos:start="121:20" pos:end="121:30"><name pos:start="121:20" pos:end="121:20">s</name><operator pos:start="121:21" pos:end="121:22">-&gt;</operator><name pos:start="121:23" pos:end="121:30">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:21"><expr pos:start="123:5" pos:end="123:20"><name pos:start="123:5" pos:end="123:15"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:15">code_ptr</name></name> <operator pos:start="123:17" pos:end="123:18">+=</operator> <literal type="number" pos:start="123:20" pos:end="123:20">4</literal></expr>;</expr_stmt>



    <if_stmt pos:start="127:5" pos:end="143:5"><if pos:start="127:5" pos:end="143:5">if <condition pos:start="127:8" pos:end="127:47">(<expr pos:start="127:9" pos:end="127:46"><name pos:start="127:9" pos:end="127:24">TARGET_LONG_BITS</name> <operator pos:start="127:26" pos:end="127:26">&gt;</operator> <name pos:start="127:28" pos:end="127:46">TCG_TARGET_REG_BITS</name></expr>)</condition> <block pos:start="127:49" pos:end="143:5">{<block_content pos:start="131:9" pos:end="141:25">

        <comment type="block" pos:start="129:9" pos:end="129:31">/* cmp 4(r0), addrhi */</comment>

        <expr_stmt pos:start="131:9" pos:end="131:61"><expr pos:start="131:9" pos:end="131:60"><call pos:start="131:9" pos:end="131:60"><name pos:start="131:9" pos:end="131:28">tcg_out_modrm_offset</name><argument_list pos:start="131:29" pos:end="131:60">(<argument pos:start="131:30" pos:end="131:30"><expr pos:start="131:30" pos:end="131:30"><name pos:start="131:30" pos:end="131:30">s</name></expr></argument>, <argument pos:start="131:33" pos:end="131:44"><expr pos:start="131:33" pos:end="131:44"><name pos:start="131:33" pos:end="131:44">OPC_CMP_GvEv</name></expr></argument>, <argument pos:start="131:47" pos:end="131:52"><expr pos:start="131:47" pos:end="131:52"><name pos:start="131:47" pos:end="131:52">addrhi</name></expr></argument>, <argument pos:start="131:55" pos:end="131:56"><expr pos:start="131:55" pos:end="131:56"><name pos:start="131:55" pos:end="131:56">r0</name></expr></argument>, <argument pos:start="131:59" pos:end="131:59"><expr pos:start="131:59" pos:end="131:59"><literal type="number" pos:start="131:59" pos:end="131:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="135:9" pos:end="135:27">/* jne slow_path */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:56"><expr pos:start="137:9" pos:end="137:55"><call pos:start="137:9" pos:end="137:55"><name pos:start="137:9" pos:end="137:19">tcg_out_opc</name><argument_list pos:start="137:20" pos:end="137:55">(<argument pos:start="137:21" pos:end="137:21"><expr pos:start="137:21" pos:end="137:21"><name pos:start="137:21" pos:end="137:21">s</name></expr></argument>, <argument pos:start="137:24" pos:end="137:45"><expr pos:start="137:24" pos:end="137:45"><name pos:start="137:24" pos:end="137:35">OPC_JCC_long</name> <operator pos:start="137:37" pos:end="137:37">+</operator> <name pos:start="137:39" pos:end="137:45">JCC_JNE</name></expr></argument>, <argument pos:start="137:48" pos:end="137:48"><expr pos:start="137:48" pos:end="137:48"><literal type="number" pos:start="137:48" pos:end="137:48">0</literal></expr></argument>, <argument pos:start="137:51" pos:end="137:51"><expr pos:start="137:51" pos:end="137:51"><literal type="number" pos:start="137:51" pos:end="137:51">0</literal></expr></argument>, <argument pos:start="137:54" pos:end="137:54"><expr pos:start="137:54" pos:end="137:54"><literal type="number" pos:start="137:54" pos:end="137:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:35"><expr pos:start="139:9" pos:end="139:34"><name pos:start="139:9" pos:end="139:20"><name pos:start="139:9" pos:end="139:17">label_ptr</name><index pos:start="139:18" pos:end="139:20">[<expr pos:start="139:19" pos:end="139:19"><literal type="number" pos:start="139:19" pos:end="139:19">1</literal></expr>]</index></name> <operator pos:start="139:22" pos:end="139:22">=</operator> <name pos:start="139:24" pos:end="139:34"><name pos:start="139:24" pos:end="139:24">s</name><operator pos:start="139:25" pos:end="139:26">-&gt;</operator><name pos:start="139:27" pos:end="139:34">code_ptr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:25"><expr pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:19"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:19">code_ptr</name></name> <operator pos:start="141:21" pos:end="141:22">+=</operator> <literal type="number" pos:start="141:24" pos:end="141:24">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="147:5" pos:end="147:19">/* TLB Hit.  */</comment>



    <comment type="block" pos:start="151:5" pos:end="151:28">/* add addend(r0), r1 */</comment>

    <expr_stmt pos:start="153:5" pos:end="155:64"><expr pos:start="153:5" pos:end="155:63"><call pos:start="153:5" pos:end="155:63"><name pos:start="153:5" pos:end="153:24">tcg_out_modrm_offset</name><argument_list pos:start="153:25" pos:end="155:63">(<argument pos:start="153:26" pos:end="153:26"><expr pos:start="153:26" pos:end="153:26"><name pos:start="153:26" pos:end="153:26">s</name></expr></argument>, <argument pos:start="153:29" pos:end="153:48"><expr pos:start="153:29" pos:end="153:48"><name pos:start="153:29" pos:end="153:40">OPC_ADD_GvEv</name> <operator pos:start="153:42" pos:end="153:42">+</operator> <name pos:start="153:44" pos:end="153:48">hrexw</name></expr></argument>, <argument pos:start="153:51" pos:end="153:52"><expr pos:start="153:51" pos:end="153:52"><name pos:start="153:51" pos:end="153:52">r1</name></expr></argument>, <argument pos:start="153:55" pos:end="153:56"><expr pos:start="153:55" pos:end="153:56"><name pos:start="153:55" pos:end="153:56">r0</name></expr></argument>,

                         <argument pos:start="155:26" pos:end="155:62"><expr pos:start="155:26" pos:end="155:62"><call pos:start="155:26" pos:end="155:54"><name pos:start="155:26" pos:end="155:33">offsetof</name><argument_list pos:start="155:34" pos:end="155:54">(<argument pos:start="155:35" pos:end="155:45"><expr pos:start="155:35" pos:end="155:45"><name pos:start="155:35" pos:end="155:45">CPUTLBEntry</name></expr></argument>, <argument pos:start="155:48" pos:end="155:53"><expr pos:start="155:48" pos:end="155:53"><name pos:start="155:48" pos:end="155:53">addend</name></expr></argument>)</argument_list></call> <operator pos:start="155:56" pos:end="155:56">-</operator> <name pos:start="155:58" pos:end="155:62">which</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
