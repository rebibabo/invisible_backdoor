<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21741.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">test_abstract_interfaces</name><parameter_list pos:start="1:37" pos:end="1:42">(<parameter pos:start="1:38" pos:end="1:41"><decl pos:start="1:38" pos:end="1:41"><type pos:start="1:38" pos:end="1:41"><name pos:start="1:38" pos:end="1:41">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:16">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">QList</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:20">all_types</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">QList</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">obj_types</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">QListEntry</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:18">ae</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><call pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:15">qtest_start</name><argument_list pos:start="13:16" pos:end="13:28">(<argument pos:start="13:17" pos:end="13:27"><expr pos:start="13:17" pos:end="13:27"><name pos:start="13:17" pos:end="13:27">common_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="15:5" pos:end="27:7">/* qom-list-types implements=interface would return any type

     * that implements _any_ interface (not just interface types),

     * so use a trick to find the interface type names:

     * - list all object types

     * - list all types, and look for items that are not

     *   on the first list

     */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:44"><expr pos:start="29:5" pos:end="29:43"><name pos:start="29:5" pos:end="29:13">all_types</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:43"><name pos:start="29:17" pos:end="29:30">qom_list_types</name><argument_list pos:start="29:31" pos:end="29:43">(<argument pos:start="29:32" pos:end="29:35"><expr pos:start="29:32" pos:end="29:35"><name pos:start="29:32" pos:end="29:35">NULL</name></expr></argument>, <argument pos:start="29:38" pos:end="29:42"><expr pos:start="29:38" pos:end="29:42"><name pos:start="29:38" pos:end="29:42">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:48"><expr pos:start="31:5" pos:end="31:47"><name pos:start="31:5" pos:end="31:13">obj_types</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <call pos:start="31:17" pos:end="31:47"><name pos:start="31:17" pos:end="31:30">qom_list_types</name><argument_list pos:start="31:31" pos:end="31:47">(<argument pos:start="31:32" pos:end="31:39"><expr pos:start="31:32" pos:end="31:39"><literal type="string" pos:start="31:32" pos:end="31:39">"object"</literal></expr></argument>, <argument pos:start="31:42" pos:end="31:46"><expr pos:start="31:42" pos:end="31:46"><name pos:start="31:42" pos:end="31:46">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:23">QLIST_FOREACH_ENTRY</name><argument_list pos:start="35:24" pos:end="35:38">(<argument pos:start="35:25" pos:end="35:33">all_types</argument>, <argument pos:start="35:36" pos:end="35:37">ae</argument>)</argument_list></macro> <block pos:start="35:40" pos:end="71:5">{<block_content pos:start="37:9" pos:end="69:42">

        <decl_stmt pos:start="37:9" pos:end="37:58"><decl pos:start="37:9" pos:end="37:57"><type pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:13">QDict</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:17">at</name> <init pos:start="37:19" pos:end="37:57">= <expr pos:start="37:21" pos:end="37:57"><call pos:start="37:21" pos:end="37:57"><name pos:start="37:21" pos:end="37:36">qobject_to_qdict</name><argument_list pos:start="37:37" pos:end="37:57">(<argument pos:start="37:38" pos:end="37:56"><expr pos:start="37:38" pos:end="37:56"><call pos:start="37:38" pos:end="37:56"><name pos:start="37:38" pos:end="37:52">qlist_entry_obj</name><argument_list pos:start="37:53" pos:end="37:56">(<argument pos:start="37:54" pos:end="37:55"><expr pos:start="37:54" pos:end="37:55"><name pos:start="37:54" pos:end="37:55">ae</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:54"><decl pos:start="39:9" pos:end="39:53"><type pos:start="39:9" pos:end="39:20"><specifier pos:start="39:9" pos:end="39:13">const</specifier> <name pos:start="39:15" pos:end="39:18">char</name> <modifier pos:start="39:20" pos:end="39:20">*</modifier></type><name pos:start="39:21" pos:end="39:25">aname</name> <init pos:start="39:27" pos:end="39:53">= <expr pos:start="39:29" pos:end="39:53"><call pos:start="39:29" pos:end="39:53"><name pos:start="39:29" pos:end="39:41">qdict_get_str</name><argument_list pos:start="39:42" pos:end="39:53">(<argument pos:start="39:43" pos:end="39:44"><expr pos:start="39:43" pos:end="39:44"><name pos:start="39:43" pos:end="39:44">at</name></expr></argument>, <argument pos:start="39:47" pos:end="39:52"><expr pos:start="39:47" pos:end="39:52"><literal type="string" pos:start="39:47" pos:end="39:52">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:23"><decl pos:start="41:9" pos:end="41:22"><type pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:18">QListEntry</name> <modifier pos:start="41:20" pos:end="41:20">*</modifier></type><name pos:start="41:21" pos:end="41:22">oe</name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:33"><decl pos:start="43:9" pos:end="43:32"><type pos:start="43:9" pos:end="43:20"><specifier pos:start="43:9" pos:end="43:13">const</specifier> <name pos:start="43:15" pos:end="43:18">char</name> <modifier pos:start="43:20" pos:end="43:20">*</modifier></type><name pos:start="43:21" pos:end="43:25">found</name> <init pos:start="43:27" pos:end="43:32">= <expr pos:start="43:29" pos:end="43:32"><name pos:start="43:29" pos:end="43:32">NULL</name></expr></init></decl>;</decl_stmt>



        <macro pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:27">QLIST_FOREACH_ENTRY</name><argument_list pos:start="47:28" pos:end="47:42">(<argument pos:start="47:29" pos:end="47:37">obj_types</argument>, <argument pos:start="47:40" pos:end="47:41">oe</argument>)</argument_list></macro> <block pos:start="47:44" pos:end="61:9">{<block_content pos:start="49:13" pos:end="59:13">

            <decl_stmt pos:start="49:13" pos:end="49:62"><decl pos:start="49:13" pos:end="49:61"><type pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:17">QDict</name> <modifier pos:start="49:19" pos:end="49:19">*</modifier></type><name pos:start="49:20" pos:end="49:21">ot</name> <init pos:start="49:23" pos:end="49:61">= <expr pos:start="49:25" pos:end="49:61"><call pos:start="49:25" pos:end="49:61"><name pos:start="49:25" pos:end="49:40">qobject_to_qdict</name><argument_list pos:start="49:41" pos:end="49:61">(<argument pos:start="49:42" pos:end="49:60"><expr pos:start="49:42" pos:end="49:60"><call pos:start="49:42" pos:end="49:60"><name pos:start="49:42" pos:end="49:56">qlist_entry_obj</name><argument_list pos:start="49:57" pos:end="49:60">(<argument pos:start="49:58" pos:end="49:59"><expr pos:start="49:58" pos:end="49:59"><name pos:start="49:58" pos:end="49:59">oe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="51:13" pos:end="51:58"><decl pos:start="51:13" pos:end="51:57"><type pos:start="51:13" pos:end="51:24"><specifier pos:start="51:13" pos:end="51:17">const</specifier> <name pos:start="51:19" pos:end="51:22">char</name> <modifier pos:start="51:24" pos:end="51:24">*</modifier></type><name pos:start="51:25" pos:end="51:29">oname</name> <init pos:start="51:31" pos:end="51:57">= <expr pos:start="51:33" pos:end="51:57"><call pos:start="51:33" pos:end="51:57"><name pos:start="51:33" pos:end="51:45">qdict_get_str</name><argument_list pos:start="51:46" pos:end="51:57">(<argument pos:start="51:47" pos:end="51:48"><expr pos:start="51:47" pos:end="51:48"><name pos:start="51:47" pos:end="51:48">ot</name></expr></argument>, <argument pos:start="51:51" pos:end="51:56"><expr pos:start="51:51" pos:end="51:56"><literal type="string" pos:start="51:51" pos:end="51:56">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="53:13" pos:end="59:13"><if pos:start="53:13" pos:end="59:13">if <condition pos:start="53:16" pos:end="53:38">(<expr pos:start="53:17" pos:end="53:37"><operator pos:start="53:17" pos:end="53:17">!</operator><call pos:start="53:18" pos:end="53:37"><name pos:start="53:18" pos:end="53:23">strcmp</name><argument_list pos:start="53:24" pos:end="53:37">(<argument pos:start="53:25" pos:end="53:29"><expr pos:start="53:25" pos:end="53:29"><name pos:start="53:25" pos:end="53:29">aname</name></expr></argument>, <argument pos:start="53:32" pos:end="53:36"><expr pos:start="53:32" pos:end="53:36"><name pos:start="53:32" pos:end="53:36">oname</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:40" pos:end="59:13">{<block_content pos:start="55:17" pos:end="57:22">

                <expr_stmt pos:start="55:17" pos:end="55:30"><expr pos:start="55:17" pos:end="55:29"><name pos:start="55:17" pos:end="55:21">found</name> <operator pos:start="55:23" pos:end="55:23">=</operator> <name pos:start="55:25" pos:end="55:29">oname</name></expr>;</expr_stmt>

                <break pos:start="57:17" pos:end="57:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>



        <comment type="block" pos:start="65:9" pos:end="67:43">/* Using g_assert_cmpstr() will give more useful failure

         * messages than g_assert(found) */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:42"><expr pos:start="69:9" pos:end="69:41"><call pos:start="69:9" pos:end="69:41"><name pos:start="69:9" pos:end="69:23">g_assert_cmpstr</name><argument_list pos:start="69:24" pos:end="69:41">(<argument pos:start="69:25" pos:end="69:29"><expr pos:start="69:25" pos:end="69:29"><name pos:start="69:25" pos:end="69:29">aname</name></expr></argument>, <argument pos:start="69:32" pos:end="69:33"><expr pos:start="69:32" pos:end="69:33"><operator pos:start="69:32" pos:end="69:33">==</operator></expr></argument>, <argument pos:start="69:36" pos:end="69:40"><expr pos:start="69:36" pos:end="69:40"><name pos:start="69:36" pos:end="69:40">found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="75:5" pos:end="75:23"><expr pos:start="75:5" pos:end="75:22"><call pos:start="75:5" pos:end="75:22"><name pos:start="75:5" pos:end="75:11">QDECREF</name><argument_list pos:start="75:12" pos:end="75:22">(<argument pos:start="75:13" pos:end="75:21"><expr pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:21">all_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:23"><expr pos:start="77:5" pos:end="77:22"><call pos:start="77:5" pos:end="77:22"><name pos:start="77:5" pos:end="77:11">QDECREF</name><argument_list pos:start="77:12" pos:end="77:22">(<argument pos:start="77:13" pos:end="77:21"><expr pos:start="77:13" pos:end="77:21"><name pos:start="77:13" pos:end="77:21">obj_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:16"><expr pos:start="79:5" pos:end="79:15"><call pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:13">qtest_end</name><argument_list pos:start="79:14" pos:end="79:15">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
