<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6925.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:11">HELPER</name></type>(<name pos:start="1:13" pos:end="1:31">access_check_cp_reg</name>)<parameter_list pos:start="1:33" pos:end="1:80">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:44">CPUARMState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">env</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:60"><decl pos:start="1:52" pos:end="1:60"><type pos:start="1:52" pos:end="1:60"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">rip</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:79"><decl pos:start="1:63" pos:end="1:79"><type pos:start="1:63" pos:end="1:79"><name pos:start="1:63" pos:end="1:70">uint32_t</name></type> <name pos:start="1:72" pos:end="1:79">syndrome</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:57">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:24"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:22">ARMCPRegInfo</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:26">ri</name> <init pos:start="5:28" pos:end="5:32">= <expr pos:start="5:30" pos:end="5:32"><name pos:start="5:30" pos:end="5:32">rip</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">target_el</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="13:57">(<expr pos:start="11:9" pos:end="13:56"><call pos:start="11:9" pos:end="11:44"><name pos:start="11:9" pos:end="11:19">arm_feature</name><argument_list pos:start="11:20" pos:end="11:44">(<argument pos:start="11:21" pos:end="11:23"><expr pos:start="11:21" pos:end="11:23"><name pos:start="11:21" pos:end="11:23">env</name></expr></argument>, <argument pos:start="11:26" pos:end="11:43"><expr pos:start="11:26" pos:end="11:43"><name pos:start="11:26" pos:end="11:43">ARM_FEATURE_XSCALE</name></expr></argument>)</argument_list></call> <operator pos:start="11:46" pos:end="11:47">&amp;&amp;</operator> <name pos:start="11:49" pos:end="11:54"><name pos:start="11:49" pos:end="11:50">ri</name><operator pos:start="11:51" pos:end="11:52">-&gt;</operator><name pos:start="11:53" pos:end="11:54">cp</name></name> <operator pos:start="11:56" pos:end="11:56">&lt;</operator> <literal type="number" pos:start="11:58" pos:end="11:59">14</literal>

        <operator pos:start="13:9" pos:end="13:10">&amp;&amp;</operator> <call pos:start="13:12" pos:end="13:51"><name pos:start="13:12" pos:end="13:20">extract32</name><argument_list pos:start="13:21" pos:end="13:51">(<argument pos:start="13:22" pos:end="13:39"><expr pos:start="13:22" pos:end="13:39"><name pos:start="13:22" pos:end="13:39"><name pos:start="13:22" pos:end="13:24">env</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:30">cp15</name><operator pos:start="13:31" pos:end="13:31">.</operator><name pos:start="13:32" pos:end="13:39">c15_cpar</name></name></expr></argument>, <argument pos:start="13:42" pos:end="13:47"><expr pos:start="13:42" pos:end="13:47"><name pos:start="13:42" pos:end="13:47"><name pos:start="13:42" pos:end="13:43">ri</name><operator pos:start="13:44" pos:end="13:45">-&gt;</operator><name pos:start="13:46" pos:end="13:47">cp</name></name></expr></argument>, <argument pos:start="13:50" pos:end="13:50"><expr pos:start="13:50" pos:end="13:50"><literal type="number" pos:start="13:50" pos:end="13:50">1</literal></expr></argument>)</argument_list></call> <operator pos:start="13:53" pos:end="13:54">==</operator> <literal type="number" pos:start="13:56" pos:end="13:56">0</literal></expr>)</condition> <block pos:start="13:59" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:76">

        <expr_stmt pos:start="15:9" pos:end="15:76"><expr pos:start="15:9" pos:end="15:75"><call pos:start="15:9" pos:end="15:75"><name pos:start="15:9" pos:end="15:23">raise_exception</name><argument_list pos:start="15:24" pos:end="15:75">(<argument pos:start="15:25" pos:end="15:27"><expr pos:start="15:25" pos:end="15:27"><name pos:start="15:25" pos:end="15:27">env</name></expr></argument>, <argument pos:start="15:30" pos:end="15:38"><expr pos:start="15:30" pos:end="15:38"><name pos:start="15:30" pos:end="15:38">EXCP_UDEF</name></expr></argument>, <argument pos:start="15:41" pos:end="15:48"><expr pos:start="15:41" pos:end="15:48"><name pos:start="15:41" pos:end="15:48">syndrome</name></expr></argument>, <argument pos:start="15:51" pos:end="15:74"><expr pos:start="15:51" pos:end="15:74"><call pos:start="15:51" pos:end="15:74"><name pos:start="15:51" pos:end="15:69">exception_target_el</name><argument_list pos:start="15:70" pos:end="15:74">(<argument pos:start="15:71" pos:end="15:73"><expr pos:start="15:71" pos:end="15:73"><name pos:start="15:71" pos:end="15:73">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:21"><name pos:start="21:10" pos:end="21:11">ri</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:21">accessfn</name></name></expr>)</condition> <block pos:start="21:24" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="29:5" pos:end="73:5">switch <condition pos:start="29:12" pos:end="29:34">(<expr pos:start="29:13" pos:end="29:33"><call pos:start="29:13" pos:end="29:33"><name pos:start="29:13" pos:end="29:24"><name pos:start="29:13" pos:end="29:14">ri</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:24">accessfn</name></name><argument_list pos:start="29:25" pos:end="29:33">(<argument pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:28"><name pos:start="29:26" pos:end="29:28">env</name></expr></argument>, <argument pos:start="29:31" pos:end="29:32"><expr pos:start="29:31" pos:end="29:32"><name pos:start="29:31" pos:end="29:32">ri</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:36" pos:end="73:5">{<block_content pos:start="31:5" pos:end="71:31">

    <case pos:start="31:5" pos:end="31:22">case <expr pos:start="31:10" pos:end="31:21"><name pos:start="31:10" pos:end="31:21">CP_ACCESS_OK</name></expr>:</case>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    <case pos:start="35:5" pos:end="35:24">case <expr pos:start="35:10" pos:end="35:23"><name pos:start="35:10" pos:end="35:23">CP_ACCESS_TRAP</name></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:45"><expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:17">target_el</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <call pos:start="37:21" pos:end="37:44"><name pos:start="37:21" pos:end="37:39">exception_target_el</name><argument_list pos:start="37:40" pos:end="37:44">(<argument pos:start="37:41" pos:end="37:43"><expr pos:start="37:41" pos:end="37:43"><name pos:start="37:41" pos:end="37:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:28">case <expr pos:start="41:10" pos:end="41:27"><name pos:start="41:10" pos:end="41:27">CP_ACCESS_TRAP_EL2</name></expr>:</case>

        <comment type="block" pos:start="43:9" pos:end="47:11">/* Requesting a trap to EL2 when we're in EL3 or S-EL0/1 is

         * a bug in the access function.

         */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:65"><expr pos:start="49:9" pos:end="49:64"><call pos:start="49:9" pos:end="49:64"><name pos:start="49:9" pos:end="49:14">assert</name><argument_list pos:start="49:15" pos:end="49:64">(<argument pos:start="49:16" pos:end="49:63"><expr pos:start="49:16" pos:end="49:63"><operator pos:start="49:16" pos:end="49:16">!</operator><call pos:start="49:17" pos:end="49:34"><name pos:start="49:17" pos:end="49:29">arm_is_secure</name><argument_list pos:start="49:30" pos:end="49:34">(<argument pos:start="49:31" pos:end="49:33"><expr pos:start="49:31" pos:end="49:33"><name pos:start="49:31" pos:end="49:33">env</name></expr></argument>)</argument_list></call> <operator pos:start="49:36" pos:end="49:37">&amp;&amp;</operator> <operator pos:start="49:39" pos:end="49:39">!</operator><call pos:start="49:40" pos:end="49:58"><name pos:start="49:40" pos:end="49:53">arm_current_el</name><argument_list pos:start="49:54" pos:end="49:58">(<argument pos:start="49:55" pos:end="49:57"><expr pos:start="49:55" pos:end="49:57"><name pos:start="49:55" pos:end="49:57">env</name></expr></argument>)</argument_list></call> <operator pos:start="49:60" pos:end="49:61">==</operator> <literal type="number" pos:start="49:63" pos:end="49:63">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:22"><expr pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:17">target_el</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <literal type="number" pos:start="51:21" pos:end="51:21">2</literal></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:28">case <expr pos:start="55:10" pos:end="55:27"><name pos:start="55:10" pos:end="55:27">CP_ACCESS_TRAP_EL3</name></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:22"><expr pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:17">target_el</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <literal type="number" pos:start="57:21" pos:end="57:21">3</literal></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <case pos:start="61:5" pos:end="61:38">case <expr pos:start="61:10" pos:end="61:37"><name pos:start="61:10" pos:end="61:37">CP_ACCESS_TRAP_UNCATEGORIZED</name></expr>:</case>

        <expr_stmt pos:start="63:9" pos:end="63:45"><expr pos:start="63:9" pos:end="63:44"><name pos:start="63:9" pos:end="63:17">target_el</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <call pos:start="63:21" pos:end="63:44"><name pos:start="63:21" pos:end="63:39">exception_target_el</name><argument_list pos:start="63:40" pos:end="63:44">(<argument pos:start="63:41" pos:end="63:43"><expr pos:start="63:41" pos:end="63:43"><name pos:start="63:41" pos:end="63:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:39"><expr pos:start="65:9" pos:end="65:38"><name pos:start="65:9" pos:end="65:16">syndrome</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:38"><name pos:start="65:20" pos:end="65:36">syn_uncategorized</name><argument_list pos:start="65:37" pos:end="65:38">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <default pos:start="69:5" pos:end="69:12">default:</default>

        <expr_stmt pos:start="71:9" pos:end="71:31"><expr pos:start="71:9" pos:end="71:30"><call pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:28">g_assert_not_reached</name><argument_list pos:start="71:29" pos:end="71:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="77:5" pos:end="77:57"><expr pos:start="77:5" pos:end="77:56"><call pos:start="77:5" pos:end="77:56"><name pos:start="77:5" pos:end="77:19">raise_exception</name><argument_list pos:start="77:20" pos:end="77:56">(<argument pos:start="77:21" pos:end="77:23"><expr pos:start="77:21" pos:end="77:23"><name pos:start="77:21" pos:end="77:23">env</name></expr></argument>, <argument pos:start="77:26" pos:end="77:34"><expr pos:start="77:26" pos:end="77:34"><name pos:start="77:26" pos:end="77:34">EXCP_UDEF</name></expr></argument>, <argument pos:start="77:37" pos:end="77:44"><expr pos:start="77:37" pos:end="77:44"><name pos:start="77:37" pos:end="77:44">syndrome</name></expr></argument>, <argument pos:start="77:47" pos:end="77:55"><expr pos:start="77:47" pos:end="77:55"><name pos:start="77:47" pos:end="77:55">target_el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
