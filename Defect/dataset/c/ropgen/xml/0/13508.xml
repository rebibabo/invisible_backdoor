<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13508.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">spapr_cpu_init</name><parameter_list pos:start="1:27" pos:end="3:40">(<parameter pos:start="1:28" pos:end="1:51"><decl pos:start="1:28" pos:end="1:51"><type pos:start="1:28" pos:end="1:51"><name pos:start="1:28" pos:end="1:44">sPAPRMachineState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">spapr</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:63">PowerPCCPU</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">cpu</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:39"><decl pos:start="3:28" pos:end="3:39"><type pos:start="3:28" pos:end="3:39"><name pos:start="3:28" pos:end="3:32">Error</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier><modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="45:25">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUPPCState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:44">/* Set time-base frequency to 512 MHz */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:46"><expr pos:start="13:5" pos:end="13:45"><call pos:start="13:5" pos:end="13:45"><name pos:start="13:5" pos:end="13:19">cpu_ppc_tb_init</name><argument_list pos:start="13:20" pos:end="13:45">(<argument pos:start="13:21" pos:end="13:23"><expr pos:start="13:21" pos:end="13:23"><name pos:start="13:21" pos:end="13:23">env</name></expr></argument>, <argument pos:start="13:26" pos:end="13:44"><expr pos:start="13:26" pos:end="13:44"><name pos:start="13:26" pos:end="13:44">SPAPR_TIMEBASE_FREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:40">/* Enable PAPR mode in TCG or KVM */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:57"><expr pos:start="19:5" pos:end="19:56"><call pos:start="19:5" pos:end="19:56"><name pos:start="19:5" pos:end="19:20">cpu_ppc_set_papr</name><argument_list pos:start="19:21" pos:end="19:56">(<argument pos:start="19:22" pos:end="19:24"><expr pos:start="19:22" pos:end="19:24"><name pos:start="19:22" pos:end="19:24">cpu</name></expr></argument>, <argument pos:start="19:27" pos:end="19:55"><expr pos:start="19:27" pos:end="19:55"><call pos:start="19:27" pos:end="19:55"><name pos:start="19:27" pos:end="19:48">PPC_VIRTUAL_HYPERVISOR</name><argument_list pos:start="19:49" pos:end="19:55">(<argument pos:start="19:50" pos:end="19:54"><expr pos:start="19:50" pos:end="19:54"><name pos:start="19:50" pos:end="19:54">spapr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="39:5"><if pos:start="23:5" pos:end="39:5">if <condition pos:start="23:8" pos:end="23:30">(<expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:13">spapr</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:29">max_compat_pvr</name></name></expr>)</condition> <block pos:start="23:32" pos:end="39:5">{<block_content pos:start="25:9" pos:end="37:9">

        <decl_stmt pos:start="25:9" pos:end="25:32"><decl pos:start="25:9" pos:end="25:31"><type pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:13">Error</name> <modifier pos:start="25:15" pos:end="25:15">*</modifier></type><name pos:start="25:16" pos:end="25:24">local_err</name> <init pos:start="25:26" pos:end="25:31">= <expr pos:start="25:28" pos:end="25:31"><name pos:start="25:28" pos:end="25:31">NULL</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:63"><expr pos:start="29:9" pos:end="29:62"><call pos:start="29:9" pos:end="29:62"><name pos:start="29:9" pos:end="29:22">ppc_set_compat</name><argument_list pos:start="29:23" pos:end="29:62">(<argument pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><name pos:start="29:24" pos:end="29:26">cpu</name></expr></argument>, <argument pos:start="29:29" pos:end="29:49"><expr pos:start="29:29" pos:end="29:49"><name pos:start="29:29" pos:end="29:49"><name pos:start="29:29" pos:end="29:33">spapr</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:49">max_compat_pvr</name></name></expr></argument>, <argument pos:start="29:52" pos:end="29:61"><expr pos:start="29:52" pos:end="29:61"><operator pos:start="29:52" pos:end="29:52">&amp;</operator><name pos:start="29:53" pos:end="29:61">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:22">(<expr pos:start="31:13" pos:end="31:21"><name pos:start="31:13" pos:end="31:21">local_err</name></expr>)</condition> <block pos:start="31:24" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:19">

            <expr_stmt pos:start="33:13" pos:end="33:45"><expr pos:start="33:13" pos:end="33:44"><call pos:start="33:13" pos:end="33:44"><name pos:start="33:13" pos:end="33:27">error_propagate</name><argument_list pos:start="33:28" pos:end="33:44">(<argument pos:start="33:29" pos:end="33:32"><expr pos:start="33:29" pos:end="33:32"><name pos:start="33:29" pos:end="33:32">errp</name></expr></argument>, <argument pos:start="33:35" pos:end="33:43"><expr pos:start="33:35" pos:end="33:43"><name pos:start="33:35" pos:end="33:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:46"><expr pos:start="43:5" pos:end="43:45"><call pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:23">qemu_register_reset</name><argument_list pos:start="43:24" pos:end="43:45">(<argument pos:start="43:25" pos:end="43:39"><expr pos:start="43:25" pos:end="43:39"><name pos:start="43:25" pos:end="43:39">spapr_cpu_reset</name></expr></argument>, <argument pos:start="43:42" pos:end="43:44"><expr pos:start="43:42" pos:end="43:44"><name pos:start="43:42" pos:end="43:44">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:25"><expr pos:start="45:5" pos:end="45:24"><call pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:19">spapr_cpu_reset</name><argument_list pos:start="45:20" pos:end="45:24">(<argument pos:start="45:21" pos:end="45:23"><expr pos:start="45:21" pos:end="45:23"><name pos:start="45:21" pos:end="45:23">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
