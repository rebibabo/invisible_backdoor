<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19379.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">pc_guest_info_init</name><parameter_list pos:start="1:24" pos:end="1:45">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:40"><name pos:start="1:25" pos:end="1:38">PCMachineState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:44">pcms</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:61">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">j</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:59"><expr pos:start="9:5" pos:end="9:58"><name pos:start="9:5" pos:end="9:29"><name pos:start="9:5" pos:end="9:8">pcms</name><operator pos:start="9:9" pos:end="9:10">-&gt;</operator><name pos:start="9:11" pos:end="9:29">apic_xrupt_override</name></name> <operator pos:start="9:31" pos:end="9:31">=</operator> <call pos:start="9:33" pos:end="9:58"><name pos:start="9:33" pos:end="9:56">kvm_allows_irq0_override</name><argument_list pos:start="9:57" pos:end="9:58">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:37"><expr pos:start="11:5" pos:end="11:36"><name pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:8">pcms</name><operator pos:start="11:9" pos:end="11:10">-&gt;</operator><name pos:start="11:11" pos:end="11:20">numa_nodes</name></name> <operator pos:start="11:22" pos:end="11:22">=</operator> <name pos:start="11:24" pos:end="11:36">nb_numa_nodes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="15:60"><expr pos:start="13:5" pos:end="15:59"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:8">pcms</name><operator pos:start="13:9" pos:end="13:10">-&gt;</operator><name pos:start="13:11" pos:end="13:18">node_mem</name></name> <operator pos:start="13:20" pos:end="13:20">=</operator> <call pos:start="13:22" pos:end="15:59"><name pos:start="13:22" pos:end="13:30">g_malloc0</name><argument_list pos:start="13:31" pos:end="15:59">(<argument pos:start="13:32" pos:end="15:58"><expr pos:start="13:32" pos:end="15:58"><name pos:start="13:32" pos:end="13:47"><name pos:start="13:32" pos:end="13:35">pcms</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:47">numa_nodes</name></name> <operator pos:start="13:49" pos:end="13:49">*</operator>

                                    <sizeof pos:start="15:37" pos:end="15:42">sizeof <name/></sizeof>*<name pos:start="15:45" pos:end="15:58"><name pos:start="15:45" pos:end="15:48">pcms</name><operator pos:start="15:49" pos:end="15:50">-&gt;</operator><name pos:start="15:51" pos:end="15:58">node_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="17:5" pos:end="21:5">for <control pos:start="17:9" pos:end="17:39">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:34"><expr pos:start="17:17" pos:end="17:33"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <name pos:start="17:21" pos:end="17:33">nb_numa_nodes</name></expr>;</condition> <incr pos:start="17:36" pos:end="17:38"><expr pos:start="17:36" pos:end="17:38"><name pos:start="17:36" pos:end="17:36">i</name><operator pos:start="17:37" pos:end="17:38">++</operator></expr></incr>)</control> <block pos:start="17:41" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:50">

        <expr_stmt pos:start="19:9" pos:end="19:50"><expr pos:start="19:9" pos:end="19:49"><name pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:12">pcms</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:22">node_mem</name><index pos:start="19:23" pos:end="19:25">[<expr pos:start="19:24" pos:end="19:24"><name pos:start="19:24" pos:end="19:24">i</name></expr>]</index></name> <operator pos:start="19:27" pos:end="19:27">=</operator> <name pos:start="19:29" pos:end="19:40"><name pos:start="19:29" pos:end="19:37">numa_info</name><index pos:start="19:38" pos:end="19:40">[<expr pos:start="19:39" pos:end="19:39"><name pos:start="19:39" pos:end="19:39">i</name></expr>]</index></name><operator pos:start="19:41" pos:end="19:41">.</operator><name pos:start="19:42" pos:end="19:49">node_mem</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="25:5" pos:end="27:61"><expr pos:start="25:5" pos:end="27:60"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:8">pcms</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:18">node_cpu</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <call pos:start="25:22" pos:end="27:60"><name pos:start="25:22" pos:end="25:30">g_malloc0</name><argument_list pos:start="25:31" pos:end="27:60">(<argument pos:start="25:32" pos:end="27:59"><expr pos:start="25:32" pos:end="27:59"><name pos:start="25:32" pos:end="25:50"><name pos:start="25:32" pos:end="25:35">pcms</name><operator pos:start="25:36" pos:end="25:37">-&gt;</operator><name pos:start="25:38" pos:end="25:50">apic_id_limit</name></name> <operator pos:start="25:52" pos:end="25:52">*</operator>

                                     <sizeof pos:start="27:38" pos:end="27:43">sizeof <name/></sizeof>*<name pos:start="27:46" pos:end="27:59"><name pos:start="27:46" pos:end="27:49">pcms</name><operator pos:start="27:50" pos:end="27:51">-&gt;</operator><name pos:start="27:52" pos:end="27:59">node_cpu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="31:5" pos:end="49:5">for <control pos:start="31:9" pos:end="31:34">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:29"><expr pos:start="31:17" pos:end="31:28"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:28">max_cpus</name></expr>;</condition> <incr pos:start="31:31" pos:end="31:33"><expr pos:start="31:31" pos:end="31:33"><name pos:start="31:31" pos:end="31:31">i</name><operator pos:start="31:32" pos:end="31:33">++</operator></expr></incr>)</control> <block pos:start="31:36" pos:end="49:5">{<block_content pos:start="33:9" pos:end="47:9">

        <decl_stmt pos:start="33:9" pos:end="33:61"><decl pos:start="33:9" pos:end="33:60"><type pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:16">unsigned</name> <name pos:start="33:18" pos:end="33:20">int</name></type> <name pos:start="33:22" pos:end="33:28">apic_id</name> <init pos:start="33:30" pos:end="33:60">= <expr pos:start="33:32" pos:end="33:60"><call pos:start="33:32" pos:end="33:60"><name pos:start="33:32" pos:end="33:57">x86_cpu_apic_id_from_index</name><argument_list pos:start="33:58" pos:end="33:60">(<argument pos:start="33:59" pos:end="33:59"><expr pos:start="33:59" pos:end="33:59"><name pos:start="33:59" pos:end="33:59">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:46"><expr pos:start="35:9" pos:end="35:45"><call pos:start="35:9" pos:end="35:45"><name pos:start="35:9" pos:end="35:14">assert</name><argument_list pos:start="35:15" pos:end="35:45">(<argument pos:start="35:16" pos:end="35:44"><expr pos:start="35:16" pos:end="35:44"><name pos:start="35:16" pos:end="35:22">apic_id</name> <operator pos:start="35:24" pos:end="35:24">&lt;</operator> <name pos:start="35:26" pos:end="35:44"><name pos:start="35:26" pos:end="35:29">pcms</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:44">apic_id_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="37:9" pos:end="47:9">for <control pos:start="37:13" pos:end="37:43">(<init pos:start="37:14" pos:end="37:19"><expr pos:start="37:14" pos:end="37:18"><name pos:start="37:14" pos:end="37:14">j</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>;</init> <condition pos:start="37:21" pos:end="37:38"><expr pos:start="37:21" pos:end="37:37"><name pos:start="37:21" pos:end="37:21">j</name> <operator pos:start="37:23" pos:end="37:23">&lt;</operator> <name pos:start="37:25" pos:end="37:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="37:40" pos:end="37:42"><expr pos:start="37:40" pos:end="37:42"><name pos:start="37:40" pos:end="37:40">j</name><operator pos:start="37:41" pos:end="37:42">++</operator></expr></incr>)</control> <block pos:start="37:45" pos:end="47:9">{<block_content pos:start="39:13" pos:end="45:13">

            <if_stmt pos:start="39:13" pos:end="45:13"><if pos:start="39:13" pos:end="45:13">if <condition pos:start="39:16" pos:end="39:51">(<expr pos:start="39:17" pos:end="39:50"><call pos:start="39:17" pos:end="39:50"><name pos:start="39:17" pos:end="39:24">test_bit</name><argument_list pos:start="39:25" pos:end="39:50">(<argument pos:start="39:26" pos:end="39:26"><expr pos:start="39:26" pos:end="39:26"><name pos:start="39:26" pos:end="39:26">i</name></expr></argument>, <argument pos:start="39:29" pos:end="39:49"><expr pos:start="39:29" pos:end="39:49"><name pos:start="39:29" pos:end="39:40"><name pos:start="39:29" pos:end="39:37">numa_info</name><index pos:start="39:38" pos:end="39:40">[<expr pos:start="39:39" pos:end="39:39"><name pos:start="39:39" pos:end="39:39">j</name></expr>]</index></name><operator pos:start="39:41" pos:end="39:41">.</operator><name pos:start="39:42" pos:end="39:49">node_cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:53" pos:end="45:13">{<block_content pos:start="41:17" pos:end="43:22">

                <expr_stmt pos:start="41:17" pos:end="41:44"><expr pos:start="41:17" pos:end="41:43"><name pos:start="41:17" pos:end="41:39"><name pos:start="41:17" pos:end="41:20">pcms</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:30">node_cpu</name><index pos:start="41:31" pos:end="41:39">[<expr pos:start="41:32" pos:end="41:38"><name pos:start="41:32" pos:end="41:38">apic_id</name></expr>]</index></name> <operator pos:start="41:41" pos:end="41:41">=</operator> <name pos:start="41:43" pos:end="41:43">j</name></expr>;</expr_stmt>

                <break pos:start="43:17" pos:end="43:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="53:5" pos:end="53:48"><expr pos:start="53:5" pos:end="53:47"><name pos:start="53:5" pos:end="53:29"><name pos:start="53:5" pos:end="53:8">pcms</name><operator pos:start="53:9" pos:end="53:10">-&gt;</operator><name pos:start="53:11" pos:end="53:22">machine_done</name><operator pos:start="53:23" pos:end="53:23">.</operator><name pos:start="53:24" pos:end="53:29">notify</name></name> <operator pos:start="53:31" pos:end="53:31">=</operator> <name pos:start="53:33" pos:end="53:47">pc_machine_done</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:61"><expr pos:start="55:5" pos:end="55:60"><call pos:start="55:5" pos:end="55:60"><name pos:start="55:5" pos:end="55:39">qemu_add_machine_init_done_notifier</name><argument_list pos:start="55:40" pos:end="55:60">(<argument pos:start="55:41" pos:end="55:59"><expr pos:start="55:41" pos:end="55:59"><operator pos:start="55:41" pos:end="55:41">&amp;</operator><name pos:start="55:42" pos:end="55:59"><name pos:start="55:42" pos:end="55:45">pcms</name><operator pos:start="55:46" pos:end="55:47">-&gt;</operator><name pos:start="55:48" pos:end="55:59">machine_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
