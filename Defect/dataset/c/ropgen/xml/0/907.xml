<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/907.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">stream_desc_load</name><parameter_list pos:start="1:29" pos:end="1:59">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:35">struct</name> <name pos:start="1:37" pos:end="1:42">Stream</name></name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:58"><decl pos:start="1:48" pos:end="1:58"><type pos:start="1:48" pos:end="1:58"><name pos:start="1:48" pos:end="1:53">hwaddr</name></type> <name pos:start="1:55" pos:end="1:58">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="31:1">{<block_content pos:start="5:5" pos:end="29:5">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:16">SDesc</name></name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">d</name> <init pos:start="5:21" pos:end="5:30">= <expr pos:start="5:23" pos:end="5:30"><operator pos:start="5:23" pos:end="5:23">&amp;</operator><name pos:start="5:24" pos:end="5:30"><name pos:start="5:24" pos:end="5:24">s</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:30">desc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:58"><expr pos:start="11:5" pos:end="11:57"><call pos:start="11:5" pos:end="11:57"><name pos:start="11:5" pos:end="11:28">cpu_physical_memory_read</name><argument_list pos:start="11:29" pos:end="11:57">(<argument pos:start="11:30" pos:end="11:33"><expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">addr</name></expr></argument>, <argument pos:start="11:36" pos:end="11:45"><expr pos:start="11:36" pos:end="11:45"><operator pos:start="11:36" pos:end="11:36">(</operator><name pos:start="11:37" pos:end="11:40">void</name> <operator pos:start="11:42" pos:end="11:42">*</operator><operator pos:start="11:43" pos:end="11:43">)</operator> <name pos:start="11:45" pos:end="11:45">d</name></expr></argument>, <argument pos:start="11:48" pos:end="11:56"><expr pos:start="11:48" pos:end="11:56"><sizeof pos:start="11:48" pos:end="11:53">sizeof <name/></sizeof>*<name pos:start="11:56" pos:end="11:56">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:48">/* Convert from LE into host endianness.  */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:55"><expr pos:start="17:5" pos:end="17:54"><name pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:5">d</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:21">buffer_address</name></name> <operator pos:start="17:23" pos:end="17:23">=</operator> <call pos:start="17:25" pos:end="17:54"><name pos:start="17:25" pos:end="17:35">le64_to_cpu</name><argument_list pos:start="17:36" pos:end="17:54">(<argument pos:start="17:37" pos:end="17:53"><expr pos:start="17:37" pos:end="17:53"><name pos:start="17:37" pos:end="17:53"><name pos:start="17:37" pos:end="17:37">d</name><operator pos:start="17:38" pos:end="17:39">-&gt;</operator><name pos:start="17:40" pos:end="17:53">buffer_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:41"><expr pos:start="19:5" pos:end="19:40"><name pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:5">d</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:14">nxtdesc</name></name> <operator pos:start="19:16" pos:end="19:16">=</operator> <call pos:start="19:18" pos:end="19:40"><name pos:start="19:18" pos:end="19:28">le64_to_cpu</name><argument_list pos:start="19:29" pos:end="19:40">(<argument pos:start="19:30" pos:end="19:39"><expr pos:start="19:30" pos:end="19:39"><name pos:start="19:30" pos:end="19:39"><name pos:start="19:30" pos:end="19:30">d</name><operator pos:start="19:31" pos:end="19:32">-&gt;</operator><name pos:start="19:33" pos:end="19:39">nxtdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:41"><expr pos:start="21:5" pos:end="21:40"><name pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:5">d</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:14">control</name></name> <operator pos:start="21:16" pos:end="21:16">=</operator> <call pos:start="21:18" pos:end="21:40"><name pos:start="21:18" pos:end="21:28">le32_to_cpu</name><argument_list pos:start="21:29" pos:end="21:40">(<argument pos:start="21:30" pos:end="21:39"><expr pos:start="21:30" pos:end="21:39"><name pos:start="21:30" pos:end="21:39"><name pos:start="21:30" pos:end="21:30">d</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:39">control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:39"><expr pos:start="23:5" pos:end="23:38"><name pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:5">d</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:13">status</name></name> <operator pos:start="23:15" pos:end="23:15">=</operator> <call pos:start="23:17" pos:end="23:38"><name pos:start="23:17" pos:end="23:27">le32_to_cpu</name><argument_list pos:start="23:28" pos:end="23:38">(<argument pos:start="23:29" pos:end="23:37"><expr pos:start="23:29" pos:end="23:37"><name pos:start="23:29" pos:end="23:37"><name pos:start="23:29" pos:end="23:29">d</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:37">status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="25:5" pos:end="29:5">for <control pos:start="25:9" pos:end="25:44">(<init pos:start="25:10" pos:end="25:15"><expr pos:start="25:10" pos:end="25:14"><name pos:start="25:10" pos:end="25:10">i</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>;</init> <condition pos:start="25:17" pos:end="25:39"><expr pos:start="25:17" pos:end="25:38"><name pos:start="25:17" pos:end="25:17">i</name> <operator pos:start="25:19" pos:end="25:19">&lt;</operator> <call pos:start="25:21" pos:end="25:38"><name pos:start="25:21" pos:end="25:30">ARRAY_SIZE</name><argument_list pos:start="25:31" pos:end="25:38">(<argument pos:start="25:32" pos:end="25:37"><expr pos:start="25:32" pos:end="25:37"><name pos:start="25:32" pos:end="25:37"><name pos:start="25:32" pos:end="25:32">d</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:37">app</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="25:41" pos:end="25:43"><expr pos:start="25:41" pos:end="25:43"><name pos:start="25:41" pos:end="25:41">i</name><operator pos:start="25:42" pos:end="25:43">++</operator></expr></incr>)</control> <block pos:start="25:46" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:43">

        <expr_stmt pos:start="27:9" pos:end="27:43"><expr pos:start="27:9" pos:end="27:42"><name pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:9">d</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:14">app</name><index pos:start="27:15" pos:end="27:17">[<expr pos:start="27:16" pos:end="27:16"><name pos:start="27:16" pos:end="27:16">i</name></expr>]</index></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <call pos:start="27:21" pos:end="27:42"><name pos:start="27:21" pos:end="27:31">le32_to_cpu</name><argument_list pos:start="27:32" pos:end="27:42">(<argument pos:start="27:33" pos:end="27:41"><expr pos:start="27:33" pos:end="27:41"><name pos:start="27:33" pos:end="27:41"><name pos:start="27:33" pos:end="27:33">d</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:38">app</name><index pos:start="27:39" pos:end="27:41">[<expr pos:start="27:40" pos:end="27:40"><name pos:start="27:40" pos:end="27:40">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
