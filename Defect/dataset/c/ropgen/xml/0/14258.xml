<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14258.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">get_logical_cpus</name><parameter_list pos:start="1:28" pos:end="1:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:44"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:44">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:20">nb_cpus</name> <init pos:start="5:22" pos:end="5:24">= <expr pos:start="5:24" pos:end="5:24"><literal type="number" pos:start="5:24" pos:end="5:24">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="7:1" pos:end="7:48">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:48"><name pos:start="7:5" pos:end="7:26">HAVE_SCHED_GETAFFINITY</name> <operator pos:start="7:28" pos:end="7:29">&amp;&amp;</operator> <call pos:start="7:31" pos:end="7:48"><name pos:start="7:31" pos:end="7:37">defined</name><argument_list pos:start="7:38" pos:end="7:48">(<argument pos:start="7:39" pos:end="7:47"><expr pos:start="7:39" pos:end="7:47"><name pos:start="7:39" pos:end="7:47">CPU_COUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">cpu_set_t</name></type> <name pos:start="9:15" pos:end="9:20">cpuset</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:22"><expr pos:start="13:5" pos:end="13:21"><call pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:12">CPU_ZERO</name><argument_list pos:start="13:13" pos:end="13:21">(<argument pos:start="13:14" pos:end="13:20"><expr pos:start="13:14" pos:end="13:20"><operator pos:start="13:14" pos:end="13:14">&amp;</operator><name pos:start="13:15" pos:end="13:20">cpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:56"><expr pos:start="17:5" pos:end="17:55"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:55"><name pos:start="17:11" pos:end="17:27">sched_getaffinity</name><argument_list pos:start="17:28" pos:end="17:55">(<argument pos:start="17:29" pos:end="17:29"><expr pos:start="17:29" pos:end="17:29"><literal type="number" pos:start="17:29" pos:end="17:29">0</literal></expr></argument>, <argument pos:start="17:32" pos:end="17:45"><expr pos:start="17:32" pos:end="17:45"><sizeof pos:start="17:32" pos:end="17:45">sizeof<argument_list pos:start="17:38" pos:end="17:45">(<argument pos:start="17:39" pos:end="17:44"><expr pos:start="17:39" pos:end="17:44"><name pos:start="17:39" pos:end="17:44">cpuset</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="17:48" pos:end="17:54"><expr pos:start="17:48" pos:end="17:54"><operator pos:start="17:48" pos:end="17:48">&amp;</operator><name pos:start="17:49" pos:end="17:54">cpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="26:0"><if pos:start="19:5" pos:end="26:0">if <condition pos:start="19:8" pos:end="19:13">(<expr pos:start="19:9" pos:end="19:12"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:12">ret</name></expr>)</condition> <block pos:start="19:15" pos:end="26:0">{<block_content pos:start="21:9" pos:end="21:37">

        <expr_stmt pos:start="21:9" pos:end="21:37"><expr pos:start="21:9" pos:end="21:36"><name pos:start="21:9" pos:end="21:15">nb_cpus</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:36"><name pos:start="21:19" pos:end="21:27">CPU_COUNT</name><argument_list pos:start="21:28" pos:end="21:36">(<argument pos:start="21:29" pos:end="21:35"><expr pos:start="21:29" pos:end="21:35"><operator pos:start="21:29" pos:end="21:29">&amp;</operator><name pos:start="21:30" pos:end="21:35">cpuset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="25:1" pos:end="25:24">#<cpp:directive pos:start="25:2" pos:end="25:5">elif</cpp:directive> <expr pos:start="25:7" pos:end="25:24"><name pos:start="25:7" pos:end="25:24">HAVE_GETSYSTEMINFO</name></expr></cpp:elif>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:15">SYSTEM_INFO</name></type> <name pos:start="27:17" pos:end="27:23">sysinfo</name></decl>;</decl_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:28"><expr pos:start="29:5" pos:end="29:27"><call pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:17">GetSystemInfo</name><argument_list pos:start="29:18" pos:end="29:27">(<argument pos:start="29:19" pos:end="29:26"><expr pos:start="29:19" pos:end="29:26"><operator pos:start="29:19" pos:end="29:19">&amp;</operator><name pos:start="29:20" pos:end="29:26">sysinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="34:0"><expr pos:start="31:5" pos:end="31:42"><name pos:start="31:5" pos:end="31:11">nb_cpus</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:42"><name pos:start="31:15" pos:end="31:21">sysinfo</name><operator pos:start="31:22" pos:end="31:22">.</operator><name pos:start="31:23" pos:end="31:42">dwNumberOfProcessors</name></name></expr>;</expr_stmt>

<cpp:elif pos:start="33:1" pos:end="33:37">#<cpp:directive pos:start="33:2" pos:end="33:5">elif</cpp:directive> <expr pos:start="33:7" pos:end="33:37"><name pos:start="33:7" pos:end="33:17">HAVE_SYSCTL</name> <operator pos:start="33:19" pos:end="33:20">&amp;&amp;</operator> <call pos:start="33:22" pos:end="33:37"><name pos:start="33:22" pos:end="33:28">defined</name><argument_list pos:start="33:29" pos:end="33:37">(<argument pos:start="33:30" pos:end="33:36"><expr pos:start="33:30" pos:end="33:36"><name pos:start="33:30" pos:end="33:36">HW_NCPU</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <decl_stmt pos:start="35:5" pos:end="35:37"><decl pos:start="35:5" pos:end="35:36"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:11">mib</name><index pos:start="35:12" pos:end="35:14">[<expr pos:start="35:13" pos:end="35:13"><literal type="number" pos:start="35:13" pos:end="35:13">2</literal></expr>]</index></name> <init pos:start="35:16" pos:end="35:36">= <expr pos:start="35:18" pos:end="35:36"><block pos:start="35:18" pos:end="35:36">{ <expr pos:start="35:20" pos:end="35:25"><name pos:start="35:20" pos:end="35:25">CTL_HW</name></expr>, <expr pos:start="35:28" pos:end="35:34"><name pos:start="35:28" pos:end="35:34">HW_NCPU</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:33"><decl pos:start="37:5" pos:end="37:32"><type pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:10">size_t</name></type> <name pos:start="37:12" pos:end="37:14">len</name> <init pos:start="37:16" pos:end="37:32">= <expr pos:start="37:18" pos:end="37:32"><sizeof pos:start="37:18" pos:end="37:32">sizeof<argument_list pos:start="37:24" pos:end="37:32">(<argument pos:start="37:25" pos:end="37:31"><expr pos:start="37:25" pos:end="37:31"><name pos:start="37:25" pos:end="37:31">nb_cpus</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:50"><expr pos:start="41:5" pos:end="41:49"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:49"><name pos:start="41:11" pos:end="41:16">sysctl</name><argument_list pos:start="41:17" pos:end="41:49">(<argument pos:start="41:18" pos:end="41:20"><expr pos:start="41:18" pos:end="41:20"><name pos:start="41:18" pos:end="41:20">mib</name></expr></argument>, <argument pos:start="41:23" pos:end="41:23"><expr pos:start="41:23" pos:end="41:23"><literal type="number" pos:start="41:23" pos:end="41:23">2</literal></expr></argument>, <argument pos:start="41:26" pos:end="41:33"><expr pos:start="41:26" pos:end="41:33"><operator pos:start="41:26" pos:end="41:26">&amp;</operator><name pos:start="41:27" pos:end="41:33">nb_cpus</name></expr></argument>, <argument pos:start="41:36" pos:end="41:39"><expr pos:start="41:36" pos:end="41:39"><operator pos:start="41:36" pos:end="41:36">&amp;</operator><name pos:start="41:37" pos:end="41:39">len</name></expr></argument>, <argument pos:start="41:42" pos:end="41:45"><expr pos:start="41:42" pos:end="41:45"><name pos:start="41:42" pos:end="41:45">NULL</name></expr></argument>, <argument pos:start="41:48" pos:end="41:48"><expr pos:start="41:48" pos:end="41:48"><literal type="number" pos:start="41:48" pos:end="41:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="48:0"><if pos:start="43:5" pos:end="48:0">if <condition pos:start="43:8" pos:end="43:18">(<expr pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:14">==</operator> <operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="48:0"><block_content pos:start="45:9" pos:end="48:0">

        <expr_stmt pos:start="45:9" pos:end="48:0"><expr pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:15">nb_cpus</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif pos:start="47:1" pos:end="47:45">#<cpp:directive pos:start="47:2" pos:end="47:5">elif</cpp:directive> <expr pos:start="47:7" pos:end="47:45"><name pos:start="47:7" pos:end="47:18">HAVE_SYSCONF</name> <operator pos:start="47:20" pos:end="47:21">&amp;&amp;</operator> <call pos:start="47:23" pos:end="47:45"><name pos:start="47:23" pos:end="47:29">defined</name><argument_list pos:start="47:30" pos:end="47:45">(<argument pos:start="47:31" pos:end="47:44"><expr pos:start="47:31" pos:end="47:44"><name pos:start="47:31" pos:end="47:44">_SC_NPROC_ONLN</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:37"><name pos:start="49:5" pos:end="49:11">nb_cpus</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:37"><name pos:start="49:15" pos:end="49:21">sysconf</name><argument_list pos:start="49:22" pos:end="49:37">(<argument pos:start="49:23" pos:end="49:36"><expr pos:start="49:23" pos:end="49:36"><name pos:start="49:23" pos:end="49:36">_SC_NPROC_ONLN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="51:1" pos:end="51:51">#<cpp:directive pos:start="51:2" pos:end="51:5">elif</cpp:directive> <expr pos:start="51:7" pos:end="51:51"><name pos:start="51:7" pos:end="51:18">HAVE_SYSCONF</name> <operator pos:start="51:20" pos:end="51:21">&amp;&amp;</operator> <call pos:start="51:23" pos:end="51:51"><name pos:start="51:23" pos:end="51:29">defined</name><argument_list pos:start="51:30" pos:end="51:51">(<argument pos:start="51:31" pos:end="51:50"><expr pos:start="51:31" pos:end="51:50"><name pos:start="51:31" pos:end="51:50">_SC_NPROCESSORS_ONLN</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="53:5" pos:end="56:0"><expr pos:start="53:5" pos:end="53:43"><name pos:start="53:5" pos:end="53:11">nb_cpus</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:43"><name pos:start="53:15" pos:end="53:21">sysconf</name><argument_list pos:start="53:22" pos:end="53:43">(<argument pos:start="53:23" pos:end="53:42"><expr pos:start="53:23" pos:end="53:42"><name pos:start="53:23" pos:end="53:42">_SC_NPROCESSORS_ONLN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="57:5" pos:end="57:72"><expr pos:start="57:5" pos:end="57:71"><call pos:start="57:5" pos:end="57:71"><name pos:start="57:5" pos:end="57:10">av_log</name><argument_list pos:start="57:11" pos:end="57:71">(<argument pos:start="57:12" pos:end="57:16"><expr pos:start="57:12" pos:end="57:16"><name pos:start="57:12" pos:end="57:16">avctx</name></expr></argument>, <argument pos:start="57:19" pos:end="57:30"><expr pos:start="57:19" pos:end="57:30"><name pos:start="57:19" pos:end="57:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="57:33" pos:end="57:61"><expr pos:start="57:33" pos:end="57:61"><literal type="string" pos:start="57:33" pos:end="57:61">"detected %d logical cores\n"</literal></expr></argument>, <argument pos:start="57:64" pos:end="57:70"><expr pos:start="57:64" pos:end="57:70"><name pos:start="57:64" pos:end="57:70">nb_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="59:5" pos:end="59:44">return <expr pos:start="59:12" pos:end="59:43"><call pos:start="59:12" pos:end="59:43"><name pos:start="59:12" pos:end="59:16">FFMIN</name><argument_list pos:start="59:17" pos:end="59:43">(<argument pos:start="59:18" pos:end="59:24"><expr pos:start="59:18" pos:end="59:24"><name pos:start="59:18" pos:end="59:24">nb_cpus</name></expr></argument>, <argument pos:start="59:27" pos:end="59:42"><expr pos:start="59:27" pos:end="59:42"><name pos:start="59:27" pos:end="59:42">MAX_AUTO_THREADS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
