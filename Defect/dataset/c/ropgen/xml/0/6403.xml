<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6403.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">spapr_core_plug</name><parameter_list pos:start="1:28" pos:end="3:41">(<parameter pos:start="1:29" pos:end="1:55"><decl pos:start="1:29" pos:end="1:55"><type pos:start="1:29" pos:end="1:55"><name pos:start="1:29" pos:end="1:42">HotplugHandler</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:55">hotplug_dev</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:73"><decl pos:start="1:58" pos:end="1:73"><type pos:start="1:58" pos:end="1:73"><name pos:start="1:58" pos:end="1:68">DeviceState</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:73">dev</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:40"><decl pos:start="3:29" pos:end="3:40"><type pos:start="3:29" pos:end="3:40"><name pos:start="3:29" pos:end="3:33">Error</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier><modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="155:1">{<block_content pos:start="7:5" pos:end="153:5">

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">sPAPRMachineState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">spapr</name> <init pos:start="7:30" pos:end="7:65">= <expr pos:start="7:32" pos:end="7:65"><call pos:start="7:32" pos:end="7:65"><name pos:start="7:32" pos:end="7:44">SPAPR_MACHINE</name><argument_list pos:start="7:45" pos:end="7:65">(<argument pos:start="7:46" pos:end="7:64"><expr pos:start="7:46" pos:end="7:64"><call pos:start="7:46" pos:end="7:64"><name pos:start="7:46" pos:end="7:51">OBJECT</name><argument_list pos:start="7:52" pos:end="7:64">(<argument pos:start="7:53" pos:end="7:63"><expr pos:start="7:53" pos:end="7:63"><name pos:start="7:53" pos:end="7:63">hotplug_dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:47"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MachineClass</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:20">mc</name> <init pos:start="9:22" pos:end="9:47">= <expr pos:start="9:24" pos:end="9:47"><call pos:start="9:24" pos:end="9:47"><name pos:start="9:24" pos:end="9:40">MACHINE_GET_CLASS</name><argument_list pos:start="9:41" pos:end="9:47">(<argument pos:start="9:42" pos:end="9:46"><expr pos:start="9:42" pos:end="9:46"><name pos:start="9:42" pos:end="9:46">spapr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:53"><decl pos:start="11:5" pos:end="11:52"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">sPAPRMachineClass</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:26">smc</name> <init pos:start="11:28" pos:end="11:52">= <expr pos:start="11:30" pos:end="11:52"><call pos:start="11:30" pos:end="11:52"><name pos:start="11:30" pos:end="11:48">SPAPR_MACHINE_CLASS</name><argument_list pos:start="11:49" pos:end="11:52">(<argument pos:start="11:50" pos:end="11:51"><expr pos:start="11:50" pos:end="11:51"><name pos:start="11:50" pos:end="11:51">mc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:53"><decl pos:start="13:5" pos:end="13:52"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">sPAPRCPUCore</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:22">core</name> <init pos:start="13:24" pos:end="13:52">= <expr pos:start="13:26" pos:end="13:52"><call pos:start="13:26" pos:end="13:52"><name pos:start="13:26" pos:end="13:39">SPAPR_CPU_CORE</name><argument_list pos:start="13:40" pos:end="13:52">(<argument pos:start="13:41" pos:end="13:51"><expr pos:start="13:41" pos:end="13:51"><call pos:start="13:41" pos:end="13:51"><name pos:start="13:41" pos:end="13:46">OBJECT</name><argument_list pos:start="13:47" pos:end="13:51">(<argument pos:start="13:48" pos:end="13:50"><expr pos:start="13:48" pos:end="13:50"><name pos:start="13:48" pos:end="13:50">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">CPUCore</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:15">cc</name> <init pos:start="15:17" pos:end="15:31">= <expr pos:start="15:19" pos:end="15:31"><call pos:start="15:19" pos:end="15:31"><name pos:start="15:19" pos:end="15:26">CPU_CORE</name><argument_list pos:start="15:27" pos:end="15:31">(<argument pos:start="15:28" pos:end="15:30"><expr pos:start="15:28" pos:end="15:30"><name pos:start="15:28" pos:end="15:30">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:37"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">CPUState</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:16">cs</name> <init pos:start="17:18" pos:end="17:37">= <expr pos:start="17:20" pos:end="17:37"><call pos:start="17:20" pos:end="17:37"><name pos:start="17:20" pos:end="17:22">CPU</name><argument_list pos:start="17:23" pos:end="17:37">(<argument pos:start="17:24" pos:end="17:36"><expr pos:start="17:24" pos:end="17:36"><name pos:start="17:24" pos:end="17:36"><name pos:start="17:24" pos:end="17:27">core</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:36">threads</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">sPAPRDRConnector</name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:25">drc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:20">local_err</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">void</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:13">fdt</name> <init pos:start="23:15" pos:end="23:20">= <expr pos:start="23:17" pos:end="23:20"><name pos:start="23:17" pos:end="23:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">fdt_offset</name> <init pos:start="25:20" pos:end="25:22">= <expr pos:start="25:22" pos:end="25:22"><literal type="number" pos:start="25:22" pos:end="25:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:35"><decl pos:start="27:5" pos:end="27:34"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">smt</name> <init pos:start="27:13" pos:end="27:34">= <expr pos:start="27:15" pos:end="27:34"><call pos:start="27:15" pos:end="27:34"><name pos:start="27:15" pos:end="27:32">kvmppc_smt_threads</name><argument_list pos:start="27:33" pos:end="27:34">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:25"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:13">CPUArchId</name> <modifier pos:start="29:15" pos:end="29:15">*</modifier></type><name pos:start="29:16" pos:end="29:24">core_slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:14"><decl pos:start="31:5" pos:end="31:13"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:13">index</name></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:79"><expr pos:start="35:5" pos:end="35:78"><name pos:start="35:5" pos:end="35:13">core_slot</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <call pos:start="35:17" pos:end="35:78"><name pos:start="35:17" pos:end="35:35">spapr_find_cpu_slot</name><argument_list pos:start="35:36" pos:end="35:78">(<argument pos:start="35:37" pos:end="35:56"><expr pos:start="35:37" pos:end="35:56"><call pos:start="35:37" pos:end="35:56"><name pos:start="35:37" pos:end="35:43">MACHINE</name><argument_list pos:start="35:44" pos:end="35:56">(<argument pos:start="35:45" pos:end="35:55"><expr pos:start="35:45" pos:end="35:55"><name pos:start="35:45" pos:end="35:55">hotplug_dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:59" pos:end="35:69"><expr pos:start="35:59" pos:end="35:69"><name pos:start="35:59" pos:end="35:69"><name pos:start="35:59" pos:end="35:60">cc</name><operator pos:start="35:61" pos:end="35:62">-&gt;</operator><name pos:start="35:63" pos:end="35:69">core_id</name></name></expr></argument>, <argument pos:start="35:72" pos:end="35:77"><expr pos:start="35:72" pos:end="35:77"><operator pos:start="35:72" pos:end="35:72">&amp;</operator><name pos:start="35:73" pos:end="35:77">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:18">core_slot</name></expr>)</condition> <block pos:start="37:21" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:15">

        <expr_stmt pos:start="39:9" pos:end="41:32"><expr pos:start="39:9" pos:end="41:31"><call pos:start="39:9" pos:end="41:31"><name pos:start="39:9" pos:end="39:18">error_setg</name><argument_list pos:start="39:19" pos:end="41:31">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">errp</name></expr></argument>, <argument pos:start="39:26" pos:end="39:67"><expr pos:start="39:26" pos:end="39:67"><literal type="string" pos:start="39:26" pos:end="39:67">"Unable to find CPU core with core-id: %d"</literal></expr></argument>,

                   <argument pos:start="41:20" pos:end="41:30"><expr pos:start="41:20" pos:end="41:30"><name pos:start="41:20" pos:end="41:30"><name pos:start="41:20" pos:end="41:21">cc</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:30">core_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:59"><expr pos:start="47:5" pos:end="47:58"><name pos:start="47:5" pos:end="47:7">drc</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:58"><name pos:start="47:11" pos:end="47:25">spapr_drc_by_id</name><argument_list pos:start="47:26" pos:end="47:58">(<argument pos:start="47:27" pos:end="47:44"><expr pos:start="47:27" pos:end="47:44"><name pos:start="47:27" pos:end="47:44">TYPE_SPAPR_DRC_CPU</name></expr></argument>, <argument pos:start="47:47" pos:end="47:57"><expr pos:start="47:47" pos:end="47:57"><name pos:start="47:47" pos:end="47:51">index</name> <operator pos:start="47:53" pos:end="47:53">*</operator> <name pos:start="47:55" pos:end="47:57">smt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:48"><expr pos:start="51:5" pos:end="51:47"><call pos:start="51:5" pos:end="51:47"><name pos:start="51:5" pos:end="51:12">g_assert</name><argument_list pos:start="51:13" pos:end="51:47">(<argument pos:start="51:14" pos:end="51:46"><expr pos:start="51:14" pos:end="51:46"><name pos:start="51:14" pos:end="51:16">drc</name> <operator pos:start="51:18" pos:end="51:19">||</operator> <operator pos:start="51:21" pos:end="51:21">!</operator><name pos:start="51:22" pos:end="51:46"><name pos:start="51:22" pos:end="51:23">mc</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:46">has_hotpluggable_cpus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="61:7">/*

     * Setup CPU DT entries only for hotplugged CPUs. For boot time or

     * coldplugged CPUs DT entries are setup in spapr_build_fdt().

     */</comment>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:24">(<expr pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:11">dev</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:23">hotplugged</name></name></expr>)</condition> <block pos:start="63:26" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:68">

        <expr_stmt pos:start="65:9" pos:end="65:68"><expr pos:start="65:9" pos:end="65:67"><name pos:start="65:9" pos:end="65:11">fdt</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:67"><name pos:start="65:15" pos:end="65:43">spapr_populate_hotplug_cpu_dt</name><argument_list pos:start="65:44" pos:end="65:67">(<argument pos:start="65:45" pos:end="65:46"><expr pos:start="65:45" pos:end="65:46"><name pos:start="65:45" pos:end="65:46">cs</name></expr></argument>, <argument pos:start="65:49" pos:end="65:59"><expr pos:start="65:49" pos:end="65:59"><operator pos:start="65:49" pos:end="65:49">&amp;</operator><name pos:start="65:50" pos:end="65:59">fdt_offset</name></expr></argument>, <argument pos:start="65:62" pos:end="65:66"><expr pos:start="65:62" pos:end="65:66"><name pos:start="65:62" pos:end="65:66">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="87:5"><if pos:start="71:5" pos:end="87:5">if <condition pos:start="71:8" pos:end="71:12">(<expr pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">drc</name></expr>)</condition> <block pos:start="71:14" pos:end="87:5">{<block_content pos:start="73:9" pos:end="85:9">

        <expr_stmt pos:start="73:9" pos:end="75:37"><expr pos:start="73:9" pos:end="75:36"><call pos:start="73:9" pos:end="75:36"><name pos:start="73:9" pos:end="73:24">spapr_drc_attach</name><argument_list pos:start="73:25" pos:end="75:36">(<argument pos:start="73:26" pos:end="73:28"><expr pos:start="73:26" pos:end="73:28"><name pos:start="73:26" pos:end="73:28">drc</name></expr></argument>, <argument pos:start="73:31" pos:end="73:33"><expr pos:start="73:31" pos:end="73:33"><name pos:start="73:31" pos:end="73:33">dev</name></expr></argument>, <argument pos:start="73:36" pos:end="73:38"><expr pos:start="73:36" pos:end="73:38"><name pos:start="73:36" pos:end="73:38">fdt</name></expr></argument>, <argument pos:start="73:41" pos:end="73:50"><expr pos:start="73:41" pos:end="73:50"><name pos:start="73:41" pos:end="73:50">fdt_offset</name></expr></argument>, <argument pos:start="73:53" pos:end="73:68"><expr pos:start="73:53" pos:end="73:68"><operator pos:start="73:53" pos:end="73:53">!</operator><name pos:start="73:54" pos:end="73:68"><name pos:start="73:54" pos:end="73:56">dev</name><operator pos:start="73:57" pos:end="73:58">-&gt;</operator><name pos:start="73:59" pos:end="73:68">hotplugged</name></name></expr></argument>,

                         <argument pos:start="75:26" pos:end="75:35"><expr pos:start="75:26" pos:end="75:35"><operator pos:start="75:26" pos:end="75:26">&amp;</operator><name pos:start="75:27" pos:end="75:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="85:9"><if pos:start="77:9" pos:end="85:9">if <condition pos:start="77:12" pos:end="77:22">(<expr pos:start="77:13" pos:end="77:21"><name pos:start="77:13" pos:end="77:21">local_err</name></expr>)</condition> <block pos:start="77:24" pos:end="85:9">{<block_content pos:start="79:13" pos:end="83:19">

            <expr_stmt pos:start="79:13" pos:end="79:24"><expr pos:start="79:13" pos:end="79:23"><call pos:start="79:13" pos:end="79:23"><name pos:start="79:13" pos:end="79:18">g_free</name><argument_list pos:start="79:19" pos:end="79:23">(<argument pos:start="79:20" pos:end="79:22"><expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:45"><expr pos:start="81:13" pos:end="81:44"><call pos:start="81:13" pos:end="81:44"><name pos:start="81:13" pos:end="81:27">error_propagate</name><argument_list pos:start="81:28" pos:end="81:44">(<argument pos:start="81:29" pos:end="81:32"><expr pos:start="81:29" pos:end="81:32"><name pos:start="81:29" pos:end="81:32">errp</name></expr></argument>, <argument pos:start="81:35" pos:end="81:43"><expr pos:start="81:35" pos:end="81:43"><name pos:start="81:35" pos:end="81:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="121:5"><if pos:start="91:5" pos:end="103:5">if <condition pos:start="91:8" pos:end="91:24">(<expr pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:11">dev</name><operator pos:start="91:12" pos:end="91:13">-&gt;</operator><name pos:start="91:14" pos:end="91:23">hotplugged</name></name></expr>)</condition> <block pos:start="91:26" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:44">

        <comment type="block" pos:start="93:9" pos:end="99:11">/*

         * Send hotplug notification interrupt to the guest only in case

         * of hotplugged CPUs.

         */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:44"><expr pos:start="101:9" pos:end="101:43"><call pos:start="101:9" pos:end="101:43"><name pos:start="101:9" pos:end="101:38">spapr_hotplug_req_add_by_index</name><argument_list pos:start="101:39" pos:end="101:43">(<argument pos:start="101:40" pos:end="101:42"><expr pos:start="101:40" pos:end="101:42"><name pos:start="101:40" pos:end="101:42">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="103:7" pos:end="121:5">else <block pos:start="103:12" pos:end="121:5">{<block_content pos:start="111:9" pos:end="119:9">

        <comment type="block" pos:start="105:9" pos:end="109:11">/*

         * Set the right DRC states for cold plugged CPU.

         */</comment>

        <if_stmt pos:start="111:9" pos:end="119:9"><if pos:start="111:9" pos:end="119:9">if <condition pos:start="111:12" pos:end="111:16">(<expr pos:start="111:13" pos:end="111:15"><name pos:start="111:13" pos:end="111:15">drc</name></expr>)</condition> <block pos:start="111:18" pos:end="119:9">{<block_content pos:start="113:13" pos:end="117:80">

            <decl_stmt pos:start="113:13" pos:end="113:76"><decl pos:start="113:13" pos:end="113:75"><type pos:start="113:13" pos:end="113:35"><name pos:start="113:13" pos:end="113:33">sPAPRDRConnectorClass</name> <modifier pos:start="113:35" pos:end="113:35">*</modifier></type><name pos:start="113:36" pos:end="113:39">drck</name> <init pos:start="113:41" pos:end="113:75">= <expr pos:start="113:43" pos:end="113:75"><call pos:start="113:43" pos:end="113:75"><name pos:start="113:43" pos:end="113:70">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="113:71" pos:end="113:75">(<argument pos:start="113:72" pos:end="113:74"><expr pos:start="113:72" pos:end="113:74"><name pos:start="113:72" pos:end="113:74">drc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:78"><expr pos:start="115:13" pos:end="115:77"><call pos:start="115:13" pos:end="115:77"><name pos:start="115:13" pos:end="115:38"><name pos:start="115:13" pos:end="115:16">drck</name><operator pos:start="115:17" pos:end="115:18">-&gt;</operator><name pos:start="115:19" pos:end="115:38">set_allocation_state</name></name><argument_list pos:start="115:39" pos:end="115:77">(<argument pos:start="115:40" pos:end="115:42"><expr pos:start="115:40" pos:end="115:42"><name pos:start="115:40" pos:end="115:42">drc</name></expr></argument>, <argument pos:start="115:45" pos:end="115:76"><expr pos:start="115:45" pos:end="115:76"><name pos:start="115:45" pos:end="115:76">SPAPR_DR_ALLOCATION_STATE_USABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:80"><expr pos:start="117:13" pos:end="117:79"><call pos:start="117:13" pos:end="117:79"><name pos:start="117:13" pos:end="117:37"><name pos:start="117:13" pos:end="117:16">drck</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:37">set_isolation_state</name></name><argument_list pos:start="117:38" pos:end="117:79">(<argument pos:start="117:39" pos:end="117:41"><expr pos:start="117:39" pos:end="117:41"><name pos:start="117:39" pos:end="117:41">drc</name></expr></argument>, <argument pos:start="117:44" pos:end="117:78"><expr pos:start="117:44" pos:end="117:78"><name pos:start="117:44" pos:end="117:78">SPAPR_DR_ISOLATION_STATE_UNISOLATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:33"><expr pos:start="123:5" pos:end="123:32"><name pos:start="123:5" pos:end="123:18"><name pos:start="123:5" pos:end="123:13">core_slot</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:18">cpu</name></name> <operator pos:start="123:20" pos:end="123:20">=</operator> <call pos:start="123:22" pos:end="123:32"><name pos:start="123:22" pos:end="123:27">OBJECT</name><argument_list pos:start="123:28" pos:end="123:32">(<argument pos:start="123:29" pos:end="123:31"><expr pos:start="123:29" pos:end="123:31"><name pos:start="123:29" pos:end="123:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="127:5" pos:end="153:5"><if pos:start="127:5" pos:end="153:5">if <condition pos:start="127:8" pos:end="127:38">(<expr pos:start="127:9" pos:end="127:37"><name pos:start="127:9" pos:end="127:37"><name pos:start="127:9" pos:end="127:11">smc</name><operator pos:start="127:12" pos:end="127:13">-&gt;</operator><name pos:start="127:14" pos:end="127:37">pre_2_10_has_unused_icps</name></name></expr>)</condition> <block pos:start="127:40" pos:end="153:5">{<block_content pos:start="129:9" pos:end="151:9">

        <decl_stmt pos:start="129:9" pos:end="129:70"><decl pos:start="129:9" pos:end="129:69"><type pos:start="129:9" pos:end="129:27"><name pos:start="129:9" pos:end="129:25">sPAPRCPUCoreClass</name> <modifier pos:start="129:27" pos:end="129:27">*</modifier></type><name pos:start="129:28" pos:end="129:30">scc</name> <init pos:start="129:32" pos:end="129:69">= <expr pos:start="129:34" pos:end="129:69"><call pos:start="129:34" pos:end="129:69"><name pos:start="129:34" pos:end="129:57">SPAPR_CPU_CORE_GET_CLASS</name><argument_list pos:start="129:58" pos:end="129:69">(<argument pos:start="129:59" pos:end="129:68"><expr pos:start="129:59" pos:end="129:68"><call pos:start="129:59" pos:end="129:68"><name pos:start="129:59" pos:end="129:64">OBJECT</name><argument_list pos:start="129:65" pos:end="129:68">(<argument pos:start="129:66" pos:end="129:67"><expr pos:start="129:66" pos:end="129:67"><name pos:start="129:66" pos:end="129:67">cc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="131:9" pos:end="131:69"><decl pos:start="131:9" pos:end="131:68"><type pos:start="131:9" pos:end="131:20"><specifier pos:start="131:9" pos:end="131:13">const</specifier> <name pos:start="131:15" pos:end="131:18">char</name> <modifier pos:start="131:20" pos:end="131:20">*</modifier></type><name pos:start="131:21" pos:end="131:28">typename</name> <init pos:start="131:30" pos:end="131:68">= <expr pos:start="131:32" pos:end="131:68"><call pos:start="131:32" pos:end="131:68"><name pos:start="131:32" pos:end="131:52">object_class_get_name</name><argument_list pos:start="131:53" pos:end="131:68">(<argument pos:start="131:54" pos:end="131:67"><expr pos:start="131:54" pos:end="131:67"><name pos:start="131:54" pos:end="131:67"><name pos:start="131:54" pos:end="131:56">scc</name><operator pos:start="131:57" pos:end="131:58">-&gt;</operator><name pos:start="131:59" pos:end="131:67">cpu_class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="133:9" pos:end="133:62"><decl pos:start="133:9" pos:end="133:61"><type pos:start="133:9" pos:end="133:14"><name pos:start="133:9" pos:end="133:14">size_t</name></type> <name pos:start="133:16" pos:end="133:19">size</name> <init pos:start="133:21" pos:end="133:61">= <expr pos:start="133:23" pos:end="133:61"><call pos:start="133:23" pos:end="133:61"><name pos:start="133:23" pos:end="133:51">object_type_get_instance_size</name><argument_list pos:start="133:52" pos:end="133:61">(<argument pos:start="133:53" pos:end="133:60"><expr pos:start="133:53" pos:end="133:60"><name pos:start="133:53" pos:end="133:60">typename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="135:9" pos:end="135:14"><decl pos:start="135:9" pos:end="135:13"><type pos:start="135:9" pos:end="135:11"><name pos:start="135:9" pos:end="135:11">int</name></type> <name pos:start="135:13" pos:end="135:13">i</name></decl>;</decl_stmt>



        <for pos:start="139:9" pos:end="151:9">for <control pos:start="139:13" pos:end="139:44">(<init pos:start="139:14" pos:end="139:19"><expr pos:start="139:14" pos:end="139:18"><name pos:start="139:14" pos:end="139:14">i</name> <operator pos:start="139:16" pos:end="139:16">=</operator> <literal type="number" pos:start="139:18" pos:end="139:18">0</literal></expr>;</init> <condition pos:start="139:21" pos:end="139:39"><expr pos:start="139:21" pos:end="139:38"><name pos:start="139:21" pos:end="139:21">i</name> <operator pos:start="139:23" pos:end="139:23">&lt;</operator> <name pos:start="139:25" pos:end="139:38"><name pos:start="139:25" pos:end="139:26">cc</name><operator pos:start="139:27" pos:end="139:28">-&gt;</operator><name pos:start="139:29" pos:end="139:38">nr_threads</name></name></expr>;</condition> <incr pos:start="139:41" pos:end="139:43"><expr pos:start="139:41" pos:end="139:43"><name pos:start="139:41" pos:end="139:41">i</name><operator pos:start="139:42" pos:end="139:43">++</operator></expr></incr>)</control> <block pos:start="139:46" pos:end="151:9">{<block_content pos:start="141:13" pos:end="149:65">

            <decl_stmt pos:start="141:13" pos:end="141:51"><decl pos:start="141:13" pos:end="141:50"><type pos:start="141:13" pos:end="141:26"><name pos:start="141:13" pos:end="141:24">sPAPRCPUCore</name> <modifier pos:start="141:26" pos:end="141:26">*</modifier></type><name pos:start="141:27" pos:end="141:28">sc</name> <init pos:start="141:30" pos:end="141:50">= <expr pos:start="141:32" pos:end="141:50"><call pos:start="141:32" pos:end="141:50"><name pos:start="141:32" pos:end="141:45">SPAPR_CPU_CORE</name><argument_list pos:start="141:46" pos:end="141:50">(<argument pos:start="141:47" pos:end="141:49"><expr pos:start="141:47" pos:end="141:49"><name pos:start="141:47" pos:end="141:49">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="143:13" pos:end="143:47"><decl pos:start="143:13" pos:end="143:46"><type pos:start="143:13" pos:end="143:18"><name pos:start="143:13" pos:end="143:16">void</name> <modifier pos:start="143:18" pos:end="143:18">*</modifier></type><name pos:start="143:19" pos:end="143:21">obj</name> <init pos:start="143:23" pos:end="143:46">= <expr pos:start="143:25" pos:end="143:46"><name pos:start="143:25" pos:end="143:35"><name pos:start="143:25" pos:end="143:26">sc</name><operator pos:start="143:27" pos:end="143:28">-&gt;</operator><name pos:start="143:29" pos:end="143:35">threads</name></name> <operator pos:start="143:37" pos:end="143:37">+</operator> <name pos:start="143:39" pos:end="143:39">i</name> <operator pos:start="143:41" pos:end="143:41">*</operator> <name pos:start="143:43" pos:end="143:46">size</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="147:13" pos:end="147:26"><expr pos:start="147:13" pos:end="147:25"><name pos:start="147:13" pos:end="147:14">cs</name> <operator pos:start="147:16" pos:end="147:16">=</operator> <call pos:start="147:18" pos:end="147:25"><name pos:start="147:18" pos:end="147:20">CPU</name><argument_list pos:start="147:21" pos:end="147:25">(<argument pos:start="147:22" pos:end="147:24"><expr pos:start="147:22" pos:end="147:24"><name pos:start="147:22" pos:end="147:24">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:65"><expr pos:start="149:13" pos:end="149:64"><call pos:start="149:13" pos:end="149:64"><name pos:start="149:13" pos:end="149:49">pre_2_10_vmstate_unregister_dummy_icp</name><argument_list pos:start="149:50" pos:end="149:64">(<argument pos:start="149:51" pos:end="149:63"><expr pos:start="149:51" pos:end="149:63"><name pos:start="149:51" pos:end="149:63"><name pos:start="149:51" pos:end="149:52">cs</name><operator pos:start="149:53" pos:end="149:54">-&gt;</operator><name pos:start="149:55" pos:end="149:63">cpu_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
