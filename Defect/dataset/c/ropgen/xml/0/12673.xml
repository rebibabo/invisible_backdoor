<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12673.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">m5206_mbar_update</name><parameter_list pos:start="1:30" pos:end="1:50">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:48"><name pos:start="1:31" pos:end="1:46">m5206_mbar_state</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:46">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">vector</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">level</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:36"><expr pos:start="13:5" pos:end="13:35"><name pos:start="13:5" pos:end="13:7">irq</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:35"><name pos:start="13:11" pos:end="13:32">m5206_find_pending_irq</name><argument_list pos:start="13:33" pos:end="13:35">(<argument pos:start="13:34" pos:end="13:34"><expr pos:start="13:34" pos:end="13:34"><name pos:start="13:34" pos:end="13:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="71:5"><if pos:start="15:5" pos:end="65:5">if <condition pos:start="15:8" pos:end="15:12">(<expr pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">irq</name></expr>)</condition> <block pos:start="15:14" pos:end="65:5">{<block_content pos:start="17:9" pos:end="63:9">

        <decl_stmt pos:start="17:9" pos:end="17:16"><decl pos:start="17:9" pos:end="17:15"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:15">tmp</name></decl>;</decl_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:26"><expr pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:11">tmp</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:25"><name pos:start="19:15" pos:end="19:15">s</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:20">icr</name><index pos:start="19:21" pos:end="19:25">[<expr pos:start="19:22" pos:end="19:24"><name pos:start="19:22" pos:end="19:24">irq</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:31"><expr pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:13">level</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <operator pos:start="21:17" pos:end="21:17">(</operator><name pos:start="21:18" pos:end="21:20">tmp</name> <operator pos:start="21:22" pos:end="21:23">&gt;&gt;</operator> <literal type="number" pos:start="21:25" pos:end="21:25">2</literal><operator pos:start="21:26" pos:end="21:26">)</operator> <operator pos:start="21:28" pos:end="21:28">&amp;</operator> <literal type="number" pos:start="21:30" pos:end="21:30">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="63:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:23">(<expr pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:15">tmp</name> <operator pos:start="23:17" pos:end="23:17">&amp;</operator> <literal type="number" pos:start="23:19" pos:end="23:22">0x80</literal></expr>)</condition> <block pos:start="23:25" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:32">

            <comment type="block" pos:start="25:13" pos:end="25:30">/* Autovector.  */</comment>

            <expr_stmt pos:start="27:13" pos:end="27:32"><expr pos:start="27:13" pos:end="27:31"><name pos:start="27:13" pos:end="27:18">vector</name> <operator pos:start="27:20" pos:end="27:20">=</operator> <literal type="number" pos:start="27:22" pos:end="27:25">24</literal> <operator pos:start="27:25" pos:end="27:25">+</operator> <name pos:start="27:27" pos:end="27:31">level</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="63:9">else <block pos:start="29:16" pos:end="63:9">{<block_content pos:start="31:13" pos:end="61:13">

            <switch pos:start="31:13" pos:end="61:13">switch <condition pos:start="31:20" pos:end="31:24">(<expr pos:start="31:21" pos:end="31:23"><name pos:start="31:21" pos:end="31:23">irq</name></expr>)</condition> <block pos:start="31:26" pos:end="61:13">{<block_content pos:start="33:13" pos:end="59:22">

            <case pos:start="33:13" pos:end="33:19">case <expr pos:start="33:18" pos:end="33:18"><literal type="number" pos:start="33:18" pos:end="33:18">8</literal></expr>:</case> <comment type="block" pos:start="33:21" pos:end="33:29">/* SWT */</comment>

                <expr_stmt pos:start="35:17" pos:end="35:34"><expr pos:start="35:17" pos:end="35:33"><name pos:start="35:17" pos:end="35:22">vector</name> <operator pos:start="35:24" pos:end="35:24">=</operator> <name pos:start="35:26" pos:end="35:33"><name pos:start="35:26" pos:end="35:26">s</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:33">swivr</name></name></expr>;</expr_stmt>

                <break pos:start="37:17" pos:end="37:22">break;</break>

            <case pos:start="39:13" pos:end="39:20">case <expr pos:start="39:18" pos:end="39:19"><literal type="number" pos:start="39:18" pos:end="39:19">12</literal></expr>:</case> <comment type="block" pos:start="39:22" pos:end="39:32">/* UART1 */</comment>

                <expr_stmt pos:start="41:17" pos:end="41:36"><expr pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:22">vector</name> <operator pos:start="41:24" pos:end="41:24">=</operator> <name pos:start="41:26" pos:end="41:35"><name pos:start="41:26" pos:end="41:26">s</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:32">uivr</name><index pos:start="41:33" pos:end="41:35">[<expr pos:start="41:34" pos:end="41:34"><literal type="number" pos:start="41:34" pos:end="41:34">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="43:17" pos:end="43:22">break;</break>

            <case pos:start="45:13" pos:end="45:20">case <expr pos:start="45:18" pos:end="45:19"><literal type="number" pos:start="45:18" pos:end="45:19">13</literal></expr>:</case> <comment type="block" pos:start="45:22" pos:end="45:32">/* UART2 */</comment>

                <expr_stmt pos:start="47:17" pos:end="47:36"><expr pos:start="47:17" pos:end="47:35"><name pos:start="47:17" pos:end="47:22">vector</name> <operator pos:start="47:24" pos:end="47:24">=</operator> <name pos:start="47:26" pos:end="47:35"><name pos:start="47:26" pos:end="47:26">s</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:32">uivr</name><index pos:start="47:33" pos:end="47:35">[<expr pos:start="47:34" pos:end="47:34"><literal type="number" pos:start="47:34" pos:end="47:34">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="49:17" pos:end="49:22">break;</break>

            <default pos:start="51:13" pos:end="51:20">default:</default>

                <comment type="block" pos:start="53:17" pos:end="53:38">/* Unknown vector.  */</comment>

                <expr_stmt pos:start="55:17" pos:end="55:70"><expr pos:start="55:17" pos:end="55:69"><call pos:start="55:17" pos:end="55:69"><name pos:start="55:17" pos:end="55:23">fprintf</name><argument_list pos:start="55:24" pos:end="55:69">(<argument pos:start="55:25" pos:end="55:30"><expr pos:start="55:25" pos:end="55:30"><name pos:start="55:25" pos:end="55:30">stderr</name></expr></argument>, <argument pos:start="55:33" pos:end="55:63"><expr pos:start="55:33" pos:end="55:63"><literal type="string" pos:start="55:33" pos:end="55:63">"Unhandled vector for IRQ %d\n"</literal></expr></argument>, <argument pos:start="55:66" pos:end="55:68"><expr pos:start="55:66" pos:end="55:68"><name pos:start="55:66" pos:end="55:68">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:29"><expr pos:start="57:17" pos:end="57:28"><name pos:start="57:17" pos:end="57:22">vector</name> <operator pos:start="57:24" pos:end="57:24">=</operator> <literal type="number" pos:start="57:26" pos:end="57:28">0xf</literal></expr>;</expr_stmt>

                <break pos:start="59:17" pos:end="59:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="71:5">else <block pos:start="65:12" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:19">

        <expr_stmt pos:start="67:9" pos:end="67:18"><expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:13">level</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <literal type="number" pos:start="67:17" pos:end="67:17">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:19"><expr pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:14">vector</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <literal type="number" pos:start="69:18" pos:end="69:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:46"><expr pos:start="73:5" pos:end="73:45"><call pos:start="73:5" pos:end="73:45"><name pos:start="73:5" pos:end="73:22">m68k_set_irq_level</name><argument_list pos:start="73:23" pos:end="73:45">(<argument pos:start="73:24" pos:end="73:29"><expr pos:start="73:24" pos:end="73:29"><name pos:start="73:24" pos:end="73:29"><name pos:start="73:24" pos:end="73:24">s</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:29">cpu</name></name></expr></argument>, <argument pos:start="73:32" pos:end="73:36"><expr pos:start="73:32" pos:end="73:36"><name pos:start="73:32" pos:end="73:36">level</name></expr></argument>, <argument pos:start="73:39" pos:end="73:44"><expr pos:start="73:39" pos:end="73:44"><name pos:start="73:39" pos:end="73:44">vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
