<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24676.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">load_flt_binary</name><parameter_list pos:start="1:20" pos:end="3:45">(<parameter pos:start="1:21" pos:end="1:46"><decl pos:start="1:21" pos:end="1:46"><type pos:start="1:21" pos:end="1:46"><name pos:start="1:21" pos:end="1:39"><name pos:start="1:21" pos:end="1:26">struct</name> <name pos:start="1:28" pos:end="1:39">linux_binprm</name></name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type> <name pos:start="1:43" pos:end="1:46">bprm</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:76"><decl pos:start="1:49" pos:end="1:76"><type pos:start="1:49" pos:end="1:76"><name pos:start="1:49" pos:end="1:69"><name pos:start="1:49" pos:end="1:54">struct</name> <name pos:start="1:56" pos:end="1:69">target_pt_regs</name></name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type> <name pos:start="1:73" pos:end="1:76">regs</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:44"><decl pos:start="3:21" pos:end="3:44"><type pos:start="3:21" pos:end="3:44"><name pos:start="3:21" pos:end="3:37"><name pos:start="3:21" pos:end="3:26">struct</name> <name pos:start="3:28" pos:end="3:37">image_info</name></name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type> <name pos:start="3:41" pos:end="3:44">info</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="211:1">{<block_content pos:start="7:5" pos:end="209:13">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:19">lib_info</name></name></type> <name pos:start="7:21" pos:end="7:44"><name pos:start="7:21" pos:end="7:27">libinfo</name><index pos:start="7:28" pos:end="7:44">[<expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43">MAX_SHARED_LIBS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">abi_ulong</name></type> <name pos:start="9:15" pos:end="9:15">p</name> <init pos:start="9:17" pos:end="9:25">= <expr pos:start="9:19" pos:end="9:25"><name pos:start="9:19" pos:end="9:25"><name pos:start="9:19" pos:end="9:22">bprm</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:25">p</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">abi_ulong</name></type> <name pos:start="11:15" pos:end="11:23">stack_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">abi_ulong</name></type> <name pos:start="13:15" pos:end="13:24">start_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:13">abi_ulong</name></type> <name pos:start="15:15" pos:end="15:16">sp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:12"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:12">j</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:40"><expr pos:start="23:5" pos:end="23:39"><call pos:start="23:5" pos:end="23:39"><name pos:start="23:5" pos:end="23:10">memset</name><argument_list pos:start="23:11" pos:end="23:39">(<argument pos:start="23:12" pos:end="23:18"><expr pos:start="23:12" pos:end="23:18"><name pos:start="23:12" pos:end="23:18">libinfo</name></expr></argument>, <argument pos:start="23:21" pos:end="23:21"><expr pos:start="23:21" pos:end="23:21"><literal type="number" pos:start="23:21" pos:end="23:21">0</literal></expr></argument>, <argument pos:start="23:24" pos:end="23:38"><expr pos:start="23:24" pos:end="23:38"><sizeof pos:start="23:24" pos:end="23:38">sizeof<argument_list pos:start="23:30" pos:end="23:38">(<argument pos:start="23:31" pos:end="23:37"><expr pos:start="23:31" pos:end="23:37"><name pos:start="23:31" pos:end="23:37">libinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="25:5" pos:end="37:7">/*

     * We have to add the size of our arguments to our stack size

     * otherwise it's too easy for users to create stack overflows

     * by passing in a huge argument list.  And yes,  we have to be

     * pedantic and include space for the argv/envp array as it may have

     * a lot of entries.

     */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:18"><expr pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:13">stack_len</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>;</expr_stmt>

    <for pos:start="41:5" pos:end="47:5">for <control pos:start="41:9" pos:end="41:36">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">i</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:31"><expr pos:start="41:17" pos:end="41:30"><name pos:start="41:17" pos:end="41:17">i</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <name pos:start="41:21" pos:end="41:30"><name pos:start="41:21" pos:end="41:24">bprm</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:30">argc</name></name></expr>;</condition> <incr pos:start="41:33" pos:end="41:35"><expr pos:start="41:33" pos:end="41:35"><operator pos:start="41:33" pos:end="41:34">++</operator><name pos:start="41:35" pos:end="41:35">i</name></expr></incr>)</control> <block pos:start="41:38" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:43">

        <comment type="block" pos:start="43:9" pos:end="43:30">/* the argv strings */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:43"><expr pos:start="45:9" pos:end="45:42"><name pos:start="45:9" pos:end="45:17">stack_len</name> <operator pos:start="45:19" pos:end="45:20">+=</operator> <call pos:start="45:22" pos:end="45:42"><name pos:start="45:22" pos:end="45:27">strlen</name><argument_list pos:start="45:28" pos:end="45:42">(<argument pos:start="45:29" pos:end="45:41"><expr pos:start="45:29" pos:end="45:41"><name pos:start="45:29" pos:end="45:41"><name pos:start="45:29" pos:end="45:32">bprm</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:38">argv</name><index pos:start="45:39" pos:end="45:41">[<expr pos:start="45:40" pos:end="45:40"><name pos:start="45:40" pos:end="45:40">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="49:5" pos:end="55:5">for <control pos:start="49:9" pos:end="49:36">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:31"><expr pos:start="49:17" pos:end="49:30"><name pos:start="49:17" pos:end="49:17">i</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <name pos:start="49:21" pos:end="49:30"><name pos:start="49:21" pos:end="49:24">bprm</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:30">envc</name></name></expr>;</condition> <incr pos:start="49:33" pos:end="49:35"><expr pos:start="49:33" pos:end="49:35"><operator pos:start="49:33" pos:end="49:34">++</operator><name pos:start="49:35" pos:end="49:35">i</name></expr></incr>)</control> <block pos:start="49:38" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:43">

        <comment type="block" pos:start="51:9" pos:end="51:30">/* the envp strings */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:43"><expr pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:17">stack_len</name> <operator pos:start="53:19" pos:end="53:20">+=</operator> <call pos:start="53:22" pos:end="53:42"><name pos:start="53:22" pos:end="53:27">strlen</name><argument_list pos:start="53:28" pos:end="53:42">(<argument pos:start="53:29" pos:end="53:41"><expr pos:start="53:29" pos:end="53:41"><name pos:start="53:29" pos:end="53:41"><name pos:start="53:29" pos:end="53:32">bprm</name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:38">envp</name><index pos:start="53:39" pos:end="53:41">[<expr pos:start="53:40" pos:end="53:40"><name pos:start="53:40" pos:end="53:40">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="57:5" pos:end="57:38"><expr pos:start="57:5" pos:end="57:37"><name pos:start="57:5" pos:end="57:13">stack_len</name> <operator pos:start="57:15" pos:end="57:16">+=</operator> <operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:28"><name pos:start="57:19" pos:end="57:22">bprm</name><operator pos:start="57:23" pos:end="57:24">-&gt;</operator><name pos:start="57:25" pos:end="57:28">argc</name></name> <operator pos:start="57:30" pos:end="57:30">+</operator> <literal type="number" pos:start="57:32" pos:end="57:32">1</literal><operator pos:start="57:33" pos:end="57:33">)</operator> <operator pos:start="57:35" pos:end="57:35">*</operator> <literal type="number" pos:start="57:37" pos:end="57:37">4</literal></expr>;</expr_stmt> <comment type="block" pos:start="57:40" pos:end="57:59">/* the argv array */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:38"><expr pos:start="59:5" pos:end="59:37"><name pos:start="59:5" pos:end="59:13">stack_len</name> <operator pos:start="59:15" pos:end="59:16">+=</operator> <operator pos:start="59:18" pos:end="59:18">(</operator><name pos:start="59:19" pos:end="59:28"><name pos:start="59:19" pos:end="59:22">bprm</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:28">envc</name></name> <operator pos:start="59:30" pos:end="59:30">+</operator> <literal type="number" pos:start="59:32" pos:end="59:32">1</literal><operator pos:start="59:33" pos:end="59:33">)</operator> <operator pos:start="59:35" pos:end="59:35">*</operator> <literal type="number" pos:start="59:37" pos:end="59:37">4</literal></expr>;</expr_stmt> <comment type="block" pos:start="59:40" pos:end="59:59">/* the envp array */</comment>





    <expr_stmt pos:start="65:5" pos:end="65:55"><expr pos:start="65:5" pos:end="65:54"><name pos:start="65:5" pos:end="65:7">res</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:54"><name pos:start="65:11" pos:end="65:24">load_flat_file</name><argument_list pos:start="65:25" pos:end="65:54">(<argument pos:start="65:26" pos:end="65:29"><expr pos:start="65:26" pos:end="65:29"><name pos:start="65:26" pos:end="65:29">bprm</name></expr></argument>, <argument pos:start="65:32" pos:end="65:38"><expr pos:start="65:32" pos:end="65:38"><name pos:start="65:32" pos:end="65:38">libinfo</name></expr></argument>, <argument pos:start="65:41" pos:end="65:41"><expr pos:start="65:41" pos:end="65:41"><literal type="number" pos:start="65:41" pos:end="65:41">0</literal></expr></argument>, <argument pos:start="65:44" pos:end="65:53"><expr pos:start="65:44" pos:end="65:53"><operator pos:start="65:44" pos:end="65:44">&amp;</operator><name pos:start="65:45" pos:end="65:53">stack_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="69:23"><if pos:start="67:5" pos:end="69:23">if <condition pos:start="67:8" pos:end="67:35">(<expr pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:11">res</name> <operator pos:start="67:13" pos:end="67:13">&gt;</operator> <operator pos:start="67:15" pos:end="67:15">(</operator><name pos:start="67:16" pos:end="67:23">unsigned</name> <name pos:start="67:25" pos:end="67:28">long</name><operator pos:start="67:29" pos:end="67:29">)</operator><operator pos:start="67:30" pos:end="67:30">-</operator><literal type="number" pos:start="67:31" pos:end="67:34">4096</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:23"><block_content pos:start="69:13" pos:end="69:23">

            <return pos:start="69:13" pos:end="69:23">return <expr pos:start="69:20" pos:end="69:22"><name pos:start="69:20" pos:end="69:22">res</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:56">/* Update data segment pointers for all libraries */</comment>

    <for pos:start="75:5" pos:end="103:5">for <control pos:start="75:9" pos:end="75:37">(<init pos:start="75:10" pos:end="75:13"><expr pos:start="75:10" pos:end="75:12"><name pos:start="75:10" pos:end="75:10">i</name><operator pos:start="75:11" pos:end="75:11">=</operator><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</init> <condition pos:start="75:15" pos:end="75:32"><expr pos:start="75:15" pos:end="75:31"><name pos:start="75:15" pos:end="75:15">i</name><operator pos:start="75:16" pos:end="75:16">&lt;</operator><name pos:start="75:17" pos:end="75:31">MAX_SHARED_LIBS</name></expr>;</condition> <incr pos:start="75:34" pos:end="75:36"><expr pos:start="75:34" pos:end="75:36"><name pos:start="75:34" pos:end="75:34">i</name><operator pos:start="75:35" pos:end="75:36">++</operator></expr></incr>)</control> <block pos:start="75:39" pos:end="103:5">{<block_content pos:start="77:9" pos:end="101:9">

        <if_stmt pos:start="77:9" pos:end="101:9"><if pos:start="77:9" pos:end="101:9">if <condition pos:start="77:12" pos:end="77:30">(<expr pos:start="77:13" pos:end="77:29"><name pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:19">libinfo</name><index pos:start="77:20" pos:end="77:22">[<expr pos:start="77:21" pos:end="77:21"><name pos:start="77:21" pos:end="77:21">i</name></expr>]</index></name><operator pos:start="77:23" pos:end="77:23">.</operator><name pos:start="77:24" pos:end="77:29">loaded</name></expr>)</condition> <block pos:start="77:32" pos:end="101:9">{<block_content pos:start="79:13" pos:end="99:13">

            <decl_stmt pos:start="79:13" pos:end="79:24"><decl pos:start="79:13" pos:end="79:23"><type pos:start="79:13" pos:end="79:21"><name pos:start="79:13" pos:end="79:21">abi_ulong</name></type> <name pos:start="79:23" pos:end="79:23">p</name></decl>;</decl_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:38"><expr pos:start="81:13" pos:end="81:37"><name pos:start="81:13" pos:end="81:13">p</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <name pos:start="81:17" pos:end="81:26"><name pos:start="81:17" pos:end="81:23">libinfo</name><index pos:start="81:24" pos:end="81:26">[<expr pos:start="81:25" pos:end="81:25"><name pos:start="81:25" pos:end="81:25">i</name></expr>]</index></name><operator pos:start="81:27" pos:end="81:27">.</operator><name pos:start="81:28" pos:end="81:37">start_data</name></expr>;</expr_stmt>

            <for pos:start="83:13" pos:end="99:13">for <control pos:start="83:17" pos:end="83:45">(<init pos:start="83:18" pos:end="83:21"><expr pos:start="83:18" pos:end="83:20"><name pos:start="83:18" pos:end="83:18">j</name><operator pos:start="83:19" pos:end="83:19">=</operator><literal type="number" pos:start="83:20" pos:end="83:20">0</literal></expr>;</init> <condition pos:start="83:23" pos:end="83:40"><expr pos:start="83:23" pos:end="83:39"><name pos:start="83:23" pos:end="83:23">j</name><operator pos:start="83:24" pos:end="83:24">&lt;</operator><name pos:start="83:25" pos:end="83:39">MAX_SHARED_LIBS</name></expr>;</condition> <incr pos:start="83:42" pos:end="83:44"><expr pos:start="83:42" pos:end="83:44"><name pos:start="83:42" pos:end="83:42">j</name><operator pos:start="83:43" pos:end="83:44">++</operator></expr></incr>)</control> <block pos:start="83:47" pos:end="99:13">{<block_content pos:start="85:17" pos:end="97:35">

                <expr_stmt pos:start="85:17" pos:end="85:23"><expr pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:17">p</name> <operator pos:start="85:19" pos:end="85:20">-=</operator> <literal type="number" pos:start="85:22" pos:end="85:22">4</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="87:17" pos:end="87:56">/* FIXME - handle put_user() failures */</comment>

                <if_stmt pos:start="89:17" pos:end="97:35"><if pos:start="89:17" pos:end="97:35">if <condition pos:start="89:20" pos:end="95:36">(<expr pos:start="89:21" pos:end="95:35"><call pos:start="89:21" pos:end="95:35"><name pos:start="89:21" pos:end="89:32">put_user_ual</name><argument_list pos:start="89:33" pos:end="95:35">(<argument pos:start="89:34" pos:end="93:47"><expr pos:start="89:34" pos:end="93:47"><ternary pos:start="89:34" pos:end="93:47"><condition pos:start="89:34" pos:end="91:34"><expr pos:start="89:34" pos:end="89:50"><name pos:start="89:34" pos:end="89:43"><name pos:start="89:34" pos:end="89:40">libinfo</name><index pos:start="89:41" pos:end="89:43">[<expr pos:start="89:42" pos:end="89:42"><name pos:start="89:42" pos:end="89:42">j</name></expr>]</index></name><operator pos:start="89:44" pos:end="89:44">.</operator><name pos:start="89:45" pos:end="89:50">loaded</name></expr>

                                 ?</condition><then pos:start="91:36" pos:end="91:56"> <expr pos:start="91:36" pos:end="91:56"><name pos:start="91:36" pos:end="91:45"><name pos:start="91:36" pos:end="91:42">libinfo</name><index pos:start="91:43" pos:end="91:45">[<expr pos:start="91:44" pos:end="91:44"><name pos:start="91:44" pos:end="91:44">j</name></expr>]</index></name><operator pos:start="91:46" pos:end="91:46">.</operator><name pos:start="91:47" pos:end="91:56">start_data</name></expr>

                                 </then><else pos:start="93:34" pos:end="93:47">: <expr pos:start="93:36" pos:end="93:47"><name pos:start="93:36" pos:end="93:47">UNLOADED_LIB</name></expr></else></ternary></expr></argument>,

                                 <argument pos:start="95:34" pos:end="95:34"><expr pos:start="95:34" pos:end="95:34"><name pos:start="95:34" pos:end="95:34">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="97:21" pos:end="97:35"><block_content pos:start="97:21" pos:end="97:35">

                    <return pos:start="97:21" pos:end="97:35">return <expr pos:start="97:28" pos:end="97:34"><operator pos:start="97:28" pos:end="97:28">-</operator><name pos:start="97:29" pos:end="97:34">EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="107:5" pos:end="107:58"><expr pos:start="107:5" pos:end="107:57"><name pos:start="107:5" pos:end="107:5">p</name> <operator pos:start="107:7" pos:end="107:7">=</operator> <operator pos:start="107:9" pos:end="107:9">(</operator><operator pos:start="107:10" pos:end="107:10">(</operator><name pos:start="107:11" pos:end="107:20"><name pos:start="107:11" pos:end="107:17">libinfo</name><index pos:start="107:18" pos:end="107:20">[<expr pos:start="107:19" pos:end="107:19"><literal type="number" pos:start="107:19" pos:end="107:19">0</literal></expr>]</index></name><operator pos:start="107:21" pos:end="107:21">.</operator><name pos:start="107:22" pos:end="107:30">start_brk</name> <operator pos:start="107:32" pos:end="107:32">+</operator> <name pos:start="107:34" pos:end="107:42">stack_len</name> <operator pos:start="107:44" pos:end="107:44">+</operator> <literal type="number" pos:start="107:46" pos:end="107:46">3</literal><operator pos:start="107:47" pos:end="107:47">)</operator> <operator pos:start="107:49" pos:end="107:49">&amp;</operator> <operator pos:start="107:51" pos:end="107:51">~</operator><literal type="number" pos:start="107:52" pos:end="107:52">3</literal><operator pos:start="107:53" pos:end="107:53">)</operator> <operator pos:start="107:55" pos:end="107:55">-</operator> <literal type="number" pos:start="107:57" pos:end="107:57">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:30"><expr pos:start="109:5" pos:end="109:29"><call pos:start="109:5" pos:end="109:29"><name pos:start="109:5" pos:end="109:11">DBG_FLT</name><argument_list pos:start="109:12" pos:end="109:29">(<argument pos:start="109:13" pos:end="109:20"><expr pos:start="109:13" pos:end="109:20"><literal type="string" pos:start="109:13" pos:end="109:20">"p=%x\n"</literal></expr></argument>, <argument pos:start="109:23" pos:end="109:28"><expr pos:start="109:23" pos:end="109:28"><operator pos:start="109:23" pos:end="109:23">(</operator><name pos:start="109:24" pos:end="109:26">int</name><operator pos:start="109:27" pos:end="109:27">)</operator><name pos:start="109:28" pos:end="109:28">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:26">/* Copy argv/envp.  */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:48"><expr pos:start="115:5" pos:end="115:47"><name pos:start="115:5" pos:end="115:5">p</name> <operator pos:start="115:7" pos:end="115:7">=</operator> <call pos:start="115:9" pos:end="115:47"><name pos:start="115:9" pos:end="115:20">copy_strings</name><argument_list pos:start="115:21" pos:end="115:47">(<argument pos:start="115:22" pos:end="115:22"><expr pos:start="115:22" pos:end="115:22"><name pos:start="115:22" pos:end="115:22">p</name></expr></argument>, <argument pos:start="115:25" pos:end="115:34"><expr pos:start="115:25" pos:end="115:34"><name pos:start="115:25" pos:end="115:34"><name pos:start="115:25" pos:end="115:28">bprm</name><operator pos:start="115:29" pos:end="115:30">-&gt;</operator><name pos:start="115:31" pos:end="115:34">envc</name></name></expr></argument>, <argument pos:start="115:37" pos:end="115:46"><expr pos:start="115:37" pos:end="115:46"><name pos:start="115:37" pos:end="115:46"><name pos:start="115:37" pos:end="115:40">bprm</name><operator pos:start="115:41" pos:end="115:42">-&gt;</operator><name pos:start="115:43" pos:end="115:46">envp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:48"><expr pos:start="117:5" pos:end="117:47"><name pos:start="117:5" pos:end="117:5">p</name> <operator pos:start="117:7" pos:end="117:7">=</operator> <call pos:start="117:9" pos:end="117:47"><name pos:start="117:9" pos:end="117:20">copy_strings</name><argument_list pos:start="117:21" pos:end="117:47">(<argument pos:start="117:22" pos:end="117:22"><expr pos:start="117:22" pos:end="117:22"><name pos:start="117:22" pos:end="117:22">p</name></expr></argument>, <argument pos:start="117:25" pos:end="117:34"><expr pos:start="117:25" pos:end="117:34"><name pos:start="117:25" pos:end="117:34"><name pos:start="117:25" pos:end="117:28">bprm</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:34">argc</name></name></expr></argument>, <argument pos:start="117:37" pos:end="117:46"><expr pos:start="117:37" pos:end="117:46"><name pos:start="117:37" pos:end="117:46"><name pos:start="117:37" pos:end="117:40">bprm</name><operator pos:start="117:41" pos:end="117:42">-&gt;</operator><name pos:start="117:43" pos:end="117:46">argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="119:5" pos:end="119:23">/* Align stack.  */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:49"><expr pos:start="121:5" pos:end="121:48"><name pos:start="121:5" pos:end="121:6">sp</name> <operator pos:start="121:8" pos:end="121:8">=</operator> <name pos:start="121:10" pos:end="121:10">p</name> <operator pos:start="121:12" pos:end="121:12">&amp;</operator> <operator pos:start="121:14" pos:end="121:14">~</operator><operator pos:start="121:15" pos:end="121:15">(</operator><name pos:start="121:16" pos:end="121:24">abi_ulong</name><operator pos:start="121:25" pos:end="121:25">)</operator><operator pos:start="121:26" pos:end="121:26">(</operator><sizeof pos:start="121:27" pos:end="121:43">sizeof<argument_list pos:start="121:33" pos:end="121:43">(<argument pos:start="121:34" pos:end="121:42"><expr pos:start="121:34" pos:end="121:42"><name pos:start="121:34" pos:end="121:42">abi_ulong</name></expr></argument>)</argument_list></sizeof> <operator pos:start="121:45" pos:end="121:45">-</operator> <literal type="number" pos:start="121:47" pos:end="121:47">1</literal><operator pos:start="121:48" pos:end="121:48">)</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="123:5" pos:end="125:69">/* Enforce final stack alignment of 16 bytes.  This is sufficient

       for all current targets, and excess alignment is harmless.  */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:44"><expr pos:start="127:5" pos:end="127:43"><name pos:start="127:5" pos:end="127:13">stack_len</name> <operator pos:start="127:15" pos:end="127:15">=</operator> <name pos:start="127:17" pos:end="127:26"><name pos:start="127:17" pos:end="127:20">bprm</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:26">envc</name></name> <operator pos:start="127:28" pos:end="127:28">+</operator> <name pos:start="127:30" pos:end="127:39"><name pos:start="127:30" pos:end="127:33">bprm</name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:39">argc</name></name> <operator pos:start="127:41" pos:end="127:41">+</operator> <literal type="number" pos:start="127:43" pos:end="127:43">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:19"><expr pos:start="129:5" pos:end="129:18"><name pos:start="129:5" pos:end="129:13">stack_len</name> <operator pos:start="129:15" pos:end="129:16">+=</operator> <literal type="number" pos:start="129:18" pos:end="129:18">3</literal></expr>;</expr_stmt>	<comment type="block" pos:start="129:25" pos:end="129:46">/* argc, arvg, argp */</comment>

    <expr_stmt pos:start="131:5" pos:end="131:35"><expr pos:start="131:5" pos:end="131:34"><name pos:start="131:5" pos:end="131:13">stack_len</name> <operator pos:start="131:15" pos:end="131:16">*=</operator> <sizeof pos:start="131:18" pos:end="131:34">sizeof<argument_list pos:start="131:24" pos:end="131:34">(<argument pos:start="131:25" pos:end="131:33"><expr pos:start="131:25" pos:end="131:33"><name pos:start="131:25" pos:end="131:33">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="135:43"><if pos:start="133:5" pos:end="135:43">if <condition pos:start="133:8" pos:end="133:30">(<expr pos:start="133:9" pos:end="133:29"><operator pos:start="133:9" pos:end="133:9">(</operator><name pos:start="133:10" pos:end="133:11">sp</name> <operator pos:start="133:13" pos:end="133:13">+</operator> <name pos:start="133:15" pos:end="133:23">stack_len</name><operator pos:start="133:24" pos:end="133:24">)</operator> <operator pos:start="133:26" pos:end="133:26">&amp;</operator> <literal type="number" pos:start="133:28" pos:end="133:29">15</literal></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:43"><block_content pos:start="135:9" pos:end="135:43">

        <expr_stmt pos:start="135:9" pos:end="135:43"><expr pos:start="135:9" pos:end="135:42"><name pos:start="135:9" pos:end="135:10">sp</name> <operator pos:start="135:12" pos:end="135:13">-=</operator> <literal type="number" pos:start="135:15" pos:end="135:18">16</literal> <operator pos:start="135:18" pos:end="135:18">-</operator> <operator pos:start="135:20" pos:end="135:20">(</operator><operator pos:start="135:21" pos:end="135:21">(</operator><name pos:start="135:22" pos:end="135:23">sp</name> <operator pos:start="135:25" pos:end="135:25">+</operator> <name pos:start="135:27" pos:end="135:35">stack_len</name><operator pos:start="135:36" pos:end="135:36">)</operator> <operator pos:start="135:38" pos:end="135:38">&amp;</operator> <literal type="number" pos:start="135:40" pos:end="135:41">15</literal><operator pos:start="135:42" pos:end="135:42">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:63"><expr pos:start="137:5" pos:end="137:62"><name pos:start="137:5" pos:end="137:6">sp</name> <operator pos:start="137:8" pos:end="137:8">=</operator> <call pos:start="137:10" pos:end="137:62"><name pos:start="137:10" pos:end="137:28">loader_build_argptr</name><argument_list pos:start="137:29" pos:end="137:62">(<argument pos:start="137:30" pos:end="137:39"><expr pos:start="137:30" pos:end="137:39"><name pos:start="137:30" pos:end="137:39"><name pos:start="137:30" pos:end="137:33">bprm</name><operator pos:start="137:34" pos:end="137:35">-&gt;</operator><name pos:start="137:36" pos:end="137:39">envc</name></name></expr></argument>, <argument pos:start="137:42" pos:end="137:51"><expr pos:start="137:42" pos:end="137:51"><name pos:start="137:42" pos:end="137:51"><name pos:start="137:42" pos:end="137:45">bprm</name><operator pos:start="137:46" pos:end="137:47">-&gt;</operator><name pos:start="137:48" pos:end="137:51">argc</name></name></expr></argument>, <argument pos:start="137:54" pos:end="137:55"><expr pos:start="137:54" pos:end="137:55"><name pos:start="137:54" pos:end="137:55">sp</name></expr></argument>, <argument pos:start="137:58" pos:end="137:58"><expr pos:start="137:58" pos:end="137:58"><name pos:start="137:58" pos:end="137:58">p</name></expr></argument>, <argument pos:start="137:61" pos:end="137:61"><expr pos:start="137:61" pos:end="137:61"><literal type="number" pos:start="137:61" pos:end="137:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="141:5" pos:end="147:7">/* Fake some return addresses to ensure the call chain will

     * initialise library in order for us.  We are required to call

     * lib 1 first, then 2, ... and finally the main program (id 0).

     */</comment>

    <expr_stmt pos:start="149:5" pos:end="156:0"><expr pos:start="149:5" pos:end="149:33"><name pos:start="149:5" pos:end="149:14">start_addr</name> <operator pos:start="149:16" pos:end="149:16">=</operator> <name pos:start="149:18" pos:end="149:27"><name pos:start="149:18" pos:end="149:24">libinfo</name><index pos:start="149:25" pos:end="149:27">[<expr pos:start="149:26" pos:end="149:26"><literal type="number" pos:start="149:26" pos:end="149:26">0</literal></expr>]</index></name><operator pos:start="149:28" pos:end="149:28">.</operator><name pos:start="149:29" pos:end="149:33">entry</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="153:1" pos:end="153:32">#<cpp:directive pos:start="153:2" pos:end="153:6">ifdef</cpp:directive> <name pos:start="153:8" pos:end="153:32">CONFIG_BINFMT_SHARED_FLAT</name></cpp:ifdef>

<cpp:error pos:start="155:1" pos:end="155:11">#<cpp:directive pos:start="155:2" pos:end="155:6">error</cpp:directive> here</cpp:error>

    <for pos:start="157:5" pos:end="176:0">for <control pos:start="157:9" pos:end="157:41">(<init pos:start="157:10" pos:end="157:31"><expr pos:start="157:10" pos:end="157:30"><name pos:start="157:10" pos:end="157:10">i</name> <operator pos:start="157:12" pos:end="157:12">=</operator> <name pos:start="157:14" pos:end="157:28">MAX_SHARED_LIBS</name><operator pos:start="157:29" pos:end="157:29">-</operator><literal type="number" pos:start="157:30" pos:end="157:30">1</literal></expr>;</init> <condition pos:start="157:33" pos:end="157:36"><expr pos:start="157:33" pos:end="157:35"><name pos:start="157:33" pos:end="157:33">i</name><operator pos:start="157:34" pos:end="157:34">&gt;</operator><literal type="number" pos:start="157:35" pos:end="157:35">0</literal></expr>;</condition> <incr pos:start="157:38" pos:end="157:40"><expr pos:start="157:38" pos:end="157:40"><name pos:start="157:38" pos:end="157:38">i</name><operator pos:start="157:39" pos:end="157:40">--</operator></expr></incr>)</control> <block pos:start="157:43" pos:end="176:0">{<block_content pos:start="159:13" pos:end="171:13">

            <if_stmt pos:start="159:13" pos:end="171:13"><if pos:start="159:13" pos:end="171:13">if <condition pos:start="159:16" pos:end="159:34">(<expr pos:start="159:17" pos:end="159:33"><name pos:start="159:17" pos:end="159:26"><name pos:start="159:17" pos:end="159:23">libinfo</name><index pos:start="159:24" pos:end="159:26">[<expr pos:start="159:25" pos:end="159:25"><name pos:start="159:25" pos:end="159:25">i</name></expr>]</index></name><operator pos:start="159:27" pos:end="159:27">.</operator><name pos:start="159:28" pos:end="159:33">loaded</name></expr>)</condition> <block pos:start="159:36" pos:end="171:13">{<block_content pos:start="163:21" pos:end="169:50">

                    <comment type="block" pos:start="161:21" pos:end="161:60">/* Push previos first to call address */</comment>

                    <expr_stmt pos:start="163:21" pos:end="163:25"><expr pos:start="163:21" pos:end="163:24"><operator pos:start="163:21" pos:end="163:22">--</operator><name pos:start="163:23" pos:end="163:24">sp</name></expr>;</expr_stmt>

                    <if_stmt pos:start="165:21" pos:end="167:39"><if pos:start="165:21" pos:end="167:39">if <condition pos:start="165:24" pos:end="165:53">(<expr pos:start="165:25" pos:end="165:52"><call pos:start="165:25" pos:end="165:52"><name pos:start="165:25" pos:end="165:36">put_user_ual</name><argument_list pos:start="165:37" pos:end="165:52">(<argument pos:start="165:38" pos:end="165:47"><expr pos:start="165:38" pos:end="165:47"><name pos:start="165:38" pos:end="165:47">start_addr</name></expr></argument>, <argument pos:start="165:50" pos:end="165:51"><expr pos:start="165:50" pos:end="165:51"><name pos:start="165:50" pos:end="165:51">sp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="167:25" pos:end="167:39"><block_content pos:start="167:25" pos:end="167:39">

                        <return pos:start="167:25" pos:end="167:39">return <expr pos:start="167:32" pos:end="167:38"><operator pos:start="167:32" pos:end="167:32">-</operator><name pos:start="167:33" pos:end="167:38">EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="169:21" pos:end="169:50"><expr pos:start="169:21" pos:end="169:49"><name pos:start="169:21" pos:end="169:30">start_addr</name> <operator pos:start="169:32" pos:end="169:32">=</operator> <name pos:start="169:34" pos:end="169:43"><name pos:start="169:34" pos:end="169:40">libinfo</name><index pos:start="169:41" pos:end="169:43">[<expr pos:start="169:42" pos:end="169:42"><name pos:start="169:42" pos:end="169:42">i</name></expr>]</index></name><operator pos:start="169:44" pos:end="169:44">.</operator><name pos:start="169:45" pos:end="169:49">entry</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="175:1" pos:end="175:6">#<cpp:directive pos:start="175:2" pos:end="175:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="179:5" pos:end="179:63">/* Stash our initial stack pointer into the mm structure */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:45"><expr pos:start="181:5" pos:end="181:44"><name pos:start="181:5" pos:end="181:20"><name pos:start="181:5" pos:end="181:8">info</name><operator pos:start="181:9" pos:end="181:10">-&gt;</operator><name pos:start="181:11" pos:end="181:20">start_code</name></name> <operator pos:start="181:22" pos:end="181:22">=</operator> <name pos:start="181:24" pos:end="181:33"><name pos:start="181:24" pos:end="181:30">libinfo</name><index pos:start="181:31" pos:end="181:33">[<expr pos:start="181:32" pos:end="181:32"><literal type="number" pos:start="181:32" pos:end="181:32">0</literal></expr>]</index></name><operator pos:start="181:34" pos:end="181:34">.</operator><name pos:start="181:35" pos:end="181:44">start_code</name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:65"><expr pos:start="183:5" pos:end="183:64"><name pos:start="183:5" pos:end="183:18"><name pos:start="183:5" pos:end="183:8">info</name><operator pos:start="183:9" pos:end="183:10">-&gt;</operator><name pos:start="183:11" pos:end="183:18">end_code</name></name> <operator pos:start="183:20" pos:end="183:20">=</operator> <name pos:start="183:22" pos:end="183:31"><name pos:start="183:22" pos:end="183:28">libinfo</name><index pos:start="183:29" pos:end="183:31">[<expr pos:start="183:30" pos:end="183:30"><literal type="number" pos:start="183:30" pos:end="183:30">0</literal></expr>]</index></name><operator pos:start="183:32" pos:end="183:32">.</operator><name pos:start="183:33" pos:end="183:42">start_code</name> <operator pos:start="183:44" pos:end="183:44">=</operator> <name pos:start="183:46" pos:end="183:55"><name pos:start="183:46" pos:end="183:52">libinfo</name><index pos:start="183:53" pos:end="183:55">[<expr pos:start="183:54" pos:end="183:54"><literal type="number" pos:start="183:54" pos:end="183:54">0</literal></expr>]</index></name><operator pos:start="183:56" pos:end="183:56">.</operator><name pos:start="183:57" pos:end="183:64">text_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:45"><expr pos:start="185:5" pos:end="185:44"><name pos:start="185:5" pos:end="185:20"><name pos:start="185:5" pos:end="185:8">info</name><operator pos:start="185:9" pos:end="185:10">-&gt;</operator><name pos:start="185:11" pos:end="185:20">start_data</name></name> <operator pos:start="185:22" pos:end="185:22">=</operator> <name pos:start="185:24" pos:end="185:33"><name pos:start="185:24" pos:end="185:30">libinfo</name><index pos:start="185:31" pos:end="185:33">[<expr pos:start="185:32" pos:end="185:32"><literal type="number" pos:start="185:32" pos:end="185:32">0</literal></expr>]</index></name><operator pos:start="185:34" pos:end="185:34">.</operator><name pos:start="185:35" pos:end="185:44">start_data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:41"><expr pos:start="187:5" pos:end="187:40"><name pos:start="187:5" pos:end="187:18"><name pos:start="187:5" pos:end="187:8">info</name><operator pos:start="187:9" pos:end="187:10">-&gt;</operator><name pos:start="187:11" pos:end="187:18">end_data</name></name> <operator pos:start="187:20" pos:end="187:20">=</operator> <name pos:start="187:22" pos:end="187:31"><name pos:start="187:22" pos:end="187:28">libinfo</name><index pos:start="187:29" pos:end="187:31">[<expr pos:start="187:30" pos:end="187:30"><literal type="number" pos:start="187:30" pos:end="187:30">0</literal></expr>]</index></name><operator pos:start="187:32" pos:end="187:32">.</operator><name pos:start="187:33" pos:end="187:40">end_data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:43"><expr pos:start="189:5" pos:end="189:42"><name pos:start="189:5" pos:end="189:19"><name pos:start="189:5" pos:end="189:8">info</name><operator pos:start="189:9" pos:end="189:10">-&gt;</operator><name pos:start="189:11" pos:end="189:19">start_brk</name></name> <operator pos:start="189:21" pos:end="189:21">=</operator> <name pos:start="189:23" pos:end="189:32"><name pos:start="189:23" pos:end="189:29">libinfo</name><index pos:start="189:30" pos:end="189:32">[<expr pos:start="189:31" pos:end="189:31"><literal type="number" pos:start="189:31" pos:end="189:31">0</literal></expr>]</index></name><operator pos:start="189:33" pos:end="189:33">.</operator><name pos:start="189:34" pos:end="189:42">start_brk</name></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:27"><expr pos:start="191:5" pos:end="191:26"><name pos:start="191:5" pos:end="191:21"><name pos:start="191:5" pos:end="191:8">info</name><operator pos:start="191:9" pos:end="191:10">-&gt;</operator><name pos:start="191:11" pos:end="191:21">start_stack</name></name> <operator pos:start="191:23" pos:end="191:23">=</operator> <name pos:start="191:25" pos:end="191:26">sp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:45"><expr pos:start="193:5" pos:end="193:44"><name pos:start="193:5" pos:end="193:21"><name pos:start="193:5" pos:end="193:8">info</name><operator pos:start="193:9" pos:end="193:10">-&gt;</operator><name pos:start="193:11" pos:end="193:21">stack_limit</name></name> <operator pos:start="193:23" pos:end="193:23">=</operator> <name pos:start="193:25" pos:end="193:34"><name pos:start="193:25" pos:end="193:31">libinfo</name><index pos:start="193:32" pos:end="193:34">[<expr pos:start="193:33" pos:end="193:33"><literal type="number" pos:start="193:33" pos:end="193:33">0</literal></expr>]</index></name><operator pos:start="193:35" pos:end="193:35">.</operator><name pos:start="193:36" pos:end="193:44">start_brk</name></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:29"><expr pos:start="195:5" pos:end="195:28"><name pos:start="195:5" pos:end="195:15"><name pos:start="195:5" pos:end="195:8">info</name><operator pos:start="195:9" pos:end="195:10">-&gt;</operator><name pos:start="195:11" pos:end="195:15">entry</name></name> <operator pos:start="195:17" pos:end="195:17">=</operator> <name pos:start="195:19" pos:end="195:28">start_addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:41"><expr pos:start="197:5" pos:end="197:40"><name pos:start="197:5" pos:end="197:21"><name pos:start="197:5" pos:end="197:8">info</name><operator pos:start="197:9" pos:end="197:10">-&gt;</operator><name pos:start="197:11" pos:end="197:21">code_offset</name></name> <operator pos:start="197:23" pos:end="197:23">=</operator> <name pos:start="197:25" pos:end="197:40"><name pos:start="197:25" pos:end="197:28">info</name><operator pos:start="197:29" pos:end="197:30">-&gt;</operator><name pos:start="197:31" pos:end="197:40">start_code</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:63"><expr pos:start="199:5" pos:end="199:62"><name pos:start="199:5" pos:end="199:21"><name pos:start="199:5" pos:end="199:8">info</name><operator pos:start="199:9" pos:end="199:10">-&gt;</operator><name pos:start="199:11" pos:end="199:21">data_offset</name></name> <operator pos:start="199:23" pos:end="199:23">=</operator> <name pos:start="199:25" pos:end="199:40"><name pos:start="199:25" pos:end="199:28">info</name><operator pos:start="199:29" pos:end="199:30">-&gt;</operator><name pos:start="199:31" pos:end="199:40">start_data</name></name> <operator pos:start="199:42" pos:end="199:42">-</operator> <name pos:start="199:44" pos:end="199:53"><name pos:start="199:44" pos:end="199:50">libinfo</name><index pos:start="199:51" pos:end="199:53">[<expr pos:start="199:52" pos:end="199:52"><literal type="number" pos:start="199:52" pos:end="199:52">0</literal></expr>]</index></name><operator pos:start="199:54" pos:end="199:54">.</operator><name pos:start="199:55" pos:end="199:62">text_len</name></expr>;</expr_stmt>



    <expr_stmt pos:start="203:5" pos:end="205:54"><expr pos:start="203:5" pos:end="205:53"><call pos:start="203:5" pos:end="205:53"><name pos:start="203:5" pos:end="203:11">DBG_FLT</name><argument_list pos:start="203:12" pos:end="205:53">(<argument pos:start="203:13" pos:end="203:58"><expr pos:start="203:13" pos:end="203:58"><literal type="string" pos:start="203:13" pos:end="203:58">"start_thread(entry=0x%x, start_stack=0x%x)\n"</literal></expr></argument>,

            <argument pos:start="205:13" pos:end="205:28"><expr pos:start="205:13" pos:end="205:28"><operator pos:start="205:13" pos:end="205:13">(</operator><name pos:start="205:14" pos:end="205:16">int</name><operator pos:start="205:17" pos:end="205:17">)</operator><name pos:start="205:18" pos:end="205:28"><name pos:start="205:18" pos:end="205:21">info</name><operator pos:start="205:22" pos:end="205:23">-&gt;</operator><name pos:start="205:24" pos:end="205:28">entry</name></name></expr></argument>, <argument pos:start="205:31" pos:end="205:52"><expr pos:start="205:31" pos:end="205:52"><operator pos:start="205:31" pos:end="205:31">(</operator><name pos:start="205:32" pos:end="205:34">int</name><operator pos:start="205:35" pos:end="205:35">)</operator><name pos:start="205:36" pos:end="205:52"><name pos:start="205:36" pos:end="205:39">info</name><operator pos:start="205:40" pos:end="205:41">-&gt;</operator><name pos:start="205:42" pos:end="205:52">start_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="209:5" pos:end="209:13">return <expr pos:start="209:12" pos:end="209:12"><literal type="number" pos:start="209:12" pos:end="209:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
