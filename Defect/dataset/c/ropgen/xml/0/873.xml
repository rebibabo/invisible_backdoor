<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/873.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:35">cpu_loop_exec_tb</name><parameter_list pos:start="1:36" pos:end="3:77">(<parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:44">CPUState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">cpu</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:71"><decl pos:start="1:52" pos:end="1:71"><type pos:start="1:52" pos:end="1:71"><name pos:start="1:52" pos:end="1:67">TranslationBlock</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:71">tb</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:62"><decl pos:start="3:37" pos:end="3:62"><type pos:start="3:37" pos:end="3:62"><name pos:start="3:37" pos:end="3:52">TranslationBlock</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier><modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:62">last_tb</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:76"><decl pos:start="3:65" pos:end="3:76"><type pos:start="3:65" pos:end="3:76"><name pos:start="3:65" pos:end="3:67">int</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:76">tb_exit</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="111:1">{<block_content pos:start="7:5" pos:end="110:0">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">uintptr_t</name></type> <name pos:start="7:15" pos:end="7:17">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int32_t</name></type> <name pos:start="9:13" pos:end="9:22">insns_left</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:50">(<expr pos:start="13:9" pos:end="13:49"><call pos:start="13:9" pos:end="13:49"><name pos:start="13:9" pos:end="13:16">unlikely</name><argument_list pos:start="13:17" pos:end="13:49">(<argument pos:start="13:18" pos:end="13:48"><expr pos:start="13:18" pos:end="13:48"><call pos:start="13:18" pos:end="13:48"><name pos:start="13:18" pos:end="13:28">atomic_read</name><argument_list pos:start="13:29" pos:end="13:48">(<argument pos:start="13:30" pos:end="13:47"><expr pos:start="13:30" pos:end="13:47"><operator pos:start="13:30" pos:end="13:30">&amp;</operator><name pos:start="13:31" pos:end="13:47"><name pos:start="13:31" pos:end="13:33">cpu</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:47">exit_request</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:52" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:30"><expr pos:start="21:5" pos:end="21:29"><call pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:17">trace_exec_tb</name><argument_list pos:start="21:18" pos:end="21:29">(<argument pos:start="21:19" pos:end="21:20"><expr pos:start="21:19" pos:end="21:20"><name pos:start="21:19" pos:end="21:20">tb</name></expr></argument>, <argument pos:start="21:23" pos:end="21:28"><expr pos:start="21:23" pos:end="21:28"><name pos:start="21:23" pos:end="21:28"><name pos:start="21:23" pos:end="21:24">tb</name><operator pos:start="21:25" pos:end="21:26">-&gt;</operator><name pos:start="21:27" pos:end="21:28">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:30"><name pos:start="23:11" pos:end="23:21">cpu_tb_exec</name><argument_list pos:start="23:22" pos:end="23:30">(<argument pos:start="23:23" pos:end="23:25"><expr pos:start="23:23" pos:end="23:25"><name pos:start="23:23" pos:end="23:25">cpu</name></expr></argument>, <argument pos:start="23:28" pos:end="23:29"><expr pos:start="23:28" pos:end="23:29"><name pos:start="23:28" pos:end="23:29">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:51"><expr pos:start="25:5" pos:end="25:50"><name pos:start="25:5" pos:end="25:6">tb</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <operator pos:start="25:10" pos:end="25:10">(</operator><name pos:start="25:11" pos:end="25:26">TranslationBlock</name> <operator pos:start="25:28" pos:end="25:28">*</operator><operator pos:start="25:29" pos:end="25:29">)</operator><operator pos:start="25:30" pos:end="25:30">(</operator><name pos:start="25:31" pos:end="25:33">ret</name> <operator pos:start="25:35" pos:end="25:35">&amp;</operator> <operator pos:start="25:37" pos:end="25:37">~</operator><name pos:start="25:38" pos:end="25:49">TB_EXIT_MASK</name><operator pos:start="25:50" pos:end="25:50">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:34"><expr pos:start="27:5" pos:end="27:33"><operator pos:start="27:5" pos:end="27:5">*</operator><name pos:start="27:6" pos:end="27:12">tb_exit</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:18">ret</name> <operator pos:start="27:20" pos:end="27:20">&amp;</operator> <name pos:start="27:22" pos:end="27:33">TB_EXIT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:38">(<expr pos:start="29:9" pos:end="29:37"><operator pos:start="29:9" pos:end="29:9">*</operator><name pos:start="29:10" pos:end="29:16">tb_exit</name> <operator pos:start="29:18" pos:end="29:19">!=</operator> <name pos:start="29:21" pos:end="29:37">TB_EXIT_REQUESTED</name></expr>)</condition> <block pos:start="29:40" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:15">

        <expr_stmt pos:start="31:9" pos:end="31:22"><expr pos:start="31:9" pos:end="31:21"><operator pos:start="31:9" pos:end="31:9">*</operator><name pos:start="31:10" pos:end="31:16">last_tb</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:21">tb</name></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:20"><expr pos:start="39:5" pos:end="39:19"><operator pos:start="39:5" pos:end="39:5">*</operator><name pos:start="39:6" pos:end="39:12">last_tb</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <name pos:start="39:16" pos:end="39:19">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:52"><expr pos:start="41:5" pos:end="41:51"><name pos:start="41:5" pos:end="41:14">insns_left</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <call pos:start="41:18" pos:end="41:51"><name pos:start="41:18" pos:end="41:28">atomic_read</name><argument_list pos:start="41:29" pos:end="41:51">(<argument pos:start="41:30" pos:end="41:50"><expr pos:start="41:30" pos:end="41:50"><operator pos:start="41:30" pos:end="41:30">&amp;</operator><name pos:start="41:31" pos:end="41:50"><name pos:start="41:31" pos:end="41:33">cpu</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:46">icount_decr</name><operator pos:start="41:47" pos:end="41:47">.</operator><name pos:start="41:48" pos:end="41:50">u32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:46"><expr pos:start="43:5" pos:end="43:45"><call pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:14">atomic_set</name><argument_list pos:start="43:15" pos:end="43:45">(<argument pos:start="43:16" pos:end="43:41"><expr pos:start="43:16" pos:end="43:41"><operator pos:start="43:16" pos:end="43:16">&amp;</operator><name pos:start="43:17" pos:end="43:41"><name pos:start="43:17" pos:end="43:19">cpu</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:32">icount_decr</name><operator pos:start="43:33" pos:end="43:33">.</operator><name pos:start="43:34" pos:end="43:36">u16</name><operator pos:start="43:37" pos:end="43:37">.</operator><name pos:start="43:38" pos:end="43:41">high</name></name></expr></argument>, <argument pos:start="43:44" pos:end="43:44"><expr pos:start="43:44" pos:end="43:44"><literal type="number" pos:start="43:44" pos:end="43:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="71:5"><if pos:start="45:5" pos:end="71:5">if <condition pos:start="45:8" pos:end="45:23">(<expr pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:18">insns_left</name> <operator pos:start="45:20" pos:end="45:20">&lt;</operator> <literal type="number" pos:start="45:22" pos:end="45:22">0</literal></expr>)</condition> <block pos:start="45:25" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:15">

        <comment type="block" pos:start="47:9" pos:end="65:11">/* Something asked us to stop executing

         * chained TBs; just continue round the main

         * loop. Whatever requested the exit will also

         * have set something else (eg exit_request or

         * interrupt_request) which we will handle

         * next time around the loop.  But we need to

         * ensure the zeroing of tcg_exit_req (see cpu_tb_exec)

         * comes before the next read of cpu-&gt;exit_request

         * or cpu-&gt;interrupt_request.

         */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:17"><expr pos:start="67:9" pos:end="67:16"><call pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:14">smp_mb</name><argument_list pos:start="67:15" pos:end="67:16">()</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:39">/* Instruction counter expired.  */</comment>

    <expr_stmt pos:start="77:5" pos:end="80:0"><expr pos:start="77:5" pos:end="77:22"><call pos:start="77:5" pos:end="77:22"><name pos:start="77:5" pos:end="77:10">assert</name><argument_list pos:start="77:11" pos:end="77:22">(<argument pos:start="77:12" pos:end="77:21"><expr pos:start="77:12" pos:end="77:21"><name pos:start="77:12" pos:end="77:21">use_icount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:start="79:1" pos:end="79:24">#<cpp:directive pos:start="79:2" pos:end="79:7">ifndef</cpp:directive> <name pos:start="79:9" pos:end="79:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <if_stmt pos:start="81:5" pos:end="110:0"><if pos:start="81:5" pos:end="93:5">if <condition pos:start="81:8" pos:end="81:26">(<expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:11">cpu</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:25">icount_extra</name></name></expr>)</condition> <block pos:start="81:28" pos:end="93:5">{<block_content pos:start="85:9" pos:end="91:46">

        <comment type="block" pos:start="83:9" pos:end="83:57">/* Refill decrementer and continue execution.  */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:40"><expr pos:start="85:9" pos:end="85:39"><name pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:11">cpu</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:25">icount_extra</name></name> <operator pos:start="85:27" pos:end="85:28">+=</operator> <name pos:start="85:30" pos:end="85:39">insns_left</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:52"><expr pos:start="87:9" pos:end="87:51"><name pos:start="87:9" pos:end="87:18">insns_left</name> <operator pos:start="87:20" pos:end="87:20">=</operator> <call pos:start="87:22" pos:end="87:51"><name pos:start="87:22" pos:end="87:24">MIN</name><argument_list pos:start="87:25" pos:end="87:51">(<argument pos:start="87:26" pos:end="87:31"><expr pos:start="87:26" pos:end="87:31"><literal type="number" pos:start="87:26" pos:end="87:31">0xffff</literal></expr></argument>, <argument pos:start="87:34" pos:end="87:50"><expr pos:start="87:34" pos:end="87:50"><name pos:start="87:34" pos:end="87:50"><name pos:start="87:34" pos:end="87:36">cpu</name><operator pos:start="87:37" pos:end="87:38">-&gt;</operator><name pos:start="87:39" pos:end="87:50">icount_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:40"><expr pos:start="89:9" pos:end="89:39"><name pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:11">cpu</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:25">icount_extra</name></name> <operator pos:start="89:27" pos:end="89:28">-=</operator> <name pos:start="89:30" pos:end="89:39">insns_left</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:46"><expr pos:start="91:9" pos:end="91:45"><name pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:11">cpu</name><operator pos:start="91:12" pos:end="91:13">-&gt;</operator><name pos:start="91:14" pos:end="91:24">icount_decr</name><operator pos:start="91:25" pos:end="91:25">.</operator><name pos:start="91:26" pos:end="91:28">u16</name><operator pos:start="91:29" pos:end="91:29">.</operator><name pos:start="91:30" pos:end="91:32">low</name></name> <operator pos:start="91:34" pos:end="91:34">=</operator> <name pos:start="91:36" pos:end="91:45">insns_left</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="110:0">else <block pos:start="93:12" pos:end="110:0">{<block_content pos:start="101:9" pos:end="105:9">

        <comment type="block" pos:start="95:9" pos:end="99:11">/* Execute any remaining instructions, then let the main loop

         * handle the next event.

         */</comment>

        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:27">(<expr pos:start="101:13" pos:end="101:26"><name pos:start="101:13" pos:end="101:22">insns_left</name> <operator pos:start="101:24" pos:end="101:24">&gt;</operator> <literal type="number" pos:start="101:26" pos:end="101:26">0</literal></expr>)</condition> <block pos:start="101:29" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:57">

            <expr_stmt pos:start="103:13" pos:end="103:57"><expr pos:start="103:13" pos:end="103:56"><call pos:start="103:13" pos:end="103:56"><name pos:start="103:13" pos:end="103:28">cpu_exec_nocache</name><argument_list pos:start="103:29" pos:end="103:56">(<argument pos:start="103:30" pos:end="103:32"><expr pos:start="103:30" pos:end="103:32"><name pos:start="103:30" pos:end="103:32">cpu</name></expr></argument>, <argument pos:start="103:35" pos:end="103:44"><expr pos:start="103:35" pos:end="103:44"><name pos:start="103:35" pos:end="103:44">insns_left</name></expr></argument>, <argument pos:start="103:47" pos:end="103:48"><expr pos:start="103:47" pos:end="103:48"><name pos:start="103:47" pos:end="103:48">tb</name></expr></argument>, <argument pos:start="103:51" pos:end="103:55"><expr pos:start="103:51" pos:end="103:55"><name pos:start="103:51" pos:end="103:55">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="109:1" pos:end="109:6">#<cpp:directive pos:start="109:2" pos:end="109:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
