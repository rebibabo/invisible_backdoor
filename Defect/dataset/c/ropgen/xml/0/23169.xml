<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23169.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">convert_iteration_sectors</name><parameter_list pos:start="1:37" pos:end="1:76">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><name pos:start="1:38" pos:end="1:52">ImgConvertState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">s</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:75"><decl pos:start="1:58" pos:end="1:75"><type pos:start="1:58" pos:end="1:75"><name pos:start="1:58" pos:end="1:64">int64_t</name></type> <name pos:start="1:66" pos:end="1:75">sector_num</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">n</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:39"><expr pos:start="11:5" pos:end="11:38"><call pos:start="11:5" pos:end="11:38"><name pos:start="11:5" pos:end="11:23">convert_select_part</name><argument_list pos:start="11:24" pos:end="11:38">(<argument pos:start="11:25" pos:end="11:25"><expr pos:start="11:25" pos:end="11:25"><name pos:start="11:25" pos:end="11:25">s</name></expr></argument>, <argument pos:start="11:28" pos:end="11:37"><expr pos:start="11:28" pos:end="11:37"><name pos:start="11:28" pos:end="11:37">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:42"><expr pos:start="15:5" pos:end="15:41"><call pos:start="15:5" pos:end="15:41"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:41">(<argument pos:start="15:12" pos:end="15:40"><expr pos:start="15:12" pos:end="15:40"><name pos:start="15:12" pos:end="15:27"><name pos:start="15:12" pos:end="15:12">s</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:27">total_sectors</name></name> <operator pos:start="15:29" pos:end="15:29">&gt;</operator> <name pos:start="15:31" pos:end="15:40">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:69"><expr pos:start="17:5" pos:end="17:68"><name pos:start="17:5" pos:end="17:5">n</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <call pos:start="17:9" pos:end="17:68"><name pos:start="17:9" pos:end="17:11">MIN</name><argument_list pos:start="17:12" pos:end="17:68">(<argument pos:start="17:13" pos:end="17:41"><expr pos:start="17:13" pos:end="17:41"><name pos:start="17:13" pos:end="17:28"><name pos:start="17:13" pos:end="17:13">s</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:28">total_sectors</name></name> <operator pos:start="17:30" pos:end="17:30">-</operator> <name pos:start="17:32" pos:end="17:41">sector_num</name></expr></argument>, <argument pos:start="17:44" pos:end="17:67"><expr pos:start="17:44" pos:end="17:67"><name pos:start="17:44" pos:end="17:67">BDRV_REQUEST_MAX_SECTORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="71:5"><if pos:start="21:5" pos:end="71:5">if <condition pos:start="21:8" pos:end="21:44">(<expr pos:start="21:9" pos:end="21:43"><name pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:29">sector_next_status</name></name> <operator pos:start="21:31" pos:end="21:32">&lt;=</operator> <name pos:start="21:34" pos:end="21:43">sector_num</name></expr>)</condition> <block pos:start="21:46" pos:end="71:5">{<block_content pos:start="23:9" pos:end="69:47">

        <decl_stmt pos:start="23:9" pos:end="23:31"><decl pos:start="23:9" pos:end="23:30"><type pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:24">BlockDriverState</name> <modifier pos:start="23:26" pos:end="23:26">*</modifier></type><name pos:start="23:27" pos:end="23:30">file</name></decl>;</decl_stmt>

        <expr_stmt pos:start="25:9" pos:end="29:50"><expr pos:start="25:9" pos:end="29:49"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="29:49"><name pos:start="25:15" pos:end="25:35">bdrv_get_block_status</name><argument_list pos:start="25:36" pos:end="29:49">(<argument pos:start="25:37" pos:end="25:62"><expr pos:start="25:37" pos:end="25:62"><call pos:start="25:37" pos:end="25:62"><name pos:start="25:37" pos:end="25:42">blk_bs</name><argument_list pos:start="25:43" pos:end="25:62">(<argument pos:start="25:44" pos:end="25:61"><expr pos:start="25:44" pos:end="25:61"><name pos:start="25:44" pos:end="25:61"><name pos:start="25:44" pos:end="25:44">s</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:49">src</name><index pos:start="25:50" pos:end="25:61">[<expr pos:start="25:51" pos:end="25:60"><name pos:start="25:51" pos:end="25:60"><name pos:start="25:51" pos:end="25:51">s</name><operator pos:start="25:52" pos:end="25:53">-&gt;</operator><name pos:start="25:54" pos:end="25:60">src_cur</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="27:37" pos:end="27:66"><expr pos:start="27:37" pos:end="27:66"><name pos:start="27:37" pos:end="27:46">sector_num</name> <operator pos:start="27:48" pos:end="27:48">-</operator> <name pos:start="27:50" pos:end="27:66"><name pos:start="27:50" pos:end="27:50">s</name><operator pos:start="27:51" pos:end="27:52">-&gt;</operator><name pos:start="27:53" pos:end="27:66">src_cur_offset</name></name></expr></argument>,

                                    <argument pos:start="29:37" pos:end="29:37"><expr pos:start="29:37" pos:end="29:37"><name pos:start="29:37" pos:end="29:37">n</name></expr></argument>, <argument pos:start="29:40" pos:end="29:41"><expr pos:start="29:40" pos:end="29:41"><operator pos:start="29:40" pos:end="29:40">&amp;</operator><name pos:start="29:41" pos:end="29:41">n</name></expr></argument>, <argument pos:start="29:44" pos:end="29:48"><expr pos:start="29:44" pos:end="29:48"><operator pos:start="29:44" pos:end="29:44">&amp;</operator><name pos:start="29:45" pos:end="29:48">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:20">(<expr pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:17">&lt;</operator> <literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr>)</condition> <block pos:start="31:22" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:23">

            <return pos:start="33:13" pos:end="33:23">return <expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="39:9" pos:end="65:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:34">(<expr pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">&amp;</operator> <name pos:start="39:19" pos:end="39:33">BDRV_BLOCK_ZERO</name></expr>)</condition> <block pos:start="39:36" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:33">

            <expr_stmt pos:start="41:13" pos:end="41:33"><expr pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:21"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:21">status</name></name> <operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:32">BLK_ZERO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="43:11" pos:end="47:9">else if <condition pos:start="43:19" pos:end="43:41">(<expr pos:start="43:20" pos:end="43:40"><name pos:start="43:20" pos:end="43:22">ret</name> <operator pos:start="43:24" pos:end="43:24">&amp;</operator> <name pos:start="43:26" pos:end="43:40">BDRV_BLOCK_DATA</name></expr>)</condition> <block pos:start="43:43" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:33">

            <expr_stmt pos:start="45:13" pos:end="45:33"><expr pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:21">status</name></name> <operator pos:start="45:23" pos:end="45:23">=</operator> <name pos:start="45:25" pos:end="45:32">BLK_DATA</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="47:11" pos:end="61:9">else if <condition pos:start="47:19" pos:end="47:42">(<expr pos:start="47:20" pos:end="47:41"><operator pos:start="47:20" pos:end="47:20">!</operator><name pos:start="47:21" pos:end="47:41"><name pos:start="47:21" pos:end="47:21">s</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:41">target_has_backing</name></name></expr>)</condition> <block pos:start="47:44" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:33">

            <comment type="block" pos:start="49:13" pos:end="51:43">/* Without a target backing file we must copy over the contents of

             * the backing file as well. */</comment>

            <comment type="block" pos:start="53:13" pos:end="57:29">/* TODO Check block status of the backing file chain to avoid

             * needlessly reading zeroes and limiting the iteration to the

             * buffer size */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:33"><expr pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:21">status</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:32">BLK_DATA</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="61:11" pos:end="65:9">else <block pos:start="61:16" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:41">

            <expr_stmt pos:start="63:13" pos:end="63:41"><expr pos:start="63:13" pos:end="63:40"><name pos:start="63:13" pos:end="63:21"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:21">status</name></name> <operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:40">BLK_BACKING_FILE</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:47"><expr pos:start="69:9" pos:end="69:46"><name pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:29">sector_next_status</name></name> <operator pos:start="69:31" pos:end="69:31">=</operator> <name pos:start="69:33" pos:end="69:42">sector_num</name> <operator pos:start="69:44" pos:end="69:44">+</operator> <name pos:start="69:46" pos:end="69:46">n</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:51"><expr pos:start="75:5" pos:end="75:50"><name pos:start="75:5" pos:end="75:5">n</name> <operator pos:start="75:7" pos:end="75:7">=</operator> <call pos:start="75:9" pos:end="75:50"><name pos:start="75:9" pos:end="75:11">MIN</name><argument_list pos:start="75:12" pos:end="75:50">(<argument pos:start="75:13" pos:end="75:13"><expr pos:start="75:13" pos:end="75:13"><name pos:start="75:13" pos:end="75:13">n</name></expr></argument>, <argument pos:start="75:16" pos:end="75:49"><expr pos:start="75:16" pos:end="75:49"><name pos:start="75:16" pos:end="75:36"><name pos:start="75:16" pos:end="75:16">s</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:36">sector_next_status</name></name> <operator pos:start="75:38" pos:end="75:38">-</operator> <name pos:start="75:40" pos:end="75:49">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:30">(<expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:17">status</name></name> <operator pos:start="77:19" pos:end="77:20">==</operator> <name pos:start="77:22" pos:end="77:29">BLK_DATA</name></expr>)</condition> <block pos:start="77:32" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:35">

        <expr_stmt pos:start="79:9" pos:end="79:35"><expr pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:9">n</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <call pos:start="79:13" pos:end="79:34"><name pos:start="79:13" pos:end="79:15">MIN</name><argument_list pos:start="79:16" pos:end="79:34">(<argument pos:start="79:17" pos:end="79:17"><expr pos:start="79:17" pos:end="79:17"><name pos:start="79:17" pos:end="79:17">n</name></expr></argument>, <argument pos:start="79:20" pos:end="79:33"><expr pos:start="79:20" pos:end="79:33"><name pos:start="79:20" pos:end="79:33"><name pos:start="79:20" pos:end="79:20">s</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:33">buf_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="89:28">/* We need to write complete clusters for compressed images, so if an

     * unallocated area is shorter than that, we must consider the whole

     * cluster allocated. */</comment>

    <if_stmt pos:start="91:5" pos:end="105:5"><if pos:start="91:5" pos:end="105:5">if <condition pos:start="91:8" pos:end="91:22">(<expr pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:21">compressed</name></name></expr>)</condition> <block pos:start="91:24" pos:end="105:5">{<block_content pos:start="93:9" pos:end="103:9">

        <if_stmt pos:start="93:9" pos:end="103:9"><if pos:start="93:9" pos:end="99:9">if <condition pos:start="93:12" pos:end="93:35">(<expr pos:start="93:13" pos:end="93:34"><name pos:start="93:13" pos:end="93:13">n</name> <operator pos:start="93:15" pos:end="93:15">&lt;</operator> <name pos:start="93:17" pos:end="93:34"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:34">cluster_sectors</name></name></expr>)</condition> <block pos:start="93:37" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:33">

            <expr_stmt pos:start="95:13" pos:end="95:71"><expr pos:start="95:13" pos:end="95:70"><name pos:start="95:13" pos:end="95:13">n</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <call pos:start="95:17" pos:end="95:70"><name pos:start="95:17" pos:end="95:19">MIN</name><argument_list pos:start="95:20" pos:end="95:70">(<argument pos:start="95:21" pos:end="95:38"><expr pos:start="95:21" pos:end="95:38"><name pos:start="95:21" pos:end="95:38"><name pos:start="95:21" pos:end="95:21">s</name><operator pos:start="95:22" pos:end="95:23">-&gt;</operator><name pos:start="95:24" pos:end="95:38">cluster_sectors</name></name></expr></argument>, <argument pos:start="95:41" pos:end="95:69"><expr pos:start="95:41" pos:end="95:69"><name pos:start="95:41" pos:end="95:56"><name pos:start="95:41" pos:end="95:41">s</name><operator pos:start="95:42" pos:end="95:43">-&gt;</operator><name pos:start="95:44" pos:end="95:56">total_sectors</name></name> <operator pos:start="95:58" pos:end="95:58">-</operator> <name pos:start="95:60" pos:end="95:69">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:33"><expr pos:start="97:13" pos:end="97:32"><name pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:13">s</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:21">status</name></name> <operator pos:start="97:23" pos:end="97:23">=</operator> <name pos:start="97:25" pos:end="97:32">BLK_DATA</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="99:11" pos:end="103:9">else <block pos:start="99:16" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:55">

            <expr_stmt pos:start="101:13" pos:end="101:55"><expr pos:start="101:13" pos:end="101:54"><name pos:start="101:13" pos:end="101:13">n</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <call pos:start="101:17" pos:end="101:54"><name pos:start="101:17" pos:end="101:31">QEMU_ALIGN_DOWN</name><argument_list pos:start="101:32" pos:end="101:54">(<argument pos:start="101:33" pos:end="101:33"><expr pos:start="101:33" pos:end="101:33"><name pos:start="101:33" pos:end="101:33">n</name></expr></argument>, <argument pos:start="101:36" pos:end="101:53"><expr pos:start="101:36" pos:end="101:53"><name pos:start="101:36" pos:end="101:53"><name pos:start="101:36" pos:end="101:36">s</name><operator pos:start="101:37" pos:end="101:38">-&gt;</operator><name pos:start="101:39" pos:end="101:53">cluster_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="109:5" pos:end="109:13">return <expr pos:start="109:12" pos:end="109:12"><name pos:start="109:12" pos:end="109:12">n</name></expr>;</return>

</block_content>}</block></function>
</unit>
