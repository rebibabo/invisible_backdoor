<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22090.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">av_opencl_create_kernel</name><parameter_list pos:start="1:28" pos:end="1:76">(<parameter pos:start="1:29" pos:end="1:50"><decl pos:start="1:29" pos:end="1:50"><type pos:start="1:29" pos:end="1:50"><name pos:start="1:29" pos:end="1:45">AVOpenCLKernelEnv</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">env</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:75"><decl pos:start="1:53" pos:end="1:75"><type pos:start="1:53" pos:end="1:75"><specifier pos:start="1:53" pos:end="1:57">const</specifier> <name pos:start="1:59" pos:end="1:62">char</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:75">kernel_name</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:15">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">cl_int</name></type> <name pos:start="5:12" pos:end="5:17">status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:14">ret</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:16"><expr pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">LOCK_OPENCL</name></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:65">(<expr pos:start="11:9" pos:end="11:64"><call pos:start="11:9" pos:end="11:27"><name pos:start="11:9" pos:end="11:14">strlen</name><argument_list pos:start="11:15" pos:end="11:27">(<argument pos:start="11:16" pos:end="11:26"><expr pos:start="11:16" pos:end="11:26"><name pos:start="11:16" pos:end="11:26">kernel_name</name></expr></argument>)</argument_list></call> <operator pos:start="11:29" pos:end="11:29">+</operator> <literal type="number" pos:start="11:31" pos:end="11:31">1</literal> <operator pos:start="11:33" pos:end="11:33">&gt;</operator> <name pos:start="11:35" pos:end="11:64">AV_OPENCL_MAX_KERNEL_NAME_SIZE</name></expr>)</condition> <block pos:start="11:67" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:17">

        <expr_stmt pos:start="13:9" pos:end="13:96"><expr pos:start="13:9" pos:end="13:95"><call pos:start="13:9" pos:end="13:95"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="13:95">(<argument pos:start="13:16" pos:end="13:27"><expr pos:start="13:16" pos:end="13:27"><operator pos:start="13:16" pos:end="13:16">&amp;</operator><name pos:start="13:17" pos:end="13:27">openclutils</name></expr></argument>, <argument pos:start="13:30" pos:end="13:41"><expr pos:start="13:30" pos:end="13:41"><name pos:start="13:30" pos:end="13:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:44" pos:end="13:81"><expr pos:start="13:44" pos:end="13:81"><literal type="string" pos:start="13:44" pos:end="13:81">"Created kernel name %s is too long\n"</literal></expr></argument>, <argument pos:start="13:84" pos:end="13:94"><expr pos:start="13:84" pos:end="13:94"><name pos:start="13:84" pos:end="13:94">kernel_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:30"><expr pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <call pos:start="15:15" pos:end="15:29"><name pos:start="15:15" pos:end="15:21">AVERROR</name><argument_list pos:start="15:22" pos:end="15:29">(<argument pos:start="15:23" pos:end="15:28"><expr pos:start="15:23" pos:end="15:28"><name pos:start="15:23" pos:end="15:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="17:9" pos:end="17:17">goto <name pos:start="17:14" pos:end="17:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="63:5"><if pos:start="21:5" pos:end="63:5">if <condition pos:start="21:8" pos:end="21:21">(<expr pos:start="21:9" pos:end="21:20"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:20"><name pos:start="21:10" pos:end="21:12">env</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:20">kernel</name></name></expr>)</condition> <block pos:start="21:23" pos:end="63:5">{<block_content pos:start="23:9" pos:end="61:76">

        <if_stmt pos:start="23:9" pos:end="35:9"><if pos:start="23:9" pos:end="35:9">if <condition pos:start="23:12" pos:end="23:51">(<expr pos:start="23:13" pos:end="23:50"><name pos:start="23:13" pos:end="23:32"><name pos:start="23:13" pos:end="23:19">gpu_env</name><operator pos:start="23:20" pos:end="23:20">.</operator><name pos:start="23:21" pos:end="23:32">kernel_count</name></name> <operator pos:start="23:34" pos:end="23:35">&gt;=</operator> <name pos:start="23:37" pos:end="23:50">MAX_KERNEL_NUM</name></expr>)</condition> <block pos:start="23:53" pos:end="35:9">{<block_content pos:start="25:13" pos:end="33:21">

            <expr_stmt pos:start="25:13" pos:end="29:45"><expr pos:start="25:13" pos:end="29:44"><call pos:start="25:13" pos:end="29:44"><name pos:start="25:13" pos:end="25:18">av_log</name><argument_list pos:start="25:19" pos:end="29:44">(<argument pos:start="25:20" pos:end="25:31"><expr pos:start="25:20" pos:end="25:31"><operator pos:start="25:20" pos:end="25:20">&amp;</operator><name pos:start="25:21" pos:end="25:31">openclutils</name></expr></argument>, <argument pos:start="25:34" pos:end="25:45"><expr pos:start="25:34" pos:end="25:45"><name pos:start="25:34" pos:end="25:45">AV_LOG_ERROR</name></expr></argument>,

            <argument pos:start="27:13" pos:end="27:100"><expr pos:start="27:13" pos:end="27:100"><literal type="string" pos:start="27:13" pos:end="27:100">"Could not create kernel with name '%s', maximum number of kernels %d already reached\n"</literal></expr></argument>,

                <argument pos:start="29:17" pos:end="29:27"><expr pos:start="29:17" pos:end="29:27"><name pos:start="29:17" pos:end="29:27">kernel_name</name></expr></argument>, <argument pos:start="29:30" pos:end="29:43"><expr pos:start="29:30" pos:end="29:43"><name pos:start="29:30" pos:end="29:43">MAX_KERNEL_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:34"><expr pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:33"><name pos:start="31:19" pos:end="31:25">AVERROR</name><argument_list pos:start="31:26" pos:end="31:33">(<argument pos:start="31:27" pos:end="31:32"><expr pos:start="31:27" pos:end="31:32"><name pos:start="31:27" pos:end="31:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="33:13" pos:end="33:21">goto <name pos:start="33:18" pos:end="33:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <for pos:start="37:9" pos:end="45:9">for <control pos:start="37:13" pos:end="37:51">(<init pos:start="37:14" pos:end="37:19"><expr pos:start="37:14" pos:end="37:18"><name pos:start="37:14" pos:end="37:14">i</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>;</init> <condition pos:start="37:21" pos:end="37:46"><expr pos:start="37:21" pos:end="37:45"><name pos:start="37:21" pos:end="37:21">i</name> <operator pos:start="37:23" pos:end="37:23">&lt;</operator> <name pos:start="37:25" pos:end="37:45"><name pos:start="37:25" pos:end="37:31">gpu_env</name><operator pos:start="37:32" pos:end="37:32">.</operator><name pos:start="37:33" pos:end="37:45">program_count</name></name></expr>;</condition> <incr pos:start="37:48" pos:end="37:50"><expr pos:start="37:48" pos:end="37:50"><name pos:start="37:48" pos:end="37:48">i</name><operator pos:start="37:49" pos:end="37:50">++</operator></expr></incr>)</control> <block pos:start="37:53" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:22">

            <expr_stmt pos:start="39:13" pos:end="39:84"><expr pos:start="39:13" pos:end="39:83"><name pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:15">env</name><operator pos:start="39:16" pos:end="39:17">-&gt;</operator><name pos:start="39:18" pos:end="39:23">kernel</name></name> <operator pos:start="39:25" pos:end="39:25">=</operator> <call pos:start="39:27" pos:end="39:83"><name pos:start="39:27" pos:end="39:40">clCreateKernel</name><argument_list pos:start="39:41" pos:end="39:83">(<argument pos:start="39:42" pos:end="39:60"><expr pos:start="39:42" pos:end="39:60"><name pos:start="39:42" pos:end="39:60"><name pos:start="39:42" pos:end="39:48">gpu_env</name><operator pos:start="39:49" pos:end="39:49">.</operator><name pos:start="39:50" pos:end="39:57">programs</name><index pos:start="39:58" pos:end="39:60">[<expr pos:start="39:59" pos:end="39:59"><name pos:start="39:59" pos:end="39:59">i</name></expr>]</index></name></expr></argument>, <argument pos:start="39:63" pos:end="39:73"><expr pos:start="39:63" pos:end="39:73"><name pos:start="39:63" pos:end="39:73">kernel_name</name></expr></argument>, <argument pos:start="39:76" pos:end="39:82"><expr pos:start="39:76" pos:end="39:82"><operator pos:start="39:76" pos:end="39:76">&amp;</operator><name pos:start="39:77" pos:end="39:82">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="43:22"><if pos:start="41:13" pos:end="43:22">if <condition pos:start="41:16" pos:end="41:37">(<expr pos:start="41:17" pos:end="41:36"><name pos:start="41:17" pos:end="41:22">status</name> <operator pos:start="41:24" pos:end="41:25">==</operator> <name pos:start="41:27" pos:end="41:36">CL_SUCCESS</name></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:22"><block_content pos:start="43:17" pos:end="43:22">

                <break pos:start="43:17" pos:end="43:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:33">(<expr pos:start="47:13" pos:end="47:32"><name pos:start="47:13" pos:end="47:18">status</name> <operator pos:start="47:20" pos:end="47:21">!=</operator> <name pos:start="47:23" pos:end="47:32">CL_SUCCESS</name></expr>)</condition> <block pos:start="47:35" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:21">

            <expr_stmt pos:start="49:13" pos:end="49:110"><expr pos:start="49:13" pos:end="49:109"><call pos:start="49:13" pos:end="49:109"><name pos:start="49:13" pos:end="49:18">av_log</name><argument_list pos:start="49:19" pos:end="49:109">(<argument pos:start="49:20" pos:end="49:31"><expr pos:start="49:20" pos:end="49:31"><operator pos:start="49:20" pos:end="49:20">&amp;</operator><name pos:start="49:21" pos:end="49:31">openclutils</name></expr></argument>, <argument pos:start="49:34" pos:end="49:45"><expr pos:start="49:34" pos:end="49:45"><name pos:start="49:34" pos:end="49:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:48" pos:end="49:85"><expr pos:start="49:48" pos:end="49:85"><literal type="string" pos:start="49:48" pos:end="49:85">"Could not create OpenCL kernel: %s\n"</literal></expr></argument>, <argument pos:start="49:88" pos:end="49:108"><expr pos:start="49:88" pos:end="49:108"><call pos:start="49:88" pos:end="49:108"><name pos:start="49:88" pos:end="49:100">opencl_errstr</name><argument_list pos:start="49:101" pos:end="49:108">(<argument pos:start="49:102" pos:end="49:107"><expr pos:start="49:102" pos:end="49:107"><name pos:start="49:102" pos:end="49:107">status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:35"><expr pos:start="51:13" pos:end="51:34"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:34">AVERROR_EXTERNAL</name></expr>;</expr_stmt>

            <goto pos:start="53:13" pos:end="53:21">goto <name pos:start="53:18" pos:end="53:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:31"><expr pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:15">gpu_env</name><operator pos:start="57:16" pos:end="57:16">.</operator><name pos:start="57:17" pos:end="57:28">kernel_count</name></name><operator pos:start="57:29" pos:end="57:30">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:51"><expr pos:start="59:9" pos:end="59:50"><name pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:11">env</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:26">command_queue</name></name> <operator pos:start="59:28" pos:end="59:28">=</operator> <name pos:start="59:30" pos:end="59:50"><name pos:start="59:30" pos:end="59:36">gpu_env</name><operator pos:start="59:37" pos:end="59:37">.</operator><name pos:start="59:38" pos:end="59:50">command_queue</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:76"><expr pos:start="61:9" pos:end="61:75"><call pos:start="61:9" pos:end="61:75"><name pos:start="61:9" pos:end="61:18">av_strlcpy</name><argument_list pos:start="61:19" pos:end="61:75">(<argument pos:start="61:20" pos:end="61:35"><expr pos:start="61:20" pos:end="61:35"><name pos:start="61:20" pos:end="61:35"><name pos:start="61:20" pos:end="61:22">env</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:35">kernel_name</name></name></expr></argument>, <argument pos:start="61:38" pos:end="61:48"><expr pos:start="61:38" pos:end="61:48"><name pos:start="61:38" pos:end="61:48">kernel_name</name></expr></argument>, <argument pos:start="61:51" pos:end="61:74"><expr pos:start="61:51" pos:end="61:74"><sizeof pos:start="61:51" pos:end="61:74">sizeof<argument_list pos:start="61:57" pos:end="61:74">(<argument pos:start="61:58" pos:end="61:73"><expr pos:start="61:58" pos:end="61:73"><name pos:start="61:58" pos:end="61:73"><name pos:start="61:58" pos:end="61:60">env</name><operator pos:start="61:61" pos:end="61:62">-&gt;</operator><name pos:start="61:63" pos:end="61:73">kernel_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="65:1" pos:end="65:4"><name pos:start="65:1" pos:end="65:3">end</name>:</label>

    <expr_stmt pos:start="67:5" pos:end="67:18"><expr pos:start="67:5" pos:end="67:17"><name pos:start="67:5" pos:end="67:17">UNLOCK_OPENCL</name></expr>;</expr_stmt>

    <return pos:start="69:5" pos:end="69:15">return <expr pos:start="69:12" pos:end="69:14"><name pos:start="69:12" pos:end="69:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
