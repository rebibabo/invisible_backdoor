<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26000.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">CharDriverState</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:47">qemu_chr_open_socket_fd</name><parameter_list pos:start="1:48" pos:end="7:61">(<parameter pos:start="1:49" pos:end="1:54"><decl pos:start="1:49" pos:end="1:54"><type pos:start="1:49" pos:end="1:54"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:54">fd</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:71"><decl pos:start="1:57" pos:end="1:71"><type pos:start="1:57" pos:end="1:71"><name pos:start="1:57" pos:end="1:60">bool</name></type> <name pos:start="1:62" pos:end="1:71">do_nodelay</name></decl></parameter>,

                                                <parameter pos:start="3:49" pos:end="3:62"><decl pos:start="3:49" pos:end="3:62"><type pos:start="3:49" pos:end="3:62"><name pos:start="3:49" pos:end="3:52">bool</name></type> <name pos:start="3:54" pos:end="3:62">is_listen</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:78"><decl pos:start="3:65" pos:end="3:78"><type pos:start="3:65" pos:end="3:78"><name pos:start="3:65" pos:end="3:68">bool</name></type> <name pos:start="3:70" pos:end="3:78">is_telnet</name></decl></parameter>,

                                                <parameter pos:start="5:49" pos:end="5:67"><decl pos:start="5:49" pos:end="5:67"><type pos:start="5:49" pos:end="5:67"><name pos:start="5:49" pos:end="5:52">bool</name></type> <name pos:start="5:54" pos:end="5:67">is_waitconnect</name></decl></parameter>,

                                                <parameter pos:start="7:49" pos:end="7:60"><decl pos:start="7:49" pos:end="7:60"><type pos:start="7:49" pos:end="7:60"><name pos:start="7:49" pos:end="7:53">Error</name> <modifier pos:start="7:55" pos:end="7:55">*</modifier><modifier pos:start="7:56" pos:end="7:56">*</modifier></type><name pos:start="7:57" pos:end="7:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="177:1">{<block_content pos:start="11:5" pos:end="175:15">

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19">CharDriverState</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:24">chr</name> <init pos:start="11:26" pos:end="11:31">= <expr pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">TCPCharDriver</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:20">s</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:44"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:25"><name pos:start="15:10" pos:end="15:13">host</name><index pos:start="15:14" pos:end="15:25">[<expr pos:start="15:15" pos:end="15:24"><name pos:start="15:15" pos:end="15:24">NI_MAXHOST</name></expr>]</index></name></decl>, <decl pos:start="15:28" pos:end="15:43"><type ref="prev" pos:start="15:5" pos:end="15:8"/><name pos:start="15:28" pos:end="15:43"><name pos:start="15:28" pos:end="15:31">serv</name><index pos:start="15:32" pos:end="15:43">[<expr pos:start="15:33" pos:end="15:42"><name pos:start="15:33" pos:end="15:42">NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:39"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:20">left</name> <init pos:start="17:22" pos:end="17:25">= <expr pos:start="17:24" pos:end="17:25"><literal type="string" pos:start="17:24" pos:end="17:25">""</literal></expr></init></decl>, <decl pos:start="17:28" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:16"><modifier pos:start="17:28" pos:end="17:28">*</modifier></type><name pos:start="17:29" pos:end="17:33">right</name> <init pos:start="17:35" pos:end="17:38">= <expr pos:start="17:37" pos:end="17:38"><literal type="string" pos:start="17:37" pos:end="17:38">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:27">sockaddr_storage</name></name></type> <name pos:start="19:29" pos:end="19:30">ss</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:13">socklen_t</name></type> <name pos:start="21:15" pos:end="21:20">ss_len</name> <init pos:start="21:22" pos:end="21:33">= <expr pos:start="21:24" pos:end="21:33"><sizeof pos:start="21:24" pos:end="21:33">sizeof<argument_list pos:start="21:30" pos:end="21:33">(<argument pos:start="21:31" pos:end="21:32"><expr pos:start="21:31" pos:end="21:32"><name pos:start="21:31" pos:end="21:32">ss</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:27"><expr pos:start="25:5" pos:end="25:26"><call pos:start="25:5" pos:end="25:26"><name pos:start="25:5" pos:end="25:10">memset</name><argument_list pos:start="25:11" pos:end="25:26">(<argument pos:start="25:12" pos:end="25:14"><expr pos:start="25:12" pos:end="25:14"><operator pos:start="25:12" pos:end="25:12">&amp;</operator><name pos:start="25:13" pos:end="25:14">ss</name></expr></argument>, <argument pos:start="25:17" pos:end="25:17"><expr pos:start="25:17" pos:end="25:17"><literal type="number" pos:start="25:17" pos:end="25:17">0</literal></expr></argument>, <argument pos:start="25:20" pos:end="25:25"><expr pos:start="25:20" pos:end="25:25"><name pos:start="25:20" pos:end="25:25">ss_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:63">(<expr pos:start="27:9" pos:end="27:62"><call pos:start="27:9" pos:end="27:57"><name pos:start="27:9" pos:end="27:19">getsockname</name><argument_list pos:start="27:20" pos:end="27:57">(<argument pos:start="27:21" pos:end="27:22"><expr pos:start="27:21" pos:end="27:22"><name pos:start="27:21" pos:end="27:22">fd</name></expr></argument>, <argument pos:start="27:25" pos:end="27:47"><expr pos:start="27:25" pos:end="27:47"><operator pos:start="27:25" pos:end="27:25">(</operator>struct <name pos:start="27:33" pos:end="27:40">sockaddr</name> <operator pos:start="27:42" pos:end="27:42">*</operator><operator pos:start="27:43" pos:end="27:43">)</operator> <operator pos:start="27:45" pos:end="27:45">&amp;</operator><name pos:start="27:46" pos:end="27:47">ss</name></expr></argument>, <argument pos:start="27:50" pos:end="27:56"><expr pos:start="27:50" pos:end="27:56"><operator pos:start="27:50" pos:end="27:50">&amp;</operator><name pos:start="27:51" pos:end="27:56">ss_len</name></expr></argument>)</argument_list></call> <operator pos:start="27:59" pos:end="27:60">!=</operator> <literal type="number" pos:start="27:62" pos:end="27:62">0</literal></expr>)</condition> <block pos:start="27:65" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:20">

        <expr_stmt pos:start="29:9" pos:end="29:53"><expr pos:start="29:9" pos:end="29:52"><call pos:start="29:9" pos:end="29:52"><name pos:start="29:9" pos:end="29:24">error_setg_errno</name><argument_list pos:start="29:25" pos:end="29:52">(<argument pos:start="29:26" pos:end="29:29"><expr pos:start="29:26" pos:end="29:29"><name pos:start="29:26" pos:end="29:29">errp</name></expr></argument>, <argument pos:start="29:32" pos:end="29:36"><expr pos:start="29:32" pos:end="29:36"><name pos:start="29:32" pos:end="29:36">errno</name></expr></argument>, <argument pos:start="29:39" pos:end="29:51"><expr pos:start="29:39" pos:end="29:51"><literal type="string" pos:start="29:39" pos:end="29:51">"getsockname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:20">return <expr pos:start="31:16" pos:end="31:19"><name pos:start="31:16" pos:end="31:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:45"><expr pos:start="37:5" pos:end="37:44"><name pos:start="37:5" pos:end="37:7">chr</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:44"><name pos:start="37:11" pos:end="37:19">g_malloc0</name><argument_list pos:start="37:20" pos:end="37:44">(<argument pos:start="37:21" pos:end="37:43"><expr pos:start="37:21" pos:end="37:43"><sizeof pos:start="37:21" pos:end="37:43">sizeof<argument_list pos:start="37:27" pos:end="37:43">(<argument pos:start="37:28" pos:end="37:42"><expr pos:start="37:28" pos:end="37:42"><name pos:start="37:28" pos:end="37:42">CharDriverState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:5">s</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <call pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:17">g_malloc0</name><argument_list pos:start="39:18" pos:end="39:40">(<argument pos:start="39:19" pos:end="39:39"><expr pos:start="39:19" pos:end="39:39"><sizeof pos:start="39:19" pos:end="39:39">sizeof<argument_list pos:start="39:25" pos:end="39:39">(<argument pos:start="39:26" pos:end="39:38"><expr pos:start="39:26" pos:end="39:38"><name pos:start="39:26" pos:end="39:38">TCPCharDriver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:21"><expr pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:16">connected</name></name> <operator pos:start="43:18" pos:end="43:18">=</operator> <literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:15"><expr pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:9"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:9">fd</name></name> <operator pos:start="45:11" pos:end="45:11">=</operator> <operator pos:start="45:13" pos:end="45:13">-</operator><literal type="number" pos:start="45:14" pos:end="45:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:22"><expr pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:16"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:16">listen_fd</name></name> <operator pos:start="47:18" pos:end="47:18">=</operator> <operator pos:start="47:20" pos:end="47:20">-</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:23"><expr pos:start="49:5" pos:end="49:22"><name pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:18">read_msgfds</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <literal type="number" pos:start="49:22" pos:end="49:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:22"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:22">read_msgfds_num</name></name> <operator pos:start="51:24" pos:end="51:24">=</operator> <literal type="number" pos:start="51:26" pos:end="51:26">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:24"><expr pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:19">write_msgfds</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <literal type="number" pos:start="53:23" pos:end="53:23">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:28"><expr pos:start="55:5" pos:end="55:27"><name pos:start="55:5" pos:end="55:23"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:23">write_msgfds_num</name></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <literal type="number" pos:start="55:27" pos:end="55:27">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:34"><expr pos:start="59:5" pos:end="59:33"><name pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:7">chr</name><operator pos:start="59:8" pos:end="59:9">-&gt;</operator><name pos:start="59:10" pos:end="59:17">filename</name></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="59:33"><name pos:start="59:21" pos:end="59:28">g_malloc</name><argument_list pos:start="59:29" pos:end="59:33">(<argument pos:start="59:30" pos:end="59:32"><expr pos:start="59:30" pos:end="59:32"><literal type="number" pos:start="59:30" pos:end="59:32">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="61:5" pos:end="105:5">switch <condition pos:start="61:12" pos:end="61:25">(<expr pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:14">ss</name><operator pos:start="61:15" pos:end="61:15">.</operator><name pos:start="61:16" pos:end="61:24">ss_family</name></name></expr>)</condition> <block pos:start="61:27" pos:end="105:5">{<block_content pos:start="65:5" pos:end="103:14">

<cpp:ifndef pos:start="63:1" pos:end="63:14">#<cpp:directive pos:start="63:2" pos:end="63:7">ifndef</cpp:directive> <name pos:start="63:9" pos:end="63:14">_WIN32</name></cpp:ifndef>

    <case pos:start="65:5" pos:end="65:17">case <expr pos:start="65:10" pos:end="65:16"><name pos:start="65:10" pos:end="65:16">AF_UNIX</name></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:23"><expr pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:18">is_unix</name></name> <operator pos:start="67:20" pos:end="67:20">=</operator> <literal type="number" pos:start="67:22" pos:end="67:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="73:45"><expr pos:start="69:9" pos:end="73:44"><call pos:start="69:9" pos:end="73:44"><name pos:start="69:9" pos:end="69:16">snprintf</name><argument_list pos:start="69:17" pos:end="73:44">(<argument pos:start="69:18" pos:end="69:30"><expr pos:start="69:18" pos:end="69:30"><name pos:start="69:18" pos:end="69:30"><name pos:start="69:18" pos:end="69:20">chr</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:30">filename</name></name></expr></argument>, <argument pos:start="69:33" pos:end="69:35"><expr pos:start="69:33" pos:end="69:35"><literal type="number" pos:start="69:33" pos:end="69:35">256</literal></expr></argument>, <argument pos:start="69:38" pos:end="69:48"><expr pos:start="69:38" pos:end="69:48"><literal type="string" pos:start="69:38" pos:end="69:48">"unix:%s%s"</literal></expr></argument>,

                 <argument pos:start="71:18" pos:end="71:56"><expr pos:start="71:18" pos:end="71:56"><operator pos:start="71:18" pos:end="71:18">(</operator><operator pos:start="71:19" pos:end="71:19">(</operator>struct <name pos:start="71:27" pos:end="71:37">sockaddr_un</name> <operator pos:start="71:39" pos:end="71:39">*</operator><operator pos:start="71:40" pos:end="71:40">)</operator><operator pos:start="71:41" pos:end="71:41">(</operator><operator pos:start="71:42" pos:end="71:42">&amp;</operator><name pos:start="71:43" pos:end="71:44">ss</name><operator pos:start="71:45" pos:end="71:45">)</operator><operator pos:start="71:46" pos:end="71:46">)</operator><operator pos:start="71:47" pos:end="71:48">-&gt;</operator><name pos:start="71:49" pos:end="71:56">sun_path</name></expr></argument>,

                 <argument pos:start="73:18" pos:end="73:43"><expr pos:start="73:18" pos:end="73:43"><ternary pos:start="73:18" pos:end="73:43"><condition pos:start="73:18" pos:end="73:28"><expr pos:start="73:18" pos:end="73:26"><name pos:start="73:18" pos:end="73:26">is_listen</name></expr> ?</condition><then pos:start="73:30" pos:end="73:38"> <expr pos:start="73:30" pos:end="73:38"><literal type="string" pos:start="73:30" pos:end="73:38">",server"</literal></expr> </then><else pos:start="73:40" pos:end="73:43">: <expr pos:start="73:42" pos:end="73:43"><literal type="string" pos:start="73:42" pos:end="73:43">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="78:0">break;</break>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

    <case pos:start="79:5" pos:end="79:18">case <expr pos:start="79:10" pos:end="79:17"><name pos:start="79:10" pos:end="79:17">AF_INET6</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:20"><expr pos:start="81:9" pos:end="81:19"><name pos:start="81:9" pos:end="81:12">left</name>  <operator pos:start="81:15" pos:end="81:15">=</operator> <literal type="string" pos:start="81:17" pos:end="81:19">"["</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:20"><expr pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:13">right</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <literal type="string" pos:start="83:17" pos:end="83:19">"]"</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="85:9" pos:end="85:26">/* fall through */</comment>

    <case pos:start="87:5" pos:end="87:17">case <expr pos:start="87:10" pos:end="87:16"><name pos:start="87:10" pos:end="87:16">AF_INET</name></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:35"><expr pos:start="89:9" pos:end="89:34"><name pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:21">do_nodelay</name></name> <operator pos:start="89:23" pos:end="89:23">=</operator> <name pos:start="89:25" pos:end="89:34">do_nodelay</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="93:73"><expr pos:start="91:9" pos:end="93:72"><call pos:start="91:9" pos:end="93:72"><name pos:start="91:9" pos:end="91:19">getnameinfo</name><argument_list pos:start="91:20" pos:end="93:72">(<argument pos:start="91:21" pos:end="91:43"><expr pos:start="91:21" pos:end="91:43"><operator pos:start="91:21" pos:end="91:21">(</operator>struct <name pos:start="91:29" pos:end="91:36">sockaddr</name> <operator pos:start="91:38" pos:end="91:38">*</operator><operator pos:start="91:39" pos:end="91:39">)</operator> <operator pos:start="91:41" pos:end="91:41">&amp;</operator><name pos:start="91:42" pos:end="91:43">ss</name></expr></argument>, <argument pos:start="91:46" pos:end="91:51"><expr pos:start="91:46" pos:end="91:51"><name pos:start="91:46" pos:end="91:51">ss_len</name></expr></argument>, <argument pos:start="91:54" pos:end="91:57"><expr pos:start="91:54" pos:end="91:57"><name pos:start="91:54" pos:end="91:57">host</name></expr></argument>, <argument pos:start="91:60" pos:end="91:71"><expr pos:start="91:60" pos:end="91:71"><sizeof pos:start="91:60" pos:end="91:71">sizeof<argument_list pos:start="91:66" pos:end="91:71">(<argument pos:start="91:67" pos:end="91:70"><expr pos:start="91:67" pos:end="91:70"><name pos:start="91:67" pos:end="91:70">host</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                    <argument pos:start="93:21" pos:end="93:24"><expr pos:start="93:21" pos:end="93:24"><name pos:start="93:21" pos:end="93:24">serv</name></expr></argument>, <argument pos:start="93:27" pos:end="93:38"><expr pos:start="93:27" pos:end="93:38"><sizeof pos:start="93:27" pos:end="93:38">sizeof<argument_list pos:start="93:33" pos:end="93:38">(<argument pos:start="93:34" pos:end="93:37"><expr pos:start="93:34" pos:end="93:37"><name pos:start="93:34" pos:end="93:37">serv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="93:41" pos:end="93:71"><expr pos:start="93:41" pos:end="93:71"><name pos:start="93:41" pos:end="93:54">NI_NUMERICHOST</name> <operator pos:start="93:56" pos:end="93:56">|</operator> <name pos:start="93:58" pos:end="93:71">NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="101:45"><expr pos:start="95:9" pos:end="101:44"><call pos:start="95:9" pos:end="101:44"><name pos:start="95:9" pos:end="95:16">snprintf</name><argument_list pos:start="95:17" pos:end="101:44">(<argument pos:start="95:18" pos:end="95:30"><expr pos:start="95:18" pos:end="95:30"><name pos:start="95:18" pos:end="95:30"><name pos:start="95:18" pos:end="95:20">chr</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:30">filename</name></name></expr></argument>, <argument pos:start="95:33" pos:end="95:35"><expr pos:start="95:33" pos:end="95:35"><literal type="number" pos:start="95:33" pos:end="95:35">256</literal></expr></argument>, <argument pos:start="95:38" pos:end="95:53"><expr pos:start="95:38" pos:end="95:53"><literal type="string" pos:start="95:38" pos:end="95:53">"%s:%s%s%s:%s%s"</literal></expr></argument>,

                 <argument pos:start="97:18" pos:end="97:45"><expr pos:start="97:18" pos:end="97:45"><ternary pos:start="97:18" pos:end="97:45"><condition pos:start="97:18" pos:end="97:28"><expr pos:start="97:18" pos:end="97:26"><name pos:start="97:18" pos:end="97:26">is_telnet</name></expr> ?</condition><then pos:start="97:30" pos:end="97:37"> <expr pos:start="97:30" pos:end="97:37"><literal type="string" pos:start="97:30" pos:end="97:37">"telnet"</literal></expr> </then><else pos:start="97:39" pos:end="97:45">: <expr pos:start="97:41" pos:end="97:45"><literal type="string" pos:start="97:41" pos:end="97:45">"tcp"</literal></expr></else></ternary></expr></argument>,

                 <argument pos:start="99:18" pos:end="99:21"><expr pos:start="99:18" pos:end="99:21"><name pos:start="99:18" pos:end="99:21">left</name></expr></argument>, <argument pos:start="99:24" pos:end="99:27"><expr pos:start="99:24" pos:end="99:27"><name pos:start="99:24" pos:end="99:27">host</name></expr></argument>, <argument pos:start="99:30" pos:end="99:34"><expr pos:start="99:30" pos:end="99:34"><name pos:start="99:30" pos:end="99:34">right</name></expr></argument>, <argument pos:start="99:37" pos:end="99:40"><expr pos:start="99:37" pos:end="99:40"><name pos:start="99:37" pos:end="99:40">serv</name></expr></argument>,

                 <argument pos:start="101:18" pos:end="101:43"><expr pos:start="101:18" pos:end="101:43"><ternary pos:start="101:18" pos:end="101:43"><condition pos:start="101:18" pos:end="101:28"><expr pos:start="101:18" pos:end="101:26"><name pos:start="101:18" pos:end="101:26">is_listen</name></expr> ?</condition><then pos:start="101:30" pos:end="101:38"> <expr pos:start="101:30" pos:end="101:38"><literal type="string" pos:start="101:30" pos:end="101:38">",server"</literal></expr> </then><else pos:start="101:40" pos:end="101:43">: <expr pos:start="101:42" pos:end="101:43"><literal type="string" pos:start="101:42" pos:end="101:43">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="109:5" pos:end="109:20"><expr pos:start="109:5" pos:end="109:19"><name pos:start="109:5" pos:end="109:15"><name pos:start="109:5" pos:end="109:7">chr</name><operator pos:start="109:8" pos:end="109:9">-&gt;</operator><name pos:start="109:10" pos:end="109:15">opaque</name></name> <operator pos:start="109:17" pos:end="109:17">=</operator> <name pos:start="109:19" pos:end="109:19">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:35"><expr pos:start="111:5" pos:end="111:34"><name pos:start="111:5" pos:end="111:18"><name pos:start="111:5" pos:end="111:7">chr</name><operator pos:start="111:8" pos:end="111:9">-&gt;</operator><name pos:start="111:10" pos:end="111:18">chr_write</name></name> <operator pos:start="111:20" pos:end="111:20">=</operator> <name pos:start="111:22" pos:end="111:34">tcp_chr_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:43"><expr pos:start="113:5" pos:end="113:42"><name pos:start="113:5" pos:end="113:22"><name pos:start="113:5" pos:end="113:7">chr</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:22">chr_sync_read</name></name> <operator pos:start="113:24" pos:end="113:24">=</operator> <name pos:start="113:26" pos:end="113:42">tcp_chr_sync_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:35"><expr pos:start="115:5" pos:end="115:34"><name pos:start="115:5" pos:end="115:18"><name pos:start="115:5" pos:end="115:7">chr</name><operator pos:start="115:8" pos:end="115:9">-&gt;</operator><name pos:start="115:10" pos:end="115:18">chr_close</name></name> <operator pos:start="115:20" pos:end="115:20">=</operator> <name pos:start="115:22" pos:end="115:34">tcp_chr_close</name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:37"><expr pos:start="117:5" pos:end="117:36"><name pos:start="117:5" pos:end="117:19"><name pos:start="117:5" pos:end="117:7">chr</name><operator pos:start="117:8" pos:end="117:9">-&gt;</operator><name pos:start="117:10" pos:end="117:19">get_msgfds</name></name> <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:36">tcp_get_msgfds</name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:37"><expr pos:start="119:5" pos:end="119:36"><name pos:start="119:5" pos:end="119:19"><name pos:start="119:5" pos:end="119:7">chr</name><operator pos:start="119:8" pos:end="119:9">-&gt;</operator><name pos:start="119:10" pos:end="119:19">set_msgfds</name></name> <operator pos:start="119:21" pos:end="119:21">=</operator> <name pos:start="119:23" pos:end="119:36">tcp_set_msgfds</name></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:45"><expr pos:start="121:5" pos:end="121:44"><name pos:start="121:5" pos:end="121:23"><name pos:start="121:5" pos:end="121:7">chr</name><operator pos:start="121:8" pos:end="121:9">-&gt;</operator><name pos:start="121:10" pos:end="121:23">chr_add_client</name></name> <operator pos:start="121:25" pos:end="121:25">=</operator> <name pos:start="121:27" pos:end="121:44">tcp_chr_add_client</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:43"><expr pos:start="123:5" pos:end="123:42"><name pos:start="123:5" pos:end="123:22"><name pos:start="123:5" pos:end="123:7">chr</name><operator pos:start="123:8" pos:end="123:9">-&gt;</operator><name pos:start="123:10" pos:end="123:22">chr_add_watch</name></name> <operator pos:start="123:24" pos:end="123:24">=</operator> <name pos:start="123:26" pos:end="123:42">tcp_chr_add_watch</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:63"><expr pos:start="125:5" pos:end="125:62"><name pos:start="125:5" pos:end="125:32"><name pos:start="125:5" pos:end="125:7">chr</name><operator pos:start="125:8" pos:end="125:9">-&gt;</operator><name pos:start="125:10" pos:end="125:32">chr_update_read_handler</name></name> <operator pos:start="125:34" pos:end="125:34">=</operator> <name pos:start="125:36" pos:end="125:62">tcp_chr_update_read_handler</name></expr>;</expr_stmt>

    <comment type="block" pos:start="127:5" pos:end="127:51">/* be isn't opened until we get a connection */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:33"><expr pos:start="129:5" pos:end="129:32"><name pos:start="129:5" pos:end="129:25"><name pos:start="129:5" pos:end="129:7">chr</name><operator pos:start="129:8" pos:end="129:9">-&gt;</operator><name pos:start="129:10" pos:end="129:25">explicit_be_open</name></name> <operator pos:start="129:27" pos:end="129:27">=</operator> <name pos:start="129:29" pos:end="129:32">true</name></expr>;</expr_stmt>



    <if_stmt pos:start="133:5" pos:end="159:5"><if pos:start="133:5" pos:end="147:5">if <condition pos:start="133:8" pos:end="133:18">(<expr pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:17">is_listen</name></expr>)</condition> <block pos:start="133:20" pos:end="147:5">{<block_content pos:start="135:9" pos:end="145:9">

        <expr_stmt pos:start="135:9" pos:end="135:26"><expr pos:start="135:9" pos:end="135:25"><name pos:start="135:9" pos:end="135:20"><name pos:start="135:9" pos:end="135:9">s</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:20">listen_fd</name></name> <operator pos:start="135:22" pos:end="135:22">=</operator> <name pos:start="135:24" pos:end="135:25">fd</name></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:62"><expr pos:start="137:9" pos:end="137:61"><name pos:start="137:9" pos:end="137:22"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:22">listen_chan</name></name> <operator pos:start="137:24" pos:end="137:24">=</operator> <call pos:start="137:26" pos:end="137:61"><name pos:start="137:26" pos:end="137:47">io_channel_from_socket</name><argument_list pos:start="137:48" pos:end="137:61">(<argument pos:start="137:49" pos:end="137:60"><expr pos:start="137:49" pos:end="137:60"><name pos:start="137:49" pos:end="137:60"><name pos:start="137:49" pos:end="137:49">s</name><operator pos:start="137:50" pos:end="137:51">-&gt;</operator><name pos:start="137:52" pos:end="137:60">listen_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:85"><expr pos:start="139:9" pos:end="139:84"><name pos:start="139:9" pos:end="139:21"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:21">listen_tag</name></name> <operator pos:start="139:23" pos:end="139:23">=</operator> <call pos:start="139:25" pos:end="139:84"><name pos:start="139:25" pos:end="139:38">g_io_add_watch</name><argument_list pos:start="139:39" pos:end="139:84">(<argument pos:start="139:40" pos:end="139:53"><expr pos:start="139:40" pos:end="139:53"><name pos:start="139:40" pos:end="139:53"><name pos:start="139:40" pos:end="139:40">s</name><operator pos:start="139:41" pos:end="139:42">-&gt;</operator><name pos:start="139:43" pos:end="139:53">listen_chan</name></name></expr></argument>, <argument pos:start="139:56" pos:end="139:62"><expr pos:start="139:56" pos:end="139:62"><name pos:start="139:56" pos:end="139:62">G_IO_IN</name></expr></argument>, <argument pos:start="139:65" pos:end="139:78"><expr pos:start="139:65" pos:end="139:78"><name pos:start="139:65" pos:end="139:78">tcp_chr_accept</name></expr></argument>, <argument pos:start="139:81" pos:end="139:83"><expr pos:start="139:81" pos:end="139:83"><name pos:start="139:81" pos:end="139:83">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="145:9"><if pos:start="141:9" pos:end="145:9">if <condition pos:start="141:12" pos:end="141:22">(<expr pos:start="141:13" pos:end="141:21"><name pos:start="141:13" pos:end="141:21">is_telnet</name></expr>)</condition> <block pos:start="141:24" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:32">

            <expr_stmt pos:start="143:13" pos:end="143:32"><expr pos:start="143:13" pos:end="143:31"><name pos:start="143:13" pos:end="143:27"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:27">do_telnetopt</name></name> <operator pos:start="143:29" pos:end="143:29">=</operator> <literal type="number" pos:start="143:31" pos:end="143:31">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="147:7" pos:end="159:5">else <block pos:start="147:12" pos:end="159:5">{<block_content pos:start="149:9" pos:end="157:29">

        <expr_stmt pos:start="149:9" pos:end="149:25"><expr pos:start="149:9" pos:end="149:24"><name pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:20">connected</name></name> <operator pos:start="149:22" pos:end="149:22">=</operator> <literal type="number" pos:start="149:24" pos:end="149:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:19"><expr pos:start="151:9" pos:end="151:18"><name pos:start="151:9" pos:end="151:13"><name pos:start="151:9" pos:end="151:9">s</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:13">fd</name></name> <operator pos:start="151:15" pos:end="151:15">=</operator> <name pos:start="151:17" pos:end="151:18">fd</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:31"><expr pos:start="153:9" pos:end="153:30"><call pos:start="153:9" pos:end="153:30"><name pos:start="153:9" pos:end="153:26">socket_set_nodelay</name><argument_list pos:start="153:27" pos:end="153:30">(<argument pos:start="153:28" pos:end="153:29"><expr pos:start="153:28" pos:end="153:29"><name pos:start="153:28" pos:end="153:29">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:48"><expr pos:start="155:9" pos:end="155:47"><name pos:start="155:9" pos:end="155:15"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:15">chan</name></name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="155:47"><name pos:start="155:19" pos:end="155:40">io_channel_from_socket</name><argument_list pos:start="155:41" pos:end="155:47">(<argument pos:start="155:42" pos:end="155:46"><expr pos:start="155:42" pos:end="155:46"><name pos:start="155:42" pos:end="155:46"><name pos:start="155:42" pos:end="155:42">s</name><operator pos:start="155:43" pos:end="155:44">-&gt;</operator><name pos:start="155:45" pos:end="155:46">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:29"><expr pos:start="157:9" pos:end="157:28"><call pos:start="157:9" pos:end="157:28"><name pos:start="157:9" pos:end="157:23">tcp_chr_connect</name><argument_list pos:start="157:24" pos:end="157:28">(<argument pos:start="157:25" pos:end="157:27"><expr pos:start="157:25" pos:end="157:27"><name pos:start="157:25" pos:end="157:27">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="163:5" pos:end="173:5"><if pos:start="163:5" pos:end="173:5">if <condition pos:start="163:8" pos:end="163:36">(<expr pos:start="163:9" pos:end="163:35"><name pos:start="163:9" pos:end="163:17">is_listen</name> <operator pos:start="163:19" pos:end="163:20">&amp;&amp;</operator> <name pos:start="163:22" pos:end="163:35">is_waitconnect</name></expr>)</condition> <block pos:start="163:38" pos:end="173:5">{<block_content pos:start="165:9" pos:end="171:40">

        <expr_stmt pos:start="165:9" pos:end="167:31"><expr pos:start="165:9" pos:end="167:30"><call pos:start="165:9" pos:end="167:30"><name pos:start="165:9" pos:end="165:15">fprintf</name><argument_list pos:start="165:16" pos:end="167:30">(<argument pos:start="165:17" pos:end="165:22"><expr pos:start="165:17" pos:end="165:22"><name pos:start="165:17" pos:end="165:22">stderr</name></expr></argument>, <argument pos:start="165:25" pos:end="165:62"><expr pos:start="165:25" pos:end="165:62"><literal type="string" pos:start="165:25" pos:end="165:62">"QEMU waiting for connection on: %s\n"</literal></expr></argument>,

                <argument pos:start="167:17" pos:end="167:29"><expr pos:start="167:17" pos:end="167:29"><name pos:start="167:17" pos:end="167:29"><name pos:start="167:17" pos:end="167:19">chr</name><operator pos:start="167:20" pos:end="167:21">-&gt;</operator><name pos:start="167:22" pos:end="167:29">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:53"><expr pos:start="169:9" pos:end="169:52"><call pos:start="169:9" pos:end="169:52"><name pos:start="169:9" pos:end="169:22">tcp_chr_accept</name><argument_list pos:start="169:23" pos:end="169:52">(<argument pos:start="169:24" pos:end="169:37"><expr pos:start="169:24" pos:end="169:37"><name pos:start="169:24" pos:end="169:37"><name pos:start="169:24" pos:end="169:24">s</name><operator pos:start="169:25" pos:end="169:26">-&gt;</operator><name pos:start="169:27" pos:end="169:37">listen_chan</name></name></expr></argument>, <argument pos:start="169:40" pos:end="169:46"><expr pos:start="169:40" pos:end="169:46"><name pos:start="169:40" pos:end="169:46">G_IO_IN</name></expr></argument>, <argument pos:start="169:49" pos:end="169:51"><expr pos:start="169:49" pos:end="169:51"><name pos:start="169:49" pos:end="169:51">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:40"><expr pos:start="171:9" pos:end="171:39"><call pos:start="171:9" pos:end="171:39"><name pos:start="171:9" pos:end="171:25">qemu_set_nonblock</name><argument_list pos:start="171:26" pos:end="171:39">(<argument pos:start="171:27" pos:end="171:38"><expr pos:start="171:27" pos:end="171:38"><name pos:start="171:27" pos:end="171:38"><name pos:start="171:27" pos:end="171:27">s</name><operator pos:start="171:28" pos:end="171:29">-&gt;</operator><name pos:start="171:30" pos:end="171:38">listen_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="175:5" pos:end="175:15">return <expr pos:start="175:12" pos:end="175:14"><name pos:start="175:12" pos:end="175:14">chr</name></expr>;</return>

</block_content>}</block></function>
</unit>
