<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10633.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">sdp_parse_rtpmap</name><parameter_list pos:start="1:28" pos:end="1:104">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">codec</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:70"><decl pos:start="1:52" pos:end="1:70"><type pos:start="1:52" pos:end="1:70"><name pos:start="1:52" pos:end="1:61">RTSPStream</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:70">rtsp_st</name></decl></parameter>, <parameter pos:start="1:73" pos:end="1:88"><decl pos:start="1:73" pos:end="1:88"><type pos:start="1:73" pos:end="1:88"><name pos:start="1:73" pos:end="1:75">int</name></type> <name pos:start="1:77" pos:end="1:88">payload_type</name></decl></parameter>, <parameter pos:start="1:91" pos:end="1:103"><decl pos:start="1:91" pos:end="1:103"><type pos:start="1:91" pos:end="1:103"><specifier pos:start="1:91" pos:end="1:95">const</specifier> <name pos:start="1:97" pos:end="1:100">char</name> <modifier pos:start="1:102" pos:end="1:102">*</modifier></type><name pos:start="1:103" pos:end="1:103">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:14">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:17"><name pos:start="5:10" pos:end="5:12">buf</name><index pos:start="5:13" pos:end="5:17">[<expr pos:start="5:14" pos:end="5:16"><literal type="number" pos:start="5:14" pos:end="5:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">AVCodec</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:22">c_name</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="17:51">/* Loop into AVRtpDynamicPayloadTypes[] and AVRtpPayloadTypes[] and

       see if we can handle this kind of payload */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:44"><expr pos:start="19:5" pos:end="19:43"><call pos:start="19:5" pos:end="19:43"><name pos:start="19:5" pos:end="19:16">get_word_sep</name><argument_list pos:start="19:17" pos:end="19:43">(<argument pos:start="19:18" pos:end="19:20"><expr pos:start="19:18" pos:end="19:20"><name pos:start="19:18" pos:end="19:20">buf</name></expr></argument>, <argument pos:start="19:23" pos:end="19:33"><expr pos:start="19:23" pos:end="19:33"><sizeof pos:start="19:23" pos:end="19:33">sizeof<argument_list pos:start="19:29" pos:end="19:33">(<argument pos:start="19:30" pos:end="19:32"><expr pos:start="19:30" pos:end="19:32"><name pos:start="19:30" pos:end="19:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="19:36" pos:end="19:38"><expr pos:start="19:36" pos:end="19:38"><literal type="string" pos:start="19:36" pos:end="19:38">"/"</literal></expr></argument>, <argument pos:start="19:41" pos:end="19:42"><expr pos:start="19:41" pos:end="19:42"><operator pos:start="19:41" pos:end="19:41">&amp;</operator><name pos:start="19:42" pos:end="19:42">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="55:5"><if pos:start="21:5" pos:end="47:5">if <condition pos:start="21:8" pos:end="21:39">(<expr pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:20">payload_type</name> <operator pos:start="21:22" pos:end="21:23">&gt;=</operator> <name pos:start="21:25" pos:end="21:38">RTP_PT_PRIVATE</name></expr>)</condition> <block pos:start="21:41" pos:end="47:5">{<block_content pos:start="23:9" pos:end="45:9">

        <decl_stmt pos:start="23:9" pos:end="23:74"><decl pos:start="23:9" pos:end="23:73"><type pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:33">RTPDynamicProtocolHandler</name> <modifier pos:start="23:35" pos:end="23:35">*</modifier></type><name pos:start="23:36" pos:end="23:42">handler</name><init pos:start="23:43" pos:end="23:73">= <expr pos:start="23:45" pos:end="23:73"><name pos:start="23:45" pos:end="23:73">RTPFirstDynamicPayloadHandler</name></expr></init></decl>;</decl_stmt>

        <while pos:start="25:9" pos:end="45:9">while<condition pos:start="25:14" pos:end="25:22">(<expr pos:start="25:15" pos:end="25:21"><name pos:start="25:15" pos:end="25:21">handler</name></expr>)</condition> <block pos:start="25:24" pos:end="45:9">{<block_content pos:start="27:13" pos:end="43:35">

            <if_stmt pos:start="27:13" pos:end="41:13"><if pos:start="27:13" pos:end="41:13">if <condition pos:start="27:16" pos:end="27:98">(<expr pos:start="27:17" pos:end="27:97"><operator pos:start="27:17" pos:end="27:17">!</operator><call pos:start="27:18" pos:end="27:51"><name pos:start="27:18" pos:end="27:27">strcasecmp</name><argument_list pos:start="27:28" pos:end="27:51">(<argument pos:start="27:29" pos:end="27:31"><expr pos:start="27:29" pos:end="27:31"><name pos:start="27:29" pos:end="27:31">buf</name></expr></argument>, <argument pos:start="27:34" pos:end="27:50"><expr pos:start="27:34" pos:end="27:50"><name pos:start="27:34" pos:end="27:50"><name pos:start="27:34" pos:end="27:40">handler</name><operator pos:start="27:41" pos:end="27:42">-&gt;</operator><name pos:start="27:43" pos:end="27:50">enc_name</name></name></expr></argument>)</argument_list></call> <operator pos:start="27:53" pos:end="27:54">&amp;&amp;</operator> <operator pos:start="27:56" pos:end="27:56">(</operator><name pos:start="27:57" pos:end="27:73"><name pos:start="27:57" pos:end="27:61">codec</name><operator pos:start="27:62" pos:end="27:63">-&gt;</operator><name pos:start="27:64" pos:end="27:73">codec_type</name></name> <operator pos:start="27:75" pos:end="27:76">==</operator> <name pos:start="27:78" pos:end="27:96"><name pos:start="27:78" pos:end="27:84">handler</name><operator pos:start="27:85" pos:end="27:86">-&gt;</operator><name pos:start="27:87" pos:end="27:96">codec_type</name></name><operator pos:start="27:97" pos:end="27:97">)</operator></expr>)</condition> <block pos:start="27:100" pos:end="41:13">{<block_content pos:start="29:17" pos:end="39:22">

                <expr_stmt pos:start="29:17" pos:end="29:52"><expr pos:start="29:17" pos:end="29:51"><name pos:start="29:17" pos:end="29:31"><name pos:start="29:17" pos:end="29:21">codec</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:31">codec_id</name></name> <operator pos:start="29:33" pos:end="29:33">=</operator> <name pos:start="29:35" pos:end="29:51"><name pos:start="29:35" pos:end="29:41">handler</name><operator pos:start="29:42" pos:end="29:43">-&gt;</operator><name pos:start="29:44" pos:end="29:51">codec_id</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="31:17" pos:end="31:50"><expr pos:start="31:17" pos:end="31:49"><name pos:start="31:17" pos:end="31:40"><name pos:start="31:17" pos:end="31:23">rtsp_st</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:40">dynamic_handler</name></name><operator pos:start="31:41" pos:end="31:41">=</operator> <name pos:start="31:43" pos:end="31:49">handler</name></expr>;</expr_stmt>

                <if_stmt pos:start="33:17" pos:end="37:17"><if pos:start="33:17" pos:end="37:17">if<condition pos:start="33:19" pos:end="33:33">(<expr pos:start="33:20" pos:end="33:32"><name pos:start="33:20" pos:end="33:32"><name pos:start="33:20" pos:end="33:26">handler</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:32">open</name></name></expr>)</condition> <block pos:start="33:35" pos:end="37:17">{<block_content pos:start="35:21" pos:end="35:71">

                    <expr_stmt pos:start="35:21" pos:end="35:71"><expr pos:start="35:21" pos:end="35:70"><name pos:start="35:21" pos:end="35:53"><name pos:start="35:21" pos:end="35:27">rtsp_st</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:53">dynamic_protocol_context</name></name><operator pos:start="35:54" pos:end="35:54">=</operator> <call pos:start="35:56" pos:end="35:70"><name pos:start="35:56" pos:end="35:68"><name pos:start="35:56" pos:end="35:62">handler</name><operator pos:start="35:63" pos:end="35:64">-&gt;</operator><name pos:start="35:65" pos:end="35:68">open</name></name><argument_list pos:start="35:69" pos:end="35:70">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="39:17" pos:end="39:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:35"><expr pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:19">handler</name><operator pos:start="43:20" pos:end="43:20">=</operator> <name pos:start="43:22" pos:end="43:34"><name pos:start="43:22" pos:end="43:28">handler</name><operator pos:start="43:29" pos:end="43:30">-&gt;</operator><name pos:start="43:31" pos:end="43:34">next</name></name></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="55:5">else <block pos:start="47:12" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:66">

        <comment type="block" pos:start="49:9" pos:end="49:94">/* We are in a standard case ( from http://www.iana.org/assignments/rtp-parameters) */</comment>

        <comment type="block" pos:start="51:9" pos:end="51:45">/* search into AVRtpPayloadTypes[] */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:66"><expr pos:start="53:9" pos:end="53:65"><name pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:13">codec</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:23">codec_id</name></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <call pos:start="53:27" pos:end="53:65"><name pos:start="53:27" pos:end="53:41">ff_rtp_codec_id</name><argument_list pos:start="53:42" pos:end="53:65">(<argument pos:start="53:43" pos:end="53:45"><expr pos:start="53:43" pos:end="53:45"><name pos:start="53:43" pos:end="53:45">buf</name></expr></argument>, <argument pos:start="53:48" pos:end="53:64"><expr pos:start="53:48" pos:end="53:64"><name pos:start="53:48" pos:end="53:64"><name pos:start="53:48" pos:end="53:52">codec</name><operator pos:start="53:53" pos:end="53:54">-&gt;</operator><name pos:start="53:55" pos:end="53:64">codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:46"><expr pos:start="59:5" pos:end="59:45"><name pos:start="59:5" pos:end="59:5">c</name> <operator pos:start="59:7" pos:end="59:7">=</operator> <call pos:start="59:9" pos:end="59:45"><name pos:start="59:9" pos:end="59:28">avcodec_find_decoder</name><argument_list pos:start="59:29" pos:end="59:45">(<argument pos:start="59:30" pos:end="59:44"><expr pos:start="59:30" pos:end="59:44"><name pos:start="59:30" pos:end="59:44"><name pos:start="59:30" pos:end="59:34">codec</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:44">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="67:30"><if pos:start="61:5" pos:end="63:25">if <condition pos:start="61:8" pos:end="61:21">(<expr pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:9">c</name> <operator pos:start="61:11" pos:end="61:12">&amp;&amp;</operator> <name pos:start="61:14" pos:end="61:20"><name pos:start="61:14" pos:end="61:14">c</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:20">name</name></name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:25"><block_content pos:start="63:9" pos:end="63:25">

        <expr_stmt pos:start="63:9" pos:end="63:25"><expr pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:14">c_name</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <name pos:start="63:18" pos:end="63:24"><name pos:start="63:18" pos:end="63:18">c</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:24">name</name></name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="65:5" pos:end="67:30">else<block type="pseudo" pos:start="67:9" pos:end="67:30"><block_content pos:start="67:9" pos:end="67:30">

        <expr_stmt pos:start="67:9" pos:end="67:30"><expr pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:14">c_name</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <operator pos:start="67:18" pos:end="67:18">(</operator><name pos:start="67:19" pos:end="67:22">char</name> <operator pos:start="67:24" pos:end="67:24">*</operator><operator pos:start="67:25" pos:end="67:25">)</operator><name pos:start="67:26" pos:end="67:29">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="71:5" pos:end="125:5"><if pos:start="71:5" pos:end="125:5">if <condition pos:start="71:8" pos:end="71:15">(<expr pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:14">c_name</name></expr>)</condition> <block pos:start="71:17" pos:end="125:5">{<block_content pos:start="73:9" pos:end="123:17">

        <expr_stmt pos:start="73:9" pos:end="73:48"><expr pos:start="73:9" pos:end="73:47"><call pos:start="73:9" pos:end="73:47"><name pos:start="73:9" pos:end="73:20">get_word_sep</name><argument_list pos:start="73:21" pos:end="73:47">(<argument pos:start="73:22" pos:end="73:24"><expr pos:start="73:22" pos:end="73:24"><name pos:start="73:22" pos:end="73:24">buf</name></expr></argument>, <argument pos:start="73:27" pos:end="73:37"><expr pos:start="73:27" pos:end="73:37"><sizeof pos:start="73:27" pos:end="73:37">sizeof<argument_list pos:start="73:33" pos:end="73:37">(<argument pos:start="73:34" pos:end="73:36"><expr pos:start="73:34" pos:end="73:36"><name pos:start="73:34" pos:end="73:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="73:40" pos:end="73:42"><expr pos:start="73:40" pos:end="73:42"><literal type="string" pos:start="73:40" pos:end="73:42">"/"</literal></expr></argument>, <argument pos:start="73:45" pos:end="73:46"><expr pos:start="73:45" pos:end="73:46"><operator pos:start="73:45" pos:end="73:45">&amp;</operator><name pos:start="73:46" pos:end="73:46">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:22"><expr pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:9">i</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <call pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:16">atoi</name><argument_list pos:start="75:17" pos:end="75:21">(<argument pos:start="75:18" pos:end="75:20"><expr pos:start="75:18" pos:end="75:20"><name pos:start="75:18" pos:end="75:20">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="77:9" pos:end="121:9">switch <condition pos:start="77:16" pos:end="77:34">(<expr pos:start="77:17" pos:end="77:33"><name pos:start="77:17" pos:end="77:33"><name pos:start="77:17" pos:end="77:21">codec</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:33">codec_type</name></name></expr>)</condition> <block pos:start="77:36" pos:end="121:9">{<block_content pos:start="79:13" pos:end="119:22">

            <case pos:start="79:13" pos:end="79:34">case <expr pos:start="79:18" pos:end="79:33"><name pos:start="79:18" pos:end="79:33">CODEC_TYPE_AUDIO</name></expr>:</case>

                <expr_stmt pos:start="81:17" pos:end="81:82"><expr pos:start="81:17" pos:end="81:81"><call pos:start="81:17" pos:end="81:81"><name pos:start="81:17" pos:end="81:22">av_log</name><argument_list pos:start="81:23" pos:end="81:81">(<argument pos:start="81:24" pos:end="81:28"><expr pos:start="81:24" pos:end="81:28"><name pos:start="81:24" pos:end="81:28">codec</name></expr></argument>, <argument pos:start="81:31" pos:end="81:42"><expr pos:start="81:31" pos:end="81:42"><name pos:start="81:31" pos:end="81:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="81:45" pos:end="81:72"><expr pos:start="81:45" pos:end="81:72"><literal type="string" pos:start="81:45" pos:end="81:72">" audio codec set to : %s\n"</literal></expr></argument>, <argument pos:start="81:75" pos:end="81:80"><expr pos:start="81:75" pos:end="81:80"><name pos:start="81:75" pos:end="81:80">c_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:67"><expr pos:start="83:17" pos:end="83:66"><name pos:start="83:17" pos:end="83:34"><name pos:start="83:17" pos:end="83:21">codec</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:34">sample_rate</name></name> <operator pos:start="83:36" pos:end="83:36">=</operator> <name pos:start="83:38" pos:end="83:66">RTSP_DEFAULT_AUDIO_SAMPLERATE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:65"><expr pos:start="85:17" pos:end="85:64"><name pos:start="85:17" pos:end="85:31"><name pos:start="85:17" pos:end="85:21">codec</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:31">channels</name></name> <operator pos:start="85:33" pos:end="85:33">=</operator> <name pos:start="85:35" pos:end="85:64">RTSP_DEFAULT_NB_AUDIO_CHANNELS</name></expr>;</expr_stmt>

                <if_stmt pos:start="87:17" pos:end="103:17"><if pos:start="87:17" pos:end="103:17">if <condition pos:start="87:20" pos:end="87:26">(<expr pos:start="87:21" pos:end="87:25"><name pos:start="87:21" pos:end="87:21">i</name> <operator pos:start="87:23" pos:end="87:23">&gt;</operator> <literal type="number" pos:start="87:25" pos:end="87:25">0</literal></expr>)</condition> <block pos:start="87:28" pos:end="103:17">{<block_content pos:start="89:21" pos:end="97:44">

                    <expr_stmt pos:start="89:21" pos:end="89:43"><expr pos:start="89:21" pos:end="89:42"><name pos:start="89:21" pos:end="89:38"><name pos:start="89:21" pos:end="89:25">codec</name><operator pos:start="89:26" pos:end="89:27">-&gt;</operator><name pos:start="89:28" pos:end="89:38">sample_rate</name></name> <operator pos:start="89:40" pos:end="89:40">=</operator> <name pos:start="89:42" pos:end="89:42">i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="91:21" pos:end="91:60"><expr pos:start="91:21" pos:end="91:59"><call pos:start="91:21" pos:end="91:59"><name pos:start="91:21" pos:end="91:32">get_word_sep</name><argument_list pos:start="91:33" pos:end="91:59">(<argument pos:start="91:34" pos:end="91:36"><expr pos:start="91:34" pos:end="91:36"><name pos:start="91:34" pos:end="91:36">buf</name></expr></argument>, <argument pos:start="91:39" pos:end="91:49"><expr pos:start="91:39" pos:end="91:49"><sizeof pos:start="91:39" pos:end="91:49">sizeof<argument_list pos:start="91:45" pos:end="91:49">(<argument pos:start="91:46" pos:end="91:48"><expr pos:start="91:46" pos:end="91:48"><name pos:start="91:46" pos:end="91:48">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="91:52" pos:end="91:54"><expr pos:start="91:52" pos:end="91:54"><literal type="string" pos:start="91:52" pos:end="91:54">"/"</literal></expr></argument>, <argument pos:start="91:57" pos:end="91:58"><expr pos:start="91:57" pos:end="91:58"><operator pos:start="91:57" pos:end="91:57">&amp;</operator><name pos:start="91:58" pos:end="91:58">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:34"><expr pos:start="93:21" pos:end="93:33"><name pos:start="93:21" pos:end="93:21">i</name> <operator pos:start="93:23" pos:end="93:23">=</operator> <call pos:start="93:25" pos:end="93:33"><name pos:start="93:25" pos:end="93:28">atoi</name><argument_list pos:start="93:29" pos:end="93:33">(<argument pos:start="93:30" pos:end="93:32"><expr pos:start="93:30" pos:end="93:32"><name pos:start="93:30" pos:end="93:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="95:21" pos:end="97:44"><if pos:start="95:21" pos:end="97:44">if <condition pos:start="95:24" pos:end="95:30">(<expr pos:start="95:25" pos:end="95:29"><name pos:start="95:25" pos:end="95:25">i</name> <operator pos:start="95:27" pos:end="95:27">&gt;</operator> <literal type="number" pos:start="95:29" pos:end="95:29">0</literal></expr>)</condition><block type="pseudo" pos:start="97:25" pos:end="97:44"><block_content pos:start="97:25" pos:end="97:44">

                        <expr_stmt pos:start="97:25" pos:end="97:44"><expr pos:start="97:25" pos:end="97:43"><name pos:start="97:25" pos:end="97:39"><name pos:start="97:25" pos:end="97:29">codec</name><operator pos:start="97:30" pos:end="97:31">-&gt;</operator><name pos:start="97:32" pos:end="97:39">channels</name></name> <operator pos:start="97:41" pos:end="97:41">=</operator> <name pos:start="97:43" pos:end="97:43">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="line" pos:start="99:21" pos:end="99:136">// TODO: there is a bug here; if it is a mono stream, and less than 22000Hz, faad upconverts to stereo and twice the</comment>

                    <comment type="line" pos:start="101:21" pos:end="101:137">//  frequency.  No problem, but the sample rate is being set here by the sdp line.  Upcoming patch forthcoming. (rdm)</comment>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:99"><expr pos:start="105:17" pos:end="105:98"><call pos:start="105:17" pos:end="105:98"><name pos:start="105:17" pos:end="105:22">av_log</name><argument_list pos:start="105:23" pos:end="105:98">(<argument pos:start="105:24" pos:end="105:28"><expr pos:start="105:24" pos:end="105:28"><name pos:start="105:24" pos:end="105:28">codec</name></expr></argument>, <argument pos:start="105:31" pos:end="105:42"><expr pos:start="105:31" pos:end="105:42"><name pos:start="105:31" pos:end="105:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="105:45" pos:end="105:77"><expr pos:start="105:45" pos:end="105:77"><literal type="string" pos:start="105:45" pos:end="105:77">" audio samplerate set to : %i\n"</literal></expr></argument>, <argument pos:start="105:80" pos:end="105:97"><expr pos:start="105:80" pos:end="105:97"><name pos:start="105:80" pos:end="105:97"><name pos:start="105:80" pos:end="105:84">codec</name><operator pos:start="105:85" pos:end="105:86">-&gt;</operator><name pos:start="105:87" pos:end="105:97">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:94"><expr pos:start="107:17" pos:end="107:93"><call pos:start="107:17" pos:end="107:93"><name pos:start="107:17" pos:end="107:22">av_log</name><argument_list pos:start="107:23" pos:end="107:93">(<argument pos:start="107:24" pos:end="107:28"><expr pos:start="107:24" pos:end="107:28"><name pos:start="107:24" pos:end="107:28">codec</name></expr></argument>, <argument pos:start="107:31" pos:end="107:42"><expr pos:start="107:31" pos:end="107:42"><name pos:start="107:31" pos:end="107:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="107:45" pos:end="107:75"><expr pos:start="107:45" pos:end="107:75"><literal type="string" pos:start="107:45" pos:end="107:75">" audio channels set to : %i\n"</literal></expr></argument>, <argument pos:start="107:78" pos:end="107:92"><expr pos:start="107:78" pos:end="107:92"><name pos:start="107:78" pos:end="107:92"><name pos:start="107:78" pos:end="107:82">codec</name><operator pos:start="107:83" pos:end="107:84">-&gt;</operator><name pos:start="107:85" pos:end="107:92">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="109:17" pos:end="109:22">break;</break>

            <case pos:start="111:13" pos:end="111:34">case <expr pos:start="111:18" pos:end="111:33"><name pos:start="111:18" pos:end="111:33">CODEC_TYPE_VIDEO</name></expr>:</case>

                <expr_stmt pos:start="113:17" pos:end="113:82"><expr pos:start="113:17" pos:end="113:81"><call pos:start="113:17" pos:end="113:81"><name pos:start="113:17" pos:end="113:22">av_log</name><argument_list pos:start="113:23" pos:end="113:81">(<argument pos:start="113:24" pos:end="113:28"><expr pos:start="113:24" pos:end="113:28"><name pos:start="113:24" pos:end="113:28">codec</name></expr></argument>, <argument pos:start="113:31" pos:end="113:42"><expr pos:start="113:31" pos:end="113:42"><name pos:start="113:31" pos:end="113:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="113:45" pos:end="113:72"><expr pos:start="113:45" pos:end="113:72"><literal type="string" pos:start="113:45" pos:end="113:72">" video codec set to : %s\n"</literal></expr></argument>, <argument pos:start="113:75" pos:end="113:80"><expr pos:start="113:75" pos:end="113:80"><name pos:start="113:75" pos:end="113:80">c_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="115:17" pos:end="115:22">break;</break>

            <default pos:start="117:13" pos:end="117:20">default:</default>

                <break pos:start="119:17" pos:end="119:22">break;</break>

        </block_content>}</block></switch>

        <return pos:start="123:9" pos:end="123:17">return <expr pos:start="123:16" pos:end="123:16"><literal type="number" pos:start="123:16" pos:end="123:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="129:5" pos:end="129:14">return <expr pos:start="129:12" pos:end="129:13"><operator pos:start="129:12" pos:end="129:12">-</operator><literal type="number" pos:start="129:13" pos:end="129:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
