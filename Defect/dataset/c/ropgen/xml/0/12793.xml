<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12793.c" pos:tabs="8"><function pos:start="1:1" pos:end="389:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">vaapi_decode_make_config</name><parameter_list pos:start="1:36" pos:end="1:58">(<parameter pos:start="1:37" pos:end="1:57"><decl pos:start="1:37" pos:end="1:57"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:50">AVCodecContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="389:1">{<block_content pos:start="5:5" pos:end="387:15">

    <decl_stmt pos:start="5:5" pos:end="5:65"><decl pos:start="5:5" pos:end="5:64"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22">VAAPIDecodeContext</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:27">ctx</name> <init pos:start="5:29" pos:end="5:64">= <expr pos:start="5:31" pos:end="5:64"><name pos:start="5:31" pos:end="5:64"><name pos:start="5:31" pos:end="5:35">avctx</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:45">internal</name><operator pos:start="5:46" pos:end="5:47">-&gt;</operator><name pos:start="5:48" pos:end="5:64">hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="9:5" pos:end="9:46"><decl pos:start="9:5" pos:end="9:45"><type pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:19">AVVAAPIHWConfig</name>       <modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:35">hwconfig</name>    <init pos:start="9:40" pos:end="9:45">= <expr pos:start="9:42" pos:end="9:45"><name pos:start="9:42" pos:end="9:45">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:25">AVHWFramesConstraints</name> <modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:38">constraints</name> <init pos:start="11:40" pos:end="11:45">= <expr pos:start="11:42" pos:end="11:45"><name pos:start="11:42" pos:end="11:45">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">VAStatus</name></type> <name pos:start="13:14" pos:end="13:16">vas</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">err</name></decl>, <decl pos:start="15:14" pos:end="15:14"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:14">i</name></decl>, <decl pos:start="15:17" pos:end="15:17"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:17" pos:end="15:17">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:40"><decl pos:start="17:5" pos:end="17:39"><type pos:start="17:5" pos:end="17:29"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:27">AVCodecDescriptor</name> <modifier pos:start="17:29" pos:end="17:29">*</modifier></type><name pos:start="17:30" pos:end="17:39">codec_desc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:13">VAProfile</name></type> <name pos:start="19:15" pos:end="19:21">profile</name></decl>, <decl pos:start="19:24" pos:end="19:43"><type ref="prev" pos:start="19:5" pos:end="19:13"><modifier pos:start="19:24" pos:end="19:24">*</modifier></type><name pos:start="19:25" pos:end="19:36">profile_list</name> <init pos:start="19:38" pos:end="19:43">= <expr pos:start="19:40" pos:end="19:43"><name pos:start="19:40" pos:end="19:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:48"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:21">profile_count</name></decl>, <decl pos:start="21:24" pos:end="21:34"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:24" pos:end="21:34">exact_match</name></decl>, <decl pos:start="21:37" pos:end="21:47"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:37" pos:end="21:47">alt_profile</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:45"><decl pos:start="23:5" pos:end="23:37"><type pos:start="23:5" pos:end="23:30"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:28">AVPixFmtDescriptor</name> <modifier pos:start="23:30" pos:end="23:30">*</modifier></type><name pos:start="23:31" pos:end="23:37">sw_desc</name></decl>, <decl pos:start="23:40" pos:end="23:44"><type ref="prev" pos:start="23:5" pos:end="23:30"><modifier pos:start="23:40" pos:end="23:40">*</modifier></type><name pos:start="23:41" pos:end="23:44">desc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:57"><expr pos:start="27:5" pos:end="27:56"><name pos:start="27:5" pos:end="27:14">codec_desc</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <call pos:start="27:18" pos:end="27:56"><name pos:start="27:18" pos:end="27:39">avcodec_descriptor_get</name><argument_list pos:start="27:40" pos:end="27:56">(<argument pos:start="27:41" pos:end="27:55"><expr pos:start="27:41" pos:end="27:55"><name pos:start="27:41" pos:end="27:55"><name pos:start="27:41" pos:end="27:45">avctx</name><operator pos:start="27:46" pos:end="27:47">-&gt;</operator><name pos:start="27:48" pos:end="27:55">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:20">(<expr pos:start="29:9" pos:end="29:19"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:19">codec_desc</name></expr>)</condition> <block pos:start="29:22" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:30"><expr pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:11">err</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:29"><name pos:start="31:15" pos:end="31:21">AVERROR</name><argument_list pos:start="31:22" pos:end="31:29">(<argument pos:start="31:23" pos:end="31:28"><expr pos:start="31:23" pos:end="31:28"><name pos:start="31:23" pos:end="31:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="33:9" pos:end="33:18">goto <name pos:start="33:14" pos:end="33:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:58"><expr pos:start="39:5" pos:end="39:57"><name pos:start="39:5" pos:end="39:17">profile_count</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <call pos:start="39:21" pos:end="39:57"><name pos:start="39:21" pos:end="39:36">vaMaxNumProfiles</name><argument_list pos:start="39:37" pos:end="39:57">(<argument pos:start="39:38" pos:end="39:56"><expr pos:start="39:38" pos:end="39:56"><name pos:start="39:38" pos:end="39:56"><name pos:start="39:38" pos:end="39:40">ctx</name><operator pos:start="39:41" pos:end="39:42">-&gt;</operator><name pos:start="39:43" pos:end="39:47">hwctx</name><operator pos:start="39:48" pos:end="39:49">-&gt;</operator><name pos:start="39:50" pos:end="39:56">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="43:55"><expr pos:start="41:5" pos:end="43:54"><name pos:start="41:5" pos:end="41:16">profile_list</name>  <operator pos:start="41:19" pos:end="41:19">=</operator> <call pos:start="41:21" pos:end="43:54"><name pos:start="41:21" pos:end="41:35">av_malloc_array</name><argument_list pos:start="41:36" pos:end="43:54">(<argument pos:start="41:37" pos:end="41:49"><expr pos:start="41:37" pos:end="41:49"><name pos:start="41:37" pos:end="41:49">profile_count</name></expr></argument>,

                                    <argument pos:start="43:37" pos:end="43:53"><expr pos:start="43:37" pos:end="43:53"><sizeof pos:start="43:37" pos:end="43:53">sizeof<argument_list pos:start="43:43" pos:end="43:53">(<argument pos:start="43:44" pos:end="43:52"><expr pos:start="43:44" pos:end="43:52"><name pos:start="43:44" pos:end="43:52">VAProfile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:22">(<expr pos:start="45:9" pos:end="45:21"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:21">profile_list</name></expr>)</condition> <block pos:start="45:24" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:18">

        <expr_stmt pos:start="47:9" pos:end="47:30"><expr pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:11">err</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:29"><name pos:start="47:15" pos:end="47:21">AVERROR</name><argument_list pos:start="47:22" pos:end="47:29">(<argument pos:start="47:23" pos:end="47:28"><expr pos:start="47:23" pos:end="47:28"><name pos:start="47:23" pos:end="47:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:18">goto <name pos:start="49:14" pos:end="49:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="57:62"><expr pos:start="55:5" pos:end="57:61"><name pos:start="55:5" pos:end="55:7">vas</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="57:61"><name pos:start="55:11" pos:end="55:31">vaQueryConfigProfiles</name><argument_list pos:start="55:32" pos:end="57:61">(<argument pos:start="55:33" pos:end="55:51"><expr pos:start="55:33" pos:end="55:51"><name pos:start="55:33" pos:end="55:51"><name pos:start="55:33" pos:end="55:35">ctx</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:42">hwctx</name><operator pos:start="55:43" pos:end="55:44">-&gt;</operator><name pos:start="55:45" pos:end="55:51">display</name></name></expr></argument>,

                                <argument pos:start="57:33" pos:end="57:44"><expr pos:start="57:33" pos:end="57:44"><name pos:start="57:33" pos:end="57:44">profile_list</name></expr></argument>, <argument pos:start="57:47" pos:end="57:60"><expr pos:start="57:47" pos:end="57:60"><operator pos:start="57:47" pos:end="57:47">&amp;</operator><name pos:start="57:48" pos:end="57:60">profile_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="69:5"><if pos:start="59:5" pos:end="69:5">if <condition pos:start="59:8" pos:end="59:33">(<expr pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:11">vas</name> <operator pos:start="59:13" pos:end="59:14">!=</operator> <name pos:start="59:16" pos:end="59:32">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="59:35" pos:end="69:5">{<block_content pos:start="61:9" pos:end="67:18">

        <expr_stmt pos:start="61:9" pos:end="63:51"><expr pos:start="61:9" pos:end="63:50"><call pos:start="61:9" pos:end="63:50"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="63:50">(<argument pos:start="61:16" pos:end="61:20"><expr pos:start="61:16" pos:end="61:20"><name pos:start="61:16" pos:end="61:20">avctx</name></expr></argument>, <argument pos:start="61:23" pos:end="61:34"><expr pos:start="61:23" pos:end="61:34"><name pos:start="61:23" pos:end="61:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:37" pos:end="63:27"><expr pos:start="61:37" pos:end="63:27"><literal type="string" pos:start="61:37" pos:end="61:64">"Failed to query profiles: "</literal>

               <literal type="string" pos:start="63:16" pos:end="63:27">"%d (%s).\n"</literal></expr></argument>, <argument pos:start="63:30" pos:end="63:32"><expr pos:start="63:30" pos:end="63:32"><name pos:start="63:30" pos:end="63:32">vas</name></expr></argument>, <argument pos:start="63:35" pos:end="63:49"><expr pos:start="63:35" pos:end="63:49"><call pos:start="63:35" pos:end="63:49"><name pos:start="63:35" pos:end="63:44">vaErrorStr</name><argument_list pos:start="63:45" pos:end="63:49">(<argument pos:start="63:46" pos:end="63:48"><expr pos:start="63:46" pos:end="63:48"><name pos:start="63:46" pos:end="63:48">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:11">err</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:29"><name pos:start="65:15" pos:end="65:21">AVERROR</name><argument_list pos:start="65:22" pos:end="65:29">(<argument pos:start="65:23" pos:end="65:28"><expr pos:start="65:23" pos:end="65:28"><name pos:start="65:23" pos:end="65:28">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:28"><expr pos:start="73:5" pos:end="73:27"><name pos:start="73:5" pos:end="73:11">profile</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <name pos:start="73:15" pos:end="73:27">VAProfileNone</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:20"><expr pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:15">exact_match</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <literal type="number" pos:start="75:19" pos:end="75:19">0</literal></expr>;</expr_stmt>



    <for pos:start="79:5" pos:end="117:5">for <control pos:start="79:9" pos:end="79:59">(<init pos:start="79:10" pos:end="79:15"><expr pos:start="79:10" pos:end="79:14"><name pos:start="79:10" pos:end="79:10">i</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>;</init> <condition pos:start="79:17" pos:end="79:54"><expr pos:start="79:17" pos:end="79:53"><name pos:start="79:17" pos:end="79:17">i</name> <operator pos:start="79:19" pos:end="79:19">&lt;</operator> <call pos:start="79:21" pos:end="79:53"><name pos:start="79:21" pos:end="79:34">FF_ARRAY_ELEMS</name><argument_list pos:start="79:35" pos:end="79:53">(<argument pos:start="79:36" pos:end="79:52"><expr pos:start="79:36" pos:end="79:52"><name pos:start="79:36" pos:end="79:52">vaapi_profile_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="79:56" pos:end="79:58"><expr pos:start="79:56" pos:end="79:58"><name pos:start="79:56" pos:end="79:56">i</name><operator pos:start="79:57" pos:end="79:58">++</operator></expr></incr>)</control> <block pos:start="79:61" pos:end="117:5">{<block_content pos:start="81:9" pos:end="115:9">

        <decl_stmt pos:start="81:9" pos:end="81:30"><decl pos:start="81:9" pos:end="81:29"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:25">profile_match</name> <init pos:start="81:27" pos:end="81:29">= <expr pos:start="81:29" pos:end="81:29"><literal type="number" pos:start="81:29" pos:end="81:29">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="83:9" pos:end="85:21"><if pos:start="83:9" pos:end="85:21">if <condition pos:start="83:12" pos:end="83:61">(<expr pos:start="83:13" pos:end="83:60"><name pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:17">avctx</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:27">codec_id</name></name> <operator pos:start="83:29" pos:end="83:30">!=</operator> <name pos:start="83:32" pos:end="83:51"><name pos:start="83:32" pos:end="83:48">vaapi_profile_map</name><index pos:start="83:49" pos:end="83:51">[<expr pos:start="83:50" pos:end="83:50"><name pos:start="83:50" pos:end="83:50">i</name></expr>]</index></name><operator pos:start="83:52" pos:end="83:52">.</operator><name pos:start="83:53" pos:end="83:60">codec_id</name></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:21"><block_content pos:start="85:13" pos:end="85:21">

            <continue pos:start="85:13" pos:end="85:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="91:30"><if pos:start="87:9" pos:end="91:30">if <condition pos:start="87:12" pos:end="89:69">(<expr pos:start="87:13" pos:end="89:68"><name pos:start="87:13" pos:end="87:26"><name pos:start="87:13" pos:end="87:17">avctx</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:26">profile</name></name> <operator pos:start="87:28" pos:end="87:29">==</operator> <name pos:start="87:31" pos:end="87:50"><name pos:start="87:31" pos:end="87:47">vaapi_profile_map</name><index pos:start="87:48" pos:end="87:50">[<expr pos:start="87:49" pos:end="87:49"><name pos:start="87:49" pos:end="87:49">i</name></expr>]</index></name><operator pos:start="87:51" pos:end="87:51">.</operator><name pos:start="87:52" pos:end="87:64">codec_profile</name> <operator pos:start="87:66" pos:end="87:67">||</operator>

            <name pos:start="89:13" pos:end="89:32"><name pos:start="89:13" pos:end="89:29">vaapi_profile_map</name><index pos:start="89:30" pos:end="89:32">[<expr pos:start="89:31" pos:end="89:31"><name pos:start="89:31" pos:end="89:31">i</name></expr>]</index></name><operator pos:start="89:33" pos:end="89:33">.</operator><name pos:start="89:34" pos:end="89:46">codec_profile</name> <operator pos:start="89:48" pos:end="89:49">==</operator> <name pos:start="89:51" pos:end="89:68">FF_PROFILE_UNKNOWN</name></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:30"><block_content pos:start="91:13" pos:end="91:30">

            <expr_stmt pos:start="91:13" pos:end="91:30"><expr pos:start="91:13" pos:end="91:29"><name pos:start="91:13" pos:end="91:25">profile_match</name> <operator pos:start="91:27" pos:end="91:27">=</operator> <literal type="number" pos:start="91:29" pos:end="91:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:50"><expr pos:start="93:9" pos:end="93:49"><name pos:start="93:9" pos:end="93:15">profile</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <name pos:start="93:19" pos:end="93:38"><name pos:start="93:19" pos:end="93:35">vaapi_profile_map</name><index pos:start="93:36" pos:end="93:38">[<expr pos:start="93:37" pos:end="93:37"><name pos:start="93:37" pos:end="93:37">i</name></expr>]</index></name><operator pos:start="93:39" pos:end="93:39">.</operator><name pos:start="93:40" pos:end="93:49">va_profile</name></expr>;</expr_stmt>

        <for pos:start="95:9" pos:end="105:9">for <control pos:start="95:13" pos:end="95:43">(<init pos:start="95:14" pos:end="95:19"><expr pos:start="95:14" pos:end="95:18"><name pos:start="95:14" pos:end="95:14">j</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <literal type="number" pos:start="95:18" pos:end="95:18">0</literal></expr>;</init> <condition pos:start="95:21" pos:end="95:38"><expr pos:start="95:21" pos:end="95:37"><name pos:start="95:21" pos:end="95:21">j</name> <operator pos:start="95:23" pos:end="95:23">&lt;</operator> <name pos:start="95:25" pos:end="95:37">profile_count</name></expr>;</condition> <incr pos:start="95:40" pos:end="95:42"><expr pos:start="95:40" pos:end="95:42"><name pos:start="95:40" pos:end="95:40">j</name><operator pos:start="95:41" pos:end="95:42">++</operator></expr></incr>)</control> <block pos:start="95:45" pos:end="105:9">{<block_content pos:start="97:13" pos:end="103:13">

            <if_stmt pos:start="97:13" pos:end="103:13"><if pos:start="97:13" pos:end="103:13">if <condition pos:start="97:16" pos:end="97:43">(<expr pos:start="97:17" pos:end="97:42"><name pos:start="97:17" pos:end="97:23">profile</name> <operator pos:start="97:25" pos:end="97:26">==</operator> <name pos:start="97:28" pos:end="97:42"><name pos:start="97:28" pos:end="97:39">profile_list</name><index pos:start="97:40" pos:end="97:42">[<expr pos:start="97:41" pos:end="97:41"><name pos:start="97:41" pos:end="97:41">j</name></expr>]</index></name></expr>)</condition> <block pos:start="97:45" pos:end="103:13">{<block_content pos:start="99:17" pos:end="101:22">

                <expr_stmt pos:start="99:17" pos:end="99:44"><expr pos:start="99:17" pos:end="99:43"><name pos:start="99:17" pos:end="99:27">exact_match</name> <operator pos:start="99:29" pos:end="99:29">=</operator> <name pos:start="99:31" pos:end="99:43">profile_match</name></expr>;</expr_stmt>

                <break pos:start="101:17" pos:end="101:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="107:9" pos:end="115:9"><if pos:start="107:9" pos:end="115:9">if <condition pos:start="107:12" pos:end="107:30">(<expr pos:start="107:13" pos:end="107:29"><name pos:start="107:13" pos:end="107:13">j</name> <operator pos:start="107:15" pos:end="107:15">&lt;</operator> <name pos:start="107:17" pos:end="107:29">profile_count</name></expr>)</condition> <block pos:start="107:32" pos:end="115:9">{<block_content pos:start="109:13" pos:end="113:61">

            <if_stmt pos:start="109:13" pos:end="111:22"><if pos:start="109:13" pos:end="111:22">if <condition pos:start="109:16" pos:end="109:28">(<expr pos:start="109:17" pos:end="109:27"><name pos:start="109:17" pos:end="109:27">exact_match</name></expr>)</condition><block type="pseudo" pos:start="111:17" pos:end="111:22"><block_content pos:start="111:17" pos:end="111:22">

                <break pos:start="111:17" pos:end="111:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:61"><expr pos:start="113:13" pos:end="113:60"><name pos:start="113:13" pos:end="113:23">alt_profile</name> <operator pos:start="113:25" pos:end="113:25">=</operator> <name pos:start="113:27" pos:end="113:46"><name pos:start="113:27" pos:end="113:43">vaapi_profile_map</name><index pos:start="113:44" pos:end="113:46">[<expr pos:start="113:45" pos:end="113:45"><name pos:start="113:45" pos:end="113:45">i</name></expr>]</index></name><operator pos:start="113:47" pos:end="113:47">.</operator><name pos:start="113:48" pos:end="113:60">codec_profile</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="119:5" pos:end="119:28"><expr pos:start="119:5" pos:end="119:27"><call pos:start="119:5" pos:end="119:27"><name pos:start="119:5" pos:end="119:12">av_freep</name><argument_list pos:start="119:13" pos:end="119:27">(<argument pos:start="119:14" pos:end="119:26"><expr pos:start="119:14" pos:end="119:26"><operator pos:start="119:14" pos:end="119:14">&amp;</operator><name pos:start="119:15" pos:end="119:26">profile_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="133:5"><if pos:start="123:5" pos:end="133:5">if <condition pos:start="123:8" pos:end="123:33">(<expr pos:start="123:9" pos:end="123:32"><name pos:start="123:9" pos:end="123:15">profile</name> <operator pos:start="123:17" pos:end="123:18">==</operator> <name pos:start="123:20" pos:end="123:32">VAProfileNone</name></expr>)</condition> <block pos:start="123:35" pos:end="133:5">{<block_content pos:start="125:9" pos:end="131:18">

        <expr_stmt pos:start="125:9" pos:end="127:66"><expr pos:start="125:9" pos:end="127:65"><call pos:start="125:9" pos:end="127:65"><name pos:start="125:9" pos:end="125:14">av_log</name><argument_list pos:start="125:15" pos:end="127:65">(<argument pos:start="125:16" pos:end="125:20"><expr pos:start="125:16" pos:end="125:20"><name pos:start="125:16" pos:end="125:20">avctx</name></expr></argument>, <argument pos:start="125:23" pos:end="125:34"><expr pos:start="125:23" pos:end="125:34"><name pos:start="125:23" pos:end="125:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="125:37" pos:end="127:30"><expr pos:start="125:37" pos:end="127:30"><literal type="string" pos:start="125:37" pos:end="125:62">"No support for codec %s "</literal>

               <literal type="string" pos:start="127:16" pos:end="127:30">"profile %d.\n"</literal></expr></argument>, <argument pos:start="127:33" pos:end="127:48"><expr pos:start="127:33" pos:end="127:48"><name pos:start="127:33" pos:end="127:48"><name pos:start="127:33" pos:end="127:42">codec_desc</name><operator pos:start="127:43" pos:end="127:44">-&gt;</operator><name pos:start="127:45" pos:end="127:48">name</name></name></expr></argument>, <argument pos:start="127:51" pos:end="127:64"><expr pos:start="127:51" pos:end="127:64"><name pos:start="127:51" pos:end="127:64"><name pos:start="127:51" pos:end="127:55">avctx</name><operator pos:start="127:56" pos:end="127:57">-&gt;</operator><name pos:start="127:58" pos:end="127:64">profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:30"><expr pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:11">err</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <call pos:start="129:15" pos:end="129:29"><name pos:start="129:15" pos:end="129:21">AVERROR</name><argument_list pos:start="129:22" pos:end="129:29">(<argument pos:start="129:23" pos:end="129:28"><expr pos:start="129:23" pos:end="129:28"><name pos:start="129:23" pos:end="129:28">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="131:9" pos:end="131:18">goto <name pos:start="131:14" pos:end="131:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="135:5" pos:end="167:5"><if pos:start="135:5" pos:end="167:5">if <condition pos:start="135:8" pos:end="135:21">(<expr pos:start="135:9" pos:end="135:20"><operator pos:start="135:9" pos:end="135:9">!</operator><name pos:start="135:10" pos:end="135:20">exact_match</name></expr>)</condition> <block pos:start="135:23" pos:end="167:5">{<block_content pos:start="137:9" pos:end="165:9">

        <if_stmt pos:start="137:9" pos:end="165:9"><if pos:start="137:9" pos:end="153:9">if <condition pos:start="137:12" pos:end="139:51">(<expr pos:start="137:13" pos:end="139:50"><name pos:start="137:13" pos:end="137:32"><name pos:start="137:13" pos:end="137:17">avctx</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:32">hwaccel_flags</name></name> <operator pos:start="137:34" pos:end="137:34">&amp;</operator>

            <name pos:start="139:13" pos:end="139:50">AV_HWACCEL_FLAG_ALLOW_PROFILE_MISMATCH</name></expr>)</condition> <block pos:start="139:53" pos:end="153:9">{<block_content pos:start="141:13" pos:end="151:32">

            <expr_stmt pos:start="141:13" pos:end="145:53"><expr pos:start="141:13" pos:end="145:52"><call pos:start="141:13" pos:end="145:52"><name pos:start="141:13" pos:end="141:18">av_log</name><argument_list pos:start="141:19" pos:end="145:52">(<argument pos:start="141:20" pos:end="141:24"><expr pos:start="141:20" pos:end="141:24"><name pos:start="141:20" pos:end="141:24">avctx</name></expr></argument>, <argument pos:start="141:27" pos:end="141:40"><expr pos:start="141:27" pos:end="141:40"><name pos:start="141:27" pos:end="141:40">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="141:43" pos:end="143:53"><expr pos:start="141:43" pos:end="143:53"><literal type="string" pos:start="141:43" pos:end="141:68">"Codec %s profile %d not "</literal>

                   <literal type="string" pos:start="143:20" pos:end="143:53">"supported for hardware decode.\n"</literal></expr></argument>,

                   <argument pos:start="145:20" pos:end="145:35"><expr pos:start="145:20" pos:end="145:35"><name pos:start="145:20" pos:end="145:35"><name pos:start="145:20" pos:end="145:29">codec_desc</name><operator pos:start="145:30" pos:end="145:31">-&gt;</operator><name pos:start="145:32" pos:end="145:35">name</name></name></expr></argument>, <argument pos:start="145:38" pos:end="145:51"><expr pos:start="145:38" pos:end="145:51"><name pos:start="145:38" pos:end="145:51"><name pos:start="145:38" pos:end="145:42">avctx</name><operator pos:start="145:43" pos:end="145:44">-&gt;</operator><name pos:start="145:45" pos:end="145:51">profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="151:32"><expr pos:start="147:13" pos:end="151:31"><call pos:start="147:13" pos:end="151:31"><name pos:start="147:13" pos:end="147:18">av_log</name><argument_list pos:start="147:19" pos:end="151:31">(<argument pos:start="147:20" pos:end="147:24"><expr pos:start="147:20" pos:end="147:24"><name pos:start="147:20" pos:end="147:24">avctx</name></expr></argument>, <argument pos:start="147:27" pos:end="147:40"><expr pos:start="147:27" pos:end="147:40"><name pos:start="147:27" pos:end="147:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="147:43" pos:end="149:55"><expr pos:start="147:43" pos:end="149:55"><literal type="string" pos:start="147:43" pos:end="147:59">"Using possibly-"</literal>

                   <literal type="string" pos:start="149:20" pos:end="149:55">"incompatible profile %d instead.\n"</literal></expr></argument>,

                   <argument pos:start="151:20" pos:end="151:30"><expr pos:start="151:20" pos:end="151:30"><name pos:start="151:20" pos:end="151:30">alt_profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="153:11" pos:end="165:9">else <block pos:start="153:16" pos:end="165:9">{<block_content pos:start="155:13" pos:end="163:22">

            <expr_stmt pos:start="155:13" pos:end="159:53"><expr pos:start="155:13" pos:end="159:52"><call pos:start="155:13" pos:end="159:52"><name pos:start="155:13" pos:end="155:18">av_log</name><argument_list pos:start="155:19" pos:end="159:52">(<argument pos:start="155:20" pos:end="155:24"><expr pos:start="155:20" pos:end="155:24"><name pos:start="155:20" pos:end="155:24">avctx</name></expr></argument>, <argument pos:start="155:27" pos:end="155:40"><expr pos:start="155:27" pos:end="155:40"><name pos:start="155:27" pos:end="155:40">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="155:43" pos:end="157:53"><expr pos:start="155:43" pos:end="157:53"><literal type="string" pos:start="155:43" pos:end="155:68">"Codec %s profile %d not "</literal>

                   <literal type="string" pos:start="157:20" pos:end="157:53">"supported for hardware decode.\n"</literal></expr></argument>,

                   <argument pos:start="159:20" pos:end="159:35"><expr pos:start="159:20" pos:end="159:35"><name pos:start="159:20" pos:end="159:35"><name pos:start="159:20" pos:end="159:29">codec_desc</name><operator pos:start="159:30" pos:end="159:31">-&gt;</operator><name pos:start="159:32" pos:end="159:35">name</name></name></expr></argument>, <argument pos:start="159:38" pos:end="159:51"><expr pos:start="159:38" pos:end="159:51"><name pos:start="159:38" pos:end="159:51"><name pos:start="159:38" pos:end="159:42">avctx</name><operator pos:start="159:43" pos:end="159:44">-&gt;</operator><name pos:start="159:45" pos:end="159:51">profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:34"><expr pos:start="161:13" pos:end="161:33"><name pos:start="161:13" pos:end="161:15">err</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <call pos:start="161:19" pos:end="161:33"><name pos:start="161:19" pos:end="161:25">AVERROR</name><argument_list pos:start="161:26" pos:end="161:33">(<argument pos:start="161:27" pos:end="161:32"><expr pos:start="161:27" pos:end="161:32"><name pos:start="161:27" pos:end="161:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="163:13" pos:end="163:22">goto <name pos:start="163:18" pos:end="163:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:33"><expr pos:start="171:5" pos:end="171:32"><name pos:start="171:5" pos:end="171:19"><name pos:start="171:5" pos:end="171:7">ctx</name><operator pos:start="171:8" pos:end="171:9">-&gt;</operator><name pos:start="171:10" pos:end="171:19">va_profile</name></name>    <operator pos:start="171:24" pos:end="171:24">=</operator> <name pos:start="171:26" pos:end="171:32">profile</name></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:41"><expr pos:start="173:5" pos:end="173:40"><name pos:start="173:5" pos:end="173:22"><name pos:start="173:5" pos:end="173:7">ctx</name><operator pos:start="173:8" pos:end="173:9">-&gt;</operator><name pos:start="173:10" pos:end="173:22">va_entrypoint</name></name> <operator pos:start="173:24" pos:end="173:24">=</operator> <name pos:start="173:26" pos:end="173:40">VAEntrypointVLD</name></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="181:42"><expr pos:start="177:5" pos:end="181:41"><name pos:start="177:5" pos:end="177:7">vas</name> <operator pos:start="177:9" pos:end="177:9">=</operator> <call pos:start="177:11" pos:end="181:41"><name pos:start="177:11" pos:end="177:24">vaCreateConfig</name><argument_list pos:start="177:25" pos:end="181:41">(<argument pos:start="177:26" pos:end="177:44"><expr pos:start="177:26" pos:end="177:44"><name pos:start="177:26" pos:end="177:44"><name pos:start="177:26" pos:end="177:28">ctx</name><operator pos:start="177:29" pos:end="177:30">-&gt;</operator><name pos:start="177:31" pos:end="177:35">hwctx</name><operator pos:start="177:36" pos:end="177:37">-&gt;</operator><name pos:start="177:38" pos:end="177:44">display</name></name></expr></argument>, <argument pos:start="177:47" pos:end="177:61"><expr pos:start="177:47" pos:end="177:61"><name pos:start="177:47" pos:end="177:61"><name pos:start="177:47" pos:end="177:49">ctx</name><operator pos:start="177:50" pos:end="177:51">-&gt;</operator><name pos:start="177:52" pos:end="177:61">va_profile</name></name></expr></argument>,

                         <argument pos:start="179:26" pos:end="179:43"><expr pos:start="179:26" pos:end="179:43"><name pos:start="179:26" pos:end="179:43"><name pos:start="179:26" pos:end="179:28">ctx</name><operator pos:start="179:29" pos:end="179:30">-&gt;</operator><name pos:start="179:31" pos:end="179:43">va_entrypoint</name></name></expr></argument>, <argument pos:start="179:46" pos:end="179:49"><expr pos:start="179:46" pos:end="179:49"><name pos:start="179:46" pos:end="179:49">NULL</name></expr></argument>, <argument pos:start="179:52" pos:end="179:52"><expr pos:start="179:52" pos:end="179:52"><literal type="number" pos:start="179:52" pos:end="179:52">0</literal></expr></argument>,

                         <argument pos:start="181:26" pos:end="181:40"><expr pos:start="181:26" pos:end="181:40"><operator pos:start="181:26" pos:end="181:26">&amp;</operator><name pos:start="181:27" pos:end="181:40"><name pos:start="181:27" pos:end="181:29">ctx</name><operator pos:start="181:30" pos:end="181:31">-&gt;</operator><name pos:start="181:32" pos:end="181:40">va_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="183:5" pos:end="193:5"><if pos:start="183:5" pos:end="193:5">if <condition pos:start="183:8" pos:end="183:33">(<expr pos:start="183:9" pos:end="183:32"><name pos:start="183:9" pos:end="183:11">vas</name> <operator pos:start="183:13" pos:end="183:14">!=</operator> <name pos:start="183:16" pos:end="183:32">VA_STATUS_SUCCESS</name></expr>)</condition> <block pos:start="183:35" pos:end="193:5">{<block_content pos:start="185:9" pos:end="191:18">

        <expr_stmt pos:start="185:9" pos:end="187:66"><expr pos:start="185:9" pos:end="187:65"><call pos:start="185:9" pos:end="187:65"><name pos:start="185:9" pos:end="185:14">av_log</name><argument_list pos:start="185:15" pos:end="187:65">(<argument pos:start="185:16" pos:end="185:20"><expr pos:start="185:16" pos:end="185:20"><name pos:start="185:16" pos:end="185:20">avctx</name></expr></argument>, <argument pos:start="185:23" pos:end="185:34"><expr pos:start="185:23" pos:end="185:34"><name pos:start="185:23" pos:end="185:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="185:37" pos:end="187:42"><expr pos:start="185:37" pos:end="187:42"><literal type="string" pos:start="185:37" pos:end="185:62">"Failed to create decode "</literal>

               <literal type="string" pos:start="187:16" pos:end="187:42">"configuration: %d (%s).\n"</literal></expr></argument>, <argument pos:start="187:45" pos:end="187:47"><expr pos:start="187:45" pos:end="187:47"><name pos:start="187:45" pos:end="187:47">vas</name></expr></argument>, <argument pos:start="187:50" pos:end="187:64"><expr pos:start="187:50" pos:end="187:64"><call pos:start="187:50" pos:end="187:64"><name pos:start="187:50" pos:end="187:59">vaErrorStr</name><argument_list pos:start="187:60" pos:end="187:64">(<argument pos:start="187:61" pos:end="187:63"><expr pos:start="187:61" pos:end="187:63"><name pos:start="187:61" pos:end="187:63">vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:27"><expr pos:start="189:9" pos:end="189:26"><name pos:start="189:9" pos:end="189:11">err</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <call pos:start="189:15" pos:end="189:26"><name pos:start="189:15" pos:end="189:21">AVERROR</name><argument_list pos:start="189:22" pos:end="189:26">(<argument pos:start="189:23" pos:end="189:25"><expr pos:start="189:23" pos:end="189:25"><name pos:start="189:23" pos:end="189:25">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="191:9" pos:end="191:18">goto <name pos:start="191:14" pos:end="191:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="201:67"><expr pos:start="197:5" pos:end="201:66"><name pos:start="197:5" pos:end="197:12">hwconfig</name> <operator pos:start="197:14" pos:end="197:14">=</operator> <call pos:start="197:16" pos:end="201:66"><name pos:start="197:16" pos:end="197:41">av_hwdevice_hwconfig_alloc</name><argument_list pos:start="197:42" pos:end="201:66">(<argument pos:start="197:43" pos:end="201:65"><expr pos:start="197:43" pos:end="201:65"><ternary pos:start="197:43" pos:end="201:65"><condition pos:start="197:43" pos:end="197:64"><expr pos:start="197:43" pos:end="197:62"><name pos:start="197:43" pos:end="197:62"><name pos:start="197:43" pos:end="197:47">avctx</name><operator pos:start="197:48" pos:end="197:49">-&gt;</operator><name pos:start="197:50" pos:end="197:62">hw_device_ctx</name></name></expr> ?</condition><then pos:start="199:43" pos:end="199:62">

                                          <expr pos:start="199:43" pos:end="199:62"><name pos:start="199:43" pos:end="199:62"><name pos:start="199:43" pos:end="199:47">avctx</name><operator pos:start="199:48" pos:end="199:49">-&gt;</operator><name pos:start="199:50" pos:end="199:62">hw_device_ctx</name></name></expr> </then><else pos:start="199:64" pos:end="201:65">:

                                          <expr pos:start="201:43" pos:end="201:65"><name pos:start="201:43" pos:end="201:65"><name pos:start="201:43" pos:end="201:45">ctx</name><operator pos:start="201:46" pos:end="201:47">-&gt;</operator><name pos:start="201:48" pos:end="201:53">frames</name><operator pos:start="201:54" pos:end="201:55">-&gt;</operator><name pos:start="201:56" pos:end="201:65">device_ref</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="209:5"><if pos:start="203:5" pos:end="209:5">if <condition pos:start="203:8" pos:end="203:18">(<expr pos:start="203:9" pos:end="203:17"><operator pos:start="203:9" pos:end="203:9">!</operator><name pos:start="203:10" pos:end="203:17">hwconfig</name></expr>)</condition> <block pos:start="203:20" pos:end="209:5">{<block_content pos:start="205:9" pos:end="207:18">

        <expr_stmt pos:start="205:9" pos:end="205:30"><expr pos:start="205:9" pos:end="205:29"><name pos:start="205:9" pos:end="205:11">err</name> <operator pos:start="205:13" pos:end="205:13">=</operator> <call pos:start="205:15" pos:end="205:29"><name pos:start="205:15" pos:end="205:21">AVERROR</name><argument_list pos:start="205:22" pos:end="205:29">(<argument pos:start="205:23" pos:end="205:28"><expr pos:start="205:23" pos:end="205:28"><name pos:start="205:23" pos:end="205:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="207:9" pos:end="207:18">goto <name pos:start="207:14" pos:end="207:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:41"><expr pos:start="211:5" pos:end="211:40"><name pos:start="211:5" pos:end="211:23"><name pos:start="211:5" pos:end="211:12">hwconfig</name><operator pos:start="211:13" pos:end="211:14">-&gt;</operator><name pos:start="211:15" pos:end="211:23">config_id</name></name> <operator pos:start="211:25" pos:end="211:25">=</operator> <name pos:start="211:27" pos:end="211:40"><name pos:start="211:27" pos:end="211:29">ctx</name><operator pos:start="211:30" pos:end="211:31">-&gt;</operator><name pos:start="211:32" pos:end="211:40">va_config</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="215:5" pos:end="223:54"><expr pos:start="215:5" pos:end="223:53"><name pos:start="215:5" pos:end="215:15">constraints</name> <operator pos:start="215:17" pos:end="215:17">=</operator>

        <call pos:start="217:9" pos:end="223:53"><name pos:start="217:9" pos:end="217:43">av_hwdevice_get_hwframe_constraints</name><argument_list pos:start="217:44" pos:end="223:53">(<argument pos:start="217:45" pos:end="221:67"><expr pos:start="217:45" pos:end="221:67"><ternary pos:start="217:45" pos:end="221:67"><condition pos:start="217:45" pos:end="217:66"><expr pos:start="217:45" pos:end="217:64"><name pos:start="217:45" pos:end="217:64"><name pos:start="217:45" pos:end="217:49">avctx</name><operator pos:start="217:50" pos:end="217:51">-&gt;</operator><name pos:start="217:52" pos:end="217:64">hw_device_ctx</name></name></expr> ?</condition><then pos:start="219:45" pos:end="219:64">

                                            <expr pos:start="219:45" pos:end="219:64"><name pos:start="219:45" pos:end="219:64"><name pos:start="219:45" pos:end="219:49">avctx</name><operator pos:start="219:50" pos:end="219:51">-&gt;</operator><name pos:start="219:52" pos:end="219:64">hw_device_ctx</name></name></expr> </then><else pos:start="219:66" pos:end="221:67">:

                                            <expr pos:start="221:45" pos:end="221:67"><name pos:start="221:45" pos:end="221:67"><name pos:start="221:45" pos:end="221:47">ctx</name><operator pos:start="221:48" pos:end="221:49">-&gt;</operator><name pos:start="221:50" pos:end="221:55">frames</name><operator pos:start="221:56" pos:end="221:57">-&gt;</operator><name pos:start="221:58" pos:end="221:67">device_ref</name></name></expr></else></ternary></expr></argument>,

                                            <argument pos:start="223:45" pos:end="223:52"><expr pos:start="223:45" pos:end="223:52"><name pos:start="223:45" pos:end="223:52">hwconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="231:5"><if pos:start="225:5" pos:end="231:5">if <condition pos:start="225:8" pos:end="225:21">(<expr pos:start="225:9" pos:end="225:20"><operator pos:start="225:9" pos:end="225:9">!</operator><name pos:start="225:10" pos:end="225:20">constraints</name></expr>)</condition> <block pos:start="225:23" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:18">

        <expr_stmt pos:start="227:9" pos:end="227:30"><expr pos:start="227:9" pos:end="227:29"><name pos:start="227:9" pos:end="227:11">err</name> <operator pos:start="227:13" pos:end="227:13">=</operator> <call pos:start="227:15" pos:end="227:29"><name pos:start="227:15" pos:end="227:21">AVERROR</name><argument_list pos:start="227:22" pos:end="227:29">(<argument pos:start="227:23" pos:end="227:28"><expr pos:start="227:23" pos:end="227:28"><name pos:start="227:23" pos:end="227:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="229:9" pos:end="229:18">goto <name pos:start="229:14" pos:end="229:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="235:5" pos:end="257:5"><if pos:start="235:5" pos:end="257:5">if <condition pos:start="235:8" pos:end="241:54">(<expr pos:start="235:9" pos:end="241:53"><name pos:start="235:9" pos:end="235:26"><name pos:start="235:9" pos:end="235:13">avctx</name><operator pos:start="235:14" pos:end="235:15">-&gt;</operator><name pos:start="235:16" pos:end="235:26">coded_width</name></name>  <operator pos:start="235:29" pos:end="235:29">&lt;</operator> <name pos:start="235:31" pos:end="235:52"><name pos:start="235:31" pos:end="235:41">constraints</name><operator pos:start="235:42" pos:end="235:43">-&gt;</operator><name pos:start="235:44" pos:end="235:52">min_width</name></name>  <operator pos:start="235:55" pos:end="235:56">||</operator>

        <name pos:start="237:9" pos:end="237:27"><name pos:start="237:9" pos:end="237:13">avctx</name><operator pos:start="237:14" pos:end="237:15">-&gt;</operator><name pos:start="237:16" pos:end="237:27">coded_height</name></name> <operator pos:start="237:29" pos:end="237:29">&lt;</operator> <name pos:start="237:31" pos:end="237:53"><name pos:start="237:31" pos:end="237:41">constraints</name><operator pos:start="237:42" pos:end="237:43">-&gt;</operator><name pos:start="237:44" pos:end="237:53">min_height</name></name> <operator pos:start="237:55" pos:end="237:56">||</operator>

        <name pos:start="239:9" pos:end="239:26"><name pos:start="239:9" pos:end="239:13">avctx</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:26">coded_width</name></name>  <operator pos:start="239:29" pos:end="239:29">&gt;</operator> <name pos:start="239:31" pos:end="239:52"><name pos:start="239:31" pos:end="239:41">constraints</name><operator pos:start="239:42" pos:end="239:43">-&gt;</operator><name pos:start="239:44" pos:end="239:52">max_width</name></name>  <operator pos:start="239:55" pos:end="239:56">||</operator>

        <name pos:start="241:9" pos:end="241:27"><name pos:start="241:9" pos:end="241:13">avctx</name><operator pos:start="241:14" pos:end="241:15">-&gt;</operator><name pos:start="241:16" pos:end="241:27">coded_height</name></name> <operator pos:start="241:29" pos:end="241:29">&gt;</operator> <name pos:start="241:31" pos:end="241:53"><name pos:start="241:31" pos:end="241:41">constraints</name><operator pos:start="241:42" pos:end="241:43">-&gt;</operator><name pos:start="241:44" pos:end="241:53">max_height</name></name></expr>)</condition> <block pos:start="241:56" pos:end="257:5">{<block_content pos:start="243:9" pos:end="255:18">

        <expr_stmt pos:start="243:9" pos:end="251:65"><expr pos:start="243:9" pos:end="251:64"><call pos:start="243:9" pos:end="251:64"><name pos:start="243:9" pos:end="243:14">av_log</name><argument_list pos:start="243:15" pos:end="251:64">(<argument pos:start="243:16" pos:end="243:20"><expr pos:start="243:16" pos:end="243:20"><name pos:start="243:16" pos:end="243:20">avctx</name></expr></argument>, <argument pos:start="243:23" pos:end="243:34"><expr pos:start="243:23" pos:end="243:34"><name pos:start="243:23" pos:end="243:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="243:37" pos:end="245:70"><expr pos:start="243:37" pos:end="245:70"><literal type="string" pos:start="243:37" pos:end="243:70">"Hardware does not support image "</literal>

               <literal type="string" pos:start="245:16" pos:end="245:70">"size %dx%d (constraints: width %d-%d height %d-%d).\n"</literal></expr></argument>,

               <argument pos:start="247:16" pos:end="247:33"><expr pos:start="247:16" pos:end="247:33"><name pos:start="247:16" pos:end="247:33"><name pos:start="247:16" pos:end="247:20">avctx</name><operator pos:start="247:21" pos:end="247:22">-&gt;</operator><name pos:start="247:23" pos:end="247:33">coded_width</name></name></expr></argument>, <argument pos:start="247:36" pos:end="247:54"><expr pos:start="247:36" pos:end="247:54"><name pos:start="247:36" pos:end="247:54"><name pos:start="247:36" pos:end="247:40">avctx</name><operator pos:start="247:41" pos:end="247:42">-&gt;</operator><name pos:start="247:43" pos:end="247:54">coded_height</name></name></expr></argument>,

               <argument pos:start="249:16" pos:end="249:37"><expr pos:start="249:16" pos:end="249:37"><name pos:start="249:16" pos:end="249:37"><name pos:start="249:16" pos:end="249:26">constraints</name><operator pos:start="249:27" pos:end="249:28">-&gt;</operator><name pos:start="249:29" pos:end="249:37">min_width</name></name></expr></argument>,  <argument pos:start="249:41" pos:end="249:62"><expr pos:start="249:41" pos:end="249:62"><name pos:start="249:41" pos:end="249:62"><name pos:start="249:41" pos:end="249:51">constraints</name><operator pos:start="249:52" pos:end="249:53">-&gt;</operator><name pos:start="249:54" pos:end="249:62">max_width</name></name></expr></argument>,

               <argument pos:start="251:16" pos:end="251:38"><expr pos:start="251:16" pos:end="251:38"><name pos:start="251:16" pos:end="251:38"><name pos:start="251:16" pos:end="251:26">constraints</name><operator pos:start="251:27" pos:end="251:28">-&gt;</operator><name pos:start="251:29" pos:end="251:38">min_height</name></name></expr></argument>, <argument pos:start="251:41" pos:end="251:63"><expr pos:start="251:41" pos:end="251:63"><name pos:start="251:41" pos:end="251:63"><name pos:start="251:41" pos:end="251:51">constraints</name><operator pos:start="251:52" pos:end="251:53">-&gt;</operator><name pos:start="251:54" pos:end="251:63">max_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:30"><expr pos:start="253:9" pos:end="253:29"><name pos:start="253:9" pos:end="253:11">err</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <call pos:start="253:15" pos:end="253:29"><name pos:start="253:15" pos:end="253:21">AVERROR</name><argument_list pos:start="253:22" pos:end="253:29">(<argument pos:start="253:23" pos:end="253:28"><expr pos:start="253:23" pos:end="253:28"><name pos:start="253:23" pos:end="253:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="255:9" pos:end="255:18">goto <name pos:start="255:14" pos:end="255:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="259:5" pos:end="271:5"><if pos:start="259:5" pos:end="271:5">if <condition pos:start="259:8" pos:end="261:60">(<expr pos:start="259:9" pos:end="261:59"><operator pos:start="259:9" pos:end="259:9">!</operator><name pos:start="259:10" pos:end="259:38"><name pos:start="259:10" pos:end="259:20">constraints</name><operator pos:start="259:21" pos:end="259:22">-&gt;</operator><name pos:start="259:23" pos:end="259:38">valid_sw_formats</name></name> <operator pos:start="259:40" pos:end="259:41">||</operator>

        <name pos:start="261:9" pos:end="261:40"><name pos:start="261:9" pos:end="261:19">constraints</name><operator pos:start="261:20" pos:end="261:21">-&gt;</operator><name pos:start="261:22" pos:end="261:37">valid_sw_formats</name><index pos:start="261:38" pos:end="261:40">[<expr pos:start="261:39" pos:end="261:39"><literal type="number" pos:start="261:39" pos:end="261:39">0</literal></expr>]</index></name> <operator pos:start="261:42" pos:end="261:43">==</operator> <name pos:start="261:45" pos:end="261:59">AV_PIX_FMT_NONE</name></expr>)</condition> <block pos:start="261:62" pos:end="271:5">{<block_content pos:start="263:9" pos:end="269:18">

        <expr_stmt pos:start="263:9" pos:end="265:44"><expr pos:start="263:9" pos:end="265:43"><call pos:start="263:9" pos:end="265:43"><name pos:start="263:9" pos:end="263:14">av_log</name><argument_list pos:start="263:15" pos:end="265:43">(<argument pos:start="263:16" pos:end="263:20"><expr pos:start="263:16" pos:end="263:20"><name pos:start="263:16" pos:end="263:20">avctx</name></expr></argument>, <argument pos:start="263:23" pos:end="263:34"><expr pos:start="263:23" pos:end="263:34"><name pos:start="263:23" pos:end="263:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="263:37" pos:end="265:42"><expr pos:start="263:37" pos:end="265:42"><literal type="string" pos:start="263:37" pos:end="263:66">"Hardware does not offer any "</literal>

               <literal type="string" pos:start="265:16" pos:end="265:42">"usable surface formats.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:30"><expr pos:start="267:9" pos:end="267:29"><name pos:start="267:9" pos:end="267:11">err</name> <operator pos:start="267:13" pos:end="267:13">=</operator> <call pos:start="267:15" pos:end="267:29"><name pos:start="267:15" pos:end="267:21">AVERROR</name><argument_list pos:start="267:22" pos:end="267:29">(<argument pos:start="267:23" pos:end="267:28"><expr pos:start="267:23" pos:end="267:28"><name pos:start="267:23" pos:end="267:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="269:9" pos:end="269:18">goto <name pos:start="269:14" pos:end="269:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="275:5" pos:end="275:67">// Find the first format in the list which matches the expected</comment>

    <comment type="line" pos:start="277:5" pos:end="277:69">// bit depth and subsampling.  If none are found (this can happen</comment>

    <comment type="line" pos:start="279:5" pos:end="279:70">// when 10-bit streams are decoded to 8-bit surfaces, for example)</comment>

    <comment type="line" pos:start="281:5" pos:end="281:51">// then just take the first format on the list.</comment>

    <expr_stmt pos:start="283:5" pos:end="283:59"><expr pos:start="283:5" pos:end="283:58"><name pos:start="283:5" pos:end="283:23"><name pos:start="283:5" pos:end="283:7">ctx</name><operator pos:start="283:8" pos:end="283:9">-&gt;</operator><name pos:start="283:10" pos:end="283:23">surface_format</name></name> <operator pos:start="283:25" pos:end="283:25">=</operator> <name pos:start="283:27" pos:end="283:58"><name pos:start="283:27" pos:end="283:37">constraints</name><operator pos:start="283:38" pos:end="283:39">-&gt;</operator><name pos:start="283:40" pos:end="283:55">valid_sw_formats</name><index pos:start="283:56" pos:end="283:58">[<expr pos:start="283:57" pos:end="283:57"><literal type="number" pos:start="283:57" pos:end="283:57">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:53"><expr pos:start="285:5" pos:end="285:52"><name pos:start="285:5" pos:end="285:11">sw_desc</name> <operator pos:start="285:13" pos:end="285:13">=</operator> <call pos:start="285:15" pos:end="285:52"><name pos:start="285:15" pos:end="285:33">av_pix_fmt_desc_get</name><argument_list pos:start="285:34" pos:end="285:52">(<argument pos:start="285:35" pos:end="285:51"><expr pos:start="285:35" pos:end="285:51"><name pos:start="285:35" pos:end="285:51"><name pos:start="285:35" pos:end="285:39">avctx</name><operator pos:start="285:40" pos:end="285:41">-&gt;</operator><name pos:start="285:42" pos:end="285:51">sw_pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="287:5" pos:end="315:5">for <control pos:start="287:9" pos:end="287:73">(<init pos:start="287:10" pos:end="287:15"><expr pos:start="287:10" pos:end="287:14"><name pos:start="287:10" pos:end="287:10">i</name> <operator pos:start="287:12" pos:end="287:12">=</operator> <literal type="number" pos:start="287:14" pos:end="287:14">0</literal></expr>;</init> <condition pos:start="287:17" pos:end="287:68"><expr pos:start="287:17" pos:end="287:67"><name pos:start="287:17" pos:end="287:48"><name pos:start="287:17" pos:end="287:27">constraints</name><operator pos:start="287:28" pos:end="287:29">-&gt;</operator><name pos:start="287:30" pos:end="287:45">valid_sw_formats</name><index pos:start="287:46" pos:end="287:48">[<expr pos:start="287:47" pos:end="287:47"><name pos:start="287:47" pos:end="287:47">i</name></expr>]</index></name> <operator pos:start="287:50" pos:end="287:51">!=</operator> <name pos:start="287:53" pos:end="287:67">AV_PIX_FMT_NONE</name></expr>;</condition> <incr pos:start="287:70" pos:end="287:72"><expr pos:start="287:70" pos:end="287:72"><name pos:start="287:70" pos:end="287:70">i</name><operator pos:start="287:71" pos:end="287:72">++</operator></expr></incr>)</control> <block pos:start="287:75" pos:end="315:5">{<block_content pos:start="289:9" pos:end="313:14">

        <expr_stmt pos:start="289:9" pos:end="289:69"><expr pos:start="289:9" pos:end="289:68"><name pos:start="289:9" pos:end="289:12">desc</name> <operator pos:start="289:14" pos:end="289:14">=</operator> <call pos:start="289:16" pos:end="289:68"><name pos:start="289:16" pos:end="289:34">av_pix_fmt_desc_get</name><argument_list pos:start="289:35" pos:end="289:68">(<argument pos:start="289:36" pos:end="289:67"><expr pos:start="289:36" pos:end="289:67"><name pos:start="289:36" pos:end="289:67"><name pos:start="289:36" pos:end="289:46">constraints</name><operator pos:start="289:47" pos:end="289:48">-&gt;</operator><name pos:start="289:49" pos:end="289:64">valid_sw_formats</name><index pos:start="289:65" pos:end="289:67">[<expr pos:start="289:66" pos:end="289:66"><name pos:start="289:66" pos:end="289:66">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="291:9" pos:end="297:21"><if pos:start="291:9" pos:end="297:21">if <condition pos:start="291:12" pos:end="295:58">(<expr pos:start="291:13" pos:end="295:57"><name pos:start="291:13" pos:end="291:31"><name pos:start="291:13" pos:end="291:16">desc</name><operator pos:start="291:17" pos:end="291:18">-&gt;</operator><name pos:start="291:19" pos:end="291:31">nb_components</name></name> <operator pos:start="291:33" pos:end="291:34">!=</operator> <name pos:start="291:36" pos:end="291:57"><name pos:start="291:36" pos:end="291:42">sw_desc</name><operator pos:start="291:43" pos:end="291:44">-&gt;</operator><name pos:start="291:45" pos:end="291:57">nb_components</name></name> <operator pos:start="291:59" pos:end="291:60">||</operator>

            <name pos:start="293:13" pos:end="293:31"><name pos:start="293:13" pos:end="293:16">desc</name><operator pos:start="293:17" pos:end="293:18">-&gt;</operator><name pos:start="293:19" pos:end="293:31">log2_chroma_w</name></name> <operator pos:start="293:33" pos:end="293:34">!=</operator> <name pos:start="293:36" pos:end="293:57"><name pos:start="293:36" pos:end="293:42">sw_desc</name><operator pos:start="293:43" pos:end="293:44">-&gt;</operator><name pos:start="293:45" pos:end="293:57">log2_chroma_w</name></name> <operator pos:start="293:59" pos:end="293:60">||</operator>

            <name pos:start="295:13" pos:end="295:31"><name pos:start="295:13" pos:end="295:16">desc</name><operator pos:start="295:17" pos:end="295:18">-&gt;</operator><name pos:start="295:19" pos:end="295:31">log2_chroma_h</name></name> <operator pos:start="295:33" pos:end="295:34">!=</operator> <name pos:start="295:36" pos:end="295:57"><name pos:start="295:36" pos:end="295:42">sw_desc</name><operator pos:start="295:43" pos:end="295:44">-&gt;</operator><name pos:start="295:45" pos:end="295:57">log2_chroma_h</name></name></expr>)</condition><block type="pseudo" pos:start="297:13" pos:end="297:21"><block_content pos:start="297:13" pos:end="297:21">

            <continue pos:start="297:13" pos:end="297:21">continue;</continue></block_content></block></if></if_stmt>

        <for pos:start="299:9" pos:end="305:9">for <control pos:start="299:13" pos:end="299:49">(<init pos:start="299:14" pos:end="299:19"><expr pos:start="299:14" pos:end="299:18"><name pos:start="299:14" pos:end="299:14">j</name> <operator pos:start="299:16" pos:end="299:16">=</operator> <literal type="number" pos:start="299:18" pos:end="299:18">0</literal></expr>;</init> <condition pos:start="299:21" pos:end="299:44"><expr pos:start="299:21" pos:end="299:43"><name pos:start="299:21" pos:end="299:21">j</name> <operator pos:start="299:23" pos:end="299:23">&lt;</operator> <name pos:start="299:25" pos:end="299:43"><name pos:start="299:25" pos:end="299:28">desc</name><operator pos:start="299:29" pos:end="299:30">-&gt;</operator><name pos:start="299:31" pos:end="299:43">nb_components</name></name></expr>;</condition> <incr pos:start="299:46" pos:end="299:48"><expr pos:start="299:46" pos:end="299:48"><name pos:start="299:46" pos:end="299:46">j</name><operator pos:start="299:47" pos:end="299:48">++</operator></expr></incr>)</control> <block pos:start="299:51" pos:end="305:9">{<block_content pos:start="301:13" pos:end="303:22">

            <if_stmt pos:start="301:13" pos:end="303:22"><if pos:start="301:13" pos:end="303:22">if <condition pos:start="301:16" pos:end="301:62">(<expr pos:start="301:17" pos:end="301:61"><name pos:start="301:17" pos:end="301:29"><name pos:start="301:17" pos:end="301:20">desc</name><operator pos:start="301:21" pos:end="301:22">-&gt;</operator><name pos:start="301:23" pos:end="301:26">comp</name><index pos:start="301:27" pos:end="301:29">[<expr pos:start="301:28" pos:end="301:28"><name pos:start="301:28" pos:end="301:28">j</name></expr>]</index></name><operator pos:start="301:30" pos:end="301:30">.</operator><name pos:start="301:31" pos:end="301:35">depth</name> <operator pos:start="301:37" pos:end="301:38">!=</operator> <name pos:start="301:40" pos:end="301:55"><name pos:start="301:40" pos:end="301:46">sw_desc</name><operator pos:start="301:47" pos:end="301:48">-&gt;</operator><name pos:start="301:49" pos:end="301:52">comp</name><index pos:start="301:53" pos:end="301:55">[<expr pos:start="301:54" pos:end="301:54"><name pos:start="301:54" pos:end="301:54">j</name></expr>]</index></name><operator pos:start="301:56" pos:end="301:56">.</operator><name pos:start="301:57" pos:end="301:61">depth</name></expr>)</condition><block type="pseudo" pos:start="303:17" pos:end="303:22"><block_content pos:start="303:17" pos:end="303:22">

                <break pos:start="303:17" pos:end="303:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="307:9" pos:end="309:21"><if pos:start="307:9" pos:end="309:21">if <condition pos:start="307:12" pos:end="307:36">(<expr pos:start="307:13" pos:end="307:35"><name pos:start="307:13" pos:end="307:13">j</name> <operator pos:start="307:15" pos:end="307:15">&lt;</operator> <name pos:start="307:17" pos:end="307:35"><name pos:start="307:17" pos:end="307:20">desc</name><operator pos:start="307:21" pos:end="307:22">-&gt;</operator><name pos:start="307:23" pos:end="307:35">nb_components</name></name></expr>)</condition><block type="pseudo" pos:start="309:13" pos:end="309:21"><block_content pos:start="309:13" pos:end="309:21">

            <continue pos:start="309:13" pos:end="309:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:63"><expr pos:start="311:9" pos:end="311:62"><name pos:start="311:9" pos:end="311:27"><name pos:start="311:9" pos:end="311:11">ctx</name><operator pos:start="311:12" pos:end="311:13">-&gt;</operator><name pos:start="311:14" pos:end="311:27">surface_format</name></name> <operator pos:start="311:29" pos:end="311:29">=</operator> <name pos:start="311:31" pos:end="311:62"><name pos:start="311:31" pos:end="311:41">constraints</name><operator pos:start="311:42" pos:end="311:43">-&gt;</operator><name pos:start="311:44" pos:end="311:59">valid_sw_formats</name><index pos:start="311:60" pos:end="311:62">[<expr pos:start="311:61" pos:end="311:61"><name pos:start="311:61" pos:end="311:61">i</name></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="313:9" pos:end="313:14">break;</break>

    </block_content>}</block></for>



    <comment type="line" pos:start="319:5" pos:end="319:41">// Start with at least four surfaces.</comment>

    <expr_stmt pos:start="321:5" pos:end="321:27"><expr pos:start="321:5" pos:end="321:26"><name pos:start="321:5" pos:end="321:22"><name pos:start="321:5" pos:end="321:7">ctx</name><operator pos:start="321:8" pos:end="321:9">-&gt;</operator><name pos:start="321:10" pos:end="321:22">surface_count</name></name> <operator pos:start="321:24" pos:end="321:24">=</operator> <literal type="number" pos:start="321:26" pos:end="321:26">4</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="323:5" pos:end="323:74">// Add per-codec number of surfaces used for storing reference frames.</comment>

    <switch pos:start="325:5" pos:end="351:5">switch <condition pos:start="325:12" pos:end="325:28">(<expr pos:start="325:13" pos:end="325:27"><name pos:start="325:13" pos:end="325:27"><name pos:start="325:13" pos:end="325:17">avctx</name><operator pos:start="325:18" pos:end="325:19">-&gt;</operator><name pos:start="325:20" pos:end="325:27">codec_id</name></name></expr>)</condition> <block pos:start="325:30" pos:end="351:5">{<block_content pos:start="327:5" pos:end="349:32">

    <case pos:start="327:5" pos:end="327:26">case <expr pos:start="327:10" pos:end="327:25"><name pos:start="327:10" pos:end="327:25">AV_CODEC_ID_H264</name></expr>:</case>

    <case pos:start="329:5" pos:end="329:26">case <expr pos:start="329:10" pos:end="329:25"><name pos:start="329:10" pos:end="329:25">AV_CODEC_ID_HEVC</name></expr>:</case>

        <expr_stmt pos:start="331:9" pos:end="331:33"><expr pos:start="331:9" pos:end="331:32"><name pos:start="331:9" pos:end="331:26"><name pos:start="331:9" pos:end="331:11">ctx</name><operator pos:start="331:12" pos:end="331:13">-&gt;</operator><name pos:start="331:14" pos:end="331:26">surface_count</name></name> <operator pos:start="331:28" pos:end="331:29">+=</operator> <literal type="number" pos:start="331:31" pos:end="331:32">16</literal></expr>;</expr_stmt>

        <break pos:start="333:9" pos:end="333:14">break;</break>

    <case pos:start="335:5" pos:end="335:25">case <expr pos:start="335:10" pos:end="335:24"><name pos:start="335:10" pos:end="335:24">AV_CODEC_ID_VP9</name></expr>:</case>

        <expr_stmt pos:start="337:9" pos:end="337:32"><expr pos:start="337:9" pos:end="337:31"><name pos:start="337:9" pos:end="337:26"><name pos:start="337:9" pos:end="337:11">ctx</name><operator pos:start="337:12" pos:end="337:13">-&gt;</operator><name pos:start="337:14" pos:end="337:26">surface_count</name></name> <operator pos:start="337:28" pos:end="337:29">+=</operator> <literal type="number" pos:start="337:31" pos:end="337:31">8</literal></expr>;</expr_stmt>

        <break pos:start="339:9" pos:end="339:14">break;</break>

    <case pos:start="341:5" pos:end="341:25">case <expr pos:start="341:10" pos:end="341:24"><name pos:start="341:10" pos:end="341:24">AV_CODEC_ID_VP8</name></expr>:</case>

        <expr_stmt pos:start="343:9" pos:end="343:32"><expr pos:start="343:9" pos:end="343:31"><name pos:start="343:9" pos:end="343:26"><name pos:start="343:9" pos:end="343:11">ctx</name><operator pos:start="343:12" pos:end="343:13">-&gt;</operator><name pos:start="343:14" pos:end="343:26">surface_count</name></name> <operator pos:start="343:28" pos:end="343:29">+=</operator> <literal type="number" pos:start="343:31" pos:end="343:31">3</literal></expr>;</expr_stmt>

        <break pos:start="345:9" pos:end="345:14">break;</break>

    <default pos:start="347:5" pos:end="347:12">default:</default>

        <expr_stmt pos:start="349:9" pos:end="349:32"><expr pos:start="349:9" pos:end="349:31"><name pos:start="349:9" pos:end="349:26"><name pos:start="349:9" pos:end="349:11">ctx</name><operator pos:start="349:12" pos:end="349:13">-&gt;</operator><name pos:start="349:14" pos:end="349:26">surface_count</name></name> <operator pos:start="349:28" pos:end="349:29">+=</operator> <literal type="number" pos:start="349:31" pos:end="349:31">2</literal></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <comment type="line" pos:start="353:5" pos:end="353:74">// Add an additional surface per thread is frame threading is enabled.</comment>

    <if_stmt pos:start="355:5" pos:end="357:50"><if pos:start="355:5" pos:end="357:50">if <condition pos:start="355:8" pos:end="355:52">(<expr pos:start="355:9" pos:end="355:51"><name pos:start="355:9" pos:end="355:33"><name pos:start="355:9" pos:end="355:13">avctx</name><operator pos:start="355:14" pos:end="355:15">-&gt;</operator><name pos:start="355:16" pos:end="355:33">active_thread_type</name></name> <operator pos:start="355:35" pos:end="355:35">&amp;</operator> <name pos:start="355:37" pos:end="355:51">FF_THREAD_FRAME</name></expr>)</condition><block type="pseudo" pos:start="357:9" pos:end="357:50"><block_content pos:start="357:9" pos:end="357:50">

        <expr_stmt pos:start="357:9" pos:end="357:50"><expr pos:start="357:9" pos:end="357:49"><name pos:start="357:9" pos:end="357:26"><name pos:start="357:9" pos:end="357:11">ctx</name><operator pos:start="357:12" pos:end="357:13">-&gt;</operator><name pos:start="357:14" pos:end="357:26">surface_count</name></name> <operator pos:start="357:28" pos:end="357:29">+=</operator> <name pos:start="357:31" pos:end="357:49"><name pos:start="357:31" pos:end="357:35">avctx</name><operator pos:start="357:36" pos:end="357:37">-&gt;</operator><name pos:start="357:38" pos:end="357:49">thread_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="361:5" pos:end="361:46"><expr pos:start="361:5" pos:end="361:45"><call pos:start="361:5" pos:end="361:45"><name pos:start="361:5" pos:end="361:31">av_hwframe_constraints_free</name><argument_list pos:start="361:32" pos:end="361:45">(<argument pos:start="361:33" pos:end="361:44"><expr pos:start="361:33" pos:end="361:44"><operator pos:start="361:33" pos:end="361:33">&amp;</operator><name pos:start="361:34" pos:end="361:44">constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:24"><expr pos:start="363:5" pos:end="363:23"><call pos:start="363:5" pos:end="363:23"><name pos:start="363:5" pos:end="363:12">av_freep</name><argument_list pos:start="363:13" pos:end="363:23">(<argument pos:start="363:14" pos:end="363:22"><expr pos:start="363:14" pos:end="363:22"><operator pos:start="363:14" pos:end="363:14">&amp;</operator><name pos:start="363:15" pos:end="363:22">hwconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="367:5" pos:end="367:13">return <expr pos:start="367:12" pos:end="367:12"><literal type="number" pos:start="367:12" pos:end="367:12">0</literal></expr>;</return>



<label pos:start="371:1" pos:end="371:5"><name pos:start="371:1" pos:end="371:4">fail</name>:</label>

    <expr_stmt pos:start="373:5" pos:end="373:46"><expr pos:start="373:5" pos:end="373:45"><call pos:start="373:5" pos:end="373:45"><name pos:start="373:5" pos:end="373:31">av_hwframe_constraints_free</name><argument_list pos:start="373:32" pos:end="373:45">(<argument pos:start="373:33" pos:end="373:44"><expr pos:start="373:33" pos:end="373:44"><operator pos:start="373:33" pos:end="373:33">&amp;</operator><name pos:start="373:34" pos:end="373:44">constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="375:5" pos:end="375:24"><expr pos:start="375:5" pos:end="375:23"><call pos:start="375:5" pos:end="375:23"><name pos:start="375:5" pos:end="375:12">av_freep</name><argument_list pos:start="375:13" pos:end="375:23">(<argument pos:start="375:14" pos:end="375:22"><expr pos:start="375:14" pos:end="375:22"><operator pos:start="375:14" pos:end="375:14">&amp;</operator><name pos:start="375:15" pos:end="375:22">hwconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="377:5" pos:end="383:5"><if pos:start="377:5" pos:end="383:5">if <condition pos:start="377:8" pos:end="377:40">(<expr pos:start="377:9" pos:end="377:39"><name pos:start="377:9" pos:end="377:22"><name pos:start="377:9" pos:end="377:11">ctx</name><operator pos:start="377:12" pos:end="377:13">-&gt;</operator><name pos:start="377:14" pos:end="377:22">va_config</name></name> <operator pos:start="377:24" pos:end="377:25">!=</operator> <name pos:start="377:27" pos:end="377:39">VA_INVALID_ID</name></expr>)</condition> <block pos:start="377:42" pos:end="383:5">{<block_content pos:start="379:9" pos:end="381:39">

        <expr_stmt pos:start="379:9" pos:end="379:61"><expr pos:start="379:9" pos:end="379:60"><call pos:start="379:9" pos:end="379:60"><name pos:start="379:9" pos:end="379:23">vaDestroyConfig</name><argument_list pos:start="379:24" pos:end="379:60">(<argument pos:start="379:25" pos:end="379:43"><expr pos:start="379:25" pos:end="379:43"><name pos:start="379:25" pos:end="379:43"><name pos:start="379:25" pos:end="379:27">ctx</name><operator pos:start="379:28" pos:end="379:29">-&gt;</operator><name pos:start="379:30" pos:end="379:34">hwctx</name><operator pos:start="379:35" pos:end="379:36">-&gt;</operator><name pos:start="379:37" pos:end="379:43">display</name></name></expr></argument>, <argument pos:start="379:46" pos:end="379:59"><expr pos:start="379:46" pos:end="379:59"><name pos:start="379:46" pos:end="379:59"><name pos:start="379:46" pos:end="379:48">ctx</name><operator pos:start="379:49" pos:end="379:50">-&gt;</operator><name pos:start="379:51" pos:end="379:59">va_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="381:9" pos:end="381:39"><expr pos:start="381:9" pos:end="381:38"><name pos:start="381:9" pos:end="381:22"><name pos:start="381:9" pos:end="381:11">ctx</name><operator pos:start="381:12" pos:end="381:13">-&gt;</operator><name pos:start="381:14" pos:end="381:22">va_config</name></name> <operator pos:start="381:24" pos:end="381:24">=</operator> <name pos:start="381:26" pos:end="381:38">VA_INVALID_ID</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:28"><expr pos:start="385:5" pos:end="385:27"><call pos:start="385:5" pos:end="385:27"><name pos:start="385:5" pos:end="385:12">av_freep</name><argument_list pos:start="385:13" pos:end="385:27">(<argument pos:start="385:14" pos:end="385:26"><expr pos:start="385:14" pos:end="385:26"><operator pos:start="385:14" pos:end="385:14">&amp;</operator><name pos:start="385:15" pos:end="385:26">profile_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="387:5" pos:end="387:15">return <expr pos:start="387:12" pos:end="387:14"><name pos:start="387:12" pos:end="387:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
