<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22853.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">vtd_iova_to_slpte</name><parameter_list pos:start="1:29" pos:end="5:55">(<parameter pos:start="1:30" pos:end="1:48"><decl pos:start="1:30" pos:end="1:48"><type pos:start="1:30" pos:end="1:48"><name pos:start="1:30" pos:end="1:44">VTDContextEntry</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">ce</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:58">uint64_t</name></type> <name pos:start="1:60" pos:end="1:63">iova</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:78"><decl pos:start="1:66" pos:end="1:78"><type pos:start="1:66" pos:end="1:78"><name pos:start="1:66" pos:end="1:69">bool</name></type> <name pos:start="1:71" pos:end="1:78">is_write</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:45"><decl pos:start="3:30" pos:end="3:45"><type pos:start="3:30" pos:end="3:45"><name pos:start="3:30" pos:end="3:37">uint64_t</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:45">slptep</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:68"><decl pos:start="3:48" pos:end="3:68"><type pos:start="3:48" pos:end="3:68"><name pos:start="3:48" pos:end="3:55">uint32_t</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:68">slpte_level</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:40"><decl pos:start="5:30" pos:end="5:40"><type pos:start="5:30" pos:end="5:40"><name pos:start="5:30" pos:end="5:33">bool</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:40">reads</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:54"><decl pos:start="5:43" pos:end="5:54"><type pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:46">bool</name> <modifier pos:start="5:48" pos:end="5:48">*</modifier></type><name pos:start="5:49" pos:end="5:54">writes</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="121:1">{<block_content pos:start="9:5" pos:end="119:5">

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">dma_addr_t</name></type> <name pos:start="9:16" pos:end="9:19">addr</name> <init pos:start="9:21" pos:end="9:56">= <expr pos:start="9:23" pos:end="9:56"><call pos:start="9:23" pos:end="9:56"><name pos:start="9:23" pos:end="9:52">vtd_get_slpt_base_from_context</name><argument_list pos:start="9:53" pos:end="9:56">(<argument pos:start="9:54" pos:end="9:55"><expr pos:start="9:54" pos:end="9:55"><name pos:start="9:54" pos:end="9:55">ce</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:58"><decl pos:start="11:5" pos:end="11:57"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">level</name> <init pos:start="11:20" pos:end="11:57">= <expr pos:start="11:22" pos:end="11:57"><call pos:start="11:22" pos:end="11:57"><name pos:start="11:22" pos:end="11:53">vtd_get_level_from_context_entry</name><argument_list pos:start="11:54" pos:end="11:57">(<argument pos:start="11:55" pos:end="11:56"><expr pos:start="11:55" pos:end="11:56"><name pos:start="11:55" pos:end="11:56">ce</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:19">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:18">slpte</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:59"><decl pos:start="17:5" pos:end="17:58"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:20">ce_agaw</name> <init pos:start="17:22" pos:end="17:58">= <expr pos:start="17:24" pos:end="17:58"><call pos:start="17:24" pos:end="17:58"><name pos:start="17:24" pos:end="17:54">vtd_get_agaw_from_context_entry</name><argument_list pos:start="17:55" pos:end="17:58">(<argument pos:start="17:56" pos:end="17:57"><expr pos:start="17:56" pos:end="17:57"><name pos:start="17:56" pos:end="17:57">ce</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:31">access_right_check</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="27:7">/* Check if @iova is above 2^X-1, where X is the minimum of MGAW

     * in CAP_REG and AW in context-entry.

     */</comment>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:55">(<expr pos:start="29:9" pos:end="29:54"><name pos:start="29:9" pos:end="29:12">iova</name> <operator pos:start="29:14" pos:end="29:14">&amp;</operator> <operator pos:start="29:16" pos:end="29:16">~</operator><operator pos:start="29:17" pos:end="29:17">(</operator><operator pos:start="29:18" pos:end="29:18">(</operator><literal type="number" pos:start="29:19" pos:end="29:22">1ULL</literal> <operator pos:start="29:24" pos:end="29:25">&lt;&lt;</operator> <call pos:start="29:27" pos:end="29:48"><name pos:start="29:27" pos:end="29:29">MIN</name><argument_list pos:start="29:30" pos:end="29:48">(<argument pos:start="29:31" pos:end="29:37"><expr pos:start="29:31" pos:end="29:37"><name pos:start="29:31" pos:end="29:37">ce_agaw</name></expr></argument>, <argument pos:start="29:40" pos:end="29:47"><expr pos:start="29:40" pos:end="29:47"><name pos:start="29:40" pos:end="29:47">VTD_MGAW</name></expr></argument>)</argument_list></call><operator pos:start="29:49" pos:end="29:49">)</operator> <operator pos:start="29:51" pos:end="29:51">-</operator> <literal type="number" pos:start="29:53" pos:end="29:53">1</literal><operator pos:start="29:54" pos:end="29:54">)</operator></expr>)</condition> <block pos:start="29:57" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:40">

        <expr_stmt pos:start="31:9" pos:end="31:78"><expr pos:start="31:9" pos:end="31:77"><call pos:start="31:9" pos:end="31:77"><name pos:start="31:9" pos:end="31:19">VTD_DPRINTF</name><argument_list pos:start="31:20" pos:end="31:77">(<argument pos:start="31:21" pos:end="31:27"><expr pos:start="31:21" pos:end="31:27"><name pos:start="31:21" pos:end="31:27">GENERAL</name></expr></argument>, <argument pos:start="31:30" pos:end="31:70"><expr pos:start="31:30" pos:end="31:70"><literal type="string" pos:start="31:30" pos:end="31:46">"error: iova 0x%"</literal><name pos:start="31:47" pos:end="31:52">PRIx64</name> <literal type="string" pos:start="31:54" pos:end="31:70">" exceeds limits"</literal></expr></argument>, <argument pos:start="31:73" pos:end="31:76"><expr pos:start="31:73" pos:end="31:76"><name pos:start="31:73" pos:end="31:76">iova</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:40">return <expr pos:start="33:16" pos:end="33:39"><operator pos:start="33:16" pos:end="33:16">-</operator><name pos:start="33:17" pos:end="33:39">VTD_FR_ADDR_BEYOND_MGAW</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:50">/* FIXME: what is the Atomics request here? */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:56"><expr pos:start="41:5" pos:end="41:55"><name pos:start="41:5" pos:end="41:22">access_right_check</name> <operator pos:start="41:24" pos:end="41:24">=</operator> <ternary pos:start="41:26" pos:end="41:55"><condition pos:start="41:26" pos:end="41:35"><expr pos:start="41:26" pos:end="41:33"><name pos:start="41:26" pos:end="41:33">is_write</name></expr> ?</condition><then pos:start="41:37" pos:end="41:44"> <expr pos:start="41:37" pos:end="41:44"><name pos:start="41:37" pos:end="41:44">VTD_SL_W</name></expr> </then><else pos:start="41:46" pos:end="41:55">: <expr pos:start="41:48" pos:end="41:55"><name pos:start="41:48" pos:end="41:55">VTD_SL_R</name></expr></else></ternary></expr>;</expr_stmt>



    <while pos:start="45:5" pos:end="119:5">while <condition pos:start="45:11" pos:end="45:16">(<expr pos:start="45:12" pos:end="45:15"><name pos:start="45:12" pos:end="45:15">true</name></expr>)</condition> <block pos:start="45:18" pos:end="119:5">{<block_content pos:start="47:9" pos:end="117:16">

        <expr_stmt pos:start="47:9" pos:end="47:52"><expr pos:start="47:9" pos:end="47:51"><name pos:start="47:9" pos:end="47:14">offset</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <call pos:start="47:18" pos:end="47:51"><name pos:start="47:18" pos:end="47:38">vtd_iova_level_offset</name><argument_list pos:start="47:39" pos:end="47:51">(<argument pos:start="47:40" pos:end="47:43"><expr pos:start="47:40" pos:end="47:43"><name pos:start="47:40" pos:end="47:43">iova</name></expr></argument>, <argument pos:start="47:46" pos:end="47:50"><expr pos:start="47:46" pos:end="47:50"><name pos:start="47:46" pos:end="47:50">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:44"><expr pos:start="49:9" pos:end="49:43"><name pos:start="49:9" pos:end="49:13">slpte</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <call pos:start="49:17" pos:end="49:43"><name pos:start="49:17" pos:end="49:29">vtd_get_slpte</name><argument_list pos:start="49:30" pos:end="49:43">(<argument pos:start="49:31" pos:end="49:34"><expr pos:start="49:31" pos:end="49:34"><name pos:start="49:31" pos:end="49:34">addr</name></expr></argument>, <argument pos:start="49:37" pos:end="49:42"><expr pos:start="49:37" pos:end="49:42"><name pos:start="49:37" pos:end="49:42">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="53:9" pos:end="73:9"><if pos:start="53:9" pos:end="73:9">if <condition pos:start="53:12" pos:end="53:34">(<expr pos:start="53:13" pos:end="53:33"><name pos:start="53:13" pos:end="53:17">slpte</name> <operator pos:start="53:19" pos:end="53:20">==</operator> <operator pos:start="53:22" pos:end="53:22">(</operator><name pos:start="53:23" pos:end="53:30">uint64_t</name><operator pos:start="53:31" pos:end="53:31">)</operator><operator pos:start="53:32" pos:end="53:32">-</operator><literal type="number" pos:start="53:33" pos:end="53:33">1</literal></expr>)</condition> <block pos:start="53:36" pos:end="73:9">{<block_content pos:start="55:13" pos:end="71:13">

            <expr_stmt pos:start="55:13" pos:end="59:37"><expr pos:start="55:13" pos:end="59:36"><call pos:start="55:13" pos:end="59:36"><name pos:start="55:13" pos:end="55:23">VTD_DPRINTF</name><argument_list pos:start="55:24" pos:end="59:36">(<argument pos:start="55:25" pos:end="55:31"><expr pos:start="55:25" pos:end="55:31"><name pos:start="55:25" pos:end="55:31">GENERAL</name></expr></argument>, <argument pos:start="55:34" pos:end="57:70"><expr pos:start="55:34" pos:end="57:70"><literal type="string" pos:start="55:34" pos:end="55:77">"error: fail to access second-level paging "</literal>

                        <literal type="string" pos:start="57:25" pos:end="57:42">"entry at level %"</literal><name pos:start="57:43" pos:end="57:48">PRIu32</name> <literal type="string" pos:start="57:50" pos:end="57:64">" for iova 0x%"</literal><name pos:start="57:65" pos:end="57:70">PRIx64</name></expr></argument>,

                        <argument pos:start="59:25" pos:end="59:29"><expr pos:start="59:25" pos:end="59:29"><name pos:start="59:25" pos:end="59:29">level</name></expr></argument>, <argument pos:start="59:32" pos:end="59:35"><expr pos:start="59:32" pos:end="59:35"><name pos:start="59:32" pos:end="59:35">iova</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="71:13"><if pos:start="61:13" pos:end="67:13">if <condition pos:start="61:16" pos:end="61:62">(<expr pos:start="61:17" pos:end="61:61"><name pos:start="61:17" pos:end="61:21">level</name> <operator pos:start="61:23" pos:end="61:24">==</operator> <call pos:start="61:26" pos:end="61:61"><name pos:start="61:26" pos:end="61:57">vtd_get_level_from_context_entry</name><argument_list pos:start="61:58" pos:end="61:61">(<argument pos:start="61:59" pos:end="61:60"><expr pos:start="61:59" pos:end="61:60"><name pos:start="61:59" pos:end="61:60">ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:64" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:49">

                <comment type="block" pos:start="63:17" pos:end="63:58">/* Invalid programming of context-entry */</comment>

                <return pos:start="65:17" pos:end="65:49">return <expr pos:start="65:24" pos:end="65:48"><operator pos:start="65:24" pos:end="65:24">-</operator><name pos:start="65:25" pos:end="65:48">VTD_FR_CONTEXT_ENTRY_INV</name></expr>;</return>

            </block_content>}</block></if> <else pos:start="67:15" pos:end="71:13">else <block pos:start="67:20" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:48">

                <return pos:start="69:17" pos:end="69:48">return <expr pos:start="69:24" pos:end="69:47"><operator pos:start="69:24" pos:end="69:24">-</operator><name pos:start="69:25" pos:end="69:47">VTD_FR_PAGING_ENTRY_INV</name></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:48"><expr pos:start="75:9" pos:end="75:47"><operator pos:start="75:9" pos:end="75:9">*</operator><name pos:start="75:10" pos:end="75:14">reads</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <operator pos:start="75:18" pos:end="75:18">(</operator><operator pos:start="75:19" pos:end="75:19">*</operator><name pos:start="75:20" pos:end="75:24">reads</name><operator pos:start="75:25" pos:end="75:25">)</operator> <operator pos:start="75:27" pos:end="75:28">&amp;&amp;</operator> <operator pos:start="75:30" pos:end="75:30">(</operator><name pos:start="75:31" pos:end="75:35">slpte</name> <operator pos:start="75:37" pos:end="75:37">&amp;</operator> <name pos:start="75:39" pos:end="75:46">VTD_SL_R</name><operator pos:start="75:47" pos:end="75:47">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:50"><expr pos:start="77:9" pos:end="77:49"><operator pos:start="77:9" pos:end="77:9">*</operator><name pos:start="77:10" pos:end="77:15">writes</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <operator pos:start="77:19" pos:end="77:19">(</operator><operator pos:start="77:20" pos:end="77:20">*</operator><name pos:start="77:21" pos:end="77:26">writes</name><operator pos:start="77:27" pos:end="77:27">)</operator> <operator pos:start="77:29" pos:end="77:30">&amp;&amp;</operator> <operator pos:start="77:32" pos:end="77:32">(</operator><name pos:start="77:33" pos:end="77:37">slpte</name> <operator pos:start="77:39" pos:end="77:39">&amp;</operator> <name pos:start="77:41" pos:end="77:48">VTD_SL_W</name><operator pos:start="77:49" pos:end="77:49">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="89:9"><if pos:start="79:9" pos:end="89:9">if <condition pos:start="79:12" pos:end="79:42">(<expr pos:start="79:13" pos:end="79:41"><operator pos:start="79:13" pos:end="79:13">!</operator><operator pos:start="79:14" pos:end="79:14">(</operator><name pos:start="79:15" pos:end="79:19">slpte</name> <operator pos:start="79:21" pos:end="79:21">&amp;</operator> <name pos:start="79:23" pos:end="79:40">access_right_check</name><operator pos:start="79:41" pos:end="79:41">)</operator></expr>)</condition> <block pos:start="79:44" pos:end="89:9">{<block_content pos:start="81:13" pos:end="87:59">

            <expr_stmt pos:start="81:13" pos:end="85:68"><expr pos:start="81:13" pos:end="85:67"><call pos:start="81:13" pos:end="85:67"><name pos:start="81:13" pos:end="81:23">VTD_DPRINTF</name><argument_list pos:start="81:24" pos:end="85:67">(<argument pos:start="81:25" pos:end="81:31"><expr pos:start="81:25" pos:end="81:31"><name pos:start="81:25" pos:end="81:31">GENERAL</name></expr></argument>, <argument pos:start="81:34" pos:end="83:59"><expr pos:start="81:34" pos:end="83:59"><literal type="string" pos:start="81:34" pos:end="81:68">"error: lack of %s permission for "</literal>

                        <literal type="string" pos:start="83:25" pos:end="83:34">"iova 0x%"</literal><name pos:start="83:35" pos:end="83:40">PRIx64</name> <literal type="string" pos:start="83:42" pos:end="83:53">" slpte 0x%"</literal><name pos:start="83:54" pos:end="83:59">PRIx64</name></expr></argument>,

                        <argument pos:start="85:25" pos:end="85:53"><expr pos:start="85:25" pos:end="85:53"><operator pos:start="85:25" pos:end="85:25">(</operator><ternary pos:start="85:26" pos:end="85:52"><condition pos:start="85:26" pos:end="85:35"><expr pos:start="85:26" pos:end="85:33"><name pos:start="85:26" pos:end="85:33">is_write</name></expr> ?</condition><then pos:start="85:37" pos:end="85:43"> <expr pos:start="85:37" pos:end="85:43"><literal type="string" pos:start="85:37" pos:end="85:43">"write"</literal></expr> </then><else pos:start="85:45" pos:end="85:52">: <expr pos:start="85:47" pos:end="85:52"><literal type="string" pos:start="85:47" pos:end="85:52">"read"</literal></expr></else></ternary><operator pos:start="85:53" pos:end="85:53">)</operator></expr></argument>, <argument pos:start="85:56" pos:end="85:59"><expr pos:start="85:56" pos:end="85:59"><name pos:start="85:56" pos:end="85:59">iova</name></expr></argument>, <argument pos:start="85:62" pos:end="85:66"><expr pos:start="85:62" pos:end="85:66"><name pos:start="85:62" pos:end="85:66">slpte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:59">return <expr pos:start="87:20" pos:end="87:58"><ternary pos:start="87:20" pos:end="87:58"><condition pos:start="87:20" pos:end="87:29"><expr pos:start="87:20" pos:end="87:27"><name pos:start="87:20" pos:end="87:27">is_write</name></expr> ?</condition><then pos:start="87:31" pos:end="87:43"> <expr pos:start="87:31" pos:end="87:43"><operator pos:start="87:31" pos:end="87:31">-</operator><name pos:start="87:32" pos:end="87:43">VTD_FR_WRITE</name></expr> </then><else pos:start="87:45" pos:end="87:58">: <expr pos:start="87:47" pos:end="87:58"><operator pos:start="87:47" pos:end="87:47">-</operator><name pos:start="87:48" pos:end="87:58">VTD_FR_READ</name></expr></else></ternary></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="101:9"><if pos:start="91:9" pos:end="101:9">if <condition pos:start="91:12" pos:end="91:49">(<expr pos:start="91:13" pos:end="91:48"><call pos:start="91:13" pos:end="91:48"><name pos:start="91:13" pos:end="91:34">vtd_slpte_nonzero_rsvd</name><argument_list pos:start="91:35" pos:end="91:48">(<argument pos:start="91:36" pos:end="91:40"><expr pos:start="91:36" pos:end="91:40"><name pos:start="91:36" pos:end="91:40">slpte</name></expr></argument>, <argument pos:start="91:43" pos:end="91:47"><expr pos:start="91:43" pos:end="91:47"><name pos:start="91:43" pos:end="91:47">level</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:51" pos:end="101:9">{<block_content pos:start="93:13" pos:end="99:45">

            <expr_stmt pos:start="93:13" pos:end="97:38"><expr pos:start="93:13" pos:end="97:37"><call pos:start="93:13" pos:end="97:37"><name pos:start="93:13" pos:end="93:23">VTD_DPRINTF</name><argument_list pos:start="93:24" pos:end="97:37">(<argument pos:start="93:25" pos:end="93:31"><expr pos:start="93:25" pos:end="93:31"><name pos:start="93:25" pos:end="93:31">GENERAL</name></expr></argument>, <argument pos:start="93:34" pos:end="95:77"><expr pos:start="93:34" pos:end="95:77"><literal type="string" pos:start="93:34" pos:end="93:76">"error: non-zero reserved field in second "</literal>

                        <literal type="string" pos:start="95:25" pos:end="95:52">"level paging entry level %"</literal><name pos:start="95:53" pos:end="95:58">PRIu32</name> <literal type="string" pos:start="95:60" pos:end="95:71">" slpte 0x%"</literal><name pos:start="95:72" pos:end="95:77">PRIx64</name></expr></argument>,

                        <argument pos:start="97:25" pos:end="97:29"><expr pos:start="97:25" pos:end="97:29"><name pos:start="97:25" pos:end="97:29">level</name></expr></argument>, <argument pos:start="97:32" pos:end="97:36"><expr pos:start="97:32" pos:end="97:36"><name pos:start="97:32" pos:end="97:36">slpte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="99:13" pos:end="99:45">return <expr pos:start="99:20" pos:end="99:44"><operator pos:start="99:20" pos:end="99:20">-</operator><name pos:start="99:21" pos:end="99:44">VTD_FR_PAGING_ENTRY_RSVD</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="105:9" pos:end="113:9"><if pos:start="105:9" pos:end="113:9">if <condition pos:start="105:12" pos:end="105:44">(<expr pos:start="105:13" pos:end="105:43"><call pos:start="105:13" pos:end="105:43"><name pos:start="105:13" pos:end="105:29">vtd_is_last_slpte</name><argument_list pos:start="105:30" pos:end="105:43">(<argument pos:start="105:31" pos:end="105:35"><expr pos:start="105:31" pos:end="105:35"><name pos:start="105:31" pos:end="105:35">slpte</name></expr></argument>, <argument pos:start="105:38" pos:end="105:42"><expr pos:start="105:38" pos:end="105:42"><name pos:start="105:38" pos:end="105:42">level</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:46" pos:end="113:9">{<block_content pos:start="107:13" pos:end="111:21">

            <expr_stmt pos:start="107:13" pos:end="107:28"><expr pos:start="107:13" pos:end="107:27"><operator pos:start="107:13" pos:end="107:13">*</operator><name pos:start="107:14" pos:end="107:19">slptep</name> <operator pos:start="107:21" pos:end="107:21">=</operator> <name pos:start="107:23" pos:end="107:27">slpte</name></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:33"><expr pos:start="109:13" pos:end="109:32"><operator pos:start="109:13" pos:end="109:13">*</operator><name pos:start="109:14" pos:end="109:24">slpte_level</name> <operator pos:start="109:26" pos:end="109:26">=</operator> <name pos:start="109:28" pos:end="109:32">level</name></expr>;</expr_stmt>

            <return pos:start="111:13" pos:end="111:21">return <expr pos:start="111:20" pos:end="111:20"><literal type="number" pos:start="111:20" pos:end="111:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:41"><expr pos:start="115:9" pos:end="115:40"><name pos:start="115:9" pos:end="115:12">addr</name> <operator pos:start="115:14" pos:end="115:14">=</operator> <call pos:start="115:16" pos:end="115:40"><name pos:start="115:16" pos:end="115:33">vtd_get_slpte_addr</name><argument_list pos:start="115:34" pos:end="115:40">(<argument pos:start="115:35" pos:end="115:39"><expr pos:start="115:35" pos:end="115:39"><name pos:start="115:35" pos:end="115:39">slpte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:16"><expr pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:13">level</name><operator pos:start="117:14" pos:end="117:15">--</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
