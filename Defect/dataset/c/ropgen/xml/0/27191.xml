<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27191.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:9"><name pos:start="1:1" pos:end="1:9">abi_ulong</name></type> <name pos:start="1:11" pos:end="1:23">mmap_find_vma</name><parameter_list pos:start="1:24" pos:end="1:56">(<parameter pos:start="1:25" pos:end="1:39"><decl pos:start="1:25" pos:end="1:39"><type pos:start="1:25" pos:end="1:39"><name pos:start="1:25" pos:end="1:33">abi_ulong</name></type> <name pos:start="1:35" pos:end="1:39">start</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:55"><decl pos:start="1:42" pos:end="1:55"><type pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:50">abi_ulong</name></type> <name pos:start="1:52" pos:end="1:55">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="205:1">{<block_content pos:start="5:5" pos:end="203:5">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">ptr</name></decl>, <decl pos:start="5:16" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:10"><modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:20">prev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">abi_ulong</name></type> <name pos:start="7:15" pos:end="7:18">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">wrapped</name></decl>, <decl pos:start="9:18" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:23">repeat</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:64">/* If 'start' == 0, then a default start address is used. */</comment>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:19">(<expr pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:13">start</name> <operator pos:start="15:15" pos:end="15:16">==</operator> <literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr>)</condition> <block pos:start="15:21" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:32">

        <expr_stmt pos:start="17:9" pos:end="17:32"><expr pos:start="17:9" pos:end="17:31"><name pos:start="17:9" pos:end="17:13">start</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:31">mmap_next_start</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="23:5">else <block pos:start="19:12" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:37">

        <expr_stmt pos:start="21:9" pos:end="21:37"><expr pos:start="21:9" pos:end="21:36"><name pos:start="21:9" pos:end="21:13">start</name> <operator pos:start="21:15" pos:end="21:16">&amp;=</operator> <name pos:start="21:18" pos:end="21:36">qemu_host_page_mask</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:8">size</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:32"><name pos:start="27:12" pos:end="27:26">HOST_PAGE_ALIGN</name><argument_list pos:start="27:27" pos:end="27:32">(<argument pos:start="27:28" pos:end="27:31"><expr pos:start="27:28" pos:end="27:31"><name pos:start="27:28" pos:end="27:31">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:20">(<expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:19">RESERVED_VA</name></expr>)</condition> <block pos:start="31:22" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:51">

        <return pos:start="33:9" pos:end="33:51">return <expr pos:start="33:16" pos:end="33:50"><call pos:start="33:16" pos:end="33:50"><name pos:start="33:16" pos:end="33:37">mmap_find_vma_reserved</name><argument_list pos:start="33:38" pos:end="33:50">(<argument pos:start="33:39" pos:end="33:43"><expr pos:start="33:39" pos:end="33:43"><name pos:start="33:39" pos:end="33:43">start</name></expr></argument>, <argument pos:start="33:46" pos:end="33:49"><expr pos:start="33:46" pos:end="33:49"><name pos:start="33:46" pos:end="33:49">size</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:8">addr</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <name pos:start="39:12" pos:end="39:16">start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:11">wrapped</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <name pos:start="41:15" pos:end="41:20">repeat</name> <operator pos:start="41:22" pos:end="41:22">=</operator> <literal type="number" pos:start="41:24" pos:end="41:24">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:13"><expr pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:8">prev</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <literal type="number" pos:start="43:12" pos:end="43:12">0</literal></expr>;</expr_stmt>



    <for pos:start="47:5" pos:end="203:5">for <control pos:start="47:9" pos:end="47:23">(<init pos:start="47:10" pos:end="47:10">;</init><condition pos:start="47:11" pos:end="47:11">;</condition> <incr pos:start="47:13" pos:end="47:22"><expr pos:start="47:13" pos:end="47:22"><name pos:start="47:13" pos:end="47:16">prev</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <name pos:start="47:20" pos:end="47:22">ptr</name></expr></incr>)</control> <block pos:start="47:25" pos:end="203:5">{<block_content pos:start="63:9" pos:end="201:9">

        <comment type="block" pos:start="49:9" pos:end="61:11">/*

         * Reserve needed memory area to avoid a race.

         * It should be discarded using:

         *  - mmap() with MAP_FIXED flag

         *  - mremap() with MREMAP_FIXED flag

         *  - shmat() with SHM_REMAP flag

         */</comment>

        <expr_stmt pos:start="63:9" pos:end="65:67"><expr pos:start="63:9" pos:end="65:66"><name pos:start="63:9" pos:end="63:11">ptr</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="65:66"><name pos:start="63:15" pos:end="63:18">mmap</name><argument_list pos:start="63:19" pos:end="65:66">(<argument pos:start="63:20" pos:end="63:28"><expr pos:start="63:20" pos:end="63:28"><call pos:start="63:20" pos:end="63:28"><name pos:start="63:20" pos:end="63:22">g2h</name><argument_list pos:start="63:23" pos:end="63:28">(<argument pos:start="63:24" pos:end="63:27"><expr pos:start="63:24" pos:end="63:27"><name pos:start="63:24" pos:end="63:27">addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="63:31" pos:end="63:34"><expr pos:start="63:31" pos:end="63:34"><name pos:start="63:31" pos:end="63:34">size</name></expr></argument>, <argument pos:start="63:37" pos:end="63:45"><expr pos:start="63:37" pos:end="63:45"><name pos:start="63:37" pos:end="63:45">PROT_NONE</name></expr></argument>,

                   <argument pos:start="65:20" pos:end="65:58"><expr pos:start="65:20" pos:end="65:58"><name pos:start="65:20" pos:end="65:32">MAP_ANONYMOUS</name><operator pos:start="65:33" pos:end="65:33">|</operator><name pos:start="65:34" pos:end="65:44">MAP_PRIVATE</name><operator pos:start="65:45" pos:end="65:45">|</operator><name pos:start="65:46" pos:end="65:58">MAP_NORESERVE</name></expr></argument>, <argument pos:start="65:61" pos:end="65:62"><expr pos:start="65:61" pos:end="65:62"><operator pos:start="65:61" pos:end="65:61">-</operator><literal type="number" pos:start="65:62" pos:end="65:62">1</literal></expr></argument>, <argument pos:start="65:65" pos:end="65:65"><expr pos:start="65:65" pos:end="65:65"><literal type="number" pos:start="65:65" pos:end="65:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="69:9" pos:end="69:57">/* ENOMEM, if host address space has no memory */</comment>

        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:30">(<expr pos:start="71:13" pos:end="71:29"><name pos:start="71:13" pos:end="71:15">ptr</name> <operator pos:start="71:17" pos:end="71:18">==</operator> <name pos:start="71:20" pos:end="71:29">MAP_FAILED</name></expr>)</condition> <block pos:start="71:32" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:33">

            <return pos:start="73:13" pos:end="73:33">return <expr pos:start="73:20" pos:end="73:32"><operator pos:start="73:20" pos:end="73:20">(</operator><name pos:start="73:21" pos:end="73:29">abi_ulong</name><operator pos:start="73:30" pos:end="73:30">)</operator><operator pos:start="73:31" pos:end="73:31">-</operator><literal type="number" pos:start="73:32" pos:end="73:32">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="79:9" pos:end="81:65">/* Count the number of sequential returns of the same address.

           This is used to modify the search algorithm below.  */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:48"><expr pos:start="83:9" pos:end="83:47"><name pos:start="83:9" pos:end="83:14">repeat</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <operator pos:start="83:18" pos:end="83:18">(</operator><ternary pos:start="83:19" pos:end="83:46"><condition pos:start="83:19" pos:end="83:31"><expr pos:start="83:19" pos:end="83:29"><name pos:start="83:19" pos:end="83:21">ptr</name> <operator pos:start="83:23" pos:end="83:24">==</operator> <name pos:start="83:26" pos:end="83:29">prev</name></expr> ?</condition><then pos:start="83:33" pos:end="83:42"> <expr pos:start="83:33" pos:end="83:42"><name pos:start="83:33" pos:end="83:38">repeat</name> <operator pos:start="83:40" pos:end="83:40">+</operator> <literal type="number" pos:start="83:42" pos:end="83:42">1</literal></expr> </then><else pos:start="83:44" pos:end="83:46">: <expr pos:start="83:46" pos:end="83:46"><literal type="number" pos:start="83:46" pos:end="83:46">0</literal></expr></else></ternary><operator pos:start="83:47" pos:end="83:47">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="87:9" pos:end="161:9"><if pos:start="87:9" pos:end="153:9">if <condition pos:start="87:12" pos:end="87:38">(<expr pos:start="87:13" pos:end="87:37"><call pos:start="87:13" pos:end="87:37"><name pos:start="87:13" pos:end="87:21">h2g_valid</name><argument_list pos:start="87:22" pos:end="87:37">(<argument pos:start="87:23" pos:end="87:36"><expr pos:start="87:23" pos:end="87:36"><name pos:start="87:23" pos:end="87:25">ptr</name> <operator pos:start="87:27" pos:end="87:27">+</operator> <name pos:start="87:29" pos:end="87:32">size</name> <operator pos:start="87:34" pos:end="87:34">-</operator> <literal type="number" pos:start="87:36" pos:end="87:36">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:40" pos:end="153:9">{<block_content pos:start="89:13" pos:end="151:13">

            <expr_stmt pos:start="89:13" pos:end="89:28"><expr pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:16">addr</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <call pos:start="89:20" pos:end="89:27"><name pos:start="89:20" pos:end="89:22">h2g</name><argument_list pos:start="89:23" pos:end="89:27">(<argument pos:start="89:24" pos:end="89:26"><expr pos:start="89:24" pos:end="89:26"><name pos:start="89:24" pos:end="89:26">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="93:13" pos:end="105:13"><if pos:start="93:13" pos:end="105:13">if <condition pos:start="93:16" pos:end="93:48">(<expr pos:start="93:17" pos:end="93:47"><operator pos:start="93:17" pos:end="93:17">(</operator><name pos:start="93:18" pos:end="93:21">addr</name> <operator pos:start="93:23" pos:end="93:23">&amp;</operator> <operator pos:start="93:25" pos:end="93:25">~</operator><name pos:start="93:26" pos:end="93:41">TARGET_PAGE_MASK</name><operator pos:start="93:42" pos:end="93:42">)</operator> <operator pos:start="93:44" pos:end="93:45">==</operator> <literal type="number" pos:start="93:47" pos:end="93:47">0</literal></expr>)</condition> <block pos:start="93:50" pos:end="105:13">{<block_content pos:start="97:17" pos:end="103:28">

                <comment type="block" pos:start="95:17" pos:end="95:31">/* Success.  */</comment>

                <if_stmt pos:start="97:17" pos:end="101:17"><if pos:start="97:17" pos:end="101:17">if <condition pos:start="97:20" pos:end="97:75">(<expr pos:start="97:21" pos:end="97:74"><name pos:start="97:21" pos:end="97:25">start</name> <operator pos:start="97:27" pos:end="97:28">==</operator> <name pos:start="97:30" pos:end="97:44">mmap_next_start</name> <operator pos:start="97:46" pos:end="97:47">&amp;&amp;</operator> <name pos:start="97:49" pos:end="97:52">addr</name> <operator pos:start="97:54" pos:end="97:55">&gt;=</operator> <name pos:start="97:57" pos:end="97:74">TASK_UNMAPPED_BASE</name></expr>)</condition> <block pos:start="97:77" pos:end="101:17">{<block_content pos:start="99:21" pos:end="99:50">

                    <expr_stmt pos:start="99:21" pos:end="99:50"><expr pos:start="99:21" pos:end="99:49"><name pos:start="99:21" pos:end="99:35">mmap_next_start</name> <operator pos:start="99:37" pos:end="99:37">=</operator> <name pos:start="99:39" pos:end="99:42">addr</name> <operator pos:start="99:44" pos:end="99:44">+</operator> <name pos:start="99:46" pos:end="99:49">size</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <return pos:start="103:17" pos:end="103:28">return <expr pos:start="103:24" pos:end="103:27"><name pos:start="103:24" pos:end="103:27">addr</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="109:13" pos:end="109:70">/* The address is not properly aligned for the target.  */</comment>

            <switch pos:start="111:13" pos:end="151:13">switch <condition pos:start="111:20" pos:end="111:27">(<expr pos:start="111:21" pos:end="111:26"><name pos:start="111:21" pos:end="111:26">repeat</name></expr>)</condition> <block pos:start="111:29" pos:end="151:13">{<block_content pos:start="113:13" pos:end="149:22">

            <case pos:start="113:13" pos:end="113:19">case <expr pos:start="113:18" pos:end="113:18"><literal type="number" pos:start="113:18" pos:end="113:18">0</literal></expr>:</case>

                <comment type="block" pos:start="115:17" pos:end="119:47">/* Assume the result that the kernel gave us is the

                   first with enough free space, so start again at the

                   next higher target page.  */</comment>

                <expr_stmt pos:start="121:17" pos:end="121:47"><expr pos:start="121:17" pos:end="121:46"><name pos:start="121:17" pos:end="121:20">addr</name> <operator pos:start="121:22" pos:end="121:22">=</operator> <call pos:start="121:24" pos:end="121:46"><name pos:start="121:24" pos:end="121:40">TARGET_PAGE_ALIGN</name><argument_list pos:start="121:41" pos:end="121:46">(<argument pos:start="121:42" pos:end="121:45"><expr pos:start="121:42" pos:end="121:45"><name pos:start="121:42" pos:end="121:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="123:17" pos:end="123:22">break;</break>

            <case pos:start="125:13" pos:end="125:19">case <expr pos:start="125:18" pos:end="125:18"><literal type="number" pos:start="125:18" pos:end="125:18">1</literal></expr>:</case>

                <comment type="block" pos:start="127:17" pos:end="129:56">/* Sometimes the kernel decides to perform the allocation

                   at the top end of memory instead.  */</comment>

                <expr_stmt pos:start="131:17" pos:end="131:41"><expr pos:start="131:17" pos:end="131:40"><name pos:start="131:17" pos:end="131:20">addr</name> <operator pos:start="131:22" pos:end="131:23">&amp;=</operator> <name pos:start="131:25" pos:end="131:40">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

                <break pos:start="133:17" pos:end="133:22">break;</break>

            <case pos:start="135:13" pos:end="135:19">case <expr pos:start="135:18" pos:end="135:18"><literal type="number" pos:start="135:18" pos:end="135:18">2</literal></expr>:</case>

                <comment type="block" pos:start="137:17" pos:end="137:48">/* Start over at low memory.  */</comment>

                <expr_stmt pos:start="139:17" pos:end="139:25"><expr pos:start="139:17" pos:end="139:24"><name pos:start="139:17" pos:end="139:20">addr</name> <operator pos:start="139:22" pos:end="139:22">=</operator> <literal type="number" pos:start="139:24" pos:end="139:24">0</literal></expr>;</expr_stmt>

                <break pos:start="141:17" pos:end="141:22">break;</break>

            <default pos:start="143:13" pos:end="143:20">default:</default>

                <comment type="block" pos:start="145:17" pos:end="145:65">/* Fail.  This unaligned block must the last.  */</comment>

                <expr_stmt pos:start="147:17" pos:end="147:26"><expr pos:start="147:17" pos:end="147:25"><name pos:start="147:17" pos:end="147:20">addr</name> <operator pos:start="147:22" pos:end="147:22">=</operator> <operator pos:start="147:24" pos:end="147:24">-</operator><literal type="number" pos:start="147:25" pos:end="147:25">1</literal></expr>;</expr_stmt>

                <break pos:start="149:17" pos:end="149:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="153:11" pos:end="161:9">else <block pos:start="153:16" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:37">

            <comment type="block" pos:start="155:13" pos:end="157:65">/* Since the result the kernel gave didn't fit, start

               again at low memory.  If any repetition, fail.  */</comment>

            <expr_stmt pos:start="159:13" pos:end="159:37"><expr pos:start="159:13" pos:end="159:36"><name pos:start="159:13" pos:end="159:16">addr</name> <operator pos:start="159:18" pos:end="159:18">=</operator> <operator pos:start="159:20" pos:end="159:20">(</operator><ternary pos:start="159:21" pos:end="159:35"><condition pos:start="159:21" pos:end="159:28"><expr pos:start="159:21" pos:end="159:26"><name pos:start="159:21" pos:end="159:26">repeat</name></expr> ?</condition><then pos:start="159:30" pos:end="159:31"> <expr pos:start="159:30" pos:end="159:31"><operator pos:start="159:30" pos:end="159:30">-</operator><literal type="number" pos:start="159:31" pos:end="159:31">1</literal></expr> </then><else pos:start="159:33" pos:end="159:35">: <expr pos:start="159:35" pos:end="159:35"><literal type="number" pos:start="159:35" pos:end="159:35">0</literal></expr></else></ternary><operator pos:start="159:36" pos:end="159:36">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="165:9" pos:end="165:35">/* Unmap and try again.  */</comment>

        <expr_stmt pos:start="167:9" pos:end="167:26"><expr pos:start="167:9" pos:end="167:25"><call pos:start="167:9" pos:end="167:25"><name pos:start="167:9" pos:end="167:14">munmap</name><argument_list pos:start="167:15" pos:end="167:25">(<argument pos:start="167:16" pos:end="167:18"><expr pos:start="167:16" pos:end="167:18"><name pos:start="167:16" pos:end="167:18">ptr</name></expr></argument>, <argument pos:start="167:21" pos:end="167:24"><expr pos:start="167:21" pos:end="167:24"><name pos:start="167:21" pos:end="167:24">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="171:9" pos:end="171:74">/* ENOMEM if we checked the whole of the target address space.  */</comment>

        <if_stmt pos:start="173:9" pos:end="201:9"><if pos:start="173:9" pos:end="177:9">if <condition pos:start="173:12" pos:end="173:25">(<expr pos:start="173:13" pos:end="173:24"><name pos:start="173:13" pos:end="173:16">addr</name> <operator pos:start="173:18" pos:end="173:19">==</operator> <operator pos:start="173:21" pos:end="173:21">-</operator><literal type="number" pos:start="173:22" pos:end="173:24">1ul</literal></expr>)</condition> <block pos:start="173:27" pos:end="177:9">{<block_content pos:start="175:13" pos:end="175:33">

            <return pos:start="175:13" pos:end="175:33">return <expr pos:start="175:20" pos:end="175:32"><operator pos:start="175:20" pos:end="175:20">(</operator><name pos:start="175:21" pos:end="175:29">abi_ulong</name><operator pos:start="175:30" pos:end="175:30">)</operator><operator pos:start="175:31" pos:end="175:31">-</operator><literal type="number" pos:start="175:32" pos:end="175:32">1</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="177:11" pos:end="197:9">else if <condition pos:start="177:19" pos:end="177:29">(<expr pos:start="177:20" pos:end="177:28"><name pos:start="177:20" pos:end="177:23">addr</name> <operator pos:start="177:25" pos:end="177:26">==</operator> <literal type="number" pos:start="177:28" pos:end="177:28">0</literal></expr>)</condition> <block pos:start="177:31" pos:end="197:9">{<block_content pos:start="179:13" pos:end="195:41">

            <if_stmt pos:start="179:13" pos:end="183:13"><if pos:start="179:13" pos:end="183:13">if <condition pos:start="179:16" pos:end="179:24">(<expr pos:start="179:17" pos:end="179:23"><name pos:start="179:17" pos:end="179:23">wrapped</name></expr>)</condition> <block pos:start="179:26" pos:end="183:13">{<block_content pos:start="181:17" pos:end="181:37">

                <return pos:start="181:17" pos:end="181:37">return <expr pos:start="181:24" pos:end="181:36"><operator pos:start="181:24" pos:end="181:24">(</operator><name pos:start="181:25" pos:end="181:33">abi_ulong</name><operator pos:start="181:34" pos:end="181:34">)</operator><operator pos:start="181:35" pos:end="181:35">-</operator><literal type="number" pos:start="181:36" pos:end="181:36">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:24"><expr pos:start="185:13" pos:end="185:23"><name pos:start="185:13" pos:end="185:19">wrapped</name> <operator pos:start="185:21" pos:end="185:21">=</operator> <literal type="number" pos:start="185:23" pos:end="185:23">1</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="187:13" pos:end="189:69">/* Don't actually use 0 when wrapping, instead indicate

               that we'd truely like an allocation in low memory.  */</comment>

            <expr_stmt pos:start="191:13" pos:end="195:41"><expr pos:start="191:13" pos:end="195:40"><name pos:start="191:13" pos:end="191:16">addr</name> <operator pos:start="191:18" pos:end="191:18">=</operator> <operator pos:start="191:20" pos:end="191:20">(</operator><ternary pos:start="191:21" pos:end="195:39"><condition pos:start="191:21" pos:end="193:22"><expr pos:start="191:21" pos:end="191:52"><name pos:start="191:21" pos:end="191:33">mmap_min_addr</name> <operator pos:start="191:35" pos:end="191:35">&gt;</operator> <name pos:start="191:37" pos:end="191:52">TARGET_PAGE_SIZE</name></expr>

                     ?</condition><then pos:start="193:24" pos:end="193:55"> <expr pos:start="193:24" pos:end="193:55"><call pos:start="193:24" pos:end="193:55"><name pos:start="193:24" pos:end="193:40">TARGET_PAGE_ALIGN</name><argument_list pos:start="193:41" pos:end="193:55">(<argument pos:start="193:42" pos:end="193:54"><expr pos:start="193:42" pos:end="193:54"><name pos:start="193:42" pos:end="193:54">mmap_min_addr</name></expr></argument>)</argument_list></call></expr>

                     </then><else pos:start="195:22" pos:end="195:39">: <expr pos:start="195:24" pos:end="195:39"><name pos:start="195:24" pos:end="195:39">TARGET_PAGE_SIZE</name></expr></else></ternary><operator pos:start="195:40" pos:end="195:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="197:11" pos:end="201:9">else if <condition pos:start="197:19" pos:end="197:44">(<expr pos:start="197:20" pos:end="197:43"><name pos:start="197:20" pos:end="197:26">wrapped</name> <operator pos:start="197:28" pos:end="197:29">&amp;&amp;</operator> <name pos:start="197:31" pos:end="197:34">addr</name> <operator pos:start="197:36" pos:end="197:37">&gt;=</operator> <name pos:start="197:39" pos:end="197:43">start</name></expr>)</condition> <block pos:start="197:46" pos:end="201:9">{<block_content pos:start="199:13" pos:end="199:33">

            <return pos:start="199:13" pos:end="199:33">return <expr pos:start="199:20" pos:end="199:32"><operator pos:start="199:20" pos:end="199:20">(</operator><name pos:start="199:21" pos:end="199:29">abi_ulong</name><operator pos:start="199:30" pos:end="199:30">)</operator><operator pos:start="199:31" pos:end="199:31">-</operator><literal type="number" pos:start="199:32" pos:end="199:32">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
