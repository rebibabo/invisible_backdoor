<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13582.c" pos:tabs="8"><function pos:start="1:1" pos:end="375:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:49">gen_intermediate_code_internal</name><parameter_list pos:start="1:50" pos:end="3:45">(<parameter pos:start="1:51" pos:end="1:67"><decl pos:start="1:51" pos:end="1:67"><type pos:start="1:51" pos:end="1:67"><name pos:start="1:51" pos:end="1:62">UniCore32CPU</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">cpu</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:28"><decl pos:start="3:9" pos:end="3:28"><type pos:start="3:9" pos:end="3:28"><name pos:start="3:9" pos:end="3:24">TranslationBlock</name> <modifier pos:start="3:26" pos:end="3:26">*</modifier></type><name pos:start="3:27" pos:end="3:28">tb</name></decl></parameter>, <parameter pos:start="3:31" pos:end="3:44"><decl pos:start="3:31" pos:end="3:44"><type pos:start="3:31" pos:end="3:44"><name pos:start="3:31" pos:end="3:34">bool</name></type> <name pos:start="3:36" pos:end="3:44">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="375:1">{<block_content pos:start="7:5" pos:end="373:5">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><call pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:27">(<argument pos:start="7:24" pos:end="7:26"><expr pos:start="7:24" pos:end="7:26"><name pos:start="7:24" pos:end="7:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">CPUUniCore32State</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:26">env</name> <init pos:start="9:28" pos:end="9:38">= <expr pos:start="9:30" pos:end="9:38"><operator pos:start="9:30" pos:end="9:30">&amp;</operator><name pos:start="9:31" pos:end="9:38"><name pos:start="9:31" pos:end="9:33">cpu</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">DisasContext</name></type> <name pos:start="11:18" pos:end="11:20">dc1</name></decl>, <decl pos:start="11:23" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:25">dc</name> <init pos:start="11:27" pos:end="11:32">= <expr pos:start="11:29" pos:end="11:32"><operator pos:start="11:29" pos:end="11:29">&amp;</operator><name pos:start="11:30" pos:end="11:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">CPUBreakpoint</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint16_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">j</name></decl>, <decl pos:start="17:12" pos:end="17:13"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:13">lj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:16">target_ulong</name></type> <name pos:start="19:18" pos:end="19:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:28">next_page_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">max_insns</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:36">/* generate intermediate code */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:18"><expr pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:13">num_temps</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <literal type="number" pos:start="31:17" pos:end="31:17">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:22"><expr pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:12">pc_start</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <name pos:start="35:16" pos:end="35:21"><name pos:start="35:16" pos:end="35:17">tb</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:21">pc</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:16"><expr pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:6">dc</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:10">tb</name></name> <operator pos:start="39:12" pos:end="39:12">=</operator> <name pos:start="39:14" pos:end="39:15">tb</name></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:53"><expr pos:start="43:5" pos:end="43:52"><name pos:start="43:5" pos:end="43:15">gen_opc_end</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:37"><name pos:start="43:19" pos:end="43:25">tcg_ctx</name><operator pos:start="43:26" pos:end="43:26">.</operator><name pos:start="43:27" pos:end="43:37">gen_opc_buf</name></name> <operator pos:start="43:39" pos:end="43:39">+</operator> <name pos:start="43:41" pos:end="43:52">OPC_MAX_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:28"><expr pos:start="47:5" pos:end="47:27"><name pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:6">dc</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:14">is_jmp</name></name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:27">DISAS_NEXT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:22"><expr pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:10"><name pos:start="49:5" pos:end="49:6">dc</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:10">pc</name></name> <operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:52"><expr pos:start="51:5" pos:end="51:51"><name pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:6">dc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:26">singlestep_enabled</name></name> <operator pos:start="51:28" pos:end="51:28">=</operator> <name pos:start="51:30" pos:end="51:51"><name pos:start="51:30" pos:end="51:31">cs</name><operator pos:start="51:32" pos:end="51:33">-&gt;</operator><name pos:start="51:34" pos:end="51:51">singlestep_enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:20"><expr pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:15">condjmp</name></name> <operator pos:start="53:17" pos:end="53:17">=</operator> <literal type="number" pos:start="53:19" pos:end="53:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:33"><expr pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:11">cpu_F0s</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:32"><name pos:start="55:15" pos:end="55:30">tcg_temp_new_i32</name><argument_list pos:start="55:31" pos:end="55:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:33"><expr pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:11">cpu_F1s</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:32"><name pos:start="57:15" pos:end="57:30">tcg_temp_new_i32</name><argument_list pos:start="57:31" pos:end="57:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:33"><expr pos:start="59:5" pos:end="59:32"><name pos:start="59:5" pos:end="59:11">cpu_F0d</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:32"><name pos:start="59:15" pos:end="59:30">tcg_temp_new_i64</name><argument_list pos:start="59:31" pos:end="59:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:33"><expr pos:start="61:5" pos:end="61:32"><name pos:start="61:5" pos:end="61:11">cpu_F1d</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:32"><name pos:start="61:15" pos:end="61:30">tcg_temp_new_i64</name><argument_list pos:start="61:31" pos:end="61:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:71"><expr pos:start="63:5" pos:end="63:70"><name pos:start="63:5" pos:end="63:19">next_page_start</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <operator pos:start="63:23" pos:end="63:23">(</operator><name pos:start="63:24" pos:end="63:31">pc_start</name> <operator pos:start="63:33" pos:end="63:33">&amp;</operator> <name pos:start="63:35" pos:end="63:50">TARGET_PAGE_MASK</name><operator pos:start="63:51" pos:end="63:51">)</operator> <operator pos:start="63:53" pos:end="63:53">+</operator> <name pos:start="63:55" pos:end="63:70">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:12"><expr pos:start="65:5" pos:end="65:11"><name pos:start="65:5" pos:end="65:6">lj</name> <operator pos:start="65:8" pos:end="65:8">=</operator> <operator pos:start="65:10" pos:end="65:10">-</operator><literal type="number" pos:start="65:11" pos:end="65:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:18"><expr pos:start="67:5" pos:end="67:17"><name pos:start="67:5" pos:end="67:13">num_insns</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <literal type="number" pos:start="67:17" pos:end="67:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:13">max_insns</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <name pos:start="69:17" pos:end="69:26"><name pos:start="69:17" pos:end="69:18">tb</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:26">cflags</name></name> <operator pos:start="69:28" pos:end="69:28">&amp;</operator> <name pos:start="69:30" pos:end="69:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="80:0"><if pos:start="71:5" pos:end="80:0">if <condition pos:start="71:8" pos:end="71:23">(<expr pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:17">max_insns</name> <operator pos:start="71:19" pos:end="71:20">==</operator> <literal type="number" pos:start="71:22" pos:end="71:22">0</literal></expr>)</condition> <block pos:start="71:25" pos:end="80:0">{<block_content pos:start="73:9" pos:end="73:34">

        <expr_stmt pos:start="73:9" pos:end="73:34"><expr pos:start="73:9" pos:end="73:33"><name pos:start="73:9" pos:end="73:17">max_insns</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:33">CF_COUNT_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifndef pos:start="79:1" pos:end="79:24">#<cpp:directive pos:start="79:2" pos:end="79:7">ifndef</cpp:directive> <name pos:start="79:9" pos:end="79:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <if_stmt pos:start="81:5" pos:end="92:0"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:53">(<expr pos:start="81:9" pos:end="81:52"><operator pos:start="81:9" pos:end="81:9">(</operator><name pos:start="81:10" pos:end="81:26"><name pos:start="81:10" pos:end="81:12">env</name><operator pos:start="81:13" pos:end="81:14">-&gt;</operator><name pos:start="81:15" pos:end="81:26">uncached_asr</name></name> <operator pos:start="81:28" pos:end="81:28">&amp;</operator> <name pos:start="81:30" pos:end="81:34">ASR_M</name><operator pos:start="81:35" pos:end="81:35">)</operator> <operator pos:start="81:37" pos:end="81:38">==</operator> <name pos:start="81:40" pos:end="81:52">ASR_MODE_USER</name></expr>)</condition> <block pos:start="81:55" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:21">

        <expr_stmt pos:start="83:9" pos:end="83:21"><expr pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:16"><name pos:start="83:9" pos:end="83:10">dc</name><operator pos:start="83:11" pos:end="83:12">-&gt;</operator><name pos:start="83:13" pos:end="83:16">user</name></name> <operator pos:start="83:18" pos:end="83:18">=</operator> <literal type="number" pos:start="83:20" pos:end="83:20">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="85:7" pos:end="92:0">else <block pos:start="85:12" pos:end="92:0">{<block_content pos:start="87:9" pos:end="87:21">

        <expr_stmt pos:start="87:9" pos:end="87:21"><expr pos:start="87:9" pos:end="87:20"><name pos:start="87:9" pos:end="87:16"><name pos:start="87:9" pos:end="87:10">dc</name><operator pos:start="87:11" pos:end="87:12">-&gt;</operator><name pos:start="87:13" pos:end="87:16">user</name></name> <operator pos:start="87:18" pos:end="87:18">=</operator> <literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="95:5" pos:end="95:19"><expr pos:start="95:5" pos:end="95:18"><call pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:16">gen_tb_start</name><argument_list pos:start="95:17" pos:end="95:18">()</argument_list></call></expr>;</expr_stmt>

    <do pos:start="97:5" pos:end="199:36">do <block pos:start="97:8" pos:end="191:5">{<block_content pos:start="99:9" pos:end="189:20">

        <if_stmt pos:start="99:9" pos:end="123:9"><if pos:start="99:9" pos:end="123:9">if <condition pos:start="99:12" pos:end="99:54">(<expr pos:start="99:13" pos:end="99:53"><call pos:start="99:13" pos:end="99:53"><name pos:start="99:13" pos:end="99:20">unlikely</name><argument_list pos:start="99:21" pos:end="99:53">(<argument pos:start="99:22" pos:end="99:52"><expr pos:start="99:22" pos:end="99:52"><operator pos:start="99:22" pos:end="99:22">!</operator><call pos:start="99:23" pos:end="99:52"><name pos:start="99:23" pos:end="99:34">QTAILQ_EMPTY</name><argument_list pos:start="99:35" pos:end="99:52">(<argument pos:start="99:36" pos:end="99:51"><expr pos:start="99:36" pos:end="99:51"><operator pos:start="99:36" pos:end="99:36">&amp;</operator><name pos:start="99:37" pos:end="99:51"><name pos:start="99:37" pos:end="99:38">cs</name><operator pos:start="99:39" pos:end="99:40">-&gt;</operator><name pos:start="99:41" pos:end="99:51">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:56" pos:end="123:9">{<block_content pos:start="101:13" pos:end="121:13">

            <macro pos:start="101:13" pos:end="101:55"><name pos:start="101:13" pos:end="101:26">QTAILQ_FOREACH</name><argument_list pos:start="101:27" pos:end="101:55">(<argument pos:start="101:28" pos:end="101:29">bp</argument>, <argument pos:start="101:32" pos:end="101:47">&amp;cs-&gt;breakpoints</argument>, <argument pos:start="101:50" pos:end="101:54">entry</argument>)</argument_list></macro> <block pos:start="101:57" pos:end="121:13">{<block_content pos:start="103:17" pos:end="119:17">

                <if_stmt pos:start="103:17" pos:end="119:17"><if pos:start="103:17" pos:end="119:17">if <condition pos:start="103:20" pos:end="103:37">(<expr pos:start="103:21" pos:end="103:36"><name pos:start="103:21" pos:end="103:26"><name pos:start="103:21" pos:end="103:22">bp</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:26">pc</name></name> <operator pos:start="103:28" pos:end="103:29">==</operator> <name pos:start="103:31" pos:end="103:36"><name pos:start="103:31" pos:end="103:32">dc</name><operator pos:start="103:33" pos:end="103:34">-&gt;</operator><name pos:start="103:35" pos:end="103:36">pc</name></name></expr>)</condition> <block pos:start="103:39" pos:end="119:17">{<block_content pos:start="105:21" pos:end="117:41">

                    <expr_stmt pos:start="105:21" pos:end="105:42"><expr pos:start="105:21" pos:end="105:41"><call pos:start="105:21" pos:end="105:41"><name pos:start="105:21" pos:end="105:33">gen_set_pc_im</name><argument_list pos:start="105:34" pos:end="105:41">(<argument pos:start="105:35" pos:end="105:40"><expr pos:start="105:35" pos:end="105:40"><name pos:start="105:35" pos:end="105:40"><name pos:start="105:35" pos:end="105:36">dc</name><operator pos:start="105:37" pos:end="105:38">-&gt;</operator><name pos:start="105:39" pos:end="105:40">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="107:21" pos:end="107:46"><expr pos:start="107:21" pos:end="107:45"><call pos:start="107:21" pos:end="107:45"><name pos:start="107:21" pos:end="107:33">gen_exception</name><argument_list pos:start="107:34" pos:end="107:45">(<argument pos:start="107:35" pos:end="107:44"><expr pos:start="107:35" pos:end="107:44"><name pos:start="107:35" pos:end="107:44">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:44"><expr pos:start="109:21" pos:end="109:43"><name pos:start="109:21" pos:end="109:30"><name pos:start="109:21" pos:end="109:22">dc</name><operator pos:start="109:23" pos:end="109:24">-&gt;</operator><name pos:start="109:25" pos:end="109:30">is_jmp</name></name> <operator pos:start="109:32" pos:end="109:32">=</operator> <name pos:start="109:34" pos:end="109:43">DISAS_JUMP</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="111:21" pos:end="113:46">/* Advance PC so that clearing the breakpoint will

                       invalidate this TB.  */</comment>

                    <expr_stmt pos:start="115:21" pos:end="115:32"><expr pos:start="115:21" pos:end="115:31"><name pos:start="115:21" pos:end="115:26"><name pos:start="115:21" pos:end="115:22">dc</name><operator pos:start="115:23" pos:end="115:24">-&gt;</operator><name pos:start="115:25" pos:end="115:26">pc</name></name> <operator pos:start="115:28" pos:end="115:29">+=</operator> <literal type="number" pos:start="115:31" pos:end="115:31">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="115:34" pos:end="115:44">/* FIXME */</comment>

                    <goto pos:start="117:21" pos:end="117:41">goto <name pos:start="117:26" pos:end="117:40">done_generating</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="125:9" pos:end="147:9"><if pos:start="125:9" pos:end="147:9">if <condition pos:start="125:12" pos:end="125:22">(<expr pos:start="125:13" pos:end="125:21"><name pos:start="125:13" pos:end="125:21">search_pc</name></expr>)</condition> <block pos:start="125:24" pos:end="147:9">{<block_content pos:start="127:13" pos:end="145:51">

            <expr_stmt pos:start="127:13" pos:end="127:58"><expr pos:start="127:13" pos:end="127:57"><name pos:start="127:13" pos:end="127:13">j</name> <operator pos:start="127:15" pos:end="127:15">=</operator> <name pos:start="127:17" pos:end="127:35"><name pos:start="127:17" pos:end="127:23">tcg_ctx</name><operator pos:start="127:24" pos:end="127:24">.</operator><name pos:start="127:25" pos:end="127:35">gen_opc_ptr</name></name> <operator pos:start="127:37" pos:end="127:37">-</operator> <name pos:start="127:39" pos:end="127:57"><name pos:start="127:39" pos:end="127:45">tcg_ctx</name><operator pos:start="127:46" pos:end="127:46">.</operator><name pos:start="127:47" pos:end="127:57">gen_opc_buf</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="129:13" pos:end="139:13"><if pos:start="129:13" pos:end="139:13">if <condition pos:start="129:16" pos:end="129:23">(<expr pos:start="129:17" pos:end="129:22"><name pos:start="129:17" pos:end="129:18">lj</name> <operator pos:start="129:20" pos:end="129:20">&lt;</operator> <name pos:start="129:22" pos:end="129:22">j</name></expr>)</condition> <block pos:start="129:25" pos:end="139:13">{<block_content pos:start="131:17" pos:end="137:17">

                <expr_stmt pos:start="131:17" pos:end="131:21"><expr pos:start="131:17" pos:end="131:20"><name pos:start="131:17" pos:end="131:18">lj</name><operator pos:start="131:19" pos:end="131:20">++</operator></expr>;</expr_stmt>

                <while pos:start="133:17" pos:end="137:17">while <condition pos:start="133:23" pos:end="133:30">(<expr pos:start="133:24" pos:end="133:29"><name pos:start="133:24" pos:end="133:25">lj</name> <operator pos:start="133:27" pos:end="133:27">&lt;</operator> <name pos:start="133:29" pos:end="133:29">j</name></expr>)</condition> <block pos:start="133:32" pos:end="137:17">{<block_content pos:start="135:21" pos:end="135:58">

                    <expr_stmt pos:start="135:21" pos:end="135:58"><expr pos:start="135:21" pos:end="135:57"><name pos:start="135:21" pos:end="135:53"><name pos:start="135:21" pos:end="135:27">tcg_ctx</name><operator pos:start="135:28" pos:end="135:28">.</operator><name pos:start="135:29" pos:end="135:47">gen_opc_instr_start</name><index pos:start="135:48" pos:end="135:53">[<expr pos:start="135:49" pos:end="135:52"><name pos:start="135:49" pos:end="135:50">lj</name><operator pos:start="135:51" pos:end="135:52">++</operator></expr>]</index></name> <operator pos:start="135:55" pos:end="135:55">=</operator> <literal type="number" pos:start="135:57" pos:end="135:57">0</literal></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:44"><expr pos:start="141:13" pos:end="141:43"><name pos:start="141:13" pos:end="141:34"><name pos:start="141:13" pos:end="141:19">tcg_ctx</name><operator pos:start="141:20" pos:end="141:20">.</operator><name pos:start="141:21" pos:end="141:30">gen_opc_pc</name><index pos:start="141:31" pos:end="141:34">[<expr pos:start="141:32" pos:end="141:33"><name pos:start="141:32" pos:end="141:33">lj</name></expr>]</index></name> <operator pos:start="141:36" pos:end="141:36">=</operator> <name pos:start="141:38" pos:end="141:43"><name pos:start="141:38" pos:end="141:39">dc</name><operator pos:start="141:40" pos:end="141:41">-&gt;</operator><name pos:start="141:42" pos:end="141:43">pc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:48"><expr pos:start="143:13" pos:end="143:47"><name pos:start="143:13" pos:end="143:43"><name pos:start="143:13" pos:end="143:19">tcg_ctx</name><operator pos:start="143:20" pos:end="143:20">.</operator><name pos:start="143:21" pos:end="143:39">gen_opc_instr_start</name><index pos:start="143:40" pos:end="143:43">[<expr pos:start="143:41" pos:end="143:42"><name pos:start="143:41" pos:end="143:42">lj</name></expr>]</index></name> <operator pos:start="143:45" pos:end="143:45">=</operator> <literal type="number" pos:start="143:47" pos:end="143:47">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:51"><expr pos:start="145:13" pos:end="145:50"><name pos:start="145:13" pos:end="145:38"><name pos:start="145:13" pos:end="145:19">tcg_ctx</name><operator pos:start="145:20" pos:end="145:20">.</operator><name pos:start="145:21" pos:end="145:34">gen_opc_icount</name><index pos:start="145:35" pos:end="145:38">[<expr pos:start="145:36" pos:end="145:37"><name pos:start="145:36" pos:end="145:37">lj</name></expr>]</index></name> <operator pos:start="145:40" pos:end="145:40">=</operator> <name pos:start="145:42" pos:end="145:50">num_insns</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="151:9" pos:end="155:9"><if pos:start="151:9" pos:end="155:9">if <condition pos:start="151:12" pos:end="151:68">(<expr pos:start="151:13" pos:end="151:67"><name pos:start="151:13" pos:end="151:21">num_insns</name> <operator pos:start="151:23" pos:end="151:23">+</operator> <literal type="number" pos:start="151:25" pos:end="151:25">1</literal> <operator pos:start="151:27" pos:end="151:28">==</operator> <name pos:start="151:30" pos:end="151:38">max_insns</name> <operator pos:start="151:40" pos:end="151:41">&amp;&amp;</operator> <operator pos:start="151:43" pos:end="151:43">(</operator><name pos:start="151:44" pos:end="151:53"><name pos:start="151:44" pos:end="151:45">tb</name><operator pos:start="151:46" pos:end="151:47">-&gt;</operator><name pos:start="151:48" pos:end="151:53">cflags</name></name> <operator pos:start="151:55" pos:end="151:55">&amp;</operator> <name pos:start="151:57" pos:end="151:66">CF_LAST_IO</name><operator pos:start="151:67" pos:end="151:67">)</operator></expr>)</condition> <block pos:start="151:70" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:27">

            <expr_stmt pos:start="153:13" pos:end="153:27"><expr pos:start="153:13" pos:end="153:26"><call pos:start="153:13" pos:end="153:26"><name pos:start="153:13" pos:end="153:24">gen_io_start</name><argument_list pos:start="153:25" pos:end="153:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:33"><expr pos:start="159:9" pos:end="159:32"><call pos:start="159:9" pos:end="159:32"><name pos:start="159:9" pos:end="159:23">disas_uc32_insn</name><argument_list pos:start="159:24" pos:end="159:32">(<argument pos:start="159:25" pos:end="159:27"><expr pos:start="159:25" pos:end="159:27"><name pos:start="159:25" pos:end="159:27">env</name></expr></argument>, <argument pos:start="159:30" pos:end="159:31"><expr pos:start="159:30" pos:end="159:31"><name pos:start="159:30" pos:end="159:31">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="163:9" pos:end="169:9"><if pos:start="163:9" pos:end="169:9">if <condition pos:start="163:12" pos:end="163:22">(<expr pos:start="163:13" pos:end="163:21"><name pos:start="163:13" pos:end="163:21">num_temps</name></expr>)</condition> <block pos:start="163:24" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:26">

            <expr_stmt pos:start="165:13" pos:end="165:76"><expr pos:start="165:13" pos:end="165:75"><call pos:start="165:13" pos:end="165:75"><name pos:start="165:13" pos:end="165:19">fprintf</name><argument_list pos:start="165:20" pos:end="165:75">(<argument pos:start="165:21" pos:end="165:26"><expr pos:start="165:21" pos:end="165:26"><name pos:start="165:21" pos:end="165:26">stderr</name></expr></argument>, <argument pos:start="165:29" pos:end="165:66"><expr pos:start="165:29" pos:end="165:66"><literal type="string" pos:start="165:29" pos:end="165:66">"Internal resource leak before %08x\n"</literal></expr></argument>, <argument pos:start="165:69" pos:end="165:74"><expr pos:start="165:69" pos:end="165:74"><name pos:start="165:69" pos:end="165:74"><name pos:start="165:69" pos:end="165:70">dc</name><operator pos:start="165:71" pos:end="165:72">-&gt;</operator><name pos:start="165:73" pos:end="165:74">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:26"><expr pos:start="167:13" pos:end="167:25"><name pos:start="167:13" pos:end="167:21">num_temps</name> <operator pos:start="167:23" pos:end="167:23">=</operator> <literal type="number" pos:start="167:25" pos:end="167:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="173:9" pos:end="179:9"><if pos:start="173:9" pos:end="179:9">if <condition pos:start="173:12" pos:end="173:39">(<expr pos:start="173:13" pos:end="173:38"><name pos:start="173:13" pos:end="173:23"><name pos:start="173:13" pos:end="173:14">dc</name><operator pos:start="173:15" pos:end="173:16">-&gt;</operator><name pos:start="173:17" pos:end="173:23">condjmp</name></name> <operator pos:start="173:25" pos:end="173:26">&amp;&amp;</operator> <operator pos:start="173:28" pos:end="173:28">!</operator><name pos:start="173:29" pos:end="173:38"><name pos:start="173:29" pos:end="173:30">dc</name><operator pos:start="173:31" pos:end="173:32">-&gt;</operator><name pos:start="173:33" pos:end="173:38">is_jmp</name></name></expr>)</condition> <block pos:start="173:41" pos:end="179:9">{<block_content pos:start="175:13" pos:end="177:28">

            <expr_stmt pos:start="175:13" pos:end="175:41"><expr pos:start="175:13" pos:end="175:40"><call pos:start="175:13" pos:end="175:40"><name pos:start="175:13" pos:end="175:25">gen_set_label</name><argument_list pos:start="175:26" pos:end="175:40">(<argument pos:start="175:27" pos:end="175:39"><expr pos:start="175:27" pos:end="175:39"><name pos:start="175:27" pos:end="175:39"><name pos:start="175:27" pos:end="175:28">dc</name><operator pos:start="175:29" pos:end="175:30">-&gt;</operator><name pos:start="175:31" pos:end="175:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:28"><expr pos:start="177:13" pos:end="177:27"><name pos:start="177:13" pos:end="177:23"><name pos:start="177:13" pos:end="177:14">dc</name><operator pos:start="177:15" pos:end="177:16">-&gt;</operator><name pos:start="177:17" pos:end="177:23">condjmp</name></name> <operator pos:start="177:25" pos:end="177:25">=</operator> <literal type="number" pos:start="177:27" pos:end="177:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="181:9" pos:end="187:64">/* Translation stops when a conditional branch is encountered.

         * Otherwise the subsequent code could get translated several times.

         * Also stop translation when a page boundary is reached.  This

         * ensures prefetch aborts occur at the right place.  */</comment>

        <expr_stmt pos:start="189:9" pos:end="189:20"><expr pos:start="189:9" pos:end="189:19"><name pos:start="189:9" pos:end="189:17">num_insns</name><operator pos:start="189:18" pos:end="189:19">++</operator></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="191:13" pos:end="199:35">(<expr pos:start="191:14" pos:end="199:34"><operator pos:start="191:14" pos:end="191:14">!</operator><name pos:start="191:15" pos:end="191:24"><name pos:start="191:15" pos:end="191:16">dc</name><operator pos:start="191:17" pos:end="191:18">-&gt;</operator><name pos:start="191:19" pos:end="191:24">is_jmp</name></name> <operator pos:start="191:26" pos:end="191:27">&amp;&amp;</operator> <name pos:start="191:29" pos:end="191:47"><name pos:start="191:29" pos:end="191:35">tcg_ctx</name><operator pos:start="191:36" pos:end="191:36">.</operator><name pos:start="191:37" pos:end="191:47">gen_opc_ptr</name></name> <operator pos:start="191:49" pos:end="191:49">&lt;</operator> <name pos:start="191:51" pos:end="191:61">gen_opc_end</name> <operator pos:start="191:63" pos:end="191:64">&amp;&amp;</operator>

             <operator pos:start="193:14" pos:end="193:14">!</operator><name pos:start="193:15" pos:end="193:36"><name pos:start="193:15" pos:end="193:16">cs</name><operator pos:start="193:17" pos:end="193:18">-&gt;</operator><name pos:start="193:19" pos:end="193:36">singlestep_enabled</name></name> <operator pos:start="193:38" pos:end="193:39">&amp;&amp;</operator>

             <operator pos:start="195:14" pos:end="195:14">!</operator><name pos:start="195:15" pos:end="195:24">singlestep</name> <operator pos:start="195:26" pos:end="195:27">&amp;&amp;</operator>

             <name pos:start="197:14" pos:end="197:19"><name pos:start="197:14" pos:end="197:15">dc</name><operator pos:start="197:16" pos:end="197:17">-&gt;</operator><name pos:start="197:18" pos:end="197:19">pc</name></name> <operator pos:start="197:21" pos:end="197:21">&lt;</operator> <name pos:start="197:23" pos:end="197:37">next_page_start</name> <operator pos:start="197:39" pos:end="197:40">&amp;&amp;</operator>

             <name pos:start="199:14" pos:end="199:22">num_insns</name> <operator pos:start="199:24" pos:end="199:24">&lt;</operator> <name pos:start="199:26" pos:end="199:34">max_insns</name></expr>)</condition>;</do>



    <if_stmt pos:start="203:5" pos:end="217:5"><if pos:start="203:5" pos:end="217:5">if <condition pos:start="203:8" pos:end="203:32">(<expr pos:start="203:9" pos:end="203:31"><name pos:start="203:9" pos:end="203:18"><name pos:start="203:9" pos:end="203:10">tb</name><operator pos:start="203:11" pos:end="203:12">-&gt;</operator><name pos:start="203:13" pos:end="203:18">cflags</name></name> <operator pos:start="203:20" pos:end="203:20">&amp;</operator> <name pos:start="203:22" pos:end="203:31">CF_LAST_IO</name></expr>)</condition> <block pos:start="203:34" pos:end="217:5">{<block_content pos:start="205:9" pos:end="215:21">

        <if_stmt pos:start="205:9" pos:end="213:9"><if pos:start="205:9" pos:end="213:9">if <condition pos:start="205:12" pos:end="205:24">(<expr pos:start="205:13" pos:end="205:23"><name pos:start="205:13" pos:end="205:23"><name pos:start="205:13" pos:end="205:14">dc</name><operator pos:start="205:15" pos:end="205:16">-&gt;</operator><name pos:start="205:17" pos:end="205:23">condjmp</name></name></expr>)</condition> <block pos:start="205:26" pos:end="213:9">{<block_content pos:start="211:13" pos:end="211:66">

            <comment type="block" pos:start="207:13" pos:end="209:24">/* FIXME:  This can theoretically happen with self-modifying

               code.  */</comment>

            <expr_stmt pos:start="211:13" pos:end="211:66"><expr pos:start="211:13" pos:end="211:65"><call pos:start="211:13" pos:end="211:65"><name pos:start="211:13" pos:end="211:21">cpu_abort</name><argument_list pos:start="211:22" pos:end="211:65">(<argument pos:start="211:23" pos:end="211:24"><expr pos:start="211:23" pos:end="211:24"><name pos:start="211:23" pos:end="211:24">cs</name></expr></argument>, <argument pos:start="211:27" pos:end="211:64"><expr pos:start="211:27" pos:end="211:64"><literal type="string" pos:start="211:27" pos:end="211:64">"IO on conditional branch instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:21"><expr pos:start="215:9" pos:end="215:20"><call pos:start="215:9" pos:end="215:20"><name pos:start="215:9" pos:end="215:18">gen_io_end</name><argument_list pos:start="215:19" pos:end="215:20">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="221:5" pos:end="225:32">/* At this stage dc-&gt;condjmp will only be set when the skipped

       instruction was a conditional branch or trap, and the PC has

       already been written.  */</comment>

    <if_stmt pos:start="227:5" pos:end="327:5"><if pos:start="227:5" pos:end="265:5">if <condition pos:start="227:8" pos:end="227:41">(<expr pos:start="227:9" pos:end="227:40"><call pos:start="227:9" pos:end="227:40"><name pos:start="227:9" pos:end="227:16">unlikely</name><argument_list pos:start="227:17" pos:end="227:40">(<argument pos:start="227:18" pos:end="227:39"><expr pos:start="227:18" pos:end="227:39"><name pos:start="227:18" pos:end="227:39"><name pos:start="227:18" pos:end="227:19">cs</name><operator pos:start="227:20" pos:end="227:21">-&gt;</operator><name pos:start="227:22" pos:end="227:39">singlestep_enabled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="227:43" pos:end="265:5">{<block_content pos:start="231:9" pos:end="263:9">

        <comment type="block" pos:start="229:9" pos:end="229:72">/* Make sure the pc is updated, and raise a debug exception.  */</comment>

        <if_stmt pos:start="231:9" pos:end="245:9"><if pos:start="231:9" pos:end="245:9">if <condition pos:start="231:12" pos:end="231:24">(<expr pos:start="231:13" pos:end="231:23"><name pos:start="231:13" pos:end="231:23"><name pos:start="231:13" pos:end="231:14">dc</name><operator pos:start="231:15" pos:end="231:16">-&gt;</operator><name pos:start="231:17" pos:end="231:23">condjmp</name></name></expr>)</condition> <block pos:start="231:26" pos:end="245:9">{<block_content pos:start="233:13" pos:end="243:41">

            <if_stmt pos:start="233:13" pos:end="241:13"><if pos:start="233:13" pos:end="237:13">if <condition pos:start="233:16" pos:end="233:44">(<expr pos:start="233:17" pos:end="233:43"><name pos:start="233:17" pos:end="233:26"><name pos:start="233:17" pos:end="233:18">dc</name><operator pos:start="233:19" pos:end="233:20">-&gt;</operator><name pos:start="233:21" pos:end="233:26">is_jmp</name></name> <operator pos:start="233:28" pos:end="233:29">==</operator> <name pos:start="233:31" pos:end="233:43">DISAS_SYSCALL</name></expr>)</condition> <block pos:start="233:46" pos:end="237:13">{<block_content pos:start="235:17" pos:end="235:46">

                <expr_stmt pos:start="235:17" pos:end="235:46"><expr pos:start="235:17" pos:end="235:45"><call pos:start="235:17" pos:end="235:45"><name pos:start="235:17" pos:end="235:29">gen_exception</name><argument_list pos:start="235:30" pos:end="235:45">(<argument pos:start="235:31" pos:end="235:44"><expr pos:start="235:31" pos:end="235:44"><name pos:start="235:31" pos:end="235:44">UC32_EXCP_PRIV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="237:15" pos:end="241:13">else <block pos:start="237:20" pos:end="241:13">{<block_content pos:start="239:17" pos:end="239:42">

                <expr_stmt pos:start="239:17" pos:end="239:42"><expr pos:start="239:17" pos:end="239:41"><call pos:start="239:17" pos:end="239:41"><name pos:start="239:17" pos:end="239:29">gen_exception</name><argument_list pos:start="239:30" pos:end="239:41">(<argument pos:start="239:31" pos:end="239:40"><expr pos:start="239:31" pos:end="239:40"><name pos:start="239:31" pos:end="239:40">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:41"><expr pos:start="243:13" pos:end="243:40"><call pos:start="243:13" pos:end="243:40"><name pos:start="243:13" pos:end="243:25">gen_set_label</name><argument_list pos:start="243:26" pos:end="243:40">(<argument pos:start="243:27" pos:end="243:39"><expr pos:start="243:27" pos:end="243:39"><name pos:start="243:27" pos:end="243:39"><name pos:start="243:27" pos:end="243:28">dc</name><operator pos:start="243:29" pos:end="243:30">-&gt;</operator><name pos:start="243:31" pos:end="243:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="247:9" pos:end="253:9"><if pos:start="247:9" pos:end="253:9">if <condition pos:start="247:12" pos:end="247:39">(<expr pos:start="247:13" pos:end="247:38"><name pos:start="247:13" pos:end="247:23"><name pos:start="247:13" pos:end="247:14">dc</name><operator pos:start="247:15" pos:end="247:16">-&gt;</operator><name pos:start="247:17" pos:end="247:23">condjmp</name></name> <operator pos:start="247:25" pos:end="247:26">||</operator> <operator pos:start="247:28" pos:end="247:28">!</operator><name pos:start="247:29" pos:end="247:38"><name pos:start="247:29" pos:end="247:30">dc</name><operator pos:start="247:31" pos:end="247:32">-&gt;</operator><name pos:start="247:33" pos:end="247:38">is_jmp</name></name></expr>)</condition> <block pos:start="247:41" pos:end="253:9">{<block_content pos:start="249:13" pos:end="251:28">

            <expr_stmt pos:start="249:13" pos:end="249:34"><expr pos:start="249:13" pos:end="249:33"><call pos:start="249:13" pos:end="249:33"><name pos:start="249:13" pos:end="249:25">gen_set_pc_im</name><argument_list pos:start="249:26" pos:end="249:33">(<argument pos:start="249:27" pos:end="249:32"><expr pos:start="249:27" pos:end="249:32"><name pos:start="249:27" pos:end="249:32"><name pos:start="249:27" pos:end="249:28">dc</name><operator pos:start="249:29" pos:end="249:30">-&gt;</operator><name pos:start="249:31" pos:end="249:32">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:28"><expr pos:start="251:13" pos:end="251:27"><name pos:start="251:13" pos:end="251:23"><name pos:start="251:13" pos:end="251:14">dc</name><operator pos:start="251:15" pos:end="251:16">-&gt;</operator><name pos:start="251:17" pos:end="251:23">condjmp</name></name> <operator pos:start="251:25" pos:end="251:25">=</operator> <literal type="number" pos:start="251:27" pos:end="251:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="255:9" pos:end="263:9"><if pos:start="255:9" pos:end="259:9">if <condition pos:start="255:12" pos:end="255:56">(<expr pos:start="255:13" pos:end="255:55"><name pos:start="255:13" pos:end="255:22"><name pos:start="255:13" pos:end="255:14">dc</name><operator pos:start="255:15" pos:end="255:16">-&gt;</operator><name pos:start="255:17" pos:end="255:22">is_jmp</name></name> <operator pos:start="255:24" pos:end="255:25">==</operator> <name pos:start="255:27" pos:end="255:39">DISAS_SYSCALL</name> <operator pos:start="255:41" pos:end="255:42">&amp;&amp;</operator> <operator pos:start="255:44" pos:end="255:44">!</operator><name pos:start="255:45" pos:end="255:55"><name pos:start="255:45" pos:end="255:46">dc</name><operator pos:start="255:47" pos:end="255:48">-&gt;</operator><name pos:start="255:49" pos:end="255:55">condjmp</name></name></expr>)</condition> <block pos:start="255:58" pos:end="259:9">{<block_content pos:start="257:13" pos:end="257:42">

            <expr_stmt pos:start="257:13" pos:end="257:42"><expr pos:start="257:13" pos:end="257:41"><call pos:start="257:13" pos:end="257:41"><name pos:start="257:13" pos:end="257:25">gen_exception</name><argument_list pos:start="257:26" pos:end="257:41">(<argument pos:start="257:27" pos:end="257:40"><expr pos:start="257:27" pos:end="257:40"><name pos:start="257:27" pos:end="257:40">UC32_EXCP_PRIV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="259:11" pos:end="263:9">else <block pos:start="259:16" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:38">

            <expr_stmt pos:start="261:13" pos:end="261:38"><expr pos:start="261:13" pos:end="261:37"><call pos:start="261:13" pos:end="261:37"><name pos:start="261:13" pos:end="261:25">gen_exception</name><argument_list pos:start="261:26" pos:end="261:37">(<argument pos:start="261:27" pos:end="261:36"><expr pos:start="261:27" pos:end="261:36"><name pos:start="261:27" pos:end="261:36">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="265:7" pos:end="327:5">else <block pos:start="265:12" pos:end="327:5">{<block_content pos:start="283:9" pos:end="325:9">

        <comment type="block" pos:start="267:9" pos:end="281:11">/* While branches must always occur at the end of an IT block,

           there are a few other things that can cause us to terminate

           the TB in the middel of an IT block:

            - Exception generating instructions (bkpt, swi, undefined).

            - Page boundaries.

            - Hardware watchpoints.

           Hardware breakpoints have already been handled and skip this code.

         */</comment>

        <switch pos:start="283:9" pos:end="315:9">switch <condition pos:start="283:16" pos:end="283:27">(<expr pos:start="283:17" pos:end="283:26"><name pos:start="283:17" pos:end="283:26"><name pos:start="283:17" pos:end="283:18">dc</name><operator pos:start="283:19" pos:end="283:20">-&gt;</operator><name pos:start="283:21" pos:end="283:26">is_jmp</name></name></expr>)</condition> <block pos:start="283:29" pos:end="315:9">{<block_content pos:start="285:9" pos:end="313:18">

        <case pos:start="285:9" pos:end="285:24">case <expr pos:start="285:14" pos:end="285:23"><name pos:start="285:14" pos:end="285:23">DISAS_NEXT</name></expr>:</case>

            <expr_stmt pos:start="287:13" pos:end="287:39"><expr pos:start="287:13" pos:end="287:38"><call pos:start="287:13" pos:end="287:38"><name pos:start="287:13" pos:end="287:23">gen_goto_tb</name><argument_list pos:start="287:24" pos:end="287:38">(<argument pos:start="287:25" pos:end="287:26"><expr pos:start="287:25" pos:end="287:26"><name pos:start="287:25" pos:end="287:26">dc</name></expr></argument>, <argument pos:start="287:29" pos:end="287:29"><expr pos:start="287:29" pos:end="287:29"><literal type="number" pos:start="287:29" pos:end="287:29">1</literal></expr></argument>, <argument pos:start="287:32" pos:end="287:37"><expr pos:start="287:32" pos:end="287:37"><name pos:start="287:32" pos:end="287:37"><name pos:start="287:32" pos:end="287:33">dc</name><operator pos:start="287:34" pos:end="287:35">-&gt;</operator><name pos:start="287:36" pos:end="287:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="289:13" pos:end="289:18">break;</break>

        <default pos:start="291:9" pos:end="291:16">default:</default>

        <case pos:start="293:9" pos:end="293:24">case <expr pos:start="293:14" pos:end="293:23"><name pos:start="293:14" pos:end="293:23">DISAS_JUMP</name></expr>:</case>

        <case pos:start="295:9" pos:end="295:26">case <expr pos:start="295:14" pos:end="295:25"><name pos:start="295:14" pos:end="295:25">DISAS_UPDATE</name></expr>:</case>

            <comment type="block" pos:start="297:13" pos:end="297:79">/* indicate that the hash table must be used to find the next TB */</comment>

            <expr_stmt pos:start="299:13" pos:end="299:31"><expr pos:start="299:13" pos:end="299:30"><call pos:start="299:13" pos:end="299:30"><name pos:start="299:13" pos:end="299:27">tcg_gen_exit_tb</name><argument_list pos:start="299:28" pos:end="299:30">(<argument pos:start="299:29" pos:end="299:29"><expr pos:start="299:29" pos:end="299:29"><literal type="number" pos:start="299:29" pos:end="299:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="301:13" pos:end="301:18">break;</break>

        <case pos:start="303:9" pos:end="303:27">case <expr pos:start="303:14" pos:end="303:26"><name pos:start="303:14" pos:end="303:26">DISAS_TB_JUMP</name></expr>:</case>

            <comment type="block" pos:start="305:13" pos:end="305:42">/* nothing more to generate */</comment>

            <break pos:start="307:13" pos:end="307:18">break;</break>

        <case pos:start="309:9" pos:end="309:27">case <expr pos:start="309:14" pos:end="309:26"><name pos:start="309:14" pos:end="309:26">DISAS_SYSCALL</name></expr>:</case>

            <expr_stmt pos:start="311:13" pos:end="311:42"><expr pos:start="311:13" pos:end="311:41"><call pos:start="311:13" pos:end="311:41"><name pos:start="311:13" pos:end="311:25">gen_exception</name><argument_list pos:start="311:26" pos:end="311:41">(<argument pos:start="311:27" pos:end="311:40"><expr pos:start="311:27" pos:end="311:40"><name pos:start="311:27" pos:end="311:40">UC32_EXCP_PRIV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="313:13" pos:end="313:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="317:9" pos:end="325:9"><if pos:start="317:9" pos:end="325:9">if <condition pos:start="317:12" pos:end="317:24">(<expr pos:start="317:13" pos:end="317:23"><name pos:start="317:13" pos:end="317:23"><name pos:start="317:13" pos:end="317:14">dc</name><operator pos:start="317:15" pos:end="317:16">-&gt;</operator><name pos:start="317:17" pos:end="317:23">condjmp</name></name></expr>)</condition> <block pos:start="317:26" pos:end="325:9">{<block_content pos:start="319:13" pos:end="323:28">

            <expr_stmt pos:start="319:13" pos:end="319:41"><expr pos:start="319:13" pos:end="319:40"><call pos:start="319:13" pos:end="319:40"><name pos:start="319:13" pos:end="319:25">gen_set_label</name><argument_list pos:start="319:26" pos:end="319:40">(<argument pos:start="319:27" pos:end="319:39"><expr pos:start="319:27" pos:end="319:39"><name pos:start="319:27" pos:end="319:39"><name pos:start="319:27" pos:end="319:28">dc</name><operator pos:start="319:29" pos:end="319:30">-&gt;</operator><name pos:start="319:31" pos:end="319:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:39"><expr pos:start="321:13" pos:end="321:38"><call pos:start="321:13" pos:end="321:38"><name pos:start="321:13" pos:end="321:23">gen_goto_tb</name><argument_list pos:start="321:24" pos:end="321:38">(<argument pos:start="321:25" pos:end="321:26"><expr pos:start="321:25" pos:end="321:26"><name pos:start="321:25" pos:end="321:26">dc</name></expr></argument>, <argument pos:start="321:29" pos:end="321:29"><expr pos:start="321:29" pos:end="321:29"><literal type="number" pos:start="321:29" pos:end="321:29">1</literal></expr></argument>, <argument pos:start="321:32" pos:end="321:37"><expr pos:start="321:32" pos:end="321:37"><name pos:start="321:32" pos:end="321:37"><name pos:start="321:32" pos:end="321:33">dc</name><operator pos:start="321:34" pos:end="321:35">-&gt;</operator><name pos:start="321:36" pos:end="321:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:28"><expr pos:start="323:13" pos:end="323:27"><name pos:start="323:13" pos:end="323:23"><name pos:start="323:13" pos:end="323:14">dc</name><operator pos:start="323:15" pos:end="323:16">-&gt;</operator><name pos:start="323:17" pos:end="323:23">condjmp</name></name> <operator pos:start="323:25" pos:end="323:25">=</operator> <literal type="number" pos:start="323:27" pos:end="323:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="331:1" pos:end="331:16"><name pos:start="331:1" pos:end="331:15">done_generating</name>:</label>

    <expr_stmt pos:start="333:5" pos:end="333:30"><expr pos:start="333:5" pos:end="333:29"><call pos:start="333:5" pos:end="333:29"><name pos:start="333:5" pos:end="333:14">gen_tb_end</name><argument_list pos:start="333:15" pos:end="333:29">(<argument pos:start="333:16" pos:end="333:17"><expr pos:start="333:16" pos:end="333:17"><name pos:start="333:16" pos:end="333:17">tb</name></expr></argument>, <argument pos:start="333:20" pos:end="333:28"><expr pos:start="333:20" pos:end="333:28"><name pos:start="333:20" pos:end="333:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="335:5" pos:end="340:0"><expr pos:start="335:5" pos:end="335:39"><operator pos:start="335:5" pos:end="335:5">*</operator><name pos:start="335:6" pos:end="335:24"><name pos:start="335:6" pos:end="335:12">tcg_ctx</name><operator pos:start="335:13" pos:end="335:13">.</operator><name pos:start="335:14" pos:end="335:24">gen_opc_ptr</name></name> <operator pos:start="335:26" pos:end="335:26">=</operator> <name pos:start="335:28" pos:end="335:39">INDEX_op_end</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="339:1" pos:end="339:18">#<cpp:directive pos:start="339:2" pos:end="339:6">ifdef</cpp:directive> <name pos:start="339:8" pos:end="339:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="341:5" pos:end="354:0"><if pos:start="341:5" pos:end="354:0">if <condition pos:start="341:8" pos:end="341:46">(<expr pos:start="341:9" pos:end="341:45"><call pos:start="341:9" pos:end="341:45"><name pos:start="341:9" pos:end="341:26">qemu_loglevel_mask</name><argument_list pos:start="341:27" pos:end="341:45">(<argument pos:start="341:28" pos:end="341:44"><expr pos:start="341:28" pos:end="341:44"><name pos:start="341:28" pos:end="341:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="341:48" pos:end="354:0">{<block_content pos:start="343:9" pos:end="349:23">

        <expr_stmt pos:start="343:9" pos:end="343:39"><expr pos:start="343:9" pos:end="343:38"><call pos:start="343:9" pos:end="343:38"><name pos:start="343:9" pos:end="343:16">qemu_log</name><argument_list pos:start="343:17" pos:end="343:38">(<argument pos:start="343:18" pos:end="343:37"><expr pos:start="343:18" pos:end="343:37"><literal type="string" pos:start="343:18" pos:end="343:37">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:54"><expr pos:start="345:9" pos:end="345:53"><call pos:start="345:9" pos:end="345:53"><name pos:start="345:9" pos:end="345:16">qemu_log</name><argument_list pos:start="345:17" pos:end="345:53">(<argument pos:start="345:18" pos:end="345:27"><expr pos:start="345:18" pos:end="345:27"><literal type="string" pos:start="345:18" pos:end="345:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="345:30" pos:end="345:52"><expr pos:start="345:30" pos:end="345:52"><call pos:start="345:30" pos:end="345:52"><name pos:start="345:30" pos:end="345:42">lookup_symbol</name><argument_list pos:start="345:43" pos:end="345:52">(<argument pos:start="345:44" pos:end="345:51"><expr pos:start="345:44" pos:end="345:51"><name pos:start="345:44" pos:end="345:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:62"><expr pos:start="347:9" pos:end="347:61"><call pos:start="347:9" pos:end="347:61"><name pos:start="347:9" pos:end="347:24">log_target_disas</name><argument_list pos:start="347:25" pos:end="347:61">(<argument pos:start="347:26" pos:end="347:28"><expr pos:start="347:26" pos:end="347:28"><name pos:start="347:26" pos:end="347:28">env</name></expr></argument>, <argument pos:start="347:31" pos:end="347:38"><expr pos:start="347:31" pos:end="347:38"><name pos:start="347:31" pos:end="347:38">pc_start</name></expr></argument>, <argument pos:start="347:41" pos:end="347:57"><expr pos:start="347:41" pos:end="347:57"><name pos:start="347:41" pos:end="347:46"><name pos:start="347:41" pos:end="347:42">dc</name><operator pos:start="347:43" pos:end="347:44">-&gt;</operator><name pos:start="347:45" pos:end="347:46">pc</name></name> <operator pos:start="347:48" pos:end="347:48">-</operator> <name pos:start="347:50" pos:end="347:57">pc_start</name></expr></argument>, <argument pos:start="347:60" pos:end="347:60"><expr pos:start="347:60" pos:end="347:60"><literal type="number" pos:start="347:60" pos:end="347:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:23"><expr pos:start="349:9" pos:end="349:22"><call pos:start="349:9" pos:end="349:22"><name pos:start="349:9" pos:end="349:16">qemu_log</name><argument_list pos:start="349:17" pos:end="349:22">(<argument pos:start="349:18" pos:end="349:21"><expr pos:start="349:18" pos:end="349:21"><literal type="string" pos:start="349:18" pos:end="349:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="353:1" pos:end="353:6">#<cpp:directive pos:start="353:2" pos:end="353:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="355:5" pos:end="373:5"><if pos:start="355:5" pos:end="367:5">if <condition pos:start="355:8" pos:end="355:18">(<expr pos:start="355:9" pos:end="355:17"><name pos:start="355:9" pos:end="355:17">search_pc</name></expr>)</condition> <block pos:start="355:20" pos:end="367:5">{<block_content pos:start="357:9" pos:end="365:9">

        <expr_stmt pos:start="357:9" pos:end="357:54"><expr pos:start="357:9" pos:end="357:53"><name pos:start="357:9" pos:end="357:9">j</name> <operator pos:start="357:11" pos:end="357:11">=</operator> <name pos:start="357:13" pos:end="357:31"><name pos:start="357:13" pos:end="357:19">tcg_ctx</name><operator pos:start="357:20" pos:end="357:20">.</operator><name pos:start="357:21" pos:end="357:31">gen_opc_ptr</name></name> <operator pos:start="357:33" pos:end="357:33">-</operator> <name pos:start="357:35" pos:end="357:53"><name pos:start="357:35" pos:end="357:41">tcg_ctx</name><operator pos:start="357:42" pos:end="357:42">.</operator><name pos:start="357:43" pos:end="357:53">gen_opc_buf</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="359:9" pos:end="359:13"><expr pos:start="359:9" pos:end="359:12"><name pos:start="359:9" pos:end="359:10">lj</name><operator pos:start="359:11" pos:end="359:12">++</operator></expr>;</expr_stmt>

        <while pos:start="361:9" pos:end="365:9">while <condition pos:start="361:15" pos:end="361:23">(<expr pos:start="361:16" pos:end="361:22"><name pos:start="361:16" pos:end="361:17">lj</name> <operator pos:start="361:19" pos:end="361:20">&lt;=</operator> <name pos:start="361:22" pos:end="361:22">j</name></expr>)</condition> <block pos:start="361:25" pos:end="365:9">{<block_content pos:start="363:13" pos:end="363:50">

            <expr_stmt pos:start="363:13" pos:end="363:50"><expr pos:start="363:13" pos:end="363:49"><name pos:start="363:13" pos:end="363:45"><name pos:start="363:13" pos:end="363:19">tcg_ctx</name><operator pos:start="363:20" pos:end="363:20">.</operator><name pos:start="363:21" pos:end="363:39">gen_opc_instr_start</name><index pos:start="363:40" pos:end="363:45">[<expr pos:start="363:41" pos:end="363:44"><name pos:start="363:41" pos:end="363:42">lj</name><operator pos:start="363:43" pos:end="363:44">++</operator></expr>]</index></name> <operator pos:start="363:47" pos:end="363:47">=</operator> <literal type="number" pos:start="363:49" pos:end="363:49">0</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="367:7" pos:end="373:5">else <block pos:start="367:12" pos:end="373:5">{<block_content pos:start="369:9" pos:end="371:31">

        <expr_stmt pos:start="369:9" pos:end="369:37"><expr pos:start="369:9" pos:end="369:36"><name pos:start="369:9" pos:end="369:16"><name pos:start="369:9" pos:end="369:10">tb</name><operator pos:start="369:11" pos:end="369:12">-&gt;</operator><name pos:start="369:13" pos:end="369:16">size</name></name> <operator pos:start="369:18" pos:end="369:18">=</operator> <name pos:start="369:20" pos:end="369:25"><name pos:start="369:20" pos:end="369:21">dc</name><operator pos:start="369:22" pos:end="369:23">-&gt;</operator><name pos:start="369:24" pos:end="369:25">pc</name></name> <operator pos:start="369:27" pos:end="369:27">-</operator> <name pos:start="369:29" pos:end="369:36">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:31"><expr pos:start="371:9" pos:end="371:30"><name pos:start="371:9" pos:end="371:18"><name pos:start="371:9" pos:end="371:10">tb</name><operator pos:start="371:11" pos:end="371:12">-&gt;</operator><name pos:start="371:13" pos:end="371:18">icount</name></name> <operator pos:start="371:20" pos:end="371:20">=</operator> <name pos:start="371:22" pos:end="371:30">num_insns</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
