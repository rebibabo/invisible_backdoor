<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18018.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:13"><name pos:start="1:1" pos:end="1:11">M48t59State</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:24">m48t59_init</name><parameter_list pos:start="1:25" pos:end="3:68">(<parameter pos:start="1:26" pos:end="1:37"><decl pos:start="1:26" pos:end="1:37"><type pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:33">qemu_irq</name></type> <name pos:start="1:35" pos:end="1:37">IRQ</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:66"><decl pos:start="1:40" pos:end="1:66"><type pos:start="1:40" pos:end="1:66"><name pos:start="1:40" pos:end="1:57">target_phys_addr_t</name></type> <name pos:start="1:59" pos:end="1:66">mem_base</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:41"><decl pos:start="3:26" pos:end="3:41"><type pos:start="3:26" pos:end="3:41"><name pos:start="3:26" pos:end="3:33">uint32_t</name></type> <name pos:start="3:35" pos:end="3:41">io_base</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:56"><decl pos:start="3:44" pos:end="3:56"><type pos:start="3:44" pos:end="3:56"><name pos:start="3:44" pos:end="3:51">uint16_t</name></type> <name pos:start="3:53" pos:end="3:56">size</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:67"><decl pos:start="3:59" pos:end="3:67"><type pos:start="3:59" pos:end="3:67"><name pos:start="3:59" pos:end="3:61">int</name></type> <name pos:start="3:63" pos:end="3:67">model</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="53:1">{<block_content pos:start="7:5" pos:end="51:17">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">DeviceState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">SysBusDevice</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">M48t59SysBusState</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:24">d</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">M48t59State</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:22">state</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:38"><expr pos:start="17:5" pos:end="17:37"><name pos:start="17:5" pos:end="17:7">dev</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:37"><name pos:start="17:11" pos:end="17:21">qdev_create</name><argument_list pos:start="17:22" pos:end="17:37">(<argument pos:start="17:23" pos:end="17:26"><expr pos:start="17:23" pos:end="17:26"><name pos:start="17:23" pos:end="17:26">NULL</name></expr></argument>, <argument pos:start="17:29" pos:end="17:36"><expr pos:start="17:29" pos:end="17:36"><literal type="string" pos:start="17:29" pos:end="17:36">"m48t59"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:46"><expr pos:start="19:5" pos:end="19:45"><call pos:start="19:5" pos:end="19:45"><name pos:start="19:5" pos:end="19:24">qdev_prop_set_uint32</name><argument_list pos:start="19:25" pos:end="19:45">(<argument pos:start="19:26" pos:end="19:28"><expr pos:start="19:26" pos:end="19:28"><name pos:start="19:26" pos:end="19:28">dev</name></expr></argument>, <argument pos:start="19:31" pos:end="19:37"><expr pos:start="19:31" pos:end="19:37"><literal type="string" pos:start="19:31" pos:end="19:37">"model"</literal></expr></argument>, <argument pos:start="19:40" pos:end="19:44"><expr pos:start="19:40" pos:end="19:44"><name pos:start="19:40" pos:end="19:44">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><call pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:24">qdev_prop_set_uint32</name><argument_list pos:start="21:25" pos:end="21:43">(<argument pos:start="21:26" pos:end="21:28"><expr pos:start="21:26" pos:end="21:28"><name pos:start="21:26" pos:end="21:28">dev</name></expr></argument>, <argument pos:start="21:31" pos:end="21:36"><expr pos:start="21:31" pos:end="21:36"><literal type="string" pos:start="21:31" pos:end="21:36">"size"</literal></expr></argument>, <argument pos:start="21:39" pos:end="21:42"><expr pos:start="21:39" pos:end="21:42"><name pos:start="21:39" pos:end="21:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:50"><expr pos:start="23:5" pos:end="23:49"><call pos:start="23:5" pos:end="23:49"><name pos:start="23:5" pos:end="23:24">qdev_prop_set_uint32</name><argument_list pos:start="23:25" pos:end="23:49">(<argument pos:start="23:26" pos:end="23:28"><expr pos:start="23:26" pos:end="23:28"><name pos:start="23:26" pos:end="23:28">dev</name></expr></argument>, <argument pos:start="23:31" pos:end="23:39"><expr pos:start="23:31" pos:end="23:39"><literal type="string" pos:start="23:31" pos:end="23:39">"io_base"</literal></expr></argument>, <argument pos:start="23:42" pos:end="23:48"><expr pos:start="23:42" pos:end="23:48"><name pos:start="23:42" pos:end="23:48">io_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><call pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:20">qdev_init_nofail</name><argument_list pos:start="25:21" pos:end="25:25">(<argument pos:start="25:22" pos:end="25:24"><expr pos:start="25:22" pos:end="25:24"><name pos:start="25:22" pos:end="25:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:30"><expr pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:5">s</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <call pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:24">sysbus_from_qdev</name><argument_list pos:start="27:25" pos:end="27:29">(<argument pos:start="27:26" pos:end="27:28"><expr pos:start="27:26" pos:end="27:28"><name pos:start="27:26" pos:end="27:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:5">d</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <call pos:start="29:9" pos:end="29:41"><name pos:start="29:9" pos:end="29:19">FROM_SYSBUS</name><argument_list pos:start="29:20" pos:end="29:41">(<argument pos:start="29:21" pos:end="29:37"><expr pos:start="29:21" pos:end="29:37"><name pos:start="29:21" pos:end="29:37">M48t59SysBusState</name></expr></argument>, <argument pos:start="29:40" pos:end="29:40"><expr pos:start="29:40" pos:end="29:40"><name pos:start="29:40" pos:end="29:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:22"><expr pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:9">state</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <operator pos:start="31:13" pos:end="31:13">&amp;</operator><name pos:start="31:14" pos:end="31:21"><name pos:start="31:14" pos:end="31:14">d</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:21">state</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:34"><expr pos:start="33:5" pos:end="33:33"><call pos:start="33:5" pos:end="33:33"><name pos:start="33:5" pos:end="33:22">sysbus_connect_irq</name><argument_list pos:start="33:23" pos:end="33:33">(<argument pos:start="33:24" pos:end="33:24"><expr pos:start="33:24" pos:end="33:24"><name pos:start="33:24" pos:end="33:24">s</name></expr></argument>, <argument pos:start="33:27" pos:end="33:27"><expr pos:start="33:27" pos:end="33:27"><literal type="number" pos:start="33:27" pos:end="33:27">0</literal></expr></argument>, <argument pos:start="33:30" pos:end="33:32"><expr pos:start="33:30" pos:end="33:32"><name pos:start="33:30" pos:end="33:32">IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:21">(<expr pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:15">io_base</name> <operator pos:start="35:17" pos:end="35:18">!=</operator> <literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>)</condition> <block pos:start="35:23" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:69">

        <expr_stmt pos:start="37:9" pos:end="37:67"><expr pos:start="37:9" pos:end="37:66"><call pos:start="37:9" pos:end="37:66"><name pos:start="37:9" pos:end="37:28">register_ioport_read</name><argument_list pos:start="37:29" pos:end="37:66">(<argument pos:start="37:30" pos:end="37:36"><expr pos:start="37:30" pos:end="37:36"><name pos:start="37:30" pos:end="37:36">io_base</name></expr></argument>, <argument pos:start="37:39" pos:end="37:42"><expr pos:start="37:39" pos:end="37:42"><literal type="number" pos:start="37:39" pos:end="37:42">0x04</literal></expr></argument>, <argument pos:start="37:45" pos:end="37:45"><expr pos:start="37:45" pos:end="37:45"><literal type="number" pos:start="37:45" pos:end="37:45">1</literal></expr></argument>, <argument pos:start="37:48" pos:end="37:58"><expr pos:start="37:48" pos:end="37:58"><name pos:start="37:48" pos:end="37:58">NVRAM_readb</name></expr></argument>, <argument pos:start="37:61" pos:end="37:65"><expr pos:start="37:61" pos:end="37:65"><name pos:start="37:61" pos:end="37:65">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:69"><expr pos:start="39:9" pos:end="39:68"><call pos:start="39:9" pos:end="39:68"><name pos:start="39:9" pos:end="39:29">register_ioport_write</name><argument_list pos:start="39:30" pos:end="39:68">(<argument pos:start="39:31" pos:end="39:37"><expr pos:start="39:31" pos:end="39:37"><name pos:start="39:31" pos:end="39:37">io_base</name></expr></argument>, <argument pos:start="39:40" pos:end="39:43"><expr pos:start="39:40" pos:end="39:43"><literal type="number" pos:start="39:40" pos:end="39:43">0x04</literal></expr></argument>, <argument pos:start="39:46" pos:end="39:46"><expr pos:start="39:46" pos:end="39:46"><literal type="number" pos:start="39:46" pos:end="39:46">1</literal></expr></argument>, <argument pos:start="39:49" pos:end="39:60"><expr pos:start="39:49" pos:end="39:60"><name pos:start="39:49" pos:end="39:60">NVRAM_writeb</name></expr></argument>, <argument pos:start="39:63" pos:end="39:67"><expr pos:start="39:63" pos:end="39:67"><name pos:start="39:63" pos:end="39:67">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:22">(<expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:16">mem_base</name> <operator pos:start="43:18" pos:end="43:19">!=</operator> <literal type="number" pos:start="43:21" pos:end="43:21">0</literal></expr>)</condition> <block pos:start="43:24" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:40">

        <expr_stmt pos:start="45:9" pos:end="45:40"><expr pos:start="45:9" pos:end="45:39"><call pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:23">sysbus_mmio_map</name><argument_list pos:start="45:24" pos:end="45:39">(<argument pos:start="45:25" pos:end="45:25"><expr pos:start="45:25" pos:end="45:25"><name pos:start="45:25" pos:end="45:25">s</name></expr></argument>, <argument pos:start="45:28" pos:end="45:28"><expr pos:start="45:28" pos:end="45:28"><literal type="number" pos:start="45:28" pos:end="45:28">0</literal></expr></argument>, <argument pos:start="45:31" pos:end="45:38"><expr pos:start="45:31" pos:end="45:38"><name pos:start="45:31" pos:end="45:38">mem_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="51:5" pos:end="51:17">return <expr pos:start="51:12" pos:end="51:16"><name pos:start="51:12" pos:end="51:16">state</name></expr>;</return>

</block_content>}</block></function>
</unit>
