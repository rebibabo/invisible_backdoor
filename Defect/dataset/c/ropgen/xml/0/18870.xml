<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18870.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:40">spapr_phb_vfio_eeh_set_option</name><parameter_list pos:start="1:41" pos:end="3:71">(<parameter pos:start="1:42" pos:end="1:60"><decl pos:start="1:42" pos:end="1:60"><type pos:start="1:42" pos:end="1:60"><name pos:start="1:42" pos:end="1:54">sPAPRPHBState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">sphb</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:58"><decl pos:start="3:42" pos:end="3:58"><type pos:start="3:42" pos:end="3:58"><name pos:start="3:42" pos:end="3:49">unsigned</name> <name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:58">addr</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:70"><decl pos:start="3:61" pos:end="3:70"><type pos:start="3:61" pos:end="3:70"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:70">option</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:28">

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">sPAPRPHBVFIOState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">svphb</name> <init pos:start="7:30" pos:end="7:63">= <expr pos:start="7:32" pos:end="7:63"><call pos:start="7:32" pos:end="7:63"><name pos:start="7:32" pos:end="7:57">SPAPR_PCI_VFIO_HOST_BRIDGE</name><argument_list pos:start="7:58" pos:end="7:63">(<argument pos:start="7:59" pos:end="7:62"><expr pos:start="7:59" pos:end="7:62"><name pos:start="7:59" pos:end="7:62">sphb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:55"><decl pos:start="9:5" pos:end="9:54"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:25">vfio_eeh_pe_op</name></name></type> <name pos:start="9:27" pos:end="9:28">op</name> <init pos:start="9:30" pos:end="9:54">= <expr pos:start="9:32" pos:end="9:54"><block pos:start="9:32" pos:end="9:54">{ <expr pos:start="9:34" pos:end="9:52"><operator pos:start="9:34" pos:end="9:34">.</operator><name pos:start="9:35" pos:end="9:39">argsz</name> <operator pos:start="9:41" pos:end="9:41">=</operator> sizeof<operator pos:start="9:49" pos:end="9:49">(</operator><name pos:start="9:50" pos:end="9:51">op</name><operator pos:start="9:52" pos:end="9:52">)</operator></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <switch pos:start="15:5" pos:end="77:5">switch <condition pos:start="15:12" pos:end="15:19">(<expr pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:18">option</name></expr>)</condition> <block pos:start="15:21" pos:end="77:5">{<block_content pos:start="17:5" pos:end="75:36">

    <case pos:start="17:5" pos:end="17:26">case <expr pos:start="17:10" pos:end="17:25"><name pos:start="17:10" pos:end="17:25">RTAS_EEH_DISABLE</name></expr>:</case>

        <expr_stmt pos:start="19:9" pos:end="19:36"><expr pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:13"><name pos:start="19:9" pos:end="19:10">op</name><operator pos:start="19:11" pos:end="19:11">.</operator><name pos:start="19:12" pos:end="19:13">op</name></name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:35">VFIO_EEH_PE_DISABLE</name></expr>;</expr_stmt>

        <break pos:start="21:9" pos:end="21:14">break;</break>

    <case pos:start="23:5" pos:end="23:25">case <expr pos:start="23:10" pos:end="23:24"><name pos:start="23:10" pos:end="23:24">RTAS_EEH_ENABLE</name></expr>:</case> <block pos:start="23:27" pos:end="59:5">{<block_content pos:start="25:9" pos:end="57:14">

        <decl_stmt pos:start="25:9" pos:end="25:26"><decl pos:start="25:9" pos:end="25:25"><type pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:20">PCIHostState</name> <modifier pos:start="25:22" pos:end="25:22">*</modifier></type><name pos:start="25:23" pos:end="25:25">phb</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:24"><decl pos:start="27:9" pos:end="27:23"><type pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:17">PCIDevice</name> <modifier pos:start="27:19" pos:end="27:19">*</modifier></type><name pos:start="27:20" pos:end="27:23">pdev</name></decl>;</decl_stmt>



        <comment type="block" pos:start="31:9" pos:end="39:11">/*

         * The EEH functionality is enabled on basis of PCI device,

         * instead of PE. We need check the validity of the PCI

         * device address.

         */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:36"><expr pos:start="41:9" pos:end="41:35"><name pos:start="41:9" pos:end="41:11">phb</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:35"><name pos:start="41:15" pos:end="41:29">PCI_HOST_BRIDGE</name><argument_list pos:start="41:30" pos:end="41:35">(<argument pos:start="41:31" pos:end="41:34"><expr pos:start="41:31" pos:end="41:34"><name pos:start="41:31" pos:end="41:34">sphb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="45:72"><expr pos:start="43:9" pos:end="45:71"><name pos:start="43:9" pos:end="43:12">pdev</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="45:71"><name pos:start="43:16" pos:end="43:30">pci_find_device</name><argument_list pos:start="43:31" pos:end="45:71">(<argument pos:start="43:32" pos:end="43:39"><expr pos:start="43:32" pos:end="43:39"><name pos:start="43:32" pos:end="43:39"><name pos:start="43:32" pos:end="43:34">phb</name><operator pos:start="43:35" pos:end="43:36">-&gt;</operator><name pos:start="43:37" pos:end="43:39">bus</name></name></expr></argument>,

                               <argument pos:start="45:32" pos:end="45:50"><expr pos:start="45:32" pos:end="45:50"><operator pos:start="45:32" pos:end="45:32">(</operator><name pos:start="45:33" pos:end="45:36">addr</name> <operator pos:start="45:38" pos:end="45:39">&gt;&gt;</operator> <literal type="number" pos:start="45:41" pos:end="45:42">16</literal><operator pos:start="45:43" pos:end="45:43">)</operator> <operator pos:start="45:45" pos:end="45:45">&amp;</operator> <literal type="number" pos:start="45:47" pos:end="45:50">0xFF</literal></expr></argument>, <argument pos:start="45:53" pos:end="45:70"><expr pos:start="45:53" pos:end="45:70"><operator pos:start="45:53" pos:end="45:53">(</operator><name pos:start="45:54" pos:end="45:57">addr</name> <operator pos:start="45:59" pos:end="45:60">&gt;&gt;</operator> <literal type="number" pos:start="45:62" pos:end="45:62">8</literal><operator pos:start="45:63" pos:end="45:63">)</operator> <operator pos:start="45:65" pos:end="45:65">&amp;</operator> <literal type="number" pos:start="45:67" pos:end="45:70">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:18">(<expr pos:start="47:13" pos:end="47:17"><operator pos:start="47:13" pos:end="47:13">!</operator><name pos:start="47:14" pos:end="47:17">pdev</name></expr>)</condition> <block pos:start="47:20" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:40">

            <return pos:start="49:13" pos:end="49:40">return <expr pos:start="49:20" pos:end="49:39"><name pos:start="49:20" pos:end="49:39">RTAS_OUT_PARAM_ERROR</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:35"><expr pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:13"><name pos:start="55:9" pos:end="55:10">op</name><operator pos:start="55:11" pos:end="55:11">.</operator><name pos:start="55:12" pos:end="55:13">op</name></name> <operator pos:start="55:15" pos:end="55:15">=</operator> <name pos:start="55:17" pos:end="55:34">VFIO_EEH_PE_ENABLE</name></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    </block_content>}</block>

    <case pos:start="61:5" pos:end="61:26">case <expr pos:start="61:10" pos:end="61:25"><name pos:start="61:10" pos:end="61:25">RTAS_EEH_THAW_IO</name></expr>:</case>

        <expr_stmt pos:start="63:9" pos:end="63:40"><expr pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:13"><name pos:start="63:9" pos:end="63:10">op</name><operator pos:start="63:11" pos:end="63:11">.</operator><name pos:start="63:12" pos:end="63:13">op</name></name> <operator pos:start="63:15" pos:end="63:15">=</operator> <name pos:start="63:17" pos:end="63:39">VFIO_EEH_PE_UNFREEZE_IO</name></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:27">case <expr pos:start="67:10" pos:end="67:26"><name pos:start="67:10" pos:end="67:26">RTAS_EEH_THAW_DMA</name></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:41"><expr pos:start="69:9" pos:end="69:40"><name pos:start="69:9" pos:end="69:13"><name pos:start="69:9" pos:end="69:10">op</name><operator pos:start="69:11" pos:end="69:11">.</operator><name pos:start="69:12" pos:end="69:13">op</name></name> <operator pos:start="69:15" pos:end="69:15">=</operator> <name pos:start="69:17" pos:end="69:40">VFIO_EEH_PE_UNFREEZE_DMA</name></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <default pos:start="73:5" pos:end="73:12">default:</default>

        <return pos:start="75:9" pos:end="75:36">return <expr pos:start="75:16" pos:end="75:35"><name pos:start="75:16" pos:end="75:35">RTAS_OUT_PARAM_ERROR</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="81:5" pos:end="83:52"><expr pos:start="81:5" pos:end="83:51"><name pos:start="81:5" pos:end="81:7">ret</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="83:51"><name pos:start="81:11" pos:end="81:30">vfio_container_ioctl</name><argument_list pos:start="81:31" pos:end="83:51">(<argument pos:start="81:32" pos:end="81:51"><expr pos:start="81:32" pos:end="81:51"><operator pos:start="81:32" pos:end="81:32">&amp;</operator><name pos:start="81:33" pos:end="81:51"><name pos:start="81:33" pos:end="81:37">svphb</name><operator pos:start="81:38" pos:end="81:39">-&gt;</operator><name pos:start="81:40" pos:end="81:42">phb</name><operator pos:start="81:43" pos:end="81:43">.</operator><name pos:start="81:44" pos:end="81:51">iommu_as</name></name></expr></argument>, <argument pos:start="81:54" pos:end="81:72"><expr pos:start="81:54" pos:end="81:72"><name pos:start="81:54" pos:end="81:72"><name pos:start="81:54" pos:end="81:58">svphb</name><operator pos:start="81:59" pos:end="81:60">-&gt;</operator><name pos:start="81:61" pos:end="81:72">iommugroupid</name></name></expr></argument>,

                               <argument pos:start="83:32" pos:end="83:45"><expr pos:start="83:32" pos:end="83:45"><name pos:start="83:32" pos:end="83:45">VFIO_EEH_PE_OP</name></expr></argument>, <argument pos:start="83:48" pos:end="83:50"><expr pos:start="83:48" pos:end="83:50"><operator pos:start="83:48" pos:end="83:48">&amp;</operator><name pos:start="83:49" pos:end="83:50">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:16">(<expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">&lt;</operator> <literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>)</condition> <block pos:start="85:18" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:33">

        <return pos:start="87:9" pos:end="87:33">return <expr pos:start="87:16" pos:end="87:32"><name pos:start="87:16" pos:end="87:32">RTAS_OUT_HW_ERROR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="93:5" pos:end="93:28">return <expr pos:start="93:12" pos:end="93:27"><name pos:start="93:12" pos:end="93:27">RTAS_OUT_SUCCESS</name></expr>;</return>

</block_content>}</block></function>
</unit>
