<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25110.c" pos:tabs="8"><function pos:start="1:1" pos:end="555:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">switch_tss</name><parameter_list pos:start="1:23" pos:end="5:41">(<parameter pos:start="1:24" pos:end="1:39"><decl pos:start="1:24" pos:end="1:39"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:34">CPUX86State</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">env</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:57">tss_selector</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:34"><decl pos:start="3:24" pos:end="3:34"><type pos:start="3:24" pos:end="3:34"><name pos:start="3:24" pos:end="3:31">uint32_t</name></type> <name pos:start="3:33" pos:end="3:34">e1</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:47"><decl pos:start="3:37" pos:end="3:47"><type pos:start="3:37" pos:end="3:47"><name pos:start="3:37" pos:end="3:44">uint32_t</name></type> <name pos:start="3:46" pos:end="3:47">e2</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:59"><decl pos:start="3:50" pos:end="3:59"><type pos:start="3:50" pos:end="3:59"><name pos:start="3:50" pos:end="3:52">int</name></type> <name pos:start="3:54" pos:end="3:59">source</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:40"><decl pos:start="5:24" pos:end="5:40"><type pos:start="5:24" pos:end="5:40"><name pos:start="5:24" pos:end="5:31">uint32_t</name></type> <name pos:start="5:33" pos:end="5:40">next_eip</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="555:1">{<block_content pos:start="9:5" pos:end="554:0">

    <decl_stmt pos:start="9:5" pos:end="9:79"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">tss_limit</name></decl>, <decl pos:start="9:20" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:32">tss_limit_max</name></decl>, <decl pos:start="9:35" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:35" pos:end="9:38">type</name></decl>, <decl pos:start="9:41" pos:end="9:57"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:41" pos:end="9:57">old_tss_limit_max</name></decl>, <decl pos:start="9:60" pos:end="9:67"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:60" pos:end="9:67">old_type</name></decl>, <decl pos:start="9:70" pos:end="9:71"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:70" pos:end="9:71">v1</name></decl>, <decl pos:start="9:74" pos:end="9:75"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:74" pos:end="9:75">v2</name></decl>, <decl pos:start="9:78" pos:end="9:78"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:78" pos:end="9:78">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:25">tss_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:24"><name pos:start="13:14" pos:end="13:21">new_regs</name><index pos:start="13:22" pos:end="13:24">[<expr pos:start="13:23" pos:end="13:23"><literal type="number" pos:start="13:23" pos:end="13:23">8</literal></expr>]</index></name></decl>, <decl pos:start="13:27" pos:end="13:37"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:27" pos:end="13:37"><name pos:start="13:27" pos:end="13:34">new_segs</name><index pos:start="13:35" pos:end="13:37">[<expr pos:start="13:36" pos:end="13:36"><literal type="number" pos:start="13:36" pos:end="13:36">6</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:61"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:23">new_eflags</name></decl>, <decl pos:start="15:26" pos:end="15:32"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:26" pos:end="15:32">new_eip</name></decl>, <decl pos:start="15:35" pos:end="15:41"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:35" pos:end="15:41">new_cr3</name></decl>, <decl pos:start="15:44" pos:end="15:50"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:44" pos:end="15:50">new_ldt</name></decl>, <decl pos:start="15:53" pos:end="15:60"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:53" pos:end="15:60">new_trap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:23">old_eflags</name></decl>, <decl pos:start="17:26" pos:end="17:36"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:26" pos:end="17:36">eflags_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">SegmentCache</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:20">dt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:16">target_ulong</name></type> <name pos:start="23:18" pos:end="23:20">ptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:41"><expr pos:start="27:5" pos:end="27:40"><name pos:start="27:5" pos:end="27:8">type</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <operator pos:start="27:12" pos:end="27:12">(</operator><name pos:start="27:13" pos:end="27:14">e2</name> <operator pos:start="27:16" pos:end="27:17">&gt;&gt;</operator> <name pos:start="27:19" pos:end="27:33">DESC_TYPE_SHIFT</name><operator pos:start="27:34" pos:end="27:34">)</operator> <operator pos:start="27:36" pos:end="27:36">&amp;</operator> <literal type="number" pos:start="27:38" pos:end="27:40">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="31:22"><expr pos:start="29:5" pos:end="31:21"><call pos:start="29:5" pos:end="31:21"><name pos:start="29:5" pos:end="29:13">LOG_PCALL</name><argument_list pos:start="29:14" pos:end="31:21">(<argument pos:start="29:15" pos:end="29:55"><expr pos:start="29:15" pos:end="29:55"><literal type="string" pos:start="29:15" pos:end="29:55">"switch_tss: sel=0x%04x type=%d src=%d\n"</literal></expr></argument>, <argument pos:start="29:58" pos:end="29:69"><expr pos:start="29:58" pos:end="29:69"><name pos:start="29:58" pos:end="29:69">tss_selector</name></expr></argument>, <argument pos:start="29:72" pos:end="29:75"><expr pos:start="29:72" pos:end="29:75"><name pos:start="29:72" pos:end="29:75">type</name></expr></argument>,

              <argument pos:start="31:15" pos:end="31:20"><expr pos:start="31:15" pos:end="31:20"><name pos:start="31:15" pos:end="31:20">source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:62">/* if task gate, we read the TSS segment and we load it */</comment>

    <if_stmt pos:start="37:5" pos:end="73:5"><if pos:start="37:5" pos:end="73:5">if <condition pos:start="37:8" pos:end="37:18">(<expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:12">type</name> <operator pos:start="37:14" pos:end="37:15">==</operator> <literal type="number" pos:start="37:17" pos:end="37:17">5</literal></expr>)</condition> <block pos:start="37:20" pos:end="73:5">{<block_content pos:start="39:9" pos:end="71:9">

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:32">(<expr pos:start="39:13" pos:end="39:31"><operator pos:start="39:13" pos:end="39:13">!</operator><operator pos:start="39:14" pos:end="39:14">(</operator><name pos:start="39:15" pos:end="39:16">e2</name> <operator pos:start="39:18" pos:end="39:18">&amp;</operator> <name pos:start="39:20" pos:end="39:30">DESC_P_MASK</name><operator pos:start="39:31" pos:end="39:31">)</operator></expr>)</condition> <block pos:start="39:34" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:74">

            <expr_stmt pos:start="41:13" pos:end="41:74"><expr pos:start="41:13" pos:end="41:73"><call pos:start="41:13" pos:end="41:73"><name pos:start="41:13" pos:end="41:31">raise_exception_err</name><argument_list pos:start="41:32" pos:end="41:73">(<argument pos:start="41:33" pos:end="41:35"><expr pos:start="41:33" pos:end="41:35"><name pos:start="41:33" pos:end="41:35">env</name></expr></argument>, <argument pos:start="41:38" pos:end="41:49"><expr pos:start="41:38" pos:end="41:49"><name pos:start="41:38" pos:end="41:49">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="41:52" pos:end="41:72"><expr pos:start="41:52" pos:end="41:72"><name pos:start="41:52" pos:end="41:63">tss_selector</name> <operator pos:start="41:65" pos:end="41:65">&amp;</operator> <literal type="number" pos:start="41:67" pos:end="41:72">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:32"><expr pos:start="45:9" pos:end="45:31"><name pos:start="45:9" pos:end="45:20">tss_selector</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <name pos:start="45:24" pos:end="45:25">e1</name> <operator pos:start="45:27" pos:end="45:28">&gt;&gt;</operator> <literal type="number" pos:start="45:30" pos:end="45:31">16</literal></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:29">(<expr pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:24">tss_selector</name> <operator pos:start="47:26" pos:end="47:26">&amp;</operator> <literal type="number" pos:start="47:28" pos:end="47:28">4</literal></expr>)</condition> <block pos:start="47:31" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:72">

            <expr_stmt pos:start="49:13" pos:end="49:72"><expr pos:start="49:13" pos:end="49:71"><call pos:start="49:13" pos:end="49:71"><name pos:start="49:13" pos:end="49:31">raise_exception_err</name><argument_list pos:start="49:32" pos:end="49:71">(<argument pos:start="49:33" pos:end="49:35"><expr pos:start="49:33" pos:end="49:35"><name pos:start="49:33" pos:end="49:35">env</name></expr></argument>, <argument pos:start="49:38" pos:end="49:47"><expr pos:start="49:38" pos:end="49:47"><name pos:start="49:38" pos:end="49:47">EXCP0A_TSS</name></expr></argument>, <argument pos:start="49:50" pos:end="49:70"><expr pos:start="49:50" pos:end="49:70"><name pos:start="49:50" pos:end="49:61">tss_selector</name> <operator pos:start="49:63" pos:end="49:63">&amp;</operator> <literal type="number" pos:start="49:65" pos:end="49:70">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:59">(<expr pos:start="53:13" pos:end="53:58"><call pos:start="53:13" pos:end="53:53"><name pos:start="53:13" pos:end="53:24">load_segment</name><argument_list pos:start="53:25" pos:end="53:53">(<argument pos:start="53:26" pos:end="53:28"><expr pos:start="53:26" pos:end="53:28"><name pos:start="53:26" pos:end="53:28">env</name></expr></argument>, <argument pos:start="53:31" pos:end="53:33"><expr pos:start="53:31" pos:end="53:33"><operator pos:start="53:31" pos:end="53:31">&amp;</operator><name pos:start="53:32" pos:end="53:33">e1</name></expr></argument>, <argument pos:start="53:36" pos:end="53:38"><expr pos:start="53:36" pos:end="53:38"><operator pos:start="53:36" pos:end="53:36">&amp;</operator><name pos:start="53:37" pos:end="53:38">e2</name></expr></argument>, <argument pos:start="53:41" pos:end="53:52"><expr pos:start="53:41" pos:end="53:52"><name pos:start="53:41" pos:end="53:52">tss_selector</name></expr></argument>)</argument_list></call> <operator pos:start="53:55" pos:end="53:56">!=</operator> <literal type="number" pos:start="53:58" pos:end="53:58">0</literal></expr>)</condition> <block pos:start="53:61" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:72">

            <expr_stmt pos:start="55:13" pos:end="55:72"><expr pos:start="55:13" pos:end="55:71"><call pos:start="55:13" pos:end="55:71"><name pos:start="55:13" pos:end="55:31">raise_exception_err</name><argument_list pos:start="55:32" pos:end="55:71">(<argument pos:start="55:33" pos:end="55:35"><expr pos:start="55:33" pos:end="55:35"><name pos:start="55:33" pos:end="55:35">env</name></expr></argument>, <argument pos:start="55:38" pos:end="55:47"><expr pos:start="55:38" pos:end="55:47"><name pos:start="55:38" pos:end="55:47">EXCP0D_GPF</name></expr></argument>, <argument pos:start="55:50" pos:end="55:70"><expr pos:start="55:50" pos:end="55:70"><name pos:start="55:50" pos:end="55:61">tss_selector</name> <operator pos:start="55:63" pos:end="55:63">&amp;</operator> <literal type="number" pos:start="55:65" pos:end="55:70">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:29">(<expr pos:start="59:13" pos:end="59:28"><name pos:start="59:13" pos:end="59:14">e2</name> <operator pos:start="59:16" pos:end="59:16">&amp;</operator> <name pos:start="59:18" pos:end="59:28">DESC_S_MASK</name></expr>)</condition> <block pos:start="59:31" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:72">

            <expr_stmt pos:start="61:13" pos:end="61:72"><expr pos:start="61:13" pos:end="61:71"><call pos:start="61:13" pos:end="61:71"><name pos:start="61:13" pos:end="61:31">raise_exception_err</name><argument_list pos:start="61:32" pos:end="61:71">(<argument pos:start="61:33" pos:end="61:35"><expr pos:start="61:33" pos:end="61:35"><name pos:start="61:33" pos:end="61:35">env</name></expr></argument>, <argument pos:start="61:38" pos:end="61:47"><expr pos:start="61:38" pos:end="61:47"><name pos:start="61:38" pos:end="61:47">EXCP0D_GPF</name></expr></argument>, <argument pos:start="61:50" pos:end="61:70"><expr pos:start="61:50" pos:end="61:70"><name pos:start="61:50" pos:end="61:61">tss_selector</name> <operator pos:start="61:63" pos:end="61:63">&amp;</operator> <literal type="number" pos:start="61:65" pos:end="61:70">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:45"><expr pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:12">type</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <operator pos:start="65:16" pos:end="65:16">(</operator><name pos:start="65:17" pos:end="65:18">e2</name> <operator pos:start="65:20" pos:end="65:21">&gt;&gt;</operator> <name pos:start="65:23" pos:end="65:37">DESC_TYPE_SHIFT</name><operator pos:start="65:38" pos:end="65:38">)</operator> <operator pos:start="65:40" pos:end="65:40">&amp;</operator> <literal type="number" pos:start="65:42" pos:end="65:44">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:28">(<expr pos:start="67:13" pos:end="67:27"><operator pos:start="67:13" pos:end="67:13">(</operator><name pos:start="67:14" pos:end="67:17">type</name> <operator pos:start="67:19" pos:end="67:19">&amp;</operator> <literal type="number" pos:start="67:21" pos:end="67:21">7</literal><operator pos:start="67:22" pos:end="67:22">)</operator> <operator pos:start="67:24" pos:end="67:25">!=</operator> <literal type="number" pos:start="67:27" pos:end="67:27">1</literal></expr>)</condition> <block pos:start="67:30" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:72">

            <expr_stmt pos:start="69:13" pos:end="69:72"><expr pos:start="69:13" pos:end="69:71"><call pos:start="69:13" pos:end="69:71"><name pos:start="69:13" pos:end="69:31">raise_exception_err</name><argument_list pos:start="69:32" pos:end="69:71">(<argument pos:start="69:33" pos:end="69:35"><expr pos:start="69:33" pos:end="69:35"><name pos:start="69:33" pos:end="69:35">env</name></expr></argument>, <argument pos:start="69:38" pos:end="69:47"><expr pos:start="69:38" pos:end="69:47"><name pos:start="69:38" pos:end="69:47">EXCP0D_GPF</name></expr></argument>, <argument pos:start="69:50" pos:end="69:70"><expr pos:start="69:50" pos:end="69:70"><name pos:start="69:50" pos:end="69:61">tss_selector</name> <operator pos:start="69:63" pos:end="69:63">&amp;</operator> <literal type="number" pos:start="69:65" pos:end="69:70">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:28">(<expr pos:start="77:9" pos:end="77:27"><operator pos:start="77:9" pos:end="77:9">!</operator><operator pos:start="77:10" pos:end="77:10">(</operator><name pos:start="77:11" pos:end="77:12">e2</name> <operator pos:start="77:14" pos:end="77:14">&amp;</operator> <name pos:start="77:16" pos:end="77:26">DESC_P_MASK</name><operator pos:start="77:27" pos:end="77:27">)</operator></expr>)</condition> <block pos:start="77:30" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:70">

        <expr_stmt pos:start="79:9" pos:end="79:70"><expr pos:start="79:9" pos:end="79:69"><call pos:start="79:9" pos:end="79:69"><name pos:start="79:9" pos:end="79:27">raise_exception_err</name><argument_list pos:start="79:28" pos:end="79:69">(<argument pos:start="79:29" pos:end="79:31"><expr pos:start="79:29" pos:end="79:31"><name pos:start="79:29" pos:end="79:31">env</name></expr></argument>, <argument pos:start="79:34" pos:end="79:45"><expr pos:start="79:34" pos:end="79:45"><name pos:start="79:34" pos:end="79:45">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="79:48" pos:end="79:68"><expr pos:start="79:48" pos:end="79:68"><name pos:start="79:48" pos:end="79:59">tss_selector</name> <operator pos:start="79:61" pos:end="79:61">&amp;</operator> <literal type="number" pos:start="79:63" pos:end="79:68">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:17">(<expr pos:start="85:9" pos:end="85:16"><name pos:start="85:9" pos:end="85:12">type</name> <operator pos:start="85:14" pos:end="85:14">&amp;</operator> <literal type="number" pos:start="85:16" pos:end="85:16">8</literal></expr>)</condition> <block pos:start="85:19" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:28">

        <expr_stmt pos:start="87:9" pos:end="87:28"><expr pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:21">tss_limit_max</name> <operator pos:start="87:23" pos:end="87:23">=</operator> <literal type="number" pos:start="87:25" pos:end="87:27">103</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="93:5">else <block pos:start="89:12" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:27">

        <expr_stmt pos:start="91:9" pos:end="91:27"><expr pos:start="91:9" pos:end="91:26"><name pos:start="91:9" pos:end="91:21">tss_limit_max</name> <operator pos:start="91:23" pos:end="91:23">=</operator> <literal type="number" pos:start="91:25" pos:end="91:26">43</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:38"><expr pos:start="95:5" pos:end="95:37"><name pos:start="95:5" pos:end="95:13">tss_limit</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <call pos:start="95:17" pos:end="95:37"><name pos:start="95:17" pos:end="95:29">get_seg_limit</name><argument_list pos:start="95:30" pos:end="95:37">(<argument pos:start="95:31" pos:end="95:32"><expr pos:start="95:31" pos:end="95:32"><name pos:start="95:31" pos:end="95:32">e1</name></expr></argument>, <argument pos:start="95:35" pos:end="95:36"><expr pos:start="95:35" pos:end="95:36"><name pos:start="95:35" pos:end="95:36">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:36"><expr pos:start="97:5" pos:end="97:35"><name pos:start="97:5" pos:end="97:12">tss_base</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <call pos:start="97:16" pos:end="97:35"><name pos:start="97:16" pos:end="97:27">get_seg_base</name><argument_list pos:start="97:28" pos:end="97:35">(<argument pos:start="97:29" pos:end="97:30"><expr pos:start="97:29" pos:end="97:30"><name pos:start="97:29" pos:end="97:30">e1</name></expr></argument>, <argument pos:start="97:33" pos:end="97:34"><expr pos:start="97:33" pos:end="97:34"><name pos:start="97:33" pos:end="97:34">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="101:34">(<expr pos:start="99:9" pos:end="101:33"><operator pos:start="99:9" pos:end="99:9">(</operator><name pos:start="99:10" pos:end="99:21">tss_selector</name> <operator pos:start="99:23" pos:end="99:23">&amp;</operator> <literal type="number" pos:start="99:25" pos:end="99:25">4</literal><operator pos:start="99:26" pos:end="99:26">)</operator> <operator pos:start="99:28" pos:end="99:29">!=</operator> <literal type="number" pos:start="99:31" pos:end="99:31">0</literal> <operator pos:start="99:33" pos:end="99:34">||</operator>

        <name pos:start="101:9" pos:end="101:17">tss_limit</name> <operator pos:start="101:19" pos:end="101:19">&lt;</operator> <name pos:start="101:21" pos:end="101:33">tss_limit_max</name></expr>)</condition> <block pos:start="101:36" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:68">

        <expr_stmt pos:start="103:9" pos:end="103:68"><expr pos:start="103:9" pos:end="103:67"><call pos:start="103:9" pos:end="103:67"><name pos:start="103:9" pos:end="103:27">raise_exception_err</name><argument_list pos:start="103:28" pos:end="103:67">(<argument pos:start="103:29" pos:end="103:31"><expr pos:start="103:29" pos:end="103:31"><name pos:start="103:29" pos:end="103:31">env</name></expr></argument>, <argument pos:start="103:34" pos:end="103:43"><expr pos:start="103:34" pos:end="103:43"><name pos:start="103:34" pos:end="103:43">EXCP0A_TSS</name></expr></argument>, <argument pos:start="103:46" pos:end="103:66"><expr pos:start="103:46" pos:end="103:66"><name pos:start="103:46" pos:end="103:57">tss_selector</name> <operator pos:start="103:59" pos:end="103:59">&amp;</operator> <literal type="number" pos:start="103:61" pos:end="103:66">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:56"><expr pos:start="107:5" pos:end="107:55"><name pos:start="107:5" pos:end="107:12">old_type</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <operator pos:start="107:16" pos:end="107:16">(</operator><name pos:start="107:17" pos:end="107:29"><name pos:start="107:17" pos:end="107:19">env</name><operator pos:start="107:20" pos:end="107:21">-&gt;</operator><name pos:start="107:22" pos:end="107:23">tr</name><operator pos:start="107:24" pos:end="107:24">.</operator><name pos:start="107:25" pos:end="107:29">flags</name></name> <operator pos:start="107:31" pos:end="107:32">&gt;&gt;</operator> <name pos:start="107:34" pos:end="107:48">DESC_TYPE_SHIFT</name><operator pos:start="107:49" pos:end="107:49">)</operator> <operator pos:start="107:51" pos:end="107:51">&amp;</operator> <literal type="number" pos:start="107:53" pos:end="107:55">0xf</literal></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="117:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:21">(<expr pos:start="109:9" pos:end="109:20"><name pos:start="109:9" pos:end="109:16">old_type</name> <operator pos:start="109:18" pos:end="109:18">&amp;</operator> <literal type="number" pos:start="109:20" pos:end="109:20">8</literal></expr>)</condition> <block pos:start="109:23" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:32">

        <expr_stmt pos:start="111:9" pos:end="111:32"><expr pos:start="111:9" pos:end="111:31"><name pos:start="111:9" pos:end="111:25">old_tss_limit_max</name> <operator pos:start="111:27" pos:end="111:27">=</operator> <literal type="number" pos:start="111:29" pos:end="111:31">103</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="117:5">else <block pos:start="113:12" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:31">

        <expr_stmt pos:start="115:9" pos:end="115:31"><expr pos:start="115:9" pos:end="115:30"><name pos:start="115:9" pos:end="115:25">old_tss_limit_max</name> <operator pos:start="115:27" pos:end="115:27">=</operator> <literal type="number" pos:start="115:29" pos:end="115:30">43</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:49">/* read all the registers from the new TSS */</comment>

    <if_stmt pos:start="123:5" pos:end="181:5"><if pos:start="123:5" pos:end="149:5">if <condition pos:start="123:8" pos:end="123:17">(<expr pos:start="123:9" pos:end="123:16"><name pos:start="123:9" pos:end="123:12">type</name> <operator pos:start="123:14" pos:end="123:14">&amp;</operator> <literal type="number" pos:start="123:16" pos:end="123:16">8</literal></expr>)</condition> <block pos:start="123:19" pos:end="149:5">{<block_content pos:start="127:9" pos:end="147:56">

        <comment type="block" pos:start="125:9" pos:end="125:20">/* 32 bit */</comment>

        <expr_stmt pos:start="127:9" pos:end="127:55"><expr pos:start="127:9" pos:end="127:54"><name pos:start="127:9" pos:end="127:15">new_cr3</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <call pos:start="127:19" pos:end="127:54"><name pos:start="127:19" pos:end="127:32">cpu_ldl_kernel</name><argument_list pos:start="127:33" pos:end="127:54">(<argument pos:start="127:34" pos:end="127:36"><expr pos:start="127:34" pos:end="127:36"><name pos:start="127:34" pos:end="127:36">env</name></expr></argument>, <argument pos:start="127:39" pos:end="127:53"><expr pos:start="127:39" pos:end="127:53"><name pos:start="127:39" pos:end="127:46">tss_base</name> <operator pos:start="127:48" pos:end="127:48">+</operator> <literal type="number" pos:start="127:50" pos:end="127:53">0x1c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:55"><expr pos:start="129:9" pos:end="129:54"><name pos:start="129:9" pos:end="129:15">new_eip</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <call pos:start="129:19" pos:end="129:54"><name pos:start="129:19" pos:end="129:32">cpu_ldl_kernel</name><argument_list pos:start="129:33" pos:end="129:54">(<argument pos:start="129:34" pos:end="129:36"><expr pos:start="129:34" pos:end="129:36"><name pos:start="129:34" pos:end="129:36">env</name></expr></argument>, <argument pos:start="129:39" pos:end="129:53"><expr pos:start="129:39" pos:end="129:53"><name pos:start="129:39" pos:end="129:46">tss_base</name> <operator pos:start="129:48" pos:end="129:48">+</operator> <literal type="number" pos:start="129:50" pos:end="129:53">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:58"><expr pos:start="131:9" pos:end="131:57"><name pos:start="131:9" pos:end="131:18">new_eflags</name> <operator pos:start="131:20" pos:end="131:20">=</operator> <call pos:start="131:22" pos:end="131:57"><name pos:start="131:22" pos:end="131:35">cpu_ldl_kernel</name><argument_list pos:start="131:36" pos:end="131:57">(<argument pos:start="131:37" pos:end="131:39"><expr pos:start="131:37" pos:end="131:39"><name pos:start="131:37" pos:end="131:39">env</name></expr></argument>, <argument pos:start="131:42" pos:end="131:56"><expr pos:start="131:42" pos:end="131:56"><name pos:start="131:42" pos:end="131:49">tss_base</name> <operator pos:start="131:51" pos:end="131:51">+</operator> <literal type="number" pos:start="131:53" pos:end="131:56">0x24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="133:9" pos:end="137:9">for <control pos:start="133:13" pos:end="133:31">(<init pos:start="133:14" pos:end="133:19"><expr pos:start="133:14" pos:end="133:18"><name pos:start="133:14" pos:end="133:14">i</name> <operator pos:start="133:16" pos:end="133:16">=</operator> <literal type="number" pos:start="133:18" pos:end="133:18">0</literal></expr>;</init> <condition pos:start="133:21" pos:end="133:26"><expr pos:start="133:21" pos:end="133:25"><name pos:start="133:21" pos:end="133:21">i</name> <operator pos:start="133:23" pos:end="133:23">&lt;</operator> <literal type="number" pos:start="133:25" pos:end="133:25">8</literal></expr>;</condition> <incr pos:start="133:28" pos:end="133:30"><expr pos:start="133:28" pos:end="133:30"><name pos:start="133:28" pos:end="133:28">i</name><operator pos:start="133:29" pos:end="133:30">++</operator></expr></incr>)</control> <block pos:start="133:33" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:73">

            <expr_stmt pos:start="135:13" pos:end="135:73"><expr pos:start="135:13" pos:end="135:72"><name pos:start="135:13" pos:end="135:23"><name pos:start="135:13" pos:end="135:20">new_regs</name><index pos:start="135:21" pos:end="135:23">[<expr pos:start="135:22" pos:end="135:22"><name pos:start="135:22" pos:end="135:22">i</name></expr>]</index></name> <operator pos:start="135:25" pos:end="135:25">=</operator> <call pos:start="135:27" pos:end="135:72"><name pos:start="135:27" pos:end="135:40">cpu_ldl_kernel</name><argument_list pos:start="135:41" pos:end="135:72">(<argument pos:start="135:42" pos:end="135:44"><expr pos:start="135:42" pos:end="135:44"><name pos:start="135:42" pos:end="135:44">env</name></expr></argument>, <argument pos:start="135:47" pos:end="135:71"><expr pos:start="135:47" pos:end="135:71"><name pos:start="135:47" pos:end="135:54">tss_base</name> <operator pos:start="135:56" pos:end="135:56">+</operator> <operator pos:start="135:58" pos:end="135:58">(</operator><literal type="number" pos:start="135:59" pos:end="135:64">0x28</literal> <operator pos:start="135:64" pos:end="135:64">+</operator> <name pos:start="135:66" pos:end="135:66">i</name> <operator pos:start="135:68" pos:end="135:68">*</operator> <literal type="number" pos:start="135:70" pos:end="135:70">4</literal><operator pos:start="135:71" pos:end="135:71">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="139:9" pos:end="143:9">for <control pos:start="139:13" pos:end="139:31">(<init pos:start="139:14" pos:end="139:19"><expr pos:start="139:14" pos:end="139:18"><name pos:start="139:14" pos:end="139:14">i</name> <operator pos:start="139:16" pos:end="139:16">=</operator> <literal type="number" pos:start="139:18" pos:end="139:18">0</literal></expr>;</init> <condition pos:start="139:21" pos:end="139:26"><expr pos:start="139:21" pos:end="139:25"><name pos:start="139:21" pos:end="139:21">i</name> <operator pos:start="139:23" pos:end="139:23">&lt;</operator> <literal type="number" pos:start="139:25" pos:end="139:25">6</literal></expr>;</condition> <incr pos:start="139:28" pos:end="139:30"><expr pos:start="139:28" pos:end="139:30"><name pos:start="139:28" pos:end="139:28">i</name><operator pos:start="139:29" pos:end="139:30">++</operator></expr></incr>)</control> <block pos:start="139:33" pos:end="143:9">{<block_content pos:start="141:13" pos:end="141:74">

            <expr_stmt pos:start="141:13" pos:end="141:74"><expr pos:start="141:13" pos:end="141:73"><name pos:start="141:13" pos:end="141:23"><name pos:start="141:13" pos:end="141:20">new_segs</name><index pos:start="141:21" pos:end="141:23">[<expr pos:start="141:22" pos:end="141:22"><name pos:start="141:22" pos:end="141:22">i</name></expr>]</index></name> <operator pos:start="141:25" pos:end="141:25">=</operator> <call pos:start="141:27" pos:end="141:73"><name pos:start="141:27" pos:end="141:41">cpu_lduw_kernel</name><argument_list pos:start="141:42" pos:end="141:73">(<argument pos:start="141:43" pos:end="141:45"><expr pos:start="141:43" pos:end="141:45"><name pos:start="141:43" pos:end="141:45">env</name></expr></argument>, <argument pos:start="141:48" pos:end="141:72"><expr pos:start="141:48" pos:end="141:72"><name pos:start="141:48" pos:end="141:55">tss_base</name> <operator pos:start="141:57" pos:end="141:57">+</operator> <operator pos:start="141:59" pos:end="141:59">(</operator><literal type="number" pos:start="141:60" pos:end="141:65">0x48</literal> <operator pos:start="141:65" pos:end="141:65">+</operator> <name pos:start="141:67" pos:end="141:67">i</name> <operator pos:start="141:69" pos:end="141:69">*</operator> <literal type="number" pos:start="141:71" pos:end="141:71">4</literal><operator pos:start="141:72" pos:end="141:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="145:9" pos:end="145:56"><expr pos:start="145:9" pos:end="145:55"><name pos:start="145:9" pos:end="145:15">new_ldt</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <call pos:start="145:19" pos:end="145:55"><name pos:start="145:19" pos:end="145:33">cpu_lduw_kernel</name><argument_list pos:start="145:34" pos:end="145:55">(<argument pos:start="145:35" pos:end="145:37"><expr pos:start="145:35" pos:end="145:37"><name pos:start="145:35" pos:end="145:37">env</name></expr></argument>, <argument pos:start="145:40" pos:end="145:54"><expr pos:start="145:40" pos:end="145:54"><name pos:start="145:40" pos:end="145:47">tss_base</name> <operator pos:start="145:49" pos:end="145:49">+</operator> <literal type="number" pos:start="145:51" pos:end="145:54">0x60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:56"><expr pos:start="147:9" pos:end="147:55"><name pos:start="147:9" pos:end="147:16">new_trap</name> <operator pos:start="147:18" pos:end="147:18">=</operator> <call pos:start="147:20" pos:end="147:55"><name pos:start="147:20" pos:end="147:33">cpu_ldl_kernel</name><argument_list pos:start="147:34" pos:end="147:55">(<argument pos:start="147:35" pos:end="147:37"><expr pos:start="147:35" pos:end="147:37"><name pos:start="147:35" pos:end="147:37">env</name></expr></argument>, <argument pos:start="147:40" pos:end="147:54"><expr pos:start="147:40" pos:end="147:54"><name pos:start="147:40" pos:end="147:47">tss_base</name> <operator pos:start="147:49" pos:end="147:49">+</operator> <literal type="number" pos:start="147:51" pos:end="147:54">0x64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="149:7" pos:end="181:5">else <block pos:start="149:12" pos:end="181:5">{<block_content pos:start="153:9" pos:end="179:21">

        <comment type="block" pos:start="151:9" pos:end="151:20">/* 16 bit */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:20"><expr pos:start="153:9" pos:end="153:19"><name pos:start="153:9" pos:end="153:15">new_cr3</name> <operator pos:start="153:17" pos:end="153:17">=</operator> <literal type="number" pos:start="153:19" pos:end="153:19">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:56"><expr pos:start="155:9" pos:end="155:55"><name pos:start="155:9" pos:end="155:15">new_eip</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="155:55"><name pos:start="155:19" pos:end="155:33">cpu_lduw_kernel</name><argument_list pos:start="155:34" pos:end="155:55">(<argument pos:start="155:35" pos:end="155:37"><expr pos:start="155:35" pos:end="155:37"><name pos:start="155:35" pos:end="155:37">env</name></expr></argument>, <argument pos:start="155:40" pos:end="155:54"><expr pos:start="155:40" pos:end="155:54"><name pos:start="155:40" pos:end="155:47">tss_base</name> <operator pos:start="155:49" pos:end="155:49">+</operator> <literal type="number" pos:start="155:51" pos:end="155:54">0x0e</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:59"><expr pos:start="157:9" pos:end="157:58"><name pos:start="157:9" pos:end="157:18">new_eflags</name> <operator pos:start="157:20" pos:end="157:20">=</operator> <call pos:start="157:22" pos:end="157:58"><name pos:start="157:22" pos:end="157:36">cpu_lduw_kernel</name><argument_list pos:start="157:37" pos:end="157:58">(<argument pos:start="157:38" pos:end="157:40"><expr pos:start="157:38" pos:end="157:40"><name pos:start="157:38" pos:end="157:40">env</name></expr></argument>, <argument pos:start="157:43" pos:end="157:57"><expr pos:start="157:43" pos:end="157:57"><name pos:start="157:43" pos:end="157:50">tss_base</name> <operator pos:start="157:52" pos:end="157:52">+</operator> <literal type="number" pos:start="157:54" pos:end="157:57">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="159:9" pos:end="165:9">for <control pos:start="159:13" pos:end="159:31">(<init pos:start="159:14" pos:end="159:19"><expr pos:start="159:14" pos:end="159:18"><name pos:start="159:14" pos:end="159:14">i</name> <operator pos:start="159:16" pos:end="159:16">=</operator> <literal type="number" pos:start="159:18" pos:end="159:18">0</literal></expr>;</init> <condition pos:start="159:21" pos:end="159:26"><expr pos:start="159:21" pos:end="159:25"><name pos:start="159:21" pos:end="159:21">i</name> <operator pos:start="159:23" pos:end="159:23">&lt;</operator> <literal type="number" pos:start="159:25" pos:end="159:25">8</literal></expr>;</condition> <incr pos:start="159:28" pos:end="159:30"><expr pos:start="159:28" pos:end="159:30"><name pos:start="159:28" pos:end="159:28">i</name><operator pos:start="159:29" pos:end="159:30">++</operator></expr></incr>)</control> <block pos:start="159:33" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:27">

            <expr_stmt pos:start="161:13" pos:end="163:27"><expr pos:start="161:13" pos:end="163:26"><name pos:start="161:13" pos:end="161:23"><name pos:start="161:13" pos:end="161:20">new_regs</name><index pos:start="161:21" pos:end="161:23">[<expr pos:start="161:22" pos:end="161:22"><name pos:start="161:22" pos:end="161:22">i</name></expr>]</index></name> <operator pos:start="161:25" pos:end="161:25">=</operator> <call pos:start="161:27" pos:end="161:73"><name pos:start="161:27" pos:end="161:41">cpu_lduw_kernel</name><argument_list pos:start="161:42" pos:end="161:73">(<argument pos:start="161:43" pos:end="161:45"><expr pos:start="161:43" pos:end="161:45"><name pos:start="161:43" pos:end="161:45">env</name></expr></argument>, <argument pos:start="161:48" pos:end="161:72"><expr pos:start="161:48" pos:end="161:72"><name pos:start="161:48" pos:end="161:55">tss_base</name> <operator pos:start="161:57" pos:end="161:57">+</operator> <operator pos:start="161:59" pos:end="161:59">(</operator><literal type="number" pos:start="161:60" pos:end="161:65">0x12</literal> <operator pos:start="161:65" pos:end="161:65">+</operator> <name pos:start="161:67" pos:end="161:67">i</name> <operator pos:start="161:69" pos:end="161:69">*</operator> <literal type="number" pos:start="161:71" pos:end="161:71">2</literal><operator pos:start="161:72" pos:end="161:72">)</operator></expr></argument>)</argument_list></call> <operator pos:start="161:75" pos:end="161:75">|</operator>

                <literal type="number" pos:start="163:17" pos:end="163:26">0xffff0000</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="167:9" pos:end="171:9">for <control pos:start="167:13" pos:end="167:31">(<init pos:start="167:14" pos:end="167:19"><expr pos:start="167:14" pos:end="167:18"><name pos:start="167:14" pos:end="167:14">i</name> <operator pos:start="167:16" pos:end="167:16">=</operator> <literal type="number" pos:start="167:18" pos:end="167:18">0</literal></expr>;</init> <condition pos:start="167:21" pos:end="167:26"><expr pos:start="167:21" pos:end="167:25"><name pos:start="167:21" pos:end="167:21">i</name> <operator pos:start="167:23" pos:end="167:23">&lt;</operator> <literal type="number" pos:start="167:25" pos:end="167:25">4</literal></expr>;</condition> <incr pos:start="167:28" pos:end="167:30"><expr pos:start="167:28" pos:end="167:30"><name pos:start="167:28" pos:end="167:28">i</name><operator pos:start="167:29" pos:end="167:30">++</operator></expr></incr>)</control> <block pos:start="167:33" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:74">

            <expr_stmt pos:start="169:13" pos:end="169:74"><expr pos:start="169:13" pos:end="169:73"><name pos:start="169:13" pos:end="169:23"><name pos:start="169:13" pos:end="169:20">new_segs</name><index pos:start="169:21" pos:end="169:23">[<expr pos:start="169:22" pos:end="169:22"><name pos:start="169:22" pos:end="169:22">i</name></expr>]</index></name> <operator pos:start="169:25" pos:end="169:25">=</operator> <call pos:start="169:27" pos:end="169:73"><name pos:start="169:27" pos:end="169:41">cpu_lduw_kernel</name><argument_list pos:start="169:42" pos:end="169:73">(<argument pos:start="169:43" pos:end="169:45"><expr pos:start="169:43" pos:end="169:45"><name pos:start="169:43" pos:end="169:45">env</name></expr></argument>, <argument pos:start="169:48" pos:end="169:72"><expr pos:start="169:48" pos:end="169:72"><name pos:start="169:48" pos:end="169:55">tss_base</name> <operator pos:start="169:57" pos:end="169:57">+</operator> <operator pos:start="169:59" pos:end="169:59">(</operator><literal type="number" pos:start="169:60" pos:end="169:65">0x22</literal> <operator pos:start="169:65" pos:end="169:65">+</operator> <name pos:start="169:67" pos:end="169:67">i</name> <operator pos:start="169:69" pos:end="169:69">*</operator> <literal type="number" pos:start="169:71" pos:end="169:71">4</literal><operator pos:start="169:72" pos:end="169:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="173:9" pos:end="173:56"><expr pos:start="173:9" pos:end="173:55"><name pos:start="173:9" pos:end="173:15">new_ldt</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <call pos:start="173:19" pos:end="173:55"><name pos:start="173:19" pos:end="173:33">cpu_lduw_kernel</name><argument_list pos:start="173:34" pos:end="173:55">(<argument pos:start="173:35" pos:end="173:37"><expr pos:start="173:35" pos:end="173:37"><name pos:start="173:35" pos:end="173:37">env</name></expr></argument>, <argument pos:start="173:40" pos:end="173:54"><expr pos:start="173:40" pos:end="173:54"><name pos:start="173:40" pos:end="173:47">tss_base</name> <operator pos:start="173:49" pos:end="173:49">+</operator> <literal type="number" pos:start="173:51" pos:end="173:54">0x2a</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:27"><expr pos:start="175:9" pos:end="175:26"><name pos:start="175:9" pos:end="175:22"><name pos:start="175:9" pos:end="175:16">new_segs</name><index pos:start="175:17" pos:end="175:22">[<expr pos:start="175:18" pos:end="175:21"><name pos:start="175:18" pos:end="175:21">R_FS</name></expr>]</index></name> <operator pos:start="175:24" pos:end="175:24">=</operator> <literal type="number" pos:start="175:26" pos:end="175:26">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:27"><expr pos:start="177:9" pos:end="177:26"><name pos:start="177:9" pos:end="177:22"><name pos:start="177:9" pos:end="177:16">new_segs</name><index pos:start="177:17" pos:end="177:22">[<expr pos:start="177:18" pos:end="177:21"><name pos:start="177:18" pos:end="177:21">R_GS</name></expr>]</index></name> <operator pos:start="177:24" pos:end="177:24">=</operator> <literal type="number" pos:start="177:26" pos:end="177:26">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:21"><expr pos:start="179:9" pos:end="179:20"><name pos:start="179:9" pos:end="179:16">new_trap</name> <operator pos:start="179:18" pos:end="179:18">=</operator> <literal type="number" pos:start="179:20" pos:end="179:20">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="183:5" pos:end="187:67">/* XXX: avoid a compiler warning, see

     http://support.amd.com/us/Processor_TechDocs/24593.pdf

     chapters 12.2.5 and 13.2.4 on how to implement TSS Trap bit */</comment>

    <expr_stmt pos:start="189:5" pos:end="189:19"><expr pos:start="189:5" pos:end="189:18"><operator pos:start="189:5" pos:end="189:5">(</operator><name pos:start="189:6" pos:end="189:9">void</name><operator pos:start="189:10" pos:end="189:10">)</operator><name pos:start="189:11" pos:end="189:18">new_trap</name></expr>;</expr_stmt>



    <comment type="block" pos:start="193:5" pos:end="195:42">/* NOTE: we must avoid memory exceptions during the task switch,

       so we make dummy accesses before */</comment>

    <comment type="block" pos:start="197:5" pos:end="199:67">/* XXX: it can still fail in some cases, so a bigger hack is

       necessary to valid the TLB after having done the accesses */</comment>



    <expr_stmt pos:start="203:5" pos:end="203:44"><expr pos:start="203:5" pos:end="203:43"><name pos:start="203:5" pos:end="203:6">v1</name> <operator pos:start="203:8" pos:end="203:8">=</operator> <call pos:start="203:10" pos:end="203:43"><name pos:start="203:10" pos:end="203:24">cpu_ldub_kernel</name><argument_list pos:start="203:25" pos:end="203:43">(<argument pos:start="203:26" pos:end="203:28"><expr pos:start="203:26" pos:end="203:28"><name pos:start="203:26" pos:end="203:28">env</name></expr></argument>, <argument pos:start="203:31" pos:end="203:42"><expr pos:start="203:31" pos:end="203:42"><name pos:start="203:31" pos:end="203:42"><name pos:start="203:31" pos:end="203:33">env</name><operator pos:start="203:34" pos:end="203:35">-&gt;</operator><name pos:start="203:36" pos:end="203:37">tr</name><operator pos:start="203:38" pos:end="203:38">.</operator><name pos:start="203:39" pos:end="203:42">base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:64"><expr pos:start="205:5" pos:end="205:63"><name pos:start="205:5" pos:end="205:6">v2</name> <operator pos:start="205:8" pos:end="205:8">=</operator> <call pos:start="205:10" pos:end="205:63"><name pos:start="205:10" pos:end="205:24">cpu_ldub_kernel</name><argument_list pos:start="205:25" pos:end="205:63">(<argument pos:start="205:26" pos:end="205:28"><expr pos:start="205:26" pos:end="205:28"><name pos:start="205:26" pos:end="205:28">env</name></expr></argument>, <argument pos:start="205:31" pos:end="205:62"><expr pos:start="205:31" pos:end="205:62"><name pos:start="205:31" pos:end="205:42"><name pos:start="205:31" pos:end="205:33">env</name><operator pos:start="205:34" pos:end="205:35">-&gt;</operator><name pos:start="205:36" pos:end="205:37">tr</name><operator pos:start="205:38" pos:end="205:38">.</operator><name pos:start="205:39" pos:end="205:42">base</name></name> <operator pos:start="205:44" pos:end="205:44">+</operator> <name pos:start="205:46" pos:end="205:62">old_tss_limit_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:42"><expr pos:start="207:5" pos:end="207:41"><call pos:start="207:5" pos:end="207:41"><name pos:start="207:5" pos:end="207:18">cpu_stb_kernel</name><argument_list pos:start="207:19" pos:end="207:41">(<argument pos:start="207:20" pos:end="207:22"><expr pos:start="207:20" pos:end="207:22"><name pos:start="207:20" pos:end="207:22">env</name></expr></argument>, <argument pos:start="207:25" pos:end="207:36"><expr pos:start="207:25" pos:end="207:36"><name pos:start="207:25" pos:end="207:36"><name pos:start="207:25" pos:end="207:27">env</name><operator pos:start="207:28" pos:end="207:29">-&gt;</operator><name pos:start="207:30" pos:end="207:31">tr</name><operator pos:start="207:32" pos:end="207:32">.</operator><name pos:start="207:33" pos:end="207:36">base</name></name></expr></argument>, <argument pos:start="207:39" pos:end="207:40"><expr pos:start="207:39" pos:end="207:40"><name pos:start="207:39" pos:end="207:40">v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:62"><expr pos:start="209:5" pos:end="209:61"><call pos:start="209:5" pos:end="209:61"><name pos:start="209:5" pos:end="209:18">cpu_stb_kernel</name><argument_list pos:start="209:19" pos:end="209:61">(<argument pos:start="209:20" pos:end="209:22"><expr pos:start="209:20" pos:end="209:22"><name pos:start="209:20" pos:end="209:22">env</name></expr></argument>, <argument pos:start="209:25" pos:end="209:56"><expr pos:start="209:25" pos:end="209:56"><name pos:start="209:25" pos:end="209:36"><name pos:start="209:25" pos:end="209:27">env</name><operator pos:start="209:28" pos:end="209:29">-&gt;</operator><name pos:start="209:30" pos:end="209:31">tr</name><operator pos:start="209:32" pos:end="209:32">.</operator><name pos:start="209:33" pos:end="209:36">base</name></name> <operator pos:start="209:38" pos:end="209:38">+</operator> <name pos:start="209:40" pos:end="209:56">old_tss_limit_max</name></expr></argument>, <argument pos:start="209:59" pos:end="209:60"><expr pos:start="209:59" pos:end="209:60"><name pos:start="209:59" pos:end="209:60">v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="213:5" pos:end="213:44">/* clear busy bit (it is restartable) */</comment>

    <if_stmt pos:start="215:5" pos:end="231:5"><if pos:start="215:5" pos:end="231:5">if <condition pos:start="215:8" pos:end="215:62">(<expr pos:start="215:9" pos:end="215:61"><name pos:start="215:9" pos:end="215:14">source</name> <operator pos:start="215:16" pos:end="215:17">==</operator> <name pos:start="215:19" pos:end="215:32">SWITCH_TSS_JMP</name> <operator pos:start="215:34" pos:end="215:35">||</operator> <name pos:start="215:37" pos:end="215:42">source</name> <operator pos:start="215:44" pos:end="215:45">==</operator> <name pos:start="215:47" pos:end="215:61">SWITCH_TSS_IRET</name></expr>)</condition> <block pos:start="215:64" pos:end="231:5">{<block_content pos:start="217:9" pos:end="229:41">

        <decl_stmt pos:start="217:9" pos:end="217:25"><decl pos:start="217:9" pos:end="217:24"><type pos:start="217:9" pos:end="217:20"><name pos:start="217:9" pos:end="217:20">target_ulong</name></type> <name pos:start="217:22" pos:end="217:24">ptr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="219:9" pos:end="219:20"><decl pos:start="219:9" pos:end="219:19"><type pos:start="219:9" pos:end="219:16"><name pos:start="219:9" pos:end="219:16">uint32_t</name></type> <name pos:start="219:18" pos:end="219:19">e2</name></decl>;</decl_stmt>



        <expr_stmt pos:start="223:9" pos:end="223:54"><expr pos:start="223:9" pos:end="223:53"><name pos:start="223:9" pos:end="223:11">ptr</name> <operator pos:start="223:13" pos:end="223:13">=</operator> <name pos:start="223:15" pos:end="223:27"><name pos:start="223:15" pos:end="223:17">env</name><operator pos:start="223:18" pos:end="223:19">-&gt;</operator><name pos:start="223:20" pos:end="223:22">gdt</name><operator pos:start="223:23" pos:end="223:23">.</operator><name pos:start="223:24" pos:end="223:27">base</name></name> <operator pos:start="223:29" pos:end="223:29">+</operator> <operator pos:start="223:31" pos:end="223:31">(</operator><name pos:start="223:32" pos:end="223:47"><name pos:start="223:32" pos:end="223:34">env</name><operator pos:start="223:35" pos:end="223:36">-&gt;</operator><name pos:start="223:37" pos:end="223:38">tr</name><operator pos:start="223:39" pos:end="223:39">.</operator><name pos:start="223:40" pos:end="223:47">selector</name></name> <operator pos:start="223:49" pos:end="223:49">&amp;</operator> <operator pos:start="223:51" pos:end="223:51">~</operator><literal type="number" pos:start="223:52" pos:end="223:52">7</literal><operator pos:start="223:53" pos:end="223:53">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:42"><expr pos:start="225:9" pos:end="225:41"><name pos:start="225:9" pos:end="225:10">e2</name> <operator pos:start="225:12" pos:end="225:12">=</operator> <call pos:start="225:14" pos:end="225:41"><name pos:start="225:14" pos:end="225:27">cpu_ldl_kernel</name><argument_list pos:start="225:28" pos:end="225:41">(<argument pos:start="225:29" pos:end="225:31"><expr pos:start="225:29" pos:end="225:31"><name pos:start="225:29" pos:end="225:31">env</name></expr></argument>, <argument pos:start="225:34" pos:end="225:40"><expr pos:start="225:34" pos:end="225:40"><name pos:start="225:34" pos:end="225:36">ptr</name> <operator pos:start="225:38" pos:end="225:38">+</operator> <literal type="number" pos:start="225:40" pos:end="225:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:34"><expr pos:start="227:9" pos:end="227:33"><name pos:start="227:9" pos:end="227:10">e2</name> <operator pos:start="227:12" pos:end="227:13">&amp;=</operator> <operator pos:start="227:15" pos:end="227:15">~</operator><name pos:start="227:16" pos:end="227:33">DESC_TSS_BUSY_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:41"><expr pos:start="229:9" pos:end="229:40"><call pos:start="229:9" pos:end="229:40"><name pos:start="229:9" pos:end="229:22">cpu_stl_kernel</name><argument_list pos:start="229:23" pos:end="229:40">(<argument pos:start="229:24" pos:end="229:26"><expr pos:start="229:24" pos:end="229:26"><name pos:start="229:24" pos:end="229:26">env</name></expr></argument>, <argument pos:start="229:29" pos:end="229:35"><expr pos:start="229:29" pos:end="229:35"><name pos:start="229:29" pos:end="229:31">ptr</name> <operator pos:start="229:33" pos:end="229:33">+</operator> <literal type="number" pos:start="229:35" pos:end="229:35">4</literal></expr></argument>, <argument pos:start="229:38" pos:end="229:39"><expr pos:start="229:38" pos:end="229:39"><name pos:start="229:38" pos:end="229:39">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:41"><expr pos:start="233:5" pos:end="233:40"><name pos:start="233:5" pos:end="233:14">old_eflags</name> <operator pos:start="233:16" pos:end="233:16">=</operator> <call pos:start="233:18" pos:end="233:40"><name pos:start="233:18" pos:end="233:35">cpu_compute_eflags</name><argument_list pos:start="233:36" pos:end="233:40">(<argument pos:start="233:37" pos:end="233:39"><expr pos:start="233:37" pos:end="233:39"><name pos:start="233:37" pos:end="233:39">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="235:5" pos:end="239:5"><if pos:start="235:5" pos:end="239:5">if <condition pos:start="235:8" pos:end="235:34">(<expr pos:start="235:9" pos:end="235:33"><name pos:start="235:9" pos:end="235:14">source</name> <operator pos:start="235:16" pos:end="235:17">==</operator> <name pos:start="235:19" pos:end="235:33">SWITCH_TSS_IRET</name></expr>)</condition> <block pos:start="235:36" pos:end="239:5">{<block_content pos:start="237:9" pos:end="237:31">

        <expr_stmt pos:start="237:9" pos:end="237:31"><expr pos:start="237:9" pos:end="237:30"><name pos:start="237:9" pos:end="237:18">old_eflags</name> <operator pos:start="237:20" pos:end="237:21">&amp;=</operator> <operator pos:start="237:23" pos:end="237:23">~</operator><name pos:start="237:24" pos:end="237:30">NT_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="243:5" pos:end="243:47">/* save the current state in the old TSS */</comment>

    <if_stmt pos:start="245:5" pos:end="309:5"><if pos:start="245:5" pos:end="277:5">if <condition pos:start="245:8" pos:end="245:17">(<expr pos:start="245:9" pos:end="245:16"><name pos:start="245:9" pos:end="245:12">type</name> <operator pos:start="245:14" pos:end="245:14">&amp;</operator> <literal type="number" pos:start="245:16" pos:end="245:16">8</literal></expr>)</condition> <block pos:start="245:19" pos:end="277:5">{<block_content pos:start="249:9" pos:end="275:9">

        <comment type="block" pos:start="247:9" pos:end="247:20">/* 32 bit */</comment>

        <expr_stmt pos:start="249:9" pos:end="249:59"><expr pos:start="249:9" pos:end="249:58"><call pos:start="249:9" pos:end="249:58"><name pos:start="249:9" pos:end="249:22">cpu_stl_kernel</name><argument_list pos:start="249:23" pos:end="249:58">(<argument pos:start="249:24" pos:end="249:26"><expr pos:start="249:24" pos:end="249:26"><name pos:start="249:24" pos:end="249:26">env</name></expr></argument>, <argument pos:start="249:29" pos:end="249:47"><expr pos:start="249:29" pos:end="249:47"><name pos:start="249:29" pos:end="249:40"><name pos:start="249:29" pos:end="249:31">env</name><operator pos:start="249:32" pos:end="249:33">-&gt;</operator><name pos:start="249:34" pos:end="249:35">tr</name><operator pos:start="249:36" pos:end="249:36">.</operator><name pos:start="249:37" pos:end="249:40">base</name></name> <operator pos:start="249:42" pos:end="249:42">+</operator> <literal type="number" pos:start="249:44" pos:end="249:47">0x20</literal></expr></argument>, <argument pos:start="249:50" pos:end="249:57"><expr pos:start="249:50" pos:end="249:57"><name pos:start="249:50" pos:end="249:57">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:61"><expr pos:start="251:9" pos:end="251:60"><call pos:start="251:9" pos:end="251:60"><name pos:start="251:9" pos:end="251:22">cpu_stl_kernel</name><argument_list pos:start="251:23" pos:end="251:60">(<argument pos:start="251:24" pos:end="251:26"><expr pos:start="251:24" pos:end="251:26"><name pos:start="251:24" pos:end="251:26">env</name></expr></argument>, <argument pos:start="251:29" pos:end="251:47"><expr pos:start="251:29" pos:end="251:47"><name pos:start="251:29" pos:end="251:40"><name pos:start="251:29" pos:end="251:31">env</name><operator pos:start="251:32" pos:end="251:33">-&gt;</operator><name pos:start="251:34" pos:end="251:35">tr</name><operator pos:start="251:36" pos:end="251:36">.</operator><name pos:start="251:37" pos:end="251:40">base</name></name> <operator pos:start="251:42" pos:end="251:42">+</operator> <literal type="number" pos:start="251:44" pos:end="251:47">0x24</literal></expr></argument>, <argument pos:start="251:50" pos:end="251:59"><expr pos:start="251:50" pos:end="251:59"><name pos:start="251:50" pos:end="251:59">old_eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:77"><expr pos:start="253:9" pos:end="253:76"><call pos:start="253:9" pos:end="253:76"><name pos:start="253:9" pos:end="253:22">cpu_stl_kernel</name><argument_list pos:start="253:23" pos:end="253:76">(<argument pos:start="253:24" pos:end="253:26"><expr pos:start="253:24" pos:end="253:26"><name pos:start="253:24" pos:end="253:26">env</name></expr></argument>, <argument pos:start="253:29" pos:end="253:57"><expr pos:start="253:29" pos:end="253:57"><name pos:start="253:29" pos:end="253:40"><name pos:start="253:29" pos:end="253:31">env</name><operator pos:start="253:32" pos:end="253:33">-&gt;</operator><name pos:start="253:34" pos:end="253:35">tr</name><operator pos:start="253:36" pos:end="253:36">.</operator><name pos:start="253:37" pos:end="253:40">base</name></name> <operator pos:start="253:42" pos:end="253:42">+</operator> <operator pos:start="253:44" pos:end="253:44">(</operator><literal type="number" pos:start="253:45" pos:end="253:50">0x28</literal> <operator pos:start="253:50" pos:end="253:50">+</operator> <literal type="number" pos:start="253:52" pos:end="253:52">0</literal> <operator pos:start="253:54" pos:end="253:54">*</operator> <literal type="number" pos:start="253:56" pos:end="253:56">4</literal><operator pos:start="253:57" pos:end="253:57">)</operator></expr></argument>, <argument pos:start="253:60" pos:end="253:75"><expr pos:start="253:60" pos:end="253:75"><name pos:start="253:60" pos:end="253:75"><name pos:start="253:60" pos:end="253:62">env</name><operator pos:start="253:63" pos:end="253:64">-&gt;</operator><name pos:start="253:65" pos:end="253:68">regs</name><index pos:start="253:69" pos:end="253:75">[<expr pos:start="253:70" pos:end="253:74"><name pos:start="253:70" pos:end="253:74">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:77"><expr pos:start="255:9" pos:end="255:76"><call pos:start="255:9" pos:end="255:76"><name pos:start="255:9" pos:end="255:22">cpu_stl_kernel</name><argument_list pos:start="255:23" pos:end="255:76">(<argument pos:start="255:24" pos:end="255:26"><expr pos:start="255:24" pos:end="255:26"><name pos:start="255:24" pos:end="255:26">env</name></expr></argument>, <argument pos:start="255:29" pos:end="255:57"><expr pos:start="255:29" pos:end="255:57"><name pos:start="255:29" pos:end="255:40"><name pos:start="255:29" pos:end="255:31">env</name><operator pos:start="255:32" pos:end="255:33">-&gt;</operator><name pos:start="255:34" pos:end="255:35">tr</name><operator pos:start="255:36" pos:end="255:36">.</operator><name pos:start="255:37" pos:end="255:40">base</name></name> <operator pos:start="255:42" pos:end="255:42">+</operator> <operator pos:start="255:44" pos:end="255:44">(</operator><literal type="number" pos:start="255:45" pos:end="255:50">0x28</literal> <operator pos:start="255:50" pos:end="255:50">+</operator> <literal type="number" pos:start="255:52" pos:end="255:52">1</literal> <operator pos:start="255:54" pos:end="255:54">*</operator> <literal type="number" pos:start="255:56" pos:end="255:56">4</literal><operator pos:start="255:57" pos:end="255:57">)</operator></expr></argument>, <argument pos:start="255:60" pos:end="255:75"><expr pos:start="255:60" pos:end="255:75"><name pos:start="255:60" pos:end="255:75"><name pos:start="255:60" pos:end="255:62">env</name><operator pos:start="255:63" pos:end="255:64">-&gt;</operator><name pos:start="255:65" pos:end="255:68">regs</name><index pos:start="255:69" pos:end="255:75">[<expr pos:start="255:70" pos:end="255:74"><name pos:start="255:70" pos:end="255:74">R_ECX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:77"><expr pos:start="257:9" pos:end="257:76"><call pos:start="257:9" pos:end="257:76"><name pos:start="257:9" pos:end="257:22">cpu_stl_kernel</name><argument_list pos:start="257:23" pos:end="257:76">(<argument pos:start="257:24" pos:end="257:26"><expr pos:start="257:24" pos:end="257:26"><name pos:start="257:24" pos:end="257:26">env</name></expr></argument>, <argument pos:start="257:29" pos:end="257:57"><expr pos:start="257:29" pos:end="257:57"><name pos:start="257:29" pos:end="257:40"><name pos:start="257:29" pos:end="257:31">env</name><operator pos:start="257:32" pos:end="257:33">-&gt;</operator><name pos:start="257:34" pos:end="257:35">tr</name><operator pos:start="257:36" pos:end="257:36">.</operator><name pos:start="257:37" pos:end="257:40">base</name></name> <operator pos:start="257:42" pos:end="257:42">+</operator> <operator pos:start="257:44" pos:end="257:44">(</operator><literal type="number" pos:start="257:45" pos:end="257:50">0x28</literal> <operator pos:start="257:50" pos:end="257:50">+</operator> <literal type="number" pos:start="257:52" pos:end="257:52">2</literal> <operator pos:start="257:54" pos:end="257:54">*</operator> <literal type="number" pos:start="257:56" pos:end="257:56">4</literal><operator pos:start="257:57" pos:end="257:57">)</operator></expr></argument>, <argument pos:start="257:60" pos:end="257:75"><expr pos:start="257:60" pos:end="257:75"><name pos:start="257:60" pos:end="257:75"><name pos:start="257:60" pos:end="257:62">env</name><operator pos:start="257:63" pos:end="257:64">-&gt;</operator><name pos:start="257:65" pos:end="257:68">regs</name><index pos:start="257:69" pos:end="257:75">[<expr pos:start="257:70" pos:end="257:74"><name pos:start="257:70" pos:end="257:74">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:77"><expr pos:start="259:9" pos:end="259:76"><call pos:start="259:9" pos:end="259:76"><name pos:start="259:9" pos:end="259:22">cpu_stl_kernel</name><argument_list pos:start="259:23" pos:end="259:76">(<argument pos:start="259:24" pos:end="259:26"><expr pos:start="259:24" pos:end="259:26"><name pos:start="259:24" pos:end="259:26">env</name></expr></argument>, <argument pos:start="259:29" pos:end="259:57"><expr pos:start="259:29" pos:end="259:57"><name pos:start="259:29" pos:end="259:40"><name pos:start="259:29" pos:end="259:31">env</name><operator pos:start="259:32" pos:end="259:33">-&gt;</operator><name pos:start="259:34" pos:end="259:35">tr</name><operator pos:start="259:36" pos:end="259:36">.</operator><name pos:start="259:37" pos:end="259:40">base</name></name> <operator pos:start="259:42" pos:end="259:42">+</operator> <operator pos:start="259:44" pos:end="259:44">(</operator><literal type="number" pos:start="259:45" pos:end="259:50">0x28</literal> <operator pos:start="259:50" pos:end="259:50">+</operator> <literal type="number" pos:start="259:52" pos:end="259:52">3</literal> <operator pos:start="259:54" pos:end="259:54">*</operator> <literal type="number" pos:start="259:56" pos:end="259:56">4</literal><operator pos:start="259:57" pos:end="259:57">)</operator></expr></argument>, <argument pos:start="259:60" pos:end="259:75"><expr pos:start="259:60" pos:end="259:75"><name pos:start="259:60" pos:end="259:75"><name pos:start="259:60" pos:end="259:62">env</name><operator pos:start="259:63" pos:end="259:64">-&gt;</operator><name pos:start="259:65" pos:end="259:68">regs</name><index pos:start="259:69" pos:end="259:75">[<expr pos:start="259:70" pos:end="259:74"><name pos:start="259:70" pos:end="259:74">R_EBX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:77"><expr pos:start="261:9" pos:end="261:76"><call pos:start="261:9" pos:end="261:76"><name pos:start="261:9" pos:end="261:22">cpu_stl_kernel</name><argument_list pos:start="261:23" pos:end="261:76">(<argument pos:start="261:24" pos:end="261:26"><expr pos:start="261:24" pos:end="261:26"><name pos:start="261:24" pos:end="261:26">env</name></expr></argument>, <argument pos:start="261:29" pos:end="261:57"><expr pos:start="261:29" pos:end="261:57"><name pos:start="261:29" pos:end="261:40"><name pos:start="261:29" pos:end="261:31">env</name><operator pos:start="261:32" pos:end="261:33">-&gt;</operator><name pos:start="261:34" pos:end="261:35">tr</name><operator pos:start="261:36" pos:end="261:36">.</operator><name pos:start="261:37" pos:end="261:40">base</name></name> <operator pos:start="261:42" pos:end="261:42">+</operator> <operator pos:start="261:44" pos:end="261:44">(</operator><literal type="number" pos:start="261:45" pos:end="261:50">0x28</literal> <operator pos:start="261:50" pos:end="261:50">+</operator> <literal type="number" pos:start="261:52" pos:end="261:52">4</literal> <operator pos:start="261:54" pos:end="261:54">*</operator> <literal type="number" pos:start="261:56" pos:end="261:56">4</literal><operator pos:start="261:57" pos:end="261:57">)</operator></expr></argument>, <argument pos:start="261:60" pos:end="261:75"><expr pos:start="261:60" pos:end="261:75"><name pos:start="261:60" pos:end="261:75"><name pos:start="261:60" pos:end="261:62">env</name><operator pos:start="261:63" pos:end="261:64">-&gt;</operator><name pos:start="261:65" pos:end="261:68">regs</name><index pos:start="261:69" pos:end="261:75">[<expr pos:start="261:70" pos:end="261:74"><name pos:start="261:70" pos:end="261:74">R_ESP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:77"><expr pos:start="263:9" pos:end="263:76"><call pos:start="263:9" pos:end="263:76"><name pos:start="263:9" pos:end="263:22">cpu_stl_kernel</name><argument_list pos:start="263:23" pos:end="263:76">(<argument pos:start="263:24" pos:end="263:26"><expr pos:start="263:24" pos:end="263:26"><name pos:start="263:24" pos:end="263:26">env</name></expr></argument>, <argument pos:start="263:29" pos:end="263:57"><expr pos:start="263:29" pos:end="263:57"><name pos:start="263:29" pos:end="263:40"><name pos:start="263:29" pos:end="263:31">env</name><operator pos:start="263:32" pos:end="263:33">-&gt;</operator><name pos:start="263:34" pos:end="263:35">tr</name><operator pos:start="263:36" pos:end="263:36">.</operator><name pos:start="263:37" pos:end="263:40">base</name></name> <operator pos:start="263:42" pos:end="263:42">+</operator> <operator pos:start="263:44" pos:end="263:44">(</operator><literal type="number" pos:start="263:45" pos:end="263:50">0x28</literal> <operator pos:start="263:50" pos:end="263:50">+</operator> <literal type="number" pos:start="263:52" pos:end="263:52">5</literal> <operator pos:start="263:54" pos:end="263:54">*</operator> <literal type="number" pos:start="263:56" pos:end="263:56">4</literal><operator pos:start="263:57" pos:end="263:57">)</operator></expr></argument>, <argument pos:start="263:60" pos:end="263:75"><expr pos:start="263:60" pos:end="263:75"><name pos:start="263:60" pos:end="263:75"><name pos:start="263:60" pos:end="263:62">env</name><operator pos:start="263:63" pos:end="263:64">-&gt;</operator><name pos:start="263:65" pos:end="263:68">regs</name><index pos:start="263:69" pos:end="263:75">[<expr pos:start="263:70" pos:end="263:74"><name pos:start="263:70" pos:end="263:74">R_EBP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:77"><expr pos:start="265:9" pos:end="265:76"><call pos:start="265:9" pos:end="265:76"><name pos:start="265:9" pos:end="265:22">cpu_stl_kernel</name><argument_list pos:start="265:23" pos:end="265:76">(<argument pos:start="265:24" pos:end="265:26"><expr pos:start="265:24" pos:end="265:26"><name pos:start="265:24" pos:end="265:26">env</name></expr></argument>, <argument pos:start="265:29" pos:end="265:57"><expr pos:start="265:29" pos:end="265:57"><name pos:start="265:29" pos:end="265:40"><name pos:start="265:29" pos:end="265:31">env</name><operator pos:start="265:32" pos:end="265:33">-&gt;</operator><name pos:start="265:34" pos:end="265:35">tr</name><operator pos:start="265:36" pos:end="265:36">.</operator><name pos:start="265:37" pos:end="265:40">base</name></name> <operator pos:start="265:42" pos:end="265:42">+</operator> <operator pos:start="265:44" pos:end="265:44">(</operator><literal type="number" pos:start="265:45" pos:end="265:50">0x28</literal> <operator pos:start="265:50" pos:end="265:50">+</operator> <literal type="number" pos:start="265:52" pos:end="265:52">6</literal> <operator pos:start="265:54" pos:end="265:54">*</operator> <literal type="number" pos:start="265:56" pos:end="265:56">4</literal><operator pos:start="265:57" pos:end="265:57">)</operator></expr></argument>, <argument pos:start="265:60" pos:end="265:75"><expr pos:start="265:60" pos:end="265:75"><name pos:start="265:60" pos:end="265:75"><name pos:start="265:60" pos:end="265:62">env</name><operator pos:start="265:63" pos:end="265:64">-&gt;</operator><name pos:start="265:65" pos:end="265:68">regs</name><index pos:start="265:69" pos:end="265:75">[<expr pos:start="265:70" pos:end="265:74"><name pos:start="265:70" pos:end="265:74">R_ESI</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:77"><expr pos:start="267:9" pos:end="267:76"><call pos:start="267:9" pos:end="267:76"><name pos:start="267:9" pos:end="267:22">cpu_stl_kernel</name><argument_list pos:start="267:23" pos:end="267:76">(<argument pos:start="267:24" pos:end="267:26"><expr pos:start="267:24" pos:end="267:26"><name pos:start="267:24" pos:end="267:26">env</name></expr></argument>, <argument pos:start="267:29" pos:end="267:57"><expr pos:start="267:29" pos:end="267:57"><name pos:start="267:29" pos:end="267:40"><name pos:start="267:29" pos:end="267:31">env</name><operator pos:start="267:32" pos:end="267:33">-&gt;</operator><name pos:start="267:34" pos:end="267:35">tr</name><operator pos:start="267:36" pos:end="267:36">.</operator><name pos:start="267:37" pos:end="267:40">base</name></name> <operator pos:start="267:42" pos:end="267:42">+</operator> <operator pos:start="267:44" pos:end="267:44">(</operator><literal type="number" pos:start="267:45" pos:end="267:50">0x28</literal> <operator pos:start="267:50" pos:end="267:50">+</operator> <literal type="number" pos:start="267:52" pos:end="267:52">7</literal> <operator pos:start="267:54" pos:end="267:54">*</operator> <literal type="number" pos:start="267:56" pos:end="267:56">4</literal><operator pos:start="267:57" pos:end="267:57">)</operator></expr></argument>, <argument pos:start="267:60" pos:end="267:75"><expr pos:start="267:60" pos:end="267:75"><name pos:start="267:60" pos:end="267:75"><name pos:start="267:60" pos:end="267:62">env</name><operator pos:start="267:63" pos:end="267:64">-&gt;</operator><name pos:start="267:65" pos:end="267:68">regs</name><index pos:start="267:69" pos:end="267:75">[<expr pos:start="267:70" pos:end="267:74"><name pos:start="267:70" pos:end="267:74">R_EDI</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="269:9" pos:end="275:9">for <control pos:start="269:13" pos:end="269:31">(<init pos:start="269:14" pos:end="269:19"><expr pos:start="269:14" pos:end="269:18"><name pos:start="269:14" pos:end="269:14">i</name> <operator pos:start="269:16" pos:end="269:16">=</operator> <literal type="number" pos:start="269:18" pos:end="269:18">0</literal></expr>;</init> <condition pos:start="269:21" pos:end="269:26"><expr pos:start="269:21" pos:end="269:25"><name pos:start="269:21" pos:end="269:21">i</name> <operator pos:start="269:23" pos:end="269:23">&lt;</operator> <literal type="number" pos:start="269:25" pos:end="269:25">6</literal></expr>;</condition> <incr pos:start="269:28" pos:end="269:30"><expr pos:start="269:28" pos:end="269:30"><name pos:start="269:28" pos:end="269:28">i</name><operator pos:start="269:29" pos:end="269:30">++</operator></expr></incr>)</control> <block pos:start="269:33" pos:end="275:9">{<block_content pos:start="271:13" pos:end="273:50">

            <expr_stmt pos:start="271:13" pos:end="273:50"><expr pos:start="271:13" pos:end="273:49"><call pos:start="271:13" pos:end="273:49"><name pos:start="271:13" pos:end="271:26">cpu_stw_kernel</name><argument_list pos:start="271:27" pos:end="273:49">(<argument pos:start="271:28" pos:end="271:30"><expr pos:start="271:28" pos:end="271:30"><name pos:start="271:28" pos:end="271:30">env</name></expr></argument>, <argument pos:start="271:33" pos:end="271:61"><expr pos:start="271:33" pos:end="271:61"><name pos:start="271:33" pos:end="271:44"><name pos:start="271:33" pos:end="271:35">env</name><operator pos:start="271:36" pos:end="271:37">-&gt;</operator><name pos:start="271:38" pos:end="271:39">tr</name><operator pos:start="271:40" pos:end="271:40">.</operator><name pos:start="271:41" pos:end="271:44">base</name></name> <operator pos:start="271:46" pos:end="271:46">+</operator> <operator pos:start="271:48" pos:end="271:48">(</operator><literal type="number" pos:start="271:49" pos:end="271:54">0x48</literal> <operator pos:start="271:54" pos:end="271:54">+</operator> <name pos:start="271:56" pos:end="271:56">i</name> <operator pos:start="271:58" pos:end="271:58">*</operator> <literal type="number" pos:start="271:60" pos:end="271:60">4</literal><operator pos:start="271:61" pos:end="271:61">)</operator></expr></argument>,

                           <argument pos:start="273:28" pos:end="273:48"><expr pos:start="273:28" pos:end="273:48"><name pos:start="273:28" pos:end="273:39"><name pos:start="273:28" pos:end="273:30">env</name><operator pos:start="273:31" pos:end="273:32">-&gt;</operator><name pos:start="273:33" pos:end="273:36">segs</name><index pos:start="273:37" pos:end="273:39">[<expr pos:start="273:38" pos:end="273:38"><name pos:start="273:38" pos:end="273:38">i</name></expr>]</index></name><operator pos:start="273:40" pos:end="273:40">.</operator><name pos:start="273:41" pos:end="273:48">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="277:7" pos:end="309:5">else <block pos:start="277:12" pos:end="309:5">{<block_content pos:start="281:9" pos:end="307:9">

        <comment type="block" pos:start="279:9" pos:end="279:20">/* 16 bit */</comment>

        <expr_stmt pos:start="281:9" pos:end="281:59"><expr pos:start="281:9" pos:end="281:58"><call pos:start="281:9" pos:end="281:58"><name pos:start="281:9" pos:end="281:22">cpu_stw_kernel</name><argument_list pos:start="281:23" pos:end="281:58">(<argument pos:start="281:24" pos:end="281:26"><expr pos:start="281:24" pos:end="281:26"><name pos:start="281:24" pos:end="281:26">env</name></expr></argument>, <argument pos:start="281:29" pos:end="281:47"><expr pos:start="281:29" pos:end="281:47"><name pos:start="281:29" pos:end="281:40"><name pos:start="281:29" pos:end="281:31">env</name><operator pos:start="281:32" pos:end="281:33">-&gt;</operator><name pos:start="281:34" pos:end="281:35">tr</name><operator pos:start="281:36" pos:end="281:36">.</operator><name pos:start="281:37" pos:end="281:40">base</name></name> <operator pos:start="281:42" pos:end="281:42">+</operator> <literal type="number" pos:start="281:44" pos:end="281:47">0x0e</literal></expr></argument>, <argument pos:start="281:50" pos:end="281:57"><expr pos:start="281:50" pos:end="281:57"><name pos:start="281:50" pos:end="281:57">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:61"><expr pos:start="283:9" pos:end="283:60"><call pos:start="283:9" pos:end="283:60"><name pos:start="283:9" pos:end="283:22">cpu_stw_kernel</name><argument_list pos:start="283:23" pos:end="283:60">(<argument pos:start="283:24" pos:end="283:26"><expr pos:start="283:24" pos:end="283:26"><name pos:start="283:24" pos:end="283:26">env</name></expr></argument>, <argument pos:start="283:29" pos:end="283:47"><expr pos:start="283:29" pos:end="283:47"><name pos:start="283:29" pos:end="283:40"><name pos:start="283:29" pos:end="283:31">env</name><operator pos:start="283:32" pos:end="283:33">-&gt;</operator><name pos:start="283:34" pos:end="283:35">tr</name><operator pos:start="283:36" pos:end="283:36">.</operator><name pos:start="283:37" pos:end="283:40">base</name></name> <operator pos:start="283:42" pos:end="283:42">+</operator> <literal type="number" pos:start="283:44" pos:end="283:47">0x10</literal></expr></argument>, <argument pos:start="283:50" pos:end="283:59"><expr pos:start="283:50" pos:end="283:59"><name pos:start="283:50" pos:end="283:59">old_eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:77"><expr pos:start="285:9" pos:end="285:76"><call pos:start="285:9" pos:end="285:76"><name pos:start="285:9" pos:end="285:22">cpu_stw_kernel</name><argument_list pos:start="285:23" pos:end="285:76">(<argument pos:start="285:24" pos:end="285:26"><expr pos:start="285:24" pos:end="285:26"><name pos:start="285:24" pos:end="285:26">env</name></expr></argument>, <argument pos:start="285:29" pos:end="285:57"><expr pos:start="285:29" pos:end="285:57"><name pos:start="285:29" pos:end="285:40"><name pos:start="285:29" pos:end="285:31">env</name><operator pos:start="285:32" pos:end="285:33">-&gt;</operator><name pos:start="285:34" pos:end="285:35">tr</name><operator pos:start="285:36" pos:end="285:36">.</operator><name pos:start="285:37" pos:end="285:40">base</name></name> <operator pos:start="285:42" pos:end="285:42">+</operator> <operator pos:start="285:44" pos:end="285:44">(</operator><literal type="number" pos:start="285:45" pos:end="285:50">0x12</literal> <operator pos:start="285:50" pos:end="285:50">+</operator> <literal type="number" pos:start="285:52" pos:end="285:52">0</literal> <operator pos:start="285:54" pos:end="285:54">*</operator> <literal type="number" pos:start="285:56" pos:end="285:56">2</literal><operator pos:start="285:57" pos:end="285:57">)</operator></expr></argument>, <argument pos:start="285:60" pos:end="285:75"><expr pos:start="285:60" pos:end="285:75"><name pos:start="285:60" pos:end="285:75"><name pos:start="285:60" pos:end="285:62">env</name><operator pos:start="285:63" pos:end="285:64">-&gt;</operator><name pos:start="285:65" pos:end="285:68">regs</name><index pos:start="285:69" pos:end="285:75">[<expr pos:start="285:70" pos:end="285:74"><name pos:start="285:70" pos:end="285:74">R_EAX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:77"><expr pos:start="287:9" pos:end="287:76"><call pos:start="287:9" pos:end="287:76"><name pos:start="287:9" pos:end="287:22">cpu_stw_kernel</name><argument_list pos:start="287:23" pos:end="287:76">(<argument pos:start="287:24" pos:end="287:26"><expr pos:start="287:24" pos:end="287:26"><name pos:start="287:24" pos:end="287:26">env</name></expr></argument>, <argument pos:start="287:29" pos:end="287:57"><expr pos:start="287:29" pos:end="287:57"><name pos:start="287:29" pos:end="287:40"><name pos:start="287:29" pos:end="287:31">env</name><operator pos:start="287:32" pos:end="287:33">-&gt;</operator><name pos:start="287:34" pos:end="287:35">tr</name><operator pos:start="287:36" pos:end="287:36">.</operator><name pos:start="287:37" pos:end="287:40">base</name></name> <operator pos:start="287:42" pos:end="287:42">+</operator> <operator pos:start="287:44" pos:end="287:44">(</operator><literal type="number" pos:start="287:45" pos:end="287:50">0x12</literal> <operator pos:start="287:50" pos:end="287:50">+</operator> <literal type="number" pos:start="287:52" pos:end="287:52">1</literal> <operator pos:start="287:54" pos:end="287:54">*</operator> <literal type="number" pos:start="287:56" pos:end="287:56">2</literal><operator pos:start="287:57" pos:end="287:57">)</operator></expr></argument>, <argument pos:start="287:60" pos:end="287:75"><expr pos:start="287:60" pos:end="287:75"><name pos:start="287:60" pos:end="287:75"><name pos:start="287:60" pos:end="287:62">env</name><operator pos:start="287:63" pos:end="287:64">-&gt;</operator><name pos:start="287:65" pos:end="287:68">regs</name><index pos:start="287:69" pos:end="287:75">[<expr pos:start="287:70" pos:end="287:74"><name pos:start="287:70" pos:end="287:74">R_ECX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:77"><expr pos:start="289:9" pos:end="289:76"><call pos:start="289:9" pos:end="289:76"><name pos:start="289:9" pos:end="289:22">cpu_stw_kernel</name><argument_list pos:start="289:23" pos:end="289:76">(<argument pos:start="289:24" pos:end="289:26"><expr pos:start="289:24" pos:end="289:26"><name pos:start="289:24" pos:end="289:26">env</name></expr></argument>, <argument pos:start="289:29" pos:end="289:57"><expr pos:start="289:29" pos:end="289:57"><name pos:start="289:29" pos:end="289:40"><name pos:start="289:29" pos:end="289:31">env</name><operator pos:start="289:32" pos:end="289:33">-&gt;</operator><name pos:start="289:34" pos:end="289:35">tr</name><operator pos:start="289:36" pos:end="289:36">.</operator><name pos:start="289:37" pos:end="289:40">base</name></name> <operator pos:start="289:42" pos:end="289:42">+</operator> <operator pos:start="289:44" pos:end="289:44">(</operator><literal type="number" pos:start="289:45" pos:end="289:50">0x12</literal> <operator pos:start="289:50" pos:end="289:50">+</operator> <literal type="number" pos:start="289:52" pos:end="289:52">2</literal> <operator pos:start="289:54" pos:end="289:54">*</operator> <literal type="number" pos:start="289:56" pos:end="289:56">2</literal><operator pos:start="289:57" pos:end="289:57">)</operator></expr></argument>, <argument pos:start="289:60" pos:end="289:75"><expr pos:start="289:60" pos:end="289:75"><name pos:start="289:60" pos:end="289:75"><name pos:start="289:60" pos:end="289:62">env</name><operator pos:start="289:63" pos:end="289:64">-&gt;</operator><name pos:start="289:65" pos:end="289:68">regs</name><index pos:start="289:69" pos:end="289:75">[<expr pos:start="289:70" pos:end="289:74"><name pos:start="289:70" pos:end="289:74">R_EDX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:77"><expr pos:start="291:9" pos:end="291:76"><call pos:start="291:9" pos:end="291:76"><name pos:start="291:9" pos:end="291:22">cpu_stw_kernel</name><argument_list pos:start="291:23" pos:end="291:76">(<argument pos:start="291:24" pos:end="291:26"><expr pos:start="291:24" pos:end="291:26"><name pos:start="291:24" pos:end="291:26">env</name></expr></argument>, <argument pos:start="291:29" pos:end="291:57"><expr pos:start="291:29" pos:end="291:57"><name pos:start="291:29" pos:end="291:40"><name pos:start="291:29" pos:end="291:31">env</name><operator pos:start="291:32" pos:end="291:33">-&gt;</operator><name pos:start="291:34" pos:end="291:35">tr</name><operator pos:start="291:36" pos:end="291:36">.</operator><name pos:start="291:37" pos:end="291:40">base</name></name> <operator pos:start="291:42" pos:end="291:42">+</operator> <operator pos:start="291:44" pos:end="291:44">(</operator><literal type="number" pos:start="291:45" pos:end="291:50">0x12</literal> <operator pos:start="291:50" pos:end="291:50">+</operator> <literal type="number" pos:start="291:52" pos:end="291:52">3</literal> <operator pos:start="291:54" pos:end="291:54">*</operator> <literal type="number" pos:start="291:56" pos:end="291:56">2</literal><operator pos:start="291:57" pos:end="291:57">)</operator></expr></argument>, <argument pos:start="291:60" pos:end="291:75"><expr pos:start="291:60" pos:end="291:75"><name pos:start="291:60" pos:end="291:75"><name pos:start="291:60" pos:end="291:62">env</name><operator pos:start="291:63" pos:end="291:64">-&gt;</operator><name pos:start="291:65" pos:end="291:68">regs</name><index pos:start="291:69" pos:end="291:75">[<expr pos:start="291:70" pos:end="291:74"><name pos:start="291:70" pos:end="291:74">R_EBX</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:77"><expr pos:start="293:9" pos:end="293:76"><call pos:start="293:9" pos:end="293:76"><name pos:start="293:9" pos:end="293:22">cpu_stw_kernel</name><argument_list pos:start="293:23" pos:end="293:76">(<argument pos:start="293:24" pos:end="293:26"><expr pos:start="293:24" pos:end="293:26"><name pos:start="293:24" pos:end="293:26">env</name></expr></argument>, <argument pos:start="293:29" pos:end="293:57"><expr pos:start="293:29" pos:end="293:57"><name pos:start="293:29" pos:end="293:40"><name pos:start="293:29" pos:end="293:31">env</name><operator pos:start="293:32" pos:end="293:33">-&gt;</operator><name pos:start="293:34" pos:end="293:35">tr</name><operator pos:start="293:36" pos:end="293:36">.</operator><name pos:start="293:37" pos:end="293:40">base</name></name> <operator pos:start="293:42" pos:end="293:42">+</operator> <operator pos:start="293:44" pos:end="293:44">(</operator><literal type="number" pos:start="293:45" pos:end="293:50">0x12</literal> <operator pos:start="293:50" pos:end="293:50">+</operator> <literal type="number" pos:start="293:52" pos:end="293:52">4</literal> <operator pos:start="293:54" pos:end="293:54">*</operator> <literal type="number" pos:start="293:56" pos:end="293:56">2</literal><operator pos:start="293:57" pos:end="293:57">)</operator></expr></argument>, <argument pos:start="293:60" pos:end="293:75"><expr pos:start="293:60" pos:end="293:75"><name pos:start="293:60" pos:end="293:75"><name pos:start="293:60" pos:end="293:62">env</name><operator pos:start="293:63" pos:end="293:64">-&gt;</operator><name pos:start="293:65" pos:end="293:68">regs</name><index pos:start="293:69" pos:end="293:75">[<expr pos:start="293:70" pos:end="293:74"><name pos:start="293:70" pos:end="293:74">R_ESP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:77"><expr pos:start="295:9" pos:end="295:76"><call pos:start="295:9" pos:end="295:76"><name pos:start="295:9" pos:end="295:22">cpu_stw_kernel</name><argument_list pos:start="295:23" pos:end="295:76">(<argument pos:start="295:24" pos:end="295:26"><expr pos:start="295:24" pos:end="295:26"><name pos:start="295:24" pos:end="295:26">env</name></expr></argument>, <argument pos:start="295:29" pos:end="295:57"><expr pos:start="295:29" pos:end="295:57"><name pos:start="295:29" pos:end="295:40"><name pos:start="295:29" pos:end="295:31">env</name><operator pos:start="295:32" pos:end="295:33">-&gt;</operator><name pos:start="295:34" pos:end="295:35">tr</name><operator pos:start="295:36" pos:end="295:36">.</operator><name pos:start="295:37" pos:end="295:40">base</name></name> <operator pos:start="295:42" pos:end="295:42">+</operator> <operator pos:start="295:44" pos:end="295:44">(</operator><literal type="number" pos:start="295:45" pos:end="295:50">0x12</literal> <operator pos:start="295:50" pos:end="295:50">+</operator> <literal type="number" pos:start="295:52" pos:end="295:52">5</literal> <operator pos:start="295:54" pos:end="295:54">*</operator> <literal type="number" pos:start="295:56" pos:end="295:56">2</literal><operator pos:start="295:57" pos:end="295:57">)</operator></expr></argument>, <argument pos:start="295:60" pos:end="295:75"><expr pos:start="295:60" pos:end="295:75"><name pos:start="295:60" pos:end="295:75"><name pos:start="295:60" pos:end="295:62">env</name><operator pos:start="295:63" pos:end="295:64">-&gt;</operator><name pos:start="295:65" pos:end="295:68">regs</name><index pos:start="295:69" pos:end="295:75">[<expr pos:start="295:70" pos:end="295:74"><name pos:start="295:70" pos:end="295:74">R_EBP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:77"><expr pos:start="297:9" pos:end="297:76"><call pos:start="297:9" pos:end="297:76"><name pos:start="297:9" pos:end="297:22">cpu_stw_kernel</name><argument_list pos:start="297:23" pos:end="297:76">(<argument pos:start="297:24" pos:end="297:26"><expr pos:start="297:24" pos:end="297:26"><name pos:start="297:24" pos:end="297:26">env</name></expr></argument>, <argument pos:start="297:29" pos:end="297:57"><expr pos:start="297:29" pos:end="297:57"><name pos:start="297:29" pos:end="297:40"><name pos:start="297:29" pos:end="297:31">env</name><operator pos:start="297:32" pos:end="297:33">-&gt;</operator><name pos:start="297:34" pos:end="297:35">tr</name><operator pos:start="297:36" pos:end="297:36">.</operator><name pos:start="297:37" pos:end="297:40">base</name></name> <operator pos:start="297:42" pos:end="297:42">+</operator> <operator pos:start="297:44" pos:end="297:44">(</operator><literal type="number" pos:start="297:45" pos:end="297:50">0x12</literal> <operator pos:start="297:50" pos:end="297:50">+</operator> <literal type="number" pos:start="297:52" pos:end="297:52">6</literal> <operator pos:start="297:54" pos:end="297:54">*</operator> <literal type="number" pos:start="297:56" pos:end="297:56">2</literal><operator pos:start="297:57" pos:end="297:57">)</operator></expr></argument>, <argument pos:start="297:60" pos:end="297:75"><expr pos:start="297:60" pos:end="297:75"><name pos:start="297:60" pos:end="297:75"><name pos:start="297:60" pos:end="297:62">env</name><operator pos:start="297:63" pos:end="297:64">-&gt;</operator><name pos:start="297:65" pos:end="297:68">regs</name><index pos:start="297:69" pos:end="297:75">[<expr pos:start="297:70" pos:end="297:74"><name pos:start="297:70" pos:end="297:74">R_ESI</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:77"><expr pos:start="299:9" pos:end="299:76"><call pos:start="299:9" pos:end="299:76"><name pos:start="299:9" pos:end="299:22">cpu_stw_kernel</name><argument_list pos:start="299:23" pos:end="299:76">(<argument pos:start="299:24" pos:end="299:26"><expr pos:start="299:24" pos:end="299:26"><name pos:start="299:24" pos:end="299:26">env</name></expr></argument>, <argument pos:start="299:29" pos:end="299:57"><expr pos:start="299:29" pos:end="299:57"><name pos:start="299:29" pos:end="299:40"><name pos:start="299:29" pos:end="299:31">env</name><operator pos:start="299:32" pos:end="299:33">-&gt;</operator><name pos:start="299:34" pos:end="299:35">tr</name><operator pos:start="299:36" pos:end="299:36">.</operator><name pos:start="299:37" pos:end="299:40">base</name></name> <operator pos:start="299:42" pos:end="299:42">+</operator> <operator pos:start="299:44" pos:end="299:44">(</operator><literal type="number" pos:start="299:45" pos:end="299:50">0x12</literal> <operator pos:start="299:50" pos:end="299:50">+</operator> <literal type="number" pos:start="299:52" pos:end="299:52">7</literal> <operator pos:start="299:54" pos:end="299:54">*</operator> <literal type="number" pos:start="299:56" pos:end="299:56">2</literal><operator pos:start="299:57" pos:end="299:57">)</operator></expr></argument>, <argument pos:start="299:60" pos:end="299:75"><expr pos:start="299:60" pos:end="299:75"><name pos:start="299:60" pos:end="299:75"><name pos:start="299:60" pos:end="299:62">env</name><operator pos:start="299:63" pos:end="299:64">-&gt;</operator><name pos:start="299:65" pos:end="299:68">regs</name><index pos:start="299:69" pos:end="299:75">[<expr pos:start="299:70" pos:end="299:74"><name pos:start="299:70" pos:end="299:74">R_EDI</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="301:9" pos:end="307:9">for <control pos:start="301:13" pos:end="301:31">(<init pos:start="301:14" pos:end="301:19"><expr pos:start="301:14" pos:end="301:18"><name pos:start="301:14" pos:end="301:14">i</name> <operator pos:start="301:16" pos:end="301:16">=</operator> <literal type="number" pos:start="301:18" pos:end="301:18">0</literal></expr>;</init> <condition pos:start="301:21" pos:end="301:26"><expr pos:start="301:21" pos:end="301:25"><name pos:start="301:21" pos:end="301:21">i</name> <operator pos:start="301:23" pos:end="301:23">&lt;</operator> <literal type="number" pos:start="301:25" pos:end="301:25">4</literal></expr>;</condition> <incr pos:start="301:28" pos:end="301:30"><expr pos:start="301:28" pos:end="301:30"><name pos:start="301:28" pos:end="301:28">i</name><operator pos:start="301:29" pos:end="301:30">++</operator></expr></incr>)</control> <block pos:start="301:33" pos:end="307:9">{<block_content pos:start="303:13" pos:end="305:50">

            <expr_stmt pos:start="303:13" pos:end="305:50"><expr pos:start="303:13" pos:end="305:49"><call pos:start="303:13" pos:end="305:49"><name pos:start="303:13" pos:end="303:26">cpu_stw_kernel</name><argument_list pos:start="303:27" pos:end="305:49">(<argument pos:start="303:28" pos:end="303:30"><expr pos:start="303:28" pos:end="303:30"><name pos:start="303:28" pos:end="303:30">env</name></expr></argument>, <argument pos:start="303:33" pos:end="303:61"><expr pos:start="303:33" pos:end="303:61"><name pos:start="303:33" pos:end="303:44"><name pos:start="303:33" pos:end="303:35">env</name><operator pos:start="303:36" pos:end="303:37">-&gt;</operator><name pos:start="303:38" pos:end="303:39">tr</name><operator pos:start="303:40" pos:end="303:40">.</operator><name pos:start="303:41" pos:end="303:44">base</name></name> <operator pos:start="303:46" pos:end="303:46">+</operator> <operator pos:start="303:48" pos:end="303:48">(</operator><literal type="number" pos:start="303:49" pos:end="303:54">0x22</literal> <operator pos:start="303:54" pos:end="303:54">+</operator> <name pos:start="303:56" pos:end="303:56">i</name> <operator pos:start="303:58" pos:end="303:58">*</operator> <literal type="number" pos:start="303:60" pos:end="303:60">4</literal><operator pos:start="303:61" pos:end="303:61">)</operator></expr></argument>,

                           <argument pos:start="305:28" pos:end="305:48"><expr pos:start="305:28" pos:end="305:48"><name pos:start="305:28" pos:end="305:39"><name pos:start="305:28" pos:end="305:30">env</name><operator pos:start="305:31" pos:end="305:32">-&gt;</operator><name pos:start="305:33" pos:end="305:36">segs</name><index pos:start="305:37" pos:end="305:39">[<expr pos:start="305:38" pos:end="305:38"><name pos:start="305:38" pos:end="305:38">i</name></expr>]</index></name><operator pos:start="305:40" pos:end="305:40">.</operator><name pos:start="305:41" pos:end="305:48">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="313:5" pos:end="315:17">/* now if an exception occurs, it will occurs in the next task

       context */</comment>



    <if_stmt pos:start="319:5" pos:end="325:5"><if pos:start="319:5" pos:end="325:5">if <condition pos:start="319:8" pos:end="319:34">(<expr pos:start="319:9" pos:end="319:33"><name pos:start="319:9" pos:end="319:14">source</name> <operator pos:start="319:16" pos:end="319:17">==</operator> <name pos:start="319:19" pos:end="319:33">SWITCH_TSS_CALL</name></expr>)</condition> <block pos:start="319:36" pos:end="325:5">{<block_content pos:start="321:9" pos:end="323:30">

        <expr_stmt pos:start="321:9" pos:end="321:56"><expr pos:start="321:9" pos:end="321:55"><call pos:start="321:9" pos:end="321:55"><name pos:start="321:9" pos:end="321:22">cpu_stw_kernel</name><argument_list pos:start="321:23" pos:end="321:55">(<argument pos:start="321:24" pos:end="321:26"><expr pos:start="321:24" pos:end="321:26"><name pos:start="321:24" pos:end="321:26">env</name></expr></argument>, <argument pos:start="321:29" pos:end="321:36"><expr pos:start="321:29" pos:end="321:36"><name pos:start="321:29" pos:end="321:36">tss_base</name></expr></argument>, <argument pos:start="321:39" pos:end="321:54"><expr pos:start="321:39" pos:end="321:54"><name pos:start="321:39" pos:end="321:54"><name pos:start="321:39" pos:end="321:41">env</name><operator pos:start="321:42" pos:end="321:43">-&gt;</operator><name pos:start="321:44" pos:end="321:45">tr</name><operator pos:start="321:46" pos:end="321:46">.</operator><name pos:start="321:47" pos:end="321:54">selector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="323:9" pos:end="323:30"><expr pos:start="323:9" pos:end="323:29"><name pos:start="323:9" pos:end="323:18">new_eflags</name> <operator pos:start="323:20" pos:end="323:21">|=</operator> <name pos:start="323:23" pos:end="323:29">NT_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="329:5" pos:end="329:22">/* set busy bit */</comment>

    <if_stmt pos:start="331:5" pos:end="347:5"><if pos:start="331:5" pos:end="347:5">if <condition pos:start="331:8" pos:end="331:62">(<expr pos:start="331:9" pos:end="331:61"><name pos:start="331:9" pos:end="331:14">source</name> <operator pos:start="331:16" pos:end="331:17">==</operator> <name pos:start="331:19" pos:end="331:32">SWITCH_TSS_JMP</name> <operator pos:start="331:34" pos:end="331:35">||</operator> <name pos:start="331:37" pos:end="331:42">source</name> <operator pos:start="331:44" pos:end="331:45">==</operator> <name pos:start="331:47" pos:end="331:61">SWITCH_TSS_CALL</name></expr>)</condition> <block pos:start="331:64" pos:end="347:5">{<block_content pos:start="333:9" pos:end="345:41">

        <decl_stmt pos:start="333:9" pos:end="333:25"><decl pos:start="333:9" pos:end="333:24"><type pos:start="333:9" pos:end="333:20"><name pos:start="333:9" pos:end="333:20">target_ulong</name></type> <name pos:start="333:22" pos:end="333:24">ptr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="335:9" pos:end="335:20"><decl pos:start="335:9" pos:end="335:19"><type pos:start="335:9" pos:end="335:16"><name pos:start="335:9" pos:end="335:16">uint32_t</name></type> <name pos:start="335:18" pos:end="335:19">e2</name></decl>;</decl_stmt>



        <expr_stmt pos:start="339:9" pos:end="339:50"><expr pos:start="339:9" pos:end="339:49"><name pos:start="339:9" pos:end="339:11">ptr</name> <operator pos:start="339:13" pos:end="339:13">=</operator> <name pos:start="339:15" pos:end="339:27"><name pos:start="339:15" pos:end="339:17">env</name><operator pos:start="339:18" pos:end="339:19">-&gt;</operator><name pos:start="339:20" pos:end="339:22">gdt</name><operator pos:start="339:23" pos:end="339:23">.</operator><name pos:start="339:24" pos:end="339:27">base</name></name> <operator pos:start="339:29" pos:end="339:29">+</operator> <operator pos:start="339:31" pos:end="339:31">(</operator><name pos:start="339:32" pos:end="339:43">tss_selector</name> <operator pos:start="339:45" pos:end="339:45">&amp;</operator> <operator pos:start="339:47" pos:end="339:47">~</operator><literal type="number" pos:start="339:48" pos:end="339:48">7</literal><operator pos:start="339:49" pos:end="339:49">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:42"><expr pos:start="341:9" pos:end="341:41"><name pos:start="341:9" pos:end="341:10">e2</name> <operator pos:start="341:12" pos:end="341:12">=</operator> <call pos:start="341:14" pos:end="341:41"><name pos:start="341:14" pos:end="341:27">cpu_ldl_kernel</name><argument_list pos:start="341:28" pos:end="341:41">(<argument pos:start="341:29" pos:end="341:31"><expr pos:start="341:29" pos:end="341:31"><name pos:start="341:29" pos:end="341:31">env</name></expr></argument>, <argument pos:start="341:34" pos:end="341:40"><expr pos:start="341:34" pos:end="341:40"><name pos:start="341:34" pos:end="341:36">ptr</name> <operator pos:start="341:38" pos:end="341:38">+</operator> <literal type="number" pos:start="341:40" pos:end="341:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:33"><expr pos:start="343:9" pos:end="343:32"><name pos:start="343:9" pos:end="343:10">e2</name> <operator pos:start="343:12" pos:end="343:13">|=</operator> <name pos:start="343:15" pos:end="343:32">DESC_TSS_BUSY_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:41"><expr pos:start="345:9" pos:end="345:40"><call pos:start="345:9" pos:end="345:40"><name pos:start="345:9" pos:end="345:22">cpu_stl_kernel</name><argument_list pos:start="345:23" pos:end="345:40">(<argument pos:start="345:24" pos:end="345:26"><expr pos:start="345:24" pos:end="345:26"><name pos:start="345:24" pos:end="345:26">env</name></expr></argument>, <argument pos:start="345:29" pos:end="345:35"><expr pos:start="345:29" pos:end="345:35"><name pos:start="345:29" pos:end="345:31">ptr</name> <operator pos:start="345:33" pos:end="345:33">+</operator> <literal type="number" pos:start="345:35" pos:end="345:35">4</literal></expr></argument>, <argument pos:start="345:38" pos:end="345:39"><expr pos:start="345:38" pos:end="345:39"><name pos:start="345:38" pos:end="345:39">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="351:5" pos:end="351:31">/* set the new CPU state */</comment>

    <comment type="block" pos:start="353:5" pos:end="353:71">/* from this point, any exception which occurs can give problems */</comment>

    <expr_stmt pos:start="355:5" pos:end="355:30"><expr pos:start="355:5" pos:end="355:29"><name pos:start="355:5" pos:end="355:14"><name pos:start="355:5" pos:end="355:7">env</name><operator pos:start="355:8" pos:end="355:9">-&gt;</operator><name pos:start="355:10" pos:end="355:11">cr</name><index pos:start="355:12" pos:end="355:14">[<expr pos:start="355:13" pos:end="355:13"><literal type="number" pos:start="355:13" pos:end="355:13">0</literal></expr>]</index></name> <operator pos:start="355:16" pos:end="355:17">|=</operator> <name pos:start="355:19" pos:end="355:29">CR0_TS_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:30"><expr pos:start="357:5" pos:end="357:29"><name pos:start="357:5" pos:end="357:15"><name pos:start="357:5" pos:end="357:7">env</name><operator pos:start="357:8" pos:end="357:9">-&gt;</operator><name pos:start="357:10" pos:end="357:15">hflags</name></name> <operator pos:start="357:17" pos:end="357:18">|=</operator> <name pos:start="357:20" pos:end="357:29">HF_TS_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:36"><expr pos:start="359:5" pos:end="359:35"><name pos:start="359:5" pos:end="359:20"><name pos:start="359:5" pos:end="359:7">env</name><operator pos:start="359:8" pos:end="359:9">-&gt;</operator><name pos:start="359:10" pos:end="359:11">tr</name><operator pos:start="359:12" pos:end="359:12">.</operator><name pos:start="359:13" pos:end="359:20">selector</name></name> <operator pos:start="359:22" pos:end="359:22">=</operator> <name pos:start="359:24" pos:end="359:35">tss_selector</name></expr>;</expr_stmt>

    <expr_stmt pos:start="361:5" pos:end="361:28"><expr pos:start="361:5" pos:end="361:27"><name pos:start="361:5" pos:end="361:16"><name pos:start="361:5" pos:end="361:7">env</name><operator pos:start="361:8" pos:end="361:9">-&gt;</operator><name pos:start="361:10" pos:end="361:11">tr</name><operator pos:start="361:12" pos:end="361:12">.</operator><name pos:start="361:13" pos:end="361:16">base</name></name> <operator pos:start="361:18" pos:end="361:18">=</operator> <name pos:start="361:20" pos:end="361:27">tss_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:30"><expr pos:start="363:5" pos:end="363:29"><name pos:start="363:5" pos:end="363:17"><name pos:start="363:5" pos:end="363:7">env</name><operator pos:start="363:8" pos:end="363:9">-&gt;</operator><name pos:start="363:10" pos:end="363:11">tr</name><operator pos:start="363:12" pos:end="363:12">.</operator><name pos:start="363:13" pos:end="363:17">limit</name></name> <operator pos:start="363:19" pos:end="363:19">=</operator> <name pos:start="363:21" pos:end="363:29">tss_limit</name></expr>;</expr_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:45"><expr pos:start="365:5" pos:end="365:44"><name pos:start="365:5" pos:end="365:17"><name pos:start="365:5" pos:end="365:7">env</name><operator pos:start="365:8" pos:end="365:9">-&gt;</operator><name pos:start="365:10" pos:end="365:11">tr</name><operator pos:start="365:12" pos:end="365:12">.</operator><name pos:start="365:13" pos:end="365:17">flags</name></name> <operator pos:start="365:19" pos:end="365:19">=</operator> <name pos:start="365:21" pos:end="365:22">e2</name> <operator pos:start="365:24" pos:end="365:24">&amp;</operator> <operator pos:start="365:26" pos:end="365:26">~</operator><name pos:start="365:27" pos:end="365:44">DESC_TSS_BUSY_MASK</name></expr>;</expr_stmt>



    <if_stmt pos:start="369:5" pos:end="373:5"><if pos:start="369:5" pos:end="373:5">if <condition pos:start="369:8" pos:end="369:49">(<expr pos:start="369:9" pos:end="369:48"><operator pos:start="369:9" pos:end="369:9">(</operator><name pos:start="369:10" pos:end="369:13">type</name> <operator pos:start="369:15" pos:end="369:15">&amp;</operator> <literal type="number" pos:start="369:17" pos:end="369:17">8</literal><operator pos:start="369:18" pos:end="369:18">)</operator> <operator pos:start="369:20" pos:end="369:21">&amp;&amp;</operator> <operator pos:start="369:23" pos:end="369:23">(</operator><name pos:start="369:24" pos:end="369:33"><name pos:start="369:24" pos:end="369:26">env</name><operator pos:start="369:27" pos:end="369:28">-&gt;</operator><name pos:start="369:29" pos:end="369:30">cr</name><index pos:start="369:31" pos:end="369:33">[<expr pos:start="369:32" pos:end="369:32"><literal type="number" pos:start="369:32" pos:end="369:32">0</literal></expr>]</index></name> <operator pos:start="369:35" pos:end="369:35">&amp;</operator> <name pos:start="369:37" pos:end="369:47">CR0_PG_MASK</name><operator pos:start="369:48" pos:end="369:48">)</operator></expr>)</condition> <block pos:start="369:51" pos:end="373:5">{<block_content pos:start="371:9" pos:end="371:41">

        <expr_stmt pos:start="371:9" pos:end="371:41"><expr pos:start="371:9" pos:end="371:40"><call pos:start="371:9" pos:end="371:40"><name pos:start="371:9" pos:end="371:26">cpu_x86_update_cr3</name><argument_list pos:start="371:27" pos:end="371:40">(<argument pos:start="371:28" pos:end="371:30"><expr pos:start="371:28" pos:end="371:30"><name pos:start="371:28" pos:end="371:30">env</name></expr></argument>, <argument pos:start="371:33" pos:end="371:39"><expr pos:start="371:33" pos:end="371:39"><name pos:start="371:33" pos:end="371:39">new_cr3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="377:5" pos:end="379:28">/* load all registers without an exception, then reload them with

       possible exception */</comment>

    <expr_stmt pos:start="381:5" pos:end="381:23"><expr pos:start="381:5" pos:end="381:22"><name pos:start="381:5" pos:end="381:12"><name pos:start="381:5" pos:end="381:7">env</name><operator pos:start="381:8" pos:end="381:9">-&gt;</operator><name pos:start="381:10" pos:end="381:12">eip</name></name> <operator pos:start="381:14" pos:end="381:14">=</operator> <name pos:start="381:16" pos:end="381:22">new_eip</name></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="385:58"><expr pos:start="383:5" pos:end="385:57"><name pos:start="383:5" pos:end="383:15">eflags_mask</name> <operator pos:start="383:17" pos:end="383:17">=</operator> <name pos:start="383:19" pos:end="383:25">TF_MASK</name> <operator pos:start="383:27" pos:end="383:27">|</operator> <name pos:start="383:29" pos:end="383:35">AC_MASK</name> <operator pos:start="383:37" pos:end="383:37">|</operator> <name pos:start="383:39" pos:end="383:45">ID_MASK</name> <operator pos:start="383:47" pos:end="383:47">|</operator>

        <name pos:start="385:9" pos:end="385:15">IF_MASK</name> <operator pos:start="385:17" pos:end="385:17">|</operator> <name pos:start="385:19" pos:end="385:27">IOPL_MASK</name> <operator pos:start="385:29" pos:end="385:29">|</operator> <name pos:start="385:31" pos:end="385:37">VM_MASK</name> <operator pos:start="385:39" pos:end="385:39">|</operator> <name pos:start="385:41" pos:end="385:47">RF_MASK</name> <operator pos:start="385:49" pos:end="385:49">|</operator> <name pos:start="385:51" pos:end="385:57">NT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="387:5" pos:end="391:5"><if pos:start="387:5" pos:end="391:5">if <condition pos:start="387:8" pos:end="387:20">(<expr pos:start="387:9" pos:end="387:19"><operator pos:start="387:9" pos:end="387:9">!</operator><operator pos:start="387:10" pos:end="387:10">(</operator><name pos:start="387:11" pos:end="387:14">type</name> <operator pos:start="387:16" pos:end="387:16">&amp;</operator> <literal type="number" pos:start="387:18" pos:end="387:18">8</literal><operator pos:start="387:19" pos:end="387:19">)</operator></expr>)</condition> <block pos:start="387:22" pos:end="391:5">{<block_content pos:start="389:9" pos:end="389:30">

        <expr_stmt pos:start="389:9" pos:end="389:30"><expr pos:start="389:9" pos:end="389:29"><name pos:start="389:9" pos:end="389:19">eflags_mask</name> <operator pos:start="389:21" pos:end="389:22">&amp;=</operator> <literal type="number" pos:start="389:24" pos:end="389:29">0xffff</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="393:5" pos:end="393:50"><expr pos:start="393:5" pos:end="393:49"><call pos:start="393:5" pos:end="393:49"><name pos:start="393:5" pos:end="393:19">cpu_load_eflags</name><argument_list pos:start="393:20" pos:end="393:49">(<argument pos:start="393:21" pos:end="393:23"><expr pos:start="393:21" pos:end="393:23"><name pos:start="393:21" pos:end="393:23">env</name></expr></argument>, <argument pos:start="393:26" pos:end="393:35"><expr pos:start="393:26" pos:end="393:35"><name pos:start="393:26" pos:end="393:35">new_eflags</name></expr></argument>, <argument pos:start="393:38" pos:end="393:48"><expr pos:start="393:38" pos:end="393:48"><name pos:start="393:38" pos:end="393:48">eflags_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="395:5" pos:end="395:41">/* XXX: what to do in 16 bit case? */</comment>

    <expr_stmt pos:start="397:5" pos:end="397:35"><expr pos:start="397:5" pos:end="397:34"><name pos:start="397:5" pos:end="397:20"><name pos:start="397:5" pos:end="397:7">env</name><operator pos:start="397:8" pos:end="397:9">-&gt;</operator><name pos:start="397:10" pos:end="397:13">regs</name><index pos:start="397:14" pos:end="397:20">[<expr pos:start="397:15" pos:end="397:19"><name pos:start="397:15" pos:end="397:19">R_EAX</name></expr>]</index></name> <operator pos:start="397:22" pos:end="397:22">=</operator> <name pos:start="397:24" pos:end="397:34"><name pos:start="397:24" pos:end="397:31">new_regs</name><index pos:start="397:32" pos:end="397:34">[<expr pos:start="397:33" pos:end="397:33"><literal type="number" pos:start="397:33" pos:end="397:33">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:35"><expr pos:start="399:5" pos:end="399:34"><name pos:start="399:5" pos:end="399:20"><name pos:start="399:5" pos:end="399:7">env</name><operator pos:start="399:8" pos:end="399:9">-&gt;</operator><name pos:start="399:10" pos:end="399:13">regs</name><index pos:start="399:14" pos:end="399:20">[<expr pos:start="399:15" pos:end="399:19"><name pos:start="399:15" pos:end="399:19">R_ECX</name></expr>]</index></name> <operator pos:start="399:22" pos:end="399:22">=</operator> <name pos:start="399:24" pos:end="399:34"><name pos:start="399:24" pos:end="399:31">new_regs</name><index pos:start="399:32" pos:end="399:34">[<expr pos:start="399:33" pos:end="399:33"><literal type="number" pos:start="399:33" pos:end="399:33">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:35"><expr pos:start="401:5" pos:end="401:34"><name pos:start="401:5" pos:end="401:20"><name pos:start="401:5" pos:end="401:7">env</name><operator pos:start="401:8" pos:end="401:9">-&gt;</operator><name pos:start="401:10" pos:end="401:13">regs</name><index pos:start="401:14" pos:end="401:20">[<expr pos:start="401:15" pos:end="401:19"><name pos:start="401:15" pos:end="401:19">R_EDX</name></expr>]</index></name> <operator pos:start="401:22" pos:end="401:22">=</operator> <name pos:start="401:24" pos:end="401:34"><name pos:start="401:24" pos:end="401:31">new_regs</name><index pos:start="401:32" pos:end="401:34">[<expr pos:start="401:33" pos:end="401:33"><literal type="number" pos:start="401:33" pos:end="401:33">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:35"><expr pos:start="403:5" pos:end="403:34"><name pos:start="403:5" pos:end="403:20"><name pos:start="403:5" pos:end="403:7">env</name><operator pos:start="403:8" pos:end="403:9">-&gt;</operator><name pos:start="403:10" pos:end="403:13">regs</name><index pos:start="403:14" pos:end="403:20">[<expr pos:start="403:15" pos:end="403:19"><name pos:start="403:15" pos:end="403:19">R_EBX</name></expr>]</index></name> <operator pos:start="403:22" pos:end="403:22">=</operator> <name pos:start="403:24" pos:end="403:34"><name pos:start="403:24" pos:end="403:31">new_regs</name><index pos:start="403:32" pos:end="403:34">[<expr pos:start="403:33" pos:end="403:33"><literal type="number" pos:start="403:33" pos:end="403:33">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="405:35"><expr pos:start="405:5" pos:end="405:34"><name pos:start="405:5" pos:end="405:20"><name pos:start="405:5" pos:end="405:7">env</name><operator pos:start="405:8" pos:end="405:9">-&gt;</operator><name pos:start="405:10" pos:end="405:13">regs</name><index pos:start="405:14" pos:end="405:20">[<expr pos:start="405:15" pos:end="405:19"><name pos:start="405:15" pos:end="405:19">R_ESP</name></expr>]</index></name> <operator pos:start="405:22" pos:end="405:22">=</operator> <name pos:start="405:24" pos:end="405:34"><name pos:start="405:24" pos:end="405:31">new_regs</name><index pos:start="405:32" pos:end="405:34">[<expr pos:start="405:33" pos:end="405:33"><literal type="number" pos:start="405:33" pos:end="405:33">4</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="407:5" pos:end="407:35"><expr pos:start="407:5" pos:end="407:34"><name pos:start="407:5" pos:end="407:20"><name pos:start="407:5" pos:end="407:7">env</name><operator pos:start="407:8" pos:end="407:9">-&gt;</operator><name pos:start="407:10" pos:end="407:13">regs</name><index pos:start="407:14" pos:end="407:20">[<expr pos:start="407:15" pos:end="407:19"><name pos:start="407:15" pos:end="407:19">R_EBP</name></expr>]</index></name> <operator pos:start="407:22" pos:end="407:22">=</operator> <name pos:start="407:24" pos:end="407:34"><name pos:start="407:24" pos:end="407:31">new_regs</name><index pos:start="407:32" pos:end="407:34">[<expr pos:start="407:33" pos:end="407:33"><literal type="number" pos:start="407:33" pos:end="407:33">5</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="409:5" pos:end="409:35"><expr pos:start="409:5" pos:end="409:34"><name pos:start="409:5" pos:end="409:20"><name pos:start="409:5" pos:end="409:7">env</name><operator pos:start="409:8" pos:end="409:9">-&gt;</operator><name pos:start="409:10" pos:end="409:13">regs</name><index pos:start="409:14" pos:end="409:20">[<expr pos:start="409:15" pos:end="409:19"><name pos:start="409:15" pos:end="409:19">R_ESI</name></expr>]</index></name> <operator pos:start="409:22" pos:end="409:22">=</operator> <name pos:start="409:24" pos:end="409:34"><name pos:start="409:24" pos:end="409:31">new_regs</name><index pos:start="409:32" pos:end="409:34">[<expr pos:start="409:33" pos:end="409:33"><literal type="number" pos:start="409:33" pos:end="409:33">6</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="411:5" pos:end="411:35"><expr pos:start="411:5" pos:end="411:34"><name pos:start="411:5" pos:end="411:20"><name pos:start="411:5" pos:end="411:7">env</name><operator pos:start="411:8" pos:end="411:9">-&gt;</operator><name pos:start="411:10" pos:end="411:13">regs</name><index pos:start="411:14" pos:end="411:20">[<expr pos:start="411:15" pos:end="411:19"><name pos:start="411:15" pos:end="411:19">R_EDI</name></expr>]</index></name> <operator pos:start="411:22" pos:end="411:22">=</operator> <name pos:start="411:24" pos:end="411:34"><name pos:start="411:24" pos:end="411:31">new_regs</name><index pos:start="411:32" pos:end="411:34">[<expr pos:start="411:33" pos:end="411:33"><literal type="number" pos:start="411:33" pos:end="411:33">7</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="413:5" pos:end="439:5"><if pos:start="413:5" pos:end="425:5">if <condition pos:start="413:8" pos:end="413:29">(<expr pos:start="413:9" pos:end="413:28"><name pos:start="413:9" pos:end="413:18">new_eflags</name> <operator pos:start="413:20" pos:end="413:20">&amp;</operator> <name pos:start="413:22" pos:end="413:28">VM_MASK</name></expr>)</condition> <block pos:start="413:31" pos:end="425:5">{<block_content pos:start="415:9" pos:end="423:32">

        <for pos:start="415:9" pos:end="419:9">for <control pos:start="415:13" pos:end="415:31">(<init pos:start="415:14" pos:end="415:19"><expr pos:start="415:14" pos:end="415:18"><name pos:start="415:14" pos:end="415:14">i</name> <operator pos:start="415:16" pos:end="415:16">=</operator> <literal type="number" pos:start="415:18" pos:end="415:18">0</literal></expr>;</init> <condition pos:start="415:21" pos:end="415:26"><expr pos:start="415:21" pos:end="415:25"><name pos:start="415:21" pos:end="415:21">i</name> <operator pos:start="415:23" pos:end="415:23">&lt;</operator> <literal type="number" pos:start="415:25" pos:end="415:25">6</literal></expr>;</condition> <incr pos:start="415:28" pos:end="415:30"><expr pos:start="415:28" pos:end="415:30"><name pos:start="415:28" pos:end="415:28">i</name><operator pos:start="415:29" pos:end="415:30">++</operator></expr></incr>)</control> <block pos:start="415:33" pos:end="419:9">{<block_content pos:start="417:13" pos:end="417:45">

            <expr_stmt pos:start="417:13" pos:end="417:45"><expr pos:start="417:13" pos:end="417:44"><call pos:start="417:13" pos:end="417:44"><name pos:start="417:13" pos:end="417:23">load_seg_vm</name><argument_list pos:start="417:24" pos:end="417:44">(<argument pos:start="417:25" pos:end="417:27"><expr pos:start="417:25" pos:end="417:27"><name pos:start="417:25" pos:end="417:27">env</name></expr></argument>, <argument pos:start="417:30" pos:end="417:30"><expr pos:start="417:30" pos:end="417:30"><name pos:start="417:30" pos:end="417:30">i</name></expr></argument>, <argument pos:start="417:33" pos:end="417:43"><expr pos:start="417:33" pos:end="417:43"><name pos:start="417:33" pos:end="417:43"><name pos:start="417:33" pos:end="417:40">new_segs</name><index pos:start="417:41" pos:end="417:43">[<expr pos:start="417:42" pos:end="417:42"><name pos:start="417:42" pos:end="417:42">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="421:9" pos:end="421:38">/* in vm86, CPL is always 3 */</comment>

        <expr_stmt pos:start="423:9" pos:end="423:32"><expr pos:start="423:9" pos:end="423:31"><call pos:start="423:9" pos:end="423:31"><name pos:start="423:9" pos:end="423:23">cpu_x86_set_cpl</name><argument_list pos:start="423:24" pos:end="423:31">(<argument pos:start="423:25" pos:end="423:27"><expr pos:start="423:25" pos:end="423:27"><name pos:start="423:25" pos:end="423:27">env</name></expr></argument>, <argument pos:start="423:30" pos:end="423:30"><expr pos:start="423:30" pos:end="423:30"><literal type="number" pos:start="423:30" pos:end="423:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="425:7" pos:end="439:5">else <block pos:start="425:12" pos:end="439:5">{<block_content pos:start="429:9" pos:end="437:9">

        <comment type="block" pos:start="427:9" pos:end="427:38">/* CPL is set the RPL of CS */</comment>

        <expr_stmt pos:start="429:9" pos:end="429:49"><expr pos:start="429:9" pos:end="429:48"><call pos:start="429:9" pos:end="429:48"><name pos:start="429:9" pos:end="429:23">cpu_x86_set_cpl</name><argument_list pos:start="429:24" pos:end="429:48">(<argument pos:start="429:25" pos:end="429:27"><expr pos:start="429:25" pos:end="429:27"><name pos:start="429:25" pos:end="429:27">env</name></expr></argument>, <argument pos:start="429:30" pos:end="429:47"><expr pos:start="429:30" pos:end="429:47"><name pos:start="429:30" pos:end="429:43"><name pos:start="429:30" pos:end="429:37">new_segs</name><index pos:start="429:38" pos:end="429:43">[<expr pos:start="429:39" pos:end="429:42"><name pos:start="429:39" pos:end="429:42">R_CS</name></expr>]</index></name> <operator pos:start="429:45" pos:end="429:45">&amp;</operator> <literal type="number" pos:start="429:47" pos:end="429:47">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="431:9" pos:end="431:69">/* first just selectors as the rest may trigger exceptions */</comment>

        <for pos:start="433:9" pos:end="437:9">for <control pos:start="433:13" pos:end="433:31">(<init pos:start="433:14" pos:end="433:19"><expr pos:start="433:14" pos:end="433:18"><name pos:start="433:14" pos:end="433:14">i</name> <operator pos:start="433:16" pos:end="433:16">=</operator> <literal type="number" pos:start="433:18" pos:end="433:18">0</literal></expr>;</init> <condition pos:start="433:21" pos:end="433:26"><expr pos:start="433:21" pos:end="433:25"><name pos:start="433:21" pos:end="433:21">i</name> <operator pos:start="433:23" pos:end="433:23">&lt;</operator> <literal type="number" pos:start="433:25" pos:end="433:25">6</literal></expr>;</condition> <incr pos:start="433:28" pos:end="433:30"><expr pos:start="433:28" pos:end="433:30"><name pos:start="433:28" pos:end="433:28">i</name><operator pos:start="433:29" pos:end="433:30">++</operator></expr></incr>)</control> <block pos:start="433:33" pos:end="437:9">{<block_content pos:start="435:13" pos:end="435:65">

            <expr_stmt pos:start="435:13" pos:end="435:65"><expr pos:start="435:13" pos:end="435:64"><call pos:start="435:13" pos:end="435:64"><name pos:start="435:13" pos:end="435:34">cpu_x86_load_seg_cache</name><argument_list pos:start="435:35" pos:end="435:64">(<argument pos:start="435:36" pos:end="435:38"><expr pos:start="435:36" pos:end="435:38"><name pos:start="435:36" pos:end="435:38">env</name></expr></argument>, <argument pos:start="435:41" pos:end="435:41"><expr pos:start="435:41" pos:end="435:41"><name pos:start="435:41" pos:end="435:41">i</name></expr></argument>, <argument pos:start="435:44" pos:end="435:54"><expr pos:start="435:44" pos:end="435:54"><name pos:start="435:44" pos:end="435:54"><name pos:start="435:44" pos:end="435:51">new_segs</name><index pos:start="435:52" pos:end="435:54">[<expr pos:start="435:53" pos:end="435:53"><name pos:start="435:53" pos:end="435:53">i</name></expr>]</index></name></expr></argument>, <argument pos:start="435:57" pos:end="435:57"><expr pos:start="435:57" pos:end="435:57"><literal type="number" pos:start="435:57" pos:end="435:57">0</literal></expr></argument>, <argument pos:start="435:60" pos:end="435:60"><expr pos:start="435:60" pos:end="435:60"><literal type="number" pos:start="435:60" pos:end="435:60">0</literal></expr></argument>, <argument pos:start="435:63" pos:end="435:63"><expr pos:start="435:63" pos:end="435:63"><literal type="number" pos:start="435:63" pos:end="435:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="443:5" pos:end="443:37"><expr pos:start="443:5" pos:end="443:36"><name pos:start="443:5" pos:end="443:21"><name pos:start="443:5" pos:end="443:7">env</name><operator pos:start="443:8" pos:end="443:9">-&gt;</operator><name pos:start="443:10" pos:end="443:12">ldt</name><operator pos:start="443:13" pos:end="443:13">.</operator><name pos:start="443:14" pos:end="443:21">selector</name></name> <operator pos:start="443:23" pos:end="443:23">=</operator> <name pos:start="443:25" pos:end="443:31">new_ldt</name> <operator pos:start="443:33" pos:end="443:33">&amp;</operator> <operator pos:start="443:35" pos:end="443:35">~</operator><literal type="number" pos:start="443:36" pos:end="443:36">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="445:5" pos:end="445:22"><expr pos:start="445:5" pos:end="445:21"><name pos:start="445:5" pos:end="445:17"><name pos:start="445:5" pos:end="445:7">env</name><operator pos:start="445:8" pos:end="445:9">-&gt;</operator><name pos:start="445:10" pos:end="445:12">ldt</name><operator pos:start="445:13" pos:end="445:13">.</operator><name pos:start="445:14" pos:end="445:17">base</name></name> <operator pos:start="445:19" pos:end="445:19">=</operator> <literal type="number" pos:start="445:21" pos:end="445:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="447:5" pos:end="447:23"><expr pos:start="447:5" pos:end="447:22"><name pos:start="447:5" pos:end="447:18"><name pos:start="447:5" pos:end="447:7">env</name><operator pos:start="447:8" pos:end="447:9">-&gt;</operator><name pos:start="447:10" pos:end="447:12">ldt</name><operator pos:start="447:13" pos:end="447:13">.</operator><name pos:start="447:14" pos:end="447:18">limit</name></name> <operator pos:start="447:20" pos:end="447:20">=</operator> <literal type="number" pos:start="447:22" pos:end="447:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="449:5" pos:end="449:23"><expr pos:start="449:5" pos:end="449:22"><name pos:start="449:5" pos:end="449:18"><name pos:start="449:5" pos:end="449:7">env</name><operator pos:start="449:8" pos:end="449:9">-&gt;</operator><name pos:start="449:10" pos:end="449:12">ldt</name><operator pos:start="449:13" pos:end="449:13">.</operator><name pos:start="449:14" pos:end="449:18">flags</name></name> <operator pos:start="449:20" pos:end="449:20">=</operator> <literal type="number" pos:start="449:22" pos:end="449:22">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="453:5" pos:end="453:22">/* load the LDT */</comment>

    <if_stmt pos:start="455:5" pos:end="459:5"><if pos:start="455:5" pos:end="459:5">if <condition pos:start="455:8" pos:end="455:20">(<expr pos:start="455:9" pos:end="455:19"><name pos:start="455:9" pos:end="455:15">new_ldt</name> <operator pos:start="455:17" pos:end="455:17">&amp;</operator> <literal type="number" pos:start="455:19" pos:end="455:19">4</literal></expr>)</condition> <block pos:start="455:22" pos:end="459:5">{<block_content pos:start="457:9" pos:end="457:63">

        <expr_stmt pos:start="457:9" pos:end="457:63"><expr pos:start="457:9" pos:end="457:62"><call pos:start="457:9" pos:end="457:62"><name pos:start="457:9" pos:end="457:27">raise_exception_err</name><argument_list pos:start="457:28" pos:end="457:62">(<argument pos:start="457:29" pos:end="457:31"><expr pos:start="457:29" pos:end="457:31"><name pos:start="457:29" pos:end="457:31">env</name></expr></argument>, <argument pos:start="457:34" pos:end="457:43"><expr pos:start="457:34" pos:end="457:43"><name pos:start="457:34" pos:end="457:43">EXCP0A_TSS</name></expr></argument>, <argument pos:start="457:46" pos:end="457:61"><expr pos:start="457:46" pos:end="457:61"><name pos:start="457:46" pos:end="457:52">new_ldt</name> <operator pos:start="457:54" pos:end="457:54">&amp;</operator> <literal type="number" pos:start="457:56" pos:end="457:61">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="463:5" pos:end="495:5"><if pos:start="463:5" pos:end="495:5">if <condition pos:start="463:8" pos:end="463:32">(<expr pos:start="463:9" pos:end="463:31"><operator pos:start="463:9" pos:end="463:9">(</operator><name pos:start="463:10" pos:end="463:16">new_ldt</name> <operator pos:start="463:18" pos:end="463:18">&amp;</operator> <literal type="number" pos:start="463:20" pos:end="463:25">0xfffc</literal><operator pos:start="463:26" pos:end="463:26">)</operator> <operator pos:start="463:28" pos:end="463:29">!=</operator> <literal type="number" pos:start="463:31" pos:end="463:31">0</literal></expr>)</condition> <block pos:start="463:34" pos:end="495:5">{<block_content pos:start="465:9" pos:end="493:49">

        <expr_stmt pos:start="465:9" pos:end="465:23"><expr pos:start="465:9" pos:end="465:22"><name pos:start="465:9" pos:end="465:10">dt</name> <operator pos:start="465:12" pos:end="465:12">=</operator> <operator pos:start="465:14" pos:end="465:14">&amp;</operator><name pos:start="465:15" pos:end="465:22"><name pos:start="465:15" pos:end="465:17">env</name><operator pos:start="465:18" pos:end="465:19">-&gt;</operator><name pos:start="465:20" pos:end="465:22">gdt</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="467:9" pos:end="467:29"><expr pos:start="467:9" pos:end="467:28"><name pos:start="467:9" pos:end="467:13">index</name> <operator pos:start="467:15" pos:end="467:15">=</operator> <name pos:start="467:17" pos:end="467:23">new_ldt</name> <operator pos:start="467:25" pos:end="467:25">&amp;</operator> <operator pos:start="467:27" pos:end="467:27">~</operator><literal type="number" pos:start="467:28" pos:end="467:28">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="469:9" pos:end="473:9"><if pos:start="469:9" pos:end="473:9">if <condition pos:start="469:12" pos:end="469:36">(<expr pos:start="469:13" pos:end="469:35"><operator pos:start="469:13" pos:end="469:13">(</operator><name pos:start="469:14" pos:end="469:18">index</name> <operator pos:start="469:20" pos:end="469:20">+</operator> <literal type="number" pos:start="469:22" pos:end="469:22">7</literal><operator pos:start="469:23" pos:end="469:23">)</operator> <operator pos:start="469:25" pos:end="469:25">&gt;</operator> <name pos:start="469:27" pos:end="469:35"><name pos:start="469:27" pos:end="469:28">dt</name><operator pos:start="469:29" pos:end="469:30">-&gt;</operator><name pos:start="469:31" pos:end="469:35">limit</name></name></expr>)</condition> <block pos:start="469:38" pos:end="473:9">{<block_content pos:start="471:13" pos:end="471:67">

            <expr_stmt pos:start="471:13" pos:end="471:67"><expr pos:start="471:13" pos:end="471:66"><call pos:start="471:13" pos:end="471:66"><name pos:start="471:13" pos:end="471:31">raise_exception_err</name><argument_list pos:start="471:32" pos:end="471:66">(<argument pos:start="471:33" pos:end="471:35"><expr pos:start="471:33" pos:end="471:35"><name pos:start="471:33" pos:end="471:35">env</name></expr></argument>, <argument pos:start="471:38" pos:end="471:47"><expr pos:start="471:38" pos:end="471:47"><name pos:start="471:38" pos:end="471:47">EXCP0A_TSS</name></expr></argument>, <argument pos:start="471:50" pos:end="471:65"><expr pos:start="471:50" pos:end="471:65"><name pos:start="471:50" pos:end="471:56">new_ldt</name> <operator pos:start="471:58" pos:end="471:58">&amp;</operator> <literal type="number" pos:start="471:60" pos:end="471:65">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="475:9" pos:end="475:31"><expr pos:start="475:9" pos:end="475:30"><name pos:start="475:9" pos:end="475:11">ptr</name> <operator pos:start="475:13" pos:end="475:13">=</operator> <name pos:start="475:15" pos:end="475:22"><name pos:start="475:15" pos:end="475:16">dt</name><operator pos:start="475:17" pos:end="475:18">-&gt;</operator><name pos:start="475:19" pos:end="475:22">base</name></name> <operator pos:start="475:24" pos:end="475:24">+</operator> <name pos:start="475:26" pos:end="475:30">index</name></expr>;</expr_stmt>

        <expr_stmt pos:start="477:9" pos:end="477:38"><expr pos:start="477:9" pos:end="477:37"><name pos:start="477:9" pos:end="477:10">e1</name> <operator pos:start="477:12" pos:end="477:12">=</operator> <call pos:start="477:14" pos:end="477:37"><name pos:start="477:14" pos:end="477:27">cpu_ldl_kernel</name><argument_list pos:start="477:28" pos:end="477:37">(<argument pos:start="477:29" pos:end="477:31"><expr pos:start="477:29" pos:end="477:31"><name pos:start="477:29" pos:end="477:31">env</name></expr></argument>, <argument pos:start="477:34" pos:end="477:36"><expr pos:start="477:34" pos:end="477:36"><name pos:start="477:34" pos:end="477:36">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="479:9" pos:end="479:42"><expr pos:start="479:9" pos:end="479:41"><name pos:start="479:9" pos:end="479:10">e2</name> <operator pos:start="479:12" pos:end="479:12">=</operator> <call pos:start="479:14" pos:end="479:41"><name pos:start="479:14" pos:end="479:27">cpu_ldl_kernel</name><argument_list pos:start="479:28" pos:end="479:41">(<argument pos:start="479:29" pos:end="479:31"><expr pos:start="479:29" pos:end="479:31"><name pos:start="479:29" pos:end="479:31">env</name></expr></argument>, <argument pos:start="479:34" pos:end="479:40"><expr pos:start="479:34" pos:end="479:40"><name pos:start="479:34" pos:end="479:36">ptr</name> <operator pos:start="479:38" pos:end="479:38">+</operator> <literal type="number" pos:start="479:40" pos:end="479:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="481:9" pos:end="485:9"><if pos:start="481:9" pos:end="485:9">if <condition pos:start="481:12" pos:end="481:71">(<expr pos:start="481:13" pos:end="481:70"><operator pos:start="481:13" pos:end="481:13">(</operator><name pos:start="481:14" pos:end="481:15">e2</name> <operator pos:start="481:17" pos:end="481:17">&amp;</operator> <name pos:start="481:19" pos:end="481:29">DESC_S_MASK</name><operator pos:start="481:30" pos:end="481:30">)</operator> <operator pos:start="481:32" pos:end="481:33">||</operator> <operator pos:start="481:35" pos:end="481:35">(</operator><operator pos:start="481:36" pos:end="481:36">(</operator><name pos:start="481:37" pos:end="481:38">e2</name> <operator pos:start="481:40" pos:end="481:41">&gt;&gt;</operator> <name pos:start="481:43" pos:end="481:57">DESC_TYPE_SHIFT</name><operator pos:start="481:58" pos:end="481:58">)</operator> <operator pos:start="481:60" pos:end="481:60">&amp;</operator> <literal type="number" pos:start="481:62" pos:end="481:64">0xf</literal><operator pos:start="481:65" pos:end="481:65">)</operator> <operator pos:start="481:67" pos:end="481:68">!=</operator> <literal type="number" pos:start="481:70" pos:end="481:70">2</literal></expr>)</condition> <block pos:start="481:73" pos:end="485:9">{<block_content pos:start="483:13" pos:end="483:67">

            <expr_stmt pos:start="483:13" pos:end="483:67"><expr pos:start="483:13" pos:end="483:66"><call pos:start="483:13" pos:end="483:66"><name pos:start="483:13" pos:end="483:31">raise_exception_err</name><argument_list pos:start="483:32" pos:end="483:66">(<argument pos:start="483:33" pos:end="483:35"><expr pos:start="483:33" pos:end="483:35"><name pos:start="483:33" pos:end="483:35">env</name></expr></argument>, <argument pos:start="483:38" pos:end="483:47"><expr pos:start="483:38" pos:end="483:47"><name pos:start="483:38" pos:end="483:47">EXCP0A_TSS</name></expr></argument>, <argument pos:start="483:50" pos:end="483:65"><expr pos:start="483:50" pos:end="483:65"><name pos:start="483:50" pos:end="483:56">new_ldt</name> <operator pos:start="483:58" pos:end="483:58">&amp;</operator> <literal type="number" pos:start="483:60" pos:end="483:65">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="487:9" pos:end="491:9"><if pos:start="487:9" pos:end="491:9">if <condition pos:start="487:12" pos:end="487:32">(<expr pos:start="487:13" pos:end="487:31"><operator pos:start="487:13" pos:end="487:13">!</operator><operator pos:start="487:14" pos:end="487:14">(</operator><name pos:start="487:15" pos:end="487:16">e2</name> <operator pos:start="487:18" pos:end="487:18">&amp;</operator> <name pos:start="487:20" pos:end="487:30">DESC_P_MASK</name><operator pos:start="487:31" pos:end="487:31">)</operator></expr>)</condition> <block pos:start="487:34" pos:end="491:9">{<block_content pos:start="489:13" pos:end="489:67">

            <expr_stmt pos:start="489:13" pos:end="489:67"><expr pos:start="489:13" pos:end="489:66"><call pos:start="489:13" pos:end="489:66"><name pos:start="489:13" pos:end="489:31">raise_exception_err</name><argument_list pos:start="489:32" pos:end="489:66">(<argument pos:start="489:33" pos:end="489:35"><expr pos:start="489:33" pos:end="489:35"><name pos:start="489:33" pos:end="489:35">env</name></expr></argument>, <argument pos:start="489:38" pos:end="489:47"><expr pos:start="489:38" pos:end="489:47"><name pos:start="489:38" pos:end="489:47">EXCP0A_TSS</name></expr></argument>, <argument pos:start="489:50" pos:end="489:65"><expr pos:start="489:50" pos:end="489:65"><name pos:start="489:50" pos:end="489:56">new_ldt</name> <operator pos:start="489:58" pos:end="489:58">&amp;</operator> <literal type="number" pos:start="489:60" pos:end="489:65">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="493:9" pos:end="493:49"><expr pos:start="493:9" pos:end="493:48"><call pos:start="493:9" pos:end="493:48"><name pos:start="493:9" pos:end="493:29">load_seg_cache_raw_dt</name><argument_list pos:start="493:30" pos:end="493:48">(<argument pos:start="493:31" pos:end="493:39"><expr pos:start="493:31" pos:end="493:39"><operator pos:start="493:31" pos:end="493:31">&amp;</operator><name pos:start="493:32" pos:end="493:39"><name pos:start="493:32" pos:end="493:34">env</name><operator pos:start="493:35" pos:end="493:36">-&gt;</operator><name pos:start="493:37" pos:end="493:39">ldt</name></name></expr></argument>, <argument pos:start="493:42" pos:end="493:43"><expr pos:start="493:42" pos:end="493:43"><name pos:start="493:42" pos:end="493:43">e1</name></expr></argument>, <argument pos:start="493:46" pos:end="493:47"><expr pos:start="493:46" pos:end="493:47"><name pos:start="493:46" pos:end="493:47">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="499:5" pos:end="499:27">/* load the segments */</comment>

    <if_stmt pos:start="501:5" pos:end="515:5"><if pos:start="501:5" pos:end="515:5">if <condition pos:start="501:8" pos:end="501:32">(<expr pos:start="501:9" pos:end="501:31"><operator pos:start="501:9" pos:end="501:9">!</operator><operator pos:start="501:10" pos:end="501:10">(</operator><name pos:start="501:11" pos:end="501:20">new_eflags</name> <operator pos:start="501:22" pos:end="501:22">&amp;</operator> <name pos:start="501:24" pos:end="501:30">VM_MASK</name><operator pos:start="501:31" pos:end="501:31">)</operator></expr>)</condition> <block pos:start="501:34" pos:end="515:5">{<block_content pos:start="503:9" pos:end="513:48">

        <expr_stmt pos:start="503:9" pos:end="503:48"><expr pos:start="503:9" pos:end="503:47"><call pos:start="503:9" pos:end="503:47"><name pos:start="503:9" pos:end="503:20">tss_load_seg</name><argument_list pos:start="503:21" pos:end="503:47">(<argument pos:start="503:22" pos:end="503:24"><expr pos:start="503:22" pos:end="503:24"><name pos:start="503:22" pos:end="503:24">env</name></expr></argument>, <argument pos:start="503:27" pos:end="503:30"><expr pos:start="503:27" pos:end="503:30"><name pos:start="503:27" pos:end="503:30">R_CS</name></expr></argument>, <argument pos:start="503:33" pos:end="503:46"><expr pos:start="503:33" pos:end="503:46"><name pos:start="503:33" pos:end="503:46"><name pos:start="503:33" pos:end="503:40">new_segs</name><index pos:start="503:41" pos:end="503:46">[<expr pos:start="503:42" pos:end="503:45"><name pos:start="503:42" pos:end="503:45">R_CS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="505:9" pos:end="505:48"><expr pos:start="505:9" pos:end="505:47"><call pos:start="505:9" pos:end="505:47"><name pos:start="505:9" pos:end="505:20">tss_load_seg</name><argument_list pos:start="505:21" pos:end="505:47">(<argument pos:start="505:22" pos:end="505:24"><expr pos:start="505:22" pos:end="505:24"><name pos:start="505:22" pos:end="505:24">env</name></expr></argument>, <argument pos:start="505:27" pos:end="505:30"><expr pos:start="505:27" pos:end="505:30"><name pos:start="505:27" pos:end="505:30">R_SS</name></expr></argument>, <argument pos:start="505:33" pos:end="505:46"><expr pos:start="505:33" pos:end="505:46"><name pos:start="505:33" pos:end="505:46"><name pos:start="505:33" pos:end="505:40">new_segs</name><index pos:start="505:41" pos:end="505:46">[<expr pos:start="505:42" pos:end="505:45"><name pos:start="505:42" pos:end="505:45">R_SS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="507:9" pos:end="507:48"><expr pos:start="507:9" pos:end="507:47"><call pos:start="507:9" pos:end="507:47"><name pos:start="507:9" pos:end="507:20">tss_load_seg</name><argument_list pos:start="507:21" pos:end="507:47">(<argument pos:start="507:22" pos:end="507:24"><expr pos:start="507:22" pos:end="507:24"><name pos:start="507:22" pos:end="507:24">env</name></expr></argument>, <argument pos:start="507:27" pos:end="507:30"><expr pos:start="507:27" pos:end="507:30"><name pos:start="507:27" pos:end="507:30">R_ES</name></expr></argument>, <argument pos:start="507:33" pos:end="507:46"><expr pos:start="507:33" pos:end="507:46"><name pos:start="507:33" pos:end="507:46"><name pos:start="507:33" pos:end="507:40">new_segs</name><index pos:start="507:41" pos:end="507:46">[<expr pos:start="507:42" pos:end="507:45"><name pos:start="507:42" pos:end="507:45">R_ES</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="509:9" pos:end="509:48"><expr pos:start="509:9" pos:end="509:47"><call pos:start="509:9" pos:end="509:47"><name pos:start="509:9" pos:end="509:20">tss_load_seg</name><argument_list pos:start="509:21" pos:end="509:47">(<argument pos:start="509:22" pos:end="509:24"><expr pos:start="509:22" pos:end="509:24"><name pos:start="509:22" pos:end="509:24">env</name></expr></argument>, <argument pos:start="509:27" pos:end="509:30"><expr pos:start="509:27" pos:end="509:30"><name pos:start="509:27" pos:end="509:30">R_DS</name></expr></argument>, <argument pos:start="509:33" pos:end="509:46"><expr pos:start="509:33" pos:end="509:46"><name pos:start="509:33" pos:end="509:46"><name pos:start="509:33" pos:end="509:40">new_segs</name><index pos:start="509:41" pos:end="509:46">[<expr pos:start="509:42" pos:end="509:45"><name pos:start="509:42" pos:end="509:45">R_DS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="511:9" pos:end="511:48"><expr pos:start="511:9" pos:end="511:47"><call pos:start="511:9" pos:end="511:47"><name pos:start="511:9" pos:end="511:20">tss_load_seg</name><argument_list pos:start="511:21" pos:end="511:47">(<argument pos:start="511:22" pos:end="511:24"><expr pos:start="511:22" pos:end="511:24"><name pos:start="511:22" pos:end="511:24">env</name></expr></argument>, <argument pos:start="511:27" pos:end="511:30"><expr pos:start="511:27" pos:end="511:30"><name pos:start="511:27" pos:end="511:30">R_FS</name></expr></argument>, <argument pos:start="511:33" pos:end="511:46"><expr pos:start="511:33" pos:end="511:46"><name pos:start="511:33" pos:end="511:46"><name pos:start="511:33" pos:end="511:40">new_segs</name><index pos:start="511:41" pos:end="511:46">[<expr pos:start="511:42" pos:end="511:45"><name pos:start="511:42" pos:end="511:45">R_FS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="513:9" pos:end="513:48"><expr pos:start="513:9" pos:end="513:47"><call pos:start="513:9" pos:end="513:47"><name pos:start="513:9" pos:end="513:20">tss_load_seg</name><argument_list pos:start="513:21" pos:end="513:47">(<argument pos:start="513:22" pos:end="513:24"><expr pos:start="513:22" pos:end="513:24"><name pos:start="513:22" pos:end="513:24">env</name></expr></argument>, <argument pos:start="513:27" pos:end="513:30"><expr pos:start="513:27" pos:end="513:30"><name pos:start="513:27" pos:end="513:30">R_GS</name></expr></argument>, <argument pos:start="513:33" pos:end="513:46"><expr pos:start="513:33" pos:end="513:46"><name pos:start="513:33" pos:end="513:46"><name pos:start="513:33" pos:end="513:40">new_segs</name><index pos:start="513:41" pos:end="513:46">[<expr pos:start="513:42" pos:end="513:45"><name pos:start="513:42" pos:end="513:45">R_GS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="519:5" pos:end="519:57">/* check that env-&gt;eip is in the CS segment limits */</comment>

    <if_stmt pos:start="521:5" pos:end="532:0"><if pos:start="521:5" pos:end="532:0">if <condition pos:start="521:8" pos:end="521:40">(<expr pos:start="521:9" pos:end="521:39"><name pos:start="521:9" pos:end="521:15">new_eip</name> <operator pos:start="521:17" pos:end="521:17">&gt;</operator> <name pos:start="521:19" pos:end="521:33"><name pos:start="521:19" pos:end="521:21">env</name><operator pos:start="521:22" pos:end="521:23">-&gt;</operator><name pos:start="521:24" pos:end="521:27">segs</name><index pos:start="521:28" pos:end="521:33">[<expr pos:start="521:29" pos:end="521:32"><name pos:start="521:29" pos:end="521:32">R_CS</name></expr>]</index></name><operator pos:start="521:34" pos:end="521:34">.</operator><name pos:start="521:35" pos:end="521:39">limit</name></expr>)</condition> <block pos:start="521:42" pos:end="532:0">{<block_content pos:start="525:9" pos:end="525:48">

        <comment type="block" pos:start="523:9" pos:end="523:47">/* XXX: different exception if CALL? */</comment>

        <expr_stmt pos:start="525:9" pos:end="525:48"><expr pos:start="525:9" pos:end="525:47"><call pos:start="525:9" pos:end="525:47"><name pos:start="525:9" pos:end="525:27">raise_exception_err</name><argument_list pos:start="525:28" pos:end="525:47">(<argument pos:start="525:29" pos:end="525:31"><expr pos:start="525:29" pos:end="525:31"><name pos:start="525:29" pos:end="525:31">env</name></expr></argument>, <argument pos:start="525:34" pos:end="525:43"><expr pos:start="525:34" pos:end="525:43"><name pos:start="525:34" pos:end="525:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="525:46" pos:end="525:46"><expr pos:start="525:46" pos:end="525:46"><literal type="number" pos:start="525:46" pos:end="525:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifndef pos:start="531:1" pos:end="531:24">#<cpp:directive pos:start="531:2" pos:end="531:7">ifndef</cpp:directive> <name pos:start="531:9" pos:end="531:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <comment type="block" pos:start="533:5" pos:end="533:33">/* reset local breakpoints */</comment>

    <if_stmt pos:start="535:5" pos:end="554:0"><if pos:start="535:5" pos:end="554:0">if <condition pos:start="535:8" pos:end="535:39">(<expr pos:start="535:9" pos:end="535:38"><name pos:start="535:9" pos:end="535:18"><name pos:start="535:9" pos:end="535:11">env</name><operator pos:start="535:12" pos:end="535:13">-&gt;</operator><name pos:start="535:14" pos:end="535:15">dr</name><index pos:start="535:16" pos:end="535:18">[<expr pos:start="535:17" pos:end="535:17"><literal type="number" pos:start="535:17" pos:end="535:17">7</literal></expr>]</index></name> <operator pos:start="535:20" pos:end="535:20">&amp;</operator> <name pos:start="535:22" pos:end="535:38">DR7_LOCAL_BP_MASK</name></expr>)</condition> <block pos:start="535:41" pos:end="554:0">{<block_content pos:start="537:9" pos:end="549:41">

        <for pos:start="537:9" pos:end="547:9">for <control pos:start="537:13" pos:end="537:40">(<init pos:start="537:14" pos:end="537:19"><expr pos:start="537:14" pos:end="537:18"><name pos:start="537:14" pos:end="537:14">i</name> <operator pos:start="537:16" pos:end="537:16">=</operator> <literal type="number" pos:start="537:18" pos:end="537:18">0</literal></expr>;</init> <condition pos:start="537:21" pos:end="537:35"><expr pos:start="537:21" pos:end="537:34"><name pos:start="537:21" pos:end="537:21">i</name> <operator pos:start="537:23" pos:end="537:23">&lt;</operator> <name pos:start="537:25" pos:end="537:34">DR7_MAX_BP</name></expr>;</condition> <incr pos:start="537:37" pos:end="537:39"><expr pos:start="537:37" pos:end="537:39"><name pos:start="537:37" pos:end="537:37">i</name><operator pos:start="537:38" pos:end="537:39">++</operator></expr></incr>)</control> <block pos:start="537:42" pos:end="547:9">{<block_content pos:start="539:13" pos:end="545:13">

            <if_stmt pos:start="539:13" pos:end="545:13"><if pos:start="539:13" pos:end="545:13">if <condition pos:start="539:16" pos:end="541:61">(<expr pos:start="539:17" pos:end="541:60"><call pos:start="539:17" pos:end="539:58"><name pos:start="539:17" pos:end="539:43">hw_local_breakpoint_enabled</name><argument_list pos:start="539:44" pos:end="539:58">(<argument pos:start="539:45" pos:end="539:54"><expr pos:start="539:45" pos:end="539:54"><name pos:start="539:45" pos:end="539:54"><name pos:start="539:45" pos:end="539:47">env</name><operator pos:start="539:48" pos:end="539:49">-&gt;</operator><name pos:start="539:50" pos:end="539:51">dr</name><index pos:start="539:52" pos:end="539:54">[<expr pos:start="539:53" pos:end="539:53"><literal type="number" pos:start="539:53" pos:end="539:53">7</literal></expr>]</index></name></expr></argument>, <argument pos:start="539:57" pos:end="539:57"><expr pos:start="539:57" pos:end="539:57"><name pos:start="539:57" pos:end="539:57">i</name></expr></argument>)</argument_list></call> <operator pos:start="539:60" pos:end="539:61">&amp;&amp;</operator>

                <operator pos:start="541:17" pos:end="541:17">!</operator><call pos:start="541:18" pos:end="541:60"><name pos:start="541:18" pos:end="541:45">hw_global_breakpoint_enabled</name><argument_list pos:start="541:46" pos:end="541:60">(<argument pos:start="541:47" pos:end="541:56"><expr pos:start="541:47" pos:end="541:56"><name pos:start="541:47" pos:end="541:56"><name pos:start="541:47" pos:end="541:49">env</name><operator pos:start="541:50" pos:end="541:51">-&gt;</operator><name pos:start="541:52" pos:end="541:53">dr</name><index pos:start="541:54" pos:end="541:56">[<expr pos:start="541:55" pos:end="541:55"><literal type="number" pos:start="541:55" pos:end="541:55">7</literal></expr>]</index></name></expr></argument>, <argument pos:start="541:59" pos:end="541:59"><expr pos:start="541:59" pos:end="541:59"><name pos:start="541:59" pos:end="541:59">i</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="541:63" pos:end="545:13">{<block_content pos:start="543:17" pos:end="543:45">

                <expr_stmt pos:start="543:17" pos:end="543:45"><expr pos:start="543:17" pos:end="543:44"><call pos:start="543:17" pos:end="543:44"><name pos:start="543:17" pos:end="543:36">hw_breakpoint_remove</name><argument_list pos:start="543:37" pos:end="543:44">(<argument pos:start="543:38" pos:end="543:40"><expr pos:start="543:38" pos:end="543:40"><name pos:start="543:38" pos:end="543:40">env</name></expr></argument>, <argument pos:start="543:43" pos:end="543:43"><expr pos:start="543:43" pos:end="543:43"><name pos:start="543:43" pos:end="543:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="549:9" pos:end="549:41"><expr pos:start="549:9" pos:end="549:40"><name pos:start="549:9" pos:end="549:18"><name pos:start="549:9" pos:end="549:11">env</name><operator pos:start="549:12" pos:end="549:13">-&gt;</operator><name pos:start="549:14" pos:end="549:15">dr</name><index pos:start="549:16" pos:end="549:18">[<expr pos:start="549:17" pos:end="549:17"><literal type="number" pos:start="549:17" pos:end="549:17">7</literal></expr>]</index></name> <operator pos:start="549:20" pos:end="549:21">&amp;=</operator> <operator pos:start="549:23" pos:end="549:23">~</operator><name pos:start="549:24" pos:end="549:40">DR7_LOCAL_BP_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="553:1" pos:end="553:6">#<cpp:directive pos:start="553:2" pos:end="553:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
