<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3851.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:38">qemu_tcg_rr_cpu_thread_fn</name><parameter_list pos:start="1:39" pos:end="1:49">(<parameter pos:start="1:40" pos:end="1:48"><decl pos:start="1:40" pos:end="1:48"><type pos:start="1:40" pos:end="1:45"><name pos:start="1:40" pos:end="1:43">void</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="173:1">{<block_content pos:start="5:5" pos:end="171:16">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:23">= <expr pos:start="5:21" pos:end="5:23"><name pos:start="5:21" pos:end="5:23">arg</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:26"><expr pos:start="9:5" pos:end="9:25"><call pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">rcu_register_thread</name><argument_list pos:start="9:24" pos:end="9:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><call pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:28">qemu_mutex_lock_iothread</name><argument_list pos:start="13:29" pos:end="13:30">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:38"><expr pos:start="15:5" pos:end="15:37"><call pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:24">qemu_thread_get_self</name><argument_list pos:start="15:25" pos:end="15:37">(<argument pos:start="15:26" pos:end="15:36"><expr pos:start="15:26" pos:end="15:36"><name pos:start="15:26" pos:end="15:36"><name pos:start="15:26" pos:end="15:28">cpu</name><operator pos:start="15:29" pos:end="15:30">-&gt;</operator><name pos:start="15:31" pos:end="15:36">thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:15">CPU_FOREACH</name><argument_list pos:start="19:16" pos:end="19:20">(<argument pos:start="19:17" pos:end="19:19">cpu</argument>)</argument_list></macro> <block pos:start="19:22" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:27">

        <expr_stmt pos:start="21:9" pos:end="21:46"><expr pos:start="21:9" pos:end="21:45"><name pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:11">cpu</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:22">thread_id</name></name> <operator pos:start="21:24" pos:end="21:24">=</operator> <call pos:start="21:26" pos:end="21:45"><name pos:start="21:26" pos:end="21:43">qemu_get_thread_id</name><argument_list pos:start="21:44" pos:end="21:45">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:11">cpu</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:20">created</name></name> <operator pos:start="23:22" pos:end="23:22">=</operator> <name pos:start="23:24" pos:end="23:27">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:11">cpu</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:22">can_do_io</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <literal type="number" pos:start="25:26" pos:end="25:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="29:5" pos:end="29:37"><expr pos:start="29:5" pos:end="29:36"><call pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:20">qemu_cond_signal</name><argument_list pos:start="29:21" pos:end="29:36">(<argument pos:start="29:22" pos:end="29:35"><expr pos:start="29:22" pos:end="29:35"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:35">qemu_cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:55">/* wait for initial kick-off after machine start */</comment>

    <while pos:start="35:5" pos:end="51:5">while <condition pos:start="35:11" pos:end="35:30">(<expr pos:start="35:12" pos:end="35:29"><name pos:start="35:12" pos:end="35:29"><name pos:start="35:12" pos:end="35:20">first_cpu</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:29">stopped</name></name></expr>)</condition> <block pos:start="35:32" pos:end="51:5">{<block_content pos:start="37:9" pos:end="49:9">

        <expr_stmt pos:start="37:9" pos:end="37:65"><expr pos:start="37:9" pos:end="37:64"><call pos:start="37:9" pos:end="37:64"><name pos:start="37:9" pos:end="37:22">qemu_cond_wait</name><argument_list pos:start="37:23" pos:end="37:64">(<argument pos:start="37:24" pos:end="37:43"><expr pos:start="37:24" pos:end="37:43"><name pos:start="37:24" pos:end="37:43"><name pos:start="37:24" pos:end="37:32">first_cpu</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:43">halt_cond</name></name></expr></argument>, <argument pos:start="37:46" pos:end="37:63"><expr pos:start="37:46" pos:end="37:63"><operator pos:start="37:46" pos:end="37:46">&amp;</operator><name pos:start="37:47" pos:end="37:63">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="41:38">/* process any pending work */</comment>

        <macro pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:19">CPU_FOREACH</name><argument_list pos:start="43:20" pos:end="43:24">(<argument pos:start="43:21" pos:end="43:23">cpu</argument>)</argument_list></macro> <block pos:start="43:26" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:43">

            <expr_stmt pos:start="45:13" pos:end="45:30"><expr pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:23">current_cpu</name> <operator pos:start="45:25" pos:end="45:25">=</operator> <name pos:start="45:27" pos:end="45:29">cpu</name></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:43"><expr pos:start="47:13" pos:end="47:42"><call pos:start="47:13" pos:end="47:42"><name pos:start="47:13" pos:end="47:37">qemu_wait_io_event_common</name><argument_list pos:start="47:38" pos:end="47:42">(<argument pos:start="47:39" pos:end="47:41"><expr pos:start="47:39" pos:end="47:41"><name pos:start="47:39" pos:end="47:41">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

    </block_content>}</block></while>



    <expr_stmt pos:start="55:5" pos:end="55:27"><expr pos:start="55:5" pos:end="55:26"><call pos:start="55:5" pos:end="55:26"><name pos:start="55:5" pos:end="55:24">start_tcg_kick_timer</name><argument_list pos:start="55:25" pos:end="55:26">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:20"><expr pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:7">cpu</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <name pos:start="59:11" pos:end="59:19">first_cpu</name></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:34">/* process any pending work */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:26"><expr pos:start="65:5" pos:end="65:25"><name pos:start="65:5" pos:end="65:21"><name pos:start="65:5" pos:end="65:7">cpu</name><operator pos:start="65:8" pos:end="65:9">-&gt;</operator><name pos:start="65:10" pos:end="65:21">exit_request</name></name> <operator pos:start="65:23" pos:end="65:23">=</operator> <literal type="number" pos:start="65:25" pos:end="65:25">1</literal></expr>;</expr_stmt>



    <while pos:start="69:5" pos:end="167:5">while <condition pos:start="69:11" pos:end="69:13">(<expr pos:start="69:12" pos:end="69:12"><literal type="number" pos:start="69:12" pos:end="69:12">1</literal></expr>)</condition> <block pos:start="69:15" pos:end="167:5">{<block_content pos:start="73:9" pos:end="165:35">

        <comment type="block" pos:start="71:9" pos:end="71:59">/* Account partial waits to QEMU_CLOCK_VIRTUAL.  */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:34"><expr pos:start="73:9" pos:end="73:33"><call pos:start="73:9" pos:end="73:33"><name pos:start="73:9" pos:end="73:31">qemu_account_warp_timer</name><argument_list pos:start="73:32" pos:end="73:33">()</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:17">(<expr pos:start="77:13" pos:end="77:16"><operator pos:start="77:13" pos:end="77:13">!</operator><name pos:start="77:14" pos:end="77:16">cpu</name></expr>)</condition> <block pos:start="77:19" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:28">

            <expr_stmt pos:start="79:13" pos:end="79:28"><expr pos:start="79:13" pos:end="79:27"><name pos:start="79:13" pos:end="79:15">cpu</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:27">first_cpu</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <while pos:start="85:9" pos:end="141:9">while <condition pos:start="85:15" pos:end="85:68">(<expr pos:start="85:16" pos:end="85:67"><name pos:start="85:16" pos:end="85:18">cpu</name> <operator pos:start="85:20" pos:end="85:21">&amp;&amp;</operator> <operator pos:start="85:23" pos:end="85:23">!</operator><name pos:start="85:24" pos:end="85:45"><name pos:start="85:24" pos:end="85:26">cpu</name><operator pos:start="85:27" pos:end="85:28">-&gt;</operator><name pos:start="85:29" pos:end="85:45">queued_work_first</name></name> <operator pos:start="85:47" pos:end="85:48">&amp;&amp;</operator> <operator pos:start="85:50" pos:end="85:50">!</operator><name pos:start="85:51" pos:end="85:67"><name pos:start="85:51" pos:end="85:53">cpu</name><operator pos:start="85:54" pos:end="85:55">-&gt;</operator><name pos:start="85:56" pos:end="85:67">exit_request</name></name></expr>)</condition> <block pos:start="85:70" pos:end="141:9">{<block_content pos:start="89:13" pos:end="139:32">



            <expr_stmt pos:start="89:13" pos:end="89:52"><expr pos:start="89:13" pos:end="89:51"><call pos:start="89:13" pos:end="89:51"><name pos:start="89:13" pos:end="89:25">atomic_mb_set</name><argument_list pos:start="89:26" pos:end="89:51">(<argument pos:start="89:27" pos:end="89:45"><expr pos:start="89:27" pos:end="89:45"><operator pos:start="89:27" pos:end="89:27">&amp;</operator><name pos:start="89:28" pos:end="89:45">tcg_current_rr_cpu</name></expr></argument>, <argument pos:start="89:48" pos:end="89:50"><expr pos:start="89:48" pos:end="89:50"><name pos:start="89:48" pos:end="89:50">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:30"><expr pos:start="91:13" pos:end="91:29"><name pos:start="91:13" pos:end="91:23">current_cpu</name> <operator pos:start="91:25" pos:end="91:25">=</operator> <name pos:start="91:27" pos:end="91:29">cpu</name></expr>;</expr_stmt>



            <expr_stmt pos:start="95:13" pos:end="97:78"><expr pos:start="95:13" pos:end="97:77"><call pos:start="95:13" pos:end="97:77"><name pos:start="95:13" pos:end="95:29">qemu_clock_enable</name><argument_list pos:start="95:30" pos:end="97:77">(<argument pos:start="95:31" pos:end="95:48"><expr pos:start="95:31" pos:end="95:48"><name pos:start="95:31" pos:end="95:48">QEMU_CLOCK_VIRTUAL</name></expr></argument>,

                              <argument pos:start="97:31" pos:end="97:76"><expr pos:start="97:31" pos:end="97:76"><operator pos:start="97:31" pos:end="97:31">(</operator><name pos:start="97:32" pos:end="97:54"><name pos:start="97:32" pos:end="97:34">cpu</name><operator pos:start="97:35" pos:end="97:36">-&gt;</operator><name pos:start="97:37" pos:end="97:54">singlestep_enabled</name></name> <operator pos:start="97:56" pos:end="97:56">&amp;</operator> <name pos:start="97:58" pos:end="97:70">SSTEP_NOTIMER</name><operator pos:start="97:71" pos:end="97:71">)</operator> <operator pos:start="97:73" pos:end="97:74">==</operator> <literal type="number" pos:start="97:76" pos:end="97:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="101:13" pos:end="135:13"><if pos:start="101:13" pos:end="125:13">if <condition pos:start="101:16" pos:end="101:33">(<expr pos:start="101:17" pos:end="101:32"><call pos:start="101:17" pos:end="101:32"><name pos:start="101:17" pos:end="101:27">cpu_can_run</name><argument_list pos:start="101:28" pos:end="101:32">(<argument pos:start="101:29" pos:end="101:31"><expr pos:start="101:29" pos:end="101:31"><name pos:start="101:29" pos:end="101:31">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:35" pos:end="125:13">{<block_content pos:start="103:17" pos:end="123:17">

                <decl_stmt pos:start="103:17" pos:end="103:22"><decl pos:start="103:17" pos:end="103:21"><type pos:start="103:17" pos:end="103:19"><name pos:start="103:17" pos:end="103:19">int</name></type> <name pos:start="103:21" pos:end="103:21">r</name></decl>;</decl_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:38"><expr pos:start="105:17" pos:end="105:37"><name pos:start="105:17" pos:end="105:17">r</name> <operator pos:start="105:19" pos:end="105:19">=</operator> <call pos:start="105:21" pos:end="105:37"><name pos:start="105:21" pos:end="105:32">tcg_cpu_exec</name><argument_list pos:start="105:33" pos:end="105:37">(<argument pos:start="105:34" pos:end="105:36"><expr pos:start="105:34" pos:end="105:36"><name pos:start="105:34" pos:end="105:36">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="107:17" pos:end="123:17"><if pos:start="107:17" pos:end="113:17">if <condition pos:start="107:20" pos:end="107:36">(<expr pos:start="107:21" pos:end="107:35"><name pos:start="107:21" pos:end="107:21">r</name> <operator pos:start="107:23" pos:end="107:24">==</operator> <name pos:start="107:26" pos:end="107:35">EXCP_DEBUG</name></expr>)</condition> <block pos:start="107:38" pos:end="113:17">{<block_content pos:start="109:21" pos:end="111:26">

                    <expr_stmt pos:start="109:21" pos:end="109:48"><expr pos:start="109:21" pos:end="109:47"><call pos:start="109:21" pos:end="109:47"><name pos:start="109:21" pos:end="109:42">cpu_handle_guest_debug</name><argument_list pos:start="109:43" pos:end="109:47">(<argument pos:start="109:44" pos:end="109:46"><expr pos:start="109:44" pos:end="109:46"><name pos:start="109:44" pos:end="109:46">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="111:21" pos:end="111:26">break;</break>

                </block_content>}</block></if> <if type="elseif" pos:start="113:19" pos:end="123:17">else if <condition pos:start="113:27" pos:end="113:44">(<expr pos:start="113:28" pos:end="113:43"><name pos:start="113:28" pos:end="113:28">r</name> <operator pos:start="113:30" pos:end="113:31">==</operator> <name pos:start="113:33" pos:end="113:43">EXCP_ATOMIC</name></expr>)</condition> <block pos:start="113:46" pos:end="123:17">{<block_content pos:start="115:21" pos:end="121:26">

                    <expr_stmt pos:start="115:21" pos:end="115:49"><expr pos:start="115:21" pos:end="115:48"><call pos:start="115:21" pos:end="115:48"><name pos:start="115:21" pos:end="115:46">qemu_mutex_unlock_iothread</name><argument_list pos:start="115:47" pos:end="115:48">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="117:21" pos:end="117:46"><expr pos:start="117:21" pos:end="117:45"><call pos:start="117:21" pos:end="117:45"><name pos:start="117:21" pos:end="117:40">cpu_exec_step_atomic</name><argument_list pos:start="117:41" pos:end="117:45">(<argument pos:start="117:42" pos:end="117:44"><expr pos:start="117:42" pos:end="117:44"><name pos:start="117:42" pos:end="117:44">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:47"><expr pos:start="119:21" pos:end="119:46"><call pos:start="119:21" pos:end="119:46"><name pos:start="119:21" pos:end="119:44">qemu_mutex_lock_iothread</name><argument_list pos:start="119:45" pos:end="119:46">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="121:21" pos:end="121:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="125:15" pos:end="135:13">else if <condition pos:start="125:23" pos:end="125:33">(<expr pos:start="125:24" pos:end="125:32"><name pos:start="125:24" pos:end="125:32"><name pos:start="125:24" pos:end="125:26">cpu</name><operator pos:start="125:27" pos:end="125:28">-&gt;</operator><name pos:start="125:29" pos:end="125:32">stop</name></name></expr>)</condition> <block pos:start="125:35" pos:end="135:13">{<block_content pos:start="127:17" pos:end="133:22">

                <if_stmt pos:start="127:17" pos:end="131:17"><if pos:start="127:17" pos:end="131:17">if <condition pos:start="127:20" pos:end="127:32">(<expr pos:start="127:21" pos:end="127:31"><name pos:start="127:21" pos:end="127:31"><name pos:start="127:21" pos:end="127:23">cpu</name><operator pos:start="127:24" pos:end="127:25">-&gt;</operator><name pos:start="127:26" pos:end="127:31">unplug</name></name></expr>)</condition> <block pos:start="127:34" pos:end="131:17">{<block_content pos:start="129:21" pos:end="129:40">

                    <expr_stmt pos:start="129:21" pos:end="129:40"><expr pos:start="129:21" pos:end="129:39"><name pos:start="129:21" pos:end="129:23">cpu</name> <operator pos:start="129:25" pos:end="129:25">=</operator> <call pos:start="129:27" pos:end="129:39"><name pos:start="129:27" pos:end="129:34">CPU_NEXT</name><argument_list pos:start="129:35" pos:end="129:39">(<argument pos:start="129:36" pos:end="129:38"><expr pos:start="129:36" pos:end="129:38"><name pos:start="129:36" pos:end="129:38">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="133:17" pos:end="133:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="139:13" pos:end="139:32"><expr pos:start="139:13" pos:end="139:31"><name pos:start="139:13" pos:end="139:15">cpu</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <call pos:start="139:19" pos:end="139:31"><name pos:start="139:19" pos:end="139:26">CPU_NEXT</name><argument_list pos:start="139:27" pos:end="139:31">(<argument pos:start="139:28" pos:end="139:30"><expr pos:start="139:28" pos:end="139:30"><name pos:start="139:28" pos:end="139:30">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while> <comment type="block" pos:start="141:11" pos:end="141:51">/* while (cpu &amp;&amp; !cpu-&gt;exit_request).. */</comment>



        <comment type="block" pos:start="145:9" pos:end="145:77">/* Does not need atomic_mb_set because a spurious wakeup is okay.  */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:46"><expr pos:start="147:9" pos:end="147:45"><call pos:start="147:9" pos:end="147:45"><name pos:start="147:9" pos:end="147:18">atomic_set</name><argument_list pos:start="147:19" pos:end="147:45">(<argument pos:start="147:20" pos:end="147:38"><expr pos:start="147:20" pos:end="147:38"><operator pos:start="147:20" pos:end="147:20">&amp;</operator><name pos:start="147:21" pos:end="147:38">tcg_current_rr_cpu</name></expr></argument>, <argument pos:start="147:41" pos:end="147:44"><expr pos:start="147:41" pos:end="147:44"><name pos:start="147:41" pos:end="147:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="151:9" pos:end="155:9"><if pos:start="151:9" pos:end="155:9">if <condition pos:start="151:12" pos:end="151:37">(<expr pos:start="151:13" pos:end="151:36"><name pos:start="151:13" pos:end="151:15">cpu</name> <operator pos:start="151:17" pos:end="151:18">&amp;&amp;</operator> <name pos:start="151:20" pos:end="151:36"><name pos:start="151:20" pos:end="151:22">cpu</name><operator pos:start="151:23" pos:end="151:24">-&gt;</operator><name pos:start="151:25" pos:end="151:36">exit_request</name></name></expr>)</condition> <block pos:start="151:39" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:49">

            <expr_stmt pos:start="153:13" pos:end="153:49"><expr pos:start="153:13" pos:end="153:48"><call pos:start="153:13" pos:end="153:48"><name pos:start="153:13" pos:end="153:25">atomic_mb_set</name><argument_list pos:start="153:26" pos:end="153:48">(<argument pos:start="153:27" pos:end="153:44"><expr pos:start="153:27" pos:end="153:44"><operator pos:start="153:27" pos:end="153:27">&amp;</operator><name pos:start="153:28" pos:end="153:44"><name pos:start="153:28" pos:end="153:30">cpu</name><operator pos:start="153:31" pos:end="153:32">-&gt;</operator><name pos:start="153:33" pos:end="153:44">exit_request</name></name></expr></argument>, <argument pos:start="153:47" pos:end="153:47"><expr pos:start="153:47" pos:end="153:47"><literal type="number" pos:start="153:47" pos:end="153:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:33"><expr pos:start="159:9" pos:end="159:32"><call pos:start="159:9" pos:end="159:32"><name pos:start="159:9" pos:end="159:30">handle_icount_deadline</name><argument_list pos:start="159:31" pos:end="159:32">()</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="163:9" pos:end="163:64"><expr pos:start="163:9" pos:end="163:63"><call pos:start="163:9" pos:end="163:63"><name pos:start="163:9" pos:end="163:30">qemu_tcg_wait_io_event</name><argument_list pos:start="163:31" pos:end="163:63">(<argument pos:start="163:32" pos:end="163:62"><expr pos:start="163:32" pos:end="163:62"><ternary pos:start="163:32" pos:end="163:62"><condition pos:start="163:32" pos:end="163:36"><expr pos:start="163:32" pos:end="163:34"><name pos:start="163:32" pos:end="163:34">cpu</name></expr> ?</condition><then pos:start="163:38" pos:end="163:40"> <expr pos:start="163:38" pos:end="163:40"><name pos:start="163:38" pos:end="163:40">cpu</name></expr> </then><else pos:start="163:42" pos:end="163:62">: <expr pos:start="163:44" pos:end="163:62"><call pos:start="163:44" pos:end="163:62"><name pos:start="163:44" pos:end="163:55">QTAILQ_FIRST</name><argument_list pos:start="163:56" pos:end="163:62">(<argument pos:start="163:57" pos:end="163:61"><expr pos:start="163:57" pos:end="163:61"><operator pos:start="163:57" pos:end="163:57">&amp;</operator><name pos:start="163:58" pos:end="163:61">cpus</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:35"><expr pos:start="165:9" pos:end="165:34"><call pos:start="165:9" pos:end="165:34"><name pos:start="165:9" pos:end="165:32">deal_with_unplugged_cpus</name><argument_list pos:start="165:33" pos:end="165:34">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="171:5" pos:end="171:16">return <expr pos:start="171:12" pos:end="171:15"><name pos:start="171:12" pos:end="171:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
