<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5818.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:16">helper_lswx</name><parameter_list pos:start="1:17" pos:end="3:42">(<parameter pos:start="1:18" pos:end="1:33"><decl pos:start="1:18" pos:end="1:33"><type pos:start="1:18" pos:end="1:33"><name pos:start="1:18" pos:end="1:28">CPUPPCState</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:33">env</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:52"><decl pos:start="1:36" pos:end="1:52"><type pos:start="1:36" pos:end="1:52"><name pos:start="1:36" pos:end="1:47">target_ulong</name></type> <name pos:start="1:49" pos:end="1:52">addr</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:62">uint32_t</name></type> <name pos:start="1:64" pos:end="1:66">reg</name></decl></parameter>,

                 <parameter pos:start="3:18" pos:end="3:28"><decl pos:start="3:18" pos:end="3:28"><type pos:start="3:18" pos:end="3:28"><name pos:start="3:18" pos:end="3:25">uint32_t</name></type> <name pos:start="3:27" pos:end="3:28">ra</name></decl></parameter>, <parameter pos:start="3:31" pos:end="3:41"><decl pos:start="3:31" pos:end="3:41"><type pos:start="3:31" pos:end="3:41"><name pos:start="3:31" pos:end="3:38">uint32_t</name></type> <name pos:start="3:40" pos:end="3:41">rb</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="29:1">{<block_content pos:start="7:5" pos:end="27:5">

    <if_stmt pos:start="7:5" pos:end="27:5"><if pos:start="7:5" pos:end="27:5">if <condition pos:start="7:8" pos:end="7:28">(<expr pos:start="7:9" pos:end="7:27"><call pos:start="7:9" pos:end="7:27"><name pos:start="7:9" pos:end="7:14">likely</name><argument_list pos:start="7:15" pos:end="7:27">(<argument pos:start="7:16" pos:end="7:26"><expr pos:start="7:16" pos:end="7:26"><name pos:start="7:16" pos:end="7:21">xer_bc</name> <operator pos:start="7:23" pos:end="7:24">!=</operator> <literal type="number" pos:start="7:26" pos:end="7:26">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7:30" pos:end="27:5">{<block_content pos:start="9:9" pos:end="25:9">

        <decl_stmt pos:start="9:9" pos:end="9:45"><decl pos:start="9:9" pos:end="9:44"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:25">num_used_regs</name> <init pos:start="9:27" pos:end="9:44">= <expr pos:start="9:29" pos:end="9:44"><operator pos:start="9:29" pos:end="9:29">(</operator><name pos:start="9:30" pos:end="9:35">xer_bc</name> <operator pos:start="9:37" pos:end="9:37">+</operator> <literal type="number" pos:start="9:39" pos:end="9:39">3</literal><operator pos:start="9:40" pos:end="9:40">)</operator> <operator pos:start="9:42" pos:end="9:42">/</operator> <literal type="number" pos:start="9:44" pos:end="9:44">4</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="11:9" pos:end="25:9"><if pos:start="11:9" pos:end="21:9">if <condition pos:start="11:12" pos:end="13:63">(<expr pos:start="11:13" pos:end="13:62"><call pos:start="11:13" pos:end="13:62"><name pos:start="11:13" pos:end="11:20">unlikely</name><argument_list pos:start="11:21" pos:end="13:62">(<argument pos:start="11:22" pos:end="13:61"><expr pos:start="11:22" pos:end="13:61"><operator pos:start="11:22" pos:end="11:22">(</operator><name pos:start="11:23" pos:end="11:24">ra</name> <operator pos:start="11:26" pos:end="11:27">!=</operator> <literal type="number" pos:start="11:29" pos:end="11:29">0</literal> <operator pos:start="11:31" pos:end="11:32">&amp;&amp;</operator> <name pos:start="11:34" pos:end="11:68"><name pos:start="11:34" pos:end="11:36">reg</name> <argument_list type="generic" pos:start="11:38" pos:end="11:68">&lt; <argument pos:start="11:40" pos:end="11:66"><expr pos:start="11:40" pos:end="11:66"><name pos:start="11:40" pos:end="11:41">ra</name> <operator pos:start="11:43" pos:end="11:44">&amp;&amp;</operator> <operator pos:start="11:46" pos:end="11:46">(</operator><name pos:start="11:47" pos:end="11:49">reg</name> <operator pos:start="11:51" pos:end="11:51">+</operator> <name pos:start="11:53" pos:end="11:65">num_used_regs</name><operator pos:start="11:66" pos:end="11:66">)</operator></expr></argument> &gt;</argument_list></name> <name pos:start="11:70" pos:end="11:71">ra</name><operator pos:start="11:72" pos:end="11:72">)</operator> <operator pos:start="11:74" pos:end="11:75">||</operator>

                     <operator pos:start="13:22" pos:end="13:22">(</operator><name pos:start="13:23" pos:end="13:57"><name pos:start="13:23" pos:end="13:25">reg</name> <argument_list type="generic" pos:start="13:27" pos:end="13:57">&lt; <argument pos:start="13:29" pos:end="13:55"><expr pos:start="13:29" pos:end="13:55"><name pos:start="13:29" pos:end="13:30">rb</name> <operator pos:start="13:32" pos:end="13:33">&amp;&amp;</operator> <operator pos:start="13:35" pos:end="13:35">(</operator><name pos:start="13:36" pos:end="13:38">reg</name> <operator pos:start="13:40" pos:end="13:40">+</operator> <name pos:start="13:42" pos:end="13:54">num_used_regs</name><operator pos:start="13:55" pos:end="13:55">)</operator></expr></argument> &gt;</argument_list></name> <name pos:start="13:59" pos:end="13:60">rb</name><operator pos:start="13:61" pos:end="13:61">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:65" pos:end="21:9">{<block_content pos:start="15:13" pos:end="19:64">

            <expr_stmt pos:start="15:13" pos:end="19:64"><expr pos:start="15:13" pos:end="19:63"><call pos:start="15:13" pos:end="19:63"><name pos:start="15:13" pos:end="15:38">helper_raise_exception_err</name><argument_list pos:start="15:39" pos:end="19:63">(<argument pos:start="15:40" pos:end="15:42"><expr pos:start="15:40" pos:end="15:42"><name pos:start="15:40" pos:end="15:42">env</name></expr></argument>, <argument pos:start="15:45" pos:end="15:64"><expr pos:start="15:45" pos:end="15:64"><name pos:start="15:45" pos:end="15:64">POWERPC_EXCP_PROGRAM</name></expr></argument>,

                                       <argument pos:start="17:40" pos:end="19:62"><expr pos:start="17:40" pos:end="19:62"><name pos:start="17:40" pos:end="17:57">POWERPC_EXCP_INVAL</name> <operator pos:start="17:59" pos:end="17:59">|</operator>

                                       <name pos:start="19:40" pos:end="19:62">POWERPC_EXCP_INVAL_LSWX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="21:11" pos:end="25:9">else <block pos:start="21:16" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:47">

            <expr_stmt pos:start="23:13" pos:end="23:47"><expr pos:start="23:13" pos:end="23:46"><call pos:start="23:13" pos:end="23:46"><name pos:start="23:13" pos:end="23:22">helper_lsw</name><argument_list pos:start="23:23" pos:end="23:46">(<argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:26">env</name></expr></argument>, <argument pos:start="23:29" pos:end="23:32"><expr pos:start="23:29" pos:end="23:32"><name pos:start="23:29" pos:end="23:32">addr</name></expr></argument>, <argument pos:start="23:35" pos:end="23:40"><expr pos:start="23:35" pos:end="23:40"><name pos:start="23:35" pos:end="23:40">xer_bc</name></expr></argument>, <argument pos:start="23:43" pos:end="23:45"><expr pos:start="23:43" pos:end="23:45"><name pos:start="23:43" pos:end="23:45">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
