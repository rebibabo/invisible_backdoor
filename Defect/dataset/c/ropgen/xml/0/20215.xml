<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20215.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">qmp_blockdev_change_medium</name><parameter_list pos:start="1:32" pos:end="13:45">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:36">bool</name></type> <name pos:start="1:38" pos:end="1:47">has_device</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:67"><decl pos:start="1:50" pos:end="1:67"><type pos:start="1:50" pos:end="1:67"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:59">char</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:67">device</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:43"><decl pos:start="3:33" pos:end="3:43"><type pos:start="3:33" pos:end="3:43"><name pos:start="3:33" pos:end="3:36">bool</name></type> <name pos:start="3:38" pos:end="3:43">has_id</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:59"><decl pos:start="3:46" pos:end="3:59"><type pos:start="3:46" pos:end="3:59"><specifier pos:start="3:46" pos:end="3:50">const</specifier> <name pos:start="3:52" pos:end="3:55">char</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:59">id</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:52"><decl pos:start="5:33" pos:end="5:52"><type pos:start="5:33" pos:end="5:52"><specifier pos:start="5:33" pos:end="5:37">const</specifier> <name pos:start="5:39" pos:end="5:42">char</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:52">filename</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:47"><decl pos:start="7:33" pos:end="7:47"><type pos:start="7:33" pos:end="7:47"><name pos:start="7:33" pos:end="7:36">bool</name></type> <name pos:start="7:38" pos:end="7:47">has_format</name></decl></parameter>, <parameter pos:start="7:50" pos:end="7:67"><decl pos:start="7:50" pos:end="7:67"><type pos:start="7:50" pos:end="7:67"><specifier pos:start="7:50" pos:end="7:54">const</specifier> <name pos:start="7:56" pos:end="7:59">char</name> <modifier pos:start="7:61" pos:end="7:61">*</modifier></type><name pos:start="7:62" pos:end="7:67">format</name></decl></parameter>,

                                <parameter pos:start="9:33" pos:end="9:50"><decl pos:start="9:33" pos:end="9:50"><type pos:start="9:33" pos:end="9:50"><name pos:start="9:33" pos:end="9:36">bool</name></type> <name pos:start="9:38" pos:end="9:50">has_read_only</name></decl></parameter>,

                                <parameter pos:start="11:33" pos:end="11:68"><decl pos:start="11:33" pos:end="11:68"><type pos:start="11:33" pos:end="11:68"><name pos:start="11:33" pos:end="11:58">BlockdevChangeReadOnlyMode</name></type> <name pos:start="11:60" pos:end="11:68">read_only</name></decl></parameter>,

                                <parameter pos:start="13:33" pos:end="13:44"><decl pos:start="13:33" pos:end="13:44"><type pos:start="13:33" pos:end="13:44"><name pos:start="13:33" pos:end="13:37">Error</name> <modifier pos:start="13:39" pos:end="13:39">*</modifier><modifier pos:start="13:40" pos:end="13:40">*</modifier></type><name pos:start="13:41" pos:end="13:44">errp</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="195:1">{<block_content pos:start="17:5" pos:end="193:26">

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">BlockBackend</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:39"><decl pos:start="19:5" pos:end="19:38"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">BlockDriverState</name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:31">medium_bs</name> <init pos:start="19:33" pos:end="19:38">= <expr pos:start="19:35" pos:end="19:38"><name pos:start="19:35" pos:end="19:38">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:18">bdrv_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:11"><decl pos:start="23:5" pos:end="23:10"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:9">QDict</name> <modifier pos:start="25:11" pos:end="25:11">*</modifier></type><name pos:start="25:12" pos:end="25:18">options</name> <init pos:start="25:20" pos:end="25:25">= <expr pos:start="25:22" pos:end="25:25"><name pos:start="25:22" pos:end="25:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:9">Error</name> <modifier pos:start="27:11" pos:end="27:11">*</modifier></type><name pos:start="27:12" pos:end="27:14">err</name> <init pos:start="27:16" pos:end="27:21">= <expr pos:start="27:18" pos:end="27:21"><name pos:start="27:18" pos:end="27:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="35:28"><expr pos:start="31:5" pos:end="35:27"><name pos:start="31:5" pos:end="31:7">blk</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="35:27"><name pos:start="31:11" pos:end="31:21">qmp_get_blk</name><argument_list pos:start="31:22" pos:end="35:27">(<argument pos:start="31:23" pos:end="31:48"><expr pos:start="31:23" pos:end="31:48"><ternary pos:start="31:23" pos:end="31:48"><condition pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:32"><name pos:start="31:23" pos:end="31:32">has_device</name></expr> ?</condition><then pos:start="31:36" pos:end="31:41"> <expr pos:start="31:36" pos:end="31:41"><name pos:start="31:36" pos:end="31:41">device</name></expr> </then><else pos:start="31:43" pos:end="31:48">: <expr pos:start="31:45" pos:end="31:48"><name pos:start="31:45" pos:end="31:48">NULL</name></expr></else></ternary></expr></argument>,

                      <argument pos:start="33:23" pos:end="33:40"><expr pos:start="33:23" pos:end="33:40"><ternary pos:start="33:23" pos:end="33:40"><condition pos:start="33:23" pos:end="33:30"><expr pos:start="33:23" pos:end="33:28"><name pos:start="33:23" pos:end="33:28">has_id</name></expr> ?</condition><then pos:start="33:32" pos:end="33:33"> <expr pos:start="33:32" pos:end="33:33"><name pos:start="33:32" pos:end="33:33">id</name></expr> </then><else pos:start="33:35" pos:end="33:40">: <expr pos:start="33:37" pos:end="33:40"><name pos:start="33:37" pos:end="33:40">NULL</name></expr></else></ternary></expr></argument>,

                      <argument pos:start="35:23" pos:end="35:26"><expr pos:start="35:23" pos:end="35:26"><name pos:start="35:23" pos:end="35:26">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:13">(<expr pos:start="37:9" pos:end="37:12"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:12">blk</name></expr>)</condition> <block pos:start="37:15" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:18">

        <goto pos:start="39:9" pos:end="39:18">goto <name pos:start="39:14" pos:end="39:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:20">(<expr pos:start="45:9" pos:end="45:19"><call pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:14">blk_bs</name><argument_list pos:start="45:15" pos:end="45:19">(<argument pos:start="45:16" pos:end="45:18"><expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:22" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:35">

        <expr_stmt pos:start="47:9" pos:end="47:35"><expr pos:start="47:9" pos:end="47:34"><call pos:start="47:9" pos:end="47:34"><name pos:start="47:9" pos:end="47:29">blk_update_root_state</name><argument_list pos:start="47:30" pos:end="47:34">(<argument pos:start="47:31" pos:end="47:33"><expr pos:start="47:31" pos:end="47:33"><name pos:start="47:31" pos:end="47:33">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:57"><expr pos:start="53:5" pos:end="53:56"><name pos:start="53:5" pos:end="53:14">bdrv_flags</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:56"><name pos:start="53:18" pos:end="53:51">blk_get_open_flags_from_root_state</name><argument_list pos:start="53:52" pos:end="53:56">(<argument pos:start="53:53" pos:end="53:55"><expr pos:start="53:53" pos:end="53:55"><name pos:start="53:53" pos:end="53:55">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="57:25"><expr pos:start="55:5" pos:end="57:24"><name pos:start="55:5" pos:end="55:14">bdrv_flags</name> <operator pos:start="55:16" pos:end="55:17">&amp;=</operator> <operator pos:start="55:19" pos:end="55:19">~</operator><operator pos:start="55:20" pos:end="55:20">(</operator><name pos:start="55:21" pos:end="55:36">BDRV_O_TEMPORARY</name> <operator pos:start="55:38" pos:end="55:38">|</operator> <name pos:start="55:40" pos:end="55:54">BDRV_O_SNAPSHOT</name> <operator pos:start="55:56" pos:end="55:56">|</operator> <name pos:start="55:58" pos:end="55:74">BDRV_O_NO_BACKING</name> <operator pos:start="55:76" pos:end="55:76">|</operator>

        <name pos:start="57:9" pos:end="57:23">BDRV_O_PROTOCOL</name><operator pos:start="57:24" pos:end="57:24">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:23">(<expr pos:start="61:9" pos:end="61:22"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:22">has_read_only</name></expr>)</condition> <block pos:start="61:25" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:58">

        <expr_stmt pos:start="63:9" pos:end="63:58"><expr pos:start="63:9" pos:end="63:57"><name pos:start="63:9" pos:end="63:17">read_only</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:57">BLOCKDEV_CHANGE_READ_ONLY_MODE_RETAIN</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="69:5" pos:end="97:5">switch <condition pos:start="69:12" pos:end="69:22">(<expr pos:start="69:13" pos:end="69:21"><name pos:start="69:13" pos:end="69:21">read_only</name></expr>)</condition> <block pos:start="69:24" pos:end="97:5">{<block_content pos:start="71:5" pos:end="95:16">

    <case pos:start="71:5" pos:end="71:47">case <expr pos:start="71:10" pos:end="71:46"><name pos:start="71:10" pos:end="71:46">BLOCKDEV_CHANGE_READ_ONLY_MODE_RETAIN</name></expr>:</case>

        <break pos:start="73:9" pos:end="73:14">break;</break>



    <case pos:start="77:5" pos:end="77:50">case <expr pos:start="77:10" pos:end="77:49"><name pos:start="77:10" pos:end="77:49">BLOCKDEV_CHANGE_READ_ONLY_MODE_READ_ONLY</name></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:35"><expr pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:18">bdrv_flags</name> <operator pos:start="79:20" pos:end="79:21">&amp;=</operator> <operator pos:start="79:23" pos:end="79:23">~</operator><name pos:start="79:24" pos:end="79:34">BDRV_O_RDWR</name></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>



    <case pos:start="85:5" pos:end="85:51">case <expr pos:start="85:10" pos:end="85:50"><name pos:start="85:10" pos:end="85:50">BLOCKDEV_CHANGE_READ_ONLY_MODE_READ_WRITE</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:34"><expr pos:start="87:9" pos:end="87:33"><name pos:start="87:9" pos:end="87:18">bdrv_flags</name> <operator pos:start="87:20" pos:end="87:21">|=</operator> <name pos:start="87:23" pos:end="87:33">BDRV_O_RDWR</name></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>



    <default pos:start="93:5" pos:end="93:12">default:</default>

        <expr_stmt pos:start="95:9" pos:end="95:16"><expr pos:start="95:9" pos:end="95:15"><call pos:start="95:9" pos:end="95:15"><name pos:start="95:9" pos:end="95:13">abort</name><argument_list pos:start="95:14" pos:end="95:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:19">(<expr pos:start="101:9" pos:end="101:18"><name pos:start="101:9" pos:end="101:18">has_format</name></expr>)</condition> <block pos:start="101:21" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:63">

        <expr_stmt pos:start="103:9" pos:end="103:30"><expr pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:15">options</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <call pos:start="103:19" pos:end="103:29"><name pos:start="103:19" pos:end="103:27">qdict_new</name><argument_list pos:start="103:28" pos:end="103:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:63"><expr pos:start="105:9" pos:end="105:62"><call pos:start="105:9" pos:end="105:62"><name pos:start="105:9" pos:end="105:17">qdict_put</name><argument_list pos:start="105:18" pos:end="105:62">(<argument pos:start="105:19" pos:end="105:25"><expr pos:start="105:19" pos:end="105:25"><name pos:start="105:19" pos:end="105:25">options</name></expr></argument>, <argument pos:start="105:28" pos:end="105:35"><expr pos:start="105:28" pos:end="105:35"><literal type="string" pos:start="105:28" pos:end="105:35">"driver"</literal></expr></argument>, <argument pos:start="105:38" pos:end="105:61"><expr pos:start="105:38" pos:end="105:61"><call pos:start="105:38" pos:end="105:61"><name pos:start="105:38" pos:end="105:53">qstring_from_str</name><argument_list pos:start="105:54" pos:end="105:61">(<argument pos:start="105:55" pos:end="105:60"><expr pos:start="105:55" pos:end="105:60"><name pos:start="105:55" pos:end="105:60">format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:69"><expr pos:start="111:5" pos:end="111:68"><name pos:start="111:5" pos:end="111:13">medium_bs</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <call pos:start="111:17" pos:end="111:68"><name pos:start="111:17" pos:end="111:25">bdrv_open</name><argument_list pos:start="111:26" pos:end="111:68">(<argument pos:start="111:27" pos:end="111:34"><expr pos:start="111:27" pos:end="111:34"><name pos:start="111:27" pos:end="111:34">filename</name></expr></argument>, <argument pos:start="111:37" pos:end="111:40"><expr pos:start="111:37" pos:end="111:40"><name pos:start="111:37" pos:end="111:40">NULL</name></expr></argument>, <argument pos:start="111:43" pos:end="111:49"><expr pos:start="111:43" pos:end="111:49"><name pos:start="111:43" pos:end="111:49">options</name></expr></argument>, <argument pos:start="111:52" pos:end="111:61"><expr pos:start="111:52" pos:end="111:61"><name pos:start="111:52" pos:end="111:61">bdrv_flags</name></expr></argument>, <argument pos:start="111:64" pos:end="111:67"><expr pos:start="111:64" pos:end="111:67"><name pos:start="111:64" pos:end="111:67">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="117:5"><if pos:start="113:5" pos:end="117:5">if <condition pos:start="113:8" pos:end="113:19">(<expr pos:start="113:9" pos:end="113:18"><operator pos:start="113:9" pos:end="113:9">!</operator><name pos:start="113:10" pos:end="113:18">medium_bs</name></expr>)</condition> <block pos:start="113:21" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:18">

        <goto pos:start="115:9" pos:end="115:18">goto <name pos:start="115:14" pos:end="115:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:40"><expr pos:start="121:5" pos:end="121:39"><call pos:start="121:5" pos:end="121:39"><name pos:start="121:5" pos:end="121:16">bdrv_add_key</name><argument_list pos:start="121:17" pos:end="121:39">(<argument pos:start="121:18" pos:end="121:26"><expr pos:start="121:18" pos:end="121:26"><name pos:start="121:18" pos:end="121:26">medium_bs</name></expr></argument>, <argument pos:start="121:29" pos:end="121:32"><expr pos:start="121:29" pos:end="121:32"><name pos:start="121:29" pos:end="121:32">NULL</name></expr></argument>, <argument pos:start="121:35" pos:end="121:38"><expr pos:start="121:35" pos:end="121:38"><operator pos:start="121:35" pos:end="121:35">&amp;</operator><name pos:start="121:36" pos:end="121:38">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="129:5"><if pos:start="123:5" pos:end="129:5">if <condition pos:start="123:8" pos:end="123:12">(<expr pos:start="123:9" pos:end="123:11"><name pos:start="123:9" pos:end="123:11">err</name></expr>)</condition> <block pos:start="123:14" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:18">

        <expr_stmt pos:start="125:9" pos:end="125:35"><expr pos:start="125:9" pos:end="125:34"><call pos:start="125:9" pos:end="125:34"><name pos:start="125:9" pos:end="125:23">error_propagate</name><argument_list pos:start="125:24" pos:end="125:34">(<argument pos:start="125:25" pos:end="125:28"><expr pos:start="125:25" pos:end="125:28"><name pos:start="125:25" pos:end="125:28">errp</name></expr></argument>, <argument pos:start="125:31" pos:end="125:33"><expr pos:start="125:31" pos:end="125:33"><name pos:start="125:31" pos:end="125:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="127:9" pos:end="127:18">goto <name pos:start="127:14" pos:end="127:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="137:35"><expr pos:start="133:5" pos:end="137:34"><name pos:start="133:5" pos:end="133:6">rc</name> <operator pos:start="133:8" pos:end="133:8">=</operator> <call pos:start="133:10" pos:end="137:34"><name pos:start="133:10" pos:end="133:21">do_open_tray</name><argument_list pos:start="133:22" pos:end="137:34">(<argument pos:start="133:23" pos:end="133:48"><expr pos:start="133:23" pos:end="133:48"><ternary pos:start="133:23" pos:end="133:48"><condition pos:start="133:23" pos:end="133:34"><expr pos:start="133:23" pos:end="133:32"><name pos:start="133:23" pos:end="133:32">has_device</name></expr> ?</condition><then pos:start="133:36" pos:end="133:41"> <expr pos:start="133:36" pos:end="133:41"><name pos:start="133:36" pos:end="133:41">device</name></expr> </then><else pos:start="133:43" pos:end="133:48">: <expr pos:start="133:45" pos:end="133:48"><name pos:start="133:45" pos:end="133:48">NULL</name></expr></else></ternary></expr></argument>,

                      <argument pos:start="135:23" pos:end="135:40"><expr pos:start="135:23" pos:end="135:40"><ternary pos:start="135:23" pos:end="135:40"><condition pos:start="135:23" pos:end="135:30"><expr pos:start="135:23" pos:end="135:28"><name pos:start="135:23" pos:end="135:28">has_id</name></expr> ?</condition><then pos:start="135:32" pos:end="135:33"> <expr pos:start="135:32" pos:end="135:33"><name pos:start="135:32" pos:end="135:33">id</name></expr> </then><else pos:start="135:35" pos:end="135:40">: <expr pos:start="135:37" pos:end="135:40"><name pos:start="135:37" pos:end="135:40">NULL</name></expr></else></ternary></expr></argument>,

                      <argument pos:start="137:23" pos:end="137:27"><expr pos:start="137:23" pos:end="137:27"><name pos:start="137:23" pos:end="137:27">false</name></expr></argument>, <argument pos:start="137:30" pos:end="137:33"><expr pos:start="137:30" pos:end="137:33"><operator pos:start="137:30" pos:end="137:30">&amp;</operator><name pos:start="137:31" pos:end="137:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:28">(<expr pos:start="139:9" pos:end="139:27"><name pos:start="139:9" pos:end="139:10">rc</name> <operator pos:start="139:12" pos:end="139:13">&amp;&amp;</operator> <name pos:start="139:15" pos:end="139:16">rc</name> <operator pos:start="139:18" pos:end="139:19">!=</operator> <operator pos:start="139:21" pos:end="139:21">-</operator><name pos:start="139:22" pos:end="139:27">ENOSYS</name></expr>)</condition> <block pos:start="139:30" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:18">

        <expr_stmt pos:start="141:9" pos:end="141:35"><expr pos:start="141:9" pos:end="141:34"><call pos:start="141:9" pos:end="141:34"><name pos:start="141:9" pos:end="141:23">error_propagate</name><argument_list pos:start="141:24" pos:end="141:34">(<argument pos:start="141:25" pos:end="141:28"><expr pos:start="141:25" pos:end="141:28"><name pos:start="141:25" pos:end="141:28">errp</name></expr></argument>, <argument pos:start="141:31" pos:end="141:33"><expr pos:start="141:31" pos:end="141:33"><name pos:start="141:31" pos:end="141:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="143:9" pos:end="143:18">goto <name pos:start="143:14" pos:end="143:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:20"><expr pos:start="147:5" pos:end="147:19"><call pos:start="147:5" pos:end="147:19"><name pos:start="147:5" pos:end="147:14">error_free</name><argument_list pos:start="147:15" pos:end="147:19">(<argument pos:start="147:16" pos:end="147:18"><expr pos:start="147:16" pos:end="147:18"><name pos:start="147:16" pos:end="147:18">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:15"><expr pos:start="149:5" pos:end="149:14"><name pos:start="149:5" pos:end="149:7">err</name> <operator pos:start="149:9" pos:end="149:9">=</operator> <name pos:start="149:11" pos:end="149:14">NULL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:71"><expr pos:start="153:5" pos:end="153:70"><call pos:start="153:5" pos:end="153:70"><name pos:start="153:5" pos:end="153:32">qmp_x_blockdev_remove_medium</name><argument_list pos:start="153:33" pos:end="153:70">(<argument pos:start="153:34" pos:end="153:43"><expr pos:start="153:34" pos:end="153:43"><name pos:start="153:34" pos:end="153:43">has_device</name></expr></argument>, <argument pos:start="153:46" pos:end="153:51"><expr pos:start="153:46" pos:end="153:51"><name pos:start="153:46" pos:end="153:51">device</name></expr></argument>, <argument pos:start="153:54" pos:end="153:59"><expr pos:start="153:54" pos:end="153:59"><name pos:start="153:54" pos:end="153:59">has_id</name></expr></argument>, <argument pos:start="153:62" pos:end="153:63"><expr pos:start="153:62" pos:end="153:63"><name pos:start="153:62" pos:end="153:63">id</name></expr></argument>, <argument pos:start="153:66" pos:end="153:69"><expr pos:start="153:66" pos:end="153:69"><operator pos:start="153:66" pos:end="153:66">&amp;</operator><name pos:start="153:67" pos:end="153:69">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="161:5"><if pos:start="155:5" pos:end="161:5">if <condition pos:start="155:8" pos:end="155:12">(<expr pos:start="155:9" pos:end="155:11"><name pos:start="155:9" pos:end="155:11">err</name></expr>)</condition> <block pos:start="155:14" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:18">

        <expr_stmt pos:start="157:9" pos:end="157:35"><expr pos:start="157:9" pos:end="157:34"><call pos:start="157:9" pos:end="157:34"><name pos:start="157:9" pos:end="157:23">error_propagate</name><argument_list pos:start="157:24" pos:end="157:34">(<argument pos:start="157:25" pos:end="157:28"><expr pos:start="157:25" pos:end="157:28"><name pos:start="157:25" pos:end="157:28">errp</name></expr></argument>, <argument pos:start="157:31" pos:end="157:33"><expr pos:start="157:31" pos:end="157:33"><name pos:start="157:31" pos:end="157:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="159:9" pos:end="159:18">goto <name pos:start="159:14" pos:end="159:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:58"><expr pos:start="165:5" pos:end="165:57"><call pos:start="165:5" pos:end="165:57"><name pos:start="165:5" pos:end="165:35">qmp_blockdev_insert_anon_medium</name><argument_list pos:start="165:36" pos:end="165:57">(<argument pos:start="165:37" pos:end="165:39"><expr pos:start="165:37" pos:end="165:39"><name pos:start="165:37" pos:end="165:39">blk</name></expr></argument>, <argument pos:start="165:42" pos:end="165:50"><expr pos:start="165:42" pos:end="165:50"><name pos:start="165:42" pos:end="165:50">medium_bs</name></expr></argument>, <argument pos:start="165:53" pos:end="165:56"><expr pos:start="165:53" pos:end="165:56"><operator pos:start="165:53" pos:end="165:53">&amp;</operator><name pos:start="165:54" pos:end="165:56">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="173:5"><if pos:start="167:5" pos:end="173:5">if <condition pos:start="167:8" pos:end="167:12">(<expr pos:start="167:9" pos:end="167:11"><name pos:start="167:9" pos:end="167:11">err</name></expr>)</condition> <block pos:start="167:14" pos:end="173:5">{<block_content pos:start="169:9" pos:end="171:18">

        <expr_stmt pos:start="169:9" pos:end="169:35"><expr pos:start="169:9" pos:end="169:34"><call pos:start="169:9" pos:end="169:34"><name pos:start="169:9" pos:end="169:23">error_propagate</name><argument_list pos:start="169:24" pos:end="169:34">(<argument pos:start="169:25" pos:end="169:28"><expr pos:start="169:25" pos:end="169:28"><name pos:start="169:25" pos:end="169:28">errp</name></expr></argument>, <argument pos:start="169:31" pos:end="169:33"><expr pos:start="169:31" pos:end="169:33"><name pos:start="169:31" pos:end="169:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="171:9" pos:end="171:18">goto <name pos:start="171:14" pos:end="171:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:41"><expr pos:start="177:5" pos:end="177:40"><call pos:start="177:5" pos:end="177:40"><name pos:start="177:5" pos:end="177:24">blk_apply_root_state</name><argument_list pos:start="177:25" pos:end="177:40">(<argument pos:start="177:26" pos:end="177:28"><expr pos:start="177:26" pos:end="177:28"><name pos:start="177:26" pos:end="177:28">blk</name></expr></argument>, <argument pos:start="177:31" pos:end="177:39"><expr pos:start="177:31" pos:end="177:39"><name pos:start="177:31" pos:end="177:39">medium_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:66"><expr pos:start="181:5" pos:end="181:65"><call pos:start="181:5" pos:end="181:65"><name pos:start="181:5" pos:end="181:27">qmp_blockdev_close_tray</name><argument_list pos:start="181:28" pos:end="181:65">(<argument pos:start="181:29" pos:end="181:38"><expr pos:start="181:29" pos:end="181:38"><name pos:start="181:29" pos:end="181:38">has_device</name></expr></argument>, <argument pos:start="181:41" pos:end="181:46"><expr pos:start="181:41" pos:end="181:46"><name pos:start="181:41" pos:end="181:46">device</name></expr></argument>, <argument pos:start="181:49" pos:end="181:54"><expr pos:start="181:49" pos:end="181:54"><name pos:start="181:49" pos:end="181:54">has_id</name></expr></argument>, <argument pos:start="181:57" pos:end="181:58"><expr pos:start="181:57" pos:end="181:58"><name pos:start="181:57" pos:end="181:58">id</name></expr></argument>, <argument pos:start="181:61" pos:end="181:64"><expr pos:start="181:61" pos:end="181:64"><name pos:start="181:61" pos:end="181:64">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="185:1" pos:end="185:5"><name pos:start="185:1" pos:end="185:4">fail</name>:</label>

    <comment type="block" pos:start="187:5" pos:end="191:51">/* If the medium has been inserted, the device has its own reference, so

     * ours must be relinquished; and if it has not been inserted successfully,

     * the reference must be relinquished anyway */</comment>

    <expr_stmt pos:start="193:5" pos:end="193:26"><expr pos:start="193:5" pos:end="193:25"><call pos:start="193:5" pos:end="193:25"><name pos:start="193:5" pos:end="193:14">bdrv_unref</name><argument_list pos:start="193:15" pos:end="193:25">(<argument pos:start="193:16" pos:end="193:24"><expr pos:start="193:16" pos:end="193:24"><name pos:start="193:16" pos:end="193:24">medium_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
