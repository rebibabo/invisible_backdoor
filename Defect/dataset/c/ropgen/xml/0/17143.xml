<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17143.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">qemu_laio_completion_cb</name><parameter_list pos:start="1:36" pos:end="1:49">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:5">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:26">qemu_laio_state</name></name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:29">s</name> <init pos:start="5:31" pos:end="5:38">= <expr pos:start="5:33" pos:end="5:38"><name pos:start="5:33" pos:end="5:38">opaque</name></expr></init></decl>;</decl_stmt>



    <while pos:start="9:5" pos:end="67:5">while <condition pos:start="9:11" pos:end="9:13">(<expr pos:start="9:12" pos:end="9:12"><literal type="number" pos:start="9:12" pos:end="9:12">1</literal></expr>)</condition> <block pos:start="9:15" pos:end="67:5">{<block_content pos:start="11:9" pos:end="65:9">

        <decl_stmt pos:start="11:9" pos:end="11:43"><decl pos:start="11:9" pos:end="11:42"><type pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:14">struct</name> <name pos:start="11:16" pos:end="11:23">io_event</name></name></type> <name pos:start="11:25" pos:end="11:42"><name pos:start="11:25" pos:end="11:30">events</name><index pos:start="11:31" pos:end="11:42">[<expr pos:start="11:32" pos:end="11:41"><name pos:start="11:32" pos:end="11:41">MAX_EVENTS</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:21"><decl pos:start="13:9" pos:end="13:20"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">uint64_t</name></type> <name pos:start="13:18" pos:end="13:20">val</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:20"><decl pos:start="15:9" pos:end="15:19"><type pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:15">ssize_t</name></type> <name pos:start="15:17" pos:end="15:19">ret</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:35"><decl pos:start="17:9" pos:end="17:34"><type pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:14">struct</name> <name pos:start="17:16" pos:end="17:23">timespec</name></name></type> <name pos:start="17:25" pos:end="17:26">ts</name> <init pos:start="17:28" pos:end="17:34">= <expr pos:start="17:30" pos:end="17:34"><block pos:start="17:30" pos:end="17:34">{ <expr pos:start="17:32" pos:end="17:32"><literal type="number" pos:start="17:32" pos:end="17:32">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:23"><decl pos:start="19:9" pos:end="19:19"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:19">nevents</name></decl>, <decl pos:start="19:22" pos:end="19:22"><type ref="prev" pos:start="19:9" pos:end="19:11"/><name pos:start="19:22" pos:end="19:22">i</name></decl>;</decl_stmt>



        <do pos:start="23:9" pos:end="27:45">do <block pos:start="23:12" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:50">

            <expr_stmt pos:start="25:13" pos:end="25:50"><expr pos:start="25:13" pos:end="25:49"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:49"><name pos:start="25:19" pos:end="25:22">read</name><argument_list pos:start="25:23" pos:end="25:49">(<argument pos:start="25:24" pos:end="25:29"><expr pos:start="25:24" pos:end="25:29"><name pos:start="25:24" pos:end="25:29"><name pos:start="25:24" pos:end="25:24">s</name><operator pos:start="25:25" pos:end="25:26">-&gt;</operator><name pos:start="25:27" pos:end="25:29">efd</name></name></expr></argument>, <argument pos:start="25:32" pos:end="25:35"><expr pos:start="25:32" pos:end="25:35"><operator pos:start="25:32" pos:end="25:32">&amp;</operator><name pos:start="25:33" pos:end="25:35">val</name></expr></argument>, <argument pos:start="25:38" pos:end="25:48"><expr pos:start="25:38" pos:end="25:48"><sizeof pos:start="25:38" pos:end="25:48">sizeof<argument_list pos:start="25:44" pos:end="25:48">(<argument pos:start="25:45" pos:end="25:47"><expr pos:start="25:45" pos:end="25:47"><name pos:start="25:45" pos:end="25:47">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="27:17" pos:end="27:44">(<expr pos:start="27:18" pos:end="27:43"><name pos:start="27:18" pos:end="27:20">ret</name> <operator pos:start="27:22" pos:end="27:23">==</operator> <literal type="number" pos:start="27:25" pos:end="27:25">1</literal> <operator pos:start="27:27" pos:end="27:28">&amp;&amp;</operator> <name pos:start="27:30" pos:end="27:34">errno</name> <operator pos:start="27:36" pos:end="27:37">==</operator> <name pos:start="27:39" pos:end="27:43">EINTR</name></expr>)</condition>;</do>



        <if_stmt pos:start="31:9" pos:end="33:18"><if pos:start="31:9" pos:end="33:18">if <condition pos:start="31:12" pos:end="31:41">(<expr pos:start="31:13" pos:end="31:40"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:18">==</operator> <operator pos:start="31:20" pos:end="31:20">-</operator><literal type="number" pos:start="31:21" pos:end="31:21">1</literal> <operator pos:start="31:23" pos:end="31:24">&amp;&amp;</operator> <name pos:start="31:26" pos:end="31:30">errno</name> <operator pos:start="31:32" pos:end="31:33">==</operator> <name pos:start="31:35" pos:end="31:40">EAGAIN</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:18"><block_content pos:start="33:13" pos:end="33:18">

            <break pos:start="33:13" pos:end="33:18">break;</break></block_content></block></if></if_stmt>



        <if_stmt pos:start="37:9" pos:end="39:18"><if pos:start="37:9" pos:end="39:18">if <condition pos:start="37:12" pos:end="37:21">(<expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:15">ret</name> <operator pos:start="37:17" pos:end="37:18">!=</operator> <literal type="number" pos:start="37:20" pos:end="37:20">8</literal></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:18"><block_content pos:start="39:13" pos:end="39:18">

            <break pos:start="39:13" pos:end="39:18">break;</break></block_content></block></if></if_stmt>



        <do pos:start="43:9" pos:end="47:36">do <block pos:start="43:12" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:73">

            <expr_stmt pos:start="45:13" pos:end="45:73"><expr pos:start="45:13" pos:end="45:72"><name pos:start="45:13" pos:end="45:19">nevents</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <call pos:start="45:23" pos:end="45:72"><name pos:start="45:23" pos:end="45:34">io_getevents</name><argument_list pos:start="45:35" pos:end="45:72">(<argument pos:start="45:36" pos:end="45:41"><expr pos:start="45:36" pos:end="45:41"><name pos:start="45:36" pos:end="45:41"><name pos:start="45:36" pos:end="45:36">s</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:41">ctx</name></name></expr></argument>, <argument pos:start="45:44" pos:end="45:46"><expr pos:start="45:44" pos:end="45:46"><name pos:start="45:44" pos:end="45:46">val</name></expr></argument>, <argument pos:start="45:49" pos:end="45:58"><expr pos:start="45:49" pos:end="45:58"><name pos:start="45:49" pos:end="45:58">MAX_EVENTS</name></expr></argument>, <argument pos:start="45:61" pos:end="45:66"><expr pos:start="45:61" pos:end="45:66"><name pos:start="45:61" pos:end="45:66">events</name></expr></argument>, <argument pos:start="45:69" pos:end="45:71"><expr pos:start="45:69" pos:end="45:71"><operator pos:start="45:69" pos:end="45:69">&amp;</operator><name pos:start="45:70" pos:end="45:71">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="47:17" pos:end="47:35">(<expr pos:start="47:18" pos:end="47:34"><name pos:start="47:18" pos:end="47:24">nevents</name> <operator pos:start="47:26" pos:end="47:27">==</operator> <operator pos:start="47:29" pos:end="47:29">-</operator><name pos:start="47:30" pos:end="47:34">EINTR</name></expr>)</condition>;</do>



        <for pos:start="51:9" pos:end="65:9">for <control pos:start="51:13" pos:end="51:37">(<init pos:start="51:14" pos:end="51:19"><expr pos:start="51:14" pos:end="51:18"><name pos:start="51:14" pos:end="51:14">i</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <literal type="number" pos:start="51:18" pos:end="51:18">0</literal></expr>;</init> <condition pos:start="51:21" pos:end="51:32"><expr pos:start="51:21" pos:end="51:31"><name pos:start="51:21" pos:end="51:21">i</name> <operator pos:start="51:23" pos:end="51:23">&lt;</operator> <name pos:start="51:25" pos:end="51:31">nevents</name></expr>;</condition> <incr pos:start="51:34" pos:end="51:36"><expr pos:start="51:34" pos:end="51:36"><name pos:start="51:34" pos:end="51:34">i</name><operator pos:start="51:35" pos:end="51:36">++</operator></expr></incr>)</control> <block pos:start="51:39" pos:end="65:9">{<block_content pos:start="53:13" pos:end="63:51">

            <decl_stmt pos:start="53:13" pos:end="53:46"><decl pos:start="53:13" pos:end="53:45"><type pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:18">struct</name> <name pos:start="53:20" pos:end="53:23">iocb</name></name> <modifier pos:start="53:25" pos:end="53:25">*</modifier></type><name pos:start="53:26" pos:end="53:29">iocb</name> <init pos:start="53:31" pos:end="53:45">= <expr pos:start="53:33" pos:end="53:45"><name pos:start="53:33" pos:end="53:41"><name pos:start="53:33" pos:end="53:38">events</name><index pos:start="53:39" pos:end="53:41">[<expr pos:start="53:40" pos:end="53:40"><name pos:start="53:40" pos:end="53:40">i</name></expr>]</index></name><operator pos:start="53:42" pos:end="53:42">.</operator><name pos:start="53:43" pos:end="53:45">obj</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="55:13" pos:end="57:65"><decl pos:start="55:13" pos:end="57:64"><type pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:30"><name pos:start="55:13" pos:end="55:18">struct</name> <name pos:start="55:20" pos:end="55:30">qemu_laiocb</name></name> <modifier pos:start="55:32" pos:end="55:32">*</modifier></type><name pos:start="55:33" pos:end="55:38">laiocb</name> <init pos:start="55:40" pos:end="57:64">=

                    <expr pos:start="57:21" pos:end="57:64"><call pos:start="57:21" pos:end="57:64"><name pos:start="57:21" pos:end="57:32">container_of</name><argument_list pos:start="57:33" pos:end="57:64">(<argument pos:start="57:34" pos:end="57:37"><expr pos:start="57:34" pos:end="57:37"><name pos:start="57:34" pos:end="57:37">iocb</name></expr></argument>, <argument pos:start="57:40" pos:end="57:57"><expr pos:start="57:40" pos:end="57:57">struct <name pos:start="57:47" pos:end="57:57">qemu_laiocb</name></expr></argument>, <argument pos:start="57:60" pos:end="57:63"><expr pos:start="57:60" pos:end="57:63"><name pos:start="57:60" pos:end="57:63">iocb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="61:13" pos:end="61:51"><expr pos:start="61:13" pos:end="61:50"><name pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:18">laiocb</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:23">ret</name></name> <operator pos:start="61:25" pos:end="61:25">=</operator> <call pos:start="61:27" pos:end="61:50"><name pos:start="61:27" pos:end="61:38">io_event_ret</name><argument_list pos:start="61:39" pos:end="61:50">(<argument pos:start="61:40" pos:end="61:49"><expr pos:start="61:40" pos:end="61:49"><operator pos:start="61:40" pos:end="61:40">&amp;</operator><name pos:start="61:41" pos:end="61:49"><name pos:start="61:41" pos:end="61:46">events</name><index pos:start="61:47" pos:end="61:49">[<expr pos:start="61:48" pos:end="61:48"><name pos:start="61:48" pos:end="61:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:51"><expr pos:start="63:13" pos:end="63:50"><call pos:start="63:13" pos:end="63:50"><name pos:start="63:13" pos:end="63:39">qemu_laio_enqueue_completed</name><argument_list pos:start="63:40" pos:end="63:50">(<argument pos:start="63:41" pos:end="63:41"><expr pos:start="63:41" pos:end="63:41"><name pos:start="63:41" pos:end="63:41">s</name></expr></argument>, <argument pos:start="63:44" pos:end="63:49"><expr pos:start="63:44" pos:end="63:49"><name pos:start="63:44" pos:end="63:49">laiocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
