<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20559.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">char</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:32">pcibus_get_dev_path</name><parameter_list pos:start="1:33" pos:end="1:50">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:44">DeviceState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:16">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">d</name> <init pos:start="5:18" pos:end="5:53">= <expr pos:start="5:20" pos:end="5:53"><call pos:start="5:20" pos:end="5:53"><name pos:start="5:20" pos:end="5:31">container_of</name><argument_list pos:start="5:32" pos:end="5:53">(<argument pos:start="5:33" pos:end="5:35"><expr pos:start="5:33" pos:end="5:35"><name pos:start="5:33" pos:end="5:35">dev</name></expr></argument>, <argument pos:start="5:38" pos:end="5:46"><expr pos:start="5:38" pos:end="5:46"><name pos:start="5:38" pos:end="5:46">PCIDevice</name></expr></argument>, <argument pos:start="5:49" pos:end="5:52"><expr pos:start="5:49" pos:end="5:52"><name pos:start="5:49" pos:end="5:52">qdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">PCIDevice</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">slot_depth</name></decl>;</decl_stmt>

    <comment type="block" pos:start="11:5" pos:end="19:63">/* Path format: Domain:00:Slot.Function:Slot.Function....:Slot.Function.

     * 00 is added here to make this format compatible with

     * domain:Bus:Slot.Func for systems without nested PCI bridges.

     * Slot.Function list specifies the slot and function numbers for all

     * devices on the path from root to the specific device. */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:39"><decl pos:start="21:5" pos:end="21:38"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:18">domain_len</name> <init pos:start="21:20" pos:end="21:38">= <expr pos:start="21:22" pos:end="21:38"><call pos:start="21:22" pos:end="21:38"><name pos:start="21:22" pos:end="21:27">strlen</name><argument_list pos:start="21:28" pos:end="21:38">(<argument pos:start="21:29" pos:end="21:37"><expr pos:start="21:29" pos:end="21:37"><literal type="string" pos:start="21:29" pos:end="21:37">"DDDD:00"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:35"><decl pos:start="23:5" pos:end="23:34"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:16">slot_len</name> <init pos:start="23:18" pos:end="23:34">= <expr pos:start="23:20" pos:end="23:34"><call pos:start="23:20" pos:end="23:34"><name pos:start="23:20" pos:end="23:25">strlen</name><argument_list pos:start="23:26" pos:end="23:34">(<argument pos:start="23:27" pos:end="23:33"><expr pos:start="23:27" pos:end="23:33"><literal type="string" pos:start="23:27" pos:end="23:33">":SS.F"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">path_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:14"><type pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:8">char</name> <modifier pos:start="27:10" pos:end="27:10">*</modifier></type><name pos:start="27:11" pos:end="27:14">path</name></decl>, <decl pos:start="27:17" pos:end="27:18"><type ref="prev" pos:start="27:5" pos:end="27:10"><modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:18">p</name></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:63">/* Calculate # of slots on path between device and root. */</comment><empty_stmt pos:start="31:64" pos:end="31:64">;</empty_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:14">slot_depth</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">0</literal></expr>;</expr_stmt>

    <for pos:start="35:5" pos:end="39:5">for <control pos:start="35:9" pos:end="35:42">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">t</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <name pos:start="35:14" pos:end="35:14">d</name></expr>;</init> <condition pos:start="35:17" pos:end="35:18"><expr pos:start="35:17" pos:end="35:17"><name pos:start="35:17" pos:end="35:17">t</name></expr>;</condition> <incr pos:start="35:20" pos:end="35:41"><expr pos:start="35:20" pos:end="35:41"><name pos:start="35:20" pos:end="35:20">t</name> <operator pos:start="35:22" pos:end="35:22">=</operator> <name pos:start="35:24" pos:end="35:41"><name pos:start="35:24" pos:end="35:24">t</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:29">bus</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:41">parent_dev</name></name></expr></incr>)</control> <block pos:start="35:44" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:21">

        <expr_stmt pos:start="37:9" pos:end="37:21"><expr pos:start="37:9" pos:end="37:20"><operator pos:start="37:9" pos:end="37:10">++</operator><name pos:start="37:11" pos:end="37:20">slot_depth</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="43:5" pos:end="43:50"><expr pos:start="43:5" pos:end="43:49"><name pos:start="43:5" pos:end="43:12">path_len</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <name pos:start="43:16" pos:end="43:25">domain_len</name> <operator pos:start="43:27" pos:end="43:27">+</operator> <name pos:start="43:29" pos:end="43:36">slot_len</name> <operator pos:start="43:38" pos:end="43:38">*</operator> <name pos:start="43:40" pos:end="43:49">slot_depth</name></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:61">/* Allocate memory, fill in the terminating null byte. */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:47"><expr pos:start="49:5" pos:end="49:46"><name pos:start="49:5" pos:end="49:8">path</name> <operator pos:start="49:10" pos:end="49:10">=</operator> <call pos:start="49:12" pos:end="49:46"><name pos:start="49:12" pos:end="49:17">malloc</name><argument_list pos:start="49:18" pos:end="49:46">(<argument pos:start="49:19" pos:end="49:30"><expr pos:start="49:19" pos:end="49:30"><name pos:start="49:19" pos:end="49:26">path_len</name> <operator pos:start="49:28" pos:end="49:28">+</operator> <literal type="number" pos:start="49:30" pos:end="49:30">1</literal></expr></argument> <comment type="block" pos:start="49:32" pos:end="49:45">/* For '\0' */</comment>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:26"><expr pos:start="51:5" pos:end="51:25"><name pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:8">path</name><index pos:start="51:9" pos:end="51:18">[<expr pos:start="51:10" pos:end="51:17"><name pos:start="51:10" pos:end="51:17">path_len</name></expr>]</index></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <literal type="char" pos:start="51:22" pos:end="51:25">'\0'</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:36">/* First field is the domain. */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:67"><expr pos:start="57:5" pos:end="57:66"><call pos:start="57:5" pos:end="57:66"><name pos:start="57:5" pos:end="57:12">snprintf</name><argument_list pos:start="57:13" pos:end="57:66">(<argument pos:start="57:14" pos:end="57:17"><expr pos:start="57:14" pos:end="57:17"><name pos:start="57:14" pos:end="57:17">path</name></expr></argument>, <argument pos:start="57:20" pos:end="57:29"><expr pos:start="57:20" pos:end="57:29"><name pos:start="57:20" pos:end="57:29">domain_len</name></expr></argument>, <argument pos:start="57:32" pos:end="57:40"><expr pos:start="57:32" pos:end="57:40"><literal type="string" pos:start="57:32" pos:end="57:40">"%04x:00"</literal></expr></argument>, <argument pos:start="57:43" pos:end="57:65"><expr pos:start="57:43" pos:end="57:65"><call pos:start="57:43" pos:end="57:65"><name pos:start="57:43" pos:end="57:57">pci_find_domain</name><argument_list pos:start="57:58" pos:end="57:65">(<argument pos:start="57:59" pos:end="57:64"><expr pos:start="57:59" pos:end="57:64"><name pos:start="57:59" pos:end="57:64"><name pos:start="57:59" pos:end="57:59">d</name><operator pos:start="57:60" pos:end="57:61">-&gt;</operator><name pos:start="57:62" pos:end="57:64">bus</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="63:51">/* Fill in slot numbers. We walk up from device to root, so need to print

     * them in the reverse order, last to first. */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:24"><expr pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:5">p</name> <operator pos:start="65:7" pos:end="65:7">=</operator> <name pos:start="65:9" pos:end="65:12">path</name> <operator pos:start="65:14" pos:end="65:14">+</operator> <name pos:start="65:16" pos:end="65:23">path_len</name></expr>;</expr_stmt>

    <for pos:start="67:5" pos:end="73:5">for <control pos:start="67:9" pos:end="67:42">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">t</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <name pos:start="67:14" pos:end="67:14">d</name></expr>;</init> <condition pos:start="67:17" pos:end="67:18"><expr pos:start="67:17" pos:end="67:17"><name pos:start="67:17" pos:end="67:17">t</name></expr>;</condition> <incr pos:start="67:20" pos:end="67:41"><expr pos:start="67:20" pos:end="67:41"><name pos:start="67:20" pos:end="67:20">t</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <name pos:start="67:24" pos:end="67:41"><name pos:start="67:24" pos:end="67:24">t</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:29">bus</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:41">parent_dev</name></name></expr></incr>)</control> <block pos:start="67:44" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:82">

        <expr_stmt pos:start="69:9" pos:end="69:22"><expr pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:9">p</name> <operator pos:start="69:11" pos:end="69:12">-=</operator> <name pos:start="69:14" pos:end="69:21">slot_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:82"><expr pos:start="71:9" pos:end="71:81"><call pos:start="71:9" pos:end="71:81"><name pos:start="71:9" pos:end="71:16">snprintf</name><argument_list pos:start="71:17" pos:end="71:81">(<argument pos:start="71:18" pos:end="71:18"><expr pos:start="71:18" pos:end="71:18"><name pos:start="71:18" pos:end="71:18">p</name></expr></argument>, <argument pos:start="71:21" pos:end="71:28"><expr pos:start="71:21" pos:end="71:28"><name pos:start="71:21" pos:end="71:28">slot_len</name></expr></argument>, <argument pos:start="71:31" pos:end="71:40"><expr pos:start="71:31" pos:end="71:40"><literal type="string" pos:start="71:31" pos:end="71:40">":%02x.%x"</literal></expr></argument>, <argument pos:start="71:43" pos:end="71:60"><expr pos:start="71:43" pos:end="71:60"><call pos:start="71:43" pos:end="71:60"><name pos:start="71:43" pos:end="71:50">PCI_SLOT</name><argument_list pos:start="71:51" pos:end="71:60">(<argument pos:start="71:52" pos:end="71:59"><expr pos:start="71:52" pos:end="71:59"><name pos:start="71:52" pos:end="71:59"><name pos:start="71:52" pos:end="71:52">t</name><operator pos:start="71:53" pos:end="71:54">-&gt;</operator><name pos:start="71:55" pos:end="71:59">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:63" pos:end="71:80"><expr pos:start="71:63" pos:end="71:80"><call pos:start="71:63" pos:end="71:80"><name pos:start="71:63" pos:end="71:70">PCI_FUNC</name><argument_list pos:start="71:71" pos:end="71:80">(<argument pos:start="71:72" pos:end="71:79"><expr pos:start="71:72" pos:end="71:79"><name pos:start="71:72" pos:end="71:79"><name pos:start="71:72" pos:end="71:72">d</name><operator pos:start="71:73" pos:end="71:74">-&gt;</operator><name pos:start="71:75" pos:end="71:79">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="77:5" pos:end="77:16">return <expr pos:start="77:12" pos:end="77:15"><name pos:start="77:12" pos:end="77:15">path</name></expr>;</return>

</block_content>}</block></function>
</unit>
