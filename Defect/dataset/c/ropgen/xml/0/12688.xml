<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12688.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">smc91c111_receive</name><parameter_list pos:start="1:30" pos:end="1:76">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">opaque</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">buf</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:75"><decl pos:start="1:65" pos:end="1:75"><type pos:start="1:65" pos:end="1:75"><name pos:start="1:65" pos:end="1:70">size_t</name></type> <name pos:start="1:72" pos:end="1:75">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="149:1">{<block_content pos:start="5:5" pos:end="147:24">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">smc91c111_state</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">s</name> <init pos:start="5:24" pos:end="5:50">= <expr pos:start="5:26" pos:end="5:50"><operator pos:start="5:26" pos:end="5:26">(</operator><name pos:start="5:27" pos:end="5:41">smc91c111_state</name> <operator pos:start="5:43" pos:end="5:43">*</operator><operator pos:start="5:44" pos:end="5:44">)</operator><name pos:start="5:45" pos:end="5:50">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">packetsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">crc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">packetnum</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:14">p</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:15"><if pos:start="19:5" pos:end="21:15">if <condition pos:start="19:8" pos:end="19:60">(<expr pos:start="19:9" pos:end="19:59"><operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:15"><name pos:start="19:10" pos:end="19:10">s</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:15">rcr</name></name> <operator pos:start="19:17" pos:end="19:17">&amp;</operator> <name pos:start="19:19" pos:end="19:26">RCR_RXEN</name><operator pos:start="19:27" pos:end="19:27">)</operator> <operator pos:start="19:29" pos:end="19:30">==</operator> <literal type="number" pos:start="19:32" pos:end="19:32">0</literal> <operator pos:start="19:34" pos:end="19:35">||</operator> <operator pos:start="19:37" pos:end="19:37">(</operator><name pos:start="19:38" pos:end="19:43"><name pos:start="19:38" pos:end="19:38">s</name><operator pos:start="19:39" pos:end="19:40">-&gt;</operator><name pos:start="19:41" pos:end="19:43">rcr</name></name> <operator pos:start="19:45" pos:end="19:45">&amp;</operator> <name pos:start="19:47" pos:end="19:58">RCR_SOFT_RST</name><operator pos:start="19:59" pos:end="19:59">)</operator></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:15"><block_content pos:start="21:9" pos:end="21:15">

        <return pos:start="21:9" pos:end="21:15">return;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="23:5" pos:end="25:60">/* Short packets are padded with zeros.  Receiving a packet

       &lt; 64 bytes long is considered an error condition.  */</comment>

    <if_stmt pos:start="27:5" pos:end="33:33"><if pos:start="27:5" pos:end="29:24">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:12">size</name> <operator pos:start="27:14" pos:end="27:14">&lt;</operator> <literal type="number" pos:start="27:16" pos:end="27:17">64</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:24"><block_content pos:start="29:9" pos:end="29:24">

        <expr_stmt pos:start="29:9" pos:end="29:24"><expr pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:18">packetsize</name> <operator pos:start="29:20" pos:end="29:20">=</operator> <literal type="number" pos:start="29:22" pos:end="29:23">64</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="31:5" pos:end="33:33">else<block type="pseudo" pos:start="33:9" pos:end="33:33"><block_content pos:start="33:9" pos:end="33:33">

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:18">packetsize</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <operator pos:start="33:22" pos:end="33:22">(</operator><name pos:start="33:23" pos:end="33:26">size</name> <operator pos:start="33:28" pos:end="33:28">&amp;</operator> <operator pos:start="33:30" pos:end="33:30">~</operator><literal type="number" pos:start="33:31" pos:end="33:31">1</literal><operator pos:start="33:32" pos:end="33:32">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:20"><expr pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:14">packetsize</name> <operator pos:start="35:16" pos:end="35:17">+=</operator> <literal type="number" pos:start="35:19" pos:end="35:19">6</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:40"><expr pos:start="37:5" pos:end="37:39"><name pos:start="37:5" pos:end="37:7">crc</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <operator pos:start="37:11" pos:end="37:11">(</operator><name pos:start="37:12" pos:end="37:17"><name pos:start="37:12" pos:end="37:12">s</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:17">rcr</name></name> <operator pos:start="37:19" pos:end="37:19">&amp;</operator> <name pos:start="37:21" pos:end="37:33">RCR_STRIP_CRC</name><operator pos:start="37:34" pos:end="37:34">)</operator> <operator pos:start="37:36" pos:end="37:37">==</operator> <literal type="number" pos:start="37:39" pos:end="37:39">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:24"><if pos:start="39:5" pos:end="41:24">if <condition pos:start="39:8" pos:end="39:12">(<expr pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">crc</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:24"><block_content pos:start="41:9" pos:end="41:24">

        <expr_stmt pos:start="41:9" pos:end="41:24"><expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:18">packetsize</name> <operator pos:start="41:20" pos:end="41:21">+=</operator> <literal type="number" pos:start="41:23" pos:end="41:23">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="43:5" pos:end="43:49">/* TODO: Flag overrun and receive errors.  */</comment>

    <if_stmt pos:start="45:5" pos:end="47:15"><if pos:start="45:5" pos:end="47:15">if <condition pos:start="45:8" pos:end="45:26">(<expr pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:18">packetsize</name> <operator pos:start="45:20" pos:end="45:20">&gt;</operator> <literal type="number" pos:start="45:22" pos:end="45:25">2048</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:15"><block_content pos:start="47:9" pos:end="47:15">

        <return pos:start="47:9" pos:end="47:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:45"><expr pos:start="49:5" pos:end="49:44"><name pos:start="49:5" pos:end="49:13">packetnum</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <call pos:start="49:17" pos:end="49:44"><name pos:start="49:17" pos:end="49:41">smc91c111_allocate_packet</name><argument_list pos:start="49:42" pos:end="49:44">(<argument pos:start="49:43" pos:end="49:43"><expr pos:start="49:43" pos:end="49:43"><name pos:start="49:43" pos:end="49:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="53:15"><if pos:start="51:5" pos:end="53:15">if <condition pos:start="51:8" pos:end="51:26">(<expr pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:17">packetnum</name> <operator pos:start="51:19" pos:end="51:20">==</operator> <literal type="number" pos:start="51:22" pos:end="51:25">0x80</literal></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:15"><block_content pos:start="53:9" pos:end="53:15">

        <return pos:start="53:9" pos:end="53:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:45"><expr pos:start="55:5" pos:end="55:44"><name pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:14">rx_fifo</name><index pos:start="55:15" pos:end="55:32">[<expr pos:start="55:16" pos:end="55:31"><name pos:start="55:16" pos:end="55:29"><name pos:start="55:16" pos:end="55:16">s</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:29">rx_fifo_len</name></name><operator pos:start="55:30" pos:end="55:31">++</operator></expr>]</index></name> <operator pos:start="55:34" pos:end="55:34">=</operator> <name pos:start="55:36" pos:end="55:44">packetnum</name></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:31"><expr pos:start="59:5" pos:end="59:30"><name pos:start="59:5" pos:end="59:5">p</name> <operator pos:start="59:7" pos:end="59:7">=</operator> <operator pos:start="59:9" pos:end="59:9">&amp;</operator><name pos:start="59:10" pos:end="59:30"><name pos:start="59:10" pos:end="59:10">s</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:16">data</name><index pos:start="59:17" pos:end="59:27">[<expr pos:start="59:18" pos:end="59:26"><name pos:start="59:18" pos:end="59:26">packetnum</name></expr>]</index><index pos:start="59:28" pos:end="59:30">[<expr pos:start="59:29" pos:end="59:29"><literal type="number" pos:start="59:29" pos:end="59:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="61:33">/* ??? Multicast packets?  */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:15"><expr pos:start="63:5" pos:end="63:14"><name pos:start="63:5" pos:end="63:10">status</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="67:29"><if pos:start="65:5" pos:end="67:29">if <condition pos:start="65:8" pos:end="65:20">(<expr pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:12">size</name> <operator pos:start="65:14" pos:end="65:14">&gt;</operator> <literal type="number" pos:start="65:16" pos:end="65:19">1518</literal></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:29"><block_content pos:start="67:9" pos:end="67:29">

        <expr_stmt pos:start="67:9" pos:end="67:29"><expr pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:14">status</name> <operator pos:start="67:16" pos:end="67:17">|=</operator> <name pos:start="67:19" pos:end="67:28">RS_TOOLONG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="71:30"><if pos:start="69:5" pos:end="71:30">if <condition pos:start="69:8" pos:end="69:17">(<expr pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:12">size</name> <operator pos:start="69:14" pos:end="69:14">&amp;</operator> <literal type="number" pos:start="69:16" pos:end="69:16">1</literal></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:30"><block_content pos:start="71:9" pos:end="71:30">

        <expr_stmt pos:start="71:9" pos:end="71:30"><expr pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:14">status</name> <operator pos:start="71:16" pos:end="71:17">|=</operator> <name pos:start="71:19" pos:end="71:29">RS_ODDFRAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:27"><expr pos:start="73:5" pos:end="73:26"><operator pos:start="73:5" pos:end="73:5">*</operator><operator pos:start="73:6" pos:end="73:6">(</operator><name pos:start="73:7" pos:end="73:7">p</name><operator pos:start="73:8" pos:end="73:9">++</operator><operator pos:start="73:10" pos:end="73:10">)</operator> <operator pos:start="73:12" pos:end="73:12">=</operator> <name pos:start="73:14" pos:end="73:19">status</name> <operator pos:start="73:21" pos:end="73:21">&amp;</operator> <literal type="number" pos:start="73:23" pos:end="73:26">0xff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:25"><expr pos:start="75:5" pos:end="75:24"><operator pos:start="75:5" pos:end="75:5">*</operator><operator pos:start="75:6" pos:end="75:6">(</operator><name pos:start="75:7" pos:end="75:7">p</name><operator pos:start="75:8" pos:end="75:9">++</operator><operator pos:start="75:10" pos:end="75:10">)</operator> <operator pos:start="75:12" pos:end="75:12">=</operator> <name pos:start="75:14" pos:end="75:19">status</name> <operator pos:start="75:21" pos:end="75:22">&gt;&gt;</operator> <literal type="number" pos:start="75:24" pos:end="75:24">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:31"><expr pos:start="77:5" pos:end="77:30"><operator pos:start="77:5" pos:end="77:5">*</operator><operator pos:start="77:6" pos:end="77:6">(</operator><name pos:start="77:7" pos:end="77:7">p</name><operator pos:start="77:8" pos:end="77:9">++</operator><operator pos:start="77:10" pos:end="77:10">)</operator> <operator pos:start="77:12" pos:end="77:12">=</operator> <name pos:start="77:14" pos:end="77:23">packetsize</name> <operator pos:start="77:25" pos:end="77:25">&amp;</operator> <literal type="number" pos:start="77:27" pos:end="77:30">0xff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:29"><expr pos:start="79:5" pos:end="79:28"><operator pos:start="79:5" pos:end="79:5">*</operator><operator pos:start="79:6" pos:end="79:6">(</operator><name pos:start="79:7" pos:end="79:7">p</name><operator pos:start="79:8" pos:end="79:9">++</operator><operator pos:start="79:10" pos:end="79:10">)</operator> <operator pos:start="79:12" pos:end="79:12">=</operator> <name pos:start="79:14" pos:end="79:23">packetsize</name> <operator pos:start="79:25" pos:end="79:26">&gt;&gt;</operator> <literal type="number" pos:start="79:28" pos:end="79:28">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:30"><expr pos:start="81:5" pos:end="81:29"><call pos:start="81:5" pos:end="81:29"><name pos:start="81:5" pos:end="81:10">memcpy</name><argument_list pos:start="81:11" pos:end="81:29">(<argument pos:start="81:12" pos:end="81:12"><expr pos:start="81:12" pos:end="81:12"><name pos:start="81:12" pos:end="81:12">p</name></expr></argument>, <argument pos:start="81:15" pos:end="81:17"><expr pos:start="81:15" pos:end="81:17"><name pos:start="81:15" pos:end="81:17">buf</name></expr></argument>, <argument pos:start="81:20" pos:end="81:28"><expr pos:start="81:20" pos:end="81:28"><name pos:start="81:20" pos:end="81:23">size</name> <operator pos:start="81:25" pos:end="81:25">&amp;</operator> <operator pos:start="81:27" pos:end="81:27">~</operator><literal type="number" pos:start="81:28" pos:end="81:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:21"><expr pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:5">p</name> <operator pos:start="83:7" pos:end="83:8">+=</operator> <operator pos:start="83:10" pos:end="83:10">(</operator><name pos:start="83:11" pos:end="83:14">size</name> <operator pos:start="83:16" pos:end="83:16">&amp;</operator> <operator pos:start="83:18" pos:end="83:18">~</operator><literal type="number" pos:start="83:19" pos:end="83:19">1</literal><operator pos:start="83:20" pos:end="83:20">)</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="85:5" pos:end="85:29">/* Pad short packets.  */</comment>

    <if_stmt pos:start="87:5" pos:end="105:5"><if pos:start="87:5" pos:end="105:5">if <condition pos:start="87:8" pos:end="87:18">(<expr pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:12">size</name> <operator pos:start="87:14" pos:end="87:14">&lt;</operator> <literal type="number" pos:start="87:16" pos:end="87:17">64</literal></expr>)</condition> <block pos:start="87:20" pos:end="105:5">{<block_content pos:start="89:9" pos:end="103:18">

        <decl_stmt pos:start="89:9" pos:end="89:16"><decl pos:start="89:9" pos:end="89:15"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:15">pad</name></decl>;</decl_stmt>



        <if_stmt pos:start="93:9" pos:end="95:35"><if pos:start="93:9" pos:end="95:35">if <condition pos:start="93:12" pos:end="93:21">(<expr pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:16">size</name> <operator pos:start="93:18" pos:end="93:18">&amp;</operator> <literal type="number" pos:start="93:20" pos:end="93:20">1</literal></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:35"><block_content pos:start="95:13" pos:end="95:35">

            <expr_stmt pos:start="95:13" pos:end="95:35"><expr pos:start="95:13" pos:end="95:34"><operator pos:start="95:13" pos:end="95:13">*</operator><operator pos:start="95:14" pos:end="95:14">(</operator><name pos:start="95:15" pos:end="95:15">p</name><operator pos:start="95:16" pos:end="95:17">++</operator><operator pos:start="95:18" pos:end="95:18">)</operator> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:34"><name pos:start="95:22" pos:end="95:24">buf</name><index pos:start="95:25" pos:end="95:34">[<expr pos:start="95:26" pos:end="95:33"><name pos:start="95:26" pos:end="95:29">size</name> <operator pos:start="95:31" pos:end="95:31">-</operator> <literal type="number" pos:start="95:33" pos:end="95:33">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:24"><expr pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:11">pad</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <literal type="number" pos:start="97:15" pos:end="97:18">64</literal> <operator pos:start="97:18" pos:end="97:18">-</operator> <name pos:start="97:20" pos:end="97:23">size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:26"><expr pos:start="99:9" pos:end="99:25"><call pos:start="99:9" pos:end="99:25"><name pos:start="99:9" pos:end="99:14">memset</name><argument_list pos:start="99:15" pos:end="99:25">(<argument pos:start="99:16" pos:end="99:16"><expr pos:start="99:16" pos:end="99:16"><name pos:start="99:16" pos:end="99:16">p</name></expr></argument>, <argument pos:start="99:19" pos:end="99:19"><expr pos:start="99:19" pos:end="99:19"><literal type="number" pos:start="99:19" pos:end="99:19">0</literal></expr></argument>, <argument pos:start="99:22" pos:end="99:24"><expr pos:start="99:22" pos:end="99:24"><name pos:start="99:22" pos:end="99:24">pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:17"><expr pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:9">p</name> <operator pos:start="101:11" pos:end="101:12">+=</operator> <name pos:start="101:14" pos:end="101:16">pad</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:18"><expr pos:start="103:9" pos:end="103:17"><name pos:start="103:9" pos:end="103:12">size</name> <operator pos:start="103:14" pos:end="103:14">=</operator> <literal type="number" pos:start="103:16" pos:end="103:17">64</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="107:5" pos:end="113:67">/* It's not clear if the CRC should go before or after the last byte in

       odd sized packets.  Linux disables the CRC, so that's no help.

       The pictures in the documentation show the CRC aligned on a 16-bit

       boundary before the last odd byte, so that's what we do.  */</comment>

    <if_stmt pos:start="115:5" pos:end="127:5"><if pos:start="115:5" pos:end="127:5">if <condition pos:start="115:8" pos:end="115:12">(<expr pos:start="115:9" pos:end="115:11"><name pos:start="115:9" pos:end="115:11">crc</name></expr>)</condition> <block pos:start="115:14" pos:end="127:5">{<block_content pos:start="117:9" pos:end="125:39">

        <expr_stmt pos:start="117:9" pos:end="117:35"><expr pos:start="117:9" pos:end="117:34"><name pos:start="117:9" pos:end="117:11">crc</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <call pos:start="117:15" pos:end="117:34"><name pos:start="117:15" pos:end="117:19">crc32</name><argument_list pos:start="117:20" pos:end="117:34">(<argument pos:start="117:21" pos:end="117:22"><expr pos:start="117:21" pos:end="117:22"><operator pos:start="117:21" pos:end="117:21">~</operator><literal type="number" pos:start="117:22" pos:end="117:22">0</literal></expr></argument>, <argument pos:start="117:25" pos:end="117:27"><expr pos:start="117:25" pos:end="117:27"><name pos:start="117:25" pos:end="117:27">buf</name></expr></argument>, <argument pos:start="117:30" pos:end="117:33"><expr pos:start="117:30" pos:end="117:33"><name pos:start="117:30" pos:end="117:33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:28"><expr pos:start="119:9" pos:end="119:27"><operator pos:start="119:9" pos:end="119:9">*</operator><operator pos:start="119:10" pos:end="119:10">(</operator><name pos:start="119:11" pos:end="119:11">p</name><operator pos:start="119:12" pos:end="119:13">++</operator><operator pos:start="119:14" pos:end="119:14">)</operator> <operator pos:start="119:16" pos:end="119:16">=</operator> <name pos:start="119:18" pos:end="119:20">crc</name> <operator pos:start="119:22" pos:end="119:22">&amp;</operator> <literal type="number" pos:start="119:24" pos:end="119:27">0xff</literal></expr>;</expr_stmt> <expr_stmt pos:start="119:30" pos:end="119:39"><expr pos:start="119:30" pos:end="119:38"><name pos:start="119:30" pos:end="119:32">crc</name> <operator pos:start="119:34" pos:end="119:36">&gt;&gt;=</operator> <literal type="number" pos:start="119:38" pos:end="119:38">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:28"><expr pos:start="121:9" pos:end="121:27"><operator pos:start="121:9" pos:end="121:9">*</operator><operator pos:start="121:10" pos:end="121:10">(</operator><name pos:start="121:11" pos:end="121:11">p</name><operator pos:start="121:12" pos:end="121:13">++</operator><operator pos:start="121:14" pos:end="121:14">)</operator> <operator pos:start="121:16" pos:end="121:16">=</operator> <name pos:start="121:18" pos:end="121:20">crc</name> <operator pos:start="121:22" pos:end="121:22">&amp;</operator> <literal type="number" pos:start="121:24" pos:end="121:27">0xff</literal></expr>;</expr_stmt> <expr_stmt pos:start="121:30" pos:end="121:39"><expr pos:start="121:30" pos:end="121:38"><name pos:start="121:30" pos:end="121:32">crc</name> <operator pos:start="121:34" pos:end="121:36">&gt;&gt;=</operator> <literal type="number" pos:start="121:38" pos:end="121:38">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:28"><expr pos:start="123:9" pos:end="123:27"><operator pos:start="123:9" pos:end="123:9">*</operator><operator pos:start="123:10" pos:end="123:10">(</operator><name pos:start="123:11" pos:end="123:11">p</name><operator pos:start="123:12" pos:end="123:13">++</operator><operator pos:start="123:14" pos:end="123:14">)</operator> <operator pos:start="123:16" pos:end="123:16">=</operator> <name pos:start="123:18" pos:end="123:20">crc</name> <operator pos:start="123:22" pos:end="123:22">&amp;</operator> <literal type="number" pos:start="123:24" pos:end="123:27">0xff</literal></expr>;</expr_stmt> <expr_stmt pos:start="123:30" pos:end="123:39"><expr pos:start="123:30" pos:end="123:38"><name pos:start="123:30" pos:end="123:32">crc</name> <operator pos:start="123:34" pos:end="123:36">&gt;&gt;=</operator> <literal type="number" pos:start="123:38" pos:end="123:38">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:28"><expr pos:start="125:9" pos:end="125:27"><operator pos:start="125:9" pos:end="125:9">*</operator><operator pos:start="125:10" pos:end="125:10">(</operator><name pos:start="125:11" pos:end="125:11">p</name><operator pos:start="125:12" pos:end="125:13">++</operator><operator pos:start="125:14" pos:end="125:14">)</operator> <operator pos:start="125:16" pos:end="125:16">=</operator> <name pos:start="125:18" pos:end="125:20">crc</name> <operator pos:start="125:22" pos:end="125:22">&amp;</operator> <literal type="number" pos:start="125:24" pos:end="125:27">0xff</literal></expr>;</expr_stmt> <expr_stmt pos:start="125:30" pos:end="125:39"><expr pos:start="125:30" pos:end="125:38"><name pos:start="125:30" pos:end="125:32">crc</name> <operator pos:start="125:34" pos:end="125:36">&gt;&gt;=</operator> <literal type="number" pos:start="125:38" pos:end="125:38">8</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="129:5" pos:end="141:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:17">(<expr pos:start="129:9" pos:end="129:16"><name pos:start="129:9" pos:end="129:12">size</name> <operator pos:start="129:14" pos:end="129:14">&amp;</operator> <literal type="number" pos:start="129:16" pos:end="129:16">1</literal></expr>)</condition> <block pos:start="129:19" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:22">

        <expr_stmt pos:start="131:9" pos:end="131:31"><expr pos:start="131:9" pos:end="131:30"><operator pos:start="131:9" pos:end="131:9">*</operator><operator pos:start="131:10" pos:end="131:10">(</operator><name pos:start="131:11" pos:end="131:11">p</name><operator pos:start="131:12" pos:end="131:13">++</operator><operator pos:start="131:14" pos:end="131:14">)</operator> <operator pos:start="131:16" pos:end="131:16">=</operator> <name pos:start="131:18" pos:end="131:30"><name pos:start="131:18" pos:end="131:20">buf</name><index pos:start="131:21" pos:end="131:30">[<expr pos:start="131:22" pos:end="131:29"><name pos:start="131:22" pos:end="131:25">size</name> <operator pos:start="131:27" pos:end="131:27">-</operator> <literal type="number" pos:start="131:29" pos:end="131:29">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:22"><expr pos:start="133:9" pos:end="133:21"><operator pos:start="133:9" pos:end="133:9">*</operator><operator pos:start="133:10" pos:end="133:10">(</operator><name pos:start="133:11" pos:end="133:11">p</name><operator pos:start="133:12" pos:end="133:13">++</operator><operator pos:start="133:14" pos:end="133:14">)</operator> <operator pos:start="133:16" pos:end="133:16">=</operator> <literal type="number" pos:start="133:18" pos:end="133:21">0x60</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="135:7" pos:end="141:5">else <block pos:start="135:12" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:22">

        <expr_stmt pos:start="137:9" pos:end="137:19"><expr pos:start="137:9" pos:end="137:18"><operator pos:start="137:9" pos:end="137:9">*</operator><operator pos:start="137:10" pos:end="137:10">(</operator><name pos:start="137:11" pos:end="137:11">p</name><operator pos:start="137:12" pos:end="137:13">++</operator><operator pos:start="137:14" pos:end="137:14">)</operator> <operator pos:start="137:16" pos:end="137:16">=</operator> <literal type="number" pos:start="137:18" pos:end="137:18">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:22"><expr pos:start="139:9" pos:end="139:21"><operator pos:start="139:9" pos:end="139:9">*</operator><operator pos:start="139:10" pos:end="139:10">(</operator><name pos:start="139:11" pos:end="139:11">p</name><operator pos:start="139:12" pos:end="139:13">++</operator><operator pos:start="139:14" pos:end="139:14">)</operator> <operator pos:start="139:16" pos:end="139:16">=</operator> <literal type="number" pos:start="139:18" pos:end="139:21">0x40</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="143:5" pos:end="143:42">/* TODO: Raise early RX interrupt?  */</comment>

    <expr_stmt pos:start="145:5" pos:end="145:28"><expr pos:start="145:5" pos:end="145:27"><name pos:start="145:5" pos:end="145:16"><name pos:start="145:5" pos:end="145:5">s</name><operator pos:start="145:6" pos:end="145:7">-&gt;</operator><name pos:start="145:8" pos:end="145:16">int_level</name></name> <operator pos:start="145:18" pos:end="145:19">|=</operator> <name pos:start="145:21" pos:end="145:27">INT_RCV</name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:24"><expr pos:start="147:5" pos:end="147:23"><call pos:start="147:5" pos:end="147:23"><name pos:start="147:5" pos:end="147:20">smc91c111_update</name><argument_list pos:start="147:21" pos:end="147:23">(<argument pos:start="147:22" pos:end="147:22"><expr pos:start="147:22" pos:end="147:22"><name pos:start="147:22" pos:end="147:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
