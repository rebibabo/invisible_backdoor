<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25804.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">uhci_async_complete</name><parameter_list pos:start="1:32" pos:end="1:65">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:45"><name pos:start="1:33" pos:end="1:39">USBPort</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:45">port</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:64"><decl pos:start="1:48" pos:end="1:64"><type pos:start="1:48" pos:end="1:64"><name pos:start="1:48" pos:end="1:56">USBPacket</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:64">packet</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:5">

    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:62"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">UHCIAsync</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">async</name> <init pos:start="5:22" pos:end="5:62">= <expr pos:start="5:24" pos:end="5:62"><call pos:start="5:24" pos:end="5:62"><name pos:start="5:24" pos:end="5:35">container_of</name><argument_list pos:start="5:36" pos:end="5:62">(<argument pos:start="5:37" pos:end="5:42"><expr pos:start="5:37" pos:end="5:42"><name pos:start="5:37" pos:end="5:42">packet</name></expr></argument>, <argument pos:start="5:45" pos:end="5:53"><expr pos:start="5:45" pos:end="5:53"><name pos:start="5:45" pos:end="5:53">UHCIAsync</name></expr></argument>, <argument pos:start="5:56" pos:end="5:61"><expr pos:start="5:56" pos:end="5:61"><name pos:start="5:56" pos:end="5:61">packet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">UHCIState</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">s</name> <init pos:start="7:18" pos:end="7:37">= <expr pos:start="7:20" pos:end="7:37"><name pos:start="7:20" pos:end="7:37"><name pos:start="7:20" pos:end="7:24">async</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:31">queue</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:37">uhci</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="55:5"><if pos:start="11:5" pos:end="49:5">if <condition pos:start="11:8" pos:end="11:20">(<expr pos:start="11:9" pos:end="11:19"><name pos:start="11:9" pos:end="11:19"><name pos:start="11:9" pos:end="11:13">async</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:19">isoc</name></name></expr>)</condition> <block pos:start="11:22" pos:end="49:5">{<block_content pos:start="13:9" pos:end="47:31">

        <decl_stmt pos:start="13:9" pos:end="13:19"><decl pos:start="13:9" pos:end="13:18"><type pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:15">UHCI_TD</name></type> <name pos:start="13:17" pos:end="13:18">td</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:34"><decl pos:start="15:9" pos:end="15:33"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">uint32_t</name></type> <name pos:start="15:18" pos:end="15:21">link</name> <init pos:start="15:23" pos:end="15:33">= <expr pos:start="15:25" pos:end="15:33"><name pos:start="15:25" pos:end="15:33"><name pos:start="15:25" pos:end="15:29">async</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:33">td</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:35"><decl pos:start="17:9" pos:end="17:29"><type pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:16">uint32_t</name></type> <name pos:start="17:18" pos:end="17:25">int_mask</name> <init pos:start="17:27" pos:end="17:29">= <expr pos:start="17:29" pos:end="17:29"><literal type="number" pos:start="17:29" pos:end="17:29">0</literal></expr></init></decl>, <decl pos:start="17:32" pos:end="17:34"><type ref="prev" pos:start="17:9" pos:end="17:16"/><name pos:start="17:32" pos:end="17:34">val</name></decl>;</decl_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:60"><expr pos:start="21:9" pos:end="21:59"><call pos:start="21:9" pos:end="21:59"><name pos:start="21:9" pos:end="21:20">pci_dma_read</name><argument_list pos:start="21:21" pos:end="21:59">(<argument pos:start="21:22" pos:end="21:28"><expr pos:start="21:22" pos:end="21:28"><operator pos:start="21:22" pos:end="21:22">&amp;</operator><name pos:start="21:23" pos:end="21:28"><name pos:start="21:23" pos:end="21:23">s</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:28">dev</name></name></expr></argument>, <argument pos:start="21:31" pos:end="21:41"><expr pos:start="21:31" pos:end="21:41"><name pos:start="21:31" pos:end="21:34">link</name> <operator pos:start="21:36" pos:end="21:36">&amp;</operator> <operator pos:start="21:38" pos:end="21:38">~</operator><literal type="number" pos:start="21:39" pos:end="21:41">0xf</literal></expr></argument>, <argument pos:start="21:44" pos:end="21:46"><expr pos:start="21:44" pos:end="21:46"><operator pos:start="21:44" pos:end="21:44">&amp;</operator><name pos:start="21:45" pos:end="21:46">td</name></expr></argument>, <argument pos:start="21:49" pos:end="21:58"><expr pos:start="21:49" pos:end="21:58"><sizeof pos:start="21:49" pos:end="21:58">sizeof<argument_list pos:start="21:55" pos:end="21:58">(<argument pos:start="21:56" pos:end="21:57"><expr pos:start="21:56" pos:end="21:57"><name pos:start="21:56" pos:end="21:57">td</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:31"><expr pos:start="23:9" pos:end="23:30"><call pos:start="23:9" pos:end="23:30"><name pos:start="23:9" pos:end="23:20">le32_to_cpus</name><argument_list pos:start="23:21" pos:end="23:30">(<argument pos:start="23:22" pos:end="23:29"><expr pos:start="23:22" pos:end="23:29"><operator pos:start="23:22" pos:end="23:22">&amp;</operator><name pos:start="23:23" pos:end="23:29"><name pos:start="23:23" pos:end="23:24">td</name><operator pos:start="23:25" pos:end="23:25">.</operator><name pos:start="23:26" pos:end="23:29">link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:31"><expr pos:start="25:9" pos:end="25:30"><call pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:20">le32_to_cpus</name><argument_list pos:start="25:21" pos:end="25:30">(<argument pos:start="25:22" pos:end="25:29"><expr pos:start="25:22" pos:end="25:29"><operator pos:start="25:22" pos:end="25:22">&amp;</operator><name pos:start="25:23" pos:end="25:29"><name pos:start="25:23" pos:end="25:24">td</name><operator pos:start="25:25" pos:end="25:25">.</operator><name pos:start="25:26" pos:end="25:29">ctrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><call pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:20">le32_to_cpus</name><argument_list pos:start="27:21" pos:end="27:31">(<argument pos:start="27:22" pos:end="27:30"><expr pos:start="27:22" pos:end="27:30"><operator pos:start="27:22" pos:end="27:22">&amp;</operator><name pos:start="27:23" pos:end="27:30"><name pos:start="27:23" pos:end="27:24">td</name><operator pos:start="27:25" pos:end="27:25">.</operator><name pos:start="27:26" pos:end="27:30">token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:33"><expr pos:start="29:9" pos:end="29:32"><call pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:20">le32_to_cpus</name><argument_list pos:start="29:21" pos:end="29:32">(<argument pos:start="29:22" pos:end="29:31"><expr pos:start="29:22" pos:end="29:31"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:31"><name pos:start="29:23" pos:end="29:24">td</name><operator pos:start="29:25" pos:end="29:25">.</operator><name pos:start="29:26" pos:end="29:31">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><call pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:25">uhci_async_unlink</name><argument_list pos:start="33:26" pos:end="33:32">(<argument pos:start="33:27" pos:end="33:31"><expr pos:start="33:27" pos:end="33:31"><name pos:start="33:27" pos:end="33:31">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:51"><expr pos:start="35:9" pos:end="35:50"><call pos:start="35:9" pos:end="35:50"><name pos:start="35:9" pos:end="35:24">uhci_complete_td</name><argument_list pos:start="35:25" pos:end="35:50">(<argument pos:start="35:26" pos:end="35:26"><expr pos:start="35:26" pos:end="35:26"><name pos:start="35:26" pos:end="35:26">s</name></expr></argument>, <argument pos:start="35:29" pos:end="35:31"><expr pos:start="35:29" pos:end="35:31"><operator pos:start="35:29" pos:end="35:29">&amp;</operator><name pos:start="35:30" pos:end="35:31">td</name></expr></argument>, <argument pos:start="35:34" pos:end="35:38"><expr pos:start="35:34" pos:end="35:38"><name pos:start="35:34" pos:end="35:38">async</name></expr></argument>, <argument pos:start="35:41" pos:end="35:49"><expr pos:start="35:41" pos:end="35:49"><operator pos:start="35:41" pos:end="35:41">&amp;</operator><name pos:start="35:42" pos:end="35:49">int_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:40"><expr pos:start="37:9" pos:end="37:39"><name pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:27">pending_int_mask</name></name> <operator pos:start="37:29" pos:end="37:30">|=</operator> <name pos:start="37:32" pos:end="37:39">int_mask</name></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="41:46">/* update the status bits of the TD */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:35"><expr pos:start="43:9" pos:end="43:34"><name pos:start="43:9" pos:end="43:11">val</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:34"><name pos:start="43:15" pos:end="43:25">cpu_to_le32</name><argument_list pos:start="43:26" pos:end="43:34">(<argument pos:start="43:27" pos:end="43:33"><expr pos:start="43:27" pos:end="43:33"><name pos:start="43:27" pos:end="43:33"><name pos:start="43:27" pos:end="43:28">td</name><operator pos:start="43:29" pos:end="43:29">.</operator><name pos:start="43:30" pos:end="43:33">ctrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:69"><expr pos:start="45:9" pos:end="45:68"><call pos:start="45:9" pos:end="45:68"><name pos:start="45:9" pos:end="45:21">pci_dma_write</name><argument_list pos:start="45:22" pos:end="45:68">(<argument pos:start="45:23" pos:end="45:29"><expr pos:start="45:23" pos:end="45:29"><operator pos:start="45:23" pos:end="45:23">&amp;</operator><name pos:start="45:24" pos:end="45:29"><name pos:start="45:24" pos:end="45:24">s</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:29">dev</name></name></expr></argument>, <argument pos:start="45:32" pos:end="45:48"><expr pos:start="45:32" pos:end="45:48"><operator pos:start="45:32" pos:end="45:32">(</operator><name pos:start="45:33" pos:end="45:36">link</name> <operator pos:start="45:38" pos:end="45:38">&amp;</operator> <operator pos:start="45:40" pos:end="45:40">~</operator><literal type="number" pos:start="45:41" pos:end="45:43">0xf</literal><operator pos:start="45:44" pos:end="45:44">)</operator> <operator pos:start="45:46" pos:end="45:46">+</operator> <literal type="number" pos:start="45:48" pos:end="45:48">4</literal></expr></argument>, <argument pos:start="45:51" pos:end="45:54"><expr pos:start="45:51" pos:end="45:54"><operator pos:start="45:51" pos:end="45:51">&amp;</operator><name pos:start="45:52" pos:end="45:54">val</name></expr></argument>, <argument pos:start="45:57" pos:end="45:67"><expr pos:start="45:57" pos:end="45:67"><sizeof pos:start="45:57" pos:end="45:67">sizeof<argument_list pos:start="45:63" pos:end="45:67">(<argument pos:start="45:64" pos:end="45:66"><expr pos:start="45:64" pos:end="45:66"><name pos:start="45:64" pos:end="45:66">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:31"><expr pos:start="47:9" pos:end="47:30"><call pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:23">uhci_async_free</name><argument_list pos:start="47:24" pos:end="47:30">(<argument pos:start="47:25" pos:end="47:29"><expr pos:start="47:25" pos:end="47:29"><name pos:start="47:25" pos:end="47:29">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="55:5">else <block pos:start="49:12" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:30">

        <expr_stmt pos:start="51:9" pos:end="51:24"><expr pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:13">async</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:19">done</name></name> <operator pos:start="51:21" pos:end="51:21">=</operator> <literal type="number" pos:start="51:23" pos:end="51:23">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:30"><expr pos:start="53:9" pos:end="53:29"><call pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:26">uhci_process_frame</name><argument_list pos:start="53:27" pos:end="53:29">(<argument pos:start="53:28" pos:end="53:28"><expr pos:start="53:28" pos:end="53:28"><name pos:start="53:28" pos:end="53:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
