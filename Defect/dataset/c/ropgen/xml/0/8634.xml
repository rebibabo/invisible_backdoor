<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8634.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">check_physical</name> <parameter_list pos:start="1:27" pos:end="3:54">(<parameter pos:start="1:28" pos:end="1:40"><decl pos:start="1:28" pos:end="1:40"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:35">CPUState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">env</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:51">mmu_ctx_t</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">ctx</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:45"><decl pos:start="3:28" pos:end="3:45"><type pos:start="3:28" pos:end="3:45"><name pos:start="3:28" pos:end="3:39">target_ulong</name></type> <name pos:start="3:41" pos:end="3:45">eaddr</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:53"><decl pos:start="3:48" pos:end="3:53"><type pos:start="3:48" pos:end="3:53"><name pos:start="3:48" pos:end="3:50">int</name></type> <name pos:start="3:52" pos:end="3:53">rw</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="117:1">{<block_content pos:start="7:5" pos:end="115:15">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">in_plb</name></decl>, <decl pos:start="7:17" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:19">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:23"><expr pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:7">ctx</name><operator pos:start="11:8" pos:end="11:9">-&gt;</operator><name pos:start="11:10" pos:end="11:14">raddr</name></name> <operator pos:start="11:16" pos:end="11:16">=</operator> <name pos:start="11:18" pos:end="11:22">eaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:26"><expr pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:7">ctx</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:13">prot</name></name> <operator pos:start="13:15" pos:end="13:15">=</operator> <name pos:start="13:17" pos:end="13:25">PAGE_READ</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:12"><expr pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:7">ret</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <literal type="number" pos:start="15:11" pos:end="15:11">0</literal></expr>;</expr_stmt>

    <switch pos:start="17:5" pos:end="111:5">switch <condition pos:start="17:12" pos:end="17:27">(<expr pos:start="17:13" pos:end="17:26"><name pos:start="17:13" pos:end="17:26"><name pos:start="17:13" pos:end="17:15">env</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:26">mmu_model</name></name></expr>)</condition> <block pos:start="17:29" pos:end="111:5">{<block_content pos:start="19:5" pos:end="109:18">

    <case pos:start="19:5" pos:end="19:25">case <expr pos:start="19:10" pos:end="19:24"><name pos:start="19:10" pos:end="19:24">POWERPC_MMU_32B</name></expr>:</case>

    <case pos:start="21:5" pos:end="21:30">case <expr pos:start="21:10" pos:end="21:29"><name pos:start="21:10" pos:end="21:29">POWERPC_MMU_SOFT_6xx</name></expr>:</case>

    <case pos:start="23:5" pos:end="23:31">case <expr pos:start="23:10" pos:end="23:30"><name pos:start="23:10" pos:end="23:30">POWERPC_MMU_SOFT_74xx</name></expr>:</case>

    <case pos:start="25:5" pos:end="25:30">case <expr pos:start="25:10" pos:end="25:29"><name pos:start="25:10" pos:end="25:29">POWERPC_MMU_SOFT_4xx</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:30">case <expr pos:start="27:10" pos:end="27:29"><name pos:start="27:10" pos:end="27:29">POWERPC_MMU_REAL_4xx</name></expr>:</case>

    <case pos:start="29:5" pos:end="29:27">case <expr pos:start="29:10" pos:end="29:26"><name pos:start="29:10" pos:end="29:26">POWERPC_MMU_BOOKE</name></expr>:</case>

        <expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:11">ctx</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:17">prot</name></name> <operator pos:start="31:19" pos:end="31:20">|=</operator> <name pos:start="31:22" pos:end="31:31">PAGE_WRITE</name></expr>;</expr_stmt>

        <break pos:start="33:9" pos:end="36:0">break;</break>

<cpp:if pos:start="35:1" pos:end="35:25">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:25"><call pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:11">defined</name><argument_list pos:start="35:12" pos:end="35:25">(<argument pos:start="35:13" pos:end="35:24"><expr pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="37:5" pos:end="37:25">case <expr pos:start="37:10" pos:end="37:24"><name pos:start="37:10" pos:end="37:24">POWERPC_MMU_64B</name></expr>:</case>

        <comment type="block" pos:start="39:9" pos:end="39:43">/* Real address are 60 bits long */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:44"><expr pos:start="41:9" pos:end="41:43"><name pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:11">ctx</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:18">raddr</name></name> <operator pos:start="41:20" pos:end="41:21">&amp;=</operator> <literal type="number" pos:start="41:23" pos:end="41:43">0x0FFFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:32"><expr pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:11">ctx</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:17">prot</name></name> <operator pos:start="43:19" pos:end="43:20">|=</operator> <name pos:start="43:22" pos:end="43:31">PAGE_WRITE</name></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="48:0">break;</break>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

    <case pos:start="49:5" pos:end="49:32">case <expr pos:start="49:10" pos:end="49:31"><name pos:start="49:10" pos:end="49:31">POWERPC_MMU_SOFT_4xx_Z</name></expr>:</case>

        <if_stmt pos:start="51:9" pos:end="93:9"><if pos:start="51:9" pos:end="93:9">if <condition pos:start="51:12" pos:end="51:34">(<expr pos:start="51:13" pos:end="51:33"><call pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:20">unlikely</name><argument_list pos:start="51:21" pos:end="51:33">(<argument pos:start="51:22" pos:end="51:32"><expr pos:start="51:22" pos:end="51:32"><name pos:start="51:22" pos:end="51:27">msr_pe</name> <operator pos:start="51:29" pos:end="51:30">!=</operator> <literal type="number" pos:start="51:32" pos:end="51:32">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:36" pos:end="93:9">{<block_content pos:start="59:13" pos:end="91:13">

            <comment type="block" pos:start="53:13" pos:end="57:15">/* 403 family add some particular protections,

             * using PBL/PBU registers for accesses with no translation.

             */</comment>

            <expr_stmt pos:start="59:13" pos:end="71:68"><expr pos:start="59:13" pos:end="71:67"><name pos:start="59:13" pos:end="59:18">in_plb</name> <operator pos:start="59:20" pos:end="59:20">=</operator>

                <comment type="block" pos:start="61:17" pos:end="61:40">/* Check PLB validity */</comment>

                <ternary pos:start="63:17" pos:end="71:67"><condition pos:start="63:17" pos:end="71:61"><expr pos:start="63:17" pos:end="71:59"><operator pos:start="63:17" pos:end="63:17">(</operator><name pos:start="63:18" pos:end="63:27"><name pos:start="63:18" pos:end="63:20">env</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:24">pb</name><index pos:start="63:25" pos:end="63:27">[<expr pos:start="63:26" pos:end="63:26"><literal type="number" pos:start="63:26" pos:end="63:26">0</literal></expr>]</index></name> <operator pos:start="63:29" pos:end="63:29">&lt;</operator> <name pos:start="63:31" pos:end="63:40"><name pos:start="63:31" pos:end="63:33">env</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:37">pb</name><index pos:start="63:38" pos:end="63:40">[<expr pos:start="63:39" pos:end="63:39"><literal type="number" pos:start="63:39" pos:end="63:39">1</literal></expr>]</index></name> <operator pos:start="63:42" pos:end="63:43">&amp;&amp;</operator>

                 <comment type="block" pos:start="65:18" pos:end="65:46">/* and address in plb area */</comment>

                 <name pos:start="67:18" pos:end="67:22">eaddr</name> <operator pos:start="67:24" pos:end="67:25">&gt;=</operator> <name pos:start="67:27" pos:end="67:36"><name pos:start="67:27" pos:end="67:29">env</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:33">pb</name><index pos:start="67:34" pos:end="67:36">[<expr pos:start="67:35" pos:end="67:35"><literal type="number" pos:start="67:35" pos:end="67:35">0</literal></expr>]</index></name> <operator pos:start="67:38" pos:end="67:39">&amp;&amp;</operator> <name pos:start="67:41" pos:end="67:45">eaddr</name> <operator pos:start="67:47" pos:end="67:47">&lt;</operator> <name pos:start="67:49" pos:end="67:58"><name pos:start="67:49" pos:end="67:51">env</name><operator pos:start="67:52" pos:end="67:53">-&gt;</operator><name pos:start="67:54" pos:end="67:55">pb</name><index pos:start="67:56" pos:end="67:58">[<expr pos:start="67:57" pos:end="67:57"><literal type="number" pos:start="67:57" pos:end="67:57">1</literal></expr>]</index></name><operator pos:start="67:59" pos:end="67:59">)</operator> <operator pos:start="67:61" pos:end="67:62">||</operator>

                <operator pos:start="69:17" pos:end="69:17">(</operator><name pos:start="69:18" pos:end="69:27"><name pos:start="69:18" pos:end="69:20">env</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:24">pb</name><index pos:start="69:25" pos:end="69:27">[<expr pos:start="69:26" pos:end="69:26"><literal type="number" pos:start="69:26" pos:end="69:26">2</literal></expr>]</index></name> <operator pos:start="69:29" pos:end="69:29">&lt;</operator> <name pos:start="69:31" pos:end="69:40"><name pos:start="69:31" pos:end="69:33">env</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:37">pb</name><index pos:start="69:38" pos:end="69:40">[<expr pos:start="69:39" pos:end="69:39"><literal type="number" pos:start="69:39" pos:end="69:39">3</literal></expr>]</index></name> <operator pos:start="69:42" pos:end="69:43">&amp;&amp;</operator>

                 <name pos:start="71:18" pos:end="71:22">eaddr</name> <operator pos:start="71:24" pos:end="71:25">&gt;=</operator> <name pos:start="71:27" pos:end="71:36"><name pos:start="71:27" pos:end="71:29">env</name><operator pos:start="71:30" pos:end="71:31">-&gt;</operator><name pos:start="71:32" pos:end="71:33">pb</name><index pos:start="71:34" pos:end="71:36">[<expr pos:start="71:35" pos:end="71:35"><literal type="number" pos:start="71:35" pos:end="71:35">2</literal></expr>]</index></name> <operator pos:start="71:38" pos:end="71:39">&amp;&amp;</operator> <name pos:start="71:41" pos:end="71:45">eaddr</name> <operator pos:start="71:47" pos:end="71:47">&lt;</operator> <name pos:start="71:49" pos:end="71:58"><name pos:start="71:49" pos:end="71:51">env</name><operator pos:start="71:52" pos:end="71:53">-&gt;</operator><name pos:start="71:54" pos:end="71:55">pb</name><index pos:start="71:56" pos:end="71:58">[<expr pos:start="71:57" pos:end="71:57"><literal type="number" pos:start="71:57" pos:end="71:57">3</literal></expr>]</index></name><operator pos:start="71:59" pos:end="71:59">)</operator></expr> ?</condition><then pos:start="71:63" pos:end="71:63"> <expr pos:start="71:63" pos:end="71:63"><literal type="number" pos:start="71:63" pos:end="71:63">1</literal></expr> </then><else pos:start="71:65" pos:end="71:67">: <expr pos:start="71:67" pos:end="71:67"><literal type="number" pos:start="71:67" pos:end="71:67">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="91:13"><if pos:start="73:13" pos:end="85:13">if <condition pos:start="73:16" pos:end="73:32">(<expr pos:start="73:17" pos:end="73:31"><name pos:start="73:17" pos:end="73:22">in_plb</name> <operator pos:start="73:24" pos:end="73:24">^</operator> <name pos:start="73:26" pos:end="73:31">msr_px</name></expr>)</condition> <block pos:start="73:34" pos:end="85:13">{<block_content pos:start="77:17" pos:end="83:17">

                <comment type="block" pos:start="75:17" pos:end="75:46">/* Access in protected area */</comment>

                <if_stmt pos:start="77:17" pos:end="83:17"><if pos:start="77:17" pos:end="83:17">if <condition pos:start="77:20" pos:end="77:28">(<expr pos:start="77:21" pos:end="77:27"><name pos:start="77:21" pos:end="77:22">rw</name> <operator pos:start="77:24" pos:end="77:25">==</operator> <literal type="number" pos:start="77:27" pos:end="77:27">1</literal></expr>)</condition> <block pos:start="77:30" pos:end="83:17">{<block_content pos:start="81:21" pos:end="81:29">

                    <comment type="block" pos:start="79:21" pos:end="79:47">/* Access is not allowed */</comment>

                    <expr_stmt pos:start="81:21" pos:end="81:29"><expr pos:start="81:21" pos:end="81:28"><name pos:start="81:21" pos:end="81:23">ret</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <operator pos:start="81:27" pos:end="81:27">-</operator><literal type="number" pos:start="81:28" pos:end="81:28">2</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="85:15" pos:end="91:13">else <block pos:start="85:20" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:40">

                <comment type="block" pos:start="87:17" pos:end="87:50">/* Read-write access is allowed */</comment>

                <expr_stmt pos:start="89:17" pos:end="89:40"><expr pos:start="89:17" pos:end="89:39"><name pos:start="89:17" pos:end="89:25"><name pos:start="89:17" pos:end="89:19">ctx</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:25">prot</name></name> <operator pos:start="89:27" pos:end="89:28">|=</operator> <name pos:start="89:30" pos:end="89:39">PAGE_WRITE</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <case pos:start="97:5" pos:end="97:31">case <expr pos:start="97:10" pos:end="97:30"><name pos:start="97:10" pos:end="97:30">POWERPC_MMU_BOOKE_FSL</name></expr>:</case>

        <comment type="block" pos:start="99:9" pos:end="99:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:64"><expr pos:start="101:9" pos:end="101:63"><call pos:start="101:9" pos:end="101:63"><name pos:start="101:9" pos:end="101:17">cpu_abort</name><argument_list pos:start="101:18" pos:end="101:63">(<argument pos:start="101:19" pos:end="101:21"><expr pos:start="101:19" pos:end="101:21"><name pos:start="101:19" pos:end="101:21">env</name></expr></argument>, <argument pos:start="101:24" pos:end="101:62"><expr pos:start="101:24" pos:end="101:62"><literal type="string" pos:start="101:24" pos:end="101:62">"BookE FSL MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    <default pos:start="105:5" pos:end="105:12">default:</default>

        <expr_stmt pos:start="107:9" pos:end="107:57"><expr pos:start="107:9" pos:end="107:56"><call pos:start="107:9" pos:end="107:56"><name pos:start="107:9" pos:end="107:17">cpu_abort</name><argument_list pos:start="107:18" pos:end="107:56">(<argument pos:start="107:19" pos:end="107:21"><expr pos:start="107:19" pos:end="107:21"><name pos:start="107:19" pos:end="107:21">env</name></expr></argument>, <argument pos:start="107:24" pos:end="107:55"><expr pos:start="107:24" pos:end="107:55"><literal type="string" pos:start="107:24" pos:end="107:55">"Unknown or invalid MMU model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:18">return <expr pos:start="109:16" pos:end="109:17"><operator pos:start="109:16" pos:end="109:16">-</operator><literal type="number" pos:start="109:17" pos:end="109:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <return pos:start="115:5" pos:end="115:15">return <expr pos:start="115:12" pos:end="115:14"><name pos:start="115:12" pos:end="115:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
