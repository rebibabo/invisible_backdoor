<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15546.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">iscsi_truncate</name><parameter_list pos:start="1:26" pos:end="1:63">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:42">BlockDriverState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">bs</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:62"><decl pos:start="1:49" pos:end="1:62"><type pos:start="1:49" pos:end="1:62"><name pos:start="1:49" pos:end="1:55">int64_t</name></type> <name pos:start="1:57" pos:end="1:62">offset</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IscsiLun</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:22">iscsilun</name> <init pos:start="5:24" pos:end="5:35">= <expr pos:start="5:26" pos:end="5:35"><name pos:start="5:26" pos:end="5:35"><name pos:start="5:26" pos:end="5:27">bs</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:36">(<expr pos:start="11:9" pos:end="11:35"><name pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:16">iscsilun</name><operator pos:start="11:17" pos:end="11:18">-&gt;</operator><name pos:start="11:19" pos:end="11:22">type</name></name> <operator pos:start="11:24" pos:end="11:25">!=</operator> <name pos:start="11:27" pos:end="11:35">TYPE_DISK</name></expr>)</condition> <block pos:start="11:38" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:24">

        <return pos:start="13:9" pos:end="13:24">return <expr pos:start="13:16" pos:end="13:23"><operator pos:start="13:16" pos:end="13:16">-</operator><name pos:start="13:17" pos:end="13:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:50"><expr pos:start="19:5" pos:end="19:49"><call pos:start="19:5" pos:end="19:49"><name pos:start="19:5" pos:end="19:27">iscsi_readcapacity_sync</name><argument_list pos:start="19:28" pos:end="19:49">(<argument pos:start="19:29" pos:end="19:36"><expr pos:start="19:29" pos:end="19:36"><name pos:start="19:29" pos:end="19:36">iscsilun</name></expr></argument>, <argument pos:start="19:39" pos:end="19:48"><expr pos:start="19:39" pos:end="19:48"><operator pos:start="19:39" pos:end="19:39">&amp;</operator><name pos:start="19:40" pos:end="19:48">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:26">(<expr pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:17">local_err</name> <operator pos:start="21:19" pos:end="21:20">!=</operator> <name pos:start="21:22" pos:end="21:25">NULL</name></expr>)</condition> <block pos:start="21:28" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:20">

        <expr_stmt pos:start="23:9" pos:end="23:30"><expr pos:start="23:9" pos:end="23:29"><call pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:18">error_free</name><argument_list pos:start="23:19" pos:end="23:29">(<argument pos:start="23:20" pos:end="23:28"><expr pos:start="23:20" pos:end="23:28"><name pos:start="23:20" pos:end="23:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:20">return <expr pos:start="25:16" pos:end="25:19"><operator pos:start="25:16" pos:end="25:16">-</operator><name pos:start="25:17" pos:end="25:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:37">(<expr pos:start="31:9" pos:end="31:36"><name pos:start="31:9" pos:end="31:14">offset</name> <operator pos:start="31:16" pos:end="31:16">&gt;</operator> <call pos:start="31:18" pos:end="31:36"><name pos:start="31:18" pos:end="31:32">iscsi_getlength</name><argument_list pos:start="31:33" pos:end="31:36">(<argument pos:start="31:34" pos:end="31:35"><expr pos:start="31:34" pos:end="31:35"><name pos:start="31:34" pos:end="31:35">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:39" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:23">

        <return pos:start="33:9" pos:end="33:23">return <expr pos:start="33:16" pos:end="33:22"><operator pos:start="33:16" pos:end="33:16">-</operator><name pos:start="33:17" pos:end="33:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:40">(<expr pos:start="39:9" pos:end="39:39"><name pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:16">iscsilun</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:31">allocationmap</name></name> <operator pos:start="39:33" pos:end="39:34">!=</operator> <name pos:start="39:36" pos:end="39:39">NULL</name></expr>)</condition> <block pos:start="39:42" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:69">

        <expr_stmt pos:start="41:9" pos:end="41:40"><expr pos:start="41:9" pos:end="41:39"><call pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:14">g_free</name><argument_list pos:start="41:15" pos:end="41:39">(<argument pos:start="41:16" pos:end="41:38"><expr pos:start="41:16" pos:end="41:38"><name pos:start="41:16" pos:end="41:38"><name pos:start="41:16" pos:end="41:23">iscsilun</name><operator pos:start="41:24" pos:end="41:25">-&gt;</operator><name pos:start="41:26" pos:end="41:38">allocationmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:69"><expr pos:start="43:9" pos:end="43:68"><name pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:16">iscsilun</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:31">allocationmap</name></name> <operator pos:start="43:33" pos:end="43:33">=</operator> <call pos:start="43:35" pos:end="43:68"><name pos:start="43:35" pos:end="43:58">iscsi_allocationmap_init</name><argument_list pos:start="43:59" pos:end="43:68">(<argument pos:start="43:60" pos:end="43:67"><expr pos:start="43:60" pos:end="43:67"><name pos:start="43:60" pos:end="43:67">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="49:5" pos:end="49:13">return <expr pos:start="49:12" pos:end="49:12"><literal type="number" pos:start="49:12" pos:end="49:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
