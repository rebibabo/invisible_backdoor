<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15808.c" pos:tabs="8"><function pos:start="1:1" pos:end="315:1"><type pos:start="1:1" pos:end="1:27"><name pos:start="1:1" pos:end="1:25">GuestNetworkInterfaceList</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:59">qmp_guest_network_get_interfaces</name><parameter_list pos:start="1:60" pos:end="1:73">(<parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:68"><name pos:start="1:61" pos:end="1:65">Error</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="315:1">{<block_content pos:start="5:5" pos:end="313:16">

    <decl_stmt pos:start="5:5" pos:end="5:61"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:31"><name pos:start="5:5" pos:end="5:29">GuestNetworkInterfaceList</name> <modifier pos:start="5:31" pos:end="5:31">*</modifier></type><name pos:start="5:32" pos:end="5:35">head</name> <init pos:start="5:37" pos:end="5:42">= <expr pos:start="5:39" pos:end="5:42"><name pos:start="5:39" pos:end="5:42">NULL</name></expr></init></decl>, <decl pos:start="5:45" pos:end="5:60"><type ref="prev" pos:start="5:5" pos:end="5:31"><modifier pos:start="5:45" pos:end="5:45">*</modifier></type><name pos:start="5:46" pos:end="5:53">cur_item</name> <init pos:start="5:55" pos:end="5:60">= <expr pos:start="5:57" pos:end="5:60"><name pos:start="5:57" pos:end="5:60">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:18">ifaddrs</name></name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">ifap</name></decl>, <decl pos:start="7:27" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:20"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:30">ifa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:21"><name pos:start="9:10" pos:end="9:16">err_msg</name><index pos:start="9:17" pos:end="9:21">[<expr pos:start="9:18" pos:end="9:20"><literal type="number" pos:start="9:18" pos:end="9:20">512</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="23:5"><if pos:start="13:5" pos:end="23:5">if <condition pos:start="13:8" pos:end="13:30">(<expr pos:start="13:9" pos:end="13:29"><call pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:18">getifaddrs</name><argument_list pos:start="13:19" pos:end="13:25">(<argument pos:start="13:20" pos:end="13:24"><expr pos:start="13:20" pos:end="13:24"><operator pos:start="13:20" pos:end="13:20">&amp;</operator><name pos:start="13:21" pos:end="13:24">ifap</name></expr></argument>)</argument_list></call> <operator pos:start="13:27" pos:end="13:27">&lt;</operator> <literal type="number" pos:start="13:29" pos:end="13:29">0</literal></expr>)</condition> <block pos:start="13:32" pos:end="23:5">{<block_content pos:start="15:9" pos:end="21:19">

        <expr_stmt pos:start="15:9" pos:end="17:59"><expr pos:start="15:9" pos:end="17:58"><call pos:start="15:9" pos:end="17:58"><name pos:start="15:9" pos:end="15:16">snprintf</name><argument_list pos:start="15:17" pos:end="17:58">(<argument pos:start="15:18" pos:end="15:24"><expr pos:start="15:18" pos:end="15:24"><name pos:start="15:18" pos:end="15:24">err_msg</name></expr></argument>, <argument pos:start="15:27" pos:end="15:41"><expr pos:start="15:27" pos:end="15:41"><sizeof pos:start="15:27" pos:end="15:41">sizeof<argument_list pos:start="15:33" pos:end="15:41">(<argument pos:start="15:34" pos:end="15:40"><expr pos:start="15:34" pos:end="15:40"><name pos:start="15:34" pos:end="15:40">err_msg</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="17:18" pos:end="17:40"><expr pos:start="17:18" pos:end="17:40"><literal type="string" pos:start="17:18" pos:end="17:40">"getifaddrs failed: %s"</literal></expr></argument>, <argument pos:start="17:43" pos:end="17:57"><expr pos:start="17:43" pos:end="17:57"><call pos:start="17:43" pos:end="17:57"><name pos:start="17:43" pos:end="17:50">strerror</name><argument_list pos:start="17:51" pos:end="17:57">(<argument pos:start="17:52" pos:end="17:56"><expr pos:start="17:52" pos:end="17:56"><name pos:start="17:52" pos:end="17:56">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:58"><expr pos:start="19:9" pos:end="19:57"><call pos:start="19:9" pos:end="19:57"><name pos:start="19:9" pos:end="19:17">error_set</name><argument_list pos:start="19:18" pos:end="19:57">(<argument pos:start="19:19" pos:end="19:22"><expr pos:start="19:19" pos:end="19:22"><name pos:start="19:19" pos:end="19:22">errp</name></expr></argument>, <argument pos:start="19:25" pos:end="19:47"><expr pos:start="19:25" pos:end="19:47"><name pos:start="19:25" pos:end="19:47">QERR_QGA_COMMAND_FAILED</name></expr></argument>, <argument pos:start="19:50" pos:end="19:56"><expr pos:start="19:50" pos:end="19:56"><name pos:start="19:50" pos:end="19:56">err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="21:9" pos:end="21:19">goto <name pos:start="21:14" pos:end="21:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="27:5" pos:end="297:5">for <control pos:start="27:9" pos:end="27:46">(<init pos:start="27:10" pos:end="27:20"><expr pos:start="27:10" pos:end="27:19"><name pos:start="27:10" pos:end="27:12">ifa</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:19">ifap</name></expr>;</init> <condition pos:start="27:22" pos:end="27:25"><expr pos:start="27:22" pos:end="27:24"><name pos:start="27:22" pos:end="27:24">ifa</name></expr>;</condition> <incr pos:start="27:27" pos:end="27:45"><expr pos:start="27:27" pos:end="27:45"><name pos:start="27:27" pos:end="27:29">ifa</name> <operator pos:start="27:31" pos:end="27:31">=</operator> <name pos:start="27:33" pos:end="27:45"><name pos:start="27:33" pos:end="27:35">ifa</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:45">ifa_next</name></name></expr></incr>)</control> <block pos:start="27:48" pos:end="297:5">{<block_content pos:start="29:9" pos:end="291:45">

        <decl_stmt pos:start="29:9" pos:end="29:40"><decl pos:start="29:9" pos:end="29:39"><type pos:start="29:9" pos:end="29:35"><name pos:start="29:9" pos:end="29:33">GuestNetworkInterfaceList</name> <modifier pos:start="29:35" pos:end="29:35">*</modifier></type><name pos:start="29:36" pos:end="29:39">info</name></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:71"><decl pos:start="31:9" pos:end="31:48"><type pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:26">GuestIpAddressList</name> <modifier pos:start="31:28" pos:end="31:28">*</modifier><modifier pos:start="31:29" pos:end="31:29">*</modifier></type><name pos:start="31:30" pos:end="31:41">address_list</name> <init pos:start="31:43" pos:end="31:48">= <expr pos:start="31:45" pos:end="31:48"><name pos:start="31:45" pos:end="31:48">NULL</name></expr></init></decl>, <decl pos:start="31:51" pos:end="31:70"><type ref="prev" pos:start="31:9" pos:end="31:29"><modifier pos:start="31:51" pos:end="31:51">*</modifier></type><name pos:start="31:52" pos:end="31:63">address_item</name> <init pos:start="31:65" pos:end="31:70">= <expr pos:start="31:67" pos:end="31:70"><name pos:start="31:67" pos:end="31:70">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:36"><decl pos:start="33:9" pos:end="33:35"><type pos:start="33:9" pos:end="33:12"><name pos:start="33:9" pos:end="33:12">char</name></type> <name pos:start="33:14" pos:end="33:35"><name pos:start="33:14" pos:end="33:18">addr4</name><index pos:start="33:19" pos:end="33:35">[<expr pos:start="33:20" pos:end="33:34"><name pos:start="33:20" pos:end="33:34">INET_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:37"><decl pos:start="35:9" pos:end="35:36"><type pos:start="35:9" pos:end="35:12"><name pos:start="35:9" pos:end="35:12">char</name></type> <name pos:start="35:14" pos:end="35:36"><name pos:start="35:14" pos:end="35:18">addr6</name><index pos:start="35:19" pos:end="35:36">[<expr pos:start="35:20" pos:end="35:35"><name pos:start="35:20" pos:end="35:35">INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:17"><decl pos:start="37:9" pos:end="37:16"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:16">sock</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:25"><decl pos:start="39:9" pos:end="39:24"><type pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:14">struct</name> <name pos:start="39:16" pos:end="39:20">ifreq</name></name></type> <name pos:start="39:22" pos:end="39:24">ifr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:32"><decl pos:start="41:9" pos:end="41:31"><type pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:16">unsigned</name> <name pos:start="41:18" pos:end="41:21">char</name> <modifier pos:start="41:23" pos:end="41:23">*</modifier></type><name pos:start="41:24" pos:end="41:31">mac_addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:16"><decl pos:start="43:9" pos:end="43:15"><type pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:12">void</name> <modifier pos:start="43:14" pos:end="43:14">*</modifier></type><name pos:start="43:15" pos:end="43:15">p</name></decl>;</decl_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:58"><expr pos:start="47:9" pos:end="47:57"><call pos:start="47:9" pos:end="47:57"><name pos:start="47:9" pos:end="47:15">g_debug</name><argument_list pos:start="47:16" pos:end="47:57">(<argument pos:start="47:17" pos:end="47:41"><expr pos:start="47:17" pos:end="47:41"><literal type="string" pos:start="47:17" pos:end="47:41">"Processing %s interface"</literal></expr></argument>, <argument pos:start="47:44" pos:end="47:56"><expr pos:start="47:44" pos:end="47:56"><name pos:start="47:44" pos:end="47:56"><name pos:start="47:44" pos:end="47:46">ifa</name><operator pos:start="47:47" pos:end="47:48">-&gt;</operator><name pos:start="47:49" pos:end="47:56">ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:57"><expr pos:start="51:9" pos:end="51:56"><name pos:start="51:9" pos:end="51:12">info</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <call pos:start="51:16" pos:end="51:56"><name pos:start="51:16" pos:end="51:35">guest_find_interface</name><argument_list pos:start="51:36" pos:end="51:56">(<argument pos:start="51:37" pos:end="51:40"><expr pos:start="51:37" pos:end="51:40"><name pos:start="51:37" pos:end="51:40">head</name></expr></argument>, <argument pos:start="51:43" pos:end="51:55"><expr pos:start="51:43" pos:end="51:55"><name pos:start="51:43" pos:end="51:55"><name pos:start="51:43" pos:end="51:45">ifa</name><operator pos:start="51:46" pos:end="51:47">-&gt;</operator><name pos:start="51:48" pos:end="51:55">ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="55:9" pos:end="77:9"><if pos:start="55:9" pos:end="77:9">if <condition pos:start="55:12" pos:end="55:18">(<expr pos:start="55:13" pos:end="55:17"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:17">info</name></expr>)</condition> <block pos:start="55:20" pos:end="77:9">{<block_content pos:start="57:13" pos:end="75:13">

            <expr_stmt pos:start="57:13" pos:end="57:44"><expr pos:start="57:13" pos:end="57:43"><name pos:start="57:13" pos:end="57:16">info</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <call pos:start="57:20" pos:end="57:43"><name pos:start="57:20" pos:end="57:28">g_malloc0</name><argument_list pos:start="57:29" pos:end="57:43">(<argument pos:start="57:30" pos:end="57:42"><expr pos:start="57:30" pos:end="57:42"><sizeof pos:start="57:30" pos:end="57:42">sizeof<argument_list pos:start="57:36" pos:end="57:42">(<argument pos:start="57:37" pos:end="57:41"><expr pos:start="57:37" pos:end="57:41"><operator pos:start="57:37" pos:end="57:37">*</operator><name pos:start="57:38" pos:end="57:41">info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:58"><expr pos:start="59:13" pos:end="59:57"><name pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:16">info</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:23">value</name></name> <operator pos:start="59:25" pos:end="59:25">=</operator> <call pos:start="59:27" pos:end="59:57"><name pos:start="59:27" pos:end="59:35">g_malloc0</name><argument_list pos:start="59:36" pos:end="59:57">(<argument pos:start="59:37" pos:end="59:56"><expr pos:start="59:37" pos:end="59:56"><sizeof pos:start="59:37" pos:end="59:56">sizeof<argument_list pos:start="59:43" pos:end="59:56">(<argument pos:start="59:44" pos:end="59:55"><expr pos:start="59:44" pos:end="59:55"><operator pos:start="59:44" pos:end="59:44">*</operator><name pos:start="59:45" pos:end="59:55"><name pos:start="59:45" pos:end="59:48">info</name><operator pos:start="59:49" pos:end="59:50">-&gt;</operator><name pos:start="59:51" pos:end="59:55">value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:56"><expr pos:start="61:13" pos:end="61:55"><name pos:start="61:13" pos:end="61:29"><name pos:start="61:13" pos:end="61:16">info</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:23">value</name><operator pos:start="61:24" pos:end="61:25">-&gt;</operator><name pos:start="61:26" pos:end="61:29">name</name></name> <operator pos:start="61:31" pos:end="61:31">=</operator> <call pos:start="61:33" pos:end="61:55"><name pos:start="61:33" pos:end="61:40">g_strdup</name><argument_list pos:start="61:41" pos:end="61:55">(<argument pos:start="61:42" pos:end="61:54"><expr pos:start="61:42" pos:end="61:54"><name pos:start="61:42" pos:end="61:54"><name pos:start="61:42" pos:end="61:44">ifa</name><operator pos:start="61:45" pos:end="61:46">-&gt;</operator><name pos:start="61:47" pos:end="61:54">ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="65:13" pos:end="75:13"><if pos:start="65:13" pos:end="69:13">if <condition pos:start="65:16" pos:end="65:26">(<expr pos:start="65:17" pos:end="65:25"><operator pos:start="65:17" pos:end="65:17">!</operator><name pos:start="65:18" pos:end="65:25">cur_item</name></expr>)</condition> <block pos:start="65:28" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:39">

                <expr_stmt pos:start="67:17" pos:end="67:39"><expr pos:start="67:17" pos:end="67:38"><name pos:start="67:17" pos:end="67:20">head</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <name pos:start="67:24" pos:end="67:31">cur_item</name> <operator pos:start="67:33" pos:end="67:33">=</operator> <name pos:start="67:35" pos:end="67:38">info</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="69:15" pos:end="75:13">else <block pos:start="69:20" pos:end="75:13">{<block_content pos:start="71:17" pos:end="73:32">

                <expr_stmt pos:start="71:17" pos:end="71:38"><expr pos:start="71:17" pos:end="71:37"><name pos:start="71:17" pos:end="71:30"><name pos:start="71:17" pos:end="71:24">cur_item</name><operator pos:start="71:25" pos:end="71:26">-&gt;</operator><name pos:start="71:27" pos:end="71:30">next</name></name> <operator pos:start="71:32" pos:end="71:32">=</operator> <name pos:start="71:34" pos:end="71:37">info</name></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:32"><expr pos:start="73:17" pos:end="73:31"><name pos:start="73:17" pos:end="73:24">cur_item</name> <operator pos:start="73:26" pos:end="73:26">=</operator> <name pos:start="73:28" pos:end="73:31">info</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="81:9" pos:end="155:9"><if pos:start="81:9" pos:end="155:9">if <condition pos:start="81:12" pos:end="83:43">(<expr pos:start="81:13" pos:end="83:42"><operator pos:start="81:13" pos:end="81:13">!</operator><name pos:start="81:14" pos:end="81:46"><name pos:start="81:14" pos:end="81:17">info</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:24">value</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:46">has_hardware_address</name></name> <operator pos:start="81:48" pos:end="81:49">&amp;&amp;</operator>

            <name pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:15">ifa</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:26">ifa_flags</name></name> <operator pos:start="83:28" pos:end="83:28">&amp;</operator> <name pos:start="83:30" pos:end="83:42">SIOCGIFHWADDR</name></expr>)</condition> <block pos:start="83:45" pos:end="155:9">{<block_content pos:start="87:13" pos:end="153:24">

            <comment type="block" pos:start="85:13" pos:end="85:52">/* we haven't obtained HW address yet */</comment>

            <expr_stmt pos:start="87:13" pos:end="87:51"><expr pos:start="87:13" pos:end="87:50"><name pos:start="87:13" pos:end="87:16">sock</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <call pos:start="87:20" pos:end="87:50"><name pos:start="87:20" pos:end="87:25">socket</name><argument_list pos:start="87:26" pos:end="87:50">(<argument pos:start="87:27" pos:end="87:33"><expr pos:start="87:27" pos:end="87:33"><name pos:start="87:27" pos:end="87:33">PF_INET</name></expr></argument>, <argument pos:start="87:36" pos:end="87:46"><expr pos:start="87:36" pos:end="87:46"><name pos:start="87:36" pos:end="87:46">SOCK_STREAM</name></expr></argument>, <argument pos:start="87:49" pos:end="87:49"><expr pos:start="87:49" pos:end="87:49"><literal type="number" pos:start="87:49" pos:end="87:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="99:13"><if pos:start="89:13" pos:end="99:13">if <condition pos:start="89:16" pos:end="89:27">(<expr pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:20">sock</name> <operator pos:start="89:22" pos:end="89:23">==</operator> <operator pos:start="89:25" pos:end="89:25">-</operator><literal type="number" pos:start="89:26" pos:end="89:26">1</literal></expr>)</condition> <block pos:start="89:29" pos:end="99:13">{<block_content pos:start="91:17" pos:end="97:27">

                <expr_stmt pos:start="91:17" pos:end="93:73"><expr pos:start="91:17" pos:end="93:72"><call pos:start="91:17" pos:end="93:72"><name pos:start="91:17" pos:end="91:24">snprintf</name><argument_list pos:start="91:25" pos:end="93:72">(<argument pos:start="91:26" pos:end="91:32"><expr pos:start="91:26" pos:end="91:32"><name pos:start="91:26" pos:end="91:32">err_msg</name></expr></argument>, <argument pos:start="91:35" pos:end="91:49"><expr pos:start="91:35" pos:end="91:49"><sizeof pos:start="91:35" pos:end="91:49">sizeof<argument_list pos:start="91:41" pos:end="91:49">(<argument pos:start="91:42" pos:end="91:48"><expr pos:start="91:42" pos:end="91:48"><name pos:start="91:42" pos:end="91:48">err_msg</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                         <argument pos:start="93:26" pos:end="93:54"><expr pos:start="93:26" pos:end="93:54"><literal type="string" pos:start="93:26" pos:end="93:54">"failed to create socket: %s"</literal></expr></argument>, <argument pos:start="93:57" pos:end="93:71"><expr pos:start="93:57" pos:end="93:71"><call pos:start="93:57" pos:end="93:71"><name pos:start="93:57" pos:end="93:64">strerror</name><argument_list pos:start="93:65" pos:end="93:71">(<argument pos:start="93:66" pos:end="93:70"><expr pos:start="93:66" pos:end="93:70"><name pos:start="93:66" pos:end="93:70">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:66"><expr pos:start="95:17" pos:end="95:65"><call pos:start="95:17" pos:end="95:65"><name pos:start="95:17" pos:end="95:25">error_set</name><argument_list pos:start="95:26" pos:end="95:65">(<argument pos:start="95:27" pos:end="95:30"><expr pos:start="95:27" pos:end="95:30"><name pos:start="95:27" pos:end="95:30">errp</name></expr></argument>, <argument pos:start="95:33" pos:end="95:55"><expr pos:start="95:33" pos:end="95:55"><name pos:start="95:33" pos:end="95:55">QERR_QGA_COMMAND_FAILED</name></expr></argument>, <argument pos:start="95:58" pos:end="95:64"><expr pos:start="95:58" pos:end="95:64"><name pos:start="95:58" pos:end="95:64">err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="97:17" pos:end="97:27">goto <name pos:start="97:22" pos:end="97:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="103:13" pos:end="103:41"><expr pos:start="103:13" pos:end="103:40"><call pos:start="103:13" pos:end="103:40"><name pos:start="103:13" pos:end="103:18">memset</name><argument_list pos:start="103:19" pos:end="103:40">(<argument pos:start="103:20" pos:end="103:23"><expr pos:start="103:20" pos:end="103:23"><operator pos:start="103:20" pos:end="103:20">&amp;</operator><name pos:start="103:21" pos:end="103:23">ifr</name></expr></argument>, <argument pos:start="103:26" pos:end="103:26"><expr pos:start="103:26" pos:end="103:26"><literal type="number" pos:start="103:26" pos:end="103:26">0</literal></expr></argument>, <argument pos:start="103:29" pos:end="103:39"><expr pos:start="103:29" pos:end="103:39"><sizeof pos:start="103:29" pos:end="103:39">sizeof<argument_list pos:start="103:35" pos:end="103:39">(<argument pos:start="103:36" pos:end="103:38"><expr pos:start="103:36" pos:end="103:38"><name pos:start="103:36" pos:end="103:38">ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:67"><expr pos:start="105:13" pos:end="105:66"><call pos:start="105:13" pos:end="105:66"><name pos:start="105:13" pos:end="105:19">strncpy</name><argument_list pos:start="105:20" pos:end="105:66">(<argument pos:start="105:21" pos:end="105:32"><expr pos:start="105:21" pos:end="105:32"><name pos:start="105:21" pos:end="105:32"><name pos:start="105:21" pos:end="105:23">ifr</name><operator pos:start="105:24" pos:end="105:24">.</operator><name pos:start="105:25" pos:end="105:32">ifr_name</name></name></expr></argument>,  <argument pos:start="105:36" pos:end="105:52"><expr pos:start="105:36" pos:end="105:52"><name pos:start="105:36" pos:end="105:52"><name pos:start="105:36" pos:end="105:39">info</name><operator pos:start="105:40" pos:end="105:41">-&gt;</operator><name pos:start="105:42" pos:end="105:46">value</name><operator pos:start="105:47" pos:end="105:48">-&gt;</operator><name pos:start="105:49" pos:end="105:52">name</name></name></expr></argument>, <argument pos:start="105:55" pos:end="105:65"><expr pos:start="105:55" pos:end="105:65"><name pos:start="105:55" pos:end="105:65">IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="121:13"><if pos:start="107:13" pos:end="121:13">if <condition pos:start="107:16" pos:end="107:55">(<expr pos:start="107:17" pos:end="107:54"><call pos:start="107:17" pos:end="107:48"><name pos:start="107:17" pos:end="107:21">ioctl</name><argument_list pos:start="107:22" pos:end="107:48">(<argument pos:start="107:23" pos:end="107:26"><expr pos:start="107:23" pos:end="107:26"><name pos:start="107:23" pos:end="107:26">sock</name></expr></argument>, <argument pos:start="107:29" pos:end="107:41"><expr pos:start="107:29" pos:end="107:41"><name pos:start="107:29" pos:end="107:41">SIOCGIFHWADDR</name></expr></argument>, <argument pos:start="107:44" pos:end="107:47"><expr pos:start="107:44" pos:end="107:47"><operator pos:start="107:44" pos:end="107:44">&amp;</operator><name pos:start="107:45" pos:end="107:47">ifr</name></expr></argument>)</argument_list></call> <operator pos:start="107:50" pos:end="107:51">==</operator> <operator pos:start="107:53" pos:end="107:53">-</operator><literal type="number" pos:start="107:54" pos:end="107:54">1</literal></expr>)</condition> <block pos:start="107:57" pos:end="121:13">{<block_content pos:start="109:17" pos:end="119:27">

                <expr_stmt pos:start="109:17" pos:end="115:42"><expr pos:start="109:17" pos:end="115:41"><call pos:start="109:17" pos:end="115:41"><name pos:start="109:17" pos:end="109:24">snprintf</name><argument_list pos:start="109:25" pos:end="115:41">(<argument pos:start="109:26" pos:end="109:32"><expr pos:start="109:26" pos:end="109:32"><name pos:start="109:26" pos:end="109:32">err_msg</name></expr></argument>, <argument pos:start="109:35" pos:end="109:49"><expr pos:start="109:35" pos:end="109:49"><sizeof pos:start="109:35" pos:end="109:49">sizeof<argument_list pos:start="109:41" pos:end="109:49">(<argument pos:start="109:42" pos:end="109:48"><expr pos:start="109:42" pos:end="109:48"><name pos:start="109:42" pos:end="109:48">err_msg</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                         <argument pos:start="111:26" pos:end="111:61"><expr pos:start="111:26" pos:end="111:61"><literal type="string" pos:start="111:26" pos:end="111:61">"failed to get MAC addres of %s: %s"</literal></expr></argument>,

                         <argument pos:start="113:26" pos:end="113:38"><expr pos:start="113:26" pos:end="113:38"><name pos:start="113:26" pos:end="113:38"><name pos:start="113:26" pos:end="113:28">ifa</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:38">ifa_name</name></name></expr></argument>,

                         <argument pos:start="115:26" pos:end="115:40"><expr pos:start="115:26" pos:end="115:40"><call pos:start="115:26" pos:end="115:40"><name pos:start="115:26" pos:end="115:33">strerror</name><argument_list pos:start="115:34" pos:end="115:40">(<argument pos:start="115:35" pos:end="115:39"><expr pos:start="115:35" pos:end="115:39"><name pos:start="115:35" pos:end="115:39">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:66"><expr pos:start="117:17" pos:end="117:65"><call pos:start="117:17" pos:end="117:65"><name pos:start="117:17" pos:end="117:25">error_set</name><argument_list pos:start="117:26" pos:end="117:65">(<argument pos:start="117:27" pos:end="117:30"><expr pos:start="117:27" pos:end="117:30"><name pos:start="117:27" pos:end="117:30">errp</name></expr></argument>, <argument pos:start="117:33" pos:end="117:55"><expr pos:start="117:33" pos:end="117:55"><name pos:start="117:33" pos:end="117:55">QERR_QGA_COMMAND_FAILED</name></expr></argument>, <argument pos:start="117:58" pos:end="117:64"><expr pos:start="117:58" pos:end="117:64"><name pos:start="117:58" pos:end="117:64">err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="119:17" pos:end="119:27">goto <name pos:start="119:22" pos:end="119:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="125:13" pos:end="125:65"><expr pos:start="125:13" pos:end="125:64"><name pos:start="125:13" pos:end="125:20">mac_addr</name> <operator pos:start="125:22" pos:end="125:22">=</operator> <operator pos:start="125:24" pos:end="125:24">(</operator><name pos:start="125:25" pos:end="125:32">unsigned</name> <name pos:start="125:34" pos:end="125:37">char</name> <operator pos:start="125:39" pos:end="125:39">*</operator><operator pos:start="125:40" pos:end="125:40">)</operator> <operator pos:start="125:42" pos:end="125:42">&amp;</operator><name pos:start="125:43" pos:end="125:64"><name pos:start="125:43" pos:end="125:45">ifr</name><operator pos:start="125:46" pos:end="125:46">.</operator><name pos:start="125:47" pos:end="125:56">ifr_hwaddr</name><operator pos:start="125:57" pos:end="125:57">.</operator><name pos:start="125:58" pos:end="125:64">sa_data</name></name></expr>;</expr_stmt>



            <if_stmt pos:start="129:13" pos:end="147:13"><if pos:start="129:13" pos:end="147:13">if <condition pos:start="129:16" pos:end="137:69">(<expr pos:start="129:17" pos:end="137:68"><call pos:start="129:17" pos:end="137:62"><name pos:start="129:17" pos:end="129:24">asprintf</name><argument_list pos:start="129:25" pos:end="137:62">(<argument pos:start="129:26" pos:end="129:55"><expr pos:start="129:26" pos:end="129:55"><operator pos:start="129:26" pos:end="129:26">&amp;</operator><name pos:start="129:27" pos:end="129:55"><name pos:start="129:27" pos:end="129:30">info</name><operator pos:start="129:31" pos:end="129:32">-&gt;</operator><name pos:start="129:33" pos:end="129:37">value</name><operator pos:start="129:38" pos:end="129:39">-&gt;</operator><name pos:start="129:40" pos:end="129:55">hardware_address</name></name></expr></argument>,

                         <argument pos:start="131:26" pos:end="131:56"><expr pos:start="131:26" pos:end="131:56"><literal type="string" pos:start="131:26" pos:end="131:56">"%02x:%02x:%02x:%02x:%02x:%02x"</literal></expr></argument>,

                         <argument pos:start="133:26" pos:end="133:42"><expr pos:start="133:26" pos:end="133:42"><operator pos:start="133:26" pos:end="133:26">(</operator><name pos:start="133:27" pos:end="133:29">int</name><operator pos:start="133:30" pos:end="133:30">)</operator> <name pos:start="133:32" pos:end="133:42"><name pos:start="133:32" pos:end="133:39">mac_addr</name><index pos:start="133:40" pos:end="133:42">[<expr pos:start="133:41" pos:end="133:41"><literal type="number" pos:start="133:41" pos:end="133:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="133:45" pos:end="133:61"><expr pos:start="133:45" pos:end="133:61"><operator pos:start="133:45" pos:end="133:45">(</operator><name pos:start="133:46" pos:end="133:48">int</name><operator pos:start="133:49" pos:end="133:49">)</operator> <name pos:start="133:51" pos:end="133:61"><name pos:start="133:51" pos:end="133:58">mac_addr</name><index pos:start="133:59" pos:end="133:61">[<expr pos:start="133:60" pos:end="133:60"><literal type="number" pos:start="133:60" pos:end="133:60">1</literal></expr>]</index></name></expr></argument>,

                         <argument pos:start="135:26" pos:end="135:42"><expr pos:start="135:26" pos:end="135:42"><operator pos:start="135:26" pos:end="135:26">(</operator><name pos:start="135:27" pos:end="135:29">int</name><operator pos:start="135:30" pos:end="135:30">)</operator> <name pos:start="135:32" pos:end="135:42"><name pos:start="135:32" pos:end="135:39">mac_addr</name><index pos:start="135:40" pos:end="135:42">[<expr pos:start="135:41" pos:end="135:41"><literal type="number" pos:start="135:41" pos:end="135:41">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="135:45" pos:end="135:61"><expr pos:start="135:45" pos:end="135:61"><operator pos:start="135:45" pos:end="135:45">(</operator><name pos:start="135:46" pos:end="135:48">int</name><operator pos:start="135:49" pos:end="135:49">)</operator> <name pos:start="135:51" pos:end="135:61"><name pos:start="135:51" pos:end="135:58">mac_addr</name><index pos:start="135:59" pos:end="135:61">[<expr pos:start="135:60" pos:end="135:60"><literal type="number" pos:start="135:60" pos:end="135:60">3</literal></expr>]</index></name></expr></argument>,

                         <argument pos:start="137:26" pos:end="137:42"><expr pos:start="137:26" pos:end="137:42"><operator pos:start="137:26" pos:end="137:26">(</operator><name pos:start="137:27" pos:end="137:29">int</name><operator pos:start="137:30" pos:end="137:30">)</operator> <name pos:start="137:32" pos:end="137:42"><name pos:start="137:32" pos:end="137:39">mac_addr</name><index pos:start="137:40" pos:end="137:42">[<expr pos:start="137:41" pos:end="137:41"><literal type="number" pos:start="137:41" pos:end="137:41">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="137:45" pos:end="137:61"><expr pos:start="137:45" pos:end="137:61"><operator pos:start="137:45" pos:end="137:45">(</operator><name pos:start="137:46" pos:end="137:48">int</name><operator pos:start="137:49" pos:end="137:49">)</operator> <name pos:start="137:51" pos:end="137:61"><name pos:start="137:51" pos:end="137:58">mac_addr</name><index pos:start="137:59" pos:end="137:61">[<expr pos:start="137:60" pos:end="137:60"><literal type="number" pos:start="137:60" pos:end="137:60">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="137:64" pos:end="137:65">==</operator> <operator pos:start="137:67" pos:end="137:67">-</operator><literal type="number" pos:start="137:68" pos:end="137:68">1</literal></expr>)</condition> <block pos:start="137:71" pos:end="147:13">{<block_content pos:start="139:17" pos:end="145:27">

                <expr_stmt pos:start="139:17" pos:end="141:70"><expr pos:start="139:17" pos:end="141:69"><call pos:start="139:17" pos:end="141:69"><name pos:start="139:17" pos:end="139:24">snprintf</name><argument_list pos:start="139:25" pos:end="141:69">(<argument pos:start="139:26" pos:end="139:32"><expr pos:start="139:26" pos:end="139:32"><name pos:start="139:26" pos:end="139:32">err_msg</name></expr></argument>, <argument pos:start="139:35" pos:end="139:49"><expr pos:start="139:35" pos:end="139:49"><sizeof pos:start="139:35" pos:end="139:49">sizeof<argument_list pos:start="139:41" pos:end="139:49">(<argument pos:start="139:42" pos:end="139:48"><expr pos:start="139:42" pos:end="139:48"><name pos:start="139:42" pos:end="139:48">err_msg</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                         <argument pos:start="141:26" pos:end="141:51"><expr pos:start="141:26" pos:end="141:51"><literal type="string" pos:start="141:26" pos:end="141:51">"failed to format MAC: %s"</literal></expr></argument>, <argument pos:start="141:54" pos:end="141:68"><expr pos:start="141:54" pos:end="141:68"><call pos:start="141:54" pos:end="141:68"><name pos:start="141:54" pos:end="141:61">strerror</name><argument_list pos:start="141:62" pos:end="141:68">(<argument pos:start="141:63" pos:end="141:67"><expr pos:start="141:63" pos:end="141:67"><name pos:start="141:63" pos:end="141:67">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:66"><expr pos:start="143:17" pos:end="143:65"><call pos:start="143:17" pos:end="143:65"><name pos:start="143:17" pos:end="143:25">error_set</name><argument_list pos:start="143:26" pos:end="143:65">(<argument pos:start="143:27" pos:end="143:30"><expr pos:start="143:27" pos:end="143:30"><name pos:start="143:27" pos:end="143:30">errp</name></expr></argument>, <argument pos:start="143:33" pos:end="143:55"><expr pos:start="143:33" pos:end="143:55"><name pos:start="143:33" pos:end="143:55">QERR_QGA_COMMAND_FAILED</name></expr></argument>, <argument pos:start="143:58" pos:end="143:64"><expr pos:start="143:58" pos:end="143:64"><name pos:start="143:58" pos:end="143:64">err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="145:17" pos:end="145:27">goto <name pos:start="145:22" pos:end="145:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="151:13" pos:end="151:53"><expr pos:start="151:13" pos:end="151:52"><name pos:start="151:13" pos:end="151:45"><name pos:start="151:13" pos:end="151:16">info</name><operator pos:start="151:17" pos:end="151:18">-&gt;</operator><name pos:start="151:19" pos:end="151:23">value</name><operator pos:start="151:24" pos:end="151:25">-&gt;</operator><name pos:start="151:26" pos:end="151:45">has_hardware_address</name></name> <operator pos:start="151:47" pos:end="151:47">=</operator> <name pos:start="151:49" pos:end="151:52">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:24"><expr pos:start="153:13" pos:end="153:23"><call pos:start="153:13" pos:end="153:23"><name pos:start="153:13" pos:end="153:17">close</name><argument_list pos:start="153:18" pos:end="153:23">(<argument pos:start="153:19" pos:end="153:22"><expr pos:start="153:19" pos:end="153:22"><name pos:start="153:19" pos:end="153:22">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="159:9" pos:end="255:9"><if pos:start="159:9" pos:end="203:9">if <condition pos:start="159:12" pos:end="161:48">(<expr pos:start="159:13" pos:end="161:47"><name pos:start="159:13" pos:end="159:25"><name pos:start="159:13" pos:end="159:15">ifa</name><operator pos:start="159:16" pos:end="159:17">-&gt;</operator><name pos:start="159:18" pos:end="159:25">ifa_addr</name></name> <operator pos:start="159:27" pos:end="159:28">&amp;&amp;</operator>

            <name pos:start="161:13" pos:end="161:36"><name pos:start="161:13" pos:end="161:15">ifa</name><operator pos:start="161:16" pos:end="161:17">-&gt;</operator><name pos:start="161:18" pos:end="161:25">ifa_addr</name><operator pos:start="161:26" pos:end="161:27">-&gt;</operator><name pos:start="161:28" pos:end="161:36">sa_family</name></name> <operator pos:start="161:38" pos:end="161:39">==</operator> <name pos:start="161:41" pos:end="161:47">AF_INET</name></expr>)</condition> <block pos:start="161:50" pos:end="203:9">{<block_content pos:start="165:13" pos:end="201:13">

            <comment type="block" pos:start="163:13" pos:end="163:45">/* interface with IPv4 address */</comment>

            <expr_stmt pos:start="165:13" pos:end="165:60"><expr pos:start="165:13" pos:end="165:59"><name pos:start="165:13" pos:end="165:24">address_item</name> <operator pos:start="165:26" pos:end="165:26">=</operator> <call pos:start="165:28" pos:end="165:59"><name pos:start="165:28" pos:end="165:36">g_malloc0</name><argument_list pos:start="165:37" pos:end="165:59">(<argument pos:start="165:38" pos:end="165:58"><expr pos:start="165:38" pos:end="165:58"><sizeof pos:start="165:38" pos:end="165:58">sizeof<argument_list pos:start="165:44" pos:end="165:58">(<argument pos:start="165:45" pos:end="165:57"><expr pos:start="165:45" pos:end="165:57"><operator pos:start="165:45" pos:end="165:45">*</operator><name pos:start="165:46" pos:end="165:57">address_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:74"><expr pos:start="167:13" pos:end="167:73"><name pos:start="167:13" pos:end="167:31"><name pos:start="167:13" pos:end="167:24">address_item</name><operator pos:start="167:25" pos:end="167:26">-&gt;</operator><name pos:start="167:27" pos:end="167:31">value</name></name> <operator pos:start="167:33" pos:end="167:33">=</operator> <call pos:start="167:35" pos:end="167:73"><name pos:start="167:35" pos:end="167:43">g_malloc0</name><argument_list pos:start="167:44" pos:end="167:73">(<argument pos:start="167:45" pos:end="167:72"><expr pos:start="167:45" pos:end="167:72"><sizeof pos:start="167:45" pos:end="167:72">sizeof<argument_list pos:start="167:51" pos:end="167:72">(<argument pos:start="167:52" pos:end="167:71"><expr pos:start="167:52" pos:end="167:71"><operator pos:start="167:52" pos:end="167:52">*</operator><name pos:start="167:53" pos:end="167:71"><name pos:start="167:53" pos:end="167:64">address_item</name><operator pos:start="167:65" pos:end="167:66">-&gt;</operator><name pos:start="167:67" pos:end="167:71">value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:65"><expr pos:start="169:13" pos:end="169:64"><name pos:start="169:13" pos:end="169:13">p</name> <operator pos:start="169:15" pos:end="169:15">=</operator> <operator pos:start="169:17" pos:end="169:17">&amp;</operator><operator pos:start="169:18" pos:end="169:18">(</operator><operator pos:start="169:19" pos:end="169:19">(</operator>struct <name pos:start="169:27" pos:end="169:37">sockaddr_in</name> <operator pos:start="169:39" pos:end="169:39">*</operator><operator pos:start="169:40" pos:end="169:40">)</operator><name pos:start="169:41" pos:end="169:53"><name pos:start="169:41" pos:end="169:43">ifa</name><operator pos:start="169:44" pos:end="169:45">-&gt;</operator><name pos:start="169:46" pos:end="169:53">ifa_addr</name></name><operator pos:start="169:54" pos:end="169:54">)</operator><operator pos:start="169:55" pos:end="169:56">-&gt;</operator><name pos:start="169:57" pos:end="169:64">sin_addr</name></expr>;</expr_stmt>

            <if_stmt pos:start="171:13" pos:end="181:13"><if pos:start="171:13" pos:end="181:13">if <condition pos:start="171:16" pos:end="171:61">(<expr pos:start="171:17" pos:end="171:60"><operator pos:start="171:17" pos:end="171:17">!</operator><call pos:start="171:18" pos:end="171:60"><name pos:start="171:18" pos:end="171:26">inet_ntop</name><argument_list pos:start="171:27" pos:end="171:60">(<argument pos:start="171:28" pos:end="171:34"><expr pos:start="171:28" pos:end="171:34"><name pos:start="171:28" pos:end="171:34">AF_INET</name></expr></argument>, <argument pos:start="171:37" pos:end="171:37"><expr pos:start="171:37" pos:end="171:37"><name pos:start="171:37" pos:end="171:37">p</name></expr></argument>, <argument pos:start="171:40" pos:end="171:44"><expr pos:start="171:40" pos:end="171:44"><name pos:start="171:40" pos:end="171:44">addr4</name></expr></argument>, <argument pos:start="171:47" pos:end="171:59"><expr pos:start="171:47" pos:end="171:59"><sizeof pos:start="171:47" pos:end="171:59">sizeof<argument_list pos:start="171:53" pos:end="171:59">(<argument pos:start="171:54" pos:end="171:58"><expr pos:start="171:54" pos:end="171:58"><name pos:start="171:54" pos:end="171:58">addr4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:63" pos:end="181:13">{<block_content pos:start="173:17" pos:end="179:27">

                <expr_stmt pos:start="173:17" pos:end="175:67"><expr pos:start="173:17" pos:end="175:66"><call pos:start="173:17" pos:end="175:66"><name pos:start="173:17" pos:end="173:24">snprintf</name><argument_list pos:start="173:25" pos:end="175:66">(<argument pos:start="173:26" pos:end="173:32"><expr pos:start="173:26" pos:end="173:32"><name pos:start="173:26" pos:end="173:32">err_msg</name></expr></argument>, <argument pos:start="173:35" pos:end="173:49"><expr pos:start="173:35" pos:end="173:49"><sizeof pos:start="173:35" pos:end="173:49">sizeof<argument_list pos:start="173:41" pos:end="173:49">(<argument pos:start="173:42" pos:end="173:48"><expr pos:start="173:42" pos:end="173:48"><name pos:start="173:42" pos:end="173:48">err_msg</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                         <argument pos:start="175:26" pos:end="175:48"><expr pos:start="175:26" pos:end="175:48"><literal type="string" pos:start="175:26" pos:end="175:48">"inet_ntop failed : %s"</literal></expr></argument>, <argument pos:start="175:51" pos:end="175:65"><expr pos:start="175:51" pos:end="175:65"><call pos:start="175:51" pos:end="175:65"><name pos:start="175:51" pos:end="175:58">strerror</name><argument_list pos:start="175:59" pos:end="175:65">(<argument pos:start="175:60" pos:end="175:64"><expr pos:start="175:60" pos:end="175:64"><name pos:start="175:60" pos:end="175:64">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:66"><expr pos:start="177:17" pos:end="177:65"><call pos:start="177:17" pos:end="177:65"><name pos:start="177:17" pos:end="177:25">error_set</name><argument_list pos:start="177:26" pos:end="177:65">(<argument pos:start="177:27" pos:end="177:30"><expr pos:start="177:27" pos:end="177:30"><name pos:start="177:27" pos:end="177:30">errp</name></expr></argument>, <argument pos:start="177:33" pos:end="177:55"><expr pos:start="177:33" pos:end="177:55"><name pos:start="177:33" pos:end="177:55">QERR_QGA_COMMAND_FAILED</name></expr></argument>, <argument pos:start="177:58" pos:end="177:64"><expr pos:start="177:58" pos:end="177:64"><name pos:start="177:58" pos:end="177:64">err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="179:17" pos:end="179:27">goto <name pos:start="179:22" pos:end="179:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="185:13" pos:end="185:62"><expr pos:start="185:13" pos:end="185:61"><name pos:start="185:13" pos:end="185:43"><name pos:start="185:13" pos:end="185:24">address_item</name><operator pos:start="185:25" pos:end="185:26">-&gt;</operator><name pos:start="185:27" pos:end="185:31">value</name><operator pos:start="185:32" pos:end="185:33">-&gt;</operator><name pos:start="185:34" pos:end="185:43">ip_address</name></name> <operator pos:start="185:45" pos:end="185:45">=</operator> <call pos:start="185:47" pos:end="185:61"><name pos:start="185:47" pos:end="185:54">g_strdup</name><argument_list pos:start="185:55" pos:end="185:61">(<argument pos:start="185:56" pos:end="185:60"><expr pos:start="185:56" pos:end="185:60"><name pos:start="185:56" pos:end="185:60">addr4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:78"><expr pos:start="187:13" pos:end="187:77"><name pos:start="187:13" pos:end="187:48"><name pos:start="187:13" pos:end="187:24">address_item</name><operator pos:start="187:25" pos:end="187:26">-&gt;</operator><name pos:start="187:27" pos:end="187:31">value</name><operator pos:start="187:32" pos:end="187:33">-&gt;</operator><name pos:start="187:34" pos:end="187:48">ip_address_type</name></name> <operator pos:start="187:50" pos:end="187:50">=</operator> <name pos:start="187:52" pos:end="187:77">GUEST_IP_ADDRESS_TYPE_IPV4</name></expr>;</expr_stmt>



            <if_stmt pos:start="191:13" pos:end="201:13"><if pos:start="191:13" pos:end="201:13">if <condition pos:start="191:16" pos:end="191:33">(<expr pos:start="191:17" pos:end="191:32"><name pos:start="191:17" pos:end="191:32"><name pos:start="191:17" pos:end="191:19">ifa</name><operator pos:start="191:20" pos:end="191:21">-&gt;</operator><name pos:start="191:22" pos:end="191:32">ifa_netmask</name></name></expr>)</condition> <block pos:start="191:35" pos:end="201:13">{<block_content pos:start="197:17" pos:end="199:75">

                <comment type="block" pos:start="193:17" pos:end="195:80">/* Count the number of set bits in netmask.

                 * This is safe as '1' and '0' cannot be shuffled in netmask. */</comment>

                <expr_stmt pos:start="197:17" pos:end="197:72"><expr pos:start="197:17" pos:end="197:71"><name pos:start="197:17" pos:end="197:17">p</name> <operator pos:start="197:19" pos:end="197:19">=</operator> <operator pos:start="197:21" pos:end="197:21">&amp;</operator><operator pos:start="197:22" pos:end="197:22">(</operator><operator pos:start="197:23" pos:end="197:23">(</operator>struct <name pos:start="197:31" pos:end="197:41">sockaddr_in</name> <operator pos:start="197:43" pos:end="197:43">*</operator><operator pos:start="197:44" pos:end="197:44">)</operator><name pos:start="197:45" pos:end="197:60"><name pos:start="197:45" pos:end="197:47">ifa</name><operator pos:start="197:48" pos:end="197:49">-&gt;</operator><name pos:start="197:50" pos:end="197:60">ifa_netmask</name></name><operator pos:start="197:61" pos:end="197:61">)</operator><operator pos:start="197:62" pos:end="197:63">-&gt;</operator><name pos:start="197:64" pos:end="197:71">sin_addr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:75"><expr pos:start="199:17" pos:end="199:74"><name pos:start="199:17" pos:end="199:43"><name pos:start="199:17" pos:end="199:28">address_item</name><operator pos:start="199:29" pos:end="199:30">-&gt;</operator><name pos:start="199:31" pos:end="199:35">value</name><operator pos:start="199:36" pos:end="199:37">-&gt;</operator><name pos:start="199:38" pos:end="199:43">prefix</name></name> <operator pos:start="199:45" pos:end="199:45">=</operator> <call pos:start="199:47" pos:end="199:74"><name pos:start="199:47" pos:end="199:53">ctpop32</name><argument_list pos:start="199:54" pos:end="199:74">(<argument pos:start="199:55" pos:end="199:73"><expr pos:start="199:55" pos:end="199:73"><operator pos:start="199:55" pos:end="199:55">(</operator><operator pos:start="199:56" pos:end="199:56">(</operator><name pos:start="199:57" pos:end="199:64">uint32_t</name> <operator pos:start="199:66" pos:end="199:66">*</operator><operator pos:start="199:67" pos:end="199:67">)</operator> <name pos:start="199:69" pos:end="199:69">p</name><operator pos:start="199:70" pos:end="199:70">)</operator><index pos:start="199:71" pos:end="199:73">[<expr pos:start="199:72" pos:end="199:72"><literal type="number" pos:start="199:72" pos:end="199:72">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="203:11" pos:end="255:9">else if <condition pos:start="203:19" pos:end="205:56">(<expr pos:start="203:20" pos:end="205:55"><name pos:start="203:20" pos:end="203:32"><name pos:start="203:20" pos:end="203:22">ifa</name><operator pos:start="203:23" pos:end="203:24">-&gt;</operator><name pos:start="203:25" pos:end="203:32">ifa_addr</name></name> <operator pos:start="203:34" pos:end="203:35">&amp;&amp;</operator>

                   <name pos:start="205:20" pos:end="205:43"><name pos:start="205:20" pos:end="205:22">ifa</name><operator pos:start="205:23" pos:end="205:24">-&gt;</operator><name pos:start="205:25" pos:end="205:32">ifa_addr</name><operator pos:start="205:33" pos:end="205:34">-&gt;</operator><name pos:start="205:35" pos:end="205:43">sa_family</name></name> <operator pos:start="205:45" pos:end="205:46">==</operator> <name pos:start="205:48" pos:end="205:55">AF_INET6</name></expr>)</condition> <block pos:start="205:58" pos:end="255:9">{<block_content pos:start="209:13" pos:end="253:13">

            <comment type="block" pos:start="207:13" pos:end="207:45">/* interface with IPv6 address */</comment>

            <expr_stmt pos:start="209:13" pos:end="209:60"><expr pos:start="209:13" pos:end="209:59"><name pos:start="209:13" pos:end="209:24">address_item</name> <operator pos:start="209:26" pos:end="209:26">=</operator> <call pos:start="209:28" pos:end="209:59"><name pos:start="209:28" pos:end="209:36">g_malloc0</name><argument_list pos:start="209:37" pos:end="209:59">(<argument pos:start="209:38" pos:end="209:58"><expr pos:start="209:38" pos:end="209:58"><sizeof pos:start="209:38" pos:end="209:58">sizeof<argument_list pos:start="209:44" pos:end="209:58">(<argument pos:start="209:45" pos:end="209:57"><expr pos:start="209:45" pos:end="209:57"><operator pos:start="209:45" pos:end="209:45">*</operator><name pos:start="209:46" pos:end="209:57">address_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:74"><expr pos:start="211:13" pos:end="211:73"><name pos:start="211:13" pos:end="211:31"><name pos:start="211:13" pos:end="211:24">address_item</name><operator pos:start="211:25" pos:end="211:26">-&gt;</operator><name pos:start="211:27" pos:end="211:31">value</name></name> <operator pos:start="211:33" pos:end="211:33">=</operator> <call pos:start="211:35" pos:end="211:73"><name pos:start="211:35" pos:end="211:43">g_malloc0</name><argument_list pos:start="211:44" pos:end="211:73">(<argument pos:start="211:45" pos:end="211:72"><expr pos:start="211:45" pos:end="211:72"><sizeof pos:start="211:45" pos:end="211:72">sizeof<argument_list pos:start="211:51" pos:end="211:72">(<argument pos:start="211:52" pos:end="211:71"><expr pos:start="211:52" pos:end="211:71"><operator pos:start="211:52" pos:end="211:52">*</operator><name pos:start="211:53" pos:end="211:71"><name pos:start="211:53" pos:end="211:64">address_item</name><operator pos:start="211:65" pos:end="211:66">-&gt;</operator><name pos:start="211:67" pos:end="211:71">value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:67"><expr pos:start="213:13" pos:end="213:66"><name pos:start="213:13" pos:end="213:13">p</name> <operator pos:start="213:15" pos:end="213:15">=</operator> <operator pos:start="213:17" pos:end="213:17">&amp;</operator><operator pos:start="213:18" pos:end="213:18">(</operator><operator pos:start="213:19" pos:end="213:19">(</operator>struct <name pos:start="213:27" pos:end="213:38">sockaddr_in6</name> <operator pos:start="213:40" pos:end="213:40">*</operator><operator pos:start="213:41" pos:end="213:41">)</operator><name pos:start="213:42" pos:end="213:54"><name pos:start="213:42" pos:end="213:44">ifa</name><operator pos:start="213:45" pos:end="213:46">-&gt;</operator><name pos:start="213:47" pos:end="213:54">ifa_addr</name></name><operator pos:start="213:55" pos:end="213:55">)</operator><operator pos:start="213:56" pos:end="213:57">-&gt;</operator><name pos:start="213:58" pos:end="213:66">sin6_addr</name></expr>;</expr_stmt>

            <if_stmt pos:start="215:13" pos:end="225:13"><if pos:start="215:13" pos:end="225:13">if <condition pos:start="215:16" pos:end="215:62">(<expr pos:start="215:17" pos:end="215:61"><operator pos:start="215:17" pos:end="215:17">!</operator><call pos:start="215:18" pos:end="215:61"><name pos:start="215:18" pos:end="215:26">inet_ntop</name><argument_list pos:start="215:27" pos:end="215:61">(<argument pos:start="215:28" pos:end="215:35"><expr pos:start="215:28" pos:end="215:35"><name pos:start="215:28" pos:end="215:35">AF_INET6</name></expr></argument>, <argument pos:start="215:38" pos:end="215:38"><expr pos:start="215:38" pos:end="215:38"><name pos:start="215:38" pos:end="215:38">p</name></expr></argument>, <argument pos:start="215:41" pos:end="215:45"><expr pos:start="215:41" pos:end="215:45"><name pos:start="215:41" pos:end="215:45">addr6</name></expr></argument>, <argument pos:start="215:48" pos:end="215:60"><expr pos:start="215:48" pos:end="215:60"><sizeof pos:start="215:48" pos:end="215:60">sizeof<argument_list pos:start="215:54" pos:end="215:60">(<argument pos:start="215:55" pos:end="215:59"><expr pos:start="215:55" pos:end="215:59"><name pos:start="215:55" pos:end="215:59">addr6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="215:64" pos:end="225:13">{<block_content pos:start="217:17" pos:end="223:27">

                <expr_stmt pos:start="217:17" pos:end="219:67"><expr pos:start="217:17" pos:end="219:66"><call pos:start="217:17" pos:end="219:66"><name pos:start="217:17" pos:end="217:24">snprintf</name><argument_list pos:start="217:25" pos:end="219:66">(<argument pos:start="217:26" pos:end="217:32"><expr pos:start="217:26" pos:end="217:32"><name pos:start="217:26" pos:end="217:32">err_msg</name></expr></argument>, <argument pos:start="217:35" pos:end="217:49"><expr pos:start="217:35" pos:end="217:49"><sizeof pos:start="217:35" pos:end="217:49">sizeof<argument_list pos:start="217:41" pos:end="217:49">(<argument pos:start="217:42" pos:end="217:48"><expr pos:start="217:42" pos:end="217:48"><name pos:start="217:42" pos:end="217:48">err_msg</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                         <argument pos:start="219:26" pos:end="219:48"><expr pos:start="219:26" pos:end="219:48"><literal type="string" pos:start="219:26" pos:end="219:48">"inet_ntop failed : %s"</literal></expr></argument>, <argument pos:start="219:51" pos:end="219:65"><expr pos:start="219:51" pos:end="219:65"><call pos:start="219:51" pos:end="219:65"><name pos:start="219:51" pos:end="219:58">strerror</name><argument_list pos:start="219:59" pos:end="219:65">(<argument pos:start="219:60" pos:end="219:64"><expr pos:start="219:60" pos:end="219:64"><name pos:start="219:60" pos:end="219:64">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:66"><expr pos:start="221:17" pos:end="221:65"><call pos:start="221:17" pos:end="221:65"><name pos:start="221:17" pos:end="221:25">error_set</name><argument_list pos:start="221:26" pos:end="221:65">(<argument pos:start="221:27" pos:end="221:30"><expr pos:start="221:27" pos:end="221:30"><name pos:start="221:27" pos:end="221:30">errp</name></expr></argument>, <argument pos:start="221:33" pos:end="221:55"><expr pos:start="221:33" pos:end="221:55"><name pos:start="221:33" pos:end="221:55">QERR_QGA_COMMAND_FAILED</name></expr></argument>, <argument pos:start="221:58" pos:end="221:64"><expr pos:start="221:58" pos:end="221:64"><name pos:start="221:58" pos:end="221:64">err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="223:17" pos:end="223:27">goto <name pos:start="223:22" pos:end="223:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="229:13" pos:end="229:62"><expr pos:start="229:13" pos:end="229:61"><name pos:start="229:13" pos:end="229:43"><name pos:start="229:13" pos:end="229:24">address_item</name><operator pos:start="229:25" pos:end="229:26">-&gt;</operator><name pos:start="229:27" pos:end="229:31">value</name><operator pos:start="229:32" pos:end="229:33">-&gt;</operator><name pos:start="229:34" pos:end="229:43">ip_address</name></name> <operator pos:start="229:45" pos:end="229:45">=</operator> <call pos:start="229:47" pos:end="229:61"><name pos:start="229:47" pos:end="229:54">g_strdup</name><argument_list pos:start="229:55" pos:end="229:61">(<argument pos:start="229:56" pos:end="229:60"><expr pos:start="229:56" pos:end="229:60"><name pos:start="229:56" pos:end="229:60">addr6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:78"><expr pos:start="231:13" pos:end="231:77"><name pos:start="231:13" pos:end="231:48"><name pos:start="231:13" pos:end="231:24">address_item</name><operator pos:start="231:25" pos:end="231:26">-&gt;</operator><name pos:start="231:27" pos:end="231:31">value</name><operator pos:start="231:32" pos:end="231:33">-&gt;</operator><name pos:start="231:34" pos:end="231:48">ip_address_type</name></name> <operator pos:start="231:50" pos:end="231:50">=</operator> <name pos:start="231:52" pos:end="231:77">GUEST_IP_ADDRESS_TYPE_IPV6</name></expr>;</expr_stmt>



            <if_stmt pos:start="235:13" pos:end="253:13"><if pos:start="235:13" pos:end="253:13">if <condition pos:start="235:16" pos:end="235:33">(<expr pos:start="235:17" pos:end="235:32"><name pos:start="235:17" pos:end="235:32"><name pos:start="235:17" pos:end="235:19">ifa</name><operator pos:start="235:20" pos:end="235:21">-&gt;</operator><name pos:start="235:22" pos:end="235:32">ifa_netmask</name></name></expr>)</condition> <block pos:start="235:35" pos:end="253:13">{<block_content pos:start="241:17" pos:end="251:49">

                <comment type="block" pos:start="237:17" pos:end="239:80">/* Count the number of set bits in netmask.

                 * This is safe as '1' and '0' cannot be shuffled in netmask. */</comment>

                <expr_stmt pos:start="241:17" pos:end="241:74"><expr pos:start="241:17" pos:end="241:73"><name pos:start="241:17" pos:end="241:17">p</name> <operator pos:start="241:19" pos:end="241:19">=</operator> <operator pos:start="241:21" pos:end="241:21">&amp;</operator><operator pos:start="241:22" pos:end="241:22">(</operator><operator pos:start="241:23" pos:end="241:23">(</operator>struct <name pos:start="241:31" pos:end="241:42">sockaddr_in6</name> <operator pos:start="241:44" pos:end="241:44">*</operator><operator pos:start="241:45" pos:end="241:45">)</operator><name pos:start="241:46" pos:end="241:61"><name pos:start="241:46" pos:end="241:48">ifa</name><operator pos:start="241:49" pos:end="241:50">-&gt;</operator><name pos:start="241:51" pos:end="241:61">ifa_netmask</name></name><operator pos:start="241:62" pos:end="241:62">)</operator><operator pos:start="241:63" pos:end="241:64">-&gt;</operator><name pos:start="241:65" pos:end="241:73">sin6_addr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="251:49"><expr pos:start="243:17" pos:end="251:48"><name pos:start="243:17" pos:end="243:43"><name pos:start="243:17" pos:end="243:28">address_item</name><operator pos:start="243:29" pos:end="243:30">-&gt;</operator><name pos:start="243:31" pos:end="243:35">value</name><operator pos:start="243:36" pos:end="243:37">-&gt;</operator><name pos:start="243:38" pos:end="243:43">prefix</name></name> <operator pos:start="243:45" pos:end="243:45">=</operator>

                    <call pos:start="245:21" pos:end="245:48"><name pos:start="245:21" pos:end="245:27">ctpop32</name><argument_list pos:start="245:28" pos:end="245:48">(<argument pos:start="245:29" pos:end="245:47"><expr pos:start="245:29" pos:end="245:47"><operator pos:start="245:29" pos:end="245:29">(</operator><operator pos:start="245:30" pos:end="245:30">(</operator><name pos:start="245:31" pos:end="245:38">uint32_t</name> <operator pos:start="245:40" pos:end="245:40">*</operator><operator pos:start="245:41" pos:end="245:41">)</operator> <name pos:start="245:43" pos:end="245:43">p</name><operator pos:start="245:44" pos:end="245:44">)</operator><index pos:start="245:45" pos:end="245:47">[<expr pos:start="245:46" pos:end="245:46"><literal type="number" pos:start="245:46" pos:end="245:46">0</literal></expr>]</index></expr></argument>)</argument_list></call> <operator pos:start="245:50" pos:end="245:50">+</operator>

                    <call pos:start="247:21" pos:end="247:48"><name pos:start="247:21" pos:end="247:27">ctpop32</name><argument_list pos:start="247:28" pos:end="247:48">(<argument pos:start="247:29" pos:end="247:47"><expr pos:start="247:29" pos:end="247:47"><operator pos:start="247:29" pos:end="247:29">(</operator><operator pos:start="247:30" pos:end="247:30">(</operator><name pos:start="247:31" pos:end="247:38">uint32_t</name> <operator pos:start="247:40" pos:end="247:40">*</operator><operator pos:start="247:41" pos:end="247:41">)</operator> <name pos:start="247:43" pos:end="247:43">p</name><operator pos:start="247:44" pos:end="247:44">)</operator><index pos:start="247:45" pos:end="247:47">[<expr pos:start="247:46" pos:end="247:46"><literal type="number" pos:start="247:46" pos:end="247:46">1</literal></expr>]</index></expr></argument>)</argument_list></call> <operator pos:start="247:50" pos:end="247:50">+</operator>

                    <call pos:start="249:21" pos:end="249:48"><name pos:start="249:21" pos:end="249:27">ctpop32</name><argument_list pos:start="249:28" pos:end="249:48">(<argument pos:start="249:29" pos:end="249:47"><expr pos:start="249:29" pos:end="249:47"><operator pos:start="249:29" pos:end="249:29">(</operator><operator pos:start="249:30" pos:end="249:30">(</operator><name pos:start="249:31" pos:end="249:38">uint32_t</name> <operator pos:start="249:40" pos:end="249:40">*</operator><operator pos:start="249:41" pos:end="249:41">)</operator> <name pos:start="249:43" pos:end="249:43">p</name><operator pos:start="249:44" pos:end="249:44">)</operator><index pos:start="249:45" pos:end="249:47">[<expr pos:start="249:46" pos:end="249:46"><literal type="number" pos:start="249:46" pos:end="249:46">2</literal></expr>]</index></expr></argument>)</argument_list></call> <operator pos:start="249:50" pos:end="249:50">+</operator>

                    <call pos:start="251:21" pos:end="251:48"><name pos:start="251:21" pos:end="251:27">ctpop32</name><argument_list pos:start="251:28" pos:end="251:48">(<argument pos:start="251:29" pos:end="251:47"><expr pos:start="251:29" pos:end="251:47"><operator pos:start="251:29" pos:end="251:29">(</operator><operator pos:start="251:30" pos:end="251:30">(</operator><name pos:start="251:31" pos:end="251:38">uint32_t</name> <operator pos:start="251:40" pos:end="251:40">*</operator><operator pos:start="251:41" pos:end="251:41">)</operator> <name pos:start="251:43" pos:end="251:43">p</name><operator pos:start="251:44" pos:end="251:44">)</operator><index pos:start="251:45" pos:end="251:47">[<expr pos:start="251:46" pos:end="251:46"><literal type="number" pos:start="251:46" pos:end="251:46">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="259:9" pos:end="263:9"><if pos:start="259:9" pos:end="263:9">if <condition pos:start="259:12" pos:end="259:26">(<expr pos:start="259:13" pos:end="259:25"><operator pos:start="259:13" pos:end="259:13">!</operator><name pos:start="259:14" pos:end="259:25">address_item</name></expr>)</condition> <block pos:start="259:28" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:21">

            <continue pos:start="261:13" pos:end="261:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="267:9" pos:end="267:50"><expr pos:start="267:9" pos:end="267:49"><name pos:start="267:9" pos:end="267:20">address_list</name> <operator pos:start="267:22" pos:end="267:22">=</operator> <operator pos:start="267:24" pos:end="267:24">&amp;</operator><name pos:start="267:25" pos:end="267:49"><name pos:start="267:25" pos:end="267:28">info</name><operator pos:start="267:29" pos:end="267:30">-&gt;</operator><name pos:start="267:31" pos:end="267:35">value</name><operator pos:start="267:36" pos:end="267:37">-&gt;</operator><name pos:start="267:38" pos:end="267:49">ip_addresses</name></name></expr>;</expr_stmt>



        <while pos:start="271:9" pos:end="275:9">while <condition pos:start="271:15" pos:end="271:54">(<expr pos:start="271:16" pos:end="271:53"><operator pos:start="271:16" pos:end="271:16">*</operator><name pos:start="271:17" pos:end="271:28">address_list</name> <operator pos:start="271:30" pos:end="271:31">&amp;&amp;</operator> <name pos:start="271:33" pos:end="271:53"><operator pos:start="271:33" pos:end="271:33">(</operator><operator pos:start="271:34" pos:end="271:34">*</operator><name pos:start="271:35" pos:end="271:46">address_list</name><operator pos:start="271:47" pos:end="271:47">)</operator><operator pos:start="271:48" pos:end="271:49">-&gt;</operator><name pos:start="271:50" pos:end="271:53">next</name></name></expr>)</condition> <block pos:start="271:56" pos:end="275:9">{<block_content pos:start="273:13" pos:end="273:50">

            <expr_stmt pos:start="273:13" pos:end="273:50"><expr pos:start="273:13" pos:end="273:49"><name pos:start="273:13" pos:end="273:24">address_list</name> <operator pos:start="273:26" pos:end="273:26">=</operator> <operator pos:start="273:28" pos:end="273:28">&amp;</operator><name pos:start="273:29" pos:end="273:49"><operator pos:start="273:29" pos:end="273:29">(</operator><operator pos:start="273:30" pos:end="273:30">*</operator><name pos:start="273:31" pos:end="273:42">address_list</name><operator pos:start="273:43" pos:end="273:43">)</operator><operator pos:start="273:44" pos:end="273:45">-&gt;</operator><name pos:start="273:46" pos:end="273:49">next</name></name></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="279:9" pos:end="287:9"><if pos:start="279:9" pos:end="283:9">if <condition pos:start="279:12" pos:end="279:27">(<expr pos:start="279:13" pos:end="279:26"><operator pos:start="279:13" pos:end="279:13">!</operator><operator pos:start="279:14" pos:end="279:14">*</operator><name pos:start="279:15" pos:end="279:26">address_list</name></expr>)</condition> <block pos:start="279:29" pos:end="283:9">{<block_content pos:start="281:13" pos:end="281:41">

            <expr_stmt pos:start="281:13" pos:end="281:41"><expr pos:start="281:13" pos:end="281:40"><operator pos:start="281:13" pos:end="281:13">*</operator><name pos:start="281:14" pos:end="281:25">address_list</name> <operator pos:start="281:27" pos:end="281:27">=</operator> <name pos:start="281:29" pos:end="281:40">address_item</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="283:11" pos:end="287:9">else <block pos:start="283:16" pos:end="287:9">{<block_content pos:start="285:13" pos:end="285:49">

            <expr_stmt pos:start="285:13" pos:end="285:49"><expr pos:start="285:13" pos:end="285:48"><name pos:start="285:13" pos:end="285:33"><operator pos:start="285:13" pos:end="285:13">(</operator><operator pos:start="285:14" pos:end="285:14">*</operator><name pos:start="285:15" pos:end="285:26">address_list</name><operator pos:start="285:27" pos:end="285:27">)</operator><operator pos:start="285:28" pos:end="285:29">-&gt;</operator><name pos:start="285:30" pos:end="285:33">next</name></name> <operator pos:start="285:35" pos:end="285:35">=</operator> <name pos:start="285:37" pos:end="285:48">address_item</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="291:9" pos:end="291:45"><expr pos:start="291:9" pos:end="291:44"><name pos:start="291:9" pos:end="291:37"><name pos:start="291:9" pos:end="291:12">info</name><operator pos:start="291:13" pos:end="291:14">-&gt;</operator><name pos:start="291:15" pos:end="291:19">value</name><operator pos:start="291:20" pos:end="291:21">-&gt;</operator><name pos:start="291:22" pos:end="291:37">has_ip_addresses</name></name> <operator pos:start="291:39" pos:end="291:39">=</operator> <name pos:start="291:41" pos:end="291:44">true</name></expr>;</expr_stmt>





    </block_content>}</block></for>



    <expr_stmt pos:start="301:5" pos:end="301:22"><expr pos:start="301:5" pos:end="301:21"><call pos:start="301:5" pos:end="301:21"><name pos:start="301:5" pos:end="301:15">freeifaddrs</name><argument_list pos:start="301:16" pos:end="301:21">(<argument pos:start="301:17" pos:end="301:20"><expr pos:start="301:17" pos:end="301:20"><name pos:start="301:17" pos:end="301:20">ifap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="303:5" pos:end="303:16">return <expr pos:start="303:12" pos:end="303:15"><name pos:start="303:12" pos:end="303:15">head</name></expr>;</return>



<label pos:start="307:1" pos:end="307:6"><name pos:start="307:1" pos:end="307:5">error</name>:</label>

    <expr_stmt pos:start="309:5" pos:end="309:22"><expr pos:start="309:5" pos:end="309:21"><call pos:start="309:5" pos:end="309:21"><name pos:start="309:5" pos:end="309:15">freeifaddrs</name><argument_list pos:start="309:16" pos:end="309:21">(<argument pos:start="309:17" pos:end="309:20"><expr pos:start="309:17" pos:end="309:20"><name pos:start="309:17" pos:end="309:20">ifap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="311:5" pos:end="311:46"><expr pos:start="311:5" pos:end="311:45"><call pos:start="311:5" pos:end="311:45"><name pos:start="311:5" pos:end="311:39">qapi_free_GuestNetworkInterfaceList</name><argument_list pos:start="311:40" pos:end="311:45">(<argument pos:start="311:41" pos:end="311:44"><expr pos:start="311:41" pos:end="311:44"><name pos:start="311:41" pos:end="311:44">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="313:5" pos:end="313:16">return <expr pos:start="313:12" pos:end="313:15"><name pos:start="313:12" pos:end="313:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
