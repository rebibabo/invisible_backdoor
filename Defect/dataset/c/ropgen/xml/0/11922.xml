<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11922.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">intel_hda_response</name><parameter_list pos:start="1:31" pos:end="1:86">(<parameter pos:start="1:32" pos:end="1:50"><decl pos:start="1:32" pos:end="1:50"><type pos:start="1:32" pos:end="1:50"><name pos:start="1:32" pos:end="1:45">HDACodecDevice</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">dev</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:66"><decl pos:start="1:53" pos:end="1:66"><type pos:start="1:53" pos:end="1:66"><name pos:start="1:53" pos:end="1:56">bool</name></type> <name pos:start="1:58" pos:end="1:66">solicited</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:85"><decl pos:start="1:69" pos:end="1:85"><type pos:start="1:69" pos:end="1:85"><name pos:start="1:69" pos:end="1:76">uint32_t</name></type> <name pos:start="1:78" pos:end="1:85">response</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:5">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">HDACodecBus</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">bus</name> <init pos:start="5:22" pos:end="5:52">= <expr pos:start="5:24" pos:end="5:52"><call pos:start="5:24" pos:end="5:52"><name pos:start="5:24" pos:end="5:30">HDA_BUS</name><argument_list pos:start="5:31" pos:end="5:52">(<argument pos:start="5:32" pos:end="5:51"><expr pos:start="5:32" pos:end="5:51"><name pos:start="5:32" pos:end="5:51"><name pos:start="5:32" pos:end="5:34">dev</name><operator pos:start="5:35" pos:end="5:36">-&gt;</operator><name pos:start="5:37" pos:end="5:40">qdev</name><operator pos:start="5:41" pos:end="5:41">.</operator><name pos:start="5:42" pos:end="5:51">parent_bus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">IntelHDAState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">d</name> <init pos:start="7:22" pos:end="7:63">= <expr pos:start="7:24" pos:end="7:63"><call pos:start="7:24" pos:end="7:63"><name pos:start="7:24" pos:end="7:35">container_of</name><argument_list pos:start="7:36" pos:end="7:63">(<argument pos:start="7:37" pos:end="7:39"><expr pos:start="7:37" pos:end="7:39"><name pos:start="7:37" pos:end="7:39">bus</name></expr></argument>, <argument pos:start="7:42" pos:end="7:54"><expr pos:start="7:42" pos:end="7:54"><name pos:start="7:42" pos:end="7:54">IntelHDAState</name></expr></argument>, <argument pos:start="7:57" pos:end="7:62"><expr pos:start="7:57" pos:end="7:62"><name pos:start="7:57" pos:end="7:62">codecs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">hwaddr</name></type> <name pos:start="9:12" pos:end="9:15">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:15">wp</name></decl>, <decl pos:start="11:18" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:18" pos:end="11:19">ex</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="29:5"><if pos:start="15:5" pos:end="29:5">if <condition pos:start="15:8" pos:end="15:31">(<expr pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:9">d</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:14">ics</name></name> <operator pos:start="15:16" pos:end="15:16">&amp;</operator> <name pos:start="15:18" pos:end="15:30">ICH6_IRS_BUSY</name></expr>)</condition> <block pos:start="15:33" pos:end="29:5">{<block_content pos:start="17:9" pos:end="27:15">

        <expr_stmt pos:start="17:9" pos:end="19:49"><expr pos:start="17:9" pos:end="19:48"><call pos:start="17:9" pos:end="19:48"><name pos:start="17:9" pos:end="17:14">dprint</name><argument_list pos:start="17:15" pos:end="19:48">(<argument pos:start="17:16" pos:end="17:16"><expr pos:start="17:16" pos:end="17:16"><name pos:start="17:16" pos:end="17:16">d</name></expr></argument>, <argument pos:start="17:19" pos:end="17:19"><expr pos:start="17:19" pos:end="17:19"><literal type="number" pos:start="17:19" pos:end="17:19">2</literal></expr></argument>, <argument pos:start="17:22" pos:end="17:58"><expr pos:start="17:22" pos:end="17:58"><literal type="string" pos:start="17:22" pos:end="17:58">"%s: [irr] response 0x%x, cad 0x%x\n"</literal></expr></argument>,

               <argument pos:start="19:16" pos:end="19:27"><expr pos:start="19:16" pos:end="19:27"><name pos:start="19:16" pos:end="19:27">__FUNCTION__</name></expr></argument>, <argument pos:start="19:30" pos:end="19:37"><expr pos:start="19:30" pos:end="19:37"><name pos:start="19:30" pos:end="19:37">response</name></expr></argument>, <argument pos:start="19:40" pos:end="19:47"><expr pos:start="19:40" pos:end="19:47"><name pos:start="19:40" pos:end="19:47"><name pos:start="19:40" pos:end="19:42">dev</name><operator pos:start="19:43" pos:end="19:44">-&gt;</operator><name pos:start="19:45" pos:end="19:47">cad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:26"><expr pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:9">d</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:14">irr</name></name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:25">response</name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:42"><expr pos:start="23:9" pos:end="23:41"><name pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:9">d</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:14">ics</name></name> <operator pos:start="23:16" pos:end="23:17">&amp;=</operator> <operator pos:start="23:19" pos:end="23:19">~</operator><operator pos:start="23:20" pos:end="23:20">(</operator><name pos:start="23:21" pos:end="23:33">ICH6_IRS_BUSY</name> <operator pos:start="23:35" pos:end="23:35">|</operator> <literal type="number" pos:start="23:37" pos:end="23:40">0xf0</literal><operator pos:start="23:41" pos:end="23:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:53"><expr pos:start="25:9" pos:end="25:52"><name pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:9">d</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:14">ics</name></name> <operator pos:start="25:16" pos:end="25:17">|=</operator> <operator pos:start="25:19" pos:end="25:19">(</operator><name pos:start="25:20" pos:end="25:33">ICH6_IRS_VALID</name> <operator pos:start="25:35" pos:end="25:35">|</operator> <operator pos:start="25:37" pos:end="25:37">(</operator><name pos:start="25:38" pos:end="25:45"><name pos:start="25:38" pos:end="25:40">dev</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:45">cad</name></name> <operator pos:start="25:47" pos:end="25:48">&lt;&lt;</operator> <literal type="number" pos:start="25:50" pos:end="25:50">4</literal><operator pos:start="25:51" pos:end="25:51">)</operator><operator pos:start="25:52" pos:end="25:52">)</operator></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:43">(<expr pos:start="33:9" pos:end="33:42"><operator pos:start="33:9" pos:end="33:9">!</operator><operator pos:start="33:10" pos:end="33:10">(</operator><name pos:start="33:11" pos:end="33:21"><name pos:start="33:11" pos:end="33:11">d</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:21">rirb_ctl</name></name> <operator pos:start="33:23" pos:end="33:23">&amp;</operator> <name pos:start="33:25" pos:end="33:41">ICH6_RBCTL_DMA_EN</name><operator pos:start="33:42" pos:end="33:42">)</operator></expr>)</condition> <block pos:start="33:45" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:83"><expr pos:start="35:9" pos:end="35:82"><call pos:start="35:9" pos:end="35:82"><name pos:start="35:9" pos:end="35:14">dprint</name><argument_list pos:start="35:15" pos:end="35:82">(<argument pos:start="35:16" pos:end="35:16"><expr pos:start="35:16" pos:end="35:16"><name pos:start="35:16" pos:end="35:16">d</name></expr></argument>, <argument pos:start="35:19" pos:end="35:19"><expr pos:start="35:19" pos:end="35:19"><literal type="number" pos:start="35:19" pos:end="35:19">1</literal></expr></argument>, <argument pos:start="35:22" pos:end="35:67"><expr pos:start="35:22" pos:end="35:67"><literal type="string" pos:start="35:22" pos:end="35:67">"%s: rirb dma disabled, drop codec response\n"</literal></expr></argument>, <argument pos:start="35:70" pos:end="35:81"><expr pos:start="35:70" pos:end="35:81"><name pos:start="35:70" pos:end="35:81">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:47"><expr pos:start="43:5" pos:end="43:46"><name pos:start="43:5" pos:end="43:6">ex</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <operator pos:start="43:10" pos:end="43:10">(</operator><ternary pos:start="43:11" pos:end="43:34"><condition pos:start="43:11" pos:end="43:21"><expr pos:start="43:11" pos:end="43:19"><name pos:start="43:11" pos:end="43:19">solicited</name></expr> ?</condition><then pos:start="43:23" pos:end="43:23"> <expr pos:start="43:23" pos:end="43:23"><literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr> </then><else pos:start="43:25" pos:end="43:34">: <expr pos:start="43:27" pos:end="43:34"><operator pos:start="43:27" pos:end="43:27">(</operator><literal type="number" pos:start="43:28" pos:end="43:28">1</literal> <operator pos:start="43:30" pos:end="43:31">&lt;&lt;</operator> <literal type="number" pos:start="43:33" pos:end="43:33">4</literal><operator pos:start="43:34" pos:end="43:34">)</operator></expr></else></ternary><operator pos:start="43:35" pos:end="43:35">)</operator> <operator pos:start="43:37" pos:end="43:37">|</operator> <name pos:start="43:39" pos:end="43:46"><name pos:start="43:39" pos:end="43:41">dev</name><operator pos:start="43:42" pos:end="43:43">-&gt;</operator><name pos:start="43:44" pos:end="43:46">cad</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:33"><expr pos:start="45:5" pos:end="45:32"><name pos:start="45:5" pos:end="45:6">wp</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <operator pos:start="45:10" pos:end="45:10">(</operator><name pos:start="45:11" pos:end="45:20"><name pos:start="45:11" pos:end="45:11">d</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:20">rirb_wp</name></name> <operator pos:start="45:22" pos:end="45:22">+</operator> <literal type="number" pos:start="45:24" pos:end="45:24">1</literal><operator pos:start="45:25" pos:end="45:25">)</operator> <operator pos:start="45:27" pos:end="45:27">&amp;</operator> <literal type="number" pos:start="45:29" pos:end="45:32">0xff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:56"><expr pos:start="47:5" pos:end="47:55"><name pos:start="47:5" pos:end="47:8">addr</name> <operator pos:start="47:10" pos:end="47:10">=</operator> <call pos:start="47:12" pos:end="47:55"><name pos:start="47:12" pos:end="47:25">intel_hda_addr</name><argument_list pos:start="47:26" pos:end="47:55">(<argument pos:start="47:27" pos:end="47:39"><expr pos:start="47:27" pos:end="47:39"><name pos:start="47:27" pos:end="47:39"><name pos:start="47:27" pos:end="47:27">d</name><operator pos:start="47:28" pos:end="47:29">-&gt;</operator><name pos:start="47:30" pos:end="47:39">rirb_lbase</name></name></expr></argument>, <argument pos:start="47:42" pos:end="47:54"><expr pos:start="47:42" pos:end="47:54"><name pos:start="47:42" pos:end="47:54"><name pos:start="47:42" pos:end="47:42">d</name><operator pos:start="47:43" pos:end="47:44">-&gt;</operator><name pos:start="47:45" pos:end="47:54">rirb_ubase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:51"><expr pos:start="49:5" pos:end="49:50"><call pos:start="49:5" pos:end="49:50"><name pos:start="49:5" pos:end="49:18">stl_le_pci_dma</name><argument_list pos:start="49:19" pos:end="49:50">(<argument pos:start="49:20" pos:end="49:26"><expr pos:start="49:20" pos:end="49:26"><operator pos:start="49:20" pos:end="49:20">&amp;</operator><name pos:start="49:21" pos:end="49:26"><name pos:start="49:21" pos:end="49:21">d</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:26">pci</name></name></expr></argument>, <argument pos:start="49:29" pos:end="49:39"><expr pos:start="49:29" pos:end="49:39"><name pos:start="49:29" pos:end="49:32">addr</name> <operator pos:start="49:34" pos:end="49:34">+</operator> <literal type="number" pos:start="49:36" pos:end="49:36">8</literal><operator pos:start="49:37" pos:end="49:37">*</operator><name pos:start="49:38" pos:end="49:39">wp</name></expr></argument>, <argument pos:start="49:42" pos:end="49:49"><expr pos:start="49:42" pos:end="49:49"><name pos:start="49:42" pos:end="49:49">response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:49"><expr pos:start="51:5" pos:end="51:48"><call pos:start="51:5" pos:end="51:48"><name pos:start="51:5" pos:end="51:18">stl_le_pci_dma</name><argument_list pos:start="51:19" pos:end="51:48">(<argument pos:start="51:20" pos:end="51:26"><expr pos:start="51:20" pos:end="51:26"><operator pos:start="51:20" pos:end="51:20">&amp;</operator><name pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:21">d</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:26">pci</name></name></expr></argument>, <argument pos:start="51:29" pos:end="51:43"><expr pos:start="51:29" pos:end="51:43"><name pos:start="51:29" pos:end="51:32">addr</name> <operator pos:start="51:34" pos:end="51:34">+</operator> <literal type="number" pos:start="51:36" pos:end="51:36">8</literal><operator pos:start="51:37" pos:end="51:37">*</operator><name pos:start="51:38" pos:end="51:39">wp</name> <operator pos:start="51:41" pos:end="51:41">+</operator> <literal type="number" pos:start="51:43" pos:end="51:43">4</literal></expr></argument>, <argument pos:start="51:46" pos:end="51:47"><expr pos:start="51:46" pos:end="51:47"><name pos:start="51:46" pos:end="51:47">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:20"><expr pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:14"><name pos:start="53:5" pos:end="53:5">d</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:14">rirb_wp</name></name> <operator pos:start="53:16" pos:end="53:16">=</operator> <name pos:start="53:18" pos:end="53:19">wp</name></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="59:43"><expr pos:start="57:5" pos:end="59:42"><call pos:start="57:5" pos:end="59:42"><name pos:start="57:5" pos:end="57:10">dprint</name><argument_list pos:start="57:11" pos:end="59:42">(<argument pos:start="57:12" pos:end="57:12"><expr pos:start="57:12" pos:end="57:12"><name pos:start="57:12" pos:end="57:12">d</name></expr></argument>, <argument pos:start="57:15" pos:end="57:15"><expr pos:start="57:15" pos:end="57:15"><literal type="number" pos:start="57:15" pos:end="57:15">2</literal></expr></argument>, <argument pos:start="57:18" pos:end="57:60"><expr pos:start="57:18" pos:end="57:60"><literal type="string" pos:start="57:18" pos:end="57:60">"%s: [wp 0x%x] response 0x%x, extra 0x%x\n"</literal></expr></argument>,

           <argument pos:start="59:12" pos:end="59:23"><expr pos:start="59:12" pos:end="59:23"><name pos:start="59:12" pos:end="59:23">__FUNCTION__</name></expr></argument>, <argument pos:start="59:26" pos:end="59:27"><expr pos:start="59:26" pos:end="59:27"><name pos:start="59:26" pos:end="59:27">wp</name></expr></argument>, <argument pos:start="59:30" pos:end="59:37"><expr pos:start="59:30" pos:end="59:37"><name pos:start="59:30" pos:end="59:37">response</name></expr></argument>, <argument pos:start="59:40" pos:end="59:41"><expr pos:start="59:40" pos:end="59:41"><name pos:start="59:40" pos:end="59:41">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:20"><expr pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:5">d</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:17">rirb_count</name></name><operator pos:start="63:18" pos:end="63:19">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="91:5"><if pos:start="65:5" pos:end="77:5">if <condition pos:start="65:8" pos:end="65:37">(<expr pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:9">d</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:21">rirb_count</name></name> <operator pos:start="65:23" pos:end="65:24">==</operator> <name pos:start="65:26" pos:end="65:36"><name pos:start="65:26" pos:end="65:26">d</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:36">rirb_cnt</name></name></expr>)</condition> <block pos:start="65:39" pos:end="77:5">{<block_content pos:start="67:9" pos:end="75:9">

        <expr_stmt pos:start="67:9" pos:end="67:83"><expr pos:start="67:9" pos:end="67:82"><call pos:start="67:9" pos:end="67:82"><name pos:start="67:9" pos:end="67:14">dprint</name><argument_list pos:start="67:15" pos:end="67:82">(<argument pos:start="67:16" pos:end="67:16"><expr pos:start="67:16" pos:end="67:16"><name pos:start="67:16" pos:end="67:16">d</name></expr></argument>, <argument pos:start="67:19" pos:end="67:19"><expr pos:start="67:19" pos:end="67:19"><literal type="number" pos:start="67:19" pos:end="67:19">2</literal></expr></argument>, <argument pos:start="67:22" pos:end="67:52"><expr pos:start="67:22" pos:end="67:52"><literal type="string" pos:start="67:22" pos:end="67:52">"%s: rirb count reached (%d)\n"</literal></expr></argument>, <argument pos:start="67:55" pos:end="67:66"><expr pos:start="67:55" pos:end="67:66"><name pos:start="67:55" pos:end="67:66">__FUNCTION__</name></expr></argument>, <argument pos:start="67:69" pos:end="67:81"><expr pos:start="67:69" pos:end="67:81"><name pos:start="67:69" pos:end="67:81"><name pos:start="67:69" pos:end="67:69">d</name><operator pos:start="67:70" pos:end="67:71">-&gt;</operator><name pos:start="67:72" pos:end="67:81">rirb_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="75:9"><if pos:start="69:9" pos:end="75:9">if <condition pos:start="69:12" pos:end="69:44">(<expr pos:start="69:13" pos:end="69:43"><name pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:13">d</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:23">rirb_ctl</name></name> <operator pos:start="69:25" pos:end="69:25">&amp;</operator> <name pos:start="69:27" pos:end="69:43">ICH6_RBCTL_IRQ_EN</name></expr>)</condition> <block pos:start="69:46" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:36">

            <expr_stmt pos:start="71:13" pos:end="71:42"><expr pos:start="71:13" pos:end="71:41"><name pos:start="71:13" pos:end="71:23"><name pos:start="71:13" pos:end="71:13">d</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:23">rirb_sts</name></name> <operator pos:start="71:25" pos:end="71:26">|=</operator> <name pos:start="71:28" pos:end="71:41">ICH6_RBSTS_IRQ</name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:36"><expr pos:start="73:13" pos:end="73:35"><call pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:32">intel_hda_update_irq</name><argument_list pos:start="73:33" pos:end="73:35">(<argument pos:start="73:34" pos:end="73:34"><expr pos:start="73:34" pos:end="73:34"><name pos:start="73:34" pos:end="73:34">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="91:5">else if <condition pos:start="77:15" pos:end="77:49">(<expr pos:start="77:16" pos:end="77:48"><operator pos:start="77:16" pos:end="77:16">(</operator><name pos:start="77:17" pos:end="77:26"><name pos:start="77:17" pos:end="77:17">d</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:26">corb_rp</name></name> <operator pos:start="77:28" pos:end="77:28">&amp;</operator> <literal type="number" pos:start="77:30" pos:end="77:33">0xff</literal><operator pos:start="77:34" pos:end="77:34">)</operator> <operator pos:start="77:36" pos:end="77:37">==</operator> <name pos:start="77:39" pos:end="77:48"><name pos:start="77:39" pos:end="77:39">d</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:48">corb_wp</name></name></expr>)</condition> <block pos:start="77:51" pos:end="91:5">{<block_content pos:start="79:9" pos:end="89:9">

        <expr_stmt pos:start="79:9" pos:end="81:43"><expr pos:start="79:9" pos:end="81:42"><call pos:start="79:9" pos:end="81:42"><name pos:start="79:9" pos:end="79:14">dprint</name><argument_list pos:start="79:15" pos:end="81:42">(<argument pos:start="79:16" pos:end="79:16"><expr pos:start="79:16" pos:end="79:16"><name pos:start="79:16" pos:end="79:16">d</name></expr></argument>, <argument pos:start="79:19" pos:end="79:19"><expr pos:start="79:19" pos:end="79:19"><literal type="number" pos:start="79:19" pos:end="79:19">2</literal></expr></argument>, <argument pos:start="79:22" pos:end="79:52"><expr pos:start="79:22" pos:end="79:52"><literal type="string" pos:start="79:22" pos:end="79:52">"%s: corb ring empty (%d/%d)\n"</literal></expr></argument>, <argument pos:start="79:55" pos:end="79:66"><expr pos:start="79:55" pos:end="79:66"><name pos:start="79:55" pos:end="79:66">__FUNCTION__</name></expr></argument>,

               <argument pos:start="81:16" pos:end="81:28"><expr pos:start="81:16" pos:end="81:28"><name pos:start="81:16" pos:end="81:28"><name pos:start="81:16" pos:end="81:16">d</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:28">rirb_count</name></name></expr></argument>, <argument pos:start="81:31" pos:end="81:41"><expr pos:start="81:31" pos:end="81:41"><name pos:start="81:31" pos:end="81:41"><name pos:start="81:31" pos:end="81:31">d</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:41">rirb_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:44">(<expr pos:start="83:13" pos:end="83:43"><name pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:13">d</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:23">rirb_ctl</name></name> <operator pos:start="83:25" pos:end="83:25">&amp;</operator> <name pos:start="83:27" pos:end="83:43">ICH6_RBCTL_IRQ_EN</name></expr>)</condition> <block pos:start="83:46" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:36">

            <expr_stmt pos:start="85:13" pos:end="85:42"><expr pos:start="85:13" pos:end="85:41"><name pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:13">d</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:23">rirb_sts</name></name> <operator pos:start="85:25" pos:end="85:26">|=</operator> <name pos:start="85:28" pos:end="85:41">ICH6_RBSTS_IRQ</name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:36"><expr pos:start="87:13" pos:end="87:35"><call pos:start="87:13" pos:end="87:35"><name pos:start="87:13" pos:end="87:32">intel_hda_update_irq</name><argument_list pos:start="87:33" pos:end="87:35">(<argument pos:start="87:34" pos:end="87:34"><expr pos:start="87:34" pos:end="87:34"><name pos:start="87:34" pos:end="87:34">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
