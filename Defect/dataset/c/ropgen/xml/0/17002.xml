<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17002.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">do_io_interrupt</name><parameter_list pos:start="1:28" pos:end="1:47">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:41">CPUS390XState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="5:5" pos:end="115:5">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">LowCore</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:20">lowcore</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">IOIntQueue</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:15">isc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">disable</name> <init pos:start="11:17" pos:end="11:19">= <expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">found</name> <init pos:start="13:15" pos:end="13:17">= <expr pos:start="13:17" pos:end="13:17"><literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:39">(<expr pos:start="17:9" pos:end="17:38"><operator pos:start="17:9" pos:end="17:9">!</operator><operator pos:start="17:10" pos:end="17:10">(</operator><name pos:start="17:11" pos:end="17:23"><name pos:start="17:11" pos:end="17:13">env</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:18">psw</name><operator pos:start="17:19" pos:end="17:19">.</operator><name pos:start="17:20" pos:end="17:23">mask</name></name> <operator pos:start="17:25" pos:end="17:25">&amp;</operator> <name pos:start="17:27" pos:end="17:37">PSW_MASK_IO</name><operator pos:start="17:38" pos:end="17:38">)</operator></expr>)</condition> <block pos:start="17:41" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:49">

        <expr_stmt pos:start="19:9" pos:end="19:49"><expr pos:start="19:9" pos:end="19:48"><call pos:start="19:9" pos:end="19:48"><name pos:start="19:9" pos:end="19:17">cpu_abort</name><argument_list pos:start="19:18" pos:end="19:48">(<argument pos:start="19:19" pos:end="19:21"><expr pos:start="19:19" pos:end="19:21"><name pos:start="19:19" pos:end="19:21">env</name></expr></argument>, <argument pos:start="19:24" pos:end="19:47"><expr pos:start="19:24" pos:end="19:47"><literal type="string" pos:start="19:24" pos:end="19:47">"I/O int w/o I/O mask\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="25:5" pos:end="107:5">for <control pos:start="25:9" pos:end="25:57">(<init pos:start="25:10" pos:end="25:17"><expr pos:start="25:10" pos:end="25:16"><name pos:start="25:10" pos:end="25:12">isc</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</init> <condition pos:start="25:19" pos:end="25:50"><expr pos:start="25:19" pos:end="25:49"><name pos:start="25:19" pos:end="25:21">isc</name> <operator pos:start="25:23" pos:end="25:23">&lt;</operator> <call pos:start="25:25" pos:end="25:49"><name pos:start="25:25" pos:end="25:34">ARRAY_SIZE</name><argument_list pos:start="25:35" pos:end="25:49">(<argument pos:start="25:36" pos:end="25:48"><expr pos:start="25:36" pos:end="25:48"><name pos:start="25:36" pos:end="25:48"><name pos:start="25:36" pos:end="25:38">env</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:48">io_index</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="25:52" pos:end="25:56"><expr pos:start="25:52" pos:end="25:56"><name pos:start="25:52" pos:end="25:54">isc</name><operator pos:start="25:55" pos:end="25:56">++</operator></expr></incr>)</control> <block pos:start="25:59" pos:end="107:5">{<block_content pos:start="27:9" pos:end="105:17">

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:35">(<expr pos:start="27:13" pos:end="27:34"><name pos:start="27:13" pos:end="27:30"><name pos:start="27:13" pos:end="27:15">env</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:25">io_index</name><index pos:start="27:26" pos:end="27:30">[<expr pos:start="27:27" pos:end="27:29"><name pos:start="27:27" pos:end="27:29">isc</name></expr>]</index></name> <operator pos:start="27:32" pos:end="27:32">&lt;</operator> <literal type="number" pos:start="27:34" pos:end="27:34">0</literal></expr>)</condition> <block pos:start="27:37" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:21">

            <continue pos:start="29:13" pos:end="29:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:46">(<expr pos:start="33:13" pos:end="33:45"><name pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:15">env</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:25">io_index</name><index pos:start="33:26" pos:end="33:30">[<expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">isc</name></expr>]</index></name> <operator pos:start="33:32" pos:end="33:32">&gt;</operator> <name pos:start="33:34" pos:end="33:45">MAX_IO_QUEUE</name></expr>)</condition> <block pos:start="33:48" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:47">

            <expr_stmt pos:start="35:13" pos:end="37:47"><expr pos:start="35:13" pos:end="37:46"><call pos:start="35:13" pos:end="37:46"><name pos:start="35:13" pos:end="35:21">cpu_abort</name><argument_list pos:start="35:22" pos:end="37:46">(<argument pos:start="35:23" pos:end="35:25"><expr pos:start="35:23" pos:end="35:25"><name pos:start="35:23" pos:end="35:25">env</name></expr></argument>, <argument pos:start="35:28" pos:end="35:63"><expr pos:start="35:28" pos:end="35:63"><literal type="string" pos:start="35:28" pos:end="35:63">"I/O queue overrun for isc %d: %d\n"</literal></expr></argument>,

                      <argument pos:start="37:23" pos:end="37:25"><expr pos:start="37:23" pos:end="37:25"><name pos:start="37:23" pos:end="37:25">isc</name></expr></argument>, <argument pos:start="37:28" pos:end="37:45"><expr pos:start="37:28" pos:end="37:45"><name pos:start="37:28" pos:end="37:45"><name pos:start="37:28" pos:end="37:30">env</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:40">io_index</name><index pos:start="37:41" pos:end="37:45">[<expr pos:start="37:42" pos:end="37:44"><name pos:start="37:42" pos:end="37:44">isc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:52"><expr pos:start="43:9" pos:end="43:51"><name pos:start="43:9" pos:end="43:9">q</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <operator pos:start="43:13" pos:end="43:13">&amp;</operator><name pos:start="43:14" pos:end="43:51"><name pos:start="43:14" pos:end="43:16">env</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:26">io_queue</name><index pos:start="43:27" pos:end="43:46">[<expr pos:start="43:28" pos:end="43:45"><name pos:start="43:28" pos:end="43:45"><name pos:start="43:28" pos:end="43:30">env</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:40">io_index</name><index pos:start="43:41" pos:end="43:45">[<expr pos:start="43:42" pos:end="43:44"><name pos:start="43:42" pos:end="43:44">isc</name></expr>]</index></name></expr>]</index><index pos:start="43:47" pos:end="43:51">[<expr pos:start="43:48" pos:end="43:50"><name pos:start="43:48" pos:end="43:50">isc</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:39">(<expr pos:start="45:13" pos:end="45:38"><operator pos:start="45:13" pos:end="45:13">!</operator><operator pos:start="45:14" pos:end="45:14">(</operator><name pos:start="45:15" pos:end="45:27"><name pos:start="45:15" pos:end="45:17">env</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:24">cregs</name><index pos:start="45:25" pos:end="45:27">[<expr pos:start="45:26" pos:end="45:26"><literal type="number" pos:start="45:26" pos:end="45:26">6</literal></expr>]</index></name> <operator pos:start="45:29" pos:end="45:29">&amp;</operator> <name pos:start="45:31" pos:end="45:37"><name pos:start="45:31" pos:end="45:31">q</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:37">word</name></name><operator pos:start="45:38" pos:end="45:38">)</operator></expr>)</condition> <block pos:start="45:41" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:21">

            <expr_stmt pos:start="47:13" pos:end="47:24"><expr pos:start="47:13" pos:end="47:23"><name pos:start="47:13" pos:end="47:19">disable</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <literal type="number" pos:start="47:23" pos:end="47:23">0</literal></expr>;</expr_stmt>

            <continue pos:start="49:13" pos:end="49:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="53:9" pos:end="97:9"><if pos:start="53:9" pos:end="97:9">if <condition pos:start="53:12" pos:end="53:19">(<expr pos:start="53:13" pos:end="53:18"><operator pos:start="53:13" pos:end="53:13">!</operator><name pos:start="53:14" pos:end="53:18">found</name></expr>)</condition> <block pos:start="53:21" pos:end="97:9">{<block_content pos:start="55:13" pos:end="95:38">

            <decl_stmt pos:start="55:13" pos:end="55:32"><decl pos:start="55:13" pos:end="55:25"><type pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:20">uint64_t</name></type> <name pos:start="55:22" pos:end="55:25">mask</name></decl>, <decl pos:start="55:28" pos:end="55:31"><type ref="prev" pos:start="55:13" pos:end="55:20"/><name pos:start="55:28" pos:end="55:31">addr</name></decl>;</decl_stmt>



            <expr_stmt pos:start="59:13" pos:end="59:22"><expr pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:17">found</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <literal type="number" pos:start="59:21" pos:end="59:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:43"><expr pos:start="61:13" pos:end="61:42"><name pos:start="61:13" pos:end="61:19">lowcore</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <call pos:start="61:23" pos:end="61:42"><name pos:start="61:23" pos:end="61:37">cpu_map_lowcore</name><argument_list pos:start="61:38" pos:end="61:42">(<argument pos:start="61:39" pos:end="61:41"><expr pos:start="61:39" pos:end="61:41"><name pos:start="61:39" pos:end="61:41">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="65:13" pos:end="65:56"><expr pos:start="65:13" pos:end="65:55"><name pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:19">lowcore</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:34">subchannel_id</name></name> <operator pos:start="65:36" pos:end="65:36">=</operator> <call pos:start="65:38" pos:end="65:55"><name pos:start="65:38" pos:end="65:48">cpu_to_be16</name><argument_list pos:start="65:49" pos:end="65:55">(<argument pos:start="65:50" pos:end="65:54"><expr pos:start="65:50" pos:end="65:54"><name pos:start="65:50" pos:end="65:54"><name pos:start="65:50" pos:end="65:50">q</name><operator pos:start="65:51" pos:end="65:52">-&gt;</operator><name pos:start="65:53" pos:end="65:54">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:56"><expr pos:start="67:13" pos:end="67:55"><name pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:19">lowcore</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:34">subchannel_nr</name></name> <operator pos:start="67:36" pos:end="67:36">=</operator> <call pos:start="67:38" pos:end="67:55"><name pos:start="67:38" pos:end="67:48">cpu_to_be16</name><argument_list pos:start="67:49" pos:end="67:55">(<argument pos:start="67:50" pos:end="67:54"><expr pos:start="67:50" pos:end="67:54"><name pos:start="67:50" pos:end="67:54"><name pos:start="67:50" pos:end="67:50">q</name><operator pos:start="67:51" pos:end="67:52">-&gt;</operator><name pos:start="67:53" pos:end="67:54">nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:56"><expr pos:start="69:13" pos:end="69:55"><name pos:start="69:13" pos:end="69:32"><name pos:start="69:13" pos:end="69:19">lowcore</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:32">io_int_parm</name></name> <operator pos:start="69:34" pos:end="69:34">=</operator> <call pos:start="69:36" pos:end="69:55"><name pos:start="69:36" pos:end="69:46">cpu_to_be32</name><argument_list pos:start="69:47" pos:end="69:55">(<argument pos:start="69:48" pos:end="69:54"><expr pos:start="69:48" pos:end="69:54"><name pos:start="69:48" pos:end="69:54"><name pos:start="69:48" pos:end="69:48">q</name><operator pos:start="69:49" pos:end="69:50">-&gt;</operator><name pos:start="69:51" pos:end="69:54">parm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:56"><expr pos:start="71:13" pos:end="71:55"><name pos:start="71:13" pos:end="71:32"><name pos:start="71:13" pos:end="71:19">lowcore</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:32">io_int_word</name></name> <operator pos:start="71:34" pos:end="71:34">=</operator> <call pos:start="71:36" pos:end="71:55"><name pos:start="71:36" pos:end="71:46">cpu_to_be32</name><argument_list pos:start="71:47" pos:end="71:55">(<argument pos:start="71:48" pos:end="71:54"><expr pos:start="71:48" pos:end="71:54"><name pos:start="71:48" pos:end="71:54"><name pos:start="71:48" pos:end="71:48">q</name><operator pos:start="71:49" pos:end="71:50">-&gt;</operator><name pos:start="71:51" pos:end="71:54">word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:70"><expr pos:start="73:13" pos:end="73:69"><name pos:start="73:13" pos:end="73:36"><name pos:start="73:13" pos:end="73:19">lowcore</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:31">io_old_psw</name><operator pos:start="73:32" pos:end="73:32">.</operator><name pos:start="73:33" pos:end="73:36">mask</name></name> <operator pos:start="73:38" pos:end="73:38">=</operator> <call pos:start="73:40" pos:end="73:69"><name pos:start="73:40" pos:end="73:50">cpu_to_be64</name><argument_list pos:start="73:51" pos:end="73:69">(<argument pos:start="73:52" pos:end="73:68"><expr pos:start="73:52" pos:end="73:68"><call pos:start="73:52" pos:end="73:68"><name pos:start="73:52" pos:end="73:63">get_psw_mask</name><argument_list pos:start="73:64" pos:end="73:68">(<argument pos:start="73:65" pos:end="73:67"><expr pos:start="73:65" pos:end="73:67"><name pos:start="73:65" pos:end="73:67">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:66"><expr pos:start="75:13" pos:end="75:65"><name pos:start="75:13" pos:end="75:36"><name pos:start="75:13" pos:end="75:19">lowcore</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:31">io_old_psw</name><operator pos:start="75:32" pos:end="75:32">.</operator><name pos:start="75:33" pos:end="75:36">addr</name></name> <operator pos:start="75:38" pos:end="75:38">=</operator> <call pos:start="75:40" pos:end="75:65"><name pos:start="75:40" pos:end="75:50">cpu_to_be64</name><argument_list pos:start="75:51" pos:end="75:65">(<argument pos:start="75:52" pos:end="75:64"><expr pos:start="75:52" pos:end="75:64"><name pos:start="75:52" pos:end="75:64"><name pos:start="75:52" pos:end="75:54">env</name><operator pos:start="75:55" pos:end="75:56">-&gt;</operator><name pos:start="75:57" pos:end="75:59">psw</name><operator pos:start="75:60" pos:end="75:60">.</operator><name pos:start="75:61" pos:end="75:64">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:57"><expr pos:start="77:13" pos:end="77:56"><name pos:start="77:13" pos:end="77:16">mask</name> <operator pos:start="77:18" pos:end="77:18">=</operator> <call pos:start="77:20" pos:end="77:56"><name pos:start="77:20" pos:end="77:30">be64_to_cpu</name><argument_list pos:start="77:31" pos:end="77:56">(<argument pos:start="77:32" pos:end="77:55"><expr pos:start="77:32" pos:end="77:55"><name pos:start="77:32" pos:end="77:55"><name pos:start="77:32" pos:end="77:38">lowcore</name><operator pos:start="77:39" pos:end="77:40">-&gt;</operator><name pos:start="77:41" pos:end="77:50">io_new_psw</name><operator pos:start="77:51" pos:end="77:51">.</operator><name pos:start="77:52" pos:end="77:55">mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:57"><expr pos:start="79:13" pos:end="79:56"><name pos:start="79:13" pos:end="79:16">addr</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <call pos:start="79:20" pos:end="79:56"><name pos:start="79:20" pos:end="79:30">be64_to_cpu</name><argument_list pos:start="79:31" pos:end="79:56">(<argument pos:start="79:32" pos:end="79:55"><expr pos:start="79:32" pos:end="79:55"><name pos:start="79:32" pos:end="79:55"><name pos:start="79:32" pos:end="79:38">lowcore</name><operator pos:start="79:39" pos:end="79:40">-&gt;</operator><name pos:start="79:41" pos:end="79:50">io_new_psw</name><operator pos:start="79:51" pos:end="79:51">.</operator><name pos:start="79:52" pos:end="79:55">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="83:13" pos:end="83:39"><expr pos:start="83:13" pos:end="83:38"><call pos:start="83:13" pos:end="83:38"><name pos:start="83:13" pos:end="83:29">cpu_unmap_lowcore</name><argument_list pos:start="83:30" pos:end="83:38">(<argument pos:start="83:31" pos:end="83:37"><expr pos:start="83:31" pos:end="83:37"><name pos:start="83:31" pos:end="83:37">lowcore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:33"><expr pos:start="87:13" pos:end="87:32"><name pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:15">env</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:25">io_index</name><index pos:start="87:26" pos:end="87:30">[<expr pos:start="87:27" pos:end="87:29"><name pos:start="87:27" pos:end="87:29">isc</name></expr>]</index></name><operator pos:start="87:31" pos:end="87:32">--</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="91:13" pos:end="93:50"><expr pos:start="91:13" pos:end="93:49"><call pos:start="91:13" pos:end="93:49"><name pos:start="91:13" pos:end="91:19">DPRINTF</name><argument_list pos:start="91:20" pos:end="93:49">(<argument pos:start="91:21" pos:end="91:51"><expr pos:start="91:21" pos:end="91:51"><literal type="string" pos:start="91:21" pos:end="91:27">"%s: %"</literal> <name pos:start="91:29" pos:end="91:34">PRIx64</name> <literal type="string" pos:start="91:36" pos:end="91:39">" %"</literal> <name pos:start="91:41" pos:end="91:46">PRIx64</name> <literal type="string" pos:start="91:48" pos:end="91:51">"\n"</literal></expr></argument>, <argument pos:start="91:54" pos:end="91:61"><expr pos:start="91:54" pos:end="91:61"><name pos:start="91:54" pos:end="91:61">__func__</name></expr></argument>,

                    <argument pos:start="93:21" pos:end="93:33"><expr pos:start="93:21" pos:end="93:33"><name pos:start="93:21" pos:end="93:33"><name pos:start="93:21" pos:end="93:23">env</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:28">psw</name><operator pos:start="93:29" pos:end="93:29">.</operator><name pos:start="93:30" pos:end="93:33">mask</name></name></expr></argument>, <argument pos:start="93:36" pos:end="93:48"><expr pos:start="93:36" pos:end="93:48"><name pos:start="93:36" pos:end="93:48"><name pos:start="93:36" pos:end="93:38">env</name><operator pos:start="93:39" pos:end="93:40">-&gt;</operator><name pos:start="93:41" pos:end="93:43">psw</name><operator pos:start="93:44" pos:end="93:44">.</operator><name pos:start="93:45" pos:end="93:48">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:38"><expr pos:start="95:13" pos:end="95:37"><call pos:start="95:13" pos:end="95:37"><name pos:start="95:13" pos:end="95:20">load_psw</name><argument_list pos:start="95:21" pos:end="95:37">(<argument pos:start="95:22" pos:end="95:24"><expr pos:start="95:22" pos:end="95:24"><name pos:start="95:22" pos:end="95:24">env</name></expr></argument>, <argument pos:start="95:27" pos:end="95:30"><expr pos:start="95:27" pos:end="95:30"><name pos:start="95:27" pos:end="95:30">mask</name></expr></argument>, <argument pos:start="95:33" pos:end="95:36"><expr pos:start="95:33" pos:end="95:36"><name pos:start="95:33" pos:end="95:36">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:36">(<expr pos:start="99:13" pos:end="99:35"><name pos:start="99:13" pos:end="99:30"><name pos:start="99:13" pos:end="99:15">env</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:25">io_index</name><index pos:start="99:26" pos:end="99:30">[<expr pos:start="99:27" pos:end="99:29"><name pos:start="99:27" pos:end="99:29">isc</name></expr>]</index></name> <operator pos:start="99:32" pos:end="99:33">&gt;=</operator> <literal type="number" pos:start="99:35" pos:end="99:35">0</literal></expr>)</condition> <block pos:start="99:38" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:24">

            <expr_stmt pos:start="101:13" pos:end="101:24"><expr pos:start="101:13" pos:end="101:23"><name pos:start="101:13" pos:end="101:19">disable</name> <operator pos:start="101:21" pos:end="101:21">=</operator> <literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <continue pos:start="105:9" pos:end="105:17">continue;</continue>

    </block_content>}</block></for>



    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:16">(<expr pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:15">disable</name></expr>)</condition> <block pos:start="111:18" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:42">

        <expr_stmt pos:start="113:9" pos:end="113:42"><expr pos:start="113:9" pos:end="113:41"><name pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:11">env</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:24">pending_int</name></name> <operator pos:start="113:26" pos:end="113:27">&amp;=</operator> <operator pos:start="113:29" pos:end="113:29">~</operator><name pos:start="113:30" pos:end="113:41">INTERRUPT_IO</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



</block_content>}</block></function>
</unit>
