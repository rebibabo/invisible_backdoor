<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20566.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">vhdx_update_header</name><parameter_list pos:start="1:30" pos:end="3:78">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:68"><decl pos:start="1:53" pos:end="1:68"><type pos:start="1:53" pos:end="1:68"><name pos:start="1:53" pos:end="1:65">BDRVVHDXState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:68">s</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:59"><decl pos:start="3:31" pos:end="3:59"><type pos:start="3:31" pos:end="3:59"><name pos:start="3:31" pos:end="3:34">bool</name></type> <name pos:start="3:36" pos:end="3:59">generate_data_write_guid</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:77"><decl pos:start="3:62" pos:end="3:77"><type pos:start="3:62" pos:end="3:77"><name pos:start="3:62" pos:end="3:67">MSGUID</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:77">log_guid</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="89:1">{<block_content pos:start="7:5" pos:end="87:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">hdr_idx</name> <init pos:start="9:17" pos:end="9:19">= <expr pos:start="9:19" pos:end="9:19"><literal type="number" pos:start="9:19" pos:end="9:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:49"><decl pos:start="11:5" pos:end="11:48"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:26">header_offset</name> <init pos:start="11:28" pos:end="11:48">= <expr pos:start="11:30" pos:end="11:48"><name pos:start="11:30" pos:end="11:48">VHDX_HEADER1_OFFSET</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">VHDXHeader</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:29">active_header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:14">VHDXHeader</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:31">inactive_header</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:43">/* operate on the non-current header */</comment>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:28">(<expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:22">curr_header</name></name> <operator pos:start="23:24" pos:end="23:25">==</operator> <literal type="number" pos:start="23:27" pos:end="23:27">0</literal></expr>)</condition> <block pos:start="23:30" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:44">

        <expr_stmt pos:start="25:9" pos:end="25:20"><expr pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:15">hdr_idx</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <literal type="number" pos:start="25:19" pos:end="25:19">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:44"><expr pos:start="27:9" pos:end="27:43"><name pos:start="27:9" pos:end="27:21">header_offset</name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:43">VHDX_HEADER2_OFFSET</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:49"><expr pos:start="33:5" pos:end="33:48"><name pos:start="33:5" pos:end="33:17">active_header</name>   <operator pos:start="33:21" pos:end="33:21">=</operator> <name pos:start="33:23" pos:end="33:48"><name pos:start="33:23" pos:end="33:23">s</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:32">headers</name><index pos:start="33:33" pos:end="33:48">[<expr pos:start="33:34" pos:end="33:47"><name pos:start="33:34" pos:end="33:47"><name pos:start="33:34" pos:end="33:34">s</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:47">curr_header</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:42"><expr pos:start="35:5" pos:end="35:41"><name pos:start="35:5" pos:end="35:19">inactive_header</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:41"><name pos:start="35:23" pos:end="35:23">s</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:32">headers</name><index pos:start="35:33" pos:end="35:41">[<expr pos:start="35:34" pos:end="35:40"><name pos:start="35:34" pos:end="35:40">hdr_idx</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:74"><expr pos:start="39:5" pos:end="39:73"><name pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:19">inactive_header</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:36">sequence_number</name></name> <operator pos:start="39:38" pos:end="39:38">=</operator> <name pos:start="39:40" pos:end="39:69"><name pos:start="39:40" pos:end="39:52">active_header</name><operator pos:start="39:53" pos:end="39:54">-&gt;</operator><name pos:start="39:55" pos:end="39:69">sequence_number</name></name> <operator pos:start="39:71" pos:end="39:71">+</operator> <literal type="number" pos:start="39:73" pos:end="39:73">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="45:17">/* a new file guid must be generated before any file write, including

     * headers */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:55"><expr pos:start="47:5" pos:end="47:54"><name pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:19">inactive_header</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:36">file_write_guid</name></name> <operator pos:start="47:38" pos:end="47:38">=</operator> <name pos:start="47:40" pos:end="47:54"><name pos:start="47:40" pos:end="47:40">s</name><operator pos:start="47:41" pos:end="47:42">-&gt;</operator><name pos:start="47:43" pos:end="47:54">session_guid</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="53:66">/* a new data guid only needs to be generated before any guest-visible

     * writes (i.e. something observable via virtual disk read) */</comment>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:33">(<expr pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:32">generate_data_write_guid</name></expr>)</condition> <block pos:start="55:35" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:62">

        <expr_stmt pos:start="57:9" pos:end="57:62"><expr pos:start="57:9" pos:end="57:61"><call pos:start="57:9" pos:end="57:61"><name pos:start="57:9" pos:end="57:26">vhdx_guid_generate</name><argument_list pos:start="57:27" pos:end="57:61">(<argument pos:start="57:28" pos:end="57:60"><expr pos:start="57:28" pos:end="57:60"><operator pos:start="57:28" pos:end="57:28">&amp;</operator><name pos:start="57:29" pos:end="57:60"><name pos:start="57:29" pos:end="57:43">inactive_header</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:60">data_write_guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:40">/* update the log guid if present */</comment>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:17">(<expr pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16">log_guid</name></expr>)</condition> <block pos:start="65:19" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:46">

        <expr_stmt pos:start="67:9" pos:end="67:46"><expr pos:start="67:9" pos:end="67:45"><name pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:23">inactive_header</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:33">log_guid</name></name> <operator pos:start="67:35" pos:end="67:35">=</operator> <operator pos:start="67:37" pos:end="67:37">*</operator><name pos:start="67:38" pos:end="67:45">log_guid</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:70"><expr pos:start="73:5" pos:end="73:69"><call pos:start="73:5" pos:end="73:69"><name pos:start="73:5" pos:end="73:21">vhdx_write_header</name><argument_list pos:start="73:22" pos:end="73:69">(<argument pos:start="73:23" pos:end="73:30"><expr pos:start="73:23" pos:end="73:30"><name pos:start="73:23" pos:end="73:30"><name pos:start="73:23" pos:end="73:24">bs</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:30">file</name></name></expr></argument>, <argument pos:start="73:33" pos:end="73:47"><expr pos:start="73:33" pos:end="73:47"><name pos:start="73:33" pos:end="73:47">inactive_header</name></expr></argument>, <argument pos:start="73:50" pos:end="73:62"><expr pos:start="73:50" pos:end="73:62"><name pos:start="73:50" pos:end="73:62">header_offset</name></expr></argument>, <argument pos:start="73:65" pos:end="73:68"><expr pos:start="73:65" pos:end="73:68"><name pos:start="73:65" pos:end="73:68">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:16">(<expr pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">&lt;</operator> <literal type="number" pos:start="75:15" pos:end="75:15">0</literal></expr>)</condition> <block pos:start="75:18" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:18">

        <goto pos:start="77:9" pos:end="77:18">goto <name pos:start="77:14" pos:end="77:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:29"><expr pos:start="81:5" pos:end="81:28"><name pos:start="81:5" pos:end="81:18"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:18">curr_header</name></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <name pos:start="81:22" pos:end="81:28">hdr_idx</name></expr>;</expr_stmt>



<label pos:start="85:1" pos:end="85:5"><name pos:start="85:1" pos:end="85:4">exit</name>:</label>

    <return pos:start="87:5" pos:end="87:15">return <expr pos:start="87:12" pos:end="87:14"><name pos:start="87:12" pos:end="87:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
