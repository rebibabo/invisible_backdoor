<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15637.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">assigned_dev_msix_mmio_write</name><parameter_list pos:start="1:41" pos:end="3:69">(<parameter pos:start="1:42" pos:end="1:53"><decl pos:start="1:42" pos:end="1:53"><type pos:start="1:42" pos:end="1:53"><name pos:start="1:42" pos:end="1:45">void</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:53">opaque</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:78"><decl pos:start="1:56" pos:end="1:78"><type pos:start="1:56" pos:end="1:78"><name pos:start="1:56" pos:end="1:73">target_phys_addr_t</name></type> <name pos:start="1:75" pos:end="1:78">addr</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:53"><decl pos:start="3:42" pos:end="3:53"><type pos:start="3:42" pos:end="3:53"><name pos:start="3:42" pos:end="3:49">uint64_t</name></type> <name pos:start="3:51" pos:end="3:53">val</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:68"><decl pos:start="3:56" pos:end="3:68"><type pos:start="3:56" pos:end="3:68"><name pos:start="3:56" pos:end="3:63">unsigned</name></type> <name pos:start="3:65" pos:end="3:68">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="127:1">{<block_content pos:start="7:5" pos:end="125:5">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AssignedDevice</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">adev</name> <init pos:start="7:26" pos:end="7:33">= <expr pos:start="7:28" pos:end="7:33"><name pos:start="7:28" pos:end="7:33">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">PCIDevice</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:19">pdev</name> <init pos:start="9:21" pos:end="9:32">= <expr pos:start="9:23" pos:end="9:32"><operator pos:start="9:23" pos:end="9:23">&amp;</operator><name pos:start="9:24" pos:end="9:32"><name pos:start="9:24" pos:end="9:27">adev</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:32">dev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:17">ctrl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">MSIXTableEntry</name></type> <name pos:start="13:20" pos:end="13:23">orig</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name> <init pos:start="15:11" pos:end="15:21">= <expr pos:start="15:13" pos:end="15:21"><name pos:start="15:13" pos:end="15:16">addr</name> <operator pos:start="15:18" pos:end="15:19">&gt;&gt;</operator> <literal type="number" pos:start="15:21" pos:end="15:21">4</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:28">(<expr pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:9">i</name> <operator pos:start="19:11" pos:end="19:12">&gt;=</operator> <name pos:start="19:14" pos:end="19:27"><name pos:start="19:14" pos:end="19:17">adev</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:27">msix_max</name></name></expr>)</condition> <block pos:start="19:30" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:15">

        <return pos:start="21:9" pos:end="21:15">return;</return> <comment type="block" pos:start="21:17" pos:end="21:32">/* Drop write */</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:72"><expr pos:start="27:5" pos:end="27:71"><name pos:start="27:5" pos:end="27:8">ctrl</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:71"><name pos:start="27:12" pos:end="27:23">pci_get_word</name><argument_list pos:start="27:24" pos:end="27:71">(<argument pos:start="27:25" pos:end="27:70"><expr pos:start="27:25" pos:end="27:70"><name pos:start="27:25" pos:end="27:36"><name pos:start="27:25" pos:end="27:28">pdev</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:36">config</name></name> <operator pos:start="27:38" pos:end="27:38">+</operator> <name pos:start="27:40" pos:end="27:53"><name pos:start="27:40" pos:end="27:43">pdev</name><operator pos:start="27:44" pos:end="27:45">-&gt;</operator><name pos:start="27:46" pos:end="27:53">msix_cap</name></name> <operator pos:start="27:55" pos:end="27:55">+</operator> <name pos:start="27:57" pos:end="27:70">PCI_MSIX_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:71"><expr pos:start="31:5" pos:end="31:70"><call pos:start="31:5" pos:end="31:70"><name pos:start="31:5" pos:end="31:9">DEBUG</name><argument_list pos:start="31:10" pos:end="31:70">(<argument pos:start="31:11" pos:end="31:58"><expr pos:start="31:11" pos:end="31:58"><literal type="string" pos:start="31:11" pos:end="31:58">"write to MSI-X table offset 0x%lx, val 0x%lx\n"</literal></expr></argument>, <argument pos:start="31:61" pos:end="31:64"><expr pos:start="31:61" pos:end="31:64"><name pos:start="31:61" pos:end="31:64">addr</name></expr></argument>, <argument pos:start="31:67" pos:end="31:69"><expr pos:start="31:67" pos:end="31:69"><name pos:start="31:67" pos:end="31:69">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:37">(<expr pos:start="35:9" pos:end="35:36"><name pos:start="35:9" pos:end="35:12">ctrl</name> <operator pos:start="35:14" pos:end="35:14">&amp;</operator> <name pos:start="35:16" pos:end="35:36">PCI_MSIX_FLAGS_ENABLE</name></expr>)</condition> <block pos:start="35:39" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:35">

        <expr_stmt pos:start="37:9" pos:end="37:35"><expr pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:12">orig</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <name pos:start="37:16" pos:end="37:34"><name pos:start="37:16" pos:end="37:19">adev</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:31">msix_table</name><index pos:start="37:32" pos:end="37:34">[<expr pos:start="37:33" pos:end="37:33"><name pos:start="37:33" pos:end="37:33">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:59"><expr pos:start="43:5" pos:end="43:58"><call pos:start="43:5" pos:end="43:58"><name pos:start="43:5" pos:end="43:10">memcpy</name><argument_list pos:start="43:11" pos:end="43:58">(<argument pos:start="43:12" pos:end="43:45"><expr pos:start="43:12" pos:end="43:45"><operator pos:start="43:12" pos:end="43:12">(</operator><name pos:start="43:13" pos:end="43:19">uint8_t</name> <operator pos:start="43:21" pos:end="43:21">*</operator><operator pos:start="43:22" pos:end="43:22">)</operator><name pos:start="43:23" pos:end="43:38"><name pos:start="43:23" pos:end="43:26">adev</name><operator pos:start="43:27" pos:end="43:28">-&gt;</operator><name pos:start="43:29" pos:end="43:38">msix_table</name></name> <operator pos:start="43:40" pos:end="43:40">+</operator> <name pos:start="43:42" pos:end="43:45">addr</name></expr></argument>, <argument pos:start="43:48" pos:end="43:51"><expr pos:start="43:48" pos:end="43:51"><operator pos:start="43:48" pos:end="43:48">&amp;</operator><name pos:start="43:49" pos:end="43:51">val</name></expr></argument>, <argument pos:start="43:54" pos:end="43:57"><expr pos:start="43:54" pos:end="43:57"><name pos:start="43:54" pos:end="43:57">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="125:5"><if pos:start="47:5" pos:end="125:5">if <condition pos:start="47:8" pos:end="47:37">(<expr pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:12">ctrl</name> <operator pos:start="47:14" pos:end="47:14">&amp;</operator> <name pos:start="47:16" pos:end="47:36">PCI_MSIX_FLAGS_ENABLE</name></expr>)</condition> <block pos:start="47:39" pos:end="125:5">{<block_content pos:start="49:9" pos:end="123:9">

        <decl_stmt pos:start="49:9" pos:end="49:53"><decl pos:start="49:9" pos:end="49:52"><type pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:22">MSIXTableEntry</name> <modifier pos:start="49:24" pos:end="49:24">*</modifier></type><name pos:start="49:25" pos:end="49:29">entry</name> <init pos:start="49:31" pos:end="49:52">= <expr pos:start="49:33" pos:end="49:52"><operator pos:start="49:33" pos:end="49:33">&amp;</operator><name pos:start="49:34" pos:end="49:52"><name pos:start="49:34" pos:end="49:37">adev</name><operator pos:start="49:38" pos:end="49:39">-&gt;</operator><name pos:start="49:40" pos:end="49:49">msix_table</name><index pos:start="49:50" pos:end="49:52">[<expr pos:start="49:51" pos:end="49:51"><name pos:start="49:51" pos:end="49:51">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="53:9" pos:end="123:9"><if pos:start="53:9" pos:end="79:9">if <condition pos:start="53:12" pos:end="55:44">(<expr pos:start="53:13" pos:end="55:43"><operator pos:start="53:13" pos:end="53:13">!</operator><call pos:start="53:14" pos:end="53:44"><name pos:start="53:14" pos:end="53:37">assigned_dev_msix_masked</name><argument_list pos:start="53:38" pos:end="53:44">(<argument pos:start="53:39" pos:end="53:43"><expr pos:start="53:39" pos:end="53:43"><operator pos:start="53:39" pos:end="53:39">&amp;</operator><name pos:start="53:40" pos:end="53:43">orig</name></expr></argument>)</argument_list></call> <operator pos:start="53:46" pos:end="53:47">&amp;&amp;</operator>

            <call pos:start="55:13" pos:end="55:43"><name pos:start="55:13" pos:end="55:36">assigned_dev_msix_masked</name><argument_list pos:start="55:37" pos:end="55:43">(<argument pos:start="55:38" pos:end="55:42"><expr pos:start="55:38" pos:end="55:42"><name pos:start="55:38" pos:end="55:42">entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:46" pos:end="79:9">{<block_content>

            <comment type="block" pos:start="57:13" pos:end="77:15">/*

             * Vector masked, disable it

             *

             * XXX It's not clear if we can or should actually attempt

             * to mask or disable the interrupt.  KVM doesn't have

             * support for pending bits and kvm_assign_set_msix_entry

             * doesn't modify the device hardware mask.  Interrupts

             * while masked are simply not injected to the guest, so

             * are lost.  Can we get away with always injecting an

             * interrupt on unmask?

             */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="79:11" pos:end="123:9">else if <condition pos:start="79:19" pos:end="81:52">(<expr pos:start="79:20" pos:end="81:51"><call pos:start="79:20" pos:end="79:50"><name pos:start="79:20" pos:end="79:43">assigned_dev_msix_masked</name><argument_list pos:start="79:44" pos:end="79:50">(<argument pos:start="79:45" pos:end="79:49"><expr pos:start="79:45" pos:end="79:49"><operator pos:start="79:45" pos:end="79:45">&amp;</operator><name pos:start="79:46" pos:end="79:49">orig</name></expr></argument>)</argument_list></call> <operator pos:start="79:52" pos:end="79:53">&amp;&amp;</operator>

                   <operator pos:start="81:20" pos:end="81:20">!</operator><call pos:start="81:21" pos:end="81:51"><name pos:start="81:21" pos:end="81:44">assigned_dev_msix_masked</name><argument_list pos:start="81:45" pos:end="81:51">(<argument pos:start="81:46" pos:end="81:50"><expr pos:start="81:46" pos:end="81:50"><name pos:start="81:46" pos:end="81:50">entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:54" pos:end="123:9">{<block_content pos:start="85:13" pos:end="121:13">

            <comment type="block" pos:start="83:13" pos:end="83:33">/* Vector unmasked */</comment>

            <if_stmt pos:start="85:13" pos:end="121:13"><if pos:start="85:13" pos:end="93:13">if <condition pos:start="85:16" pos:end="85:64">(<expr pos:start="85:17" pos:end="85:63"><name pos:start="85:17" pos:end="85:17">i</name> <operator pos:start="85:19" pos:end="85:20">&gt;=</operator> <name pos:start="85:22" pos:end="85:38"><name pos:start="85:22" pos:end="85:25">adev</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:38">msi_virq_nr</name></name> <operator pos:start="85:40" pos:end="85:41">||</operator> <name pos:start="85:43" pos:end="85:59"><name pos:start="85:43" pos:end="85:46">adev</name><operator pos:start="85:47" pos:end="85:48">-&gt;</operator><name pos:start="85:49" pos:end="85:56">msi_virq</name><index pos:start="85:57" pos:end="85:59">[<expr pos:start="85:58" pos:end="85:58"><name pos:start="85:58" pos:end="85:58">i</name></expr>]</index></name> <operator pos:start="85:61" pos:end="85:61">&lt;</operator> <literal type="number" pos:start="85:63" pos:end="85:63">0</literal></expr>)</condition> <block pos:start="85:66" pos:end="93:13">{<block_content pos:start="89:17" pos:end="91:23">

                <comment type="block" pos:start="87:17" pos:end="87:70">/* Previously unassigned vector, start from scratch */</comment>

                <expr_stmt pos:start="89:17" pos:end="89:47"><expr pos:start="89:17" pos:end="89:46"><call pos:start="89:17" pos:end="89:46"><name pos:start="89:17" pos:end="89:40">assigned_dev_update_msix</name><argument_list pos:start="89:41" pos:end="89:46">(<argument pos:start="89:42" pos:end="89:45"><expr pos:start="89:42" pos:end="89:45"><name pos:start="89:42" pos:end="89:45">pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="91:17" pos:end="91:23">return;</return>

            </block_content>}</block></if> <else pos:start="93:15" pos:end="121:13">else <block pos:start="93:20" pos:end="121:13">{<block_content pos:start="97:17" pos:end="119:17">

                <comment type="block" pos:start="95:17" pos:end="95:66">/* Update an existing, previously masked vector */</comment>

                <decl_stmt pos:start="97:17" pos:end="97:31"><decl pos:start="97:17" pos:end="97:30"><type pos:start="97:17" pos:end="97:26"><name pos:start="97:17" pos:end="97:26">MSIMessage</name></type> <name pos:start="97:28" pos:end="97:30">msg</name></decl>;</decl_stmt>

                <decl_stmt pos:start="99:17" pos:end="99:24"><decl pos:start="99:17" pos:end="99:23"><type pos:start="99:17" pos:end="99:19"><name pos:start="99:17" pos:end="99:19">int</name></type> <name pos:start="99:21" pos:end="99:23">ret</name></decl>;</decl_stmt>



                <expr_stmt pos:start="103:17" pos:end="105:53"><expr pos:start="103:17" pos:end="105:52"><name pos:start="103:17" pos:end="103:27"><name pos:start="103:17" pos:end="103:19">msg</name><operator pos:start="103:20" pos:end="103:20">.</operator><name pos:start="103:21" pos:end="103:27">address</name></name> <operator pos:start="103:29" pos:end="103:29">=</operator> <name pos:start="103:31" pos:end="103:44"><name pos:start="103:31" pos:end="103:35">entry</name><operator pos:start="103:36" pos:end="103:37">-&gt;</operator><name pos:start="103:38" pos:end="103:44">addr_lo</name></name> <operator pos:start="103:46" pos:end="103:46">|</operator>

                    <operator pos:start="105:21" pos:end="105:21">(</operator><operator pos:start="105:22" pos:end="105:22">(</operator><name pos:start="105:23" pos:end="105:30">uint64_t</name><operator pos:start="105:31" pos:end="105:31">)</operator><name pos:start="105:32" pos:end="105:45"><name pos:start="105:32" pos:end="105:36">entry</name><operator pos:start="105:37" pos:end="105:38">-&gt;</operator><name pos:start="105:39" pos:end="105:45">addr_hi</name></name> <operator pos:start="105:47" pos:end="105:48">&lt;&lt;</operator> <literal type="number" pos:start="105:50" pos:end="105:51">32</literal><operator pos:start="105:52" pos:end="105:52">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:39"><expr pos:start="107:17" pos:end="107:38"><name pos:start="107:17" pos:end="107:24"><name pos:start="107:17" pos:end="107:19">msg</name><operator pos:start="107:20" pos:end="107:20">.</operator><name pos:start="107:21" pos:end="107:24">data</name></name> <operator pos:start="107:26" pos:end="107:26">=</operator> <name pos:start="107:28" pos:end="107:38"><name pos:start="107:28" pos:end="107:32">entry</name><operator pos:start="107:33" pos:end="107:34">-&gt;</operator><name pos:start="107:35" pos:end="107:38">data</name></name></expr>;</expr_stmt>



                <expr_stmt pos:start="111:17" pos:end="113:75"><expr pos:start="111:17" pos:end="113:74"><name pos:start="111:17" pos:end="111:19">ret</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <call pos:start="111:23" pos:end="113:74"><name pos:start="111:23" pos:end="111:50">kvm_irqchip_update_msi_route</name><argument_list pos:start="111:51" pos:end="113:74">(<argument pos:start="111:52" pos:end="111:60"><expr pos:start="111:52" pos:end="111:60"><name pos:start="111:52" pos:end="111:60">kvm_state</name></expr></argument>,

                                                   <argument pos:start="113:52" pos:end="113:68"><expr pos:start="113:52" pos:end="113:68"><name pos:start="113:52" pos:end="113:68"><name pos:start="113:52" pos:end="113:55">adev</name><operator pos:start="113:56" pos:end="113:57">-&gt;</operator><name pos:start="113:58" pos:end="113:65">msi_virq</name><index pos:start="113:66" pos:end="113:68">[<expr pos:start="113:67" pos:end="113:67"><name pos:start="113:67" pos:end="113:67">i</name></expr>]</index></name></expr></argument>, <argument pos:start="113:71" pos:end="113:73"><expr pos:start="113:71" pos:end="113:73"><name pos:start="113:71" pos:end="113:73">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="115:17" pos:end="119:17"><if pos:start="115:17" pos:end="119:17">if <condition pos:start="115:20" pos:end="115:24">(<expr pos:start="115:21" pos:end="115:23"><name pos:start="115:21" pos:end="115:23">ret</name></expr>)</condition> <block pos:start="115:26" pos:end="119:17">{<block_content pos:start="117:21" pos:end="117:79">

                    <expr_stmt pos:start="117:21" pos:end="117:79"><expr pos:start="117:21" pos:end="117:78"><call pos:start="117:21" pos:end="117:78"><name pos:start="117:21" pos:end="117:32">error_report</name><argument_list pos:start="117:33" pos:end="117:78">(<argument pos:start="117:34" pos:end="117:72"><expr pos:start="117:34" pos:end="117:72"><literal type="string" pos:start="117:34" pos:end="117:72">"Error updating irq routing entry (%d)"</literal></expr></argument>, <argument pos:start="117:75" pos:end="117:77"><expr pos:start="117:75" pos:end="117:77"><name pos:start="117:75" pos:end="117:77">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
