<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1242.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:27"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:25">sPAPREventLogEntry</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:49">rtas_event_log_dequeue</name><parameter_list pos:start="1:50" pos:end="3:65">(<parameter pos:start="1:51" pos:end="1:69"><decl pos:start="1:51" pos:end="1:69"><type pos:start="1:51" pos:end="1:69"><name pos:start="1:51" pos:end="1:58">uint32_t</name></type> <name pos:start="1:60" pos:end="1:69">event_mask</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:64"><decl pos:start="3:51" pos:end="3:64"><type pos:start="3:51" pos:end="3:64"><name pos:start="3:51" pos:end="3:54">bool</name></type> <name pos:start="3:56" pos:end="3:64">exception</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="57:1">{<block_content pos:start="7:5" pos:end="55:17">

    <decl_stmt pos:start="7:5" pos:end="7:65"><decl pos:start="7:5" pos:end="7:64"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">sPAPRMachineState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">spapr</name> <init pos:start="7:30" pos:end="7:64">= <expr pos:start="7:32" pos:end="7:64"><call pos:start="7:32" pos:end="7:64"><name pos:start="7:32" pos:end="7:44">SPAPR_MACHINE</name><argument_list pos:start="7:45" pos:end="7:64">(<argument pos:start="7:46" pos:end="7:63"><expr pos:start="7:46" pos:end="7:63"><call pos:start="7:46" pos:end="7:63"><name pos:start="7:46" pos:end="7:61">qdev_get_machine</name><argument_list pos:start="7:62" pos:end="7:63">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:22">sPAPREventLogEntry</name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:29">entry</name> <init pos:start="9:31" pos:end="9:36">= <expr pos:start="9:33" pos:end="9:36"><name pos:start="9:33" pos:end="9:36">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:40">/* we only queue EPOW events atm. */</comment>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:44">(<expr pos:start="15:9" pos:end="15:43"><operator pos:start="15:9" pos:end="15:9">(</operator><name pos:start="15:10" pos:end="15:19">event_mask</name> <operator pos:start="15:21" pos:end="15:21">&amp;</operator> <name pos:start="15:23" pos:end="15:37">EVENT_MASK_EPOW</name><operator pos:start="15:38" pos:end="15:38">)</operator> <operator pos:start="15:40" pos:end="15:41">==</operator> <literal type="number" pos:start="15:43" pos:end="15:43">0</literal></expr>)</condition> <block pos:start="15:46" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:20">

        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="23:5" pos:end="23:55"><name pos:start="23:5" pos:end="23:18">QTAILQ_FOREACH</name><argument_list pos:start="23:19" pos:end="23:55">(<argument pos:start="23:20" pos:end="23:24">entry</argument>, <argument pos:start="23:27" pos:end="23:48">&amp;spapr-&gt;pending_events</argument>, <argument pos:start="23:51" pos:end="23:54">next</argument>)</argument_list></macro> <block pos:start="23:57" pos:end="43:5">{<block_content pos:start="25:9" pos:end="41:9">

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:42">(<expr pos:start="25:13" pos:end="25:41"><name pos:start="25:13" pos:end="25:28"><name pos:start="25:13" pos:end="25:17">entry</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:28">exception</name></name> <operator pos:start="25:30" pos:end="25:31">!=</operator> <name pos:start="25:33" pos:end="25:41">exception</name></expr>)</condition> <block pos:start="25:44" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:21">

            <continue pos:start="27:13" pos:end="27:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="33:9" pos:end="33:69">/* EPOW and hotplug events are surfaced in the same manner */</comment>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="37:53">(<expr pos:start="35:13" pos:end="37:52"><name pos:start="35:13" pos:end="35:27"><name pos:start="35:13" pos:end="35:17">entry</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:27">log_type</name></name> <operator pos:start="35:29" pos:end="35:30">==</operator> <name pos:start="35:32" pos:end="35:49">RTAS_LOG_TYPE_EPOW</name> <operator pos:start="35:51" pos:end="35:52">||</operator>

            <name pos:start="37:13" pos:end="37:27"><name pos:start="37:13" pos:end="37:17">entry</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:27">log_type</name></name> <operator pos:start="37:29" pos:end="37:30">==</operator> <name pos:start="37:32" pos:end="37:52">RTAS_LOG_TYPE_HOTPLUG</name></expr>)</condition> <block pos:start="37:55" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:18">

            <break pos:start="39:13" pos:end="39:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:14">(<expr pos:start="47:9" pos:end="47:13"><name pos:start="47:9" pos:end="47:13">entry</name></expr>)</condition> <block pos:start="47:16" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:59">

        <expr_stmt pos:start="49:9" pos:end="49:59"><expr pos:start="49:9" pos:end="49:58"><call pos:start="49:9" pos:end="49:58"><name pos:start="49:9" pos:end="49:21">QTAILQ_REMOVE</name><argument_list pos:start="49:22" pos:end="49:58">(<argument pos:start="49:23" pos:end="49:44"><expr pos:start="49:23" pos:end="49:44"><operator pos:start="49:23" pos:end="49:23">&amp;</operator><name pos:start="49:24" pos:end="49:44"><name pos:start="49:24" pos:end="49:28">spapr</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:44">pending_events</name></name></expr></argument>, <argument pos:start="49:47" pos:end="49:51"><expr pos:start="49:47" pos:end="49:51"><name pos:start="49:47" pos:end="49:51">entry</name></expr></argument>, <argument pos:start="49:54" pos:end="49:57"><expr pos:start="49:54" pos:end="49:57"><name pos:start="49:54" pos:end="49:57">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="55:5" pos:end="55:17">return <expr pos:start="55:12" pos:end="55:16"><name pos:start="55:12" pos:end="55:16">entry</name></expr>;</return>

</block_content>}</block></function>
</unit>
