<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21428.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">mpcore_priv_map_setup</name><parameter_list pos:start="1:34" pos:end="1:55">(<parameter pos:start="1:35" pos:end="1:54"><decl pos:start="1:35" pos:end="1:54"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:51">mpcore_priv_state</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:54">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">SysBusDevice</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:27">gicbusdev</name> <init pos:start="7:29" pos:end="7:54">= <expr pos:start="7:31" pos:end="7:54"><call pos:start="7:31" pos:end="7:54"><name pos:start="7:31" pos:end="7:46">sysbus_from_qdev</name><argument_list pos:start="7:47" pos:end="7:54">(<argument pos:start="7:48" pos:end="7:53"><expr pos:start="7:48" pos:end="7:53"><name pos:start="7:48" pos:end="7:53"><name pos:start="7:48" pos:end="7:48">s</name><operator pos:start="7:49" pos:end="7:50">-&gt;</operator><name pos:start="7:51" pos:end="7:53">gic</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">SysBusDevice</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:24">busdev</name> <init pos:start="9:26" pos:end="9:55">= <expr pos:start="9:28" pos:end="9:55"><call pos:start="9:28" pos:end="9:55"><name pos:start="9:28" pos:end="9:43">sysbus_from_qdev</name><argument_list pos:start="9:44" pos:end="9:55">(<argument pos:start="9:45" pos:end="9:54"><expr pos:start="9:45" pos:end="9:54"><name pos:start="9:45" pos:end="9:54"><name pos:start="9:45" pos:end="9:45">s</name><operator pos:start="9:46" pos:end="9:47">-&gt;</operator><name pos:start="9:48" pos:end="9:54">mptimer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:71"><expr pos:start="11:5" pos:end="11:70"><call pos:start="11:5" pos:end="11:70"><name pos:start="11:5" pos:end="11:22">memory_region_init</name><argument_list pos:start="11:23" pos:end="11:70">(<argument pos:start="11:24" pos:end="11:36"><expr pos:start="11:24" pos:end="11:36"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:36"><name pos:start="11:25" pos:end="11:25">s</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:36">container</name></name></expr></argument>, <argument pos:start="11:39" pos:end="11:61"><expr pos:start="11:39" pos:end="11:61"><literal type="string" pos:start="11:39" pos:end="11:61">"mpcode-priv-container"</literal></expr></argument>, <argument pos:start="11:64" pos:end="11:69"><expr pos:start="11:64" pos:end="11:69"><literal type="number" pos:start="11:64" pos:end="11:69">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:78"><expr pos:start="13:5" pos:end="13:77"><call pos:start="13:5" pos:end="13:77"><name pos:start="13:5" pos:end="13:25">memory_region_init_io</name><argument_list pos:start="13:26" pos:end="13:77">(<argument pos:start="13:27" pos:end="13:35"><expr pos:start="13:27" pos:end="13:35"><operator pos:start="13:27" pos:end="13:27">&amp;</operator><name pos:start="13:28" pos:end="13:35"><name pos:start="13:28" pos:end="13:28">s</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:35">iomem</name></name></expr></argument>, <argument pos:start="13:38" pos:end="13:52"><expr pos:start="13:38" pos:end="13:52"><operator pos:start="13:38" pos:end="13:38">&amp;</operator><name pos:start="13:39" pos:end="13:52">mpcore_scu_ops</name></expr></argument>, <argument pos:start="13:55" pos:end="13:55"><expr pos:start="13:55" pos:end="13:55"><name pos:start="13:55" pos:end="13:55">s</name></expr></argument>, <argument pos:start="13:58" pos:end="13:69"><expr pos:start="13:58" pos:end="13:69"><literal type="string" pos:start="13:58" pos:end="13:69">"mpcore-scu"</literal></expr></argument>, <argument pos:start="13:72" pos:end="13:76"><expr pos:start="13:72" pos:end="13:76"><literal type="number" pos:start="13:72" pos:end="13:76">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:61"><expr pos:start="15:5" pos:end="15:60"><call pos:start="15:5" pos:end="15:60"><name pos:start="15:5" pos:end="15:31">memory_region_add_subregion</name><argument_list pos:start="15:32" pos:end="15:60">(<argument pos:start="15:33" pos:end="15:45"><expr pos:start="15:33" pos:end="15:45"><operator pos:start="15:33" pos:end="15:33">&amp;</operator><name pos:start="15:34" pos:end="15:45"><name pos:start="15:34" pos:end="15:34">s</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:45">container</name></name></expr></argument>, <argument pos:start="15:48" pos:end="15:48"><expr pos:start="15:48" pos:end="15:48"><literal type="number" pos:start="15:48" pos:end="15:48">0</literal></expr></argument>, <argument pos:start="15:51" pos:end="15:59"><expr pos:start="15:51" pos:end="15:59"><operator pos:start="15:51" pos:end="15:51">&amp;</operator><name pos:start="15:52" pos:end="15:59"><name pos:start="15:52" pos:end="15:52">s</name><operator pos:start="15:53" pos:end="15:54">-&gt;</operator><name pos:start="15:55" pos:end="15:59">iomem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="17:5" pos:end="21:7">/* GIC CPU interfaces: "current CPU" at 0x100, then specific CPUs

     * at 0x200, 0x300...

     */</comment>

    <for pos:start="23:5" pos:end="31:5">for <control pos:start="23:9" pos:end="23:42">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:37"><expr pos:start="23:17" pos:end="23:36"><name pos:start="23:17" pos:end="23:17">i</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <operator pos:start="23:21" pos:end="23:21">(</operator><name pos:start="23:22" pos:end="23:31"><name pos:start="23:22" pos:end="23:22">s</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:31">num_cpu</name></name> <operator pos:start="23:33" pos:end="23:33">+</operator> <literal type="number" pos:start="23:35" pos:end="23:35">1</literal><operator pos:start="23:36" pos:end="23:36">)</operator></expr>;</condition> <incr pos:start="23:39" pos:end="23:41"><expr pos:start="23:39" pos:end="23:41"><name pos:start="23:39" pos:end="23:39">i</name><operator pos:start="23:40" pos:end="23:41">++</operator></expr></incr>)</control> <block pos:start="23:44" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:78">

        <decl_stmt pos:start="25:9" pos:end="25:56"><decl pos:start="25:9" pos:end="25:55"><type pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:26">target_phys_addr_t</name></type> <name pos:start="25:28" pos:end="25:33">offset</name> <init pos:start="25:35" pos:end="25:55">= <expr pos:start="25:37" pos:end="25:55"><literal type="number" pos:start="25:37" pos:end="25:43">0x100</literal> <operator pos:start="25:43" pos:end="25:43">+</operator> <operator pos:start="25:45" pos:end="25:45">(</operator><name pos:start="25:46" pos:end="25:46">i</name> <operator pos:start="25:48" pos:end="25:48">*</operator> <literal type="number" pos:start="25:50" pos:end="25:54">0x100</literal><operator pos:start="25:55" pos:end="25:55">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="27:9" pos:end="29:78"><expr pos:start="27:9" pos:end="29:77"><call pos:start="27:9" pos:end="29:77"><name pos:start="27:9" pos:end="27:35">memory_region_add_subregion</name><argument_list pos:start="27:36" pos:end="29:77">(<argument pos:start="27:37" pos:end="27:49"><expr pos:start="27:37" pos:end="27:49"><operator pos:start="27:37" pos:end="27:37">&amp;</operator><name pos:start="27:38" pos:end="27:49"><name pos:start="27:38" pos:end="27:38">s</name><operator pos:start="27:39" pos:end="27:40">-&gt;</operator><name pos:start="27:41" pos:end="27:49">container</name></name></expr></argument>, <argument pos:start="27:52" pos:end="27:57"><expr pos:start="27:52" pos:end="27:57"><name pos:start="27:52" pos:end="27:57">offset</name></expr></argument>,

                                    <argument pos:start="29:37" pos:end="29:76"><expr pos:start="29:37" pos:end="29:76"><call pos:start="29:37" pos:end="29:76"><name pos:start="29:37" pos:end="29:58">sysbus_mmio_get_region</name><argument_list pos:start="29:59" pos:end="29:76">(<argument pos:start="29:60" pos:end="29:68"><expr pos:start="29:60" pos:end="29:68"><name pos:start="29:60" pos:end="29:68">gicbusdev</name></expr></argument>, <argument pos:start="29:71" pos:end="29:75"><expr pos:start="29:71" pos:end="29:75"><name pos:start="29:71" pos:end="29:71">i</name> <operator pos:start="29:73" pos:end="29:73">+</operator> <literal type="number" pos:start="29:75" pos:end="29:75">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="33:5" pos:end="37:7">/* Add the regions for timer and watchdog for "current CPU" and

     * for each specific CPU.

     */</comment>

    <for pos:start="39:5" pos:end="49:5">for <control pos:start="39:9" pos:end="39:46">(<init pos:start="39:10" pos:end="39:15"><expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</init> <condition pos:start="39:17" pos:end="39:41"><expr pos:start="39:17" pos:end="39:40"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <operator pos:start="39:21" pos:end="39:21">(</operator><name pos:start="39:22" pos:end="39:31"><name pos:start="39:22" pos:end="39:22">s</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:31">num_cpu</name></name> <operator pos:start="39:33" pos:end="39:33">+</operator> <literal type="number" pos:start="39:35" pos:end="39:35">1</literal><operator pos:start="39:36" pos:end="39:36">)</operator> <operator pos:start="39:38" pos:end="39:38">*</operator> <literal type="number" pos:start="39:40" pos:end="39:40">2</literal></expr>;</condition> <incr pos:start="39:43" pos:end="39:45"><expr pos:start="39:43" pos:end="39:45"><name pos:start="39:43" pos:end="39:43">i</name><operator pos:start="39:44" pos:end="39:45">++</operator></expr></incr>)</control> <block pos:start="39:48" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:71">

        <comment type="block" pos:start="41:9" pos:end="41:73">/* Timers at 0x600, 0x700, ...; watchdogs at 0x620, 0x720, ... */</comment>

        <decl_stmt pos:start="43:9" pos:end="43:78"><decl pos:start="43:9" pos:end="43:77"><type pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:26">target_phys_addr_t</name></type> <name pos:start="43:28" pos:end="43:33">offset</name> <init pos:start="43:35" pos:end="43:77">= <expr pos:start="43:37" pos:end="43:77"><literal type="number" pos:start="43:37" pos:end="43:43">0x600</literal> <operator pos:start="43:43" pos:end="43:43">+</operator> <operator pos:start="43:45" pos:end="43:45">(</operator><name pos:start="43:46" pos:end="43:46">i</name> <operator pos:start="43:48" pos:end="43:49">&gt;&gt;</operator> <literal type="number" pos:start="43:51" pos:end="43:51">1</literal><operator pos:start="43:52" pos:end="43:52">)</operator> <operator pos:start="43:54" pos:end="43:54">*</operator> <literal type="number" pos:start="43:56" pos:end="43:62">0x100</literal> <operator pos:start="43:62" pos:end="43:62">+</operator> <operator pos:start="43:64" pos:end="43:64">(</operator><name pos:start="43:65" pos:end="43:65">i</name> <operator pos:start="43:67" pos:end="43:67">&amp;</operator> <literal type="number" pos:start="43:69" pos:end="43:69">1</literal><operator pos:start="43:70" pos:end="43:70">)</operator> <operator pos:start="43:72" pos:end="43:72">*</operator> <literal type="number" pos:start="43:74" pos:end="43:77">0x20</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="45:9" pos:end="47:71"><expr pos:start="45:9" pos:end="47:70"><call pos:start="45:9" pos:end="47:70"><name pos:start="45:9" pos:end="45:35">memory_region_add_subregion</name><argument_list pos:start="45:36" pos:end="47:70">(<argument pos:start="45:37" pos:end="45:49"><expr pos:start="45:37" pos:end="45:49"><operator pos:start="45:37" pos:end="45:37">&amp;</operator><name pos:start="45:38" pos:end="45:49"><name pos:start="45:38" pos:end="45:38">s</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:49">container</name></name></expr></argument>, <argument pos:start="45:52" pos:end="45:57"><expr pos:start="45:52" pos:end="45:57"><name pos:start="45:52" pos:end="45:57">offset</name></expr></argument>,

                                    <argument pos:start="47:37" pos:end="47:69"><expr pos:start="47:37" pos:end="47:69"><call pos:start="47:37" pos:end="47:69"><name pos:start="47:37" pos:end="47:58">sysbus_mmio_get_region</name><argument_list pos:start="47:59" pos:end="47:69">(<argument pos:start="47:60" pos:end="47:65"><expr pos:start="47:60" pos:end="47:65"><name pos:start="47:60" pos:end="47:65">busdev</name></expr></argument>, <argument pos:start="47:68" pos:end="47:68"><expr pos:start="47:68" pos:end="47:68"><name pos:start="47:68" pos:end="47:68">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="51:5" pos:end="53:70"><expr pos:start="51:5" pos:end="53:69"><call pos:start="51:5" pos:end="53:69"><name pos:start="51:5" pos:end="51:31">memory_region_add_subregion</name><argument_list pos:start="51:32" pos:end="53:69">(<argument pos:start="51:33" pos:end="51:45"><expr pos:start="51:33" pos:end="51:45"><operator pos:start="51:33" pos:end="51:33">&amp;</operator><name pos:start="51:34" pos:end="51:45"><name pos:start="51:34" pos:end="51:34">s</name><operator pos:start="51:35" pos:end="51:36">-&gt;</operator><name pos:start="51:37" pos:end="51:45">container</name></name></expr></argument>, <argument pos:start="51:48" pos:end="51:53"><expr pos:start="51:48" pos:end="51:53"><literal type="number" pos:start="51:48" pos:end="51:53">0x1000</literal></expr></argument>,

                                <argument pos:start="53:33" pos:end="53:68"><expr pos:start="53:33" pos:end="53:68"><call pos:start="53:33" pos:end="53:68"><name pos:start="53:33" pos:end="53:54">sysbus_mmio_get_region</name><argument_list pos:start="53:55" pos:end="53:68">(<argument pos:start="53:56" pos:end="53:64"><expr pos:start="53:56" pos:end="53:64"><name pos:start="53:56" pos:end="53:64">gicbusdev</name></expr></argument>, <argument pos:start="53:67" pos:end="53:67"><expr pos:start="53:67" pos:end="53:67"><literal type="number" pos:start="53:67" pos:end="53:67">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="55:5" pos:end="59:7">/* Wire up the interrupt from each watchdog and timer.

     * For each core the timer is PPI 29 and the watchdog PPI 30.

     */</comment>

    <for pos:start="61:5" pos:end="73:5">for <control pos:start="61:9" pos:end="61:36">(<init pos:start="61:10" pos:end="61:15"><expr pos:start="61:10" pos:end="61:14"><name pos:start="61:10" pos:end="61:10">i</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>;</init> <condition pos:start="61:17" pos:end="61:31"><expr pos:start="61:17" pos:end="61:30"><name pos:start="61:17" pos:end="61:17">i</name> <operator pos:start="61:19" pos:end="61:19">&lt;</operator> <name pos:start="61:21" pos:end="61:30"><name pos:start="61:21" pos:end="61:21">s</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:30">num_cpu</name></name></expr>;</condition> <incr pos:start="61:33" pos:end="61:35"><expr pos:start="61:33" pos:end="61:35"><name pos:start="61:33" pos:end="61:33">i</name><operator pos:start="61:34" pos:end="61:35">++</operator></expr></incr>)</control> <block pos:start="61:38" pos:end="73:5">{<block_content pos:start="63:9" pos:end="71:67">

        <decl_stmt pos:start="63:9" pos:end="63:49"><decl pos:start="63:9" pos:end="63:48"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:19">ppibase</name> <init pos:start="63:21" pos:end="63:48">= <expr pos:start="63:23" pos:end="63:48"><operator pos:start="63:23" pos:end="63:23">(</operator><name pos:start="63:24" pos:end="63:33"><name pos:start="63:24" pos:end="63:24">s</name><operator pos:start="63:25" pos:end="63:26">-&gt;</operator><name pos:start="63:27" pos:end="63:33">num_irq</name></name> <operator pos:start="63:35" pos:end="63:35">-</operator> <literal type="number" pos:start="63:37" pos:end="63:38">32</literal><operator pos:start="63:39" pos:end="63:39">)</operator> <operator pos:start="63:41" pos:end="63:41">+</operator> <name pos:start="63:43" pos:end="63:43">i</name> <operator pos:start="63:45" pos:end="63:45">*</operator> <literal type="number" pos:start="63:47" pos:end="63:48">32</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="65:9" pos:end="67:67"><expr pos:start="65:9" pos:end="67:66"><call pos:start="65:9" pos:end="67:66"><name pos:start="65:9" pos:end="65:26">sysbus_connect_irq</name><argument_list pos:start="65:27" pos:end="67:66">(<argument pos:start="65:28" pos:end="65:33"><expr pos:start="65:28" pos:end="65:33"><name pos:start="65:28" pos:end="65:33">busdev</name></expr></argument>, <argument pos:start="65:36" pos:end="65:40"><expr pos:start="65:36" pos:end="65:40"><name pos:start="65:36" pos:end="65:36">i</name> <operator pos:start="65:38" pos:end="65:38">*</operator> <literal type="number" pos:start="65:40" pos:end="65:40">2</literal></expr></argument>,

                           <argument pos:start="67:28" pos:end="67:65"><expr pos:start="67:28" pos:end="67:65"><call pos:start="67:28" pos:end="67:65"><name pos:start="67:28" pos:end="67:43">qdev_get_gpio_in</name><argument_list pos:start="67:44" pos:end="67:65">(<argument pos:start="67:45" pos:end="67:50"><expr pos:start="67:45" pos:end="67:50"><name pos:start="67:45" pos:end="67:50"><name pos:start="67:45" pos:end="67:45">s</name><operator pos:start="67:46" pos:end="67:47">-&gt;</operator><name pos:start="67:48" pos:end="67:50">gic</name></name></expr></argument>, <argument pos:start="67:53" pos:end="67:64"><expr pos:start="67:53" pos:end="67:64"><name pos:start="67:53" pos:end="67:59">ppibase</name> <operator pos:start="67:61" pos:end="67:61">+</operator> <literal type="number" pos:start="67:63" pos:end="67:64">29</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="71:67"><expr pos:start="69:9" pos:end="71:66"><call pos:start="69:9" pos:end="71:66"><name pos:start="69:9" pos:end="69:26">sysbus_connect_irq</name><argument_list pos:start="69:27" pos:end="71:66">(<argument pos:start="69:28" pos:end="69:33"><expr pos:start="69:28" pos:end="69:33"><name pos:start="69:28" pos:end="69:33">busdev</name></expr></argument>, <argument pos:start="69:36" pos:end="69:44"><expr pos:start="69:36" pos:end="69:44"><name pos:start="69:36" pos:end="69:36">i</name> <operator pos:start="69:38" pos:end="69:38">*</operator> <literal type="number" pos:start="69:40" pos:end="69:42">2</literal> <operator pos:start="69:42" pos:end="69:42">+</operator> <literal type="number" pos:start="69:44" pos:end="69:44">1</literal></expr></argument>,

                           <argument pos:start="71:28" pos:end="71:65"><expr pos:start="71:28" pos:end="71:65"><call pos:start="71:28" pos:end="71:65"><name pos:start="71:28" pos:end="71:43">qdev_get_gpio_in</name><argument_list pos:start="71:44" pos:end="71:65">(<argument pos:start="71:45" pos:end="71:50"><expr pos:start="71:45" pos:end="71:50"><name pos:start="71:45" pos:end="71:50"><name pos:start="71:45" pos:end="71:45">s</name><operator pos:start="71:46" pos:end="71:47">-&gt;</operator><name pos:start="71:48" pos:end="71:50">gic</name></name></expr></argument>, <argument pos:start="71:53" pos:end="71:64"><expr pos:start="71:53" pos:end="71:64"><name pos:start="71:53" pos:end="71:59">ppibase</name> <operator pos:start="71:61" pos:end="71:61">+</operator> <literal type="number" pos:start="71:63" pos:end="71:64">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
