<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7789.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">main_loop_wait</name><parameter_list pos:start="1:19" pos:end="1:35">(<parameter pos:start="1:20" pos:end="1:34"><decl pos:start="1:20" pos:end="1:34"><type pos:start="1:20" pos:end="1:22"><name pos:start="1:20" pos:end="1:22">int</name></type> <name pos:start="1:24" pos:end="1:34">nonblocking</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:15">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:20">timeout</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33">UINT32_MAX</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:22">timeout_ns</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:20">(<expr pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:19">nonblocking</name></expr>)</condition> <block pos:start="13:22" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:20">

        <expr_stmt pos:start="15:9" pos:end="15:20"><expr pos:start="15:9" pos:end="15:19"><name pos:start="15:9" pos:end="15:15">timeout</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:25">/* poll any events */</comment>

    <expr_stmt pos:start="23:5" pos:end="28:0"><expr pos:start="23:5" pos:end="23:33"><call pos:start="23:5" pos:end="23:33"><name pos:start="23:5" pos:end="23:20">g_array_set_size</name><argument_list pos:start="23:21" pos:end="23:33">(<argument pos:start="23:22" pos:end="23:29"><expr pos:start="23:22" pos:end="23:29"><name pos:start="23:22" pos:end="23:29">gpollfds</name></expr></argument>, <argument pos:start="23:32" pos:end="23:32"><expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="23:36" pos:end="23:64">/* reset for new iteration */</comment>

    <comment type="block" pos:start="25:5" pos:end="25:56">/* XXX: separate device handlers from system ones */</comment>

<cpp:ifdef pos:start="27:1" pos:end="27:19">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:19">CONFIG_SLIRP</name></cpp:ifdef>

    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:42"><call pos:start="29:5" pos:end="29:42"><name pos:start="29:5" pos:end="29:22">slirp_pollfds_fill</name><argument_list pos:start="29:23" pos:end="29:42">(<argument pos:start="29:24" pos:end="29:31"><expr pos:start="29:24" pos:end="29:31"><name pos:start="29:24" pos:end="29:31">gpollfds</name></expr></argument>, <argument pos:start="29:34" pos:end="29:41"><expr pos:start="29:34" pos:end="29:41"><operator pos:start="29:34" pos:end="29:34">&amp;</operator><name pos:start="29:35" pos:end="29:41">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:30">(<expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:15">timeout</name> <operator pos:start="35:17" pos:end="35:18">==</operator> <name pos:start="35:20" pos:end="35:29">UINT32_MAX</name></expr>)</condition> <block pos:start="35:32" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:24">

        <expr_stmt pos:start="37:9" pos:end="37:24"><expr pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:18">timeout_ns</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <operator pos:start="37:22" pos:end="37:22">-</operator><literal type="number" pos:start="37:23" pos:end="37:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="43:5">else <block pos:start="39:12" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:61">

        <expr_stmt pos:start="41:9" pos:end="41:61"><expr pos:start="41:9" pos:end="41:60"><name pos:start="41:9" pos:end="41:18">timeout_ns</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <operator pos:start="41:22" pos:end="41:22">(</operator><name pos:start="41:23" pos:end="41:30">uint64_t</name><operator pos:start="41:31" pos:end="41:31">)</operator><name pos:start="41:32" pos:end="41:38">timeout</name> <operator pos:start="41:40" pos:end="41:40">*</operator> <operator pos:start="41:42" pos:end="41:42">(</operator><name pos:start="41:43" pos:end="41:49">int64_t</name><operator pos:start="41:50" pos:end="41:50">)</operator><operator pos:start="41:51" pos:end="41:51">(</operator><name pos:start="41:52" pos:end="41:59">SCALE_MS</name><operator pos:start="41:60" pos:end="41:60">)</operator></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="51:59"><expr pos:start="47:5" pos:end="51:58"><name pos:start="47:5" pos:end="47:14">timeout_ns</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <call pos:start="47:18" pos:end="51:58"><name pos:start="47:18" pos:end="47:37">qemu_soonest_timeout</name><argument_list pos:start="47:38" pos:end="51:58">(<argument pos:start="47:39" pos:end="47:48"><expr pos:start="47:39" pos:end="47:48"><name pos:start="47:39" pos:end="47:48">timeout_ns</name></expr></argument>,

                                      <argument pos:start="49:39" pos:end="51:57"><expr pos:start="49:39" pos:end="51:57"><call pos:start="49:39" pos:end="51:57"><name pos:start="49:39" pos:end="49:64">timerlistgroup_deadline_ns</name><argument_list pos:start="49:65" pos:end="51:57">(

                                          <argument pos:start="51:43" pos:end="51:56"><expr pos:start="51:43" pos:end="51:56"><operator pos:start="51:43" pos:end="51:43">&amp;</operator><name pos:start="51:44" pos:end="51:56">main_loop_tlg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="58:0"><expr pos:start="55:5" pos:end="55:44"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:44"><name pos:start="55:11" pos:end="55:32">os_host_main_loop_wait</name><argument_list pos:start="55:33" pos:end="55:44">(<argument pos:start="55:34" pos:end="55:43"><expr pos:start="55:34" pos:end="55:43"><name pos:start="55:34" pos:end="55:43">timeout_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="57:1" pos:end="57:19">#<cpp:directive pos:start="57:2" pos:end="57:6">ifdef</cpp:directive> <name pos:start="57:8" pos:end="57:19">CONFIG_SLIRP</name></cpp:ifdef>

    <expr_stmt pos:start="59:5" pos:end="62:0"><expr pos:start="59:5" pos:end="59:43"><call pos:start="59:5" pos:end="59:43"><name pos:start="59:5" pos:end="59:22">slirp_pollfds_poll</name><argument_list pos:start="59:23" pos:end="59:43">(<argument pos:start="59:24" pos:end="59:31"><expr pos:start="59:24" pos:end="59:31"><name pos:start="59:24" pos:end="59:31">gpollfds</name></expr></argument>, <argument pos:start="59:34" pos:end="59:42"><expr pos:start="59:34" pos:end="59:42"><operator pos:start="59:34" pos:end="59:34">(</operator><name pos:start="59:35" pos:end="59:37">ret</name> <operator pos:start="59:39" pos:end="59:39">&lt;</operator> <literal type="number" pos:start="59:41" pos:end="59:41">0</literal><operator pos:start="59:42" pos:end="59:42">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="65:5" pos:end="67:26">/* CPU thread can infinitely wait for event after

       missing the warp */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:28"><expr pos:start="69:5" pos:end="69:27"><call pos:start="69:5" pos:end="69:27"><name pos:start="69:5" pos:end="69:25">qemu_start_warp_timer</name><argument_list pos:start="69:26" pos:end="69:27">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:32"><expr pos:start="71:5" pos:end="71:31"><call pos:start="71:5" pos:end="71:31"><name pos:start="71:5" pos:end="71:29">qemu_clock_run_all_timers</name><argument_list pos:start="71:30" pos:end="71:31">()</argument_list></call></expr>;</expr_stmt>



    <return pos:start="75:5" pos:end="75:15">return <expr pos:start="75:12" pos:end="75:14"><name pos:start="75:12" pos:end="75:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
