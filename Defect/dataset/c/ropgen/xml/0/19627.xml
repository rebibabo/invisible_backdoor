<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19627.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">compand_delay</name><parameter_list pos:start="1:25" pos:end="1:62">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:40">AVFilterContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">ctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:54">AVFrame</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">frame</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="5:5" pos:end="117:71">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">CompandContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name>    <init pos:start="5:26" pos:end="5:36">= <expr pos:start="5:28" pos:end="5:36"><name pos:start="5:28" pos:end="5:36"><name pos:start="5:28" pos:end="5:30">ctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:36">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">AVFilterLink</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:24">inlink</name> <init pos:start="7:26" pos:end="7:41">= <expr pos:start="7:28" pos:end="7:41"><name pos:start="7:28" pos:end="7:41"><name pos:start="7:28" pos:end="7:30">ctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:38">inputs</name><index pos:start="7:39" pos:end="7:41">[<expr pos:start="7:40" pos:end="7:40"><literal type="number" pos:start="7:40" pos:end="7:40">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:13"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">int</name></type> <name pos:start="9:15" pos:end="9:22">channels</name> <init pos:start="9:24" pos:end="9:41">= <expr pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:31">inlink</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:41">channels</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:13"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:13">int</name></type> <name pos:start="11:15" pos:end="11:24">nb_samples</name> <init pos:start="11:26" pos:end="11:44">= <expr pos:start="11:28" pos:end="11:44"><name pos:start="11:28" pos:end="11:44"><name pos:start="11:28" pos:end="11:32">frame</name><operator pos:start="11:33" pos:end="11:34">-&gt;</operator><name pos:start="11:35" pos:end="11:44">nb_samples</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:61"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">chan</name></decl>, <decl pos:start="13:15" pos:end="13:15"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:15">i</name></decl>, <decl pos:start="13:18" pos:end="13:34"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:26">av_uninit</name><argument_list pos:start="13:27" pos:end="13:34">(<argument pos:start="13:28" pos:end="13:33"><expr pos:start="13:28" pos:end="13:33"><name pos:start="13:28" pos:end="13:33">dindex</name></expr></argument>)</argument_list></decl>, <decl pos:start="13:37" pos:end="13:42"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:37" pos:end="13:42">oindex</name></decl>, <decl pos:start="13:45" pos:end="13:60"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:45" pos:end="13:53">av_uninit</name><argument_list pos:start="13:54" pos:end="13:60">(<argument pos:start="13:55" pos:end="13:59"><expr pos:start="13:55" pos:end="13:59"><name pos:start="13:55" pos:end="13:59">count</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">AVFrame</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:22">out_frame</name>   <init pos:start="15:26" pos:end="15:31">= <expr pos:start="15:28" pos:end="15:31"><name pos:start="15:28" pos:end="15:31">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:33">(<expr pos:start="19:9" pos:end="19:32"><name pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:14">pts</name></name> <operator pos:start="19:16" pos:end="19:17">==</operator> <name pos:start="19:19" pos:end="19:32">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="19:35" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:65">

        <expr_stmt pos:start="21:9" pos:end="21:65"><expr pos:start="21:9" pos:end="21:64"><name pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:14">pts</name></name> <operator pos:start="21:16" pos:end="21:16">=</operator> <ternary pos:start="21:18" pos:end="21:64"><condition pos:start="21:18" pos:end="21:49"><expr pos:start="21:18" pos:end="21:47"><operator pos:start="21:18" pos:end="21:18">(</operator><name pos:start="21:19" pos:end="21:28"><name pos:start="21:19" pos:end="21:23">frame</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:28">pts</name></name> <operator pos:start="21:30" pos:end="21:31">==</operator> <name pos:start="21:33" pos:end="21:46">AV_NOPTS_VALUE</name><operator pos:start="21:47" pos:end="21:47">)</operator></expr> ?</condition><then pos:start="21:51" pos:end="21:51"> <expr pos:start="21:51" pos:end="21:51"><literal type="number" pos:start="21:51" pos:end="21:51">0</literal></expr> </then><else pos:start="21:53" pos:end="21:64">: <expr pos:start="21:55" pos:end="21:64"><name pos:start="21:55" pos:end="21:64"><name pos:start="21:55" pos:end="21:59">frame</name><operator pos:start="21:60" pos:end="21:61">-&gt;</operator><name pos:start="21:62" pos:end="21:64">pts</name></name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><call pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:14">av_assert1</name><argument_list pos:start="27:15" pos:end="27:28">(<argument pos:start="27:16" pos:end="27:27"><expr pos:start="27:16" pos:end="27:27"><name pos:start="27:16" pos:end="27:23">channels</name> <operator pos:start="27:25" pos:end="27:25">&gt;</operator> <literal type="number" pos:start="27:27" pos:end="27:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="27:31" pos:end="27:77">/* would corrupt delay_count and delay_index */</comment>



    <for pos:start="31:5" pos:end="105:5">for <control pos:start="31:9" pos:end="31:43">(<init pos:start="31:10" pos:end="31:18"><expr pos:start="31:10" pos:end="31:17"><name pos:start="31:10" pos:end="31:13">chan</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <literal type="number" pos:start="31:17" pos:end="31:17">0</literal></expr>;</init> <condition pos:start="31:20" pos:end="31:35"><expr pos:start="31:20" pos:end="31:34"><name pos:start="31:20" pos:end="31:23">chan</name> <operator pos:start="31:25" pos:end="31:25">&lt;</operator> <name pos:start="31:27" pos:end="31:34">channels</name></expr>;</condition> <incr pos:start="31:37" pos:end="31:42"><expr pos:start="31:37" pos:end="31:42"><name pos:start="31:37" pos:end="31:40">chan</name><operator pos:start="31:41" pos:end="31:42">++</operator></expr></incr>)</control> <block pos:start="31:45" pos:end="105:5">{<block_content pos:start="33:9" pos:end="103:9">

        <decl_stmt pos:start="33:9" pos:end="33:46"><decl pos:start="33:9" pos:end="33:45"><type pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:15">AVFrame</name> <modifier pos:start="33:17" pos:end="33:17">*</modifier></type><name pos:start="33:18" pos:end="33:28">delay_frame</name> <init pos:start="33:30" pos:end="33:45">= <expr pos:start="33:32" pos:end="33:45"><name pos:start="33:32" pos:end="33:45"><name pos:start="33:32" pos:end="33:32">s</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:45">delay_frame</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:65"><decl pos:start="35:9" pos:end="35:64"><type pos:start="35:9" pos:end="35:22"><specifier pos:start="35:9" pos:end="35:13">const</specifier> <name pos:start="35:15" pos:end="35:20">double</name> <modifier pos:start="35:22" pos:end="35:22">*</modifier></type><name pos:start="35:23" pos:end="35:25">src</name> <init pos:start="35:27" pos:end="35:64">= <expr pos:start="35:29" pos:end="35:64"><operator pos:start="35:29" pos:end="35:29">(</operator><name pos:start="35:30" pos:end="35:35">double</name> <operator pos:start="35:37" pos:end="35:37">*</operator><operator pos:start="35:38" pos:end="35:38">)</operator><name pos:start="35:39" pos:end="35:64"><name pos:start="35:39" pos:end="35:43">frame</name><operator pos:start="35:44" pos:end="35:45">-&gt;</operator><name pos:start="35:46" pos:end="35:58">extended_data</name><index pos:start="35:59" pos:end="35:64">[<expr pos:start="35:60" pos:end="35:63"><name pos:start="35:60" pos:end="35:63">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:71"><decl pos:start="37:9" pos:end="37:70"><type pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:14">double</name> <modifier pos:start="37:16" pos:end="37:16">*</modifier></type><name pos:start="37:17" pos:end="37:20">dbuf</name>      <init pos:start="37:27" pos:end="37:70">= <expr pos:start="37:29" pos:end="37:70"><operator pos:start="37:29" pos:end="37:29">(</operator><name pos:start="37:30" pos:end="37:35">double</name> <operator pos:start="37:37" pos:end="37:37">*</operator><operator pos:start="37:38" pos:end="37:38">)</operator><name pos:start="37:39" pos:end="37:70"><name pos:start="37:39" pos:end="37:49">delay_frame</name><operator pos:start="37:50" pos:end="37:51">-&gt;</operator><name pos:start="37:52" pos:end="37:64">extended_data</name><index pos:start="37:65" pos:end="37:70">[<expr pos:start="37:66" pos:end="37:69"><name pos:start="37:66" pos:end="37:69">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:50"><decl pos:start="39:9" pos:end="39:49"><type pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:17">ChanParam</name> <modifier pos:start="39:19" pos:end="39:19">*</modifier></type><name pos:start="39:20" pos:end="39:21">cp</name>        <init pos:start="39:30" pos:end="39:49">= <expr pos:start="39:32" pos:end="39:49"><operator pos:start="39:32" pos:end="39:32">&amp;</operator><name pos:start="39:33" pos:end="39:49"><name pos:start="39:33" pos:end="39:33">s</name><operator pos:start="39:34" pos:end="39:35">-&gt;</operator><name pos:start="39:36" pos:end="39:43">channels</name><index pos:start="39:44" pos:end="39:49">[<expr pos:start="39:45" pos:end="39:48"><name pos:start="39:45" pos:end="39:48">chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:20"><decl pos:start="41:9" pos:end="41:19"><type pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:14">double</name> <modifier pos:start="41:16" pos:end="41:16">*</modifier></type><name pos:start="41:17" pos:end="41:19">dst</name></decl>;</decl_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:32"><expr pos:start="45:9" pos:end="45:31"><name pos:start="45:9" pos:end="45:13">count</name>  <operator pos:start="45:16" pos:end="45:16">=</operator> <name pos:start="45:18" pos:end="45:31"><name pos:start="45:18" pos:end="45:18">s</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:31">delay_count</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:32"><expr pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:14">dindex</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:31"><name pos:start="47:18" pos:end="47:18">s</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:31">delay_index</name></name></expr>;</expr_stmt>

        <for pos:start="49:9" pos:end="103:9">for <control pos:start="49:13" pos:end="49:52">(<init pos:start="49:14" pos:end="49:31"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">i</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr><operator pos:start="49:19" pos:end="49:19">,</operator> <expr pos:start="49:21" pos:end="49:30"><name pos:start="49:21" pos:end="49:26">oindex</name> <operator pos:start="49:28" pos:end="49:28">=</operator> <literal type="number" pos:start="49:30" pos:end="49:30">0</literal></expr>;</init> <condition pos:start="49:33" pos:end="49:47"><expr pos:start="49:33" pos:end="49:46"><name pos:start="49:33" pos:end="49:33">i</name> <operator pos:start="49:35" pos:end="49:35">&lt;</operator> <name pos:start="49:37" pos:end="49:46">nb_samples</name></expr>;</condition> <incr pos:start="49:49" pos:end="49:51"><expr pos:start="49:49" pos:end="49:51"><name pos:start="49:49" pos:end="49:49">i</name><operator pos:start="49:50" pos:end="49:51">++</operator></expr></incr>)</control> <block pos:start="49:54" pos:end="103:9">{<block_content pos:start="51:13" pos:end="101:55">

            <decl_stmt pos:start="51:13" pos:end="51:37"><decl pos:start="51:13" pos:end="51:36"><type pos:start="51:13" pos:end="51:24"><specifier pos:start="51:13" pos:end="51:17">const</specifier> <name pos:start="51:19" pos:end="51:24">double</name></type> <name pos:start="51:26" pos:end="51:27">in</name> <init pos:start="51:29" pos:end="51:36">= <expr pos:start="51:31" pos:end="51:36"><name pos:start="51:31" pos:end="51:36"><name pos:start="51:31" pos:end="51:33">src</name><index pos:start="51:34" pos:end="51:36">[<expr pos:start="51:35" pos:end="51:35"><name pos:start="51:35" pos:end="51:35">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:40"><expr pos:start="53:13" pos:end="53:39"><call pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:25">update_volume</name><argument_list pos:start="53:26" pos:end="53:39">(<argument pos:start="53:27" pos:end="53:28"><expr pos:start="53:27" pos:end="53:28"><name pos:start="53:27" pos:end="53:28">cp</name></expr></argument>, <argument pos:start="53:31" pos:end="53:38"><expr pos:start="53:31" pos:end="53:38"><call pos:start="53:31" pos:end="53:38"><name pos:start="53:31" pos:end="53:34">fabs</name><argument_list pos:start="53:35" pos:end="53:38">(<argument pos:start="53:36" pos:end="53:37"><expr pos:start="53:36" pos:end="53:37"><name pos:start="53:36" pos:end="53:37">in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="57:13" pos:end="95:13"><if pos:start="57:13" pos:end="91:13">if <condition pos:start="57:16" pos:end="57:42">(<expr pos:start="57:17" pos:end="57:41"><name pos:start="57:17" pos:end="57:21">count</name> <operator pos:start="57:23" pos:end="57:24">&gt;=</operator> <name pos:start="57:26" pos:end="57:41"><name pos:start="57:26" pos:end="57:26">s</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:41">delay_samples</name></name></expr>)</condition> <block pos:start="57:44" pos:end="91:13">{<block_content pos:start="59:17" pos:end="89:58">

                <if_stmt pos:start="59:17" pos:end="81:17"><if pos:start="59:17" pos:end="81:17">if <condition pos:start="59:20" pos:end="59:31">(<expr pos:start="59:21" pos:end="59:30"><operator pos:start="59:21" pos:end="59:21">!</operator><name pos:start="59:22" pos:end="59:30">out_frame</name></expr>)</condition> <block pos:start="59:33" pos:end="81:17">{<block_content pos:start="61:21" pos:end="79:43">

                    <expr_stmt pos:start="61:21" pos:end="61:76"><expr pos:start="61:21" pos:end="61:75"><name pos:start="61:21" pos:end="61:29">out_frame</name> <operator pos:start="61:31" pos:end="61:31">=</operator> <call pos:start="61:33" pos:end="61:75"><name pos:start="61:33" pos:end="61:51">ff_get_audio_buffer</name><argument_list pos:start="61:52" pos:end="61:75">(<argument pos:start="61:53" pos:end="61:58"><expr pos:start="61:53" pos:end="61:58"><name pos:start="61:53" pos:end="61:58">inlink</name></expr></argument>, <argument pos:start="61:61" pos:end="61:74"><expr pos:start="61:61" pos:end="61:74"><name pos:start="61:61" pos:end="61:70">nb_samples</name> <operator pos:start="61:72" pos:end="61:72">-</operator> <name pos:start="61:74" pos:end="61:74">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="63:21" pos:end="69:21"><if pos:start="63:21" pos:end="69:21">if <condition pos:start="63:24" pos:end="63:35">(<expr pos:start="63:25" pos:end="63:34"><operator pos:start="63:25" pos:end="63:25">!</operator><name pos:start="63:26" pos:end="63:34">out_frame</name></expr>)</condition> <block pos:start="63:37" pos:end="69:21">{<block_content pos:start="65:25" pos:end="67:47">

                        <expr_stmt pos:start="65:25" pos:end="65:46"><expr pos:start="65:25" pos:end="65:45"><call pos:start="65:25" pos:end="65:45"><name pos:start="65:25" pos:end="65:37">av_frame_free</name><argument_list pos:start="65:38" pos:end="65:45">(<argument pos:start="65:39" pos:end="65:44"><expr pos:start="65:39" pos:end="65:44"><operator pos:start="65:39" pos:end="65:39">&amp;</operator><name pos:start="65:40" pos:end="65:44">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="67:25" pos:end="67:47">return <expr pos:start="67:32" pos:end="67:46"><call pos:start="67:32" pos:end="67:46"><name pos:start="67:32" pos:end="67:38">AVERROR</name><argument_list pos:start="67:39" pos:end="67:46">(<argument pos:start="67:40" pos:end="67:45"><expr pos:start="67:40" pos:end="67:45"><name pos:start="67:40" pos:end="67:45">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="71:21" pos:end="71:58"><expr pos:start="71:21" pos:end="71:57"><call pos:start="71:21" pos:end="71:57"><name pos:start="71:21" pos:end="71:39">av_frame_copy_props</name><argument_list pos:start="71:40" pos:end="71:57">(<argument pos:start="71:41" pos:end="71:49"><expr pos:start="71:41" pos:end="71:49"><name pos:start="71:41" pos:end="71:49">out_frame</name></expr></argument>, <argument pos:start="71:52" pos:end="71:56"><expr pos:start="71:52" pos:end="71:56"><name pos:start="71:52" pos:end="71:56">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="73:21" pos:end="73:44"><expr pos:start="73:21" pos:end="73:43"><name pos:start="73:21" pos:end="73:34"><name pos:start="73:21" pos:end="73:29">out_frame</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:34">pts</name></name> <operator pos:start="73:36" pos:end="73:36">=</operator> <name pos:start="73:38" pos:end="73:43"><name pos:start="73:38" pos:end="73:38">s</name><operator pos:start="73:39" pos:end="73:40">-&gt;</operator><name pos:start="73:41" pos:end="73:43">pts</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="75:21" pos:end="79:43"><expr pos:start="75:21" pos:end="79:42"><name pos:start="75:21" pos:end="75:26"><name pos:start="75:21" pos:end="75:21">s</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:26">pts</name></name> <operator pos:start="75:28" pos:end="75:29">+=</operator> <macro pos:start="75:31" pos:end="79:42"><name pos:start="75:31" pos:end="75:42">av_rescale_q</name><argument_list pos:start="75:43" pos:end="79:42">(<argument pos:start="75:44" pos:end="75:57">nb_samples - i</argument>,

                        <argument pos:start="77:25" pos:end="77:39">(AVRational){ <literal type="number" pos:start="77:39" pos:end="77:39">1</literal></argument>, <argument pos:start="77:42" pos:end="77:62">inlink-&gt;sample_rate }</argument>,

                        <argument pos:start="79:25" pos:end="79:41">inlink-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="85:17" pos:end="85:63"><expr pos:start="85:17" pos:end="85:62"><name pos:start="85:17" pos:end="85:19">dst</name> <operator pos:start="85:21" pos:end="85:21">=</operator> <operator pos:start="85:23" pos:end="85:23">(</operator><name pos:start="85:24" pos:end="85:29">double</name> <operator pos:start="85:31" pos:end="85:31">*</operator><operator pos:start="85:32" pos:end="85:32">)</operator><name pos:start="85:33" pos:end="85:62"><name pos:start="85:33" pos:end="85:41">out_frame</name><operator pos:start="85:42" pos:end="85:43">-&gt;</operator><name pos:start="85:44" pos:end="85:56">extended_data</name><index pos:start="85:57" pos:end="85:62">[<expr pos:start="85:58" pos:end="85:61"><name pos:start="85:58" pos:end="85:61">chan</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="87:17" pos:end="89:58"><expr pos:start="87:17" pos:end="89:57"><name pos:start="87:17" pos:end="87:29"><name pos:start="87:17" pos:end="87:19">dst</name><index pos:start="87:20" pos:end="87:29">[<expr pos:start="87:21" pos:end="87:28"><name pos:start="87:21" pos:end="87:26">oindex</name><operator pos:start="87:27" pos:end="87:28">++</operator></expr>]</index></name> <operator pos:start="87:31" pos:end="87:31">=</operator> <call pos:start="87:33" pos:end="89:57"><name pos:start="87:33" pos:end="87:40">av_clipd</name><argument_list pos:start="87:41" pos:end="89:57">(<argument pos:start="87:42" pos:end="89:49"><expr pos:start="87:42" pos:end="89:49"><name pos:start="87:42" pos:end="87:53"><name pos:start="87:42" pos:end="87:45">dbuf</name><index pos:start="87:46" pos:end="87:53">[<expr pos:start="87:47" pos:end="87:52"><name pos:start="87:47" pos:end="87:52">dindex</name></expr>]</index></name> <operator pos:start="87:55" pos:end="87:55">*</operator>

                        <call pos:start="89:25" pos:end="89:49"><name pos:start="89:25" pos:end="89:34">get_volume</name><argument_list pos:start="89:35" pos:end="89:49">(<argument pos:start="89:36" pos:end="89:36"><expr pos:start="89:36" pos:end="89:36"><name pos:start="89:36" pos:end="89:36">s</name></expr></argument>, <argument pos:start="89:39" pos:end="89:48"><expr pos:start="89:39" pos:end="89:48"><name pos:start="89:39" pos:end="89:48"><name pos:start="89:39" pos:end="89:40">cp</name><operator pos:start="89:41" pos:end="89:42">-&gt;</operator><name pos:start="89:43" pos:end="89:48">volume</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="89:52" pos:end="89:53"><expr pos:start="89:52" pos:end="89:53"><operator pos:start="89:52" pos:end="89:52">-</operator><literal type="number" pos:start="89:53" pos:end="89:53">1</literal></expr></argument>, <argument pos:start="89:56" pos:end="89:56"><expr pos:start="89:56" pos:end="89:56"><literal type="number" pos:start="89:56" pos:end="89:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="91:15" pos:end="95:13">else <block pos:start="91:20" pos:end="95:13">{<block_content pos:start="93:17" pos:end="93:24">

                <expr_stmt pos:start="93:17" pos:end="93:24"><expr pos:start="93:17" pos:end="93:23"><name pos:start="93:17" pos:end="93:21">count</name><operator pos:start="93:22" pos:end="93:23">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="99:13" pos:end="99:30"><expr pos:start="99:13" pos:end="99:29"><name pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:16">dbuf</name><index pos:start="99:17" pos:end="99:24">[<expr pos:start="99:18" pos:end="99:23"><name pos:start="99:18" pos:end="99:23">dindex</name></expr>]</index></name> <operator pos:start="99:26" pos:end="99:26">=</operator> <name pos:start="99:28" pos:end="99:29">in</name></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:55"><expr pos:start="101:13" pos:end="101:54"><name pos:start="101:13" pos:end="101:18">dindex</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <call pos:start="101:22" pos:end="101:54"><name pos:start="101:22" pos:end="101:24">MOD</name><argument_list pos:start="101:25" pos:end="101:54">(<argument pos:start="101:26" pos:end="101:35"><expr pos:start="101:26" pos:end="101:35"><name pos:start="101:26" pos:end="101:31">dindex</name> <operator pos:start="101:33" pos:end="101:33">+</operator> <literal type="number" pos:start="101:35" pos:end="101:35">1</literal></expr></argument>, <argument pos:start="101:38" pos:end="101:53"><expr pos:start="101:38" pos:end="101:53"><name pos:start="101:38" pos:end="101:53"><name pos:start="101:38" pos:end="101:38">s</name><operator pos:start="101:39" pos:end="101:40">-&gt;</operator><name pos:start="101:41" pos:end="101:53">delay_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="109:5" pos:end="109:27"><expr pos:start="109:5" pos:end="109:26"><name pos:start="109:5" pos:end="109:18"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:18">delay_count</name></name> <operator pos:start="109:20" pos:end="109:20">=</operator> <name pos:start="109:22" pos:end="109:26">count</name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:28"><expr pos:start="111:5" pos:end="111:27"><name pos:start="111:5" pos:end="111:18"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:18">delay_index</name></name> <operator pos:start="111:20" pos:end="111:20">=</operator> <name pos:start="111:22" pos:end="111:27">dindex</name></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:26"><expr pos:start="115:5" pos:end="115:25"><call pos:start="115:5" pos:end="115:25"><name pos:start="115:5" pos:end="115:17">av_frame_free</name><argument_list pos:start="115:18" pos:end="115:25">(<argument pos:start="115:19" pos:end="115:24"><expr pos:start="115:19" pos:end="115:24"><operator pos:start="115:19" pos:end="115:19">&amp;</operator><name pos:start="115:20" pos:end="115:24">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="117:5" pos:end="117:71">return <expr pos:start="117:12" pos:end="117:70"><ternary pos:start="117:12" pos:end="117:70"><condition pos:start="117:12" pos:end="117:22"><expr pos:start="117:12" pos:end="117:20"><name pos:start="117:12" pos:end="117:20">out_frame</name></expr> ?</condition><then pos:start="117:24" pos:end="117:66"> <expr pos:start="117:24" pos:end="117:66"><call pos:start="117:24" pos:end="117:66"><name pos:start="117:24" pos:end="117:38">ff_filter_frame</name><argument_list pos:start="117:39" pos:end="117:66">(<argument pos:start="117:40" pos:end="117:54"><expr pos:start="117:40" pos:end="117:54"><name pos:start="117:40" pos:end="117:54"><name pos:start="117:40" pos:end="117:42">ctx</name><operator pos:start="117:43" pos:end="117:44">-&gt;</operator><name pos:start="117:45" pos:end="117:51">outputs</name><index pos:start="117:52" pos:end="117:54">[<expr pos:start="117:53" pos:end="117:53"><literal type="number" pos:start="117:53" pos:end="117:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="117:57" pos:end="117:65"><expr pos:start="117:57" pos:end="117:65"><name pos:start="117:57" pos:end="117:65">out_frame</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="117:68" pos:end="117:70">: <expr pos:start="117:70" pos:end="117:70"><literal type="number" pos:start="117:70" pos:end="117:70">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
