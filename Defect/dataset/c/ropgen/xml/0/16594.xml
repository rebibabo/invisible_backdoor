<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16594.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:21">NetSocketState</name> <modifier pos:start="1:23" pos:end="1:23">*</modifier></type><name pos:start="1:24" pos:end="1:47">net_socket_fd_init_dgram</name><parameter_list pos:start="1:48" pos:end="7:73">(<parameter pos:start="1:49" pos:end="1:68"><decl pos:start="1:49" pos:end="1:68"><type pos:start="1:49" pos:end="1:68"><name pos:start="1:49" pos:end="1:62">NetClientState</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">peer</name></decl></parameter>,

                                                <parameter pos:start="3:49" pos:end="3:65"><decl pos:start="3:49" pos:end="3:65"><type pos:start="3:49" pos:end="3:65"><specifier pos:start="3:49" pos:end="3:53">const</specifier> <name pos:start="3:55" pos:end="3:58">char</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:65">model</name></decl></parameter>,

                                                <parameter pos:start="5:49" pos:end="5:64"><decl pos:start="5:49" pos:end="5:64"><type pos:start="5:49" pos:end="5:64"><specifier pos:start="5:49" pos:end="5:53">const</specifier> <name pos:start="5:55" pos:end="5:58">char</name> <modifier pos:start="5:60" pos:end="5:60">*</modifier></type><name pos:start="5:61" pos:end="5:64">name</name></decl></parameter>,

                                                <parameter pos:start="7:49" pos:end="7:54"><decl pos:start="7:49" pos:end="7:54"><type pos:start="7:49" pos:end="7:54"><name pos:start="7:49" pos:end="7:51">int</name></type> <name pos:start="7:53" pos:end="7:54">fd</name></decl></parameter>, <parameter pos:start="7:57" pos:end="7:72"><decl pos:start="7:57" pos:end="7:72"><type pos:start="7:57" pos:end="7:72"><name pos:start="7:57" pos:end="7:59">int</name></type> <name pos:start="7:61" pos:end="7:72">is_connected</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="133:1">{<block_content pos:start="11:5" pos:end="131:16">

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:22">sockaddr_in</name></name></type> <name pos:start="11:24" pos:end="11:28">saddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">newfd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:13">socklen_t</name></type> <name pos:start="15:15" pos:end="15:23">saddr_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:18">NetClientState</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:22">nc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:18">NetSocketState</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:21">s</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="29:7">/* fd passed: multicast: "learn" dgram_dst address from bound address and save it

     * Because this may be "shared" socket from a "master" process, datagrams would be recv()

     * by ONLY ONE process: we must "clone" this dgram socket --jjo

     */</comment>



    <if_stmt pos:start="33:5" pos:end="81:5"><if pos:start="33:5" pos:end="81:5">if <condition pos:start="33:8" pos:end="33:21">(<expr pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:20">is_connected</name></expr>)</condition> <block pos:start="33:23" pos:end="81:5">{<block_content pos:start="35:9" pos:end="79:9">

        <if_stmt pos:start="35:9" pos:end="79:9"><if pos:start="35:9" pos:end="69:9">if <condition pos:start="35:12" pos:end="35:73">(<expr pos:start="35:13" pos:end="35:72"><call pos:start="35:13" pos:end="35:67"><name pos:start="35:13" pos:end="35:23">getsockname</name><argument_list pos:start="35:24" pos:end="35:67">(<argument pos:start="35:25" pos:end="35:26"><expr pos:start="35:25" pos:end="35:26"><name pos:start="35:25" pos:end="35:26">fd</name></expr></argument>, <argument pos:start="35:29" pos:end="35:54"><expr pos:start="35:29" pos:end="35:54"><operator pos:start="35:29" pos:end="35:29">(</operator>struct <name pos:start="35:37" pos:end="35:44">sockaddr</name> <operator pos:start="35:46" pos:end="35:46">*</operator><operator pos:start="35:47" pos:end="35:47">)</operator> <operator pos:start="35:49" pos:end="35:49">&amp;</operator><name pos:start="35:50" pos:end="35:54">saddr</name></expr></argument>, <argument pos:start="35:57" pos:end="35:66"><expr pos:start="35:57" pos:end="35:66"><operator pos:start="35:57" pos:end="35:57">&amp;</operator><name pos:start="35:58" pos:end="35:66">saddr_len</name></expr></argument>)</argument_list></call> <operator pos:start="35:69" pos:end="35:70">==</operator> <literal type="number" pos:start="35:72" pos:end="35:72">0</literal></expr>)</condition> <block pos:start="35:75" pos:end="69:9">{<block_content pos:start="39:13" pos:end="65:25">

            <comment type="block" pos:start="37:13" pos:end="37:31">/* must be bound */</comment>

            <if_stmt pos:start="39:13" pos:end="47:13"><if pos:start="39:13" pos:end="47:13">if <condition pos:start="39:16" pos:end="39:43">(<expr pos:start="39:17" pos:end="39:42"><name pos:start="39:17" pos:end="39:37"><name pos:start="39:17" pos:end="39:21">saddr</name><operator pos:start="39:22" pos:end="39:22">.</operator><name pos:start="39:23" pos:end="39:30">sin_addr</name><operator pos:start="39:31" pos:end="39:31">.</operator><name pos:start="39:32" pos:end="39:37">s_addr</name></name> <operator pos:start="39:39" pos:end="39:40">==</operator> <literal type="number" pos:start="39:42" pos:end="39:42">0</literal></expr>)</condition> <block pos:start="39:45" pos:end="47:13">{<block_content pos:start="41:17" pos:end="45:25">

                <expr_stmt pos:start="41:17" pos:end="43:65"><expr pos:start="41:17" pos:end="43:64"><call pos:start="41:17" pos:end="43:64"><name pos:start="41:17" pos:end="41:23">fprintf</name><argument_list pos:start="41:24" pos:end="43:64">(<argument pos:start="41:25" pos:end="41:30"><expr pos:start="41:25" pos:end="41:30"><name pos:start="41:25" pos:end="41:30">stderr</name></expr></argument>, <argument pos:start="41:33" pos:end="43:59"><expr pos:start="41:33" pos:end="43:59"><literal type="string" pos:start="41:33" pos:end="41:74">"qemu: error: init_dgram: fd=%d unbound, "</literal>

                        <literal type="string" pos:start="43:25" pos:end="43:59">"cannot setup multicast dst addr\n"</literal></expr></argument>, <argument pos:start="43:62" pos:end="43:63"><expr pos:start="43:62" pos:end="43:63"><name pos:start="43:62" pos:end="43:63">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="45:17" pos:end="45:25">goto <name pos:start="45:22" pos:end="45:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="49:13" pos:end="49:36">/* clone dgram socket */</comment>

            <expr_stmt pos:start="51:13" pos:end="51:58"><expr pos:start="51:13" pos:end="51:57"><name pos:start="51:13" pos:end="51:17">newfd</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <call pos:start="51:21" pos:end="51:57"><name pos:start="51:21" pos:end="51:43">net_socket_mcast_create</name><argument_list pos:start="51:44" pos:end="51:57">(<argument pos:start="51:45" pos:end="51:50"><expr pos:start="51:45" pos:end="51:50"><operator pos:start="51:45" pos:end="51:45">&amp;</operator><name pos:start="51:46" pos:end="51:50">saddr</name></expr></argument>, <argument pos:start="51:53" pos:end="51:56"><expr pos:start="51:53" pos:end="51:56"><name pos:start="51:53" pos:end="51:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="59:13"><if pos:start="53:13" pos:end="59:13">if <condition pos:start="53:16" pos:end="53:26">(<expr pos:start="53:17" pos:end="53:25"><name pos:start="53:17" pos:end="53:21">newfd</name> <operator pos:start="53:23" pos:end="53:23">&lt;</operator> <literal type="number" pos:start="53:25" pos:end="53:25">0</literal></expr>)</condition> <block pos:start="53:28" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:25">

                <comment type="block" pos:start="55:17" pos:end="55:73">/* error already reported by net_socket_mcast_create() */</comment>

                <goto pos:start="57:17" pos:end="57:25">goto <name pos:start="57:22" pos:end="57:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="61:13" pos:end="61:48">/* clone newfd to fd, close newfd */</comment>

            <expr_stmt pos:start="63:13" pos:end="63:28"><expr pos:start="63:13" pos:end="63:27"><call pos:start="63:13" pos:end="63:27"><name pos:start="63:13" pos:end="63:16">dup2</name><argument_list pos:start="63:17" pos:end="63:27">(<argument pos:start="63:18" pos:end="63:22"><expr pos:start="63:18" pos:end="63:22"><name pos:start="63:18" pos:end="63:22">newfd</name></expr></argument>, <argument pos:start="63:25" pos:end="63:26"><expr pos:start="63:25" pos:end="63:26"><name pos:start="63:25" pos:end="63:26">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:25"><expr pos:start="65:13" pos:end="65:24"><call pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:17">close</name><argument_list pos:start="65:18" pos:end="65:24">(<argument pos:start="65:19" pos:end="65:23"><expr pos:start="65:19" pos:end="65:23"><name pos:start="65:19" pos:end="65:23">newfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="69:11" pos:end="79:9">else <block pos:start="69:16" pos:end="79:9">{<block_content pos:start="71:13" pos:end="77:21">

            <expr_stmt pos:start="71:13" pos:end="75:41"><expr pos:start="71:13" pos:end="75:40"><call pos:start="71:13" pos:end="75:40"><name pos:start="71:13" pos:end="71:19">fprintf</name><argument_list pos:start="71:20" pos:end="75:40">(<argument pos:start="71:21" pos:end="71:26"><expr pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:26">stderr</name></expr></argument>,

                    <argument pos:start="73:21" pos:end="73:79"><expr pos:start="73:21" pos:end="73:79"><literal type="string" pos:start="73:21" pos:end="73:79">"qemu: error: init_dgram: fd=%d failed getsockname(): %s\n"</literal></expr></argument>,

                    <argument pos:start="75:21" pos:end="75:22"><expr pos:start="75:21" pos:end="75:22"><name pos:start="75:21" pos:end="75:22">fd</name></expr></argument>, <argument pos:start="75:25" pos:end="75:39"><expr pos:start="75:25" pos:end="75:39"><call pos:start="75:25" pos:end="75:39"><name pos:start="75:25" pos:end="75:32">strerror</name><argument_list pos:start="75:33" pos:end="75:39">(<argument pos:start="75:34" pos:end="75:38"><expr pos:start="75:34" pos:end="75:38"><name pos:start="75:34" pos:end="75:38">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="77:13" pos:end="77:21">goto <name pos:start="77:18" pos:end="77:20">err</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:72"><expr pos:start="85:5" pos:end="85:71"><name pos:start="85:5" pos:end="85:6">nc</name> <operator pos:start="85:8" pos:end="85:8">=</operator> <call pos:start="85:10" pos:end="85:71"><name pos:start="85:10" pos:end="85:28">qemu_new_net_client</name><argument_list pos:start="85:29" pos:end="85:71">(<argument pos:start="85:30" pos:end="85:51"><expr pos:start="85:30" pos:end="85:51"><operator pos:start="85:30" pos:end="85:30">&amp;</operator><name pos:start="85:31" pos:end="85:51">net_dgram_socket_info</name></expr></argument>, <argument pos:start="85:54" pos:end="85:57"><expr pos:start="85:54" pos:end="85:57"><name pos:start="85:54" pos:end="85:57">peer</name></expr></argument>, <argument pos:start="85:60" pos:end="85:64"><expr pos:start="85:60" pos:end="85:64"><name pos:start="85:60" pos:end="85:64">model</name></expr></argument>, <argument pos:start="85:67" pos:end="85:70"><expr pos:start="85:67" pos:end="85:70"><name pos:start="85:67" pos:end="85:70">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="95:62"><expr pos:start="89:5" pos:end="95:61"><call pos:start="89:5" pos:end="95:61"><name pos:start="89:5" pos:end="89:12">snprintf</name><argument_list pos:start="89:13" pos:end="95:61">(<argument pos:start="89:14" pos:end="89:25"><expr pos:start="89:14" pos:end="89:25"><name pos:start="89:14" pos:end="89:25"><name pos:start="89:14" pos:end="89:15">nc</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:25">info_str</name></name></expr></argument>, <argument pos:start="89:28" pos:end="89:47"><expr pos:start="89:28" pos:end="89:47"><sizeof pos:start="89:28" pos:end="89:47">sizeof<argument_list pos:start="89:34" pos:end="89:47">(<argument pos:start="89:35" pos:end="89:46"><expr pos:start="89:35" pos:end="89:46"><name pos:start="89:35" pos:end="89:46"><name pos:start="89:35" pos:end="89:36">nc</name><operator pos:start="89:37" pos:end="89:38">-&gt;</operator><name pos:start="89:39" pos:end="89:46">info_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

            <argument pos:start="91:13" pos:end="91:44"><expr pos:start="91:13" pos:end="91:44"><literal type="string" pos:start="91:13" pos:end="91:44">"socket: fd=%d (%s mcast=%s:%d)"</literal></expr></argument>,

            <argument pos:start="93:13" pos:end="93:14"><expr pos:start="93:13" pos:end="93:14"><name pos:start="93:13" pos:end="93:14">fd</name></expr></argument>, <argument pos:start="93:17" pos:end="93:44"><expr pos:start="93:17" pos:end="93:44"><ternary pos:start="93:17" pos:end="93:44"><condition pos:start="93:17" pos:end="93:30"><expr pos:start="93:17" pos:end="93:28"><name pos:start="93:17" pos:end="93:28">is_connected</name></expr> ?</condition><then pos:start="93:32" pos:end="93:39"> <expr pos:start="93:32" pos:end="93:39"><literal type="string" pos:start="93:32" pos:end="93:39">"cloned"</literal></expr> </then><else pos:start="93:41" pos:end="93:44">: <expr pos:start="93:43" pos:end="93:44"><literal type="string" pos:start="93:43" pos:end="93:44">""</literal></expr></else></ternary></expr></argument>,

            <argument pos:start="95:13" pos:end="95:37"><expr pos:start="95:13" pos:end="95:37"><call pos:start="95:13" pos:end="95:37"><name pos:start="95:13" pos:end="95:21">inet_ntoa</name><argument_list pos:start="95:22" pos:end="95:37">(<argument pos:start="95:23" pos:end="95:36"><expr pos:start="95:23" pos:end="95:36"><name pos:start="95:23" pos:end="95:36"><name pos:start="95:23" pos:end="95:27">saddr</name><operator pos:start="95:28" pos:end="95:28">.</operator><name pos:start="95:29" pos:end="95:36">sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:40" pos:end="95:60"><expr pos:start="95:40" pos:end="95:60"><call pos:start="95:40" pos:end="95:60"><name pos:start="95:40" pos:end="95:44">ntohs</name><argument_list pos:start="95:45" pos:end="95:60">(<argument pos:start="95:46" pos:end="95:59"><expr pos:start="95:46" pos:end="95:59"><name pos:start="95:46" pos:end="95:59"><name pos:start="95:46" pos:end="95:50">saddr</name><operator pos:start="95:51" pos:end="95:51">.</operator><name pos:start="95:52" pos:end="95:59">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:42"><expr pos:start="99:5" pos:end="99:41"><name pos:start="99:5" pos:end="99:5">s</name> <operator pos:start="99:7" pos:end="99:7">=</operator> <call pos:start="99:9" pos:end="99:41"><name pos:start="99:9" pos:end="99:17">DO_UPCAST</name><argument_list pos:start="99:18" pos:end="99:41">(<argument pos:start="99:19" pos:end="99:32"><expr pos:start="99:19" pos:end="99:32"><name pos:start="99:19" pos:end="99:32">NetSocketState</name></expr></argument>, <argument pos:start="99:35" pos:end="99:36"><expr pos:start="99:35" pos:end="99:36"><name pos:start="99:35" pos:end="99:36">nc</name></expr></argument>, <argument pos:start="99:39" pos:end="99:40"><expr pos:start="99:39" pos:end="99:40"><name pos:start="99:39" pos:end="99:40">nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:15"><expr pos:start="103:5" pos:end="103:14"><name pos:start="103:5" pos:end="103:9"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:9">fd</name></name> <operator pos:start="103:11" pos:end="103:11">=</operator> <name pos:start="103:13" pos:end="103:14">fd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:22"><expr pos:start="105:5" pos:end="105:21"><name pos:start="105:5" pos:end="105:16"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:16">listen_fd</name></name> <operator pos:start="105:18" pos:end="105:18">=</operator> <operator pos:start="105:20" pos:end="105:20">-</operator><literal type="number" pos:start="105:21" pos:end="105:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:39"><expr pos:start="107:5" pos:end="107:38"><name pos:start="107:5" pos:end="107:14"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:14">send_fn</name></name> <operator pos:start="107:16" pos:end="107:16">=</operator> <name pos:start="107:18" pos:end="107:38">net_socket_send_dgram</name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:34"><expr pos:start="109:5" pos:end="109:33"><call pos:start="109:5" pos:end="109:33"><name pos:start="109:5" pos:end="109:24">net_socket_read_poll</name><argument_list pos:start="109:25" pos:end="109:33">(<argument pos:start="109:26" pos:end="109:26"><expr pos:start="109:26" pos:end="109:26"><name pos:start="109:26" pos:end="109:26">s</name></expr></argument>, <argument pos:start="109:29" pos:end="109:32"><expr pos:start="109:29" pos:end="109:32"><name pos:start="109:29" pos:end="109:32">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:42">/* mcast: save bound address as dst */</comment>

    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:21">(<expr pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:20">is_connected</name></expr>)</condition> <block pos:start="115:23" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:29">

        <expr_stmt pos:start="117:9" pos:end="117:29"><expr pos:start="117:9" pos:end="117:28"><name pos:start="117:9" pos:end="117:20"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:20">dgram_dst</name></name> <operator pos:start="117:22" pos:end="117:22">=</operator> <name pos:start="117:24" pos:end="117:28">saddr</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="123:5" pos:end="123:13">return <expr pos:start="123:12" pos:end="123:12"><name pos:start="123:12" pos:end="123:12">s</name></expr>;</return>



<label pos:start="127:1" pos:end="127:4"><name pos:start="127:1" pos:end="127:3">err</name>:</label>

    <expr_stmt pos:start="129:5" pos:end="129:20"><expr pos:start="129:5" pos:end="129:19"><call pos:start="129:5" pos:end="129:19"><name pos:start="129:5" pos:end="129:15">closesocket</name><argument_list pos:start="129:16" pos:end="129:19">(<argument pos:start="129:17" pos:end="129:18"><expr pos:start="129:17" pos:end="129:18"><name pos:start="129:17" pos:end="129:18">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="131:5" pos:end="131:16">return <expr pos:start="131:12" pos:end="131:15"><name pos:start="131:12" pos:end="131:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
