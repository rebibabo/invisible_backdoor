<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4624.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">zipl_load_segment</name><parameter_list pos:start="1:29" pos:end="1:59">(<parameter pos:start="1:30" pos:end="1:58"><decl pos:start="1:30" pos:end="1:58"><type pos:start="1:30" pos:end="1:58"><name pos:start="1:30" pos:end="1:51"><name pos:start="1:30" pos:end="1:35">struct</name> <name pos:start="1:37" pos:end="1:51">component_entry</name></name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">entry</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:14">

    <decl_stmt pos:start="5:5" pos:end="5:73"><decl pos:start="5:5" pos:end="5:72"><type pos:start="5:5" pos:end="5:13"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:13">int</name></type> <name pos:start="5:15" pos:end="5:25">max_entries</name> <init pos:start="5:27" pos:end="5:72">= <expr pos:start="5:29" pos:end="5:72"><operator pos:start="5:29" pos:end="5:29">(</operator><name pos:start="5:30" pos:end="5:40">SECTOR_SIZE</name> <operator pos:start="5:42" pos:end="5:42">/</operator> <sizeof pos:start="5:44" pos:end="5:71">sizeof<argument_list pos:start="5:50" pos:end="5:71">(<argument pos:start="5:51" pos:end="5:70"><expr pos:start="5:51" pos:end="5:70">struct <name pos:start="5:58" pos:end="5:70">scsi_blockptr</name></expr></argument>)</argument_list></sizeof><operator pos:start="5:72" pos:end="5:72">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:26"><name pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:24">scsi_blockptr</name></name> <modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:30">bprs</name> <init pos:start="7:32" pos:end="7:43">= <expr pos:start="7:34" pos:end="7:43"><operator pos:start="7:34" pos:end="7:34">(</operator><name pos:start="7:35" pos:end="7:38">void</name><operator pos:start="7:39" pos:end="7:39">*</operator><operator pos:start="7:40" pos:end="7:40">)</operator><name pos:start="7:41" pos:end="7:43">sec</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:13"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">int</name></type> <name pos:start="9:15" pos:end="9:23">bprs_size</name> <init pos:start="9:25" pos:end="9:37">= <expr pos:start="9:27" pos:end="9:37"><sizeof pos:start="9:27" pos:end="9:37">sizeof<argument_list pos:start="9:33" pos:end="9:37">(<argument pos:start="9:34" pos:end="9:36"><expr pos:start="9:34" pos:end="9:36"><name pos:start="9:34" pos:end="9:36">sec</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:20">blockno</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">long</name></type> <name pos:start="13:10" pos:end="13:16">address</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:34"><expr pos:start="19:5" pos:end="19:33"><name pos:start="19:5" pos:end="19:11">blockno</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:33"><name pos:start="19:15" pos:end="19:19">entry</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:25">data</name><operator pos:start="19:26" pos:end="19:26">.</operator><name pos:start="19:27" pos:end="19:33">blockno</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:34"><expr pos:start="21:5" pos:end="21:33"><name pos:start="21:5" pos:end="21:11">address</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:33"><name pos:start="21:15" pos:end="21:19">entry</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:33">load_address</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:57"><expr pos:start="25:5" pos:end="25:56"><call pos:start="25:5" pos:end="25:56"><name pos:start="25:5" pos:end="25:19">debug_print_int</name><argument_list pos:start="25:20" pos:end="25:56">(<argument pos:start="25:21" pos:end="25:46"><expr pos:start="25:21" pos:end="25:46"><literal type="string" pos:start="25:21" pos:end="25:46">"loading segment at block"</literal></expr></argument>, <argument pos:start="25:49" pos:end="25:55"><expr pos:start="25:49" pos:end="25:55"><name pos:start="25:49" pos:end="25:55">blockno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:37"><expr pos:start="27:5" pos:end="27:36"><call pos:start="27:5" pos:end="27:36"><name pos:start="27:5" pos:end="27:19">debug_print_int</name><argument_list pos:start="27:20" pos:end="27:36">(<argument pos:start="27:21" pos:end="27:26"><expr pos:start="27:21" pos:end="27:26"><literal type="string" pos:start="27:21" pos:end="27:26">"addr"</literal></expr></argument>, <argument pos:start="27:29" pos:end="27:35"><expr pos:start="27:29" pos:end="27:35"><name pos:start="27:29" pos:end="27:35">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <do pos:start="31:5" pos:end="99:22">do <block pos:start="31:8" pos:end="99:5">{<block_content pos:start="33:9" pos:end="97:9">

        <expr_stmt pos:start="33:9" pos:end="33:51"><expr pos:start="33:9" pos:end="33:50"><call pos:start="33:9" pos:end="33:50"><name pos:start="33:9" pos:end="33:14">memset</name><argument_list pos:start="33:15" pos:end="33:50">(<argument pos:start="33:16" pos:end="33:19"><expr pos:start="33:16" pos:end="33:19"><name pos:start="33:16" pos:end="33:19">bprs</name></expr></argument>, <argument pos:start="33:22" pos:end="33:38"><expr pos:start="33:22" pos:end="33:38"><name pos:start="33:22" pos:end="33:38">FREE_SPACE_FILLER</name></expr></argument>, <argument pos:start="33:41" pos:end="33:49"><expr pos:start="33:41" pos:end="33:49"><name pos:start="33:41" pos:end="33:49">bprs_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:50">(<expr pos:start="35:13" pos:end="35:49"><call pos:start="35:13" pos:end="35:49"><name pos:start="35:13" pos:end="35:23">virtio_read</name><argument_list pos:start="35:24" pos:end="35:49">(<argument pos:start="35:25" pos:end="35:31"><expr pos:start="35:25" pos:end="35:31"><name pos:start="35:25" pos:end="35:31">blockno</name></expr></argument>, <argument pos:start="35:34" pos:end="35:48"><expr pos:start="35:34" pos:end="35:48"><operator pos:start="35:34" pos:end="35:34">(</operator><name pos:start="35:35" pos:end="35:41">uint8_t</name> <operator pos:start="35:43" pos:end="35:43">*</operator><operator pos:start="35:44" pos:end="35:44">)</operator><name pos:start="35:45" pos:end="35:48">bprs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:52" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:22">

            <expr_stmt pos:start="37:13" pos:end="37:63"><expr pos:start="37:13" pos:end="37:62"><call pos:start="37:13" pos:end="37:62"><name pos:start="37:13" pos:end="37:27">debug_print_int</name><argument_list pos:start="37:28" pos:end="37:62">(<argument pos:start="37:29" pos:end="37:52"><expr pos:start="37:29" pos:end="37:52"><literal type="string" pos:start="37:29" pos:end="37:52">"failed reading bprs at"</literal></expr></argument>, <argument pos:start="37:55" pos:end="37:61"><expr pos:start="37:55" pos:end="37:61"><name pos:start="37:55" pos:end="37:61">blockno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="39:13" pos:end="39:22">goto <name pos:start="39:18" pos:end="39:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <for pos:start="45:9" pos:end="97:9">for <control pos:start="45:13" pos:end="45:25">(<init pos:start="45:14" pos:end="45:19"><expr pos:start="45:14" pos:end="45:18"><name pos:start="45:14" pos:end="45:14">i</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</init><condition pos:start="45:20" pos:end="45:20">;</condition> <incr pos:start="45:22" pos:end="45:24"><expr pos:start="45:22" pos:end="45:24"><name pos:start="45:22" pos:end="45:22">i</name><operator pos:start="45:23" pos:end="45:24">++</operator></expr></incr>)</control> <block pos:start="45:27" pos:end="97:9">{<block_content pos:start="47:13" pos:end="95:26">

            <decl_stmt pos:start="47:13" pos:end="47:44"><decl pos:start="47:13" pos:end="47:43"><type pos:start="47:13" pos:end="47:17"><name pos:start="47:13" pos:end="47:15">u64</name> <modifier pos:start="47:17" pos:end="47:17">*</modifier></type><name pos:start="47:18" pos:end="47:25">cur_desc</name> <init pos:start="47:27" pos:end="47:43">= <expr pos:start="47:29" pos:end="47:43"><operator pos:start="47:29" pos:end="47:29">(</operator><name pos:start="47:30" pos:end="47:33">void</name><operator pos:start="47:34" pos:end="47:34">*</operator><operator pos:start="47:35" pos:end="47:35">)</operator><operator pos:start="47:36" pos:end="47:36">&amp;</operator><name pos:start="47:37" pos:end="47:43"><name pos:start="47:37" pos:end="47:40">bprs</name><index pos:start="47:41" pos:end="47:43">[<expr pos:start="47:42" pos:end="47:42"><name pos:start="47:42" pos:end="47:42">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="51:13" pos:end="51:38"><expr pos:start="51:13" pos:end="51:37"><name pos:start="51:13" pos:end="51:19">blockno</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:29"><name pos:start="51:23" pos:end="51:26">bprs</name><index pos:start="51:27" pos:end="51:29">[<expr pos:start="51:28" pos:end="51:28"><name pos:start="51:28" pos:end="51:28">i</name></expr>]</index></name><operator pos:start="51:30" pos:end="51:30">.</operator><name pos:start="51:31" pos:end="51:37">blockno</name></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="55:22"><if pos:start="53:13" pos:end="55:22">if <condition pos:start="53:16" pos:end="53:25">(<expr pos:start="53:17" pos:end="53:24"><operator pos:start="53:17" pos:end="53:17">!</operator><name pos:start="53:18" pos:end="53:24">blockno</name></expr>)</condition><block type="pseudo" pos:start="55:17" pos:end="55:22"><block_content pos:start="55:17" pos:end="55:22">

                <break pos:start="55:17" pos:end="55:22">break;</break></block_content></block></if></if_stmt>



            <comment type="block" pos:start="59:13" pos:end="61:58">/* we need the updated blockno for the next indirect entry in the

               chain, but don't want to advance address */</comment>

            <if_stmt pos:start="63:13" pos:end="65:22"><if pos:start="63:13" pos:end="65:22">if <condition pos:start="63:16" pos:end="63:39">(<expr pos:start="63:17" pos:end="63:38"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:20">==</operator> <operator pos:start="63:22" pos:end="63:22">(</operator><name pos:start="63:23" pos:end="63:33">max_entries</name> <operator pos:start="63:35" pos:end="63:35">-</operator> <literal type="number" pos:start="63:37" pos:end="63:37">1</literal><operator pos:start="63:38" pos:end="63:38">)</operator></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:22"><block_content pos:start="65:17" pos:end="65:22">

                <break pos:start="65:17" pos:end="65:22">break;</break></block_content></block></if></if_stmt>



            <if_stmt pos:start="69:13" pos:end="87:13"><if pos:start="69:13" pos:end="87:13">if <condition pos:start="69:16" pos:end="71:46">(<expr pos:start="69:17" pos:end="71:45"><name pos:start="69:17" pos:end="69:23"><name pos:start="69:17" pos:end="69:20">bprs</name><index pos:start="69:21" pos:end="69:23">[<expr pos:start="69:22" pos:end="69:22"><name pos:start="69:22" pos:end="69:22">i</name></expr>]</index></name><operator pos:start="69:24" pos:end="69:24">.</operator><name pos:start="69:25" pos:end="69:31">blockct</name> <operator pos:start="69:33" pos:end="69:34">==</operator> <literal type="number" pos:start="69:36" pos:end="69:36">0</literal> <operator pos:start="69:38" pos:end="69:39">&amp;&amp;</operator> <call pos:start="69:41" pos:end="71:45"><name pos:start="69:41" pos:end="69:52">unused_space</name><argument_list pos:start="69:53" pos:end="71:45">(<argument pos:start="69:54" pos:end="69:65"><expr pos:start="69:54" pos:end="69:65"><operator pos:start="69:54" pos:end="69:54">&amp;</operator><name pos:start="69:55" pos:end="69:65"><name pos:start="69:55" pos:end="69:58">bprs</name><index pos:start="69:59" pos:end="69:65">[<expr pos:start="69:60" pos:end="69:64"><name pos:start="69:60" pos:end="69:60">i</name> <operator pos:start="69:62" pos:end="69:62">+</operator> <literal type="number" pos:start="69:64" pos:end="69:64">1</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="71:17" pos:end="71:44"><expr pos:start="71:17" pos:end="71:44"><sizeof pos:start="71:17" pos:end="71:44">sizeof<argument_list pos:start="71:23" pos:end="71:44">(<argument pos:start="71:24" pos:end="71:43"><expr pos:start="71:24" pos:end="71:43">struct <name pos:start="71:31" pos:end="71:43">scsi_blockptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:48" pos:end="87:13">{<block_content pos:start="85:17" pos:end="85:22">

                <comment type="block" pos:start="73:17" pos:end="83:19">/* This is a "continue" pointer.

                 * This ptr is the last one in the current script section.

                 * I.e. the next ptr must point to the unused memory area.

                 * The blockno is not zero, so the upper loop must continue

                 * reading next section of BPRS.

                 */</comment>

                <break pos:start="85:17" pos:end="85:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="89:13" pos:end="91:57"><expr pos:start="89:13" pos:end="91:56"><name pos:start="89:13" pos:end="89:19">address</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="91:56"><name pos:start="89:23" pos:end="89:40">virtio_load_direct</name><argument_list pos:start="89:41" pos:end="91:56">(<argument pos:start="89:42" pos:end="89:52"><expr pos:start="89:42" pos:end="89:52"><name pos:start="89:42" pos:end="89:52"><name pos:start="89:42" pos:end="89:49">cur_desc</name><index pos:start="89:50" pos:end="89:52">[<expr pos:start="89:51" pos:end="89:51"><literal type="number" pos:start="89:51" pos:end="89:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="89:55" pos:end="89:65"><expr pos:start="89:55" pos:end="89:65"><name pos:start="89:55" pos:end="89:65"><name pos:start="89:55" pos:end="89:62">cur_desc</name><index pos:start="89:63" pos:end="89:65">[<expr pos:start="89:64" pos:end="89:64"><literal type="number" pos:start="89:64" pos:end="89:64">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="89:68" pos:end="89:68"><expr pos:start="89:68" pos:end="89:68"><literal type="number" pos:start="89:68" pos:end="89:68">0</literal></expr></argument>,

                                         <argument pos:start="91:42" pos:end="91:55"><expr pos:start="91:42" pos:end="91:55"><operator pos:start="91:42" pos:end="91:42">(</operator><name pos:start="91:43" pos:end="91:46">void</name><operator pos:start="91:47" pos:end="91:47">*</operator><operator pos:start="91:48" pos:end="91:48">)</operator><name pos:start="91:49" pos:end="91:55">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="95:26"><if pos:start="93:13" pos:end="95:26">if <condition pos:start="93:16" pos:end="93:30">(<expr pos:start="93:17" pos:end="93:29"><name pos:start="93:17" pos:end="93:23">address</name> <operator pos:start="93:25" pos:end="93:26">==</operator> <operator pos:start="93:28" pos:end="93:28">-</operator><literal type="number" pos:start="93:29" pos:end="93:29">1</literal></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:26"><block_content pos:start="95:17" pos:end="95:26">

                <goto pos:start="95:17" pos:end="95:26">goto <name pos:start="95:22" pos:end="95:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block> while <condition pos:start="99:13" pos:end="99:21">(<expr pos:start="99:14" pos:end="99:20"><name pos:start="99:14" pos:end="99:20">blockno</name></expr>)</condition>;</do>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>



<label pos:start="107:1" pos:end="107:5"><name pos:start="107:1" pos:end="107:4">fail</name>:</label>

    <expr_stmt pos:start="109:5" pos:end="109:43"><expr pos:start="109:5" pos:end="109:42"><call pos:start="109:5" pos:end="109:42"><name pos:start="109:5" pos:end="109:14">sclp_print</name><argument_list pos:start="109:15" pos:end="109:42">(<argument pos:start="109:16" pos:end="109:41"><expr pos:start="109:16" pos:end="109:41"><literal type="string" pos:start="109:16" pos:end="109:41">"failed loading segment\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="111:5" pos:end="111:14">return <expr pos:start="111:12" pos:end="111:13"><operator pos:start="111:12" pos:end="111:12">-</operator><literal type="number" pos:start="111:13" pos:end="111:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
