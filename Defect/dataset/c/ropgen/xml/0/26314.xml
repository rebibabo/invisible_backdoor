<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26314.c" pos:tabs="8"><function pos:start="1:1" pos:end="385:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vp3_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:55">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:40"><decl pos:start="5:29" pos:end="5:40"><type pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:35">uint8_t</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:40">buf</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:54"><decl pos:start="5:43" pos:end="5:54"><type pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:54">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="385:1">{<block_content pos:start="9:5" pos:end="383:20">

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">Vp3DecodeContext</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:23">s</name> <init pos:start="9:25" pos:end="9:42">= <expr pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:31">avctx</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">GetBitContext</name></type> <name pos:start="11:19" pos:end="11:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:14"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <name pos:start="13:12" pos:end="13:14">int</name></type> <name pos:start="13:16" pos:end="13:22">counter</name> <init pos:start="13:24" pos:end="13:26">= <expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:42"><expr pos:start="19:5" pos:end="19:41"><call pos:start="19:5" pos:end="19:41"><name pos:start="19:5" pos:end="19:17">init_get_bits</name><argument_list pos:start="19:18" pos:end="19:41">(<argument pos:start="19:19" pos:end="19:21"><expr pos:start="19:19" pos:end="19:21"><operator pos:start="19:19" pos:end="19:19">&amp;</operator><name pos:start="19:20" pos:end="19:21">gb</name></expr></argument>, <argument pos:start="19:24" pos:end="19:26"><expr pos:start="19:24" pos:end="19:26"><name pos:start="19:24" pos:end="19:26">buf</name></expr></argument>, <argument pos:start="19:29" pos:end="19:40"><expr pos:start="19:29" pos:end="19:40"><name pos:start="19:29" pos:end="19:36">buf_size</name> <operator pos:start="19:38" pos:end="19:38">*</operator> <literal type="number" pos:start="19:40" pos:end="19:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="71:5"><if pos:start="23:5" pos:end="71:5">if <condition pos:start="23:8" pos:end="23:36">(<expr pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:17">theora</name></name> <operator pos:start="23:19" pos:end="23:20">&amp;&amp;</operator> <call pos:start="23:22" pos:end="23:35"><name pos:start="23:22" pos:end="23:30">get_bits1</name><argument_list pos:start="23:31" pos:end="23:35">(<argument pos:start="23:32" pos:end="23:34"><expr pos:start="23:32" pos:end="23:34"><operator pos:start="23:32" pos:end="23:32">&amp;</operator><name pos:start="23:33" pos:end="23:34">gb</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="25:5" pos:end="71:5">{<block_content pos:start="29:9" pos:end="70:0">

<cpp:if pos:start="27:1" pos:end="27:5">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:5"><literal type="number" pos:start="27:5" pos:end="27:5">1</literal></expr></cpp:if>

        <expr_stmt pos:start="29:9" pos:end="29:89"><expr pos:start="29:9" pos:end="29:88"><call pos:start="29:9" pos:end="29:88"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:88">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:87"><expr pos:start="29:37" pos:end="29:87"><literal type="string" pos:start="29:37" pos:end="29:87">"Header packet passed to frame decoder, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="34:0">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

<cpp:else pos:start="33:1" pos:end="33:5">#<cpp:directive pos:start="33:2" pos:end="33:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="35:9" pos:end="35:37"><decl pos:start="35:9" pos:end="35:36"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:17">ptype</name> <init pos:start="35:19" pos:end="35:36">= <expr pos:start="35:21" pos:end="35:36"><call pos:start="35:21" pos:end="35:36"><name pos:start="35:21" pos:end="35:28">get_bits</name><argument_list pos:start="35:29" pos:end="35:36">(<argument pos:start="35:30" pos:end="35:32"><expr pos:start="35:30" pos:end="35:32"><operator pos:start="35:30" pos:end="35:30">&amp;</operator><name pos:start="35:31" pos:end="35:32">gb</name></expr></argument>, <argument pos:start="35:35" pos:end="35:35"><expr pos:start="35:35" pos:end="35:35"><literal type="number" pos:start="35:35" pos:end="35:35">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:28"><expr pos:start="39:9" pos:end="39:27"><call pos:start="39:9" pos:end="39:27"><name pos:start="39:9" pos:end="39:17">skip_bits</name><argument_list pos:start="39:18" pos:end="39:27">(<argument pos:start="39:19" pos:end="39:21"><expr pos:start="39:19" pos:end="39:21"><operator pos:start="39:19" pos:end="39:19">&amp;</operator><name pos:start="39:20" pos:end="39:21">gb</name></expr></argument>, <argument pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><literal type="number" pos:start="39:24" pos:end="39:24">6</literal><operator pos:start="39:25" pos:end="39:25">*</operator><literal type="number" pos:start="39:26" pos:end="39:26">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="39:30" pos:end="39:43">/* "theora" */</comment>



        <switch pos:start="43:9" pos:end="65:9">switch<condition pos:start="43:15" pos:end="43:21">(<expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">ptype</name></expr>)</condition>

        <block pos:start="45:9" pos:end="65:9">{<block_content pos:start="47:13" pos:end="63:89">

            <case pos:start="47:13" pos:end="47:19">case <expr pos:start="47:18" pos:end="47:18"><literal type="number" pos:start="47:18" pos:end="47:18">1</literal></expr>:</case>

                <expr_stmt pos:start="49:17" pos:end="49:50"><expr pos:start="49:17" pos:end="49:49"><call pos:start="49:17" pos:end="49:49"><name pos:start="49:17" pos:end="49:38">theora_decode_comments</name><argument_list pos:start="49:39" pos:end="49:49">(<argument pos:start="49:40" pos:end="49:44"><expr pos:start="49:40" pos:end="49:44"><name pos:start="49:40" pos:end="49:44">avctx</name></expr></argument>, <argument pos:start="49:47" pos:end="49:48"><expr pos:start="49:47" pos:end="49:48"><name pos:start="49:47" pos:end="49:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="51:17" pos:end="51:22">break;</break>

            <case pos:start="53:13" pos:end="53:19">case <expr pos:start="53:18" pos:end="53:18"><literal type="number" pos:start="53:18" pos:end="53:18">2</literal></expr>:</case>

                <expr_stmt pos:start="55:17" pos:end="55:48"><expr pos:start="55:17" pos:end="55:47"><call pos:start="55:17" pos:end="55:47"><name pos:start="55:17" pos:end="55:36">theora_decode_tables</name><argument_list pos:start="55:37" pos:end="55:47">(<argument pos:start="55:38" pos:end="55:42"><expr pos:start="55:38" pos:end="55:42"><name pos:start="55:38" pos:end="55:42">avctx</name></expr></argument>, <argument pos:start="55:45" pos:end="55:46"><expr pos:start="55:45" pos:end="55:46"><name pos:start="55:45" pos:end="55:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="57:21" pos:end="57:40"><expr pos:start="57:21" pos:end="57:39"><call pos:start="57:21" pos:end="57:39"><name pos:start="57:21" pos:end="57:36">init_dequantizer</name><argument_list pos:start="57:37" pos:end="57:39">(<argument pos:start="57:38" pos:end="57:38"><expr pos:start="57:38" pos:end="57:38"><name pos:start="57:38" pos:end="57:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="59:17" pos:end="59:22">break;</break>

            <default pos:start="61:13" pos:end="61:20">default:</default>

                <expr_stmt pos:start="63:17" pos:end="63:89"><expr pos:start="63:17" pos:end="63:88"><call pos:start="63:17" pos:end="63:88"><name pos:start="63:17" pos:end="63:22">av_log</name><argument_list pos:start="63:23" pos:end="63:88">(<argument pos:start="63:24" pos:end="63:28"><expr pos:start="63:24" pos:end="63:28"><name pos:start="63:24" pos:end="63:28">avctx</name></expr></argument>, <argument pos:start="63:31" pos:end="63:42"><expr pos:start="63:31" pos:end="63:42"><name pos:start="63:31" pos:end="63:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:45" pos:end="63:80"><expr pos:start="63:45" pos:end="63:80"><literal type="string" pos:start="63:45" pos:end="63:80">"Unknown Theora config packet: %d\n"</literal></expr></argument>, <argument pos:start="63:83" pos:end="63:87"><expr pos:start="63:83" pos:end="63:87"><name pos:start="63:83" pos:end="63:87">ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <return pos:start="67:9" pos:end="70:0">return <expr pos:start="67:16" pos:end="67:23"><name pos:start="67:16" pos:end="67:23">buf_size</name></expr>;</return>

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:34"><expr pos:start="75:5" pos:end="75:33"><name pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:15">keyframe</name></name> <operator pos:start="75:17" pos:end="75:17">=</operator> <operator pos:start="75:19" pos:end="75:19">!</operator><call pos:start="75:20" pos:end="75:33"><name pos:start="75:20" pos:end="75:28">get_bits1</name><argument_list pos:start="75:29" pos:end="75:33">(<argument pos:start="75:30" pos:end="75:32"><expr pos:start="75:30" pos:end="75:32"><operator pos:start="75:30" pos:end="75:30">&amp;</operator><name pos:start="75:31" pos:end="75:32">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="79:26"><if pos:start="77:5" pos:end="79:26">if <condition pos:start="77:8" pos:end="77:19">(<expr pos:start="77:9" pos:end="77:18"><operator pos:start="77:9" pos:end="77:9">!</operator><name pos:start="77:10" pos:end="77:18"><name pos:start="77:10" pos:end="77:10">s</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:18">theora</name></name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:26"><block_content pos:start="79:9" pos:end="79:26">

        <expr_stmt pos:start="79:9" pos:end="79:26"><expr pos:start="79:9" pos:end="79:25"><call pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:17">skip_bits</name><argument_list pos:start="79:18" pos:end="79:25">(<argument pos:start="79:19" pos:end="79:21"><expr pos:start="79:19" pos:end="79:21"><operator pos:start="79:19" pos:end="79:19">&amp;</operator><name pos:start="79:20" pos:end="79:21">gb</name></expr></argument>, <argument pos:start="79:24" pos:end="79:24"><expr pos:start="79:24" pos:end="79:24"><literal type="number" pos:start="79:24" pos:end="79:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:45"><expr pos:start="81:5" pos:end="81:44"><name pos:start="81:5" pos:end="81:25"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:25">last_quality_index</name></name> <operator pos:start="81:27" pos:end="81:27">=</operator> <name pos:start="81:29" pos:end="81:44"><name pos:start="81:29" pos:end="81:29">s</name><operator pos:start="81:30" pos:end="81:31">-&gt;</operator><name pos:start="81:32" pos:end="81:44">quality_index</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:40"><expr pos:start="83:5" pos:end="83:39"><name pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:20">quality_index</name></name> <operator pos:start="83:22" pos:end="83:22">=</operator> <call pos:start="83:24" pos:end="83:39"><name pos:start="83:24" pos:end="83:31">get_bits</name><argument_list pos:start="83:32" pos:end="83:39">(<argument pos:start="83:33" pos:end="83:35"><expr pos:start="83:33" pos:end="83:35"><operator pos:start="83:33" pos:end="83:33">&amp;</operator><name pos:start="83:34" pos:end="83:35">gb</name></expr></argument>, <argument pos:start="83:38" pos:end="83:38"><expr pos:start="83:38" pos:end="83:38"><literal type="number" pos:start="83:38" pos:end="83:38">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="87:24"><if pos:start="85:5" pos:end="87:24">if <condition pos:start="85:8" pos:end="85:30">(<expr pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:17">theora</name></name> <operator pos:start="85:19" pos:end="85:20">&gt;=</operator> <literal type="number" pos:start="85:22" pos:end="85:29">0x030200</literal></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:24"><block_content pos:start="87:9" pos:end="87:24">

        <expr_stmt pos:start="87:9" pos:end="87:24"><expr pos:start="87:9" pos:end="87:23"><call pos:start="87:9" pos:end="87:23"><name pos:start="87:9" pos:end="87:18">skip_bits1</name><argument_list pos:start="87:19" pos:end="87:23">(<argument pos:start="87:20" pos:end="87:22"><expr pos:start="87:20" pos:end="87:22"><operator pos:start="87:20" pos:end="87:20">&amp;</operator><name pos:start="87:21" pos:end="87:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="95:61"><if pos:start="91:5" pos:end="95:61">if <condition pos:start="91:8" pos:end="91:45">(<expr pos:start="91:9" pos:end="91:44"><name pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:16">avctx</name><operator pos:start="91:17" pos:end="91:18">-&gt;</operator><name pos:start="91:19" pos:end="91:23">debug</name></name> <operator pos:start="91:25" pos:end="91:25">&amp;</operator> <name pos:start="91:27" pos:end="91:44">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="95:61"><block_content pos:start="93:9" pos:end="95:61">

        <expr_stmt pos:start="93:9" pos:end="95:61"><expr pos:start="93:9" pos:end="95:60"><call pos:start="93:9" pos:end="95:60"><name pos:start="93:9" pos:end="93:14">av_log</name><argument_list pos:start="93:15" pos:end="95:60">(<argument pos:start="93:16" pos:end="93:23"><expr pos:start="93:16" pos:end="93:23"><name pos:start="93:16" pos:end="93:23"><name pos:start="93:16" pos:end="93:16">s</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:23">avctx</name></name></expr></argument>, <argument pos:start="93:26" pos:end="93:36"><expr pos:start="93:26" pos:end="93:36"><name pos:start="93:26" pos:end="93:36">AV_LOG_INFO</name></expr></argument>, <argument pos:start="93:39" pos:end="93:72"><expr pos:start="93:39" pos:end="93:72"><literal type="string" pos:start="93:39" pos:end="93:72">" VP3 %sframe #%d: Q index = %d\n"</literal></expr></argument>,

            <argument pos:start="95:13" pos:end="95:32"><expr pos:start="95:13" pos:end="95:32"><ternary pos:start="95:13" pos:end="95:32"><condition pos:start="95:13" pos:end="95:24"><expr pos:start="95:13" pos:end="95:23"><name pos:start="95:13" pos:end="95:23"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:23">keyframe</name></name></expr>?</condition><then pos:start="95:25" pos:end="95:29"><expr pos:start="95:25" pos:end="95:29"><literal type="string" pos:start="95:25" pos:end="95:29">"key"</literal></expr></then><else pos:start="95:30" pos:end="95:32">:<expr pos:start="95:31" pos:end="95:32"><literal type="string" pos:start="95:31" pos:end="95:32">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="95:35" pos:end="95:41"><expr pos:start="95:35" pos:end="95:41"><name pos:start="95:35" pos:end="95:41">counter</name></expr></argument>, <argument pos:start="95:44" pos:end="95:59"><expr pos:start="95:44" pos:end="95:59"><name pos:start="95:44" pos:end="95:59"><name pos:start="95:44" pos:end="95:44">s</name><operator pos:start="95:45" pos:end="95:46">-&gt;</operator><name pos:start="95:47" pos:end="95:59">quality_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:14"><expr pos:start="97:5" pos:end="97:13"><name pos:start="97:5" pos:end="97:11">counter</name><operator pos:start="97:12" pos:end="97:13">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:50">(<expr pos:start="101:9" pos:end="101:49"><name pos:start="101:9" pos:end="101:24"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:24">quality_index</name></name> <operator pos:start="101:26" pos:end="101:27">!=</operator> <name pos:start="101:29" pos:end="101:49"><name pos:start="101:29" pos:end="101:29">s</name><operator pos:start="101:30" pos:end="101:31">-&gt;</operator><name pos:start="101:32" pos:end="101:49">last_quality_index</name></name></expr>)</condition> <block pos:start="101:52" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:28">

        <expr_stmt pos:start="103:9" pos:end="103:28"><expr pos:start="103:9" pos:end="103:27"><call pos:start="103:9" pos:end="103:27"><name pos:start="103:9" pos:end="103:24">init_dequantizer</name><argument_list pos:start="103:25" pos:end="103:27">(<argument pos:start="103:26" pos:end="103:26"><expr pos:start="103:26" pos:end="103:26"><name pos:start="103:26" pos:end="103:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:28"><expr pos:start="105:9" pos:end="105:27"><call pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:24">init_loop_filter</name><argument_list pos:start="105:25" pos:end="105:27">(<argument pos:start="105:26" pos:end="105:26"><expr pos:start="105:26" pos:end="105:26"><name pos:start="105:26" pos:end="105:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="219:5"><if pos:start="111:5" pos:end="205:5">if <condition pos:start="111:8" pos:end="111:20">(<expr pos:start="111:9" pos:end="111:19"><name pos:start="111:9" pos:end="111:19"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:19">keyframe</name></name></expr>)</condition> <block pos:start="111:22" pos:end="205:5">{<block_content pos:start="113:9" pos:end="203:9">

        <if_stmt pos:start="113:9" pos:end="133:9"><if pos:start="113:9" pos:end="133:9">if <condition pos:start="113:12" pos:end="113:23">(<expr pos:start="113:13" pos:end="113:22"><operator pos:start="113:13" pos:end="113:13">!</operator><name pos:start="113:14" pos:end="113:22"><name pos:start="113:14" pos:end="113:14">s</name><operator pos:start="113:15" pos:end="113:16">-&gt;</operator><name pos:start="113:17" pos:end="113:22">theora</name></name></expr>)</condition>

        <block pos:start="115:9" pos:end="133:9">{<block_content pos:start="117:13" pos:end="131:13">

            <expr_stmt pos:start="117:13" pos:end="117:30"><expr pos:start="117:13" pos:end="117:29"><call pos:start="117:13" pos:end="117:29"><name pos:start="117:13" pos:end="117:21">skip_bits</name><argument_list pos:start="117:22" pos:end="117:29">(<argument pos:start="117:23" pos:end="117:25"><expr pos:start="117:23" pos:end="117:25"><operator pos:start="117:23" pos:end="117:23">&amp;</operator><name pos:start="117:24" pos:end="117:25">gb</name></expr></argument>, <argument pos:start="117:28" pos:end="117:28"><expr pos:start="117:28" pos:end="117:28"><literal type="number" pos:start="117:28" pos:end="117:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="117:32" pos:end="117:47">/* width code */</comment>

            <expr_stmt pos:start="119:13" pos:end="119:30"><expr pos:start="119:13" pos:end="119:29"><call pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:21">skip_bits</name><argument_list pos:start="119:22" pos:end="119:29">(<argument pos:start="119:23" pos:end="119:25"><expr pos:start="119:23" pos:end="119:25"><operator pos:start="119:23" pos:end="119:23">&amp;</operator><name pos:start="119:24" pos:end="119:25">gb</name></expr></argument>, <argument pos:start="119:28" pos:end="119:28"><expr pos:start="119:28" pos:end="119:28"><literal type="number" pos:start="119:28" pos:end="119:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="119:32" pos:end="119:48">/* height code */</comment>

            <if_stmt pos:start="121:13" pos:end="131:13"><if pos:start="121:13" pos:end="131:13">if <condition pos:start="121:16" pos:end="121:27">(<expr pos:start="121:17" pos:end="121:26"><name pos:start="121:17" pos:end="121:26"><name pos:start="121:17" pos:end="121:17">s</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:26">version</name></name></expr>)</condition>

            <block pos:start="123:13" pos:end="131:13">{<block_content pos:start="125:17" pos:end="129:83">

                <expr_stmt pos:start="125:17" pos:end="125:46"><expr pos:start="125:17" pos:end="125:45"><name pos:start="125:17" pos:end="125:26"><name pos:start="125:17" pos:end="125:17">s</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:26">version</name></name> <operator pos:start="125:28" pos:end="125:28">=</operator> <call pos:start="125:30" pos:end="125:45"><name pos:start="125:30" pos:end="125:37">get_bits</name><argument_list pos:start="125:38" pos:end="125:45">(<argument pos:start="125:39" pos:end="125:41"><expr pos:start="125:39" pos:end="125:41"><operator pos:start="125:39" pos:end="125:39">&amp;</operator><name pos:start="125:40" pos:end="125:41">gb</name></expr></argument>, <argument pos:start="125:44" pos:end="125:44"><expr pos:start="125:44" pos:end="125:44"><literal type="number" pos:start="125:44" pos:end="125:44">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="127:17" pos:end="129:83"><if pos:start="127:17" pos:end="129:83">if <condition pos:start="127:20" pos:end="127:33">(<expr pos:start="127:21" pos:end="127:32"><name pos:start="127:21" pos:end="127:27">counter</name> <operator pos:start="127:29" pos:end="127:30">==</operator> <literal type="number" pos:start="127:32" pos:end="127:32">1</literal></expr>)</condition><block type="pseudo" pos:start="129:21" pos:end="129:83"><block_content pos:start="129:21" pos:end="129:83">

                    <expr_stmt pos:start="129:21" pos:end="129:83"><expr pos:start="129:21" pos:end="129:82"><call pos:start="129:21" pos:end="129:82"><name pos:start="129:21" pos:end="129:26">av_log</name><argument_list pos:start="129:27" pos:end="129:82">(<argument pos:start="129:28" pos:end="129:35"><expr pos:start="129:28" pos:end="129:35"><name pos:start="129:28" pos:end="129:35"><name pos:start="129:28" pos:end="129:28">s</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:35">avctx</name></name></expr></argument>, <argument pos:start="129:38" pos:end="129:49"><expr pos:start="129:38" pos:end="129:49"><name pos:start="129:38" pos:end="129:49">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="129:52" pos:end="129:69"><expr pos:start="129:52" pos:end="129:69"><literal type="string" pos:start="129:52" pos:end="129:69">"VP version: %d\n"</literal></expr></argument>, <argument pos:start="129:72" pos:end="129:81"><expr pos:start="129:72" pos:end="129:81"><name pos:start="129:72" pos:end="129:81"><name pos:start="129:72" pos:end="129:72">s</name><operator pos:start="129:73" pos:end="129:74">-&gt;</operator><name pos:start="129:75" pos:end="129:81">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="135:9" pos:end="145:9"><if pos:start="135:9" pos:end="145:9">if <condition pos:start="135:12" pos:end="135:36">(<expr pos:start="135:13" pos:end="135:35"><name pos:start="135:13" pos:end="135:22"><name pos:start="135:13" pos:end="135:13">s</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:22">version</name></name> <operator pos:start="135:24" pos:end="135:25">||</operator> <name pos:start="135:27" pos:end="135:35"><name pos:start="135:27" pos:end="135:27">s</name><operator pos:start="135:28" pos:end="135:29">-&gt;</operator><name pos:start="135:30" pos:end="135:35">theora</name></name></expr>)</condition>

        <block pos:start="137:9" pos:end="145:9">{<block_content pos:start="139:17" pos:end="143:30">

                <if_stmt pos:start="139:17" pos:end="141:100"><if pos:start="139:17" pos:end="141:100">if <condition pos:start="139:20" pos:end="139:35">(<expr pos:start="139:21" pos:end="139:34"><call pos:start="139:21" pos:end="139:34"><name pos:start="139:21" pos:end="139:29">get_bits1</name><argument_list pos:start="139:30" pos:end="139:34">(<argument pos:start="139:31" pos:end="139:33"><expr pos:start="139:31" pos:end="139:33"><operator pos:start="139:31" pos:end="139:31">&amp;</operator><name pos:start="139:32" pos:end="139:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="141:21" pos:end="141:100"><block_content pos:start="141:21" pos:end="141:100">

                    <expr_stmt pos:start="141:21" pos:end="141:100"><expr pos:start="141:21" pos:end="141:99"><call pos:start="141:21" pos:end="141:99"><name pos:start="141:21" pos:end="141:26">av_log</name><argument_list pos:start="141:27" pos:end="141:99">(<argument pos:start="141:28" pos:end="141:35"><expr pos:start="141:28" pos:end="141:35"><name pos:start="141:28" pos:end="141:35"><name pos:start="141:28" pos:end="141:28">s</name><operator pos:start="141:29" pos:end="141:30">-&gt;</operator><name pos:start="141:31" pos:end="141:35">avctx</name></name></expr></argument>, <argument pos:start="141:38" pos:end="141:49"><expr pos:start="141:38" pos:end="141:49"><name pos:start="141:38" pos:end="141:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="141:52" pos:end="141:98"><expr pos:start="141:52" pos:end="141:98"><literal type="string" pos:start="141:52" pos:end="141:98">"Warning, unsupported keyframe coding type?!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:30"><expr pos:start="143:13" pos:end="143:29"><call pos:start="143:13" pos:end="143:29"><name pos:start="143:13" pos:end="143:21">skip_bits</name><argument_list pos:start="143:22" pos:end="143:29">(<argument pos:start="143:23" pos:end="143:25"><expr pos:start="143:23" pos:end="143:25"><operator pos:start="143:23" pos:end="143:23">&amp;</operator><name pos:start="143:24" pos:end="143:25">gb</name></expr></argument>, <argument pos:start="143:28" pos:end="143:28"><expr pos:start="143:28" pos:end="143:28"><literal type="number" pos:start="143:28" pos:end="143:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="143:32" pos:end="143:46">/* reserved? */</comment>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="149:9" pos:end="167:9"><if pos:start="149:9" pos:end="157:9">if <condition pos:start="149:12" pos:end="149:61">(<expr pos:start="149:13" pos:end="149:60"><name pos:start="149:13" pos:end="149:33"><name pos:start="149:13" pos:end="149:13">s</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:25">last_frame</name><operator pos:start="149:26" pos:end="149:26">.</operator><name pos:start="149:27" pos:end="149:30">data</name><index pos:start="149:31" pos:end="149:33">[<expr pos:start="149:32" pos:end="149:32"><literal type="number" pos:start="149:32" pos:end="149:32">0</literal></expr>]</index></name> <operator pos:start="149:35" pos:end="149:36">==</operator> <name pos:start="149:38" pos:end="149:60"><name pos:start="149:38" pos:end="149:38">s</name><operator pos:start="149:39" pos:end="149:40">-&gt;</operator><name pos:start="149:41" pos:end="149:52">golden_frame</name><operator pos:start="149:53" pos:end="149:53">.</operator><name pos:start="149:54" pos:end="149:57">data</name><index pos:start="149:58" pos:end="149:60">[<expr pos:start="149:59" pos:end="149:59"><literal type="number" pos:start="149:59" pos:end="149:59">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="149:63" pos:end="157:9">{<block_content pos:start="151:13" pos:end="155:43">

            <if_stmt pos:start="151:13" pos:end="153:63"><if pos:start="151:13" pos:end="153:63">if <condition pos:start="151:16" pos:end="151:40">(<expr pos:start="151:17" pos:end="151:39"><name pos:start="151:17" pos:end="151:39"><name pos:start="151:17" pos:end="151:17">s</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:31">golden_frame</name><operator pos:start="151:32" pos:end="151:32">.</operator><name pos:start="151:33" pos:end="151:36">data</name><index pos:start="151:37" pos:end="151:39">[<expr pos:start="151:38" pos:end="151:38"><literal type="number" pos:start="151:38" pos:end="151:38">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="153:17" pos:end="153:63"><block_content pos:start="153:17" pos:end="153:63">

                <expr_stmt pos:start="153:17" pos:end="153:63"><expr pos:start="153:17" pos:end="153:62"><call pos:start="153:17" pos:end="153:62"><name pos:start="153:17" pos:end="153:37"><name pos:start="153:17" pos:end="153:21">avctx</name><operator pos:start="153:22" pos:end="153:23">-&gt;</operator><name pos:start="153:24" pos:end="153:37">release_buffer</name></name><argument_list pos:start="153:38" pos:end="153:62">(<argument pos:start="153:39" pos:end="153:43"><expr pos:start="153:39" pos:end="153:43"><name pos:start="153:39" pos:end="153:43">avctx</name></expr></argument>, <argument pos:start="153:46" pos:end="153:61"><expr pos:start="153:46" pos:end="153:61"><operator pos:start="153:46" pos:end="153:46">&amp;</operator><name pos:start="153:47" pos:end="153:61"><name pos:start="153:47" pos:end="153:47">s</name><operator pos:start="153:48" pos:end="153:49">-&gt;</operator><name pos:start="153:50" pos:end="153:61">golden_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:43"><expr pos:start="155:13" pos:end="155:42"><name pos:start="155:13" pos:end="155:25"><name pos:start="155:13" pos:end="155:13">s</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:25">last_frame</name></name><operator pos:start="155:26" pos:end="155:26">=</operator> <name pos:start="155:28" pos:end="155:42"><name pos:start="155:28" pos:end="155:28">s</name><operator pos:start="155:29" pos:end="155:30">-&gt;</operator><name pos:start="155:31" pos:end="155:42">golden_frame</name></name></expr>;</expr_stmt> <comment type="block" pos:start="155:45" pos:end="155:104">/* ensure that we catch any access to this released frame */</comment>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="167:9">else <block pos:start="157:16" pos:end="167:9">{<block_content pos:start="159:13" pos:end="165:61">

            <if_stmt pos:start="159:13" pos:end="161:63"><if pos:start="159:13" pos:end="161:63">if <condition pos:start="159:16" pos:end="159:40">(<expr pos:start="159:17" pos:end="159:39"><name pos:start="159:17" pos:end="159:39"><name pos:start="159:17" pos:end="159:17">s</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:31">golden_frame</name><operator pos:start="159:32" pos:end="159:32">.</operator><name pos:start="159:33" pos:end="159:36">data</name><index pos:start="159:37" pos:end="159:39">[<expr pos:start="159:38" pos:end="159:38"><literal type="number" pos:start="159:38" pos:end="159:38">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="161:17" pos:end="161:63"><block_content pos:start="161:17" pos:end="161:63">

                <expr_stmt pos:start="161:17" pos:end="161:63"><expr pos:start="161:17" pos:end="161:62"><call pos:start="161:17" pos:end="161:62"><name pos:start="161:17" pos:end="161:37"><name pos:start="161:17" pos:end="161:21">avctx</name><operator pos:start="161:22" pos:end="161:23">-&gt;</operator><name pos:start="161:24" pos:end="161:37">release_buffer</name></name><argument_list pos:start="161:38" pos:end="161:62">(<argument pos:start="161:39" pos:end="161:43"><expr pos:start="161:39" pos:end="161:43"><name pos:start="161:39" pos:end="161:43">avctx</name></expr></argument>, <argument pos:start="161:46" pos:end="161:61"><expr pos:start="161:46" pos:end="161:61"><operator pos:start="161:46" pos:end="161:46">&amp;</operator><name pos:start="161:47" pos:end="161:61"><name pos:start="161:47" pos:end="161:47">s</name><operator pos:start="161:48" pos:end="161:49">-&gt;</operator><name pos:start="161:50" pos:end="161:61">golden_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="163:13" pos:end="165:61"><if pos:start="163:13" pos:end="165:61">if <condition pos:start="163:16" pos:end="163:38">(<expr pos:start="163:17" pos:end="163:37"><name pos:start="163:17" pos:end="163:37"><name pos:start="163:17" pos:end="163:17">s</name><operator pos:start="163:18" pos:end="163:19">-&gt;</operator><name pos:start="163:20" pos:end="163:29">last_frame</name><operator pos:start="163:30" pos:end="163:30">.</operator><name pos:start="163:31" pos:end="163:34">data</name><index pos:start="163:35" pos:end="163:37">[<expr pos:start="163:36" pos:end="163:36"><literal type="number" pos:start="163:36" pos:end="163:36">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="165:17" pos:end="165:61"><block_content pos:start="165:17" pos:end="165:61">

                <expr_stmt pos:start="165:17" pos:end="165:61"><expr pos:start="165:17" pos:end="165:60"><call pos:start="165:17" pos:end="165:60"><name pos:start="165:17" pos:end="165:37"><name pos:start="165:17" pos:end="165:21">avctx</name><operator pos:start="165:22" pos:end="165:23">-&gt;</operator><name pos:start="165:24" pos:end="165:37">release_buffer</name></name><argument_list pos:start="165:38" pos:end="165:60">(<argument pos:start="165:39" pos:end="165:43"><expr pos:start="165:39" pos:end="165:43"><name pos:start="165:39" pos:end="165:43">avctx</name></expr></argument>, <argument pos:start="165:46" pos:end="165:59"><expr pos:start="165:46" pos:end="165:59"><operator pos:start="165:46" pos:end="165:46">&amp;</operator><name pos:start="165:47" pos:end="165:59"><name pos:start="165:47" pos:end="165:47">s</name><operator pos:start="165:48" pos:end="165:49">-&gt;</operator><name pos:start="165:50" pos:end="165:59">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="171:9" pos:end="171:38"><expr pos:start="171:9" pos:end="171:37"><name pos:start="171:9" pos:end="171:33"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:23">golden_frame</name><operator pos:start="171:24" pos:end="171:24">.</operator><name pos:start="171:25" pos:end="171:33">reference</name></name> <operator pos:start="171:35" pos:end="171:35">=</operator> <literal type="number" pos:start="171:37" pos:end="171:37">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="173:9" pos:end="179:9"><if pos:start="173:9" pos:end="179:9">if<condition pos:start="173:11" pos:end="173:58">(<expr pos:start="173:12" pos:end="173:57"><call pos:start="173:12" pos:end="173:53"><name pos:start="173:12" pos:end="173:28"><name pos:start="173:12" pos:end="173:16">avctx</name><operator pos:start="173:17" pos:end="173:18">-&gt;</operator><name pos:start="173:19" pos:end="173:28">get_buffer</name></name><argument_list pos:start="173:29" pos:end="173:53">(<argument pos:start="173:30" pos:end="173:34"><expr pos:start="173:30" pos:end="173:34"><name pos:start="173:30" pos:end="173:34">avctx</name></expr></argument>, <argument pos:start="173:37" pos:end="173:52"><expr pos:start="173:37" pos:end="173:52"><operator pos:start="173:37" pos:end="173:37">&amp;</operator><name pos:start="173:38" pos:end="173:52"><name pos:start="173:38" pos:end="173:38">s</name><operator pos:start="173:39" pos:end="173:40">-&gt;</operator><name pos:start="173:41" pos:end="173:52">golden_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="173:55" pos:end="173:55">&lt;</operator> <literal type="number" pos:start="173:57" pos:end="173:57">0</literal></expr>)</condition> <block pos:start="173:60" pos:end="179:9">{<block_content pos:start="175:13" pos:end="177:22">

            <expr_stmt pos:start="175:13" pos:end="175:73"><expr pos:start="175:13" pos:end="175:72"><call pos:start="175:13" pos:end="175:72"><name pos:start="175:13" pos:end="175:18">av_log</name><argument_list pos:start="175:19" pos:end="175:72">(<argument pos:start="175:20" pos:end="175:27"><expr pos:start="175:20" pos:end="175:27"><name pos:start="175:20" pos:end="175:27"><name pos:start="175:20" pos:end="175:20">s</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:27">avctx</name></name></expr></argument>, <argument pos:start="175:30" pos:end="175:41"><expr pos:start="175:30" pos:end="175:41"><name pos:start="175:30" pos:end="175:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="175:44" pos:end="175:71"><expr pos:start="175:44" pos:end="175:71"><literal type="string" pos:start="175:44" pos:end="175:71">"vp3: get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="177:13" pos:end="177:22">return <expr pos:start="177:20" pos:end="177:21"><operator pos:start="177:20" pos:end="177:20">-</operator><literal type="number" pos:start="177:21" pos:end="177:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="183:9" pos:end="183:52">/* golden frame is also the current frame */</comment>

        <expr_stmt pos:start="185:9" pos:end="185:69"><expr pos:start="185:9" pos:end="185:68"><call pos:start="185:9" pos:end="185:68"><name pos:start="185:9" pos:end="185:14">memcpy</name><argument_list pos:start="185:15" pos:end="185:68">(<argument pos:start="185:16" pos:end="185:32"><expr pos:start="185:16" pos:end="185:32"><operator pos:start="185:16" pos:end="185:16">&amp;</operator><name pos:start="185:17" pos:end="185:32"><name pos:start="185:17" pos:end="185:17">s</name><operator pos:start="185:18" pos:end="185:19">-&gt;</operator><name pos:start="185:20" pos:end="185:32">current_frame</name></name></expr></argument>, <argument pos:start="185:35" pos:end="185:50"><expr pos:start="185:35" pos:end="185:50"><operator pos:start="185:35" pos:end="185:35">&amp;</operator><name pos:start="185:36" pos:end="185:50"><name pos:start="185:36" pos:end="185:36">s</name><operator pos:start="185:37" pos:end="185:38">-&gt;</operator><name pos:start="185:39" pos:end="185:50">golden_frame</name></name></expr></argument>, <argument pos:start="185:53" pos:end="185:67"><expr pos:start="185:53" pos:end="185:67"><sizeof pos:start="185:53" pos:end="185:67">sizeof<argument_list pos:start="185:59" pos:end="185:67">(<argument pos:start="185:60" pos:end="185:66"><expr pos:start="185:60" pos:end="185:66"><name pos:start="185:60" pos:end="185:66">AVFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="189:9" pos:end="189:49">/* time to figure out pixel addresses? */</comment>

        <if_stmt pos:start="191:9" pos:end="203:9"><if pos:start="191:9" pos:end="203:9">if <condition pos:start="191:12" pos:end="191:39">(<expr pos:start="191:13" pos:end="191:38"><operator pos:start="191:13" pos:end="191:13">!</operator><name pos:start="191:14" pos:end="191:38"><name pos:start="191:14" pos:end="191:14">s</name><operator pos:start="191:15" pos:end="191:16">-&gt;</operator><name pos:start="191:17" pos:end="191:38">pixel_addresses_inited</name></name></expr>)</condition>

        <block pos:start="193:9" pos:end="203:9">{<block_content pos:start="195:13" pos:end="201:52">

            <if_stmt pos:start="195:13" pos:end="201:52"><if pos:start="195:13" pos:end="197:49">if <condition pos:start="195:16" pos:end="195:34">(<expr pos:start="195:17" pos:end="195:33"><operator pos:start="195:17" pos:end="195:17">!</operator><name pos:start="195:18" pos:end="195:33"><name pos:start="195:18" pos:end="195:18">s</name><operator pos:start="195:19" pos:end="195:20">-&gt;</operator><name pos:start="195:21" pos:end="195:33">flipped_image</name></name></expr>)</condition><block type="pseudo" pos:start="197:17" pos:end="197:49"><block_content pos:start="197:17" pos:end="197:49">

                <expr_stmt pos:start="197:17" pos:end="197:49"><expr pos:start="197:17" pos:end="197:48"><call pos:start="197:17" pos:end="197:48"><name pos:start="197:17" pos:end="197:45">vp3_calculate_pixel_addresses</name><argument_list pos:start="197:46" pos:end="197:48">(<argument pos:start="197:47" pos:end="197:47"><expr pos:start="197:47" pos:end="197:47"><name pos:start="197:47" pos:end="197:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="199:13" pos:end="201:52">else<block type="pseudo" pos:start="201:17" pos:end="201:52"><block_content pos:start="201:17" pos:end="201:52">

                <expr_stmt pos:start="201:17" pos:end="201:52"><expr pos:start="201:17" pos:end="201:51"><call pos:start="201:17" pos:end="201:51"><name pos:start="201:17" pos:end="201:48">theora_calculate_pixel_addresses</name><argument_list pos:start="201:49" pos:end="201:51">(<argument pos:start="201:50" pos:end="201:50"><expr pos:start="201:50" pos:end="201:50"><name pos:start="201:50" pos:end="201:50">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="205:7" pos:end="219:5">else <block pos:start="205:12" pos:end="219:5">{<block_content pos:start="209:9" pos:end="217:9">

        <comment type="block" pos:start="207:9" pos:end="207:42">/* allocate a new current frame */</comment>

        <expr_stmt pos:start="209:9" pos:end="209:39"><expr pos:start="209:9" pos:end="209:38"><name pos:start="209:9" pos:end="209:34"><name pos:start="209:9" pos:end="209:9">s</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:24">current_frame</name><operator pos:start="209:25" pos:end="209:25">.</operator><name pos:start="209:26" pos:end="209:34">reference</name></name> <operator pos:start="209:36" pos:end="209:36">=</operator> <literal type="number" pos:start="209:38" pos:end="209:38">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="217:9"><if pos:start="211:9" pos:end="217:9">if<condition pos:start="211:11" pos:end="211:59">(<expr pos:start="211:12" pos:end="211:58"><call pos:start="211:12" pos:end="211:54"><name pos:start="211:12" pos:end="211:28"><name pos:start="211:12" pos:end="211:16">avctx</name><operator pos:start="211:17" pos:end="211:18">-&gt;</operator><name pos:start="211:19" pos:end="211:28">get_buffer</name></name><argument_list pos:start="211:29" pos:end="211:54">(<argument pos:start="211:30" pos:end="211:34"><expr pos:start="211:30" pos:end="211:34"><name pos:start="211:30" pos:end="211:34">avctx</name></expr></argument>, <argument pos:start="211:37" pos:end="211:53"><expr pos:start="211:37" pos:end="211:53"><operator pos:start="211:37" pos:end="211:37">&amp;</operator><name pos:start="211:38" pos:end="211:53"><name pos:start="211:38" pos:end="211:38">s</name><operator pos:start="211:39" pos:end="211:40">-&gt;</operator><name pos:start="211:41" pos:end="211:53">current_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="211:56" pos:end="211:56">&lt;</operator> <literal type="number" pos:start="211:58" pos:end="211:58">0</literal></expr>)</condition> <block pos:start="211:61" pos:end="217:9">{<block_content pos:start="213:13" pos:end="215:22">

            <expr_stmt pos:start="213:13" pos:end="213:73"><expr pos:start="213:13" pos:end="213:72"><call pos:start="213:13" pos:end="213:72"><name pos:start="213:13" pos:end="213:18">av_log</name><argument_list pos:start="213:19" pos:end="213:72">(<argument pos:start="213:20" pos:end="213:27"><expr pos:start="213:20" pos:end="213:27"><name pos:start="213:20" pos:end="213:27"><name pos:start="213:20" pos:end="213:20">s</name><operator pos:start="213:21" pos:end="213:22">-&gt;</operator><name pos:start="213:23" pos:end="213:27">avctx</name></name></expr></argument>, <argument pos:start="213:30" pos:end="213:41"><expr pos:start="213:30" pos:end="213:41"><name pos:start="213:30" pos:end="213:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="213:44" pos:end="213:71"><expr pos:start="213:44" pos:end="213:71"><literal type="string" pos:start="213:44" pos:end="213:71">"vp3: get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="215:13" pos:end="215:22">return <expr pos:start="215:20" pos:end="215:21"><operator pos:start="215:20" pos:end="215:20">-</operator><literal type="number" pos:start="215:21" pos:end="215:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:51"><expr pos:start="223:5" pos:end="223:50"><name pos:start="223:5" pos:end="223:33"><name pos:start="223:5" pos:end="223:5">s</name><operator pos:start="223:6" pos:end="223:7">-&gt;</operator><name pos:start="223:8" pos:end="223:20">current_frame</name><operator pos:start="223:21" pos:end="223:21">.</operator><name pos:start="223:22" pos:end="223:33">qscale_table</name></name><operator pos:start="223:34" pos:end="223:34">=</operator> <name pos:start="223:36" pos:end="223:50"><name pos:start="223:36" pos:end="223:36">s</name><operator pos:start="223:37" pos:end="223:38">-&gt;</operator><name pos:start="223:39" pos:end="223:50">qscale_table</name></name></expr>;</expr_stmt> <comment type="line" pos:start="223:53" pos:end="223:98">//FIXME allocate individual tables per AVFrame</comment>

    <expr_stmt pos:start="225:5" pos:end="225:32"><expr pos:start="225:5" pos:end="225:31"><name pos:start="225:5" pos:end="225:28"><name pos:start="225:5" pos:end="225:5">s</name><operator pos:start="225:6" pos:end="225:7">-&gt;</operator><name pos:start="225:8" pos:end="225:20">current_frame</name><operator pos:start="225:21" pos:end="225:21">.</operator><name pos:start="225:22" pos:end="225:28">qstride</name></name><operator pos:start="225:29" pos:end="225:29">=</operator> <literal type="number" pos:start="225:31" pos:end="225:31">0</literal></expr>;</expr_stmt>



    <block pos:start="229:5" pos:end="238:0">{<block_content pos:start="229:6" pos:end="233:28"><decl_stmt pos:start="229:6" pos:end="231:23"><decl pos:start="229:6" pos:end="231:22"><type pos:start="229:6" pos:end="229:16"><name pos:start="229:6" pos:end="229:16">START_TIMER</name></type>

    <name pos:start="231:5" pos:end="231:14">init_frame</name><argument_list pos:start="231:15" pos:end="231:22">(<argument pos:start="231:16" pos:end="231:16"><expr pos:start="231:16" pos:end="231:16"><name pos:start="231:16" pos:end="231:16">s</name></expr></argument>, <argument pos:start="231:19" pos:end="231:21"><expr pos:start="231:19" pos:end="231:21"><operator pos:start="231:19" pos:end="231:19">&amp;</operator><name pos:start="231:20" pos:end="231:21">gb</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <macro pos:start="233:5" pos:end="233:28"><name pos:start="233:5" pos:end="233:14">STOP_TIMER</name><argument_list pos:start="233:15" pos:end="233:28">(<argument pos:start="233:16" pos:end="233:27"><literal type="string" pos:start="233:16" pos:end="233:27">"init_frame"</literal></argument>)</argument_list></macro></block_content>}</block>



<cpp:if pos:start="237:1" pos:end="237:18">#<cpp:directive pos:start="237:2" pos:end="237:3">if</cpp:directive> <expr pos:start="237:5" pos:end="237:18"><name pos:start="237:5" pos:end="237:18">KEYFRAMES_ONLY</name></expr></cpp:if>

<if_stmt pos:start="239:1" pos:end="354:0"><if pos:start="239:1" pos:end="257:1">if <condition pos:start="239:4" pos:end="239:17">(<expr pos:start="239:5" pos:end="239:16"><operator pos:start="239:5" pos:end="239:5">!</operator><name pos:start="239:6" pos:end="239:16"><name pos:start="239:6" pos:end="239:6">s</name><operator pos:start="239:7" pos:end="239:8">-&gt;</operator><name pos:start="239:9" pos:end="239:16">keyframe</name></name></expr>)</condition> <block pos:start="239:19" pos:end="257:1">{<block_content pos:start="243:5" pos:end="253:54">



    <expr_stmt pos:start="243:5" pos:end="245:50"><expr pos:start="243:5" pos:end="245:49"><call pos:start="243:5" pos:end="245:49"><name pos:start="243:5" pos:end="243:10">memcpy</name><argument_list pos:start="243:11" pos:end="245:49">(<argument pos:start="243:12" pos:end="243:35"><expr pos:start="243:12" pos:end="243:35"><name pos:start="243:12" pos:end="243:35"><name pos:start="243:12" pos:end="243:12">s</name><operator pos:start="243:13" pos:end="243:14">-&gt;</operator><name pos:start="243:15" pos:end="243:27">current_frame</name><operator pos:start="243:28" pos:end="243:28">.</operator><name pos:start="243:29" pos:end="243:32">data</name><index pos:start="243:33" pos:end="243:35">[<expr pos:start="243:34" pos:end="243:34"><literal type="number" pos:start="243:34" pos:end="243:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="243:38" pos:end="243:60"><expr pos:start="243:38" pos:end="243:60"><name pos:start="243:38" pos:end="243:60"><name pos:start="243:38" pos:end="243:38">s</name><operator pos:start="243:39" pos:end="243:40">-&gt;</operator><name pos:start="243:41" pos:end="243:52">golden_frame</name><operator pos:start="243:53" pos:end="243:53">.</operator><name pos:start="243:54" pos:end="243:57">data</name><index pos:start="243:58" pos:end="243:60">[<expr pos:start="243:59" pos:end="243:59"><literal type="number" pos:start="243:59" pos:end="243:59">0</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="245:9" pos:end="245:48"><expr pos:start="245:9" pos:end="245:48"><name pos:start="245:9" pos:end="245:36"><name pos:start="245:9" pos:end="245:9">s</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:24">current_frame</name><operator pos:start="245:25" pos:end="245:25">.</operator><name pos:start="245:26" pos:end="245:33">linesize</name><index pos:start="245:34" pos:end="245:36">[<expr pos:start="245:35" pos:end="245:35"><literal type="number" pos:start="245:35" pos:end="245:35">0</literal></expr>]</index></name> <operator pos:start="245:38" pos:end="245:38">*</operator> <name pos:start="245:40" pos:end="245:48"><name pos:start="245:40" pos:end="245:40">s</name><operator pos:start="245:41" pos:end="245:42">-&gt;</operator><name pos:start="245:43" pos:end="245:48">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="249:54"><expr pos:start="247:5" pos:end="249:53"><call pos:start="247:5" pos:end="249:53"><name pos:start="247:5" pos:end="247:10">memcpy</name><argument_list pos:start="247:11" pos:end="249:53">(<argument pos:start="247:12" pos:end="247:35"><expr pos:start="247:12" pos:end="247:35"><name pos:start="247:12" pos:end="247:35"><name pos:start="247:12" pos:end="247:12">s</name><operator pos:start="247:13" pos:end="247:14">-&gt;</operator><name pos:start="247:15" pos:end="247:27">current_frame</name><operator pos:start="247:28" pos:end="247:28">.</operator><name pos:start="247:29" pos:end="247:32">data</name><index pos:start="247:33" pos:end="247:35">[<expr pos:start="247:34" pos:end="247:34"><literal type="number" pos:start="247:34" pos:end="247:34">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="247:38" pos:end="247:60"><expr pos:start="247:38" pos:end="247:60"><name pos:start="247:38" pos:end="247:60"><name pos:start="247:38" pos:end="247:38">s</name><operator pos:start="247:39" pos:end="247:40">-&gt;</operator><name pos:start="247:41" pos:end="247:52">golden_frame</name><operator pos:start="247:53" pos:end="247:53">.</operator><name pos:start="247:54" pos:end="247:57">data</name><index pos:start="247:58" pos:end="247:60">[<expr pos:start="247:59" pos:end="247:59"><literal type="number" pos:start="247:59" pos:end="247:59">1</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="249:9" pos:end="249:52"><expr pos:start="249:9" pos:end="249:52"><name pos:start="249:9" pos:end="249:36"><name pos:start="249:9" pos:end="249:9">s</name><operator pos:start="249:10" pos:end="249:11">-&gt;</operator><name pos:start="249:12" pos:end="249:24">current_frame</name><operator pos:start="249:25" pos:end="249:25">.</operator><name pos:start="249:26" pos:end="249:33">linesize</name><index pos:start="249:34" pos:end="249:36">[<expr pos:start="249:35" pos:end="249:35"><literal type="number" pos:start="249:35" pos:end="249:35">1</literal></expr>]</index></name> <operator pos:start="249:38" pos:end="249:38">*</operator> <name pos:start="249:40" pos:end="249:48"><name pos:start="249:40" pos:end="249:40">s</name><operator pos:start="249:41" pos:end="249:42">-&gt;</operator><name pos:start="249:43" pos:end="249:48">height</name></name> <operator pos:start="249:50" pos:end="249:50">/</operator> <literal type="number" pos:start="249:52" pos:end="249:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="253:54"><expr pos:start="251:5" pos:end="253:53"><call pos:start="251:5" pos:end="253:53"><name pos:start="251:5" pos:end="251:10">memcpy</name><argument_list pos:start="251:11" pos:end="253:53">(<argument pos:start="251:12" pos:end="251:35"><expr pos:start="251:12" pos:end="251:35"><name pos:start="251:12" pos:end="251:35"><name pos:start="251:12" pos:end="251:12">s</name><operator pos:start="251:13" pos:end="251:14">-&gt;</operator><name pos:start="251:15" pos:end="251:27">current_frame</name><operator pos:start="251:28" pos:end="251:28">.</operator><name pos:start="251:29" pos:end="251:32">data</name><index pos:start="251:33" pos:end="251:35">[<expr pos:start="251:34" pos:end="251:34"><literal type="number" pos:start="251:34" pos:end="251:34">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="251:38" pos:end="251:60"><expr pos:start="251:38" pos:end="251:60"><name pos:start="251:38" pos:end="251:60"><name pos:start="251:38" pos:end="251:38">s</name><operator pos:start="251:39" pos:end="251:40">-&gt;</operator><name pos:start="251:41" pos:end="251:52">golden_frame</name><operator pos:start="251:53" pos:end="251:53">.</operator><name pos:start="251:54" pos:end="251:57">data</name><index pos:start="251:58" pos:end="251:60">[<expr pos:start="251:59" pos:end="251:59"><literal type="number" pos:start="251:59" pos:end="251:59">2</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="253:9" pos:end="253:52"><expr pos:start="253:9" pos:end="253:52"><name pos:start="253:9" pos:end="253:36"><name pos:start="253:9" pos:end="253:9">s</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:24">current_frame</name><operator pos:start="253:25" pos:end="253:25">.</operator><name pos:start="253:26" pos:end="253:33">linesize</name><index pos:start="253:34" pos:end="253:36">[<expr pos:start="253:35" pos:end="253:35"><literal type="number" pos:start="253:35" pos:end="253:35">2</literal></expr>]</index></name> <operator pos:start="253:38" pos:end="253:38">*</operator> <name pos:start="253:40" pos:end="253:48"><name pos:start="253:40" pos:end="253:40">s</name><operator pos:start="253:41" pos:end="253:42">-&gt;</operator><name pos:start="253:43" pos:end="253:48">height</name></name> <operator pos:start="253:50" pos:end="253:50">/</operator> <literal type="number" pos:start="253:52" pos:end="253:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></if> <else pos:start="257:3" pos:end="354:0">else <block pos:start="257:8" pos:end="354:0">{<block_content pos:start="263:5" pos:end="350:0">

<cpp:endif pos:start="259:1" pos:end="259:6">#<cpp:directive pos:start="259:2" pos:end="259:6">endif</cpp:directive></cpp:endif>



    <block pos:start="263:5" pos:end="273:37">{<block_content pos:start="263:6" pos:end="273:36"><macro pos:start="263:6" pos:end="263:16"><name pos:start="263:6" pos:end="263:16">START_TIMER</name></macro>

    <if_stmt pos:start="265:5" pos:end="271:5"><if pos:start="265:5" pos:end="271:5">if <condition pos:start="265:8" pos:end="265:35">(<expr pos:start="265:9" pos:end="265:34"><call pos:start="265:9" pos:end="265:34"><name pos:start="265:9" pos:end="265:26">unpack_superblocks</name><argument_list pos:start="265:27" pos:end="265:34">(<argument pos:start="265:28" pos:end="265:28"><expr pos:start="265:28" pos:end="265:28"><name pos:start="265:28" pos:end="265:28">s</name></expr></argument>, <argument pos:start="265:31" pos:end="265:33"><expr pos:start="265:31" pos:end="265:33"><operator pos:start="265:31" pos:end="265:31">&amp;</operator><name pos:start="265:32" pos:end="265:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="265:36" pos:end="271:5">{<block_content pos:start="267:9" pos:end="269:18">

        <expr_stmt pos:start="267:9" pos:end="267:72"><expr pos:start="267:9" pos:end="267:71"><call pos:start="267:9" pos:end="267:71"><name pos:start="267:9" pos:end="267:14">av_log</name><argument_list pos:start="267:15" pos:end="267:71">(<argument pos:start="267:16" pos:end="267:23"><expr pos:start="267:16" pos:end="267:23"><name pos:start="267:16" pos:end="267:23"><name pos:start="267:16" pos:end="267:16">s</name><operator pos:start="267:17" pos:end="267:18">-&gt;</operator><name pos:start="267:19" pos:end="267:23">avctx</name></name></expr></argument>, <argument pos:start="267:26" pos:end="267:37"><expr pos:start="267:26" pos:end="267:37"><name pos:start="267:26" pos:end="267:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="267:40" pos:end="267:70"><expr pos:start="267:40" pos:end="267:70"><literal type="string" pos:start="267:40" pos:end="267:70">"error in unpack_superblocks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="269:9" pos:end="269:18">return <expr pos:start="269:16" pos:end="269:17"><operator pos:start="269:16" pos:end="269:16">-</operator><literal type="number" pos:start="269:17" pos:end="269:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <macro pos:start="273:5" pos:end="273:36"><name pos:start="273:5" pos:end="273:14">STOP_TIMER</name><argument_list pos:start="273:15" pos:end="273:36">(<argument pos:start="273:16" pos:end="273:35"><literal type="string" pos:start="273:16" pos:end="273:35">"unpack_superblocks"</literal></argument>)</argument_list></macro></block_content>}</block>

    <block pos:start="275:5" pos:end="285:31">{<block_content pos:start="275:6" pos:end="285:30"><macro pos:start="275:6" pos:end="275:16"><name pos:start="275:6" pos:end="275:16">START_TIMER</name></macro>

    <if_stmt pos:start="277:5" pos:end="283:5"><if pos:start="277:5" pos:end="283:5">if <condition pos:start="277:8" pos:end="277:29">(<expr pos:start="277:9" pos:end="277:28"><call pos:start="277:9" pos:end="277:28"><name pos:start="277:9" pos:end="277:20">unpack_modes</name><argument_list pos:start="277:21" pos:end="277:28">(<argument pos:start="277:22" pos:end="277:22"><expr pos:start="277:22" pos:end="277:22"><name pos:start="277:22" pos:end="277:22">s</name></expr></argument>, <argument pos:start="277:25" pos:end="277:27"><expr pos:start="277:25" pos:end="277:27"><operator pos:start="277:25" pos:end="277:25">&amp;</operator><name pos:start="277:26" pos:end="277:27">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="277:30" pos:end="283:5">{<block_content pos:start="279:9" pos:end="281:18">

        <expr_stmt pos:start="279:9" pos:end="279:66"><expr pos:start="279:9" pos:end="279:65"><call pos:start="279:9" pos:end="279:65"><name pos:start="279:9" pos:end="279:14">av_log</name><argument_list pos:start="279:15" pos:end="279:65">(<argument pos:start="279:16" pos:end="279:23"><expr pos:start="279:16" pos:end="279:23"><name pos:start="279:16" pos:end="279:23"><name pos:start="279:16" pos:end="279:16">s</name><operator pos:start="279:17" pos:end="279:18">-&gt;</operator><name pos:start="279:19" pos:end="279:23">avctx</name></name></expr></argument>, <argument pos:start="279:26" pos:end="279:37"><expr pos:start="279:26" pos:end="279:37"><name pos:start="279:26" pos:end="279:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="279:40" pos:end="279:64"><expr pos:start="279:40" pos:end="279:64"><literal type="string" pos:start="279:40" pos:end="279:64">"error in unpack_modes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="281:9" pos:end="281:18">return <expr pos:start="281:16" pos:end="281:17"><operator pos:start="281:16" pos:end="281:16">-</operator><literal type="number" pos:start="281:17" pos:end="281:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <macro pos:start="285:5" pos:end="285:30"><name pos:start="285:5" pos:end="285:14">STOP_TIMER</name><argument_list pos:start="285:15" pos:end="285:30">(<argument pos:start="285:16" pos:end="285:29"><literal type="string" pos:start="285:16" pos:end="285:29">"unpack_modes"</literal></argument>)</argument_list></macro></block_content>}</block>

    <block pos:start="287:5" pos:end="297:33">{<block_content pos:start="287:6" pos:end="297:32"><macro pos:start="287:6" pos:end="287:16"><name pos:start="287:6" pos:end="287:16">START_TIMER</name></macro>

    <if_stmt pos:start="289:5" pos:end="295:5"><if pos:start="289:5" pos:end="295:5">if <condition pos:start="289:8" pos:end="289:31">(<expr pos:start="289:9" pos:end="289:30"><call pos:start="289:9" pos:end="289:30"><name pos:start="289:9" pos:end="289:22">unpack_vectors</name><argument_list pos:start="289:23" pos:end="289:30">(<argument pos:start="289:24" pos:end="289:24"><expr pos:start="289:24" pos:end="289:24"><name pos:start="289:24" pos:end="289:24">s</name></expr></argument>, <argument pos:start="289:27" pos:end="289:29"><expr pos:start="289:27" pos:end="289:29"><operator pos:start="289:27" pos:end="289:27">&amp;</operator><name pos:start="289:28" pos:end="289:29">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="289:32" pos:end="295:5">{<block_content pos:start="291:9" pos:end="293:18">

        <expr_stmt pos:start="291:9" pos:end="291:68"><expr pos:start="291:9" pos:end="291:67"><call pos:start="291:9" pos:end="291:67"><name pos:start="291:9" pos:end="291:14">av_log</name><argument_list pos:start="291:15" pos:end="291:67">(<argument pos:start="291:16" pos:end="291:23"><expr pos:start="291:16" pos:end="291:23"><name pos:start="291:16" pos:end="291:23"><name pos:start="291:16" pos:end="291:16">s</name><operator pos:start="291:17" pos:end="291:18">-&gt;</operator><name pos:start="291:19" pos:end="291:23">avctx</name></name></expr></argument>, <argument pos:start="291:26" pos:end="291:37"><expr pos:start="291:26" pos:end="291:37"><name pos:start="291:26" pos:end="291:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="291:40" pos:end="291:66"><expr pos:start="291:40" pos:end="291:66"><literal type="string" pos:start="291:40" pos:end="291:66">"error in unpack_vectors\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="293:9" pos:end="293:18">return <expr pos:start="293:16" pos:end="293:17"><operator pos:start="293:16" pos:end="293:16">-</operator><literal type="number" pos:start="293:17" pos:end="293:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <macro pos:start="297:5" pos:end="297:32"><name pos:start="297:5" pos:end="297:14">STOP_TIMER</name><argument_list pos:start="297:15" pos:end="297:32">(<argument pos:start="297:16" pos:end="297:31"><literal type="string" pos:start="297:16" pos:end="297:31">"unpack_vectors"</literal></argument>)</argument_list></macro></block_content>}</block>

    <block pos:start="299:5" pos:end="309:36">{<block_content pos:start="299:6" pos:end="309:35"><macro pos:start="299:6" pos:end="299:16"><name pos:start="299:6" pos:end="299:16">START_TIMER</name></macro>

    <if_stmt pos:start="301:5" pos:end="307:5"><if pos:start="301:5" pos:end="307:5">if <condition pos:start="301:8" pos:end="301:34">(<expr pos:start="301:9" pos:end="301:33"><call pos:start="301:9" pos:end="301:33"><name pos:start="301:9" pos:end="301:25">unpack_dct_coeffs</name><argument_list pos:start="301:26" pos:end="301:33">(<argument pos:start="301:27" pos:end="301:27"><expr pos:start="301:27" pos:end="301:27"><name pos:start="301:27" pos:end="301:27">s</name></expr></argument>, <argument pos:start="301:30" pos:end="301:32"><expr pos:start="301:30" pos:end="301:32"><operator pos:start="301:30" pos:end="301:30">&amp;</operator><name pos:start="301:31" pos:end="301:32">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="301:35" pos:end="307:5">{<block_content pos:start="303:9" pos:end="305:18">

        <expr_stmt pos:start="303:9" pos:end="303:71"><expr pos:start="303:9" pos:end="303:70"><call pos:start="303:9" pos:end="303:70"><name pos:start="303:9" pos:end="303:14">av_log</name><argument_list pos:start="303:15" pos:end="303:70">(<argument pos:start="303:16" pos:end="303:23"><expr pos:start="303:16" pos:end="303:23"><name pos:start="303:16" pos:end="303:23"><name pos:start="303:16" pos:end="303:16">s</name><operator pos:start="303:17" pos:end="303:18">-&gt;</operator><name pos:start="303:19" pos:end="303:23">avctx</name></name></expr></argument>, <argument pos:start="303:26" pos:end="303:37"><expr pos:start="303:26" pos:end="303:37"><name pos:start="303:26" pos:end="303:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="303:40" pos:end="303:69"><expr pos:start="303:40" pos:end="303:69"><literal type="string" pos:start="303:40" pos:end="303:69">"error in unpack_dct_coeffs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="305:9" pos:end="305:18">return <expr pos:start="305:16" pos:end="305:17"><operator pos:start="305:16" pos:end="305:16">-</operator><literal type="number" pos:start="305:17" pos:end="305:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <macro pos:start="309:5" pos:end="309:35"><name pos:start="309:5" pos:end="309:14">STOP_TIMER</name><argument_list pos:start="309:15" pos:end="309:35">(<argument pos:start="309:16" pos:end="309:34"><literal type="string" pos:start="309:16" pos:end="309:34">"unpack_dct_coeffs"</literal></argument>)</argument_list></macro></block_content>}</block>

    <block pos:start="311:5" pos:end="329:40">{<block_content pos:start="311:6" pos:end="329:39"><decl_stmt pos:start="311:6" pos:end="315:71"><decl pos:start="311:6" pos:end="315:70"><type pos:start="311:6" pos:end="311:16"><name pos:start="311:6" pos:end="311:16">START_TIMER</name></type>



    <name pos:start="315:5" pos:end="315:25">reverse_dc_prediction</name><argument_list pos:start="315:26" pos:end="315:70">(<argument pos:start="315:27" pos:end="315:27"><expr pos:start="315:27" pos:end="315:27"><name pos:start="315:27" pos:end="315:27">s</name></expr></argument>, <argument pos:start="315:30" pos:end="315:30"><expr pos:start="315:30" pos:end="315:30"><literal type="number" pos:start="315:30" pos:end="315:30">0</literal></expr></argument>, <argument pos:start="315:33" pos:end="315:49"><expr pos:start="315:33" pos:end="315:49"><name pos:start="315:33" pos:end="315:49"><name pos:start="315:33" pos:end="315:33">s</name><operator pos:start="315:34" pos:end="315:35">-&gt;</operator><name pos:start="315:36" pos:end="315:49">fragment_width</name></name></expr></argument>, <argument pos:start="315:52" pos:end="315:69"><expr pos:start="315:52" pos:end="315:69"><name pos:start="315:52" pos:end="315:69"><name pos:start="315:52" pos:end="315:52">s</name><operator pos:start="315:53" pos:end="315:54">-&gt;</operator><name pos:start="315:55" pos:end="315:69">fragment_height</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if_stmt pos:start="317:5" pos:end="327:5"><if pos:start="317:5" pos:end="327:5">if <condition pos:start="317:8" pos:end="317:46">(<expr pos:start="317:9" pos:end="317:45"><operator pos:start="317:9" pos:end="317:9">(</operator><name pos:start="317:10" pos:end="317:21"><name pos:start="317:10" pos:end="317:14">avctx</name><operator pos:start="317:15" pos:end="317:16">-&gt;</operator><name pos:start="317:17" pos:end="317:21">flags</name></name> <operator pos:start="317:23" pos:end="317:23">&amp;</operator> <name pos:start="317:25" pos:end="317:39">CODEC_FLAG_GRAY</name><operator pos:start="317:40" pos:end="317:40">)</operator> <operator pos:start="317:42" pos:end="317:43">==</operator> <literal type="number" pos:start="317:45" pos:end="317:45">0</literal></expr>)</condition> <block pos:start="317:48" pos:end="327:5">{<block_content pos:start="319:9" pos:end="325:59">

        <expr_stmt pos:start="319:9" pos:end="321:59"><expr pos:start="319:9" pos:end="321:58"><call pos:start="319:9" pos:end="321:58"><name pos:start="319:9" pos:end="319:29">reverse_dc_prediction</name><argument_list pos:start="319:30" pos:end="321:58">(<argument pos:start="319:31" pos:end="319:31"><expr pos:start="319:31" pos:end="319:31"><name pos:start="319:31" pos:end="319:31">s</name></expr></argument>, <argument pos:start="319:34" pos:end="319:52"><expr pos:start="319:34" pos:end="319:52"><name pos:start="319:34" pos:end="319:52"><name pos:start="319:34" pos:end="319:34">s</name><operator pos:start="319:35" pos:end="319:36">-&gt;</operator><name pos:start="319:37" pos:end="319:52">u_fragment_start</name></name></expr></argument>,

            <argument pos:start="321:13" pos:end="321:33"><expr pos:start="321:13" pos:end="321:33"><name pos:start="321:13" pos:end="321:29"><name pos:start="321:13" pos:end="321:13">s</name><operator pos:start="321:14" pos:end="321:15">-&gt;</operator><name pos:start="321:16" pos:end="321:29">fragment_width</name></name> <operator pos:start="321:31" pos:end="321:31">/</operator> <literal type="number" pos:start="321:33" pos:end="321:33">2</literal></expr></argument>, <argument pos:start="321:36" pos:end="321:57"><expr pos:start="321:36" pos:end="321:57"><name pos:start="321:36" pos:end="321:53"><name pos:start="321:36" pos:end="321:36">s</name><operator pos:start="321:37" pos:end="321:38">-&gt;</operator><name pos:start="321:39" pos:end="321:53">fragment_height</name></name> <operator pos:start="321:55" pos:end="321:55">/</operator> <literal type="number" pos:start="321:57" pos:end="321:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="323:9" pos:end="325:59"><expr pos:start="323:9" pos:end="325:58"><call pos:start="323:9" pos:end="325:58"><name pos:start="323:9" pos:end="323:29">reverse_dc_prediction</name><argument_list pos:start="323:30" pos:end="325:58">(<argument pos:start="323:31" pos:end="323:31"><expr pos:start="323:31" pos:end="323:31"><name pos:start="323:31" pos:end="323:31">s</name></expr></argument>, <argument pos:start="323:34" pos:end="323:52"><expr pos:start="323:34" pos:end="323:52"><name pos:start="323:34" pos:end="323:52"><name pos:start="323:34" pos:end="323:34">s</name><operator pos:start="323:35" pos:end="323:36">-&gt;</operator><name pos:start="323:37" pos:end="323:52">v_fragment_start</name></name></expr></argument>,

            <argument pos:start="325:13" pos:end="325:33"><expr pos:start="325:13" pos:end="325:33"><name pos:start="325:13" pos:end="325:29"><name pos:start="325:13" pos:end="325:13">s</name><operator pos:start="325:14" pos:end="325:15">-&gt;</operator><name pos:start="325:16" pos:end="325:29">fragment_width</name></name> <operator pos:start="325:31" pos:end="325:31">/</operator> <literal type="number" pos:start="325:33" pos:end="325:33">2</literal></expr></argument>, <argument pos:start="325:36" pos:end="325:57"><expr pos:start="325:36" pos:end="325:57"><name pos:start="325:36" pos:end="325:53"><name pos:start="325:36" pos:end="325:36">s</name><operator pos:start="325:37" pos:end="325:38">-&gt;</operator><name pos:start="325:39" pos:end="325:53">fragment_height</name></name> <operator pos:start="325:55" pos:end="325:55">/</operator> <literal type="number" pos:start="325:57" pos:end="325:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <macro pos:start="329:5" pos:end="329:39"><name pos:start="329:5" pos:end="329:14">STOP_TIMER</name><argument_list pos:start="329:15" pos:end="329:39">(<argument pos:start="329:16" pos:end="329:38"><literal type="string" pos:start="329:16" pos:end="329:38">"reverse_dc_prediction"</literal></argument>)</argument_list></macro></block_content>}</block>

    <block pos:start="331:5" pos:end="339:35">{<block_content pos:start="331:6" pos:end="339:34"><macro pos:start="331:6" pos:end="331:16"><name pos:start="331:6" pos:end="331:16">START_TIMER</name></macro>



    <for pos:start="335:5" pos:end="337:27">for <control pos:start="335:9" pos:end="335:46">(<init pos:start="335:10" pos:end="335:15"><expr pos:start="335:10" pos:end="335:14"><name pos:start="335:10" pos:end="335:10">i</name> <operator pos:start="335:12" pos:end="335:12">=</operator> <literal type="number" pos:start="335:14" pos:end="335:14">0</literal></expr>;</init> <condition pos:start="335:17" pos:end="335:41"><expr pos:start="335:17" pos:end="335:40"><name pos:start="335:17" pos:end="335:17">i</name> <operator pos:start="335:19" pos:end="335:19">&lt;</operator> <name pos:start="335:21" pos:end="335:40"><name pos:start="335:21" pos:end="335:21">s</name><operator pos:start="335:22" pos:end="335:23">-&gt;</operator><name pos:start="335:24" pos:end="335:40">macroblock_height</name></name></expr>;</condition> <incr pos:start="335:43" pos:end="335:45"><expr pos:start="335:43" pos:end="335:45"><name pos:start="335:43" pos:end="335:43">i</name><operator pos:start="335:44" pos:end="335:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="337:9" pos:end="337:27"><block_content pos:start="337:9" pos:end="337:27">

        <expr_stmt pos:start="337:9" pos:end="337:27"><expr pos:start="337:9" pos:end="337:26"><call pos:start="337:9" pos:end="337:26"><name pos:start="337:9" pos:end="337:20">render_slice</name><argument_list pos:start="337:21" pos:end="337:26">(<argument pos:start="337:22" pos:end="337:22"><expr pos:start="337:22" pos:end="337:22"><name pos:start="337:22" pos:end="337:22">s</name></expr></argument>, <argument pos:start="337:25" pos:end="337:25"><expr pos:start="337:25" pos:end="337:25"><name pos:start="337:25" pos:end="337:25">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <macro pos:start="339:5" pos:end="339:34"><name pos:start="339:5" pos:end="339:14">STOP_TIMER</name><argument_list pos:start="339:15" pos:end="339:34">(<argument pos:start="339:16" pos:end="339:33"><literal type="string" pos:start="339:16" pos:end="339:33">"render_fragments"</literal></argument>)</argument_list></macro></block_content>}</block>



    <block pos:start="343:5" pos:end="350:0">{<block_content pos:start="343:6" pos:end="347:35"><decl_stmt pos:start="343:6" pos:end="345:25"><decl pos:start="343:6" pos:end="345:24"><type pos:start="343:6" pos:end="343:16"><name pos:start="343:6" pos:end="343:16">START_TIMER</name></type>

    <name pos:start="345:5" pos:end="345:21">apply_loop_filter</name><argument_list pos:start="345:22" pos:end="345:24">(<argument pos:start="345:23" pos:end="345:23"><expr pos:start="345:23" pos:end="345:23"><name pos:start="345:23" pos:end="345:23">s</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <macro pos:start="347:5" pos:end="347:35"><name pos:start="347:5" pos:end="347:14">STOP_TIMER</name><argument_list pos:start="347:15" pos:end="347:35">(<argument pos:start="347:16" pos:end="347:34"><literal type="string" pos:start="347:16" pos:end="347:34">"apply_loop_filter"</literal></argument>)</argument_list></macro></block_content>}</block>

<cpp:if pos:start="349:1" pos:end="349:18">#<cpp:directive pos:start="349:2" pos:end="349:3">if</cpp:directive> <expr pos:start="349:5" pos:end="349:18"><name pos:start="349:5" pos:end="349:18">KEYFRAMES_ONLY</name></expr></cpp:if>

</block_content>}</block></else></if_stmt>

<cpp:endif pos:start="353:1" pos:end="353:6">#<cpp:directive pos:start="353:2" pos:end="353:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="357:5" pos:end="357:31"><expr pos:start="357:5" pos:end="357:30"><operator pos:start="357:5" pos:end="357:5">*</operator><name pos:start="357:6" pos:end="357:14">data_size</name><operator pos:start="357:15" pos:end="357:15">=</operator><sizeof pos:start="357:16" pos:end="357:30">sizeof<argument_list pos:start="357:22" pos:end="357:30">(<argument pos:start="357:23" pos:end="357:29"><expr pos:start="357:23" pos:end="357:29"><name pos:start="357:23" pos:end="357:29">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:38"><expr pos:start="359:5" pos:end="359:37"><operator pos:start="359:5" pos:end="359:5">*</operator><operator pos:start="359:6" pos:end="359:6">(</operator><name pos:start="359:7" pos:end="359:13">AVFrame</name><operator pos:start="359:14" pos:end="359:14">*</operator><operator pos:start="359:15" pos:end="359:15">)</operator><name pos:start="359:16" pos:end="359:19">data</name><operator pos:start="359:20" pos:end="359:20">=</operator> <name pos:start="359:22" pos:end="359:37"><name pos:start="359:22" pos:end="359:22">s</name><operator pos:start="359:23" pos:end="359:24">-&gt;</operator><name pos:start="359:25" pos:end="359:37">current_frame</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="363:5" pos:end="365:22">/* release the last frame, if it is allocated and if it is not the

     * golden frame */</comment>

    <if_stmt pos:start="367:5" pos:end="371:53"><if pos:start="367:5" pos:end="371:53">if <condition pos:start="367:8" pos:end="369:59">(<expr pos:start="367:9" pos:end="369:58"><operator pos:start="367:9" pos:end="367:9">(</operator><name pos:start="367:10" pos:end="367:30"><name pos:start="367:10" pos:end="367:10">s</name><operator pos:start="367:11" pos:end="367:12">-&gt;</operator><name pos:start="367:13" pos:end="367:22">last_frame</name><operator pos:start="367:23" pos:end="367:23">.</operator><name pos:start="367:24" pos:end="367:27">data</name><index pos:start="367:28" pos:end="367:30">[<expr pos:start="367:29" pos:end="367:29"><literal type="number" pos:start="367:29" pos:end="367:29">0</literal></expr>]</index></name><operator pos:start="367:31" pos:end="367:31">)</operator> <operator pos:start="367:33" pos:end="367:34">&amp;&amp;</operator>

        <operator pos:start="369:9" pos:end="369:9">(</operator><name pos:start="369:10" pos:end="369:30"><name pos:start="369:10" pos:end="369:10">s</name><operator pos:start="369:11" pos:end="369:12">-&gt;</operator><name pos:start="369:13" pos:end="369:22">last_frame</name><operator pos:start="369:23" pos:end="369:23">.</operator><name pos:start="369:24" pos:end="369:27">data</name><index pos:start="369:28" pos:end="369:30">[<expr pos:start="369:29" pos:end="369:29"><literal type="number" pos:start="369:29" pos:end="369:29">0</literal></expr>]</index></name> <operator pos:start="369:32" pos:end="369:33">!=</operator> <name pos:start="369:35" pos:end="369:57"><name pos:start="369:35" pos:end="369:35">s</name><operator pos:start="369:36" pos:end="369:37">-&gt;</operator><name pos:start="369:38" pos:end="369:49">golden_frame</name><operator pos:start="369:50" pos:end="369:50">.</operator><name pos:start="369:51" pos:end="369:54">data</name><index pos:start="369:55" pos:end="369:57">[<expr pos:start="369:56" pos:end="369:56"><literal type="number" pos:start="369:56" pos:end="369:56">0</literal></expr>]</index></name><operator pos:start="369:58" pos:end="369:58">)</operator></expr>)</condition><block type="pseudo" pos:start="371:9" pos:end="371:53"><block_content pos:start="371:9" pos:end="371:53">

        <expr_stmt pos:start="371:9" pos:end="371:53"><expr pos:start="371:9" pos:end="371:52"><call pos:start="371:9" pos:end="371:52"><name pos:start="371:9" pos:end="371:29"><name pos:start="371:9" pos:end="371:13">avctx</name><operator pos:start="371:14" pos:end="371:15">-&gt;</operator><name pos:start="371:16" pos:end="371:29">release_buffer</name></name><argument_list pos:start="371:30" pos:end="371:52">(<argument pos:start="371:31" pos:end="371:35"><expr pos:start="371:31" pos:end="371:35"><name pos:start="371:31" pos:end="371:35">avctx</name></expr></argument>, <argument pos:start="371:38" pos:end="371:51"><expr pos:start="371:38" pos:end="371:51"><operator pos:start="371:38" pos:end="371:38">&amp;</operator><name pos:start="371:39" pos:end="371:51"><name pos:start="371:39" pos:end="371:39">s</name><operator pos:start="371:40" pos:end="371:41">-&gt;</operator><name pos:start="371:42" pos:end="371:51">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="375:5" pos:end="375:41">/* shuffle frames (last = current) */</comment>

    <expr_stmt pos:start="377:5" pos:end="377:63"><expr pos:start="377:5" pos:end="377:62"><call pos:start="377:5" pos:end="377:62"><name pos:start="377:5" pos:end="377:10">memcpy</name><argument_list pos:start="377:11" pos:end="377:62">(<argument pos:start="377:12" pos:end="377:25"><expr pos:start="377:12" pos:end="377:25"><operator pos:start="377:12" pos:end="377:12">&amp;</operator><name pos:start="377:13" pos:end="377:25"><name pos:start="377:13" pos:end="377:13">s</name><operator pos:start="377:14" pos:end="377:15">-&gt;</operator><name pos:start="377:16" pos:end="377:25">last_frame</name></name></expr></argument>, <argument pos:start="377:28" pos:end="377:44"><expr pos:start="377:28" pos:end="377:44"><operator pos:start="377:28" pos:end="377:28">&amp;</operator><name pos:start="377:29" pos:end="377:44"><name pos:start="377:29" pos:end="377:29">s</name><operator pos:start="377:30" pos:end="377:31">-&gt;</operator><name pos:start="377:32" pos:end="377:44">current_frame</name></name></expr></argument>, <argument pos:start="377:47" pos:end="377:61"><expr pos:start="377:47" pos:end="377:61"><sizeof pos:start="377:47" pos:end="377:61">sizeof<argument_list pos:start="377:53" pos:end="377:61">(<argument pos:start="377:54" pos:end="377:60"><expr pos:start="377:54" pos:end="377:60"><name pos:start="377:54" pos:end="377:60">AVFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="379:5" pos:end="379:35"><expr pos:start="379:5" pos:end="379:34"><name pos:start="379:5" pos:end="379:28"><name pos:start="379:5" pos:end="379:5">s</name><operator pos:start="379:6" pos:end="379:7">-&gt;</operator><name pos:start="379:8" pos:end="379:20">current_frame</name><operator pos:start="379:21" pos:end="379:21">.</operator><name pos:start="379:22" pos:end="379:25">data</name><index pos:start="379:26" pos:end="379:28">[<expr pos:start="379:27" pos:end="379:27"><literal type="number" pos:start="379:27" pos:end="379:27">0</literal></expr>]</index></name><operator pos:start="379:29" pos:end="379:29">=</operator> <name pos:start="379:31" pos:end="379:34">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="379:37" pos:end="379:96">/* ensure that we catch any access to this released frame */</comment>



    <return pos:start="383:5" pos:end="383:20">return <expr pos:start="383:12" pos:end="383:19"><name pos:start="383:12" pos:end="383:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
