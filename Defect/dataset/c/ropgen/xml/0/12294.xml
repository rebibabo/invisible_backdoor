<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12294.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">hdcd_scan</name><parameter_list pos:start="1:21" pos:end="1:104">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:37"><name pos:start="1:22" pos:end="1:32">HDCDContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">ctx</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:58"><decl pos:start="1:40" pos:end="1:58"><type pos:start="1:40" pos:end="1:58"><name pos:start="1:40" pos:end="1:51">hdcd_state_t</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">state</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:82"><decl pos:start="1:61" pos:end="1:82"><type pos:start="1:61" pos:end="1:82"><specifier pos:start="1:61" pos:end="1:65">const</specifier> <name pos:start="1:67" pos:end="1:73">int32_t</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:82">samples</name></decl></parameter>, <parameter pos:start="1:85" pos:end="1:91"><decl pos:start="1:85" pos:end="1:91"><type pos:start="1:85" pos:end="1:91"><name pos:start="1:85" pos:end="1:87">int</name></type> <name pos:start="1:89" pos:end="1:91">max</name></decl></parameter>, <parameter pos:start="1:94" pos:end="1:103"><decl pos:start="1:94" pos:end="1:103"><type pos:start="1:94" pos:end="1:103"><name pos:start="1:94" pos:end="1:96">int</name></type> <name pos:start="1:98" pos:end="1:103">stride</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:18">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:18">cdt_active</name> <init pos:start="5:20" pos:end="5:22">= <expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="7:5" pos:end="7:27">/* code detect timer */</comment>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">result</name></decl>;</decl_stmt>

    <if_stmt pos:start="11:5" pos:end="25:5"><if pos:start="11:5" pos:end="25:5">if <condition pos:start="11:8" pos:end="11:27">(<expr pos:start="11:9" pos:end="11:26"><name pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:13">state</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:22">sustain</name></name> <operator pos:start="11:24" pos:end="11:24">&gt;</operator> <literal type="number" pos:start="11:26" pos:end="11:26">0</literal></expr>)</condition> <block pos:start="11:29" pos:end="25:5">{<block_content pos:start="13:9" pos:end="23:30">

        <expr_stmt pos:start="13:9" pos:end="13:23"><expr pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:18">cdt_active</name> <operator pos:start="13:20" pos:end="13:20">=</operator> <literal type="number" pos:start="13:22" pos:end="13:22">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="15:9" pos:end="21:9"><if pos:start="15:9" pos:end="21:9">if <condition pos:start="15:12" pos:end="15:34">(<expr pos:start="15:13" pos:end="15:33"><name pos:start="15:13" pos:end="15:26"><name pos:start="15:13" pos:end="15:17">state</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:26">sustain</name></name> <operator pos:start="15:28" pos:end="15:29">&lt;=</operator> <name pos:start="15:31" pos:end="15:33">max</name></expr>)</condition> <block pos:start="15:36" pos:end="21:9">{<block_content pos:start="17:13" pos:end="19:33">

            <expr_stmt pos:start="17:13" pos:end="17:31"><expr pos:start="17:13" pos:end="17:30"><name pos:start="17:13" pos:end="17:26"><name pos:start="17:13" pos:end="17:17">state</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:26">control</name></name> <operator pos:start="17:28" pos:end="17:28">=</operator> <literal type="number" pos:start="17:30" pos:end="17:30">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="19:13" pos:end="19:33"><expr pos:start="19:13" pos:end="19:32"><name pos:start="19:13" pos:end="19:15">max</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <name pos:start="19:19" pos:end="19:32"><name pos:start="19:19" pos:end="19:23">state</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:32">sustain</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:30"><expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:13">state</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:22">sustain</name></name> <operator pos:start="23:24" pos:end="23:25">-=</operator> <name pos:start="23:27" pos:end="23:29">max</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:15"><expr pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:10">result</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</expr_stmt>

    <while pos:start="29:5" pos:end="49:5">while <condition pos:start="29:11" pos:end="29:24">(<expr pos:start="29:12" pos:end="29:23"><name pos:start="29:12" pos:end="29:17">result</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <name pos:start="29:21" pos:end="29:23">max</name></expr>)</condition> <block pos:start="29:26" pos:end="49:5">{<block_content pos:start="31:9" pos:end="47:37">

        <decl_stmt pos:start="31:9" pos:end="31:17"><decl pos:start="31:9" pos:end="31:16"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:16">flag</name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:88"><decl pos:start="33:9" pos:end="33:87"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:20">consumed</name> <init pos:start="33:22" pos:end="33:87">= <expr pos:start="33:24" pos:end="33:87"><call pos:start="33:24" pos:end="33:87"><name pos:start="33:24" pos:end="33:37">hdcd_integrate</name><argument_list pos:start="33:38" pos:end="33:87">(<argument pos:start="33:39" pos:end="33:41"><expr pos:start="33:39" pos:end="33:41"><name pos:start="33:39" pos:end="33:41">ctx</name></expr></argument>, <argument pos:start="33:44" pos:end="33:48"><expr pos:start="33:44" pos:end="33:48"><name pos:start="33:44" pos:end="33:48">state</name></expr></argument>, <argument pos:start="33:51" pos:end="33:55"><expr pos:start="33:51" pos:end="33:55"><operator pos:start="33:51" pos:end="33:51">&amp;</operator><name pos:start="33:52" pos:end="33:55">flag</name></expr></argument>, <argument pos:start="33:58" pos:end="33:64"><expr pos:start="33:58" pos:end="33:64"><name pos:start="33:58" pos:end="33:64">samples</name></expr></argument>, <argument pos:start="33:67" pos:end="33:78"><expr pos:start="33:67" pos:end="33:78"><name pos:start="33:67" pos:end="33:69">max</name> <operator pos:start="33:71" pos:end="33:71">-</operator> <name pos:start="33:73" pos:end="33:78">result</name></expr></argument>, <argument pos:start="33:81" pos:end="33:86"><expr pos:start="33:81" pos:end="33:86"><name pos:start="33:81" pos:end="33:86">stride</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:27"><expr pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:14">result</name> <operator pos:start="35:16" pos:end="35:17">+=</operator> <name pos:start="35:19" pos:end="35:26">consumed</name></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="37:21">(<expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:16">flag</name> <operator pos:start="37:18" pos:end="37:18">&gt;</operator> <literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr>)</condition> <block pos:start="37:23" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:18">

            <comment type="block" pos:start="39:13" pos:end="39:57">/* reset timer if code detected in channel */</comment>

            <expr_stmt pos:start="41:13" pos:end="41:38"><expr pos:start="41:13" pos:end="41:37"><call pos:start="41:13" pos:end="41:37"><name pos:start="41:13" pos:end="41:30">hdcd_sustain_reset</name><argument_list pos:start="41:31" pos:end="41:37">(<argument pos:start="41:32" pos:end="41:36"><expr pos:start="41:32" pos:end="41:36"><name pos:start="41:32" pos:end="41:36">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:37"><expr pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:15">samples</name> <operator pos:start="47:17" pos:end="47:18">+=</operator> <name pos:start="47:20" pos:end="47:27">consumed</name> <operator pos:start="47:29" pos:end="47:29">*</operator> <name pos:start="47:31" pos:end="47:36">stride</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <comment type="block" pos:start="51:5" pos:end="51:35">/* code detect timer expired */</comment>

    <if_stmt pos:start="53:5" pos:end="55:39"><if pos:start="53:5" pos:end="55:39">if <condition pos:start="53:8" pos:end="53:42">(<expr pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:18">cdt_active</name> <operator pos:start="53:20" pos:end="53:21">&amp;&amp;</operator> <name pos:start="53:23" pos:end="53:36"><name pos:start="53:23" pos:end="53:27">state</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:36">sustain</name></name> <operator pos:start="53:38" pos:end="53:39">==</operator> <literal type="number" pos:start="53:41" pos:end="53:41">0</literal></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:39"><block_content pos:start="55:9" pos:end="55:39">

        <expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:13">state</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:36">count_sustain_expired</name></name><operator pos:start="55:37" pos:end="55:38">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="57:5" pos:end="57:18">return <expr pos:start="57:12" pos:end="57:17"><name pos:start="57:12" pos:end="57:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
