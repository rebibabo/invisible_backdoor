<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16595.c" pos:tabs="8"><function pos:start="1:1" pos:end="315:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">qcow2_create2</name><parameter_list pos:start="1:25" pos:end="9:38">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><specifier pos:start="1:26" pos:end="1:30">const</specifier> <name pos:start="1:32" pos:end="1:35">char</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:45">filename</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:65"><decl pos:start="1:48" pos:end="1:65"><type pos:start="1:48" pos:end="1:65"><name pos:start="1:48" pos:end="1:54">int64_t</name></type> <name pos:start="1:56" pos:end="1:65">total_size</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:49"><decl pos:start="3:26" pos:end="3:49"><type pos:start="3:26" pos:end="3:49"><specifier pos:start="3:26" pos:end="3:30">const</specifier> <name pos:start="3:32" pos:end="3:35">char</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:49">backing_file</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:77"><decl pos:start="3:52" pos:end="3:77"><type pos:start="3:52" pos:end="3:77"><specifier pos:start="3:52" pos:end="3:56">const</specifier> <name pos:start="3:58" pos:end="3:61">char</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:77">backing_format</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:34"><decl pos:start="5:26" pos:end="5:34"><type pos:start="5:26" pos:end="5:34"><name pos:start="5:26" pos:end="5:28">int</name></type> <name pos:start="5:30" pos:end="5:34">flags</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:55"><decl pos:start="5:37" pos:end="5:55"><type pos:start="5:37" pos:end="5:55"><name pos:start="5:37" pos:end="5:42">size_t</name></type> <name pos:start="5:44" pos:end="5:55">cluster_size</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:69"><decl pos:start="5:58" pos:end="5:69"><type pos:start="5:58" pos:end="5:69"><name pos:start="5:58" pos:end="5:60">int</name></type> <name pos:start="5:62" pos:end="5:69">prealloc</name></decl></parameter>,

                         <parameter pos:start="7:26" pos:end="7:53"><decl pos:start="7:26" pos:end="7:53"><type pos:start="7:26" pos:end="7:53"><name pos:start="7:26" pos:end="7:44">QEMUOptionParameter</name> <modifier pos:start="7:46" pos:end="7:46">*</modifier></type><name pos:start="7:47" pos:end="7:53">options</name></decl></parameter>, <parameter pos:start="7:56" pos:end="7:66"><decl pos:start="7:56" pos:end="7:66"><type pos:start="7:56" pos:end="7:66"><name pos:start="7:56" pos:end="7:58">int</name></type> <name pos:start="7:60" pos:end="7:66">version</name></decl></parameter>,

                         <parameter pos:start="9:26" pos:end="9:37"><decl pos:start="9:26" pos:end="9:37"><type pos:start="9:26" pos:end="9:37"><name pos:start="9:26" pos:end="9:30">Error</name> <modifier pos:start="9:32" pos:end="9:32">*</modifier><modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:37">errp</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="315:1">{<block_content pos:start="15:5" pos:end="313:15">

    <comment type="block" pos:start="13:5" pos:end="13:32">/* Calculate cluster_bits */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:20">cluster_bits</name></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:41"><expr pos:start="17:5" pos:end="17:40"><name pos:start="17:5" pos:end="17:16">cluster_bits</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <call pos:start="17:20" pos:end="17:36"><name pos:start="17:20" pos:end="17:22">ffs</name><argument_list pos:start="17:23" pos:end="17:36">(<argument pos:start="17:24" pos:end="17:35"><expr pos:start="17:24" pos:end="17:35"><name pos:start="17:24" pos:end="17:35">cluster_size</name></expr></argument>)</argument_list></call> <operator pos:start="17:38" pos:end="17:38">-</operator> <literal type="number" pos:start="17:40" pos:end="17:40">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="31:5"><if pos:start="19:5" pos:end="31:5">if <condition pos:start="19:8" pos:end="21:44">(<expr pos:start="19:9" pos:end="21:43"><name pos:start="19:9" pos:end="19:57"><name pos:start="19:9" pos:end="19:20">cluster_bits</name> <argument_list type="generic" pos:start="19:22" pos:end="19:57">&lt; <argument pos:start="19:24" pos:end="19:55"><expr pos:start="19:24" pos:end="19:55"><name pos:start="19:24" pos:end="19:39">MIN_CLUSTER_BITS</name> <operator pos:start="19:41" pos:end="19:42">||</operator> <name pos:start="19:44" pos:end="19:55">cluster_bits</name></expr></argument> &gt;</argument_list></name> <name pos:start="19:59" pos:end="19:74">MAX_CLUSTER_BITS</name> <operator pos:start="19:76" pos:end="19:77">||</operator>

        <operator pos:start="21:9" pos:end="21:9">(</operator><literal type="number" pos:start="21:10" pos:end="21:10">1</literal> <operator pos:start="21:12" pos:end="21:13">&lt;&lt;</operator> <name pos:start="21:15" pos:end="21:26">cluster_bits</name><operator pos:start="21:27" pos:end="21:27">)</operator> <operator pos:start="21:29" pos:end="21:30">!=</operator> <name pos:start="21:32" pos:end="21:43">cluster_size</name></expr>)</condition>

    <block pos:start="23:5" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:23">

        <expr_stmt pos:start="25:9" pos:end="27:79"><expr pos:start="25:9" pos:end="27:78"><call pos:start="25:9" pos:end="27:78"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="27:78">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">errp</name></expr></argument>, <argument pos:start="25:26" pos:end="27:24"><expr pos:start="25:26" pos:end="27:24"><literal type="string" pos:start="25:26" pos:end="25:78">"Cluster size must be a power of two between %d and "</literal>

                   <literal type="string" pos:start="27:20" pos:end="27:24">"%dk"</literal></expr></argument>, <argument pos:start="27:27" pos:end="27:47"><expr pos:start="27:27" pos:end="27:47"><literal type="number" pos:start="27:27" pos:end="27:27">1</literal> <operator pos:start="27:29" pos:end="27:30">&lt;&lt;</operator> <name pos:start="27:32" pos:end="27:47">MIN_CLUSTER_BITS</name></expr></argument>, <argument pos:start="27:50" pos:end="27:77"><expr pos:start="27:50" pos:end="27:77"><literal type="number" pos:start="27:50" pos:end="27:50">1</literal> <operator pos:start="27:52" pos:end="27:53">&lt;&lt;</operator> <operator pos:start="27:55" pos:end="27:55">(</operator><name pos:start="27:56" pos:end="27:71">MAX_CLUSTER_BITS</name> <operator pos:start="27:73" pos:end="27:73">-</operator> <literal type="number" pos:start="27:75" pos:end="27:76">10</literal><operator pos:start="27:77" pos:end="27:77">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:23">return <expr pos:start="29:16" pos:end="29:22"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="57:7">/*

     * Open the image file and write a minimal qcow2 header.

     *

     * We keep things simple and start with a zero-sized image. We also

     * do without refcount blocks or a L1 table for now. We'll fix the

     * inconsistency later.

     *

     * We do need a refcount table because growing the refcount table means

     * allocating two new refcount blocks - the seconds of which would be at

     * 2 GB for 64k clusters, and we don't want to have a 2 GB initial file

     * size for any qcow2 image.

     */</comment>

    <decl_stmt pos:start="59:5" pos:end="59:25"><decl pos:start="59:5" pos:end="59:24"><type pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:20">BlockDriverState</name><modifier pos:start="59:21" pos:end="59:21">*</modifier></type> <name pos:start="59:23" pos:end="59:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:22"><decl pos:start="61:5" pos:end="61:21"><type pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:14">QCowHeader</name></type> <name pos:start="61:16" pos:end="61:21">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:28"><decl pos:start="63:5" pos:end="63:27"><type pos:start="63:5" pos:end="63:12"><name pos:start="63:5" pos:end="63:11">uint8_t</name><modifier pos:start="63:12" pos:end="63:12">*</modifier></type> <name pos:start="63:14" pos:end="63:27">refcount_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:28"><decl pos:start="65:5" pos:end="65:27"><type pos:start="65:5" pos:end="65:11"><name pos:start="65:5" pos:end="65:9">Error</name> <modifier pos:start="65:11" pos:end="65:11">*</modifier></type><name pos:start="65:12" pos:end="65:20">local_err</name> <init pos:start="65:22" pos:end="65:27">= <expr pos:start="65:24" pos:end="65:27"><name pos:start="65:24" pos:end="65:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:12"><decl pos:start="67:5" pos:end="67:11"><type pos:start="67:5" pos:end="67:7"><name pos:start="67:5" pos:end="67:7">int</name></type> <name pos:start="67:9" pos:end="67:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:58"><expr pos:start="71:5" pos:end="71:57"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="71:57"><name pos:start="71:11" pos:end="71:26">bdrv_create_file</name><argument_list pos:start="71:27" pos:end="71:57">(<argument pos:start="71:28" pos:end="71:35"><expr pos:start="71:28" pos:end="71:35"><name pos:start="71:28" pos:end="71:35">filename</name></expr></argument>, <argument pos:start="71:38" pos:end="71:44"><expr pos:start="71:38" pos:end="71:44"><name pos:start="71:38" pos:end="71:44">options</name></expr></argument>, <argument pos:start="71:47" pos:end="71:56"><expr pos:start="71:47" pos:end="71:56"><operator pos:start="71:47" pos:end="71:47">&amp;</operator><name pos:start="71:48" pos:end="71:56">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:16">(<expr pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">&lt;</operator> <literal type="number" pos:start="73:15" pos:end="73:15">0</literal></expr>)</condition> <block pos:start="73:18" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:19">

        <expr_stmt pos:start="75:9" pos:end="75:41"><expr pos:start="75:9" pos:end="75:40"><call pos:start="75:9" pos:end="75:40"><name pos:start="75:9" pos:end="75:23">error_propagate</name><argument_list pos:start="75:24" pos:end="75:40">(<argument pos:start="75:25" pos:end="75:28"><expr pos:start="75:25" pos:end="75:28"><name pos:start="75:25" pos:end="75:28">errp</name></expr></argument>, <argument pos:start="75:31" pos:end="75:39"><expr pos:start="75:31" pos:end="75:39"><name pos:start="75:31" pos:end="75:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:19">return <expr pos:start="77:16" pos:end="77:18"><name pos:start="77:16" pos:end="77:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:71"><expr pos:start="83:5" pos:end="83:70"><name pos:start="83:5" pos:end="83:7">ret</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:70"><name pos:start="83:11" pos:end="83:24">bdrv_file_open</name><argument_list pos:start="83:25" pos:end="83:70">(<argument pos:start="83:26" pos:end="83:28"><expr pos:start="83:26" pos:end="83:28"><operator pos:start="83:26" pos:end="83:26">&amp;</operator><name pos:start="83:27" pos:end="83:28">bs</name></expr></argument>, <argument pos:start="83:31" pos:end="83:38"><expr pos:start="83:31" pos:end="83:38"><name pos:start="83:31" pos:end="83:38">filename</name></expr></argument>, <argument pos:start="83:41" pos:end="83:44"><expr pos:start="83:41" pos:end="83:44"><name pos:start="83:41" pos:end="83:44">NULL</name></expr></argument>, <argument pos:start="83:47" pos:end="83:57"><expr pos:start="83:47" pos:end="83:57"><name pos:start="83:47" pos:end="83:57">BDRV_O_RDWR</name></expr></argument>, <argument pos:start="83:60" pos:end="83:69"><expr pos:start="83:60" pos:end="83:69"><operator pos:start="83:60" pos:end="83:60">&amp;</operator><name pos:start="83:61" pos:end="83:69">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:16">(<expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">&lt;</operator> <literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>)</condition> <block pos:start="85:18" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:19">

        <expr_stmt pos:start="87:9" pos:end="87:41"><expr pos:start="87:9" pos:end="87:40"><call pos:start="87:9" pos:end="87:40"><name pos:start="87:9" pos:end="87:23">error_propagate</name><argument_list pos:start="87:24" pos:end="87:40">(<argument pos:start="87:25" pos:end="87:28"><expr pos:start="87:25" pos:end="87:28"><name pos:start="87:25" pos:end="87:28">errp</name></expr></argument>, <argument pos:start="87:31" pos:end="87:39"><expr pos:start="87:31" pos:end="87:39"><name pos:start="87:31" pos:end="87:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:19">return <expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:26">/* Write the header */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:39"><expr pos:start="97:5" pos:end="97:38"><call pos:start="97:5" pos:end="97:38"><name pos:start="97:5" pos:end="97:10">memset</name><argument_list pos:start="97:11" pos:end="97:38">(<argument pos:start="97:12" pos:end="97:18"><expr pos:start="97:12" pos:end="97:18"><operator pos:start="97:12" pos:end="97:12">&amp;</operator><name pos:start="97:13" pos:end="97:18">header</name></expr></argument>, <argument pos:start="97:21" pos:end="97:21"><expr pos:start="97:21" pos:end="97:21"><literal type="number" pos:start="97:21" pos:end="97:21">0</literal></expr></argument>, <argument pos:start="97:24" pos:end="97:37"><expr pos:start="97:24" pos:end="97:37"><sizeof pos:start="97:24" pos:end="97:37">sizeof<argument_list pos:start="97:30" pos:end="97:37">(<argument pos:start="97:31" pos:end="97:36"><expr pos:start="97:31" pos:end="97:36"><name pos:start="97:31" pos:end="97:36">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:43"><expr pos:start="99:5" pos:end="99:42"><name pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:10">header</name><operator pos:start="99:11" pos:end="99:11">.</operator><name pos:start="99:12" pos:end="99:16">magic</name></name> <operator pos:start="99:18" pos:end="99:18">=</operator> <call pos:start="99:20" pos:end="99:42"><name pos:start="99:20" pos:end="99:30">cpu_to_be32</name><argument_list pos:start="99:31" pos:end="99:42">(<argument pos:start="99:32" pos:end="99:41"><expr pos:start="99:32" pos:end="99:41"><name pos:start="99:32" pos:end="99:41">QCOW_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:42"><expr pos:start="101:5" pos:end="101:41"><name pos:start="101:5" pos:end="101:18"><name pos:start="101:5" pos:end="101:10">header</name><operator pos:start="101:11" pos:end="101:11">.</operator><name pos:start="101:12" pos:end="101:18">version</name></name> <operator pos:start="101:20" pos:end="101:20">=</operator> <call pos:start="101:22" pos:end="101:41"><name pos:start="101:22" pos:end="101:32">cpu_to_be32</name><argument_list pos:start="101:33" pos:end="101:41">(<argument pos:start="101:34" pos:end="101:40"><expr pos:start="101:34" pos:end="101:40"><name pos:start="101:34" pos:end="101:40">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:52"><expr pos:start="103:5" pos:end="103:51"><name pos:start="103:5" pos:end="103:23"><name pos:start="103:5" pos:end="103:10">header</name><operator pos:start="103:11" pos:end="103:11">.</operator><name pos:start="103:12" pos:end="103:23">cluster_bits</name></name> <operator pos:start="103:25" pos:end="103:25">=</operator> <call pos:start="103:27" pos:end="103:51"><name pos:start="103:27" pos:end="103:37">cpu_to_be32</name><argument_list pos:start="103:38" pos:end="103:51">(<argument pos:start="103:39" pos:end="103:50"><expr pos:start="103:39" pos:end="103:50"><name pos:start="103:39" pos:end="103:50">cluster_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:33"><expr pos:start="105:5" pos:end="105:32"><name pos:start="105:5" pos:end="105:15"><name pos:start="105:5" pos:end="105:10">header</name><operator pos:start="105:11" pos:end="105:11">.</operator><name pos:start="105:12" pos:end="105:15">size</name></name> <operator pos:start="105:17" pos:end="105:17">=</operator> <call pos:start="105:19" pos:end="105:32"><name pos:start="105:19" pos:end="105:29">cpu_to_be64</name><argument_list pos:start="105:30" pos:end="105:32">(<argument pos:start="105:31" pos:end="105:31"><expr pos:start="105:31" pos:end="105:31"><literal type="number" pos:start="105:31" pos:end="105:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:44"><expr pos:start="107:5" pos:end="107:43"><name pos:start="107:5" pos:end="107:26"><name pos:start="107:5" pos:end="107:10">header</name><operator pos:start="107:11" pos:end="107:11">.</operator><name pos:start="107:12" pos:end="107:26">l1_table_offset</name></name> <operator pos:start="107:28" pos:end="107:28">=</operator> <call pos:start="107:30" pos:end="107:43"><name pos:start="107:30" pos:end="107:40">cpu_to_be64</name><argument_list pos:start="107:41" pos:end="107:43">(<argument pos:start="107:42" pos:end="107:42"><expr pos:start="107:42" pos:end="107:42"><literal type="number" pos:start="107:42" pos:end="107:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:36"><expr pos:start="109:5" pos:end="109:35"><name pos:start="109:5" pos:end="109:18"><name pos:start="109:5" pos:end="109:10">header</name><operator pos:start="109:11" pos:end="109:11">.</operator><name pos:start="109:12" pos:end="109:18">l1_size</name></name> <operator pos:start="109:20" pos:end="109:20">=</operator> <call pos:start="109:22" pos:end="109:35"><name pos:start="109:22" pos:end="109:32">cpu_to_be32</name><argument_list pos:start="109:33" pos:end="109:35">(<argument pos:start="109:34" pos:end="109:34"><expr pos:start="109:34" pos:end="109:34"><literal type="number" pos:start="109:34" pos:end="109:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:61"><expr pos:start="111:5" pos:end="111:60"><name pos:start="111:5" pos:end="111:32"><name pos:start="111:5" pos:end="111:10">header</name><operator pos:start="111:11" pos:end="111:11">.</operator><name pos:start="111:12" pos:end="111:32">refcount_table_offset</name></name> <operator pos:start="111:34" pos:end="111:34">=</operator> <call pos:start="111:36" pos:end="111:60"><name pos:start="111:36" pos:end="111:46">cpu_to_be64</name><argument_list pos:start="111:47" pos:end="111:60">(<argument pos:start="111:48" pos:end="111:59"><expr pos:start="111:48" pos:end="111:59"><name pos:start="111:48" pos:end="111:59">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:52"><expr pos:start="113:5" pos:end="113:51"><name pos:start="113:5" pos:end="113:34"><name pos:start="113:5" pos:end="113:10">header</name><operator pos:start="113:11" pos:end="113:11">.</operator><name pos:start="113:12" pos:end="113:34">refcount_table_clusters</name></name> <operator pos:start="113:36" pos:end="113:36">=</operator> <call pos:start="113:38" pos:end="113:51"><name pos:start="113:38" pos:end="113:48">cpu_to_be32</name><argument_list pos:start="113:49" pos:end="113:51">(<argument pos:start="113:50" pos:end="113:50"><expr pos:start="113:50" pos:end="113:50"><literal type="number" pos:start="113:50" pos:end="113:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:60"><expr pos:start="115:5" pos:end="115:59"><name pos:start="115:5" pos:end="115:25"><name pos:start="115:5" pos:end="115:10">header</name><operator pos:start="115:11" pos:end="115:11">.</operator><name pos:start="115:12" pos:end="115:25">refcount_order</name></name> <operator pos:start="115:27" pos:end="115:27">=</operator> <call pos:start="115:29" pos:end="115:59"><name pos:start="115:29" pos:end="115:39">cpu_to_be32</name><argument_list pos:start="115:40" pos:end="115:59">(<argument pos:start="115:41" pos:end="115:58"><expr pos:start="115:41" pos:end="115:58"><literal type="number" pos:start="115:41" pos:end="115:43">3</literal> <operator pos:start="115:43" pos:end="115:43">+</operator> <name pos:start="115:45" pos:end="115:58">REFCOUNT_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:55"><expr pos:start="117:5" pos:end="117:54"><name pos:start="117:5" pos:end="117:24"><name pos:start="117:5" pos:end="117:10">header</name><operator pos:start="117:11" pos:end="117:11">.</operator><name pos:start="117:12" pos:end="117:24">header_length</name></name> <operator pos:start="117:26" pos:end="117:26">=</operator> <call pos:start="117:28" pos:end="117:54"><name pos:start="117:28" pos:end="117:38">cpu_to_be32</name><argument_list pos:start="117:39" pos:end="117:54">(<argument pos:start="117:40" pos:end="117:53"><expr pos:start="117:40" pos:end="117:53"><sizeof pos:start="117:40" pos:end="117:53">sizeof<argument_list pos:start="117:46" pos:end="117:53">(<argument pos:start="117:47" pos:end="117:52"><expr pos:start="117:47" pos:end="117:52"><name pos:start="117:47" pos:end="117:52">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="121:5" pos:end="129:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:35">(<expr pos:start="121:9" pos:end="121:34"><name pos:start="121:9" pos:end="121:13">flags</name> <operator pos:start="121:15" pos:end="121:15">&amp;</operator> <name pos:start="121:17" pos:end="121:34">BLOCK_FLAG_ENCRYPT</name></expr>)</condition> <block pos:start="121:37" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:58">

        <expr_stmt pos:start="123:9" pos:end="123:58"><expr pos:start="123:9" pos:end="123:57"><name pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:14">header</name><operator pos:start="123:15" pos:end="123:15">.</operator><name pos:start="123:16" pos:end="123:27">crypt_method</name></name> <operator pos:start="123:29" pos:end="123:29">=</operator> <call pos:start="123:31" pos:end="123:57"><name pos:start="123:31" pos:end="123:41">cpu_to_be32</name><argument_list pos:start="123:42" pos:end="123:57">(<argument pos:start="123:43" pos:end="123:56"><expr pos:start="123:43" pos:end="123:56"><name pos:start="123:43" pos:end="123:56">QCOW_CRYPT_AES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="125:7" pos:end="129:5">else <block pos:start="125:12" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:59">

        <expr_stmt pos:start="127:9" pos:end="127:59"><expr pos:start="127:9" pos:end="127:58"><name pos:start="127:9" pos:end="127:27"><name pos:start="127:9" pos:end="127:14">header</name><operator pos:start="127:15" pos:end="127:15">.</operator><name pos:start="127:16" pos:end="127:27">crypt_method</name></name> <operator pos:start="127:29" pos:end="127:29">=</operator> <call pos:start="127:31" pos:end="127:58"><name pos:start="127:31" pos:end="127:41">cpu_to_be32</name><argument_list pos:start="127:42" pos:end="127:58">(<argument pos:start="127:43" pos:end="127:57"><expr pos:start="127:43" pos:end="127:57"><name pos:start="127:43" pos:end="127:57">QCOW_CRYPT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:42">(<expr pos:start="133:9" pos:end="133:41"><name pos:start="133:9" pos:end="133:13">flags</name> <operator pos:start="133:15" pos:end="133:15">&amp;</operator> <name pos:start="133:17" pos:end="133:41">BLOCK_FLAG_LAZY_REFCOUNTS</name></expr>)</condition> <block pos:start="133:44" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:53">

        <expr_stmt pos:start="135:9" pos:end="137:53"><expr pos:start="135:9" pos:end="137:52"><name pos:start="135:9" pos:end="135:34"><name pos:start="135:9" pos:end="135:14">header</name><operator pos:start="135:15" pos:end="135:15">.</operator><name pos:start="135:16" pos:end="135:34">compatible_features</name></name> <operator pos:start="135:36" pos:end="135:37">|=</operator>

            <call pos:start="137:13" pos:end="137:52"><name pos:start="137:13" pos:end="137:23">cpu_to_be64</name><argument_list pos:start="137:24" pos:end="137:52">(<argument pos:start="137:25" pos:end="137:51"><expr pos:start="137:25" pos:end="137:51"><name pos:start="137:25" pos:end="137:51">QCOW2_COMPAT_LAZY_REFCOUNTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:54"><expr pos:start="143:5" pos:end="143:53"><name pos:start="143:5" pos:end="143:7">ret</name> <operator pos:start="143:9" pos:end="143:9">=</operator> <call pos:start="143:11" pos:end="143:53"><name pos:start="143:11" pos:end="143:21">bdrv_pwrite</name><argument_list pos:start="143:22" pos:end="143:53">(<argument pos:start="143:23" pos:end="143:24"><expr pos:start="143:23" pos:end="143:24"><name pos:start="143:23" pos:end="143:24">bs</name></expr></argument>, <argument pos:start="143:27" pos:end="143:27"><expr pos:start="143:27" pos:end="143:27"><literal type="number" pos:start="143:27" pos:end="143:27">0</literal></expr></argument>, <argument pos:start="143:30" pos:end="143:36"><expr pos:start="143:30" pos:end="143:36"><operator pos:start="143:30" pos:end="143:30">&amp;</operator><name pos:start="143:31" pos:end="143:36">header</name></expr></argument>, <argument pos:start="143:39" pos:end="143:52"><expr pos:start="143:39" pos:end="143:52"><sizeof pos:start="143:39" pos:end="143:52">sizeof<argument_list pos:start="143:45" pos:end="143:52">(<argument pos:start="143:46" pos:end="143:51"><expr pos:start="143:46" pos:end="143:51"><name pos:start="143:46" pos:end="143:51">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="151:5"><if pos:start="145:5" pos:end="151:5">if <condition pos:start="145:8" pos:end="145:16">(<expr pos:start="145:9" pos:end="145:15"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:13">&lt;</operator> <literal type="number" pos:start="145:15" pos:end="145:15">0</literal></expr>)</condition> <block pos:start="145:18" pos:end="151:5">{<block_content pos:start="147:9" pos:end="149:17">

        <expr_stmt pos:start="147:9" pos:end="147:69"><expr pos:start="147:9" pos:end="147:68"><call pos:start="147:9" pos:end="147:68"><name pos:start="147:9" pos:end="147:24">error_setg_errno</name><argument_list pos:start="147:25" pos:end="147:68">(<argument pos:start="147:26" pos:end="147:29"><expr pos:start="147:26" pos:end="147:29"><name pos:start="147:26" pos:end="147:29">errp</name></expr></argument>, <argument pos:start="147:32" pos:end="147:35"><expr pos:start="147:32" pos:end="147:35"><operator pos:start="147:32" pos:end="147:32">-</operator><name pos:start="147:33" pos:end="147:35">ret</name></expr></argument>, <argument pos:start="147:38" pos:end="147:67"><expr pos:start="147:38" pos:end="147:67"><literal type="string" pos:start="147:38" pos:end="147:67">"Could not write qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="149:9" pos:end="149:17">goto <name pos:start="149:14" pos:end="149:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:39">/* Write an empty refcount table */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:45"><expr pos:start="157:5" pos:end="157:44"><name pos:start="157:5" pos:end="157:18">refcount_table</name> <operator pos:start="157:20" pos:end="157:20">=</operator> <call pos:start="157:22" pos:end="157:44"><name pos:start="157:22" pos:end="157:30">g_malloc0</name><argument_list pos:start="157:31" pos:end="157:44">(<argument pos:start="157:32" pos:end="157:43"><expr pos:start="157:32" pos:end="157:43"><name pos:start="157:32" pos:end="157:43">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:70"><expr pos:start="159:5" pos:end="159:69"><name pos:start="159:5" pos:end="159:7">ret</name> <operator pos:start="159:9" pos:end="159:9">=</operator> <call pos:start="159:11" pos:end="159:69"><name pos:start="159:11" pos:end="159:21">bdrv_pwrite</name><argument_list pos:start="159:22" pos:end="159:69">(<argument pos:start="159:23" pos:end="159:24"><expr pos:start="159:23" pos:end="159:24"><name pos:start="159:23" pos:end="159:24">bs</name></expr></argument>, <argument pos:start="159:27" pos:end="159:38"><expr pos:start="159:27" pos:end="159:38"><name pos:start="159:27" pos:end="159:38">cluster_size</name></expr></argument>, <argument pos:start="159:41" pos:end="159:54"><expr pos:start="159:41" pos:end="159:54"><name pos:start="159:41" pos:end="159:54">refcount_table</name></expr></argument>, <argument pos:start="159:57" pos:end="159:68"><expr pos:start="159:57" pos:end="159:68"><name pos:start="159:57" pos:end="159:68">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:27"><expr pos:start="161:5" pos:end="161:26"><call pos:start="161:5" pos:end="161:26"><name pos:start="161:5" pos:end="161:10">g_free</name><argument_list pos:start="161:11" pos:end="161:26">(<argument pos:start="161:12" pos:end="161:25"><expr pos:start="161:12" pos:end="161:25"><name pos:start="161:12" pos:end="161:25">refcount_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="165:5" pos:end="171:5"><if pos:start="165:5" pos:end="171:5">if <condition pos:start="165:8" pos:end="165:16">(<expr pos:start="165:9" pos:end="165:15"><name pos:start="165:9" pos:end="165:11">ret</name> <operator pos:start="165:13" pos:end="165:13">&lt;</operator> <literal type="number" pos:start="165:15" pos:end="165:15">0</literal></expr>)</condition> <block pos:start="165:18" pos:end="171:5">{<block_content pos:start="167:9" pos:end="169:17">

        <expr_stmt pos:start="167:9" pos:end="167:71"><expr pos:start="167:9" pos:end="167:70"><call pos:start="167:9" pos:end="167:70"><name pos:start="167:9" pos:end="167:24">error_setg_errno</name><argument_list pos:start="167:25" pos:end="167:70">(<argument pos:start="167:26" pos:end="167:29"><expr pos:start="167:26" pos:end="167:29"><name pos:start="167:26" pos:end="167:29">errp</name></expr></argument>, <argument pos:start="167:32" pos:end="167:35"><expr pos:start="167:32" pos:end="167:35"><operator pos:start="167:32" pos:end="167:32">-</operator><name pos:start="167:33" pos:end="167:35">ret</name></expr></argument>, <argument pos:start="167:38" pos:end="167:69"><expr pos:start="167:38" pos:end="167:69"><literal type="string" pos:start="167:38" pos:end="167:69">"Could not write refcount table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="169:9" pos:end="169:17">goto <name pos:start="169:14" pos:end="169:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:19"><expr pos:start="175:5" pos:end="175:18"><call pos:start="175:5" pos:end="175:18"><name pos:start="175:5" pos:end="175:14">bdrv_close</name><argument_list pos:start="175:15" pos:end="175:18">(<argument pos:start="175:16" pos:end="175:17"><expr pos:start="175:16" pos:end="175:17"><name pos:start="175:16" pos:end="175:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="179:5" pos:end="187:7">/*

     * And now open the image and make it consistent first (i.e. increase the

     * refcount of the cluster that is occupied by the header and the refcount

     * table)

     */</comment>

    <decl_stmt pos:start="189:5" pos:end="189:49"><decl pos:start="189:5" pos:end="189:48"><type pos:start="189:5" pos:end="189:16"><name pos:start="189:5" pos:end="189:15">BlockDriver</name><modifier pos:start="189:16" pos:end="189:16">*</modifier></type> <name pos:start="189:18" pos:end="189:20">drv</name> <init pos:start="189:22" pos:end="189:48">= <expr pos:start="189:24" pos:end="189:48"><call pos:start="189:24" pos:end="189:48"><name pos:start="189:24" pos:end="189:39">bdrv_find_format</name><argument_list pos:start="189:40" pos:end="189:48">(<argument pos:start="189:41" pos:end="189:47"><expr pos:start="189:41" pos:end="189:47"><literal type="string" pos:start="189:41" pos:end="189:47">"qcow2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:24"><expr pos:start="191:5" pos:end="191:23"><call pos:start="191:5" pos:end="191:23"><name pos:start="191:5" pos:end="191:10">assert</name><argument_list pos:start="191:11" pos:end="191:23">(<argument pos:start="191:12" pos:end="191:22"><expr pos:start="191:12" pos:end="191:22"><name pos:start="191:12" pos:end="191:14">drv</name> <operator pos:start="191:16" pos:end="191:17">!=</operator> <name pos:start="191:19" pos:end="191:22">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="195:74"><expr pos:start="193:5" pos:end="195:73"><name pos:start="193:5" pos:end="193:7">ret</name> <operator pos:start="193:9" pos:end="193:9">=</operator> <call pos:start="193:11" pos:end="195:73"><name pos:start="193:11" pos:end="193:19">bdrv_open</name><argument_list pos:start="193:20" pos:end="195:73">(<argument pos:start="193:21" pos:end="193:22"><expr pos:start="193:21" pos:end="193:22"><name pos:start="193:21" pos:end="193:22">bs</name></expr></argument>, <argument pos:start="193:25" pos:end="193:32"><expr pos:start="193:25" pos:end="193:32"><name pos:start="193:25" pos:end="193:32">filename</name></expr></argument>, <argument pos:start="193:35" pos:end="193:38"><expr pos:start="193:35" pos:end="193:38"><name pos:start="193:35" pos:end="193:38">NULL</name></expr></argument>,

        <argument pos:start="195:9" pos:end="195:55"><expr pos:start="195:9" pos:end="195:55"><name pos:start="195:9" pos:end="195:19">BDRV_O_RDWR</name> <operator pos:start="195:21" pos:end="195:21">|</operator> <name pos:start="195:23" pos:end="195:37">BDRV_O_CACHE_WB</name> <operator pos:start="195:39" pos:end="195:39">|</operator> <name pos:start="195:41" pos:end="195:55">BDRV_O_NO_FLUSH</name></expr></argument>, <argument pos:start="195:58" pos:end="195:60"><expr pos:start="195:58" pos:end="195:60"><name pos:start="195:58" pos:end="195:60">drv</name></expr></argument>, <argument pos:start="195:63" pos:end="195:72"><expr pos:start="195:63" pos:end="195:72"><operator pos:start="195:63" pos:end="195:63">&amp;</operator><name pos:start="195:64" pos:end="195:72">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="197:5" pos:end="203:5"><if pos:start="197:5" pos:end="203:5">if <condition pos:start="197:8" pos:end="197:16">(<expr pos:start="197:9" pos:end="197:15"><name pos:start="197:9" pos:end="197:11">ret</name> <operator pos:start="197:13" pos:end="197:13">&lt;</operator> <literal type="number" pos:start="197:15" pos:end="197:15">0</literal></expr>)</condition> <block pos:start="197:18" pos:end="203:5">{<block_content pos:start="199:9" pos:end="201:17">

        <expr_stmt pos:start="199:9" pos:end="199:41"><expr pos:start="199:9" pos:end="199:40"><call pos:start="199:9" pos:end="199:40"><name pos:start="199:9" pos:end="199:23">error_propagate</name><argument_list pos:start="199:24" pos:end="199:40">(<argument pos:start="199:25" pos:end="199:28"><expr pos:start="199:25" pos:end="199:28"><name pos:start="199:25" pos:end="199:28">errp</name></expr></argument>, <argument pos:start="199:31" pos:end="199:39"><expr pos:start="199:31" pos:end="199:39"><name pos:start="199:31" pos:end="199:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="201:9" pos:end="201:17">goto <name pos:start="201:14" pos:end="201:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:53"><expr pos:start="207:5" pos:end="207:52"><name pos:start="207:5" pos:end="207:7">ret</name> <operator pos:start="207:9" pos:end="207:9">=</operator> <call pos:start="207:11" pos:end="207:52"><name pos:start="207:11" pos:end="207:30">qcow2_alloc_clusters</name><argument_list pos:start="207:31" pos:end="207:52">(<argument pos:start="207:32" pos:end="207:33"><expr pos:start="207:32" pos:end="207:33"><name pos:start="207:32" pos:end="207:33">bs</name></expr></argument>, <argument pos:start="207:36" pos:end="207:51"><expr pos:start="207:36" pos:end="207:51"><literal type="number" pos:start="207:36" pos:end="207:36">2</literal> <operator pos:start="207:38" pos:end="207:38">*</operator> <name pos:start="207:40" pos:end="207:51">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="209:5" pos:end="225:5"><if pos:start="209:5" pos:end="219:5">if <condition pos:start="209:8" pos:end="209:16">(<expr pos:start="209:9" pos:end="209:15"><name pos:start="209:9" pos:end="209:11">ret</name> <operator pos:start="209:13" pos:end="209:13">&lt;</operator> <literal type="number" pos:start="209:15" pos:end="209:15">0</literal></expr>)</condition> <block pos:start="209:18" pos:end="219:5">{<block_content pos:start="211:9" pos:end="215:17">

        <expr_stmt pos:start="211:9" pos:end="213:54"><expr pos:start="211:9" pos:end="213:53"><call pos:start="211:9" pos:end="213:53"><name pos:start="211:9" pos:end="211:24">error_setg_errno</name><argument_list pos:start="211:25" pos:end="213:53">(<argument pos:start="211:26" pos:end="211:29"><expr pos:start="211:26" pos:end="211:29"><name pos:start="211:26" pos:end="211:29">errp</name></expr></argument>, <argument pos:start="211:32" pos:end="211:35"><expr pos:start="211:32" pos:end="211:35"><operator pos:start="211:32" pos:end="211:32">-</operator><name pos:start="211:33" pos:end="211:35">ret</name></expr></argument>, <argument pos:start="211:38" pos:end="213:52"><expr pos:start="211:38" pos:end="213:52"><literal type="string" pos:start="211:38" pos:end="211:77">"Could not allocate clusters for qcow2 "</literal>

                         <literal type="string" pos:start="213:26" pos:end="213:52">"header and refcount table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="215:9" pos:end="215:17">goto <name pos:start="215:14" pos:end="215:16">out</name>;</goto>



    </block_content>}</block></if> <if type="elseif" pos:start="219:7" pos:end="225:5">else if <condition pos:start="219:15" pos:end="219:24">(<expr pos:start="219:16" pos:end="219:23"><name pos:start="219:16" pos:end="219:18">ret</name> <operator pos:start="219:20" pos:end="219:21">!=</operator> <literal type="number" pos:start="219:23" pos:end="219:23">0</literal></expr>)</condition> <block pos:start="219:26" pos:end="225:5">{<block_content pos:start="221:9" pos:end="223:16">

        <expr_stmt pos:start="221:9" pos:end="221:77"><expr pos:start="221:9" pos:end="221:76"><call pos:start="221:9" pos:end="221:76"><name pos:start="221:9" pos:end="221:20">error_report</name><argument_list pos:start="221:21" pos:end="221:76">(<argument pos:start="221:22" pos:end="221:75"><expr pos:start="221:22" pos:end="221:75"><literal type="string" pos:start="221:22" pos:end="221:75">"Huh, first cluster in empty image is already in use?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:16"><expr pos:start="223:9" pos:end="223:15"><call pos:start="223:9" pos:end="223:15"><name pos:start="223:9" pos:end="223:13">abort</name><argument_list pos:start="223:14" pos:end="223:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="229:5" pos:end="229:76">/* Okay, now that we have a valid image, let's give it the right size */</comment>

    <expr_stmt pos:start="231:5" pos:end="231:59"><expr pos:start="231:5" pos:end="231:58"><name pos:start="231:5" pos:end="231:7">ret</name> <operator pos:start="231:9" pos:end="231:9">=</operator> <call pos:start="231:11" pos:end="231:58"><name pos:start="231:11" pos:end="231:23">bdrv_truncate</name><argument_list pos:start="231:24" pos:end="231:58">(<argument pos:start="231:25" pos:end="231:26"><expr pos:start="231:25" pos:end="231:26"><name pos:start="231:25" pos:end="231:26">bs</name></expr></argument>, <argument pos:start="231:29" pos:end="231:57"><expr pos:start="231:29" pos:end="231:57"><name pos:start="231:29" pos:end="231:38">total_size</name> <operator pos:start="231:40" pos:end="231:40">*</operator> <name pos:start="231:42" pos:end="231:57">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="233:5" pos:end="239:5"><if pos:start="233:5" pos:end="239:5">if <condition pos:start="233:8" pos:end="233:16">(<expr pos:start="233:9" pos:end="233:15"><name pos:start="233:9" pos:end="233:11">ret</name> <operator pos:start="233:13" pos:end="233:13">&lt;</operator> <literal type="number" pos:start="233:15" pos:end="233:15">0</literal></expr>)</condition> <block pos:start="233:18" pos:end="239:5">{<block_content pos:start="235:9" pos:end="237:17">

        <expr_stmt pos:start="235:9" pos:end="235:63"><expr pos:start="235:9" pos:end="235:62"><call pos:start="235:9" pos:end="235:62"><name pos:start="235:9" pos:end="235:24">error_setg_errno</name><argument_list pos:start="235:25" pos:end="235:62">(<argument pos:start="235:26" pos:end="235:29"><expr pos:start="235:26" pos:end="235:29"><name pos:start="235:26" pos:end="235:29">errp</name></expr></argument>, <argument pos:start="235:32" pos:end="235:35"><expr pos:start="235:32" pos:end="235:35"><operator pos:start="235:32" pos:end="235:32">-</operator><name pos:start="235:33" pos:end="235:35">ret</name></expr></argument>, <argument pos:start="235:38" pos:end="235:61"><expr pos:start="235:38" pos:end="235:61"><literal type="string" pos:start="235:38" pos:end="235:61">"Could not resize image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="237:9" pos:end="237:17">goto <name pos:start="237:14" pos:end="237:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="243:5" pos:end="243:43">/* Want a backing file? There you go.*/</comment>

    <if_stmt pos:start="245:5" pos:end="259:5"><if pos:start="245:5" pos:end="259:5">if <condition pos:start="245:8" pos:end="245:21">(<expr pos:start="245:9" pos:end="245:20"><name pos:start="245:9" pos:end="245:20">backing_file</name></expr>)</condition> <block pos:start="245:23" pos:end="259:5">{<block_content pos:start="247:9" pos:end="257:9">

        <expr_stmt pos:start="247:9" pos:end="247:73"><expr pos:start="247:9" pos:end="247:72"><name pos:start="247:9" pos:end="247:11">ret</name> <operator pos:start="247:13" pos:end="247:13">=</operator> <call pos:start="247:15" pos:end="247:72"><name pos:start="247:15" pos:end="247:38">bdrv_change_backing_file</name><argument_list pos:start="247:39" pos:end="247:72">(<argument pos:start="247:40" pos:end="247:41"><expr pos:start="247:40" pos:end="247:41"><name pos:start="247:40" pos:end="247:41">bs</name></expr></argument>, <argument pos:start="247:44" pos:end="247:55"><expr pos:start="247:44" pos:end="247:55"><name pos:start="247:44" pos:end="247:55">backing_file</name></expr></argument>, <argument pos:start="247:58" pos:end="247:71"><expr pos:start="247:58" pos:end="247:71"><name pos:start="247:58" pos:end="247:71">backing_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="249:9" pos:end="257:9"><if pos:start="249:9" pos:end="257:9">if <condition pos:start="249:12" pos:end="249:20">(<expr pos:start="249:13" pos:end="249:19"><name pos:start="249:13" pos:end="249:15">ret</name> <operator pos:start="249:17" pos:end="249:17">&lt;</operator> <literal type="number" pos:start="249:19" pos:end="249:19">0</literal></expr>)</condition> <block pos:start="249:22" pos:end="257:9">{<block_content pos:start="251:13" pos:end="255:21">

            <expr_stmt pos:start="251:13" pos:end="253:79"><expr pos:start="251:13" pos:end="253:78"><call pos:start="251:13" pos:end="253:78"><name pos:start="251:13" pos:end="251:28">error_setg_errno</name><argument_list pos:start="251:29" pos:end="253:78">(<argument pos:start="251:30" pos:end="251:33"><expr pos:start="251:30" pos:end="251:33"><name pos:start="251:30" pos:end="251:33">errp</name></expr></argument>, <argument pos:start="251:36" pos:end="251:39"><expr pos:start="251:36" pos:end="251:39"><operator pos:start="251:36" pos:end="251:36">-</operator><name pos:start="251:37" pos:end="251:39">ret</name></expr></argument>, <argument pos:start="251:42" pos:end="253:47"><expr pos:start="251:42" pos:end="253:47"><literal type="string" pos:start="251:42" pos:end="251:78">"Could not assign backing file '%s' "</literal>

                             <literal type="string" pos:start="253:30" pos:end="253:47">"with format '%s'"</literal></expr></argument>, <argument pos:start="253:50" pos:end="253:61"><expr pos:start="253:50" pos:end="253:61"><name pos:start="253:50" pos:end="253:61">backing_file</name></expr></argument>, <argument pos:start="253:64" pos:end="253:77"><expr pos:start="253:64" pos:end="253:77"><name pos:start="253:64" pos:end="253:77">backing_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="255:13" pos:end="255:21">goto <name pos:start="255:18" pos:end="255:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="263:5" pos:end="263:68">/* And if we're supposed to preallocate metadata, do that now */</comment>

    <if_stmt pos:start="265:5" pos:end="283:5"><if pos:start="265:5" pos:end="283:5">if <condition pos:start="265:8" pos:end="265:17">(<expr pos:start="265:9" pos:end="265:16"><name pos:start="265:9" pos:end="265:16">prealloc</name></expr>)</condition> <block pos:start="265:19" pos:end="283:5">{<block_content pos:start="267:9" pos:end="281:9">

        <decl_stmt pos:start="267:9" pos:end="267:38"><decl pos:start="267:9" pos:end="267:37"><type pos:start="267:9" pos:end="267:23"><name pos:start="267:9" pos:end="267:21">BDRVQcowState</name> <modifier pos:start="267:23" pos:end="267:23">*</modifier></type><name pos:start="267:24" pos:end="267:24">s</name> <init pos:start="267:26" pos:end="267:37">= <expr pos:start="267:28" pos:end="267:37"><name pos:start="267:28" pos:end="267:37"><name pos:start="267:28" pos:end="267:29">bs</name><operator pos:start="267:30" pos:end="267:31">-&gt;</operator><name pos:start="267:32" pos:end="267:37">opaque</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:37"><expr pos:start="269:9" pos:end="269:36"><call pos:start="269:9" pos:end="269:36"><name pos:start="269:9" pos:end="269:26">qemu_co_mutex_lock</name><argument_list pos:start="269:27" pos:end="269:36">(<argument pos:start="269:28" pos:end="269:35"><expr pos:start="269:28" pos:end="269:35"><operator pos:start="269:28" pos:end="269:28">&amp;</operator><name pos:start="269:29" pos:end="269:35"><name pos:start="269:29" pos:end="269:29">s</name><operator pos:start="269:30" pos:end="269:31">-&gt;</operator><name pos:start="269:32" pos:end="269:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:30"><expr pos:start="271:9" pos:end="271:29"><name pos:start="271:9" pos:end="271:11">ret</name> <operator pos:start="271:13" pos:end="271:13">=</operator> <call pos:start="271:15" pos:end="271:29"><name pos:start="271:15" pos:end="271:25">preallocate</name><argument_list pos:start="271:26" pos:end="271:29">(<argument pos:start="271:27" pos:end="271:28"><expr pos:start="271:27" pos:end="271:28"><name pos:start="271:27" pos:end="271:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:39"><expr pos:start="273:9" pos:end="273:38"><call pos:start="273:9" pos:end="273:38"><name pos:start="273:9" pos:end="273:28">qemu_co_mutex_unlock</name><argument_list pos:start="273:29" pos:end="273:38">(<argument pos:start="273:30" pos:end="273:37"><expr pos:start="273:30" pos:end="273:37"><operator pos:start="273:30" pos:end="273:30">&amp;</operator><name pos:start="273:31" pos:end="273:37"><name pos:start="273:31" pos:end="273:31">s</name><operator pos:start="273:32" pos:end="273:33">-&gt;</operator><name pos:start="273:34" pos:end="273:37">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="275:9" pos:end="281:9"><if pos:start="275:9" pos:end="281:9">if <condition pos:start="275:12" pos:end="275:20">(<expr pos:start="275:13" pos:end="275:19"><name pos:start="275:13" pos:end="275:15">ret</name> <operator pos:start="275:17" pos:end="275:17">&lt;</operator> <literal type="number" pos:start="275:19" pos:end="275:19">0</literal></expr>)</condition> <block pos:start="275:22" pos:end="281:9">{<block_content pos:start="277:13" pos:end="279:21">

            <expr_stmt pos:start="277:13" pos:end="277:75"><expr pos:start="277:13" pos:end="277:74"><call pos:start="277:13" pos:end="277:74"><name pos:start="277:13" pos:end="277:28">error_setg_errno</name><argument_list pos:start="277:29" pos:end="277:74">(<argument pos:start="277:30" pos:end="277:33"><expr pos:start="277:30" pos:end="277:33"><name pos:start="277:30" pos:end="277:33">errp</name></expr></argument>, <argument pos:start="277:36" pos:end="277:39"><expr pos:start="277:36" pos:end="277:39"><operator pos:start="277:36" pos:end="277:36">-</operator><name pos:start="277:37" pos:end="277:39">ret</name></expr></argument>, <argument pos:start="277:42" pos:end="277:73"><expr pos:start="277:42" pos:end="277:73"><literal type="string" pos:start="277:42" pos:end="277:73">"Could not preallocate metadata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="279:13" pos:end="279:21">goto <name pos:start="279:18" pos:end="279:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="287:5" pos:end="287:19"><expr pos:start="287:5" pos:end="287:18"><call pos:start="287:5" pos:end="287:18"><name pos:start="287:5" pos:end="287:14">bdrv_close</name><argument_list pos:start="287:15" pos:end="287:18">(<argument pos:start="287:16" pos:end="287:17"><expr pos:start="287:16" pos:end="287:17"><name pos:start="287:16" pos:end="287:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="291:5" pos:end="291:79">/* Reopen the image without BDRV_O_NO_FLUSH to flush it before returning */</comment>

    <expr_stmt pos:start="293:5" pos:end="295:68"><expr pos:start="293:5" pos:end="295:67"><name pos:start="293:5" pos:end="293:7">ret</name> <operator pos:start="293:9" pos:end="293:9">=</operator> <call pos:start="293:11" pos:end="295:67"><name pos:start="293:11" pos:end="293:19">bdrv_open</name><argument_list pos:start="293:20" pos:end="295:67">(<argument pos:start="293:21" pos:end="293:22"><expr pos:start="293:21" pos:end="293:22"><name pos:start="293:21" pos:end="293:22">bs</name></expr></argument>, <argument pos:start="293:25" pos:end="293:32"><expr pos:start="293:25" pos:end="293:32"><name pos:start="293:25" pos:end="293:32">filename</name></expr></argument>, <argument pos:start="293:35" pos:end="293:38"><expr pos:start="293:35" pos:end="293:38"><name pos:start="293:35" pos:end="293:38">NULL</name></expr></argument>,

                    <argument pos:start="295:21" pos:end="295:49"><expr pos:start="295:21" pos:end="295:49"><name pos:start="295:21" pos:end="295:31">BDRV_O_RDWR</name> <operator pos:start="295:33" pos:end="295:33">|</operator> <name pos:start="295:35" pos:end="295:49">BDRV_O_CACHE_WB</name></expr></argument>, <argument pos:start="295:52" pos:end="295:54"><expr pos:start="295:52" pos:end="295:54"><name pos:start="295:52" pos:end="295:54">drv</name></expr></argument>, <argument pos:start="295:57" pos:end="295:66"><expr pos:start="295:57" pos:end="295:66"><operator pos:start="295:57" pos:end="295:57">&amp;</operator><name pos:start="295:58" pos:end="295:66">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="297:5" pos:end="303:5"><if pos:start="297:5" pos:end="303:5">if <condition pos:start="297:8" pos:end="297:33">(<expr pos:start="297:9" pos:end="297:32"><call pos:start="297:9" pos:end="297:32"><name pos:start="297:9" pos:end="297:20">error_is_set</name><argument_list pos:start="297:21" pos:end="297:32">(<argument pos:start="297:22" pos:end="297:31"><expr pos:start="297:22" pos:end="297:31"><operator pos:start="297:22" pos:end="297:22">&amp;</operator><name pos:start="297:23" pos:end="297:31">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="297:35" pos:end="303:5">{<block_content pos:start="299:9" pos:end="301:17">

        <expr_stmt pos:start="299:9" pos:end="299:41"><expr pos:start="299:9" pos:end="299:40"><call pos:start="299:9" pos:end="299:40"><name pos:start="299:9" pos:end="299:23">error_propagate</name><argument_list pos:start="299:24" pos:end="299:40">(<argument pos:start="299:25" pos:end="299:28"><expr pos:start="299:25" pos:end="299:28"><name pos:start="299:25" pos:end="299:28">errp</name></expr></argument>, <argument pos:start="299:31" pos:end="299:39"><expr pos:start="299:31" pos:end="299:39"><name pos:start="299:31" pos:end="299:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="301:9" pos:end="301:17">goto <name pos:start="301:14" pos:end="301:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="307:5" pos:end="307:12"><expr pos:start="307:5" pos:end="307:11"><name pos:start="307:5" pos:end="307:7">ret</name> <operator pos:start="307:9" pos:end="307:9">=</operator> <literal type="number" pos:start="307:11" pos:end="307:11">0</literal></expr>;</expr_stmt>

<label pos:start="309:1" pos:end="309:4"><name pos:start="309:1" pos:end="309:3">out</name>:</label>

    <expr_stmt pos:start="311:5" pos:end="311:19"><expr pos:start="311:5" pos:end="311:18"><call pos:start="311:5" pos:end="311:18"><name pos:start="311:5" pos:end="311:14">bdrv_unref</name><argument_list pos:start="311:15" pos:end="311:18">(<argument pos:start="311:16" pos:end="311:17"><expr pos:start="311:16" pos:end="311:17"><name pos:start="311:16" pos:end="311:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="313:5" pos:end="313:15">return <expr pos:start="313:12" pos:end="313:14"><name pos:start="313:12" pos:end="313:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
