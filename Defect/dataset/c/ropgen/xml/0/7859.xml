<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7859.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:36">bamboo_load_device_tree</name><parameter_list pos:start="1:37" pos:end="9:64">(<parameter pos:start="1:38" pos:end="1:60"><decl pos:start="1:38" pos:end="1:60"><type pos:start="1:38" pos:end="1:60"><name pos:start="1:38" pos:end="1:55">target_phys_addr_t</name></type> <name pos:start="1:57" pos:end="1:60">addr</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:53"><decl pos:start="3:38" pos:end="3:53"><type pos:start="3:38" pos:end="3:53"><name pos:start="3:38" pos:end="3:45">uint32_t</name></type> <name pos:start="3:47" pos:end="3:53">ramsize</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:67"><decl pos:start="5:38" pos:end="5:67"><type pos:start="5:38" pos:end="5:67"><name pos:start="5:38" pos:end="5:55">target_phys_addr_t</name></type> <name pos:start="5:57" pos:end="5:67">initrd_base</name></decl></parameter>,

                                     <parameter pos:start="7:38" pos:end="7:67"><decl pos:start="7:38" pos:end="7:67"><type pos:start="7:38" pos:end="7:67"><name pos:start="7:38" pos:end="7:55">target_phys_addr_t</name></type> <name pos:start="7:57" pos:end="7:67">initrd_size</name></decl></parameter>,

                                     <parameter pos:start="9:38" pos:end="9:63"><decl pos:start="9:38" pos:end="9:63"><type pos:start="9:38" pos:end="9:63"><specifier pos:start="9:38" pos:end="9:42">const</specifier> <name pos:start="9:44" pos:end="9:47">char</name> <modifier pos:start="9:49" pos:end="9:49">*</modifier></type><name pos:start="9:50" pos:end="9:63">kernel_cmdline</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="109:1">{<block_content pos:start="13:5" pos:end="107:15">

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">fdt</name> <init pos:start="13:15" pos:end="13:20">= <expr pos:start="13:17" pos:end="13:20"><name pos:start="13:17" pos:end="13:20">NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="15:1" pos:end="15:17">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:17">CONFIG_FDT</name></cpp:ifdef>

    <decl_stmt pos:start="17:5" pos:end="17:52"><decl pos:start="17:5" pos:end="17:51"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:31"><name pos:start="17:14" pos:end="17:29">mem_reg_property</name><index pos:start="17:30" pos:end="17:31">[]</index></name> <init pos:start="17:33" pos:end="17:51">= <expr pos:start="17:35" pos:end="17:51"><block pos:start="17:35" pos:end="17:51">{ <expr pos:start="17:37" pos:end="17:37"><literal type="number" pos:start="17:37" pos:end="17:37">0</literal></expr>, <expr pos:start="17:40" pos:end="17:40"><literal type="number" pos:start="17:40" pos:end="17:40">0</literal></expr>, <expr pos:start="17:43" pos:end="17:49"><name pos:start="17:43" pos:end="17:49">ramsize</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">char</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:16">fdt_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:76"><expr pos:start="27:5" pos:end="27:75"><name pos:start="27:5" pos:end="27:12">filename</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:75"><name pos:start="27:16" pos:end="27:29">qemu_find_file</name><argument_list pos:start="27:30" pos:end="27:75">(<argument pos:start="27:31" pos:end="27:49"><expr pos:start="27:31" pos:end="27:49"><name pos:start="27:31" pos:end="27:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="27:52" pos:end="27:74"><expr pos:start="27:52" pos:end="27:74"><name pos:start="27:52" pos:end="27:74">BINARY_DEVICE_TREE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:18">(<expr pos:start="29:9" pos:end="29:17"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:17">filename</name></expr>)</condition> <block pos:start="29:20" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:17">

        <goto pos:start="31:9" pos:end="31:17">goto <name pos:start="31:14" pos:end="31:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:48"><expr pos:start="35:5" pos:end="35:47"><name pos:start="35:5" pos:end="35:7">fdt</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:47"><name pos:start="35:11" pos:end="35:26">load_device_tree</name><argument_list pos:start="35:27" pos:end="35:47">(<argument pos:start="35:28" pos:end="35:35"><expr pos:start="35:28" pos:end="35:35"><name pos:start="35:28" pos:end="35:35">filename</name></expr></argument>, <argument pos:start="35:38" pos:end="35:46"><expr pos:start="35:38" pos:end="35:46"><operator pos:start="35:38" pos:end="35:38">&amp;</operator><name pos:start="35:39" pos:end="35:46">fdt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:24"><expr pos:start="37:5" pos:end="37:23"><call pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:13">qemu_free</name><argument_list pos:start="37:14" pos:end="37:23">(<argument pos:start="37:15" pos:end="37:22"><expr pos:start="37:15" pos:end="37:22"><name pos:start="37:15" pos:end="37:22">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:20">(<expr pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:11">fdt</name> <operator pos:start="39:13" pos:end="39:14">==</operator> <name pos:start="39:16" pos:end="39:19">NULL</name></expr>)</condition> <block pos:start="39:22" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:17">

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:43">/* Manipulate device tree in memory. */</comment>



    <expr_stmt pos:start="51:5" pos:end="53:57"><expr pos:start="51:5" pos:end="53:56"><name pos:start="51:5" pos:end="51:7">ret</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="53:56"><name pos:start="51:11" pos:end="51:30">qemu_devtree_setprop</name><argument_list pos:start="51:31" pos:end="53:56">(<argument pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><name pos:start="51:32" pos:end="51:34">fdt</name></expr></argument>, <argument pos:start="51:37" pos:end="51:45"><expr pos:start="51:37" pos:end="51:45"><literal type="string" pos:start="51:37" pos:end="51:45">"/memory"</literal></expr></argument>, <argument pos:start="51:48" pos:end="51:52"><expr pos:start="51:48" pos:end="51:52"><literal type="string" pos:start="51:48" pos:end="51:52">"reg"</literal></expr></argument>, <argument pos:start="51:55" pos:end="51:70"><expr pos:start="51:55" pos:end="51:70"><name pos:start="51:55" pos:end="51:70">mem_reg_property</name></expr></argument>,

                               <argument pos:start="53:32" pos:end="53:55"><expr pos:start="53:32" pos:end="53:55"><sizeof pos:start="53:32" pos:end="53:55">sizeof<argument_list pos:start="53:38" pos:end="53:55">(<argument pos:start="53:39" pos:end="53:54"><expr pos:start="53:39" pos:end="53:54"><name pos:start="53:39" pos:end="53:54">mem_reg_property</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="57:54"><if pos:start="55:5" pos:end="57:54">if <condition pos:start="55:8" pos:end="55:16">(<expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">&lt;</operator> <literal type="number" pos:start="55:15" pos:end="55:15">0</literal></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:54"><block_content pos:start="57:9" pos:end="57:54">

        <expr_stmt pos:start="57:9" pos:end="57:54"><expr pos:start="57:9" pos:end="57:53"><call pos:start="57:9" pos:end="57:53"><name pos:start="57:9" pos:end="57:15">fprintf</name><argument_list pos:start="57:16" pos:end="57:53">(<argument pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">stderr</name></expr></argument>, <argument pos:start="57:25" pos:end="57:52"><expr pos:start="57:25" pos:end="57:52"><literal type="string" pos:start="57:25" pos:end="57:52">"couldn't set /memory/reg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="63:49"><expr pos:start="61:5" pos:end="63:48"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="63:48"><name pos:start="61:11" pos:end="61:35">qemu_devtree_setprop_cell</name><argument_list pos:start="61:36" pos:end="63:48">(<argument pos:start="61:37" pos:end="61:39"><expr pos:start="61:37" pos:end="61:39"><name pos:start="61:37" pos:end="61:39">fdt</name></expr></argument>, <argument pos:start="61:42" pos:end="61:50"><expr pos:start="61:42" pos:end="61:50"><literal type="string" pos:start="61:42" pos:end="61:50">"/chosen"</literal></expr></argument>, <argument pos:start="61:53" pos:end="61:72"><expr pos:start="61:53" pos:end="61:72"><literal type="string" pos:start="61:53" pos:end="61:72">"linux,initrd-start"</literal></expr></argument>,

                                    <argument pos:start="63:37" pos:end="63:47"><expr pos:start="63:37" pos:end="63:47"><name pos:start="63:37" pos:end="63:47">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="67:69"><if pos:start="65:5" pos:end="67:69">if <condition pos:start="65:8" pos:end="65:16">(<expr pos:start="65:9" pos:end="65:15"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">&lt;</operator> <literal type="number" pos:start="65:15" pos:end="65:15">0</literal></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:69"><block_content pos:start="67:9" pos:end="67:69">

        <expr_stmt pos:start="67:9" pos:end="67:69"><expr pos:start="67:9" pos:end="67:68"><call pos:start="67:9" pos:end="67:68"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="67:68">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>, <argument pos:start="67:25" pos:end="67:67"><expr pos:start="67:25" pos:end="67:67"><literal type="string" pos:start="67:25" pos:end="67:67">"couldn't set /chosen/linux,initrd-start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="73:65"><expr pos:start="71:5" pos:end="73:64"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="73:64"><name pos:start="71:11" pos:end="71:35">qemu_devtree_setprop_cell</name><argument_list pos:start="71:36" pos:end="73:64">(<argument pos:start="71:37" pos:end="71:39"><expr pos:start="71:37" pos:end="71:39"><name pos:start="71:37" pos:end="71:39">fdt</name></expr></argument>, <argument pos:start="71:42" pos:end="71:50"><expr pos:start="71:42" pos:end="71:50"><literal type="string" pos:start="71:42" pos:end="71:50">"/chosen"</literal></expr></argument>, <argument pos:start="71:53" pos:end="71:70"><expr pos:start="71:53" pos:end="71:70"><literal type="string" pos:start="71:53" pos:end="71:70">"linux,initrd-end"</literal></expr></argument>,

                                    <argument pos:start="73:37" pos:end="73:63"><expr pos:start="73:37" pos:end="73:63"><operator pos:start="73:37" pos:end="73:37">(</operator><name pos:start="73:38" pos:end="73:48">initrd_base</name> <operator pos:start="73:50" pos:end="73:50">+</operator> <name pos:start="73:52" pos:end="73:62">initrd_size</name><operator pos:start="73:63" pos:end="73:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="77:67"><if pos:start="75:5" pos:end="77:67">if <condition pos:start="75:8" pos:end="75:16">(<expr pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">&lt;</operator> <literal type="number" pos:start="75:15" pos:end="75:15">0</literal></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:67"><block_content pos:start="77:9" pos:end="77:67">

        <expr_stmt pos:start="77:9" pos:end="77:67"><expr pos:start="77:9" pos:end="77:66"><call pos:start="77:9" pos:end="77:66"><name pos:start="77:9" pos:end="77:15">fprintf</name><argument_list pos:start="77:16" pos:end="77:66">(<argument pos:start="77:17" pos:end="77:22"><expr pos:start="77:17" pos:end="77:22"><name pos:start="77:17" pos:end="77:22">stderr</name></expr></argument>, <argument pos:start="77:25" pos:end="77:65"><expr pos:start="77:25" pos:end="77:65"><literal type="string" pos:start="77:25" pos:end="77:65">"couldn't set /chosen/linux,initrd-end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="83:54"><expr pos:start="81:5" pos:end="83:53"><name pos:start="81:5" pos:end="81:7">ret</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="83:53"><name pos:start="81:11" pos:end="81:37">qemu_devtree_setprop_string</name><argument_list pos:start="81:38" pos:end="83:53">(<argument pos:start="81:39" pos:end="81:41"><expr pos:start="81:39" pos:end="81:41"><name pos:start="81:39" pos:end="81:41">fdt</name></expr></argument>, <argument pos:start="81:44" pos:end="81:52"><expr pos:start="81:44" pos:end="81:52"><literal type="string" pos:start="81:44" pos:end="81:52">"/chosen"</literal></expr></argument>, <argument pos:start="81:55" pos:end="81:64"><expr pos:start="81:55" pos:end="81:64"><literal type="string" pos:start="81:55" pos:end="81:64">"bootargs"</literal></expr></argument>,

                                      <argument pos:start="83:39" pos:end="83:52"><expr pos:start="83:39" pos:end="83:52"><name pos:start="83:39" pos:end="83:52">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="87:59"><if pos:start="85:5" pos:end="87:59">if <condition pos:start="85:8" pos:end="85:16">(<expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">&lt;</operator> <literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:59"><block_content pos:start="87:9" pos:end="87:59">

        <expr_stmt pos:start="87:9" pos:end="87:59"><expr pos:start="87:9" pos:end="87:58"><call pos:start="87:9" pos:end="87:58"><name pos:start="87:9" pos:end="87:15">fprintf</name><argument_list pos:start="87:16" pos:end="87:58">(<argument pos:start="87:17" pos:end="87:22"><expr pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:22">stderr</name></expr></argument>, <argument pos:start="87:25" pos:end="87:57"><expr pos:start="87:25" pos:end="87:57"><literal type="string" pos:start="87:25" pos:end="87:57">"couldn't set /chosen/bootargs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="93:31"><if pos:start="91:5" pos:end="93:31">if <condition pos:start="91:8" pos:end="91:22">(<expr pos:start="91:9" pos:end="91:21"><call pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:19">kvm_enabled</name><argument_list pos:start="91:20" pos:end="91:21">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:31"><block_content pos:start="93:9" pos:end="93:31">

        <expr_stmt pos:start="93:9" pos:end="93:31"><expr pos:start="93:9" pos:end="93:30"><call pos:start="93:9" pos:end="93:30"><name pos:start="93:9" pos:end="93:25">kvmppc_fdt_update</name><argument_list pos:start="93:26" pos:end="93:30">(<argument pos:start="93:27" pos:end="93:29"><expr pos:start="93:27" pos:end="93:29"><name pos:start="93:27" pos:end="93:29">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:60"><expr pos:start="97:5" pos:end="97:59"><call pos:start="97:5" pos:end="97:59"><name pos:start="97:5" pos:end="97:29">cpu_physical_memory_write</name> <argument_list pos:start="97:31" pos:end="97:59">(<argument pos:start="97:32" pos:end="97:35"><expr pos:start="97:32" pos:end="97:35"><name pos:start="97:32" pos:end="97:35">addr</name></expr></argument>, <argument pos:start="97:38" pos:end="97:48"><expr pos:start="97:38" pos:end="97:48"><operator pos:start="97:38" pos:end="97:38">(</operator><name pos:start="97:39" pos:end="97:42">void</name> <operator pos:start="97:44" pos:end="97:44">*</operator><operator pos:start="97:45" pos:end="97:45">)</operator><name pos:start="97:46" pos:end="97:48">fdt</name></expr></argument>, <argument pos:start="97:51" pos:end="97:58"><expr pos:start="97:51" pos:end="97:58"><name pos:start="97:51" pos:end="97:58">fdt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="101:1" pos:end="104:0"><name pos:start="101:1" pos:end="101:3">out</name>:</label>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>



    <return pos:start="107:5" pos:end="107:15">return <expr pos:start="107:12" pos:end="107:14"><name pos:start="107:12" pos:end="107:14">fdt</name></expr>;</return>

</block_content>}</block></function>
</unit>
