<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13013.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">pc_basic_device_init</name><parameter_list pos:start="1:26" pos:end="3:48">(<parameter pos:start="1:27" pos:end="1:43"><decl pos:start="1:27" pos:end="1:43"><type pos:start="1:27" pos:end="1:43"><name pos:start="1:27" pos:end="1:34">qemu_irq</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:43">isa_irq</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:47"><decl pos:start="3:27" pos:end="3:47"><type pos:start="3:27" pos:end="3:47"><name pos:start="3:27" pos:end="3:35">ISADevice</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier><modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:47">rtc_state</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="125:1">{<block_content pos:start="7:5" pos:end="123:24">

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">DriveInfo</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:25"><name pos:start="9:16" pos:end="9:17">fd</name><index pos:start="9:18" pos:end="9:25">[<expr pos:start="9:19" pos:end="9:24"><name pos:start="9:19" pos:end="9:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">PITState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">pit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">qemu_irq</name></type> <name pos:start="13:14" pos:end="13:20">rtc_irq</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">qemu_irq</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:22">a20_line</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:40"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">ISADevice</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:20">i8042</name></decl>, <decl pos:start="17:23" pos:end="17:29"><type ref="prev" pos:start="17:5" pos:end="17:15"><modifier pos:start="17:23" pos:end="17:23">*</modifier></type><name pos:start="17:24" pos:end="17:29">port92</name></decl>, <decl pos:start="17:32" pos:end="17:39"><type ref="prev" pos:start="17:5" pos:end="17:15"><modifier pos:start="17:32" pos:end="17:32">*</modifier></type><name pos:start="17:33" pos:end="17:39">vmmouse</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">qemu_irq</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:26">cpu_exit_irq</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:60"><expr pos:start="23:5" pos:end="23:59"><call pos:start="23:5" pos:end="23:59"><name pos:start="23:5" pos:end="23:25">register_ioport_write</name><argument_list pos:start="23:26" pos:end="23:59">(<argument pos:start="23:27" pos:end="23:30"><expr pos:start="23:27" pos:end="23:30"><literal type="number" pos:start="23:27" pos:end="23:30">0x80</literal></expr></argument>, <argument pos:start="23:33" pos:end="23:33"><expr pos:start="23:33" pos:end="23:33"><literal type="number" pos:start="23:33" pos:end="23:33">1</literal></expr></argument>, <argument pos:start="23:36" pos:end="23:36"><expr pos:start="23:36" pos:end="23:36"><literal type="number" pos:start="23:36" pos:end="23:36">1</literal></expr></argument>, <argument pos:start="23:39" pos:end="23:52"><expr pos:start="23:39" pos:end="23:52"><name pos:start="23:39" pos:end="23:52">ioport80_write</name></expr></argument>, <argument pos:start="23:55" pos:end="23:58"><expr pos:start="23:55" pos:end="23:58"><name pos:start="23:55" pos:end="23:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:60"><expr pos:start="27:5" pos:end="27:59"><call pos:start="27:5" pos:end="27:59"><name pos:start="27:5" pos:end="27:25">register_ioport_write</name><argument_list pos:start="27:26" pos:end="27:59">(<argument pos:start="27:27" pos:end="27:30"><expr pos:start="27:27" pos:end="27:30"><literal type="number" pos:start="27:27" pos:end="27:30">0xf0</literal></expr></argument>, <argument pos:start="27:33" pos:end="27:33"><expr pos:start="27:33" pos:end="27:33"><literal type="number" pos:start="27:33" pos:end="27:33">1</literal></expr></argument>, <argument pos:start="27:36" pos:end="27:36"><expr pos:start="27:36" pos:end="27:36"><literal type="number" pos:start="27:36" pos:end="27:36">1</literal></expr></argument>, <argument pos:start="27:39" pos:end="27:52"><expr pos:start="27:39" pos:end="27:52"><name pos:start="27:39" pos:end="27:52">ioportF0_write</name></expr></argument>, <argument pos:start="27:55" pos:end="27:58"><expr pos:start="27:55" pos:end="27:58"><name pos:start="27:55" pos:end="27:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="49:5"><if pos:start="31:5" pos:end="49:5">if <condition pos:start="31:8" pos:end="31:17">(<expr pos:start="31:9" pos:end="31:16"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:16">no_hpet</name></expr>)</condition> <block pos:start="31:19" pos:end="49:5">{<block_content pos:start="33:9" pos:end="47:9">

        <decl_stmt pos:start="33:9" pos:end="33:78"><decl pos:start="33:9" pos:end="33:77"><type pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:19">DeviceState</name> <modifier pos:start="33:21" pos:end="33:21">*</modifier></type><name pos:start="33:22" pos:end="33:25">hpet</name> <init pos:start="33:27" pos:end="33:77">= <expr pos:start="33:29" pos:end="33:77"><call pos:start="33:29" pos:end="33:77"><name pos:start="33:29" pos:end="33:52">sysbus_try_create_simple</name><argument_list pos:start="33:53" pos:end="33:77">(<argument pos:start="33:54" pos:end="33:59"><expr pos:start="33:54" pos:end="33:59"><literal type="string" pos:start="33:54" pos:end="33:59">"hpet"</literal></expr></argument>, <argument pos:start="33:62" pos:end="33:70"><expr pos:start="33:62" pos:end="33:70"><name pos:start="33:62" pos:end="33:70">HPET_BASE</name></expr></argument>, <argument pos:start="33:73" pos:end="33:76"><expr pos:start="33:73" pos:end="33:76"><name pos:start="33:73" pos:end="33:76">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="37:9" pos:end="47:9"><if pos:start="37:9" pos:end="47:9">if <condition pos:start="37:12" pos:end="37:17">(<expr pos:start="37:13" pos:end="37:16"><name pos:start="37:13" pos:end="37:16">hpet</name></expr>)</condition> <block pos:start="37:19" pos:end="47:9">{<block_content pos:start="39:13" pos:end="45:48">

            <for pos:start="39:13" pos:end="43:13">for <control pos:start="39:17" pos:end="39:36">(<init pos:start="39:18" pos:end="39:23"><expr pos:start="39:18" pos:end="39:22"><name pos:start="39:18" pos:end="39:18">i</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <literal type="number" pos:start="39:22" pos:end="39:22">0</literal></expr>;</init> <condition pos:start="39:25" pos:end="39:31"><expr pos:start="39:25" pos:end="39:30"><name pos:start="39:25" pos:end="39:25">i</name> <operator pos:start="39:27" pos:end="39:27">&lt;</operator> <literal type="number" pos:start="39:29" pos:end="39:30">24</literal></expr>;</condition> <incr pos:start="39:33" pos:end="39:35"><expr pos:start="39:33" pos:end="39:35"><name pos:start="39:33" pos:end="39:33">i</name><operator pos:start="39:34" pos:end="39:35">++</operator></expr></incr>)</control> <block pos:start="39:38" pos:end="43:13">{<block_content pos:start="41:17" pos:end="41:74">

                <expr_stmt pos:start="41:17" pos:end="41:74"><expr pos:start="41:17" pos:end="41:73"><call pos:start="41:17" pos:end="41:73"><name pos:start="41:17" pos:end="41:34">sysbus_connect_irq</name><argument_list pos:start="41:35" pos:end="41:73">(<argument pos:start="41:36" pos:end="41:57"><expr pos:start="41:36" pos:end="41:57"><call pos:start="41:36" pos:end="41:57"><name pos:start="41:36" pos:end="41:51">sysbus_from_qdev</name><argument_list pos:start="41:52" pos:end="41:57">(<argument pos:start="41:53" pos:end="41:56"><expr pos:start="41:53" pos:end="41:56"><name pos:start="41:53" pos:end="41:56">hpet</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:60" pos:end="41:60"><expr pos:start="41:60" pos:end="41:60"><name pos:start="41:60" pos:end="41:60">i</name></expr></argument>, <argument pos:start="41:63" pos:end="41:72"><expr pos:start="41:63" pos:end="41:72"><name pos:start="41:63" pos:end="41:72"><name pos:start="41:63" pos:end="41:69">isa_irq</name><index pos:start="41:70" pos:end="41:72">[<expr pos:start="41:71" pos:end="41:71"><name pos:start="41:71" pos:end="41:71">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="45:13" pos:end="45:48"><expr pos:start="45:13" pos:end="45:47"><name pos:start="45:13" pos:end="45:19">rtc_irq</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <call pos:start="45:23" pos:end="45:47"><name pos:start="45:23" pos:end="45:38">qdev_get_gpio_in</name><argument_list pos:start="45:39" pos:end="45:47">(<argument pos:start="45:40" pos:end="45:43"><expr pos:start="45:40" pos:end="45:43"><name pos:start="45:40" pos:end="45:43">hpet</name></expr></argument>, <argument pos:start="45:46" pos:end="45:46"><expr pos:start="45:46" pos:end="45:46"><literal type="number" pos:start="45:46" pos:end="45:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:41"><expr pos:start="51:5" pos:end="51:40"><operator pos:start="51:5" pos:end="51:5">*</operator><name pos:start="51:6" pos:end="51:14">rtc_state</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="51:40"><name pos:start="51:18" pos:end="51:25">rtc_init</name><argument_list pos:start="51:26" pos:end="51:40">(<argument pos:start="51:27" pos:end="51:30"><expr pos:start="51:27" pos:end="51:30"><literal type="number" pos:start="51:27" pos:end="51:30">2000</literal></expr></argument>, <argument pos:start="51:33" pos:end="51:39"><expr pos:start="51:33" pos:end="51:39"><name pos:start="51:33" pos:end="51:39">rtc_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:52"><expr pos:start="55:5" pos:end="55:51"><call pos:start="55:5" pos:end="55:51"><name pos:start="55:5" pos:end="55:26">qemu_register_boot_set</name><argument_list pos:start="55:27" pos:end="55:51">(<argument pos:start="55:28" pos:end="55:38"><expr pos:start="55:28" pos:end="55:38"><name pos:start="55:28" pos:end="55:38">pc_boot_set</name></expr></argument>, <argument pos:start="55:41" pos:end="55:50"><expr pos:start="55:41" pos:end="55:50"><operator pos:start="55:41" pos:end="55:41">*</operator><name pos:start="55:42" pos:end="55:50">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:45"><expr pos:start="59:5" pos:end="59:44"><name pos:start="59:5" pos:end="59:7">pit</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:44"><name pos:start="59:11" pos:end="59:18">pit_init</name><argument_list pos:start="59:19" pos:end="59:44">(<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><literal type="number" pos:start="59:20" pos:end="59:23">0x40</literal></expr></argument>, <argument pos:start="59:26" pos:end="59:43"><expr pos:start="59:26" pos:end="59:43"><call pos:start="59:26" pos:end="59:43"><name pos:start="59:26" pos:end="59:40">isa_reserve_irq</name><argument_list pos:start="59:41" pos:end="59:43">(<argument pos:start="59:42" pos:end="59:42"><expr pos:start="59:42" pos:end="59:42"><literal type="number" pos:start="59:42" pos:end="59:42">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:20"><expr pos:start="61:5" pos:end="61:19"><call pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:14">pcspk_init</name><argument_list pos:start="61:15" pos:end="61:19">(<argument pos:start="61:16" pos:end="61:18"><expr pos:start="61:16" pos:end="61:18"><name pos:start="61:16" pos:end="61:18">pit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="65:5" pos:end="73:5">for<control pos:start="65:8" pos:end="65:41">(<init pos:start="65:9" pos:end="65:14"><expr pos:start="65:9" pos:end="65:13"><name pos:start="65:9" pos:end="65:9">i</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <literal type="number" pos:start="65:13" pos:end="65:13">0</literal></expr>;</init> <condition pos:start="65:16" pos:end="65:36"><expr pos:start="65:16" pos:end="65:35"><name pos:start="65:16" pos:end="65:16">i</name> <operator pos:start="65:18" pos:end="65:18">&lt;</operator> <name pos:start="65:20" pos:end="65:35">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="65:38" pos:end="65:40"><expr pos:start="65:38" pos:end="65:40"><name pos:start="65:38" pos:end="65:38">i</name><operator pos:start="65:39" pos:end="65:40">++</operator></expr></incr>)</control> <block pos:start="65:43" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:9">

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:26">(<expr pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:22">serial_hds</name><index pos:start="67:23" pos:end="67:25">[<expr pos:start="67:24" pos:end="67:24"><name pos:start="67:24" pos:end="67:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="67:28" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:46">

            <expr_stmt pos:start="69:13" pos:end="69:46"><expr pos:start="69:13" pos:end="69:45"><call pos:start="69:13" pos:end="69:45"><name pos:start="69:13" pos:end="69:27">serial_isa_init</name><argument_list pos:start="69:28" pos:end="69:45">(<argument pos:start="69:29" pos:end="69:29"><expr pos:start="69:29" pos:end="69:29"><name pos:start="69:29" pos:end="69:29">i</name></expr></argument>, <argument pos:start="69:32" pos:end="69:44"><expr pos:start="69:32" pos:end="69:44"><name pos:start="69:32" pos:end="69:44"><name pos:start="69:32" pos:end="69:41">serial_hds</name><index pos:start="69:42" pos:end="69:44">[<expr pos:start="69:43" pos:end="69:43"><name pos:start="69:43" pos:end="69:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="77:5" pos:end="85:5">for<control pos:start="77:8" pos:end="77:43">(<init pos:start="77:9" pos:end="77:14"><expr pos:start="77:9" pos:end="77:13"><name pos:start="77:9" pos:end="77:9">i</name> <operator pos:start="77:11" pos:end="77:11">=</operator> <literal type="number" pos:start="77:13" pos:end="77:13">0</literal></expr>;</init> <condition pos:start="77:16" pos:end="77:38"><expr pos:start="77:16" pos:end="77:37"><name pos:start="77:16" pos:end="77:16">i</name> <operator pos:start="77:18" pos:end="77:18">&lt;</operator> <name pos:start="77:20" pos:end="77:37">MAX_PARALLEL_PORTS</name></expr>;</condition> <incr pos:start="77:40" pos:end="77:42"><expr pos:start="77:40" pos:end="77:42"><name pos:start="77:40" pos:end="77:40">i</name><operator pos:start="77:41" pos:end="77:42">++</operator></expr></incr>)</control> <block pos:start="77:45" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:9">

        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:28">(<expr pos:start="79:13" pos:end="79:27"><name pos:start="79:13" pos:end="79:27"><name pos:start="79:13" pos:end="79:24">parallel_hds</name><index pos:start="79:25" pos:end="79:27">[<expr pos:start="79:26" pos:end="79:26"><name pos:start="79:26" pos:end="79:26">i</name></expr>]</index></name></expr>)</condition> <block pos:start="79:30" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:46">

            <expr_stmt pos:start="81:13" pos:end="81:46"><expr pos:start="81:13" pos:end="81:45"><call pos:start="81:13" pos:end="81:45"><name pos:start="81:13" pos:end="81:25">parallel_init</name><argument_list pos:start="81:26" pos:end="81:45">(<argument pos:start="81:27" pos:end="81:27"><expr pos:start="81:27" pos:end="81:27"><name pos:start="81:27" pos:end="81:27">i</name></expr></argument>, <argument pos:start="81:30" pos:end="81:44"><expr pos:start="81:30" pos:end="81:44"><name pos:start="81:30" pos:end="81:44"><name pos:start="81:30" pos:end="81:41">parallel_hds</name><index pos:start="81:42" pos:end="81:44">[<expr pos:start="81:43" pos:end="81:43"><name pos:start="81:43" pos:end="81:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="89:5" pos:end="89:72"><expr pos:start="89:5" pos:end="89:71"><name pos:start="89:5" pos:end="89:12">a20_line</name> <operator pos:start="89:14" pos:end="89:14">=</operator> <call pos:start="89:16" pos:end="89:71"><name pos:start="89:16" pos:end="89:33">qemu_allocate_irqs</name><argument_list pos:start="89:34" pos:end="89:71">(<argument pos:start="89:35" pos:end="89:56"><expr pos:start="89:35" pos:end="89:56"><name pos:start="89:35" pos:end="89:56">handle_a20_line_change</name></expr></argument>, <argument pos:start="89:59" pos:end="89:67"><expr pos:start="89:59" pos:end="89:67"><name pos:start="89:59" pos:end="89:67">first_cpu</name></expr></argument>, <argument pos:start="89:70" pos:end="89:70"><expr pos:start="89:70" pos:end="89:70"><literal type="number" pos:start="89:70" pos:end="89:70">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:39"><expr pos:start="91:5" pos:end="91:38"><name pos:start="91:5" pos:end="91:9">i8042</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <call pos:start="91:13" pos:end="91:38"><name pos:start="91:13" pos:end="91:29">isa_create_simple</name><argument_list pos:start="91:30" pos:end="91:38">(<argument pos:start="91:31" pos:end="91:37"><expr pos:start="91:31" pos:end="91:37"><literal type="string" pos:start="91:31" pos:end="91:37">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:46"><expr pos:start="93:5" pos:end="93:45"><call pos:start="93:5" pos:end="93:45"><name pos:start="93:5" pos:end="93:24">i8042_setup_a20_line</name><argument_list pos:start="93:25" pos:end="93:45">(<argument pos:start="93:26" pos:end="93:30"><expr pos:start="93:26" pos:end="93:30"><name pos:start="93:26" pos:end="93:30">i8042</name></expr></argument>, <argument pos:start="93:33" pos:end="93:44"><expr pos:start="93:33" pos:end="93:44"><operator pos:start="93:33" pos:end="93:33">&amp;</operator><name pos:start="93:34" pos:end="93:44"><name pos:start="93:34" pos:end="93:41">a20_line</name><index pos:start="93:42" pos:end="93:44">[<expr pos:start="93:43" pos:end="93:43"><literal type="number" pos:start="93:43" pos:end="93:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:18"><expr pos:start="95:5" pos:end="95:17"><call pos:start="95:5" pos:end="95:17"><name pos:start="95:5" pos:end="95:15">vmport_init</name><argument_list pos:start="95:16" pos:end="95:17">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:40"><expr pos:start="97:5" pos:end="97:39"><name pos:start="97:5" pos:end="97:11">vmmouse</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:39"><name pos:start="97:15" pos:end="97:28">isa_try_create</name><argument_list pos:start="97:29" pos:end="97:39">(<argument pos:start="97:30" pos:end="97:38"><expr pos:start="97:30" pos:end="97:38"><literal type="string" pos:start="97:30" pos:end="97:38">"vmmouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="103:5"><if pos:start="99:5" pos:end="103:5">if <condition pos:start="99:8" pos:end="99:16">(<expr pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:15">vmmouse</name></expr>)</condition> <block pos:start="99:18" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:62">

        <expr_stmt pos:start="101:9" pos:end="101:62"><expr pos:start="101:9" pos:end="101:61"><call pos:start="101:9" pos:end="101:61"><name pos:start="101:9" pos:end="101:25">qdev_prop_set_ptr</name><argument_list pos:start="101:26" pos:end="101:61">(<argument pos:start="101:27" pos:end="101:40"><expr pos:start="101:27" pos:end="101:40"><operator pos:start="101:27" pos:end="101:27">&amp;</operator><name pos:start="101:28" pos:end="101:40"><name pos:start="101:28" pos:end="101:34">vmmouse</name><operator pos:start="101:35" pos:end="101:36">-&gt;</operator><name pos:start="101:37" pos:end="101:40">qdev</name></name></expr></argument>, <argument pos:start="101:43" pos:end="101:53"><expr pos:start="101:43" pos:end="101:53"><literal type="string" pos:start="101:43" pos:end="101:53">"ps2_mouse"</literal></expr></argument>, <argument pos:start="101:56" pos:end="101:60"><expr pos:start="101:56" pos:end="101:60"><name pos:start="101:56" pos:end="101:60">i8042</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:41"><expr pos:start="105:5" pos:end="105:40"><name pos:start="105:5" pos:end="105:10">port92</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <call pos:start="105:14" pos:end="105:40"><name pos:start="105:14" pos:end="105:30">isa_create_simple</name><argument_list pos:start="105:31" pos:end="105:40">(<argument pos:start="105:32" pos:end="105:39"><expr pos:start="105:32" pos:end="105:39"><literal type="string" pos:start="105:32" pos:end="105:39">"port92"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:38"><expr pos:start="107:5" pos:end="107:37"><call pos:start="107:5" pos:end="107:37"><name pos:start="107:5" pos:end="107:15">port92_init</name><argument_list pos:start="107:16" pos:end="107:37">(<argument pos:start="107:17" pos:end="107:22"><expr pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:22">port92</name></expr></argument>, <argument pos:start="107:25" pos:end="107:36"><expr pos:start="107:25" pos:end="107:36"><operator pos:start="107:25" pos:end="107:25">&amp;</operator><name pos:start="107:26" pos:end="107:36"><name pos:start="107:26" pos:end="107:33">a20_line</name><index pos:start="107:34" pos:end="107:36">[<expr pos:start="107:35" pos:end="107:35"><literal type="number" pos:start="107:35" pos:end="107:35">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:65"><expr pos:start="111:5" pos:end="111:64"><name pos:start="111:5" pos:end="111:16">cpu_exit_irq</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <call pos:start="111:20" pos:end="111:64"><name pos:start="111:20" pos:end="111:37">qemu_allocate_irqs</name><argument_list pos:start="111:38" pos:end="111:64">(<argument pos:start="111:39" pos:end="111:54"><expr pos:start="111:39" pos:end="111:54"><name pos:start="111:39" pos:end="111:54">cpu_request_exit</name></expr></argument>, <argument pos:start="111:57" pos:end="111:60"><expr pos:start="111:57" pos:end="111:60"><name pos:start="111:57" pos:end="111:60">NULL</name></expr></argument>, <argument pos:start="111:63" pos:end="111:63"><expr pos:start="111:63" pos:end="111:63"><literal type="number" pos:start="111:63" pos:end="111:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:30"><expr pos:start="113:5" pos:end="113:29"><call pos:start="113:5" pos:end="113:29"><name pos:start="113:5" pos:end="113:12">DMA_init</name><argument_list pos:start="113:13" pos:end="113:29">(<argument pos:start="113:14" pos:end="113:14"><expr pos:start="113:14" pos:end="113:14"><literal type="number" pos:start="113:14" pos:end="113:14">0</literal></expr></argument>, <argument pos:start="113:17" pos:end="113:28"><expr pos:start="113:17" pos:end="113:28"><name pos:start="113:17" pos:end="113:28">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="117:5" pos:end="121:5">for<control pos:start="117:8" pos:end="117:31">(<init pos:start="117:9" pos:end="117:14"><expr pos:start="117:9" pos:end="117:13"><name pos:start="117:9" pos:end="117:9">i</name> <operator pos:start="117:11" pos:end="117:11">=</operator> <literal type="number" pos:start="117:13" pos:end="117:13">0</literal></expr>;</init> <condition pos:start="117:16" pos:end="117:26"><expr pos:start="117:16" pos:end="117:25"><name pos:start="117:16" pos:end="117:16">i</name> <operator pos:start="117:18" pos:end="117:18">&lt;</operator> <name pos:start="117:20" pos:end="117:25">MAX_FD</name></expr>;</condition> <incr pos:start="117:28" pos:end="117:30"><expr pos:start="117:28" pos:end="117:30"><name pos:start="117:28" pos:end="117:28">i</name><operator pos:start="117:29" pos:end="117:30">++</operator></expr></incr>)</control> <block pos:start="117:33" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:43">

        <expr_stmt pos:start="119:9" pos:end="119:43"><expr pos:start="119:9" pos:end="119:42"><name pos:start="119:9" pos:end="119:13"><name pos:start="119:9" pos:end="119:10">fd</name><index pos:start="119:11" pos:end="119:13">[<expr pos:start="119:12" pos:end="119:12"><name pos:start="119:12" pos:end="119:12">i</name></expr>]</index></name> <operator pos:start="119:15" pos:end="119:15">=</operator> <call pos:start="119:17" pos:end="119:42"><name pos:start="119:17" pos:end="119:25">drive_get</name><argument_list pos:start="119:26" pos:end="119:42">(<argument pos:start="119:27" pos:end="119:35"><expr pos:start="119:27" pos:end="119:35"><name pos:start="119:27" pos:end="119:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="119:38" pos:end="119:38"><expr pos:start="119:38" pos:end="119:38"><literal type="number" pos:start="119:38" pos:end="119:38">0</literal></expr></argument>, <argument pos:start="119:41" pos:end="119:41"><expr pos:start="119:41" pos:end="119:41"><name pos:start="119:41" pos:end="119:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="123:5" pos:end="123:24"><expr pos:start="123:5" pos:end="123:23"><call pos:start="123:5" pos:end="123:23"><name pos:start="123:5" pos:end="123:19">fdctrl_init_isa</name><argument_list pos:start="123:20" pos:end="123:23">(<argument pos:start="123:21" pos:end="123:22"><expr pos:start="123:21" pos:end="123:22"><name pos:start="123:21" pos:end="123:22">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
