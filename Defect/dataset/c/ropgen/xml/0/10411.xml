<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10411.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_residuals</name><parameter_list pos:start="1:28" pos:end="1:72">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:39">FLACContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:55"><decl pos:start="1:45" pos:end="1:55"><type pos:start="1:45" pos:end="1:55"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:55">channel</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:71"><decl pos:start="1:58" pos:end="1:71"><type pos:start="1:58" pos:end="1:71"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:71">pred_order</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:13">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">tmp</name></decl>, <decl pos:start="5:17" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:25">partition</name></decl>, <decl pos:start="5:28" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:28" pos:end="5:38">method_type</name></decl>, <decl pos:start="5:41" pos:end="5:50"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:41" pos:end="5:50">rice_order</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">sample</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>, <decl pos:start="7:21" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:27">samples</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:38"><expr pos:start="11:5" pos:end="11:37"><name pos:start="11:5" pos:end="11:15">method_type</name> <operator pos:start="11:17" pos:end="11:17">=</operator> <call pos:start="11:19" pos:end="11:37"><name pos:start="11:19" pos:end="11:26">get_bits</name><argument_list pos:start="11:27" pos:end="11:37">(<argument pos:start="11:28" pos:end="11:33"><expr pos:start="11:28" pos:end="11:33"><operator pos:start="11:28" pos:end="11:28">&amp;</operator><name pos:start="11:29" pos:end="11:33"><name pos:start="11:29" pos:end="11:29">s</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:33">gb</name></name></expr></argument>, <argument pos:start="11:36" pos:end="11:36"><expr pos:start="11:36" pos:end="11:36"><literal type="number" pos:start="11:36" pos:end="11:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:24">(<expr pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:19">method_type</name> <operator pos:start="13:21" pos:end="13:21">&gt;</operator> <literal type="number" pos:start="13:23" pos:end="13:23">1</literal></expr>)</condition> <block pos:start="13:26" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:18">

        <expr_stmt pos:start="15:9" pos:end="17:28"><expr pos:start="15:9" pos:end="17:27"><call pos:start="15:9" pos:end="17:27"><name pos:start="15:9" pos:end="15:14">av_log</name><argument_list pos:start="15:15" pos:end="17:27">(<argument pos:start="15:16" pos:end="15:23"><expr pos:start="15:16" pos:end="15:23"><name pos:start="15:16" pos:end="15:23"><name pos:start="15:16" pos:end="15:16">s</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:23">avctx</name></name></expr></argument>, <argument pos:start="15:26" pos:end="15:37"><expr pos:start="15:26" pos:end="15:37"><name pos:start="15:26" pos:end="15:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="15:40" pos:end="15:76"><expr pos:start="15:40" pos:end="15:76"><literal type="string" pos:start="15:40" pos:end="15:76">"illegal residual coding method %d\n"</literal></expr></argument>,

               <argument pos:start="17:16" pos:end="17:26"><expr pos:start="17:16" pos:end="17:26"><name pos:start="17:16" pos:end="17:26">method_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:14">rice_order</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <call pos:start="25:18" pos:end="25:36"><name pos:start="25:18" pos:end="25:25">get_bits</name><argument_list pos:start="25:26" pos:end="25:36">(<argument pos:start="25:27" pos:end="25:32"><expr pos:start="25:27" pos:end="25:32"><operator pos:start="25:27" pos:end="25:27">&amp;</operator><name pos:start="25:28" pos:end="25:32"><name pos:start="25:28" pos:end="25:28">s</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:32">gb</name></name></expr></argument>, <argument pos:start="25:35" pos:end="25:35"><expr pos:start="25:35" pos:end="25:35"><literal type="number" pos:start="25:35" pos:end="25:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:40"><expr pos:start="29:5" pos:end="29:39"><name pos:start="29:5" pos:end="29:11">samples</name><operator pos:start="29:12" pos:end="29:12">=</operator> <name pos:start="29:14" pos:end="29:25"><name pos:start="29:14" pos:end="29:14">s</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:25">blocksize</name></name> <operator pos:start="29:27" pos:end="29:28">&gt;&gt;</operator> <name pos:start="29:30" pos:end="29:39">rice_order</name></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:29">(<expr pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:18">pred_order</name> <operator pos:start="31:20" pos:end="31:20">&gt;</operator> <name pos:start="31:22" pos:end="31:28">samples</name></expr>)</condition> <block pos:start="31:31" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:18">

        <expr_stmt pos:start="33:9" pos:end="35:36"><expr pos:start="33:9" pos:end="35:35"><call pos:start="33:9" pos:end="35:35"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="35:35">(<argument pos:start="33:16" pos:end="33:23"><expr pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:16">s</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:23">avctx</name></name></expr></argument>, <argument pos:start="33:26" pos:end="33:37"><expr pos:start="33:26" pos:end="33:37"><name pos:start="33:26" pos:end="33:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:40" pos:end="33:75"><expr pos:start="33:40" pos:end="33:75"><literal type="string" pos:start="33:40" pos:end="33:75">"invalid predictor order: %i &gt; %i\n"</literal></expr></argument>,

               <argument pos:start="35:16" pos:end="35:25"><expr pos:start="35:16" pos:end="35:25"><name pos:start="35:16" pos:end="35:25">pred_order</name></expr></argument>, <argument pos:start="35:28" pos:end="35:34"><expr pos:start="35:28" pos:end="35:34"><name pos:start="35:28" pos:end="35:34">samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="45:18"><expr pos:start="43:5" pos:end="45:17"><name pos:start="43:5" pos:end="43:10">sample</name><operator pos:start="43:11" pos:end="43:11">=</operator>

    <name pos:start="45:5" pos:end="45:5">i</name><operator pos:start="45:6" pos:end="45:6">=</operator> <name pos:start="45:8" pos:end="45:17">pred_order</name></expr>;</expr_stmt>

    <for pos:start="47:5" pos:end="71:5">for <control pos:start="47:9" pos:end="47:67">(<init pos:start="47:10" pos:end="47:23"><expr pos:start="47:10" pos:end="47:22"><name pos:start="47:10" pos:end="47:18">partition</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">0</literal></expr>;</init> <condition pos:start="47:25" pos:end="47:54"><expr pos:start="47:25" pos:end="47:53"><name pos:start="47:25" pos:end="47:33">partition</name> <operator pos:start="47:35" pos:end="47:35">&lt;</operator> <operator pos:start="47:37" pos:end="47:37">(</operator><literal type="number" pos:start="47:38" pos:end="47:38">1</literal> <operator pos:start="47:40" pos:end="47:41">&lt;&lt;</operator> <name pos:start="47:43" pos:end="47:52">rice_order</name><operator pos:start="47:53" pos:end="47:53">)</operator></expr>;</condition> <incr pos:start="47:56" pos:end="47:66"><expr pos:start="47:56" pos:end="47:66"><name pos:start="47:56" pos:end="47:64">partition</name><operator pos:start="47:65" pos:end="47:66">++</operator></expr></incr>)</control> <block pos:start="47:69" pos:end="71:5">{<block_content pos:start="49:9" pos:end="69:13">

        <expr_stmt pos:start="49:9" pos:end="49:57"><expr pos:start="49:9" pos:end="49:56"><name pos:start="49:9" pos:end="49:11">tmp</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:56"><name pos:start="49:15" pos:end="49:22">get_bits</name><argument_list pos:start="49:23" pos:end="49:56">(<argument pos:start="49:24" pos:end="49:29"><expr pos:start="49:24" pos:end="49:29"><operator pos:start="49:24" pos:end="49:24">&amp;</operator><name pos:start="49:25" pos:end="49:29"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:29">gb</name></name></expr></argument>, <argument pos:start="49:32" pos:end="49:55"><expr pos:start="49:32" pos:end="49:55"><ternary pos:start="49:32" pos:end="49:55"><condition pos:start="49:32" pos:end="49:49"><expr pos:start="49:32" pos:end="49:47"><name pos:start="49:32" pos:end="49:42">method_type</name> <operator pos:start="49:44" pos:end="49:45">==</operator> <literal type="number" pos:start="49:47" pos:end="49:47">0</literal></expr> ?</condition><then pos:start="49:51" pos:end="49:51"> <expr pos:start="49:51" pos:end="49:51"><literal type="number" pos:start="49:51" pos:end="49:51">4</literal></expr> </then><else pos:start="49:53" pos:end="49:55">: <expr pos:start="49:55" pos:end="49:55"><literal type="number" pos:start="49:55" pos:end="49:55">5</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="67:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:48">(<expr pos:start="51:13" pos:end="51:47"><name pos:start="51:13" pos:end="51:15">tmp</name> <operator pos:start="51:17" pos:end="51:18">==</operator> <operator pos:start="51:20" pos:end="51:20">(</operator><ternary pos:start="51:21" pos:end="51:46"><condition pos:start="51:21" pos:end="51:38"><expr pos:start="51:21" pos:end="51:36"><name pos:start="51:21" pos:end="51:31">method_type</name> <operator pos:start="51:33" pos:end="51:34">==</operator> <literal type="number" pos:start="51:36" pos:end="51:36">0</literal></expr> ?</condition><then pos:start="51:40" pos:end="51:41"> <expr pos:start="51:40" pos:end="51:41"><literal type="number" pos:start="51:40" pos:end="51:41">15</literal></expr> </then><else pos:start="51:43" pos:end="51:46">: <expr pos:start="51:45" pos:end="51:46"><literal type="number" pos:start="51:45" pos:end="51:46">31</literal></expr></else></ternary><operator pos:start="51:47" pos:end="51:47">)</operator></expr>)</condition> <block pos:start="51:50" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:74">

            <expr_stmt pos:start="53:13" pos:end="53:38"><expr pos:start="53:13" pos:end="53:37"><name pos:start="53:13" pos:end="53:15">tmp</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="53:37"><name pos:start="53:19" pos:end="53:26">get_bits</name><argument_list pos:start="53:27" pos:end="53:37">(<argument pos:start="53:28" pos:end="53:33"><expr pos:start="53:28" pos:end="53:33"><operator pos:start="53:28" pos:end="53:28">&amp;</operator><name pos:start="53:29" pos:end="53:33"><name pos:start="53:29" pos:end="53:29">s</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:33">gb</name></name></expr></argument>, <argument pos:start="53:36" pos:end="53:36"><expr pos:start="53:36" pos:end="53:36"><literal type="number" pos:start="53:36" pos:end="53:36">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="55:13" pos:end="57:74">for <control pos:start="55:17" pos:end="55:46">(<init pos:start="55:18" pos:end="55:18">;</init> <condition pos:start="55:20" pos:end="55:31"><expr pos:start="55:20" pos:end="55:30"><name pos:start="55:20" pos:end="55:20">i</name> <operator pos:start="55:22" pos:end="55:22">&lt;</operator> <name pos:start="55:24" pos:end="55:30">samples</name></expr>;</condition> <incr pos:start="55:33" pos:end="55:45"><expr pos:start="55:33" pos:end="55:35"><name pos:start="55:33" pos:end="55:33">i</name><operator pos:start="55:34" pos:end="55:35">++</operator></expr><operator pos:start="55:36" pos:end="55:36">,</operator> <expr pos:start="55:38" pos:end="55:45"><name pos:start="55:38" pos:end="55:43">sample</name><operator pos:start="55:44" pos:end="55:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="57:17" pos:end="57:74"><block_content pos:start="57:17" pos:end="57:74">

                <expr_stmt pos:start="57:17" pos:end="57:74"><expr pos:start="57:17" pos:end="57:73"><name pos:start="57:17" pos:end="57:43"><name pos:start="57:17" pos:end="57:17">s</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:26">decoded</name><index pos:start="57:27" pos:end="57:35">[<expr pos:start="57:28" pos:end="57:34"><name pos:start="57:28" pos:end="57:34">channel</name></expr>]</index><index pos:start="57:36" pos:end="57:43">[<expr pos:start="57:37" pos:end="57:42"><name pos:start="57:37" pos:end="57:42">sample</name></expr>]</index></name> <operator pos:start="57:45" pos:end="57:45">=</operator> <call pos:start="57:47" pos:end="57:73"><name pos:start="57:47" pos:end="57:60">get_sbits_long</name><argument_list pos:start="57:61" pos:end="57:73">(<argument pos:start="57:62" pos:end="57:67"><expr pos:start="57:62" pos:end="57:67"><operator pos:start="57:62" pos:end="57:62">&amp;</operator><name pos:start="57:63" pos:end="57:67"><name pos:start="57:63" pos:end="57:63">s</name><operator pos:start="57:64" pos:end="57:65">-&gt;</operator><name pos:start="57:66" pos:end="57:67">gb</name></name></expr></argument>, <argument pos:start="57:70" pos:end="57:72"><expr pos:start="57:70" pos:end="57:72"><name pos:start="57:70" pos:end="57:72">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="67:9">else <block pos:start="59:16" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:13">

            <for pos:start="61:13" pos:end="65:13">for <control pos:start="61:17" pos:end="61:46">(<init pos:start="61:18" pos:end="61:18">;</init> <condition pos:start="61:20" pos:end="61:31"><expr pos:start="61:20" pos:end="61:30"><name pos:start="61:20" pos:end="61:20">i</name> <operator pos:start="61:22" pos:end="61:22">&lt;</operator> <name pos:start="61:24" pos:end="61:30">samples</name></expr>;</condition> <incr pos:start="61:33" pos:end="61:45"><expr pos:start="61:33" pos:end="61:35"><name pos:start="61:33" pos:end="61:33">i</name><operator pos:start="61:34" pos:end="61:35">++</operator></expr><operator pos:start="61:36" pos:end="61:36">,</operator> <expr pos:start="61:38" pos:end="61:45"><name pos:start="61:38" pos:end="61:43">sample</name><operator pos:start="61:44" pos:end="61:45">++</operator></expr></incr>)</control> <block pos:start="61:48" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:90">

                <expr_stmt pos:start="63:17" pos:end="63:90"><expr pos:start="63:17" pos:end="63:89"><name pos:start="63:17" pos:end="63:43"><name pos:start="63:17" pos:end="63:17">s</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:26">decoded</name><index pos:start="63:27" pos:end="63:35">[<expr pos:start="63:28" pos:end="63:34"><name pos:start="63:28" pos:end="63:34">channel</name></expr>]</index><index pos:start="63:36" pos:end="63:43">[<expr pos:start="63:37" pos:end="63:42"><name pos:start="63:37" pos:end="63:42">sample</name></expr>]</index></name> <operator pos:start="63:45" pos:end="63:45">=</operator> <call pos:start="63:47" pos:end="63:89"><name pos:start="63:47" pos:end="63:64">get_sr_golomb_flac</name><argument_list pos:start="63:65" pos:end="63:89">(<argument pos:start="63:66" pos:end="63:71"><expr pos:start="63:66" pos:end="63:71"><operator pos:start="63:66" pos:end="63:66">&amp;</operator><name pos:start="63:67" pos:end="63:71"><name pos:start="63:67" pos:end="63:67">s</name><operator pos:start="63:68" pos:end="63:69">-&gt;</operator><name pos:start="63:70" pos:end="63:71">gb</name></name></expr></argument>, <argument pos:start="63:74" pos:end="63:76"><expr pos:start="63:74" pos:end="63:76"><name pos:start="63:74" pos:end="63:76">tmp</name></expr></argument>, <argument pos:start="63:79" pos:end="63:85"><expr pos:start="63:79" pos:end="63:85"><name pos:start="63:79" pos:end="63:85">INT_MAX</name></expr></argument>, <argument pos:start="63:88" pos:end="63:88"><expr pos:start="63:88" pos:end="63:88"><literal type="number" pos:start="63:88" pos:end="63:88">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:13"><expr pos:start="69:9" pos:end="69:12"><name pos:start="69:9" pos:end="69:9">i</name><operator pos:start="69:10" pos:end="69:10">=</operator> <literal type="number" pos:start="69:12" pos:end="69:12">0</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
