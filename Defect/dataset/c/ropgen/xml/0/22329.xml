<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22329.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">unix_listen_opts</name><parameter_list pos:start="1:21" pos:end="1:50">(<parameter pos:start="1:22" pos:end="1:35"><decl pos:start="1:22" pos:end="1:35"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:29">QemuOpts</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:35">opts</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:42">Error</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier><modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:14">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">sockaddr_un</name></name></type> <name pos:start="5:24" pos:end="5:25">un</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">path</name> <init pos:start="7:22" pos:end="7:49">= <expr pos:start="7:24" pos:end="7:49"><call pos:start="7:24" pos:end="7:49"><name pos:start="7:24" pos:end="7:35">qemu_opt_get</name><argument_list pos:start="7:36" pos:end="7:49">(<argument pos:start="7:37" pos:end="7:40"><expr pos:start="7:37" pos:end="7:40"><name pos:start="7:37" pos:end="7:40">opts</name></expr></argument>, <argument pos:start="7:43" pos:end="7:48"><expr pos:start="7:43" pos:end="7:48"><literal type="string" pos:start="7:43" pos:end="7:48">"path"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">sock</name></decl>, <decl pos:start="9:15" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:16">fd</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:48"><expr pos:start="13:5" pos:end="13:47"><name pos:start="13:5" pos:end="13:8">sock</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <call pos:start="13:12" pos:end="13:47"><name pos:start="13:12" pos:end="13:22">qemu_socket</name><argument_list pos:start="13:23" pos:end="13:47">(<argument pos:start="13:24" pos:end="13:30"><expr pos:start="13:24" pos:end="13:30"><name pos:start="13:24" pos:end="13:30">PF_UNIX</name></expr></argument>, <argument pos:start="13:33" pos:end="13:43"><expr pos:start="13:33" pos:end="13:43"><name pos:start="13:33" pos:end="13:43">SOCK_STREAM</name></expr></argument>, <argument pos:start="13:46" pos:end="13:46"><expr pos:start="13:46" pos:end="13:46"><literal type="number" pos:start="13:46" pos:end="13:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:17">(<expr pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:12">sock</name> <operator pos:start="15:14" pos:end="15:14">&lt;</operator> <literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>)</condition> <block pos:start="15:19" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:65"><expr pos:start="17:9" pos:end="17:64"><call pos:start="17:9" pos:end="17:64"><name pos:start="17:9" pos:end="17:24">error_setg_errno</name><argument_list pos:start="17:25" pos:end="17:64">(<argument pos:start="17:26" pos:end="17:29"><expr pos:start="17:26" pos:end="17:29"><name pos:start="17:26" pos:end="17:29">errp</name></expr></argument>, <argument pos:start="17:32" pos:end="17:36"><expr pos:start="17:32" pos:end="17:36"><name pos:start="17:32" pos:end="17:36">errno</name></expr></argument>, <argument pos:start="17:39" pos:end="17:63"><expr pos:start="17:39" pos:end="17:63"><literal type="string" pos:start="17:39" pos:end="17:63">"Failed to create socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:31"><expr pos:start="25:5" pos:end="25:30"><call pos:start="25:5" pos:end="25:30"><name pos:start="25:5" pos:end="25:10">memset</name><argument_list pos:start="25:11" pos:end="25:30">(<argument pos:start="25:12" pos:end="25:14"><expr pos:start="25:12" pos:end="25:14"><operator pos:start="25:12" pos:end="25:12">&amp;</operator><name pos:start="25:13" pos:end="25:14">un</name></expr></argument>, <argument pos:start="25:17" pos:end="25:17"><expr pos:start="25:17" pos:end="25:17"><literal type="number" pos:start="25:17" pos:end="25:17">0</literal></expr></argument>, <argument pos:start="25:20" pos:end="25:29"><expr pos:start="25:20" pos:end="25:29"><sizeof pos:start="25:20" pos:end="25:29">sizeof<argument_list pos:start="25:26" pos:end="25:29">(<argument pos:start="25:27" pos:end="25:28"><expr pos:start="25:27" pos:end="25:28"><name pos:start="25:27" pos:end="25:28">un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:28"><expr pos:start="27:5" pos:end="27:27"><name pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:6">un</name><operator pos:start="27:7" pos:end="27:7">.</operator><name pos:start="27:8" pos:end="27:17">sun_family</name></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:27">AF_UNIX</name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="59:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:29">(<expr pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:12">path</name> <operator pos:start="29:14" pos:end="29:15">&amp;&amp;</operator> <call pos:start="29:17" pos:end="29:28"><name pos:start="29:17" pos:end="29:22">strlen</name><argument_list pos:start="29:23" pos:end="29:28">(<argument pos:start="29:24" pos:end="29:27"><expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">path</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:31" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:63">

        <expr_stmt pos:start="31:9" pos:end="31:63"><expr pos:start="31:9" pos:end="31:62"><call pos:start="31:9" pos:end="31:62"><name pos:start="31:9" pos:end="31:16">snprintf</name><argument_list pos:start="31:17" pos:end="31:62">(<argument pos:start="31:18" pos:end="31:28"><expr pos:start="31:18" pos:end="31:28"><name pos:start="31:18" pos:end="31:28"><name pos:start="31:18" pos:end="31:19">un</name><operator pos:start="31:20" pos:end="31:20">.</operator><name pos:start="31:21" pos:end="31:28">sun_path</name></name></expr></argument>, <argument pos:start="31:31" pos:end="31:49"><expr pos:start="31:31" pos:end="31:49"><sizeof pos:start="31:31" pos:end="31:49">sizeof<argument_list pos:start="31:37" pos:end="31:49">(<argument pos:start="31:38" pos:end="31:48"><expr pos:start="31:38" pos:end="31:48"><name pos:start="31:38" pos:end="31:48"><name pos:start="31:38" pos:end="31:39">un</name><operator pos:start="31:40" pos:end="31:40">.</operator><name pos:start="31:41" pos:end="31:48">sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="31:52" pos:end="31:55"><expr pos:start="31:52" pos:end="31:55"><literal type="string" pos:start="31:52" pos:end="31:55">"%s"</literal></expr></argument>, <argument pos:start="31:58" pos:end="31:61"><expr pos:start="31:58" pos:end="31:61"><name pos:start="31:58" pos:end="31:61">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="59:5">else <block pos:start="33:12" pos:end="59:5">{<block_content pos:start="35:9" pos:end="57:48">

        <decl_stmt pos:start="35:9" pos:end="35:40"><decl pos:start="35:9" pos:end="35:39"><type pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:12">char</name> <modifier pos:start="35:14" pos:end="35:14">*</modifier></type><name pos:start="35:15" pos:end="35:20">tmpdir</name> <init pos:start="35:22" pos:end="35:39">= <expr pos:start="35:24" pos:end="35:39"><call pos:start="35:24" pos:end="35:39"><name pos:start="35:24" pos:end="35:29">getenv</name><argument_list pos:start="35:30" pos:end="35:39">(<argument pos:start="35:31" pos:end="35:38"><expr pos:start="35:31" pos:end="35:38"><literal type="string" pos:start="35:31" pos:end="35:38">"TMPDIR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="37:9" pos:end="39:43"><expr pos:start="37:9" pos:end="39:42"><call pos:start="37:9" pos:end="39:42"><name pos:start="37:9" pos:end="37:16">snprintf</name><argument_list pos:start="37:17" pos:end="39:42">(<argument pos:start="37:18" pos:end="37:28"><expr pos:start="37:18" pos:end="37:28"><name pos:start="37:18" pos:end="37:28"><name pos:start="37:18" pos:end="37:19">un</name><operator pos:start="37:20" pos:end="37:20">.</operator><name pos:start="37:21" pos:end="37:28">sun_path</name></name></expr></argument>, <argument pos:start="37:31" pos:end="37:49"><expr pos:start="37:31" pos:end="37:49"><sizeof pos:start="37:31" pos:end="37:49">sizeof<argument_list pos:start="37:37" pos:end="37:49">(<argument pos:start="37:38" pos:end="37:48"><expr pos:start="37:38" pos:end="37:48"><name pos:start="37:38" pos:end="37:48"><name pos:start="37:38" pos:end="37:39">un</name><operator pos:start="37:40" pos:end="37:40">.</operator><name pos:start="37:41" pos:end="37:48">sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="37:52" pos:end="37:74"><expr pos:start="37:52" pos:end="37:74"><literal type="string" pos:start="37:52" pos:end="37:74">"%s/qemu-socket-XXXXXX"</literal></expr></argument>,

                 <argument pos:start="39:18" pos:end="39:41"><expr pos:start="39:18" pos:end="39:41"><ternary pos:start="39:18" pos:end="39:41"><condition pos:start="39:18" pos:end="39:25"><expr pos:start="39:18" pos:end="39:23"><name pos:start="39:18" pos:end="39:23">tmpdir</name></expr> ?</condition><then pos:start="39:27" pos:end="39:32"> <expr pos:start="39:27" pos:end="39:32"><name pos:start="39:27" pos:end="39:32">tmpdir</name></expr> </then><else pos:start="39:34" pos:end="39:41">: <expr pos:start="39:36" pos:end="39:41"><literal type="string" pos:start="39:36" pos:end="39:41">"/tmp"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="41:9" pos:end="53:11">/*

         * This dummy fd usage silences the mktemp() unsecure warning.

         * Using mkstemp() doesn't make things more secure here

         * though.  bind() complains about existing files, so we have

         * to unlink first and thus re-open the race window.  The

         * worst case possible is bind() failing, i.e. a DoS attack.

         */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:10">fd</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <call pos:start="55:14" pos:end="55:33"><name pos:start="55:14" pos:end="55:20">mkstemp</name><argument_list pos:start="55:21" pos:end="55:33">(<argument pos:start="55:22" pos:end="55:32"><expr pos:start="55:22" pos:end="55:32"><name pos:start="55:22" pos:end="55:32"><name pos:start="55:22" pos:end="55:23">un</name><operator pos:start="55:24" pos:end="55:24">.</operator><name pos:start="55:25" pos:end="55:32">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="55:36" pos:end="55:45"><expr pos:start="55:36" pos:end="55:44"><call pos:start="55:36" pos:end="55:44"><name pos:start="55:36" pos:end="55:40">close</name><argument_list pos:start="55:41" pos:end="55:44">(<argument pos:start="55:42" pos:end="55:43"><expr pos:start="55:42" pos:end="55:43"><name pos:start="55:42" pos:end="55:43">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:48"><expr pos:start="57:9" pos:end="57:47"><call pos:start="57:9" pos:end="57:47"><name pos:start="57:9" pos:end="57:20">qemu_opt_set</name><argument_list pos:start="57:21" pos:end="57:47">(<argument pos:start="57:22" pos:end="57:25"><expr pos:start="57:22" pos:end="57:25"><name pos:start="57:22" pos:end="57:25">opts</name></expr></argument>, <argument pos:start="57:28" pos:end="57:33"><expr pos:start="57:28" pos:end="57:33"><literal type="string" pos:start="57:28" pos:end="57:33">"path"</literal></expr></argument>, <argument pos:start="57:36" pos:end="57:46"><expr pos:start="57:36" pos:end="57:46"><name pos:start="57:36" pos:end="57:46"><name pos:start="57:36" pos:end="57:37">un</name><operator pos:start="57:38" pos:end="57:38">.</operator><name pos:start="57:39" pos:end="57:46">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:24"><expr pos:start="63:5" pos:end="63:23"><call pos:start="63:5" pos:end="63:23"><name pos:start="63:5" pos:end="63:10">unlink</name><argument_list pos:start="63:11" pos:end="63:23">(<argument pos:start="63:12" pos:end="63:22"><expr pos:start="63:12" pos:end="63:22"><name pos:start="63:12" pos:end="63:22"><name pos:start="63:12" pos:end="63:13">un</name><operator pos:start="63:14" pos:end="63:14">.</operator><name pos:start="63:15" pos:end="63:22">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:59">(<expr pos:start="65:9" pos:end="65:58"><call pos:start="65:9" pos:end="65:54"><name pos:start="65:9" pos:end="65:12">bind</name><argument_list pos:start="65:13" pos:end="65:54">(<argument pos:start="65:14" pos:end="65:17"><expr pos:start="65:14" pos:end="65:17"><name pos:start="65:14" pos:end="65:17">sock</name></expr></argument>, <argument pos:start="65:20" pos:end="65:41"><expr pos:start="65:20" pos:end="65:41"><operator pos:start="65:20" pos:end="65:20">(</operator>struct <name pos:start="65:28" pos:end="65:35">sockaddr</name><operator pos:start="65:36" pos:end="65:36">*</operator><operator pos:start="65:37" pos:end="65:37">)</operator> <operator pos:start="65:39" pos:end="65:39">&amp;</operator><name pos:start="65:40" pos:end="65:41">un</name></expr></argument>, <argument pos:start="65:44" pos:end="65:53"><expr pos:start="65:44" pos:end="65:53"><sizeof pos:start="65:44" pos:end="65:53">sizeof<argument_list pos:start="65:50" pos:end="65:53">(<argument pos:start="65:51" pos:end="65:52"><expr pos:start="65:51" pos:end="65:52"><name pos:start="65:51" pos:end="65:52">un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="65:56" pos:end="65:56">&lt;</operator> <literal type="number" pos:start="65:58" pos:end="65:58">0</literal></expr>)</condition> <block pos:start="65:61" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:17">

        <expr_stmt pos:start="67:9" pos:end="67:63"><expr pos:start="67:9" pos:end="67:62"><call pos:start="67:9" pos:end="67:62"><name pos:start="67:9" pos:end="67:24">error_setg_errno</name><argument_list pos:start="67:25" pos:end="67:62">(<argument pos:start="67:26" pos:end="67:29"><expr pos:start="67:26" pos:end="67:29"><name pos:start="67:26" pos:end="67:29">errp</name></expr></argument>, <argument pos:start="67:32" pos:end="67:36"><expr pos:start="67:32" pos:end="67:36"><name pos:start="67:32" pos:end="67:36">errno</name></expr></argument>, <argument pos:start="67:39" pos:end="67:61"><expr pos:start="67:39" pos:end="67:61"><literal type="string" pos:start="67:39" pos:end="67:61">"Failed to bind socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="69:9" pos:end="69:17">goto <name pos:start="69:14" pos:end="69:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:28">(<expr pos:start="73:9" pos:end="73:27"><call pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:14">listen</name><argument_list pos:start="73:15" pos:end="73:23">(<argument pos:start="73:16" pos:end="73:19"><expr pos:start="73:16" pos:end="73:19"><name pos:start="73:16" pos:end="73:19">sock</name></expr></argument>, <argument pos:start="73:22" pos:end="73:22"><expr pos:start="73:22" pos:end="73:22"><literal type="number" pos:start="73:22" pos:end="73:22">1</literal></expr></argument>)</argument_list></call> <operator pos:start="73:25" pos:end="73:25">&lt;</operator> <literal type="number" pos:start="73:27" pos:end="73:27">0</literal></expr>)</condition> <block pos:start="73:30" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:17">

        <expr_stmt pos:start="75:9" pos:end="75:68"><expr pos:start="75:9" pos:end="75:67"><call pos:start="75:9" pos:end="75:67"><name pos:start="75:9" pos:end="75:24">error_setg_errno</name><argument_list pos:start="75:25" pos:end="75:67">(<argument pos:start="75:26" pos:end="75:29"><expr pos:start="75:26" pos:end="75:29"><name pos:start="75:26" pos:end="75:29">errp</name></expr></argument>, <argument pos:start="75:32" pos:end="75:36"><expr pos:start="75:32" pos:end="75:36"><name pos:start="75:32" pos:end="75:36">errno</name></expr></argument>, <argument pos:start="75:39" pos:end="75:66"><expr pos:start="75:39" pos:end="75:66"><literal type="string" pos:start="75:39" pos:end="75:66">"Failed to listen on socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:17">goto <name pos:start="77:14" pos:end="77:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="83:5" pos:end="83:16">return <expr pos:start="83:12" pos:end="83:15"><name pos:start="83:12" pos:end="83:15">sock</name></expr>;</return>



<label pos:start="87:1" pos:end="87:4"><name pos:start="87:1" pos:end="87:3">err</name>:</label>

    <expr_stmt pos:start="89:5" pos:end="89:22"><expr pos:start="89:5" pos:end="89:21"><call pos:start="89:5" pos:end="89:21"><name pos:start="89:5" pos:end="89:15">closesocket</name><argument_list pos:start="89:16" pos:end="89:21">(<argument pos:start="89:17" pos:end="89:20"><expr pos:start="89:17" pos:end="89:20"><name pos:start="89:17" pos:end="89:20">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="91:5" pos:end="91:14">return <expr pos:start="91:12" pos:end="91:13"><operator pos:start="91:12" pos:end="91:12">-</operator><literal type="number" pos:start="91:13" pos:end="91:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
