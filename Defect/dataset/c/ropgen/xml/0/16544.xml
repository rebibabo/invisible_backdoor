<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16544.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">dec_divu</name><parameter_list pos:start="1:21" pos:end="1:38">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:33">DisasContext</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:37">dc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="5:5" pos:end="35:65">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">l1</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:60"><expr pos:start="9:5" pos:end="9:59"><call pos:start="9:5" pos:end="9:59"><name pos:start="9:5" pos:end="9:11">LOG_DIS</name><argument_list pos:start="9:12" pos:end="9:59">(<argument pos:start="9:13" pos:end="9:34"><expr pos:start="9:13" pos:end="9:34"><literal type="string" pos:start="9:13" pos:end="9:34">"divu r%d, r%d, r%d\n"</literal></expr></argument>, <argument pos:start="9:37" pos:end="9:42"><expr pos:start="9:37" pos:end="9:42"><name pos:start="9:37" pos:end="9:42"><name pos:start="9:37" pos:end="9:38">dc</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:42">r2</name></name></expr></argument>, <argument pos:start="9:45" pos:end="9:50"><expr pos:start="9:45" pos:end="9:50"><name pos:start="9:45" pos:end="9:50"><name pos:start="9:45" pos:end="9:46">dc</name><operator pos:start="9:47" pos:end="9:48">-&gt;</operator><name pos:start="9:49" pos:end="9:50">r0</name></name></expr></argument>, <argument pos:start="9:53" pos:end="9:58"><expr pos:start="9:53" pos:end="9:58"><name pos:start="9:53" pos:end="9:58"><name pos:start="9:53" pos:end="9:54">dc</name><operator pos:start="9:55" pos:end="9:56">-&gt;</operator><name pos:start="9:57" pos:end="9:58">r1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:46">(<expr pos:start="13:9" pos:end="13:45"><operator pos:start="13:9" pos:end="13:9">!</operator><operator pos:start="13:10" pos:end="13:10">(</operator><name pos:start="13:11" pos:end="13:22"><name pos:start="13:11" pos:end="13:12">dc</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:22">features</name></name> <operator pos:start="13:24" pos:end="13:24">&amp;</operator> <name pos:start="13:26" pos:end="13:44">LM32_FEATURE_DIVIDE</name><operator pos:start="13:45" pos:end="13:45">)</operator></expr>)</condition> <block pos:start="13:48" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:15">

        <expr_stmt pos:start="15:9" pos:end="15:78"><expr pos:start="15:9" pos:end="15:77"><call pos:start="15:9" pos:end="15:77"><name pos:start="15:9" pos:end="15:21">qemu_log_mask</name><argument_list pos:start="15:22" pos:end="15:77">(<argument pos:start="15:23" pos:end="15:37"><expr pos:start="15:23" pos:end="15:37"><name pos:start="15:23" pos:end="15:37">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="15:40" pos:end="15:76"><expr pos:start="15:40" pos:end="15:76"><literal type="string" pos:start="15:40" pos:end="15:76">"hardware divider is not available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:31"><expr pos:start="17:9" pos:end="17:30"><call pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:26">t_gen_illegal_insn</name><argument_list pos:start="17:27" pos:end="17:30">(<argument pos:start="17:28" pos:end="17:29"><expr pos:start="17:28" pos:end="17:29"><name pos:start="17:28" pos:end="17:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:6">l1</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:24"><name pos:start="25:10" pos:end="25:22">gen_new_label</name><argument_list pos:start="25:23" pos:end="25:24">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:58"><expr pos:start="27:5" pos:end="27:57"><call pos:start="27:5" pos:end="27:57"><name pos:start="27:5" pos:end="27:22">tcg_gen_brcondi_tl</name><argument_list pos:start="27:23" pos:end="27:57">(<argument pos:start="27:24" pos:end="27:34"><expr pos:start="27:24" pos:end="27:34"><name pos:start="27:24" pos:end="27:34">TCG_COND_NE</name></expr></argument>, <argument pos:start="27:37" pos:end="27:49"><expr pos:start="27:37" pos:end="27:49"><name pos:start="27:37" pos:end="27:49"><name pos:start="27:37" pos:end="27:41">cpu_R</name><index pos:start="27:42" pos:end="27:49">[<expr pos:start="27:43" pos:end="27:48"><name pos:start="27:43" pos:end="27:48"><name pos:start="27:43" pos:end="27:44">dc</name><operator pos:start="27:45" pos:end="27:46">-&gt;</operator><name pos:start="27:47" pos:end="27:48">r1</name></name></expr>]</index></name></expr></argument>, <argument pos:start="27:52" pos:end="27:52"><expr pos:start="27:52" pos:end="27:52"><literal type="number" pos:start="27:52" pos:end="27:52">0</literal></expr></argument>, <argument pos:start="27:55" pos:end="27:56"><expr pos:start="27:55" pos:end="27:56"><name pos:start="27:55" pos:end="27:56">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:36"><expr pos:start="29:5" pos:end="29:35"><call pos:start="29:5" pos:end="29:35"><name pos:start="29:5" pos:end="29:19">tcg_gen_movi_tl</name><argument_list pos:start="29:20" pos:end="29:35">(<argument pos:start="29:21" pos:end="29:26"><expr pos:start="29:21" pos:end="29:26"><name pos:start="29:21" pos:end="29:26">cpu_pc</name></expr></argument>, <argument pos:start="29:29" pos:end="29:34"><expr pos:start="29:29" pos:end="29:34"><name pos:start="29:29" pos:end="29:34"><name pos:start="29:29" pos:end="29:30">dc</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:34">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:51"><expr pos:start="31:5" pos:end="31:50"><call pos:start="31:5" pos:end="31:50"><name pos:start="31:5" pos:end="31:25">t_gen_raise_exception</name><argument_list pos:start="31:26" pos:end="31:50">(<argument pos:start="31:27" pos:end="31:28"><expr pos:start="31:27" pos:end="31:28"><name pos:start="31:27" pos:end="31:28">dc</name></expr></argument>, <argument pos:start="31:31" pos:end="31:49"><expr pos:start="31:31" pos:end="31:49"><name pos:start="31:31" pos:end="31:49">EXCP_DIVIDE_BY_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:22"><expr pos:start="33:5" pos:end="33:21"><call pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:17">gen_set_label</name><argument_list pos:start="33:18" pos:end="33:21">(<argument pos:start="33:19" pos:end="33:20"><expr pos:start="33:19" pos:end="33:20"><name pos:start="33:19" pos:end="33:20">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:65"><expr pos:start="35:5" pos:end="35:64"><call pos:start="35:5" pos:end="35:64"><name pos:start="35:5" pos:end="35:19">tcg_gen_divu_tl</name><argument_list pos:start="35:20" pos:end="35:64">(<argument pos:start="35:21" pos:end="35:33"><expr pos:start="35:21" pos:end="35:33"><name pos:start="35:21" pos:end="35:33"><name pos:start="35:21" pos:end="35:25">cpu_R</name><index pos:start="35:26" pos:end="35:33">[<expr pos:start="35:27" pos:end="35:32"><name pos:start="35:27" pos:end="35:32"><name pos:start="35:27" pos:end="35:28">dc</name><operator pos:start="35:29" pos:end="35:30">-&gt;</operator><name pos:start="35:31" pos:end="35:32">r2</name></name></expr>]</index></name></expr></argument>, <argument pos:start="35:36" pos:end="35:48"><expr pos:start="35:36" pos:end="35:48"><name pos:start="35:36" pos:end="35:48"><name pos:start="35:36" pos:end="35:40">cpu_R</name><index pos:start="35:41" pos:end="35:48">[<expr pos:start="35:42" pos:end="35:47"><name pos:start="35:42" pos:end="35:47"><name pos:start="35:42" pos:end="35:43">dc</name><operator pos:start="35:44" pos:end="35:45">-&gt;</operator><name pos:start="35:46" pos:end="35:47">r0</name></name></expr>]</index></name></expr></argument>, <argument pos:start="35:51" pos:end="35:63"><expr pos:start="35:51" pos:end="35:63"><name pos:start="35:51" pos:end="35:63"><name pos:start="35:51" pos:end="35:55">cpu_R</name><index pos:start="35:56" pos:end="35:63">[<expr pos:start="35:57" pos:end="35:62"><name pos:start="35:57" pos:end="35:62"><name pos:start="35:57" pos:end="35:58">dc</name><operator pos:start="35:59" pos:end="35:60">-&gt;</operator><name pos:start="35:61" pos:end="35:62">r1</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
