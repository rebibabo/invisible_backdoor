<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20978.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">__cpu_ppc_store_decr</name><parameter_list pos:start="1:33" pos:end="9:45">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:43">PowerPCCPU</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">cpu</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:58">uint64_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:65">nextp</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:49"><decl pos:start="3:34" pos:end="3:49"><type pos:start="3:34" pos:end="3:49"><name pos:start="3:34" pos:end="3:42">QEMUTimer</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:49">timer</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:65"><function_decl pos:start="5:34" pos:end="5:65"><type pos:start="5:34" pos:end="5:37"><name pos:start="5:34" pos:end="5:37">void</name></type> (<modifier pos:start="5:40" pos:end="5:40">*</modifier><name pos:start="5:41" pos:end="5:50">raise_excp</name>)<parameter_list pos:start="5:52" pos:end="5:65">(<parameter pos:start="5:53" pos:end="5:64"><decl pos:start="5:53" pos:end="5:64"><type pos:start="5:53" pos:end="5:64"><name pos:start="5:53" pos:end="5:62">PowerPCCPU</name> <modifier pos:start="5:64" pos:end="5:64">*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

                                 <parameter pos:start="7:34" pos:end="7:46"><decl pos:start="7:34" pos:end="7:46"><type pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:41">uint32_t</name></type> <name pos:start="7:43" pos:end="7:46">decr</name></decl></parameter>, <parameter pos:start="7:49" pos:end="7:62"><decl pos:start="7:49" pos:end="7:62"><type pos:start="7:49" pos:end="7:62"><name pos:start="7:49" pos:end="7:56">uint32_t</name></type> <name pos:start="7:58" pos:end="7:62">value</name></decl></parameter>,

                                 <parameter pos:start="9:34" pos:end="9:44"><decl pos:start="9:34" pos:end="9:44"><type pos:start="9:34" pos:end="9:44"><name pos:start="9:34" pos:end="9:36">int</name></type> <name pos:start="9:38" pos:end="9:44">is_excp</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="77:1">{<block_content pos:start="13:5" pos:end="75:5">

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">CPUPPCState</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:20">env</name> <init pos:start="13:22" pos:end="13:32">= <expr pos:start="13:24" pos:end="13:32"><operator pos:start="13:24" pos:end="13:24">&amp;</operator><name pos:start="13:25" pos:end="13:32"><name pos:start="13:25" pos:end="13:27">cpu</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">ppc_tb_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:20">tb_env</name> <init pos:start="15:22" pos:end="15:34">= <expr pos:start="15:24" pos:end="15:34"><name pos:start="15:24" pos:end="15:34"><name pos:start="15:24" pos:end="15:26">env</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:34">tb_env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:16">now</name></decl>, <decl pos:start="17:19" pos:end="17:22"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:19" pos:end="17:22">next</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="23:29"><expr pos:start="21:5" pos:end="23:28"><call pos:start="21:5" pos:end="23:28"><name pos:start="21:5" pos:end="21:10">LOG_TB</name><argument_list pos:start="21:11" pos:end="23:28">(<argument pos:start="21:12" pos:end="21:49"><expr pos:start="21:12" pos:end="21:49"><literal type="string" pos:start="21:12" pos:end="21:20">"%s: %08"</literal> <name pos:start="21:22" pos:end="21:27">PRIx32</name> <literal type="string" pos:start="21:29" pos:end="21:37">" =&gt; %08"</literal> <name pos:start="21:39" pos:end="21:44">PRIx32</name> <literal type="string" pos:start="21:46" pos:end="21:49">"\n"</literal></expr></argument>, <argument pos:start="21:52" pos:end="21:59"><expr pos:start="21:52" pos:end="21:59"><name pos:start="21:52" pos:end="21:59">__func__</name></expr></argument>,

                <argument pos:start="23:17" pos:end="23:20"><expr pos:start="23:17" pos:end="23:20"><name pos:start="23:17" pos:end="23:20">decr</name></expr></argument>, <argument pos:start="23:23" pos:end="23:27"><expr pos:start="23:23" pos:end="23:27"><name pos:start="23:23" pos:end="23:27">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:22">(<expr pos:start="27:9" pos:end="27:21"><call pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:19">kvm_enabled</name><argument_list pos:start="27:20" pos:end="27:21">()</argument_list></call></expr>)</condition> <block pos:start="27:24" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:15">

        <comment type="block" pos:start="29:9" pos:end="29:77">/* KVM handles decrementer exceptions, we don't need our own timer */</comment>

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:7">now</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:47"><name pos:start="37:11" pos:end="37:27">qemu_clock_get_ns</name><argument_list pos:start="37:28" pos:end="37:47">(<argument pos:start="37:29" pos:end="37:46"><expr pos:start="37:29" pos:end="37:46"><name pos:start="37:29" pos:end="37:46">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:73"><expr pos:start="39:5" pos:end="39:72"><name pos:start="39:5" pos:end="39:8">next</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <name pos:start="39:12" pos:end="39:14">now</name> <operator pos:start="39:16" pos:end="39:16">+</operator> <call pos:start="39:18" pos:end="39:72"><name pos:start="39:18" pos:end="39:25">muldiv64</name><argument_list pos:start="39:26" pos:end="39:72">(<argument pos:start="39:27" pos:end="39:31"><expr pos:start="39:27" pos:end="39:31"><name pos:start="39:27" pos:end="39:31">value</name></expr></argument>, <argument pos:start="39:34" pos:end="39:52"><expr pos:start="39:34" pos:end="39:52"><call pos:start="39:34" pos:end="39:52"><name pos:start="39:34" pos:end="39:50">get_ticks_per_sec</name><argument_list pos:start="39:51" pos:end="39:52">()</argument_list></call></expr></argument>, <argument pos:start="39:55" pos:end="39:71"><expr pos:start="39:55" pos:end="39:71"><name pos:start="39:55" pos:end="39:71"><name pos:start="39:55" pos:end="39:60">tb_env</name><operator pos:start="39:61" pos:end="39:62">-&gt;</operator><name pos:start="39:63" pos:end="39:71">decr_freq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:15">is_excp</name></expr>)</condition> <block pos:start="41:18" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:29">

        <expr_stmt pos:start="43:9" pos:end="43:29"><expr pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:12">next</name> <operator pos:start="43:14" pos:end="43:15">+=</operator> <operator pos:start="43:17" pos:end="43:17">*</operator><name pos:start="43:18" pos:end="43:22">nextp</name> <operator pos:start="43:24" pos:end="43:24">-</operator> <name pos:start="43:26" pos:end="43:28">now</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:20">(<expr pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:12">next</name> <operator pos:start="47:14" pos:end="47:15">==</operator> <name pos:start="47:17" pos:end="47:19">now</name></expr>)</condition> <block pos:start="47:22" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:15">

        <expr_stmt pos:start="49:9" pos:end="49:15"><expr pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:12">next</name><operator pos:start="49:13" pos:end="49:14">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:18"><expr pos:start="53:5" pos:end="53:17"><operator pos:start="53:5" pos:end="53:5">*</operator><name pos:start="53:6" pos:end="53:10">nextp</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <name pos:start="53:14" pos:end="53:17">next</name></expr>;</expr_stmt>

    <comment type="block" pos:start="55:5" pos:end="55:22">/* Adjust timer */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:27"><expr pos:start="57:5" pos:end="57:26"><call pos:start="57:5" pos:end="57:26"><name pos:start="57:5" pos:end="57:13">timer_mod</name><argument_list pos:start="57:14" pos:end="57:26">(<argument pos:start="57:15" pos:end="57:19"><expr pos:start="57:15" pos:end="57:19"><name pos:start="57:15" pos:end="57:19">timer</name></expr></argument>, <argument pos:start="57:22" pos:end="57:25"><expr pos:start="57:22" pos:end="57:25"><name pos:start="57:22" pos:end="57:25">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="65:7">/* If we set a negative value and the decrementer was positive, raise an

     * exception.

     */</comment>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="71:32">(<expr pos:start="67:9" pos:end="71:31"><operator pos:start="67:9" pos:end="67:9">(</operator><name pos:start="67:10" pos:end="67:22"><name pos:start="67:10" pos:end="67:15">tb_env</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:22">flags</name></name> <operator pos:start="67:24" pos:end="67:24">&amp;</operator> <name pos:start="67:26" pos:end="67:53">PPC_DECR_UNDERFLOW_TRIGGERED</name><operator pos:start="67:54" pos:end="67:54">)</operator>

        <operator pos:start="69:9" pos:end="69:10">&amp;&amp;</operator> <operator pos:start="69:12" pos:end="69:12">(</operator><name pos:start="69:13" pos:end="69:17">value</name> <operator pos:start="69:19" pos:end="69:19">&amp;</operator> <literal type="number" pos:start="69:21" pos:end="69:30">0x80000000</literal><operator pos:start="69:31" pos:end="69:31">)</operator>

        <operator pos:start="71:9" pos:end="71:10">&amp;&amp;</operator> <operator pos:start="71:12" pos:end="71:12">!</operator><operator pos:start="71:13" pos:end="71:13">(</operator><name pos:start="71:14" pos:end="71:17">decr</name> <operator pos:start="71:19" pos:end="71:19">&amp;</operator> <literal type="number" pos:start="71:21" pos:end="71:30">0x80000000</literal><operator pos:start="71:31" pos:end="71:31">)</operator></expr>)</condition> <block pos:start="71:34" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:27">

        <expr_stmt pos:start="73:9" pos:end="73:27"><expr pos:start="73:9" pos:end="73:26"><call pos:start="73:9" pos:end="73:26">(<modifier pos:start="73:10" pos:end="73:10">*</modifier><name pos:start="73:11" pos:end="73:20">raise_excp</name>)<argument_list pos:start="73:22" pos:end="73:26">(<argument pos:start="73:23" pos:end="73:25"><expr pos:start="73:23" pos:end="73:25"><name pos:start="73:23" pos:end="73:25">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
