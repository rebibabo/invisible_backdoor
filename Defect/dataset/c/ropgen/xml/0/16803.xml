<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16803.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:28">process_pending_signals</name><parameter_list pos:start="1:29" pos:end="1:51">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:41">CPUArchState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:50">cpu_env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="193:1">{<block_content pos:start="5:5" pos:end="191:34">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:40">= <expr pos:start="5:21" pos:end="5:40"><call pos:start="5:21" pos:end="5:40"><name pos:start="5:21" pos:end="5:31">ENV_GET_CPU</name><argument_list pos:start="5:32" pos:end="5:40">(<argument pos:start="5:33" pos:end="5:39"><expr pos:start="5:33" pos:end="5:39"><name pos:start="5:33" pos:end="5:39">cpu_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">sig</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">abi_ulong</name></type> <name pos:start="9:15" pos:end="9:21">handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">sigset_t</name></type> <name pos:start="11:14" pos:end="11:16">set</name></decl>, <decl pos:start="11:19" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:19" pos:end="11:25">old_set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:19">target_sigset_t</name></type> <name pos:start="13:21" pos:end="13:34">target_old_set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:30"><name pos:start="15:5" pos:end="15:28"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:28">emulated_sigtable</name></name> <modifier pos:start="15:30" pos:end="15:30">*</modifier></type><name pos:start="15:31" pos:end="15:31">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:27">target_sigaction</name></name> <modifier pos:start="17:29" pos:end="17:29">*</modifier></type><name pos:start="17:30" pos:end="17:31">sa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:19">sigqueue</name></name> <modifier pos:start="19:21" pos:end="19:21">*</modifier></type><name pos:start="19:22" pos:end="19:22">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:13">TaskState</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:17">ts</name> <init pos:start="21:19" pos:end="21:31">= <expr pos:start="21:21" pos:end="21:31"><name pos:start="21:21" pos:end="21:31"><name pos:start="21:21" pos:end="21:23">cpu</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:31">opaque</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="27:15"><if pos:start="25:5" pos:end="27:15">if <condition pos:start="25:8" pos:end="25:28">(<expr pos:start="25:9" pos:end="25:27"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:27"><name pos:start="25:10" pos:end="25:11">ts</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:27">signal_pending</name></name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:15"><block_content pos:start="27:9" pos:end="27:15">

        <return pos:start="27:9" pos:end="27:15">return;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:41">/* FIXME: This is not threadsafe.  */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:5">k</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <name pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:10">ts</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:18">sigtab</name></name></expr>;</expr_stmt>

    <for pos:start="35:5" pos:end="43:5">for<control pos:start="35:8" pos:end="35:43">(<init pos:start="35:9" pos:end="35:16"><expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:11">sig</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <literal type="number" pos:start="35:15" pos:end="35:15">1</literal></expr>;</init> <condition pos:start="35:18" pos:end="35:36"><expr pos:start="35:18" pos:end="35:35"><name pos:start="35:18" pos:end="35:20">sig</name> <operator pos:start="35:22" pos:end="35:23">&lt;=</operator> <name pos:start="35:25" pos:end="35:35">TARGET_NSIG</name></expr>;</condition> <incr pos:start="35:38" pos:end="35:42"><expr pos:start="35:38" pos:end="35:42"><name pos:start="35:38" pos:end="35:40">sig</name><operator pos:start="35:41" pos:end="35:42">++</operator></expr></incr>)</control> <block pos:start="35:45" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:12">

        <if_stmt pos:start="37:9" pos:end="39:31"><if pos:start="37:9" pos:end="39:31">if <condition pos:start="37:12" pos:end="37:23">(<expr pos:start="37:13" pos:end="37:22"><name pos:start="37:13" pos:end="37:22"><name pos:start="37:13" pos:end="37:13">k</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:22">pending</name></name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:31"><block_content pos:start="39:13" pos:end="39:31">

            <goto pos:start="39:13" pos:end="39:31">goto <name pos:start="39:18" pos:end="39:30">handle_signal</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:12"><expr pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:9">k</name><operator pos:start="41:10" pos:end="41:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="45:5" pos:end="45:46">/* if no signal is pending, just return */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:22"><name pos:start="47:5" pos:end="47:6">ts</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:22">signal_pending</name></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <literal type="number" pos:start="47:26" pos:end="47:26">0</literal></expr>;</expr_stmt>

    <return pos:start="49:5" pos:end="49:11">return;</return>



 <label pos:start="53:2" pos:end="56:0"><name pos:start="53:2" pos:end="53:14">handle_signal</name>:</label>

<cpp:ifdef pos:start="55:1" pos:end="55:19">#<cpp:directive pos:start="55:2" pos:end="55:6">ifdef</cpp:directive> <name pos:start="55:8" pos:end="55:19">DEBUG_SIGNAL</name></cpp:ifdef>

    <expr_stmt pos:start="57:5" pos:end="60:0"><expr pos:start="57:5" pos:end="57:53"><call pos:start="57:5" pos:end="57:53"><name pos:start="57:5" pos:end="57:11">fprintf</name><argument_list pos:start="57:12" pos:end="57:53">(<argument pos:start="57:13" pos:end="57:18"><expr pos:start="57:13" pos:end="57:18"><name pos:start="57:13" pos:end="57:18">stderr</name></expr></argument>, <argument pos:start="57:21" pos:end="57:47"><expr pos:start="57:21" pos:end="57:47"><literal type="string" pos:start="57:21" pos:end="57:47">"qemu: process signal %d\n"</literal></expr></argument>, <argument pos:start="57:50" pos:end="57:52"><expr pos:start="57:50" pos:end="57:52"><name pos:start="57:50" pos:end="57:52">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="61:5" pos:end="61:24">/* dequeue signal */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:17"><expr pos:start="63:5" pos:end="63:16"><name pos:start="63:5" pos:end="63:5">q</name> <operator pos:start="63:7" pos:end="63:7">=</operator> <name pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:9">k</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:16">first</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:23"><expr pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:12"><name pos:start="65:5" pos:end="65:5">k</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:12">first</name></name> <operator pos:start="65:14" pos:end="65:14">=</operator> <name pos:start="65:16" pos:end="65:22"><name pos:start="65:16" pos:end="65:16">q</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:22">next</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="69:23"><if pos:start="67:5" pos:end="69:23">if <condition pos:start="67:8" pos:end="67:18">(<expr pos:start="67:9" pos:end="67:17"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:17"><name pos:start="67:10" pos:end="67:10">k</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:17">first</name></name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:23"><block_content pos:start="69:9" pos:end="69:23">

        <expr_stmt pos:start="69:9" pos:end="69:23"><expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:9">k</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:18">pending</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:34"><expr pos:start="73:5" pos:end="73:33"><name pos:start="73:5" pos:end="73:7">sig</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:33"><name pos:start="73:11" pos:end="73:23">gdb_handlesig</name><argument_list pos:start="73:24" pos:end="73:33">(<argument pos:start="73:25" pos:end="73:27"><expr pos:start="73:25" pos:end="73:27"><name pos:start="73:25" pos:end="73:27">cpu</name></expr></argument>, <argument pos:start="73:30" pos:end="73:32"><expr pos:start="73:30" pos:end="73:32"><name pos:start="73:30" pos:end="73:32">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="87:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:13">(<expr pos:start="75:9" pos:end="75:12"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:12">sig</name></expr>)</condition> <block pos:start="75:15" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:33">

        <expr_stmt pos:start="77:9" pos:end="77:18"><expr pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:10">sa</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <name pos:start="77:14" pos:end="77:17">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:33"><expr pos:start="79:9" pos:end="79:32"><name pos:start="79:9" pos:end="79:15">handler</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:32">TARGET_SIG_IGN</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="87:5">else <block pos:start="81:12" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:34">

        <expr_stmt pos:start="83:9" pos:end="83:36"><expr pos:start="83:9" pos:end="83:35"><name pos:start="83:9" pos:end="83:10">sa</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <operator pos:start="83:14" pos:end="83:14">&amp;</operator><name pos:start="83:15" pos:end="83:35"><name pos:start="83:15" pos:end="83:26">sigact_table</name><index pos:start="83:27" pos:end="83:35">[<expr pos:start="83:28" pos:end="83:34"><name pos:start="83:28" pos:end="83:30">sig</name> <operator pos:start="83:32" pos:end="83:32">-</operator> <literal type="number" pos:start="83:34" pos:end="83:34">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:34"><expr pos:start="85:9" pos:end="85:33"><name pos:start="85:9" pos:end="85:15">handler</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:33"><name pos:start="85:19" pos:end="85:20">sa</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:33">_sa_handler</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="91:5" pos:end="187:5"><if pos:start="91:5" pos:end="111:5">if <condition pos:start="91:8" pos:end="91:34">(<expr pos:start="91:9" pos:end="91:33"><name pos:start="91:9" pos:end="91:15">handler</name> <operator pos:start="91:17" pos:end="91:18">==</operator> <name pos:start="91:20" pos:end="91:33">TARGET_SIG_DFL</name></expr>)</condition> <block pos:start="91:36" pos:end="111:5">{<block_content pos:start="95:9" pos:end="109:9">

        <comment type="block" pos:start="93:9" pos:end="93:86">/* default handler : ignore some signal. The other are job control or fatal */</comment>

        <if_stmt pos:start="95:9" pos:end="109:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:84">(<expr pos:start="95:13" pos:end="95:83"><name pos:start="95:13" pos:end="95:15">sig</name> <operator pos:start="95:17" pos:end="95:18">==</operator> <name pos:start="95:20" pos:end="95:33">TARGET_SIGTSTP</name> <operator pos:start="95:35" pos:end="95:36">||</operator> <name pos:start="95:38" pos:end="95:40">sig</name> <operator pos:start="95:42" pos:end="95:43">==</operator> <name pos:start="95:45" pos:end="95:58">TARGET_SIGTTIN</name> <operator pos:start="95:60" pos:end="95:61">||</operator> <name pos:start="95:63" pos:end="95:65">sig</name> <operator pos:start="95:67" pos:end="95:68">==</operator> <name pos:start="95:70" pos:end="95:83">TARGET_SIGTTOU</name></expr>)</condition> <block pos:start="95:86" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:35">

            <expr_stmt pos:start="97:13" pos:end="97:35"><expr pos:start="97:13" pos:end="97:34"><call pos:start="97:13" pos:end="97:34"><name pos:start="97:13" pos:end="97:16">kill</name><argument_list pos:start="97:17" pos:end="97:34">(<argument pos:start="97:18" pos:end="97:25"><expr pos:start="97:18" pos:end="97:25"><call pos:start="97:18" pos:end="97:25"><name pos:start="97:18" pos:end="97:23">getpid</name><argument_list pos:start="97:24" pos:end="97:25">()</argument_list></call></expr></argument>,<argument pos:start="97:27" pos:end="97:33"><expr pos:start="97:27" pos:end="97:33"><name pos:start="97:27" pos:end="97:33">SIGSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="99:11" pos:end="109:9">else if <condition pos:start="99:19" pos:end="105:41">(<expr pos:start="99:20" pos:end="105:40"><name pos:start="99:20" pos:end="99:22">sig</name> <operator pos:start="99:24" pos:end="99:25">!=</operator> <name pos:start="99:27" pos:end="99:40">TARGET_SIGCHLD</name> <operator pos:start="99:42" pos:end="99:43">&amp;&amp;</operator>

                   <name pos:start="101:20" pos:end="101:22">sig</name> <operator pos:start="101:24" pos:end="101:25">!=</operator> <name pos:start="101:27" pos:end="101:39">TARGET_SIGURG</name> <operator pos:start="101:41" pos:end="101:42">&amp;&amp;</operator>

                   <name pos:start="103:20" pos:end="103:22">sig</name> <operator pos:start="103:24" pos:end="103:25">!=</operator> <name pos:start="103:27" pos:end="103:41">TARGET_SIGWINCH</name> <operator pos:start="103:43" pos:end="103:44">&amp;&amp;</operator>

                   <name pos:start="105:20" pos:end="105:22">sig</name> <operator pos:start="105:24" pos:end="105:25">!=</operator> <name pos:start="105:27" pos:end="105:40">TARGET_SIGCONT</name></expr>)</condition> <block pos:start="105:43" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:27">

            <expr_stmt pos:start="107:13" pos:end="107:27"><expr pos:start="107:13" pos:end="107:26"><call pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:21">force_sig</name><argument_list pos:start="107:22" pos:end="107:26">(<argument pos:start="107:23" pos:end="107:25"><expr pos:start="107:23" pos:end="107:25"><name pos:start="107:23" pos:end="107:25">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="111:7" pos:end="115:5">else if <condition pos:start="111:15" pos:end="111:41">(<expr pos:start="111:16" pos:end="111:40"><name pos:start="111:16" pos:end="111:22">handler</name> <operator pos:start="111:24" pos:end="111:25">==</operator> <name pos:start="111:27" pos:end="111:40">TARGET_SIG_IGN</name></expr>)</condition> <block pos:start="111:43" pos:end="115:5">{<block_content>

        <comment type="block" pos:start="113:9" pos:end="113:24">/* ignore sig */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="115:7" pos:end="119:5">else if <condition pos:start="115:15" pos:end="115:41">(<expr pos:start="115:16" pos:end="115:40"><name pos:start="115:16" pos:end="115:22">handler</name> <operator pos:start="115:24" pos:end="115:25">==</operator> <name pos:start="115:27" pos:end="115:40">TARGET_SIG_ERR</name></expr>)</condition> <block pos:start="115:43" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:23">

        <expr_stmt pos:start="117:9" pos:end="117:23"><expr pos:start="117:9" pos:end="117:22"><call pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:17">force_sig</name><argument_list pos:start="117:18" pos:end="117:22">(<argument pos:start="117:19" pos:end="117:21"><expr pos:start="117:19" pos:end="117:21"><name pos:start="117:19" pos:end="117:21">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="119:7" pos:end="187:5">else <block pos:start="119:12" pos:end="187:5">{<block_content pos:start="123:9" pos:end="185:45">

        <comment type="block" pos:start="121:9" pos:end="121:70">/* compute the blocked signals during the handler execution */</comment>

        <expr_stmt pos:start="123:9" pos:end="123:50"><expr pos:start="123:9" pos:end="123:49"><call pos:start="123:9" pos:end="123:49"><name pos:start="123:9" pos:end="123:29">target_to_host_sigset</name><argument_list pos:start="123:30" pos:end="123:49">(<argument pos:start="123:31" pos:end="123:34"><expr pos:start="123:31" pos:end="123:34"><operator pos:start="123:31" pos:end="123:31">&amp;</operator><name pos:start="123:32" pos:end="123:34">set</name></expr></argument>, <argument pos:start="123:37" pos:end="123:48"><expr pos:start="123:37" pos:end="123:48"><operator pos:start="123:37" pos:end="123:37">&amp;</operator><name pos:start="123:38" pos:end="123:48"><name pos:start="123:38" pos:end="123:39">sa</name><operator pos:start="123:40" pos:end="123:41">-&gt;</operator><name pos:start="123:42" pos:end="123:48">sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="125:9" pos:end="127:40">/* SA_NODEFER indicates that the current signal should not be

           blocked during the handler */</comment>

        <if_stmt pos:start="129:9" pos:end="131:56"><if pos:start="129:9" pos:end="131:56">if <condition pos:start="129:12" pos:end="129:48">(<expr pos:start="129:13" pos:end="129:47"><operator pos:start="129:13" pos:end="129:13">!</operator><operator pos:start="129:14" pos:end="129:14">(</operator><name pos:start="129:15" pos:end="129:26"><name pos:start="129:15" pos:end="129:16">sa</name><operator pos:start="129:17" pos:end="129:18">-&gt;</operator><name pos:start="129:19" pos:end="129:26">sa_flags</name></name> <operator pos:start="129:28" pos:end="129:28">&amp;</operator> <name pos:start="129:30" pos:end="129:46">TARGET_SA_NODEFER</name><operator pos:start="129:47" pos:end="129:47">)</operator></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:56"><block_content pos:start="131:13" pos:end="131:56">

            <expr_stmt pos:start="131:13" pos:end="131:56"><expr pos:start="131:13" pos:end="131:55"><call pos:start="131:13" pos:end="131:55"><name pos:start="131:13" pos:end="131:21">sigaddset</name><argument_list pos:start="131:22" pos:end="131:55">(<argument pos:start="131:23" pos:end="131:26"><expr pos:start="131:23" pos:end="131:26"><operator pos:start="131:23" pos:end="131:23">&amp;</operator><name pos:start="131:24" pos:end="131:26">set</name></expr></argument>, <argument pos:start="131:29" pos:end="131:54"><expr pos:start="131:29" pos:end="131:54"><call pos:start="131:29" pos:end="131:54"><name pos:start="131:29" pos:end="131:49">target_to_host_signal</name><argument_list pos:start="131:50" pos:end="131:54">(<argument pos:start="131:51" pos:end="131:53"><expr pos:start="131:51" pos:end="131:53"><name pos:start="131:51" pos:end="131:53">sig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="135:9" pos:end="135:54">/* block signals in the handler using Linux */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:47"><expr pos:start="137:9" pos:end="137:46"><call pos:start="137:9" pos:end="137:46"><name pos:start="137:9" pos:end="137:19">sigprocmask</name><argument_list pos:start="137:20" pos:end="137:46">(<argument pos:start="137:21" pos:end="137:29"><expr pos:start="137:21" pos:end="137:29"><name pos:start="137:21" pos:end="137:29">SIG_BLOCK</name></expr></argument>, <argument pos:start="137:32" pos:end="137:35"><expr pos:start="137:32" pos:end="137:35"><operator pos:start="137:32" pos:end="137:32">&amp;</operator><name pos:start="137:33" pos:end="137:35">set</name></expr></argument>, <argument pos:start="137:38" pos:end="137:45"><expr pos:start="137:38" pos:end="137:45"><operator pos:start="137:38" pos:end="137:38">&amp;</operator><name pos:start="137:39" pos:end="137:45">old_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="139:9" pos:end="141:60">/* save the previous blocked signal state to restore it at the

           end of the signal execution (see do_sigreturn) */</comment>

        <expr_stmt pos:start="143:9" pos:end="150:0"><expr pos:start="143:9" pos:end="143:65"><call pos:start="143:9" pos:end="143:65"><name pos:start="143:9" pos:end="143:38">host_to_target_sigset_internal</name><argument_list pos:start="143:39" pos:end="143:65">(<argument pos:start="143:40" pos:end="143:54"><expr pos:start="143:40" pos:end="143:54"><operator pos:start="143:40" pos:end="143:40">&amp;</operator><name pos:start="143:41" pos:end="143:54">target_old_set</name></expr></argument>, <argument pos:start="143:57" pos:end="143:64"><expr pos:start="143:57" pos:end="143:64"><operator pos:start="143:57" pos:end="143:57">&amp;</operator><name pos:start="143:58" pos:end="143:64">old_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="147:9" pos:end="147:70">/* if the CPU is in VM86 mode, we restore the 32 bit values */</comment>

<cpp:if pos:start="149:1" pos:end="149:51">#<cpp:directive pos:start="149:2" pos:end="149:3">if</cpp:directive> <expr pos:start="149:5" pos:end="149:51"><call pos:start="149:5" pos:end="149:24"><name pos:start="149:5" pos:end="149:11">defined</name><argument_list pos:start="149:12" pos:end="149:24">(<argument pos:start="149:13" pos:end="149:23"><expr pos:start="149:13" pos:end="149:23"><name pos:start="149:13" pos:end="149:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="149:26" pos:end="149:27">&amp;&amp;</operator> <operator pos:start="149:29" pos:end="149:29">!</operator><call pos:start="149:30" pos:end="149:51"><name pos:start="149:30" pos:end="149:36">defined</name><argument_list pos:start="149:37" pos:end="149:51">(<argument pos:start="149:38" pos:end="149:50"><expr pos:start="149:38" pos:end="149:50"><name pos:start="149:38" pos:end="149:50">TARGET_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <block pos:start="151:9" pos:end="166:0">{<block_content pos:start="153:13" pos:end="157:36">

            <decl_stmt pos:start="153:13" pos:end="153:39"><decl pos:start="153:13" pos:end="153:38"><type pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:23">CPUX86State</name> <modifier pos:start="153:25" pos:end="153:25">*</modifier></type><name pos:start="153:26" pos:end="153:28">env</name> <init pos:start="153:30" pos:end="153:38">= <expr pos:start="153:32" pos:end="153:38"><name pos:start="153:32" pos:end="153:38">cpu_env</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="155:13" pos:end="157:36"><if pos:start="155:13" pos:end="157:36">if <condition pos:start="155:16" pos:end="155:38">(<expr pos:start="155:17" pos:end="155:37"><name pos:start="155:17" pos:end="155:27"><name pos:start="155:17" pos:end="155:19">env</name><operator pos:start="155:20" pos:end="155:21">-&gt;</operator><name pos:start="155:22" pos:end="155:27">eflags</name></name> <operator pos:start="155:29" pos:end="155:29">&amp;</operator> <name pos:start="155:31" pos:end="155:37">VM_MASK</name></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:36"><block_content pos:start="157:17" pos:end="157:36">

                <expr_stmt pos:start="157:17" pos:end="157:36"><expr pos:start="157:17" pos:end="157:35"><call pos:start="157:17" pos:end="157:35"><name pos:start="157:17" pos:end="157:30">save_v86_state</name><argument_list pos:start="157:31" pos:end="157:35">(<argument pos:start="157:32" pos:end="157:34"><expr pos:start="157:32" pos:end="157:34"><name pos:start="157:32" pos:end="157:34">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block>

<cpp:endif pos:start="161:1" pos:end="161:6">#<cpp:directive pos:start="161:2" pos:end="161:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="163:9" pos:end="163:56">/* prepare the stack frame of the virtual CPU */</comment>

<cpp:if pos:start="165:1" pos:end="165:62">#<cpp:directive pos:start="165:2" pos:end="165:3">if</cpp:directive> <expr pos:start="165:5" pos:end="165:62"><call pos:start="165:5" pos:end="165:31"><name pos:start="165:5" pos:end="165:11">defined</name><argument_list pos:start="165:12" pos:end="165:31">(<argument pos:start="165:13" pos:end="165:30"><expr pos:start="165:13" pos:end="165:30"><name pos:start="165:13" pos:end="165:30">TARGET_ABI_MIPSN32</name></expr></argument>)</argument_list></call> <operator pos:start="165:33" pos:end="165:34">||</operator> <call pos:start="165:36" pos:end="165:62"><name pos:start="165:36" pos:end="165:42">defined</name><argument_list pos:start="165:43" pos:end="165:62">(<argument pos:start="165:44" pos:end="165:61"><expr pos:start="165:44" pos:end="165:61"><name pos:start="165:44" pos:end="165:61">TARGET_ABI_MIPSN64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <comment type="block" pos:start="167:9" pos:end="167:61">/* These targets do not have traditional signals.  */</comment>

        <expr_stmt pos:start="169:9" pos:end="172:0"><expr pos:start="169:9" pos:end="169:67"><call pos:start="169:9" pos:end="169:67"><name pos:start="169:9" pos:end="169:22">setup_rt_frame</name><argument_list pos:start="169:23" pos:end="169:67">(<argument pos:start="169:24" pos:end="169:26"><expr pos:start="169:24" pos:end="169:26"><name pos:start="169:24" pos:end="169:26">sig</name></expr></argument>, <argument pos:start="169:29" pos:end="169:30"><expr pos:start="169:29" pos:end="169:30"><name pos:start="169:29" pos:end="169:30">sa</name></expr></argument>, <argument pos:start="169:33" pos:end="169:40"><expr pos:start="169:33" pos:end="169:40"><operator pos:start="169:33" pos:end="169:33">&amp;</operator><name pos:start="169:34" pos:end="169:40"><name pos:start="169:34" pos:end="169:34">q</name><operator pos:start="169:35" pos:end="169:36">-&gt;</operator><name pos:start="169:37" pos:end="169:40">info</name></name></expr></argument>, <argument pos:start="169:43" pos:end="169:57"><expr pos:start="169:43" pos:end="169:57"><operator pos:start="169:43" pos:end="169:43">&amp;</operator><name pos:start="169:44" pos:end="169:57">target_old_set</name></expr></argument>, <argument pos:start="169:60" pos:end="169:66"><expr pos:start="169:60" pos:end="169:66"><name pos:start="169:60" pos:end="169:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="171:1" pos:end="171:5">#<cpp:directive pos:start="171:2" pos:end="171:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="173:9" pos:end="182:0"><if pos:start="173:9" pos:end="175:72">if <condition pos:start="173:12" pos:end="173:45">(<expr pos:start="173:13" pos:end="173:44"><name pos:start="173:13" pos:end="173:24"><name pos:start="173:13" pos:end="173:14">sa</name><operator pos:start="173:15" pos:end="173:16">-&gt;</operator><name pos:start="173:17" pos:end="173:24">sa_flags</name></name> <operator pos:start="173:26" pos:end="173:26">&amp;</operator> <name pos:start="173:28" pos:end="173:44">TARGET_SA_SIGINFO</name></expr>)</condition><block type="pseudo" pos:start="175:13" pos:end="175:72"><block_content pos:start="175:13" pos:end="175:72">

            <expr_stmt pos:start="175:13" pos:end="175:72"><expr pos:start="175:13" pos:end="175:71"><call pos:start="175:13" pos:end="175:71"><name pos:start="175:13" pos:end="175:26">setup_rt_frame</name><argument_list pos:start="175:27" pos:end="175:71">(<argument pos:start="175:28" pos:end="175:30"><expr pos:start="175:28" pos:end="175:30"><name pos:start="175:28" pos:end="175:30">sig</name></expr></argument>, <argument pos:start="175:33" pos:end="175:34"><expr pos:start="175:33" pos:end="175:34"><name pos:start="175:33" pos:end="175:34">sa</name></expr></argument>, <argument pos:start="175:37" pos:end="175:44"><expr pos:start="175:37" pos:end="175:44"><operator pos:start="175:37" pos:end="175:37">&amp;</operator><name pos:start="175:38" pos:end="175:44"><name pos:start="175:38" pos:end="175:38">q</name><operator pos:start="175:39" pos:end="175:40">-&gt;</operator><name pos:start="175:41" pos:end="175:44">info</name></name></expr></argument>, <argument pos:start="175:47" pos:end="175:61"><expr pos:start="175:47" pos:end="175:61"><operator pos:start="175:47" pos:end="175:47">&amp;</operator><name pos:start="175:48" pos:end="175:61">target_old_set</name></expr></argument>, <argument pos:start="175:64" pos:end="175:70"><expr pos:start="175:64" pos:end="175:70"><name pos:start="175:64" pos:end="175:70">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="177:9" pos:end="182:0">else<block type="pseudo" pos:start="179:13" pos:end="182:0"><block_content pos:start="179:13" pos:end="182:0">

            <expr_stmt pos:start="179:13" pos:end="182:0"><expr pos:start="179:13" pos:end="179:58"><call pos:start="179:13" pos:end="179:58"><name pos:start="179:13" pos:end="179:23">setup_frame</name><argument_list pos:start="179:24" pos:end="179:58">(<argument pos:start="179:25" pos:end="179:27"><expr pos:start="179:25" pos:end="179:27"><name pos:start="179:25" pos:end="179:27">sig</name></expr></argument>, <argument pos:start="179:30" pos:end="179:31"><expr pos:start="179:30" pos:end="179:31"><name pos:start="179:30" pos:end="179:31">sa</name></expr></argument>, <argument pos:start="179:34" pos:end="179:48"><expr pos:start="179:34" pos:end="179:48"><operator pos:start="179:34" pos:end="179:34">&amp;</operator><name pos:start="179:35" pos:end="179:48">target_old_set</name></expr></argument>, <argument pos:start="179:51" pos:end="179:57"><expr pos:start="179:51" pos:end="179:57"><name pos:start="179:51" pos:end="179:57">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif pos:start="181:1" pos:end="181:6">#<cpp:directive pos:start="181:2" pos:end="181:6">endif</cpp:directive></cpp:endif>

	<if_stmt pos:start="183:9" pos:end="185:45"><if pos:start="183:9" pos:end="185:45">if <condition pos:start="183:12" pos:end="183:47">(<expr pos:start="183:13" pos:end="183:46"><name pos:start="183:13" pos:end="183:24"><name pos:start="183:13" pos:end="183:14">sa</name><operator pos:start="183:15" pos:end="183:16">-&gt;</operator><name pos:start="183:17" pos:end="183:24">sa_flags</name></name> <operator pos:start="183:26" pos:end="183:26">&amp;</operator> <name pos:start="183:28" pos:end="183:46">TARGET_SA_RESETHAND</name></expr>)</condition><block type="pseudo" pos:start="185:13" pos:end="185:45"><block_content pos:start="185:13" pos:end="185:45">

            <expr_stmt pos:start="185:13" pos:end="185:45"><expr pos:start="185:13" pos:end="185:44"><name pos:start="185:13" pos:end="185:27"><name pos:start="185:13" pos:end="185:14">sa</name><operator pos:start="185:15" pos:end="185:16">-&gt;</operator><name pos:start="185:17" pos:end="185:27">_sa_handler</name></name> <operator pos:start="185:29" pos:end="185:29">=</operator> <name pos:start="185:31" pos:end="185:44">TARGET_SIG_DFL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="189:5" pos:end="191:34"><if pos:start="189:5" pos:end="191:34">if <condition pos:start="189:8" pos:end="189:22">(<expr pos:start="189:9" pos:end="189:21"><name pos:start="189:9" pos:end="189:9">q</name> <operator pos:start="189:11" pos:end="189:12">!=</operator> <operator pos:start="189:14" pos:end="189:14">&amp;</operator><name pos:start="189:15" pos:end="189:21"><name pos:start="189:15" pos:end="189:15">k</name><operator pos:start="189:16" pos:end="189:17">-&gt;</operator><name pos:start="189:18" pos:end="189:21">info</name></name></expr>)</condition><block type="pseudo" pos:start="191:9" pos:end="191:34"><block_content pos:start="191:9" pos:end="191:34">

        <expr_stmt pos:start="191:9" pos:end="191:34"><expr pos:start="191:9" pos:end="191:33"><call pos:start="191:9" pos:end="191:33"><name pos:start="191:9" pos:end="191:21">free_sigqueue</name><argument_list pos:start="191:22" pos:end="191:33">(<argument pos:start="191:23" pos:end="191:29"><expr pos:start="191:23" pos:end="191:29"><name pos:start="191:23" pos:end="191:29">cpu_env</name></expr></argument>, <argument pos:start="191:32" pos:end="191:32"><expr pos:start="191:32" pos:end="191:32"><name pos:start="191:32" pos:end="191:32">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
