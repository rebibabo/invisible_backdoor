<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2643.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">ssize_t</name></type> <name pos:start="1:9" pos:end="1:25">nbd_receive_reply</name><parameter_list pos:start="1:26" pos:end="1:73">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:36">QIOChannel</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">ioc</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:58"><decl pos:start="1:44" pos:end="1:58"><type pos:start="1:44" pos:end="1:58"><name pos:start="1:44" pos:end="1:51">NBDReply</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">reply</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:65">Error</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:23">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:31"><name pos:start="5:13" pos:end="5:15">buf</name><index pos:start="5:16" pos:end="5:31">[<expr pos:start="5:17" pos:end="5:30"><name pos:start="5:17" pos:end="5:30">NBD_REPLY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:18">magic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:53"><expr pos:start="13:5" pos:end="13:52"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:52"><name pos:start="13:11" pos:end="13:23">read_sync_eof</name><argument_list pos:start="13:24" pos:end="13:52">(<argument pos:start="13:25" pos:end="13:27"><expr pos:start="13:25" pos:end="13:27"><name pos:start="13:25" pos:end="13:27">ioc</name></expr></argument>, <argument pos:start="13:30" pos:end="13:32"><expr pos:start="13:30" pos:end="13:32"><name pos:start="13:30" pos:end="13:32">buf</name></expr></argument>, <argument pos:start="13:35" pos:end="13:45"><expr pos:start="13:35" pos:end="13:45"><sizeof pos:start="13:35" pos:end="13:45">sizeof<argument_list pos:start="13:41" pos:end="13:45">(<argument pos:start="13:42" pos:end="13:44"><expr pos:start="13:42" pos:end="13:44"><name pos:start="13:42" pos:end="13:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="13:48" pos:end="13:51"><expr pos:start="13:48" pos:end="13:51"><name pos:start="13:48" pos:end="13:51">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:17">(<expr pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:14">&lt;=</operator> <literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>)</condition> <block pos:start="15:19" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:19">

        <return pos:start="17:9" pos:end="17:19">return <expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:27">(<expr pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:14">!=</operator> <sizeof pos:start="23:16" pos:end="23:26">sizeof<argument_list pos:start="23:22" pos:end="23:26">(<argument pos:start="23:23" pos:end="23:25"><expr pos:start="23:23" pos:end="23:25"><name pos:start="23:23" pos:end="23:25">buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="23:29" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:23">

        <expr_stmt pos:start="25:9" pos:end="25:40"><expr pos:start="25:9" pos:end="25:39"><call pos:start="25:9" pos:end="25:39"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="25:39">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">errp</name></expr></argument>, <argument pos:start="25:26" pos:end="25:38"><expr pos:start="25:26" pos:end="25:38"><literal type="string" pos:start="25:26" pos:end="25:38">"read failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:23">return <expr pos:start="27:16" pos:end="27:22"><operator pos:start="27:16" pos:end="27:16">-</operator><name pos:start="27:17" pos:end="27:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="41:7">/* Reply

       [ 0 ..  3]    magic   (NBD_REPLY_MAGIC)

       [ 4 ..  7]    error   (0 == no error)

       [ 7 .. 15]    handle

     */</comment>



    <expr_stmt pos:start="45:5" pos:end="45:26"><expr pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:9">magic</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:25"><name pos:start="45:13" pos:end="45:20">ldl_be_p</name><argument_list pos:start="45:21" pos:end="45:25">(<argument pos:start="45:22" pos:end="45:24"><expr pos:start="45:22" pos:end="45:24"><name pos:start="45:22" pos:end="45:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:38"><expr pos:start="47:5" pos:end="47:37"><name pos:start="47:5" pos:end="47:16"><name pos:start="47:5" pos:end="47:9">reply</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:16">error</name></name>  <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:37"><name pos:start="47:21" pos:end="47:28">ldl_be_p</name><argument_list pos:start="47:29" pos:end="47:37">(<argument pos:start="47:30" pos:end="47:36"><expr pos:start="47:30" pos:end="47:36"><name pos:start="47:30" pos:end="47:32">buf</name> <operator pos:start="47:34" pos:end="47:34">+</operator> <literal type="number" pos:start="47:36" pos:end="47:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:38"><expr pos:start="49:5" pos:end="49:37"><name pos:start="49:5" pos:end="49:17"><name pos:start="49:5" pos:end="49:9">reply</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:17">handle</name></name> <operator pos:start="49:19" pos:end="49:19">=</operator> <call pos:start="49:21" pos:end="49:37"><name pos:start="49:21" pos:end="49:28">ldq_be_p</name><argument_list pos:start="49:29" pos:end="49:37">(<argument pos:start="49:30" pos:end="49:36"><expr pos:start="49:30" pos:end="49:36"><name pos:start="49:30" pos:end="49:32">buf</name> <operator pos:start="49:34" pos:end="49:34">+</operator> <literal type="number" pos:start="49:36" pos:end="49:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:59"><expr pos:start="53:5" pos:end="53:58"><name pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:9">reply</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:16">error</name></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <call pos:start="53:20" pos:end="53:58"><name pos:start="53:20" pos:end="53:44">nbd_errno_to_system_errno</name><argument_list pos:start="53:45" pos:end="53:58">(<argument pos:start="53:46" pos:end="53:57"><expr pos:start="53:46" pos:end="53:57"><name pos:start="53:46" pos:end="53:57"><name pos:start="53:46" pos:end="53:50">reply</name><operator pos:start="53:51" pos:end="53:52">-&gt;</operator><name pos:start="53:53" pos:end="53:57">error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="57:34">(<expr pos:start="57:9" pos:end="57:33"><name pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:13">reply</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:20">error</name></name> <operator pos:start="57:22" pos:end="57:23">==</operator> <name pos:start="57:25" pos:end="57:33">ESHUTDOWN</name></expr>)</condition> <block pos:start="57:36" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:23">

        <comment type="block" pos:start="59:9" pos:end="59:69">/* This works even on mingw which lacks a native ESHUTDOWN */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:49"><expr pos:start="61:9" pos:end="61:48"><call pos:start="61:9" pos:end="61:48"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="61:48">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">errp</name></expr></argument>, <argument pos:start="61:26" pos:end="61:47"><expr pos:start="61:26" pos:end="61:47"><literal type="string" pos:start="61:26" pos:end="61:47">"server shutting down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:23">return <expr pos:start="63:16" pos:end="63:22"><operator pos:start="63:16" pos:end="63:16">-</operator><name pos:start="63:17" pos:end="63:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="71:46"><expr pos:start="67:5" pos:end="71:45"><call pos:start="67:5" pos:end="71:45"><name pos:start="67:5" pos:end="67:9">TRACE</name><argument_list pos:start="67:10" pos:end="71:45">(<argument pos:start="67:11" pos:end="69:35"><expr pos:start="67:11" pos:end="69:35"><literal type="string" pos:start="67:11" pos:end="67:36">"Got reply: { magic = 0x%"</literal> <name pos:start="67:38" pos:end="67:43">PRIx32</name> <literal type="string" pos:start="67:45" pos:end="67:59">", .error = % "</literal> <name pos:start="67:61" pos:end="67:66">PRId32</name>

          <literal type="string" pos:start="69:11" pos:end="69:24">", handle = %"</literal> <name pos:start="69:26" pos:end="69:31">PRIu64</name><literal type="string" pos:start="69:32" pos:end="69:35">" }"</literal></expr></argument>,

          <argument pos:start="71:11" pos:end="71:15"><expr pos:start="71:11" pos:end="71:15"><name pos:start="71:11" pos:end="71:15">magic</name></expr></argument>, <argument pos:start="71:18" pos:end="71:29"><expr pos:start="71:18" pos:end="71:29"><name pos:start="71:18" pos:end="71:29"><name pos:start="71:18" pos:end="71:22">reply</name><operator pos:start="71:23" pos:end="71:24">-&gt;</operator><name pos:start="71:25" pos:end="71:29">error</name></name></expr></argument>, <argument pos:start="71:32" pos:end="71:44"><expr pos:start="71:32" pos:end="71:44"><name pos:start="71:32" pos:end="71:44"><name pos:start="71:32" pos:end="71:36">reply</name><operator pos:start="71:37" pos:end="71:38">-&gt;</operator><name pos:start="71:39" pos:end="71:44">handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:33">(<expr pos:start="75:9" pos:end="75:32"><name pos:start="75:9" pos:end="75:13">magic</name> <operator pos:start="75:15" pos:end="75:16">!=</operator> <name pos:start="75:18" pos:end="75:32">NBD_REPLY_MAGIC</name></expr>)</condition> <block pos:start="75:35" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:23">

        <expr_stmt pos:start="77:9" pos:end="77:69"><expr pos:start="77:9" pos:end="77:68"><call pos:start="77:9" pos:end="77:68"><name pos:start="77:9" pos:end="77:18">error_setg</name><argument_list pos:start="77:19" pos:end="77:68">(<argument pos:start="77:20" pos:end="77:23"><expr pos:start="77:20" pos:end="77:23"><name pos:start="77:20" pos:end="77:23">errp</name></expr></argument>, <argument pos:start="77:26" pos:end="77:60"><expr pos:start="77:26" pos:end="77:60"><literal type="string" pos:start="77:26" pos:end="77:49">"invalid magic (got 0x%"</literal> <name pos:start="77:51" pos:end="77:56">PRIx32</name> <literal type="string" pos:start="77:58" pos:end="77:60">")"</literal></expr></argument>, <argument pos:start="77:63" pos:end="77:67"><expr pos:start="77:63" pos:end="77:67"><name pos:start="77:63" pos:end="77:67">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:23">return <expr pos:start="79:16" pos:end="79:22"><operator pos:start="79:16" pos:end="79:16">-</operator><name pos:start="79:17" pos:end="79:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="83:5" pos:end="83:23">return <expr pos:start="83:12" pos:end="83:22"><sizeof pos:start="83:12" pos:end="83:22">sizeof<argument_list pos:start="83:18" pos:end="83:22">(<argument pos:start="83:19" pos:end="83:21"><expr pos:start="83:19" pos:end="83:21"><name pos:start="83:19" pos:end="83:21">buf</name></expr></argument>)</argument_list></sizeof></expr>;</return>

</block_content>}</block></function>
</unit>
