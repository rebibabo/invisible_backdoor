<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1181.c" pos:tabs="8"><function pos:start="1:1" pos:end="249:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">kvm_cpu_exec</name><parameter_list pos:start="1:17" pos:end="1:31">(<parameter pos:start="1:18" pos:end="1:30"><decl pos:start="1:18" pos:end="1:30"><type pos:start="1:18" pos:end="1:27"><name pos:start="1:18" pos:end="1:25">CPUState</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:30">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="249:1">{<block_content pos:start="5:5" pos:end="247:15">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">kvm_run</name></name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">run</name> <init pos:start="5:25" pos:end="5:38">= <expr pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:29">cpu</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:38">kvm_run</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:20">run_ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:32"><expr pos:start="11:5" pos:end="11:31"><call pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:11">DPRINTF</name><argument_list pos:start="11:12" pos:end="11:31">(<argument pos:start="11:13" pos:end="11:30"><expr pos:start="11:13" pos:end="11:30"><literal type="string" pos:start="11:13" pos:end="11:30">"kvm_cpu_exec()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:43">(<expr pos:start="15:9" pos:end="15:42"><call pos:start="15:9" pos:end="15:42"><name pos:start="15:9" pos:end="15:37">kvm_arch_process_async_events</name><argument_list pos:start="15:38" pos:end="15:42">(<argument pos:start="15:39" pos:end="15:41"><expr pos:start="15:39" pos:end="15:41"><name pos:start="15:39" pos:end="15:41">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:45" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:24">

        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:11">cpu</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:25">exit_request</name></name> <operator pos:start="17:27" pos:end="17:27">=</operator> <literal type="number" pos:start="17:29" pos:end="17:29">0</literal></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:24">return <expr pos:start="19:16" pos:end="19:23"><name pos:start="19:16" pos:end="19:23">EXCP_HLT</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <do pos:start="25:5" pos:end="231:23">do <block pos:start="25:8" pos:end="231:5">{<block_content pos:start="27:9" pos:end="229:9">

        <decl_stmt pos:start="27:9" pos:end="27:25"><decl pos:start="27:9" pos:end="27:24"><type pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:18">MemTxAttrs</name></type> <name pos:start="27:20" pos:end="27:24">attrs</name></decl>;</decl_stmt>



        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:32">(<expr pos:start="31:13" pos:end="31:31"><name pos:start="31:13" pos:end="31:31"><name pos:start="31:13" pos:end="31:15">cpu</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:31">kvm_vcpu_dirty</name></name></expr>)</condition> <block pos:start="31:34" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:40">

            <expr_stmt pos:start="33:13" pos:end="33:63"><expr pos:start="33:13" pos:end="33:62"><call pos:start="33:13" pos:end="33:62"><name pos:start="33:13" pos:end="33:34">kvm_arch_put_registers</name><argument_list pos:start="33:35" pos:end="33:62">(<argument pos:start="33:36" pos:end="33:38"><expr pos:start="33:36" pos:end="33:38"><name pos:start="33:36" pos:end="33:38">cpu</name></expr></argument>, <argument pos:start="33:41" pos:end="33:61"><expr pos:start="33:41" pos:end="33:61"><name pos:start="33:41" pos:end="33:61">KVM_PUT_RUNTIME_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:40"><expr pos:start="35:13" pos:end="35:39"><name pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:15">cpu</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:31">kvm_vcpu_dirty</name></name> <operator pos:start="35:33" pos:end="35:33">=</operator> <name pos:start="35:35" pos:end="35:39">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><call pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:24">kvm_arch_pre_run</name><argument_list pos:start="41:25" pos:end="41:34">(<argument pos:start="41:26" pos:end="41:28"><expr pos:start="41:26" pos:end="41:28"><name pos:start="41:26" pos:end="41:28">cpu</name></expr></argument>, <argument pos:start="41:31" pos:end="41:33"><expr pos:start="41:31" pos:end="41:33"><name pos:start="41:31" pos:end="41:33">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="59:9"><if pos:start="43:9" pos:end="59:9">if <condition pos:start="43:12" pos:end="43:30">(<expr pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:15">cpu</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:29">exit_request</name></name></expr>)</condition> <block pos:start="43:32" pos:end="59:9">{<block_content pos:start="45:13" pos:end="57:33">

            <expr_stmt pos:start="45:13" pos:end="45:50"><expr pos:start="45:13" pos:end="45:49"><call pos:start="45:13" pos:end="45:49"><name pos:start="45:13" pos:end="45:19">DPRINTF</name><argument_list pos:start="45:20" pos:end="45:49">(<argument pos:start="45:21" pos:end="45:48"><expr pos:start="45:21" pos:end="45:48"><literal type="string" pos:start="45:21" pos:end="45:48">"interrupt exit requested\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="47:13" pos:end="55:15">/*

             * KVM requires us to reenter the kernel after IO exits to complete

             * instruction emulation. This self-signal will ensure that we

             * leave ASAP again.

             */</comment>

            <expr_stmt pos:start="57:13" pos:end="57:33"><expr pos:start="57:13" pos:end="57:32"><call pos:start="57:13" pos:end="57:32"><name pos:start="57:13" pos:end="57:30">qemu_cpu_kick_self</name><argument_list pos:start="57:31" pos:end="57:32">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:37"><expr pos:start="61:9" pos:end="61:36"><call pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:34">qemu_mutex_unlock_iothread</name><argument_list pos:start="61:35" pos:end="61:36">()</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:50"><expr pos:start="65:9" pos:end="65:49"><name pos:start="65:9" pos:end="65:15">run_ret</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:49"><name pos:start="65:19" pos:end="65:32">kvm_vcpu_ioctl</name><argument_list pos:start="65:33" pos:end="65:49">(<argument pos:start="65:34" pos:end="65:36"><expr pos:start="65:34" pos:end="65:36"><name pos:start="65:34" pos:end="65:36">cpu</name></expr></argument>, <argument pos:start="65:39" pos:end="65:45"><expr pos:start="65:39" pos:end="65:45"><name pos:start="65:39" pos:end="65:45">KVM_RUN</name></expr></argument>, <argument pos:start="65:48" pos:end="65:48"><expr pos:start="65:48" pos:end="65:48"><literal type="number" pos:start="65:48" pos:end="65:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><call pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:32">qemu_mutex_lock_iothread</name><argument_list pos:start="69:33" pos:end="69:34">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:44"><expr pos:start="71:9" pos:end="71:43"><name pos:start="71:9" pos:end="71:13">attrs</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <call pos:start="71:17" pos:end="71:43"><name pos:start="71:17" pos:end="71:33">kvm_arch_post_run</name><argument_list pos:start="71:34" pos:end="71:43">(<argument pos:start="71:35" pos:end="71:37"><expr pos:start="71:35" pos:end="71:37"><name pos:start="71:35" pos:end="71:37">cpu</name></expr></argument>, <argument pos:start="71:40" pos:end="71:42"><expr pos:start="71:40" pos:end="71:42"><name pos:start="71:40" pos:end="71:42">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="75:9" pos:end="111:9"><if pos:start="75:9" pos:end="111:9">if <condition pos:start="75:12" pos:end="75:24">(<expr pos:start="75:13" pos:end="75:23"><name pos:start="75:13" pos:end="75:19">run_ret</name> <operator pos:start="75:21" pos:end="75:21">&lt;</operator> <literal type="number" pos:start="75:23" pos:end="75:23">0</literal></expr>)</condition> <block pos:start="75:26" pos:end="111:9">{<block_content pos:start="77:13" pos:end="109:18">

            <if_stmt pos:start="77:13" pos:end="85:13"><if pos:start="77:13" pos:end="85:13">if <condition pos:start="77:16" pos:end="77:56">(<expr pos:start="77:17" pos:end="77:55"><name pos:start="77:17" pos:end="77:23">run_ret</name> <operator pos:start="77:25" pos:end="77:26">==</operator> <operator pos:start="77:28" pos:end="77:28">-</operator><name pos:start="77:29" pos:end="77:33">EINTR</name> <operator pos:start="77:35" pos:end="77:36">||</operator> <name pos:start="77:38" pos:end="77:44">run_ret</name> <operator pos:start="77:46" pos:end="77:47">==</operator> <operator pos:start="77:49" pos:end="77:49">-</operator><name pos:start="77:50" pos:end="77:55">EAGAIN</name></expr>)</condition> <block pos:start="77:58" pos:end="85:13">{<block_content pos:start="79:17" pos:end="83:22">

                <expr_stmt pos:start="79:17" pos:end="79:44"><expr pos:start="79:17" pos:end="79:43"><call pos:start="79:17" pos:end="79:43"><name pos:start="79:17" pos:end="79:23">DPRINTF</name><argument_list pos:start="79:24" pos:end="79:43">(<argument pos:start="79:25" pos:end="79:42"><expr pos:start="79:25" pos:end="79:42"><literal type="string" pos:start="79:25" pos:end="79:42">"io window exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:37"><expr pos:start="81:17" pos:end="81:36"><name pos:start="81:17" pos:end="81:19">ret</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <name pos:start="81:23" pos:end="81:36">EXCP_INTERRUPT</name></expr>;</expr_stmt>

                <break pos:start="83:17" pos:end="83:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="87:13" pos:end="92:0"><expr pos:start="87:13" pos:end="89:39"><call pos:start="87:13" pos:end="89:39"><name pos:start="87:13" pos:end="87:19">fprintf</name><argument_list pos:start="87:20" pos:end="89:39">(<argument pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:26">stderr</name></expr></argument>, <argument pos:start="87:29" pos:end="87:56"><expr pos:start="87:29" pos:end="87:56"><literal type="string" pos:start="87:29" pos:end="87:56">"error: kvm run failed %s\n"</literal></expr></argument>,

                    <argument pos:start="89:21" pos:end="89:38"><expr pos:start="89:21" pos:end="89:38"><call pos:start="89:21" pos:end="89:38"><name pos:start="89:21" pos:end="89:28">strerror</name><argument_list pos:start="89:29" pos:end="89:38">(<argument pos:start="89:30" pos:end="89:37"><expr pos:start="89:30" pos:end="89:37"><operator pos:start="89:30" pos:end="89:30">-</operator><name pos:start="89:31" pos:end="89:37">run_ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="91:1" pos:end="91:17">#<cpp:directive pos:start="91:2" pos:end="91:6">ifdef</cpp:directive> <name pos:start="91:8" pos:end="91:17">TARGET_PPC</name></cpp:ifdef>

            <if_stmt pos:start="93:13" pos:end="106:0"><if pos:start="93:13" pos:end="106:0">if <condition pos:start="93:16" pos:end="93:34">(<expr pos:start="93:17" pos:end="93:33"><name pos:start="93:17" pos:end="93:23">run_ret</name> <operator pos:start="93:25" pos:end="93:26">==</operator> <operator pos:start="93:28" pos:end="93:28">-</operator><name pos:start="93:29" pos:end="93:33">EBUSY</name></expr>)</condition> <block pos:start="93:36" pos:end="106:0">{<block_content pos:start="95:17" pos:end="101:56">

                <expr_stmt pos:start="95:17" pos:end="101:56"><expr pos:start="95:17" pos:end="101:55"><call pos:start="95:17" pos:end="101:55"><name pos:start="95:17" pos:end="95:23">fprintf</name><argument_list pos:start="95:24" pos:end="101:55">(<argument pos:start="95:25" pos:end="95:30"><expr pos:start="95:25" pos:end="95:30"><name pos:start="95:25" pos:end="95:30">stderr</name></expr></argument>,

                        <argument pos:start="97:25" pos:end="101:54"><expr pos:start="97:25" pos:end="101:54"><literal type="string" pos:start="97:25" pos:end="97:73">"This is probably because your SMT is enabled.\n"</literal>

                        <literal type="string" pos:start="99:25" pos:end="99:72">"VCPU can only run on primary threads with all "</literal>

                        <literal type="string" pos:start="101:25" pos:end="101:54">"secondary threads offline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="107:13" pos:end="107:21"><expr pos:start="107:13" pos:end="107:20"><name pos:start="107:13" pos:end="107:15">ret</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <operator pos:start="107:19" pos:end="107:19">-</operator><literal type="number" pos:start="107:20" pos:end="107:20">1</literal></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:61"><expr pos:start="115:9" pos:end="115:60"><call pos:start="115:9" pos:end="115:60"><name pos:start="115:9" pos:end="115:26">trace_kvm_run_exit</name><argument_list pos:start="115:27" pos:end="115:60">(<argument pos:start="115:28" pos:end="115:41"><expr pos:start="115:28" pos:end="115:41"><name pos:start="115:28" pos:end="115:41"><name pos:start="115:28" pos:end="115:30">cpu</name><operator pos:start="115:31" pos:end="115:32">-&gt;</operator><name pos:start="115:33" pos:end="115:41">cpu_index</name></name></expr></argument>, <argument pos:start="115:44" pos:end="115:59"><expr pos:start="115:44" pos:end="115:59"><name pos:start="115:44" pos:end="115:59"><name pos:start="115:44" pos:end="115:46">run</name><operator pos:start="115:47" pos:end="115:48">-&gt;</operator><name pos:start="115:49" pos:end="115:59">exit_reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="117:9" pos:end="229:9">switch <condition pos:start="117:16" pos:end="117:33">(<expr pos:start="117:17" pos:end="117:32"><name pos:start="117:17" pos:end="117:32"><name pos:start="117:17" pos:end="117:19">run</name><operator pos:start="117:20" pos:end="117:21">-&gt;</operator><name pos:start="117:22" pos:end="117:32">exit_reason</name></name></expr>)</condition> <block pos:start="117:35" pos:end="229:9">{<block_content pos:start="119:9" pos:end="227:18">

        <case pos:start="119:9" pos:end="119:25">case <expr pos:start="119:14" pos:end="119:24"><name pos:start="119:14" pos:end="119:24">KVM_EXIT_IO</name></expr>:</case>

            <expr_stmt pos:start="121:13" pos:end="121:35"><expr pos:start="121:13" pos:end="121:34"><call pos:start="121:13" pos:end="121:34"><name pos:start="121:13" pos:end="121:19">DPRINTF</name><argument_list pos:start="121:20" pos:end="121:34">(<argument pos:start="121:21" pos:end="121:33"><expr pos:start="121:21" pos:end="121:33"><literal type="string" pos:start="121:21" pos:end="121:33">"handle_io\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="131:41"><expr pos:start="123:13" pos:end="131:40"><call pos:start="123:13" pos:end="131:40"><name pos:start="123:13" pos:end="123:25">kvm_handle_io</name><argument_list pos:start="123:26" pos:end="131:40">(<argument pos:start="123:27" pos:end="123:38"><expr pos:start="123:27" pos:end="123:38"><name pos:start="123:27" pos:end="123:38"><name pos:start="123:27" pos:end="123:29">run</name><operator pos:start="123:30" pos:end="123:31">-&gt;</operator><name pos:start="123:32" pos:end="123:33">io</name><operator pos:start="123:34" pos:end="123:34">.</operator><name pos:start="123:35" pos:end="123:38">port</name></name></expr></argument>, <argument pos:start="123:41" pos:end="123:45"><expr pos:start="123:41" pos:end="123:45"><name pos:start="123:41" pos:end="123:45">attrs</name></expr></argument>,

                          <argument pos:start="125:27" pos:end="125:62"><expr pos:start="125:27" pos:end="125:62"><operator pos:start="125:27" pos:end="125:27">(</operator><name pos:start="125:28" pos:end="125:34">uint8_t</name> <operator pos:start="125:36" pos:end="125:36">*</operator><operator pos:start="125:37" pos:end="125:37">)</operator><name pos:start="125:38" pos:end="125:40">run</name> <operator pos:start="125:42" pos:end="125:42">+</operator> <name pos:start="125:44" pos:end="125:62"><name pos:start="125:44" pos:end="125:46">run</name><operator pos:start="125:47" pos:end="125:48">-&gt;</operator><name pos:start="125:49" pos:end="125:50">io</name><operator pos:start="125:51" pos:end="125:51">.</operator><name pos:start="125:52" pos:end="125:62">data_offset</name></name></expr></argument>,

                          <argument pos:start="127:27" pos:end="127:43"><expr pos:start="127:27" pos:end="127:43"><name pos:start="127:27" pos:end="127:43"><name pos:start="127:27" pos:end="127:29">run</name><operator pos:start="127:30" pos:end="127:31">-&gt;</operator><name pos:start="127:32" pos:end="127:33">io</name><operator pos:start="127:34" pos:end="127:34">.</operator><name pos:start="127:35" pos:end="127:43">direction</name></name></expr></argument>,

                          <argument pos:start="129:27" pos:end="129:38"><expr pos:start="129:27" pos:end="129:38"><name pos:start="129:27" pos:end="129:38"><name pos:start="129:27" pos:end="129:29">run</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:33">io</name><operator pos:start="129:34" pos:end="129:34">.</operator><name pos:start="129:35" pos:end="129:38">size</name></name></expr></argument>,

                          <argument pos:start="131:27" pos:end="131:39"><expr pos:start="131:27" pos:end="131:39"><name pos:start="131:27" pos:end="131:39"><name pos:start="131:27" pos:end="131:29">run</name><operator pos:start="131:30" pos:end="131:31">-&gt;</operator><name pos:start="131:32" pos:end="131:33">io</name><operator pos:start="131:34" pos:end="131:34">.</operator><name pos:start="131:35" pos:end="131:39">count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:20"><expr pos:start="133:13" pos:end="133:19"><name pos:start="133:13" pos:end="133:15">ret</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <literal type="number" pos:start="133:19" pos:end="133:19">0</literal></expr>;</expr_stmt>

            <break pos:start="135:13" pos:end="135:18">break;</break>

        <case pos:start="137:9" pos:end="137:27">case <expr pos:start="137:14" pos:end="137:26"><name pos:start="137:14" pos:end="137:26">KVM_EXIT_MMIO</name></expr>:</case>

            <expr_stmt pos:start="139:13" pos:end="139:37"><expr pos:start="139:13" pos:end="139:36"><call pos:start="139:13" pos:end="139:36"><name pos:start="139:13" pos:end="139:19">DPRINTF</name><argument_list pos:start="139:20" pos:end="139:36">(<argument pos:start="139:21" pos:end="139:35"><expr pos:start="139:21" pos:end="139:35"><literal type="string" pos:start="139:21" pos:end="139:35">"handle_mmio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="149:49"><expr pos:start="141:13" pos:end="149:48"><call pos:start="141:13" pos:end="149:48"><name pos:start="141:13" pos:end="141:28">address_space_rw</name><argument_list pos:start="141:29" pos:end="149:48">(<argument pos:start="141:30" pos:end="141:50"><expr pos:start="141:30" pos:end="141:50"><operator pos:start="141:30" pos:end="141:30">&amp;</operator><name pos:start="141:31" pos:end="141:50">address_space_memory</name></expr></argument>,

                             <argument pos:start="143:30" pos:end="143:48"><expr pos:start="143:30" pos:end="143:48"><name pos:start="143:30" pos:end="143:48"><name pos:start="143:30" pos:end="143:32">run</name><operator pos:start="143:33" pos:end="143:34">-&gt;</operator><name pos:start="143:35" pos:end="143:38">mmio</name><operator pos:start="143:39" pos:end="143:39">.</operator><name pos:start="143:40" pos:end="143:48">phys_addr</name></name></expr></argument>, <argument pos:start="143:51" pos:end="143:55"><expr pos:start="143:51" pos:end="143:55"><name pos:start="143:51" pos:end="143:55">attrs</name></expr></argument>,

                             <argument pos:start="145:30" pos:end="145:43"><expr pos:start="145:30" pos:end="145:43"><name pos:start="145:30" pos:end="145:43"><name pos:start="145:30" pos:end="145:32">run</name><operator pos:start="145:33" pos:end="145:34">-&gt;</operator><name pos:start="145:35" pos:end="145:38">mmio</name><operator pos:start="145:39" pos:end="145:39">.</operator><name pos:start="145:40" pos:end="145:43">data</name></name></expr></argument>,

                             <argument pos:start="147:30" pos:end="147:42"><expr pos:start="147:30" pos:end="147:42"><name pos:start="147:30" pos:end="147:42"><name pos:start="147:30" pos:end="147:32">run</name><operator pos:start="147:33" pos:end="147:34">-&gt;</operator><name pos:start="147:35" pos:end="147:38">mmio</name><operator pos:start="147:39" pos:end="147:39">.</operator><name pos:start="147:40" pos:end="147:42">len</name></name></expr></argument>,

                             <argument pos:start="149:30" pos:end="149:47"><expr pos:start="149:30" pos:end="149:47"><name pos:start="149:30" pos:end="149:47"><name pos:start="149:30" pos:end="149:32">run</name><operator pos:start="149:33" pos:end="149:34">-&gt;</operator><name pos:start="149:35" pos:end="149:38">mmio</name><operator pos:start="149:39" pos:end="149:39">.</operator><name pos:start="149:40" pos:end="149:47">is_write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:20"><expr pos:start="151:13" pos:end="151:19"><name pos:start="151:13" pos:end="151:15">ret</name> <operator pos:start="151:17" pos:end="151:17">=</operator> <literal type="number" pos:start="151:19" pos:end="151:19">0</literal></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        <case pos:start="155:9" pos:end="155:38">case <expr pos:start="155:14" pos:end="155:37"><name pos:start="155:14" pos:end="155:37">KVM_EXIT_IRQ_WINDOW_OPEN</name></expr>:</case>

            <expr_stmt pos:start="157:13" pos:end="157:41"><expr pos:start="157:13" pos:end="157:40"><call pos:start="157:13" pos:end="157:40"><name pos:start="157:13" pos:end="157:19">DPRINTF</name><argument_list pos:start="157:20" pos:end="157:40">(<argument pos:start="157:21" pos:end="157:39"><expr pos:start="157:21" pos:end="157:39"><literal type="string" pos:start="157:21" pos:end="157:39">"irq_window_open\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:33"><expr pos:start="159:13" pos:end="159:32"><name pos:start="159:13" pos:end="159:15">ret</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <name pos:start="159:19" pos:end="159:32">EXCP_INTERRUPT</name></expr>;</expr_stmt>

            <break pos:start="161:13" pos:end="161:18">break;</break>

        <case pos:start="163:9" pos:end="163:31">case <expr pos:start="163:14" pos:end="163:30"><name pos:start="163:14" pos:end="163:30">KVM_EXIT_SHUTDOWN</name></expr>:</case>

            <expr_stmt pos:start="165:13" pos:end="165:34"><expr pos:start="165:13" pos:end="165:33"><call pos:start="165:13" pos:end="165:33"><name pos:start="165:13" pos:end="165:19">DPRINTF</name><argument_list pos:start="165:20" pos:end="165:33">(<argument pos:start="165:21" pos:end="165:32"><expr pos:start="165:21" pos:end="165:32"><literal type="string" pos:start="165:21" pos:end="165:32">"shutdown\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:40"><expr pos:start="167:13" pos:end="167:39"><call pos:start="167:13" pos:end="167:39"><name pos:start="167:13" pos:end="167:37">qemu_system_reset_request</name><argument_list pos:start="167:38" pos:end="167:39">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:33"><expr pos:start="169:13" pos:end="169:32"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:17">=</operator> <name pos:start="169:19" pos:end="169:32">EXCP_INTERRUPT</name></expr>;</expr_stmt>

            <break pos:start="171:13" pos:end="171:18">break;</break>

        <case pos:start="173:9" pos:end="173:30">case <expr pos:start="173:14" pos:end="173:29"><name pos:start="173:14" pos:end="173:29">KVM_EXIT_UNKNOWN</name></expr>:</case>

            <expr_stmt pos:start="175:13" pos:end="177:60"><expr pos:start="175:13" pos:end="177:59"><call pos:start="175:13" pos:end="177:59"><name pos:start="175:13" pos:end="175:19">fprintf</name><argument_list pos:start="175:20" pos:end="177:59">(<argument pos:start="175:21" pos:end="175:26"><expr pos:start="175:21" pos:end="175:26"><name pos:start="175:21" pos:end="175:26">stderr</name></expr></argument>, <argument pos:start="175:29" pos:end="175:78"><expr pos:start="175:29" pos:end="175:78"><literal type="string" pos:start="175:29" pos:end="175:66">"KVM: unknown exit, hardware reason %"</literal> <name pos:start="175:68" pos:end="175:73">PRIx64</name> <literal type="string" pos:start="175:75" pos:end="175:78">"\n"</literal></expr></argument>,

                    <argument pos:start="177:21" pos:end="177:58"><expr pos:start="177:21" pos:end="177:58"><operator pos:start="177:21" pos:end="177:21">(</operator><name pos:start="177:22" pos:end="177:29">uint64_t</name><operator pos:start="177:30" pos:end="177:30">)</operator><name pos:start="177:31" pos:end="177:58"><name pos:start="177:31" pos:end="177:33">run</name><operator pos:start="177:34" pos:end="177:35">-&gt;</operator><name pos:start="177:36" pos:end="177:37">hw</name><operator pos:start="177:38" pos:end="177:38">.</operator><name pos:start="177:39" pos:end="177:58">hardware_exit_reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:21"><expr pos:start="179:13" pos:end="179:20"><name pos:start="179:13" pos:end="179:15">ret</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <operator pos:start="179:19" pos:end="179:19">-</operator><literal type="number" pos:start="179:20" pos:end="179:20">1</literal></expr>;</expr_stmt>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        <case pos:start="183:9" pos:end="183:37">case <expr pos:start="183:14" pos:end="183:36"><name pos:start="183:14" pos:end="183:36">KVM_EXIT_INTERNAL_ERROR</name></expr>:</case>

            <expr_stmt pos:start="185:13" pos:end="185:54"><expr pos:start="185:13" pos:end="185:53"><name pos:start="185:13" pos:end="185:15">ret</name> <operator pos:start="185:17" pos:end="185:17">=</operator> <call pos:start="185:19" pos:end="185:53"><name pos:start="185:19" pos:end="185:43">kvm_handle_internal_error</name><argument_list pos:start="185:44" pos:end="185:53">(<argument pos:start="185:45" pos:end="185:47"><expr pos:start="185:45" pos:end="185:47"><name pos:start="185:45" pos:end="185:47">cpu</name></expr></argument>, <argument pos:start="185:50" pos:end="185:52"><expr pos:start="185:50" pos:end="185:52"><name pos:start="185:50" pos:end="185:52">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        <case pos:start="189:9" pos:end="189:35">case <expr pos:start="189:14" pos:end="189:34"><name pos:start="189:14" pos:end="189:34">KVM_EXIT_SYSTEM_EVENT</name></expr>:</case>

            <switch pos:start="191:13" pos:end="217:13">switch <condition pos:start="191:20" pos:end="191:43">(<expr pos:start="191:21" pos:end="191:42"><name pos:start="191:21" pos:end="191:42"><name pos:start="191:21" pos:end="191:23">run</name><operator pos:start="191:24" pos:end="191:25">-&gt;</operator><name pos:start="191:26" pos:end="191:37">system_event</name><operator pos:start="191:38" pos:end="191:38">.</operator><name pos:start="191:39" pos:end="191:42">type</name></name></expr>)</condition> <block pos:start="191:45" pos:end="217:13">{<block_content pos:start="193:13" pos:end="215:22">

            <case pos:start="193:13" pos:end="193:43">case <expr pos:start="193:18" pos:end="193:42"><name pos:start="193:18" pos:end="193:42">KVM_SYSTEM_EVENT_SHUTDOWN</name></expr>:</case>

                <expr_stmt pos:start="195:17" pos:end="195:47"><expr pos:start="195:17" pos:end="195:46"><call pos:start="195:17" pos:end="195:46"><name pos:start="195:17" pos:end="195:44">qemu_system_shutdown_request</name><argument_list pos:start="195:45" pos:end="195:46">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:37"><expr pos:start="197:17" pos:end="197:36"><name pos:start="197:17" pos:end="197:19">ret</name> <operator pos:start="197:21" pos:end="197:21">=</operator> <name pos:start="197:23" pos:end="197:36">EXCP_INTERRUPT</name></expr>;</expr_stmt>

                <break pos:start="199:17" pos:end="199:22">break;</break>

            <case pos:start="201:13" pos:end="201:40">case <expr pos:start="201:18" pos:end="201:39"><name pos:start="201:18" pos:end="201:39">KVM_SYSTEM_EVENT_RESET</name></expr>:</case>

                <expr_stmt pos:start="203:17" pos:end="203:44"><expr pos:start="203:17" pos:end="203:43"><call pos:start="203:17" pos:end="203:43"><name pos:start="203:17" pos:end="203:41">qemu_system_reset_request</name><argument_list pos:start="203:42" pos:end="203:43">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:37"><expr pos:start="205:17" pos:end="205:36"><name pos:start="205:17" pos:end="205:19">ret</name> <operator pos:start="205:21" pos:end="205:21">=</operator> <name pos:start="205:23" pos:end="205:36">EXCP_INTERRUPT</name></expr>;</expr_stmt>

                <break pos:start="207:17" pos:end="207:22">break;</break>

            <default pos:start="209:13" pos:end="209:20">default:</default>

                <expr_stmt pos:start="211:17" pos:end="211:50"><expr pos:start="211:17" pos:end="211:49"><call pos:start="211:17" pos:end="211:49"><name pos:start="211:17" pos:end="211:23">DPRINTF</name><argument_list pos:start="211:24" pos:end="211:49">(<argument pos:start="211:25" pos:end="211:48"><expr pos:start="211:25" pos:end="211:48"><literal type="string" pos:start="211:25" pos:end="211:48">"kvm_arch_handle_exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:53"><expr pos:start="213:17" pos:end="213:52"><name pos:start="213:17" pos:end="213:19">ret</name> <operator pos:start="213:21" pos:end="213:21">=</operator> <call pos:start="213:23" pos:end="213:52"><name pos:start="213:23" pos:end="213:42">kvm_arch_handle_exit</name><argument_list pos:start="213:43" pos:end="213:52">(<argument pos:start="213:44" pos:end="213:46"><expr pos:start="213:44" pos:end="213:46"><name pos:start="213:44" pos:end="213:46">cpu</name></expr></argument>, <argument pos:start="213:49" pos:end="213:51"><expr pos:start="213:49" pos:end="213:51"><name pos:start="213:49" pos:end="213:51">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="215:17" pos:end="215:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="219:13" pos:end="219:18">break;</break>

        <default pos:start="221:9" pos:end="221:16">default:</default>

            <expr_stmt pos:start="223:13" pos:end="223:46"><expr pos:start="223:13" pos:end="223:45"><call pos:start="223:13" pos:end="223:45"><name pos:start="223:13" pos:end="223:19">DPRINTF</name><argument_list pos:start="223:20" pos:end="223:45">(<argument pos:start="223:21" pos:end="223:44"><expr pos:start="223:21" pos:end="223:44"><literal type="string" pos:start="223:21" pos:end="223:44">"kvm_arch_handle_exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:49"><expr pos:start="225:13" pos:end="225:48"><name pos:start="225:13" pos:end="225:15">ret</name> <operator pos:start="225:17" pos:end="225:17">=</operator> <call pos:start="225:19" pos:end="225:48"><name pos:start="225:19" pos:end="225:38">kvm_arch_handle_exit</name><argument_list pos:start="225:39" pos:end="225:48">(<argument pos:start="225:40" pos:end="225:42"><expr pos:start="225:40" pos:end="225:42"><name pos:start="225:40" pos:end="225:42">cpu</name></expr></argument>, <argument pos:start="225:45" pos:end="225:47"><expr pos:start="225:45" pos:end="225:47"><name pos:start="225:45" pos:end="225:47">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="227:13" pos:end="227:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block> while <condition pos:start="231:13" pos:end="231:22">(<expr pos:start="231:14" pos:end="231:21"><name pos:start="231:14" pos:end="231:16">ret</name> <operator pos:start="231:18" pos:end="231:19">==</operator> <literal type="number" pos:start="231:21" pos:end="231:21">0</literal></expr>)</condition>;</do>



    <if_stmt pos:start="235:5" pos:end="241:5"><if pos:start="235:5" pos:end="241:5">if <condition pos:start="235:8" pos:end="235:16">(<expr pos:start="235:9" pos:end="235:15"><name pos:start="235:9" pos:end="235:11">ret</name> <operator pos:start="235:13" pos:end="235:13">&lt;</operator> <literal type="number" pos:start="235:15" pos:end="235:15">0</literal></expr>)</condition> <block pos:start="235:18" pos:end="241:5">{<block_content pos:start="237:9" pos:end="239:42">

        <expr_stmt pos:start="237:9" pos:end="237:60"><expr pos:start="237:9" pos:end="237:59"><call pos:start="237:9" pos:end="237:59"><name pos:start="237:9" pos:end="237:22">cpu_dump_state</name><argument_list pos:start="237:23" pos:end="237:59">(<argument pos:start="237:24" pos:end="237:26"><expr pos:start="237:24" pos:end="237:26"><name pos:start="237:24" pos:end="237:26">cpu</name></expr></argument>, <argument pos:start="237:29" pos:end="237:34"><expr pos:start="237:29" pos:end="237:34"><name pos:start="237:29" pos:end="237:34">stderr</name></expr></argument>, <argument pos:start="237:37" pos:end="237:43"><expr pos:start="237:37" pos:end="237:43"><name pos:start="237:37" pos:end="237:43">fprintf</name></expr></argument>, <argument pos:start="237:46" pos:end="237:58"><expr pos:start="237:46" pos:end="237:58"><name pos:start="237:46" pos:end="237:58">CPU_DUMP_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:42"><expr pos:start="239:9" pos:end="239:41"><call pos:start="239:9" pos:end="239:41"><name pos:start="239:9" pos:end="239:15">vm_stop</name><argument_list pos:start="239:16" pos:end="239:41">(<argument pos:start="239:17" pos:end="239:40"><expr pos:start="239:17" pos:end="239:40"><name pos:start="239:17" pos:end="239:40">RUN_STATE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:26"><expr pos:start="245:5" pos:end="245:25"><name pos:start="245:5" pos:end="245:21"><name pos:start="245:5" pos:end="245:7">cpu</name><operator pos:start="245:8" pos:end="245:9">-&gt;</operator><name pos:start="245:10" pos:end="245:21">exit_request</name></name> <operator pos:start="245:23" pos:end="245:23">=</operator> <literal type="number" pos:start="245:25" pos:end="245:25">0</literal></expr>;</expr_stmt>

    <return pos:start="247:5" pos:end="247:15">return <expr pos:start="247:12" pos:end="247:14"><name pos:start="247:12" pos:end="247:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
