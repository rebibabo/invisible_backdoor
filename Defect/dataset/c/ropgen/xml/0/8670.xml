<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8670.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">scsi_read_dvd_structure</name><parameter_list pos:start="1:35" pos:end="3:51">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:48">SCSIDiskState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:64">SCSIDiskReq</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:67">r</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:50"><decl pos:start="3:36" pos:end="3:50"><type pos:start="3:36" pos:end="3:50"><name pos:start="3:36" pos:end="3:42">uint8_t</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:50">outbuf</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="185:1">{<block_content pos:start="7:5" pos:end="183:14">

    <decl_stmt pos:start="7:5" pos:end="17:6"><decl pos:start="7:5" pos:end="17:5"><type pos:start="7:5" pos:end="7:20"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <specifier pos:start="7:12" pos:end="7:16">const</specifier> <name pos:start="7:18" pos:end="7:20">int</name></type> <name pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:34">rds_caps_size</name><index pos:start="7:35" pos:end="7:37">[<expr pos:start="7:36" pos:end="7:36"><literal type="number" pos:start="7:36" pos:end="7:36">5</literal></expr>]</index></name> <init pos:start="7:39" pos:end="17:5">= <expr pos:start="7:41" pos:end="17:5"><block pos:start="7:41" pos:end="17:5">{

        <expr pos:start="9:9" pos:end="9:22"><index pos:start="9:9" pos:end="9:11">[<expr pos:start="9:10" pos:end="9:10"><literal type="number" pos:start="9:10" pos:end="9:10">0</literal></expr>]</index> <operator pos:start="9:13" pos:end="9:13">=</operator> <literal type="number" pos:start="9:15" pos:end="9:20">2048</literal> <operator pos:start="9:20" pos:end="9:20">+</operator> <literal type="number" pos:start="9:22" pos:end="9:22">4</literal></expr>,

        <expr pos:start="11:9" pos:end="11:19"><index pos:start="11:9" pos:end="11:11">[<expr pos:start="11:10" pos:end="11:10"><literal type="number" pos:start="11:10" pos:end="11:10">1</literal></expr>]</index> <operator pos:start="11:13" pos:end="11:13">=</operator> <literal type="number" pos:start="11:15" pos:end="11:17">4</literal> <operator pos:start="11:17" pos:end="11:17">+</operator> <literal type="number" pos:start="11:19" pos:end="11:19">4</literal></expr>,

        <expr pos:start="13:9" pos:end="13:21"><index pos:start="13:9" pos:end="13:11">[<expr pos:start="13:10" pos:end="13:10"><literal type="number" pos:start="13:10" pos:end="13:10">3</literal></expr>]</index> <operator pos:start="13:13" pos:end="13:13">=</operator> <literal type="number" pos:start="13:15" pos:end="13:19">188</literal> <operator pos:start="13:19" pos:end="13:19">+</operator> <literal type="number" pos:start="13:21" pos:end="13:21">4</literal></expr>,

        <expr pos:start="15:9" pos:end="15:22"><index pos:start="15:9" pos:end="15:11">[<expr pos:start="15:10" pos:end="15:10"><literal type="number" pos:start="15:10" pos:end="15:10">4</literal></expr>]</index> <operator pos:start="15:13" pos:end="15:13">=</operator> <literal type="number" pos:start="15:15" pos:end="15:20">2048</literal> <operator pos:start="15:20" pos:end="15:20">+</operator> <literal type="number" pos:start="15:22" pos:end="15:22">4</literal></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:38"><decl pos:start="21:5" pos:end="21:37"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:17">media</name> <init pos:start="21:19" pos:end="21:37">= <expr pos:start="21:21" pos:end="21:37"><name pos:start="21:21" pos:end="21:37"><name pos:start="21:21" pos:end="21:21">r</name><operator pos:start="21:22" pos:end="21:23">-&gt;</operator><name pos:start="21:24" pos:end="21:26">req</name><operator pos:start="21:27" pos:end="21:27">.</operator><name pos:start="21:28" pos:end="21:30">cmd</name><operator pos:start="21:31" pos:end="21:31">.</operator><name pos:start="21:32" pos:end="21:34">buf</name><index pos:start="21:35" pos:end="21:37">[<expr pos:start="21:36" pos:end="21:36"><literal type="number" pos:start="21:36" pos:end="21:36">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:38"><decl pos:start="23:5" pos:end="23:37"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:17">layer</name> <init pos:start="23:19" pos:end="23:37">= <expr pos:start="23:21" pos:end="23:37"><name pos:start="23:21" pos:end="23:37"><name pos:start="23:21" pos:end="23:21">r</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:26">req</name><operator pos:start="23:27" pos:end="23:27">.</operator><name pos:start="23:28" pos:end="23:30">cmd</name><operator pos:start="23:31" pos:end="23:31">.</operator><name pos:start="23:32" pos:end="23:34">buf</name><index pos:start="23:35" pos:end="23:37">[<expr pos:start="23:36" pos:end="23:36"><literal type="number" pos:start="23:36" pos:end="23:36">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:39"><decl pos:start="25:5" pos:end="25:38"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">uint8_t</name></type> <name pos:start="25:13" pos:end="25:18">format</name> <init pos:start="25:20" pos:end="25:38">= <expr pos:start="25:22" pos:end="25:38"><name pos:start="25:22" pos:end="25:38"><name pos:start="25:22" pos:end="25:22">r</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:27">req</name><operator pos:start="25:28" pos:end="25:28">.</operator><name pos:start="25:29" pos:end="25:31">cmd</name><operator pos:start="25:32" pos:end="25:32">.</operator><name pos:start="25:33" pos:end="25:35">buf</name><index pos:start="25:36" pos:end="25:38">[<expr pos:start="25:37" pos:end="25:37"><literal type="number" pos:start="25:37" pos:end="25:37">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:18"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:12">size</name> <init pos:start="27:14" pos:end="27:17">= <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:33">(<expr pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:15">qdev</name><operator pos:start="31:16" pos:end="31:16">.</operator><name pos:start="31:17" pos:end="31:20">type</name></name> <operator pos:start="31:22" pos:end="31:23">!=</operator> <name pos:start="31:25" pos:end="31:32">TYPE_ROM</name></expr>)</condition> <block pos:start="31:35" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:18">

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:13">media</name> <operator pos:start="37:15" pos:end="37:16">!=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>)</condition> <block pos:start="37:21" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:59"><expr pos:start="39:9" pos:end="39:58"><call pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:28">scsi_check_condition</name><argument_list pos:start="39:29" pos:end="39:58">(<argument pos:start="39:30" pos:end="39:30"><expr pos:start="39:30" pos:end="39:30"><name pos:start="39:30" pos:end="39:30">r</name></expr></argument>, <argument pos:start="39:33" pos:end="39:57"><expr pos:start="39:33" pos:end="39:57"><call pos:start="39:33" pos:end="39:57"><name pos:start="39:33" pos:end="39:42">SENSE_CODE</name><argument_list pos:start="39:43" pos:end="39:57">(<argument pos:start="39:44" pos:end="39:56"><expr pos:start="39:44" pos:end="39:56"><name pos:start="39:44" pos:end="39:56">INVALID_FIELD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="75:5"><if pos:start="47:5" pos:end="75:5">if <condition pos:start="47:8" pos:end="47:23">(<expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:14">format</name> <operator pos:start="47:16" pos:end="47:17">!=</operator> <literal type="number" pos:start="47:19" pos:end="47:22">0xff</literal></expr>)</condition> <block pos:start="47:25" pos:end="75:5">{<block_content pos:start="49:9" pos:end="73:32">

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:63">(<expr pos:start="49:13" pos:end="49:62"><name pos:start="49:13" pos:end="49:24"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:24">tray_open</name></name> <operator pos:start="49:26" pos:end="49:27">||</operator> <operator pos:start="49:29" pos:end="49:29">!</operator><call pos:start="49:30" pos:end="49:62"><name pos:start="49:30" pos:end="49:45">bdrv_is_inserted</name><argument_list pos:start="49:46" pos:end="49:62">(<argument pos:start="49:47" pos:end="49:61"><expr pos:start="49:47" pos:end="49:61"><name pos:start="49:47" pos:end="49:61"><name pos:start="49:47" pos:end="49:47">s</name><operator pos:start="49:48" pos:end="49:49">-&gt;</operator><name pos:start="49:50" pos:end="49:53">qdev</name><operator pos:start="49:54" pos:end="49:54">.</operator><name pos:start="49:55" pos:end="49:58">conf</name><operator pos:start="49:59" pos:end="49:59">.</operator><name pos:start="49:60" pos:end="49:61">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:65" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:22">

            <expr_stmt pos:start="51:13" pos:end="51:59"><expr pos:start="51:13" pos:end="51:58"><call pos:start="51:13" pos:end="51:58"><name pos:start="51:13" pos:end="51:32">scsi_check_condition</name><argument_list pos:start="51:33" pos:end="51:58">(<argument pos:start="51:34" pos:end="51:34"><expr pos:start="51:34" pos:end="51:34"><name pos:start="51:34" pos:end="51:34">r</name></expr></argument>, <argument pos:start="51:37" pos:end="51:57"><expr pos:start="51:37" pos:end="51:57"><call pos:start="51:37" pos:end="51:57"><name pos:start="51:37" pos:end="51:46">SENSE_CODE</name><argument_list pos:start="51:47" pos:end="51:57">(<argument pos:start="51:48" pos:end="51:56"><expr pos:start="51:48" pos:end="51:56"><name pos:start="51:48" pos:end="51:56">NO_MEDIUM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:22">return <expr pos:start="53:20" pos:end="53:21"><operator pos:start="53:20" pos:end="53:20">-</operator><literal type="number" pos:start="53:21" pos:end="53:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:27">(<expr pos:start="57:13" pos:end="57:26"><call pos:start="57:13" pos:end="57:26"><name pos:start="57:13" pos:end="57:23">media_is_cd</name><argument_list pos:start="57:24" pos:end="57:26">(<argument pos:start="57:25" pos:end="57:25"><expr pos:start="57:25" pos:end="57:25"><name pos:start="57:25" pos:end="57:25">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:29" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:22">

            <expr_stmt pos:start="59:13" pos:end="59:69"><expr pos:start="59:13" pos:end="59:68"><call pos:start="59:13" pos:end="59:68"><name pos:start="59:13" pos:end="59:32">scsi_check_condition</name><argument_list pos:start="59:33" pos:end="59:68">(<argument pos:start="59:34" pos:end="59:34"><expr pos:start="59:34" pos:end="59:34"><name pos:start="59:34" pos:end="59:34">r</name></expr></argument>, <argument pos:start="59:37" pos:end="59:67"><expr pos:start="59:37" pos:end="59:67"><call pos:start="59:37" pos:end="59:67"><name pos:start="59:37" pos:end="59:46">SENSE_CODE</name><argument_list pos:start="59:47" pos:end="59:67">(<argument pos:start="59:48" pos:end="59:66"><expr pos:start="59:48" pos:end="59:66"><name pos:start="59:48" pos:end="59:66">INCOMPATIBLE_FORMAT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:22">return <expr pos:start="61:20" pos:end="61:21"><operator pos:start="61:20" pos:end="61:20">-</operator><literal type="number" pos:start="61:21" pos:end="61:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:48">(<expr pos:start="65:13" pos:end="65:47"><name pos:start="65:13" pos:end="65:18">format</name> <operator pos:start="65:20" pos:end="65:21">&gt;=</operator> <call pos:start="65:23" pos:end="65:47"><name pos:start="65:23" pos:end="65:32">ARRAY_SIZE</name><argument_list pos:start="65:33" pos:end="65:47">(<argument pos:start="65:34" pos:end="65:46"><expr pos:start="65:34" pos:end="65:46"><name pos:start="65:34" pos:end="65:46">rds_caps_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:50" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:22">

            <return pos:start="67:13" pos:end="67:22">return <expr pos:start="67:20" pos:end="67:21"><operator pos:start="67:20" pos:end="67:20">-</operator><literal type="number" pos:start="67:21" pos:end="67:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:37"><expr pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:12">size</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <name pos:start="71:16" pos:end="71:36"><name pos:start="71:16" pos:end="71:28">rds_caps_size</name><index pos:start="71:29" pos:end="71:36">[<expr pos:start="71:30" pos:end="71:35"><name pos:start="71:30" pos:end="71:35">format</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:32"><expr pos:start="73:9" pos:end="73:31"><call pos:start="73:9" pos:end="73:31"><name pos:start="73:9" pos:end="73:14">memset</name><argument_list pos:start="73:15" pos:end="73:31">(<argument pos:start="73:16" pos:end="73:21"><expr pos:start="73:16" pos:end="73:21"><name pos:start="73:16" pos:end="73:21">outbuf</name></expr></argument>, <argument pos:start="73:24" pos:end="73:24"><expr pos:start="73:24" pos:end="73:24"><literal type="number" pos:start="73:24" pos:end="73:24">0</literal></expr></argument>, <argument pos:start="73:27" pos:end="73:30"><expr pos:start="73:27" pos:end="73:30"><name pos:start="73:27" pos:end="73:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="79:5" pos:end="169:5">switch <condition pos:start="79:12" pos:end="79:19">(<expr pos:start="79:13" pos:end="79:18"><name pos:start="79:13" pos:end="79:18">format</name></expr>)</condition> <block pos:start="79:21" pos:end="169:5">{<block_content pos:start="81:5" pos:end="167:18">

    <case pos:start="81:5" pos:end="81:14">case <expr pos:start="81:10" pos:end="81:13"><literal type="number" pos:start="81:10" pos:end="81:13">0x00</literal></expr>:</case> <block pos:start="81:16" pos:end="113:5">{<block_content pos:start="85:9" pos:end="111:14">

        <comment type="block" pos:start="83:9" pos:end="83:41">/* Physical format information */</comment>

        <decl_stmt pos:start="85:9" pos:end="85:28"><decl pos:start="85:9" pos:end="85:27"><type pos:start="85:9" pos:end="85:16"><name pos:start="85:9" pos:end="85:16">uint64_t</name></type> <name pos:start="85:18" pos:end="85:27">nb_sectors</name></decl>;</decl_stmt>

        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:23">(<expr pos:start="87:13" pos:end="87:22"><name pos:start="87:13" pos:end="87:17">layer</name> <operator pos:start="87:19" pos:end="87:20">!=</operator> <literal type="number" pos:start="87:22" pos:end="87:22">0</literal></expr>)</condition> <block pos:start="87:25" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:22">

            <goto pos:start="89:13" pos:end="89:22">goto <name pos:start="89:18" pos:end="89:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:56"><expr pos:start="93:9" pos:end="93:55"><call pos:start="93:9" pos:end="93:55"><name pos:start="93:9" pos:end="93:25">bdrv_get_geometry</name><argument_list pos:start="93:26" pos:end="93:55">(<argument pos:start="93:27" pos:end="93:41"><expr pos:start="93:27" pos:end="93:41"><name pos:start="93:27" pos:end="93:41"><name pos:start="93:27" pos:end="93:27">s</name><operator pos:start="93:28" pos:end="93:29">-&gt;</operator><name pos:start="93:30" pos:end="93:33">qdev</name><operator pos:start="93:34" pos:end="93:34">.</operator><name pos:start="93:35" pos:end="93:38">conf</name><operator pos:start="93:39" pos:end="93:39">.</operator><name pos:start="93:40" pos:end="93:41">bs</name></name></expr></argument>, <argument pos:start="93:44" pos:end="93:54"><expr pos:start="93:44" pos:end="93:54"><operator pos:start="93:44" pos:end="93:44">&amp;</operator><name pos:start="93:45" pos:end="93:54">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:22"><expr pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:17"><name pos:start="97:9" pos:end="97:14">outbuf</name><index pos:start="97:15" pos:end="97:17">[<expr pos:start="97:16" pos:end="97:16"><literal type="number" pos:start="97:16" pos:end="97:16">4</literal></expr>]</index></name> <operator pos:start="97:19" pos:end="97:19">=</operator> <literal type="number" pos:start="97:21" pos:end="97:21">1</literal></expr>;</expr_stmt>   <comment type="block" pos:start="97:26" pos:end="97:54">/* DVD-ROM, part version 1 */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:24"><expr pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:17"><name pos:start="99:9" pos:end="99:14">outbuf</name><index pos:start="99:15" pos:end="99:17">[<expr pos:start="99:16" pos:end="99:16"><literal type="number" pos:start="99:16" pos:end="99:16">5</literal></expr>]</index></name> <operator pos:start="99:19" pos:end="99:19">=</operator> <literal type="number" pos:start="99:21" pos:end="99:23">0xf</literal></expr>;</expr_stmt> <comment type="block" pos:start="99:26" pos:end="99:67">/* 120mm disc, minimum rate unspecified */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:22"><expr pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:17"><name pos:start="101:9" pos:end="101:14">outbuf</name><index pos:start="101:15" pos:end="101:17">[<expr pos:start="101:16" pos:end="101:16"><literal type="number" pos:start="101:16" pos:end="101:16">6</literal></expr>]</index></name> <operator pos:start="101:19" pos:end="101:19">=</operator> <literal type="number" pos:start="101:21" pos:end="101:21">1</literal></expr>;</expr_stmt>   <comment type="block" pos:start="101:26" pos:end="101:68">/* one layer, read-only (per MMC-2 spec) */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:22"><expr pos:start="103:9" pos:end="103:21"><name pos:start="103:9" pos:end="103:17"><name pos:start="103:9" pos:end="103:14">outbuf</name><index pos:start="103:15" pos:end="103:17">[<expr pos:start="103:16" pos:end="103:16"><literal type="number" pos:start="103:16" pos:end="103:16">7</literal></expr>]</index></name> <operator pos:start="103:19" pos:end="103:19">=</operator> <literal type="number" pos:start="103:21" pos:end="103:21">0</literal></expr>;</expr_stmt>   <comment type="block" pos:start="103:26" pos:end="103:48">/* default densities */</comment>



        <expr_stmt pos:start="107:9" pos:end="107:53"><expr pos:start="107:9" pos:end="107:52"><call pos:start="107:9" pos:end="107:52"><name pos:start="107:9" pos:end="107:16">stl_be_p</name><argument_list pos:start="107:17" pos:end="107:52">(<argument pos:start="107:18" pos:end="107:28"><expr pos:start="107:18" pos:end="107:28"><operator pos:start="107:18" pos:end="107:18">&amp;</operator><name pos:start="107:19" pos:end="107:28"><name pos:start="107:19" pos:end="107:24">outbuf</name><index pos:start="107:25" pos:end="107:28">[<expr pos:start="107:26" pos:end="107:27"><literal type="number" pos:start="107:26" pos:end="107:27">12</literal></expr>]</index></name></expr></argument>, <argument pos:start="107:31" pos:end="107:51"><expr pos:start="107:31" pos:end="107:51"><operator pos:start="107:31" pos:end="107:31">(</operator><name pos:start="107:32" pos:end="107:41">nb_sectors</name> <operator pos:start="107:43" pos:end="107:44">&gt;&gt;</operator> <literal type="number" pos:start="107:46" pos:end="107:46">2</literal><operator pos:start="107:47" pos:end="107:47">)</operator> <operator pos:start="107:49" pos:end="107:49">-</operator> <literal type="number" pos:start="107:51" pos:end="107:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="107:55" pos:end="107:70">/* end sector */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:53"><expr pos:start="109:9" pos:end="109:52"><call pos:start="109:9" pos:end="109:52"><name pos:start="109:9" pos:end="109:16">stl_be_p</name><argument_list pos:start="109:17" pos:end="109:52">(<argument pos:start="109:18" pos:end="109:28"><expr pos:start="109:18" pos:end="109:28"><operator pos:start="109:18" pos:end="109:18">&amp;</operator><name pos:start="109:19" pos:end="109:28"><name pos:start="109:19" pos:end="109:24">outbuf</name><index pos:start="109:25" pos:end="109:28">[<expr pos:start="109:26" pos:end="109:27"><literal type="number" pos:start="109:26" pos:end="109:27">16</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:31" pos:end="109:51"><expr pos:start="109:31" pos:end="109:51"><operator pos:start="109:31" pos:end="109:31">(</operator><name pos:start="109:32" pos:end="109:41">nb_sectors</name> <operator pos:start="109:43" pos:end="109:44">&gt;&gt;</operator> <literal type="number" pos:start="109:46" pos:end="109:46">2</literal><operator pos:start="109:47" pos:end="109:47">)</operator> <operator pos:start="109:49" pos:end="109:49">-</operator> <literal type="number" pos:start="109:51" pos:end="109:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="109:55" pos:end="109:73">/* l0 end sector */</comment>

        <break pos:start="111:9" pos:end="111:14">break;</break>

    </block_content>}</block>



    <case pos:start="117:5" pos:end="117:14">case <expr pos:start="117:10" pos:end="117:13"><literal type="number" pos:start="117:10" pos:end="117:13">0x01</literal></expr>:</case> <comment type="block" pos:start="117:16" pos:end="117:57">/* DVD copyright information, all zeros */</comment>

        <break pos:start="119:9" pos:end="119:14">break;</break>



    <case pos:start="123:5" pos:end="123:14">case <expr pos:start="123:10" pos:end="123:13"><literal type="number" pos:start="123:10" pos:end="123:13">0x03</literal></expr>:</case> <comment type="block" pos:start="123:16" pos:end="123:68">/* BCA information - invalid field for no BCA info */</comment>

        <return pos:start="125:9" pos:end="125:18">return <expr pos:start="125:16" pos:end="125:17"><operator pos:start="125:16" pos:end="125:16">-</operator><literal type="number" pos:start="125:17" pos:end="125:17">1</literal></expr>;</return>



    <case pos:start="129:5" pos:end="129:14">case <expr pos:start="129:10" pos:end="129:13"><literal type="number" pos:start="129:10" pos:end="129:13">0x04</literal></expr>:</case> <comment type="block" pos:start="129:16" pos:end="129:66">/* DVD disc manufacturing information, all zeros */</comment>

        <break pos:start="131:9" pos:end="131:14">break;</break>



    <case pos:start="135:5" pos:end="135:14">case <expr pos:start="135:10" pos:end="135:13"><literal type="number" pos:start="135:10" pos:end="135:13">0xff</literal></expr>:</case> <block pos:start="135:16" pos:end="161:6">{<block_content pos:start="137:9" pos:end="159:14"> <comment type="block" pos:start="135:18" pos:end="135:40">/* List capabilities */</comment>

        <decl_stmt pos:start="137:9" pos:end="137:14"><decl pos:start="137:9" pos:end="137:13"><type pos:start="137:9" pos:end="137:11"><name pos:start="137:9" pos:end="137:11">int</name></type> <name pos:start="137:13" pos:end="137:13">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:17"><expr pos:start="139:9" pos:end="139:16"><name pos:start="139:9" pos:end="139:12">size</name> <operator pos:start="139:14" pos:end="139:14">=</operator> <literal type="number" pos:start="139:16" pos:end="139:16">4</literal></expr>;</expr_stmt>

        <for pos:start="141:9" pos:end="157:9">for <control pos:start="141:13" pos:end="141:55">(<init pos:start="141:14" pos:end="141:19"><expr pos:start="141:14" pos:end="141:18"><name pos:start="141:14" pos:end="141:14">i</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <literal type="number" pos:start="141:18" pos:end="141:18">0</literal></expr>;</init> <condition pos:start="141:21" pos:end="141:50"><expr pos:start="141:21" pos:end="141:49"><name pos:start="141:21" pos:end="141:21">i</name> <operator pos:start="141:23" pos:end="141:23">&lt;</operator> <call pos:start="141:25" pos:end="141:49"><name pos:start="141:25" pos:end="141:34">ARRAY_SIZE</name><argument_list pos:start="141:35" pos:end="141:49">(<argument pos:start="141:36" pos:end="141:48"><expr pos:start="141:36" pos:end="141:48"><name pos:start="141:36" pos:end="141:48">rds_caps_size</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="141:52" pos:end="141:54"><expr pos:start="141:52" pos:end="141:54"><name pos:start="141:52" pos:end="141:52">i</name><operator pos:start="141:53" pos:end="141:54">++</operator></expr></incr>)</control> <block pos:start="141:57" pos:end="157:9">{<block_content pos:start="143:13" pos:end="155:22">

            <if_stmt pos:start="143:13" pos:end="147:13"><if pos:start="143:13" pos:end="147:13">if <condition pos:start="143:16" pos:end="143:34">(<expr pos:start="143:17" pos:end="143:33"><operator pos:start="143:17" pos:end="143:17">!</operator><name pos:start="143:18" pos:end="143:33"><name pos:start="143:18" pos:end="143:30">rds_caps_size</name><index pos:start="143:31" pos:end="143:33">[<expr pos:start="143:32" pos:end="143:32"><name pos:start="143:32" pos:end="143:32">i</name></expr>]</index></name></expr>)</condition> <block pos:start="143:36" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:25">

                <continue pos:start="145:17" pos:end="145:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:29"><expr pos:start="149:13" pos:end="149:28"><name pos:start="149:13" pos:end="149:24"><name pos:start="149:13" pos:end="149:18">outbuf</name><index pos:start="149:19" pos:end="149:24">[<expr pos:start="149:20" pos:end="149:23"><name pos:start="149:20" pos:end="149:23">size</name></expr>]</index></name> <operator pos:start="149:26" pos:end="149:26">=</operator> <name pos:start="149:28" pos:end="149:28">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:36"><expr pos:start="151:13" pos:end="151:35"><name pos:start="151:13" pos:end="151:28"><name pos:start="151:13" pos:end="151:18">outbuf</name><index pos:start="151:19" pos:end="151:28">[<expr pos:start="151:20" pos:end="151:27"><name pos:start="151:20" pos:end="151:23">size</name> <operator pos:start="151:25" pos:end="151:25">+</operator> <literal type="number" pos:start="151:27" pos:end="151:27">1</literal></expr>]</index></name> <operator pos:start="151:30" pos:end="151:30">=</operator> <literal type="number" pos:start="151:32" pos:end="151:35">0x40</literal></expr>;</expr_stmt> <comment type="block" pos:start="151:38" pos:end="151:65">/* Not writable, readable */</comment>

            <expr_stmt pos:start="153:13" pos:end="153:58"><expr pos:start="153:13" pos:end="153:57"><call pos:start="153:13" pos:end="153:57"><name pos:start="153:13" pos:end="153:20">stw_be_p</name><argument_list pos:start="153:21" pos:end="153:57">(<argument pos:start="153:22" pos:end="153:38"><expr pos:start="153:22" pos:end="153:38"><operator pos:start="153:22" pos:end="153:22">&amp;</operator><name pos:start="153:23" pos:end="153:38"><name pos:start="153:23" pos:end="153:28">outbuf</name><index pos:start="153:29" pos:end="153:38">[<expr pos:start="153:30" pos:end="153:37"><name pos:start="153:30" pos:end="153:33">size</name> <operator pos:start="153:35" pos:end="153:35">+</operator> <literal type="number" pos:start="153:37" pos:end="153:37">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="153:41" pos:end="153:56"><expr pos:start="153:41" pos:end="153:56"><name pos:start="153:41" pos:end="153:56"><name pos:start="153:41" pos:end="153:53">rds_caps_size</name><index pos:start="153:54" pos:end="153:56">[<expr pos:start="153:55" pos:end="153:55"><name pos:start="153:55" pos:end="153:55">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:22"><expr pos:start="155:13" pos:end="155:21"><name pos:start="155:13" pos:end="155:16">size</name> <operator pos:start="155:18" pos:end="155:19">+=</operator> <literal type="number" pos:start="155:21" pos:end="155:21">4</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="159:9" pos:end="159:14">break;</break>

     </block_content>}</block>



    <default pos:start="165:5" pos:end="165:12">default:</default>

        <return pos:start="167:9" pos:end="167:18">return <expr pos:start="167:16" pos:end="167:17"><operator pos:start="167:16" pos:end="167:16">-</operator><literal type="number" pos:start="167:17" pos:end="167:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <comment type="block" pos:start="173:5" pos:end="173:57">/* Size of buffer, not including 2 byte size field */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:31"><expr pos:start="175:5" pos:end="175:30"><call pos:start="175:5" pos:end="175:30"><name pos:start="175:5" pos:end="175:12">stw_be_p</name><argument_list pos:start="175:13" pos:end="175:30">(<argument pos:start="175:14" pos:end="175:19"><expr pos:start="175:14" pos:end="175:19"><name pos:start="175:14" pos:end="175:19">outbuf</name></expr></argument>, <argument pos:start="175:22" pos:end="175:29"><expr pos:start="175:22" pos:end="175:29"><name pos:start="175:22" pos:end="175:25">size</name> <operator pos:start="175:27" pos:end="175:27">-</operator> <literal type="number" pos:start="175:29" pos:end="175:29">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="177:5" pos:end="177:16">return <expr pos:start="177:12" pos:end="177:15"><name pos:start="177:12" pos:end="177:15">size</name></expr>;</return>



<label pos:start="181:1" pos:end="181:5"><name pos:start="181:1" pos:end="181:4">fail</name>:</label>

    <return pos:start="183:5" pos:end="183:14">return <expr pos:start="183:12" pos:end="183:13"><operator pos:start="183:12" pos:end="183:12">-</operator><literal type="number" pos:start="183:13" pos:end="183:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
