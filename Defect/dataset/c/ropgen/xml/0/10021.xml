<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10021.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">connex_init</name><parameter_list pos:start="1:24" pos:end="7:67">(<parameter pos:start="1:25" pos:end="1:43"><decl pos:start="1:25" pos:end="1:43"><type pos:start="1:25" pos:end="1:43"><name pos:start="1:25" pos:end="1:34">ram_addr_t</name></type> <name pos:start="1:36" pos:end="1:43">ram_size</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:61"><decl pos:start="1:46" pos:end="1:61"><type pos:start="1:46" pos:end="1:61"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:61">vga_ram_size</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:39"><decl pos:start="3:17" pos:end="3:39"><type pos:start="3:17" pos:end="3:39"><specifier pos:start="3:17" pos:end="3:21">const</specifier> <name pos:start="3:23" pos:end="3:26">char</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:39">boot_device</name></decl></parameter>,

                <parameter pos:start="5:17" pos:end="5:43"><decl pos:start="5:17" pos:end="5:43"><type pos:start="5:17" pos:end="5:43"><specifier pos:start="5:17" pos:end="5:21">const</specifier> <name pos:start="5:23" pos:end="5:26">char</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:43">kernel_filename</name></decl></parameter>, <parameter pos:start="5:46" pos:end="5:71"><decl pos:start="5:46" pos:end="5:71"><type pos:start="5:46" pos:end="5:71"><specifier pos:start="5:46" pos:end="5:50">const</specifier> <name pos:start="5:52" pos:end="5:55">char</name> <modifier pos:start="5:57" pos:end="5:57">*</modifier></type><name pos:start="5:58" pos:end="5:71">kernel_cmdline</name></decl></parameter>,

                <parameter pos:start="7:17" pos:end="7:43"><decl pos:start="7:17" pos:end="7:43"><type pos:start="7:17" pos:end="7:43"><specifier pos:start="7:17" pos:end="7:21">const</specifier> <name pos:start="7:23" pos:end="7:26">char</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:43">initrd_filename</name></decl></parameter>, <parameter pos:start="7:46" pos:end="7:66"><decl pos:start="7:46" pos:end="7:66"><type pos:start="7:46" pos:end="7:66"><specifier pos:start="7:46" pos:end="7:50">const</specifier> <name pos:start="7:52" pos:end="7:55">char</name> <modifier pos:start="7:57" pos:end="7:57">*</modifier></type><name pos:start="7:58" pos:end="7:66">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="77:1">{<block_content pos:start="11:5" pos:end="75:55">

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:25">pxa2xx_state_s</name></name> <modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:30">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">index</name></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:23">connex_rom</name> <init pos:start="17:25" pos:end="17:36">= <expr pos:start="17:27" pos:end="17:36"><literal type="number" pos:start="17:27" pos:end="17:36">0x01000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:23">connex_ram</name> <init pos:start="19:25" pos:end="19:36">= <expr pos:start="19:27" pos:end="19:36"><literal type="number" pos:start="19:27" pos:end="19:36">0x04000000</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:68">(<expr pos:start="23:9" pos:end="23:67"><name pos:start="23:9" pos:end="23:16">ram_size</name> <operator pos:start="23:18" pos:end="23:18">&lt;</operator> <operator pos:start="23:20" pos:end="23:20">(</operator><name pos:start="23:21" pos:end="23:30">connex_ram</name> <operator pos:start="23:32" pos:end="23:32">+</operator> <name pos:start="23:34" pos:end="23:43">connex_rom</name> <operator pos:start="23:45" pos:end="23:45">+</operator> <name pos:start="23:47" pos:end="23:66">PXA2XX_INTERNAL_SIZE</name><operator pos:start="23:67" pos:end="23:67">)</operator></expr>)</condition> <block pos:start="23:70" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:16">

        <expr_stmt pos:start="25:9" pos:end="27:64"><expr pos:start="25:9" pos:end="27:63"><call pos:start="25:9" pos:end="27:63"><name pos:start="25:9" pos:end="25:15">fprintf</name><argument_list pos:start="25:16" pos:end="27:63">(<argument pos:start="25:17" pos:end="25:22"><expr pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:22">stderr</name></expr></argument>, <argument pos:start="25:25" pos:end="25:69"><expr pos:start="25:25" pos:end="25:69"><literal type="string" pos:start="25:25" pos:end="25:69">"This platform requires %i bytes of memory\n"</literal></expr></argument>,

                <argument pos:start="27:17" pos:end="27:62"><expr pos:start="27:17" pos:end="27:62"><name pos:start="27:17" pos:end="27:26">connex_ram</name> <operator pos:start="27:28" pos:end="27:28">+</operator> <name pos:start="27:30" pos:end="27:39">connex_rom</name> <operator pos:start="27:41" pos:end="27:41">+</operator> <name pos:start="27:43" pos:end="27:62">PXA2XX_INTERNAL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:16"><expr pos:start="29:9" pos:end="29:15"><call pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:12">exit</name><argument_list pos:start="29:13" pos:end="29:15">(<argument pos:start="29:14" pos:end="29:14"><expr pos:start="29:14" pos:end="29:14"><literal type="number" pos:start="29:14" pos:end="29:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:7">cpu</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:33"><name pos:start="35:11" pos:end="35:21">pxa255_init</name><argument_list pos:start="35:22" pos:end="35:33">(<argument pos:start="35:23" pos:end="35:32"><expr pos:start="35:23" pos:end="35:32"><name pos:start="35:23" pos:end="35:32">connex_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:45"><expr pos:start="39:5" pos:end="39:44"><name pos:start="39:5" pos:end="39:9">index</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <call pos:start="39:13" pos:end="39:44"><name pos:start="39:13" pos:end="39:27">drive_get_index</name><argument_list pos:start="39:28" pos:end="39:44">(<argument pos:start="39:29" pos:end="39:37"><expr pos:start="39:29" pos:end="39:37"><name pos:start="39:29" pos:end="39:37">IF_PFLASH</name></expr></argument>, <argument pos:start="39:40" pos:end="39:40"><expr pos:start="39:40" pos:end="39:40"><literal type="number" pos:start="39:40" pos:end="39:40">0</literal></expr></argument>, <argument pos:start="39:43" pos:end="39:43"><expr pos:start="39:43" pos:end="39:43"><literal type="number" pos:start="39:43" pos:end="39:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:20">(<expr pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:13">index</name> <operator pos:start="41:15" pos:end="41:16">==</operator> <operator pos:start="41:18" pos:end="41:18">-</operator><literal type="number" pos:start="41:19" pos:end="41:19">1</literal></expr>)</condition> <block pos:start="41:22" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:16">

        <expr_stmt pos:start="43:9" pos:end="45:40"><expr pos:start="43:9" pos:end="45:39"><call pos:start="43:9" pos:end="45:39"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="45:39">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="45:38"><expr pos:start="43:25" pos:end="45:38"><literal type="string" pos:start="43:25" pos:end="43:63">"A flash image must be given with the "</literal>

                <literal type="string" pos:start="45:17" pos:end="45:38">"'pflash' parameter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:16"><expr pos:start="47:9" pos:end="47:15"><call pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:12">exit</name><argument_list pos:start="47:13" pos:end="47:15">(<argument pos:start="47:14" pos:end="47:14"><expr pos:start="47:14" pos:end="47:14"><literal type="number" pos:start="47:14" pos:end="47:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="63:5">if <condition pos:start="53:8" pos:end="57:27">(<expr pos:start="53:9" pos:end="57:26"><operator pos:start="53:9" pos:end="53:9">!</operator><call pos:start="53:10" pos:end="57:26"><name pos:start="53:10" pos:end="53:30">pflash_cfi01_register</name><argument_list pos:start="53:31" pos:end="57:26">(<argument pos:start="53:32" pos:end="53:41"><expr pos:start="53:32" pos:end="53:41"><literal type="number" pos:start="53:32" pos:end="53:41">0x00000000</literal></expr></argument>, <argument pos:start="53:44" pos:end="53:69"><expr pos:start="53:44" pos:end="53:69"><call pos:start="53:44" pos:end="53:69"><name pos:start="53:44" pos:end="53:57">qemu_ram_alloc</name><argument_list pos:start="53:58" pos:end="53:69">(<argument pos:start="53:59" pos:end="53:68"><expr pos:start="53:59" pos:end="53:68"><name pos:start="53:59" pos:end="53:68">connex_rom</name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="55:13" pos:end="55:36"><expr pos:start="55:13" pos:end="55:36"><name pos:start="55:13" pos:end="55:31"><name pos:start="55:13" pos:end="55:24">drives_table</name><index pos:start="55:25" pos:end="55:31">[<expr pos:start="55:26" pos:end="55:30"><name pos:start="55:26" pos:end="55:30">index</name></expr>]</index></name><operator pos:start="55:32" pos:end="55:32">.</operator><name pos:start="55:33" pos:end="55:36">bdrv</name></expr></argument>, <argument pos:start="55:39" pos:end="55:48"><expr pos:start="55:39" pos:end="55:48"><name pos:start="55:39" pos:end="55:48">sector_len</name></expr></argument>, <argument pos:start="55:51" pos:end="55:73"><expr pos:start="55:51" pos:end="55:73"><name pos:start="55:51" pos:end="55:60">connex_rom</name> <operator pos:start="55:62" pos:end="55:62">/</operator> <name pos:start="55:64" pos:end="55:73">sector_len</name></expr></argument>,

            <argument pos:start="57:13" pos:end="57:13"><expr pos:start="57:13" pos:end="57:13"><literal type="number" pos:start="57:13" pos:end="57:13">2</literal></expr></argument>, <argument pos:start="57:16" pos:end="57:16"><expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr></argument>, <argument pos:start="57:19" pos:end="57:19"><expr pos:start="57:19" pos:end="57:19"><literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr></argument>, <argument pos:start="57:22" pos:end="57:22"><expr pos:start="57:22" pos:end="57:22"><literal type="number" pos:start="57:22" pos:end="57:22">0</literal></expr></argument>, <argument pos:start="57:25" pos:end="57:25"><expr pos:start="57:25" pos:end="57:25"><literal type="number" pos:start="57:25" pos:end="57:25">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:29" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:16">

        <expr_stmt pos:start="59:9" pos:end="59:67"><expr pos:start="59:9" pos:end="59:66"><call pos:start="59:9" pos:end="59:66"><name pos:start="59:9" pos:end="59:15">fprintf</name><argument_list pos:start="59:16" pos:end="59:66">(<argument pos:start="59:17" pos:end="59:22"><expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">stderr</name></expr></argument>, <argument pos:start="59:25" pos:end="59:65"><expr pos:start="59:25" pos:end="59:65"><literal type="string" pos:start="59:25" pos:end="59:65">"qemu: Error registering flash memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:16"><expr pos:start="61:9" pos:end="61:15"><call pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:12">exit</name><argument_list pos:start="61:13" pos:end="61:15">(<argument pos:start="61:14" pos:end="61:14"><expr pos:start="61:14" pos:end="61:14"><literal type="number" pos:start="61:14" pos:end="61:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:36"><expr pos:start="67:5" pos:end="67:35"><name pos:start="67:5" pos:end="67:22"><name pos:start="67:5" pos:end="67:7">cpu</name><operator pos:start="67:8" pos:end="67:9">-&gt;</operator><name pos:start="67:10" pos:end="67:12">env</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:18">regs</name><index pos:start="67:19" pos:end="67:22">[<expr pos:start="67:20" pos:end="67:21"><literal type="number" pos:start="67:20" pos:end="67:21">15</literal></expr>]</index></name> <operator pos:start="67:24" pos:end="67:24">=</operator> <literal type="number" pos:start="67:26" pos:end="67:35">0x00000000</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:60">/* Interrupt line of NIC is connected to GPIO line 36 */</comment>

    <expr_stmt pos:start="73:5" pos:end="75:55"><expr pos:start="73:5" pos:end="75:54"><call pos:start="73:5" pos:end="75:54"><name pos:start="73:5" pos:end="73:18">smc91c111_init</name><argument_list pos:start="73:19" pos:end="75:54">(<argument pos:start="73:20" pos:end="73:31"><expr pos:start="73:20" pos:end="73:31"><operator pos:start="73:20" pos:end="73:20">&amp;</operator><name pos:start="73:21" pos:end="73:31"><name pos:start="73:21" pos:end="73:28">nd_table</name><index pos:start="73:29" pos:end="73:31">[<expr pos:start="73:30" pos:end="73:30"><literal type="number" pos:start="73:30" pos:end="73:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="73:34" pos:end="73:43"><expr pos:start="73:34" pos:end="73:43"><literal type="number" pos:start="73:34" pos:end="73:43">0x04000300</literal></expr></argument>,

                    <argument pos:start="75:21" pos:end="75:53"><expr pos:start="75:21" pos:end="75:53"><call pos:start="75:21" pos:end="75:49"><name pos:start="75:21" pos:end="75:38">pxa2xx_gpio_in_get</name><argument_list pos:start="75:39" pos:end="75:49">(<argument pos:start="75:40" pos:end="75:48"><expr pos:start="75:40" pos:end="75:48"><name pos:start="75:40" pos:end="75:48"><name pos:start="75:40" pos:end="75:42">cpu</name><operator pos:start="75:43" pos:end="75:44">-&gt;</operator><name pos:start="75:45" pos:end="75:48">gpio</name></name></expr></argument>)</argument_list></call><index pos:start="75:50" pos:end="75:53">[<expr pos:start="75:51" pos:end="75:52"><literal type="number" pos:start="75:51" pos:end="75:52">36</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
