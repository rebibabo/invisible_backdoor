<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7578.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:13">load_seg</name><parameter_list pos:start="1:14" pos:end="1:62">(<parameter pos:start="1:15" pos:end="1:25"><decl pos:start="1:15" pos:end="1:25"><type pos:start="1:15" pos:end="1:25"><name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:25">seg_reg</name></decl></parameter>, <parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:30">int</name></type> <name pos:start="1:32" pos:end="1:39">selector</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:61"><decl pos:start="1:42" pos:end="1:61"><type pos:start="1:42" pos:end="1:61"><name pos:start="1:42" pos:end="1:49">unsigned</name> <name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:61">cur_eip</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="175:1">{<block_content pos:start="5:5" pos:end="173:5">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:15">e1</name></decl>, <decl pos:start="5:18" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:18" pos:end="5:19">e2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">cpl</name></decl>, <decl pos:start="7:14" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:16">dpl</name></decl>, <decl pos:start="7:19" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:21">rpl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">SegmentCache</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:20">dt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">ptr</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="173:5"><if pos:start="17:5" pos:end="33:5">if <condition pos:start="17:8" pos:end="17:33">(<expr pos:start="17:9" pos:end="17:32"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:17">selector</name> <operator pos:start="17:19" pos:end="17:19">&amp;</operator> <literal type="number" pos:start="17:21" pos:end="17:26">0xfffc</literal><operator pos:start="17:27" pos:end="17:27">)</operator> <operator pos:start="17:29" pos:end="17:30">==</operator> <literal type="number" pos:start="17:32" pos:end="17:32">0</literal></expr>)</condition> <block pos:start="17:35" pos:end="33:5">{<block_content pos:start="21:9" pos:end="31:9">

        <comment type="block" pos:start="19:9" pos:end="19:32">/* null selector case */</comment>

        <if_stmt pos:start="21:9" pos:end="31:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:28">(<expr pos:start="21:13" pos:end="21:27"><name pos:start="21:13" pos:end="21:19">seg_reg</name> <operator pos:start="21:21" pos:end="21:22">==</operator> <name pos:start="21:24" pos:end="21:27">R_SS</name></expr>)</condition> <block pos:start="21:30" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:47">

            <expr_stmt pos:start="23:13" pos:end="23:26"><expr pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:15">EIP</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <name pos:start="23:19" pos:end="23:25">cur_eip</name></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:47"><expr pos:start="25:13" pos:end="25:46"><call pos:start="25:13" pos:end="25:46"><name pos:start="25:13" pos:end="25:31">raise_exception_err</name><argument_list pos:start="25:32" pos:end="25:46">(<argument pos:start="25:33" pos:end="25:42"><expr pos:start="25:33" pos:end="25:42"><name pos:start="25:33" pos:end="25:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="25:45" pos:end="25:45"><expr pos:start="25:45" pos:end="25:45"><literal type="number" pos:start="25:45" pos:end="25:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="27:11" pos:end="31:9">else <block pos:start="27:16" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:71">

            <expr_stmt pos:start="29:13" pos:end="29:71"><expr pos:start="29:13" pos:end="29:70"><call pos:start="29:13" pos:end="29:70"><name pos:start="29:13" pos:end="29:34">cpu_x86_load_seg_cache</name><argument_list pos:start="29:35" pos:end="29:70">(<argument pos:start="29:36" pos:end="29:38"><expr pos:start="29:36" pos:end="29:38"><name pos:start="29:36" pos:end="29:38">env</name></expr></argument>, <argument pos:start="29:41" pos:end="29:47"><expr pos:start="29:41" pos:end="29:47"><name pos:start="29:41" pos:end="29:47">seg_reg</name></expr></argument>, <argument pos:start="29:50" pos:end="29:57"><expr pos:start="29:50" pos:end="29:57"><name pos:start="29:50" pos:end="29:57">selector</name></expr></argument>, <argument pos:start="29:60" pos:end="29:63"><expr pos:start="29:60" pos:end="29:63"><name pos:start="29:60" pos:end="29:63">NULL</name></expr></argument>, <argument pos:start="29:66" pos:end="29:66"><expr pos:start="29:66" pos:end="29:66"><literal type="number" pos:start="29:66" pos:end="29:66">0</literal></expr></argument>, <argument pos:start="29:69" pos:end="29:69"><expr pos:start="29:69" pos:end="29:69"><literal type="number" pos:start="29:69" pos:end="29:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="173:5">else <block pos:start="33:12" pos:end="173:5">{<block_content pos:start="37:9" pos:end="172:0">

        

        <if_stmt pos:start="37:9" pos:end="43:27"><if pos:start="37:9" pos:end="39:27">if <condition pos:start="37:12" pos:end="37:27">(<expr pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:20">selector</name> <operator pos:start="37:22" pos:end="37:22">&amp;</operator> <literal type="number" pos:start="37:24" pos:end="37:26">0x4</literal></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:27"><block_content pos:start="39:13" pos:end="39:27">

            <expr_stmt pos:start="39:13" pos:end="39:27"><expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:14">dt</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <operator pos:start="39:18" pos:end="39:18">&amp;</operator><name pos:start="39:19" pos:end="39:26"><name pos:start="39:19" pos:end="39:21">env</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:26">ldt</name></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="41:9" pos:end="43:27">else<block type="pseudo" pos:start="43:13" pos:end="43:27"><block_content pos:start="43:13" pos:end="43:27">

            <expr_stmt pos:start="43:13" pos:end="43:27"><expr pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:14">dt</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:26"><name pos:start="43:19" pos:end="43:21">env</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:26">gdt</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:30"><expr pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:13">index</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <name pos:start="45:17" pos:end="45:24">selector</name> <operator pos:start="45:26" pos:end="45:26">&amp;</operator> <operator pos:start="45:28" pos:end="45:28">~</operator><literal type="number" pos:start="45:29" pos:end="45:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:36">(<expr pos:start="47:13" pos:end="47:35"><operator pos:start="47:13" pos:end="47:13">(</operator><name pos:start="47:14" pos:end="47:18">index</name> <operator pos:start="47:20" pos:end="47:20">+</operator> <literal type="number" pos:start="47:22" pos:end="47:22">7</literal><operator pos:start="47:23" pos:end="47:23">)</operator> <operator pos:start="47:25" pos:end="47:25">&gt;</operator> <name pos:start="47:27" pos:end="47:35"><name pos:start="47:27" pos:end="47:28">dt</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:35">limit</name></name></expr>)</condition> <block pos:start="47:38" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:63">

            <expr_stmt pos:start="49:13" pos:end="49:26"><expr pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:15">EIP</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:25">cur_eip</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:63"><expr pos:start="51:13" pos:end="51:62"><call pos:start="51:13" pos:end="51:62"><name pos:start="51:13" pos:end="51:31">raise_exception_err</name><argument_list pos:start="51:32" pos:end="51:62">(<argument pos:start="51:33" pos:end="51:42"><expr pos:start="51:33" pos:end="51:42"><name pos:start="51:33" pos:end="51:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="51:45" pos:end="51:61"><expr pos:start="51:45" pos:end="51:61"><name pos:start="51:45" pos:end="51:52">selector</name> <operator pos:start="51:54" pos:end="51:54">&amp;</operator> <literal type="number" pos:start="51:56" pos:end="51:61">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:11">ptr</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:22"><name pos:start="55:15" pos:end="55:16">dt</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:22">base</name></name> <operator pos:start="55:24" pos:end="55:24">+</operator> <name pos:start="55:26" pos:end="55:30">index</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:29"><expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:10">e1</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <call pos:start="57:14" pos:end="57:28"><name pos:start="57:14" pos:end="57:23">ldl_kernel</name><argument_list pos:start="57:24" pos:end="57:28">(<argument pos:start="57:25" pos:end="57:27"><expr pos:start="57:25" pos:end="57:27"><name pos:start="57:25" pos:end="57:27">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:10">e2</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <call pos:start="59:14" pos:end="59:32"><name pos:start="59:14" pos:end="59:23">ldl_kernel</name><argument_list pos:start="59:24" pos:end="59:32">(<argument pos:start="59:25" pos:end="59:31"><expr pos:start="59:25" pos:end="59:31"><name pos:start="59:25" pos:end="59:27">ptr</name> <operator pos:start="59:29" pos:end="59:29">+</operator> <literal type="number" pos:start="59:31" pos:end="59:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:32">(<expr pos:start="63:13" pos:end="63:31"><operator pos:start="63:13" pos:end="63:13">!</operator><operator pos:start="63:14" pos:end="63:14">(</operator><name pos:start="63:15" pos:end="63:16">e2</name> <operator pos:start="63:18" pos:end="63:18">&amp;</operator> <name pos:start="63:20" pos:end="63:30">DESC_S_MASK</name><operator pos:start="63:31" pos:end="63:31">)</operator></expr>)</condition> <block pos:start="63:34" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:63">

            <expr_stmt pos:start="65:13" pos:end="65:26"><expr pos:start="65:13" pos:end="65:25"><name pos:start="65:13" pos:end="65:15">EIP</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <name pos:start="65:19" pos:end="65:25">cur_eip</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:63"><expr pos:start="67:13" pos:end="67:62"><call pos:start="67:13" pos:end="67:62"><name pos:start="67:13" pos:end="67:31">raise_exception_err</name><argument_list pos:start="67:32" pos:end="67:62">(<argument pos:start="67:33" pos:end="67:42"><expr pos:start="67:33" pos:end="67:42"><name pos:start="67:33" pos:end="67:42">EXCP0D_GPF</name></expr></argument>, <argument pos:start="67:45" pos:end="67:61"><expr pos:start="67:45" pos:end="67:61"><name pos:start="67:45" pos:end="67:52">selector</name> <operator pos:start="67:54" pos:end="67:54">&amp;</operator> <literal type="number" pos:start="67:56" pos:end="67:61">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:27"><expr pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:11">rpl</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <name pos:start="71:15" pos:end="71:22">selector</name> <operator pos:start="71:24" pos:end="71:24">&amp;</operator> <literal type="number" pos:start="71:26" pos:end="71:26">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:41"><expr pos:start="73:9" pos:end="73:40"><name pos:start="73:9" pos:end="73:11">dpl</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <operator pos:start="73:15" pos:end="73:15">(</operator><name pos:start="73:16" pos:end="73:17">e2</name> <operator pos:start="73:19" pos:end="73:20">&gt;&gt;</operator> <name pos:start="73:22" pos:end="73:35">DESC_DPL_SHIFT</name><operator pos:start="73:36" pos:end="73:36">)</operator> <operator pos:start="73:38" pos:end="73:38">&amp;</operator> <literal type="number" pos:start="73:40" pos:end="73:40">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:40"><expr pos:start="75:9" pos:end="75:39"><name pos:start="75:9" pos:end="75:11">cpl</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <name pos:start="75:15" pos:end="75:25"><name pos:start="75:15" pos:end="75:17">env</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:25">hflags</name></name> <operator pos:start="75:27" pos:end="75:27">&amp;</operator> <name pos:start="75:29" pos:end="75:39">HF_CPL_MASK</name></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="125:9"><if pos:start="77:9" pos:end="97:9">if <condition pos:start="77:12" pos:end="77:28">(<expr pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:19">seg_reg</name> <operator pos:start="77:21" pos:end="77:22">==</operator> <name pos:start="77:24" pos:end="77:27">R_SS</name></expr>)</condition> <block pos:start="77:30" pos:end="97:9">{<block_content pos:start="81:13" pos:end="95:13">

            <comment type="block" pos:start="79:13" pos:end="79:42">/* must be writable segment */</comment>

            <if_stmt pos:start="81:13" pos:end="87:13"><if pos:start="81:13" pos:end="87:13">if <condition pos:start="81:16" pos:end="81:59">(<expr pos:start="81:17" pos:end="81:58"><operator pos:start="81:17" pos:end="81:17">(</operator><name pos:start="81:18" pos:end="81:19">e2</name> <operator pos:start="81:21" pos:end="81:21">&amp;</operator> <name pos:start="81:23" pos:end="81:34">DESC_CS_MASK</name><operator pos:start="81:35" pos:end="81:35">)</operator> <operator pos:start="81:37" pos:end="81:38">||</operator> <operator pos:start="81:40" pos:end="81:40">!</operator><operator pos:start="81:41" pos:end="81:41">(</operator><name pos:start="81:42" pos:end="81:43">e2</name> <operator pos:start="81:45" pos:end="81:45">&amp;</operator> <name pos:start="81:47" pos:end="81:57">DESC_W_MASK</name><operator pos:start="81:58" pos:end="81:58">)</operator></expr>)</condition> <block pos:start="81:61" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:67">

                <expr_stmt pos:start="83:17" pos:end="83:30"><expr pos:start="83:17" pos:end="83:29"><name pos:start="83:17" pos:end="83:19">EIP</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <name pos:start="83:23" pos:end="83:29">cur_eip</name></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:67"><expr pos:start="85:17" pos:end="85:66"><call pos:start="85:17" pos:end="85:66"><name pos:start="85:17" pos:end="85:35">raise_exception_err</name><argument_list pos:start="85:36" pos:end="85:66">(<argument pos:start="85:37" pos:end="85:46"><expr pos:start="85:37" pos:end="85:46"><name pos:start="85:37" pos:end="85:46">EXCP0D_GPF</name></expr></argument>, <argument pos:start="85:49" pos:end="85:65"><expr pos:start="85:49" pos:end="85:65"><name pos:start="85:49" pos:end="85:56">selector</name> <operator pos:start="85:58" pos:end="85:58">&amp;</operator> <literal type="number" pos:start="85:60" pos:end="85:65">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="89:13" pos:end="95:13"><if pos:start="89:13" pos:end="95:13">if <condition pos:start="89:16" pos:end="89:41">(<expr pos:start="89:17" pos:end="89:40"><name pos:start="89:17" pos:end="89:19">rpl</name> <operator pos:start="89:21" pos:end="89:22">!=</operator> <name pos:start="89:24" pos:end="89:26">cpl</name> <operator pos:start="89:28" pos:end="89:29">||</operator> <name pos:start="89:31" pos:end="89:33">dpl</name> <operator pos:start="89:35" pos:end="89:36">!=</operator> <name pos:start="89:38" pos:end="89:40">cpl</name></expr>)</condition> <block pos:start="89:43" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:67">

                <expr_stmt pos:start="91:17" pos:end="91:30"><expr pos:start="91:17" pos:end="91:29"><name pos:start="91:17" pos:end="91:19">EIP</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <name pos:start="91:23" pos:end="91:29">cur_eip</name></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:67"><expr pos:start="93:17" pos:end="93:66"><call pos:start="93:17" pos:end="93:66"><name pos:start="93:17" pos:end="93:35">raise_exception_err</name><argument_list pos:start="93:36" pos:end="93:66">(<argument pos:start="93:37" pos:end="93:46"><expr pos:start="93:37" pos:end="93:46"><name pos:start="93:37" pos:end="93:46">EXCP0D_GPF</name></expr></argument>, <argument pos:start="93:49" pos:end="93:65"><expr pos:start="93:49" pos:end="93:65"><name pos:start="93:49" pos:end="93:56">selector</name> <operator pos:start="93:58" pos:end="93:58">&amp;</operator> <literal type="number" pos:start="93:60" pos:end="93:65">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="97:11" pos:end="125:9">else <block pos:start="97:16" pos:end="125:9">{<block_content pos:start="101:13" pos:end="123:13">

            <comment type="block" pos:start="99:13" pos:end="99:42">/* must be readable segment */</comment>

            <if_stmt pos:start="101:13" pos:end="107:13"><if pos:start="101:13" pos:end="107:13">if <condition pos:start="101:16" pos:end="101:68">(<expr pos:start="101:17" pos:end="101:67"><operator pos:start="101:17" pos:end="101:17">(</operator><name pos:start="101:18" pos:end="101:19">e2</name> <operator pos:start="101:21" pos:end="101:21">&amp;</operator> <operator pos:start="101:23" pos:end="101:23">(</operator><name pos:start="101:24" pos:end="101:35">DESC_CS_MASK</name> <operator pos:start="101:37" pos:end="101:37">|</operator> <name pos:start="101:39" pos:end="101:49">DESC_R_MASK</name><operator pos:start="101:50" pos:end="101:50">)</operator><operator pos:start="101:51" pos:end="101:51">)</operator> <operator pos:start="101:53" pos:end="101:54">==</operator> <name pos:start="101:56" pos:end="101:67">DESC_CS_MASK</name></expr>)</condition> <block pos:start="101:70" pos:end="107:13">{<block_content pos:start="103:17" pos:end="105:67">

                <expr_stmt pos:start="103:17" pos:end="103:30"><expr pos:start="103:17" pos:end="103:29"><name pos:start="103:17" pos:end="103:19">EIP</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <name pos:start="103:23" pos:end="103:29">cur_eip</name></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:67"><expr pos:start="105:17" pos:end="105:66"><call pos:start="105:17" pos:end="105:66"><name pos:start="105:17" pos:end="105:35">raise_exception_err</name><argument_list pos:start="105:36" pos:end="105:66">(<argument pos:start="105:37" pos:end="105:46"><expr pos:start="105:37" pos:end="105:46"><name pos:start="105:37" pos:end="105:46">EXCP0D_GPF</name></expr></argument>, <argument pos:start="105:49" pos:end="105:65"><expr pos:start="105:49" pos:end="105:65"><name pos:start="105:49" pos:end="105:56">selector</name> <operator pos:start="105:58" pos:end="105:58">&amp;</operator> <literal type="number" pos:start="105:60" pos:end="105:65">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            

            <if_stmt pos:start="111:13" pos:end="123:13"><if pos:start="111:13" pos:end="123:13">if <condition pos:start="111:16" pos:end="111:60">(<expr pos:start="111:17" pos:end="111:59"><operator pos:start="111:17" pos:end="111:17">!</operator><operator pos:start="111:18" pos:end="111:18">(</operator><name pos:start="111:19" pos:end="111:20">e2</name> <operator pos:start="111:22" pos:end="111:22">&amp;</operator> <name pos:start="111:24" pos:end="111:35">DESC_CS_MASK</name><operator pos:start="111:36" pos:end="111:36">)</operator> <operator pos:start="111:38" pos:end="111:39">||</operator> <operator pos:start="111:41" pos:end="111:41">!</operator><operator pos:start="111:42" pos:end="111:42">(</operator><name pos:start="111:43" pos:end="111:44">e2</name> <operator pos:start="111:46" pos:end="111:46">&amp;</operator> <name pos:start="111:48" pos:end="111:58">DESC_C_MASK</name><operator pos:start="111:59" pos:end="111:59">)</operator></expr>)</condition> <block pos:start="111:62" pos:end="123:13">{<block_content pos:start="115:17" pos:end="121:17">

                <comment type="block" pos:start="113:17" pos:end="113:57">/* if not conforming code, test rights */</comment>

                <if_stmt pos:start="115:17" pos:end="121:17"><if pos:start="115:17" pos:end="121:17">if <condition pos:start="115:20" pos:end="115:43">(<expr pos:start="115:21" pos:end="115:42"><name pos:start="115:21" pos:end="115:23">dpl</name> <operator pos:start="115:25" pos:end="115:25">&lt;</operator> <name pos:start="115:27" pos:end="115:29">cpl</name> <operator pos:start="115:31" pos:end="115:32">||</operator> <name pos:start="115:34" pos:end="115:36">dpl</name> <operator pos:start="115:38" pos:end="115:38">&lt;</operator> <name pos:start="115:40" pos:end="115:42">rpl</name></expr>)</condition> <block pos:start="115:45" pos:end="121:17">{<block_content pos:start="117:21" pos:end="119:71">

                    <expr_stmt pos:start="117:21" pos:end="117:34"><expr pos:start="117:21" pos:end="117:33"><name pos:start="117:21" pos:end="117:23">EIP</name> <operator pos:start="117:25" pos:end="117:25">=</operator> <name pos:start="117:27" pos:end="117:33">cur_eip</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:71"><expr pos:start="119:21" pos:end="119:70"><call pos:start="119:21" pos:end="119:70"><name pos:start="119:21" pos:end="119:39">raise_exception_err</name><argument_list pos:start="119:40" pos:end="119:70">(<argument pos:start="119:41" pos:end="119:50"><expr pos:start="119:41" pos:end="119:50"><name pos:start="119:41" pos:end="119:50">EXCP0D_GPF</name></expr></argument>, <argument pos:start="119:53" pos:end="119:69"><expr pos:start="119:53" pos:end="119:69"><name pos:start="119:53" pos:end="119:60">selector</name> <operator pos:start="119:62" pos:end="119:62">&amp;</operator> <literal type="number" pos:start="119:64" pos:end="119:69">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="129:9" pos:end="141:9"><if pos:start="129:9" pos:end="141:9">if <condition pos:start="129:12" pos:end="129:32">(<expr pos:start="129:13" pos:end="129:31"><operator pos:start="129:13" pos:end="129:13">!</operator><operator pos:start="129:14" pos:end="129:14">(</operator><name pos:start="129:15" pos:end="129:16">e2</name> <operator pos:start="129:18" pos:end="129:18">&amp;</operator> <name pos:start="129:20" pos:end="129:30">DESC_P_MASK</name><operator pos:start="129:31" pos:end="129:31">)</operator></expr>)</condition> <block pos:start="129:34" pos:end="141:9">{<block_content pos:start="131:13" pos:end="139:69">

            <expr_stmt pos:start="131:13" pos:end="131:26"><expr pos:start="131:13" pos:end="131:25"><name pos:start="131:13" pos:end="131:15">EIP</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <name pos:start="131:19" pos:end="131:25">cur_eip</name></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="139:69"><if pos:start="133:13" pos:end="135:69">if <condition pos:start="133:16" pos:end="133:32">(<expr pos:start="133:17" pos:end="133:31"><name pos:start="133:17" pos:end="133:23">seg_reg</name> <operator pos:start="133:25" pos:end="133:26">==</operator> <name pos:start="133:28" pos:end="133:31">R_SS</name></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:69"><block_content pos:start="135:17" pos:end="135:69">

                <expr_stmt pos:start="135:17" pos:end="135:69"><expr pos:start="135:17" pos:end="135:68"><call pos:start="135:17" pos:end="135:68"><name pos:start="135:17" pos:end="135:35">raise_exception_err</name><argument_list pos:start="135:36" pos:end="135:68">(<argument pos:start="135:37" pos:end="135:48"><expr pos:start="135:37" pos:end="135:48"><name pos:start="135:37" pos:end="135:48">EXCP0C_STACK</name></expr></argument>, <argument pos:start="135:51" pos:end="135:67"><expr pos:start="135:51" pos:end="135:67"><name pos:start="135:51" pos:end="135:58">selector</name> <operator pos:start="135:60" pos:end="135:60">&amp;</operator> <literal type="number" pos:start="135:62" pos:end="135:67">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="137:13" pos:end="139:69">else<block type="pseudo" pos:start="139:17" pos:end="139:69"><block_content pos:start="139:17" pos:end="139:69">

                <expr_stmt pos:start="139:17" pos:end="139:69"><expr pos:start="139:17" pos:end="139:68"><call pos:start="139:17" pos:end="139:68"><name pos:start="139:17" pos:end="139:35">raise_exception_err</name><argument_list pos:start="139:36" pos:end="139:68">(<argument pos:start="139:37" pos:end="139:48"><expr pos:start="139:37" pos:end="139:48"><name pos:start="139:37" pos:end="139:48">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="139:51" pos:end="139:67"><expr pos:start="139:51" pos:end="139:67"><name pos:start="139:51" pos:end="139:58">selector</name> <operator pos:start="139:60" pos:end="139:60">&amp;</operator> <literal type="number" pos:start="139:62" pos:end="139:67">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="145:9" pos:end="145:51">/* set the access bit if not already set */</comment>

        <if_stmt pos:start="147:9" pos:end="153:9"><if pos:start="147:9" pos:end="153:9">if <condition pos:start="147:12" pos:end="147:32">(<expr pos:start="147:13" pos:end="147:31"><operator pos:start="147:13" pos:end="147:13">!</operator><operator pos:start="147:14" pos:end="147:14">(</operator><name pos:start="147:15" pos:end="147:16">e2</name> <operator pos:start="147:18" pos:end="147:18">&amp;</operator> <name pos:start="147:20" pos:end="147:30">DESC_A_MASK</name><operator pos:start="147:31" pos:end="147:31">)</operator></expr>)</condition> <block pos:start="147:34" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:36">

            <expr_stmt pos:start="149:13" pos:end="149:30"><expr pos:start="149:13" pos:end="149:29"><name pos:start="149:13" pos:end="149:14">e2</name> <operator pos:start="149:16" pos:end="149:17">|=</operator> <name pos:start="149:19" pos:end="149:29">DESC_A_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:36"><expr pos:start="151:13" pos:end="151:35"><call pos:start="151:13" pos:end="151:35"><name pos:start="151:13" pos:end="151:22">stl_kernel</name><argument_list pos:start="151:23" pos:end="151:35">(<argument pos:start="151:24" pos:end="151:30"><expr pos:start="151:24" pos:end="151:30"><name pos:start="151:24" pos:end="151:26">ptr</name> <operator pos:start="151:28" pos:end="151:28">+</operator> <literal type="number" pos:start="151:30" pos:end="151:30">4</literal></expr></argument>, <argument pos:start="151:33" pos:end="151:34"><expr pos:start="151:33" pos:end="151:34"><name pos:start="151:33" pos:end="151:34">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="157:9" pos:end="172:0"><expr pos:start="157:9" pos:end="163:26"><call pos:start="157:9" pos:end="163:26"><name pos:start="157:9" pos:end="157:30">cpu_x86_load_seg_cache</name><argument_list pos:start="157:31" pos:end="163:26">(<argument pos:start="157:32" pos:end="157:34"><expr pos:start="157:32" pos:end="157:34"><name pos:start="157:32" pos:end="157:34">env</name></expr></argument>, <argument pos:start="157:37" pos:end="157:43"><expr pos:start="157:37" pos:end="157:43"><name pos:start="157:37" pos:end="157:43">seg_reg</name></expr></argument>, <argument pos:start="157:46" pos:end="157:53"><expr pos:start="157:46" pos:end="157:53"><name pos:start="157:46" pos:end="157:53">selector</name></expr></argument>, 

                       <argument pos:start="159:24" pos:end="159:43"><expr pos:start="159:24" pos:end="159:43"><call pos:start="159:24" pos:end="159:43"><name pos:start="159:24" pos:end="159:35">get_seg_base</name><argument_list pos:start="159:36" pos:end="159:43">(<argument pos:start="159:37" pos:end="159:38"><expr pos:start="159:37" pos:end="159:38"><name pos:start="159:37" pos:end="159:38">e1</name></expr></argument>, <argument pos:start="159:41" pos:end="159:42"><expr pos:start="159:41" pos:end="159:42"><name pos:start="159:41" pos:end="159:42">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="161:24" pos:end="161:44"><expr pos:start="161:24" pos:end="161:44"><call pos:start="161:24" pos:end="161:44"><name pos:start="161:24" pos:end="161:36">get_seg_limit</name><argument_list pos:start="161:37" pos:end="161:44">(<argument pos:start="161:38" pos:end="161:39"><expr pos:start="161:38" pos:end="161:39"><name pos:start="161:38" pos:end="161:39">e1</name></expr></argument>, <argument pos:start="161:42" pos:end="161:43"><expr pos:start="161:42" pos:end="161:43"><name pos:start="161:42" pos:end="161:43">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="163:24" pos:end="163:25"><expr pos:start="163:24" pos:end="163:25"><name pos:start="163:24" pos:end="163:25">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="165:1" pos:end="165:5">#<cpp:directive pos:start="165:2" pos:end="165:3">if</cpp:directive> <expr pos:start="165:5" pos:end="165:5"><literal type="number" pos:start="165:5" pos:end="165:5">0</literal></expr></cpp:if>

        fprintf(logfile, "load_seg: sel=0x%04x base=0x%08lx limit=0x%08lx flags=%08x\n", 

                selector, (unsigned long)sc-&gt;base, sc-&gt;limit, sc-&gt;flags);

<cpp:endif pos:start="171:1" pos:end="171:6">#<cpp:directive pos:start="171:2" pos:end="171:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
