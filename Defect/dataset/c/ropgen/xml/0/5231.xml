<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5231.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">ram_save_page</name><parameter_list pos:start="1:25" pos:end="3:70">(<parameter pos:start="1:26" pos:end="1:36"><decl pos:start="1:26" pos:end="1:36"><type pos:start="1:26" pos:end="1:36"><name pos:start="1:26" pos:end="1:33">QEMUFile</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:36">f</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:59"><name pos:start="1:39" pos:end="1:54">PageSearchStatus</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">pss</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:40"><decl pos:start="3:26" pos:end="3:40"><type pos:start="3:26" pos:end="3:40"><name pos:start="3:26" pos:end="3:29">bool</name></type> <name pos:start="3:31" pos:end="3:40">last_stage</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:69"><decl pos:start="3:43" pos:end="3:69"><type pos:start="3:43" pos:end="3:69"><name pos:start="3:43" pos:end="3:50">uint64_t</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:69">bytes_transferred</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="149:1">{<block_content pos:start="7:5" pos:end="147:17">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">pages</name> <init pos:start="7:15" pos:end="7:18">= <expr pos:start="7:17" pos:end="7:18"><operator pos:start="7:17" pos:end="7:17">-</operator><literal type="number" pos:start="7:18" pos:end="7:18">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">bytes_xmit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">ram_addr_t</name></type> <name pos:start="11:16" pos:end="11:27">current_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:14">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:19">send_async</name> <init pos:start="17:21" pos:end="17:26">= <expr pos:start="17:23" pos:end="17:26"><name pos:start="17:23" pos:end="17:26">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">RAMBlock</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:19">block</name> <init pos:start="19:21" pos:end="19:32">= <expr pos:start="19:23" pos:end="19:32"><name pos:start="19:23" pos:end="19:32"><name pos:start="19:23" pos:end="19:25">pss</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:32">block</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:36"><decl pos:start="21:5" pos:end="21:35"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:14">ram_addr_t</name></type> <name pos:start="21:16" pos:end="21:21">offset</name> <init pos:start="21:23" pos:end="21:35">= <expr pos:start="21:25" pos:end="21:35"><name pos:start="21:25" pos:end="21:35"><name pos:start="21:25" pos:end="21:27">pss</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:35">offset</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:29"><expr pos:start="25:5" pos:end="25:28"><name pos:start="25:5" pos:end="25:5">p</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <name pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:13">block</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:19">host</name></name> <operator pos:start="25:21" pos:end="25:21">+</operator> <name pos:start="25:23" pos:end="25:28">offset</name></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:38">/* In doubt sent page as normal */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:19"><expr pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:14">bytes_xmit</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="35:66"><expr pos:start="33:5" pos:end="35:65"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="35:65"><name pos:start="33:11" pos:end="33:31">ram_control_save_page</name><argument_list pos:start="33:32" pos:end="35:65">(<argument pos:start="33:33" pos:end="33:33"><expr pos:start="33:33" pos:end="33:33"><name pos:start="33:33" pos:end="33:33">f</name></expr></argument>, <argument pos:start="33:36" pos:end="33:48"><expr pos:start="33:36" pos:end="33:48"><name pos:start="33:36" pos:end="33:48"><name pos:start="33:36" pos:end="33:40">block</name><operator pos:start="33:41" pos:end="33:42">-&gt;</operator><name pos:start="33:43" pos:end="33:48">offset</name></name></expr></argument>,

                           <argument pos:start="35:28" pos:end="35:33"><expr pos:start="35:28" pos:end="35:33"><name pos:start="35:28" pos:end="35:33">offset</name></expr></argument>, <argument pos:start="35:36" pos:end="35:51"><expr pos:start="35:36" pos:end="35:51"><name pos:start="35:36" pos:end="35:51">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="35:54" pos:end="35:64"><expr pos:start="35:54" pos:end="35:64"><operator pos:start="35:54" pos:end="35:54">&amp;</operator><name pos:start="35:55" pos:end="35:64">bytes_xmit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:18">bytes_xmit</name></expr>)</condition> <block pos:start="37:21" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:41"><expr pos:start="39:9" pos:end="39:40"><operator pos:start="39:9" pos:end="39:9">*</operator><name pos:start="39:10" pos:end="39:26">bytes_transferred</name> <operator pos:start="39:28" pos:end="39:29">+=</operator> <name pos:start="39:31" pos:end="39:40">bytes_xmit</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:18"><expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:13">pages</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:24"><expr pos:start="47:5" pos:end="47:23"><call pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:21">XBZRLE_cache_lock</name><argument_list pos:start="47:22" pos:end="47:23">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:42"><expr pos:start="51:5" pos:end="51:41"><name pos:start="51:5" pos:end="51:16">current_addr</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <name pos:start="51:20" pos:end="51:32"><name pos:start="51:20" pos:end="51:24">block</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:32">offset</name></name> <operator pos:start="51:34" pos:end="51:34">+</operator> <name pos:start="51:36" pos:end="51:41">offset</name></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:33">(<expr pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:13">block</name> <operator pos:start="55:15" pos:end="55:16">==</operator> <name pos:start="55:18" pos:end="55:32">last_sent_block</name></expr>)</condition> <block pos:start="55:35" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:41">

        <expr_stmt pos:start="57:9" pos:end="57:41"><expr pos:start="57:9" pos:end="57:40"><name pos:start="57:9" pos:end="57:14">offset</name> <operator pos:start="57:16" pos:end="57:17">|=</operator> <name pos:start="57:19" pos:end="57:40">RAM_SAVE_FLAG_CONTINUE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="61:5" pos:end="111:5"><if pos:start="61:5" pos:end="77:5">if <condition pos:start="61:8" pos:end="61:41">(<expr pos:start="61:9" pos:end="61:40"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:14">!=</operator> <name pos:start="61:16" pos:end="61:40">RAM_SAVE_CONTROL_NOT_SUPP</name></expr>)</condition> <block pos:start="61:43" pos:end="77:5">{<block_content pos:start="63:9" pos:end="75:9">

        <if_stmt pos:start="63:9" pos:end="75:9"><if pos:start="63:9" pos:end="75:9">if <condition pos:start="63:12" pos:end="63:44">(<expr pos:start="63:13" pos:end="63:43"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:18">!=</operator> <name pos:start="63:20" pos:end="63:43">RAM_SAVE_CONTROL_DELAYED</name></expr>)</condition> <block pos:start="63:46" pos:end="75:9">{<block_content pos:start="65:13" pos:end="73:13">

            <if_stmt pos:start="65:13" pos:end="73:13"><if pos:start="65:13" pos:end="69:13">if <condition pos:start="65:16" pos:end="65:31">(<expr pos:start="65:17" pos:end="65:30"><name pos:start="65:17" pos:end="65:26">bytes_xmit</name> <operator pos:start="65:28" pos:end="65:28">&gt;</operator> <literal type="number" pos:start="65:30" pos:end="65:30">0</literal></expr>)</condition> <block pos:start="65:33" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:39">

                <expr_stmt pos:start="67:17" pos:end="67:39"><expr pos:start="67:17" pos:end="67:38"><name pos:start="67:17" pos:end="67:36"><name pos:start="67:17" pos:end="67:25">acct_info</name><operator pos:start="67:26" pos:end="67:26">.</operator><name pos:start="67:27" pos:end="67:36">norm_pages</name></name><operator pos:start="67:37" pos:end="67:38">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="69:15" pos:end="73:13">else if <condition pos:start="69:23" pos:end="69:39">(<expr pos:start="69:24" pos:end="69:38"><name pos:start="69:24" pos:end="69:33">bytes_xmit</name> <operator pos:start="69:35" pos:end="69:36">==</operator> <literal type="number" pos:start="69:38" pos:end="69:38">0</literal></expr>)</condition> <block pos:start="69:41" pos:end="73:13">{<block_content pos:start="71:17" pos:end="71:38">

                <expr_stmt pos:start="71:17" pos:end="71:38"><expr pos:start="71:17" pos:end="71:37"><name pos:start="71:17" pos:end="71:35"><name pos:start="71:17" pos:end="71:25">acct_info</name><operator pos:start="71:26" pos:end="71:26">.</operator><name pos:start="71:27" pos:end="71:35">dup_pages</name></name><operator pos:start="71:36" pos:end="71:37">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="111:5">else <block pos:start="77:12" pos:end="111:5">{<block_content pos:start="79:9" pos:end="109:9">

        <expr_stmt pos:start="79:9" pos:end="79:71"><expr pos:start="79:9" pos:end="79:70"><name pos:start="79:9" pos:end="79:13">pages</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <call pos:start="79:17" pos:end="79:70"><name pos:start="79:17" pos:end="79:30">save_zero_page</name><argument_list pos:start="79:31" pos:end="79:70">(<argument pos:start="79:32" pos:end="79:32"><expr pos:start="79:32" pos:end="79:32"><name pos:start="79:32" pos:end="79:32">f</name></expr></argument>, <argument pos:start="79:35" pos:end="79:39"><expr pos:start="79:35" pos:end="79:39"><name pos:start="79:35" pos:end="79:39">block</name></expr></argument>, <argument pos:start="79:42" pos:end="79:47"><expr pos:start="79:42" pos:end="79:47"><name pos:start="79:42" pos:end="79:47">offset</name></expr></argument>, <argument pos:start="79:50" pos:end="79:50"><expr pos:start="79:50" pos:end="79:50"><name pos:start="79:50" pos:end="79:50">p</name></expr></argument>, <argument pos:start="79:53" pos:end="79:69"><expr pos:start="79:53" pos:end="79:69"><name pos:start="79:53" pos:end="79:69">bytes_transferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="109:9"><if pos:start="81:9" pos:end="91:9">if <condition pos:start="81:12" pos:end="81:22">(<expr pos:start="81:13" pos:end="81:21"><name pos:start="81:13" pos:end="81:17">pages</name> <operator pos:start="81:19" pos:end="81:19">&gt;</operator> <literal type="number" pos:start="81:21" pos:end="81:21">0</literal></expr>)</condition> <block pos:start="81:24" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:49">

            <comment type="block" pos:start="83:13" pos:end="87:15">/* Must let xbzrle know, otherwise a previous (now 0'd) cached

             * page would be stale

             */</comment>

            <expr_stmt pos:start="89:13" pos:end="89:49"><expr pos:start="89:13" pos:end="89:48"><call pos:start="89:13" pos:end="89:48"><name pos:start="89:13" pos:end="89:34">xbzrle_cache_zero_page</name><argument_list pos:start="89:35" pos:end="89:48">(<argument pos:start="89:36" pos:end="89:47"><expr pos:start="89:36" pos:end="89:47"><name pos:start="89:36" pos:end="89:47">current_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="91:11" pos:end="109:9">else if <condition pos:start="91:19" pos:end="91:59">(<expr pos:start="91:20" pos:end="91:58"><operator pos:start="91:20" pos:end="91:20">!</operator><name pos:start="91:21" pos:end="91:34">ram_bulk_stage</name> <operator pos:start="91:36" pos:end="91:37">&amp;&amp;</operator> <call pos:start="91:39" pos:end="91:58"><name pos:start="91:39" pos:end="91:56">migrate_use_xbzrle</name><argument_list pos:start="91:57" pos:end="91:58">()</argument_list></call></expr>)</condition> <block pos:start="91:61" pos:end="109:9">{<block_content pos:start="93:13" pos:end="107:13">

            <expr_stmt pos:start="93:13" pos:end="95:76"><expr pos:start="93:13" pos:end="95:75"><name pos:start="93:13" pos:end="93:17">pages</name> <operator pos:start="93:19" pos:end="93:19">=</operator> <call pos:start="93:21" pos:end="95:75"><name pos:start="93:21" pos:end="93:36">save_xbzrle_page</name><argument_list pos:start="93:37" pos:end="95:75">(<argument pos:start="93:38" pos:end="93:38"><expr pos:start="93:38" pos:end="93:38"><name pos:start="93:38" pos:end="93:38">f</name></expr></argument>, <argument pos:start="93:41" pos:end="93:42"><expr pos:start="93:41" pos:end="93:42"><operator pos:start="93:41" pos:end="93:41">&amp;</operator><name pos:start="93:42" pos:end="93:42">p</name></expr></argument>, <argument pos:start="93:45" pos:end="93:56"><expr pos:start="93:45" pos:end="93:56"><name pos:start="93:45" pos:end="93:56">current_addr</name></expr></argument>, <argument pos:start="93:59" pos:end="93:63"><expr pos:start="93:59" pos:end="93:63"><name pos:start="93:59" pos:end="93:63">block</name></expr></argument>,

                                     <argument pos:start="95:38" pos:end="95:43"><expr pos:start="95:38" pos:end="95:43"><name pos:start="95:38" pos:end="95:43">offset</name></expr></argument>, <argument pos:start="95:46" pos:end="95:55"><expr pos:start="95:46" pos:end="95:55"><name pos:start="95:46" pos:end="95:55">last_stage</name></expr></argument>, <argument pos:start="95:58" pos:end="95:74"><expr pos:start="95:58" pos:end="95:74"><name pos:start="95:58" pos:end="95:74">bytes_transferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="97:13" pos:end="107:13"><if pos:start="97:13" pos:end="107:13">if <condition pos:start="97:16" pos:end="97:28">(<expr pos:start="97:17" pos:end="97:27"><operator pos:start="97:17" pos:end="97:17">!</operator><name pos:start="97:18" pos:end="97:27">last_stage</name></expr>)</condition> <block pos:start="97:30" pos:end="107:13">{<block_content pos:start="105:17" pos:end="105:35">

                <comment type="block" pos:start="99:17" pos:end="103:19">/* Can't send this cached data async, since the cache page

                 * might get updated before it gets to the wire

                 */</comment>

                <expr_stmt pos:start="105:17" pos:end="105:35"><expr pos:start="105:17" pos:end="105:34"><name pos:start="105:17" pos:end="105:26">send_async</name> <operator pos:start="105:28" pos:end="105:28">=</operator> <name pos:start="105:30" pos:end="105:34">false</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:40">/* XBZRLE overflow or normal page */</comment>

    <if_stmt pos:start="117:5" pos:end="139:5"><if pos:start="117:5" pos:end="139:5">if <condition pos:start="117:8" pos:end="117:20">(<expr pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:13">pages</name> <operator pos:start="117:15" pos:end="117:16">==</operator> <operator pos:start="117:18" pos:end="117:18">-</operator><literal type="number" pos:start="117:19" pos:end="117:19">1</literal></expr>)</condition> <block pos:start="117:22" pos:end="139:5">{<block_content pos:start="119:9" pos:end="137:31">

        <expr_stmt pos:start="119:9" pos:end="121:76"><expr pos:start="119:9" pos:end="121:75"><operator pos:start="119:9" pos:end="119:9">*</operator><name pos:start="119:10" pos:end="119:26">bytes_transferred</name> <operator pos:start="119:28" pos:end="119:29">+=</operator> <call pos:start="119:31" pos:end="121:75"><name pos:start="119:31" pos:end="119:46">save_page_header</name><argument_list pos:start="119:47" pos:end="121:75">(<argument pos:start="119:48" pos:end="119:48"><expr pos:start="119:48" pos:end="119:48"><name pos:start="119:48" pos:end="119:48">f</name></expr></argument>, <argument pos:start="119:51" pos:end="119:55"><expr pos:start="119:51" pos:end="119:55"><name pos:start="119:51" pos:end="119:55">block</name></expr></argument>,

                                               <argument pos:start="121:48" pos:end="121:74"><expr pos:start="121:48" pos:end="121:74"><name pos:start="121:48" pos:end="121:53">offset</name> <operator pos:start="121:55" pos:end="121:55">|</operator> <name pos:start="121:57" pos:end="121:74">RAM_SAVE_FLAG_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="131:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:23">(<expr pos:start="123:13" pos:end="123:22"><name pos:start="123:13" pos:end="123:22">send_async</name></expr>)</condition> <block pos:start="123:25" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:58">

            <expr_stmt pos:start="125:13" pos:end="125:58"><expr pos:start="125:13" pos:end="125:57"><call pos:start="125:13" pos:end="125:57"><name pos:start="125:13" pos:end="125:33">qemu_put_buffer_async</name><argument_list pos:start="125:34" pos:end="125:57">(<argument pos:start="125:35" pos:end="125:35"><expr pos:start="125:35" pos:end="125:35"><name pos:start="125:35" pos:end="125:35">f</name></expr></argument>, <argument pos:start="125:38" pos:end="125:38"><expr pos:start="125:38" pos:end="125:38"><name pos:start="125:38" pos:end="125:38">p</name></expr></argument>, <argument pos:start="125:41" pos:end="125:56"><expr pos:start="125:41" pos:end="125:56"><name pos:start="125:41" pos:end="125:56">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="127:11" pos:end="131:9">else <block pos:start="127:16" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:52">

            <expr_stmt pos:start="129:13" pos:end="129:52"><expr pos:start="129:13" pos:end="129:51"><call pos:start="129:13" pos:end="129:51"><name pos:start="129:13" pos:end="129:27">qemu_put_buffer</name><argument_list pos:start="129:28" pos:end="129:51">(<argument pos:start="129:29" pos:end="129:29"><expr pos:start="129:29" pos:end="129:29"><name pos:start="129:29" pos:end="129:29">f</name></expr></argument>, <argument pos:start="129:32" pos:end="129:32"><expr pos:start="129:32" pos:end="129:32"><name pos:start="129:32" pos:end="129:32">p</name></expr></argument>, <argument pos:start="129:35" pos:end="129:50"><expr pos:start="129:35" pos:end="129:50"><name pos:start="129:35" pos:end="129:50">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:47"><expr pos:start="133:9" pos:end="133:46"><operator pos:start="133:9" pos:end="133:9">*</operator><name pos:start="133:10" pos:end="133:26">bytes_transferred</name> <operator pos:start="133:28" pos:end="133:29">+=</operator> <name pos:start="133:31" pos:end="133:46">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:18"><expr pos:start="135:9" pos:end="135:17"><name pos:start="135:9" pos:end="135:13">pages</name> <operator pos:start="135:15" pos:end="135:15">=</operator> <literal type="number" pos:start="135:17" pos:end="135:17">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:31"><expr pos:start="137:9" pos:end="137:30"><name pos:start="137:9" pos:end="137:28"><name pos:start="137:9" pos:end="137:17">acct_info</name><operator pos:start="137:18" pos:end="137:18">.</operator><name pos:start="137:19" pos:end="137:28">norm_pages</name></name><operator pos:start="137:29" pos:end="137:30">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:26"><expr pos:start="143:5" pos:end="143:25"><call pos:start="143:5" pos:end="143:25"><name pos:start="143:5" pos:end="143:23">XBZRLE_cache_unlock</name><argument_list pos:start="143:24" pos:end="143:25">()</argument_list></call></expr>;</expr_stmt>



    <return pos:start="147:5" pos:end="147:17">return <expr pos:start="147:12" pos:end="147:16"><name pos:start="147:12" pos:end="147:16">pages</name></expr>;</return>

</block_content>}</block></function>
</unit>
